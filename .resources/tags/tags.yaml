- FrontMatter:
    title: Shift-Left Strategy
    date: 2025-03-17T14:46:11Z
    trustpilot: false
    description: A **Shift-Left Strategy** brings testing, security, and compliance earlier in development, reducing defects, accelerating feedback, and improving quality for faster, more reliable delivery.
    Instructions: |-
      **Use this category only for discussions on Shift-Left Strategy.**  
      The Shift-Left Strategy focuses on integrating critical processes such as testing, security, and compliance earlier in the software development lifecycle. This proactive approach aims to identify and address potential issues sooner, thereby enhancing software quality, reducing defects, and facilitating faster feedback loops, ultimately leading to more reliable delivery.

      **Key Topics:**
      - Principles and benefits of the Shift-Left Strategy in software development.
      - Techniques for integrating testing, security, and compliance early in the development process.
      - Case studies demonstrating the effectiveness of Shift-Left practices.
      - Tools and methodologies that support a Shift-Left approach.
      - The role of collaboration and communication in implementing Shift-Left strategies.
      - Metrics for measuring the impact of Shift-Left initiatives on software quality and delivery speed.

      **Strictly exclude:**
      - Discussions unrelated to software development processes.
      - Misinterpretations of the Shift-Left concept, such as focusing solely on post-development testing or security measures.
      - General Agile or DevOps principles that do not specifically address the Shift-Left Strategy.
    headline:
      cards: []
      title: Shift-Left Strategy
      subtitle: Proactively integrate testing, security, and compliance early in development to enhance quality, speed, and reliability of software delivery.
      content: A proactive approach integrates essential processes such as testing, security, and compliance early in the development lifecycle. This strategy enhances software quality and reliability by minimising defects, fostering rapid feedback, and ensuring that teams can deliver value more efficiently. Topics include risk management, continuous integration, and quality assurance.
      updated: 2025-03-17T14:46:14Z
    concepts:
    - Method
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    ### **Shift-Left Strategy: Enhancing Quality from the Start**

    In modern software development, waiting until the end to test, secure, or review compliance is a costly mistake. The **Shift-Left Strategy** eliminates these risks by integrating critical activities—testing, security, and compliance—early in the development lifecycle.

    By shifting left, teams detect defects sooner, reduce rework, and accelerate feedback loops. This approach enhances software quality, speeds up delivery, and ensures reliability from day one. Whether through **automated testing, security as code, or continuous integration**, embracing a Shift-Left Strategy is a fundamental step towards high-performing, agile, and DevOps-driven teams.

    Don’t wait—**shift left and build quality in from the start**.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\shift-left\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\shift-left
- FrontMatter:
    title: Platform Engineering
    trustpilot: false
    date: 2025-02-11T10:16:54Z
    description: Platform Engineering is the practice of designing, building, and maintaining internal platforms that enable developers to deliver value independently, reliably, and at pace.
    Instructions: |-
      **Use this category only for discussions on Platform Engineering.**  
      Platform engineering is a discipline within software development that centres on the design and construction of internal platforms aimed at improving developer productivity and optimising the application lifecycle. These platforms, known as Internal Developer Platforms (IDPs), offer self-service capabilities, standardised tools, and automated workflows, which empower developers to efficiently create, deploy, and manage applications.

      **Key Topics:**
      - Definition and principles of Platform Engineering
      - Internal Developer Platforms (IDPs) and their components
      - Enhancing developer productivity through platform solutions
      - Automation in the application lifecycle
      - Self-service capabilities for developers
      - Standardisation of tools and processes in software development
      - Integration of DevOps practices within platform engineering
      - Case studies and best practices in implementing IDPs

      **Strictly exclude:**
      - General discussions on Agile, Scrum, or Lean without a direct connection to platform engineering
      - Content that focuses solely on external platforms or services not related to internal development processes
      - Misinterpretations of platform engineering that do not align with the core principles of enhancing developer efficiency and application management.
    headline:
      cards: []
      title: Platform Engineering
      subtitle: Empowering developers through streamlined platforms, self-service tools, and automated workflows for efficient application management.
      content: A discipline centred on creating robust internal platforms that enhance developer efficiency and streamline application lifecycles. Posts should explore self-service capabilities, standardised tools, automated workflows, and the integration of practices that foster collaboration, continuous improvement, and effective resource management within software development teams.
      updated: 2025-02-13T21:02:31Z
    concepts:
    - Practice
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    Platform Engineering is the practice of designing, building, and maintaining internal platforms that enable developers to deliver value independently, reliably, and at pace.

    It focuses on reducing cognitive load by abstracting infrastructure and operational complexity behind well-designed interfaces, tools, and APIs. These platforms are treated as products, with clear ownership, feedback loops, and continuous improvement driven by developer needs.

    A well-functioning platform engineering capability provides paved paths and self-service tooling that support secure, observable, and resilient software delivery—without enforcing constraints that limit innovation. It creates the conditions for fast feedback, safe experimentation, and autonomous delivery across teams.

    The outcome of Platform Engineering is not simply tools, but a coherent developer experience that aligns with organisational strategy and enables continuous value delivery at scale.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\platform-engineering\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\platform-engineering
- FrontMatter:
    title: One Engineering System
    trustpilot: false
    date: 2025-02-11T10:16:54Z
    ResourceId: 6z97VZamnQQ
    description: One Engineering System (1ES) is a strategic standardised, integrated framework designed to streamline software development by unifying tools, processes, and practices across teams. It provides a consistent, scalable foundation that supports high-quality, efficient, and secure software delivery.
    Instructions: |-
      **Use this category only for discussions on One Engineering System (1ES).**  
      The One Engineering System (1ES) is a comprehensive framework aimed at standardising and integrating software development practices across teams. Its purpose is to enhance collaboration, improve efficiency, and ensure high-quality software delivery by unifying tools, processes, and methodologies.

      **Key topics that should be discussed under this category:**
      - The principles and components of the One Engineering System framework.
      - Integration of tools and processes across different teams and departments.
      - Best practices for implementing 1ES in software development environments.
      - The impact of 1ES on software quality, security, and delivery timelines.
      - Case studies or examples of successful 1ES implementations.
      - Comparisons between 1ES and other engineering frameworks or methodologies.
      - Challenges and solutions in adopting a unified engineering system.

      **Strictly exclude** any discussions that deviate from the core principles of 1ES, such as unrelated software development methodologies, personal opinions on engineering practices, or content that does not focus on the integration and standardisation of engineering processes.
    headline:
      cards: []
      title: One Engineering System (1ES)
      subtitle: A unified framework for optimising software development through standardised tools, processes, and practices across teams for enhanced delivery.
      content: A comprehensive framework that integrates tools, processes, and practices to enhance collaboration and efficiency in software development. It emphasises continuous improvement, value delivery, and adaptability, addressing topics such as workflow optimisation, team dynamics, quality assurance, and evidence-based decision-making to foster a culture of innovation and responsiveness.
      updated: 2025-02-13T21:02:39Z
    aliases:
    - /resources/methods/one-engineering-system/
    - /methods/1es/
    - /learn/agile-delivery-kit/strategies/one-engineering-system/
    - /resources/6z97VZamnQQ
    concepts:
    - Strategy
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    The **One Engineering System (1ES)** is a strategic approach to unifying engineering tools and practices across teams to reduce friction, foster collaboration, and enable consistency at scale. It’s about creating a shared engineering backbone that allows teams to move faster and more predictably by removing the chaos of disconnected toolchains and ad hoc workflows.

    At its core, 1ES is not about enforcing a single toolset but about aligning teams around a **common set of engineering standards** that streamline how work gets done—from planning and coding to testing, deploying, and supporting software in production. This shared foundation reduces cognitive overhead, simplifies integration across teams, and makes it easier to deliver high-quality, reliable outcomes.

    A successful 1ES strategy recognises that **tools must serve the way teams work**, not the other way around. Each team should be empowered to adapt their workflows within the shared system, leveraging the strengths of the chosen tools without being constrained by rigid implementations. It’s not about uniformity; it’s about coherence.

    Implementing 1ES requires more than tooling changes—it demands **investment in enablement**. Teams need guidance, training, and support to adopt the system effectively. When done well, 1ES creates the conditions for scalable engineering excellence: clear communication, consistent processes, and a resilient development lifecycle across the organisation.

    > If you want to go fast, go alone. If you want to go far, go together.

    {{< youtube wKg9bG9fsvs >}}

    ### References

    - [One Engineering System (1ES) at Microsoft](https://azure.microsoft.com/en-gb/solutions/devops/devops-at-microsoft/one-engineering-system/)
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\one-engineering-system\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\one-engineering-system
- FrontMatter:
    title: Evidence Based Management
    date: 2025-03-21T14:44:46Z
    trustpilot: false
    ResourceId: dN0v6E1KsNd
    description: Evidence-Based Management (EBM) is a strategy for improving an organisation’s ability to deliver value by making decisions based on evidence, not opinion. It enables data-informed investment in agility, innovation, and outcomes rather than output.
    Instructions: |-
      **Use this category only for discussions on Evidence-Based Management.**  
      Evidence-Based Management (EBM) is a strategic approach aimed at enhancing an organisation's capacity to deliver value by relying on empirical evidence rather than subjective opinions. It focuses on data-informed decision-making to foster agility, innovation, and improved outcomes, steering clear of mere output metrics.

      **Key Topics:**
      1. **Current Value** – Metrics that assess present value delivery, including customer satisfaction, revenue per employee, and product usage.
      2. **Time to Market** – Indicators of responsiveness and speed, such as cycle time, release frequency, and time spent on stabilising releases.
      3. **Ability to Innovate** – Evaluation of innovation capacity through metrics like innovation rate, feature usage, and actual product utilisation.
      4. **Unrealised Value** – Analysis of opportunity costs and potential gains from reducing constraints and enhancing capabilities.
      5. **Empirical Decision-Making** – The importance of using data to inform strategic improvements and prioritise investments.
      6. **Outcome Management** – Transitioning from output-focused metrics to managing for meaningful outcomes and value delivery.

      **Strictly Excluded Topics:**
      - General discussions on Agile or Scrum methodologies without a focus on evidence-based practices.
      - Theoretical or abstract concepts that do not relate directly to the application of data in management decisions.
      - Any content that promotes frameworks or tools without grounding in empirical evidence or metrics.
    headline:
      cards: []
      title: Evidence Based Management
      subtitle: Data-driven strategies for enhancing value delivery, fostering innovation, and making informed decisions in complex environments.
      content: A framework for enhancing organisational performance through informed decision-making, prioritising data over assumptions. Posts should explore metrics for assessing current value, time to market, innovation capacity, and unrealised potential, fostering a culture of continuous improvement and strategic investment in value delivery.
      updated: 2025-03-21T14:44:50Z
    aliases:
    - /methods/ebm/
    - /learn/agile-delivery-kit/strategies/evidence-based-management/
    - /resources/dN0v6E1KsNd
    concepts:
    - Strategy
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    Too many organisations talk about being agile, but they’re still flying blind. Evidence-Based Management (EBM) is a strategy to fix that. It’s not a framework, a methodology, or a tool. It’s a way to stop pretending we’re improving and start proving it.

    EBM gives us a structure for inspecting how well we're delivering value and where to invest next. It’s built around four key areas:

    1. **Current Value** – Are we delivering value now, or are we just burning cash? Customer satisfaction, revenue per employee, and product usage give us the truth.
    2. **Time to Market** – How fast can we learn, deliver, and respond to change? Cycle time, release frequency, and time spent stabilising releases tell us whether we’re built for speed or for bureaucracy.
    3. **Ability to Innovate** – Can we create new value, or are we buried under technical debt and bloated backlogs? Look at innovation rate, feature usage, and how much of the product is actually used.
    4. **Unrealised Value** – What’s the opportunity cost of staying the same? If we had fewer constraints, where could we win?

    These aren’t vanity metrics. They’re signals that help leaders make real decisions about where to focus, where to invest, and what to stop doing. You don’t need a prescription. You need clarity, direction, and feedback.

    EBM enables an empirical approach to strategic improvement. It’s not about tracking everything. It’s about measuring the right things, at the right time, to drive better outcomes. If you're not using data to improve how you deliver value, then you're not doing agility. You're doing theatre.

    If you want to move beyond output metrics and start managing for outcomes, EBM gives you the scaffolding to do that—without pretending there’s a silver bullet. It’s messy. It’s iterative. But it works.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\evidence-based-management\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\evidence-based-management
- FrontMatter:
    title: Definition of Ready
    trustpilot: false
    date: 2025-02-11T10:17:24Z
    description: Ensuring backlog items meet a clear, actionable standard before sprint planning.
    Instructions: |-
      **Use this category only for discussions on Definition of Ready.**  
      The Definition of Ready (DoR) is a crucial Agile practice that ensures backlog items are well-defined and actionable before they enter the sprint planning phase. It serves as a checklist to confirm that user stories or tasks are sufficiently detailed, understood, and feasible for the development team to work on, thereby enhancing the efficiency and effectiveness of the sprint process.

      **Key Topics:**
      - Criteria for establishing a Definition of Ready.
      - Importance of clarity and detail in backlog items.
      - Role of the Product Owner in defining readiness.
      - Techniques for refining user stories to meet DoR.
      - Impact of a well-defined DoR on sprint planning and execution.
      - Common pitfalls in defining backlog items and how to avoid them.
      - Collaboration between team members to achieve a shared understanding of readiness.

      **Strictly exclude:**
      - Discussions on Definition of Done, as it pertains to the completion of work rather than its readiness.
      - General Agile principles that do not specifically address the criteria for backlog item readiness.
      - Misinterpretations of the DoR that deviate from its purpose of ensuring actionable standards for sprint planning.
    headline:
      cards: []
      title: Definition of Ready
      subtitle: Establishing clear criteria for backlog items to ensure readiness for effective planning and execution in iterative workflows.
      content: Establishing actionable criteria for backlog items ensures they are well-defined and ready for prioritisation and execution. Posts should explore techniques for clarifying requirements, enhancing collaboration, and improving workflow efficiency, drawing insights from frameworks and methodologies that support iterative development and continuous improvement.
      updated: 2025-02-13T12:05:02Z
    aliases:
    - /practices/Definition-of-Ready-DoR.html
    - /learn/agile-delivery-kit/practices/definition-of-ready-dor
    - /resources/afLYe__TZKq
    aliasesArchive:
    - /practices/Definition-of-Ready-DoR.html
    - /learn/agile-delivery-kit/practices/definition-of-ready-dor
    concepts:
    - Practice
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    From the perspective of Scrum, the idea of Ready, as applied to a Backlog Item, represents everyone's (Developers, Product Owner, & Stakeholders) understanding of what is needed to implement that Backlog Item. Since this is subjective and not objective, having a definition of what constitutes ready is not possible.

    The danger of having a defined definition of Ready (DoR) is:

    - **False sense of Ready** - First that it creates a false sense of Ready that encompasses the objective points that we can focus on, but misses the subjective. This can lead to false gating, where participants hold each other accountable for failing to achieve something that was not defined in the first place.
    - **Neglecting Refinement** - If things are "ready" then why would we have to understand it better!
    - **False Equivalence with DoD** - Using the DoR terminology generally leads participants to feel that the DoD and the DoR have an equivalence. This is dangerous as the DoD is an absolute boolean proposition, while the subjective nature of the DoR may lead it to be only partially implemented. If it's OK to only partially achieve the DoR, the logical fallacy is that the DoD can also be partially implemented.

    A solution that may enable the effective use of this practice may be to a different formula of naming to create disambiguation between the DoR and the DoD.

    ## Backlog Candidacy Test

    Every candidate Backlog Item should have:

    - has a clear outcome or objective.
    - contains a clear hypothesis.
    - defignes clear telemetry to be collected.

    Once candidacy is achieved then the Team & Stakehodlers can determin Ready with conversation.

    ## Rule of Thumb

    _As a general rule Developers should not take Backlog Item into a Sprint that they do not fully understand and agree, as a team, that there is a reasonable likelihood of being successful._

    ## INVEST

    - I (Independent). The PBI should be self-contained and it should be possible to bring it into progress without a dependency upon another PBI or an external resource.
    - N (Negotiable). A good PBI should leave room for discussion regarding its optimal implementation.
    - V (Valuable). The value a PBI delivers to stakeholders should be clear.
    - E (Estimable). A PBI must have a size relative to other PBIs.
    - S (Small). PBIs should be small enough to estimate with reasonable accuracy and to plan into a time-box such as a Sprint.
    - T (Testable). Each PBI should have clear acceptance criteria which allow its satisfaction to be tested.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\definition-of-ready\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\definition-of-ready
- FrontMatter:
    title: Definition of Done
    trustpilot: false
    date: 2025-02-11T10:17:24Z
    description: Ensure transparency and quality with the Definition of Done (DoD). Align teams on what it means for work to be truly complete.
    Instructions: |-
      **Use this category only for discussions on Definition of Done.**  
      The Definition of Done (DoD) is a critical Agile and Scrum concept that ensures transparency and quality in the delivery of work. It serves as a shared understanding among team members regarding the criteria that must be met for a product increment to be considered complete. The DoD helps to align teams on expectations and promotes accountability, ultimately leading to higher quality outcomes.

      **Key Topics:**
      - The purpose and importance of the Definition of Done in Agile and Scrum frameworks.
      - Criteria that typically comprise a Definition of Done, such as code review, testing, documentation, and acceptance criteria.
      - The role of the Definition of Done in enhancing team collaboration and communication.
      - How the Definition of Done contributes to maintaining product quality and reducing technical debt.
      - Best practices for creating, maintaining, and evolving the Definition of Done within teams.
      - The relationship between the Definition of Done and other Agile artefacts, such as the Product Backlog and Sprint Backlog.
      - Examples of effective Definitions of Done from various Agile teams and projects.

      **Strictly exclude** any discussions that deviate from the core principles of the Definition of Done, such as unrelated project management practices, non-Agile methodologies, or personal opinions on team dynamics that do not directly relate to the DoD.
    headline:
      cards: []
      title: Definition of Done (DoD)
      subtitle: Ensuring Quality, Transparency, and Releasability
      content: The **Definition of Done (DoD)** establishes a shared understanding of what makes a product increment **complete and releasable**, ensuring all work meets a **minimum quality standard**. It enhances transparency, consistency, and empirical decision-making by providing clear criteria for done work. This includes an Organisational Definition of Done that applies across teams, with team-specific extensions as needed. A well-defined DoD is essential for adaptation, accountability, and delivering valuable, verifiable, and production-ready increments.
      updated: 2025-02-13T12:05:05Z
    concepts:
    - Artifact
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    The **Definition of Done (DoD)** establishes a shared understanding of what constitutes a **completed and releasable** product increment. It ensures that all work meets a **minimum quality standard**, providing transparency, consistency, and the ability to make **empirical decisions** based on real-world feedback.

    This document outlines the **Organisational Definition of Done**, which applies across all teams, as well as **team-specific extensions** that may be necessary based on product requirements. It also highlights why the DoD is essential for **transparency, adaptation, and ensuring that every increment is valuable, verifiable, and production-ready**.

    ## Organisational Definition of Done

    For work to be considered **Done**, it must meet the following **minimum standard**:

    - **Live and in production**: The increment must be deployed and available for end users.
    - **Collecting telemetry**: The increment must be instrumented with appropriate logging, monitoring, and analytics to gather data on its impact.
    - **Supporting or diminishing the starting hypothesis**: The increment must validate or disprove the assumptions that justified its development.

    ## Team-Specific Definition of Done

    Each team must define what is required for a product increment to be considered **releasable** while ensuring full compliance with the **Organisational Definition of Done**. The organisational DoD sets the **minimum quality standard** that all teams must meet. If additional criteria are needed based on product-specific requirements, teams may extend their Definition of Done beyond the organisational standard but never below it. This ensures a consistent, high-quality standard across all teams and prevents discrepancies in what is considered Done.

    Each team may have additional criteria, but they must adhere to the **organisational DoD** as a minimum. Typical extensions include:

    - Code is peer-reviewed and merged to main.
    - Automated tests (unit, integration, performance, security) are written and pass.
    - Feature flags or rollback mechanisms are in place.
    - Documentation is updated.
    - No critical bugs or unresolved incidents are present.
    - User feedback mechanisms are implemented.

    If there are multiple teams working on a single product, those teams must agree on a shared **Definition of Done** and ensure it is consistently honoured.

    ## Validation and Continuous Improvement

    - Each deployed increment should be evaluated based on **real-world telemetry**.
    - Adjustments should be made based on the evidence collected, ensuring iterative learning and refinement.
    - The DoD should be reviewed periodically to incorporate evolving engineering and business needs.
    - The **purpose of the Definition of Done is to provide transparency** into what has been achieved and ensure that increments are **usable and releasable**.

    By **strictly adhering to and continuously refining our DoD**, we ensure that every increment is **valuable, verifiable, and ready for real-world use**.

    ## Why the Definition of Done Matters

    The Definition of Done is more than a checklist—it is the bedrock of transparency and adaptation. Without a clear and universally understood DoD, teams risk misalignment, rework, and poor decision-making.

    ### Transparency

    - **Shared Understanding**: The DoD ensures that every stakeholder, from developers to leadership, understands what "done" truly means.
    - **Clear Expectations**: Teams, Product Managers, and business leaders operate with full visibility into what work is **ready for use versus work-in-progress**.
    - **Trust in Delivery**: A well-defined DoD reduces ambiguity, improving confidence in the quality and completeness of increments.

    ### Enabling Adaptation

    - **Empirical Decision-Making**: The DoD ensures increments are deployed with real-world telemetry, allowing teams to inspect and adapt based on actual data rather than assumptions.
    - **Minimising Risk**: By enforcing rigorous completion criteria, the DoD prevents half-baked work from reaching users, reducing technical debt and ensuring fast, safe iteration.
    - **Faster Feedback Loops**: A strong DoD accelerates learning, allowing teams to course-correct sooner and focus on what truly delivers value.

    ## Done Means Releasable

    When a **Product Backlog item** or an **Increment** is described as **Done**, everyone must understand what that means. This ensures **transparency**, the foundation of any empirical system. Without a consistent Definition of Done, teams cannot know what it takes to get something finished.

    A shared Definition of Done allows us to:

    1. Maintain **Transparency** of what we have **Done**.
    2. Understand how much work is required to deliver an item.
    3. Create an agreement of what to **show at the Sprint Review**.
    4. **Protect our Brand!**

    A releasable product increment adheres to all aspects of quality, with **no corners cut** during development. This ensures that Product Management has the choice to release at any time, rather than requiring additional work before shipping.

    The Definition of Done is the **commitment to quality for the Increment**. Creating and adhering to a usable increment that meets the DoD ensures **predictable, high-quality delivery**.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\definition-of-done\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\definition-of-done
- FrontMatter:
    title: Continuous Improvement
    date: 2025-03-21T13:28:30Z
    trustpilot: false
    description: Continuous Improvement is the ongoing practice of relentless reflection and adaptation, driven by empirical evidence, aimed at consistently enhancing processes, products, and team effectiveness. It embodies a commitment to incremental and measurable advancements, fostering a culture of proactive experimentation, rapid feedback, and learning to achieve sustainable and strategic business agility.
    Instructions: |-
      **Use this category only for discussions on Continuous Improvement.**  
      Continuous Improvement is the ongoing practice of relentless reflection and adaptation, driven by empirical evidence, aimed at consistently enhancing processes, products, and team effectiveness. It embodies a commitment to incremental and measurable advancements, fostering a culture of proactive experimentation, rapid feedback, and learning to achieve sustainable and strategic business agility.

      **Key Topics:**
      - The role of Continuous Improvement in Business Agility
      - Empirical evidence and data-driven decision-making
      - Techniques for fostering a culture of experimentation and learning
      - Strategies for integrating Continuous Improvement into organisational processes
      - The impact of Continuous Improvement on team effectiveness and responsiveness
      - Case studies demonstrating successful Continuous Improvement initiatives
      - Tools and frameworks that support Continuous Improvement (e.g., Plan-Do-Check-Act, Kaizen)
      - The relationship between Continuous Improvement and Agile methodologies
      - Overcoming challenges in implementing Continuous Improvement practices

      **Strictly exclude:**
      - Discussions unrelated to the principles of Continuous Improvement
      - Misinterpretations of Continuous Improvement as a one-time initiative
      - Content that does not align with the philosophies of Agile, Lean, or Evidence-Based Management
    headline:
      cards: []
      title: Continuous Improvement
      subtitle: Fostering a culture of reflection and adaptation to enhance processes, products, and team effectiveness through evidence-driven practices.
      content: A commitment to ongoing reflection and adaptation, this classification emphasises the importance of using empirical evidence to enhance processes, products, and team dynamics. It encompasses topics such as performance evaluation, proactive experimentation, rapid feedback loops, and fostering a culture of learning to drive sustainable organisational success.
      updated: 2025-03-21T13:28:32Z
    concepts:
    - Principle
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    Continuous Improvement is a **first principle** of Business Agility, essential for any organisation seeking resilience and sustainable success in today's complex and rapidly evolving markets. It represents an ongoing commitment to reflecting on outcomes, evaluating performance through empirical evidence, and rapidly adapting strategies based on what is learned. Rather than being a one-time initiative, Continuous Improvement becomes part of the organisational ethos, guiding leaders and teams toward more effective, responsive, and adaptive ways of working.

    This principle underpins an organisation’s ability to respond swiftly to market shifts and customer needs. It encourages proactive experimentation and embraces a disciplined approach to decision-making grounded in real data and experiences. By embedding Continuous Improvement into their core culture, organisations foster environments that not only embrace change but leverage it as a competitive advantage, consistently driving greater value and innovation.

    ### Continuous Improvement in Lean

    Lean thinking places Continuous Improvement at its core through the philosophy of "Kaizen," which emphasises small, regular, and incremental improvements. Lean organisations actively seek out and eliminate waste, optimising their processes to maximise customer value. Continuous Improvement in Lean involves engaging every team member at every level to suggest and implement improvements, creating a culture of collective ownership and constant learning. By embracing this principle, Lean organisations ensure they remain agile, efficient, and adaptive in responding to changing business environments.

    ### Continuous Improvement in Scrum

    Scrum explicitly embeds Continuous Improvement as a foundational principle through its structured cycles of transparency, inspection, and adaptation. Every Sprint provides teams with the opportunity to reflect on outcomes and performance, using empirical evidence to inform their next steps. The Sprint Retrospective is a dedicated event specifically designed to foster continuous reflection, collaborative learning, and incremental enhancements. By making Continuous Improvement explicit, Scrum ensures that teams regularly pause, assess, and adapt—sustaining a disciplined focus on becoming progressively more effective.

    ### Continuous Improvement in Kanban

    In Kanban, Continuous Improvement is driven by visualisation, explicit policies, and workflow optimisation. By clearly visualising the flow of work and making bottlenecks visible, teams naturally uncover areas for improvement. Kanban encourages incremental adjustments rather than disruptive change, emphasising evolutionary rather than revolutionary improvements. Teams leverage metrics such as cycle time, throughput, and flow efficiency to inform data-driven improvements, continuously refining their workflows to increase predictability, reliability, and value delivery.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\continuous-improvement\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\continuous-improvement
- FrontMatter:
    title: Continuous Delivery
    date: 2025-03-21T13:37:32Z
    trustpilot: false
    description: Continuous Delivery is the practice of frequently delivering small increments of valuable product directly to real users, enabling rapid feedback, validation, and continuous improvement from the very first iteration.
    Instructions: |-
      **Use this category only for discussions on Continuous Delivery.**  
      Continuous Delivery is a disciplined software delivery practice that focuses on producing software in short, reliable cycles, ensuring that it can be released at any moment. The purpose of this category is to explore the principles, practices, and benefits of Continuous Delivery, emphasising its role in enhancing software quality and responsiveness to user needs.

      **Key topics to be discussed under this category:**
      - Definition and principles of Continuous Delivery
      - The role of automation in testing, integration, and deployment
      - Techniques for delivering small, incremental improvements
      - The importance of rapid feedback and validation from users
      - Strategies for reducing errors and improving software quality
      - Cultural aspects of Continuous Delivery, including continuous learning and innovation
      - Case studies and examples of successful Continuous Delivery implementations
      - Tools and frameworks that support Continuous Delivery practices

      **Strictly exclude** unrelated content such as general software development practices that do not specifically address Continuous Delivery, discussions on unrelated methodologies (e.g., Agile without a focus on delivery), or misinterpretations of Continuous Delivery principles.
    headline:
      cards: []
      title: Continuous Delivery
      subtitle: Streamlined software delivery for rapid user feedback and continuous improvement through reliable, incremental releases.
      content: A disciplined approach to software delivery that emphasises frequent, incremental releases directly to users, enabling swift validation of ideas and continuous enhancement. Posts should explore automation in testing and deployment, user feedback mechanisms, risk management, and strategies for fostering a culture of innovation and responsiveness.
      updated: 2025-03-21T13:37:35Z
    aliases:
    - /learn/agile-delivery-kit/first-principals/continuous-delivery/
    concepts:
    - Practice
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    Continuous Delivery is a disciplined software delivery practice aimed at producing software in short, reliable cycles, ensuring that it can be released at any moment. It involves consistently delivering small, incremental improvements directly into the hands of real users, from the very first iteration.

    According to Jez Humble, Continuous Delivery is:

    > "The ability to get changes—features, configuration changes, bug fixes, experiments—into production or into the hands of users safely, quickly, and in a sustainable way."

    This practice allows teams to rapidly validate assumptions, gather user feedback, and iterate towards the most valuable outcomes. By automating key elements like testing, integration, and deployment, Continuous Delivery reduces the risk of errors, improves software quality, and accelerates time-to-value.

    Teams embracing Continuous Delivery can swiftly adapt to market demands and stakeholder feedback, fostering a culture of continuous learning, innovation, and responsiveness.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\continuous-delivery\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\continuous-delivery
- FrontMatter:
    title: Competence
    date: 2025-03-21T14:44:55Z
    trustpilot: false
    description: Competence is a first principle that demands continuous development and demonstrable capability. It is the foundation of professionalism—without it, there can be no trust, no quality, and no real progress.
    Instructions: |-
      **Use this category only for discussions on Competence.**  
      Competence is a foundational principle in Agile, Scrum, DevOps, and Lean methodologies that emphasises the necessity for continuous development and demonstrable capability. It underpins professionalism, ensuring that trust, quality, and progress are achievable within teams and organisations.

      **Key Topics:**
      - The importance of continuous learning and skill development in Agile and DevOps environments.
      - The role of competence in delivering quality outcomes and maintaining trust within teams.
      - Strategies for fostering a culture of competence, including deliberate practice and mastery.
      - The distinction between performative activity and genuine progress in professional settings.
      - The impact of competence on decision-making, action-taking, and commitment fulfilment.
      - Methods for inspecting and adapting competence over time to ensure ongoing effectiveness.

      **Strictly exclude:**  
      Discussions that focus on unrelated concepts such as team dynamics without reference to competence, tools or processes that do not directly relate to the development of skills and capabilities, or any misinterpretations of competence that do not align with the principles of professionalism and quality delivery.
    headline:
      cards: []
      title: Competence
      subtitle: Building professional effectiveness through continuous skill development and mastery for quality outcomes and trust.
      content: Competence encompasses the ongoing enhancement of skills and knowledge essential for delivering high-quality results. It involves critical thinking, effective decision-making, and the ability to adapt in complex environments. Posts should explore themes of continuous learning, mastery, and the practical application of expertise in professional settings.
      updated: 2025-03-21T14:44:57Z
    ResourceId: I3eGjbYOnzu
    aliases:
    - /resources/I3eGjbYOnzu
    sitemap:
      filename: sitemap.xml
      priority: 0.7
    concepts:
    - Principle
  BodyContent: |
    Competence is the foundation for professional effectiveness. It requires individuals and organisations to actively develop, demonstrate, and apply the skills, knowledge, and judgement necessary to deliver quality outcomes. Without competence, no framework, process, or tool can succeed.

    Competence as a first principle demands continuous learning, deliberate practice, and a commitment to mastery. It is not assumed. It must be earned, inspected, and adapted over time. It’s what separates performative activity from real progress.

    If you can’t execute with competence, you’re gambling with quality, trust, and value delivery. Every decision, every action, every commitment must be grounded in the capability to follow through with professionalism and expertise.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\competence\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\competence
- FrontMatter:
    title: Common Goals
    date: 2025-03-21T14:45:01Z
    description: Common Goals are a first principle of effective delivery. They align strategy with execution, enabling every decision, every Sprint, and every line of code to serve a shared purpose. Without them, you don’t have a system—you have disconnected activity.
    Instructions: |-
      **Use this category only for discussions on Common Goals.**  
      The category of Common Goals focuses on the foundational principle of aligning strategy with execution within Agile and DevOps frameworks. It emphasises the importance of shared objectives that guide decision-making and connect individual contributions to the overall mission of the organisation. This alignment is crucial for fostering effective collaboration, reducing waste, and enhancing accountability across teams.

      **Key Topics:**
      - Definition and significance of Common Goals in Agile and DevOps.
      - The role of Common Goals in creating alignment and ownership within teams.
      - The relationship between strategic goals and tactical commitments, including Product Goals and Sprint Goals.
      - The use of frameworks like OKRs (Objectives and Key Results) to operationalise Common Goals.
      - The impact of Common Goals on organisational performance and adaptability.
      - Techniques for ensuring that all team efforts are aligned with the overarching strategic objectives.

      **Strictly exclude** discussions that deviate from the core concept of Common Goals, such as unrelated project management techniques, personal anecdotes, or vague motivational content that does not connect to the principles of Agile, Scrum, or DevOps.
    headline:
      cards: []
      title: Common Goals
      subtitle: Aligning strategic objectives with execution to foster collaboration, ownership, and meaningful outcomes across all levels of delivery.
      content: Common Goals serve as the foundation for effective delivery, ensuring that strategic objectives are clearly defined and understood across all levels. They foster collaboration, enhance accountability, and streamline decision-making, enabling teams to prioritise work that aligns with shared outcomes. Posts should explore alignment techniques, goal-setting frameworks, and the impact of clarity on performance.
      updated: 2025-03-21T14:57:14Z
    ResourceId: K-0Kt7CHeQw
    trustpilot: false
    aliases:
    - /learn/agile-delivery-kit/first-principals/common-goals/
    - /resources/K-0Kt7CHeQw
    sitemap:
      filename: sitemap.xml
      priority: 0.7
    concepts:
    - Principle
  BodyContent: |
    Here’s a rewritten version of your text, reframed around **Common Goals** as the first principle:

    ---

    Common Goals are a first principle of effective delivery. They align strategy with execution, enabling every decision, every Sprint, and every line of code to serve a shared purpose. Without them, you don’t have a system—you have disconnected activity.

    At the heart of any effective organisation lies a shared understanding of its **common goals**. These are not aspirational posters or vague mission statements. They are the unifying strategic objectives that guide decisions, focus effort, and connect the daily work of individuals to something that matters.

    When participants and stakeholders understand these goals—and more importantly, how their work contributes to achieving them—alignment happens. This is not a nice-to-have; it's the baseline for creating adaptive, responsive, and high-performing systems of work.

    ### Why Common Goals Matter

    Common goals create the **conditions for ownership**. They give people clarity, and with clarity comes better decisions, better collaboration, and better outcomes. When everyone is working toward the same strategic objectives, it reduces noise. It removes waste. It makes trade-offs visible.

    This isn’t about command-and-control alignment. It’s about enabling distributed decision-making within a shared context. When teams and individuals understand the why behind their work, accountability becomes real.

    Common goals also reduce friction. They allow teams to prioritise without waiting for permission. They surface misalignments early. And they give leaders something concrete to inspect and adapt against.

    ### Strategic Goals Require Tactical Commitment

    Strategic goals are meaningless without action. In effective organisations, strategic intent flows through every level of delivery. This demands **tactical commitment**—clear, observable goals at every level of the system of work.

    In Scrum, we operationalise this through:

    - **Product Goal** – A long-term strategic objective that orients the Product Backlog and defines the value trajectory of the product.
    - **Sprint Goal** – A tactical commitment by the Scrum Team to achieve a coherent outcome within the Sprint.
    - **Nexus Sprint Goal** – In a scaled environment, this ensures multiple teams are delivering toward the same outcome.

    If you’re using **OKRs (Objectives and Key Results)**, these map cleanly to this structure:

    - The **Objective** is the goal.
    - The **Key Results** are how you’ll know if you’re getting there.

    Well-formed goals follow a simple pattern:  
    **“Achieve [measurable outcome] to enable [desired impact]”**

    For example:

    - _“Improve activation rate by 15% to increase first-week retention”_
    - _“Reduce cycle time from 12 to 5 days to improve delivery predictability”_

    This format keeps goals outcome-focused and value-oriented—avoiding the trap of turning goals into task lists.

    Without tactical goals aligned to strategy, you end up with busy teams delivering work that doesn’t matter. Make sure every Sprint goal, product milestone, or OKR traces back to a common organisational purpose.

    ### Summary

    If people don’t know where they’re going, the system will optimise for busywork. Strategic alignment through **Common Goals** ensures that the organisation is not just moving, but moving in the right direction.

    If your team doesn’t know how their work connects to strategic goals, fix that first. Everything else is noise.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\common-goals\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\common-goals
- FrontMatter:
    title: Agile Product Operating Model
    date: 2025-03-21T09:30:34Z
    description: Transform your organisation with the Agile Product Operating Model, blending agile practices and product management to deliver consistent, customer-focused value.
    Instructions: |-
      **Use this category only for discussions on Agile Product Operating Model.**  
      The Agile Product Operating Model (APOM) is a framework that integrates agile methodologies with product management principles to enhance organisational effectiveness in delivering customer-centric value. It shifts the focus from traditional project-based approaches to a product-oriented mindset, fostering continuous delivery and responsiveness to market needs.

      **Key Topics:**
      - Transitioning from a project to a product ethos
      - Principles of the Agile Product Operating Model
      - Integration of Professional Scrum and product management practices
      - Development of business and technology roadmaps
      - Operational stability and governance in product delivery
      - Role of people and organisational structure in APOM
      - Data-driven measures and incentives for performance
      - Agile processes for collaboration and iterative delivery
      - Evidence-Based Management (EBM) as a decision-making framework
      - Continuous improvement and optimisation of product value

      **Strictly exclude** discussions that focus solely on traditional project management methodologies, unrelated agile practices that do not pertain to product management, or any content that misrepresents the core principles of the Agile Product Operating Model.
    headline:
      cards: []
      title: Agile Product Operating Model
      subtitle: Transform your organisation by integrating product management with adaptive practices for consistent, customer-driven value delivery.
      content: A framework for integrating product management with adaptive methodologies, fostering a culture of continuous value delivery. Posts should explore product-centric strategies, evidence-based decision-making, team dynamics, and the interplay of governance and flow, ensuring alignment with customer needs and market responsiveness.
      updated: 2025-03-21T09:30:37Z
    trustpilot: false
    concepts:
    - Framework
    aliases:
    - /agile-product-operating-model
    - /methods/agile-product-operating-model/
    - /learn/agile-delivery-kit/strategies/agile-product-operating-model/
    sitemap:
      filename: sitemap.xml
      priority: 0.7
  BodyContent: |
    The Agile Product Operating Model (APOM) is a set of principles that combines contemporary product management strategies with agile ways of working, providing organisations with a solid basis for consistently delivering value. It embodies a product ethos, aligning the entire organisation around well-defined and measurable outcomes.

    ## Shifting from Project to Product Ethos

    Project thinking typically centres around fixed milestones and rigid planning, measuring success narrowly by adherence to timelines and budgets. While projects themselves are not necessarily an issue, an over-reliance on a project mindset restricts flexibility, hinders team adaptability, and distracts from a clear and consistent focus on delivering genuine value.

    In contrast, a product ethos focuses on continuous delivery of value, clear definition of desired outcomes, and responsiveness to customer and market feedback. Products act as vehicles through which organisations strategically invest, manage resources, and consistently deliver value. Ideally, every product should have clearly defined boundaries, recognised stakeholders, distinct users, and measurable value, aligning the entire organisation around real customer requirements.

    Projects can still have a place within a product-centric model. Consider cross-product initiatives, such as GDPR compliance, which impact multiple products. In this scenario, product leadership carefully balances these overarching needs with specific product goals, integrating compliance teams as key stakeholders who actively influence the Product Backlog to ensure alignment and value maximisation.

    ## Defining the Agile Product Operating Model

    An operating model itself isn't new—it provides a holistic framework describing how a company delivers on its strategy. APOM specifically adapts this concept for products, embedding agility into the organisational fabric. Each product operates under its tailored Agile Product Operating Model, capable of evolving in response to insights and market dynamics.

    The Agile Product Operating Model integrates Professional Scrum, product thinking, and contemporary product management practices to enable organisations to swiftly adapt, evolve, and deliver valuable, customer-focused products. Each product within this model incorporates:

    - **Business Roadmap**: Clearly connecting the product to broader business strategy.
    - **Technology Roadmap**: Defining how technology will evolve to support strategic goals.
    - **Operational Stability**: Transparent service levels for clarity.
    - **Governance and Flow**: Management and control of changes.
    - **Total Cost of Value**: Understanding the economics of value and cost.

    ### Core Components of APOM

    The Agile Product Operating Model consists of interconnected elements reinforcing one another:

    - **People and Organisation**: Clear roles, responsibilities, and organisational structure.
    - **Measures and Incentives**: Data-driven performance indicators and communication of success.
    - **Agile Processes**: Methods for collaboration, communication, and iterative delivery.
    - **Governance**: Clear decision-making frameworks, oversight, and control mechanisms.
    - **Culture and Behaviour**: Core values, beliefs, attitudes, and rules influencing actions.

    The Agile Product Operating Model is not a prescriptive or one-size-fits-all approach; instead, it offers flexible guidance enabling organisations to craft their own product-centric operating model. Organisations don't 'implement' APOM—they actively shape and continuously adapt their version of it, reflecting their unique circumstances and evolving requirements.

    ## Evidence-Based Decision Making

    Transparency and visibility underpin effective decision-making. By making critical information readily accessible, organisations empower teams and leaders to make informed decisions, break down silos, and foster a culture of open communication and continuous learning.

    [Evidence-Based Management (EBM)]({{< ref "/tags/evidence-based-management" >}}) is fundamental to the Agile Product Operating Model, ensuring decisions are grounded in measurable outcomes and purposeful experimentation. By openly sharing these outcomes, teams can effectively manage, measure, and optimise product value. EBM promotes continuous improvement, precise measurement of value, proactive risk management, and strategic investment decisions, prioritising empirical evidence over intuition or bias.

    The Agile Product Operating Model isn't merely about agility for its own sake; it leverages existing agile investments, aligning teams and stakeholders around products as primary drivers of sustainable, measurable value.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\agile-product-operating-model\_index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\tags\agile-product-operating-model

