- FrontMatter:
    title: Why Most Scrum Masters Are Failing and What They Should Know
    description: Many Scrum Masters lack core Scrum knowledge and technical skills, leading to poor team support. Learn key competencies needed for effective, measurable impact.
    ResourceId: VTjU5Wl2XWU
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 51730
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2024-09-05
    weight: 200
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: the-incompetent-scrum-master-why-most-are-failing-and-what-they-should-know
    aliases:
    - /resources/VTjU5Wl2XWU
    aliasesArchive:
    - /blog/the-incompetent-scrum-master-why-most-are-failing-and-what-they-should-know
    - /blog/why-most-scrum-masters-are-failing-and-what-they-should-know/
    - /the-incompetent-scrum-master-why-most-are-failing-and-what-they-should-know
    - /why-most-scrum-masters-are-failing-and-what-they-should-know
    - /blog/why-most-scrum-masters-are-failing-and-what-they-should-know
    - /resources/blog/the-incompetent-scrum-master-why-most-are-failing-and-what-they-should-know
    tags:
    - Pragmatic Thinking
    - Software Development
    - Agile Frameworks
    - Competence
    - Scrum Master
    - Agile Product Management
    - Agile Transformation
    - Professional Scrum
    - Scrum Team
    - Team Performance
    - Technical Mastery
    categories:
    - Scrum
    - Technical Leadership
    - Product Development
    preview: NKDAgility-technically-whymostscrummastersarefailing-2-2.jpg
    Watermarks:
      description: 2025-05-07T12:58:35Z
  BodyContent: |
    As a [DevOps]({{< ref "/categories/devops" >}}) consultant, Agile consultant, and trainer, I’ve worked with hundreds of companies to improve their software [product development]({{< ref "/categories/product-development" >}}). It’s astonishing how many [Scrum]({{< ref "/categories/scrum" >}}) Masters lack even a basic understanding of Scrum, let alone the expertise required to support the teams they work with.

    A [significant portion of Scrum Masters (about 61%\*)]({{< ref "/resources/signals/linkedin/7211331649312014336" >}}) have either never read the Scrum Guide, lack technical proficiency relevant to their teams, or have only a superficial grasp of how to apply Scrum principles.

    **_It’s no wonder many are being laid off._**

    Frankly, I’m not surprised, and I’d argue that most Scrum Masters are incompetent and should be let go. Unfortunately, some of the 39%\* who are competent are also being affected by these layoffs.

    ## Why are we here?

    About 15 years ago, as "agile" was gaining widespread attention, the supply of individuals with strong technical, business, and organizational expertise remained relatively limited. Building those skills takes time, and the initial talent pool was small.

    Faced with increasing demand for teams and products, companies worldwide struggled to find qualified people. As a result, they pressured recruiters to fill positions quickly. Since there weren’t enough skilled candidates available, companies lowered their standards, filling roles with individuals who had only completed a two-day PSM/CSM certification course.

    **Thus, the position we found ourselves in pre-pandemic!**

    The recent challenges to economic stability have led most companies to "tighten their belts," prompting a closer evaluation of the value they receive for their spending. Agile Coaches and Scrum Masters have largely failed to make a measurable difference—or even to define metrics by which their impact could be assessed. After more than 20 years of agile methodologies, there are still no clear standards or ways to measure the effectiveness of Scrum Masters. Without measurable impact, companies are questioning the need for the expense.

    However, many companies that have reduced their number of Scrum Masters are still hiring—just with higher expectations. Now, they demand [competence]({{< ref "/tags/competence" >}}). They want to know exactly how a [Scrum Master]({{< ref "/tags/scrum-master" >}}) will contribute to the business’s success and how that impact will be measured.

    ## **What should a Scrum Master for a software team know?**

    The core accountability of a Scrum Master is the effectiveness of the [Scrum Team]({{< ref "/tags/scrum-team" >}})! Can you help them be effective if you don't understand the practices within that team's context? Of course not, but what does that look like? What are the practices that you should expect your Scrum Master to understand?

    ![](images/image-1-1.png)
    { .post-img}

    > "A Scrum Master is a [lean]({{< ref "/categories/lean" >}}) agile practitioner with techical mastery, business mastery, and organsiational evolutionary mastery!" - Lyssa Adkins\*\*

    I would expect a Scrum Master for a software team to know:

    - **Scrum**: its values, underlying principles, and how to apply them effectively. This includes understanding the Scrum framework (roles, events, artefacts) and the purpose behind each element.

    - **DevOps**: understand the three ways of DevOps, common practices, and how to apply them effectively. This means knowing automation, infrastructure as code (IaC), and continuous feedback loops.

    - **Modern [Engineering practices]({{< ref "/tags/engineering-practices" >}})**: everything from DevOps, plus... CI/CD, SOLID principles, test-first strategies, progressive rollout strategies, feature flags, 1ES ([One Engineering System]({{< ref "/tags/one-engineering-system" >}})), observability of product. Familiarity with design patterns, refactoring, and coding standards.

    - **Agile/lean beyond Scrum**: a strong understanding of other Agile/lean philosophies like [Kanban]({{< ref "/categories/kanban" >}}), XP (Extreme Programming), and TPS. Know when and how to integrate elements from other frameworks and strategies to complement Scrum.

    - **Release Planning**: understanding what release planning entails, how to break down product roadmaps, and how to forecast releases while balancing priorities. Be able to facilitate discussions with the [Product Owner]({{< ref "/tags/product-owner" >}}) and Developers about product [increment]({{< ref "/tags/increment" >}}) goals.

    - **[Product Discovery]({{< ref "/tags/product-discovery" >}}) & Validation**: understanding what needs to be built and how to make decisions based on limited knowlage. Know and understand evidence-based management and hypothesis-driven engineering practices.

    - **Stakeholder Management**: understanding how to work with stakeholders, communicate progress, manage expectations, and foster alignment. Know how to teach the team to shield themselves from external pressure while still delivering value.

    - **[Scaling]({{< ref "/tags/scaling" >}}) Agile**: Understand frameworks for scaling Agile, such as Descaling, LeSS, or Nexus. Be able to coach teams on how to function effectively within a scaled environment and manage dependencies.

    - **[Coaching]({{< ref "/tags/coaching" >}}) and Facilitation Skills**: the ability to coach the team towards self-management, [continuous improvement]({{< ref "/tags/continuous-improvement" >}}), and collaboration. Skilled in facilitation techniques like liberating structires to be able to facilitate meetings and events.

    - **Conflict Management**: possess the ability to navigate the grone zone safely leverage managed conflicts within the team and foster a healthy team environment for ideation and discovery. Understand team dynamics and how to encourage constructive feedback and communication.

    - **Metrics and Continuous Improvement**: familiarity with Agile metrics (e.g., [Cycle Time]({{< ref "/tags/cycle-time" >}}), Work Item Aging, Work In Process, [Throughput]({{< ref "/tags/throughput" >}})), and how to use them to enable improvement. Ability to encourage the team to reflect on these metrics and find ways to improve.

    While the Scrum Master may not directly perform the tasks mentioned above, they are accountable for ensuring that these tasks are carried out effectively. This involves training and [mentoring]({{< ref "/tags/mentoring" >}}) teams in the necessary practices, and once the teams have a solid understanding, knowing when to shift towards coaching and facilitating the team, their stakeholders, and the broader organization.

    ## When everyone around is incompetent, competence looks like an ideal!

    Some have pushed back, saying this list is too idealistic. However, I see it as the starting point for a Scrum Master, not the end goal. While someone is on their journey to becoming a Scrum Master, they should be working within a team and learning. All the foundational knowledge is covered, at least at a beginner level, in courses like APS, APS-SD, PSM, PSPO, and PSK. That’s roughly 90 hours of classroom time, or just over 11 days of learning.

    Does that make you an expert in all these areas? No, of course not—that would be unrealistic. But it’s a start. It’s about knowing these processes and practices exist and having the opportunity to try them out within a team.

    **_Theory and Practice...._**

    > "Without theory, there is no learning. That is, without theory, there is no way to use the information that comes to us. We need a theory for data. We need a theory for experience. Without theory, we learn nothing." - W. Edwards Deming\*\*\*

    Reference

    - \* Assessment of knowledge based on [Scrum Match model](https://scrummatch.com/en/support/understanding-scrum-master-maturity) and their [published data](https://www.linkedin.com/posts/martinhinshelwood_scrummastery-agileleadership-continuousimprovement-activity-7203391160243892224-nVHP?utm_source=share&utm_medium=member_desktop)

    - \*\* Coaching Agile Teams: A Companion for ScrumMasters, Agile Coaches, and Project Managers in Transition by Lyssa Adkins

    - \*\*\* System of Profound Knowledge by W. Edwards Deming
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-09-05-the-incompetent-scrum-master-why-most-are-failing-and-what-they-should-know\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-09-05-the-incompetent-scrum-master-why-most-are-failing-and-what-they-should-know
- FrontMatter:
    title: You can't stop the signal! But you can ignore it!
    description: Explores why teams ignore clear signals from Agile and Scrum, highlighting how culture and fear hinder continuous improvement and effective problem-solving in organisations.
    ResourceId: KHNSdDjr5K_
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 51389
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2024-04-17
    weight: 330
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: you-cant-stop-the-signal-but-you-can-ignore-it
    aliases:
    - /blog/you-cant-stop-the-signal-but-you-can-ignore-it
    - /you-cant-stop-the-signal-but-you-can-ignore-it
    - /you-can't-stop-the-signal--but-you-can-ignore-it-
    - /blog/you-can't-stop-the-signal--but-you-can-ignore-it-
    - /resources/KHNSdDjr5K_
    - /resources/blog/you-cant-stop-the-signal-but-you-can-ignore-it
    - /resources/blog/you-can-t-stop-the-signal-but-you-can-ignore-it
    aliasesArchive:
    - /blog/you-cant-stop-the-signal-but-you-can-ignore-it
    - /you-cant-stop-the-signal-but-you-can-ignore-it
    - /you-can't-stop-the-signal--but-you-can-ignore-it-
    - /blog/you-can't-stop-the-signal--but-you-can-ignore-it-
    - /resources/blog/you-cant-stop-the-signal-but-you-can-ignore-it
    - /resources/blog/you-can-t-stop-the-signal-but-you-can-ignore-it
    categories:
    - Product Development
    - Scrum
    preview: NKDAgility-technically-YouCantStopTheSignal-1-1.jpg
    tags:
    - Agile Frameworks
    - Agile Philosophy
    - Organisational Agility
    - Agile Transformation
    - Organisational Culture
    - Agile Values and Principles
    - Transparency
    - Continuous Improvement
    - Pragmatic Thinking
    - Empirical Process Control
    - Software Development
    - Sociotechnical Systems
    Watermarks:
      description: 2025-05-07T13:05:16Z
  BodyContent: |
    In organizational development and team dynamics, Agile (as the Agile Manifesto delineates) and [Scrum]({{< ref "/categories/scrum" >}}) (as the Scrum Guide outlines) guide teams not by solving their problems but by illuminating the issues that demand attention. These frameworks aim to identify and spotlight the challenges within a team or organization's processes, effectively saying, "This is wrong, go fix it!" when a team struggles to produce a working product due to various obstacles. These are clear signals!

    Yet, teams often overlook these clear signals. This raises the question: Why does such a disconnect exist between receiving these critical signals and acting on them? What barriers within teams and organizations prevent them from hearing and responding to these alerts?

    We can draw parallels to Toyota's manufacturing process and its concept of the "andon" chain. This chain enables any worker to stop the entire production line upon detecting a flaw, addressing problems immediately instead of allowing defective products to proceed. This approach, critical to Toyota's quality assurance, symbolizes a commitment to excellence and [continuous improvement]({{< ref "/tags/continuous-improvement" >}}).

    When American car manufacturers adopted this concept, they installed the physical chain, but workers hesitated to pull it. The underlying fear was that stopping the line would result in punitive measures rather than being viewed as a positive step toward quality maintenance. This situation reveals a profound truth: the effectiveness of such systems lies not in their physical presence but in the culture and philosophy that empower their use. Thus, it's not the "andon" chain that's broken; it's the systemic failure to foster an environment that encourages and values its use.

    This analogy highlights the challenges of implementing Agile and Scrum within organizations. These philosophies act as the [software development]({{< ref "/tags/software-development" >}}) and [product management]({{< ref "/categories/product-management" >}})'s "andon" chain, signaling when something goes wrong and necessitating action. However, if an organization's culture or a team's mindset does not align with principles of [transparency]({{< ref "/tags/transparency" >}}), continuous improvement, and feedback responsiveness, these signals will remain ignored.

    The primary barrier often stems from fear—fear of repercussions, fear of change, or the inertia of existing practices that discourage deviation from the norm. A lack of understanding or commitment to Agile and Scrum's underlying philosophies may also contribute to a superficial implementation that fails to capitalize on these frameworks' full potential.

    To reap the benefits of Agile and Scrum, organizations must cultivate a culture that not only listens to but also values and acts upon the signals these philosophies provide. This involves creating an environment where halting the metaphorical production line to fix issues is celebrated rather than discouraged, embedding continuous improvement into the organization's DNA, and deeply understanding and practising the principles of the Agile Manifesto and the Scrum Guide.

    Only then can organizations address the systemic issues blocking success, paving the way for meaningful and sustainable improvement.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-04-17-you-cant-stop-the-signal-but-you-can-ignore-it\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-04-17-you-cant-stop-the-signal-but-you-can-ignore-it
- FrontMatter:
    title: Pragmatism crushes Dogma in the wild
    description: Explores how practical use of Scrum fosters adaptability and resilience in teams, highlighting the value of flexibility over rigid rules in complex product development.
    ResourceId: mkdhLrKu8sh
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 51362
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2024-03-21
    weight: 330
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: pragmatism-crushes-dogma-in-the-wild
    aliases:
    - /blog/pragmatism-crushes-dogma-in-the-wild
    - /pragmatism-crushes-dogma-in-the-wild
    - /resources/mkdhLrKu8sh
    - /resources/blog/pragmatism-crushes-dogma-in-the-wild
    aliasesArchive:
    - /blog/pragmatism-crushes-dogma-in-the-wild
    - /pragmatism-crushes-dogma-in-the-wild
    - /resources/blog/pragmatism-crushes-dogma-in-the-wild
    categories:
    - Scrum
    - Product Development
    preview: NKDAgility-technically-PragamtismCrushesDogma-1-1.jpg
    tags:
    - Agile Planning
    - Empirical Process Control
    - Organisational Agility
    - Agile Frameworks
    - Agile Product Management
    - Professional Scrum
    - Software Development
    - Pragmatic Thinking
    - Team Performance
    - Agile Transformation
    - Product Delivery
    - Scrum Master
    - Agile Philosophy
    - Market Adaptability
    Watermarks:
      description: 2025-05-07T13:05:24Z
  BodyContent: |
    In my journey of delivering an immersive [Product Development Mentor Program](https://nkdagility.com/global-consultancy-services/product-development-mentoring-program/) over the last eight weeks, a compelling narrative unfolded that beautifully illustrates the essence and true strength of [Scrum]({{< ref "/categories/scrum" >}}). This story, rooted in the practical application of Scrum through Minecraft, unveils the depth of adaptability and resilience that Scrum can foster within a team.

    The program structured around a series of sprints in Minecraft, aimed to mirror the real-world complexities and dynamism present in [product development]({{< ref "/categories/product-development" >}}) projects. Starting from the initial chaos of Sprint 1, where participants grappled with the inherent complexity of a new project, the program progressively unfolded to reveal the power of Scrum. By Sprint 2, the fruits of understanding empiricism and embracing a philosophy of flexibility were evident. The teams learned to navigate and adapt to complexities with much less stress and frustration.

    However, it was Sprint 3 that truly tested the resilience of the system we had built. With the introduction of unforeseen challenges, such as mobbing in Minecraft and the accidental loss of the project world, the teams were thrust into a scenario of significant complexity. Yet, the response was remarkable. The team's ability to quickly organise, adapt, and maintain direction despite these surprises highlighted the real power of Scrum. It wasn't about rigidly adhering to rules but about maintaining enough structure to guide while allowing for adaptability to unforeseen challenges.

    This experience was not isolated to the Minecraft world. In a real-world scenario, one of the participating teams faced the need to cancel a Sprint due to a shift in business direction. Their response, a seamless adaptation to extend the next Sprint while maintaining the cadence for stakeholders, exemplified the philosophy of Scrum. It's about choosing how to handle exceptions, focusing on adaptability over strict adherence to rules.

    The Scrum Guide outlines ten elements that must be followed, all of which support the principle of empiricism. These elements serve as guardrails, ensuring visibility, inspection, and adaptation. However, everything beyond these is guidance, allowing teams the flexibility to navigate their unique challenges and opportunities.

    Here are the MUST elements from the Scrum Guide:

    - The emergent process and work must be visible to those performing the work as well as those receiving the work.

    - The Scrum artifacts and the progress toward agreed goals must be inspected frequently and diligently to detect potentially undesirable variances or problems.

    - If any aspects of a process deviate outside acceptable limits or if the resulting product is unacceptable, the process being applied or the materials being produced must be adjusted. The adjustment must be made as soon as possible to minimize further deviation.

    - For Product Owners to succeed, the entire organization must respect their decisions.

    - The Sprint Goal must be finalized prior to the end of Sprint Planning.

    - \[The [Scrum Team]({{< ref "/tags/scrum-team" >}})\] must fulfill (or abandon) one \[Product Goal\] before taking on the next.

    - In order to provide value, the [Increment]({{< ref "/tags/increment" >}}) must be usable.

    - If the [Definition of Done]({{< ref "/tags/definition-of-done" >}}) for an increment is part of the standards of the organization, all Scrum Teams must follow it as a minimum.

    - If it is not an organizational standard, the Scrum Team must create a Definition of Done appropriate for the product.

    - If there are multiple Scrum Teams working together on a product, they must mutually define and comply with the same Definition of Done.

    As I reflect on the past sessions and the growth observed in the participants, it's clear that Scrum is not a methodology but a philosophy. A philosophy that empowers teams to embrace complexity, adapt to changes, and continuously seek improvements. It's about understanding that the path to success in an ever-changing environment is not through rigid rules but through adaptability and resilience.

    **How has pragmatically embracing the philosophy of Scrum enabled you to navigate complexity and adapt to change in your projects?**
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-03-21-pragmatism-crushes-dogma-in-the-wild\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-03-21-pragmatism-crushes-dogma-in-the-wild
- FrontMatter:
    title: Blocked Columns on Kanban Boards Obfuscate Workflow and Undermine Effectiveness
    description: Using Blocked columns on Kanban boards hides workflow issues, causes task stagnation, and reduces transparency. Use tags to indicate blockages and maintain clarity.
    ResourceId: 7JJaRr4g-KA
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 51208
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2024-02-13
    weight: 1000
    AudioNative: true
    creator: Martin Hinshelwood
    contributors:
    - name: Will Seele
      external: https://www.linkedin.com/in/wjseele/
    layout: blog
    resourceTypes: blog
    slug: blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    aliases:
    - /blog/blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    - /blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    - /resources/7JJaRr4g-KA
    - /resources/blog/blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    aliasesArchive:
    - /blog/blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    - /blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    - /resources/blog/blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness
    tags:
    - Operational Practices
    - Flow Efficiency
    - Azure DevOps
    - Software Development
    - Transparency
    categories:
    - Kanban
    preview: NKDAgility-technically-BlockedColumns-7-7.jpg
    Watermarks:
      description: 2025-05-07T13:05:52Z
  BodyContent: |
    The Boards in Azure [DevOps]({{< ref "/categories/devops" >}}) are a powerful tool that your teams can leverage to enable transparent visualization of the current state of [value delivery]({{< ref "/tags/value-delivery" >}}).

    However, the inclusion of Blocked columns can stealthily erode the very foundations of efficiency these boards are meant to uphold. By obfuscating the state of work-in-progress and breeding a culture of hands-off responsibility, Blocked columns can become the silent saboteurs in your workflow.

    ![](images/image-5-5.png)
    { .post-img }

    **Blocked Columns on [Kanban]({{< ref "/categories/kanban" >}}) Boards Obfuscate Workflow and Undermine Effectiveness:**

    Kanban boards serve as the visual representation of the crucial steps involved in knowledge discovery. However, labeling a column as "Blocked" does not align with the essence of this visualization.

    > "The nature of a column is that it represents a state an item will flow through. Introducing a Blocked Column would imply that the normal flow of work would involve the vast majority of items to be Blocked before they get done"
    >
    > [Will Seele | LinkedIn](https://www.linkedin.com/in/wjseele/)

    When tasks are relegated to the Blocked column, there is an alarming tendency for team members to disengage from those tasks, erroneously expecting the issues to be resolved by some external force. This mindset breeds several detrimental consequences:

    1. **Stagnation of Work Items**: Tasks lodged in the Blocked column tend to remain there indefinitely. As time goes by, these work items become stale and outdated.

    2. **Inflation of WIP Limits**: As the Blocked column accumulates more tasks, teams are often tempted to increase their Work In Progress (WIP) limits for the Blocked column. This is a red flag indicating that the team perceives the issue as someone else's responsibility.

    3. **Loss of Contextual Information**: When a task is tagged as Blocked, it is essential to understand which stage of the process it is obstructed in, as this guides the necessary action for resolution. By lumping tasks into a generic Blocked column, this critical information is lost.

    4. **Loss of Priority Information**: Tasks are typically selected based on their value. However, once a task is shifted to the Blocked column, it is stripped of its priority status, which is vital for efficient workflow management.

    5. **Back-and-Forth Movement**: Transferring a task to the Blocked column necessitates moving it back to its original state once the block is cleared. This back-and-forth movement is not only cumbersome but also increases the likelihood of errors and mismanagement.

    *It’s imperative to recognize that 'Blocked' is distinct from 'Waiting'.* They are not interchangeable. Especially in workflows that involve approval, legal compliance, risk assessment, or governance considerations, tasks are not Blocked per se, but rather waiting for input or feedback. This waiting period needs to be accurately captured, and the sources of delay must be identified and addressed. Knowledge of these elements and the duration of delays is fundamental in tackling and resolving the root causes.

    In light of these pitfalls, it is crucial for teams to approach the use of Blocked columns with caution. Instead, a more efficient approach may involve annotating tasks with specific information about the blockages and keeping them within their respective stages, thereby maintaining [transparency]({{< ref "/tags/transparency" >}}), accountability, and the integrity of the knowledge discovery steps.

    **How do you show that a work item is blocked In [Azure DevOps]({{< ref "/tags/azure-devops" >}})?**

    By far the best way to indicate blocked is to use a Blocked tag on your Work Item.

    ![](images/image-1-1280x669-1-1.png)
    { .post-img }

    You can also increase the transparency by enabling a colour for the tag. Just be careful not to over use it, too many colours can reduce transparency and making it harder to see important information.

    ![](images/NKDAgility-HilightBlockedTag-6-6.gif)
    { .post-img }

    ## **References:**

    - [Addendum-to-Kanban-Guide-implementation-options-details-2-1.pdf (kanbanguides.org)](https://kanbanguides.org/wp-content/uploads/2020/10/Addendum-to-Kanban-Guide-implementation-options-details-2-1.pdf) <--Page 15

    - [English - Kanban Guides](https://kanbanguides.org/english/)

    - [https://prokanban.org/wp-content/uploads/2022/08/thekanbanpocketguide.pdf](https://prokanban.org/wp-content/uploads/2022/08/thekanbanpocketguide.pdf)

    - [The Principles of Product Development Flow: Second Generation Lean Product Development](https://www.goodreads.com/book/show/6278270-the-principles-of-product-development-flow)

    - [When Will It Be Done?: Lean-Agile Forecasting to Answer Your Customers' Most Important Question by Daniel S. Vacanti | Goodreads](https://www.goodreads.com/book/show/40681093-when-will-it-be-done)
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-02-13-blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2024\2024-02-13-blocked-columns-on-kanban-boards-obfuscate-workflow-and-undermine-effectiveness

