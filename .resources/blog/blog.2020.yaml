- FrontMatter:
    title: 'Evidence-based Management: Gathering the metrics'
    description: Discover how to effectively gather metrics for Evidence-based Management in software organizations to enhance value delivery and drive agile success.
    ResourceId: mK5twHwVcIg
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 10528
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-30
    weight: 360
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: evidence-based-management-gathering-metrics
    aliases:
    - /blog/evidence-based-management-gathering-metrics
    - /evidence-based-management-gathering-metrics
    - /evidence-based-management--gathering-the-metrics
    - /blog/evidence-based-management--gathering-the-metrics
    - /resources/mK5twHwVcIg
    - /resources/blog/evidence-based-management-gathering-metrics
    aliasesArchive:
    - /blog/evidence-based-management-gathering-metrics
    - /evidence-based-management-gathering-metrics
    - /evidence-based-management--gathering-the-metrics
    - /blog/evidence-based-management--gathering-the-metrics
    - /resources/blog/evidence-based-management-gathering-metrics
    tags:
    - Evidence Based Management
    - Metrics and Learning
    - Ability to Innovate
    - Agile Product Management
    - Continuous Improvement
    - Operational Practices
    - Evidence Based Leadership
    - Software Development
    - Value Delivery
    - Decision Making
    - Pragmatic Thinking
    - Agile Frameworks
    - Empirical Process Control
    - Product Delivery
    - Organisational Agility
    - Working Software
    - Trend Analysis
    - Agile Transformation
    - Business Agility
    - Customer Satisfaction
    - Enterprise Agility
    - Flow Efficiency
    - Team Performance
    - Throughput
    - Agile Strategy
    - Revenue per Employee
    - Cycle Time
    - Agile Product Operating Model
    - Deployment Frequency
    - Digital Transformation
    - Frequent Releases
    - Market Adaptability
    - Organisational Change
    - Professional Scrum
    - Social Technologies
    - Sociotechnical Systems
    - Competence
    - Agile Planning
    - Release Management
    categories:
    - Product Management
    - Scrum
    - Engineering Excellence
    preview: naked-agility-evidence-based-management-1-1.jpg
  BodyContent: |
    Gathering the metrics for Evidence-based Management in software organisations can be a strenuous task and I have a number of customers that are fretting on what to collect and from where. Here I try to create an understanding of the 'what' that we need to collect.

    [Updated to reflect the 2020 Scrum Guide!](https://nkdagility.com/the-2020-scrum-guide/)

    Evidence-based Management for Software Organisations is a framework from Scrum.org to help organisations focus their efforts on most valuable improvements and monitor their effect on the organisation. In my experience, organisations recognize agility as a means to improve their value, yet tend to lack focus and commitment to moving towards it. This is mostly because of entrenched traditional ideas and a resistance to change that comes, in the west, from an "if it ain’t broke, don't fix it" mentality. Let's forget for a moment that it has been proven over and over again that small experiments that fail quickly are what produce results. Let's forget as well the 20 years of the success of agility when there is focus and courage. We need evidence…

    That evidence is there. You can find study after study that shows that agile practices work, that moving to agile values works better. So why don’t people listen? Still, I hear: "That will not work here", especially in the enterprise. In the successful enterprise its worse: "We are fantastic and we know best as we have been doing it this way for many years with success". Unfortunately, the measure of success has traditionally been:

    - delivered on time

    - delivered on budget

    - with the features that were required upfront

    This measure of success does not take into account how much 'value' is delivered to the customer or users. If you take another look, as the Standish Group in Boston has, at the above traditional measures of success (used both by PMI and Prince2) you find that this measure equates to very little value to the customers. Forrester is currently trying to encourage the organisation to start measuring the value that they are delivering rather than how they are delivering it.

    How we measure value up until now in software delivery has been to either rely on the Product Owner, or to start introducing traditional measures from formal process… and we already know where that leads. The dark side!

    So what can we measure? Sure Scrum has traditionally focused on the team, and the best measure for a team is "Remaining Work". From that we can create Velocity and Burndown to help the Product Owner plan and the Development Team deliver. Simple… but organisations are not simple and need a way to really measure success in an agile fashion. If we can provide organisations with some standard agile metrics maybe, just maybe, we can pull them out of the dark and into the light.

    This is why, with all the kafuffle over "scaling Scrum", Scrum.org has been biding its time and doing its research. Most of the scaling Scrum methodologies out there miss the boat on measurements. Not only that they have \[come under much fire recently\] for providing way too much rigor in the wrong places for a "one size fits all" solution. If you can't have "one size fits all" at the team level you sure can't do it at the organisational one…

    I have discussed [What my father taught me about evidence-based management](/blog/what-my-father-taught-me-about-agility-path-34-years-before-it-was-invented/) and [metrics that matter](/blog/metrics-that-matter-with-evidence-based-management/) over the years:

    > Evidence-based Management for Software Organisations (n):  A process for measuring, diagnosing and improving the value an organization derives from its software investments. It improves an organization's ability to compete on its software capabilities by using evidence to focus investments on areas that will create the highest value for the entire organization. Its iterative, incremental approach to guided change helps organizations control the risk of disruption.

    You can find out more from [The Evidence-Based Management Guide: Measuring Value to Enable Improvement](/the-evidence-based-management-guide-measuring-value-to-enable-improvement-and-agility/) and I want to talk a little more about the gathering of metrics for monitoring.

    Let's face it, it's not just Organisations that want to understand their return on investment for their hard earned cash spent on improving their process and practices. There are good consultants out there that want to understand the value that they are bringing to their customers so they can inspect and adapt as well. I, for one, want to focus on delighting my customers. To bringing them the most value for what they pay me. I have traditionally done this by simply looking at how happy my customers are. While this is an important metric is only one piece of information in a web of interconnected data that I can use as evidence of that improvement.

    That is why I went to Boston last month to complete the training and assessment to become an Evidence-based Management Consultant with Scrum.org. I need to understand how my advice affects an organisation that I am working with. How else can I know if my advice is good? Guesswork? That sounds a little…archaic. There is a better way…

    There are really three groups of metrics that make sense at the organisational level. There are metrics that monitor the **current value** being delivered, the **time to market** and your organisations **ability to innovate**. We need to gather these metrics at a point in time as soon as possible to provide a baseline for where the organisation currently is. We can then reassess the organisation at intervals, probably no more than quarterly, which will allow us to look at the trends over time.

    ### Current Value Metrics

    The current value metrics look at data that gives an indication of the company’s success in the market place. These metrics should be gathered once across the organisation with the organisation defined as consistently as possible across instances. They might include:

    - **Revenue per Employee** – Gather the revenue generated by the product you are evaluating and employees contributing to its success

    - **Cost of Product Domains** – Gather the IT expenses associated with the product

    - **Employee Satisfaction** – what percentage of employees are engaged?

    - **Customer satisfaction** – what percentage of your customers is marketing your products or services on your behalf?

    All of these are easy to collect and most are likely readily available. Many enterprises already do some form of employee and customer satisfaction which we may be able to use. However the timespan of the collection of the metrics should ideally match.

    ### Time-to-Market Metrics

    These metrics look at how quickly an organisation is able to bring new innovations to its customers. They might include:

    - **Release frequency** – How often do we put new features in the hands of our customers?

    - **Release stabilisation** – How much time are we spending on getting something “done” to “really done”?

    - **Cycle time** – How long does it take for us to move new features from idea into customer’s hands?

    ### Ability to Innovate Metrics

    These metrics look at an organisation’s ability to continue bringing innovations to its customers in the future. They might include:

    - **Installed Version Index** - What percentage of your customers are able to take advantage of new features on the latest release of your product?

    - **Usage Index** – What percentage of our features does not provide value to our customers?

    - **Innovation Rate** – What percentage of our budget is spent on innovation?

    - **Defects** – How much technical debt are we accumulating?

    As you have already likely surmised with these metrics it makes sense to gather them per application. We can then average the results to figure what they are across the entire spectrum. While these figures may vary wildly between applications as long as you use the same formula you should get comparable results.

    Scrum.org suggests aggregating these into one, easy to track metric – the Agility Index. This number becomes synonymous with the value an organization is getting from its software development capabilities.

    ## Conclusion

    For the first time we can now, as consultants, monitor the improvements we are making in organisations. Even better, organisations can use these metrics to demonstrate the value that their investments in agility with training and consulting are bringing them. This is a fabulous step forward in our understanding of software delivery. An easy, simple way of measuring our progress towards process improvement.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-30-evidence-based-management-gathering-metrics\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-30-evidence-based-management-gathering-metrics
- FrontMatter:
    title: There is no place like production
    description: Discover why real user feedback in production is essential for delivering value. Learn to validate assumptions and enhance product success effectively.
    ResourceId: KUJ7jHOGqP7
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 45324
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-28
    weight: 440
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: there-is-no-place-like-production
    aliases:
    - /blog/there-is-no-place-like-production
    - /there-is-no-place-like-production
    - /resources/KUJ7jHOGqP7
    - /resources/blog/there-is-no-place-like-production
    aliasesArchive:
    - /blog/there-is-no-place-like-production
    - /there-is-no-place-like-production
    - /resources/blog/there-is-no-place-like-production
    tags:
    - Product Validation
    - Pragmatic Thinking
    - Value Delivery
    - Working Software
    - Agile Product Management
    - Evidence Based Management
    - Product Discovery
    - Increment
    - Agile Philosophy
    - Product Delivery
    - Ability to Innovate
    - Evidence Based Leadership
    - Agile Strategy
    - Business Agility
    - Continuous Improvement
    - Lean Startup
    - Organisational Agility
    - Release Management
    - Frequent Releases
    - Agile Values and Principles
    - Customer Retention
    - Decision Making
    - Empirical Process Control
    - Experimentation
    - Hypothesis Driven Development
    - Lean Product Development
    - Metrics and Learning
    - MVP
    - Product Owner
    - Agile Product Operating Model
    - Customer Satisfaction
    - Lean Principles
    - Operational Practices
    - Product Strategy
    - Value Stream Management
    - Continuous Delivery
    - Market Adaptability
    - Software Development
    - Customer Feedback Loops
    - Deployment Frequency
    categories:
    - Product Management
    - DevOps
    preview: wizard-of-oz-ruby-slippers-2018-billboard-1548-2-2.jpg
  BodyContent: |
    Value is such a subjective thing that we will often be wrong, and there is no way around that wrongness. In order to minimise the wrongness and maximise the amount of value that we deliver we need to have a clear understanding of what our users need, how they are using the product, and validate our new value as soon as we can. Without validation we only have assumptions and assumptions can be dangerous.

    As a start we can collect some qualitative data to validate some of our assumptions:

    - **Customer Satisfaction** - is a key measure as it is an indication of the happiness of your users with the features that you currently have in your product.
    - **Product Usage** - Its key to see just how much of our product is being used by our users. There is no point in trying to add features to areas that are not being used. Features are only valuable if they fulfil some need for users and the business and usage is a key indicator of value.
    - **Employee Satisfaction** - is another key indicator. If our employees feel that they understand how their work contributes to the overall product vision then they will leverage that focus and understanding towards building a better product.

    For additional ways to measuring value to enable improvement and agility check out [The Evidence-Based Management Guide](https://nkdagility.com/the-evidence-based-management-guide-measuring-value-to-enable-improvement-and-agility/#h-current-value-cv-1)

    ## Real-Users create real-feedback

    The only way to validate our assumptions is to get our perceived value in front of some subset of real users and gather feedback. I want to also be 100% clear that the term "real-users" does not mean Staging or UAT; it means production. When you ask someone to test something they do not use it in the same way that they would if they were using it for real. Following a test-script is not a real user.

    ## Releasing is the only way to deliver value

    Without getting our increment in front of those real-users we also don't have any value. Its effectively sitting on our shelf in the warehouse and is depreciating. What is the cost of delay for your feature? If you could get this value, this new business feature, into the hands of real users and make their lives easier how much money would you save? You cant save that money until users can actually use that feature.

    ## A financial reason to release early

    And speaking of depreciation all of the software that you are creating, these new features, are capital expenditure. Your finance department is able to offset capital expenditure, and indeed often experimental features, against your tax! However, you are only generally allowed to do that once your features are in production. if you can get a smaller capital expendature into production and start writing it down on a monthly basis early you can compound that write-down by the end of the year. This could be a masive saving for your organisation.

    ## There is no place like production

    My favourite quote is from Brian Harry, the product unit manager at Microsoft and technical fellow:

    > "There is no place like production"
    >
    > \-Brian Harry

    No mater how much testing, UX discovery, and UAT, that you do there will always be more things that you discover once you get into production. It is just not possible to simulate a production environment. We are much more likely to be successful and create value by getting the smallest piece of value into production and validating that it is indeed as valuable as we thought.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-28-there-is-no-place-like-production\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-28-there-is-no-place-like-production
- FrontMatter:
    title: Product Goal is an Intermediate Strategic Goal
    description: Discover how to set effective product goals as intermediate strategic goals to enhance agility and drive successful outcomes in your organization.
    ResourceId: PjYSLMnBHhI
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 45309
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-21
    weight: 750
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: product-goal-is-an-intermediate-strategic-goal
    aliases:
    - /blog/product-goal-is-an-intermediate-strategic-goal
    - /product-goal-is-an-intermediate-strategic-goal
    - /resources/PjYSLMnBHhI
    - /resources/blog/product-goal-is-an-intermediate-strategic-goal
    aliasesArchive:
    - /blog/product-goal-is-an-intermediate-strategic-goal
    - /product-goal-is-an-intermediate-strategic-goal
    - /resources/blog/product-goal-is-an-intermediate-strategic-goal
    tags:
    - Agile Strategy
    - Business Agility
    - Continuous Improvement
    - Decision Making
    - Evidence Based Leadership
    - Organisational Agility
    - Hypothesis Driven Development
    - Evidence Based Management
    - Pragmatic Thinking
    - Experimentation
    - Value Delivery
    - Ability to Innovate
    - Agile Product Management
    - Common Goals
    - Enterprise Agility
    - Product Discovery
    - Agile Philosophy
    - Agile Product Operating Model
    - Agile Transformation
    - Empirical Process Control
    - Market Adaptability
    - Metrics and Learning
    - Continuous Learning
    - Strategic Goals
    - Agile Leadership
    - Agile Planning
    - Digital Transformation
    - Lean Product Development
    - Lean Startup
    - Organisational Change
    - Product Strategy
    - Product Validation
    - Sensemaking
    - Product Delivery
    - Agile Frameworks
    - Change Management
    - Complexity Thinking
    - Operational Practices
    - Organisational Physics
    - Portfolio Management
    - Social Technologies
    - Sociotechnical Systems
    - Trend Analysis
    categories:
    - Product Management
    - Leadership
    preview: naked-agility-hypothesis-driven-1-1.jpg
  BodyContent: |
    The [Evidence-Based Management Guide](https://nkdagility.com/the-evidence-based-management-guide-measuring-value-to-enable-improvement-and-agility/) describes not only a [Strategic Goal](https://nkdagility.com/blog/product-goal-is-an-intermediate-strategic-goal/) but also an [Intermediate Strategic Goal](https://nkdagility.com/blog/product-goal-is-an-intermediate-strategic-goal/) that is needed to evaluate and adapt your progress towards your intended visions of your product.

    <figure>

    ![](images/image-1-767x720.png)
    { .post-img }

    <figcaption>

    _Reaching strategic goals requires experimenting, inspecting, and adapting_

    </figcaption>

    </figure>

    The key to realising an agile mindset within the business is the idea of experimentation and that we don't know where we want to get to, largely because the future of our business is clouded in the fog of war. There is always a high degree of uncertainty of the future and nothing has illustrated that more in recent times than the COVID-19 pandemic. Every business had to reassess its Strategic objectives more than normal, and normal is often a lot.

    > The **fog of war** (German: *Nebel des Krieges*) is the uncertainty in situational awareness experienced by participants in military operations. The term seeks to capture the uncertainty regarding one's own capability, adversary capability, and adversary intent during an engagement, operation, or campaign. Military forces try to reduce the fog of war through military intelligence and friendly force tracking systems.
    >
    > Wikipedia

    Since presenting [Evolution not Transformation: This is the Inevitability of change](https://nkdagility.com/blog/evolution-not-transformation-this-is-the-inevitability-of-change/) I have come to realise more and more that it is the Business and Executive leadership that is holding back the [retirement of the traditional practices that were developed to manage factory workers](https://nkdagility.com/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs/) in favour of those needed to manage cognitive work. Even a cursory look at many of the modern organisations that are able to adapt to business changes shows a far greater success than other more traditionally run businesses. Think Spotify, Zappos, Microsoft, Apple, Google.

    We need to adopt the key practices of [Product Discovery](https://nkdagility.com/blog/product-goal-is-an-intermediate-strategic-goal/) that is adapted for the modern world. These are:

    - **Outcome over Output** \- In order to reassess our existing management practices we need to ask the question "_Does the practice increate our output or outcome?_". Don't be trapped into delivering lots of poorly made, poorly targets deliverables. You want your smart creative people spending time on the valuable outcomes that change your customer's behaviour to benefit the organization. Some examples of traditional practices that were developed to maximise output rather than outcome are; Task and Bonus, Departments (Sales, Marketing, HR, Engineering, Test), Work Breakdown Structure, progression through salary and job title. if you are not running a factory during the industrial revolution then you may need to reevaluate the impact of these practices on your desired outcomes. The Standish Group in Boston has an annual report that consistently shows, through data analysis, that traditional project management practices (Prince2/PMI/other) have a negative impact on your organisation's ability to deliver value in cognitive work like Software, Sales, and Marketing.
    - **Investment Opportunities** - We still need to budget but instead of traditional project-based that falls into the trap of output over the outcome, we need a new model that reflects Outcomes and Opportunities for discovery that will make our business more successful. This new Budgetary model can revolve around Delivery Teams that represent our investment. _As yourself how many teams are we willing to invest in discovery for any given opportunity?_ Over the course of a year, you may readjust where the Delivery Teams spend their time based on what you learn. Stop investing Delivery Teams time in areas that it is clear that you are not getting an adequate return on investment. Each year we can assess how many teams, in each of our value streams, we are willing to fund.
    - **Experimentation** \- There are no failures only learnings and our goal needs to be to minimise the cost of these learnings and maximizing the success. Short iterative experiments in any investment opportunity. A good example is the Azure DevOps teams at Microsoft where they have ~42 teams that they can invest in Azure Pipelines, Azure Boards, Azure Repos, and other verticals in the product. Each vertical will have its Intermediate Strategic Goal (Product Goal) and a budget of "headcount" (read teams) that they can use to invest in moving towards that Intermediate Strategic Goal, one experiment at a time. If leadership believes that they are not making enough progress in a particular vertical they are free to relocate teams to address this based on market analysis.
    - **Hypothesis Driven** - To understand the outcome of the experiment we need some sort of hypothesis. This is like an assumption, but with one important distinction; We have a measure that will tell us if our assumption is true. It is the accountability of Product Management (likely as a Product Owner) to validate their assumptions using data and minimise the spend to get there. Running many small experiments where the Delivery Teams create small valuable outcomes that you can test with real users and validate is imperative.

    We need to reassess the use of the terms Scope & Failure in light of this new reality and evolve into a lean data-driven organisation based on experimentation and discovery that allows us to adapt to business changes as they arise!
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-21-product-goal-is-an-intermediate-strategic-goal\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-21-product-goal-is-an-intermediate-strategic-goal
- FrontMatter:
    title: If your backlog is not refined then you are doing it wrong
    description: Ensure your Scrum team's success by refining your Product Backlog. Discover effective strategies to enhance clarity and quality in Sprint Planning.
    ResourceId: 4ukwclfJlXy
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 38243
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-17
    weight: 330
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: backlog-not-refined-wrong
    aliases:
    - /blog/backlog-not-refined-wrong
    - /backlog-not-refined-wrong
    - /if-your-backlog-is-not-refined-then-you-are-doing-it-wrong
    - /blog/if-your-backlog-is-not-refined-then-you-are-doing-it-wrong
    - /resources/4ukwclfJlXy
    - /resources/blog/backlog-not-refined-wrong
    aliasesArchive:
    - /blog/backlog-not-refined-wrong
    - /backlog-not-refined-wrong
    - /if-your-backlog-is-not-refined-then-you-are-doing-it-wrong
    - /blog/if-your-backlog-is-not-refined-then-you-are-doing-it-wrong
    - /resources/blog/backlog-not-refined-wrong
    tags:
    - Backlog Refinement
    - Software Development
    - Definition of Ready
    - Agile Frameworks
    - Agile Planning
    - Agile Product Management
    - Professional Scrum
    - Scrum Team
    - Pragmatic Thinking
    - Product Backlog
    - Product Delivery
    - Team Performance
    - Agile Planning Tools
    - Product Owner
    - Scrum Master
    - Working Software
    - Operational Practices
    - Agile Transformation
    - Value Delivery
    - Competence
    - Continuous Improvement
    - Empirical Process Control
    - Team Collaboration
    - Working Agreements
    - Estimation
    categories:
    - Scrum
    - Product Management
    - Technical Leadership
    preview: naked-Agility-Scrum-Framework-Product-Backlog-2-1.jpg
  BodyContent: |
    Most [Scrum Teams](/the-2020-scrum-guide/#scrum-team) that I encounter don’t do refinement of their [Product Backlog](/the-2020-scrum-guide/#product-backlog) and try to work on things that they don’t understand correctly. However, if you get to the Sprint Planning event and your backlog is not ready, then you are doing it wrong. If what you build is not of good quality then you should [read about Defenition of Done](/blog/getting-started-definition-done-dod/).

    [Updated to reflect the 2020 Scrum Guide!](https://nkdagility.com/the-2020-scrum-guide/)

    ## TL;DR

    If you get to the [Sprint Planning](/the-2020-scrum-guide/#sprint-planning) event and your Product Backlog Items for the next Sprint are not already of a size that can fit into the Sprint and fully understood by the [Developers](/the-2020-scrum-guide/#developers), then you are doing it wrong. You are heading for the rocks from the start, and you have no map of the shallows to prevent it.

    Although the [Scrum Guide](/the-2020-scrum-guide/) does not define Refinement as an event, you should be doing it. You can come up with your Refinement event(s), or refine ad-hoc. Whatever you chose there is a simple measure of success. If your [Developers](/the-2020-scrum-guide/#developers) looks at something within the next 2 Sprints on the backlog and they don’t understand it, then you have work to do.

    ![](images/naked-Agility-Scrum-Framework-Product-Backlog-920x720-1-2.jpg)
    { .post-img }

    If you find that you can't quite get things to fit and [have to stagger iterations](/blog/a-better-way-than-staggered-iterations-for-delivery/), or you are just not able to deliver at all, then a lack of refinement is usually at fault.

    ## What does ready mean for a Product Backlog?

    If the [Developers](/the-2020-scrum-guide/#developers) does not understand the things that they are being asked to do how could they possibly agree that the items can fit in a Sprint? You will often find teams that don’t do refinement confused as to why they can't get everything done in a Sprint. While we accept that in an empirical process like Scrum that we, know less upfront than we discover as we go, merely taking a guess and hoping for the best is decidedly unprofessional.

    > "Selecting how much can be completed within a Sprint may be challenging. However, the more the [Developers](/the-2020-scrum-guide/#developers) know about their past performance, their upcoming capacity, and their Definition of Done, the more confident they will be in their Sprint forecasts."  
    > \-ScrumGuides.org

    While we don’t need a definition of ready, we do need a working agreement between the [Product Owner](/the-2020-scrum-guide/#product-owner) and the [Developers](/the-2020-scrum-guide/#developers). In Scrum, the [Developers](/the-2020-scrum-guide/#developers) are the ones selecting work for the Sprint, and they are the only ones that can decide what they can do. [Developers](/the-2020-scrum-guide/#developers) should be empowered to refuse to take items from the backlog that either they do not understand, or are too big to be completed in a single sprint. In general, I would expect that a [team](/the-2020-scrum-guide/#scrum-team) take many items into their Sprint, so they need to be sized appropriately.

    Ready Backlog just means that the [Developers](/the-2020-scrum-guide/#developers) can select it with confidence.

    ## How do you refine your backlog?

    Refinement is not an explicit event in the [Scrum Guide](/the-2020-scrum-guide/) because it is something that can be different depending on the Product, Domain, or Technology. If you were to ask how much refinement you should do then the answer is "as much as you need and no more". Too much refinement is waste, as it too little.

    > "Product Backlog refinement is the act of breaking down and further defining Product Backlog items into smaller more precise items. This is an ongoing activity to add details, such as a description, order, and size. Attributes often vary with the domain of work."
    >
    > \-[The 2020 Scrum Guide](/the-2020-scrum-guide/)

    The amount of time that [Developers](/the-2020-scrum-guide/#developers) spend on refinement is based on the need. However, this need for refinement will vary over the life of the product and you should be spending as much time as your need while maximizing focus on the realisation of value. I have found that many teams that were not doing refinement in the past may need considerably more time to get their backlog into some semblance of order. Once it is in order, you are generally only maintaining a rolling Sprint projection, based on your effective planning horizon, of what you might achieve.

    I usually run at least the first refinement as a guided workshop. By running one before a Sprint Planning most teams will see the value of it by the end of the next Sprint. For the workshop, I get the [Scrum Team](/the-2020-scrum-guide/#scrum-team) ([Product Owner](/the-2020-scrum-guide/#product-owner), [Developers](/the-2020-scrum-guide/#developers), & [Scrum Master](/the-2020-scrum-guide/#scrum-master)) into a room with any necessary subject matter experts and we merely open the existing backlog and review it. Start at the top and ask the [Product Owner](/the-2020-scrum-guide/#product-owner) if this is the next most important thing? If not, find something that is. Then have the [Product Owner](/the-2020-scrum-guide/#product-owner) read and explain it, then discuss and add details.

    Any time the [Product Owner](/the-2020-scrum-guide/#product-owner) deviates from the text that is in the Backlog Item, or adds more information, stop and have someone add that info to the Backlog Item. Ask the [Developers](/the-2020-scrum-guide/#developers) to estimate the item, "Does this look like it can fit with many other friends into a single Sprint?". If the answer is no, then you get to work breaking it down, reordering in the [Product Backlog](/the-2020-scrum-guide/#product-backlog), and start refining again. You continue this process until the [Developers](/the-2020-scrum-guide/#developers) agrees that there is enough backlog refined for the next 2 Sprints.

    This enables your [Product Owner to be able to plan future releases](/blog/release-planning-and-predictable-delivery/) and your [Developers](/the-2020-scrum-guide/#developers) to create an implementation plan for the current one.

    ## How do you monitor your refinement effectiveness?

    During the [Sprint Planning](/the-2020-scrum-guide/#sprint-planning) event, your [Developers](/the-2020-scrum-guide/#developers) should be able to quickly select many Product Backlog Items that go towards the chosen [Sprint Goal](/the-2020-scrum-guide/#commitment-sprint-goal) and agree that they fit. If you can do this, and most of the time you get most (not all) of the Items delivered, then you are probably doing enough refinement. If you can't, then you need to focus a little more on Refinement and making your Product Backlog ready.

    If at your [Sprint Review](/the-2020-scrum-guide/#sprint-review) the [Product Owner is always wanting to reject that Backlog Items are complete](/blog/the-fallacy-of-the-rejected-backlog-item/) then there is unlikely to be enough refinement for the Development Team to understand what they are expected to do.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-17-backlog-not-refined-wrong\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-17-backlog-not-refined-wrong
- FrontMatter:
    title: Getting started with a Definition of Done (DoD)
    description: Learn how to establish a robust Definition of Done (DoD) for your Scrum team to ensure quality and transparency in software delivery. Start improving today!
    ResourceId: z18IcQhlD7I
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 38238
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-14
    weight: 315
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: getting-started-definition-done-dod
    aliases:
    - /blog/getting-started-definition-done-dod
    - /getting-started-definition-done-dod
    - /getting-started-with-a-definition-of-done-(dod)
    - /blog/getting-started-with-a-definition-of-done-(dod)
    - /resources/z18IcQhlD7I
    - /resources/blog/getting-started-definition-done-dod
    aliasesArchive:
    - /blog/getting-started-definition-done-dod
    - /getting-started-definition-done-dod
    - /getting-started-with-a-definition-of-done-(dod)
    - /blog/getting-started-with-a-definition-of-done-(dod)
    - /resources/blog/getting-started-definition-done-dod
    tags:
    - Working Software
    - Definition of Done
    - Increment
    - Software Development
    - Professional Scrum
    - Agile Frameworks
    - Agile Product Management
    - Scrum Team
    - Operational Practices
    - Pragmatic Thinking
    - Product Delivery
    - Engineering Practices
    - Team Performance
    - Agile Planning
    - Transparency
    - Competence
    - Value Delivery
    - Continuous Improvement
    - Empirical Process Control
    - Test First Development
    - Team Collaboration
    - Decision Making
    - Scrum Master
    - Technical Mastery
    categories:
    - Scrum
    - Engineering Excellence
    preview: naked-Agility-Scrum-Framework-Definition-of-Done-2-1.jpg
  BodyContent: |
    In my last post about [Professional software teams creating working software](https://nkdagility.com/blog/professional-scrum-teams-build-software-works/) [David Corbin](https://www.scrum.org/david-corbin) made a good point. How do you determining what "Free from fault or defect" means? Since that is different for each Product and may change over time you need to focus on Quality and reflecting that quality in a Definition of Done (DoD).

    [Updated to reflect the 2020 Scrum Guide!](https://nkdagility.com/blog/update-scrum-guide-25th-anniversary-scrum-framework/)

    ## TL;DR;

    Your [Developers](/the-2020-scrum-guide/#developers) are ultimately responsible for creating done increments of working software. Done Increments. **Done**.

    ![](images/naked-Agility-Scrum-Framework-Definition-of-Done-920x720-1-2.jpg)
    { .post-img }

    [Developers](/the-2020-scrum-guide/#developers) needs to decide what Done means within the organisational context and the product domain. They need to sit down and create a list of things that must be true for every Increment of software that they deliver. Working Software is not specific to a PBI; it's applied regardless of PBI to the entire delivery. Not just for each PBI.

    > "The Definition of Done creates transparency by providing everyone a shared understanding of what work was completed as part of the Increment. If a Product Backlog item does not meet the Definition of Done, it cannot be released or even presented at the Sprint Review. Instead, it returns to the Product Backlog for future consideration."
    >
    > \-[The 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/)

    If you can't ship working software at least every 30 days then by its very definition, you are not yet doing Scrum. Since [Professional Scrum Teams build software that works](/blog/professional-scrum-teams-build-software-works/), stop, create a working increment of software that meets your definition of done (DoD), and then start Sprinting, and review what you mean by "working" continuously, and at least on a regular cadence.

    ## What is a Definition of Done (DoD)

    You need to start somewhere, and most often we don’t have a greenfield product. Either we are handed an existing product, or we are the team that built it and are switching to Scrum. Wherever your product originated, the code, and thus the product, will not currently be working software. How can it be when you don't have a definition of what working means? So what do you do?

    Before you cut a single line of code, you need to decide what done means for your product and your company. It will be defined very differently if you are building firmware for pacemakers or if you are creating an e-commerce portal. Here are some characteristics of a Definition of Done:

    - **A short, measurable checklist** - try and have things on your DoD that can be measured, that you can test the outcome, preferably in an automated fashion.
    - **Mirrors shippable** - While you might not have shipped your product, [although we recommended it](https://nkdagility.com/blog/continuous-deliver-sprint/), you should have that choice. Your [Product Owner](https://nkdagility.com/the-2020-scrum-guide/#product-owner) should be able to say, at the [Sprint Review](https://nkdagility.com/the-2020-scrum-guide/#sprint-review): "That’s Awesome… lets ship it.".
    - **No further work** - There should be no further work required from the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) to ship your product to production. Any additional work means that you were not Done, and it takes away from the [Product Owner](https://nkdagility.com/the-2020-scrum-guide/#product-owner) capacity for the next iteration. Ideally, you have a fully automated process for delivering software, and [never use staggered iterations for delivery](https://nkdagility.com/blog/a-better-way-than-staggered-iterations-for-delivery/).

    Your short, measurable checklist that mirrors usable and results in no further work required to ship your product needs to be defined. I find the best way to do this is to get the [Scrum Team](https://nkdagility.com/the-2020-scrum-guide/#scrum-team) (the [Product Owner](/the-2020-scrum-guide/#product-owner) plus the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) and any relevant [Stakeholders](https://nkdagility.com/training/audiences/stakeholders/)) into a facilitated [DoD Workshop](https://nkdagility.com/training/courses/engineering-practices-workshop/). Without a Defenition of Done we don't understand what working software means, and [without working software we cant have predictable delivery](https://nkdagility.com/blog/release-planning-and-predictable-delivery/). Your [Product Owner can't reject a Backlog Item](https://nkdagility.com/blog/the-fallacy-of-the-rejected-backlog-item/), only whether the Increment is working or not.

    ## My first Definition of Done (DoD)

    Your [Definition of Done](https://nkdagility.com/the-2020-scrum-guide/#commitment-definition-of-done) does not just magically appear, and your software does not magically comply. Making your Software comply with your definition of done is hard work, and while your definition of done should organically grow, you need to create the seed that you can build on.

    I recommend that you run a workshop with the entire [Scrum Team](https://nkdagility.com/the-2020-scrum-guide/#scrum-team), and likely some other domain experts. If there are Stage Gates that your software has to pass after [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) are Done, then you need representatives from those Gates to participate in the workshop. Regardless of your product you likely need representatives with the following expertise; Code, Test, Security, UX, UI, Architecture, etc. You may have this expertise on your team, or you may need to bring in an expert from your organisation, or even external to your organisation.

    Some examples of things to put on your definition of done:

    - **Increment Passes SonarCube checks with no Critical errors** - You will be increasing over time, so maybe you need to say "_Code Passes SonarCube checks with no more than 50 Critical errors_" then work on it over time.
    - **Increment's Code Coverage stays the same or gets higher** - Looking at a specific measure, like 90%, of code coverage is a read hearing and tells you nothing of code quality. However, it might be advantageous to monitor and measure for adverse change in code coverage, and we [always advocate for TDD practices](https://nkdagility.com/blog/you-are-doing-it-wrong-if-you-are-not-using-test-first/).
    - **Increment meets agreed engineering standards** - You should decide rules for naming of methods, tests, variables and everything in-between. Start small and add over time. Link to your agreed standards on a Wiki and continuously improve and expand your rules. Automate if possible.
    - **Acceptance Criteria for Increment pass** - Making sure you at least meet the prescribed criteria is a laudable goal and [automating them with ATDD practices](https://nkdagility.com/blog/you-are-doing-it-wrong-if-you-are-not-using-test-first/) is even better.
    - **Acceptance Tests for Increment are Automated** - Make sure that you automate all of your tests. If you think something will break, then you should have a test for it.
    - **Security Checks Pass on Increment** - Use an automated tool as part of your build and check for known security vulnerabilities. You will not find all of your security issues, but at least don’t do things we know to be reflective of poor Security.
    - **Increment meets agreed UX standards** - Again, have a Wiki page and make sure that you check it twice. If you are not using an automated DoD entry, then you need to agree as a Team that you have met the criteria.
    - **Increment meets agreed Architectural Guidelines** - Wiki's are fantastic for this, but automate what you can.

    Whatever [Definition of Done](https://nkdagility.com/the-2020-scrum-guide/#commitment-definition-of-done) you come up with it is unlikely that your entire Product currently meets the criteria. You are not yet doing Scrum. Before you start Sprinting, you need to focus on making sure that your current Increment meets your new Definition of Done. Focus on Quality, which is what the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) are accountable for, and make sure that your [Increment](https://nkdagility.com/the-2020-scrum-guide/#increment) meets that new quality bar before you start. The next Increment can only reach the quality bar of all those that came before do, but you can and should [add to that quality bar](https://nkdagility.com/blog/can-the-definition-of-done-change-per-sprint/).

    **_The [Definition of Done](https://nkdagility.com/the-2020-scrum-guide/#commitment-definition-of-done) is the commitment to quality for the [Increment](https://nkdagility.com/the-2020-scrum-guide/#increment)!_**

    Create a usable increment that meets your definition of done and then start sprinting. Keeping your software in a working state [will require a modern source control system that provides you with the facility to implement good DevOps](https://nkdagility.com/getting-started-with-modern-source-control-system-and-devops/) practices.

    ## Growing your Definition of Done (DoD)

    It's super important that quality is always increasing, and that means that you will need to at least reflect on your [Definition of Done](/the-2020-scrum-guide/#commitment-definition-of-done) on a regular cadence. In [Scrum](/the-2020-scrum-guide/), this cadence is defined by your Sprint length, and you have a Kaizen moment at the [Sprint Retrospective](/the-2020-scrum-guide/#sprint-retrospective). That does not mean that you don’t reflect on your DOD all the time, you do. You reflect continuously on whether your increment currently meets your DoD, and what you need to do to get it there. You should always be reflecting on whether your DoD fits your needs. If your [Developers](/the-2020-scrum-guide/#developers) finds that something is missing from the DoD halfway through the Sprint, then they should go ahead and add it, making sure that they are not endangering the [Sprint Goal](/the-2020-scrum-guide/#commitment-sprint-goal).

    You may discover that you have a performance problem with your product as David Corbin pointed out in my previous post. How do we make sure that we fix that issue? As I see it there are two pieces to this once you are in flight. You can Scrumble (stop Sprinting because of poor quality), and fix it, or you can integrate this new knowledge into your product cycle.

    If it is a significant issue that results in you not having working software, then you need to stop and fix. In Scrum, this is called a Scrumble, as a reflection that the [Developers](/the-2020-scrum-guide/#developers) stumbled because something is missing. You should stop adding new features and create a usable increment before you continue Sprinting and adding new features. Once you have repaired the issue, you can increase your [Definition of Done](/the-2020-scrum-guide/#commitment-definition-of-done) to make sure that all future [Increments](/the-2020-scrum-guide/#increment) meet the new requirements.

    If it is less significant, you might want to keep working and add what you need to your [Product Backlog](/the-2020-scrum-guide/#product-backlog). You can then deliver improvements over the next few Sprints that mitigate and then resolve the identified issue. Once you have resolved it, you can then pin the outcome by adding something to your DoD.

    **Always look for ways that you can increase your quality. What does your definition of done look like today?**
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-14-getting-started-definition-done-dod\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-14-getting-started-definition-done-dod
- FrontMatter:
    title: A better way than staggered iterations for delivery
    description: Discover a superior approach to delivery that enhances agility and reduces technical debt. Learn how to implement effective cross-functional teams today!
    ResourceId: DOMFzBBMzfq
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 9915
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-10
    weight: 155
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: a-better-way-than-staggered-iterations-for-delivery
    aliases:
    - /blog/a-better-way-than-staggered-iterations-for-delivery
    - /a-better-way-than-staggered-iterations-for-delivery
    - /resources/DOMFzBBMzfq
    - /resources/blog/a-better-way-than-staggered-iterations-for-delivery
    aliasesArchive:
    - /blog/a-better-way-than-staggered-iterations-for-delivery
    - /a-better-way-than-staggered-iterations-for-delivery
    - /resources/blog/a-better-way-than-staggered-iterations-for-delivery
    tags:
    - Software Development
    - Agile Planning
    - Agile Product Management
    - Agile Transformation
    - Engineering Practices
    - Operational Practices
    - Pragmatic Thinking
    - Value Delivery
    - Working Software
    - Product Delivery
    - Team Performance
    - Technical Excellence
    - Agile Frameworks
    - Professional Scrum
    - Team Collaboration
    - Continuous Improvement
    - Organisational Agility
    - Increment
    - Technical Mastery
    - Agile Strategy
    - Business Agility
    - Cycle Time
    - Test First Development
    - Cross Functional Teams
    - Empirical Process Control
    - Frequent Releases
    - Shift-Left Strategy
    - Continuous Delivery
    - Deployment Frequency
    - Market Adaptability
    - Throughput
    - Flow Efficiency
    - Scrum Team
    - Self Organisation
    - Competence
    categories:
    - Engineering Excellence
    - Scrum
    - Technical Leadership
    preview: staggered-iterations-for-delivery1-2-2.png
  BodyContent: |
    There is a better way than staggered iterations for delivery that will keep you on the path to agility. Staggered iterations lead to more technical debt and lower quality software.

    [Updated to reflect the 2020 Scrum Guide!](https://nkdagility.com/the-2020-scrum-guide/)

    ## TL;DR;

    The expected result of staggered iterations would be an increase in rework and in technical debt. If you are moving from a 4-year iterative process to a 4-month one you will see the value, but your process will be opaque and will only reduce your ability to deliver working software.

    > Yes, your cycle time will be reduced, but you can do so much better. Move all requirements for shipping your software into your Sprint. If you need testing then it needs to be inside of the Sprint. A general rule is that: If you need to validate something outside of the Sprint; User Acceptance, Security audit, regulatory approval; Then you need to make sure that all of the work required to pass that outside validation is doing inside of the Sprint, with no further work required from the development team.
    >
    > \-[Martin Hinshelwood](https://nkdagility.com/company/about-us/)

    For example, this means that if you have 6 weeks of animal trials, followed by 6 weeks of human trials to validate that your pacemaker firmware is good, you can't have those things happen inside of every 2 weeks Sprint. Instead, focus on what you can do to make those things pass. If they don't pass then do a full route-cause-analysis and bring that new information to your Sprint Retrospective and make sure you put measures in place to make sure it does not happen again.

    ## A better way than staggered iterations for delivery

    I have seen many companies that are trying to move towards greater agility get trapped in the past by creating artificial silos based on skills. They believe that by creating a timbox for planning, development and testing that we can get closer to agility and move away from our traditional models. Unfortunately, the actual result is to enshrine that traditional staged model and step sideways on the path to agility, not forwards. In many cases, it can be a significant step backwards that will take many painful years to rectify.

    <figure>

    ![](images/staggered-iterations-for-delivery-1-1.png)
    { .post-img }

    <figcaption>

    staggered-iterations-for-delivery

    </figcaption>

    </figure>

    I have heard this called many things. Water-Scrum-fall or maybe Scrummerfall but whatever you call it the reality is that this is just small waterfalls and in the case above not really that small at all. This is often how organisations respond when they are told to "do agile" and they end up figuring out how to not really change, and do the same thing that they have always done.

    This is not the action of a [Professional Scrum Team](/the-2020-scrum-guide/#scrum-team), but that of, at best amateurs and at worst cowboys.

    ## The problem with staggered iterations for delivery

    In the diagram above we have an 18-week cycle from inception to delivery. That’s more than 4 months between ideation and delivery with a lag of 2 months to even get feedback with a 2 month lag for all subsequent feedback. Worse this is the most expensive kind of feedback as the Coding and Testing teams have already moved on from the thing that is getting feedback and the result of that feedback will be more expensive to implement. Indeed worse yet if QA finds something that needs fixed we have maximised not only the cost to fix but the meantime to repair as the developers have moved on. And what do they do with that feedback? How is it prioritised? Do they quit what they are doing immediately and fix the previous iteration or do they wait until after they deliver this one? What if they are blocking QA? Does QA sit around till the end of the iteration after the one they reported the problem in?

    ## The solutions to staggered iterations for delivery

    We need to foster teams over individuals and make those teams responsible for the delivery of working software. To get that we need cross-functional teams that can turn ideas into that working software. And we need to do it often.

    - **Cross-functional teams** – We need to have everyone on the [Developers](/the-2020-scrum-guide/#developers) that is required to turn the Backlog Item into working software. If you were a property developer you would have access to joiners, plumbers, plasterers and electricians. You would create a team of individuals that was sufficient to complete the daily work on-site with experts on hand as needed. This is the same process for [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers). You should have all of the skills that you require on each team to turn the forecast backlog items into working software each and every iteration. Have experts on hand for those tricky items but minimise the dependency that you have on them.
    - **Asynchronous development** -  Ideally you want all of the disciplines that you need to complete each backlog item to work together to deliver the software. This is more than handing off between disciplines but moving towards everyone always working at any point in time. This is a hard one to achieve but is the responsibility of the team to figure out how; [To achieve asynchronous development you will need a modern source control system](https://nkdagility.com/getting-started-with-modern-source-control-system-and-devops/).
    - **Test first** – Test first is about not doing any work unless there is a measurable test that elicits that work. Creating tests from acceptance criteria will make sure that your team is working on and understands the next most relevant thing to be worked on and that you have built what the customer wants. Additionally, creating unit tests before code will make sure that your coders are working on the most relevant problem, and that each line of code that they complete does exactly what they intended. The long term benefit of this is that we now have an executable specification that will result in an error if a future change breaks existing functionality. [You are doing it wrong if you are not using test first.](https://nkdagility.com/you-are-doing-it-wrong-if-you-are-not-using-test-first/)
    - **Working software each iteration** – If you don’t create working software at the end of each iteration you have no way of knowing what really needs to be done to create a working increment. If you do four iterations of two weeks before you think about creating a working increment, how much work (re-work really) is left that you need to complete to really be done? To really have shippable quality? If you don’t have working software at the end of each iteration you are making sure that your business can’t ship out of band, no matter how much it wants to; [Professional Scrum Teams build software that works](https://nkdagility.com/professional-scrum-teams-build-software-works/).
    - **Quality Assurance requires no testing** – If you consider that all testing is done as part of the sprint, then the only thing that needs to be done as part of the QA gate is to review the test results and coverage and determine the sufficiency of those results and coverage. If you are taking more than four hours to QA two weeks of development then I would suggest that the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) work is not sufficient.

    These things will all individually help and if you are doing all of them together your value delivery and quality should start to increase over time. Make sure that you focus on automating everything from the moment a Software Engineer checks in code, to it being [continuously delivered to production](https://nkdagility.com/continuous-deliver-sprint/). In the age of agility giving you a competitive advantage in whatever marketplace you are in, any manual work is a risk.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-10-a-better-way-than-staggered-iterations-for-delivery\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-10-a-better-way-than-staggered-iterations-for-delivery
- FrontMatter:
    title: You are doing it wrong if you are not using test first
    description: Unlock the power of Test First principles in software development. Learn how TDD and ATDD can enhance quality, reduce bugs, and meet customer needs effectively.
    ResourceId: yqHaiUlMNTP
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 9469
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-07
    weight: 255
    AudioNative: true
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: you-are-doing-it-wrong-if-you-are-not-using-test-first
    aliases:
    - /blog/you-are-doing-it-wrong-if-you-are-not-using-test-first
    - /you-are-doing-it-wrong-if-you-are-not-using-test-first
    - /resources/yqHaiUlMNTP
    - /resources/blog/you-are-doing-it-wrong-if-you-are-not-using-test-first
    aliasesArchive:
    - /blog/you-are-doing-it-wrong-if-you-are-not-using-test-first
    - /you-are-doing-it-wrong-if-you-are-not-using-test-first
    - /resources/blog/you-are-doing-it-wrong-if-you-are-not-using-test-first
    tags:
    - Technical Excellence
    - Engineering Practices
    - Software Development
    - Test First Development
    - Operational Practices
    - Test Automation
    - Working Software
    - Automated Testing
    - Technical Mastery
    - Test Driven Development
    - Pragmatic Thinking
    - Value Delivery
    - Shift-Left Strategy
    - Competence
    - Product Delivery
    - Acceptance Test Driven Development
    - Product Validation
    - Continuous Delivery
    - Continuous Improvement
    - Empirical Process Control
    - Team Performance
    categories:
    - Engineering Excellence
    preview: nkdAgility-PSD-Krakow-0-1-1.jpg
  BodyContent: |
    Many teams are struggling with delivering modern software because they are not building with Test First Principals. Test First gives us the assurance that we have built the correct thing, that what we built is what the customer asked for and that when we change things we don’t break anything inadvertently.

    [Updated to reflect the 2020 Scrum Guide!](https://nkdagility.com/the-2020-scrum-guide/)

    ## TL;DR;

    While it takes time, effort, dedication and discipline to achieve Test First the return on investment is enormous. A common form of Test First is Test Driven Development (TDD) and we can use it to meet more of our customer's expectations, minimise our maintenance costs, and get fewer regressions and bugs in production. Ultimately without working in a test-first culture, you will be [unable to do continuous delivery](/blog/continuous-deliver-sprint/) with any confidence.

    The only question for professional [Developers](/the-2020-scrum-guide/#developers) is how to get started.

    ## You are doing it wrong if you are not using test first

    If you look up Test First on Wikipedia you will be redirected to the Test Driven Development (TDD) page and I believe this to be incorrect. While TDD is one, arguably the most effective, form of Test First it is by no means the whole thing. Can I achieve Test First with no automation at all: Yes. Can I do TDD with no automation at all: No. Do you see my conflict…

    > **_If you are building applications without writing your tests first then you are doing it wrong. Your process will result in significant rework, be less maintainable and be less likely to meet the customers needs._\*\***Scottish Software Proverb\*\* (just made it up, and I am Scottish)

    Unfortunately, while the proverb above is absolutely true there are many fanatics that will not accept that you can do test-first without automation. Just like the **Process Wars**, the **Practice Wars** are being waged around us, and while we want to endeavour to be agnostic it is not possible to be an atheist.

    You will hear a lot of different terms banded about in relations to test first:

    - **Test-Driven Development (TDD)** – Automated tests created before the code is written to validate that we need that code.
    - **Acceptance Test Driven Development (ATDD)** – Tests, either automated or manual, that validate business functionality
    - **Behaviour Driven Development (BDD)** – An automated test that validates a particular behaviour that you want your application to have.
    - etc…

    > All of these topics, and more, are covered in the [Professional Scrum Developer (PSD) training](/training/courses/professional-scrum-developer-training/) that was build in combination with Scrum.org and Microsoft as the only official team training for Scrum & DevOps.

    These terms all fulfil a specific niche and the evolution of modern software development will sprout many more. Find that which solves your specific problem and adapt until you have something that works for you, your team and your organisation.

    ## The essence of test first

    Test First has two main goals, both of which are as important as each other.

    The first is about professionally validating that which you have built. Software Development is complicated and one can easily create unintended results when that code is executed. This is not a quotient of poor programming but of the complexity of the task. In the eighteen hundreds, plumbers pumped smoke through the pipes to make sure that there were no leaks on the grounds that if it is good enough for the smoke it is good enough for water. This mentality has resulted in what we now call the ‘smoke test’ in software development and the result of its implementation is bugs in production. When compared to software development plumbing is simple; modern software is many times more complex than Software was even 10 years ago. We have accepted poor quality deliverables and expensive maintenance for far too long.

    The second goal is to shorten your feedback loops. The closer our engineers are to when the problem was created the quicker they can find it and the cheaper it is to fix. Unfortunately, it is impossible to tell in most software what ‘right’ looks like and developers just take a guess. The attitude that a problem, if it exists, will be caught by Quality Assurance (QA) or User Acceptance Testing (UAT) is unprofessional at best and incompetence at worst. We want to **know** that what we have just written not only meets our customer's expectations but also does exactly what we intended for it to do under as many circumstances as we can think of.

    > **_Test First allows us to mature from simply testing quality in towards building that quality in from the start_\*\***Jeff Levinson\*\*, Architect at Boeing

    Fundamentally it is far cheaper to fix an issue closest to its source. The longer we leave the finding of that defect the more expensive it becomes. A bug found in production is [10 times more costly](http://www.scrum.org/About/All-Articles/articleType/ArticleView/articleId/644/Agile-Economics-The-Dollars-and-Sense-of-Scrum) to fix than the same bug found in development.

    The three virtues of Test First:

    1. Validation of building what was asked for
    2. Validation that what we have built works as we intended
    3. Validation that changes have not broken original intent

    Ideally, we want our tests to be as close to the code as possible, but also as easily understood by the customer as possible. Ideally, all of our code is automated and we have an executable specification. It's a balancing act…

    ### Business Validation – We have built what was asked for

    Getting validation that we are building the right thing is key to actually being able to build the right thing. This sounds like a no-brainer but what do we usually do?

    Well, we usually take our requirements, in whatever form we generally make them, and give them to our coders to turn into working software. Quite separately we give the same requirements to our testers and they create a bunch of tests to validate what we have built.

    Did you notice the problem with this workflow?

    > **_The worst that can happen is that we built exactly what the customer asked for!_**

    How can we ever build to meet the measure if we don’t build to what is to be measured? We need to flip that on its head and instead have the tests created first (the measure) and then Code to make the tests pass. Now that we have removed the inevitable time-consuming rework we can take that time and use it to create even more value for our customers.

    In addition, we are far more likely to be able to meet our customers expectations now we have an additional level of focus provided by those tests.

    ### Developer Validation – What we have built works as we intended

    It's now 2020 and gone are the cowboy days of the late nineties and [early naughties](http://en.wikipedia.org/wiki/Naughties). Along with [using modern source control](https://nkdagility.com/getting-started-with-modern-source-control-system-and-devops/), software engineers can no longer hide behind their management as "not giving the approval to do Unit Testing", or changing what "unit testing" means to allow them to bypass the requirement. This is [about professionalism](/blog/scrum-tapas-importance-professionalism/) and all developers, no matter what they are working on, should be validating the work that they do.

    > **_You are not a professional if you do not do the due diligence necessary to validate what you have created works as intended and continuous to do so.  
    > \-[Professional Scrum teams build software that works](https://nkdagility.com/professional-scrum-teams-build-software-works/)_**

    There are two main value-adds here. The first is that when a coder creates functionality it does exactly what he intended and we have a record, and executable specification, of what that intent was. The second comes later. When we go to add functionality later we know when we have broken existing functionality and that is one of the most valuable parts of this endeavour.

    **Can you imagine how amazing it would be if you could use this executable specification to validate all future changes don’t break your application?**
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-07-you-are-doing-it-wrong-if-you-are-not-using-test-first\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-07-you-are-doing-it-wrong-if-you-are-not-using-test-first
- FrontMatter:
    title: Professional Scrum teams build software that works
    description: Discover how Professional Scrum Teams can deliver high-quality software that works. Learn to enhance accountability and trust in your development process.
    ResourceId: vCeqzJIgF1F
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 22774
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-12-03
    weight: 175
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: professional-scrum-teams-build-software-works
    aliases:
    - /blog/professional-scrum-teams-build-software-works
    - /professional-scrum-teams-build-software-works
    - /professional-scrum-teams-build-software-that-works
    - /blog/professional-scrum-teams-build-software-that-works
    - /resources/vCeqzJIgF1F
    - /resources/blog/professional-scrum-teams-build-software-works
    aliasesArchive:
    - /blog/professional-scrum-teams-build-software-works
    - /professional-scrum-teams-build-software-works
    - /professional-scrum-teams-build-software-that-works
    - /blog/professional-scrum-teams-build-software-that-works
    - /resources/blog/professional-scrum-teams-build-software-works
    tags:
    - Working Software
    - Pragmatic Thinking
    - Software Development
    - Technical Mastery
    - Agile Frameworks
    - Professional Scrum
    - Scrum Team
    - Empirical Process Control
    - Product Delivery
    - Increment
    - Team Performance
    - Agile Product Management
    - Technical Debt
    - Competence
    - Engineering Practices
    - Operational Practices
    - Agile Transformation
    - Continuous Improvement
    - Technical Excellence
    - Value Delivery
    - Decision Making
    categories:
    - Scrum
    - Engineering Excellence
    - Technical Leadership
    preview: nkdAgility-PSD-Krakow-02-1-1.jpg
  BodyContent: |
    I am always surprised at the number of teams that release undone work to production. I understand that one may need a few sprints, or many if you inherited something nasty, to pay back that debt, but if it's more then you are not a [Professional Scrum Team](/blog/scrum-tapas-importance-professionalism/). The sheer amount of software that I have that is buggy, slow, or just not finished makes me think that there are few professional [Scrum Teams](/the-2020-scrum-guide/#scrum-team) out there!

    ## TL;DR;

    Every organisation has the right to hold their [Developers](/the-2020-scrum-guide/#developers) accountable for the quality, but never quantity, of the software that they build. Every [](https://nkdagility.com/training/courses/professional-scrum-developer-training/)[Developer](https://nkdagility.com/the-2020-scrum-guide/#developers) should pursue engineering excellence through DevOps practices, automation, and rigorous attention to detail for every release. Working software builds trust with your users and promotes your brand, faulty software encourages distrust and hurts your reputation. Defective software and technical debt are the causes of the current death grip that organisations have to traditional Taylorism based management techniques.

    > Ultimately if your organisation will not let you build software any way you please its because of the shit that you have been trying to get away with delivering in the past. You have work to do to build trust again.

    Treat your team to a [Professional Scrum Developer](https://nkdagility.com/training/courses/professional-scrum-developer-training/) class to get them up to speed.

    ## Scrum teams build quality software that works

    Working software is software that is free from fault or defect. Developers are primarily accountable for the quality and delivering a usable increment. While they are also responsible for value delivery, the accountability for that lies with the [Product Owner](/the-2020-scrum-guide/#product-owner). That means that if there is a choice between delivering value that lacks quality or providing less value that is of higher quality, [](https://nkdagility.com/training/courses/professional-scrum-developer-training/)[Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) should always choose quality.

    Since "rules are for the guidance of wise people, and the obedience of fools" I am going to caveat that statement for those that like to latch onto absolutes. Since any software that you build is an organisational asset, and all assets are attributed to the value of your company then that software must exist on a balance sheet somewhere. If you as the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) decide to cut quality to make a delivery do you immediately speak to the CFO so that they can accurately reflect that loss of value on the companies balance sheet? Because if you don't, then knowing or not there is a danger that your organisation is committing fraud by inaccurately reflecting the value of your software! Ultimately the decision to cut quality should only be taken with the full consent and understanding of your executive leadership team.

    > The decision to cut quality is not one that the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers), the [Product Owner](https://nkdagility.com/the-2020-scrum-guide/#product-owner), or IT management are able to take, it is reserved for executive leadership alone.

    ## Quality software is not about expectations!

    Working software is software that is free from fault or defect, but it does not necessarily meet the [Product Owner's](https://nkdagility.com/the-2020-scrum-guide/#product-owner) or stakeholders expectations.

    It is just not possible for everyone's expectations to be understood let alone met, and thus it is unrealistic to expect the [](https://nkdagility.com/training/courses/professional-scrum-developer-training/)[Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) to deliver on them. At the end of every [Sprint](/the-2020-scrum-guide/#the-sprint) we have a [Sprint Review](/the-2020-scrum-guide/#sprint-review) where we invite stakeholders, and the [Scrum Team](/the-2020-scrum-guide/#scrum-team), to pause and reflect on the [Product Backlog](/the-2020-scrum-guide/#product-backlog) based on that which was delivered. There you can explore the difference between expectation and delivery and then update the [Product Backlog](/the-2020-scrum-guide/#product-backlog) to reflect that difference. The [Scrum Team](https://nkdagility.com/the-2020-scrum-guide/#scrum-team) should continuously be investigating the difference between what they delivered and stakeholders expectations so that they can close that gap as much as possible, so while they are responsible for meeting expectations, they can't be held accountable.

    > The Development Team consists of professional [Developers](https://nkdagility.com/training/audiences/developers/) that are the people in the [Scrum Team](https://nkdagility.com/training/audiences/teams/) that are committed to creating any aspect of a usable Increment each Sprint. The specific skills needed by the [Developers](https://nkdagility.com/training/audiences/developers/) are often broad and will vary with the domain of work.
    >
    > \-[The 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/#developers)

    [The Scrum Guide](/the-2020-scrum-guide/) very deliberately does not tell you how to build working software. It only states that its delivery is the accountability and accountability, and responsibility of the [](https://nkdagility.com/training/courses/professional-scrum-developer-training/)[Developers](https://nkdagility.com/training/audiences/developers/) If you don't have working software, then you are not yet doing Scrum, although you might be working towards it.

    So, to define working software we have to look at what working software is not:

    1. **Known errors or exceptions** - if you find a bug then fix it. If it's too big, then raise it with the [Product Owner](https://nkdagility.com/the-2020-scrum-guide/#product-owner), and get it on the [Product Backlog](/the-2020-scrum-guide/#product-backlog). To much time is spent managing rather than fixing bugs. Just fix them.
    2. Manual Tests - if you have manual tests then you are already working towards software that does not work, or that you struggle to deliver. It is unsustainable to have any manual testing, so get automating.
    3. Manual pipelines - in 2017 no-one should be building production code on their local computer, never mind shipping it to production from there. Even if all your build does is package up some files, and push them to an FTP location. Automate your build process... If you have a person that has to do something more than approving between code and production, then you should look to automate that process away. Humans make mistakes, and humans miss stuff. At least with an automated process if not continuous delivery, you get consistency, and you can increase the complexity over time for consistency. Make sure that you automate both your build and release pipelines.
    4. No Source Control – Yes, I still meat organisation with no Source Control, or no control over it. I wrote Getting started with modern source control and DevOps for just that reason. If you don't even have source control, whatever you are developing, then you need to get help and quick. The business risks that are exposed by not having it are just too big.
    5. Lack of feature flags – It is a fundamental fallacy of the rejected backlog item, and your engineering team is going to have to figure out how to release at the end of every sprint (or every commit) regardless of the quality of the PBI’s being worked on. Hide features that are not completed behind feature flags so that they are not visible to end-users, but your code can still be shipped.

    The other name for the things that make it difficult to get to working software; Technical Debt. All of the things listed above are forms of Technical Debt, but the biggest form is just poor quality code. Code that is not tested or would not meet even a cursory code review by another software engineer.

    ## What happens if Developers are not accountable for Quality?

    If the [Developers](https://nkdagility.com/the-2020-scrum-guide/#developers) are not held accountable for quality why do you believe that you have it? Quality is one of those hidden measures in software that can be there or not, and you would not know unless you were using that product in anger. If you put pressure to deliver on a [](https://nkdagility.com/training/courses/professional-scrum-developer-training/)[Developers](https://nkdagility.com/training/audiences/developers/), they will consistently and increasingly cut quality to meet whatever ridiculous deadline you give them.

    ## Use Scrum to Inspect and Adapt empirically

    Every organisation needs to focus on delivering quality working software that is of use to its customers. The entire [Scrum Team](/the-2020-scrum-guide/#scrum-team) is accountable and then works together over many iterations, experimenting and continuously improving, to deliver the best possible outcome in the circumstances. So instead of being an amateur team, be a team of Professionals that deliver working software because that is what your organisation and your customers deserve. If you are having a hard time delivering then discuss your options anytime, but especially at your Sprint Retrospective, and figure out what actionable improvement you can make that will help you pay back some of your technical debt and move forward. Once such step could be making sure that your [](https://nkdagility.com/training/courses/professional-scrum-developer-training/)[Developers](https://nkdagility.com/training/audiences/developers/) at least understand this with a [Professional Scrum Developer](https://nkdagility.com/training/courses/professional-scrum-developer-training/) course.

    Use empiricism to Inspect and Adapt with Scrum.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-03-professional-scrum-teams-build-software-works\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-12-03-professional-scrum-teams-build-software-works
- FrontMatter:
    title: The Sprint Goal is a commitment for the Sprint Backlog
    description: Discover the importance of the Sprint Goal in Scrum. Learn how it fosters team focus and transparency, driving valuable outcomes in your projects.
    ResourceId: 99LDtXqmRu5
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 45088
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-11-27
    weight: 790
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    aliases:
    - /blog/the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    - /the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    - /resources/99LDtXqmRu5
    - /resources/blog/the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    aliasesArchive:
    - /blog/the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    - /the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    - /resources/blog/the-sprint-goal-is-a-commitment-for-the-sprint-backlog
    tags:
    - Agile Planning
    - Agile Frameworks
    - Professional Scrum
    - Software Development
    - Agile Product Management
    - Scrum Team
    - Common Goals
    - Product Delivery
    - Scrum Values
    - Team Performance
    - Transparency
    - Pragmatic Thinking
    - Empirical Process Control
    - Scrum Master
    - Team Collaboration
    categories:
    - Scrum
    preview: naked-Agility-Scrum-Framework-Sprint-Goal-1-1.jpg
  BodyContent: |
    In [the 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/) Ken and Jeff augmented the idea of the [Sprint Goal](/the-2020-scrum-guide/#commitment-sprint-goal). The [](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal)[Sprint Goal](/the-2020-scrum-guide/#commitment-sprint-goal) is a commitment to ensure transparency and focus against progress during a Sprint.

    > The Sprint Goal is the single objective for the Sprint. Although the [Sprint Goa](/the-2020-scrum-guide/#commitment-sprint-goal)l is a commitment by the Developers, it provides flexibility in terms of the exact work needed to achieve it. The Sprint Goal also creates coherence and focus, encouraging the Scrum Team to work together rather than on separate initiatives.  
    > The Sprint Goal is created during the Sprint Planning event and then added to the Sprint Backlog. As the Developers work during the Sprint, they keep the Sprint Goal in mind. If the work turns out to be different than they expected, they collaborate with the Product Owner to negotiate the scope of the Sprint Backlog within the Sprint without affecting the Sprint Goal.
    >
    > [The 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/#commitment-sprint-goal)

    The Sprint Goal is a short term mission that can be achieved in service to the [Product Goal](https://nkdagility.com/the-product-goal-is-a-commitment-for-the-product-backlog). The Sprint Goal should describe the idea of "Why are we doing this Sprint" and should encapsulate a step towards that desired outcome. There should only be one per Sprint, to give the team focus.

    ![](images/Scrum-Framework-Sprint-Goal-920x720.png)
    { .post-img }

    The [Scrum Guide](https://nkdagility.com/the-2020-scrum-guide) is not going to tell you what your Sprint Goals should be, this is something that is unique to your business context, and should be heavily influenced by the [Product Goal](https://nkdagility.com/the-product-goal-is-a-commitment-for-the-product-backlog). I would expect the Product Owner to come to Sprint Planning with an idea of what the next Sprints Sprint Goal should be, as well as likely Backlog Items that fit. If this idea, through a prospective Sprint Goal is communicated effectively with the Developers then they will be prepared for Sprint Planning.

    Some Good Examples of a Product Goal:

    - "Add \[capability\] to entice new users"
    - "Improve \[feature\] to make it more usable"

    The Sprint Goal should represent the next most valuable outcome towards the [Product Goal](https://nkdagility.com/the-product-goal-is-a-commitment-for-the-product-backlog), and is part of the Sprint Backlog. It is the commitment that is made by the Developers towards a valuable outcome. It help the Developers understand the purpose, and should give them enough information to help them make the right choices during the Sprint.

    Does your team have a Sprint Goal?
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-27-the-sprint-goal-is-a-commitment-for-the-sprint-backlog\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-27-the-sprint-goal-is-a-commitment-for-the-sprint-backlog
- FrontMatter:
    title: Release planning and predictable delivery
    description: Master release planning and achieve predictable delivery in agile environments. Discover strategies to enhance quality and streamline your software development process.
    ResourceId: 2cOXevMnGb_
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 9714
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-11-24
    weight: 200
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: release-planning-and-predictable-delivery
    aliases:
    - /blog/release-planning-and-predictable-delivery
    - /release-planning-and-predictable-delivery
    - /resources/2cOXevMnGb_
    - /resources/blog/release-planning-and-predictable-delivery
    aliasesArchive:
    - /blog/release-planning-and-predictable-delivery
    - /release-planning-and-predictable-delivery
    - /resources/blog/release-planning-and-predictable-delivery
    tags:
    - Software Development
    - Agile Planning
    - Agile Product Management
    - Pragmatic Thinking
    - Working Software
    - Product Delivery
    - Value Delivery
    - Operational Practices
    - Agile Frameworks
    - Empirical Process Control
    - Professional Scrum
    - Release Management
    - Technical Debt
    - Agile Transformation
    - Organisational Agility
    - Forecasting
    - Business Agility
    - Scrum Team
    - Increment
    - Agile Strategy
    - Estimation
    - Market Adaptability
    - Transparency
    - Scrum Master
    - Agile Planning Tools
    - Backlog Refinement
    - Continuous Improvement
    - Definition of Done
    - Enterprise Agility
    - Sociotechnical Systems
    - Competence
    categories:
    - Scrum
    - Engineering Excellence
    - Technical Leadership
    preview: nkdAgility-habits-16x9-1280-2-2.jpg
  BodyContent: |
    Many organisations wrestle with the seeming incompatibility between agile and release management, and they struggle with release planning and predictable delivery.

    [Updated to reflect the 2020 Scrum Guide!](https://nkdagility.com/the-2020-scrum-guide/)

    ## TL;DR;

    Without working software, you can't build trust and you don't know when you will get the next piece of working software.

    Any software that you create is an organisational asset and decisions to cut quality need to be reflected in your company accounts and as such those decisions need to made by your executive leadership and should not be made by [Developers](/the-2020-scrum-guide/#developers). Once you accept this, and quality becomes non-negotiable, your [Dev](/the-2020-scrum-guide/#developers)[e](/the-2020-scrum-guide/#developers)[lopers](/the-2020-scrum-guide/#developers) can focus on creating usable increments of working software. Once you have usable increments of working software, you can then start to look with interest at the progress being made on features and goals.

    Without a regular cadence of delivery of working software any belief that you will get a usable increment is misguided at best. [Professional Developers](/the-2020-scrum-guide/#developers) create working software.

    ## Release planning and predictable delivery

    The incompatibility between predictable delivery and agility is fictitious ([tweet this](http://clicktotweet.com/Ub4K3)) and while usually created by an organisation and structure that is unwilling to let go of the old ways and embrace the tenants of agile it can also be the result of a [Scrum Teams](/the-2020-scrum-guide/#scrum-team) fervour to divest themselves of all things that smack of prior planning. There is a lack of understanding that agile and the path to agility is far more than just a change in the way that you build software, it is a fundamental shift in the way that you run your business. Much like the lean movement in manufacturing, companies that embraced it wholeheartedly were the ones that ultimately see the competitive edge that it provides. If one is unwilling to let go of the old ways, then one can’t attain the value of the new. This change will take hard work and courage as the fundamental transparency required to inspect and adapt effectively is at odds with the measures of the past. The lack of predictability of software development is the key to understanding the new model.

    ## Why is software so unpredictable

    **All software development is product development.** In lean manufacturing, we can optimise the production of pre-developed products through the nature of its predictable production. Each unit of work takes the same amount of materials and time to produce so any changes that we make to the process, time, or materials can easily be qualified and the benefit demonstrated. **Manufacturing lives in the predictive world.**

    With software everything that we create takes its own amount of time: You can really only know how long something took after it has been completed. Even in manufacturing if you asked an engineer how long it would take to develop a new type of unit of work they would not be able to tell you with any certainty. Once they have developed it however they can tell you exactly how long it will take to make each one, and then systematically optimise the process that you use to make it. In software development we are always doing new product design, therefore, we have no certainty...and this often results in chaos. **Software lives in the empirical world.**

    All is not lost however as we can, by looking at our history of delivery for similar things, make a pretty good **forecast**…

    The best thing we can then do is to expend effort to make that forecast as accurate as possible while accepting that more time spent planning does not necessarily affect the accuracy of that forecast.

    ![image](images/image80-1-1.png)  
    { .post-img }
    Figure: Diminishing returns from [Agile Estimating – Estimation Approaches](http://leadinganswers.typepad.com/leading_answers/2007/11/agile-estimatin.html)

    Ultimately Software Development is a creative endeavour and has the same lack of predictability that painting a picture, writing a book or making a movie has. Yet movies get made all of the time. How can that possibly be! Well, they have a Director ([Product Owner](/the-2020-scrum-guide/#product-owner)) that has a bunch of money and a delivery plan, a Producer (Scrum Master) to make sure that everyone has the skills, knowledge and assets available at the right time and place and one or more Units (Scrum Teams) that have all of the skills necessary to turn the Directors ideas into a working movie. They create Storyboards of what they expect to create so that they can run it past the stakeholders and get feedback. They take those storyboards to the Units who collaboratively work together with the stunt, prop, lighting, camera, sound and wardrobe crews to get estimates and costs and ultimately coordinating to create the movie. Sometimes they don’t know how to do stuff and have to have a go and see what they get.

    Making a movie is just like building software, you need a budget, you need a plan, and you are trying to reach a ship date. And just like making a movie, you have to make money at the end of the day so that you can do it all over again.

    ## Accept the lack of predictability

    While I hope by now you understand that the lack of predictability is part of the nature of building software, there are many things that we can do to lessen the impact of that chaos. Indeed if you were to estimate all of the discreet things that you need to do to achieve a goal (let us call them backlog items) in Small, Medium and Large what would your standard deviation of actual hours be? I would wager that it is fairly large. So large in fact that at least half of all mediums would be more accurately classified as Large. But that reclassification can only be done with hindsight. This is indeed one of the tenants of the No-Estimates movement, as really there are only three classifications of size: **small,** **fits** in a Sprint, or **too big** to fit in a Sprint.

    This difficulty in estimation is normal for organisations that move towards agility as the transparency that it brings uncovers these sorts of problems. In order to increase the accuracies of our forecasts, there are a number of simple activities that we can perform. These activities, while easy to understand, are very hard to do as they require a culture shift within your organisation as well as the courage of the participants to make them work.

    ## Focus on continuous quality

    Most software lacks quality for the simple reason that you can not easily see the quality in software like you could with a table or a painting. I am not talking about the quality of the User Interface, but the quality under the covers; the quality of the code.

    > If you put developers under pressure to deliver they will continuously and increasingly cut quality to meet deadlines.\-Unknown ([Tweet this](http://clicktotweet.com/0U2be))

    A lack of quality of the code results in an increase in [Technical Debt](/blog/professional-scrum-teams-build-software-works/) (or more accurately an unhedged fund) which in turn results in two nasties. The first is the teams increasingly have to spend more time struggling with the complexity of your software rather than on new features. If you are still pushing your teams to deliver the same feature level every year you are only encouraging them to cut more quality and thus incurring more technical debt which becomes a vicious cycle. The second is an increasing number of bugs found in production. Bugs found in production also directly impact on the number of features that the team can deliver and any bug, no matter how small, costs ten times and much to fix in production than it does in development.

    The only way to handle technical debt is to stop creating it, and then pay a little back each iteration. If however, you are so drowning in technical debt that you cant create working software at the end of the iteration then:

    1. Create a **[short measurable checklist](/blog/getting-started-definition-done-dod/)** that mirrors minimum releasable product ([Defenition of Done](/blog/getting-started-definition-done-dod/))
    2. Stop adding new features and **make your product meet that checklist** and release your product
    3. While you have an increment of working software ([Sprint](/the-2020-scrum-guide/#the-sprint))
       1. **Work to create something of value ([Increment](/the-2020-scrum-guide/#increment))**
          1. Work towards a new goal while meeting the DOD ([Sprint Goal](/blog/the-sprint-goal-is-a-commitment-for-the-sprint-backlog/))
          2. Leave things better than you found them (Engineering Excellence)
       2. **Review that thing of value with your stakeholders ([Sprint Review](/the-2020-scrum-guide/#sprint-review), Backlog Adaption)**
          1. Get feedback on at least one new thing for stakeholders
          2. Update the Backlog to reflect this new information
       3. **Reflect on how you worked with your entire team ([Sprint Retrospective](/the-2020-scrum-guide/#sprint-retrospective), Kaizen)**
          1. Is quality increasing?
          2. Is the DOD increasing?
          3. What can we change to make things better?
    4. Go to #1

    You can call the activity that results from dropping out of the while loop of working software to be a **Scrumble**; You need to stop piling more features on top of the features that don’t work and fix things so that you can make new things. Ultimately [professional teams build software that works](/blog/professional-scrum-teams-build-software-works/).

    There are a number of strategies that can help you both stop creating and start paying back technical-debt:

    - **Sufficient requirements** – If your backlog has things in it that are too big or too vague then your team will not really be able to understand them and this, in turn, creates a multiplier for uncertainty. Follow the INVEST (Independent, Negotiable, Valued, Estimable, Small, Testable ) model for every single thing that you ask the team to deliver. If you invest in you backlog in this way you will find it much easier to deliver the contents and thus predict that delivery. This will require you to spend a significant amount of time in refinement. Backlog refinement is key to facilitating a flow of actionable Backlog Items to your team.
    - **The [Developers](/the-2020-scrum-guide/#developers) choose what they can deliver** – this implies that the [Developers](/the-2020-scrum-guide/#developers) can reject any item on the backlog that they do not understand. If we accept that every [Developer](/the-2020-scrum-guide/#developers) is trying to do their best to deliver for their [Product Owner](/the-2020-scrum-guide/#product-owner) then the only reason to reject anything would be if an item is too big or does not have enough detail to understand. These Backlog Items can be put on the queue for refinement and refined over the next Sprint. Remember that there is [no such thing as a rejected backlog item](/blog/the-fallacy-of-the-rejected-backlog-item/), only actionable feedback and continuous improvement.
    - **Definition of Done (DoD)** – Along with having sufficient requirements the single biggest blocker to predictability is a lack of common understanding of DONE. Done for [Developers](/the-2020-scrum-guide/#developers) should equal what it means to complete an item with no further work required to ship it. If [you cant ship working software](/blog/professional-scrum-teams-build-software-works/) then you need to stop sprinting, Scrumble, and focus on getting your software into a shape that can be delivered in a Sprint.
    - **Test First** - Focus on [Test First practices like TDD or ATDD](/blog/you-are-doing-it-wrong-if-you-are-not-using-test-first/) to help you make sure that not only did your engineers build what they expect, but that you ultimately built what the customer expects.
    - **Fixed length iterations** – If you have variable length iterations you can’t be sure what you can do in a particular timeframe. How much decomposition do you need to do to the backlog? How much can the team deliver in a single iteration? You can’t be sure unless you have fixed length iteration, and [you reject the idea of staggered iterations](/blog/a-better-way-than-staggered-iterations-for-delivery/).
    - **No separate teams** – This means no separate test teams, configuration management teams and definitely no separate maintenance teams. It's hard for folks to grasp, especially with the recent focus on DevOps but if you have separate teams then why would your [Developers](/the-2020-scrum-guide/#developers), those best placed to fix any problems, care about the problems of other teams. The most successful organisations at creating software have development teams that own the entire application lifecycle (Amazon AWS | Visual Studio | Azure DevOps.)
    - **Manage dependencies** - Managing dependencies is a hard task and my advice would always be to minimise the number of dependencies that you have. [Developers](/the-2020-scrum-guide/#developers) should have all of the skills required to deliver what you want at the quality level that you want. So if you need to have productionised databases or scripting for production delivery then you might need a DBA or an Operations administrator or two. This can be hard for many teams or organisations but you will have far less success creating silos like Configuration Management or DevOps. Rather add those individuals that you need to the team. However, if you have a dependency on a separate team, maybe you have an application upon which all of your other applications depend, then you may need another way. This is not a silo of types of individual skills, but of a domain and that team just has something in their backlog upon which you are dependent. It is up to the team's respective [Product Owners](/the-2020-scrum-guide/#product-owner) to fight negotiate over when these things get done.
    - **Use a modern source control system** - A [modern source control system is more than just code management](/blog/getting-started-with-modern-source-control-system-and-devops/), it should include all of the goodies talked about in DevOps practices and beyond.

    If you can, do them all, and many more…
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-24-release-planning-and-predictable-delivery\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-24-release-planning-and-predictable-delivery
- FrontMatter:
    title: The Product Goal is a commitment for the Product Backlog
    description: Discover the importance of the Product Goal in Scrum. Learn how it drives focus and transparency for your team’s success. Is your Product Goal defined?
    ResourceId: sVDzuTFDLSJ
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 45086
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-11-23
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: the-product-goal-is-a-commitment-for-the-product-backlog
    aliases:
    - /blog/the-product-goal-is-a-commitment-for-the-product-backlog
    - /the-product-goal-is-a-commitment-for-the-product-backlog
    - /resources/sVDzuTFDLSJ
    - /resources/blog/the-product-goal-is-a-commitment-for-the-product-backlog
    aliasesArchive:
    - /blog/the-product-goal-is-a-commitment-for-the-product-backlog
    - /the-product-goal-is-a-commitment-for-the-product-backlog
    - /resources/blog/the-product-goal-is-a-commitment-for-the-product-backlog
    tags:
    - Common Goals
    - Agile Product Management
    - Professional Scrum
    - Software Development
    - Agile Frameworks
    - Agile Planning
    - Product Delivery
    - Product Owner
    - Value Delivery
    - Strategic Goals
    - Product Backlog
    - Scrum Team
    - Working Software
    - Agile Transformation
    - Pragmatic Thinking
    categories:
    - Scrum
    - Product Management
    preview: naked-Agility-Scrum-Framework-Product-Goal-2-1.jpg
  BodyContent: |
    In [the 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/) Ken and Jeff introduces the idea of the [Product Goal](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal). The [Product Goal](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal) is a commitment to ensure transparency and focus against progress.

    > The Product Goal describes a future state of the product which can serve as a target for the Scrum Team to plan against. The Product Goal is in the Product Backlog. The rest of the Product Backlog emerges to define “what” will fulfil the Product Goal.  
    > A product is a vehicle to deliver value. It has a clear boundary, known stakeholders, well-defined users or customers. A product could be a service, a physical product, or something more abstract.  
    > The Product Goal is the long-term objective for the Scrum Team. They must fulfil (or abandon) one objective before taking on the next.
    >
    > [The 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal)

    The Product Goal is an objective to try and meet rather than a guarantee. We may start on the journey towards the Product Goal and discover that there is a better place to go. While the Product Goal is there to give the Scrum Team focus towards an overall objective, it is also important to realise that it is not immutable. If the Scrum Team realise that the Goal is no longer valuable, or that some other goal becomes more valuable then they should change it.

    ![](images/naked-Agility-Scrum-Framework-Product-Goal-920x720-1-2.jpg)
    { .post-img }

    Some Good Examples of a Product Goal:

    - "Reach 10,000 new users in 6 months"
    - "Improve the customer experience by improving the NPS over the next year"

    The [Product Goal](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal) should be a singular Goal that each Sprint Goal can be crafted towards. It should be short, measurable, and easy to understand. Everyone on the Scrum Team and the wider organisation should understand it and how the work that they are doing contributes to it. It is similar to the Visionary Goal that a Business Doctor I engaged helped me create for my business. Every product, every project, and every business should have a Visionary Goal. In Scrum, we call it the [Product Goal](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal).

    Do you have a Product Goal?
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-23-the-product-goal-is-a-commitment-for-the-product-backlog\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-23-the-product-goal-is-a-commitment-for-the-product-backlog
- FrontMatter:
    title: Update to the Scrum Guide on the 25th Anniversary of the Scrum Framework
    description: Discover the latest updates to the Scrum Guide on its 25th anniversary, simplifying Scrum for better team management and accountability. Read more!
    ResourceId: 7CqdvOa9t4c
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 45077
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-11-18
    weight: 790
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: update-scrum-guide-25th-anniversary-scrum-framework
    aliases:
    - /blog/update-scrum-guide-25th-anniversary-scrum-framework
    - /update-scrum-guide-25th-anniversary-scrum-framework
    - /update-to-the-scrum-guide-on-the-25th-anniversary-of-the-scrum-framework
    - /blog/update-to-the-scrum-guide-on-the-25th-anniversary-of-the-scrum-framework
    - /resources/7CqdvOa9t4c
    - /resources/blog/update-scrum-guide-25th-anniversary-scrum-framework
    aliasesArchive:
    - /blog/update-scrum-guide-25th-anniversary-scrum-framework
    - /update-scrum-guide-25th-anniversary-scrum-framework
    - /update-to-the-scrum-guide-on-the-25th-anniversary-of-the-scrum-framework
    - /blog/update-to-the-scrum-guide-on-the-25th-anniversary-of-the-scrum-framework
    - /resources/blog/update-scrum-guide-25th-anniversary-scrum-framework
    tags:
    - Agile Frameworks
    - Professional Scrum
    - Scrum Team
    - Software Development
    - Team Collaboration
    - Agile Planning
    - Agile Product Management
    - Self Organisation
    - Team Performance
    - Increment
    - Value Delivery
    - Product Delivery
    categories:
    - Scrum
    preview: naked-Agility-Scrum-Framework-3-2.jpg
  BodyContent: |
    It has been 25 years since Scrum was first created by Ken Schwaber and Jeff Sutherland and it has gone through many revisions. The last major revision was in 2017 and this update represents a simplification for 2020.

    [The 2020 Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/)

    [The 2017 Scrum Guide](https://nkdagility.com/the-2017-scrum-guide/)

    > New updates include simplified language, less prescriptive and emphasis on the Scrum Team and its need to be self-managing

    It's very clear that Scrum has not changed! Ken & Jeff have just found better ways to describe Scrum to simplify the story as well as reduce the cognitive load of interpreting it.

    ![](images/naked-Agility-Scrum-Framework-920x720-2-3.jpg)
    { .post-img }

    There are lots of awesome changes so let's see if I can highlight the things I noticed the most:

    - [Scrum Teams are self-managing](https://nkdagility.com/the-2020-scrum-guide/#scrum-team) - Scrum Teams are cross-functional, meaning the members have all the skills necessary to create value each Sprint. They are also self-managing, meaning they internally decide who does what, when, and how.
    - [Scrum Team is accountable for creating a valuable](https://nkdagility.com/the-2020-scrum-guide/#scrum-team) - The entire Scrum Team is accountable for creating a valuable, useful Increment every Sprint. Scrum defines three specific accountabilities within the Scrum Team: the Developers, the Product Owner, and the Scrum Master.
    - [The Product Goal is a commitment for the Product Backlog](https://nkdagility.com/the-2020-scrum-guide/#commitment-product-goal) - The Product Goal describes a future state of the product which can serve as a target for the Scrum Team to plan against. The Product Goal is in the Product Backlog. The rest of the Product Backlog emerges to define “what” will fulfill the Product Goal.
    - [The Sprint Goal is a commitment for the Sprint Backlog](https://nkdagility.com/the-2020-scrum-guide/#commitment-sprint-goal) - The Sprint Goal is the single objective for the Sprint. Although the Sprint Goal is a commitment by the Developers, it provides flexibility in terms of the exact work needed to achieve it. The Sprint Goal also creates coherence and focus, encouraging the Scrum Team to work together rather than on separate initiatives.
    - [Definition of Done is a commitment for the Increment](https://nkdagility.com/the-2020-scrum-guide/#commitment-definition-of-done) \- The Definition of Done is a formal description of the state of the Increment when it meets the quality measures required for the product. The moment a Product Backlog item meets the Definition of Done, an Increment is born.
    - [The What, the Why, and the How of Sprint Planning](https://nkdagility.com/the-2020-scrum-guide/#sprint-planning) - The Product Owner ensures that attendees are prepared to discuss the most important Product Backlog items and how they map to the Product Goal. The Scrum Team may also invite other people to attend Sprint Planning to provide advice.

    I hope that that get as much from this new revision of the Scrum Guide as I have.

    Get your copy of the **[new version of the Scrum Guide](https://nkdagility.com/the-2020-scrum-guide/)**!
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-18-update-scrum-guide-25th-anniversary-scrum-framework\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-18-update-scrum-guide-25th-anniversary-scrum-framework
- FrontMatter:
    title: Online is the new co-located
    description: Explore how online participation redefines co-location in agile practices. Embrace video engagement for effective communication and collaboration in virtual events.
    ResourceId: QnZVgaG90q_
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44487
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-11-16
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: online-is-the-new-co-located
    aliases:
    - /blog/online-is-the-new-co-located
    - /online-is-the-new-co-located
    - /resources/QnZVgaG90q_
    - /resources/blog/online-is-the-new-co-located
    aliasesArchive:
    - /blog/online-is-the-new-co-located
    - /online-is-the-new-co-located
    - /resources/blog/online-is-the-new-co-located
    tags:
    - Transparency
    - Team Collaboration
    - Remote Working
    - Scrum Values
    - Pragmatic Thinking
    - Social Technologies
    - Collaboration Tools
    - Miscellaneous
    - Sociotechnical Systems
    - Team Performance
    categories: []
    preview: image-21-3-3.png
  BodyContent: |
    In light of the [new normal](https://nkdagility.com/blog/live-virtual-classrooms-and-the-new-normal/) and the last 20 years of technological progress, we need to [re-define co-location](https://nkdagility.com/blog/what-is-your-perspective-on-collocation/) as we no longer need to be in the same room as each other to get the [80% of communication that is non-verbal](https://journals.lww.com/thehearingjournal/Fulltext/2016/05000/The_Art_of_Nonverbal_Communication_in_Practice.5.aspx). If we are participating in an online event, we should try our best to keep our cameras on so that we can all read those non-verbal queues.

    <figure>

    ![](images/image-21-3-3.png)
    { .post-img }

    <figcaption>

    49 People in Microsoft Teams

    </figcaption>

    </figure>

    **TLDR; If you are participating in an online event you should be transparent and commit to being open & respectful by having** _**your camera on**_ **and engaging the topics and outcomes at hand as best as you are able**. **While we show commitment to our fellow participants by keeping our camera on, we should in turn respect a participants need to sometimes turn their cameras off.**

    **Just as you would not take a phone call in a meeting and disrupt everyone, the same social conventions for meetings should be respected. Let folks know in the chat, turn your camera and mic off, return when you can focus again.** **If you are unable to use the camera due to bandwidth it may be better to attend an in-person event**.

    _Note: Rules are for the guidance of wise people and the obedience of fools._

    ## Co-location defined

    The idea behind co-location is that with 80% of communication being non-verbal we need to be able to be in the same room, space, to be able to read each others body language and facial expressions.

    <figure>

    ![](images/image-22-960x720-4-5.png)
    { .post-img }

    <figcaption>

    Physical Team Room

    </figcaption>

    </figure>

    Have you ever been able to tell exactly what the car in front of you will do next when you are driving?

    > When I was a teenager I was in the car with my grandfather and he said: "You need to keep your eyes on all of the cars so that you know what they are going to do". I scoffed at that idea, but then he said: "See that car, it's going to change lane". I scoffed again, but then looked on in incredulous wonder as the car moved. I could not understand how my grandfather knew, but now that I am a drive I do the same all of the time.
    >
    > \-Jessica Baez Calderin, Strategic Director, naked Agility with Martin Hinshelwood

    When we are driving we have a learned understanding of driver intent that is built over years of driving experience so that we know when the car in front is going to change lane even before the signal, and especially when they don't.

    <figure>

    ![](images/image-23-6-6.png)
    { .post-img }

    <figcaption>

    Car visual indications

    </figcaption>

    </figure>

    We look for micro-changes in the driver's seated position, the road position of their car, and the other cars around them. Maybe we also get some official and standard notifications thorough the brake lights and indicators; if they work. You unconsciously take no account the apparent age of the driver and the age and condition of the car. We process all of this together and as individual drivers, we partake in an intricate non-verbal dance of lanes, signals, and speed that take us safely to our destination.

    Another example is my wife's family is in Cancun, Mexico City, and Puerto Rico, as well as elsewhere. Every Sunday they have a family video conference with between 20 and 35 people participating all with video and chatting away. Technology is awesome.

    This is like a physical team room, except we can also add the other 20% with verbal communication as we engage in our activities. Awesome! Right.

    Well, it would be if many agile practitioners were not suffering from cognitive bias and stuck in the thinking that co-location means in-person. Yes, the Irony is not lost on me! This definition of co-location is over 20 years old and technology has changed a lot in that time.

    ## Co-location re-defined

    Its been 25 (1995) years since the first Scrum project and the average internet speed was 56kbps! Here is a list of the important dates since then and the average internet speed in brackets:

    - 1995 - First Scrum project (56kbps)

    - 2000 - First video Conferencing (280kbps)

    - 2001 - Agile manifesto signed (280kbps)

    - 2005 - First HD video (980kbps)

    - 2020 - COVID (26Mbps)

    Today I, along with most folks in the technology industry, have internet speed in excess of 200Mbs. Today it is generally no problem to have both kids on Netflix/Xbox, and both parents in full HD video conferencing at the same time. What a world we live in.

    While we need to re-define co-located for the general usage of the word I have always used the following:

    > **Co-Location:**  
    > Co-location is a complimentary agile practice where all members of the same Scrum Team work daily in the same room, within visual sight of each other.
    >
    > \-[Martin Hinshelwood: What is your perspective on collocation?](https://nkdagility.com/blog/what-is-your-perspective-on-collocation/)

    This definition encompasses both in-person and virtual events as long as we can see everyone. We need to see folks express and posture in order to gain a greater degree of transparency over what they are thinking, how they are absorbing the information and how we need to adapt the material to increase understanding. How do you expect the facilitator to understand what you as a participant get or don't without being able to see you?

    <figure>

    ![](images/image-20-1280x698-1-1.png)
    { .post-img }

    <figcaption>

    9 people in the same room who can all see each other in Microsoft Teams

    </figcaption>

    </figure>

    For 2020 I would like to update my own definition of co-location to be more inclusive of the virtual world that is part of the new normal.

    > **Co-Location:**  
    > Every member of the team can see every other member of the team's posture and expression.
    >
    > \-Martin Hinshelwood, 2020

    ## Participation requires Presence

    For any online event, you should be just as present as you would be in person, and to do that you should have your camera on as much as possible. This provides feedback for both other participants and the speaker.

    <figure>

    ![](images/image-24-1109x720-7-7.png)
    { .post-img }

    <figcaption>

    Online Event with only the presenter with Camera

    </figcaption>

    </figure>

    Do you believe that this group is focused? How would you know? As a participant do you feel empowered to call upon ML? Will they reply? Are they even there?

    These are all questions that can be easily answered by enabling the visual presence that is your camera. If you are uncomfortable with your camera then there are options available. I have used FaceRig which gives at least some of the 80% that is non-verbal while hiding your bad hair.

    <figure>

    ![](images/image-25-9-9.png)
    { .post-img }

    <figcaption>

    £6 for FaceRig used to hide my home and bad hair

    </figcaption>

    </figure>

    If you are going to be participating in an organized event that will be held online then you should consider being somewhere with good bandwidth, with a usable background.

    Presence can also be fun!

    ## Conclusion

    With the advancement in video-conferencing, camera quality, and internet speed over the last 20 years since agility became a named thing, there is very little excuse for not having video-enabled, and to participate with your team, or any other group.

    Having your camera on enables as much as 80% more knowledge transfer between you and the other participants. Having it off inhibits high bandwidth communication.

    So if you are participating in a video conference:

    - Be respectful, and open with other participants, and use your camera.

    - Give the event your full focus and commitment and pay attention or leave.

    - Have the courage to participate and speak up.

    All of this together will create the transparency required by your host and co-participants to see your participation, how you are reacting, and modify the event to make it better.

    If you don't want or can't have your camera on it would be better for you and the facilitator that you attend an in-person event.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-16-online-is-the-new-co-located\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-11-16-online-is-the-new-co-located
- FrontMatter:
    title: 'Evolution not Transformation: This is the Inevitability of change'
    description: Discover why true agility is an evolution, not a transformation. Embrace continuous change to thrive in today's fast-paced business landscape.
    ResourceId: WvUOpSMqawD
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44511
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-07-13
    weight: 450
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: evolution-not-transformation-this-is-the-inevitability-of-change
    aliases:
    - /blog/evolution-not-transformation-this-is-the-inevitability-of-change
    - /evolution-not-transformation-this-is-the-inevitability-of-change
    - /evolution-not-transformation--this-is-the-inevitability-of-change
    - /blog/evolution-not-transformation--this-is-the-inevitability-of-change
    - /resources/WvUOpSMqawD
    - /resources/blog/evolution-not-transformation-this-is-the-inevitability-of-change
    aliasesArchive:
    - /blog/evolution-not-transformation-this-is-the-inevitability-of-change
    - /evolution-not-transformation-this-is-the-inevitability-of-change
    - /evolution-not-transformation--this-is-the-inevitability-of-change
    - /blog/evolution-not-transformation--this-is-the-inevitability-of-change
    - /resources/blog/evolution-not-transformation-this-is-the-inevitability-of-change
    tags:
    - Agile Philosophy
    - Business Agility
    - Change Management
    - Continuous Improvement
    - Enterprise Agility
    - Market Adaptability
    - Organisational Agility
    - Organisational Change
    - Organisational Culture
    - Continuous Learning
    - Agile Leadership
    - Pragmatic Thinking
    - Agile Strategy
    - Agile Transformation
    - Agile Values and Principles
    - Complexity Thinking
    - Organisational Physics
    - Beta Codex
    - Empirical Process Control
    - Sociotechnical Systems
    - Sensemaking
    - Competence
    - Ability to Innovate
    - Agile Product Management
    - Digital Transformation
    - Social Technologies
    - Strategic Goals
    - Systems Thinking
    - Value Delivery
    - Experimentation
    categories:
    - Leadership
    - Technical Leadership
    preview: image-15-5-4.png
  BodyContent: |
    There is no such thing as an Agile Transformation, Digital Transformation, DevOps Transformation, or any of the Whatever Transformation that you can think of or have been sold. You can’t buy agility, and you certainly can't install it. There is no end state, no optimal outcome, No best practices. [We are no longer factory workers](https://nkdagility.com/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs/).

    Instead, you have to grow, nurture, and prune agility as it grows organically inside your organization and eventually, you too will be able to take advantage of business opportunities as they arise in the ever-changing marketplace. This is continuous change…

    **Its an Evolution, not a transformation.**

    NOTE: Prefer to watch instead? I presented this post as a talk at Agile in Nigeria 2020, I added it to this post at the bottom :)

    <figure>

    !["Look around you. Everything changes. Everything on earth is in a continuous state of evolving, refining, improving, adapting, enhancing, and changing."](images/image-15-800x450-4-5.png)
    { .post-img }

    <figcaption>

    "Look around you. Everything changes. Everything on earth is in a continuous state of evolving, refining, improving, adapting, enhancing, and changing."

    </figcaption>

    </figure>

    Due to the long timelines, it is easy to see the change that happens over a long period of time as a transformation, as a caterpillar transforms into the butterfly. The idea of a [defigned start and end state is an illusion that lures us from the realities](https://nkdagility.com/blog/many-organisations-are-lured-to-safe-by-the-song-of-the-sirens/) of how things successfully change; through a continuous set of experiments. The successful experiments succeed and do well in a niche, the unsuccessful ones fail and die. The more experiments that you run, the more likely you are to find something that fits a niche better or opens up a new niche.

    During the Industrial Revolution, when traditional management practices were developed, the ebb and flow of niches was a slow and deliberate endeavour, usually driven by a single educated visionary. The pace of change was much slower, both communication systems and education systems were weak, and niches that companies found were long-lived, often tens if not hundreds of years; they only needed to adapt once, and then optimise for the current state. The change was no longer necessary, and the competition was weak and slow to disrupt markets. A company, once established, could own a niche, seemingly forever. Bureaucracy was born as a way to solidify the newly found market and optimise the product delivery with best practices. We could own that space!

    <figure>

    !["Firms today experience a much higher velocity of business change. Market opportunities appear or dissolve in months or weeks instead of years"](images/image-17-800x450-7-8.png)
    { .post-img }

    <figcaption>

    "**Firms today experience a much higher velocity of business change. Market opportunities appear or dissolve in months or weeks instead of years**"

    </figcaption>

    </figure>

    Today the world flows faster; due to the increase in education levels and the advancement of technologies, and it's not slowing down. As things flow faster so our need to react to this new pace of development increases. Thus a virtuous cycle of increasing change perpetuates. Many organisations, rather than embracing this new reality, incorporate change in large and expensive fits and starts, rather than as a continuous flow. They only change when they feel threatened, and just change one bureaucratic system for another just as static. This inability to evolve in a continuous flow means that many organisations die; Where is Blockbuster, or Kodak.

    As yourself, [would your organisation would have survived COVID](https://nkdagility.com/blog/live-virtual-classrooms-and-the-new-normal/) 20 years ago, or even 10. With 100% of your employees working from home, how has your infrastructure cooped? If you are still operating on a traditional "employees must be controlled" management mindset then you were likely still operating centralised VPN, which could not cope with the new load. You had neither the bandwidth nor the licences to support 100% remote workforce. However if over the last 10 years you had adopted cloud services then you likely felt less of a pinch. Your employees likely felt that speeds were faster as they no longer needed to share the finite office bandwidth with their colleagues. That change you made from on-premises to the cloud may have saved your business, but did you adopt it by evolution or transformation?

    <figure>

    !["If it ain't broke, don't fix it"](images/image-18-800x450-9-10.png)
    { .post-img }

    <figcaption>

    "If it ain't broke, don't fix it"

    </figcaption>

    </figure>

    I often hear "if it ain't broke, don't fix it", but this is a phrase of the past. Today the pace of change in the world means that we need a new mantra, one not steeped in traditional management practices or weighed down by the baggage of the past. We need to embrace change, and that means accepting a higher degree of risk, [mitigated by a higher degree of competence](https://nkdagility.com/blog/luddites-have-no-place-in-the-modern-organisation/). Evolution is about embracing that risk and learning from its failures. Success is the result of continuous experimentation at a sustainable pace that is able to take advantage of current business opportunities as they arise.

    **This is the Inevitability of change.**

    ## Orienteering towards your intended outcome

    The best analogy for this continuous state of evolving, refining, improving, adapting, enhancing, and changing that I have encountered is Orienteering. Orienteering is a technique for map reading and direction-finding that developed by the military to train soldiers to find their way. Today it is a sport, and is often taught in schools; at least, it was in mine.

    <figure>

    ![Orienteering towards a goal with continuous refinement of direction as impediments are removed](images/image-19-800x450-11-12.png)
    { .post-img }

    <figcaption>

    Orienteering towards a goal with continuous refinement of direction as impediments are removed

    </figcaption>

    </figure>

    In Orienteering, like with any corporate endeavour, you should have some kind of vision or intended goal in mind. This is your current destination. You then use a compass and a map to figure out which direction, next steps, you need to take to get closer to that destination. As you take each step you may encounter obstacles or impediments that challenge you, and that you have to figure a way around. You may need to take a large detour in order to traverse an obstacle or impediment, so you need to reassess your next steps by consulting the map and compass.

    The bit where I feel that orienteering as a sport does not fit is that it generally has a fixed route with prescribed checkpoints along the way. This is a little more analogous to traditional project management rather than modern practices. However, orienteering in its original military context would have been a lot more fluid, with changing tactical realities as you progress towards your vision, and this is exactly what we are looking for. Your end goal will evolve over time as the business conditions change and you may have to reassess your tactical direction and doctrine as you discover more.

    <figure>

    ![Change is the only constant in life. Ones ability to adapt to those changes will determine your success in life.](images/image-23-800x450-16-17.png)
    { .post-img }

    <figcaption>

    Change is the only constant in life. Ones ability to adapt to those changes will determine your success in life.

    </figcaption>

    </figure>

    Always remember that this is your business, your organisation, your people, and their livelihood. You are accountable for your organisation's success or failure. In order to change it effectively, you need to create leaders inside your organisation that understand these modern management techniques and know why we need to change.

    To do that you, not some external coach or consultant, need to be in the driver's seat, making the decisions that are necessary to evolve your organisation. External people can help you learn these new techniques and coach you and your leadership team towards dismantling the bureaucracy that has built up over many years. They can help facilitate new interactions and fuel engagement and enthusiasm for the new practices and techniques, but you need to own them. You as a leader need to embody evolutionary practices with your organisation and foster it internally.

    While there are some well-known practices, like self-organising teams, that help almost everyone, many of the practices you create will be your own. The difficulty is creating an environment within your organisation where these new techniques don't become the new bureaucracy, but instead create a continuous state of evolving, refining, improving, adapting, enhancing, and changing processes, practices, and tools that help you succeed.

    You as leaders need to understand why you are making each decision, and what you expect the outcomes for the organisations to be.

    **You!**

    <figure>

    !["I have not failed. I've just found 10,000 ways that won't work."](images/image-24-800x450-18-19.png)
    { .post-img }

    <figcaption>

    "I have not failed. I've just found 10,000 ways that won't work."

    </figcaption>

    </figure>

    As you take each step you may realise that you were wrong, that this direction leads not to your intended outcome, but somewhere else. Decide if that somewhere else is a better place than you envisaged, and then figure out where you need to go next. Be free to experiment, accept that any processes and practices will be imperfectly defined, and adapt to what you discover along the way.

    ## Checkpoints: Known outcomes that indicate progress towards agility

    I mentioned that there are some common known checkpoints along the way that that you can use to orientate yourself. Here are a few to get you started:

    - **Are Teams delivering a working product to real users every iteration including the first and gathering feedback?**

    - **Is there a clear product vision laying out the strategic goals and do all team members understand how they contribute?**

    - **Is feedback from real users turned into concrete work items for delivery teams on timelines shorter than 1 month?**

    - **Are Teams empowered to change their process based on what they learn?**

    - **Are Teams empowered to change the requirements based on user feedback?**

    - **Is the full ecosystem of your project agile; Agile Teams followed by bureaucratic, linear, delivery is a failure.** I have has some feedback that this is overly critical, that many organisations get value even within "bureaucratic, linear, delivery". I don't disagree that they have gotten value, I just disagree that it is agility. One of the key tenants of agility is feedback, and the sudo-feedback of pre-production is no substitute for real feedback from real users that are using your system for production activities.

    I stole and adapted this initial list from the [Department of Defence white paper Detecting Agile BS](https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF) that was sent out to all of their procurement officers to help them spend their $800+ billion budget more effectively.

    ## Conclusion

    I want to be clear that in the new state of modern practices that continuously adapt to change everything will change. Every business process you currently have is built on the bureaucratic ideas of the past! They are impediments to being able to effectively take advantage of market opportunities as they arise. This type of change is not something that you can buy-in from the outside, it take time, focus, and effort. It must be organically and iteratively grown from the inside. You may hire many consultants, or coaches, or trainers along the way, but they must be driving your vision and work for you.

    You as the leaders in your organisation need to come up with your vision for the future, some checkpoints that would indicate progress towards that vision and lead your organisation forwards. Along the way you need to continuously inspect your vision and checkpoints for validity and adapt as needed.

    Inside out is the only effective way to change. It can not be imposed from the outside by folks that don't understand your culture or your people.

    **#leadership** **#agileleadership** #daretochange

    <figure>

    https://youtu.be/p9OhFJ5Ojy4

    <figcaption>

    Agile in Nigeria 2020: The Inevitability of change

    </figcaption>

    </figure>
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-13-evolution-not-transformation-this-is-the-inevitability-of-change\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-13-evolution-not-transformation-this-is-the-inevitability-of-change
- FrontMatter:
    title: The fallacy of the rejected backlog item
    description: Explore the fallacy of rejecting backlog items in Scrum. Understand the impact on development and learn how to enhance collaboration and transparency.
    ResourceId: Ewu5coIz9qm
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 9876
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-07-13
    weight: 360
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: the-fallacy-of-the-rejected-backlog-item
    aliases:
    - /blog/the-fallacy-of-the-rejected-backlog-item
    - /the-fallacy-of-the-rejected-backlog-item
    - /resources/Ewu5coIz9qm
    - /resources/blog/the-fallacy-of-the-rejected-backlog-item
    aliasesArchive:
    - /blog/the-fallacy-of-the-rejected-backlog-item
    - /the-fallacy-of-the-rejected-backlog-item
    - /resources/blog/the-fallacy-of-the-rejected-backlog-item
    tags:
    - Professional Scrum
    - Empirical Process Control
    - Transparency
    - Working Software
    - Agile Frameworks
    - Software Development
    - Sprint Review
    - Agile Product Management
    - Scrum Team
    - Agile Planning
    - Increment
    - Product Backlog
    - Product Delivery
    - Product Owner
    - Value Delivery
    - Agile Transformation
    - Scrum Master
    - Pragmatic Thinking
    - Team Performance
    - Definition of Done
    - Team Collaboration
    - Technical Debt
    - Agile Strategy
    - Continuous Improvement
    - Continuous Learning
    - Operational Practices
    - Social Technologies
    - Technical Mastery
    - Engineering Practices
    categories:
    - Scrum
    - Product Management
    - Engineering Excellence
    preview: nkdAgility-backlog-item-approve-1-1.jpg
  BodyContent: |
    There is a frustrating misunderstanding of reality when one thinks that the Product Owner can reject a single story at the Sprint Review. This is the fallacy of the rejected backlog item and the misguided belief that this backlog item can just be left out of this delivery. That backlog item that was chosen by the Development Team at the Sprint Planning event to help them achieve the Sprint Goal. The Sprint Goal that created focus and has the entire Development Team working in the same area of the codebase.

    **The fallacy is that without this single Backlog Item, one of many, the code will still function as intended.**

    ## TL;DR;

    Since the Development Team is held accountable for quality, but not quantity, and they sure can't be held accountable for meeting forecast. It was, after all, a forecast. There are only two states that the product increment can be in at the end of the sprint:

    - **DONE** - If in the pursuit of the Sprint Goal the output of the Sprint is a DONE Increment of working software then the Development Team did everything they were required to do. Any gap between what was delivered and expectation is merely a learning opportunity. At the Sprint Review, the Scrum Team investigates this gap and updates the Product Backlog (Transparency of the Future) to reflect what is now needed next.

    - **NOT DONE** - If the Development Team is not “Done” at the end of the Sprint then there are some consequences:
      - An increase in Technical Debt that is going to make future work slower
      - Removing the option for the Product Owner to release the product if they so choose.
      - With undone work, you have to fix it next Sprint and thus interfere with the next Sprint Goal and the Product Owners delivery expectations.
      - Remove any chance of [predictability for future sprints](https://nkdagility.com/release-planning-and-predictable-delivery/) until the undone work is under control.

    **If it is DONE,** then there is no rejection of the Backlog Item there is only feedback. There is just a learning opportunity that can be used to reduce the expectations gap for future Sprints. Reflect on that during the Sprint Review, engage with Stakeholders to better understand both their intent and their expectations.

    Empirical process control is not about doing everything correctly first time, it's about transparency, inspecting, and adapting.

    ## The fallacy of the rejected backlog item

    At the end of the Sprint, the Product Owner can deny that the Development Team met DONE. This would mean that the Development Team failed their accountability to meet the minimum quality bar as set down and agreed in the Definition of Done.

    At the end of the Sprint, the Product Owner can deny that the work represents a significant enough return on investment to warrant shipping it to production. This likely means that either the Goal was not useful, or that the Development Team did not understand the Backlog Item enough. This would mean that the Product Owner failed in their accountability to maximise value delivery.

    At the end of the Sprint, based on either of these two outcomes, the Product Owner can choose to reject the entire Sprint and loose all of the work for that Sprint.

    My point is that it is neither physically nor technically possible to remove a single Backlog Item from a Sprint without incurring significant rework.

    > A Sprint Review is held at the end of the Sprint to inspect the Increment and adapt the Product Backlog if needed. During the Sprint Review, the Scrum Team and stakeholders collaborate about what was done in the Sprint. Based on that and any changes to the Product Backlog during the Sprint, attendees collaborate on the next things that could be done to optimize value.  
    > \-[Scrum Guide - Sprint Review](http://www.scrumguides.org/scrum-guide.html#events-review)

    **The [Scrum Guide 2017](https://www.scrum.org/Scrum-Guides) mentions nothing of rejecting anything at the Sprint Review.**

    This is the reality of product development that gets in the way of the idea of the rejected backlog item. The software that we are producing is complex and only works together in its entirety, the whole increment. The Sprint Goal provides the Scrum Team with purpose and focus, and selecting items that go towards this Goal means that many of the selected backlog items, the forecast, are related. This related set of ideas created an interconnected network of interdependent code that realises on the existence of each other. If we then decide to rip one of those interconnected items out of this complex web of classes and methods, then we are increasing risk, and we are also unlikely to have working software at the end of the Sprint.

    Oh, I am sure that there are exceptions, but it will take time to remove no matter how good the team's engineering practices.

    Just to be clear, this is not about Done. I expect every team to produce work that meets whatever definition of done that they have agreed as the Scum Team. If the Development Team calls Done when they are not then that is a wholly separate problem… because [Professional Scrum Teams build software that works](https://nkdagility.com/professional-scrum-teams-build-software-works/).

    ## Rejecting a Backlog Item is missing the point

    If you are considering rejecting backlog items last the Sprint Review then it is likely that you are missing the point of the Review in the first place. It is not about acceptance or rejection of the increment by the Product Owner, but instead, it is about discovery and understanding between the Product Owner, the Development Team, and Stakeholders. It's about inspecting the last 2 weeks and making sure that we still have transparency of the future reflected in the Product Backlog. Did the market, our competitors, our business, or our ideas just change based on the latest Increment of the product?

    Since [the only constant is change](https://nkdagility.com/blog/evolution-not-transformation-this-is-the-inevitability-of-change/), it is absolutely possible that the Scrum Team created something that meets Done, meets the Acceptance Criteria, and still does not meet the needs of the business. Is this the Development Teams fault? Of course not… it is a learning point, and inspect and adaption of understanding between the Scrum Team and the Stakeholders. This is intensely valuable learning for the Scrum Team as a whole.

    There are only three actions open to the Scrum Team at the Sprint Review:

    1. **Update the Product Backlog to reflect what we now need to do to achieve the vision**

    2. **Choose to ship the current increment or not**

    3. **Choose to end the project or continue**

    ## Making it easier with feature flags or toggles

    All of that being said it is the job of the Development Team to make things as flexible for the Product Owner as possible. They should implement what capabilities they need, into each increment, to make it possible for them to turn a new feature off and still deploy. This will not only make the Scrum team happy; it will get the newly built features in front of the Stakeholders as quickly as possible for feedback.

    There are a few things that can make this as easy as possible:

    - **Communication** – Good communication between the Product Owner and the Development Team can help alleviate these sorts of issues. However, continued interfering in the Development Team by the Product Owner will make it harder to deliver what was estimated. The Development Team should deliver their understanding of what the Product Owner presented to them at the Sprint Planning meeting while collaborating were timely and appropriate.

    - **INVEST**– Making sure that your PBI’s are all following the INVEST \[Independent | Negotiable | Valuable | Estimable | Sized appropriately | Testable\] model. If you follow this guide, then you can minimise any misunderstanding between the Product Owner and the Development Team.

    - **Feature Flippers/toggles/flags** – The single most valuable thing in your developer's arsenal is the ability to turn the things that you are adding on and off at will. This should be applied both to a feature and the multiple layers of that feature that are added to each pass delivering PBI’s. You may think of each PBI’s as requiring a switch to be able to turn it on or off. It is usually not perfect as there are some things that are iterations of the same feature. More advanced implementations may allow you to enable or disable features by account or user.

    **If you can do all of these things as they will all add value by making it easier to give the Product Owner flexibility, give the Scrum Team as much feedback as possible.**
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-13-the-fallacy-of-the-rejected-backlog-item\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-13-the-fallacy-of-the-rejected-backlog-item
- FrontMatter:
    title: Luddites have no place in the modern organisation
    description: Discover why Luddites hinder modern organizations and learn how to foster a culture of agility and innovation. Embrace change for a thriving workplace!
    ResourceId: dyxqF7lrHmn
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44507
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-07-06
    weight: 665
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: luddites-have-no-place-in-the-modern-organisation
    aliases:
    - /blog/luddites-have-no-place-in-the-modern-organisation
    - /luddites-have-no-place-in-the-modern-organisation
    - /resources/dyxqF7lrHmn
    - /resources/blog/luddites-have-no-place-in-the-modern-organisation
    aliasesArchive:
    - /blog/luddites-have-no-place-in-the-modern-organisation
    - /luddites-have-no-place-in-the-modern-organisation
    - /resources/blog/luddites-have-no-place-in-the-modern-organisation
    tags:
    - Organisational Change
    - Organisational Agility
    - Organisational Culture
    - Enterprise Agility
    - Agile Leadership
    - Agile Strategy
    - Agile Transformation
    - Business Agility
    - Change Management
    - Digital Transformation
    - Market Adaptability
    - Pragmatic Thinking
    - Sociotechnical Systems
    - Agile Philosophy
    - Beta Codex
    - Continuous Improvement
    - Social Technologies
    - Organisational Physics
    categories:
    - Leadership
    preview: image-3-3-3.png
  BodyContent: |
    In our [Professional Agile Leadership training](https://nkdagility.com/training/courses/professional-agile-leadership-essentials-training/), we talk about changing your organisations hiring practices to hire more of the right sort of people to create the company that you want, not the company that you have. Hire the right people also implies that you will have to, within your cultural constraints, de-hire the wrong people.

    <figure>

    ![](images/image-3-3-3.png)
    { .post-img }

    <figcaption>

    Early Luddites destroying machines during the industrial revolution

    </figcaption>

    </figure>

    > ##### Luddite
    >
    > #####
    >
    > **"a person opposed to new technology or ways of working."**
    >
    > _"a small-minded Luddite resisting progress" · "I'm not a Luddite, after all I work with the internet for my job"_

    One of the reasons that your organisation is the way that it is, and that it is so hard to change, is its culture. The culture of an organisation is just a reflection of people that make up the organisation and the way that they do things.

    As you transition from the [traditional tayloristic model](https://nkdagility.com/blog/the-tyranny-of-taylorism/) of departments and hierarchy to an empirical model of cross-functional delivery teams that suits the modern world of business you need to make sure that you have the right people or you will encounter friction at every turn. You may even find that some folks try to actively undermine the change.

    > “To be a leader in this company, your job is to find the rose petals in a field of shit.”
    >
    > ― **Satya Nadella,** [Hit Refresh](https://www.goodreads.com/work/quotes/51432387)

    These are the Luddites!

    ## Luddites are an anchor to your nimbleness

    As you move down your chosen [agile evolutionary](https://nkdagility.com/blog/agile-evolution) path there are many common changes that you will make, but there is a reason I use the phrase Evolution and not Transformation. An agile business is one that can adapt to changing circumstances effectively, quickly, and without panic, as the world changed around them.

    <figure>

    ![](images/image-4-1280x720-4-4.png)
    { .post-img }

    <figcaption>

    What changed at Microsoft as of 2017

    </figcaption>

    </figure>

    Microsoft is the poster-child of what can be accomplished with the judicious application of leadership. With the servent-leadership and strategic vision of **Satya Nadella,** it has [evolved from a traditional organisational model 10 years ago (2010) towards independent delivery teams](https://www.forbes.com/sites/stevedenning/2015/10/27/surprise-microsoft-is-agile/) of today.

    > “Every person, organization, and even society reaches a point at which they owe it to themselves to hit refresh—to reenergize, renew, reframe, and rethink their purpose.”
    >
    > ― **Satya Nadella,** [Hit Refresh](https://www.goodreads.com/work/quotes/51432387)

    If you go into Microsoft today and ask them what has changed since they were a traditional organisation, they will say "everything"! The list above is a point-in-time snapshot taken in 2017 from their evolution. Most things on that list have changed since then.

    The world operates at a much higher frequency than it ever did before and a [lack of learning, innovation, and evolution of our processes, practices, and tools](https://nkdagility.com/blog/bureaucracy-is-the-enemy-of-agility/) is the realm of the Luddite.

    **Luddites have no place in the modern organisation #daretochange. Don't be a Luddite!**
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-06-luddites-have-no-place-in-the-modern-organisation\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-06-luddites-have-no-place-in-the-modern-organisation
- FrontMatter:
    title: Many organisations are lured to SAFe by the song of the Sirens
    description: Discover why many organizations fall for the allure of SAFe, risking true agility for a rigid framework. Learn to embrace evolution over imitation.
    ResourceId: kmQceaX7e-O
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44502
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-07-01
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    aliases:
    - /blog/many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    - /many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    - /resources/kmQceaX7e-O
    - /resources/blog/many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    aliasesArchive:
    - /blog/many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    - /many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    - /resources/blog/many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
    tags:
    - Agile Frameworks
    - Organisational Agility
    - Agile Philosophy
    - Agile Transformation
    - Business Agility
    - Organisational Change
    - Organisational Culture
    - Enterprise Agility
    - Change Management
    - Agile Strategy
    - Sociotechnical Systems
    categories: []
    preview: Siren-mermaids-25084952-1378-1045-6-5.jpg
  BodyContent: |
    These Sirens take advantage of the lack of understanding of what business agility is trying to change and lures unsuspecting C-suite executives into parting with their cash for what is effectively someone else's business process. They are changing their entire organisation, not because of a business challenge, but because they are told to.

    <figure>

    ![](images/Siren-mermaids-25084952-1378-1045-949x720-5-6.jpg)
    { .post-img }

    <figcaption>

    The Siren song of SAFe

    </figcaption>

    </figure>

    The lure is strong! They can spend a few million dollars and pow, their organisation is agile, and our business is saved. They make sweeping changes to their lexicon and organisations of their business. We have installed agility!

    <figure>

    ![](images/image-27-2-2.png)
    { .post-img }

    <figcaption>

    SAFe is a fictitious beast that looks cute, but is really dangerous and deadly.

    </figcaption>

    </figure>

    I'm not saying that SAFe did not work, or that some organisations don't get value from it. Just like traditional tayloristic practices, many organisations were able to thrive in spite of the choices that they made.

    <figure>

    ![](images/image-26-1-1.png)
    { .post-img }

    <figcaption>

    Even the US Airforce thinks of SAFE as rigid and prescriptive framework

    </figcaption>

    </figure>

    Many [large organisations are waking up to this reality and are evolving](https://nkdagility.com/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs/) instead of transforming. Transformation implies an end, a final stage, and the reality of today's businesses is that nothing stays still for long.

    Organisations have a lot in common with the animal kingdom. Animals evolve to fill a niche and thrive until that niche changes and they can either evolve again or die. In the past evolution of companies and the changing ecosystem of niches were slow, giving even the largest organisations time to adapt. However, those days are gone now.

    The world is changing faster and faster and your organisation needs to embrace evolution. You need to be able to change to take advantage of new business opportunities as they arise and to do that you need a level of business agility that may astound you.

    > Fundamentally, the main “goal” of Software development is NOT to be « SAFE », it is to INNOVATE and CREATE. You do not create by not taking risks…

    ## Scaled Agile Framework is just Taylorism with an Agile lexicon

    I talk often of the [tyranny of Taylorism](https://nkdagility.com/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs/) and the rigidity that it has instilled over many generations and constant bombardment of this is the way this should be done. This rigidity of the "best practice" or "we always do it that way", or "we can't do that here" is a symptom of that old thinking that was designed to manage disengaged factory workers.

    <figure>

    ![](images/image-28-1052x720-3-3.png)
    { .post-img }

    <figcaption>

    SAFe® for Lean Enterprises 5.0

    </figcaption>

    </figure>

    SAFe does not change the thinking in the organisation, in fact, it solidifies rigidity by saying "this is how you do agile". Thats the very antithesis of the intent behind the agile movement. You cant take someone else's framework that worked in their organisation, like SAFe or Spotify, and install it in your organisation. You end up with fake agile, false security that you are embracing change while enshrining in the bureaucracy of the "way that we do things here".

    **Scaled Agile Framework is just replacing one bureaucracy with another. Meet the new boss, same as the old boss.**
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-01-many-organisations-are-lured-to-safe-by-the-song-of-the-sirens\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-07-01-many-organisations-are-lured-to-safe-by-the-song-of-the-sirens
- FrontMatter:
    title: Configuring Microsoft Teams for Live Virtual Training
    description: Master Microsoft Teams for Live Virtual Training with expert tips on setup and configuration to enhance your students' learning experience. Get started now!
    ResourceId: Xc0Lh3NbXfK
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44452
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-06-22
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: configuring-microsoft-teams-for-live-virtual-training
    aliases:
    - /blog/configuring-microsoft-teams-for-live-virtual-training
    - /configuring-microsoft-teams-for-live-virtual-training
    - /resources/Xc0Lh3NbXfK
    - /resources/blog/configuring-microsoft-teams-for-live-virtual-training
    aliasesArchive:
    - /blog/configuring-microsoft-teams-for-live-virtual-training
    - /configuring-microsoft-teams-for-live-virtual-training
    - /resources/blog/configuring-microsoft-teams-for-live-virtual-training
    categories: []
    preview: image-14-4-4.png
    tags:
    - System Configuration
    - Install and Configuration
    - Collaboration Tools
  BodyContent: |
    Like most tools, if you want to run successful training in Microsoft Teams you need to do some homework and some configuration before your class. You can just jump in and wing it, but that will not provide a good experience for your students. Currently, I have run more than 6 Live Virtual Training in Microsoft Teams and in a few hours, my 7th will start. I have also recently had to set up Microsoft Teams for my good friend and colleague [Russell Miller](https://nkdagility.com/training/trainers/russell-miller/) so that he can also run classes on the platform.

    To date, I have facilitated a couple of Live Virtual F2F for the other trainers at Scrum.org to show them how it works, but we did not go into the configuration. This article will lead any Professional Scrum Trainer that wants to [Deliver Live Virtual Classes in Microsoft Teams](https://nkdagility.com/blog/delivering-live-virtual-classes-in-microsoft-teams-and-mural/) through the configuration required to do so.

    <figure>

    ![](images/Delivering-Live-Virtual-Classes-in-Microsoft-Teams-1280x347-2-2.jpg)
    { .post-img }

    <figcaption>

    Professional Scrum Foundations for 20 Guests in Microsoft Teams

    </figcaption>

    </figure>

    One of the common misconceptions in Teams is that you need a login to be able to participate in a meeting. This is incorrect and you can invite anyone you like to a meeting. For example, I am hosting a public event in Teams on Wednesday for Future of Work Scotland. No authentication required, except joining the meetup to get the URL just like Zoom or Webex.

    <figure>

    https://www.meetup.com/the-future-of-work-in-Scotland/

    <figcaption>

    Future of Work Scotland

    </figcaption>

    </figure>

    However, if you want access to Files, Chat, Channels, Breakout Rooms, Tabs, and Apps then participants need to be authenticated. They need to be a member and not just an external guest.

    For that we need:

    - Azure Active Directory Tennant
    - Microsoft 365 Subscription
    - Guest Access Enabled
    - Gold Plating for a Professional Scrum Class Experience

    ## Creating your Azure AD

    The name that Microsoft gives to the container in all of its services for a specific entity is called a Tennant. Each Tennant has a unique ID, it has root authentication, and it has a bunch of services that use it.

    You as a member of Tennant1 can be a guest in Tennant2. This means that you use your corporate credential (assuming that Tennant1 is your employer), to access another corporate system. This is called [Azure AD B2B](https://docs.microsoft.com/en-us/azure/active-directory/b2b/what-is-b2b) and is the basis upon which we invite Guests to access our Team.

    Just like Google Apps, this creates your security construct. You can have this created for you when you buy a subscription for Microsoft 365, but I always prefer to be explicit. Understanding how things go together will help you administer this in the future.

    #### **TASK 1: Create Azure AD Tennant**

    The First Step is to create an Azure AD Tennant. This is free and will be the foundation of all the rest of the setup.

    - [Create your first Active Directory](https://azure.microsoft.com/en-gb/services/active-directory/)
    - [Administer your existing Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade)

    ## Getting Setup with a Microsoft 365 Subscription

    Since Teams is part of Microsoft 365 and relies on a bunch of underlying services you first need to get a Subscription.

    The lowest subscription to Microsoft 365 that includes Teams is "**[Microsoft 365 Business Basic](https://www.microsoft.com/en-gb/microsoft-365/business/microsoft-365-business-basic)**" and at $5/user/month it gives you unlimited Guests which is the bit we care about, as well as the services that back Teams:

    - **Exchange** \- This gives you a domain and email address. I run my business on this service so martin\[at\]nkdagility.com is my main account, and it is a full exchange server hosted by Microsoft. Teams are built on Groups, and Groups are in Exchange. Since they are backed by Azure AD they can be used for Security, Membership, and distribution.
    - **OneDrive** \- OneDrive provides the storage for all of the services in Microsofts world, and that also means Sharepoint. When you shave a file onto SharePoint it ends up in OneDrive. One of the really powerful features is that both you and your guests can sync the files locally using OneDrvie and edit them locally with dynamic collaboration to the cloud. OneDrive provides that storage, and collaborative editing capability.
    - **SharePoint** \- Sharepoint has been much maligned the past, and rightly so. I had to install and administer Sharepoint 2007, and Sharepoint 2010 back in the day and it traumatized me so much that I don't even put it on my CV. However, Sharepoint Online is a totally different beast. It's fast and powerful, and provide a web view to your Group with web access to files, calendar, OneNote, and other features. Very Nice.
    - **Teams** \- Teams is the icing on the cake and provides a space similar to Slack, but with all of the features above combine to give you an unbelievable amount of power. On top of it, you can add apps from both Microsoft, and 3rd parties, like Zoom, that add more.

    These things together as a single package give you the ability to create Groups that have all of the features that your Students need to collaborate.

    <figure>

    ![](images/image-15-841x720-5-6.png)
    { .post-img }

    <figcaption>

    Class Group in Azure AD

    </figcaption>

    </figure>

    Its really important to note that once you pick the name of your Microsoft 365 Organisation the URL can no longer be changed. I have changed the name of my business from nakedALM to nkdAgility to naked Agility and still have nakedalm.sharepoint.com as my core URL. At some point Microsoft will fix this, but at the moment... not so much. So choose wisely!

    You will end up with "yourname.onmicrosoft.com" and the "yourname" part will be appended to SharePoint permanently.

    #### **TASK 2: Add Microsoft 365 Subscription**

    In order to get set up the first task is to head over to the Microsoft 365 Portal and purchase a subscription. You can also peruse the other subscription levels and their contents as well.

    - [Create a Microsoft 365 Business Basic Subscription](https://www.microsoft.com/en-gb/microsoft-365/business/microsoft-365-business-basic)
    - [Administer your existing Microsoft 365](https://admin.microsoft.com)

    ## Enabling Guest Access

    Before you get started in Microsoft Teams for Live Virtual Classrooms you need to [Authorize guest access in Microsoft Teams](https://docs.microsoft.com/en-us/microsoftteams/teams-dependencies). This has a lot of moving parts as you change the default security stance from "internal only" to "Allow Guests" for all of the services that Guests need to interact with as part of a Teams Team.

    ![](images/image-17-986x720-8-9.png)
    { .post-img }

    This is by far the most complex part of this to set up as there are options in many parts of the system. The link below leads you through how to [Authorize Guest access in Microsoft Teams](https://docs.microsoft.com/en-us/microsoftteams/teams-dependencies) and start adding guests. Please note that there is currently a 24h hiatus between enabling guests and it is available in Teams. This is due to the extra load that everyone working from home has added.

    #### **TASK 3: Enable Guest Access**

    In order to get set up the first task is to head over to the Microsoft 365 Portal and purchase a subscription. You can also peruse the other subscription levels and their contents as well.

    - [](https://www.microsoft.com/en-gb/microsoft-365/business/microsoft-365-business-basic)[Authorize Guest access in Microsoft Teams](https://docs.microsoft.com/en-us/microsoftteams/teams-dependencies)
    - [Manage sharing settings in Sharepoint](https://docs.microsoft.com/en-us/sharepoint/turn-external-sharing-on-or-off)

    ## Enable External Identities

    In the past everyone connecting to a Team (not merely a meeting) required to have either an Azure AD (corporate identity) or a Microsoft Account (personal identity) in order to get access. If your email had neither then you were prompted to configure a Microsoft Account.

    However recently Microsoft have made this a lot easier with the ability to enable folks to sign in with their existing [Google Credentials](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/google-federation) (G Suite or Personal) which covers a very large amount of the guest that I may be adding. But what if the email you add has none of those identities?

    There is a feature that is currently in preview called [one-time passcode authentication](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/one-time-passcode) that replaces the default flow of being prompted to create a Microsoft Account with a simple passcode.

    If a guest has not accepted the invitation when they hit one of your authenticated URL's, for example, the Team URL, then they are instead sent a one-time passcode to their email address and they can use that to log in for 30 minutes. After which they will automatically be sent a new passcode. Simples!

    > One-time passcodes are valid for 30 minutes. After 30 minutes, that specific one-time passcode is no longer valid, and the user must request a new one. User sessions expire after 24 hours.
    >
    > [one-time passcode authentication](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/one-time-passcode)

    When one of your guests try's to use either the invitation link that was sent to them or the link to the secure resource and:

    - They do not have an Azure AD account
    - They do not have a Microsoft account
    - The inviting tenant did not set up Google federation for @gmail.com and @googlemail.com users

    Then the fall-back authentication method will be the one-time passcode.

    #### **TASK 4: Enable External Identities**

    This is fantastic and vastly simplifies the experience for students accessing your training class. Both Google and one-time passcode are a must to configure!

    - [Add Google as an identity provider for B2B guest users](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/google-federation)
    - [Email one-time passcode authentication](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/one-time-passcode)

    ## Gold Plating for a Professional Scrum Class Experience

    While you are now good to go for running Professional Scrum classes there is some cream that you can use to create a more professional experience for your students:

    <figure>

    ![](images/image-19-1034x720-11-11.png)
    { .post-img }

    <figcaption>

    Branding and Custom Domain in action

    </figcaption>

    </figure>

    - [Add branding to your organization's Azure Active Directory sign-in page](https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/customize-branding)
    - [Add a domain to Microsoft 365](https://docs.microsoft.com/en-us/microsoft-365/admin/setup/add-domain?view=o365-worldwide)
    - [Get new Features Earlier](https://docs.microsoft.com/en-us/microsoft-365/admin/manage/release-options-in-office-365?view=o365-worldwide)

    ## Conclusion to Configuring Microsoft Teams for Live Virtual Training

    While there is a lot of setup and configuration before you can run your first class the holistic experience for students is far better than any of the other platforms that I have used or participated in.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-22-configuring-microsoft-teams-for-live-virtual-training\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-22-configuring-microsoft-teams-for-live-virtual-training
- FrontMatter:
    title: Delivering Live Virtual Classes in Microsoft Teams and Mural
    description: Discover how to effectively deliver live virtual classes using Microsoft Teams and Mural, enhancing engagement and collaboration in your Scrum training.
    ResourceId: fyJ8PxhOEZz
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44432
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-06-21
    weight: 750
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: delivering-live-virtual-classes-in-microsoft-teams-and-mural
    aliases:
    - /blog/delivering-live-virtual-classes-in-microsoft-teams-and-mural
    - /delivering-live-virtual-classes-in-microsoft-teams-and-mural
    - /resources/fyJ8PxhOEZz
    - /resources/blog/delivering-live-virtual-classes-in-microsoft-teams-and-mural
    aliasesArchive:
    - /blog/delivering-live-virtual-classes-in-microsoft-teams-and-mural
    - /delivering-live-virtual-classes-in-microsoft-teams-and-mural
    - /resources/blog/delivering-live-virtual-classes-in-microsoft-teams-and-mural
    categories:
    - Scrum
    preview: class-colage-2-8-8.jpg
    tags:
    - Pragmatic Thinking
    - Remote Working
    - Scrum Values
    - Team Collaboration
    - Self Organisation
    - Collaboration Tools
    - Professional Scrum
    - Scrum Team
    - Social Technologies
    - Team Performance
    - Organisational Agility
    - Agile Frameworks
    - Agile Values and Principles
    - Psychological Safety
    - Agile Transformation
    - Coaching
    - Sociotechnical Systems
    - Software Development
    - Scrum Master
    - Agile Leadership
    - Agile Philosophy
    - Continuous Learning
    - Team Motivation
    - Value Delivery
    - Operational Practices
  BodyContent: |
    With the [new normal](https://nkdagility.com/blog/live-virtual-classrooms-and-the-new-normal/), I have been delivering all of my [Professional Scrum classes](https://nkdagility.com/training/scrum-training/) and consulting online. I have tried many tools from Zoom and Webex to Miro and Word. The combination that I have found gives the most security, flexibility, and features are Microsoft Teams with Mural.

    <figure>

    [![](images/class-colage-2-8-8.jpg)](https://nkdagility.com/wp-content/uploads/2020/06/class-colage-2-8-8.jpg)
    { .post-img }

    <figcaption>

    Both Virtual and In-Person Classrooms

    </figcaption>

    </figure>

    I have delivered six [training events in Team with Mural and 3 in Zoom with Mural](https://nkdagility.com/training/course-schedule/?training-scope=Private&wpv_aux_current_post_id=10752&wpv_view_count=44353-TCPID10752). Something that I, and the [other trainers that I work with](https://nkdagility.com/training/trainers/), have found is that to grease the facilitation wheels it is a good idea to make sure that the start of the class is not the first time the students have seen the technology within which you are running the course. To that end, I always now run a Tech Check the week before the class. This services several purposes:

    - **Connection Issues** - If you have 20 students, you can lose a lot of time to these issues and frustrate the other students.

    - **General familiarisation** \- It surprising up much time is lost to fumbling on the first day when students can find the most basic of options.

    - **Setting expectations** - We can use a little bit of time to set the expectations that we, as trainers have of the students—pre-Reading, Engagement, & participation.

    I recently live-streamed and example [Tech Check](https://youtu.be/_bjNHN4PI9s) that I use to give students the information that they need to have an excellent class, it's a little out of date as I have made my processes much slicker since then, but its an example. I'll do another one soon :) make sure that you subscribe on [http://nakedagility.tv](http://nakedagility.tv) for an updated one. I always add this to my event invitations, but I prefer the live tech-check.

    ## A Professional Scrum Classroom

    In our [Professional Scrum training](https://nkdagility.com/training/scrum-training/), we want to create a safe space for individuals to collaborate, discuss and disagree. This needs to be a safe place for the team to fail as well as to explore the ideas that we are trying to teach.

    _NOTE: My good friend [Russell](https://nkdagility.com/training/trainers/russell-miller/) pointed out that the phrase "safe place" has been co-opted by those that want to promote another agenda. By S[afe Space, I am talking about fostering](https://www.forbes.com/sites/forbescoachescouncil/2017/11/02/15-ways-your-organization-can-create-a-safe-space-in-a-divisive-world/) and not shutting down the conversation. Individuals feeling that they cant express themselves in collaborative dissent is a toxic environment for team success._

    I would add that a safe space should be free of Zoombombing and other unwanted activity.

    ### A Safe Space in Microsoft Teams & Mural

    In order to [create that safe space](https://www.forbes.com/sites/forbescoachescouncil/2017/11/02/15-ways-your-organization-can-create-a-safe-space-in-a-divisive-world/), I create a new Team in Microsoft Teams for each class that I am running. This allows me to have Scheduled Meetings, Announcements, Storage, and Chat that is all secured to the participants of the class. Microsoft Teams can be used to amplify the Scrum Values:

    - **Focus** \- In the Team for this class there are no other distractions. There is Focus on the task at hand which is learning. For real work, I would expect each Product Team to have a Team in Teams with each Scrum Team having their own Channel.
    - **Openness** \- Within the Team, in Microsoft Teams, we have visibility across all of the Channels (self-organizing groups). We can all see the murals and we share our experiences in the different exercises.
    - **Commitment** \- Teams facilitates the students taking accountability for their own time and attention. It allows them to use the breakout rooms or not, return or not.
    - **Respect** \- Teams, but not using technology to tell people what to do created respect for the trainer, and our fellow students.

    <figure>

    ![](images/Scrum-Values-18-18.png)
    { .post-img }

    <figcaption>

    The Scrum Values

    </figcaption>

    </figure>

    In Professional Scrum Training, it is imperative that we heighten the Scrum Values, and to do that, we need to foster Self-Organising Teams.

    ## Self-Organising Teams

    > Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to optimize flexibility, creativity, and productivity.
    >
    > \-[ScrumGuides.org](https://scrumguides.org/scrum-guide.html)

    Scrum thrives on self-organising teams and our job as facilitators of a professional Scrum class is to make sure that our students have the environment, skills, and tools that they need to be able to self-organise. That statement for me precludes any sort of coddling by the trainer and using a tool that pushes the students into breakout rooms and forces them back after the timebox is the antithesis of the values that we represent.

    <figure>

    ![Reseach shows that Self Organizing teams are more efficient than ...](images/1698a291428fba19a7cecf891b8bcb09-1-1.png)
    { .post-img }

    <figcaption>

    Traditional vs Agile

    </figcaption>

    </figure>

    ### Self-Organising in Microsoft Teams

    While Teams at the moment does not have breakout rooms, [Breakout Room functionality](https://educationblog.microsoft.com/en-us/2020/06/three-months-later-what-educators-have-learned-from-remote-learning-prepares-them-for-the-new-school-year/) is coming in July for all accounts. I feel that the current features are perfect for professional scrum training, and I don't plan on using the new functionality unless it continues to facilitate self-organisation.

    <figure>

    ![](images/2020-06-21_13-50-59-911x720-2-3.jpg)
    { .post-img }

    <figcaption>

    Creating a meeting in Microsfot Teams

    </figcaption>

    </figure>

    Every student can start a Meeting with the "Meet Now" button, and you can have multiple meetings ongoing in the same Channel, although that might be confusing. They can call it whatever they want, and invite anyone from the team that they want.

    This facilitates both Self-forming teams and the ability for students to create their breakout rooms.

    <figure>

    ![](images/image-9-17-17.png)
    { .post-img }

    <figcaption>

    Creating a Channel in MS Teams

    </figcaption>

    </figure>

    I prefer to have students create a Channel for each of the Teams that they formed and they create their meetings within that Channel. They then get a sandbox that is just for them that allows them to have:

    - **Communications** \- They can create a Teams meeting with "Meet now" or use any of the other video integrations. While I show them the "Meet Now" option in the Tech Check I don't force them down that route. They could just as easily use Zoom, WebEx, or GoToMeeting as their video conferencing tool. All of those are available as apps, and I allow students to use whatever they want.  
       ![](images/2020-06-21_14-03-21-2-5-5.jpg)  
      { .post-img }
      Pragmatically students have always used the "Meet Now" option as it is the easiest to find and use. Regardless there would be a handy placeholder in the Chat that shows the chosen technology and instructions for connecting.  
       ![](images/2020-06-21_14-34-53-7-7.jpg)  
      { .post-img }
    - **Files** \- While you can add Box, DropBox, Google Files, or any other platform files as a Tab out-of-the-box Teams uses OneDrive and gives you significant storage just for this team.  
       ![](images/image-10-9-9.png)  
      { .post-img }
      You can add a tab for any of the known platforms.

    - **Tabs** - You can add many different types of tabs to help students out, you can see above that I add at least the link to Mural, Scrum Guide, and the Scrum Open. Below you can see a list of a few of the available apps. There are tabs, bots, and integrations.  
       ![](images/image-11-10-10.png)  
      { .post-img }

    **To create Self-Organising teams, we need to develop Bounded Environments for change.**

    ## Bounded environments

    > “A vast untapped human potential is lost as a result of treating people as followers.”
    >
    > ― **L. David Marquet,** [Turn the Ship Around!: A True Story of Turning Followers into Leaders](https://www.goodreads.com/work/quotes/21999017)

    For self-organisation to thrive within agile teams, we need to create bounded environments for action, rather than tell people what to do. A bounded climate is a critical difference from [traditional tayloristic practices](https://nkdagility.com/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs/) and as part of exploring that we need to demonstrate how it works within our classes. Instead of telling people what to do, we give them a Goal, some constraints, and some questions to answer, and we accept that there are many right answers.

    <figure>

    ![](images/image-8-16-16.png)
    { .post-img }

    <figcaption>

    Example Exercise Format from Professional Scrum Master

    </figcaption>

    </figure>

    If we continuously manage the student's breakout exercises for them, they will never learn the value of the timebox nor how to manage that timebox themselves. When we instead create a bounded environment and let them get on with it, this is where the magic happens. This is what we have always done for in-person classes, and it can be even more powerful for virtual as, just in the real world of work, there is no indication of the end of the timebox for participants.

    In one of the classes, we had a group forget to come back from a 5-minute timebox, and they kept talking for another 10 minutes. When they eventually realised and came back to the main room, they realised their mistake and were very sheepish. For the rest of the class, they actively managed their timebox and were never late again. That is the sort of learning and resultant modification of our own behaviours that we want to encourage.

    In an in-person class, we provide tools; Whiteboard/easel, Pens, Postits, Card, etc. We then provide a goal, and constraints, with some questions and let students find their own way.

    ### Bounded Environments using Mural

    While Microsoft Teams allows users to self-organize around about breakouts and conversations, we need some way to simulate the effect of giving students in-person a set of tools and a bounded environment. In the virtual world, we need to facilitate the same interaction to promote communication and learning.

    <figure>

    [![](images/image-12-1280x694-11-12.png)](https://nkdagility.com/wp-content/uploads/2020/06/image-12-12-11.png)
    { .post-img }

    <figcaption>

    Mural for Bounded Environments

    </figcaption>

    </figure>

    Mural gives a canvas surface of any size that you need, and then allows us as trainers to create fixed bounded environments to run exercises where students can work within those areas as they see fit.

    <figure>

    [![](images/image-13-320x720-13-14.png)](https://nkdagility.com/wp-content/uploads/2020/06/image-13-14-13.png)
    { .post-img }

    <figcaption>

    Example Excersize

    </figcaption>

    </figure>

    The sample above is the output of a 5-minute working agreement exercise with about 20 people. We just asked for folks to spend 5 minutes, but you could facilitate with more rigour by doing multiple rounds with clustering, and dot voting to find essential ideas. It's up to the trainer and the amount of bounded environment that you want to use.

    ## Answering Some Commonly Raised Issues

    - **Do I require an Account to join a Meeting in Teams?**
      **NO.** To [join a meeting,](https://support.microsoft.com/en-gb/office/join-a-teams-meeting-078e9868-f1aa-4414-8bb9-ee88e9236ee4) your students do not need to authenticate and can join anonymously, just like Zoom. However, Anonymous users do not get to see Channels, Teams, Files, or Apps. They only get to participate in a meeting. I use this as a backup link for students that are having difficulty so that they can always join, and then I sort out whatever issue with them in the first break or activity.

    - **Do I require a Microsoft Account to Authenticate**?
      **NO.** Previously there was some resistance from the trainer community for Microsoft Teams that mostly revolved around authentication. In the past, someone entering a Team (not a meeting) has to authenticate with either a Microsoft Account or an Azure AD account. If they did not have one, they had to create a Microsoft Account from their invited email. This is no longer the case; as well as adding [Google identity federation](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/google-federation), Microsoft has also added [One-Time passcode authentication](https://docs.microsoft.com/en-gb/azure/active-directory/b2b/one-time-passcode) for signing in.
      When you try to sign-in to a Team with an email that is not Azure AD, MSA, or Google, then you are emailed a code to enter without one. Simple, Secure, and alleviates that need to create a Microsoft Account.

    - **Do I need to wait 48h when setting up Teams?**
      For now, **yes**. When you first set up your Azure AD and your Office 365 account it has Guests (how students join) disabled by default. This is for your security and safety. When you [enable Guest access](https://docs.microsoft.com/en-us/microsoft-365/solutions/collaborate-as-team?view=o365-worldwide), it can take up to 48h for it to be active. This is a COVID load issue and was not present before. In any case, I do not recommend trying to set up Teams for Scrum Training the day before your class. There is some amount of work in getting all of the things lined up so that it is a smooth and seamless experience for your students. Take your time, and send me an email if you need help! Once it is set up, it rocks.

    ## Conclusion: Microsoft Teams & Mural

    I firmly believe that Microsoft Teams, or another similar platform, provides the highest level of interaction and allows for self-organisation that may other platforms do not.

    With the ability to provide many different services on the same platform and have students maintain that access over time, I think it wins out over one-time single-shot platforms like Zoom or Webex. In addition, I have a [Scrum Community Team](https://teams.microsoft.com/l/team/19%3a8dbf90ce1aa94d2e92bd6b20df543e03%40thread.skype/conversations?groupId=2e62b46e-194a-4733-a206-603a18bf95f8&tenantId=686c55d4-ab81-4a17-9eef-6472a5633fab) that gives all of my students access to each other as well as some extra goodies. This collaboration and access is the icing on the cake. I have seen other trainers do the same with Slack as an after-class collaboration, but I have not heard of anyone using it to facilitate a class, although I am sure it is possible.
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-21-delivering-live-virtual-classes-in-microsoft-teams-and-mural\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-21-delivering-live-virtual-classes-in-microsoft-teams-and-mural
- FrontMatter:
    title: Live Virtual Classroom's and the new normal
    description: Explore the shift to Live Virtual Classrooms and discover how they enhance learning experiences, making training more accessible and effective in the new normal.
    ResourceId: wS3GaFbyzDv
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44418
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-06-18
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: live-virtual-classrooms-and-the-new-normal
    aliases:
    - /blog/live-virtual-classrooms-and-the-new-normal
    - /live-virtual-classrooms-and-the-new-normal
    - /live-virtual-classroom's-and-the-new-normal
    - /blog/live-virtual-classroom's-and-the-new-normal
    - /resources/wS3GaFbyzDv
    - /resources/blog/live-virtual-classrooms-and-the-new-normal
    aliasesArchive:
    - /blog/live-virtual-classrooms-and-the-new-normal
    - /live-virtual-classrooms-and-the-new-normal
    - /live-virtual-classroom's-and-the-new-normal
    - /blog/live-virtual-classroom's-and-the-new-normal
    - /resources/blog/live-virtual-classrooms-and-the-new-normal
    tags:
    - Remote Working
    - Pragmatic Thinking
    - Collaboration Tools
    - Digital Transformation
    - Organisational Agility
    - Sociotechnical Systems
    - Personal
    categories:
    - Scrum
    preview: image-1-1-1.png
  BodyContent: |
    With the change in business model in the current crisis, many training organizations have had to do the unthinkable and move to Live Virtual training options. Existing wisdom was that training online, just as running teams virtually would be a disaster and reduce the student's experience.

    **We were Wrong!**

    > In-person pass rates are slightly higher 6% looking only at students from 2020.
    >
    > Scrum.org Assessment Result

    When Scrum and Agile were first conceptualized the idea of colocation meant that we had to have everyone in the same place in order to get that extra 80% of communication that is non-verbal.

    <figure>

    ![](images/image-3-1280x695-3-3.png)
    { .post-img }

    <figcaption>

    Live Virtual Co-located Professional Scrum Foundations class

    </figcaption>

    </figure>

    However today this limitation does not exist for much of the world. With modern and secure video conferencing systems like Microsoft Teams, Google Meet, & Webex we can create an almost perfect approximation of co-location while being distributed.

    **Timezone becomes the inhibitor rather than physical presence.**

    I, along with almost all of my collogues at Scrum.org, have been running all of our classes as Live Virtual Classrooms using a verity of technologies and we have found that the experience for students is as good as, if not better than an in-person class. The trick is that we judiciously use breakout rooms and structured exercises with only a small amount of lecture to facilitate the greatest amount of learning.

    ![](images/image-4-1148x720-5-5.png)
    { .post-img }

    I for one have found that it is much easier to create interactive experiences in the virtual world, and have found that participation is just as high as in in-person classes. In a physical room, it is hard to get 20 people to participate in a big-wall exercise without jostling, crowding, and taking turns. In the virtual space, we can make the wall as big as we like.

    **The New World of Virtual Delivery**

    Wow, it is now so much easier to run a class. I don't have to worry about flying, hotels, and transport, and neither do my students. It is better for the environment and its better for our sanity and family life. While it will take a little time for folks to spin up their home office this seems to be the new normal. I'm not sure many folks want to go back to many hours of commuting, and seasonal sickness, among other issues.

    ![](images/image-6-1280x587-8-8.png)
    { .post-img }

    I think this especially makes sense for the world of product delivery. Why go to the same place just to all work at a desk, in a cube, while all participating in the virtual world of our computer.

    **Welcome the New Normal**

    I am sure that an extrovert might have a different opinion initially, however, once we are out of lockdown and able to socialize in-person again I am sure that they can find their fix. For those of us in the knowledge industry, this is a new era. Embrace it, adapt to it, or it may just leave you behind!
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-18-live-virtual-classrooms-and-the-new-normal\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-18-live-virtual-classrooms-and-the-new-normal
- FrontMatter:
    title: Live Site Culture & Site Reliability Engineering
    description: Explore how Live Site Culture and Site Reliability Engineering drive agility and DevOps practices, enabling rapid delivery and enhanced customer satisfaction.
    ResourceId: c_gS0nlQD9E
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44414
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-06-17
    weight: 360
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: live-site-culture-site-reliability-engineering
    aliases:
    - /blog/live-site-culture-site-reliability-engineering
    - /live-site-culture-site-reliability-engineering
    - /live-site-culture-&-site-reliability-engineering
    - /blog/live-site-culture-&-site-reliability-engineering
    - /resources/c_gS0nlQD9E
    - /resources/blog/live-site-culture-site-reliability-engineering
    aliasesArchive:
    - /blog/live-site-culture-site-reliability-engineering
    - /live-site-culture-site-reliability-engineering
    - /live-site-culture-&-site-reliability-engineering
    - /blog/live-site-culture-&-site-reliability-engineering
    - /resources/blog/live-site-culture-site-reliability-engineering
    categories:
    - DevOps
    - Engineering Excellence
    preview: 2020-06-17_13-06-30-1-1.jpg
    tags:
    - Frequent Releases
    - Deployment Frequency
    - Software Development
    - Continuous Delivery
    - Operational Practices
    - Organisational Agility
    - Pragmatic Thinking
    - Value Delivery
    - Market Adaptability
    - Product Delivery
    - Technical Excellence
    - Azure DevOps
    - Business Agility
    - Digital Transformation
    - Enterprise Agility
    - Working Software
    - Continuous Learning
    - Trend Analysis
  BodyContent: |
    As more and more organisations move towards a higher degree of agility, they inevitably also move towards DevOps practices like Continuous Delivery to facilitate shortening the feedback loops.

    > **Firms today experience a much higher velocity of business change. Market opportunities appear or dissolve in months or weeks instead of years.**
    >
    > Diego Lo Giudice and Dave West, Forrester  
    > February 2011  
    > Transforming Application Delivery

    Shortening the feedback loop is imperative to remaining competitive in this new world of customer-centric realities and that in turn requires a radical shift in practices. This shift towards getting things in front of your customers as quickly as possible to find out if you are even doing the right thing means that we are no longer deploying our products every 2 years. We are doing it every day. Microsoft, for example, has gone from one or two major releases a year to over a hundred-sixty-thousand deployment a day. Thats more than the number of engineers that they have. The same practices that worked before will not work today. We need to be faster, better, and more secure than ever before. Everything must be done within the sprint loop and all responsibility needs to lie with those doing the work.

    > “In the long history of humankind (and animal-kind, too) those who learned to collaborate and improvise most effectively have prevailed. ”
    >
    > \-Charles Darwin

    In order to sustain this new way we must be able to maintian the resonsabilities of high quality with the operational needs of the busienss while continiously delivering awesome features that delight our customers.

    <figure>

    ![](images/image-1280x558-2-2.png)
    { .post-img }

    <figcaption>

    Combined Engineering Model of the Azure DevOps Product Team at Microsoft

    </figcaption>

    </figure>

    The Combined Engineering model adopted by the Azure DevOps Product Team at Microsoft is an example of how one group of about 650 engineers in 3 main locations around the world has evolved to be able to cope with these new realities.

    The following presentation represents mearly a point in time of their evolution that may serve to give you some ideas of where to start, and maybe an intial goal to achieve. This infortmation reflects this teams structure and thought in 2018 and they have continued to evolve since this content was created.

    https://youtu.be/5bgcpPqcGlw

    Presentation: [https://nkdagility.net/3edOLPi](https://nkdagility.net/3edOLPi)
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-17-live-site-culture-site-reliability-engineering\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-06-17-live-site-culture-site-reliability-engineering
- FrontMatter:
    title: The Tyranny of Taylorism and how to detect Agile BS
    description: Explore the impact of Taylorism on modern management and learn to identify Agile BS. Join Martin Hinshelwood in redefining workplace practices for success.
    ResourceId: IDMjGi5C8lS
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44208
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-04-01
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    aliases:
    - /blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /blog/the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /resources/IDMjGi5C8lS
    - /resources/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    aliasesArchive:
    - /blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /blog/the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    - /resources/blog/live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
    tags:
    - Agile Philosophy
    categories: []
    preview: 2020-03-27_21-31-11-1-1.jpg
  BodyContent: |
    ​

    Something very close to my heart is helping folks understand the origin of the practices that are commonly used in management today. I feel that only with an understanding of history can we figure out how to change the future. I often talk about this in my classes and help folks see why things are the way that they are in many organisations.

    We are still using workplace practices developed during the industrial revolution to manage factory workers and the mechanisation of those workers. When we had to build at scale but did not have the technology to build robots, it was down to humans to do this monotonous, repetitive work; Think factory floor or typing pool. These practices, envisioned by Frederic Winston Taylor to control workers, are the Tyranny of Taylorism that we battle every day in our working environments.

    While 81% of all development shops say that they are adopting agile, the reality is far from it; only 22% do short iterations, 16% have ordered backlogs, & 13% do retrospectives!

    **They still lack feedback loops.**

    Feedback loops were not significant when our current management practices were developed. We had defigned work, we understood it very well, and we were optimising a production line.

    Those days are gone now!

    https://youtu.be/FZeT8O5Ucwg

    View Presentation: https://nkdagility.net/30MVagF

    DIB Guide: Detecting Agile BS: https://nkdagility.net/DOD-Detecting​

    ​
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-04-01-live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-04-01-live-webcast-the-tyranny-of-taylorism-and-how-to-detect-agile-bs
- FrontMatter:
    title: Slaying the Dragons and How to Successfully Descale at Scale
    description: Discover how to effectively scale agile practices in your organization. Learn the secrets of successful companies and transform your software delivery!
    ResourceId: PLxBb5FqtO-
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44209
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-03-30
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    aliases:
    - /blog/live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    - /live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    - /slaying-the-dragons-and-how-to-successfully-descale-at-scale
    - /blog/slaying-the-dragons-and-how-to-successfully-descale-at-scale
    - /resources/PLxBb5FqtO-
    - /resources/blog/live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    aliasesArchive:
    - /blog/live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    - /live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    - /slaying-the-dragons-and-how-to-successfully-descale-at-scale
    - /blog/slaying-the-dragons-and-how-to-successfully-descale-at-scale
    - /resources/blog/live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
    tags: []
    categories: []
    preview: 2020-03-27_21-36-13-1-1.jpg
  BodyContent: |
    Many organisations don't really want to change how they do business and believe that they can continue in the way they always have while still getting better at delivering software.

    **They are wrong!**

    While there are organisations that are successfully scaling out there, they are exceedingly rare. What are the commonalities between these organisations and how have they managed to get past the illusion of scaled agile to the values and principles that are allowing them to leave their competitors in the dust?

    **To go big, you must go small!**

    https://youtu.be/i\_DglXgaePM

    Presentation: https://nkdagility.net/2CdA7cN

    https://www.meetup.com/the-future-of-work-in-Scotland/events/
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-03-30-live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-03-30-live-webcast-slaying-the-dragons-and-how-to-successfully-descale-at-scale-agile-method
- FrontMatter:
    title: 'Live Webcast: Q&amp;A with Martin Hinshelwood on 27th March 2020'
    description: Join Martin Hinshelwood for a live Q&A on incorporating UX into Scrum teams. Discover insights and strategies to enhance your agile practices!
    ResourceId: s7bwajkP-HP
    ResourceType: blog
    ResourceContentOrigin: Hybrid
    ResourceImport: true
    ResourceImportId: 44210
    ResourceImportSource: Wordpress
    ResourceImportOriginalSource: Wordpress
    date: 2020-03-27
    weight: 1000
    creator: Martin Hinshelwood
    layout: blog
    resourceTypes: blog
    slug: live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    aliases:
    - /blog/live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    - /live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    - /live-webcast--q&amp;a-with-martin-hinshelwood-on-27th-march-2020
    - /blog/live-webcast--q&amp;a-with-martin-hinshelwood-on-27th-march-2020
    - /resources/s7bwajkP-HP
    - /resources/blog/live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    aliasesArchive:
    - /blog/live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    - /live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    - /live-webcast--q&amp;a-with-martin-hinshelwood-on-27th-march-2020
    - /blog/live-webcast--q&amp;a-with-martin-hinshelwood-on-27th-march-2020
    - /resources/blog/live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020
    tags: []
    categories: []
    preview: 2020-03-27_21-33-56-1-1.jpg
  BodyContent: |
    After my last webcast I received a question from a good friend of mine about how to incorporate UX into a Scrum Team. Since I have been teaching the Professional Scrum with UX class I thought I would share the gist of what might be a good place to start.

    <iframe width="504" height="284" title="Embedded post" src="https://www.linkedin.com/video/embed/live/urn:li:ugcPost:6649305613501284353" frameborder="0" allowfullscreen style="width: 2010px; height: 860px;"></iframe>

    [https://www.linkedin.com/video/live/urn:li:ugcPost:6649305613501284353/](https://www.linkedin.com/video/live/urn:li:ugcPost:6649305613501284353/)
  FilePath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-03-27-live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020\index.md
  FolderPath: C:\Users\MartinHinshelwoodNKD\source\repos\NKDAgility.com\site\content\resources\blog\2020\2020-03-27-live-webcast-qa-with-martin-hinshelwood-on-27th-march-2020

