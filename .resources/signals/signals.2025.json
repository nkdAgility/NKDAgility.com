[
  {
    "FrontMatter": {
      "title": "Bonuses are not incentives",
      "short_title": "Bonuses Are Not Incentives",
      "description": "Bonuses reflect mistrust, not motivation. True engagement in knowledge work comes from purpose, autonomy, and meaningful challenges—not financial rewards.",
      "tldr": "Bonuses do not truly motivate skilled software engineers; instead, purpose, autonomy, and meaningful challenges drive performance. Relying on traditional incentives signals a lack of trust and leads to outdated, compliance-focused cultures. Development managers should focus on empowering teams and aligning work with meaningful outcomes rather than using bonuses as motivation.",
      "date": "2025-06-21T08:30:44+01:00",
      "lastmod": "2025-06-21T08:30:44+01:00",
      "weight": 720.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "zy7JlL2SIY-",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "bonuses-are-not-incentives",
      "aliases": [
        "/resources/zy7JlL2SIY-"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Philosophy"
      ],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Agile Philosophy",
        "Employee Engagement",
        "Team Motivation",
        "Self Organisation",
        "Agentic Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7342106687249522688",
          "post_id": "7342106687249522688",
          "post_date": "2025-06-21T07:30:44Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-23T12:13:02Z",
        "short_title": "2025-07-07T16:43:24Z",
        "tldr": "2025-08-07T12:10:56Z"
      }
    },
    "BodyContent": "Bonuses are not incentives. They’re symptoms of a system that doesn’t trust people to care about their work.\n\nIn a knowledge economy, the best people are not motivated by a few extra pounds or dollars. They’re motivated by purpose, autonomy, and the chance to solve hard problems.\n\nYou don’t need to bribe great engineers to do their job. You just need to stop getting in their way.\n\nIf your company still relies on carrots and sticks, it’s not agile. It’s not modern. It’s just Taylorism with a friendlier HR policy.\n\nThe knowledge age demands agency—not compliance.\n\nIf your performance systems are designed for factory work, don’t be surprised when your team acts like factory workers.\n\nStop optimising for output. Start building for outcomes.\n\nAre your incentives helping or hurting?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-21-bonuses-are-not-incentives\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-21-bonuses-are-not-incentives",
    "ReferencePath": "resources/signals/2025-06-21-bonuses-are-not-incentives"
  },
  {
    "FrontMatter": {
      "title": "Why Most Transformations Fail Without Honest Conversations",
      "short_title": "Why Transformations Fail Without Honesty",
      "description": "Most transformations fail without open, honest conversations that address real issues, making transparency and tough dialogue essential for true organisational agility.",
      "tldr": "Most transformation efforts fail because teams avoid honest conversations about real issues. Creating space for open dialogue leads to genuine improvement and transparency, which are essential for true agility. Development managers should ensure their teams regularly discuss tough topics to drive meaningful change.",
      "date": "2025-06-19T15:30:37+01:00",
      "lastmod": "2025-06-19T15:30:37+01:00",
      "weight": 540.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "No4y9TWFkAF",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-most-transformations-fail-without-honest-conversations",
      "aliases": [
        "/resources/No4y9TWFkAF"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Ethos"
      ],
      "categories": [
        "Scrum"
      ],
      "tags": [
        "Agile Philosophy",
        "Personal",
        "Team Collaboration",
        "Transparency",
        "Organisational Psychology",
        "Organisational Culture",
        "Business Agility",
        "Organisational Agility",
        "Professional Scrum",
        "Social Technologies",
        "Agile Transformation",
        "Team Motivation",
        "Organisational Change"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7341487576299548672",
          "post_id": "7341487576299548672",
          "post_date": "2025-06-19T14:30:37Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-23T12:13:04Z",
        "short_title": "2025-07-07T16:43:24Z",
        "tldr": "2025-08-07T12:11:00Z"
      }
    },
    "BodyContent": "Most transformation efforts fail because the hard conversations never happen.\n\nIn every Applying Professional Scrum class I run, the magic is in the room, not the slides. We create a space where people speak plainly—about friction, confusion, blockers, and bad assumptions.\n\nAt Backcountry, even the warehouse staff joined the training. At Healthgrades, every session was packed with real questions. Real frustrations. Real intent to improve.\n\nThese are not “training sessions.” They’re catalysts.\n\nScrum is not a framework for Developers. It’s a framework for organisational transparency. And transparency is uncomfortable—but necessary.\n\nIf you’re not making space for hard truths, you’re not building agility. You’re just managing optics.\n\nWhat conversations still aren’t happening in your org?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-19-why-most-transformations-fail-without-honest-conversations\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-19-why-most-transformations-fail-without-honest-conversations",
    "ReferencePath": "resources/signals/2025-06-19-why-most-transformations-fail-without-honest-conversations"
  },
  {
    "FrontMatter": {
      "title": "The Myth of Knowing Everything Upfront in Software Development",
      "short_title": "The Myth of Upfront Certainty in Software",
      "description": "Software development thrives on continuous discovery and adaptation; upfront planning can’t predict everything. Embrace uncertainty, deliver iteratively, and learn as you go.",
      "tldr": "You cannot know everything upfront in software development, so focus on continuous discovery and adapt as you learn. Scrum supports this by encouraging just enough planning and design to move forward, then delivering and learning from real use. Prioritise delivery and feedback over excessive upfront design to create more value.",
      "date": "2025-06-16T15:30:47+01:00",
      "lastmod": "2025-06-16T15:30:47+01:00",
      "weight": 510.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "Zd6dcWwXJc7",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-myth-of-knowing-everything-upfront-in-software-development",
      "aliases": [
        "/resources/Zd6dcWwXJc7"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tenet"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Pragmatic Thinking",
        "Professional Scrum",
        "Agile Product Management",
        "Value Delivery",
        "Continuous Learning",
        "Empirical Process Control",
        "Agile Values and Principles",
        "Social Technologies",
        "Product Delivery",
        "Continuous Improvement"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7340400460090036224",
          "post_id": "7340400460090036224",
          "post_date": "2025-06-16T14:30:47Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:49:59Z",
        "short_title": "2025-07-07T16:43:26Z",
        "tldr": "2025-08-07T12:11:03Z"
      }
    },
    "BodyContent": "One of the biggest fallacies in software is the belief that you can know everything upfront. That’s why some teams try to carve out “Design Sprints” to feel more in control.\n\nBut real product development doesn’t work like that. Discovery is continuous. Ideas evolve. Assumptions break. Value emerges through use.\n\nThat’s why Scrum embraces uncertainty. Refinement is your chance to explore future work just enough to be ready, without wasting time planning things that might never happen.\n\nBuild just enough design to support delivery. Then deliver. Get telemetry. Learn. Repeat.\n\nIf you're spending more time designing than delivering, you're likely optimising the wrong part of the system.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-16-the-myth-of-knowing-everything-upfront-in-software-development\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-16-the-myth-of-knowing-everything-upfront-in-software-development",
    "ReferencePath": "resources/signals/2025-06-16-the-myth-of-knowing-everything-upfront-in-software-development"
  },
  {
    "FrontMatter": {
      "title": "AI isn’t coming for your job",
      "short_title": "AI Isn’t Coming for Your Job",
      "description": "AI is automating repetitive tasks, freeing people to focus on creative, strategic, and empathetic work that technology can’t replace. It’s a shift, not a threat.",
      "tldr": "AI is not replacing people but automating repetitive tasks that never needed human input, such as data entry and routine reporting. This shift exposes the limitations of roles designed for control and repetition, highlighting the need for work that leverages human strengths like empathy and adaptability. Development managers should redesign roles to focus on meaningful, creative tasks that AI cannot perform.",
      "date": "2025-06-15T15:30:31+01:00",
      "lastmod": "2025-06-15T15:30:31+01:00",
      "weight": 790.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.1,
        "changefreq": "weekly"
      },
      "ResourceId": "9nMNRf64yp5",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "ai-isn-t-coming-for-your-job",
      "aliases": [
        "/resources/9nMNRf64yp5"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7340038002871619584",
          "post_id": "7340038002871619584",
          "post_date": "2025-06-15T14:30:31Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:32Z",
        "short_title": "2025-07-07T16:43:28Z",
        "tldr": "2025-08-07T12:11:07Z"
      }
    },
    "BodyContent": "AI isn’t coming for your job. It’s coming for the work that never deserved a human to begin with.\n\nFilling in forms. Copying data between systems. Generating routine reports. That’s not what people are here for.\n\nWe built a system that said humans were the problem to be managed. So we created roles to match—narrow, controlled, repetitive.\n\nNow that AI can do those things better and faster, the system is cracking.\n\nThat’s not the end of work. It’s the beginning of better work.\n\nThe kind that requires empathy, strategy, adaptability. The kind of work machines can’t do.\n\nIf AI feels like a threat in your organisation, it’s not because it’s replacing people. It’s because you’ve built roles that treat people like machines.\n\nTime to fix that.\n\nWhat kind of work are you creating space for?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-15-ai-isn-t-coming-for-your-job\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-15-ai-isn-t-coming-for-your-job",
    "ReferencePath": "resources/signals/2025-06-15-ai-isn-t-coming-for-your-job"
  },
  {
    "FrontMatter": {
      "title": "The Hidden Impact of Routine Jobs on Worker Dignity",
      "short_title": "The Hidden Impact of Routine Jobs on Dignity",
      "description": "Explores how routine, repetitive jobs affect worker dignity, questioning their value as automation rises and urging a shift toward meaningful, problem-solving work.",
      "tldr": "Routine jobs were designed for efficiency, not human dignity, and their replacement by automation challenges outdated assumptions about people's capabilities. Instead of preserving repetitive roles, focus on creating work that values problem-solving and critical thinking. Review your team's job design to ensure it enables meaningful contributions rather than just compliance.",
      "date": "2025-06-13T15:30:38+01:00",
      "lastmod": "2025-06-13T15:30:38+01:00",
      "weight": 835.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.1,
        "changefreq": "weekly"
      },
      "ResourceId": "Gp4e7gPmb-Q",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-hidden-impact-of-routine-jobs-on-worker-dignity",
      "aliases": [
        "/resources/Gp4e7gPmb-Q"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7339313256668311555",
          "post_id": "7339313256668311555",
          "post_date": "2025-06-13T14:30:38Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:34Z",
        "short_title": "2025-07-07T16:43:29Z",
        "tldr": "2025-08-07T12:11:09Z"
      }
    },
    "BodyContent": "When we invented jobs like scanning groceries, packing boxes, or cleaning toilets, we weren’t aiming for dignity. We were optimising output. We engineered these roles to be mindless, repeatable, and replaceable.\n\nThat’s not work. That’s industrial subjugation.\n\nNow that robots and AI are taking those jobs, people panic. But ask yourself—are we really mourning the loss of human fulfilment? Or just clinging to broken systems that assumed most people aren’t capable of critical thinking?\n\nThis isn’t a threat to humanity. It’s a threat to Taylorism and the lies it told us about what people are for.\n\nLet’s build systems where humans solve problems, think critically, and do meaningful work.\n\nIf you’re still designing roles around compliance and repetition, it’s time to rethink what you call “work.”\n\nAre you fighting to preserve the wrong jobs?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-13-the-hidden-impact-of-routine-jobs-on-worker-dignity\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-13-the-hidden-impact-of-routine-jobs-on-worker-dignity",
    "ReferencePath": "resources/signals/2025-06-13-the-hidden-impact-of-routine-jobs-on-worker-dignity"
  },
  {
    "FrontMatter": {
      "title": "In Scrum, we don’t do UX separately",
      "short_title": "UX Integration in Scrum Sprints",
      "description": "UX is integrated into Scrum, not handled separately. Design and validation happen within Sprints and backlog refinement, supporting continuous, team-based delivery.",
      "tldr": "UX should be integrated into regular Scrum work, not handled in separate sprints or phases. Design and validation should happen continuously alongside development to support the Sprint Goal and future planning. Managers should ensure UX is part of the team’s ongoing workflow to improve learning and delivery speed.",
      "date": "2025-06-12T15:30:39+01:00",
      "lastmod": "2025-06-12T15:30:39+01:00",
      "weight": 600.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.3,
        "changefreq": "weekly"
      },
      "ResourceId": "H1avNshoB3O",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "in-scrum-we-don-t-do-ux-separately",
      "aliases": [
        "/resources/H1avNshoB3O"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Method"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Professional Scrum",
        "Product Delivery",
        "Team Collaboration",
        "Agile Frameworks"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7338950873156345857",
          "post_id": "7338950873156345857",
          "post_date": "2025-06-12T14:30:39Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:35Z",
        "short_title": "2025-07-07T16:43:30Z",
        "tldr": "2025-08-07T12:11:14Z"
      }
    },
    "BodyContent": "In Scrum, we don’t do UX separately. We don’t have a “UX Sprint.” UX is part of the product. That means UX work is either:\n\n1. Needed to meet the Sprint Goal—so it’s done during the Sprint.\n2. Needed for future work—so it’s done as part of ongoing Product Backlog Refinement.\n\nIt’s that simple.\n\nIf you’re off doing speculative design in a vacuum, disconnected from the team, you’re not doing Scrum. You’re delaying learning and undermining flow. UX belongs in the real world, integrated into the delivery of value, not staged like a phase from a project plan.\n\nDesign as you go. Validate early. Iterate continuously.\n\nStill running “design sprints”? Maybe it’s time to rethink what “done” really means for your team.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-12-in-scrum-we-don-t-do-ux-separately\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-12-in-scrum-we-don-t-do-ux-separately",
    "ReferencePath": "resources/signals/2025-06-12-in-scrum-we-don-t-do-ux-separately"
  },
  {
    "FrontMatter": {
      "title": "The FBI Sentinel project was textbook waterfall",
      "short_title": "FBI Sentinel: Waterfall Failure, Agile Success",
      "description": "The FBI Sentinel project failed with a waterfall approach, wasting years and budget, but succeeded rapidly after switching to Agile and iterative Scrum methods.",
      "tldr": "The FBI's Sentinel project failed after years and massive spending using a traditional waterfall approach, delivering nothing. Switching to a small, focused Agile team produced a working product in a year at a fraction of the cost. Consider adopting iterative methods to avoid wasted time and resources and deliver real value sooner.",
      "date": "2025-06-11T15:30:44+01:00",
      "lastmod": "2025-06-11T15:30:44+01:00",
      "weight": 530.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "iXdW5l5qVvR",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-fbi-sentinel-project-was-textbook-waterfall",
      "aliases": [
        "/resources/iXdW5l5qVvR"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development",
        "Scrum"
      ],
      "tags": [
        "Software Development",
        "Pragmatic Thinking",
        "Agile Frameworks",
        "Organisational Agility",
        "Working Software",
        "Organisational Change",
        "Product Delivery",
        "Social Technologies"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7338588506539061249",
          "post_id": "7338588506539061249",
          "post_date": "2025-06-11T14:30:44Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:37Z",
        "short_title": "2025-07-07T16:43:32Z",
        "tldr": "2025-08-07T12:11:19Z"
      }
    },
    "BodyContent": "The FBI's Sentinel project was textbook waterfall. Big budget. Big bang. Zero value delivered after four years and hundreds of millions spent.\n\nThe solution? Throw it out. Build a basement Scrum Studio. Hand-pick 40 people. Give them space to work iteratively.\n\nWithin a year: $30 million. Working product.\n\nAgile didn’t just save the project—it exposed the insanity of pretending waterfall ever worked at this scale.\n\nIf you're still defending your 18-month Gantt chart, ask yourself: what would your stakeholders say after four years and nothing in production?\n\nThat’s not control. That’s negligence.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-11-the-fbi-sentinel-project-was-textbook-waterfall\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-11-the-fbi-sentinel-project-was-textbook-waterfall",
    "ReferencePath": "resources/signals/2025-06-11-the-fbi-sentinel-project-was-textbook-waterfall"
  },
  {
    "FrontMatter": {
      "title": "Why Copying Scaled Agile Frameworks Fails in Your Business",
      "short_title": "Why Copying Scaled Agile Frameworks Fails",
      "description": "Copying scaled agile frameworks fails because each business needs a tailored, evidence-based approach to agility that fits its unique culture, constraints, and challenges.",
      "tldr": "Copying scaled agile frameworks does not work because each organization has unique culture and challenges. Success comes from creating your own vision, identifying real obstacles, and experimenting with solutions tailored to your context. Focus on building your own path to agility using evidence and iteration rather than following someone else’s blueprint.",
      "date": "2025-06-10T15:30:38+01:00",
      "lastmod": "2025-06-10T15:30:38+01:00",
      "weight": 520.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "yN1RnvfpRRI",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-copying-scaled-agile-frameworks-fails-in-your-business",
      "aliases": [
        "/resources/yN1RnvfpRRI"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Strategy"
      ],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Organisational Agility",
        "Agile Frameworks",
        "Organisational Change",
        "Agile Transformation",
        "Professional Scrum",
        "Agile Strategy",
        "Business Agility",
        "Organisational Culture",
        "Social Technologies",
        "Agile Philosophy",
        "Software Development",
        "Enterprise Agility",
        "Evidence Based Leadership",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7338226091821608960",
          "post_id": "7338226091821608960",
          "post_date": "2025-06-10T14:30:38Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:38Z",
        "short_title": "2025-07-07T16:43:34Z",
        "tldr": "2025-08-07T12:11:23Z"
      }
    },
    "BodyContent": "Most scaled agile frameworks sell the illusion that someone else’s success can be photocopied into your business. It can’t.\n\nEvery organisation has its own culture, constraints, and complexity. That means your path to agility has to be yours—tailored, incremental, and evidence-based.\n\nYou don’t need a guru’s blueprint. You need a vision, a backlog of real organisational impediments, and a team willing to experiment their way forward.\n\nStart with the Agility Guide to Evidence-based Change. Then assemble your own guiding coalition. Define your own backlog. Iterate your way to agility.\n\nScrum gave us a proven social technology for product delivery. It’s time we used it to fix how our organisations work too.\n\nStop copying. Start owning.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-10-why-copying-scaled-agile-frameworks-fails-in-your-business\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-10-why-copying-scaled-agile-frameworks-fails-in-your-business",
    "ReferencePath": "resources/signals/2025-06-10-why-copying-scaled-agile-frameworks-fails-in-your-business"
  },
  {
    "FrontMatter": {
      "title": "Maximising Value from Applying Professional Scrum Training",
      "short_title": "Maximising Value from Professional Scrum Training",
      "description": "Learn how Professional Scrum training empowers teams to identify organisational blockers, create actionable change backlogs, and drive real transformation in delivery.",
      "tldr": "The main benefit of Professional Scrum training is not just learning Scrum, but creating a clear list of organisational obstacles that slow delivery. When teams are empowered to identify these issues and leadership commits to addressing them, real transformation can begin. Development managers should ensure their teams have a change backlog and actively work with leadership to remove barriers.",
      "date": "2025-06-09T15:30:34+01:00",
      "lastmod": "2025-06-09T15:30:34+01:00",
      "weight": 470.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "Db-LocFYG0R",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "maximising-value-from-applying-professional-scrum-training",
      "aliases": [
        "/resources/Db-LocFYG0R"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Leadership"
      ],
      "tags": [
        "Organisational Agility",
        "Social Technologies",
        "Professional Scrum",
        "Agile Leadership",
        "Organisational Culture",
        "Change Management",
        "Agile Transformation",
        "Continuous Improvement",
        "Team Performance",
        "Organisational Change",
        "Team Motivation",
        "Software Development",
        "Personal",
        "Pragmatic Thinking",
        "Agentic Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7337863687812116481",
          "post_id": "7337863687812116481",
          "post_date": "2025-06-09T14:30:34Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:39Z",
        "short_title": "2025-07-07T16:43:36Z",
        "tldr": "2025-08-07T12:11:27Z"
      }
    },
    "BodyContent": "The best outcome of a Applying Professional Scrum class isn’t just better understanding of Scrum. It’s a backlog of change.\n\nAt Healthgrades, 147 people left not just with insight, but with agency. They had identified the organisational impediments standing in their way—and started a backlog of what needed to shift.\n\nThat’s the real value: clarity about what’s slowing delivery and the collective power to fix it.\n\nScrum done well doesn’t just improve teams. It exposes the system. And when leadership listens, real transformation starts.\n\nBut it only happens when teams are empowered to name the problems, and leadership is accountable for removing them.\n\nWhat’s on your organisational change backlog?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-09-maximising-value-from-applying-professional-scrum-training\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-09-maximising-value-from-applying-professional-scrum-training",
    "ReferencePath": "resources/signals/2025-06-09-maximising-value-from-applying-professional-scrum-training"
  },
  {
    "FrontMatter": {
      "title": "US Department of Defence and the History of Waterfall Delivery",
      "short_title": "US DoD Shift from Waterfall to Agile",
      "description": "Explores the US Department of Defence’s shift from traditional waterfall delivery to lean-agile methods, highlighting new procurement rules and the need for true agility.",
      "tldr": "The US Department of Defence has moved away from traditional waterfall delivery and now requires lean-agile approaches in its procurement rules, recognizing that agility is essential for complex, high-stakes projects. This shift is now mandated, not just recommended, showing that even large, regulated organizations can make the change. Development managers should reconsider stage-gate processes and focus on enabling real agility rather than clinging to outdated controls.",
      "date": "2025-06-08T15:30:25+01:00",
      "lastmod": "2025-06-08T15:30:25+01:00",
      "weight": 545.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "mlGmtc4ZqJM",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "us-department-of-defence-and-the-history-of-waterfall-delivery",
      "aliases": [
        "/resources/mlGmtc4ZqJM"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Organisational Agility",
        "Software Development",
        "Enterprise Agility",
        "Organisational Change",
        "Business Agility",
        "Agile Strategy",
        "Agile Transformation",
        "Product Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7337501265146355712",
          "post_id": "7337501265146355712",
          "post_date": "2025-06-08T14:30:25Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:40Z",
        "short_title": "2025-07-07T16:43:39Z",
        "tldr": "2025-08-07T12:11:33Z"
      }
    },
    "BodyContent": "For years, the US Department of Defence was the poster child for waterfall delivery. Locked gates, stage-based approvals, and delivery dates that existed more on paper than in production.\n\nBut now? The DOD has effectively banned waterfall by rewriting its procurement rules to favour lean-agile delivery.\n\nThey've acknowledged what many in our industry already know: that agility isn’t optional when the stakes are high, the domain is complex, and success can’t wait five years.\n\nThis isn’t theory. It’s law. And if the DOD can shift, what excuse do the rest of us have?\n\nIf you're still dragging delivery through stage gates, ask yourself: are you enabling agility or just maintaining the illusion of control?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-08-us-department-of-defence-and-the-history-of-waterfall-delivery\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-08-us-department-of-defence-and-the-history-of-waterfall-delivery",
    "ReferencePath": "resources/signals/2025-06-08-us-department-of-defence-and-the-history-of-waterfall-delivery"
  },
  {
    "FrontMatter": {
      "title": "Too many organisations hide behind excuses:\"",
      "short_title": "Too Many Organisations Hide Behind Excuses",
      "description": "Many organisations use excuses to avoid Agile, but even large, regulated bodies can adopt iterative delivery to reduce risk and deliver value incrementally.",
      "tldr": "Even large, regulated, and traditionally slow organizations like the DOD and FBI have successfully adopted iterative delivery, showing that excuses for not embracing agile are unfounded. Agile helps reduce risk, increase flexibility, and deliver value incrementally, which is especially important in regulated industries. Development managers should challenge resistance and prioritize agile practices to improve outcomes regardless of organizational constraints.",
      "date": "2025-06-07T15:30:25+01:00",
      "lastmod": "2025-06-07T15:30:25+01:00",
      "weight": 670.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "RJFPfh1L3bJ",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "too-many-organisations-hide-behind-excuses",
      "aliases": [
        "/resources/RJFPfh1L3bJ"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Value Delivery",
        "Product Delivery",
        "Pragmatic Thinking",
        "Agile Philosophy",
        "Market Adaptability",
        "Organisational Agility",
        "Agile Values and Principles"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7337138877612150785",
          "post_id": "7337138877612150785",
          "post_date": "2025-06-07T14:30:25Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:41Z",
        "short_title": "2025-07-07T16:43:40Z",
        "tldr": "2025-08-07T12:11:36Z"
      }
    },
    "BodyContent": "Too many organisations hide behind excuses:\n\n\"We can't do that here.\"  \n\"We're not a software company.\"  \n\"We're regulated.\"\n\nThe DOD and FBI are proof that excuse is dead. You can be large, slow, and bureaucratic—and still move to iterative delivery.\n\nAgile is not about being cool or trendy. It's about reducing risk, increasing optionality, and delivering real value incrementally.\n\nRegulated industries aren’t excluded from agility. They're the ones that need it most.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-07-too-many-organisations-hide-behind-excuses\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-07-too-many-organisations-hide-behind-excuses",
    "ReferencePath": "resources/signals/2025-06-07-too-many-organisations-hide-behind-excuses"
  },
  {
    "FrontMatter": {
      "title": "FBI Launched Outdated Criminal Records System in 1995",
      "short_title": "FBI’s Outdated 1995 Criminal Records System",
      "description": "The FBI’s 1995 criminal records system was outdated at launch, showing how slow, waterfall methods can leave technology obsolete and users behind. Agile avoids this trap.",
      "tldr": "The FBI launched a criminal records system in 1995 that was already outdated, and it remained in use for 15 years. Relying on big, infrequent releases means technology and user needs quickly outpace your delivery. To avoid delivering obsolete solutions, shift to frequent, incremental releases so you can keep up with changing requirements and user expectations.",
      "date": "2025-06-06T15:30:50+01:00",
      "lastmod": "2025-06-06T15:30:50+01:00",
      "weight": 640.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.3,
        "changefreq": "weekly"
      },
      "ResourceId": "sMKQG6tzQYS",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "fbi-launched-outdated-criminal-records-system-in-1995",
      "aliases": [
        "/resources/sMKQG6tzQYS"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Software Development",
        "Market Adaptability"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7336776594105024513",
          "post_id": "7336776594105024513",
          "post_date": "2025-06-06T14:30:50Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:42Z",
        "short_title": "2025-07-07T16:43:41Z",
        "tldr": "2025-08-07T12:11:38Z"
      }
    },
    "BodyContent": "In 1995, the FBI launched a criminal records system that was obsolete the day it shipped. It used green screens while Windows 95 was on the shelves.\n\nThat system lasted 15 years.\n\nWaterfall creates a world where value arrives too late to matter. By the time the big launch finally comes, the world has moved on, your tech stack is ancient, and your users are stuck in the past.\n\nAgile delivery doesn't just help you fail faster. It helps you deliver before failure is baked in.\n\nStill waiting for that \"big release\"? Your users have already left.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-06-fbi-launched-outdated-criminal-records-system-in-1995\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-06-fbi-launched-outdated-criminal-records-system-in-1995",
    "ReferencePath": "resources/signals/2025-06-06-fbi-launched-outdated-criminal-records-system-in-1995"
  },
  {
    "FrontMatter": {
      "title": "Stop treating the end of the Sprint like a finish line",
      "short_title": "Stop Treating Sprint End as a Deadline",
      "description": "The end of a Sprint is a checkpoint for review and adaptation, not a deadline. Focus on flow, learning, and continuous improvement over strict task completion.",
      "tldr": "The end of a Sprint is a checkpoint for review and planning, not a finish line where all work must be completed. It is normal for large items to span multiple Sprints; focus on showing progress, adapting plans, and maintaining flow. Managers should move away from rigid project thinking and support teams in embracing continuous delivery and adaptation.",
      "date": "2025-06-05T15:30:54+01:00",
      "lastmod": "2025-06-05T15:30:54+01:00",
      "weight": 360.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "3N_y67L5LD9",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "stop-treating-the-end-of-the-sprint-like-a-finish-line",
      "aliases": [
        "/resources/3N_y67L5LD9"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Social Technologies",
        "Empirical Process Control",
        "Agile Frameworks",
        "Professional Scrum",
        "Software Development",
        "Agile Philosophy",
        "Pragmatic Thinking",
        "Agile Planning",
        "Continuous Learning",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7336414222320300032",
          "post_id": "7336414222320300032",
          "post_date": "2025-06-05T14:30:54Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:43Z",
        "short_title": "2025-07-07T16:43:42Z",
        "tldr": "2025-08-07T12:11:42Z"
      }
    },
    "BodyContent": "Stop treating the end of the Sprint like a finish line. It’s not. It’s a checkpoint for planning, inspection, and adaptation. The Increment gives us a view of what’s Done. The Sprint Goal gives us focus. That’s it.\n\nIf your team needs two Sprints to complete a large item—fine. That’s reality. Show the Increment, adapt the Product Backlog, and move on.\n\nScrum is a social technology. It thrives in complexity, not control.\n\nThe idea that every task must be completed within the Sprint is a hangover from project thinking. Let it go. Flow is the future. Professional Scrum Teams already know this. The rest need to catch up.\n\nStill clinging to the idea that flow breaks Scrum? Re-read the guide. You might discover you’ve been holding your team back.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-05-stop-treating-the-end-of-the-sprint-like-a-finish-line\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-05-stop-treating-the-end-of-the-sprint-like-a-finish-line",
    "ReferencePath": "resources/signals/2025-06-05-stop-treating-the-end-of-the-sprint-like-a-finish-line"
  },
  {
    "FrontMatter": {
      "title": "Design Sprints in Scrum: Common Questions and Practical Insights",
      "short_title": "Design and UX Integration in Scrum Sprints",
      "description": "Answers common questions about integrating design and UX work into Scrum Sprints, clarifying why dedicated Design Sprints aren’t needed and how to align with Scrum principles.",
      "tldr": "There are no special Sprints in Scrum for design or other functions; all work needed to meet the Sprint Goal, including UX and design, should happen within the Sprint or during Refinement if it is for future preparation. Segmenting Sprints by function creates silos and goes against Scrum’s purpose of delivering high-quality working software. Development managers should focus on integrating design and architecture work into the regular Sprint flow rather than isolating it.",
      "date": "2025-06-04T15:31:05+01:00",
      "lastmod": "2025-06-04T15:31:05+01:00",
      "weight": 445.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "8mcd8y-jiFX",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "design-sprints-in-scrum-common-questions-and-practical-insights",
      "aliases": [
        "/resources/8mcd8y-jiFX"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Pragmatic Thinking",
        "Professional Scrum",
        "Agile Frameworks",
        "Operational Practices",
        "Agile Planning"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7336051878457204736",
          "post_id": "7336051878457204736",
          "post_date": "2025-06-04T14:31:05Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:44Z",
        "short_title": "2025-07-07T16:43:43Z",
        "tldr": "2025-08-07T12:11:52Z"
      }
    },
    "BodyContent": "I’m still surprised how often I get asked about “Design Sprints” in Scrum. Let’s be clear—there are no special Sprints. No Sprint 0. No release Sprint. No hardening Sprint. And definitely no Design Sprint.\n\nScrum is a social technology for solving complex problems. Trying to segment Sprints by function (design, test, build) reflects a Taylorist approach rooted in the Industrial Revolution, not the realities of modern product development.\n\nIf your UX work is critical to delivering the Sprint Goal, then it belongs in the Sprint. If it’s about preparing for the future, then it’s part of Refinement. But none of it needs a dedicated, isolated timebox.\n\nThe goal is high-quality working software, not siloed ceremonies.\n\nHow are you integrating UX, design, and architecture into your Sprint without breaking the flow?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-04-design-sprints-in-scrum-common-questions-and-practical-insights\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-06-04-design-sprints-in-scrum-common-questions-and-practical-insights",
    "ReferencePath": "resources/signals/2025-06-04-design-sprints-in-scrum-common-questions-and-practical-insights"
  },
  {
    "FrontMatter": {
      "title": "You can’t deliver change through memos",
      "short_title": "Change Requires Broad Scrum Training",
      "description": "Change succeeds when everyone understands and engages with it. Broad Scrum training empowers all roles to identify blockers and drive real, lasting improvements.",
      "tldr": "Change cannot be achieved through memos or top-down mandates; real progress happens when everyone is trained together and understands the reasons behind new approaches. Broad-based training helps people identify problems and suggest improvements, making change more effective and sustainable. To drive meaningful change, involve all stakeholders in learning and improvement, not just managers or specialists.",
      "date": "2025-05-31T15:30:23+01:00",
      "lastmod": "2025-05-31T15:30:23+01:00",
      "weight": 535.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "_CXFN2swhdy",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "you-can-t-deliver-change-through-memos",
      "aliases": [
        "/resources/_CXFN2swhdy"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Competence",
        "Personal",
        "Team Collaboration",
        "Organisational Change",
        "Organisational Agility",
        "Organisational Culture",
        "Social Technologies",
        "Business Agility",
        "Agile Frameworks",
        "Change Management",
        "Agile Leadership",
        "Agile Transformation",
        "Software Development",
        "Self Organisation"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7334602153124102145",
          "post_id": "7334602153124102145",
          "post_date": "2025-05-31T14:30:23Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:45Z",
        "short_title": "2025-07-07T16:43:51Z",
        "tldr": "2025-08-07T12:29:09Z"
      }
    },
    "BodyContent": "You can’t deliver change through memos. Or tool rollouts. Or executive mandates. If people don’t understand the change, they’ll resist it. Silently. Subtly. And completely.\n\nTrain everyone. Yes, everyone.\n\nWhen I run broad-based Scrum training—everyone from warehouse workers to execs in the same room—magic happens. People start to see the system. They name the blockers. They suggest real improvements.\n\nYou don’t need change managers whispering from the sidelines. You need forklift drivers pointing out waste in your value stream. You need product owners seeing dependencies they can cut. You need teams who actually understand why Scrum works.\n\nThe best source of organisational change backlog items? Your stakeholders. Right after training.\n\nScrum isn’t a framework you install. It’s a language you teach so the organisation can learn together.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-31-you-can-t-deliver-change-through-memos\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-31-you-can-t-deliver-change-through-memos",
    "ReferencePath": "resources/signals/2025-05-31-you-can-t-deliver-change-through-memos"
  },
  {
    "FrontMatter": {
      "title": "Scrum isn’t limited to building features",
      "short_title": "Scrum for Organisational Change",
      "description": "Scrum can drive organisational change, not just product features, by using backlogs, teams, and feedback to enable real, evidence-based agility across systems.",
      "tldr": "Scrum can be used to drive organizational change, not just build software features. By forming a change team, creating a backlog, and using regular feedback, you can make improvements measurable and adaptable. To achieve real agility, apply Scrum practices to your internal processes as well as your products.",
      "date": "2025-05-30T15:30:41+01:00",
      "lastmod": "2025-05-30T15:30:41+01:00",
      "weight": 435.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "-FDdQXKH7zt",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-isn-t-limited-to-building-features",
      "aliases": [
        "/resources/-FDdQXKH7zt"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum"
      ],
      "tags": [
        "Social Technologies",
        "Empirical Process Control",
        "Continuous Improvement",
        "Professional Scrum",
        "Organisational Change",
        "Organisational Agility",
        "Pragmatic Thinking",
        "Agile Planning",
        "Agile Transformation",
        "Change Management",
        "Agile Strategy",
        "Agile Frameworks",
        "Decision Making",
        "Business Agility",
        "Metrics and Learning"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7334239840894423040",
          "post_id": "7334239840894423040",
          "post_date": "2025-05-30T14:30:41Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:47Z",
        "short_title": "2025-07-07T16:43:52Z",
        "tldr": "2025-08-07T12:29:11Z"
      }
    },
    "BodyContent": "Scrum isn’t limited to building features. It’s a social technology for solving complex problems. That includes your internal systems of work.\n\nWe use Scrum to deliver product increments. Why not use it to deliver organisational change increments?\n\nForm a change team. Create a change backlog. Make each improvement inspectable, transparent, and releasable. Measure the effect. Adapt the plan. Rinse and repeat.\n\nThis isn’t transformation theatre. This is evidence-based change, one step at a time.\n\nIf your change program doesn’t have a cadence, a backlog, and empirical feedback—it’s not agile. It’s just theatre in agile clothing.\n\nWant real agility? Apply Scrum to the system, not just the software.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-30-scrum-isn-t-limited-to-building-features\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-30-scrum-isn-t-limited-to-building-features",
    "ReferencePath": "resources/signals/2025-05-30-scrum-isn-t-limited-to-building-features"
  },
  {
    "FrontMatter": {
      "title": "Evolving Engineering Practices to Improve Sprint Workflow in Scrum",
      "short_title": "Evolving Engineering Practices in Scrum",
      "description": "Learn how evolving engineering practices like Feature Flags, TDD, and refactoring enable smoother Sprint workflows and reduce technical debt in Scrum teams.",
      "tldr": "To improve sprint workflow in Scrum without sacrificing quality, teams need to adopt practices like Feature Flags, TDD, and regular refactoring to enable safe, continuous flow of work. These practices help ship incomplete features safely, ensure code reliability, and maintain system health. Development managers should prioritize evolving engineering practices and consider Continuous Delivery essential for sustainable progress.",
      "date": "2025-05-29T15:30:45+01:00",
      "lastmod": "2025-05-29T15:30:45+01:00",
      "weight": 220.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "jLgGAlKQ7-O",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "evolving-engineering-practices-to-improve-sprint-workflow-in-scrum",
      "aliases": [
        "/resources/jLgGAlKQ7-O"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "Scrum"
      ],
      "tags": [
        "Technical Mastery",
        "Software Development",
        "Engineering Practices",
        "Technical Excellence",
        "Pragmatic Thinking",
        "Operational Practices",
        "Team Performance",
        "Technical Debt"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7333877465657872386",
          "post_id": "7333877465657872386",
          "post_date": "2025-05-29T14:30:45Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:48Z",
        "short_title": "2025-07-07T16:43:53Z",
        "tldr": "2025-08-07T12:29:15Z"
      }
    },
    "BodyContent": "Want to flow work across Sprints without compromising Scrum? Then your engineering practices must evolve. The difference between “Unfinished Backlog Items” and “Undone Work” is critical.\n\nIf you’re shipping into production, you can’t afford brittle hacks or partial implementations. This is where Feature Flags, TDD, and refactoring come in. They’re not optional. They’re enablers of flow.\n\n- Feature Flags let you ship incomplete features safely.\n- TDD proves your code does what you expect, even after refactoring.\n- Refactoring keeps your system healthy and maintainable.\n\nScrum doesn’t require Continuous Delivery, but let’s be honest—if you want flow, CD isn’t optional. It’s the price of admission.\n\nHow confident are you that your unfinished work isn’t just technical debt in disguise?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-29-evolving-engineering-practices-to-improve-sprint-workflow-in-scrum\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-29-evolving-engineering-practices-to-improve-sprint-workflow-in-scrum",
    "ReferencePath": "resources/signals/2025-05-29-evolving-engineering-practices-to-improve-sprint-workflow-in-scrum"
  },
  {
    "FrontMatter": {
      "title": "Why Frameworks Alone will-not Transform Your Team Culture",
      "short_title": "Frameworks Alone Won't Change Team Culture",
      "description": "Explains why frameworks alone can't shift team culture, emphasizing clear vision, leadership commitment, and empowering teams to drive meaningful organizational change.",
      "tldr": "Relying on frameworks alone will not change your team culture; the main barriers are existing habits and lack of true commitment. Real transformation requires a clear vision, visible leadership support, and active involvement from everyone to identify and address obstacles. As a development manager, focus on building shared understanding and genuine engagement rather than just rolling out new processes.",
      "date": "2025-05-28T15:30:50+01:00",
      "lastmod": "2025-05-28T15:30:50+01:00",
      "weight": 480.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "xUJ6VvudvJx",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-frameworks-alone-will-not-transform-your-team-culture",
      "aliases": [
        "/resources/xUJ6VvudvJx"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Philosophy"
      ],
      "categories": [
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Organisational Culture",
        "Change Management",
        "Organisational Change",
        "Agile Philosophy",
        "Agile Strategy",
        "Sociotechnical Systems",
        "Agile Leadership",
        "Beta Codex",
        "Social Technologies",
        "Agile Transformation",
        "Organisational Agility",
        "Business Agility",
        "Pragmatic Thinking",
        "Team Motivation",
        "Enterprise Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7333515101389455360",
          "post_id": "7333515101389455360",
          "post_date": "2025-05-28T14:30:50Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:42Z",
        "short_title": "2025-07-07T16:43:54Z",
        "tldr": "2025-08-07T12:29:19Z"
      }
    },
    "BodyContent": "If you're waiting for a framework to shift your culture, you're already on the wrong path.\n\nThe biggest obstacle to change isn’t lack of knowledge—it’s inertia. The culture and process you already have are your biggest constraints.\n\nThat’s why real change starts with a vision. Not just a buzzwordy slide deck. A vision that sets direction without prescribing how. One that empowers the people doing the work to identify what’s in the way of value delivery.\n\nThen you need public, top-down commitment. If leadership isn’t visibly in, the change dies quietly.\n\nAnd no, posters and roadshows won’t cut it. Get everyone into a room. Teach them theory. Help them see the system they’re in. Then have them tell you what needs to change.\n\nChange isn’t a comms strategy. It’s a coalition of action.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-28-why-frameworks-alone-will-not-transform-your-team-culture\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-28-why-frameworks-alone-will-not-transform-your-team-culture",
    "ReferencePath": "resources/signals/2025-05-28-why-frameworks-alone-will-not-transform-your-team-culture"
  },
  {
    "FrontMatter": {
      "title": "When you scale Scrum, the challenge isn’t just delivery—it coherence",
      "short_title": "Scaling Scrum: Achieving UX Coherence",
      "description": "Explains how scaling Scrum requires UX coherence through Communities of Practice, shared frameworks, and collaboration—not central control—to ensure consistency without bottlenecks.",
      "tldr": "When scaling Scrum, the main challenge is maintaining coherence across teams, not just delivering work. Without coordination, teams create inconsistent user experiences and duplicate efforts. To address this, form a cross-team Community of Practice to develop shared frameworks and include them in your Definition of Done, promoting collaboration and consistency without adding hierarchy.",
      "date": "2025-05-27T15:30:33+01:00",
      "lastmod": "2025-05-27T15:30:33+01:00",
      "weight": 415.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "eGzb1hJRtoc",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "when-you-scale-scrum-the-challenge-isn-t-just-delivery-it-coherence",
      "aliases": [
        "/resources/eGzb1hJRtoc"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Framework"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Team Collaboration",
        "Social Technologies",
        "Sociotechnical Systems",
        "Pragmatic Thinking",
        "Scaling",
        "Software Development",
        "Organisational Agility",
        "Large Scale Agility",
        "Professional Scrum",
        "Agile Product Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7333152642082193409",
          "post_id": "7333152642082193409",
          "post_date": "2025-05-27T14:30:33Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:45Z",
        "short_title": "2025-07-07T16:43:56Z",
        "tldr": "2025-08-07T12:29:23Z"
      }
    },
    "BodyContent": "When you scale Scrum, the challenge isn’t just delivery—it’s coherence. UX is a great example. Left unchecked, each team reinvents the wheel, creates inconsistent interactions, and loses alignment.\n\nThe answer isn’t a central UX team doing all the work. It’s a Community of Practice made up of practitioners from each Scrum Team, collaborating to evolve a shared interaction framework. That framework then becomes part of your Definition of Done.\n\nThis isn’t about control. It’s about shared ownership and reuse without bottlenecks.\n\nUX coherence at scale is a system design problem. Don’t solve it with more hierarchy. Solve it with better collaboration.\n\nHow are your UX practices scaling with your teams?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-27-when-you-scale-scrum-the-challenge-isn-t-just-delivery-it-coherence\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-27-when-you-scale-scrum-the-challenge-isn-t-just-delivery-it-coherence",
    "ReferencePath": "resources/signals/2025-05-27-when-you-scale-scrum-the-challenge-isn-t-just-delivery-it-coherence"
  },
  {
    "FrontMatter": {
      "title": "David thought he already knew Scrum",
      "short_title": "Relearning Scrum Fundamentals",
      "description": "Discover why experienced Scrum practitioners often misunderstand core principles, and how revisiting Scrum fundamentals restores clarity, agility, and effective practice.",
      "tldr": "Even experienced teams often fall into old habits and misunderstand Scrum, leading to ineffective practices that only look agile on the surface. Regularly revisiting the fundamentals and purpose of Scrum helps prevent complacency and ensures real improvement. Consider challenging your team's understanding of Scrum to maintain true agility and drive meaningful change.",
      "date": "2025-05-26T15:30:28+01:00",
      "lastmod": "2025-05-26T15:30:28+01:00",
      "weight": 500.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "qpdjJhtaABE",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "david-thought-he-already-knew-scrum",
      "aliases": [
        "/resources/qpdjJhtaABE"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Professional Scrum",
        "Competence",
        "Agile Frameworks",
        "Pragmatic Thinking",
        "Empirical Process Control",
        "Agile Values and Principles"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7332790235598094336",
          "post_id": "7332790235598094336",
          "post_date": "2025-05-26T14:30:28Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:47Z",
        "short_title": "2025-07-07T16:43:57Z",
        "tldr": "2025-08-07T12:29:25Z"
      }
    },
    "BodyContent": "David thought he already knew Scrum. Four hours into the class, he realised he didn’t.\n\nThis happens all the time. Eight years of doing \"Scrum,\" but it’s actually a Frankenstein of old habits—command and control disguised in agile language.\n\nThe Applying Professional Scrum class is a reset. It’s not just about the mechanics of Scrum, but the why behind each element. The bounded environment. The transparency. The events that force inspection and adaptation.\n\nWithout that clarity, Scrum becomes cargo cult theatre. We hold the events, tick the boxes, but nothing actually changes.\n\nExperienced practitioners need resets too. Because familiarity breeds complacency. And complacency kills agility.\n\nWhen was the last time you challenged your understanding of Scrum?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-26-david-thought-he-already-knew-scrum\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-26-david-thought-he-already-knew-scrum",
    "ReferencePath": "resources/signals/2025-05-26-david-thought-he-already-knew-scrum"
  },
  {
    "FrontMatter": {
      "title": "Scrum doesn’t stop you from optimising flow",
      "short_title": "Scrum and Continuous Flow Optimisation",
      "description": "Explains how Scrum supports continuous flow and agility by prioritising Sprint Goals, Done increments, CI/CD practices, and outcomes over rigid sprint boundaries.",
      "tldr": "Scrum allows you to optimise workflow as long as you maintain accountability through a Sprint Goal and a Done Increment. If your team already delivers quality software continuously and meets these standards, you do not need to force all work to finish within strict Sprint timelines. Focus on outcomes and professionalism rather than rigid rules, and let work flow naturally if your processes support it.",
      "date": "2025-05-25T15:30:23+01:00",
      "lastmod": "2025-05-25T15:30:23+01:00",
      "weight": 175.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "BD9f00po0V6",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-doesn-t-stop-you-from-optimising-flow",
      "aliases": [
        "/resources/BD9f00po0V6"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Engineering Excellence",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Professional Scrum",
        "Empirical Process Control",
        "Product Delivery",
        "Agile Planning",
        "Organisational Agility",
        "Engineering Practices",
        "Agile Frameworks",
        "Value Delivery",
        "Operational Practices",
        "Frequent Releases",
        "Pragmatic Thinking",
        "Technical Excellence",
        "Team Performance",
        "Continuous Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7332427823237804033",
          "post_id": "7332427823237804033",
          "post_date": "2025-05-25T14:30:23Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:50Z",
        "short_title": "2025-07-07T16:44:00Z",
        "tldr": "2025-08-07T12:29:31Z"
      }
    },
    "BodyContent": "Scrum doesn’t stop you from optimising flow. It just demands accountability: a Sprint Goal and a Done Increment.\n\nIf your system of work already delivers high-quality software continuously, why impose hard delivery cuts every two weeks? Let work flow—sustainably—across Sprint boundaries.\n\nThis isn’t about bypassing Scrum. It’s about doing it professionally. If your team uses CI/CD, practices TDD, has a rock-solid Definition of Done, and meets the Sprint Goal—there’s no problem letting a Product Backlog Item finish next Sprint.\n\nTeams stuck in “you must finish everything” are optimising for calendars, not outcomes. That’s not agility. That’s a theatre.\n\nProfessional Scrum is not about following arbitrary rules. It’s about transparency, empirical process control, and delivery with integrity.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-25-scrum-doesn-t-stop-you-from-optimising-flow\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-25-scrum-doesn-t-stop-you-from-optimising-flow",
    "ReferencePath": "resources/signals/2025-05-25-scrum-doesn-t-stop-you-from-optimising-flow"
  },
  {
    "FrontMatter": {
      "title": "Scrum Myth Debunked: Unfinished Work is Allowed in Scrum",
      "short_title": "Unfinished Work in Scrum: Myth vs Reality",
      "description": "Clarifies Scrum guidelines on unfinished work, explaining that items can span multiple Sprints if the Sprint Goal and Done Increment remain intact, avoiding common misconceptions.",
      "tldr": "Scrum does not require all work to be finished by the end of a Sprint, only that the Increment is Done and meets the Definition of Done. Unfinished items can carry over as long as the Sprint Goal and Increment are not compromised. Managers should focus on delivering value and avoid forcing work to fit arbitrary Sprint boundaries.",
      "date": "2025-05-24T15:30:17+01:00",
      "lastmod": "2025-05-24T15:30:17+01:00",
      "weight": 445.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "uhQlOorRmkA",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-myth-debunked-unfinished-work-is-allowed-in-scrum",
      "aliases": [
        "/resources/uhQlOorRmkA"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Agile Frameworks",
        "Professional Scrum",
        "Increment",
        "Product Delivery",
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7332065411456245762",
          "post_id": "7332065411456245762",
          "post_date": "2025-05-24T14:30:17Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:52Z",
        "short_title": "2025-07-07T16:44:01Z",
        "tldr": "2025-08-07T12:29:32Z"
      }
    },
    "BodyContent": "For years I repeated a myth without questioning it: “You can’t have unfinished work in Scrum.” But the truth is, that’s not what the Scrum Guide says at all.\n\nYou must have a Done Increment by the end of the Sprint, but not every item must be finished. There’s no rule against work flowing across Sprints—so long as it doesn’t compromise the Sprint Goal or the Increment.\n\nIf you’re doing Continuous Delivery, you already have working software. You just need to make sure whatever you deliver meets the Definition of Done. That’s it.\n\nToo many teams limit their flow by artificially cutting work to fit a two-week calendar. It’s time we stopped teaching dogma and started reading the guide.\n\nHave you challenged this assumption in your team? You might be surprised what’s possible.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-24-scrum-myth-debunked-unfinished-work-is-allowed-in-scrum\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-24-scrum-myth-debunked-unfinished-work-is-allowed-in-scrum",
    "ReferencePath": "resources/signals/2025-05-24-scrum-myth-debunked-unfinished-work-is-allowed-in-scrum"
  },
  {
    "FrontMatter": {
      "title": "AI won’t replace humans",
      "short_title": "AI Won’t Replace Humans",
      "description": "Explores how AI automates repetitive tasks, enabling humans to focus on creative, strategic, and empathetic work, and challenges fears about AI replacing human jobs.",
      "tldr": "AI will not replace people but will automate repetitive and mechanical tasks, freeing humans to focus on creative and strategic work. Companies that use AI to eliminate low-value tasks and empower employees will be more successful. Leaders should assess whether their processes rely too much on dehumanising work and use AI to improve job quality.",
      "date": "2025-05-23T15:30:36+01:00",
      "lastmod": "2025-05-23T15:30:36+01:00",
      "weight": 835.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.1,
        "changefreq": "weekly"
      },
      "ResourceId": "ZSKQQVwpp3M",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "ai-won-t-replace-humans",
      "aliases": [
        "/resources/ZSKQQVwpp3M"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7331703103953465345",
          "post_id": "7331703103953465345",
          "post_date": "2025-05-23T14:30:36Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:54Z",
        "short_title": "2025-07-07T16:44:02Z",
        "tldr": "2025-08-07T12:29:34Z"
      }
    },
    "BodyContent": "AI won’t replace humans. It will replace the work that should never have needed a human.\n\nCopy-pasting data between systems. Processing approval flows. Writing the same report for the fifth time. That’s not where human intelligence belongs.\n\nThe companies that thrive will be the ones that let AI take the mechanical and elevate people to do the work only people can do—creative, strategic, empathetic, human work.\n\nIf your organisation is panicking about AI taking jobs, maybe the real issue is that it built its success on dehumanising work.\n\nAI is a mirror. What does it reveal about your system of work?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-23-ai-won-t-replace-humans\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-23-ai-won-t-replace-humans",
    "ReferencePath": "resources/signals/2025-05-23-ai-won-t-replace-humans"
  },
  {
    "FrontMatter": {
      "title": "Scrum is not an engineering process",
      "short_title": "Scrum Is Not an Engineering Process",
      "description": "Explains why Scrum is a social framework, not just engineering, emphasizing inclusive training, alignment, collaboration, and breaking command-and-control mindsets for true agility.",
      "tldr": "Scrum is a framework for fostering collaboration across the whole organisation, not just an engineering process for developers. True agility happens when everyone, regardless of role, understands and participates in Scrum, which helps break down silos and exposes issues that slow delivery. To achieve real change, ensure your entire team is aligned and involved in the conversation about how value is delivered.",
      "date": "2025-05-21T15:30:39+01:00",
      "lastmod": "2025-05-21T15:30:39+01:00",
      "weight": 550.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "2meGTZZAPdw",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-is-not-an-engineering-process",
      "aliases": [
        "/resources/2meGTZZAPdw"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Framework"
      ],
      "categories": [
        "Scrum",
        "Leadership"
      ],
      "tags": [
        "Organisational Agility",
        "Social Technologies",
        "Organisational Culture",
        "Agile Philosophy",
        "Personal",
        "Team Collaboration",
        "Agile Frameworks",
        "Pragmatic Thinking",
        "Agile Leadership",
        "Sociotechnical Systems",
        "Professional Scrum"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7330978339752394754",
          "post_id": "7330978339752394754",
          "post_date": "2025-05-21T14:30:39Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-29T18:10:56Z",
        "short_title": "2025-07-07T16:44:03Z",
        "tldr": "2025-08-07T12:29:38Z"
      }
    },
    "BodyContent": "Scrum is not an engineering process. It's a social technology that invites everyone in the organisation into the conversation.\n\nWhen I trained 147 people at Healthgrades, it wasn’t just Developers and Product Owners. It was the whole engineering department. Because if you want agility, you don’t cherry-pick who learns Scrum. You don’t gate understanding behind job titles. You bring everyone in.\n\nThat’s how you break the illusion of command and control. That’s how you expose the assumptions, habits, and dysfunctions that stall delivery.\n\nIt’s not enough to say “we do Scrum.” You have to ask: is everyone aligned around how value flows? If not, you’re just playing at agility.\n\nReal change starts when everyone speaks the same language. Is your whole organisation part of the conversation?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-21-scrum-is-not-an-engineering-process\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-21-scrum-is-not-an-engineering-process",
    "ReferencePath": "resources/signals/2025-05-21-scrum-is-not-an-engineering-process"
  },
  {
    "FrontMatter": {
      "title": "Frederick Taylor Legacy: Why it-is Still Problematic Today",
      "short_title": "Frederick Taylor’s Impact on Modern Work",
      "description": "Examines how Frederick Taylor’s management ideas still shape workplaces today, highlighting their impact on motivation, job design, and the challenges posed by AI.",
      "tldr": "Many organizations still follow Frederick Taylor’s outdated approach of breaking work into repetitive tasks, leading to meaningless titles, ineffective bonuses, and siloed knowledge. With AI and automation revealing how much work is based on repetition, leaders must choose between maintaining the status quo or shifting to a culture focused on mastery, autonomy, and real outcomes. Development managers should reconsider current structures and incentives to ensure their teams are prepared for a future where genuine skills and collaboration matter most.",
      "date": "2025-05-19T15:30:58+01:00",
      "lastmod": "2025-05-19T15:30:58+01:00",
      "weight": 765.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.1,
        "changefreq": "weekly"
      },
      "ResourceId": "a8GPqn01alD",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "frederick-taylor-legacy-why-it-is-still-problematic-today",
      "aliases": [
        "/resources/a8GPqn01alD"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7330253644577001476",
          "post_id": "7330253644577001476",
          "post_date": "2025-05-19T14:30:58Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-23T23:53:45Z",
        "short_title": "2025-07-07T16:44:05Z",
        "tldr": "2025-08-07T12:32:01Z"
      }
    },
    "BodyContent": "Frederick Taylor’s legacy is still alive—and it’s not a flattering one.\n\nHe told the world that most people couldn’t think for themselves, so we had to break work into tiny, repeatable pieces. That’s why we have titles that mean nothing, bonuses that bribe instead of inspire, and departments that hoard knowledge instead of sharing it.\n\nThis wasn’t about helping people grow. It was about making them easier to replace.\n\nNow that AI and automation are exposing just how much of our work is built on cognitive repetition, we have a choice.\n\nKeep pretending this system works.\n\nOr rebuild it around mastery, autonomy, and outcomes.\n\nMost organisations haven’t made the shift. They’re still paying bonuses and calling it motivation. Still promoting titles and calling it progress.\n\nAI isn’t just automating tasks. It’s holding up a mirror.\n\nWhat does it say about your organisation?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-19-frederick-taylor-legacy-why-it-is-still-problematic-today\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-19-frederick-taylor-legacy-why-it-is-still-problematic-today",
    "ReferencePath": "resources/signals/2025-05-19-frederick-taylor-legacy-why-it-is-still-problematic-today"
  },
  {
    "FrontMatter": {
      "title": "Resilience is not a department",
      "short_title": "Resilience Is Not a Department",
      "description": "Resilience must be built into products from the start, ensuring they withstand failures like outages or network loss, rather than being treated as an afterthought.",
      "tldr": "Resilience must be built into your product from the start, not treated as a separate concern or afterthought. Focusing only on performance, cost, or speed can lead to fragile systems that fail in real-world conditions. Make sure your disaster recovery plans are tested under real scenarios, not just documented, to avoid turning your product into a liability.",
      "date": "2025-05-17T15:30:21+01:00",
      "lastmod": "2025-05-17T15:30:21+01:00",
      "weight": 375.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "PWgzGL20QAo",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "resilience-is-not-a-department",
      "aliases": [
        "/resources/PWgzGL20QAo"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Capability"
      ],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7329528712498999296",
          "post_id": "7329528712498999296",
          "post_date": "2025-05-17T14:30:21Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-23T23:53:47Z",
        "short_title": "2025-07-07T16:44:08Z",
        "tldr": "2025-08-07T12:32:07Z"
      }
    },
    "BodyContent": "Resilience is not a department. It's not a project. It's not an afterthought.\n\nIt is a product capability.\n\nIf your product can’t survive failure—network loss, regional outage, DNS breakage—it is not a product. It is a liability with a pretty UI.\n\nToo many teams optimise for performance, cost, or velocity—until something goes wrong. Then they realise they optimised for fragility. Spain's blackout. Oracle’s healthcare cloud crash. Every one of these was built to succeed in PowerPoint, not in the real world.\n\nIf your disaster recovery plan has never been tested under load, with real users and real failover, then you don’t have a plan. You have a spreadsheet fantasy.\n\nThe next outage won’t care how good your uptime graph looked last quarter.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-17-resilience-is-not-a-department\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-17-resilience-is-not-a-department",
    "ReferencePath": "resources/signals/2025-05-17-resilience-is-not-a-department"
  },
  {
    "FrontMatter": {
      "title": "During a massive flood in London, nearly every datacentre went down.\"",
      "short_title": "London Flood: Datacentre Resilience Lessons",
      "description": "A London flood shut down most datacentres, but Rackspace stayed online by regularly live-testing failures, proving true resilience comes from practising real-world recovery.",
      "tldr": "Rackspace was the only London datacentre to stay online during a major flood because they regularly tested their backup systems by simulating real failures. Practising failure recovery under controlled but challenging conditions built true resilience in their operations. Development managers should regularly test their systems and teams under realistic failure scenarios to ensure they can recover when it matters most.",
      "date": "2025-05-16T15:30:31+01:00",
      "lastmod": "2025-05-16T15:30:31+01:00",
      "weight": 320.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "8SSU0fALhd8",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "during-a-massive-flood-in-london-nearly-every-datacentre-went-down",
      "aliases": [
        "/resources/8SSU0fALhd8"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7329166367629144068",
          "post_id": "7329166367629144068",
          "post_date": "2025-05-16T14:30:31Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-23T23:53:48Z",
        "short_title": "2025-07-07T16:44:09Z",
        "tldr": "2025-08-07T12:32:09Z"
      }
    },
    "BodyContent": "During a massive flood in London, nearly every datacentre went down.\n\nExcept one: Rackspace.\n\nTheir backup systems worked. Their power held. They stayed online. When asked why, the CEO didn’t present a whitepaper. He held up a key.\n\nEvery month, he walked into the power room and pulled the main breaker. On purpose. Shut the whole thing off. Live test. No excuses.\n\nIt was painful. Risky. Uncomfortable. And that’s exactly why it worked.\n\nYou don’t build resilience by talking about it. You build it by living through the failure—on your terms, not the disaster’s.\n\nIf your systems only work when conditions are perfect, you’ve already lost. If your team has never practised failing safely, they won’t know how to recover when it’s real.\n\nReal resilience is earned through pain. If it’s hard, do it more often.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-16-during-a-massive-flood-in-london-nearly-every-datacentre-went-down\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-16-during-a-massive-flood-in-london-nearly-every-datacentre-went-down",
    "ReferencePath": "resources/signals/2025-05-16-during-a-massive-flood-in-london-nearly-every-datacentre-went-down"
  },
  {
    "FrontMatter": {
      "title": "When Heathrow went down, they blamed the power supplier.",
      "short_title": "Heathrow Outage: Disaster Recovery Failure",
      "description": "Heathrow’s outage was caused by an over-sensitive disaster recovery system, not a power loss, highlighting the risks of untested resilience and flawed infrastructure assumptions.",
      "tldr": "Heathrow’s outage was not caused by a power loss but by an overly sensitive internal system that shut everything down in response to a minor fluctuation, revealing that their disaster recovery measures were untested for real-world chaos. Investing in infrastructure does not guarantee true resilience; resilience is proven only when systems are tested against unexpected failures. Development managers should regularly test and challenge their recovery processes to ensure they work under real conditions, not just ideal scenarios.",
      "date": "2025-05-15T15:30:30+01:00",
      "lastmod": "2025-05-15T15:30:30+01:00",
      "weight": 405.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "NpLk02WHeMe",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "when-heathrow-went-down-they-blamed-the-power-supplier",
      "aliases": [
        "/resources/NpLk02WHeMe"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7328803975921569792",
          "post_id": "7328803975921569792",
          "post_date": "2025-05-15T14:30:30Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-19T13:39:42Z",
        "short_title": "2025-07-07T16:44:10Z",
        "tldr": "2025-08-07T12:32:12Z"
      }
    },
    "BodyContent": "When Heathrow went down, they blamed the power supplier.\n\nA fire at one substation, they said, caused the disruption. Convenient story. But it wasn't true.\n\nHeathrow gets power from three independent substations. Any one of them could run the airport solo. The real failure? Their internal \"resilience\" system kicked in when it saw a fluctuation—not a loss. And in its attempt to “protect” the infrastructure, it shut the entire thing down.\n\nIt took all day to reboot. Not because power was unavailable, but because their disaster recovery system was too sensitive to survive a real incident.\n\nThat’s what happens when resilience is theatre. Flashy systems. Fancy architecture. And no one asking the hard question: what actually happens when things get messy?\n\nIf you haven’t tested for chaos, you’ve only prepared for comfort.\n\nDon’t confuse infrastructure spend with resilience. Resilience is what happens when your assumptions fail.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-15-when-heathrow-went-down-they-blamed-the-power-supplier\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-15-when-heathrow-went-down-they-blamed-the-power-supplier",
    "ReferencePath": "resources/signals/2025-05-15-when-heathrow-went-down-they-blamed-the-power-supplier"
  },
  {
    "FrontMatter": {
      "title": "Everyone has a disaster recovery plan—on paper",
      "short_title": "Disaster Recovery Plans vs Real Resilience",
      "description": "Most disaster recovery plans fail in practice due to overlooked dependencies and lack of real-world testing, leaving organisations vulnerable when outages occur.",
      "tldr": "Many organizations have disaster recovery plans, but these often fail in real situations because critical dependencies are overlooked and not tested end to end. Successful drills can give a false sense of security if they do not include all essential systems, like authentication services. To ensure true resilience, regularly test your recovery process under real conditions and verify that all dependencies are restored and functional.",
      "date": "2025-05-14T15:30:37+01:00",
      "lastmod": "2025-05-14T15:30:37+01:00",
      "weight": 390.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "jgAmhaBbUlm",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "everyone-has-a-disaster-recovery-plan-on-paper",
      "aliases": [
        "/resources/jgAmhaBbUlm"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Ethos"
      ],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Personal",
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7328441618900918273",
          "post_id": "7328441618900918273",
          "post_date": "2025-05-14T14:30:37Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:46Z",
        "short_title": "2025-07-07T16:44:13Z",
        "tldr": "2025-08-07T12:32:20Z"
      }
    },
    "BodyContent": "Everyone has a disaster recovery plan—on paper.\n\nBut when the lights go out, very few organisations have systems that actually work. Spain, Portugal, Oracle, Heathrow... these weren’t random outages. They were textbook examples of systems that failed exactly as they were designed.\n\nAt Merrill Lynch, I saw it firsthand. Twice. We ran full disaster recovery drills. Everything looked like a success—until we tried to use the restored systems. Nothing worked. Why? Because the one system that everything else relied on—Active Directory—was never restored.\n\nSo yes, my app was \"restored\" successfully. But without authentication, it was useless.\n\nThis is the cost of pretending you're resilient: you run the drills, tick the boxes, declare victory... and miss the critical dependencies that actually matter.\n\nIf you’ve never validated that your system works end to end, under real pressure, then you’re not resilient. You’re wishful.\n\nReal resilience doesn’t live in plans. It lives in pain.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-14-everyone-has-a-disaster-recovery-plan-on-paper\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-14-everyone-has-a-disaster-recovery-plan-on-paper",
    "ReferencePath": "resources/signals/2025-05-14-everyone-has-a-disaster-recovery-plan-on-paper"
  },
  {
    "FrontMatter": {
      "title": "You can not implement Agile or Scrum successfully by decree",
      "short_title": "Agile and Scrum Require Cultural Change",
      "description": "Mandating Agile or Scrum fails without cultural change; true agility requires trust, transparency, and a supportive environment, not just tools or processes.",
      "tldr": "Agile and Scrum cannot be made effective just by issuing mandates or using tools; their success depends on a culture of trust, openness, and willingness to improve. If your team fears blame or resists change, process changes alone will not help. Focus on building a supportive culture before trying to improve processes.",
      "date": "2025-05-13T15:30:47+01:00",
      "lastmod": "2025-05-13T15:30:47+01:00",
      "weight": 345.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "es3rfygczrI",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "you-can-not-implement-agile-or-scrum-successfully-by-decree",
      "aliases": [
        "/resources/es3rfygczrI"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Ethos"
      ],
      "categories": [
        "Product Development",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Organisational Culture",
        "Social Technologies",
        "Agile Philosophy",
        "Team Motivation",
        "Agile Values and Principles",
        "Sociotechnical Systems",
        "Agile Leadership",
        "Team Collaboration",
        "Organisational Change",
        "Software Development",
        "Agile Frameworks",
        "Agile Product Management",
        "Transparency",
        "Organisational Agility",
        "Change Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7328079267450298371",
          "post_id": "7328079267450298371",
          "post_date": "2025-05-13T14:30:47Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:47Z",
        "short_title": "2025-07-07T16:44:15Z",
        "tldr": "2025-08-07T12:32:26Z"
      }
    },
    "BodyContent": "You can't implement Agile or Scrum successfully by decree.\n\nYou can't mandate trust.\n\nYou can't enforce transparency with a tool.\n\nYou can't “install” continuous improvement through a Jira plugin.\n\nScrum is an observability pattern for value delivery. It exposes how things are actually working, not how you wish they were.\n\nBut the moment your team sees that something is broken, your culture decides what happens next.\n\nIf your people are afraid of blame, afraid of failure, or stuck in inertia, the signals will be ignored.\n\nNo retrospective, Daily Scrum, or burndown chart will fix it.\n\nWant real agility?  \nFix your culture before you fix your process.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-13-you-can-not-implement-agile-or-scrum-successfully-by-decree\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-13-you-can-not-implement-agile-or-scrum-successfully-by-decree",
    "ReferencePath": "resources/signals/2025-05-13-you-can-not-implement-agile-or-scrum-successfully-by-decree"
  },
  {
    "FrontMatter": {
      "title": "Toyota \"andon\" cord lets any worker stop production to fix defects",
      "short_title": "Toyota Andon Cord: Empowering Quality Culture",
      "description": "Explains how true quality improvement needs both tools and a culture of safety, using Toyota’s andon cord as a lesson for Agile and Scrum adoption in organisations.",
      "tldr": "Giving teams tools like Scrum events or defect reporting only works if you also create a culture where people feel safe to speak up and address problems. Without psychological safety and genuine empowerment, process changes alone will not lead to real improvement. Development managers should focus on building trust and openness so teams feel comfortable raising issues.",
      "date": "2025-05-12T15:30:50+01:00",
      "lastmod": "2025-05-12T15:30:50+01:00",
      "weight": 225.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "BIT0P3MRDj9",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "toyota-andon-cord-lets-any-worker-stop-production-to-fix-defects",
      "aliases": [
        "/resources/BIT0P3MRDj9"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Ethos"
      ],
      "categories": [
        "Product Development",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Organisational Culture",
        "Sociotechnical Systems",
        "Continuous Improvement",
        "Agile Philosophy",
        "Transparency",
        "Change Management",
        "Lean Thinking",
        "Software Development",
        "Organisational Agility",
        "Team Motivation",
        "Pragmatic Thinking",
        "Psychological Safety",
        "Lean Principles",
        "Professional Scrum",
        "Self Organisation"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7327716895598460928",
          "post_id": "7327716895598460928",
          "post_date": "2025-05-12T14:30:50Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:49Z",
        "short_title": "2025-07-07T16:44:16Z",
        "tldr": "2025-08-07T12:32:27Z"
      }
    },
    "BodyContent": "In manufacturing, Toyota introduced the \"andon\" cord—a simple chain any worker could pull to stop the entire line if they saw a defect.\n\nWhen American car companies copied the idea, they installed the cord... but workers were too afraid to pull it.\n\nThe tool was there. The empowerment was not.\n\nThe same failure happens in Agile and Scrum adoptions every day.\n\nInstalling Scrum Events without building a culture of transparency and continuous improvement is cargo cult thinking. You’re copying the tool without the ethos.\n\nScrum is not your safety net. Your culture is.\n\nIf you punish people for raising issues, don't be surprised when they stop speaking up.\n\nHow safe is it in your organisation to pull the metaphorical andon cord?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-12-toyota-andon-cord-lets-any-worker-stop-production-to-fix-defects\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-12-toyota-andon-cord-lets-any-worker-stop-production-to-fix-defects",
    "ReferencePath": "resources/signals/2025-05-12-toyota-andon-cord-lets-any-worker-stop-production-to-fix-defects"
  },
  {
    "FrontMatter": {
      "title": "You want speed, adaptability, resilience",
      "short_title": "Speed, Adaptability, Resilience & Agency",
      "description": "Explores why true organisational agility depends on empowering teams with agency, not just adopting frameworks like Scrum, Kanban, or DevOps, to achieve real outcomes.",
      "tldr": "Investing in Agile, Scrum, Kanban, and DevOps will not deliver real speed, adaptability, or resilience unless your teams have the agency to truly own their work and outcomes. Without empowering people to take responsibility, you risk superficial processes and disengaged teams. To achieve genuine agility, ensure your system supports team and individual ownership, not just frameworks.",
      "date": "2025-05-11T15:30:29+01:00",
      "lastmod": "2025-05-11T15:30:29+01:00",
      "weight": 385.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "5UaIfaLclWB",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "you-want-speed-adaptability-resilience",
      "aliases": [
        "/resources/5UaIfaLclWB"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Ethos"
      ],
      "categories": [
        "Leadership",
        "Technical Leadership",
        "Product Development"
      ],
      "tags": [
        "Agentic Agility",
        "Organisational Agility",
        "Team Motivation",
        "Agile Philosophy",
        "Business Agility",
        "Organisational Culture",
        "Agile Leadership",
        "Pragmatic Thinking",
        "Social Technologies",
        "Agile Values and Principles",
        "Value Delivery",
        "Product Delivery",
        "Agentic Engineering",
        "Agile Strategy",
        "Self Organisation"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7327354418876628992",
          "post_id": "7327354418876628992",
          "post_date": "2025-05-11T14:30:29Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:51Z",
        "short_title": "2025-07-07T16:44:19Z",
        "tldr": "2025-08-07T12:32:34Z"
      }
    },
    "BodyContent": "You want speed, adaptability, resilience.\n\nYou invest in Scrum, Agile, Kanban, DevOps.\n\nBut then you ignore the hard part:  \nagency.\n\nWithout agency, your teams can’t own outcomes.  \nWithout agency, your Product Owners can’t own value.  \nWithout agency, your Scrum Masters can’t own effectiveness.\n\nInstead, you get cosmetic ceremonies, fake backlogs, and teams going through the motions.\n\nKanban, as an observability pattern for value delivery, won’t save you.  \nDevOps, as the union of people, process, and products to enable continuous delivery of value, won’t save you.\n\nNone of these strategies work without the human system having the agency to act.\n\nIf you are serious about agility, you have to be serious about enabling people to own what they are accountable for.\n\nWhere in your system have you invested in agility but refused to invest in agency?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-11-you-want-speed-adaptability-resilience\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-11-you-want-speed-adaptability-resilience",
    "ReferencePath": "resources/signals/2025-05-11-you-want-speed-adaptability-resilience"
  },
  {
    "FrontMatter": {
      "title": "let-us be blunt",
      "short_title": "Accountability Requires Real Agency in Scrum",
      "description": "Accountability in Scrum requires real agency; without the power to act, roles like Product Owner and Scrum Master become ineffective and accountability is undermined.",
      "tldr": "Accountability in Scrum only works if people also have the authority to make decisions and remove obstacles; otherwise, roles become meaningless and teams are set up to fail. To achieve real results, ensure your Product Owners, Scrum Masters, and Developers have both responsibility and the power to act. Review your organisation to identify where you may be limiting agency while still expecting accountability.",
      "date": "2025-05-10T15:30:22+01:00",
      "lastmod": "2025-05-10T15:30:22+01:00",
      "weight": 340.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "0A8ONYVbWlL",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "let-us-be-blunt",
      "aliases": [
        "/resources/0A8ONYVbWlL"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Agentic Agility",
        "Professional Scrum",
        "Self Organisation",
        "Team Motivation",
        "Agile Product Management",
        "Organisational Agility",
        "Organisational Culture",
        "Software Development",
        "Agile Leadership",
        "Agile Frameworks",
        "Scrum Team",
        "Scrum Master",
        "Value Delivery",
        "Social Technologies",
        "Agile Strategy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7326992004440072194",
          "post_id": "7326992004440072194",
          "post_date": "2025-05-10T14:30:22Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:52Z",
        "short_title": "2025-07-07T16:44:21Z",
        "tldr": "2025-08-07T12:32:36Z"
      }
    },
    "BodyContent": "Let’s be blunt:\n\nThose expected to deliver results must have control over what influences their delivery.\n\nIn Scrum, the Product Owner is accountable for maximising value — but if they can’t reprioritise the backlog, they’re a backlog secretary.  \nThe Scrum Master is accountable for team effectiveness — but if they can’t challenge organisational dysfunction, they’re a meeting host.  \nDevelopers are accountable for the Increment — but if they can’t decide how to build it, they’re just order-takers.\n\nThis is why agency matters.  \nWithout it, accountability is performative.  \nYou are setting people up to fail.\n\nIf you want real Scrum — not Scrum theatre — you must pair accountability with the agency to remove impediments, challenge dysfunction, and enforce realignment where necessary.\n\nStop pretending people are accountable when you’ve stripped away their ability to act.\n\nWhere in your organisation have you tied people’s hands while still expecting them to carry the weight?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-10-let-us-be-blunt\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-10-let-us-be-blunt",
    "ReferencePath": "resources/signals/2025-05-10-let-us-be-blunt"
  },
  {
    "FrontMatter": {
      "title": "We hear self-managing teams so often it become a cliché",
      "short_title": "Self-Management in Scrum Teams Explained",
      "description": "Explains how true self-management in Scrum requires active, disciplined effort from Product Owners, Scrum Masters, and Developers, not chaos or lack of structure.",
      "tldr": "Self-management is essential for all Scrum roles, not just developers, and involves active, disciplined work in how Product Owners, Scrum Masters, and Developers fulfill their responsibilities. Scrum requires clear alignment and adaptive discipline, not a loose or chaotic approach. Development managers should ensure their teams understand and practice self-management as a structured, intentional process rather than mistaking it for a lack of direction.",
      "date": "2025-05-09T15:30:39+01:00",
      "lastmod": "2025-05-09T15:30:39+01:00",
      "weight": 310.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "FqiyqqNxjFS",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "we-hear-self-managing-teams-so-often-it-become-a-cliché",
      "aliases": [
        "/resources/FqiyqqNxjFS"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Social Technologies",
        "Software Development",
        "Scrum Team",
        "Self Organisation",
        "Professional Scrum",
        "Pragmatic Thinking",
        "Team Collaboration",
        "Agile Product Management",
        "Agile Philosophy",
        "Organisational Agility",
        "Product Delivery",
        "Agile Frameworks",
        "Team Motivation",
        "Sociotechnical Systems"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7326629685818179584",
          "post_id": "7326629685818179584",
          "post_date": "2025-05-09T14:30:39Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:54Z",
        "short_title": "2025-07-07T16:44:22Z",
        "tldr": "2025-08-07T12:32:38Z"
      }
    },
    "BodyContent": "We hear “self-managing teams” so often it’s become a cliché.\n\nBut here’s what gets missed:\n\nSelf-management applies to all Scrum roles.\n\nProduct Owners must self-manage how they engage with stakeholders, order the backlog, and shape the product vision.  \nScrum Masters must self-manage how they serve the team, coach the organisation, and create the conditions for success.  \nDevelopers must self-manage how they plan, execute, and deliver the Increment.\n\nThis isn’t a passive concept.  \nIt’s active, adaptive, disciplined work.\n\nScrum isn’t designed to be a loose, anything-goes framework.  \nIt’s a social technology to deliver adaptive solutions — and that requires disciplined self-management across roles, grounded in clear alignment.\n\nWhere are you mistaking “self-management” for chaos or neglect?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-09-we-hear-self-managing-teams-so-often-it-become-a-cliché\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-09-we-hear-self-managing-teams-so-often-it-become-a-cliché",
    "ReferencePath": "resources/signals/2025-05-09-we-hear-self-managing-teams-so-often-it-become-a-cliché"
  },
  {
    "FrontMatter": {
      "title": "Everyone loves to shout give teams autonomy",
      "short_title": "Team Autonomy and Alignment in Scrum",
      "description": "Explores why team autonomy in Scrum must be balanced with alignment to strategic goals, highlighting the role of clear objectives and leadership in achieving true agility.",
      "tldr": "Autonomy alone is not enough; teams need clear alignment with strategic goals to deliver real business outcomes. In Scrum, tools like the Product Goal, Sprint Goal, and Product Backlog are essential for this alignment. Leaders should provide clarity of purpose so teams can be both autonomous and effective, avoiding wasted effort and missed objectives.",
      "date": "2025-05-08T15:30:40+01:00",
      "lastmod": "2025-05-08T15:30:40+01:00",
      "weight": 355.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "5nkzevV2xKG",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "everyone-loves-to-shout-give-teams-autonomy",
      "aliases": [
        "/resources/5nkzevV2xKG"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Strategy"
      ],
      "categories": [
        "Scrum",
        "Product Management",
        "Leadership"
      ],
      "tags": [
        "Agile Product Management",
        "Common Goals",
        "Sociotechnical Systems",
        "Strategic Goals",
        "Pragmatic Thinking",
        "Organisational Agility",
        "Software Development",
        "Agile Strategy",
        "Agile Planning",
        "Agile Leadership",
        "Organisational Culture",
        "Team Motivation",
        "Social Technologies",
        "Professional Scrum",
        "Team Collaboration"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7326267302268592129",
          "post_id": "7326267302268592129",
          "post_date": "2025-05-08T14:30:40Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:56Z",
        "short_title": "2025-07-07T16:44:23Z",
        "tldr": "2025-08-07T12:32:40Z"
      }
    },
    "BodyContent": "Everyone loves to shout “give teams autonomy.”\n\nWhat they forget is that autonomy without alignment is just local chaos.\n\nIn Scrum, alignment isn’t an optional management layer; it’s the strategic guardrail that keeps teams moving toward meaningful outcomes.\n\nThe Product Goal. The Sprint Goal. The Product Backlog ordering.\n\nThese are not paperwork artefacts — they are the heartbeat of alignment.\n\nWithout them, self-managing teams spin their wheels, deliver local outputs, and miss the mark on business outcomes.\n\nIt’s not the team’s fault.\n\nIt’s leadership failing to provide clarity of purpose.\n\nAutonomy and alignment are not opposites.\n\nScrum, as a social technology, requires both.\n\nIf your teams are autonomous but disconnected from strategic goals, you don’t have agility — you have expensive local optimisation.\n\nHow are you ensuring your teams are aligned without suffocating their autonomy?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-08-everyone-loves-to-shout-give-teams-autonomy\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-08-everyone-loves-to-shout-give-teams-autonomy",
    "ReferencePath": "resources/signals/2025-05-08-everyone-loves-to-shout-give-teams-autonomy"
  },
  {
    "FrontMatter": {
      "title": "Fear is the real enemy of agility",
      "short_title": "Fear Is the Real Enemy of Agility",
      "description": "Explores how fear hinders true agility in teams, emphasising the need to foster courage and trust for effective Agile, Scrum, and DevOps practices and continuous improvement.",
      "tldr": "Fear blocks true agility and leads to stagnation, regardless of how many Agile practices you follow. The main job of leaders is to remove fear so teams can learn, adapt, and deliver value. Focus on creating an environment where people feel safe to speak up and take risks.",
      "date": "2025-05-07T15:30:42+01:00",
      "lastmod": "2025-05-07T15:30:42+01:00",
      "weight": 325.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "JwMLCNODuls",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "fear-is-the-real-enemy-of-agility",
      "aliases": [
        "/resources/JwMLCNODuls"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Technical Leadership",
        "Leadership",
        "Product Development"
      ],
      "tags": [
        "Agile Philosophy",
        "Organisational Culture",
        "Team Motivation",
        "Psychological Safety",
        "Pragmatic Thinking",
        "Software Development",
        "Professional Scrum",
        "Social Technologies",
        "Team Collaboration",
        "Organisational Agility",
        "Market Adaptability",
        "Agile Leadership",
        "Personal",
        "Agile Strategy",
        "Scrum Values"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7325904921298366464",
          "post_id": "7325904921298366464",
          "post_date": "2025-05-07T14:30:42Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:57Z",
        "short_title": "2025-07-07T16:44:25Z",
        "tldr": "2025-08-07T12:32:44Z"
      }
    },
    "BodyContent": "Fear is the real enemy of agility.\n\nFear of raising an issue.  \nFear of stopping the line.  \nFear of being wrong.  \nFear of change.\n\nAgile, Scrum, and DevOps are about enabling continuous delivery of value through learning, adaptation, and trust.\n\nBut if fear rules your workplace, all you’ll get is stagnation, no matter how many \"Agile ceremonies\" you run.\n\nThe real work of a Scrum Master, Product Owner, or leader isn’t in running events or building roadmaps.  \nIt’s in systematically removing fear from the system.\n\nCourage is the first Scrum Value for a reason.\n\nAre you building a system where courage thrives—or where fear festers?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-07-fear-is-the-real-enemy-of-agility\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-07-fear-is-the-real-enemy-of-agility",
    "ReferencePath": "resources/signals/2025-05-07-fear-is-the-real-enemy-of-agility"
  },
  {
    "FrontMatter": {
      "title": "Technical debt cripples business agility and slows engineers down",
      "short_title": "Technical Debt Limits Agility and Innovation",
      "description": "Technical debt limits business agility, slows engineering, and hinders innovation. Managing it with automation and transparency is key to staying competitive and responsive.",
      "tldr": "Technical debt severely limits business agility and slows down engineering teams, making it harder to respond to market opportunities and innovate. This is a real risk seen in major companies and happens when technical debt is ignored. To stay competitive, focus on shortening feedback loops, automating processes, increasing transparency, and actively managing technical debt rather than accepting it.",
      "date": "2025-05-06T15:30:42+01:00",
      "lastmod": "2025-05-06T15:30:42+01:00",
      "weight": 190.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "4kBTeJ1TmsW",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "technical-debt-cripples-business-agility-and-slows-engineers-down",
      "aliases": [
        "/resources/4kBTeJ1TmsW"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Technical Debt",
        "Software Development",
        "Business Agility",
        "Operational Practices",
        "Market Adaptability",
        "Technical Mastery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7325542533416038401",
          "post_id": "7325542533416038401",
          "post_date": "2025-05-06T14:30:42Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:54:59Z",
        "short_title": "2025-07-07T16:44:27Z",
        "tldr": "2025-08-07T12:32:48Z"
      }
    },
    "BodyContent": "Technical debt doesn’t just slow engineers down—it cripples business agility.\n\nWhen software becomes too fragile to change quickly, every product decision takes longer. Every market opportunity is harder to seize. And suddenly, you're not competing on innovation anymore—you’re just trying to keep up.\n\nThis isn’t a theoretical risk. It happened at Microsoft. It happens in every enterprise that delays paying back technical debt.\n\nThe solution? Shorten feedback loops. Automate everything. Make transparency the default. And, above all, stop accepting technical debt as an inevitability.\n\nYour ability to respond to the market depends on how you manage technical debt today.\n\nHow much is it costing your business to maintain the status quo?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-06-technical-debt-cripples-business-agility-and-slows-engineers-down\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-06-technical-debt-cripples-business-agility-and-slows-engineers-down",
    "ReferencePath": "resources/signals/2025-05-06-technical-debt-cripples-business-agility-and-slows-engineers-down"
  },
  {
    "FrontMatter": {
      "title": "Most teams don’t fail because they lack frameworks",
      "short_title": "Most Teams Fail by Ignoring Feedback",
      "description": "Teams struggle not from lacking frameworks, but from ignoring feedback. Success depends on acting on signals, fostering safety, and empowering real change.",
      "tldr": "Teams usually fail not because they lack frameworks like Agile or Scrum, but because they ignore the feedback these frameworks reveal. The real challenge is creating a culture where teams feel safe and empowered to act on what they learn. Development managers should focus on listening to feedback and enabling teams to address issues, which leads to better performance and competitive advantage.",
      "date": "2025-05-05T15:30:43+01:00",
      "lastmod": "2025-05-05T15:30:43+01:00",
      "weight": 340.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "sX2UVhPk6cL",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "most-teams-don-t-fail-because-they-lack-frameworks",
      "aliases": [
        "/resources/sX2UVhPk6cL"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Product Development",
        "Leadership",
        "Scrum"
      ],
      "tags": [
        "Organisational Agility",
        "Agile Philosophy",
        "Organisational Culture",
        "Software Development",
        "Pragmatic Thinking",
        "Continuous Learning",
        "Market Adaptability",
        "Change Management",
        "Continuous Improvement",
        "Agile Values and Principles",
        "Social Technologies",
        "Agile Leadership",
        "Agile Product Management",
        "Value Delivery",
        "Organisational Change"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7325180153402114049",
          "post_id": "7325180153402114049",
          "post_date": "2025-05-05T14:30:43Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:00Z",
        "short_title": "2025-07-07T16:44:28Z",
        "tldr": "2025-08-07T12:32:49Z"
      }
    },
    "BodyContent": "Most teams don’t fail because they lack frameworks.  \nThey fail because they don't act on the feedback those frameworks expose.\n\nAgile and Scrum light up the broken parts of your system like a warning light on a dashboard.  \nIgnoring them doesn't make the problems go away. It makes them worse.\n\nThe hardest part of agility isn’t getting a team to do Sprints.  \nThe hardest part is building an environment where it’s safe—and expected—to act on what you learn.\n\nA team that delivers real change is a team that is listened to, respected, and empowered to make the hard calls.\n\nIf you treat every signal as an opportunity, not a threat, you will outlearn and outperform your competitors.\n\nAre you listening to your signals or silencing them?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-05-most-teams-don-t-fail-because-they-lack-frameworks\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-05-most-teams-don-t-fail-because-they-lack-frameworks",
    "ReferencePath": "resources/signals/2025-05-05-most-teams-don-t-fail-because-they-lack-frameworks"
  },
  {
    "FrontMatter": {
      "title": "Agile and Scrum are often misunderstood",
      "short_title": "Agile and Scrum Reveal Team Issues",
      "description": "Agile and Scrum expose underlying team and workflow issues, helping organisations address real problems rather than masking dysfunction with process or tools.",
      "tldr": "Agile and Scrum do not solve problems by themselves; they expose underlying issues in your team's processes. The real value comes from addressing these revealed problems directly rather than just following rituals or tools. Managers should focus on actively resolving dysfunctions highlighted by Agile and Scrum to improve team performance.",
      "date": "2025-05-04T15:30:30+01:00",
      "lastmod": "2025-05-04T15:30:30+01:00",
      "weight": 510.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "Oi_yiyEHZbM",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "agile-and-scrum-are-often-misunderstood",
      "aliases": [
        "/resources/Oi_yiyEHZbM"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Philosophy"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Software Development",
        "Organisational Agility",
        "Social Technologies",
        "Agile Philosophy",
        "Professional Scrum"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7324817708770877440",
          "post_id": "7324817708770877440",
          "post_date": "2025-05-04T14:30:30Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:01Z",
        "short_title": "2025-07-07T16:44:30Z",
        "tldr": "2025-08-07T12:32:53Z"
      }
    },
    "BodyContent": "Agile and Scrum are often misunderstood.\n\nThey don't fix your problems.  \nThey reveal them.\n\nWhen a team struggles to produce a working product, when deliverables fall apart, when frustration bubbles up, Agile and Scrum are not failing. They’re doing exactly what they were designed to do—highlight the dysfunctions you’ve ignored.\n\nThe real work isn't in running a Daily Scrum or filling out a board.  \nIt’s in confronting those problems head-on, not sweeping them under the carpet.\n\nAgile and Scrum are social technologies for building adaptive solutions, not frameworks for passive compliance.\n\nIf your system of work is broken, no certification, no Jira ticket, and no ritual will save you.\n\nAre you ready to fix the real problems your team is signalling?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-04-agile-and-scrum-are-often-misunderstood\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-04-agile-and-scrum-are-often-misunderstood",
    "ReferencePath": "resources/signals/2025-05-04-agile-and-scrum-are-often-misunderstood"
  },
  {
    "FrontMatter": {
      "title": "A certification proves you’ve passed a test",
      "short_title": "Certification vs Real-World Product Skills",
      "description": "Certifications show test-passing ability but don’t prove real-world product skills. Experience, judgement, and stakeholder influence matter more for true competence.",
      "tldr": "Certification shows someone passed a test but does not prove they can handle real product challenges or make strategic decisions. Experience is a better indicator of true capability, though certifications can help identify knowledge gaps. Hiring managers should prioritize practical experience over credentials when evaluating candidates.",
      "date": "2025-05-03T15:30:21+01:00",
      "lastmod": "2025-05-03T15:30:21+01:00",
      "weight": 765.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.1,
        "changefreq": "weekly"
      },
      "ResourceId": "5fShT9wNqFg",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "a-certification-proves-you-ve-passed-a-test",
      "aliases": [
        "/resources/5fShT9wNqFg"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Management"
      ],
      "tags": [
        "Competence",
        "Personal",
        "Product Owner"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7324455284574150658",
          "post_id": "7324455284574150658",
          "post_date": "2025-05-03T14:30:21Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:03Z",
        "short_title": "2025-07-07T16:44:30Z",
        "tldr": "2025-08-07T12:32:55Z"
      }
    },
    "BodyContent": "A certification proves you’ve passed a test. It does not mean you can define a product vision, align stakeholders, or make tough trade-offs.\n\nHiring managers often use certifications as a filter, and while they serve as a minimum competency bar, they don’t guarantee expertise. I’ve met certified POs who struggle to influence stakeholders and uncertified POs who run circles around them.\n\nReal competence comes from experience—making strategic product decisions, balancing customer needs with business goals, and driving incremental value. It’s about having the judgment to say no, not just prioritising whatever stakeholders demand.\n\nThat said, assessments like PSPO I and PSPO II can be useful for self-evaluation. If nothing else, they expose gaps in your knowledge. But if you’re relying on them as proof of capability, you’re missing the bigger picture.\n\nWhat’s your take? Should hiring managers weigh experience over certification, or is there still value in the credential?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-03-a-certification-proves-you-ve-passed-a-test\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-03-a-certification-proves-you-ve-passed-a-test",
    "ReferencePath": "resources/signals/2025-05-03-a-certification-proves-you-ve-passed-a-test"
  },
  {
    "FrontMatter": {
      "title": "Here the dirty secret behind many agile transformations",
      "short_title": "The Dirty Secret of Agile Transformations",
      "description": "Many agile transformations restrict team autonomy, leading to control and compliance instead of true ownership, adaptability, and meaningful engagement in value delivery.",
      "tldr": "Many agile transformations fail because organizations maintain tight control over how work is done while claiming to empower teams. True agility requires leadership to set clear goals and priorities but let teams decide how to achieve them. To foster commitment and improvement, review where your processes still dictate the how and shift toward real team autonomy.",
      "date": "2025-05-02T15:30:32+01:00",
      "lastmod": "2025-05-02T15:30:32+01:00",
      "weight": 340.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "6Z5I3JPMECs",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "here-the-dirty-secret-behind-many-agile-transformations",
      "aliases": [
        "/resources/6Z5I3JPMECs"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tenet"
      ],
      "categories": [
        "Scrum",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Organisational Culture",
        "Team Collaboration",
        "Pragmatic Thinking",
        "Self Organisation",
        "Social Technologies",
        "Agentic Agility",
        "Software Development",
        "Team Motivation",
        "Organisational Agility",
        "Change Management",
        "Professional Scrum",
        "Agile Transformation",
        "Agile Leadership",
        "Agile Values and Principles",
        "Organisational Psychology"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7324092939431813120",
          "post_id": "7324092939431813120",
          "post_date": "2025-05-02T14:30:32Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:04Z",
        "short_title": "2025-07-07T16:44:31Z",
        "tldr": "2025-08-07T12:32:57Z"
      }
    },
    "BodyContent": "Here’s the dirty secret behind many “agile transformations”:\n\nThe organisation claims alignment, but what they deliver is control.\n\nThey dictate priorities, assign tasks, predefine solutions, and then slap a “self-managing” label on the team.\n\nThis is a lie.\n\nIn Scrum, autonomy isn’t about teams doing whatever they want. It’s about teams deciding how they will meet their goals.\n\nAlignment defines the why and what.  \nAutonomy gives the team ownership of the how.\n\nWithout autonomy, you create learned helplessness.  \nTeams stop thinking, stop improving, and stop caring.  \nYou get compliance, not commitment.\n\nIf you want adaptive value delivery, you must let go of the how.  \nAlign on goals — and then get out of the way.\n\nWhat parts of your system are still holding a death grip on the how?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-02-here-the-dirty-secret-behind-many-agile-transformations\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-02-here-the-dirty-secret-behind-many-agile-transformations",
    "ReferencePath": "resources/signals/2025-05-02-here-the-dirty-secret-behind-many-agile-transformations"
  },
  {
    "FrontMatter": {
      "title": "I’ll never understand teams that manage bugs instead of fixing them",
      "short_title": "Fix Bugs Immediately, Don’t Manage Backlogs",
      "description": "Highlights the importance of promptly fixing software bugs instead of managing backlogs, arguing that unresolved defects harm product quality and team effectiveness.",
      "tldr": "Teams should focus on fixing bugs as soon as they are found instead of managing or prioritising them in backlogs or meetings. Delaying bug fixes leads to bigger problems and undermines the goal of delivering working software. Development managers should ensure their teams address defects promptly rather than letting them accumulate.",
      "date": "2025-05-01T15:30:38+01:00",
      "lastmod": "2025-05-01T15:30:38+01:00",
      "weight": 255.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "RwH_ozVN5om",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "i-ll-never-understand-teams-that-manage-bugs-instead-of-fixing-them",
      "aliases": [
        "/resources/RwH_ozVN5om"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Software Development",
        "Pragmatic Thinking",
        "Product Delivery",
        "Technical Mastery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7323730580020289536",
          "post_id": "7323730580020289536",
          "post_date": "2025-05-01T14:30:38Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:06Z",
        "short_title": "2025-07-07T16:44:32Z",
        "tldr": "2025-08-07T12:32:58Z"
      }
    },
    "BodyContent": "I’ll never understand teams that “manage” bugs instead of just fixing them.\n\nA bug backlog? Why. Just fix them.\n\nA meeting to discuss bug prioritisation? Stop it. Just fix them.\n\nA ticket that’s been sitting in “QA” for weeks? Absurd. Just fix it.\n\nHere’s the deal: Known defects are holes in the ship. You don’t argue about whether to patch them while the water pours in. If a bug is found, it gets fixed. If it’s too big, escalate it and prioritise the fix. The longer you wait, the worse it gets.\n\nAgile is about working software. Not half-working software with a spreadsheet full of problems you hope to deal with someday.\n\nHow does your team handle bugs? Are you fixing them or just shuffling them around?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-01-i-ll-never-understand-teams-that-manage-bugs-instead-of-fixing-them\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-05-01-i-ll-never-understand-teams-that-manage-bugs-instead-of-fixing-them",
    "ReferencePath": "resources/signals/2025-05-01-i-ll-never-understand-teams-that-manage-bugs-instead-of-fixing-them"
  },
  {
    "FrontMatter": {
      "title": "let-us do the maths",
      "short_title": "The Cost of Slow Product Release Cycles",
      "description": "Explains how slow product release cycles delay feature delivery, risk losing relevance, and create competitive disadvantages, highlighting the benefits of faster iterations.",
      "tldr": "Slow release cycles mean customer needs go unmet and competitors gain an edge. Microsoft’s shift from a two-year delivery cycle to three-week sprints allowed them to deliver features in days, improving customer satisfaction and competitiveness. Accelerate your delivery process to stay relevant and meet customer demands faster.",
      "date": "2025-04-30T15:30:52+01:00",
      "lastmod": "2025-04-30T15:30:52+01:00",
      "weight": 265.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "XYMN44lJp1n",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "let-us-do-the-maths",
      "aliases": [
        "/resources/XYMN44lJp1n"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "Engineering Excellence",
        "DevOps"
      ],
      "tags": [
        "Time to Market",
        "Deployment Frequency",
        "Software Development",
        "Product Delivery",
        "Business Agility",
        "Market Adaptability",
        "Frequent Releases",
        "Value Delivery",
        "Agile Planning",
        "Agile Product Management",
        "Team Performance",
        "Organisational Agility",
        "Release Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7323368250635976704",
          "post_id": "7323368250635976704",
          "post_date": "2025-04-30T14:30:52Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:07Z",
        "short_title": "2025-07-07T16:44:35Z",
        "tldr": "2025-08-07T12:33:03Z"
      }
    },
    "BodyContent": "Let’s do the maths.\n\nIf your product team delivers every two years, that means feature requests take four years to hit production.\n\nHow many customer needs stay relevant over four years? How many competitors ship improvements while you’re still planning your release?\n\nThis was Microsoft’s reality with TFS. They had a 2-year cycle, a growing feature backlog, and increasing customer dissatisfaction. The cost of slow delivery wasn’t just an engineering problem—it was a competitive disadvantage.\n\nWhen they switched to 3-week Sprints and decoupled release from deployment, everything changed. Features went live in days, not years.\n\nSpeed matters. Your competitors aren’t waiting—why are you?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-30-let-us-do-the-maths\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-30-let-us-do-the-maths",
    "ReferencePath": "resources/signals/2025-04-30-let-us-do-the-maths"
  },
  {
    "FrontMatter": {
      "title": "Too much refinement wastes time",
      "short_title": "Too Much Backlog Refinement Wastes Time",
      "description": "Balancing backlog refinement prevents wasted effort and chaos. Aim for just enough detail so developers can plan sprints confidently without over-preparing or guessing.",
      "tldr": "Too much backlog refinement wastes time, while too little causes confusion and delays. Aim for just enough detail so developers can start work confidently without needing constant clarification. If Sprint Planning is about making commitments rather than figuring things out, your refinement process is working well.",
      "date": "2025-04-29T15:30:43+01:00",
      "lastmod": "2025-04-29T15:30:43+01:00",
      "weight": 345.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "2GV6voRFhjH",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "too-much-refinement-wastes-time",
      "aliases": [
        "/resources/2GV6voRFhjH"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Method"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Product Backlog",
        "Software Development",
        "Agile Planning",
        "Backlog Refinement",
        "Operational Practices",
        "Pragmatic Thinking",
        "Definition of Ready",
        "Agile Product Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7323005822538600449",
          "post_id": "7323005822538600449",
          "post_date": "2025-04-29T14:30:43Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:09Z",
        "short_title": "2025-07-07T16:44:36Z",
        "tldr": "2025-08-07T12:33:05Z"
      }
    },
    "BodyContent": "Too much refinement wastes time. Too little refinement leads to chaos. The key is knowing where to draw the line.\n\nScrum teams often fall into one of two traps:\n\n- Refining everything too soon – spending hours detailing work that might never happen.\n- Not refining enough – arriving at Sprint Planning with backlog items that are vague, oversized, and full of unknowns.\n\nThe goal isn’t perfection—it’s readiness. Your backlog should be refined just enough that developers can confidently pull work into a Sprint without endless clarification.\n\nIt’s about finding the Goldilocks zone: Not too much, not too little. Just enough.\n\nHow do you know if you’ve found it? Your Sprint Planning should be focused on commitment, not discovery.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-29-too-much-refinement-wastes-time\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-29-too-much-refinement-wastes-time",
    "ReferencePath": "resources/signals/2025-04-29-too-much-refinement-wastes-time"
  },
  {
    "FrontMatter": {
      "title": "Not all surprises in product development are true unknowns",
      "short_title": "Not All Surprises Are True Unknowns",
      "description": "Many product development surprises stem from poor backlog management, not true unknowns. Regular refinement and reflection help teams anticipate and reduce unexpected issues.",
      "tldr": "Many surprises in product development are due to poor backlog management rather than true unknowns. Regularly reviewing and categorizing past surprises helps teams improve their backlog and anticipate issues. Development managers should ensure their teams use backlog refinement to build foresight and reduce avoidable disruptions.",
      "date": "2025-04-28T15:30:55+01:00",
      "lastmod": "2025-04-28T15:30:55+01:00",
      "weight": 380.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "3R0CYmaHd63",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "not-all-surprises-in-product-development-are-true-unknowns",
      "aliases": [
        "/resources/3R0CYmaHd63"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Product Backlog",
        "Backlog Refinement",
        "Software Development",
        "Operational Practices",
        "Team Performance",
        "Agile Planning",
        "Pragmatic Thinking",
        "Agile Product Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7322643488703995904",
          "post_id": "7322643488703995904",
          "post_date": "2025-04-28T14:30:55Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:10Z",
        "short_title": "2025-07-07T16:44:37Z",
        "tldr": "2025-08-07T12:33:06Z"
      }
    },
    "BodyContent": "Not all surprises in product development are true unknowns. Many are just the result of bad backlog management.\n\nTeams often get blindsided by last-minute changes, unexpected dependencies, or hidden complexities. But here’s the reality: Most of these “surprises” could have been anticipated with better refinement.\n\n- How often do you reflect on the surprises from previous Sprints?\n- Do you categorise them into genuine unknowns vs. things you should have seen coming?\n- Are you adjusting your approach based on these learnings?\n\nRefinement isn’t just about breaking down work—it’s about building foresight. If your team is constantly caught off guard, your backlog isn’t doing its job.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-28-not-all-surprises-in-product-development-are-true-unknowns\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-28-not-all-surprises-in-product-development-are-true-unknowns",
    "ReferencePath": "resources/signals/2025-04-28-not-all-surprises-in-product-development-are-true-unknowns"
  },
  {
    "FrontMatter": {
      "title": "Innovation graveyards: Where great ideas die in slow organisations",
      "short_title": "Innovation Graveyards in Slow Organisations",
      "description": "Explores how slow organisational processes, risk aversion, and excessive alignment cause promising ideas to stall, leading to lost innovation and unrealised potential.",
      "tldr": "Slow organisations kill promising ideas by demanding certainty, avoiding risk, and requiring full alignment before testing anything. Successful companies move quickly, experiment, and improve as they go, understanding that waiting for perfection leads to missed opportunities. To avoid wasting potential, encourage faster testing and learning from new ideas.",
      "date": "2025-04-27T15:30:30+01:00",
      "lastmod": "2025-04-27T15:30:30+01:00",
      "weight": 750.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "S-OSZ8uEFdf",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "innovation-graveyards-where-great-ideas-die-in-slow-organisations",
      "aliases": [
        "/resources/S-OSZ8uEFdf"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Entrepreneurship",
        "Unrealised Value",
        "Miscellaneous",
        "Business Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7322280996026920960",
          "post_id": "7322280996026920960",
          "post_date": "2025-04-27T14:30:30Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:11Z",
        "short_title": "2025-07-07T16:44:38Z",
        "tldr": "2025-08-07T12:33:10Z"
      }
    },
    "BodyContent": "Inside every slow-moving organisation is an innovation graveyard—a place where great ideas die before they ever see daylight.\n\nHow?\n\n- Leaders demand \"certainty\" before taking a step.\n- Risk is managed by avoiding it, not navigating it.\n- New ideas must be \"aligned\" before they can be tested.\n\nMeanwhile, the companies actually winning today? They launch. They learn. They iterate. They don’t wait until an idea is bulletproof because they know perfection is a lie in fast-moving markets.\n\nThe worst waste in a business isn’t money. It’s unrealised potential. How many great ideas has your organisation buried?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-27-innovation-graveyards-where-great-ideas-die-in-slow-organisations\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-27-innovation-graveyards-where-great-ideas-die-in-slow-organisations",
    "ReferencePath": "resources/signals/2025-04-27-innovation-graveyards-where-great-ideas-die-in-slow-organisations"
  },
  {
    "FrontMatter": {
      "title": "No successful company thrives by copying others’ ways of working",
      "short_title": "Successful Companies Create Unique Ways of Working",
      "description": "Successful companies thrive by creating unique ways of working, not by copying frameworks. Tailor your approach to fit your organisation’s culture, needs, and goals.",
      "tldr": "Successful companies do not achieve success by copying others’ processes; instead, they create ways of working tailored to their unique challenges, culture, and customers. Relying on packaged frameworks like SAFe or the Spotify Model can hinder genuine growth and adaptation. Development managers should focus on designing and evolving their own approaches to scaling rather than outsourcing this critical work to external models.",
      "date": "2025-04-26T15:30:29+01:00",
      "lastmod": "2025-04-26T15:30:29+01:00",
      "weight": 540.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "GcanwqIp5ok",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "no-successful-company-thrives-by-copying-others-ways-of-working",
      "aliases": [
        "/resources/GcanwqIp5ok"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Strategy"
      ],
      "categories": [
        "Leadership"
      ],
      "tags": [
        "Agile Philosophy",
        "Agile Strategy",
        "Organisational Agility",
        "Agnostic Agile",
        "Organisational Change"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7321918600317976577",
          "post_id": "7321918600317976577",
          "post_date": "2025-04-26T14:30:29Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:13Z",
        "short_title": "2025-07-07T16:44:39Z",
        "tldr": "2025-08-07T12:33:12Z"
      }
    },
    "BodyContent": "No successful company got where they are by copy-pasting someone else’s way of working.\n\nYet, so many businesses fall into the trap of adopting SAFe, the Spotify Model, or some other packaged framework, thinking it will magically solve their scaling challenges.\n\nHere’s the reality: Your company is unique. Your challenges are unique. Your approach to scaling needs to be unique.\n\nEvery successful organisation designed its own way of working, tailored to its market, culture, and customers. That’s what made them successful in the first place.\n\nSo why abandon that approach now?\n\nScaling isn’t about applying a framework. It’s about learning, adapting, and evolving—on your terms.\n\nIs your organisation designing its own future, or outsourcing it to a framework?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-26-no-successful-company-thrives-by-copying-others-ways-of-working\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-26-no-successful-company-thrives-by-copying-others-ways-of-working",
    "ReferencePath": "resources/signals/2025-04-26-no-successful-company-thrives-by-copying-others-ways-of-working"
  },
  {
    "FrontMatter": {
      "title": "Companies often say \"we-are going Agile!\" as if declaring it makes it so",
      "short_title": "True Agility vs. Superficial Agile Adoption",
      "description": "Many companies mistake adopting Agile frameworks for true agility, but real success comes from customising ways of working to respond quickly to market changes.",
      "tldr": "Simply declaring an Agile transformation does not make a company truly agile; real agility is about quickly responding to market changes, not just adopting frameworks like SAFe or Scrum@Scale. Successful organisations tailor their ways of working to their unique needs rather than copying others. Development managers should focus on building agility that fits their own business instead of relying on off-the-shelf solutions.",
      "date": "2025-04-25T15:30:40+01:00",
      "lastmod": "2025-04-25T15:30:40+01:00",
      "weight": 500.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "otmDMgDEp-i",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "companies-often-say-we-are-going-agile-as-if-declaring-it-makes-it-so",
      "aliases": [
        "/resources/otmDMgDEp-i"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Ethos"
      ],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Agile Philosophy",
        "Market Adaptability",
        "Enterprise Agility",
        "Pragmatic Thinking",
        "Business Agility",
        "Organisational Agility",
        "Agile Values and Principles",
        "Agile Transformation",
        "Change Management",
        "Agile Strategy",
        "Miscellaneous",
        "Social Technologies",
        "Agile Product Management",
        "Agnostic Agile",
        "Large Scale Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7321556257234980864",
          "post_id": "7321556257234980864",
          "post_date": "2025-04-25T14:30:40Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:14Z",
        "short_title": "2025-07-07T16:44:40Z",
        "tldr": "2025-08-07T12:33:13Z"
      }
    },
    "BodyContent": "I've lost count of the number of times I've heard companies say, \"We're going Agile!\"—as if declaring it makes it so.\n\nThe reality? Most of these transformations are superficial at best. Agile isn’t about installing SAFe, Scrum@Scale, or any other framework. Those are just tools. The real game is market responsiveness—seizing opportunities faster than your competitors and adapting to change before it catches you off guard.\n\nMost large organisations became successful by building their own ways of working—tailored to their markets, customers, and business realities. Why, then, do so many think copying another company's playbook will work for them?\n\nAgility isn’t about ticking boxes. It’s about survival. The companies that understand this are already outpacing the ones still debating which framework to buy.\n\nAre you custom-building agility into your organisation, or are you just running someone else’s playbook?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-25-companies-often-say-we-are-going-agile-as-if-declaring-it-makes-it-so\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-25-companies-often-say-we-are-going-agile-as-if-declaring-it-makes-it-so",
    "ReferencePath": "resources/signals/2025-04-25-companies-often-say-we-are-going-agile-as-if-declaring-it-makes-it-so"
  },
  {
    "FrontMatter": {
      "title": "Understand the true risk of technical debt in your business",
      "short_title": "The True Risk of Technical Debt in Business",
      "description": "Technical debt poses significant business risks, reducing agility, slowing innovation, and causing lost opportunities. Addressing it is crucial for long-term organisational success.",
      "tldr": "Technical debt is pure risk with no upside, leading to lost time, reduced agility, and missed opportunities. Microsoft’s experience shows that unchecked technical debt can severely slow delivery, but addressing it directly restores speed and flexibility. Development managers should treat technical debt as a critical business issue and take proactive steps to reduce it.",
      "date": "2025-04-24T15:30:48+01:00",
      "lastmod": "2025-04-24T15:30:48+01:00",
      "weight": 240.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "SLaqpu5BHH8",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "understand-the-true-risk-of-technical-debt-in-your-business",
      "aliases": [
        "/resources/SLaqpu5BHH8"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Technical Debt"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7321193906157637635",
          "post_id": "7321193906157637635",
          "post_date": "2025-04-24T14:30:48Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:15Z",
        "short_title": "2025-07-07T16:44:41Z",
        "tldr": "2025-08-07T12:33:15Z"
      }
    },
    "BodyContent": "If your business truly understood the risk of technical debt, you wouldn’t accept any of it.\n\nThere’s a myth that \"some level of technical debt is manageable.\" But let’s be clear—technical debt is 100% risk. It’s an unhedged fund with no asset securing it, no insurance to mitigate it. The cost isn’t just in future refactoring; it’s in lost time, lost agility, and lost opportunities.\n\nAt Microsoft, TFS was delivered on a two-year cycle. By 2012, with 600 engineers, they were shipping just 24 features a year. Technical debt had turned a powerhouse into a bottleneck. It wasn’t until they embraced 3-week Sprints and tackled the underlying debt that they regained agility.\n\nThis isn't just an engineering problem. It’s a business problem. If you think you can hide technical debt in a cost centre forever, think again.\n\nHow does your organisation treat technical debt? As a calculated risk or an unrecognised liability?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-24-understand-the-true-risk-of-technical-debt-in-your-business\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-24-understand-the-true-risk-of-technical-debt-in-your-business",
    "ReferencePath": "resources/signals/2025-04-24-understand-the-true-risk-of-technical-debt-in-your-business"
  },
  {
    "FrontMatter": {
      "title": "Microsoft shift from 2-year cycles to 3-week Sprints caused team anxiety",
      "short_title": "Microsoft’s Move to 3-Week Sprints and Team Anxiety",
      "description": "Microsoft’s switch to 3-week Sprints increased team anxiety due to greater transparency, exposing inefficiencies but enabling faster, more frequent software delivery.",
      "tldr": "When Microsoft switched from two-year release cycles to three-week Sprints, teams initially felt anxious because increased transparency exposed inefficiencies and technical debt. However, teams that embraced this openness improved dramatically, moving from delivering 24 features a year to shipping multiple times daily. Development managers should consider whether their teams are ready to use transparency as a tool for continuous improvement.",
      "date": "2025-04-23T15:30:47+01:00",
      "lastmod": "2025-04-23T15:30:47+01:00",
      "weight": 255.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "AW5GP1Vnnp5",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "microsoft-shift-from-2-year-cycles-to-3-week-sprints-caused-team-anxiety",
      "aliases": [
        "/resources/AW5GP1Vnnp5"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Transparency",
        "Software Development",
        "Social Technologies",
        "Pragmatic Thinking",
        "Time to Market",
        "Product Delivery",
        "Operational Practices",
        "Empirical Process Control",
        "Professional Scrum"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7320831515033038848",
          "post_id": "7320831515033038848",
          "post_date": "2025-04-23T14:30:47Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:16Z",
        "short_title": "2025-07-07T16:44:42Z",
        "tldr": "2025-08-07T12:33:18Z"
      }
    },
    "BodyContent": "When Microsoft moved from a two-year delivery cycle to 3-week Sprints, something unexpected happened—teams became terrified.\n\nNot of the work itself, but of the transparency.\n\nSuddenly, it was impossible to hide inefficiencies. Bad code was exposed. Delivery bottlenecks became visible. And that fear? It was real.\n\nBut here’s the thing—transparency isn’t the enemy; it’s the only way to improve. The teams that embraced the new way of working went from delivering 24 features per year to shipping multiple times per day.\n\nFear of failure keeps teams stuck in technical debt. The best teams face it head-on.\n\nIs your organisation ready to embrace transparency?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-23-microsoft-shift-from-2-year-cycles-to-3-week-sprints-caused-team-anxiety\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-23-microsoft-shift-from-2-year-cycles-to-3-week-sprints-caused-team-anxiety",
    "ReferencePath": "resources/signals/2025-04-23-microsoft-shift-from-2-year-cycles-to-3-week-sprints-caused-team-anxiety"
  },
  {
    "FrontMatter": {
      "title": "Every delay in decision-making taxes your organisation future",
      "short_title": "Decision-Making Delays Hurt Organisations",
      "description": "Delays in decision-making hinder organisational growth, reduce competitiveness, and allow opportunities to slip away due to bureaucracy and slow approval processes.",
      "tldr": "Delays in decision-making hurt your organisation by slowing progress and letting competitors get ahead. Most delays come from internal bureaucracy and risk-averse processes, which stifle innovation and responsiveness. To stay competitive, streamline approvals and empower teams to act quickly.",
      "date": "2025-04-22T15:30:43+01:00",
      "lastmod": "2025-04-22T15:30:43+01:00",
      "weight": 725.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "CkFbsX0M3i-",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "every-delay-in-decision-making-taxes-your-organisation-future",
      "aliases": [
        "/resources/CkFbsX0M3i-"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tenet"
      ],
      "categories": [
        "Leadership"
      ],
      "tags": [
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7320469109115129856",
          "post_id": "7320469109115129856",
          "post_date": "2025-04-22T14:30:43Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:17Z",
        "short_title": "2025-07-07T16:44:43Z",
        "tldr": "2025-08-07T12:33:19Z"
      }
    },
    "BodyContent": "Every delay in decision-making is a tax on your organisation’s future.\n\nWhile leaders sit in endless meetings, while approvals stack up, while risk-averse policies slow execution, your competitors are shipping, learning, and adapting.\n\nMarkets today don’t reward caution. They punish hesitation. The longer it takes to act, the more opportunities slip through your fingers. And the worst part? Most of the delay is self-inflicted.\n\nBureaucracy kills responsiveness. Layered hierarchies stifle innovation. If your company still needs five signatures to greenlight an experiment, you’re already behind.\n\nSpeed isn’t reckless. It’s survival. How much time is your organisation wasting?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-22-every-delay-in-decision-making-taxes-your-organisation-future\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-22-every-delay-in-decision-making-taxes-your-organisation-future",
    "ReferencePath": "resources/signals/2025-04-22-every-delay-in-decision-making-taxes-your-organisation-future"
  },
  {
    "FrontMatter": {
      "title": "Would your CFO approve misrepresenting corporate assets?",
      "short_title": "Misrepresenting Assets by Ignoring Tech Debt",
      "description": "Ignoring technical debt misrepresents software asset value, risking financial loss and operational issues. Properly account for technical debt to protect business assets.",
      "tldr": "Ignoring technical debt is like misrepresenting the value of your software assets, which can lead to future losses and operational risks. Most businesses fail to track this risk, even though technical debt reduces asset value and increases costs. Development managers should ensure technical debt is monitored and addressed to protect the true value of software investments.",
      "date": "2025-04-21T15:30:34+01:00",
      "lastmod": "2025-04-21T15:30:34+01:00",
      "weight": 340.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "u-ACEx3Q01p",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "would-your-cfo-approve-misrepresenting-corporate-assets",
      "aliases": [
        "/resources/u-ACEx3Q01p"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Technical Debt"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7320106683114934273",
          "post_id": "7320106683114934273",
          "post_date": "2025-04-21T14:30:34Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:19Z",
        "short_title": "2025-07-07T16:44:44Z",
        "tldr": "2025-08-07T12:33:21Z"
      }
    },
    "BodyContent": "Would your CFO sign off on misrepresenting corporate assets? Of course not. But that’s exactly what happens when technical debt is ignored.\n\nProduct delivery is capital expenditure. The software your business builds is an asset—just like buildings and equipment. If that asset is full of technical debt, its value is compromised. And yet, most businesses don’t track this risk.\n\nThere’s a word for misrepresenting assets on a balance sheet: fraud.\n\nTechnical debt is a risk, not a choice. If you’re building without addressing it, you’re setting up future losses—whether through slower delivery, higher maintenance costs, or outright failure to adapt.\n\nIs your organisation treating software as the asset it truly is?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-21-would-your-cfo-approve-misrepresenting-corporate-assets\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-21-would-your-cfo-approve-misrepresenting-corporate-assets",
    "ReferencePath": "resources/signals/2025-04-21-would-your-cfo-approve-misrepresenting-corporate-assets"
  },
  {
    "FrontMatter": {
      "title": "Agile without a usable working product is just expensive theatre",
      "short_title": "Agile Requires a Usable Product Every Sprint",
      "description": "Highlights the importance of delivering a usable product each sprint in Agile, warning against focusing on process over outcomes and emphasising real value over rituals.",
      "tldr": "Agile only delivers value if each sprint results in a usable working product; focusing on rituals, documentation, or velocity without real output wastes time and resources. The key measure of success is having something shippable at the end of every sprint, which enables feedback and reduces risk. Development managers should ensure their teams are consistently delivering usable products rather than just going through the motions.",
      "date": "2025-04-20T15:30:27+01:00",
      "lastmod": "2025-04-20T15:30:27+01:00",
      "weight": 400.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "CBIAsEX7a86",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "agile-without-a-usable-working-product-is-just-expensive-theatre",
      "aliases": [
        "/resources/CBIAsEX7a86"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Working Software",
        "Pragmatic Thinking",
        "Value Delivery",
        "Increment",
        "Agile Product Management",
        "Operational Practices",
        "Product Delivery",
        "Agile Values and Principles",
        "Agile Philosophy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7319744264169533440",
          "post_id": "7319744264169533440",
          "post_date": "2025-04-20T14:30:27Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:20Z",
        "short_title": "2025-07-07T16:44:46Z",
        "tldr": "2025-08-07T12:33:24Z"
      }
    },
    "BodyContent": "Agile without a usable working product is just expensive theatre.\n\nYet, so many teams get lost in rituals, Jira tickets, and endless documentation, completely missing the point. Agile is about delivering value continuously—not accumulating unfinished work, endless “technical discussions,” or chasing vanity metrics.\n\nA sprint that doesn’t produce a potentially shippable product is wasted time. A backlog filled with items that never see the light of day is a black hole. And don’t get me started on teams that celebrate velocity without considering whether they’re building anything worthwhile.\n\nThe real metric? A usable working product at the end of every sprint. That’s how you mitigate risk, get feedback, and stay relevant in the market. Everything else is noise.\n\nIs your team delivering something usable every sprint, or just running in circles?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-20-agile-without-a-usable-working-product-is-just-expensive-theatre\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-20-agile-without-a-usable-working-product-is-just-expensive-theatre",
    "ReferencePath": "resources/signals/2025-04-20-agile-without-a-usable-working-product-is-just-expensive-theatre"
  },
  {
    "FrontMatter": {
      "title": "There no such thing as \"good\" technical debt",
      "short_title": "There’s No Such Thing as Good Technical Debt",
      "description": "Technical debt always harms productivity and system stability. Ignoring it leads to inefficiency and risk, making it essential to address rather than accept or normalise.",
      "tldr": "Technical debt is always harmful and should not be considered acceptable; it slows onboarding, increases errors, and creates inefficiency. It accumulates quickly and can suddenly halt delivery, as seen in Microsoft's experience before they overhauled their processes and addressed their debt. Development managers should prioritize identifying and reducing technical debt now rather than accepting it as normal.",
      "date": "2025-04-19T15:30:34+01:00",
      "lastmod": "2025-04-19T15:30:34+01:00",
      "weight": 130.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.8,
        "changefreq": "weekly"
      },
      "ResourceId": "lLNjkL_zGQa",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "there-no-such-thing-as-good-technical-debt",
      "aliases": [
        "/resources/lLNjkL_zGQa"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence",
        "Technical Leadership"
      ],
      "tags": [
        "Technical Debt",
        "Software Development",
        "Technical Mastery",
        "Engineering Practices"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7319381907710873600",
          "post_id": "7319381907710873600",
          "post_date": "2025-04-19T14:30:34Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:21Z",
        "short_title": "2025-07-07T16:44:47Z",
        "tldr": "2025-08-07T12:33:26Z"
      }
    },
    "BodyContent": "Let’s put this to rest: there’s no such thing as \"good\" technical debt.\n\nIf new engineers take weeks to become productive, your system is unreadable. If every change introduces faults, your architecture is fragile. If you’re manually handling tasks that should be automated, you’re building inefficiency into your process.\n\nAnd here’s the kicker—technical debt doesn’t accumulate linearly. It builds up silently, then one day, it collapses your ability to deliver.\n\nMicrosoft learned this the hard way with TFS. They were shipping 24 features per year across a team of 600 engineers. The solution? A complete overhaul in how they worked. They moved to 3-week Sprints, embraced transparency, and started paying back their technical debt.\n\nStop normalising dysfunction. There’s no \"acceptable level\" of technical debt—only risk you haven’t accounted for yet.\n\nWhat’s stopping your team from tackling technical debt head-on?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-19-there-no-such-thing-as-good-technical-debt\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-19-there-no-such-thing-as-good-technical-debt",
    "ReferencePath": "resources/signals/2025-04-19-there-no-such-thing-as-good-technical-debt"
  },
  {
    "FrontMatter": {
      "title": "You don’t own your market",
      "short_title": "You Don’t Own Your Market",
      "description": "Explains why businesses must prioritise customer needs and agility to stay relevant, avoid missed opportunities, and remain competitive in a rapidly changing market.",
      "tldr": "Your customers control the market, not you, so failing to listen or respond quickly means losing them to competitors. Many organizations prioritize internal views over real customer needs, leading to late product launches and missed opportunities. To stay relevant, focus on genuine customer feedback and ensure your teams are closely connected to those you serve.",
      "date": "2025-04-18T15:30:32+01:00",
      "lastmod": "2025-04-18T15:30:32+01:00",
      "weight": 725.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "X-J3sV7w7mU",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "you-don-t-own-your-market",
      "aliases": [
        "/resources/X-J3sV7w7mU"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Miscellaneous",
        "Business Agility",
        "Value Delivery",
        "Agile Philosophy",
        "Product Strategy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7319019512433958912",
          "post_id": "7319019512433958912",
          "post_date": "2025-04-18T14:30:32Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:22Z",
        "short_title": "2025-07-07T16:44:48Z",
        "tldr": "2025-08-07T12:33:28Z"
      }
    },
    "BodyContent": "You don’t own your market. Your customers do. Ignore them, move too slowly, and they’ll move on.\n\nBut most organisations don’t listen. They get stuck in their own echo chambers, convinced they know best. Meanwhile:\n\n- Products launch too late to be relevant.\n- Internal priorities outweigh real customer needs.\n- Decision-makers are too far from the people they serve.\n\nEvery delay, every missed signal, every slow response is an open door for your competition.\n\nAgility isn’t about speed for speed’s sake. It’s about staying relevant. Are you still in sync with your customers, or just assuming they’ll wait?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-18-you-don-t-own-your-market\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-18-you-don-t-own-your-market",
    "ReferencePath": "resources/signals/2025-04-18-you-don-t-own-your-market"
  },
  {
    "FrontMatter": {
      "title": "Most companies still get Product Ownership wrong",
      "short_title": "Product Ownership Misconceptions in Companies",
      "description": "Many organisations misunderstand Product Ownership, treating it as simple backlog management instead of a strategic, accountable role essential for product success and team alignment.",
      "tldr": "Many companies misunderstand the Product Owner role, treating it as simple backlog management or assigning it to any business analyst, which leads to weak products and misaligned teams. Effective Product Owners are strategic leaders who own the vision, make tough decisions, and use evidence to guide development. Development managers should ensure they are hiring or empowering true Product Owners with the right skills and authority, not just filling a position.",
      "date": "2025-04-17T15:30:37+01:00",
      "lastmod": "2025-04-17T15:30:37+01:00",
      "weight": 595.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.3,
        "changefreq": "weekly"
      },
      "ResourceId": "n7KbcPbUTTe",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "most-companies-still-get-product-ownership-wrong",
      "aliases": [
        "/resources/n7KbcPbUTTe"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Product Management",
        "Product Development"
      ],
      "tags": [
        "Agile Product Management",
        "Product Owner",
        "Software Development",
        "Pragmatic Thinking",
        "Professional Scrum",
        "Product Strategy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7318657142905851904",
          "post_id": "7318657142905851904",
          "post_date": "2025-04-17T14:30:37Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:23Z",
        "short_title": "2025-07-07T16:44:49Z",
        "tldr": "2025-08-07T12:33:30Z"
      }
    },
    "BodyContent": "Most companies still get Product Ownership wrong. They either treat it as a glorified backlog manager or assume any business analyst can do the job. But a real Product Owner isn’t just an order taker. They are a product strategist, decision-maker, and stakeholder wrangler, responsible for maximising product value.\n\nThe misconception that a Product Owner is a \"requirements gatherer\" leads to weak products and misaligned teams. Instead, the best Product Owners own the vision, drive outcomes, and use evidence to steer development—not just shuffle tickets in a backlog.\n\nA Product Owner isn’t a stepping stone role. It’s an accountability that demands business acumen, leadership, and the courage to make tough calls. If your PO is just managing lists, your product is already in trouble.\n\nHow does your organisation approach Product Ownership? Are you hiring for it, or just hoping the right person emerges?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-17-most-companies-still-get-product-ownership-wrong\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-17-most-companies-still-get-product-ownership-wrong",
    "ReferencePath": "resources/signals/2025-04-17-most-companies-still-get-product-ownership-wrong"
  },
  {
    "FrontMatter": {
      "title": "The market isn’t slowing down for anyone",
      "short_title": "The Market Isn’t Slowing Down for Anyone",
      "description": "Explores why organisational responsiveness and real-time decision-making are crucial for staying competitive, highlighting the risks of outdated frameworks and slow adaptation.",
      "tldr": "Success in today's market depends on how quickly your organization can respond and adapt, not on which framework you use. Relying on old control methods with superficial agile practices slows you down and puts you at risk of falling behind. To stay competitive, focus on building a truly responsive system that enables fast, smart decisions and real adaptability.",
      "date": "2025-04-16T15:30:49+01:00",
      "lastmod": "2025-04-16T15:30:49+01:00",
      "weight": 635.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.3,
        "changefreq": "weekly"
      },
      "ResourceId": "Szz-d1q7CG7",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-market-isn-t-slowing-down-for-anyone",
      "aliases": [
        "/resources/Szz-d1q7CG7"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Business Agility",
        "Agile Philosophy",
        "Market Adaptability",
        "Pragmatic Thinking",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7318294805258657793",
          "post_id": "7318294805258657793",
          "post_date": "2025-04-16T14:30:49Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:25Z",
        "short_title": "2025-07-07T16:44:50Z",
        "tldr": "2025-08-07T12:33:34Z"
      }
    },
    "BodyContent": "The market isn’t slowing down for anyone. While some organisations are still stuck debating frameworks, others are seizing opportunities and adapting at speed. The difference? Responsiveness.\n\nIt’s not about being \"agile\" or rolling out SAFe or some other packaged framework. It’s about moving faster than your competitors, making smarter decisions in real-time, and creating a system of work that allows you to pivot when the unexpected happens.\n\nSome organisations think they can blend old-school control with new-world agility. That’s a delusion. If you’re still operating like a waterfall shop with \"agile teams\" patched on top, you're not just slowing down—you're actively losing ground.\n\nSurvival isn’t mandatory. The question is: Are you keeping pace with reality, or are you betting your future on outdated playbooks?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-16-the-market-isn-t-slowing-down-for-anyone\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-16-the-market-isn-t-slowing-down-for-anyone",
    "ReferencePath": "resources/signals/2025-04-16-the-market-isn-t-slowing-down-for-anyone"
  },
  {
    "FrontMatter": {
      "title": "Hiring a Product Owner? Avoid copying job specs from the internet",
      "short_title": "Hiring a Product Owner: Key Skills & Pitfalls",
      "description": "Learn what makes an effective Product Owner, why generic job specs fall short, and which key responsibilities and skills are essential for true product leadership and success.",
      "tldr": "When hiring a Product Owner, do not rely on generic job descriptions; a true Product Owner drives product success by setting vision, prioritizing value, collaborating closely with teams, making data-driven decisions, and maintaining accountability. Delegation is necessary, but the PO must remain responsible for outcomes, not just manage tasks. Review your job specs to ensure they focus on leadership and product impact, not just administrative duties.",
      "date": "2025-04-15T15:30:50+01:00",
      "lastmod": "2025-04-15T15:30:50+01:00",
      "weight": 725.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "-p1bBjBS0bA",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "hiring-a-product-owner-avoid-copying-job-specs-from-the-internet",
      "aliases": [
        "/resources/-p1bBjBS0bA"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Product Development",
        "Product Management",
        "Leadership"
      ],
      "tags": [
        "Product Owner",
        "Agile Product Management",
        "Pragmatic Thinking",
        "Professional Scrum",
        "Competence"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7317932421058883584",
          "post_id": "7317932421058883584",
          "post_date": "2025-04-15T14:30:50Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:26Z",
        "short_title": "2025-07-07T16:44:51Z",
        "tldr": "2025-08-07T12:33:39Z"
      }
    },
    "BodyContent": "Hiring a Product Owner? Don’t just copy-paste a job spec from the internet. A real PO isn’t just a requirements collector or project manager—they own product success.\n\nHere’s what a strong Product Owner actually does:\n\n- Defines the vision and ensures the team is working on the highest-value items.\n- Collaborates daily with Developers and stakeholders to refine direction.\n- Uses data to make decisions instead of relying on gut instinct or seniority.\n- Says no when necessary, even when it’s unpopular.\n- Orders the backlog strategically, not reactively.\n\nAnd here’s the hard truth: one person alone cannot do all of this at scale. POs delegate, but they remain accountable. If a PO is just taking orders, someone else is actually running the product—and that’s a problem.\n\nIf your PO is buried in admin work instead of driving outcomes, you don’t have a real PO. You have a backlog secretary.\n\nWhat’s the biggest gap in most Product Owner job descriptions you’ve seen?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-15-hiring-a-product-owner-avoid-copying-job-specs-from-the-internet\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-15-hiring-a-product-owner-avoid-copying-job-specs-from-the-internet",
    "ReferencePath": "resources/signals/2025-04-15-hiring-a-product-owner-avoid-copying-job-specs-from-the-internet"
  },
  {
    "FrontMatter": {
      "title": "Building the wrong thing is worse than fixing a bug",
      "short_title": "Building the Wrong Thing vs. Fixing Bugs",
      "description": "Most features don’t deliver value. Short feedback loops and real user input help teams avoid wasted effort by ensuring they build what users actually need.",
      "tldr": "Most features built by software teams do not deliver value, with 65 percent considered waste. Shortening feedback loops through frequent reviews and real user input helps teams focus on what matters and avoid building the wrong things. Act now to get faster, actionable feedback and prevent wasted time and resources.",
      "date": "2025-04-14T15:30:31+01:00",
      "lastmod": "2025-04-14T15:30:31+01:00",
      "weight": 310.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "HvZvnbC68go",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "building-the-wrong-thing-is-worse-than-fixing-a-bug",
      "aliases": [
        "/resources/HvZvnbC68go"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "Product Management"
      ],
      "tags": [
        "Customer Feedback Loops",
        "Market Adaptability",
        "Customer Focus",
        "Value Delivery",
        "Evidence Based Management",
        "Lean Product Development",
        "Lean Principles",
        "Product Validation",
        "Pragmatic Thinking",
        "Software Development",
        "Operational Practices",
        "Agile Philosophy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7317569956584259585",
          "post_id": "7317569956584259585",
          "post_date": "2025-04-14T14:30:31Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:30Z",
        "short_title": "2025-07-07T16:44:52Z",
        "tldr": "2025-08-07T12:33:41Z"
      }
    },
    "BodyContent": "Do you know what’s worse than fixing a bug? Building the wrong thing in the first place.\n\nThe data is clear: Only 35% of features actually deliver value. That means 65% of what teams build is waste—work that never should have been done.\n\nThe solution? Shorter feedback loops.\n\nFrequent reviews, real user feedback, and fast iteration cycles keep teams focused on what actually matters instead of churning out features no one needs. If you’re still waiting until “the end” of a sprint to check if something is right, you’re already too late.\n\nShorten your feedback loops, or prepare to waste time and money on work that never delivers value.\n\nWhat’s stopping your team from getting fast, actionable feedback?\n\nData Source: The Chaos Report / Standish Group\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-14-building-the-wrong-thing-is-worse-than-fixing-a-bug\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-14-building-the-wrong-thing-is-worse-than-fixing-a-bug",
    "ReferencePath": "resources/signals/2025-04-14-building-the-wrong-thing-is-worse-than-fixing-a-bug"
  },
  {
    "FrontMatter": {
      "title": "A great backlog isn’t just a list of tasks",
      "short_title": "A Great Backlog Is More Than Task Lists",
      "description": "Learn how an effective backlog guides product strategy, prioritises value, and supports decision-making, rather than serving as a simple list of tasks or ideas.",
      "tldr": "A backlog should guide strategic decisions and reflect the product vision, not just list tasks. Filling it with unchecked requests leads to loss of focus and unclear priorities. Review your backlog to ensure it highlights what truly matters for delivering value and supports your product strategy.",
      "date": "2025-04-13T15:30:17+01:00",
      "lastmod": "2025-04-13T15:30:17+01:00",
      "weight": 670.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "y8KN3uMGjey",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "a-great-backlog-isn-t-just-a-list-of-tasks",
      "aliases": [
        "/resources/y8KN3uMGjey"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Strategy"
      ],
      "categories": [
        "Product Development",
        "Product Management"
      ],
      "tags": [
        "Product Backlog",
        "Product Strategy",
        "Agile Product Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7317207510346600448",
          "post_id": "7317207510346600448",
          "post_date": "2025-04-13T14:30:17Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:31Z",
        "short_title": "2025-07-07T16:44:54Z",
        "tldr": "2025-08-07T12:33:45Z"
      }
    },
    "BodyContent": "A great backlog isn’t just a list of tasks. It’s a strategic tool for delivering value.\n\nToo many teams treat the backlog as a never-ending to-do list, filling it with requests, features, and ideas without considering their impact. The result? A mountain of work that grows endlessly, losing focus and clarity.\n\nA well-crafted backlog reflects:\n\n- The product’s vision\n- The team’s best guess at unrealised value\n- The strategic trade-offs needed to maximise ROI\n\nIf your backlog doesn’t help you make better decisions, it’s just noise. The question isn’t how much you have in your backlog—it’s how much of it actually matters.\n\nWhat does your backlog say about your product strategy?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-13-a-great-backlog-isn-t-just-a-list-of-tasks\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-13-a-great-backlog-isn-t-just-a-list-of-tasks",
    "ReferencePath": "resources/signals/2025-04-13-a-great-backlog-isn-t-just-a-list-of-tasks"
  },
  {
    "FrontMatter": {
      "title": "Most organisations waste their smartest people",
      "short_title": "Most Organisations Waste Smartest People",
      "description": "Many organisations stifle talented employees with bureaucracy and top-down control, leading to disengagement, wasted potential, and high turnover among their smartest people.",
      "tldr": "Many organisations waste their smartest people by creating environments where decision-making is centralized and ideas are slowed by bureaucracy, leaving those closest to the work powerless. This leads to disengagement or turnover among top talent, not due to lack of motivation but because they are unable to act. To retain and energize your best people, give them real authority to drive change.",
      "date": "2025-04-12T15:30:27+01:00",
      "lastmod": "2025-04-12T15:30:27+01:00",
      "weight": 765.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.1,
        "changefreq": "weekly"
      },
      "ResourceId": "hXwfpdteI-Q",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "most-organisations-waste-their-smartest-people",
      "aliases": [
        "/resources/hXwfpdteI-Q"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Miscellaneous",
        "Organisational Culture"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7316845161584418816",
          "post_id": "7316845161584418816",
          "post_date": "2025-04-12T14:30:27Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:32Z",
        "short_title": "2025-07-07T16:44:55Z",
        "tldr": "2025-08-07T12:33:47Z"
      }
    },
    "BodyContent": "Most organisations waste their smartest people. Not because they lack skill—but because their environment makes thinking a liability.\n\n- Decisions are made at the top, leaving those closest to the work powerless.\n- Ideas get stuck in endless loops of sign-offs.\n- Speed is sacrificed for control.\n\nPeople don’t need motivation. They need the ability to act. Yet, in so many companies, talent is squandered in meetings, reports, and waiting for permission that never comes.\n\nThe best employees don’t tolerate this forever. They leave. Or worse—they disengage.\n\nIf your best people aren’t driving change, it’s not because they don’t care. It’s because they’ve learned it doesn’t matter.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-12-most-organisations-waste-their-smartest-people\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-12-most-organisations-waste-their-smartest-people",
    "ReferencePath": "resources/signals/2025-04-12-most-organisations-waste-their-smartest-people"
  },
  {
    "FrontMatter": {
      "title": "99% of all animal species that ever existed are now extinct",
      "short_title": "99% of Animal Species Are Now Extinct",
      "description": "Most animal species have gone extinct due to failure to adapt; similarly, businesses must evolve processes and mindsets to survive in changing markets.",
      "tldr": "Most animal species have gone extinct because they could not adapt, and the same fate can happen to companies that fail to evolve. Relying on past successes or outdated processes puts your business at risk, as the market changes quickly and does not wait. To stay competitive, focus on true adaptability and regularly assess what is slowing your company down.",
      "date": "2025-04-11T15:30:00+01:00",
      "lastmod": "2025-04-11T15:30:00+01:00",
      "weight": 730.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "qMzA_cuW2QF",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "99-of-all-animal-species-that-ever-existed-are-now-extinct",
      "aliases": [
        "/resources/qMzA_cuW2QF"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Agile Philosophy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7316482663165353984",
          "post_id": "7316482663165353984",
          "post_date": "2025-04-11T14:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:34Z",
        "short_title": "2025-07-07T16:44:56Z",
        "tldr": "2025-08-07T12:33:49Z"
      }
    },
    "BodyContent": "99% of all animal species that have ever existed are extinct.\n\nCompanies are no different.\n\nEvery year, businesses collapse because they failed to adapt. Some had a great product but couldn’t evolve their processes. Others had a strong market position but clung to outdated ways of working.\n\nThe reality is harsh: Your past success won’t protect you from future failure.\n\nIf you’re relying on policies and structures that worked five years ago, you’re already behind. The market won’t wait for you to catch up.\n\nAgility isn’t about labels, frameworks, or rituals. It’s about survival.\n\nAnd survival is optional.\n\nWhat’s the biggest obstacle stopping your company from moving faster?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-11-99-of-all-animal-species-that-ever-existed-are-now-extinct\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-11-99-of-all-animal-species-that-ever-existed-are-now-extinct",
    "ReferencePath": "resources/signals/2025-04-11-99-of-all-animal-species-that-ever-existed-are-now-extinct"
  },
  {
    "FrontMatter": {
      "title": "A bloated backlog is not a sign of good product management",
      "short_title": "A Bloated Backlog Signals Poor Management",
      "description": "A cluttered backlog signals poor product management, causing confusion and lost focus. Keep backlogs lean to highlight priorities and drive valuable, actionable work.",
      "tldr": "A backlog packed with every idea signals indecision, not good product management. Overloaded backlogs make it hard to prioritize, confuse stakeholders, and slow teams down. Keep your backlog focused on the most valuable upcoming work and regularly remove items your team cannot realistically address.",
      "date": "2025-04-10T15:30:07+01:00",
      "lastmod": "2025-04-10T15:30:07+01:00",
      "weight": 650.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.3,
        "changefreq": "weekly"
      },
      "ResourceId": "gcu0w2Xq7sm",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "a-bloated-backlog-is-not-a-sign-of-good-product-management",
      "aliases": [
        "/resources/gcu0w2Xq7sm"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Product Backlog",
        "Agile Product Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7316120303766523904",
          "post_id": "7316120303766523904",
          "post_date": "2025-04-10T14:30:07Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:35Z",
        "short_title": "2025-07-07T16:44:57Z",
        "tldr": "2025-08-07T12:33:51Z"
      }
    },
    "BodyContent": "A bloated backlog is not a sign of good product management. It’s a sign of indecision.\n\nIf your backlog reads like an archive of every idea that’s ever been considered, you’re setting your team up for failure. The backlog is not a dumping ground for every possibility—it’s a lean inventory of unrealised value.\n\nA cluttered backlog creates noise. It obscures priorities, confuses stakeholders, and forces teams to wade through irrelevance. The best backlogs? They are sharp, clear, and reflect only the next most valuable work.\n\nIf your backlog has more items than your team could complete in a year, it’s time to clean house.\n\nWhat’s stopping you?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-10-a-bloated-backlog-is-not-a-sign-of-good-product-management\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-10-a-bloated-backlog-is-not-a-sign-of-good-product-management",
    "ReferencePath": "resources/signals/2025-04-10-a-bloated-backlog-is-not-a-sign-of-good-product-management"
  },
  {
    "FrontMatter": {
      "title": "Hybrid Agile often combines the worst of both traditional and Agile methods",
      "short_title": "Hybrid Agile: Pitfalls of Mixing Methods",
      "description": "Mixing Agile with traditional methods often leads to slow, inefficient processes that lack true adaptability, making it harder for organisations to respond to change effectively.",
      "tldr": "Mixing Agile with traditional methods often results in a slow, inefficient process that fails to deliver the benefits of either approach. Simply adding Agile practices to a rigid system does not enable faster adaptation or competitiveness. Development managers should assess whether their processes truly support rapid change rather than just adopting Agile terminology.",
      "date": "2025-04-09T15:30:02+01:00",
      "lastmod": "2025-04-09T15:30:02+01:00",
      "weight": 540.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "mqG4p-beYqb",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "hybrid-agile-often-combines-the-worst-of-both-traditional-and-agile-methods",
      "aliases": [
        "/resources/mqG4p-beYqb"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Hybrid Agile",
        "Agile Values and Principles",
        "Agile Philosophy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7315757896577802240",
          "post_id": "7315757896577802240",
          "post_date": "2025-04-09T14:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:36Z",
        "short_title": "2025-07-07T16:44:58Z",
        "tldr": "2025-08-07T12:33:53Z"
      }
    },
    "BodyContent": "I still hear leaders talk about \"hybrid Agile\" like it’s the best of both worlds. Let’s be real—it’s usually the worst of both.\n\nYou can’t bolt Agile practices onto a rigid, process-heavy system and expect to move faster. That’s like trying to upgrade an old flip phone with a touchscreen—it just doesn’t work. What you get is a Frankenstein process: too slow to be Agile, too chaotic to be controlled.\n\nThe goal isn’t to “be Agile.” It’s to outmaneuver your competitors. If your system isn’t designed for rapid adaptation, you’re already losing.\n\nThe question isn’t whether you should change. It’s whether you’ll change before it’s too late.\n\nAre you genuinely set up to pivot and seize opportunities, or are you clinging to old ways under a new name?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-09-hybrid-agile-often-combines-the-worst-of-both-traditional-and-agile-methods\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-09-hybrid-agile-often-combines-the-worst-of-both-traditional-and-agile-methods",
    "ReferencePath": "resources/signals/2025-04-09-hybrid-agile-often-combines-the-worst-of-both-traditional-and-agile-methods"
  },
  {
    "FrontMatter": {
      "title": "A great Product Owner drives product strategy, not just manages the backlog",
      "short_title": "Product Owners Drive Strategy, Not Just Backlogs",
      "description": "Explains how effective Product Owners shape product strategy using accountability, awareness, acceptance, access, and adaptability, not just backlog management.",
      "tldr": "A great Product Owner shapes product strategy by owning the vision, understanding customers and the market, making tough decisions, aligning stakeholders, and adapting based on evidence. Focusing only on backlog management limits their impact; empowered POs drive real value and influence roadmaps. Ensure your Product Owners have the authority and support to make strategic decisions, not just administrative tasks.",
      "date": "2025-04-08T15:30:02+01:00",
      "lastmod": "2025-04-08T15:30:02+01:00",
      "weight": 695.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "FiPINXQNDQu",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "a-great-product-owner-drives-product-strategy-not-just-manages-the-backlog",
      "aliases": [
        "/resources/FiPINXQNDQu"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Strategy"
      ],
      "categories": [
        "Product Management",
        "Product Development",
        "Leadership"
      ],
      "tags": [
        "Product Owner",
        "Product Strategy",
        "Agile Product Management",
        "Pragmatic Thinking",
        "Agile Strategy",
        "Professional Scrum"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7315395507965620224",
          "post_id": "7315395507965620224",
          "post_date": "2025-04-08T14:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:38Z",
        "short_title": "2025-07-07T16:44:59Z",
        "tldr": "2025-08-07T12:33:55Z"
      }
    },
    "BodyContent": "A great Product Owner doesn’t just manage a backlog—they drive the entire product strategy. If you’re looking for a simple litmus test for what makes a strong PO, Jim Sammons’ Five A’s of Product Ownership is a great framework:\n\n1. Accountability – Owning the product vision and backlog, not just maintaining it.\n2. Awareness – Understanding customers, the market, and business priorities.\n3. Acceptance – Making hard decisions and knowing when to pivot.\n4. Access – Engaging with stakeholders and ensuring alignment.\n5. Adaptability – Constantly inspecting and adapting based on evidence.\n\nToo often, companies focus on tactical backlog refinement instead of strategic product management. The best POs influence at every level—shaping roadmaps, driving experimentation, and ensuring the product delivers real value.\n\nIf your Product Owner isn’t empowered to make meaningful decisions, they aren’t really a Product Owner. They’re just an administrator.\n\nWhich of these \"A’s\" do you think is the hardest for most POs to master?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-08-a-great-product-owner-drives-product-strategy-not-just-manages-the-backlog\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-08-a-great-product-owner-drives-product-strategy-not-just-manages-the-backlog",
    "ReferencePath": "resources/signals/2025-04-08-a-great-product-owner-drives-product-strategy-not-just-manages-the-backlog"
  },
  {
    "FrontMatter": {
      "title": "We don’t have time for automation—but manual testing slows releases and quality",
      "short_title": "Manual Testing vs Automation in Releases",
      "description": "Manual testing limits release speed and quality, while automation enables faster, more reliable software delivery by reducing regressions and tester workload.",
      "tldr": "Relying on manual testing slows releases, overwhelms testers, and lets bugs slip through, making it impossible to keep up with rapid changes. Automation is essential for maintaining both speed and quality in software development. Teams should prioritize moving to automated testing to avoid bottlenecks and improve release reliability.",
      "date": "2025-04-07T15:30:01+01:00",
      "lastmod": "2025-04-07T15:30:01+01:00",
      "weight": 310.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "f6S9lWfTQaQ",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "we-don-t-have-time-for-automation-but-manual-testing-slows-releases-and-quality",
      "aliases": [
        "/resources/f6S9lWfTQaQ"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Software Development",
        "Automated Testing",
        "Test Automation",
        "Technical Mastery",
        "Product Delivery",
        "Team Performance",
        "Operational Practices",
        "Frequent Releases"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7315033113225515008",
          "post_id": "7315033113225515008",
          "post_date": "2025-04-07T14:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:39Z",
        "short_title": "2025-07-07T16:45:00Z",
        "tldr": "2025-08-07T12:33:57Z"
      }
    },
    "BodyContent": "Every time I hear, “We don’t have time for automation,” I know exactly what’s coming next.\n\n- Regressions slowing down releases\n- Testers overwhelmed with manual work\n- Bugs slipping through because “there wasn’t time” to retest everything\n- A release cycle that feels like a game of Russian roulette\n\nManual testing is not scalable. If you’re serious about agility, you need automation. Otherwise, your “fast-moving” team is only as fast as the slowest manual test run.\n\nAutomated tests are the only way to keep up with change while ensuring quality. No more excuses.\n\nWhat’s holding your team back from full automation?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-07-we-don-t-have-time-for-automation-but-manual-testing-slows-releases-and-quality\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-07-we-don-t-have-time-for-automation-but-manual-testing-slows-releases-and-quality",
    "ReferencePath": "resources/signals/2025-04-07-we-don-t-have-time-for-automation-but-manual-testing-slows-releases-and-quality"
  },
  {
    "FrontMatter": {
      "title": "Scrum Teams don’t set the bar for quality—they meet it",
      "short_title": "Scrum Teams Meet Quality with Definition of Done",
      "description": "Scrum Teams uphold, not lower, quality by strictly following and evolving the Definition of Done, ensuring predictable releases and reducing technical debt and risk.",
      "tldr": "Scrum teams are responsible for meeting, not setting, the quality standard defined by the Definition of Done, which should be a strict and evolving benchmark for what is releasable. Treating the DoD as negotiable increases risk and technical debt, undermining control over quality and revenue. Development managers should ensure their teams regularly strengthen the DoD to maintain high standards and reduce long-term risk.",
      "date": "2025-04-06T15:30:00+01:00",
      "lastmod": "2025-04-06T15:30:00+01:00",
      "weight": 130.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.8,
        "changefreq": "weekly"
      },
      "ResourceId": "5lIasyqT9Rm",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-teams-don-t-set-the-bar-for-quality-they-meet-it",
      "aliases": [
        "/resources/5lIasyqT9Rm"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Artifact"
      ],
      "categories": [
        "Scrum",
        "Engineering Excellence",
        "Technical Leadership"
      ],
      "tags": [
        "Definition of Done",
        "Professional Scrum",
        "Software Development",
        "Product Delivery",
        "Continuous Improvement",
        "Agile Frameworks",
        "Pragmatic Thinking",
        "Technical Mastery",
        "Operational Practices"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7314670724701433858",
          "post_id": "7314670724701433858",
          "post_date": "2025-04-06T14:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:40Z",
        "short_title": "2025-07-07T16:45:02Z",
        "tldr": "2025-08-07T12:34:01Z"
      }
    },
    "BodyContent": "Scrum Teams don’t set the bar for quality—they meet it. The Definition of Done (DoD) isn’t a wishlist or a stretch goal. It’s a hard line that determines what is releasable. And if your DoD isn’t improving Sprint over Sprint, you’re accumulating risk and technical debt.\n\nToo many teams treat DoD as negotiable. It’s not. It’s governance. It ensures predictability, manages risk, and protects revenue. A weak or fluctuating DoD means your organisation has no real control over quality.\n\nIf someone suggests lowering the DoD to \"deliver more features,\" ask them to get it in writing from the financial director—because that’s not a technical decision, it’s a financial and risk decision.\n\nYour Definition of Done should never be static, but always evolving to maximise the quality. Anything less is dysfunction.\n\nHow often is your team strengthening its DoD?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-06-scrum-teams-don-t-set-the-bar-for-quality-they-meet-it\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-06-scrum-teams-don-t-set-the-bar-for-quality-they-meet-it",
    "ReferencePath": "resources/signals/2025-04-06-scrum-teams-don-t-set-the-bar-for-quality-they-meet-it"
  },
  {
    "FrontMatter": {
      "title": "If every release feels high-risk, you lack a true Definition of Done",
      "short_title": "Definition of Done Reduces Release Risk",
      "description": "Releases feel risky when teams lack a clear Definition of Done. Learn how a strong DoD ensures stress-free, reliable software delivery with built-in quality and security.",
      "tldr": "If every release feels risky and stressful, your team likely lacks a clear Definition of Done that ensures software is truly ready for production. A strong Definition of Done means releases are routine, with quality, security, and compliance built in, so there are no last-minute scrambles. Review your team's process to make releases predictable and low-stress.",
      "date": "2025-04-05T15:30:00+01:00",
      "lastmod": "2025-04-05T15:30:00+01:00",
      "weight": 260.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "iEdzblomyOb",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "if-every-release-feels-high-risk-you-lack-a-true-definition-of-done",
      "aliases": [
        "/resources/iEdzblomyOb"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "Engineering Excellence",
        "DevOps"
      ],
      "tags": [
        "Value Delivery",
        "Software Development",
        "Increment",
        "Product Delivery",
        "Professional Scrum",
        "Operational Practices",
        "Definition of Done"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7314308335866957824",
          "post_id": "7314308335866957824",
          "post_date": "2025-04-05T14:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:42Z",
        "short_title": "2025-07-07T16:45:03Z",
        "tldr": "2025-08-07T12:34:03Z"
      }
    },
    "BodyContent": "If every release feels like a high-risk operation, you don’t have a Definition of Done—you have a definition of “we hope this works.”\n\nReleasing software shouldn’t require a war room, late-night deployments, or a last-minute QA scramble. A strong DoD means every increment is ready for production the moment it’s complete, with security, compliance, and quality baked in.\n\nThe best teams treat releases as routine. No surprises. No drama. Just continuous flow.\n\nHow often does your team deliver without stress?\n\n[the article is linked in the comments]\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-05-if-every-release-feels-high-risk-you-lack-a-true-definition-of-done\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-05-if-every-release-feels-high-risk-you-lack-a-true-definition-of-done",
    "ReferencePath": "resources/signals/2025-04-05-if-every-release-feels-high-risk-you-lack-a-true-definition-of-done"
  },
  {
    "FrontMatter": {
      "title": "A changing Definition of Done undermines quality and predictability in teams",
      "short_title": "Changing Definition of Done Hurts Team Quality",
      "description": "Frequent changes to the Definition of Done reduce team quality and predictability. Consistent, enforced standards are key to reliable delivery and continuous improvement.",
      "tldr": "Frequently changing the Definition of Done makes it hard for teams to deliver predictable results and maintain quality. The Definition of Done should only evolve to raise standards, not lower them. To improve predictability and quality, keep your Definition of Done consistent and ensure it is followed.",
      "date": "2025-04-04T15:30:02+01:00",
      "lastmod": "2025-04-04T15:30:02+01:00",
      "weight": 255.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "lPs2C5FQ5cR",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "a-changing-definition-of-done-undermines-quality-and-predictability-in-teams",
      "aliases": [
        "/resources/lPs2C5FQ5cR"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "Product Development",
        "Scrum"
      ],
      "tags": [
        "Definition of Done",
        "Team Performance",
        "Professional Scrum",
        "Operational Practices",
        "Software Development",
        "Continuous Improvement"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7313945955295244288",
          "post_id": "7313945955295244288",
          "post_date": "2025-04-04T14:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:43Z",
        "short_title": "2025-07-07T16:45:04Z",
        "tldr": "2025-08-07T12:34:05Z"
      }
    },
    "BodyContent": "Imagine trying to run a factory job where the definition of a “finished product” changes every week. Forecasting production? Impossible. Measuring quality? Good luck.\n\nYet many teams change their Definition of Done so frequently that it becomes meaningless. This isn’t agility—it’s dysfunction.\n\nThe DoD can evolve, but only in the direction of increasing quality. Otherwise, you’re not iterating—you’re shifting goalposts and hoping no one notices.\n\nIf your teams struggle with predictability, start by making your DoD consistent and enforced. Agility doesn’t mean abandoning standards. It means continuously improving them.\n\nDoes your team’s Definition of Done stay consistent over time?\n\n[the article is linked in the comments]\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-04-a-changing-definition-of-done-undermines-quality-and-predictability-in-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-04-a-changing-definition-of-done-undermines-quality-and-predictability-in-teams",
    "ReferencePath": "resources/signals/2025-04-04-a-changing-definition-of-done-undermines-quality-and-predictability-in-teams"
  },
  {
    "FrontMatter": {
      "title": "Scrum Teams don’t set the bar for quality—they meet it",
      "short_title": "Scrum Teams and the Definition of Done",
      "description": "Scrum Teams must consistently meet a clear, non-negotiable Definition of Done to ensure quality, manage risk, and prevent technical debt in every Sprint.",
      "tldr": "Scrum teams are responsible for meeting, not setting, the quality standard defined by the Definition of Done, which should be a strict, non-negotiable measure of what is releasable. Weakening or fluctuating the DoD increases risk and technical debt, undermining quality and predictability. Development managers should ensure their teams consistently strengthen the DoD over time rather than lowering it to deliver more features.",
      "date": "2025-04-03T15:30:01+01:00",
      "lastmod": "2025-04-03T15:30:01+01:00",
      "weight": 145.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.8,
        "changefreq": "weekly"
      },
      "ResourceId": "ZMOQD_EBE6A",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-teams-don-t-set-the-bar-for-quality-they-meet-it",
      "aliases": [
        "/resources/ZMOQD_EBE6A"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Artifact"
      ],
      "categories": [
        "Scrum",
        "Engineering Excellence",
        "Technical Leadership"
      ],
      "tags": [
        "Software Development",
        "Definition of Done",
        "Professional Scrum",
        "Technical Mastery",
        "Operational Practices",
        "Team Performance",
        "Working Software"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7313583561599582210",
          "post_id": "7313583561599582210",
          "post_date": "2025-04-03T14:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-06-17T17:50:55Z",
        "short_title": "2025-07-07T16:45:04Z",
        "tldr": "2025-08-07T12:34:07Z"
      }
    },
    "BodyContent": "Scrum Teams don’t set the bar for quality—they meet it. The Definition of Done (DoD) isn’t a wishlist or a stretch goal. It’s a hard line that determines what is releasable. And if your DoD isn’t improving Sprint over Sprint, you’re accumulating risk and technical debt.\n\nToo many teams treat DoD as negotiable. It’s not. It’s governance. It ensures predictability, manages risk, and protects revenue. A weak or fluctuating DoD means your organisation has no real control over quality.\n\nIf someone suggests lowering the DoD to \"deliver more features,\" ask them to get it in writing from the financial director—because that’s not a technical decision, it’s a financial and risk decision.\n\nYour Definition of Done should never shrink, only grow. Anything less is dysfunction.\n\nHow often is your team strengthening its DoD?\n\n[the article is linked in the comments]\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-03-scrum-teams-don-t-set-the-bar-for-quality-they-meet-it\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-03-scrum-teams-don-t-set-the-bar-for-quality-they-meet-it",
    "ReferencePath": "resources/signals/2025-04-03-scrum-teams-don-t-set-the-bar-for-quality-they-meet-it"
  },
  {
    "FrontMatter": {
      "title": "If teams struggle with quality or delivery, the problem is often the system",
      "short_title": "System Issues Cause Team Quality Problems",
      "description": "Team issues with quality or delivery often stem from weak systems, lacking clear standards, automation, and leadership support—not just team performance.",
      "tldr": "When teams face issues with quality or delivery, the root cause is often the broader system, not just the team itself. Consistent quality requires clear engineering standards, automation, and strong leadership support, not just team-level efforts. Leaders should ensure these foundations are in place rather than simply demanding results.",
      "date": "2025-04-02T15:30:05+01:00",
      "lastmod": "2025-04-02T15:30:05+01:00",
      "weight": 190.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "cXJnv3y4sb7",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "if-teams-struggle-with-quality-or-delivery-the-problem-is-often-the-system",
      "aliases": [
        "/resources/cXJnv3y4sb7"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Operational Practices",
        "Software Development",
        "Organisational Culture",
        "Definition of Done"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7313221193375887360",
          "post_id": "7313221193375887360",
          "post_date": "2025-04-02T14:30:05Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:45Z",
        "short_title": "2025-07-07T16:45:05Z",
        "tldr": "2025-08-07T12:34:10Z"
      }
    },
    "BodyContent": "If teams are struggling with quality, technical debt, or inconsistent delivery, the issue isn’t just the team—it’s the system they’re operating in.\n\nA strong Definition of Done isn’t something teams “figure out.” It requires engineering standards, automation, and organisational commitment. If leadership isn’t providing that foundation, don’t be surprised when teams cut corners under pressure.\n\nQuality isn’t a grassroots effort—it’s a strategic priority.\n\nDoes your leadership support teams with a strong DoD, or just demand results?\n\n[the article is linked in the comments]\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-02-if-teams-struggle-with-quality-or-delivery-the-problem-is-often-the-system\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-02-if-teams-struggle-with-quality-or-delivery-the-problem-is-often-the-system",
    "ReferencePath": "resources/signals/2025-04-02-if-teams-struggle-with-quality-or-delivery-the-problem-is-often-the-system"
  },
  {
    "FrontMatter": {
      "title": "Why compromising on software quality is a leadership decision",
      "short_title": "Software Quality Is a Leadership Decision",
      "description": "Compromising software quality is a leadership choice, not a team one. Lowering standards carries business risks that should be openly addressed by decision-makers.",
      "tldr": "Compromising on software quality is a leadership decision, not a team one, and lowering standards to meet deadlines carries business risks that should be explicitly approved by leadership. A clear Definition of Done helps maintain consistent quality, and any decision to reduce it should be transparent and deliberate. Development managers should ensure quality expectations are set and upheld at the leadership level, not left to teams under delivery pressure.",
      "date": "2025-04-01T15:30:02+01:00",
      "lastmod": "2025-04-01T15:30:02+01:00",
      "weight": 275.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "3YDTlhSlU4A",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-compromising-on-software-quality-is-a-leadership-decision",
      "aliases": [
        "/resources/3YDTlhSlU4A"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Leadership",
        "Scrum"
      ],
      "tags": [
        "Professional Scrum",
        "Definition of Done",
        "Software Development",
        "Agile Leadership"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7312858792520544258",
          "post_id": "7312858792520544258",
          "post_date": "2025-04-01T14:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:46Z",
        "short_title": "2025-07-07T16:45:06Z",
        "tldr": "2025-08-07T12:34:12Z"
      }
    },
    "BodyContent": "Would your CFO sign off on a financial report that was “mostly accurate”? Would your legal team approve a contract that “should be enforceable”? No?\n\nThen why do organisations think it’s acceptable to compromise on software quality?\n\nA strong Definition of Done prevents cutting corners. It ensures every increment meets the same professional standard. Reducing quality to meet deadlines is a financial decision, not a team decision. If leadership wants to change the quality bar, they should sign off on the risks—not sneak it past teams under the banner of “Agile.”\n\nScrum teams don’t get to lower quality. And if your teams are being asked to, the real conversation should be happening in the boardroom.\n\nHas your leadership ever knowingly shipped bad software?\n\n[the article is linked in the comments]\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-01-why-compromising-on-software-quality-is-a-leadership-decision\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-04-01-why-compromising-on-software-quality-is-a-leadership-decision",
    "ReferencePath": "resources/signals/2025-04-01-why-compromising-on-software-quality-is-a-leadership-decision"
  },
  {
    "FrontMatter": {
      "title": "Executives want predictability",
      "short_title": "Executives Want Predictability",
      "description": "Lack of a clear, enforced Definition of Done leads to hidden risks, unreliable forecasts, and eroded trust in delivery, undermining predictability and organisational confidence.",
      "tldr": "If your teams do not have a clear, enforced Definition of Done, you are creating hidden risks and unreliable forecasts, which leads to missed deadlines and frustrated customers. Treating \"Done\" as negotiable means you are not delivering real value or predictability. Make sure your teams only mark work as done when it meets objective, enforceable standards to ensure true progress and trustworthy commitments.",
      "date": "2025-03-31T15:30:08+01:00",
      "lastmod": "2025-03-31T15:30:08+01:00",
      "weight": 235.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "sJJYz51QG0O",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "executives-want-predictability",
      "aliases": [
        "/resources/sJJYz51QG0O"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Engineering Excellence"
      ],
      "tags": [
        "Definition of Done",
        "Operational Practices",
        "Increment",
        "Competence",
        "Product Delivery",
        "Engineering Practices",
        "Software Development",
        "Technical Mastery",
        "Team Performance",
        "Professional Scrum",
        "Pragmatic Thinking",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7312496427987841049",
          "post_id": "7312496427987841049",
          "post_date": "2025-03-31T14:30:08Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:47Z",
        "short_title": "2025-07-07T16:45:07Z",
        "tldr": "2025-08-07T12:34:15Z"
      }
    },
    "BodyContent": "Executives want predictability. Stakeholders want transparency. Investors want confidence. But if your organisation treats “Done” as a moving target, all you’re really delivering is a well-packaged lie.\n\nEvery time a team marks work as “done” without a concrete, enforced Definition of Done, they’re not shipping value—they’re accumulating hidden risk. Incomplete testing, unverified security, missing automation—all pushed downstream until the cost explodes at the worst possible moment. And then leadership wonders why deadlines slip, costs balloon, and customers get frustrated.\n\nIf your DoD is vague, subjective, or varies sprint to sprint, your forecasts are fiction. You’re not managing an Agile organisation. You’re running a hope-based delivery model where quality is optional, and failure is inevitable.\n\nDone must be non-negotiable. A working increment must meet an objective, enforceable standard—automated testing, security, compliance, performance, deployment readiness. Anything less isn’t agility. It’s professional negligence.\n\nStop reporting progress on half-baked work. If Done isn’t real, neither are your commitments.\n\nDoes your organisation truly know when something is Done?\n\n[the article is linked in the comments]\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-31-executives-want-predictability\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-31-executives-want-predictability",
    "ReferencePath": "resources/signals/2025-03-31-executives-want-predictability"
  },
  {
    "FrontMatter": {
      "title": "Scrum is not a process it is a social technology designed to expose dysfunction",
      "short_title": "Scrum Exposes Team Dysfunctions",
      "description": "Explains how Scrum reveals team dysfunctions by clarifying roles and accountability, highlighting its purpose to expose issues that hinder value delivery and improvement.",
      "tldr": "Scrum is meant to reveal problems in how teams work, not just provide a set process. If the Scrum Master, Product Owner, or Developers avoid their core responsibilities, the team will struggle to deliver value. Development managers should ensure their teams use Scrum to identify and address issues, not just go through the motions.",
      "date": "2025-03-29T16:30:02+00:00",
      "lastmod": "2025-03-29T16:30:02+00:00",
      "weight": 420.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "CNqQyGHkbF3",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-is-not-a-process-it-is-a-social-technology-designed-to-expose-dysfunction",
      "aliases": [
        "/resources/CNqQyGHkbF3"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Social Technologies",
        "Professional Scrum",
        "Value Delivery",
        "Agile Frameworks",
        "Software Development",
        "Team Performance",
        "Transparency",
        "Empirical Process Control",
        "Organisational Agility",
        "Scrum Master",
        "Scrum Team"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7311786728955006976",
          "post_id": "7311786728955006976",
          "post_date": "2025-03-29T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:49Z",
        "short_title": "2025-07-07T16:45:09Z",
        "tldr": "2025-08-07T12:34:18Z"
      }
    },
    "BodyContent": "Scrum isn’t a process—it’s a social technology designed to expose dysfunction.\n\n- The Scrum Master ensures Scrum is applied effectively.\n- The Product Owner maximises value.\n- The Developers deliver a Done Increment every Sprint.\n\nIf any of these accountabilities break down, Scrum falls apart.\n\nA Scrum Master who doesn’t challenge poor practices isn’t \"servant-leading\"—they’re letting teams fail slowly.\n\nA Product Owner who treats the backlog like a list of requirements isn’t \"managing scope\"—they’re avoiding accountability for value.\n\nDevelopers that hide behind technical debt aren’t \"moving fast\"—they are digging a hole they’ll have to climb out of later.\n\nScrum is not about best practices. It’s about exposing the uncomfortable realities that stop teams from delivering value.\n\nAre we using Scrum to inspect and adapt, or are we just following the motions?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-29-scrum-is-a-social-technology-designed-to-expose-team-dysfunction\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-29-scrum-is-a-social-technology-designed-to-expose-team-dysfunction",
    "ReferencePath": "resources/signals/2025-03-29-scrum-is-a-social-technology-designed-to-expose-team-dysfunction"
  },
  {
    "FrontMatter": {
      "title": "Why Scrum Masters Need Technical Expertise to Guide Teams",
      "short_title": "Why Scrum Masters Need Technical Expertise",
      "description": "Scrum Masters need technical expertise to effectively support teams, understand best practices, and bridge gaps between process and real-world technical challenges.",
      "tldr": "Scrum Masters are most effective when they have hands-on experience and technical understanding relevant to their team's work, such as development practices or domain-specific knowledge. This expertise helps them guide teams toward improvement without doing the work themselves. Development managers should ensure Scrum Masters have sufficient technical background to enable, not just facilitate, their teams.",
      "date": "2025-03-28T16:30:04+00:00",
      "lastmod": "2025-03-28T16:30:04+00:00",
      "weight": 235.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "_0eaUkX1o1q",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-scrum-masters-need-technical-expertise-to-guide-teams",
      "aliases": [
        "/resources/_0eaUkX1o1q"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Technical Leadership"
      ],
      "tags": [
        "Product Delivery",
        "Pragmatic Thinking",
        "Software Development",
        "Operational Practices"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7311424349494784000",
          "post_id": "7311424349494784000",
          "post_date": "2025-03-28T16:30:04Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:50Z",
        "short_title": "2025-07-07T16:45:10Z",
        "tldr": "2025-08-07T12:34:20Z"
      }
    },
    "BodyContent": "Would you trust a coach who doesn’t understand your sport?\n\nThen why do we think a Scrum Master can be effective without understanding the technical work of their team?\n\nTechnical mastery doesn’t mean Scrum Masters need to be coders, but they do have to have worked as developers. But it does mean they need to understand what “good” looks like.\n\nFor software teams, that means knowing:\n\n- TDD and CI/CD\n- Infrastructure as Code\n- DevOps and cloud principles\n\nFor finance teams, it means understanding:\n\n- Regulatory constraints\n- Risk modelling\n- Financial product design\n\nScrum Masters don’t do the work, but they need technical expertise in the work to help teams get better.\n\nWhere do we draw the line between enabling and doing?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-28-why-scrum-masters-need-technical-expertise-to-guide-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-28-why-scrum-masters-need-technical-expertise-to-guide-teams",
    "ReferencePath": "resources/signals/2025-03-28-why-scrum-masters-need-technical-expertise-to-guide-teams"
  },
  {
    "FrontMatter": {
      "title": "Why Most Companies Fail at Adopting Agility Beyond IT",
      "short_title": "Why Companies Fail at Agility Beyond IT",
      "description": "Most companies struggle with agility due to rigid structures, outdated processes, and cultural barriers, not technical issues. True agility requires organisational change.",
      "tldr": "Most companies fail to adopt agility beyond IT because the real barriers are organisational, such as rigid hierarchies, inflexible budgeting, and outdated performance reviews. Scrum Masters need to focus on driving broader organisational change, not just team-level practices. Development managers should address systemic blockers and rethink how work is funded and measured to enable true agility.",
      "date": "2025-03-27T16:30:04+00:00",
      "lastmod": "2025-03-27T16:30:04+00:00",
      "weight": 710.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "xdKHhjboUgT",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-most-companies-fail-at-adopting-agility-beyond-it",
      "aliases": [
        "/resources/xdKHhjboUgT"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Agile Philosophy",
        "Organisational Change",
        "Agile Strategy",
        "Organisational Agility",
        "Organisational Culture",
        "Pragmatic Thinking",
        "Social Technologies",
        "Change Management",
        "Large Scale Agility",
        "Market Adaptability",
        "Enterprise Agility",
        "Scrum Master",
        "Agile Transformation",
        "Business Agility",
        "Sociotechnical Systems"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7311061960140226560",
          "post_id": "7311061960140226560",
          "post_date": "2025-03-27T16:30:04Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:51Z",
        "short_title": "2025-07-07T16:45:10Z",
        "tldr": "2025-08-07T12:34:22Z"
      }
    },
    "BodyContent": "Most companies trying to \"adopt agility\" fail because they think it’s an IT problem.\n\nIt’s not.\n\nThe biggest impediments to agility are organisational, not technical:\n\n- Hierarchical structures that kill autonomy.\n- Annual budgeting cycles that resist adaptability.\n- Performance reviews that reward individual output over team outcomes.\n\nScrum Masters must understand organisational transformation. They need to navigate politics, drive change, and push leadership to remove systemic blockers—not just “protect the team” from the dysfunction.\n\nAgility doesn’t start with Daylies and retrospectives. It starts with how an organisation funds, measures, and enables work.\n\nWhat’s the biggest non-technical barrier to agility you’ve seen?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-27-why-most-companies-fail-at-adopting-agility-beyond-it\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-27-why-most-companies-fail-at-adopting-agility-beyond-it",
    "ReferencePath": "resources/signals/2025-03-27-why-most-companies-fail-at-adopting-agility-beyond-it"
  },
  {
    "FrontMatter": {
      "title": "Empowering Product Owners as Strategic Leaders in Scrum Teams",
      "short_title": "Empowering Product Owners as Strategic Leaders",
      "description": "Explores how Product Owners can drive strategy, maximise value, and lead Scrum teams effectively, highlighting the need for empowerment beyond basic backlog management.",
      "tldr": "Product Owners should be empowered as strategic leaders who drive product vision and business value, not just manage backlogs. Scrum Masters play a key role in coaching Product Owners to use customer insights and data for better decisions. Development managers should ensure Product Owners have the authority and support to lead effectively, rather than treating them as task managers.",
      "date": "2025-03-26T16:30:33+00:00",
      "lastmod": "2025-03-26T16:30:33+00:00",
      "weight": 445.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "xKiwFed7LSB",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "empowering-product-owners-as-strategic-leaders-in-scrum-teams",
      "aliases": [
        "/resources/xKiwFed7LSB"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Product Management"
      ],
      "tags": [
        "Agile Product Management",
        "Product Strategy",
        "Product Owner",
        "Software Development",
        "Value Delivery",
        "Professional Scrum",
        "Organisational Agility",
        "Social Technologies",
        "Agile Leadership",
        "Agile Frameworks",
        "Agile Strategy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7310699692584042497",
          "post_id": "7310699692584042497",
          "post_date": "2025-03-26T16:30:33Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:52Z",
        "short_title": "2025-07-07T16:45:11Z",
        "tldr": "2025-08-07T12:34:24Z"
      }
    },
    "BodyContent": "The Product Owner is not a backlog manager.\n\nA great Product Owner is a product strategist, a market expert, and a value maximiser. They don’t just prioritise features—they ensure the team is building the right product in the right way to deliver real business impact.\n\nYet, many organisations treat the Product Owner role as a glorified business analyst.\n\nA strong Scrum Master doesn’t just facilitate Scrum events; they teach, coach, and mentor the Product Owner to operate like a modern product leader. That includes leveraging customer insights, articulating a strategic vision, and making data-driven decisions.\n\nIf the Product Owner is weak, the whole Scrum Team suffers.\n\nAre we empowering Product Owners to lead, or are we just giving them Jira access and hoping for the best?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-26-empowering-product-owners-as-strategic-leaders-in-scrum-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-26-empowering-product-owners-as-strategic-leaders-in-scrum-teams",
    "ReferencePath": "resources/signals/2025-03-26-empowering-product-owners-as-strategic-leaders-in-scrum-teams"
  },
  {
    "FrontMatter": {
      "title": "The True Role of a Scrum Master Beyond Facilitation",
      "short_title": "The True Role of a Scrum Master",
      "description": "Explains how a Scrum Master drives team improvement, removes obstacles, and leads organisational change, going far beyond basic facilitation or meeting management.",
      "tldr": "A Scrum Master’s real value is in driving team improvement and organisational change, not just running meetings or handling admin tasks. They should coach teams, remove obstacles, and ensure Scrum is used to deliver value. Development managers should empower Scrum Masters to act as change agents rather than limiting them to facilitation.",
      "date": "2025-03-25T16:30:02+00:00",
      "lastmod": "2025-03-25T16:30:02+00:00",
      "weight": 365.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "ZqDRLw5mPc-",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-true-role-of-a-scrum-master-beyond-facilitation",
      "aliases": [
        "/resources/ZqDRLw5mPc-"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Technical Leadership",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Scrum Master",
        "Professional Scrum",
        "Social Technologies",
        "Product Delivery",
        "Operational Practices",
        "Agile Leadership",
        "Coaching",
        "Team Performance",
        "Agentic Agility",
        "Agile Frameworks",
        "Organisational Agility",
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7310337177316478976",
          "post_id": "7310337177316478976",
          "post_date": "2025-03-25T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:54Z",
        "short_title": "2025-07-07T16:45:13Z",
        "tldr": "2025-08-07T12:34:26Z"
      }
    },
    "BodyContent": "If you think a Scrum Master is just a facilitator, you’re missing the point.\n\nA Scrum Master is accountable for enabling outcomes, not just running meetings. That means teaching, coaching, and challenging teams to work better. It means removing systemic impediments, shaping organisational change, and ensuring Scrum is applied effectively.\n\nIf all a Scrum Master does is schedule events and take notes, they’re a glorified admin—not a change agent.\n\nScrum isn’t a process to enforce; it’s a social technology for delivering value. And Scrum Masters who treat it as a set of rituals instead of a means for improving how teams work are failing their teams.\n\nWhat’s the most valuable thing a Scrum Master can do in a day? Hint: It’s not writing meeting minutes.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-25-the-true-role-of-a-scrum-master-beyond-facilitation\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-25-the-true-role-of-a-scrum-master-beyond-facilitation",
    "ReferencePath": "resources/signals/2025-03-25-the-true-role-of-a-scrum-master-beyond-facilitation"
  },
  {
    "FrontMatter": {
      "title": "Too many Scrum Masters believe they don’t need technical skills",
      "short_title": "Technical Skills Essential for Scrum Masters",
      "description": "Highlights the importance of technical knowledge for Scrum Masters, arguing that understanding team-specific skills is essential to effectively support and enable their teams.",
      "tldr": "Scrum Masters need relevant technical and domain knowledge to effectively support their teams, not just certifications. Without understanding the specific challenges and practices of their team's work, they cannot truly enable success. Development managers should ensure Scrum Masters have or develop the necessary expertise to make a meaningful impact.",
      "date": "2025-03-24T16:30:03+00:00",
      "lastmod": "2025-03-24T16:30:03+00:00",
      "weight": 335.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "q_OupO_abR_",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "too-many-scrum-masters-believe-they-don-t-need-technical-skills",
      "aliases": [
        "/resources/q_OupO_abR_"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Competence",
        "Professional Scrum",
        "Software Development"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7309974791539642369",
          "post_id": "7309974791539642369",
          "post_date": "2025-03-24T16:30:03Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:55Z",
        "short_title": "2025-07-07T16:45:14Z",
        "tldr": "2025-08-07T12:34:27Z"
      }
    },
    "BodyContent": "Too many Scrum Masters believe they don’t need technical skills. The Scrum Guide doesn’t explicitly say they do—but let’s be real.\n\nIf a Scrum Team is building software, a Scrum Master who doesn’t understand Test-Driven Development, Continuous Delivery, and DevOps is out of their depth. If the team is in finance, the Scrum Master should grasp financial modelling and compliance. If it’s an industrial design team, they should understand prototyping and material constraints.\n\nScrum Masters don’t do the work, but they enable the work. And how can you enable what you don’t understand?\n\nBeing a great Scrum Master isn’t about certification. It’s about mastery—of the technical, business, and organisational realities your team faces.\n\nAre we setting Scrum Masters up for success, or are we pushing them into roles where they lack the mastery to make a real impact?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-24-too-many-scrum-masters-believe-they-don-t-need-technical-skills\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-24-too-many-scrum-masters-believe-they-don-t-need-technical-skills",
    "ReferencePath": "resources/signals/2025-03-24-too-many-scrum-masters-believe-they-don-t-need-technical-skills"
  },
  {
    "FrontMatter": {
      "title": "Great Scrum Masters and Product Owners don’t micromanage",
      "short_title": "Great Scrum Masters and Product Owners",
      "description": "Effective Scrum Masters and Product Owners empower teams with clear goals and autonomy, balancing structure and flexibility to promote accountability and true agility.",
      "tldr": "Effective Scrum Masters and Product Owners avoid micromanaging by providing clear direction, supporting team autonomy, and ensuring accountability. Teams perform best when they understand the vision and operate within a structured framework that balances freedom with alignment. Leaders should focus on removing obstacles and maintaining this balance to enable true agility; consider how your organization supports both autonomy and structure.",
      "date": "2025-03-23T16:30:01+00:00",
      "lastmod": "2025-03-23T16:30:01+00:00",
      "weight": 390.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "8W3oqNsNnMS",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "great-scrum-masters-and-product-owners-don-t-micromanage",
      "aliases": [
        "/resources/8W3oqNsNnMS"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Leadership",
        "Scrum",
        "Technical Leadership"
      ],
      "tags": [
        "Self Organisation",
        "Agile Leadership",
        "Organisational Agility",
        "Team Motivation",
        "Pragmatic Thinking",
        "Organisational Culture",
        "Professional Scrum",
        "Social Technologies",
        "Agile Product Management",
        "Software Development"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7309612398263296001",
          "post_id": "7309612398263296001",
          "post_date": "2025-03-23T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:56Z",
        "short_title": "2025-07-07T16:45:16Z",
        "tldr": "2025-08-07T12:34:32Z"
      }
    },
    "BodyContent": "Great Scrum Masters and Product Owners don’t micromanage. They provide clarity, foster initiative, and hold teams accountable.\n\nThe best teams understand the vision, have the autonomy to execute, and own their results. But autonomy doesn’t mean working in a vacuum. It exists within a structured system—Scrum events, commitments, and organisational needs define the playing field.\n\nLeadership isn’t about control for control’s sake. It’s about removing obstacles, enabling success, and stepping in when necessary.\n\nTrue agility comes from balancing autonomy with alignment. If you let teams drift without structure, chaos follows. If you enforce rigid rules, you kill adaptability.\n\nHow do you strike that balance in your organisation?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-23-great-scrum-masters-and-product-owners-don-t-micromanage\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-23-great-scrum-masters-and-product-owners-don-t-micromanage",
    "ReferencePath": "resources/signals/2025-03-23-great-scrum-masters-and-product-owners-don-t-micromanage"
  },
  {
    "FrontMatter": {
      "title": "Overcoming Project Blockers and Challenging Organisational Inertia",
      "short_title": "Overcoming Project Blockers and Inertia",
      "description": "Explores how lack of authority hinders teams from removing project blockers and overcoming organisational inertia, stressing the need for real autonomy to achieve results.",
      "tldr": "Teams are often held responsible for project outcomes without having the authority to remove blockers or challenge ineffective practices, which leads to frustration and failure. True accountability requires giving teams both autonomy and the power to influence their environment. Development managers should ensure teams have the authority needed to address obstacles and drive results, not just the responsibility.",
      "date": "2025-03-22T16:30:03+00:00",
      "lastmod": "2025-03-22T16:30:03+00:00",
      "weight": 420.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "aXo_GayoCuE",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "overcoming-project-blockers-and-challenging-organisational-inertia",
      "aliases": [
        "/resources/aXo_GayoCuE"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tenet"
      ],
      "categories": [
        "Scrum",
        "Technical Leadership",
        "Leadership"
      ],
      "tags": [
        "Organisational Culture",
        "Agentic Agility",
        "Pragmatic Thinking",
        "Organisational Agility",
        "Team Performance",
        "Team Motivation",
        "Agile Product Management",
        "Self Organisation",
        "Project Management",
        "Sociotechnical Systems",
        "Agile Leadership",
        "Team Collaboration",
        "Social Technologies",
        "Employee Engagement"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7309250013287645184",
          "post_id": "7309250013287645184",
          "post_date": "2025-03-22T16:30:03Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:57Z",
        "short_title": "2025-07-07T16:45:16Z",
        "tldr": "2025-08-07T12:34:33Z"
      }
    },
    "BodyContent": "Imagine you’re responsible for delivering a critical project, but every time you try to remove a blocker, someone tells you it’s “not your call.” Every time you challenge a dysfunction, you’re met with, “We’ve always done it this way.”\n\nNow imagine being held accountable for the failure.\n\nThis is what happens when teams are given responsibility without control. Scrum Masters and Product Owners are expected to drive results, but if they lack the authority to remove impediments, challenge dysfunction, and enforce alignment when necessary, their hands are tied.\n\nAutonomy is crucial, but it must come with the ability to influence the system. Alignment doesn’t mean top-down control; it means ensuring the team has what it needs to succeed without unnecessary interference.\n\nIf you expect people to own outcomes, they must have the authority to shape the environment that impacts those outcomes. Anything less is just setting them up to fail.\n\nHow does your organisation balance autonomy and control?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-22-overcoming-project-blockers-and-challenging-organisational-inertia\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-22-overcoming-project-blockers-and-challenging-organisational-inertia",
    "ReferencePath": "resources/signals/2025-03-22-overcoming-project-blockers-and-challenging-organisational-inertia"
  },
  {
    "FrontMatter": {
      "title": "“Teams are self-managing",
      "short_title": "Teams Are Self-Managing in Scrum",
      "description": "Explains how self-managing teams in Scrum need structure and leadership, clarifying the Scrum Master's role in maintaining clarity, alignment, and effective self-management.",
      "tldr": "Self-managing teams still need structure and boundaries to be effective, which is where the Scrum Master plays a key role by ensuring clarity, alignment, and accountability. Without this support, autonomy can lead to chaos and poor delivery. Development managers should balance team autonomy with proactive leadership to maintain high performance.",
      "date": "2025-03-21T16:30:04+00:00",
      "lastmod": "2025-03-21T16:30:04+00:00",
      "weight": 395.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "8EauPhROdZq",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "teams-are-self-managing",
      "aliases": [
        "/resources/8EauPhROdZq"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Professional Scrum",
        "Scrum Master",
        "Self Organisation",
        "Software Development",
        "Team Performance",
        "Team Collaboration",
        "Agile Frameworks",
        "Agile Leadership",
        "Social Technologies",
        "Operational Practices",
        "Scrum Team"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7308887634099986433",
          "post_id": "7308887634099986433",
          "post_date": "2025-03-21T16:30:04Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:55:59Z",
        "short_title": "2025-07-07T16:45:17Z",
        "tldr": "2025-08-07T12:34:35Z"
      }
    },
    "BodyContent": "“Teams are self-managing. We don’t need a Scrum Master telling us what to do.”\n\nThat’s a common misconception. Yes, Scrum is designed for self-managing teams, but self-management is not the absence of structure.\n\nAutonomy exists within constraints—Scrum events, commitments, and organisational needs define the playing field. Without that, self-management turns into chaos.\n\nScrum Masters aren’t there to micromanage. They ensure the team has clarity, alignment, and accountability. They protect Scrum, not by controlling every decision, but by maintaining the conditions for teams to thrive.\n\nIf a team is failing to deliver, struggling with impediments, or ignoring Scrum principles, a Scrum Master doesn’t just “facilitate” and hope things improve. They step in and fix what’s broken.\n\nSelf-management works best when balanced with strong leadership.\n\nWhere do you draw the line between autonomy and intervention?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-21-teams-are-self-managing\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-21-teams-are-self-managing",
    "ReferencePath": "resources/signals/2025-03-21-teams-are-self-managing"
  },
  {
    "FrontMatter": {
      "title": "Scrum Masters: Why Influence Alone May Not Be Enough",
      "short_title": "Scrum Masters Need Authority, Not Just Influence",
      "description": "Explores why Scrum Masters need authority, not just influence, to enforce Agile practices, remove blockers, and ensure teams follow Scrum for true organisational agility.",
      "tldr": "Relying only on influence limits a Scrum Master's ability to drive real change, especially when teams or leaders resist Agile practices. Sustainable agility needs Scrum Masters who can enforce the framework, remove obstacles, and hold teams accountable, not just suggest improvements. Development managers should ensure Scrum Masters have enough authority to lead effectively, not just influence.",
      "date": "2025-03-20T16:30:02+00:00",
      "lastmod": "2025-03-20T16:30:02+00:00",
      "weight": 475.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "7-5f5u_oMbc",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-masters-why-influence-alone-may-not-be-enough",
      "aliases": [
        "/resources/7-5f5u_oMbc"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Leadership"
      ],
      "tags": [
        "Software Development",
        "Professional Scrum",
        "Pragmatic Thinking",
        "Organisational Culture",
        "Agile Frameworks",
        "Agile Transformation",
        "Scrum Master"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7308525238990917634",
          "post_id": "7308525238990917634",
          "post_date": "2025-03-20T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:00Z",
        "short_title": "2025-07-07T16:45:19Z",
        "tldr": "2025-08-07T12:34:37Z"
      }
    },
    "BodyContent": "The idea that Scrum Masters should lead only through influence sounds noble—but in many organisations, it’s also naive.\n\nInfluence works when teams and leadership are already aligned. But what happens when they’re not? When teams reject Agile principles, leadership prioritises control over agility, or dysfunction is deeply embedded?\n\nAt some point, persuasion isn’t enough. A Scrum Master must be able to remove blockers, challenge bad practices, and uphold Scrum—not just suggest improvements and hope for the best.\n\nIf your Scrum Master has no authority to enforce the framework, to say “No, we don’t work like that,” or to hold teams accountable, what’s the point?\n\nScrum isn’t about soft influence. It’s about creating real, sustainable agility. That requires leadership backed by action, not just good intentions.\n\nWhere does your organisation stand on this?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-20-scrum-masters-why-influence-alone-may-not-be-enough\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-20-scrum-masters-why-influence-alone-may-not-be-enough",
    "ReferencePath": "resources/signals/2025-03-20-scrum-masters-why-influence-alone-may-not-be-enough"
  },
  {
    "FrontMatter": {
      "title": "No one questions a Product Owner authority",
      "short_title": "No One Questions Product Owner Authority",
      "description": "Explores why Product Owners’ authority is accepted while Scrum Masters’ is questioned, highlighting the need for clear authority to ensure team effectiveness and agile success.",
      "tldr": "Product Owners are trusted with authority to make decisions that drive product success, but Scrum Masters often lack similar authority despite being responsible for team effectiveness and removing obstacles. Relying only on persuasion limits their impact; Scrum Masters need the power to enforce good practices and address issues directly. Development managers should ensure Scrum Masters have the authority needed to fulfill their role and support team agility.",
      "date": "2025-03-19T16:30:30+00:00",
      "lastmod": "2025-03-19T16:30:30+00:00",
      "weight": 420.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "T6lSCdR9SCa",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "no-one-questions-a-product-owner-authority",
      "aliases": [
        "/resources/T6lSCdR9SCa"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Leadership"
      ],
      "tags": [
        "Scrum Master",
        "Pragmatic Thinking",
        "Professional Scrum",
        "Organisational Culture",
        "Agile Frameworks",
        "Agile Leadership",
        "Team Performance"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7308162966737018882",
          "post_id": "7308162966737018882",
          "post_date": "2025-03-19T16:30:30Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:02Z",
        "short_title": "2025-07-07T16:45:20Z",
        "tldr": "2025-08-07T12:34:38Z"
      }
    },
    "BodyContent": "No one questions a Product Owner’s authority. They decide priorities, manage stakeholders, and ensure the team works on the most valuable outcomes. Their ability to make tough calls is what drives product success.\n\nBut when we talk about the Scrum Master’s authority, the conversation changes. Why?\n\nScrum Masters are accountable for team effectiveness. That means upholding Scrum, causing the removal of impediments, and challenging dysfunction, or just taking action. Yet too often, they are expected to do this purely through persuasion.\n\nInfluence matters, but it’s not always enough. Sometimes, a Scrum Master needs to say \"No, this isn't how we work\" or \"This is blocking our ability to deliver value\"—and have the authority to act on it.\n\nIf we accept that a Product Owner must have authority to fulfil their accountability, why do we question it for Scrum Masters?\n\nLet’s stop treating Scrum Masters as passive facilitators. Their role is just as critical in ensuring agility.\n\nDoes your organisation recognise this?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-19-no-one-questions-a-product-owner-authority\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-19-no-one-questions-a-product-owner-authority",
    "ReferencePath": "resources/signals/2025-03-19-no-one-questions-a-product-owner-authority"
  },
  {
    "FrontMatter": {
      "title": "Why Teams Claim Self-Management to Avoid Alignment Discussions",
      "short_title": "Self-Management vs Alignment in Teams",
      "description": "Explores how teams misuse self-management to dodge alignment, clarifying that true autonomy requires accountability, shared goals, and adherence to frameworks like Scrum.",
      "tldr": "Self-management means taking ownership within agreed boundaries, not avoiding alignment or accountability. Scrum teams must align with business goals, agile practices, and delivery commitments while deciding how to work. Development managers should ensure teams are not using autonomy as an excuse to sidestep necessary alignment and accountability.",
      "date": "2025-03-18T16:30:34+00:00",
      "lastmod": "2025-03-18T16:30:34+00:00",
      "weight": 425.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "UUh2trdq4D1",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-teams-claim-self-management-to-avoid-alignment-discussions",
      "aliases": [
        "/resources/UUh2trdq4D1"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Social Technologies",
        "Software Development",
        "Professional Scrum",
        "Organisational Agility",
        "Organisational Culture",
        "Scrum Team",
        "Agile Leadership",
        "Common Goals",
        "Self Organisation"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7307800591827632129",
          "post_id": "7307800591827632129",
          "post_date": "2025-03-18T16:30:34Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:04Z",
        "short_title": "2025-07-07T16:45:21Z",
        "tldr": "2025-08-07T12:34:41Z"
      }
    },
    "BodyContent": "Some teams love to wave the \"we’re self-managing\" flag whenever alignment is discussed. But let’s be real—autonomy doesn’t mean doing whatever you want, whenever you want. It means taking ownership within a shared framework.\n\nScrum provides a system where teams have the freedom to decide how they deliver, but that doesn’t mean they can ignore Scrum events, commitments, or organisational goals. The Product Owner ensures alignment to business value. The Scrum Master ensures alignment to agility. The team ensures alignment to delivery.\n\nAutonomy without alignment isn’t self-management—it’s dysfunction. True self-management is earned through trust, consistency, and accountability.\n\nSo the question is: Is your team truly self-managing, or just avoiding accountability under the guise of autonomy?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-18-why-teams-claim-self-management-to-avoid-alignment-discussions\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-18-why-teams-claim-self-management-to-avoid-alignment-discussions",
    "ReferencePath": "resources/signals/2025-03-18-why-teams-claim-self-management-to-avoid-alignment-discussions"
  },
  {
    "FrontMatter": {
      "title": "Everyone loves the idea of self-managing teams",
      "short_title": "Self-Managing Teams: Autonomy with Structure",
      "description": "Explains how self-managing teams thrive with autonomy balanced by structure, highlighting the need for clear goals, accountability, and alignment within frameworks like Scrum.",
      "tldr": "Self-managing teams need both autonomy and clear structure to be effective; Scrum provides this by allowing teams to decide how to deliver value within defined boundaries and shared goals. Too much control leads to disengagement, while too little causes chaos and lack of direction. Development managers should regularly assess whether their teams have the right balance of freedom and alignment to maintain productivity and adaptability.",
      "date": "2025-03-18T09:51:08+00:00",
      "lastmod": "2025-03-18T09:51:08+00:00",
      "weight": 415.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "xETx_jwnIHO",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "everyone-loves-the-idea-of-self-managing-teams",
      "aliases": [
        "/resources/xETx_jwnIHO"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Software Development",
        "Social Technologies",
        "Self Organisation",
        "Professional Scrum",
        "Pragmatic Thinking",
        "Team Collaboration",
        "Agile Planning",
        "Team Performance",
        "Team Motivation",
        "Value Delivery",
        "Common Goals",
        "Agile Leadership",
        "Organisational Culture",
        "Agentic Agility",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7307700073637765120",
          "post_id": "7307700073637765120",
          "post_date": "2025-03-18T09:51:08Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:05Z",
        "short_title": "2025-07-07T16:45:22Z",
        "tldr": "2025-08-07T12:34:42Z"
      }
    },
    "BodyContent": "Everyone loves the idea of self-managing teams. Give people autonomy, let them decide how to work, and everything just falls into place, right?\n\nNot quite.\n\nScrum isn’t about letting teams work however they like. It’s about bounded autonomy—freedom within a framework. Self-management means teams decide how to deliver value, but within the constraints of Scrum events, commitments, and organisational needs. The alignment comes from shared goals, accountability, and structure. Without it, self-management becomes chaos.\n\nToo much control? Teams disengage, becoming passive executors. Too little? Work becomes fragmented, directionless, and ultimately ineffective. True agility is the ability to adapt while staying aligned with the bigger picture.\n\nIf your teams are struggling, ask yourself: Is the problem too much control, or too little alignment?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-18-everyone-loves-the-idea-of-self-managing-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-18-everyone-loves-the-idea-of-self-managing-teams",
    "ReferencePath": "resources/signals/2025-03-18-everyone-loves-the-idea-of-self-managing-teams"
  },
  {
    "FrontMatter": {
      "title": "Scrum Masters and Product Owners are held accountable for results",
      "short_title": "Scrum Master and Product Owner Accountability",
      "description": "Explores the gap between accountability and authority for Scrum Masters and Product Owners, highlighting the need to empower roles responsible for team outcomes.",
      "tldr": "Scrum Masters and Product Owners are often held accountable for results without having the authority needed to influence outcomes. This mismatch leads to empty expectations and limits team effectiveness. To achieve better results, organisations should empower Scrum Masters with real authority, not just expect them to coach from the sidelines.",
      "date": "2025-03-17T16:30:03+00:00",
      "lastmod": "2025-03-17T16:30:03+00:00",
      "weight": 335.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "Rx4LP6ywHVh",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-masters-and-product-owners-are-held-accountable-for-results",
      "aliases": [
        "/resources/Rx4LP6ywHVh"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Scrum Master",
        "Software Development",
        "Market Adaptability",
        "Agile Frameworks",
        "Professional Scrum",
        "Pragmatic Thinking",
        "Agile Leadership",
        "Agentic Agility",
        "Social Technologies",
        "Product Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7307438077285654528",
          "post_id": "7307438077285654528",
          "post_date": "2025-03-17T16:30:03Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:07Z",
        "short_title": "2025-07-07T16:45:23Z",
        "tldr": "2025-08-07T12:34:44Z"
      }
    },
    "BodyContent": "Scrum Masters and Product Owners are held accountable for results. But here’s the contradiction—how can you be accountable for something you have no control over?\n\nToo often, Scrum Masters are expected to ensure team effectiveness without the authority to remove impediments, challenge dysfunction, or enforce alignment. Influence is important, but it’s not enough. Leadership without control is just a suggestion.\n\nIf the Product Owner’s authority to prioritise and maximise value is accepted, why do we hesitate to acknowledge the Scrum Master’s authority to uphold agility and effectiveness?\n\nAccountability without authority is an empty expectation. If we want better outcomes, we need to empower those responsible for delivering them.\n\nAre Scrum Masters in your organisation truly empowered or just expected to \"coach\" from the sidelines?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-17-scrum-masters-and-product-owners-are-held-accountable-for-results\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-17-scrum-masters-and-product-owners-are-held-accountable-for-results",
    "ReferencePath": "resources/signals/2025-03-17-scrum-masters-and-product-owners-are-held-accountable-for-results"
  },
  {
    "FrontMatter": {
      "title": "Lack of Authority Blocks Progress on Critical Projects",
      "short_title": "Lack of Authority Blocks Project Progress",
      "description": "Scrum Masters need authority to remove obstacles and drive project success. Without empowerment, they can't fulfil their role or be held accountable for outcomes.",
      "tldr": "Scrum Masters need real authority to remove obstacles and drive project success, but many are blocked by bureaucracy and lack of support. Without empowerment, they cannot be held accountable for outcomes and become ineffective. Development managers should ensure Scrum Masters have the authority to act if they expect meaningful results.",
      "date": "2025-03-16T16:30:01+00:00",
      "lastmod": "2025-03-16T16:30:01+00:00",
      "weight": 510.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "uLNzs9NgPZI",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "lack-of-authority-blocks-progress-on-critical-projects",
      "aliases": [
        "/resources/uLNzs9NgPZI"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Leadership",
        "Technical Leadership"
      ],
      "tags": [
        "Software Development",
        "Scrum Master",
        "Agile Leadership",
        "Agile Frameworks",
        "Pragmatic Thinking",
        "Agentic Agility",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7307075682646327297",
          "post_id": "7307075682646327297",
          "post_date": "2025-03-16T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:08Z",
        "short_title": "2025-07-07T16:45:25Z",
        "tldr": "2025-08-07T12:34:48Z"
      }
    },
    "BodyContent": "Imagine you’re responsible for delivering a critical project, but every time you try to remove an obstacle, you’re told you don’t have the authority to do so.\n\nThat’s the reality for many Scrum Masters.\n\nIf you expect someone to deliver outcomes, they must have control over the factors that influence those outcomes. That means removing impediments, challenging dysfunction, and enforcing alignment where necessary.\n\nScrum Masters who are handcuffed by bureaucracy, overreaching managers, or a lack of executive support cannot fulfil their accountability. You can’t hold someone accountable for effectiveness while stripping them of the means to achieve it.\n\nIf your Scrum Masters aren’t empowered to act, they’re not Scrum Masters. They’re just observers.\n\nDoes your organisation give Scrum Masters the authority they need to drive real change?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-16-lack-of-authority-blocks-progress-on-critical-projects\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-16-lack-of-authority-blocks-progress-on-critical-projects",
    "ReferencePath": "resources/signals/2025-03-16-lack-of-authority-blocks-progress-on-critical-projects"
  },
  {
    "FrontMatter": {
      "title": "Why Measuring Individual Cycle Time Fails to Help Teams",
      "short_title": "Why Measuring Individual Cycle Time Fails",
      "description": "Measuring individual cycle time overlooks team performance and system bottlenecks. Focus on lead time, throughput, and process efficiency to improve workflow.",
      "tldr": "Measuring individual cycle time does not help teams improve because it focuses on people instead of the overall system. Real bottlenecks come from process issues like queues and overloaded work, not individual speed. To improve team performance, focus on system-level metrics such as lead time, throughput, and process efficiency, and address process bottlenecks rather than monitoring individuals.",
      "date": "2025-03-15T16:30:02+00:00",
      "lastmod": "2025-03-15T16:30:02+00:00",
      "weight": 245.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "ZZGeHcnIwyQ",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-measuring-individual-cycle-time-fails-to-help-teams",
      "aliases": [
        "/resources/ZZGeHcnIwyQ"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Product Development",
        "Kanban",
        "Lean"
      ],
      "tags": [
        "Team Performance",
        "Operational Practices",
        "Flow Efficiency",
        "Software Development",
        "Decision Making",
        "Lead Time",
        "Team Collaboration",
        "Systems Thinking",
        "Lean Principles",
        "Organisational Physics",
        "Throughput",
        "Lean Thinking",
        "Value Delivery",
        "Pragmatic Thinking",
        "Metrics and Learning"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7306713296575885312",
          "post_id": "7306713296575885312",
          "post_date": "2025-03-15T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:09Z",
        "short_title": "2025-07-07T16:45:26Z",
        "tldr": "2025-08-07T12:34:50Z"
      }
    },
    "BodyContent": "I still see teams measuring individual cycle time as if that tells them anything useful. It doesn’t.\n\nIf you’re measuring a person’s speed, you’re missing the point. The problem is never the individual—it’s the system they’re operating in. You don’t measure a single cog in a machine; you measure how well the whole thing runs.\n\nWhen work sits in queues, when reviews take forever, when people are overloaded with work in progress—those are the real bottlenecks. Measuring how fast someone moves a ticket through their own swim lane tells you nothing about flow.\n\nWant to move faster? Stop monitoring individuals. Start looking at lead time, throughput, and process cycle efficiency (PCE). Fix the system, and the people will be able to do great work.\n\nWhere have you seen individual measurement lead to bad incentives? Drop your thoughts in the comments.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-15-why-measuring-individual-cycle-time-fails-to-help-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-15-why-measuring-individual-cycle-time-fails-to-help-teams",
    "ReferencePath": "resources/signals/2025-03-15-why-measuring-individual-cycle-time-fails-to-help-teams"
  },
  {
    "FrontMatter": {
      "title": "Why Slow Processes Impact Developer Productivity and Performance",
      "short_title": "Why Slow Processes Hurt Developer Productivity",
      "description": "Explores how inefficient processes, not individual shortcomings, hinder developer productivity and performance, highlighting the need for systemic improvements.",
      "tldr": "Developer performance issues are often caused by slow or broken processes, not individual shortcomings. Focusing on improving systems like training, reviews, and team handoffs leads to better results than blaming people. To boost productivity, address process bottlenecks rather than targeting individuals.",
      "date": "2025-03-14T16:30:02+00:00",
      "lastmod": "2025-03-14T16:30:02+00:00",
      "weight": 235.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "CkgnD5GYbI8",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-slow-processes-impact-developer-productivity-and-performance",
      "aliases": [
        "/resources/CkgnD5GYbI8"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Technical Leadership",
        "Engineering Excellence"
      ],
      "tags": [
        "Team Performance",
        "Operational Practices",
        "Sociotechnical Systems",
        "Software Development",
        "Continuous Improvement"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7306350908538277888",
          "post_id": "7306350908538277888",
          "post_date": "2025-03-14T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:10Z",
        "short_title": "2025-07-07T16:45:27Z",
        "tldr": "2025-08-07T12:34:52Z"
      }
    },
    "BodyContent": "I once heard a leader say, “This developer is too slow.” No, the process was slow.\n\nIf someone on your team is struggling, it’s not a personal failing—it’s a system failure. Maybe they weren’t given the right training. Maybe work sits in review for weeks. Maybe the handoffs between teams are a mess.\n\nNigel Thurlow puts it perfectly:  \n“You never measure a person, ever. You only ever measure a process. You improve the system, never the people within it.”\n\nPeople don’t fail in a vacuum. The system sets them up for success or failure. If you’re spending time trying to fix the person, you’re missing the real problem.\n\nWant better performance? Fix the process.\n\nHave you ever seen someone get blamed for a system failure?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-14-why-slow-processes-impact-developer-productivity-and-performance\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-14-why-slow-processes-impact-developer-productivity-and-performance",
    "ReferencePath": "resources/signals/2025-03-14-why-slow-processes-impact-developer-productivity-and-performance"
  },
  {
    "FrontMatter": {
      "title": "Technical debt isn’t just messy code",
      "short_title": "Technical Debt Beyond Messy Code",
      "description": "Technical debt includes slow feedback, fragile systems, and manual processes that hinder progress. Addressing it early with automation and testing reduces long-term costs.",
      "tldr": "Technical debt goes beyond messy code and includes slow feedback, fragile systems, and manual processes that hinder progress. It results from choices like delaying refactoring or skipping automation, and it compounds over time. To avoid bigger problems later, prioritize paying down technical debt now by automating, testing early, and streamlining delivery pipelines.",
      "date": "2025-03-13T16:30:02+00:00",
      "lastmod": "2025-03-13T16:30:02+00:00",
      "weight": 175.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "81ZWio23ss7",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "technical-debt-isn-t-just-messy-code",
      "aliases": [
        "/resources/81ZWio23ss7"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "DevOps",
        "Product Development"
      ],
      "tags": [
        "Technical Debt",
        "Engineering Practices",
        "Software Development",
        "Technical Mastery",
        "Operational Practices",
        "Product Delivery",
        "Pragmatic Thinking",
        "Technical Excellence"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7305988522564341764",
          "post_id": "7305988522564341764",
          "post_date": "2025-03-13T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:12Z",
        "short_title": "2025-07-07T16:45:28Z",
        "tldr": "2025-08-07T12:34:54Z"
      }
    },
    "BodyContent": "Technical debt isn’t just messy code. It’s slow feedback, brittle systems, and manual processes that grind delivery to a halt. It’s why teams spend more time firefighting than innovating.\n\nBut here’s the thing: technical debt is a choice. Every time a team pushes off refactoring, skips automation, or accepts a fragile deployment process, they’re choosing to accumulate debt. And like financial debt, it compounds.\n\nThe only way out is to pay it down. Automate. Test early and often. Adopt trunk-based development. Remove friction from your pipelines. The cost of fixing it now is always less than the cost of delaying.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-13-technical-debt-isn-t-just-messy-code\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-13-technical-debt-isn-t-just-messy-code",
    "ReferencePath": "resources/signals/2025-03-13-technical-debt-isn-t-just-messy-code"
  },
  {
    "FrontMatter": {
      "title": "Why Tracking Individual Cycle Time Distorts Team Behaviour",
      "short_title": "Tracking Individual Cycle Time Harms Teams",
      "description": "Tracking individual cycle time can harm team performance by encouraging task cherry-picking, reduced collaboration, and lower quality, without improving overall delivery speed.",
      "tldr": "Tracking individual cycle time leads people to focus on looking good rather than improving team performance, causing them to pick easy tasks, rush work, and avoid collaboration. This does not improve actual delivery time and results in local optimisations that do not help deliver value. Focus on measuring and improving team flow metrics like lead time, work in progress, and throughput instead.",
      "date": "2025-03-12T16:30:03+00:00",
      "lastmod": "2025-03-12T16:30:03+00:00",
      "weight": 220.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "cbyRy2IJmM0",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-tracking-individual-cycle-time-distorts-team-behaviour",
      "aliases": [
        "/resources/cbyRy2IJmM0"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Kanban",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Flow Efficiency",
        "Software Development",
        "Team Performance",
        "Lean Principles",
        "Lean Thinking",
        "Lead Time",
        "Operational Practices",
        "Self Organisation",
        "Value Delivery",
        "Team Collaboration",
        "Continuous Improvement",
        "Organisational Agility",
        "Product Delivery",
        "Time to Market"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7305626135789273089",
          "post_id": "7305626135789273089",
          "post_date": "2025-03-12T16:30:03Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:15Z",
        "short_title": "2025-07-07T16:45:28Z",
        "tldr": "2025-08-07T12:34:56Z"
      }
    },
    "BodyContent": "When you track individual's cycle time, you aren’t just measuring the wrong thing—you’re actively distorting behaviour.\n\nPeople will start working in ways that make them look good instead of making the system better. They’ll cherry-pick the easiest tasks. They’ll rush work at the expense of quality. They’ll avoid collaborating because waiting on someone else makes their numbers worse.\n\nAnd guess what? The actual delivery time doesn’t improve. You just get more local optimisations that have nothing to do with getting value out the door.\n\nKanban isn’t about making individuals go faster. It’s about improving flow. You want to optimise lead time, work in progress (WIP), and throughput. That’s where speed comes from—not from pressuring individuals to move faster.\n\nHow are you measuring flow in your system?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-12-why-tracking-individual-cycle-time-distorts-team-behaviour\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-12-why-tracking-individual-cycle-time-distorts-team-behaviour",
    "ReferencePath": "resources/signals/2025-03-12-why-tracking-individual-cycle-time-distorts-team-behaviour"
  },
  {
    "FrontMatter": {
      "title": "Measuring Worker Speed in Manufacturing Plant Operations",
      "short_title": "Measuring Worker Speed in Manufacturing",
      "description": "Measuring individual worker speed in manufacturing or knowledge work can create bottlenecks; true efficiency comes from improving the whole system, not just individuals.",
      "tldr": "Focusing on individual worker speed in manufacturing or knowledge work does not improve overall delivery if the system has bottlenecks or delays. True speed comes from addressing system-wide issues, not by pushing individuals to work faster. Development managers should prioritize fixing process bottlenecks rather than measuring or incentivizing individual task completion speed.",
      "date": "2025-03-11T16:30:01+00:00",
      "lastmod": "2025-03-11T16:30:01+00:00",
      "weight": 705.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.2,
        "changefreq": "weekly"
      },
      "ResourceId": "QnAOVFfFPpx",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "measuring-worker-speed-in-manufacturing-plant-operations",
      "aliases": [
        "/resources/QnAOVFfFPpx"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tenet"
      ],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Systems Thinking",
        "Team Performance",
        "Lean Principles"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7305263740285865984",
          "post_id": "7305263740285865984",
          "post_date": "2025-03-11T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:17Z",
        "short_title": "2025-07-07T16:45:29Z",
        "tldr": "2025-08-07T12:34:58Z"
      }
    },
    "BodyContent": "Imagine a manufacturing plant where someone decides to measure how fast one worker moves a part from their station to the next.\n\nThey speed up. They move parts as fast as possible. But downstream, the parts pile up because the system isn’t ready for them. The bottleneck isn’t fixed. Nothing actually gets delivered faster.\n\nThis is exactly what happens when you measure individual cycle time in knowledge work. Someone finishing tasks quickly doesn’t mean anything if those tasks sit in queues, waiting on reviews, approvals, or handoffs.\n\nSpeed comes from fixing the system—not from pushing people to move faster.\n\nWho’s still measuring individual cycle time in 2025?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-11-measuring-worker-speed-in-manufacturing-plant-operations\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-11-measuring-worker-speed-in-manufacturing-plant-operations",
    "ReferencePath": "resources/signals/2025-03-11-measuring-worker-speed-in-manufacturing-plant-operations"
  },
  {
    "FrontMatter": {
      "title": "Velocity isn’t how many story points a team burns down",
      "short_title": "Velocity Is More Than Story Points Burned",
      "description": "Velocity measures how quickly teams turn ideas into value, using build, test, deploy, and feedback times—not just story points—to track real delivery speed.",
      "tldr": "Velocity is about how quickly your team delivers value, not just story points completed. Focus on measuring time to build, self-test, deploy, and learn from user feedback, as these are actionable and within your control. Start tracking these metrics to improve your delivery speed and effectiveness.",
      "date": "2025-03-10T16:30:02+00:00",
      "lastmod": "2025-03-10T16:30:02+00:00",
      "weight": 105.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.8,
        "changefreq": "weekly"
      },
      "ResourceId": "14E6bk6Lmo4",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "velocity-isn-t-how-many-story-points-a-team-burns-down",
      "aliases": [
        "/resources/14E6bk6Lmo4"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "DevOps",
        "Engineering Excellence"
      ],
      "tags": [
        "Software Development",
        "Continuous Delivery",
        "Metrics and Learning",
        "Operational Practices",
        "Time to Market",
        "Frequent Releases",
        "Technical Mastery",
        "Product Delivery",
        "Engineering Practices",
        "Team Performance",
        "Pragmatic Thinking",
        "Value Delivery",
        "Azure DevOps",
        "Flow Efficiency",
        "Market Adaptability"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7304901359516958721",
          "post_id": "7304901359516958721",
          "post_date": "2025-03-10T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:18Z",
        "short_title": "2025-07-07T16:45:31Z",
        "tldr": "2025-08-07T12:35:00Z"
      }
    },
    "BodyContent": "Velocity isn’t how many story points a team burns down. It’s how quickly you can turn an idea into value. That’s why the Azure DevOps team measured it using four key metrics:\n\n1. Time to Build: From code change to a successful build. Faster builds mean faster feedback.\n2. Time to Self-Test: How long automated tests take to run. The shorter, the better.\n3. Time to Deploy: How fast a validated build reaches production.\n4. Time to Learn: How quickly user feedback informs the next decision.\n\nThese metrics aren’t theoretical—they represent real stages in the flow of work, entirely within engineering’s control. No outside approval needed, no excuses. If you’re not measuring them, you’re not serious about continuous delivery.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-10-velocity-isn-t-how-many-story-points-a-team-burns-down\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-10-velocity-isn-t-how-many-story-points-a-team-burns-down",
    "ReferencePath": "resources/signals/2025-03-10-velocity-isn-t-how-many-story-points-a-team-burns-down"
  },
  {
    "FrontMatter": {
      "title": "Scrum Masters are not glorified meeting schedulers",
      "short_title": "Scrum Masters Need Technical Expertise",
      "description": "Scrum Masters must have technical and business expertise to guide teams, improve code quality, and drive real agility—not just schedule meetings. Coding skills are essential.",
      "tldr": "Scrum Masters must have strong technical and business skills, including coding knowledge and expertise in modern engineering practices, to effectively lead software teams. They should be able to challenge teams, identify technical debt, and promote quality, not just schedule meetings. Ensure your Scrum Master can engage with developers on technical topics to achieve real agility.",
      "date": "2025-03-09T16:30:01+00:00",
      "lastmod": "2025-03-09T16:30:01+00:00",
      "weight": 110.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.8,
        "changefreq": "weekly"
      },
      "ResourceId": "ASC0IjY5nKr",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-masters-are-not-glorified-meeting-schedulers",
      "aliases": [
        "/resources/ASC0IjY5nKr"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Technical Leadership",
        "Engineering Excellence"
      ],
      "tags": [
        "Software Development",
        "Technical Mastery",
        "Competence",
        "Engineering Practices",
        "Product Delivery",
        "Operational Practices",
        "Pragmatic Thinking",
        "Technical Excellence"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7304538965708013569",
          "post_id": "7304538965708013569",
          "post_date": "2025-03-09T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:19Z",
        "short_title": "2025-07-07T16:45:32Z",
        "tldr": "2025-08-07T12:35:01Z"
      }
    },
    "BodyContent": "Scrum Masters are not glorified meeting schedulers.\n\nThey are technical and business leaders who ensure that teams deliver continuous value. A Scrum Master for a team that delivers software that can’t critique code quality or understand DevOps practices is a Scrum Master in title only. For software teams, coding knowledge isn’t optional—it’s essential.\n\nMastery in modern engineering practices like CI/CD, automated testing, and infrastructure as code is non-negotiable. You can’t guide what you don’t understand.\n\nIf your Scrum Master doesn’t speak your Developers' language, how can they help them improve? An effective Scrum Master challenges the team, identifies technical debt, and fosters a culture of quality.\n\nWithout this, you’re not embracing true agility—just the illusion of it.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-09-scrum-masters-are-not-glorified-meeting-schedulers\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-09-scrum-masters-are-not-glorified-meeting-schedulers",
    "ReferencePath": "resources/signals/2025-03-09-scrum-masters-are-not-glorified-meeting-schedulers"
  },
  {
    "FrontMatter": {
      "title": "Agile Is Not Easier Than Traditional Methods: Common Misconceptions",
      "short_title": "Agile vs Traditional: Misconceptions Explained",
      "description": "Explains why Agile methods are often more challenging than traditional ones, highlighting common misconceptions, required discipline, and the need for true cross-functional teamwork.",
      "tldr": "Agile is often harder than traditional methods because it requires frequent delivery, decision-making with limited information, and handling uncertainty. Success depends on disciplined teams, strong collaboration, and a focus on delivering value, not just following a framework. Development managers should assess whether their teams are truly embracing Agile principles or simply following routines.",
      "date": "2025-03-08T16:30:01+00:00",
      "lastmod": "2025-03-08T16:30:01+00:00",
      "weight": 335.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "ZGwpGOoHHBQ",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "agile-is-not-easier-than-traditional-methods-common-misconceptions",
      "aliases": [
        "/resources/ZGwpGOoHHBQ"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Software Development",
        "Agile Philosophy",
        "Product Delivery",
        "Organisational Agility",
        "Social Technologies",
        "Pragmatic Thinking",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7304176577867665411",
          "post_id": "7304176577867665411",
          "post_date": "2025-03-08T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:21Z",
        "short_title": "2025-07-07T16:45:33Z",
        "tldr": "2025-08-07T12:35:06Z"
      }
    },
    "BodyContent": "One of the biggest misconceptions about Agile is that it’s “easier” than traditional approaches. The reality? It’s much harder.\n\nIn a traditional model, you had time—often too much of it. In Agile, you don’t. You need frequent working product. You need to make decisions with incomplete information and still deliver value. You need to embrace uncertainty, but not recklessness.\n\nIf you have work that isn’t refined, a deployment process that isn’t within the team’s control, or a team structure that still relies on functional silos—you’re making Agile harder than it needs to be.\n\nTrue agility demands more discipline, more cross-functional collaboration, and a relentless focus on delivering value. It’s not just a framework; it’s a commitment to excellence.\n\nAre you making Agile work for you, or are you just going through the motions?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-08-agile-is-not-easier-than-traditional-methods-common-misconceptions\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-08-agile-is-not-easier-than-traditional-methods-common-misconceptions",
    "ReferencePath": "resources/signals/2025-03-08-agile-is-not-easier-than-traditional-methods-common-misconceptions"
  },
  {
    "FrontMatter": {
      "title": "let-us be blunt—if a Scrum Team isn’t delivering, is it effective",
      "short_title": "Scrum Team Effectiveness and Delivery",
      "description": "Explores Scrum Team effectiveness, emphasising that consistent delivery is essential and highlighting the Scrum Master's accountability for enabling successful outcomes.",
      "tldr": "A Scrum Team is only effective if it consistently delivers usable product increments; without delivery, Scrum practices are just empty rituals. The Scrum Master is accountable for enabling the team to deliver by fixing any issues that block progress. If your team is not delivering, focus on identifying and removing obstacles to restore effectiveness.",
      "date": "2025-03-07T16:30:00+00:00",
      "lastmod": "2025-03-07T16:30:00+00:00",
      "weight": 385.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "CB56pgg1LmZ",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "let-us-be-blunt-if-a-scrum-team-isn-t-delivering-is-it-effective",
      "aliases": [
        "/resources/CB56pgg1LmZ"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Leadership"
      ],
      "tags": [
        "Software Development",
        "Team Performance",
        "Increment",
        "Scrum Master",
        "Product Delivery",
        "Working Software",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7303814187179266049",
          "post_id": "7303814187179266049",
          "post_date": "2025-03-07T16:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:23Z",
        "short_title": "2025-07-07T16:45:34Z",
        "tldr": "2025-08-07T12:35:09Z"
      }
    },
    "BodyContent": "Let’s be blunt—if a Scrum Team isn’t delivering, is it effective?\n\nScrum exists to deliver usable increments. Without that, everything else—standups, retros, sprints—is just theatre.\n\nSo if a team isn’t delivering, what happens? Who gets held accountable?\n\nThe Scrum Master.\n\nNot because they write the code, but because their job is to enable the system that produces working product every sprint.\n\nIf a team is stuck, their job is to unstick it.  \nIf delivery is failing, they must ensure the system is fixed to enable delivery.\n\nNo delivery? No effectiveness.\n\nDisagree? Let’s talk.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-07-let-us-be-blunt-if-a-scrum-team-isn-t-delivering-is-it-effective\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-07-let-us-be-blunt-if-a-scrum-team-isn-t-delivering-is-it-effective",
    "ReferencePath": "resources/signals/2025-03-07-let-us-be-blunt-if-a-scrum-team-isn-t-delivering-is-it-effective"
  },
  {
    "FrontMatter": {
      "title": "Scrum Master Effectiveness Begins with Consistent Delivery",
      "short_title": "Scrum Master Effectiveness Through Delivery",
      "description": "Explains why consistent delivery is essential for Scrum Master effectiveness, highlighting its role in enabling feedback, improvement, and team value in agile teams.",
      "tldr": "Scrum Master effectiveness depends on ensuring teams deliver something every sprint, as delivery enables feedback and improvement. Without delivery, there is no basis for learning or adding value. Development managers should prioritize consistent delivery as the foundation for team effectiveness and continuous improvement.",
      "date": "2025-03-06T16:30:29+00:00",
      "lastmod": "2025-03-06T16:30:29+00:00",
      "weight": 440.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "KWm8S39saqg",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-master-effectiveness-begins-with-consistent-delivery",
      "aliases": [
        "/resources/KWm8S39saqg"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Scrum Master",
        "Software Development",
        "Product Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7303451920952623106",
          "post_id": "7303451920952623106",
          "post_date": "2025-03-06T16:30:29Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:30Z",
        "short_title": "2025-07-07T16:45:35Z",
        "tldr": "2025-08-07T12:35:10Z"
      }
    },
    "BodyContent": "Scrum Masters love to talk about effectiveness, but here’s a reality check—effectiveness starts with delivery.\n\nA team that delivers something of low value can still inspect, adapt, and improve. A team that delivers nothing has nothing to improve.\n\nThe Scrum Master is accountable for effectiveness, and that starts with delivery.\n\nNo delivery means no feedback. No feedback means no improvement. No improvement means no value.\n\nDelivery is the minimum bar.\n\nScrum Masters—are you ensuring teams deliver every sprint? If not, what’s stopping you?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-06-scrum-master-effectiveness-begins-with-consistent-delivery\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-06-scrum-master-effectiveness-begins-with-consistent-delivery",
    "ReferencePath": "resources/signals/2025-03-06-scrum-master-effectiveness-begins-with-consistent-delivery"
  },
  {
    "FrontMatter": {
      "title": "Scrum Masters: Enabling Teams, Fostering Agility, Removing Blockers",
      "short_title": "Scrum Masters: Enabling Teams & Agility",
      "description": "Explains the Scrum Master's role in ensuring team delivery by fostering agility, removing blockers, and being accountable for improving team effectiveness each sprint.",
      "tldr": "Scrum Masters are responsible for ensuring teams deliver effectively by creating the right conditions for success, not just facilitating meetings or shielding teams from pressure. Their accountability lies in identifying and addressing blockers, improving team effectiveness, and ensuring consistent delivery each sprint. Development managers should hold Scrum Masters accountable for team delivery outcomes, not just process adherence.",
      "date": "2025-03-05T16:30:00+00:00",
      "lastmod": "2025-03-05T16:30:00+00:00",
      "weight": 345.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "IrDYI5d-kXv",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-masters-enabling-teams-fostering-agility-removing-blockers",
      "aliases": [
        "/resources/IrDYI5d-kXv"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Technical Leadership",
        "Leadership"
      ],
      "tags": [
        "Scrum Master",
        "Software Development",
        "Value Delivery",
        "Team Performance",
        "Product Delivery",
        "Professional Scrum",
        "Operational Practices",
        "Pragmatic Thinking",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7303089411485761536",
          "post_id": "7303089411485761536",
          "post_date": "2025-03-05T16:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:31Z",
        "short_title": "2025-07-07T16:45:36Z",
        "tldr": "2025-08-07T12:35:12Z"
      }
    },
    "BodyContent": "Scrum Masters talk about enabling teams, fostering agility, and removing blockers. But here’s the real question—are you accountable for delivery?\n\nToo many see Scrum Masters as facilitators, shielding teams from pressure. That’s missing the point. If a Scrum Team isn’t delivering, the Scrum Master is accountable for improving the effectiveness of the Scrum Team so that they can deliver.\n\nNot because they write code. Not because they own the backlog. But because it’s their job to create the conditions where delivery happens—every sprint.\n\nIf the team is stuck, who fixes it?  \nIf delivery is slow, who addresses the constraints?  \nIf the system is broken, who makes it better?\n\nThat’s the accountability of a Scrum Master. It’s not about doing the work—it’s about making sure the work gets done effectively.\n\nIf your teams aren’t delivering, shouldn’t someone be accountable for that?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-05-scrum-masters-enabling-teams-fostering-agility-removing-blockers\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-05-scrum-masters-enabling-teams-fostering-agility-removing-blockers",
    "ReferencePath": "resources/signals/2025-03-05-scrum-masters-enabling-teams-fostering-agility-removing-blockers"
  },
  {
    "FrontMatter": {
      "title": "Understanding Blocked Columns and Stalled Work in Project Boards",
      "short_title": "Blocked Columns vs Stalled Work in Project Boards",
      "description": "Explains why using blocked columns for stalled tasks on project boards harms workflow, and suggests better ways to highlight and address blocked work without losing progress.",
      "tldr": "Using a separate \"Blocked\" column on project boards makes stalled work seem normal, leading to forgotten tasks, inflated work-in-progress, and lost context. Instead, keep blocked items visible in their current workflow state and highlight or tag them so the team addresses issues quickly. Review your process to ensure blocked work is surfaced and resolved without becoming invisible.",
      "date": "2025-03-04T16:30:01+00:00",
      "lastmod": "2025-03-04T16:30:01+00:00",
      "weight": 305.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "6K6oGV9pRbC",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "understanding-blocked-columns-and-stalled-work-in-project-boards",
      "aliases": [
        "/resources/6K6oGV9pRbC"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Kanban",
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Software Development",
        "Team Performance",
        "Lean Thinking",
        "Flow Efficiency",
        "Operational Practices",
        "Miscellaneous"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7302727026837213184",
          "post_id": "7302727026837213184",
          "post_date": "2025-03-04T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:34Z",
        "short_title": "2025-07-07T16:45:37Z",
        "tldr": "2025-08-07T12:35:14Z"
      }
    },
    "BodyContent": "Blocked columns seem harmless—just another column to keep track of stalled work. But they aren’t harmless. They’re workflow kryptonite.\n\nHere’s the problem: A column should represent a state that work naturally flows through. But if your team is routinely moving work into “Blocked,” it means getting stuck has become part of the process. That’s a serious issue.\n\nWhat happens next? The work sits. The team assumes someone else will handle it. WIP limits inflate. Context gets lost. Tasks lose priority. Before you know it, the board is cluttered with forgotten work, and real progress is suffocating under the weight of “maybe someday.”\n\nA better approach? Keep blocked work in its current column. Tag it, highlight it, raise the alarm—but never let it disappear into a column that signals \"not my problem.\"\n\nHow does your team surface and handle blocked work?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-04-understanding-blocked-columns-and-stalled-work-in-project-boards\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-04-understanding-blocked-columns-and-stalled-work-in-project-boards",
    "ReferencePath": "resources/signals/2025-03-04-understanding-blocked-columns-and-stalled-work-in-project-boards"
  },
  {
    "FrontMatter": {
      "title": "Engineering can fix technical debt, but leadership has to invest in it",
      "short_title": "Leadership Investment in Technical Debt",
      "description": "Technical debt requires leadership investment to resolve; without support for automation and quality improvements, continuous delivery is not achievable for engineering teams.",
      "tldr": "Fixing technical debt requires leadership investment, not just harder work from engineers. Success comes from funding automation, better testing, and empowering teams to address issues directly. If continuous delivery is not happening, leaders should reconsider their priorities and support the necessary improvements.",
      "date": "2025-03-03T16:30:35+00:00",
      "lastmod": "2025-03-03T16:30:35+00:00",
      "weight": 130.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.8,
        "changefreq": "weekly"
      },
      "ResourceId": "XRePaJiX1kj",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "engineering-can-fix-technical-debt-but-leadership-has-to-invest-in-it",
      "aliases": [
        "/resources/XRePaJiX1kj"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Leadership",
        "Technical Leadership",
        "DevOps"
      ],
      "tags": [
        "Software Development",
        "Frequent Releases",
        "Continuous Delivery",
        "Engineering Practices",
        "Operational Practices",
        "Product Delivery",
        "Technical Excellence",
        "Technical Debt",
        "Market Adaptability",
        "Pragmatic Thinking",
        "Team Performance",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7302364782035161088",
          "post_id": "7302364782035161088",
          "post_date": "2025-03-03T16:30:35Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:35Z",
        "short_title": "2025-07-07T16:45:38Z",
        "tldr": "2025-08-07T12:35:16Z"
      }
    },
    "BodyContent": "Engineering can fix technical debt, but leadership has to invest in it. Without that investment, continuous delivery remains a pipe dream.\n\nCompanies don't succeed by asking teams to “work harder.” They funded the work to automate pipelines, improve test coverage, and shift left on quality. They empowered engineers to fix bottlenecks without waiting for external approval.\n\nContinuous delivery isn’t just an engineering challenge—it’s a leadership decision. If your teams can’t deliver continuously, ask yourself: what’s leadership prioritising instead?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-03-engineering-can-fix-technical-debt-but-leadership-has-to-invest-in-it\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-03-engineering-can-fix-technical-debt-but-leadership-has-to-invest-in-it",
    "ReferencePath": "resources/signals/2025-03-03-engineering-can-fix-technical-debt-but-leadership-has-to-invest-in-it"
  },
  {
    "FrontMatter": {
      "title": "At the end of the day, Kanban is about improving flow",
      "short_title": "Kanban Is About Improving Flow",
      "description": "Kanban focuses on improving workflow by removing bottlenecks and constraints, reducing work in progress, and increasing process efficiency—not by overworking people.",
      "tldr": "Kanban focuses on improving workflow by removing constraints and bottlenecks, not by pushing people to work harder or longer. Key to better delivery is reducing work in progress and identifying blockers to increase efficiency. Managers should identify and address the biggest constraint in their current workflow to see meaningful improvements.",
      "date": "2025-03-03T15:46:26+00:00",
      "lastmod": "2025-03-03T15:46:26+00:00",
      "weight": 470.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "laeSXbgT7Hm",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "at-the-end-of-the-day-kanban-is-about-improving-flow",
      "aliases": [
        "/resources/laeSXbgT7Hm"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Kanban",
        "Lean",
        "Product Development"
      ],
      "tags": [
        "Operational Practices",
        "Flow Efficiency",
        "Software Development",
        "Team Performance",
        "Lean Principles",
        "Lean Thinking",
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7302353671793639424",
          "post_id": "7302353671793639424",
          "post_date": "2025-03-03T15:46:26Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:36Z",
        "short_title": "2025-07-07T16:45:39Z",
        "tldr": "2025-08-07T12:35:17Z"
      }
    },
    "BodyContent": "At the end of the day, Kanban is about improving flow. Not micromanaging individuals. Not squeezing more hours out of people. Just removing the constraints that slow everything down.\n\nNigel Thurlow 🇺🇸🇺🇦🇬🇧 nails it:\n\n> “The Kanban Method is designed to improve flow (Process Cycle Efficiency) by improving throughput (units per unit time) by removing constraints (including bottlenecks) in the system.”\n\nWant better delivery? Don’t push people to work faster. Reduce WIP. Find the blockers. Improve efficiency. The system will take care of the rest.\n\nWhat’s the biggest constraint in your workflow right now?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-03-at-the-end-of-the-day-kanban-is-about-improving-flow\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-03-at-the-end-of-the-day-kanban-is-about-improving-flow",
    "ReferencePath": "resources/signals/2025-03-03-at-the-end-of-the-day-kanban-is-about-improving-flow"
  },
  {
    "FrontMatter": {
      "title": "Realistic Expectations When Hiring Junior Scrum Masters",
      "short_title": "Realistic Expectations When Hiring Junior Scrum Masters",
      "description": "Understand the risks of hiring inexperienced junior Scrum Masters, including higher costs, team issues, and project delays, versus investing in experienced agile leadership.",
      "tldr": "Hiring inexperienced Scrum Masters to save money often leads to poor team performance, delays, and lower product quality. The cost of inexperience outweighs any salary savings, while experienced Scrum Masters drive better results and team satisfaction. Invest in proven leadership to avoid costly failures and achieve faster, higher-quality delivery.",
      "date": "2025-03-02T16:30:02+00:00",
      "lastmod": "2025-03-02T16:30:02+00:00",
      "weight": 470.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "lm-SKQuLcVd",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "realistic-expectations-when-hiring-junior-scrum-masters",
      "aliases": [
        "/resources/lm-SKQuLcVd"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Leadership"
      ],
      "tags": [
        "Scrum Master"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7302002253777760257",
          "post_id": "7302002253777760257",
          "post_date": "2025-03-02T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:37Z",
        "short_title": "2025-07-07T16:45:41Z",
        "tldr": "2025-08-07T12:35:22Z"
      }
    },
    "BodyContent": "Hiring a junior Scrum Master at half the salary and expecting full performance is like hiring a junior chef and expecting a Michelin star!\n\nWhen the food is bad, it’s not the framework's fault. Scrum doesn’t fail—people do. Pay for expertise. Hire Scrum Masters who can lead, challenge, and deliver from day one.\n\nThe cost of inexperience is far higher than the salary savings. Agile isn’t cheap, but failure is even more expensive. Investing in an experienced Scrum Master means investing in better products, happier teams, and faster delivery. Cutting corners on leadership only leads to chaos, delays, and subpar outcomes.\n\nChoose wisely.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-02-realistic-expectations-when-hiring-junior-scrum-masters\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-02-realistic-expectations-when-hiring-junior-scrum-masters",
    "ReferencePath": "resources/signals/2025-03-02-realistic-expectations-when-hiring-junior-scrum-masters"
  },
  {
    "FrontMatter": {
      "title": "If software is not delivered, it is not valuable",
      "short_title": "If Software Isn't Delivered, It Has No Value",
      "description": "Undelivered software provides no value. Frequent, iterative releases reduce risk, cost, and failure, enabling faster learning and real user impact in software development.",
      "tldr": "Undelivered software provides no value, and long development cycles increase risk, cost, and missed opportunities. Research shows that teams releasing software frequently are more successful and efficient. To maximize value and learning, prioritize frequent delivery to users.",
      "date": "2025-03-01T16:30:03+00:00",
      "lastmod": "2025-03-01T16:30:03+00:00",
      "weight": 320.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "KMId0yk2uL1",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "if-software-is-not-delivered-it-is-not-valuable",
      "aliases": [
        "/resources/KMId0yk2uL1"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Frequent Releases",
        "Deployment Frequency",
        "Value Delivery",
        "Time to Market",
        "Product Delivery",
        "Metrics and Learning",
        "Market Adaptability",
        "Continuous Delivery",
        "Release Management",
        "Agile Philosophy",
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7301639871339597825",
          "post_id": "7301639871339597825",
          "post_date": "2025-03-01T16:30:03Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:38Z",
        "short_title": "2025-07-07T16:45:42Z",
        "tldr": "2025-08-07T12:35:25Z"
      }
    },
    "BodyContent": "If software is not delivered, it is not valuable.\n\nMany organizations invest months or years building features that never reach users. The longer software remains undelivered, the more risk, cost, and lost opportunity accumulate.\n\nThe CHAOS Report shows that long-cycle projects fail far more often than those with frequent, iterative releases. DORA research highlights that high-performing teams release more often, recover from failures faster, and reduce overall costs.\n\nIf you are not delivering frequently, you are not learning fast enough. Are you building products or just building assumptions?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-01-if-software-is-not-delivered-it-is-not-valuable\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-03-01-if-software-is-not-delivered-it-is-not-valuable",
    "ReferencePath": "resources/signals/2025-03-01-if-software-is-not-delivered-it-is-not-valuable"
  },
  {
    "FrontMatter": {
      "title": "Staging Environments Do Not Prevent Production Failures",
      "short_title": "Staging Environments Can't Prevent Failures",
      "description": "Staging environments can’t fully replicate production, often leading to false confidence. Real risk reduction comes from safe, incremental releases to actual users.",
      "tldr": "Staging environments do not truly prevent production failures because they cannot fully replicate real-world conditions, often giving teams a false sense of security. Leading teams now deploy changes incrementally to real users in production, using monitoring and automated safeguards to catch issues early. Consider shifting focus from pre-production testing to safer, controlled releases in production to reduce risk and respond faster to problems.",
      "date": "2025-02-28T16:30:01+00:00",
      "lastmod": "2025-02-28T16:30:01+00:00",
      "weight": 325.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "syS5yJ_GthF",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "staging-environments-do-not-prevent-production-failures",
      "aliases": [
        "/resources/syS5yJ_GthF"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "DevOps",
        "Engineering Excellence"
      ],
      "tags": [
        "Continuous Delivery",
        "Software Development",
        "Pragmatic Thinking",
        "Frequent Releases",
        "Release Management",
        "Technical Mastery",
        "Operational Practices",
        "Product Delivery",
        "Deployment Strategies",
        "Deployment Frequency",
        "Engineering Practices",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7301277475324461057",
          "post_id": "7301277475324461057",
          "post_date": "2025-02-28T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:40Z",
        "short_title": "2025-07-07T16:45:43Z",
        "tldr": "2025-08-07T12:35:27Z"
      }
    },
    "BodyContent": "There’s a hard truth most teams don’t want to hear: your staging environment isn’t saving you from production failures. It’s just giving you false confidence.\n\nFor years, teams have clung to the Dev-Test-Staging-Production model, thinking it’s the gold standard for safety. But here’s the problem—staging is a mirage. It never truly mirrors production, and every delay in feedback makes it harder to fix problems when they inevitably surface in the real world.\n\nThe reality? The only way to know how software behaves in production is to put it in production.\n\nThis is why the best engineering teams are ditching the old way in favour of audience-based deployment—rolling out changes incrementally to real users, in production, with observability and automated safeguards in place. This isn’t reckless; it’s smart.\n\nIf you’re still relying on pre-prod environments for confidence, it’s time to ask yourself: Are they really reducing risk, or just making failures more expensive?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-28-staging-environments-do-not-prevent-production-failures\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-28-staging-environments-do-not-prevent-production-failures",
    "ReferencePath": "resources/signals/2025-02-28-staging-environments-do-not-prevent-production-failures"
  },
  {
    "FrontMatter": {
      "title": "A two-day Scrum Master certification doesn’t make you a Scrum Master",
      "short_title": "Certification Alone Doesn’t Make a Scrum Master",
      "description": "Practical experience is essential for effective Scrum Masters; certification alone is insufficient. True expertise comes from guiding teams, solving challenges, and delivering value.",
      "tldr": "A two-day Scrum Master certification alone is not enough to prepare someone for the real challenges of leading Scrum Teams and delivering value. Effective Scrum Masters have hands-on experience, understand code quality and DevOps, and have navigated real-world obstacles. Companies should prioritize hiring or developing Scrum Masters with proven experience rather than relying solely on certifications.",
      "date": "2025-02-27T16:30:31+00:00",
      "lastmod": "2025-02-27T16:30:31+00:00",
      "weight": 320.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "aYJLiPejAHG",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "a-two-day-scrum-master-certification-doesn-t-make-you-a-scrum-master",
      "aliases": [
        "/resources/aYJLiPejAHG"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Product Development",
        "Technical Leadership",
        "Scrum"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Competence",
        "Software Development",
        "Product Delivery",
        "Professional Scrum",
        "Operational Practices",
        "Personal",
        "Agile Philosophy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7300915211945857024",
          "post_id": "7300915211945857024",
          "post_date": "2025-02-27T16:30:31Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:41Z",
        "short_title": "2025-07-07T16:45:45Z",
        "tldr": "2025-08-07T12:35:33Z"
      }
    },
    "BodyContent": "A two-day Scrum Master certification doesn’t make you a Scrum Master.\n\nReal Scrum Masters are forged in the fire of delivering value with high-performing Scrum Teams. They’ve experienced the chaos, the challenges, and the victories. They’ve lived the agile ethos, battled organisational impediments, and facilitated continuous improvement.\n\nTheir knowledge extends beyond theory; they understand code quality, modern DevOps practices, and the intricacies of product delivery. If your entire experience is a certification, you’re not ready. And companies? Don’t expect your multi-million-dollar product to be shepherded by someone whose qualification fits on a PDF.\n\nExperience matters. Invest in it. Agile is not a buzzword; it’s a commitment to excellence, and your Scrum Master must embody that commitment through hard-earned experience.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-27-a-two-day-scrum-master-certification-doesn-t-make-you-a-scrum-master\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-27-a-two-day-scrum-master-certification-doesn-t-make-you-a-scrum-master",
    "ReferencePath": "resources/signals/2025-02-27-a-two-day-scrum-master-certification-doesn-t-make-you-a-scrum-master"
  },
  {
    "FrontMatter": {
      "title": "Do More Staging Environments Really Reduce Deployment Risk",
      "short_title": "Do More Staging Environments Reduce Risk",
      "description": "Adding more staging environments does not reduce deployment risk; true safety comes from automated testing, continuous integration, and quality engineering practices.",
      "tldr": "Adding more staging environments does not actually reduce deployment risk; it only delays issue discovery and creates a false sense of security. Real risk reduction comes from investing in automated testing, continuous integration, and quality practices built into the development process. To minimize downtime and deployment risk, focus on modern engineering practices rather than adding more pre-production gates.",
      "date": "2025-02-26T16:30:31+00:00",
      "lastmod": "2025-02-26T16:30:31+00:00",
      "weight": 155.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "6VmmXorMZZW",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "do-more-staging-environments-really-reduce-deployment-risk",
      "aliases": [
        "/resources/6VmmXorMZZW"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "DevOps",
        "Product Development"
      ],
      "tags": [
        "Engineering Practices",
        "Operational Practices",
        "Frequent Releases",
        "Product Delivery",
        "Technical Excellence",
        "Software Development",
        "Automated Testing",
        "Continuous Delivery",
        "Continuous Integration",
        "Technical Mastery",
        "Pragmatic Thinking",
        "Test Automation",
        "Market Adaptability",
        "Deployment Frequency",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7300552825229434882",
          "post_id": "7300552825229434882",
          "post_date": "2025-02-26T16:30:31Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:42Z",
        "short_title": "2025-07-07T16:45:48Z",
        "tldr": "2025-08-07T12:35:39Z"
      }
    },
    "BodyContent": "The argument that more staging environments is rooted in a common fallacy: that staging environments reduce risk. They don’t. They create a false sense of security.\n\nWindows, Microsoft Teams, Starbucks POS; these platforms risk losing millions per hour during downtime. Yet they rely on continuous delivery and testing in production. Why? Because they understand that real safety comes from fast, automated feedback loops and quality built in from the start, not from artificial gates.\n\nThe only reason production deployments feel risky is because organisations underinvest in quality. Test-first development, continuous integration, automated testing, and audience-based deployments are proven strategies for reducing risk while delivering faster. Staging environments merely delay the discovery of issues—they don’t prevent them.\n\nIf your business can't tolerate downtime, the solution isn't more pre-production gates. It's engineering excellence through modern delivery practices. The choice isn't between staging or risk; it's between outdated practices and professionalism.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-26-do-more-staging-environments-really-reduce-deployment-risk\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-26-do-more-staging-environments-really-reduce-deployment-risk",
    "ReferencePath": "resources/signals/2025-02-26-do-more-staging-environments-really-reduce-deployment-risk"
  },
  {
    "FrontMatter": {
      "title": "Best Branching Strategies for Development Teams Explained",
      "short_title": "Best Branching Strategies for Dev Teams",
      "description": "Explains why environment-based branching slows development, and recommends using feature flags and progressive rollouts for simpler, faster, and safer code delivery.",
      "tldr": "Using separate branches for each environment increases complexity and slows feedback, making it harder to deliver value quickly. Teams should use branches to manage work in progress and rely on feature flags and progressive rollouts to control what users see. Review your current branching approach and consider simplifying it to speed up delivery and reduce risk.",
      "date": "2025-02-25T16:30:02+00:00",
      "lastmod": "2025-02-25T16:30:02+00:00",
      "weight": 245.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "9EP_gF2nD19",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "best-branching-strategies-for-development-teams-explained",
      "aliases": [
        "/resources/9EP_gF2nD19"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence",
        "DevOps",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Operational Practices",
        "Team Performance",
        "Deployment Strategies",
        "Modern Source Control",
        "Technical Mastery",
        "Product Delivery",
        "Release Management",
        "Frequent Releases"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7300190314370093060",
          "post_id": "7300190314370093060",
          "post_date": "2025-02-25T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:43Z",
        "short_title": "2025-07-07T16:45:50Z",
        "tldr": "2025-08-07T12:35:44Z"
      }
    },
    "BodyContent": "I see it all the time: teams structuring their branching strategy to mirror their environments. A dev branch for Dev, a staging branch for Staging, a release branch for Production.\n\nIt feels logical. It’s also a huge mistake.\n\nBranching by environment creates silos, increases complexity, and slows feedback loops to a crawl. Every additional branch is another place where drift can happen, another bottleneck before value reaches customers. Instead of using branches as proxies for environments, teams should deploy the same code everywhere and control exposure dynamically—with feature flags, progressive rollouts, and real-time observability.\n\nBranches should reflect work in progress, not artificial environments. If you’re still managing code like it’s 2005, it’s time to rethink how you deploy.\n\nHow does your team structure branches today? Is it helping or slowing you down?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-25-best-branching-strategies-for-development-teams-explained\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-25-best-branching-strategies-for-development-teams-explained",
    "ReferencePath": "resources/signals/2025-02-25-best-branching-strategies-for-development-teams-explained"
  },
  {
    "FrontMatter": {
      "title": "Scrum is built on empiricism—transparency, inspection, and adaptation",
      "short_title": "Scrum Empiricism: Transparency, Inspection, Adaptation",
      "description": "Explains why consistent delivery of usable increments is essential in Scrum, highlighting the Scrum Master's accountability for ensuring transparency, inspection, and adaptation.",
      "tldr": "Scrum relies on delivering a usable product increment every sprint, and if this does not happen, the team is not truly practicing Scrum. The Scrum Master is accountable for ensuring an environment where delivery is consistent and inevitable, with no excuses for missed increments. Development managers should ensure their Scrum Masters take ownership of delivery and address any barriers to producing usable increments each sprint.",
      "date": "2025-02-24T16:30:29+00:00",
      "lastmod": "2025-02-24T16:30:29+00:00",
      "weight": 535.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "P1tjFbyeVyU",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "scrum-is-built-on-empiricism-transparency-inspection-and-adaptation",
      "aliases": [
        "/resources/P1tjFbyeVyU"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Software Development",
        "Scrum Master",
        "Increment",
        "Working Software",
        "Professional Scrum",
        "Product Delivery",
        "Team Performance",
        "Agile Frameworks",
        "Pragmatic Thinking",
        "Value Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7299828040820289536",
          "post_id": "7299828040820289536",
          "post_date": "2025-02-24T16:30:29Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:44Z",
        "short_title": "2025-07-07T17:46:07Z",
        "tldr": "2025-08-07T12:35:48Z"
      }
    },
    "BodyContent": "Scrum is built on empiricism—transparency, inspection, and adaptation. But what happens when there’s nothing to inspect?\n\nA Scrum Team that isn’t delivering isn’t a Scrum Team at all. If every sprint doesn’t produce a usable increment, you’re not doing Scrum. Period.\n\nHere’s where the Scrum Master comes in. Their accountability isn’t just to the team—it’s to the organisation. The business depends on delivery. Customers depend on working products.\n\nIf delivery isn’t happening, the Scrum Master owns that failure. They are accountable for creating an environment where delivery is inevitable.\n\nNo increment? No excuses. Own it. Fix it. Deliver.\n\nThoughts? How does your org handle this accountability?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-24-scrum-is-built-on-empiricism-transparency-inspection-and-adaptation\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-24-scrum-is-built-on-empiricism-transparency-inspection-and-adaptation",
    "ReferencePath": "resources/signals/2025-02-24-scrum-is-built-on-empiricism-transparency-inspection-and-adaptation"
  },
  {
    "FrontMatter": {
      "title": "Why Organisations Believe Their Software Is Too Complex for CD",
      "short_title": "Software Complexity Myths in Continuous Delivery",
      "description": "Many organisations cite software complexity as a barrier to continuous delivery, but real obstacles are technical debt and lack of investment in quality and automation.",
      "tldr": "Software complexity is often used as an excuse to avoid continuous delivery, but real-world examples like Microsoft’s Azure DevOps team show that even large, complex systems can achieve frequent releases by investing in quality practices and addressing technical debt. The main barrier is not complexity but the willingness to make necessary improvements. Development managers should focus on fixing underlying issues rather than blaming complexity.",
      "date": "2025-02-24T10:51:31+00:00",
      "lastmod": "2025-02-24T10:51:31+00:00",
      "weight": 205.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "T-sHn-OUIvR",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-organisations-believe-their-software-is-too-complex-for-cd",
      "aliases": [
        "/resources/T-sHn-OUIvR"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "DevOps"
      ],
      "tags": [
        "Software Development",
        "Technical Mastery",
        "Frequent Releases",
        "Product Delivery",
        "Continuous Delivery",
        "Pragmatic Thinking",
        "Value Delivery",
        "Operational Practices",
        "Engineering Practices",
        "Technical Excellence"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7299742737925300224",
          "post_id": "7299742737925300224",
          "post_date": "2025-02-24T10:51:31Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:45Z",
        "short_title": "2025-07-07T17:46:08Z",
        "tldr": "2025-08-07T12:35:50Z"
      }
    },
    "BodyContent": "Every organisation claims their software is too complex for continuous delivery. It’s not. Complexity is an excuse, not a blocker.\n\nMicrosoft’s Azure DevOps team proved it. They moved from shipping new features every two years to every three weeks. At their peak, they were delivering nearly 300 features annually. This wasn’t because their codebase got simpler—it didn’t. They invested in quality practices, tackled technical debt head-on, and built the pipelines needed to deliver continuously.\n\nThe real blocker isn’t complexity. It’s the willingness to invest in fixing what’s broken. If Microsoft can do it at their scale, with their legacy systems, what’s your excuse?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-24-why-organisations-believe-their-software-is-too-complex-for-cd\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-24-why-organisations-believe-their-software-is-too-complex-for-cd",
    "ReferencePath": "resources/signals/2025-02-24-why-organisations-believe-their-software-is-too-complex-for-cd"
  },
  {
    "FrontMatter": {
      "title": "What Makes an Effective Scrum Master Beyond Meeting Facilitation",
      "short_title": "Qualities of an Effective Scrum Master",
      "description": "Explores key qualities of an effective Scrum Master, focusing on team empowerment, backlog management, collaboration, and removing organisational barriers for lasting impact.",
      "tldr": "An effective Scrum Master builds a self-sustaining team that consistently delivers valuable, high-quality products by enabling data-driven planning, supporting meaningful backlog management, removing organizational obstacles, and fostering true cross-team collaboration. Their real value is seen when the team thrives independently rather than relying on constant guidance. If your team would struggle without the Scrum Master, it may be time to reassess their approach.",
      "date": "2025-02-23T16:30:01+00:00",
      "lastmod": "2025-02-23T16:30:01+00:00",
      "weight": 380.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "uTkyoIh6f3c",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "what-makes-an-effective-scrum-master-beyond-meeting-facilitation",
      "aliases": [
        "/resources/uTkyoIh6f3c"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Scrum",
        "Product Development",
        "Technical Leadership"
      ],
      "tags": [
        "Scrum Master",
        "Software Development",
        "Pragmatic Thinking",
        "Professional Scrum",
        "Team Collaboration",
        "Social Technologies",
        "Product Delivery",
        "Team Performance",
        "Value Delivery",
        "Coaching",
        "Agile Leadership",
        "Agile Frameworks",
        "Operational Practices",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7299465533391843329",
          "post_id": "7299465533391843329",
          "post_date": "2025-02-23T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:46Z",
        "short_title": "2025-07-07T17:46:14Z",
        "tldr": "2025-08-07T12:35:59Z"
      }
    },
    "BodyContent": "A great Scrum Master isn’t measured by how well they facilitate meetings. It’s not about whether the Daily Scrum starts on time or if they keep the Sprint Retrospective engaging.\n\nA successful Scrum Master leaves behind a self-sustaining team—one that delivers valuable, high-quality products with predictability.\n\nTheir impact shows up in:\n- Empirical product planning—helping teams and stakeholders navigate uncertainty with real data.\n- Product Backlog management—supporting the Product Owner in defining goals that actually drive value.\n- Removing organisational barriers—not just within the team, but across the business.\n- Enabling cross-functional collaboration—making silos obsolete.\n- Helping the team deliver Done increments—not just finishing tasks, but delivering outcomes.\n\nIf a Scrum Master disappears and the team falls apart, they weren’t coaching. They were hand-holding.\n\nWant to know if your Scrum Master is effective? Ask yourself: Is the team better because of them?\n\nIf the answer isn’t a clear yes, something needs to change.\n\nWhat does a high-impact Scrum Master look like in your experience?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-23-what-makes-an-effective-scrum-master-beyond-meeting-facilitation\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-23-what-makes-an-effective-scrum-master-beyond-meeting-facilitation",
    "ReferencePath": "resources/signals/2025-02-23-what-makes-an-effective-scrum-master-beyond-meeting-facilitation"
  },
  {
    "FrontMatter": {
      "title": "Deploying Windows OS Directly to Production: Then vs Now",
      "short_title": "Deploying Windows OS: Past vs Present",
      "description": "Explains how Windows OS updates shifted from infrequent, risky releases to safe, staged rollouts using ring-based deployment and real-time user feedback for reliability.",
      "tldr": "Microsoft now deploys Windows updates directly to production using a gradual, ring-based rollout that starts with internal users and expands outward, guided by real-time feedback and telemetry. This approach catches issues early and enables safe, incremental releases even across complex environments. Development managers should consider adopting similar staged deployment strategies to improve release quality and responsiveness.",
      "date": "2025-02-22T16:30:00+00:00",
      "lastmod": "2025-02-22T16:30:00+00:00",
      "weight": 295.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "6FqFYeSHQBg",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "deploying-windows-os-directly-to-production-then-vs-now",
      "aliases": [
        "/resources/6FqFYeSHQBg"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "Engineering Excellence",
        "DevOps"
      ],
      "tags": [
        "Windows",
        "Deployment Strategies",
        "Pragmatic Thinking",
        "Frequent Releases",
        "Metrics and Learning",
        "Continuous Delivery",
        "Continuous Improvement",
        "Operational Practices",
        "Customer Focus",
        "Software Development",
        "Product Delivery",
        "Release Management",
        "Deployment Frequency",
        "Organisational Agility",
        "Continuous Learning"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7299103145975042048",
          "post_id": "7299103145975042048",
          "post_date": "2025-02-22T16:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:48Z",
        "short_title": "2025-07-07T17:46:15Z",
        "tldr": "2025-08-07T12:36:02Z"
      }
    },
    "BodyContent": "The idea of deploying an operating system like Windows directly to production would have been unthinkable a decade ago. But that’s exactly what Microsoft does now.\n\nThe old way, shipping a monolithic OS update every few years, was slow, brittle, and disconnected from real users. They needed faster feedback and a way to catch issues early.\n\nEnter ring-based deployment.\n\nInstead of shipping to everyone at once, Windows updates now roll out gradually:\n\n- ✅ First to internal engineers.\n- ✅ Then to Microsoft employees.\n- ✅ Then to millions of Windows Insiders across multiple tiers.\n- ✅ Finally, to general availability.\n\nAt every step, telemetry dictates whether a release moves forward or stops. Issues are identified before they hit the full user base.\n\nWindows is a local install. It runs on 900 million machines across an infinite combination of hardware and software. And yet, they still found a way to deploy incrementally, learn from real users, and roll forward safely.\n\nIf they can do it, what’s stopping your team?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-22-deploying-windows-os-directly-to-production-then-vs-now\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-22-deploying-windows-os-directly-to-production-then-vs-now",
    "ReferencePath": "resources/signals/2025-02-22-deploying-windows-os-directly-to-production-then-vs-now"
  },
  {
    "FrontMatter": {
      "title": "Rethinking Dev-Test-Staging-Production Pipelines for Safety",
      "short_title": "Rethinking Dev-Test-Staging Pipelines",
      "description": "Explores why traditional Dev-Test-Staging-Production pipelines fall short and highlights audience-based deployment for safer, faster feedback in real production environments.",
      "tldr": "Traditional Dev-Test-Staging-Production pipelines give a false sense of security because staging environments do not truly reflect production, leading to missed issues and wasted resources. Modern teams should focus on releasing to small user groups in production and using real feedback to guide rollouts. Consider shifting from heavy pre-release testing to faster, data-driven feedback in production to improve safety and efficiency.",
      "date": "2025-02-21T16:30:30+00:00",
      "lastmod": "2025-02-21T16:30:30+00:00",
      "weight": 210.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "3oUXWDsN6Qa",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "rethinking-dev-test-staging-production-pipelines-for-safety",
      "aliases": [
        "/resources/3oUXWDsN6Qa"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "Product Development",
        "DevOps"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Product Delivery",
        "Software Development",
        "Value Delivery",
        "Frequent Releases",
        "Deployment Strategies",
        "Technical Mastery",
        "Market Adaptability",
        "Continuous Delivery",
        "Release Management",
        "Operational Practices",
        "Product Validation",
        "Metrics and Learning",
        "Engineering Practices",
        "Agentic Engineering"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7298740880612446209",
          "post_id": "7298740880612446209",
          "post_date": "2025-02-21T16:30:30Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:49Z",
        "short_title": "2025-07-07T17:46:16Z",
        "tldr": "2025-08-07T12:36:04Z"
      }
    },
    "BodyContent": "For years, we convinced ourselves that Dev-Test-Staging-Production pipelines kept us safe. If we just had one more layer of validation and one more environment to test in, we'd catch the problems before they hit production.\n\nExcept… that was a lie.\n\nStaging environments aren’t production. They’re expensive illusions of safety. The data is different. The scale is different. The behaviours are different. And when failures inevitably show up in production anyway, teams scramble, wondering why their extensive pre-release testing didn’t catch the issue.\n\nModern software delivery isn’t about pretending production doesn’t exist; it’s about embracing it. Audience-based deployment (sometimes called ring-based deployment) is the smarter approach: releasing features to small, targeted user groups first, monitoring real-world behaviour, and expanding based on what the data tells us.\n\nYou don’t need more pre-production gates. You need faster feedback in production.\n\nAre you still clinging to staging environments? What’s stopping you from moving forward?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-21-rethinking-dev-test-staging-production-pipelines-for-safety\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-21-rethinking-dev-test-staging-production-pipelines-for-safety",
    "ReferencePath": "resources/signals/2025-02-21-rethinking-dev-test-staging-production-pipelines-for-safety"
  },
  {
    "FrontMatter": {
      "title": "Why Using a Blocked Column in Azure DevOps Is a Mistake",
      "short_title": "Avoiding Blocked Columns in Azure DevOps",
      "description": "Explains why a “Blocked” column in Azure DevOps hinders workflow, and suggests using tags and tracking to manage blocked work more effectively and visibly.",
      "tldr": "Using a blocked column in Azure DevOps causes work to stall and be forgotten, rather than resolved. Instead, use a visible blocked tag and keep items in their active state to maintain focus and encourage action. Track blockages to address root causes and keep work moving.",
      "date": "2025-02-20T16:30:01+00:00",
      "lastmod": "2025-02-20T16:30:01+00:00",
      "weight": 290.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "H8CRQrD64JY",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-using-a-blocked-column-in-azure-devops-is-a-mistake",
      "aliases": [
        "/resources/H8CRQrD64JY"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Kanban",
        "DevOps"
      ],
      "tags": [
        "Azure DevOps",
        "Operational Practices",
        "Pragmatic Thinking",
        "Team Performance",
        "Software Development",
        "Transparency",
        "Azure Boards"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7298378372592590848",
          "post_id": "7298378372592590848",
          "post_date": "2025-02-20T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:50Z",
        "short_title": "2025-07-07T17:46:18Z",
        "tldr": "2025-08-07T12:36:08Z"
      }
    },
    "BodyContent": "If your team is using a “Blocked” column in Azure DevOps, you’re probably doing it wrong.\n\nWhy? Because work doesn’t flow through blocked—it stops there. And once it’s there, it tends to stay there.\n\nInstead of a blocked column, try this:\n\n- Use a Blocked tag on work items.\n- Colour-code the tag for visibility.\n- Keep blocked work in its active state on the board.\n- Track the frequency and causes of blockages.\n\nThis keeps the problem in sight while preventing blocked work from becoming a dumping ground. More importantly, it helps teams take action instead of waiting for work to magically resolve itself.\n\nHow does your team flag 'blocked' work?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-20-why-using-a-blocked-column-in-azure-devops-is-a-mistake\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-20-why-using-a-blocked-column-in-azure-devops-is-a-mistake",
    "ReferencePath": "resources/signals/2025-02-20-why-using-a-blocked-column-in-azure-devops-is-a-mistake"
  },
  {
    "FrontMatter": {
      "title": "How Top Scrum Masters Are Selected by Their Teams",
      "short_title": "How Scrum Masters Are Chosen by Teams",
      "description": "Explains how Scrum Masters are naturally chosen by teams based on trust, experience, and leadership, highlighting the importance of peer selection over external assignment.",
      "tldr": "The most effective Scrum Masters are chosen by their teams based on trust, experience, and proven leadership, not assigned from outside. Teams naturally follow those who have already guided them through challenges and earned their respect. To ensure real impact and avoid resistance, let the team identify who they trust to lead as Scrum Master.",
      "date": "2025-02-19T16:30:01+00:00",
      "lastmod": "2025-02-19T16:30:01+00:00",
      "weight": 385.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "dqFTsIhZF_A",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "how-top-scrum-masters-are-selected-by-their-teams",
      "aliases": [
        "/resources/dqFTsIhZF_A"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Technical Leadership",
        "Leadership"
      ],
      "tags": [
        "Software Development",
        "Pragmatic Thinking",
        "Scrum Master",
        "Organisational Culture",
        "Team Motivation",
        "Social Technologies",
        "Agile Leadership",
        "Team Collaboration",
        "Professional Scrum",
        "Organisational Agility"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7298015983284211713",
          "post_id": "7298015983284211713",
          "post_date": "2025-02-19T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:51Z",
        "short_title": "2025-07-07T17:46:20Z",
        "tldr": "2025-08-07T12:36:25Z"
      }
    },
    "BodyContent": "The best Scrum Masters don’t apply for the role—they are chosen by their peers.\n\nThey’ve earned trust, respect, and credibility through years of hands-on experience. They have seen the inner workings of Scrum Teams, understood the dynamics, and proven themselves as effective leaders.\n\nThese are the individuals who have facilitated complex conversations, resolved conflicts, and guided teams through turbulent times. If you want a Scrum Master who can drive real change, look at who your team already turns to for guidance.\n\nAssigning the role to someone external without the team's buy-in is a recipe for friction, not agility. Trust matters and the team’s voice matters even more. An authentic Scrum Master emerges naturally, gaining authority through action, not assignment.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-19-how-top-scrum-masters-are-selected-by-their-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-19-how-top-scrum-masters-are-selected-by-their-teams",
    "ReferencePath": "resources/signals/2025-02-19-how-top-scrum-masters-are-selected-by-their-teams"
  },
  {
    "FrontMatter": {
      "title": "Key Skills Scrum Masters Need: Technical, Business, Organisational",
      "short_title": "Key Skills Scrum Masters Need",
      "description": "Scrum Masters need technical, business, and organisational skills to guide teams, remove obstacles, drive value, and lead effective agile transformation.",
      "tldr": "Scrum Masters need strong technical, business, and organisational skills to lead teams, align with business goals, and remove obstacles effectively. Experience and real leadership matter more than certifications. To achieve true agility, hire Scrum Masters who demonstrate competence and bold leadership.",
      "date": "2025-02-18T16:30:30+00:00",
      "lastmod": "2025-02-18T16:30:30+00:00",
      "weight": 455.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "KVrBKTQ-Yc-",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "key-skills-scrum-masters-need-technical-business-organisational",
      "aliases": [
        "/resources/KVrBKTQ-Yc-"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Leadership",
        "Product Development",
        "Scrum"
      ],
      "tags": [
        "Competence",
        "Scrum Master",
        "Organisational Agility",
        "Agile Leadership",
        "Pragmatic Thinking",
        "Agile Transformation"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7297653718320046080",
          "post_id": "7297653718320046080",
          "post_date": "2025-02-18T16:30:30Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:52Z",
        "short_title": "2025-07-07T17:46:23Z",
        "tldr": "2025-08-07T12:36:29Z"
      }
    },
    "BodyContent": "Scrum Masters must master three domains: technical, business, and organisational.\n\nAnything less is a disservice to the team, the Product Owner, and the business.\n\nThey must navigate complex systems, align work with strategic objectives, and confidently cause the removal of obstacles. An effective Scrum Master understands software development, advocates for business value, and influences organisational change. If you want real agility, hire real leaders.\n\nCertifications fade, but competence built through experience endures. Demand more from your Scrum Masters, and they will deliver more for your business.\n\nTrue agility requires bold leadership, and your Scrum Master must be that leader.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-18-key-skills-scrum-masters-need-technical-business-organisational\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-18-key-skills-scrum-masters-need-technical-business-organisational",
    "ReferencePath": "resources/signals/2025-02-18-key-skills-scrum-masters-need-technical-business-organisational"
  },
  {
    "FrontMatter": {
      "title": "The fastest way to cripple a Scrum Team? Hire the wrong Scrum Master",
      "short_title": "Hiring the Wrong Scrum Master Cripples Teams",
      "description": "Hiring an unqualified Scrum Master limits team growth, reduces agility, and hinders value delivery. Effective Scrum Masters drive change, coaching, and business alignment.",
      "tldr": "Hiring the wrong Scrum Master, especially one who acts as a process admin rather than a true agile leader, can seriously harm a Scrum Team. Effective Scrum Masters coach teams toward self-management, challenge obstacles, and connect engineering with business goals. To enable real agility and high performance, hire Scrum Masters who drive change and value, not just manage meetings.",
      "date": "2025-02-17T16:30:17+00:00",
      "lastmod": "2025-02-17T16:30:17+00:00",
      "weight": 280.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "567GkDxvlbX",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-fastest-way-to-cripple-a-scrum-team-hire-the-wrong-scrum-master",
      "aliases": [
        "/resources/567GkDxvlbX"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Technical Leadership",
        "Product Development",
        "Scrum"
      ],
      "tags": [
        "Software Development",
        "Scrum Master",
        "Competence",
        "Organisational Agility",
        "Social Technologies",
        "Pragmatic Thinking",
        "Market Adaptability",
        "Team Performance",
        "Value Delivery",
        "Professional Scrum",
        "Coaching",
        "Operational Practices",
        "Team Motivation"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7297291278071853056",
          "post_id": "7297291278071853056",
          "post_date": "2025-02-17T16:30:17Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:53Z",
        "short_title": "2025-07-07T17:46:25Z",
        "tldr": "2025-08-07T12:36:33Z"
      }
    },
    "BodyContent": "The fastest way to cripple a Scrum Team? Hire the wrong Scrum Master.\n\nToo many companies mistake the Scrum Master for a process admin. Someone to book meetings, write Jira tickets, and make sure the team follows “the rules.”\n\nThat’s not a Scrum Master. That’s an event planner.\n\nThe real Scrum Master is a lean-agile practitioner—someone who understands product strategy, DevOps, modern engineering, and team dynamics. They’re a change agent, not a note-taker.\n\nA strong Scrum Master:\n\n- Coaches the team to be self-managing, so they don’t depend on them.\n- Challenges the status quo and removes obstacles, instead of just escalating them.\n- Understands what good looks like in both product and engineering.\n- Connects the team with the business, ensuring alignment on value delivery.\n\nA weak Scrum Master? They turn into a Scrum Secretary, maintaining the illusion of agility while the team stagnates.\n\nIf you want Scrum to actually work, hire someone who sees Scrum as an enabler of high-performance teams—not just a set of meetings.\n\nSeen this mistake before?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-17-the-fastest-way-to-cripple-a-scrum-team-hire-the-wrong-scrum-master\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-17-the-fastest-way-to-cripple-a-scrum-team-hire-the-wrong-scrum-master",
    "ReferencePath": "resources/signals/2025-02-17-the-fastest-way-to-cripple-a-scrum-team-hire-the-wrong-scrum-master"
  },
  {
    "FrontMatter": {
      "title": "Would you hire a Junior CISO? A Junior Financial Director",
      "short_title": "Why Junior Scrum Masters Undermine Agility",
      "description": "Scrum Masters require proven expertise, not entry-level skills. Hiring juniors in this role risks team performance and agile success; experience is essential for effective leadership.",
      "tldr": "Hiring a junior Scrum Master is risky because the role requires proven expertise in technical, business, and organisational areas from the start, similar to senior roles like CISO or Financial Director. Scrum Masters must lead teams and drive change, not learn on the job. Only hire experienced Scrum Masters to ensure your team's success and true agility.",
      "date": "2025-02-17T10:06:07+00:00",
      "lastmod": "2025-02-17T10:06:07+00:00",
      "weight": 430.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "Lj-8s76yXLP",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "would-you-hire-a-junior-ciso-a-junior-financial-director",
      "aliases": [
        "/resources/Lj-8s76yXLP"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Scrum",
        "Technical Leadership",
        "Leadership"
      ],
      "tags": [
        "Competence",
        "Software Development",
        "Scrum Master",
        "Pragmatic Thinking",
        "Agile Leadership"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7297194597825363968",
          "post_id": "7297194597825363968",
          "post_date": "2025-02-17T10:06:07Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:54Z",
        "short_title": "2025-07-07T17:46:26Z",
        "tldr": "2025-08-07T12:36:35Z"
      }
    },
    "BodyContent": "Would you hire a Junior CISO? A Junior Financial Director?\n\nOf course not.\n\nThese roles demand mastery, not potential. So why do some think a \"Junior Scrum Master\" is acceptable?\n\nScrum Masters must demonstrate technical, business, and organisational mastery from day one. They are the glue that holds agile teams together, ensuring continuous delivery of value through expertise, not guesswork. Anything less is a liability.\n\nThey are not learning on the job; they are leading from the front, navigating complex challenges, and driving organisational change.\n\nStop looking for junior Scrum Masters. Find those who have already earned their stripes within a Scrum Team. Your team deserves nothing less, and your product’s success depends on it. True agility comes from experience, and your Scrum Master must embody that.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-17-would-you-hire-a-junior-ciso-a-junior-financial-director\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-17-would-you-hire-a-junior-ciso-a-junior-financial-director",
    "ReferencePath": "resources/signals/2025-02-17-would-you-hire-a-junior-ciso-a-junior-financial-director"
  },
  {
    "FrontMatter": {
      "title": "Hiring a Scrum Master is hard",
      "short_title": "Hiring a Scrum Master is hard",
      "description": "Finding a skilled Scrum Master is challenging; true effectiveness requires deep Scrum knowledge, coaching ability, and alignment with your team's business and technical needs.",
      "tldr": "Hiring a Scrum Master is challenging because many organizations misunderstand the role and focus on the wrong qualifications. A strong Scrum Master needs deep knowledge of Scrum, the ability to drive team effectiveness, and enough technical understanding to support your teams and foster change. Look for candidates who demonstrate commitment, challenge assumptions, and coach teams to deliver real value, not just those with certifications or project management backgrounds.",
      "date": "2025-02-16T16:30:01+00:00",
      "lastmod": "2025-02-16T16:30:01+00:00",
      "weight": 390.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "CHfV0DI2Plv",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "hiring-a-scrum-master-is-hard",
      "aliases": [
        "/resources/CHfV0DI2Plv"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Scrum",
        "Technical Leadership",
        "Product Development"
      ],
      "tags": [
        "Scrum Master",
        "Organisational Agility",
        "Competence",
        "Pragmatic Thinking",
        "Product Delivery",
        "Professional Scrum",
        "Software Development",
        "Social Technologies"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7296928820975026176",
          "post_id": "7296928820975026176",
          "post_date": "2025-02-16T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:56Z",
        "short_title": "2025-07-07T17:46:28Z",
        "tldr": "2025-08-07T12:39:27Z"
      }
    },
    "BodyContent": "Hiring a Scrum Master is hard. Not because the role is rare—there are plenty of CVs with “Scrum Master” slapped on them—but because too many organisations still don’t know what they actually need.\n\nA Scrum Master isn’t a project manager with a fancy title. They’re accountable for the effectiveness of the Scrum Team, which means they need a deep understanding of Scrum as a social technology and how it enables adaptive solutions.\n\nDo they need to be technical? Not necessarily, but likely. They need to understand what effective looks like in your business and technical domain. A Scrum Master who can’t speak the language of your teams won’t be much use when it comes to removing impediments, coaching the team, and driving organisational change.\n\nA certification isn’t a guarantee of competence, but it’s a decent starting point. If someone isn’t willing to spend $200 on a PSM I or $250 on a PSM II to validate their knowledge, what does that say about their commitment?\n\nIf you want a Scrum Master who makes a difference, stop looking for someone to “run stand-ups” and start looking for someone who challenges assumptions, coaches teams, and ensures delivery of real value.\n\nHiring? Or struggling to define what a Scrum Master should do?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-16-hiring-a-scrum-master-is-hard\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-16-hiring-a-scrum-master-is-hard",
    "ReferencePath": "resources/signals/2025-02-16-hiring-a-scrum-master-is-hard"
  },
  {
    "FrontMatter": {
      "title": "Not all delays are the same",
      "short_title": "Types of Delays: Waiting vs Blocked Tasks",
      "description": "Explains the difference between waiting and blocked tasks, why clear distinction matters in workflows, and how to track and address sources of delay for better optimisation.",
      "tldr": "Not all delays are equal; waiting for approval is different from being blocked by missing dependencies. Treating all delays as blocks hides real workflow issues and reduces accountability. Make delay sources explicit, track idle time, and highlight true blockers to identify and fix underlying problems.",
      "date": "2025-02-15T16:30:01+00:00",
      "lastmod": "2025-02-15T16:30:01+00:00",
      "weight": 310.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "pgCUc2qV2_q",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "not-all-delays-are-the-same",
      "aliases": [
        "/resources/pgCUc2qV2_q"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Kanban"
      ],
      "tags": [
        "Operational Practices",
        "Team Performance",
        "Miscellaneous",
        "Pragmatic Thinking",
        "Metrics and Learning",
        "Continuous Improvement",
        "Value Stream Management"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7296566434187431936",
          "post_id": "7296566434187431936",
          "post_date": "2025-02-15T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:57Z",
        "short_title": "2025-07-07T17:46:29Z",
        "tldr": "2025-08-07T12:39:29Z"
      }
    },
    "BodyContent": "Not all delays are the same.\n\nA task waiting on legal approval isn’t blocked—it’s in a waiting state. A task that needs a missing dependency to proceed is actually blocked. These distinctions matter.\n\nWhy? Because treating “waiting” as “blocked” distorts your workflow. It hides the real problem areas and makes it harder to optimise the system. It also encourages teams to wash their hands of responsibility—“It’s in blocked, so it’s not on me.”\n\nA better approach? Make the source of delay explicit. Use tags, highlight blockers visually, and—most importantly—track how long work sits idle. The goal isn’t just to know something is blocked; it’s to fix the systemic issue behind it.\n\nHow does your team make these distinctions visible?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-15-not-all-delays-are-the-same\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-15-not-all-delays-are-the-same",
    "ReferencePath": "resources/signals/2025-02-15-not-all-delays-are-the-same"
  },
  {
    "FrontMatter": {
      "title": "Why Engineering Teams Use Staging Environments for Risk Reduction",
      "short_title": "Staging Environments for Risk Reduction",
      "description": "Explores how staging environments aim to reduce risk in software development, their hidden costs, and modern alternatives like feature flags and progressive rollouts.",
      "tldr": "Staging environments are intended to reduce risk but often lead to wasted time, delayed feedback, and extra costs without truly preventing failures. Modern practices like feature flags, progressive rollouts, and real-time monitoring can help teams deploy safely to production while reducing waste. Consider whether maintaining staging environments is actually benefiting your team or just adding unnecessary overhead.",
      "date": "2025-02-14T16:30:01+00:00",
      "lastmod": "2025-02-14T16:30:01+00:00",
      "weight": 230.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "r8qUPpdsgnM",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "why-engineering-teams-use-staging-environments-for-risk-reduction",
      "aliases": [
        "/resources/r8qUPpdsgnM"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tool"
      ],
      "categories": [
        "Engineering Excellence",
        "DevOps",
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Operational Practices",
        "Software Development",
        "Frequent Releases",
        "Technical Mastery",
        "Product Delivery",
        "Deployment Strategies",
        "Release Management",
        "Engineering Practices"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7296204045302575104",
          "post_id": "7296204045302575104",
          "post_date": "2025-02-14T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:58Z",
        "short_title": "2025-07-07T17:46:31Z",
        "tldr": "2025-08-07T12:39:31Z"
      }
    },
    "BodyContent": "Ask most engineering teams why they use staging environments, and they’ll tell you it’s about risk reduction. But few stop to measure the real cost.\n\nHere’s what Dev-Test-Staging actually costs you:\n\n- Time wasted debugging in an environment that isn’t production.\n- Context switching and relearning when teams move between environments.\n- Delayed feedback loops, making problems more expensive to fix.\n- Infrastructure costs maintaining non-production environments that don’t actually prevent failure.\n- Every time an engineer deploys to staging, finds a bug, and then has to debug it again when it behaves differently in production, that’s wasted effort.\n\nThe alternative? Deploy to production, but do it smartly.\n\n- Feature flags to control exposure.\n- Progressive rollouts to catch issues early.\n- Real-time observability to detect anomalies before they escalate.\n\nIf your team still clings to staging environments, ask yourself: Are they truly preventing failure or just adding layers of delay and waste?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-14-why-engineering-teams-use-staging-environments-for-risk-reduction\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-14-why-engineering-teams-use-staging-environments-for-risk-reduction",
    "ReferencePath": "resources/signals/2025-02-14-why-engineering-teams-use-staging-environments-for-risk-reduction"
  },
  {
    "FrontMatter": {
      "title": "Challenging Misconceptions About Behaviour in Agile Teams",
      "short_title": "Challenging Misconceptions in Agile Teams",
      "description": "Explores common misconceptions about Agile teams, clarifying that true agility demands discipline, planning, and professionalism—not chaos or lack of accountability.",
      "tldr": "Agile is often misused to justify poor planning and lack of accountability, but true agility demands more discipline, professionalism, and clear alignment with the product vision. Teams that fail to deliver usable increments or start work without sufficient understanding are not practicing real Agile. Development managers should ensure their teams uphold high standards and address unprofessional behavior rather than excusing it as Agile.",
      "date": "2025-02-13T16:30:02+00:00",
      "lastmod": "2025-02-13T16:30:02+00:00",
      "weight": 380.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.5,
        "changefreq": "weekly"
      },
      "ResourceId": "lVebZgXa1DP",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "challenging-misconceptions-about-behaviour-in-agile-teams",
      "aliases": [
        "/resources/lVebZgXa1DP"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Accountability"
      ],
      "categories": [
        "Product Development",
        "Scrum"
      ],
      "tags": [
        "Software Development",
        "Agile Philosophy",
        "Professional Scrum",
        "Organisational Agility",
        "Team Collaboration",
        "Pragmatic Thinking"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7295841657839583235",
          "post_id": "7295841657839583235",
          "post_date": "2025-02-13T16:30:02Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:56:59Z",
        "short_title": "2025-07-07T17:46:32Z",
        "tldr": "2025-08-07T12:39:33Z"
      }
    },
    "BodyContent": "I keep hearing people justify bad behaviour in Agile teams by saying, “That’s how Agile works.” No. It isn’t.\n\nAgility isn’t an excuse for chaos, poor planning, or avoiding accountability. True agility requires more discipline, not less. More planning, more diligence, more professionalism.\n\nIf your team can’t produce a usable increment every Sprint, if work is started without enough understanding to be confident it can be completed in the timebox, or if developers don’t know how their work contributes to the product vision—then you’re not Agile. You’re just unstructured.\n\nScrum isn’t a free-for-all. It’s a social technology for delivering adaptive solutions with professionalism and integrity. Agility only works when teams commit to doing things right.\n\nLet’s stop normalising unprofessional behaviour and call it out when we see it. Agility deserves better.\n\nHave you seen Agile misunderstood this way? What’s the worst case you’ve encountered?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-13-challenging-misconceptions-about-behaviour-in-agile-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-13-challenging-misconceptions-about-behaviour-in-agile-teams",
    "ReferencePath": "resources/signals/2025-02-13-challenging-misconceptions-about-behaviour-in-agile-teams"
  },
  {
    "FrontMatter": {
      "title": "There a common belief that rollback is the ultimate safety net",
      "short_title": "Rollback Is Not the Ultimate Safety Net",
      "description": "Rollback is often riskier than rolling forward, especially for stateful apps. Safer deployment relies on progressive delivery and fail-forward strategies, not reversals.",
      "tldr": "Relying on rollback as a safety net is risky, especially for stateful applications where it can cause data issues and failures. Safer approaches include progressive delivery methods like feature flags and canary releases, which help detect and limit problems early. Teams should focus on making deployments safe to fail rather than assuming rollback will fix mistakes.",
      "date": "2025-02-13T15:53:38+00:00",
      "lastmod": "2025-02-13T15:53:38+00:00",
      "weight": 270.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "3-BmsmOEWfJ",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "there-a-common-belief-that-rollback-is-the-ultimate-safety-net",
      "aliases": [
        "/resources/3-BmsmOEWfJ"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "DevOps",
        "Engineering Excellence",
        "Product Development"
      ],
      "tags": [
        "Deployment Strategies",
        "Pragmatic Thinking",
        "Operational Practices",
        "Product Delivery",
        "Software Development",
        "Engineering Practices",
        "Frequent Releases",
        "Release Management",
        "Technical Mastery",
        "Continuous Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7295832502361833472",
          "post_id": "7295832502361833472",
          "post_date": "2025-02-13T15:53:38Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:00Z",
        "short_title": "2025-07-07T17:46:33Z",
        "tldr": "2025-08-07T12:39:36Z"
      }
    },
    "BodyContent": "There’s a common belief that rollback is the ultimate safety net. That if something goes wrong, we’ll just roll back and everything will be fine.\n\nExcept, rolling back is often more dangerous than rolling forward.\n\nFor stateful applications, rollback can mean data inconsistencies, orphaned processes, and unexpected failures. It assumes that we can always rewind time cleanly, which is rarely the case. The better approach? Fail forward.\n\nProgressive delivery techniques like feature flags, canary releases, and automated rollback halts allow teams to limit exposure, detect problems early, and stop bad deployments before they do real damage. If your team struggles to roll forward, what makes you think they have the skills to execute the far more complex task of rolling back?\n\nModern software delivery isn’t about reversing mistakes, it’s about designing deployments so failure is safe. How is your team handling failure today?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-13-there-a-common-belief-that-rollback-is-the-ultimate-safety-net\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-13-there-a-common-belief-that-rollback-is-the-ultimate-safety-net",
    "ReferencePath": "resources/signals/2025-02-13-there-a-common-belief-that-rollback-is-the-ultimate-safety-net"
  },
  {
    "FrontMatter": {
      "title": "Every delay increases the risk of failure",
      "short_title": "Every Delay Increases the Risk of Failure",
      "description": "Delaying software releases increases failure risk. Frequent, small releases improve success rates, adaptability, and recovery, as shown by CHAOS Report and DORA metrics.",
      "tldr": "Delaying software releases increases the risk of failure and falling behind competitors. Frequent, smaller releases lead to higher success rates and faster recovery, as shown by industry research. Focus on delivering quickly and iterating rather than waiting for a perfect release.",
      "date": "2025-02-10T11:00:51+00:00",
      "lastmod": "2025-02-10T11:00:51+00:00",
      "weight": 160.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "-hq1U7x2uea",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "every-delay-increases-the-risk-of-failure",
      "aliases": [
        "/resources/-hq1U7x2uea"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "Engineering Excellence",
        "DevOps"
      ],
      "tags": [
        "Frequent Releases",
        "Time to Market",
        "Software Development",
        "Product Delivery",
        "Deployment Frequency",
        "Market Adaptability",
        "Value Delivery",
        "Metrics and Learning",
        "Pragmatic Thinking",
        "Continuous Delivery",
        "Team Performance",
        "Release Management",
        "Operational Practices",
        "Decision Making",
        "Continuous Improvement"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7294671658643017729",
          "post_id": "7294671658643017729",
          "post_date": "2025-02-10T11:00:51Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:01Z",
        "short_title": "2025-07-07T17:46:36Z",
        "tldr": "2025-08-07T12:39:45Z"
      }
    },
    "BodyContent": "Every delay increases the risk of failure.\n\nOrganizations that take too long to release software fall behind. While they refine, plan, and internally validate, their competitors deliver, learn, and adapt.\n\nThe Standish Group’s CHAOS Report found that only 29% of long-cycle projects succeed, while agile, frequent-release projects succeed up to 64% of the time. DORA metrics confirm that teams that release more often have lower failure rates and faster recovery times.\n\nDeliver small, deliver fast, and adjust. If you are waiting for the perfect release, you are already losing.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-10-every-delay-increases-the-risk-of-failure\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-10-every-delay-increases-the-risk-of-failure",
    "ReferencePath": "resources/signals/2025-02-10-every-delay-increases-the-risk-of-failure"
  },
  {
    "FrontMatter": {
      "title": "Git Flow should have died years ago",
      "short_title": "Why Git Flow Is Obsolete for Modern Dev Teams",
      "description": "Explains why Git Flow is outdated for modern software, highlighting its drawbacks and recommending simpler workflows like GitHub Flow for faster, continuous delivery.",
      "tldr": "Git Flow is outdated and causes unnecessary delays and complications for modern software teams. Long-lived branches and complex merges slow down delivery and increase risk. Switch to simpler workflows like GitHub Flow or Release Flow to speed up development and focus on delivering value.",
      "date": "2025-02-09T16:30:00+00:00",
      "lastmod": "2025-02-09T16:30:00+00:00",
      "weight": 470.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.4,
        "changefreq": "weekly"
      },
      "ResourceId": "pAMm25X5CuE",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "git-flow-should-have-died-years-ago",
      "aliases": [
        "/resources/pAMm25X5CuE"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "DevOps",
        "Engineering Excellence"
      ],
      "tags": [
        "Frequent Releases",
        "Software Development",
        "Deployment Frequency",
        "Continuous Delivery",
        "Modern Source Control"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7294392103877394432",
          "post_id": "7294392103877394432",
          "post_date": "2025-02-09T16:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:02Z",
        "short_title": "2025-07-07T17:46:39Z",
        "tldr": "2025-08-07T12:39:51Z"
      }
    },
    "BodyContent": "Git Flow should have died years ago.\n\nIt was designed for packaged software, not modern software delivery. Yet, some teams still cling to it, drowning in:\n\n- Long-lived develop branches\n- Painful release/\\* merges\n- Endless hotfix/\\* chaos\n\nEvery merge is an opportunity for delay, conflict, and regression. Instead of focusing on delivering value, teams are stuck babysitting branches.\n\nSwitch to GitHub Flow or Release Flow and experience the difference. Merge small. Deploy continuously. Stop wasting time on a process that was obsolete a decade ago.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-09-git-flow-should-have-died-years-ago\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-09-git-flow-should-have-died-years-ago",
    "ReferencePath": "resources/signals/2025-02-09-git-flow-should-have-died-years-ago"
  },
  {
    "FrontMatter": {
      "title": "Branch promotion is a relic of slow, manual software delivery",
      "short_title": "Branch Promotion vs Modern Software Delivery",
      "description": "Explains why modern software teams avoid branch promotion, using continuous integration, feature flags, and production-like testing to streamline delivery and reduce risk.",
      "tldr": "Branch promotion slows down delivery and adds risk, while modern teams merge changes into the main branch as soon as they are ready and use feature flags to separate deployment from release. Testing in production-like environments and instant rollbacks improve speed and safety. Focus on managing the flow of work, not branches, to streamline delivery.",
      "date": "2025-02-08T16:30:00+00:00",
      "lastmod": "2025-02-08T16:30:00+00:00",
      "weight": 300.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "xLVnF1dEnfO",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "branch-promotion-is-a-relic-of-slow-manual-software-delivery",
      "aliases": [
        "/resources/xLVnF1dEnfO"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "DevOps",
        "Engineering Excellence"
      ],
      "tags": [
        "Software Development",
        "Continuous Delivery",
        "Product Delivery",
        "Operational Practices",
        "Technical Mastery",
        "Continuous Integration",
        "Engineering Practices",
        "Value Delivery",
        "Pragmatic Thinking",
        "Frequent Releases",
        "Deployment Strategies",
        "Market Adaptability",
        "Deployment Frequency",
        "Release Management",
        "Flow Efficiency"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7294029715663716353",
          "post_id": "7294029715663716353",
          "post_date": "2025-02-08T16:30:00Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:04Z",
        "short_title": "2025-07-07T17:46:39Z",
        "tldr": "2025-08-07T12:39:53Z"
      }
    },
    "BodyContent": "Branch promotion is a relic of slow, manual software delivery.\n\nModern teams integrate continuously:\n\n- Every change merges into main as soon as it’s ready.\n- Deployments are decoupled from releases using feature flags.\n- Testing happens in production-like environments without blocking releases.\n\nThis approach makes rollbacks instant—no need for painful cherry-picking. And it eliminates reverse integration, a practice that introduces more risk than it removes.\n\nThe best teams don’t manage branches. They manage flow.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-08-branch-promotion-is-a-relic-of-slow-manual-software-delivery\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-08-branch-promotion-is-a-relic-of-slow-manual-software-delivery",
    "ReferencePath": "resources/signals/2025-02-08-branch-promotion-is-a-relic-of-slow-manual-software-delivery"
  },
  {
    "FrontMatter": {
      "title": "Frequent releases are not just a technical strategy",
      "short_title": "Frequent Releases Reduce Risk and Improve Feedback",
      "description": "Frequent software releases reduce risk, enable faster feedback, and help teams adapt to user needs, preventing costly mistakes and improving overall performance.",
      "tldr": "Frequent releases help teams learn from real users and avoid wasting effort on features that may not work, as shown by Microsoft’s costly Windows 8 failure. Research shows that teams releasing often recover faster and reduce costs. To reduce risk and improve outcomes, prioritize frequent releases and adapt based on user feedback.",
      "date": "2025-02-07T16:30:01+00:00",
      "lastmod": "2025-02-07T16:30:01+00:00",
      "weight": 300.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "_o_vjO--kSl",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "frequent-releases-are-not-just-a-technical-strategy",
      "aliases": [
        "/resources/_o_vjO--kSl"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Product Development",
        "Engineering Excellence",
        "DevOps"
      ],
      "tags": [
        "Frequent Releases",
        "Software Development",
        "Pragmatic Thinking",
        "Operational Practices",
        "Team Performance",
        "Market Adaptability",
        "Deployment Frequency",
        "Continuous Improvement"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7293667330381787136",
          "post_id": "7293667330381787136",
          "post_date": "2025-02-07T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:05Z",
        "short_title": "2025-07-07T17:46:42Z",
        "tldr": "2025-08-07T12:39:56Z"
      }
    },
    "BodyContent": "Frequent releases are not just a technical strategy. They are a survival strategy.\n\nThe longer software stays in development without release, the higher the risk of wasted effort. Microsoft learned this lesson with Windows 8, investing six years into a product that failed immediately upon launch. Had they released frequently and adapted to feedback, they could have prevented billions in losses.\n\nDORA research confirms that high-performing teams release more often, recover from failures faster, and cut costs. Frequent releases protect your company from costly missteps by ensuring you are learning from real users.\n\nAre you mitigating risk, or are you waiting to fail?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-07-frequent-releases-are-not-just-a-technical-strategy\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-07-frequent-releases-are-not-just-a-technical-strategy",
    "ReferencePath": "resources/signals/2025-02-07-frequent-releases-are-not-just-a-technical-strategy"
  },
  {
    "FrontMatter": {
      "title": "The Hidden Costs of Supporting Multiple Versions in Production",
      "short_title": "The Hidden Costs of Supporting Multiple Versions",
      "description": "Maintaining multiple production versions increases bugs, merge conflicts, and technical debt, making development harder and less efficient for engineering teams.",
      "tldr": "Supporting multiple versions in production drains engineering resources through increased context-switching, merge conflicts, and bug risks. Back-porting fixes and maintaining separate branches for each customer make things worse, leading to instability and technical debt. To avoid these problems, teams should simplify and standardise their branching strategy.",
      "date": "2025-02-06T16:30:01+00:00",
      "lastmod": "2025-02-06T16:30:01+00:00",
      "weight": 190.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.7,
        "changefreq": "weekly"
      },
      "ResourceId": "un1ZqM8aYng",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "the-hidden-costs-of-supporting-multiple-versions-in-production",
      "aliases": [
        "/resources/un1ZqM8aYng"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [],
      "categories": [
        "Engineering Excellence"
      ],
      "tags": [
        "Software Development",
        "Technical Mastery",
        "Miscellaneous",
        "Technical Debt",
        "Modern Source Control"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7293304944034541569",
          "post_id": "7293304944034541569",
          "post_date": "2025-02-06T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:06Z",
        "short_title": "2025-07-07T17:46:46Z",
        "tldr": "2025-08-07T12:40:06Z"
      }
    },
    "BodyContent": "Supporting multiple versions in production is a hidden tax on engineering teams.\n\nEvery version adds:\n\n- More context-switching\n- More merge conflicts\n- More chances for bugs to slip through\n\nReverse integration—back-porting fixes to older versions—is even worse. It creates instability, increases the risk of unintended regressions, and wastes engineering time.\n\nAnd then there's branch by customer—the absolute worst-case scenario. Maintaining separate branches for each client is a scaling disaster, guaranteeing technical debt and a painful development experience.\n\nIf a team is struggling to keep track of where changes are applied, it's already a sign that the branching strategy is broken. Standardise, simplify, and move forward—not backward.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-06-the-hidden-costs-of-supporting-multiple-versions-in-production\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-06-the-hidden-costs-of-supporting-multiple-versions-in-production",
    "ReferencePath": "resources/signals/2025-02-06-the-hidden-costs-of-supporting-multiple-versions-in-production"
  },
  {
    "FrontMatter": {
      "title": "Too many teams overcomplicate their branching strategies",
      "short_title": "Simplifying Branching Strategies for Teams",
      "description": "Learn why simple branching strategies like GitHub Flow and Release Flow help teams deliver faster, reduce risk, and avoid the pitfalls of complex version control.",
      "tldr": "Many teams make branching too complex, which slows delivery and adds risk. Simple models like GitHub Flow or Release Flow help teams move faster and deliver value more consistently. Focus on minimizing branching complexity to improve speed and reliability.",
      "date": "2025-02-06T09:38:01+00:00",
      "lastmod": "2025-02-06T09:38:01+00:00",
      "weight": 305.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "qwciWeifRRf",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "too-many-teams-overcomplicate-their-branching-strategies",
      "aliases": [
        "/resources/qwciWeifRRf"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Practice"
      ],
      "categories": [
        "Engineering Excellence",
        "Product Development"
      ],
      "tags": [
        "Pragmatic Thinking",
        "Modern Source Control",
        "Software Development",
        "Operational Practices",
        "GitHub",
        "Team Performance",
        "Frequent Releases",
        "Value Delivery",
        "Technical Mastery",
        "Product Delivery"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7293201258541191168",
          "post_id": "7293201258541191168",
          "post_date": "2025-02-06T09:38:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:07Z",
        "short_title": "2025-07-07T17:46:48Z",
        "tldr": "2025-08-07T12:40:12Z"
      }
    },
    "BodyContent": "Too many teams overcomplicate their branching strategies. The best engineering teams focus on flow, not friction.\n\nBranching models should enable fast delivery, not slow it down. The best approach? Keep it simple:\n\n✅ GitHub Flow – Short-lived feature branches, immediate merges to main, and continuous deployment.  \n✅ Release Flow – If multiple versions must be supported, fixes go into main first, then cherry-picked into a release branch.\n\nNo long-lived branches. No unnecessary merges. No reverse integration nightmares.\n\nTeams that eliminate unnecessary complexity move faster, reduce risk, and deliver value consistently. Stop promoting branches. Start shipping.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-06-too-many-teams-overcomplicate-their-branching-strategies\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-06-too-many-teams-overcomplicate-their-branching-strategies",
    "ReferencePath": "resources/signals/2025-02-06-too-many-teams-overcomplicate-their-branching-strategies"
  },
  {
    "FrontMatter": {
      "title": "Every unreleased feature is a cost",
      "short_title": "Every Unreleased Feature Is a Cost",
      "description": "Unreleased features create hidden costs and risks. Regular software delivery reduces failure rates, rework, and missed opportunities, ensuring real value is delivered.",
      "tldr": "Unreleased features create hidden costs and risks, as work that is not delivered provides no real value. Evidence shows that frequent releases reduce failure rates and improve stability, while long cycles lead to more rework and missed opportunities. Focus on shipping regularly to ensure your team's efforts translate into actual value.",
      "date": "2025-02-05T16:30:01+00:00",
      "lastmod": "2025-02-05T16:30:01+00:00",
      "weight": 325.0,
      "sitemap": {
        "filename": "sitemap.xml",
        "priority": 0.6,
        "changefreq": "weekly"
      },
      "ResourceId": "PNGuJocqSoD",
      "ResourceImport": false,
      "ResourceType": "signals",
      "ResourceContentOrigin": "human",
      "slug": "every-unreleased-feature-is-a-cost",
      "aliases": [
        "/resources/PNGuJocqSoD"
      ],
      "source": "LinkedIn",
      "layout": "signal",
      "concepts": [
        "Tenet"
      ],
      "categories": [
        "Product Development",
        "DevOps",
        "Engineering Excellence"
      ],
      "tags": [
        "Value Delivery",
        "Deployment Frequency",
        "Team Performance",
        "Product Delivery",
        "Software Development",
        "Operational Practices",
        "Pragmatic Thinking",
        "Frequent Releases",
        "Market Adaptability",
        "Time to Market",
        "Release Management",
        "Agile Philosophy"
      ],
      "platform_signals": [
        {
          "platform": "LinkedIn",
          "post_url": "https://www.linkedin.com/feed/update/urn:li:share:7292942555711746052",
          "post_id": "7292942555711746052",
          "post_date": "2025-02-05T16:30:01Z",
          "performance": {
            "impressions": 0,
            "members_reached": 0,
            "reactions": 0,
            "comments": 0,
            "reposts": 0
          }
        }
      ],
      "Watermarks": {
        "description": "2025-05-16T15:57:08Z",
        "short_title": "2025-07-07T17:46:50Z",
        "tldr": "2025-08-07T12:40:17Z"
      }
    },
    "BodyContent": "Every unreleased feature is a cost.\n\nMany teams treat software development like a factory, assuming that as long as work is being done, value is being created. But without delivery, all that effort is meaningless.\n\nThe CHAOS Report proves that long-cycle projects are far more likely to fail, while DORA metrics show that frequent releases reduce risks and improve stability. If you are not shipping regularly, you are accumulating hidden costs—unvalidated work, increased rework, and lost opportunities.\n\nAre you delivering value or just doing work?\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-05-every-unreleased-feature-is-a-cost\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\signals\\2025-02-05-every-unreleased-feature-is-a-cost",
    "ReferencePath": "resources/signals/2025-02-05-every-unreleased-feature-is-a-cost"
  }
]
