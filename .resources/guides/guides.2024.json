[
  {
    "FrontMatter": {
      "title": "The Scrum Guide",
      "short_title": "The Scrum Guide",
      "description": "A clear summary of Scrum’s framework, roles, events, artefacts, and values, explaining how teams use Scrum to deliver value and adapt to complex problems.",
      "date": "2024-09-17",
      "weight": 690.0,
      "ResourceId": "59gcHh1fYtC",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "the-scrum-guide",
      "aliases": [
        "/guides/Scrum-Guide/",
        "/guides/Scrum-Guide.html",
        "/learn/agile-delivery-kit/guides/scrum-guide",
        "/resources/guides/_guides/scrum-guide.md",
        "/resources/59gcHh1fYtC",
        "/the-2020-scrum-guide/"
      ],
      "aliasesArchive": [
        "/guides/Scrum-Guide/",
        "/guides/Scrum-Guide.html",
        "/learn/agile-delivery-kit/guides/scrum-guide",
        "/resources/guides/_guides/scrum-guide.md",
        "/the-2020-scrum-guide/"
      ],
      "concepts": [
        "Framework"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Increment",
        "Professional Scrum",
        "Product Developer",
        "Transparency",
        "Agile Frameworks",
        "Scrum Team",
        "Empirical Process Control",
        "Agile Product Management",
        "Software Development",
        "Value Delivery",
        "Scrum Master",
        "Scrum Values",
        "Agile Planning",
        "Product Delivery",
        "Team Performance"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "downloads": [
        {
          "title": "Scrum Guide 2020",
          "type": "pdf",
          "url": "/assets/attachments/Scrum-Guide-2020.pdf"
        },
        {
          "title": "Scrum Guide 2017",
          "type": "pdf",
          "url": "/assets/attachments/Scrum-Guide-2017.pdf"
        },
        {
          "title": "Scrum Guide 2016",
          "type": "pdf",
          "url": "/assets/attachments/Scrum-Guide-2016.pdf"
        },
        {
          "title": "Scrum Guide 2013",
          "type": "pdf",
          "url": "/assets/attachments/Scrum-Guide-2013-07.pdf"
        },
        {
          "title": "Scrum Guide 2011 v2",
          "type": "pdf",
          "url": "/assets/attachments/2011-07-Scrum_Guide.pdf"
        },
        {
          "title": "Scrum Guide 2011",
          "type": "pdf",
          "url": "/assets/attachments/Scrum-Guide-2011-07.pdf"
        },
        {
          "title": "Scrum Guide 2010",
          "type": "pdf",
          "url": "/assets/attachments/Scrum-Guide-2010-v1-Scrum-Alliance.pdf"
        }
      ],
      "references": [
        {
          "title": "The 2020 Scrum Guide",
          "url": "https://scrumguides.org/scrum-guide.html"
        }
      ],
      "recommendedContent": [
        {
          "collection": "practices",
          "path": "_practices/definition-of-done-dod.md"
        },
        {
          "collection": "practices",
          "path": "_practices/definition-of-ready-dor.md"
        }
      ],
      "videos": [
        {
          "title": "Overview of The Scrum Framework with Martin Hinshelwood",
          "embed": "https://www.youtube.com/embed/Q2Fo3sM6BVo"
        }
      ],
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about The Scrum Guide and how it can help you in your Agile journey!",
        "title": "The Scrum Guide"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:15Z",
        "short_title": "2025-07-07T16:40:32Z"
      }
    },
    "BodyContent": "The [Scrum]({{< ref \"/categories/scrum\" >}}) Guide is the rule book, or timber frame, of Scrum and is immutable of definition but not of implementation. If you have already read the Scrum Guide and are looking more for a Strategy Guide then head over to the Scrum Strategy Guide.\n{: .lead}\n\nNOTE: Extracted from the [Scrum Guide 2020](https://scrumguides.org/){:target=\"\\_blank\"}\n\n## Purpose of the Scrum Guide\n\nWe developed Scrum in the early 1990s. We wrote the first version of the Scrum Guide in 2010 to help people worldwide understand Scrum. We have evolved the Guide since then through small, functional updates. Together, we stand behind it.\n\nThe Scrum Guide contains the definition of Scrum. Each element of the framework serves a specific purpose that is essential to the overall value and results realized with Scrum. Changing the core design or ideas of Scrum, leaving out elements, or not following the rules of Scrum, covers up problems and limits the benefits of Scrum, potentially even rendering it useless.\n\nWe follow the growing use of Scrum within an ever-growing complex world. We are humbled to see Scrum being adopted in many domains holding essentially complex work, beyond software [product development]({{< ref \"/categories/product-development\" >}}) where Scrum has its roots. As Scrum's use spreads, developers, researchers, analysts, scientists, and other specialists do the work. We use the word “developers” in Scrum not to exclude, but to simplify. If you get value from Scrum, consider yourself included.\n\nAs Scrum is being used, patterns, processes, and insights that fit the Scrum framework as described in this document, may be found, applied and devised. Their description is beyond the purpose of the Scrum Guide because they are context-sensitive and differ widely between Scrum uses. Such tactics for using within the Scrum framework vary widely and are described elsewhere.\n\n![The Scrum Framework](https://nkdagility.com/wp-content/uploads/2020/11/naked-Agility-Scrum-Framework-575x450.jpg)\n\n## Scrum Definition\n\nScrum is a lightweight framework that helps people, teams and organizations generate value through adaptive solutions for complex problems.\n\nIn a nutshell, Scrum requires a [Scrum Master]({{< ref \"/tags/scrum-master\" >}}) to foster an environment where:\n\n1. A [Product Owner]({{< ref \"/tags/product-owner\" >}}) orders the work for a complex problem into a [Product Backlog]({{< ref \"/tags/product-backlog\" >}}).\n1. The [Scrum Team]({{< ref \"/tags/scrum-team\" >}}) turns a selection of the work into an [Increment]({{< ref \"/tags/increment\" >}}) of value during a Sprint.\n1. The Scrum Team and its stakeholders inspect the results and adjust for the next Sprint.\n   Repeat\n\nScrum is simple. Try it as is and determine if its philosophy, theory, and structure help to achieve goals and create value. The Scrum framework is purposefully incomplete, only defining the parts required to implement Scrum theory. Scrum is built upon by the collective intelligence of the people using it. Rather than provide people with detailed instructions, the rules of Scrum guide their relationships and interactions.\n\nVarious processes, techniques and methods can be employed within the framework. Scrum wraps around existing practices or renders them unnecessary. Scrum makes visible the relative efficacy of current management, environment, and work techniques so that improvements can be made.\n\n## Scrum Theory\n\nScrum is founded on empiricism and [lean]({{< ref \"/categories/lean\" >}}) thinking. Empiricism asserts that knowledge comes from experience and making decisions based on what is observed. [Lean thinking]({{< ref \"/tags/lean-thinking\" >}}) reduces waste and focuses on the essentials.\n\nScrum employs an iterative, incremental approach to optimize predictability and to control risk. Scrum engages groups of people who collectively have all the skills and expertise to do the work and share or acquire such skills as needed.\n\nScrum combines four formal events for inspection and adaptation within a containing event, the Sprint. These events work because they implement the empirical Scrum pillars of [transparency]({{< ref \"/tags/transparency\" >}}), inspection, and adaptation.\n\n### Transparency\n\nThe emergent process and work must be visible to those performing the work as well as those receiving the work. With Scrum, important decisions are based on the perceived state of its three formal artefacts. Artefacts that have low transparency can lead to decisions that diminish value and increase risk.\n\nTransparency enables inspection. Inspection without transparency is misleading and wasteful.\n\n### Inspection\n\nThe Scrum artefacts and the progress toward agreed goals must be inspected frequently and diligently to detect potentially undesirable variances or problems. To help with inspection, Scrum provides cadence in the form of its five events.\n\nInspection enables adaptation. Inspection without adaptation is considered pointless. Scrum events are designed to provoke change.\n\n### Adaptation\n\nIf any aspects of a process deviate outside acceptable limits or if the resulting product is unacceptable, the process being applied or the materials being produced must be adjusted. The adjustment must be made as soon as possible to minimize further deviation.\n\nAdaptation becomes more difficult when the people involved are not empowered or self-managing. A Scrum Team is expected to adapt the moment it learns anything new through inspection.\n\n## [Scrum Values]({{< ref \"/tags/scrum-values\" >}})\n\nSuccessful use of Scrum depends on people becoming more proficient in living five values:\n\n_Commitment, Focus, Openness, Respect, and Courage_\n\nThe Scrum Team commits to achieving its goals and to supporting each other. Their primary focus is on the work of the Sprint to make the best possible progress toward these goals. The Scrum Team and its stakeholders are open about the work and the challenges. Scrum Team members respect each other to be capable, independent people, and are respected as such by the people with whom they work. The Scrum Team members have the courage to do the right thing, to work on tough problems.\n\nThese values give direction to the Scrum Team with regard to their work, actions, and behaviour. The decisions that are made, the steps taken, and the way Scrum is used should reinforce these values, not diminish or undermine them. The Scrum Team members learn and explore the values as they work with the Scrum events and artifacts. When these values are embodied by the Scrum Team and the people they work with, the empirical Scrum pillars of transparency, inspection, and adaptation come to life building trust.\n\n## Scrum Team\n\nThe fundamental unit of Scrum is a small team of people, a Scrum Team. The Scrum Team consists of one Scrum Master, one Product Owner, and Developers. Within a Scrum Team, there are no sub-teams or hierarchies. It is a cohesive unit of professionals focused on one objective at a time, the Product Goal.\n\nScrum Teams are cross-functional, meaning the members have all the skills necessary to create value each Sprint. They are also self-managing, meaning they internally decide who does what, when, and how.\n\nThe Scrum Team is small enough to remain nimble and large enough to complete significant work within a Sprint, typically 10 or fewer people. In general, we have found that smaller teams communicate better and are more productive. If Scrum Teams become too large, they should consider reorganizing into multiple cohesive Scrum Teams, each focused on the same product. Therefore, they should share the same Product Goal, Product Backlog, and Product Owner.\n\nThe Scrum Team is responsible for all product-related activities from stakeholder collaboration, verification, maintenance, operation, [experimentation]({{< ref \"/tags/experimentation\" >}}), research and development, and anything else that might be required. They are structured and empowered by the organization to manage their own work. Working in Sprints at a sustainable pace improves the Scrum Team's focus and consistency.\n\nThe entire Scrum Team is accountable for creating a valuable, useful Increment every Sprint. Scrum defines three specific accountabilities within the Scrum Team: the Developers, the Product Owner, and the Scrum Master.\n\n### Developers\n\nDevelopers are the people in the Scrum Team that are committed to creating any aspect of a usable Increment each Sprint.\n\nThe specific skills needed by the Developers are often broad and will vary with the domain of work. However, the Developers are always accountable for:\n\n- Creating a plan for the Sprint, the Sprint Backlog;\n- Instilling quality by adhering to a [Definition of Done]({{< ref \"/tags/definition-of-done\" >}});\n- Adapting their plan each day toward the Sprint Goal; and,\n- Holding each other accountable as professionals.\n\n### Product Owner\n\nThe Product Owner is accountable for maximizing the value of the product resulting from the work of the Scrum Team. How this is done may vary widely across organizations, Scrum Teams, and individuals.\n\nThe Product Owner is also accountable for effective Product Backlog management, which includes:\n\n- Developing and explicitly communicating the Product Goal;\n- Creating and clearly communicating Product Backlog items;\n- Ordering Product Backlog items; and,\n- Ensuring that the Product Backlog is transparent, visible and understood.\n\nThe Product Owner may do the above work or may delegate the responsibility to others. Regardless, the Product Owner remains accountable.\n\nFor Product Owners to succeed, the entire organization must respect their decisions. These decisions are visible in the content and ordering of the Product Backlog, and through the inspectable Increment at the [Sprint Review]({{< ref \"/tags/sprint-review\" >}}).\n\nThe Product Owner is one person, not a committee. The Product Owner may represent the needs of many stakeholders in the Product Backlog. Those wanting to change the Product Backlog can do so by trying to convince the Product Owner.\n\n### Scrum Master\n\nThe Scrum Master is accountable for establishing Scrum as defined in the Scrum Guide. They do this by helping everyone understand Scrum theory and practice, both within the Scrum Team and the organization.\n\nThe Scrum Master is accountable for the Scrum Team's effectiveness. They do this by enabling the Scrum Team to improve its practices, within the Scrum framework.\n\nScrum Masters are true leaders who serve the Scrum Team and the larger organization.\n\nThe Scrum Master serves the Scrum Team in several ways, including:\n\n- [Coaching]({{< ref \"/tags/coaching\" >}}) the team members in self-management and cross-functionality;\n- Helping the Scrum Team focus on creating high-value Increments that meet the Definition of Done;\n- Causing the removal of impediments to the Scrum Team's progress; and,\n- Ensuring that all Scrum events take place and are positive, productive, and kept within the timebox.\n\nThe Scrum Master serves the Product Owner in several ways, including:\n\n- Helping find techniques for effective Product Goal definition and Product Backlog management;\n- Helping the Scrum Team understand the need for clear and concise Product Backlog items;\n- Helping establish empirical product planning for a complex environment; and,\n- Facilitating stakeholder collaboration as requested or needed.\n\nThe Scrum Master serves the organization in several ways, including:\n\n- Leading, training, and coaching the organization in its Scrum adoption;\n- Planning and advising Scrum implementations within the organization;\n- Helping employees and stakeholders understand and enact an empirical approach for complex work; and,\n- Removing barriers between stakeholders and Scrum Teams.\n\n## Scrum Events\n\nThe Sprint is a container for all other events. Each event in Scrum is a formal opportunity to inspect and adapt Scrum artefacts. These events are specifically designed to enable the transparency required. Failure to operate any events as prescribed results in lost opportunities to inspect and adapt. Events are used in Scrum to create regularity and to minimize the need for meetings not defined in Scrum.\n\nOptimally, all events are held at the same time and place to reduce complexity.\n\n### The Sprint\n\nSprints are the heartbeat of Scrum, where ideas are turned into value.\n\nThey are fixed length events of one month or less to create consistency. A new Sprint starts immediately after the conclusion of the previous Sprint.\n\nAll the work necessary to achieve the Product Goal, including Sprint Planning, Daily Scrums, Sprint Review, and Sprint Retrospective, happen within Sprints.\n\nDuring the Sprint:\n\n- No changes are made that would endanger the Sprint Goal;\n- Quality does not decrease;\n- The Product Backlog is refined as needed; and,\n- Scope may be clarified and renegotiated with the Product Owner as more is learned.\n\nSprints enable predictability by ensuring inspection and adaptation of progress toward a Product Goal at least every calendar month. When a Sprint's horizon is too long the Sprint Goal may become invalid, complexity may rise, and risk may increase. Shorter Sprints can be employed to generate more learning cycles and limit risk of cost and effort to a smaller time frame. Each Sprint may be considered a short project.\n\nVarious practices exist to forecast progress, like burn-downs, burn-ups, or cumulative flows. While proven useful, these do not replace the importance of empiricism. In complex environments, what will happen is unknown. Only what has already happened may be used for forward-looking [decision making]({{< ref \"/tags/decision-making\" >}}).\n\nA Sprint could be cancelled if the Sprint Goal becomes obsolete. Only the Product Owner has the authority to cancel the Sprint.\n\n### Sprint Planning\n\nSprint Planning initiates the Sprint by laying out the work to be performed for the Sprint. This resulting plan is created by the collaborative work of the entire Scrum Team.\n\nThe Product Owner ensures that attendees are prepared to discuss the most important Product Backlog items and how they map to the Product Goal. The Scrum Team may also invite other people to attend Sprint Planning to provide advice.\n\nSprint Planning addresses the following topics:\n\n#### Topic One: Why is this Sprint valuable?\n\nThe Product Owner proposes how the product could increase its value and utility in the current Sprint. The whole Scrum Team then collaborates to define a Sprint Goal that communicates why the Sprint is valuable to stakeholders. The Sprint Goal must be finalized prior to the end of Sprint Planning.\n\n#### Topic Two: What can be Done this Sprint?\n\nThrough discussion with the Product Owner, the Developers select items from the Product Backlog to include in the current Sprint. The Scrum Team may refine these items during this process, which increases understanding and confidence.\n\nSelecting how much can be completed within a Sprint may be challenging. However, the more the Developers know about their past performance, their upcoming capacity, and their Definition of Done, the more confident they will be in their Sprint forecasts.\n\n#### Topic Three: How will the chosen work get done?\n\nFor each selected Product Backlog item, the Developers plan the work necessary to create an Increment that meets the Definition of Done. This is often done by decomposing Product Backlog items into smaller work items of one day or less. How this is done is at the sole discretion of the Developers. No one else tells them how to turn Product Backlog items into Increments of value.\n\nThe Sprint Goal, the Product Backlog items selected for the Sprint, plus the plan for delivering them are together referred to as the Sprint Backlog.\n\nSprint Planning is timeboxed to a maximum of eight hours for a one-month Sprint. For shorter Sprints, the event is usually shorter.\n\n### [Daily Scrum]({{< ref \"/tags/daily-scrum\" >}})\n\nThe purpose of the Daily Scrum is to inspect progress toward the Sprint Goal and adapt the Sprint Backlog as necessary, adjusting the upcoming planned work.\n\nThe Daily Scrum is a 15-minute event for the Developers of the Scrum Team. To reduce complexity, it is held at the same time and place every working day of the Sprint. If the Product Owner or Scrum Master are actively working on items in the Sprint Backlog, they participate as Developers.\n\nThe Developers can select whatever structure and techniques they want, as long as their Daily Scrum focuses on progress toward the Sprint Goal and produces an actionable plan for the next day of work. This creates focus and improves self-management.\n\nDaily Scrums improve communications, identify impediments, promote quick decision-making, and consequently eliminate the need for other meetings.\n\nThe Daily Scrum is not the only time Developers are allowed to adjust their plan. They often meet throughout the day for more detailed discussions about adapting or re-planning the rest of the Sprint's work.\n\n### Sprint Review\n\nThe purpose of the Sprint Review is to inspect the outcome of the Sprint and determine future adaptations. The Scrum Team presents the results of their work to key stakeholders and progress toward the Product Goal is discussed.\n\nDuring the event, the Scrum Team and stakeholders review what was accomplished in the Sprint and what has changed in their environment. Based on this information, attendees collaborate on what to do next. The Product Backlog may also be adjusted to meet new opportunities. The Sprint Review is a working session and the Scrum Team should avoid limiting it to a presentation.\n\nThe Sprint Review is the second to last event of the Sprint and is timeboxed to a maximum of four hours for a one-month Sprint. For shorter Sprints, the event is usually shorter.\n\n### Sprint Retrospective\n\nThe purpose of the Sprint Retrospective is to plan ways to increase quality and effectiveness.\n\nThe Scrum Team inspects how the last Sprint went with regards to individuals, interactions, processes, tools, and their Definition of Done. Inspected elements often vary with the domain of work. Assumptions that led them astray are identified and their origins explored. The Scrum Team discusses what went well during the Sprint, what problems it encountered, and how those problems were (or were not) solved.\n\nThe Scrum Team identifies the most helpful changes to improve its effectiveness. The most impactful improvements are addressed as soon as possible. They may even be added to the Sprint Backlog for the next Sprint.\n\nThe Sprint Retrospective concludes the Sprint. It is timeboxed to a maximum of three hours for a one-month Sprint. For shorter Sprints, the event is usually shorter.\n\n## Scrum Artefacts\n\nScrum's artefacts represent work or value. They are designed to maximize transparency of key information. Thus, everyone inspecting them has the same basis for adaptation.\n\nEach artefact contains a commitment to ensure it provides information that enhances transparency and focus against which progress can be measured:\n\n- For the Product Backlog, it is the Product Goal.\n- For the Sprint Backlog it is the Sprint Goal.\n- For the Increment, it is the Definition of Done.\n\nThese commitments exist to reinforce empiricism and the Scrum values for the Scrum Team and their stakeholders.\n\n### Product Backlog\n\nThe Product Backlog is an emergent, ordered list of what is needed to improve the product. It is the single source of work undertaken by the Scrum Team.\n\nProduct Backlog items that can be Done by the Scrum Team within one Sprint are deemed ready for selection in a Sprint Planning event. They usually acquire this degree of transparency after refining activities. Product [Backlog refinement]({{< ref \"/tags/backlog-refinement\" >}}) is the act of breaking down and further defining Product Backlog items into smaller more precise items. This is an ongoing activity to add details, such as a description, order, and size. Attributes often vary with the domain of work.\n\nThe Developers who will be doing the work are responsible for the sizing. The Product Owner may influence the Developers by helping them understand and select trade-offs.\n\n### Commitment: Product Goal\n\nThe Product Goal describes a future state of the product which can serve as a target for the Scrum Team to plan against. The Product Goal is in the Product Backlog. The rest of the Product Backlog emerges to define “what” will fulfil the Product Goal.\n\nA product is a vehicle to deliver value. It has a clear boundary, known stakeholders, well-defined users or customers. A product could be a service, a physical product, or something more abstract.\n\nThe Product Goal is the long-term objective of the Scrum Team. They must fulfil (or abandon) one objective before taking on the next.\n\nSome additional content on Product Goal:\n\n### Sprint Backlog\n\nThe Sprint Backlog is composed of the Sprint Goal (why), the set of Product Backlog items selected for the Sprint (what), as well as an actionable plan for delivering the Increment (how).\n\nThe Sprint Backlog is a plan by and for the Developers. It is a highly visible, real-time picture of the work that the Developers plan to accomplish during the Sprint in order to achieve the Sprint Goal. Consequently, the Sprint Backlog is updated throughout the Sprint as more is learned. It should have enough detail that they can inspect their progress in the Daily Scrum.\n\n#### Commitment: Sprint Goal\n\nThe Sprint Goal is the single objective for the Sprint. Although the Sprint Goal is a commitment by the Developers, it provides flexibility in terms of the exact work needed to achieve it. The Sprint Goal also creates coherence and focus, encouraging the Scrum Team to work together rather than on separate initiatives.\n\nThe Sprint Goal is created during the Sprint Planning event and then added to the Sprint Backlog. As the Developers work during the Sprint, they keep the Sprint Goal in mind. If the work turns out to be different than they expected, they collaborate with the Product Owner to negotiate the scope of the Sprint Backlog within the Sprint without affecting the Sprint Goal.\n\n### Increment\n\nAn Increment is a concrete stepping stone toward the Product Goal. Each Increment is additive to all prior Increments and thoroughly verified, ensuring that all Increments work together. In order to provide value, the Increment must be usable.\n\nMultiple Increments may be created within a Sprint. The sum of the Increments is presented at the Sprint Review thus supporting empiricism. However, an Increment may be delivered to stakeholders prior to the end of the Sprint. The Sprint Review should never be considered a gate to releasing value.\n\nWork cannot be considered part of an Increment unless it meets the Definition of Done.\n\n#### Commitment: Definition of Done\n\nThe Definition of Done is a formal description of the state of the Increment when it meets the quality measures required for the product.\n\nThe moment a Product Backlog item meets the Definition of Done, an Increment is born.\n\nThe Definition of Done creates transparency by providing everyone with a shared understanding of what work was completed as part of the Increment. If a Product Backlog item does not meet the Definition of Done, it cannot be released or even presented at the Sprint Review. Instead, it returns to the Product Backlog for future consideration.\n\nIf the Definition of Done for an increment is part of the standards of the organization, all Scrum Teams must follow it as a minimum. If it is not an organizational standard, the Scrum Team must create a Definition of Done appropriately for the product.\n\nDevelopers are required to conform to the Definition of Done. If there are multiple Scrum Teams working together on a product, they must mutually define and comply with the same Definition of Done.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\scrum-guide\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\scrum-guide",
    "ReferencePath": "resources/guides/scrum-guide"
  },
  {
    "FrontMatter": {
      "title": "Nexus Guide",
      "short_title": "Nexus Guide: Scaling Scrum with Multiple Teams",
      "description": "Explains the Nexus framework for scaling Scrum with multiple teams, detailing roles, events, and artefacts to coordinate product delivery and manage cross-team dependencies.",
      "date": "2024-09-17",
      "weight": 750.0,
      "ResourceId": "iC8MlA3TE7S",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "nexus-guide",
      "aliases": [
        "guides/Nexus-Framework/",
        "guides/Nexus-Framework.html",
        "/learn/agile-delivery-kit/guides/nexus-framework",
        "/resources/iC8MlA3TE7S"
      ],
      "aliasesArchive": [
        "guides/Nexus-Framework/",
        "guides/Nexus-Framework.html",
        "/learn/agile-delivery-kit/guides/nexus-framework"
      ],
      "concepts": [
        "Artifact"
      ],
      "categories": [
        "Scrum",
        "Product Development"
      ],
      "tags": [
        "Increment",
        "Professional Scrum",
        "Agile Frameworks",
        "Scaling",
        "Software Development",
        "Product Delivery",
        "Product Backlog",
        "Empirical Process Control",
        "Social Technologies",
        "Transparency",
        "Value Delivery",
        "Large Scale Agility",
        "Working Software",
        "Scrum Team",
        "Agile Transformation"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "references": [
        {
          "title": "The 2020 Scrum Guide",
          "url": "https://scrumguides.org/scrum-guide.html"
        },
        {
          "title": "The Nexus Guide",
          "url": "https://www.scrum.org/resources/online-nexus-guide"
        }
      ],
      "recommendedContent": [
        {
          "collection": "practices",
          "path": "_practices/definition-of-done-dod.md"
        },
        {
          "collection": "practices",
          "path": "_practices/definition-of-ready-dor.md"
        }
      ],
      "videos": [
        {
          "title": "Overview of The Scrum Framework with Martin Hinshelwood",
          "embed": "https://www.youtube.com/embed/Q2Fo3sM6BVo"
        }
      ],
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about Nexus Guide and how it can help you in your Agile journey!",
        "title": "Nexus Guide"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:25Z",
        "short_title": "2025-07-07T16:40:33Z"
      }
    },
    "BodyContent": "The Definitive Guide to [Scaling]({{< ref \"/tags/scaling\" >}}) [Scrum]({{< ref \"/categories/scrum\" >}}) with Nexus\n\nJanuary 2021\n\n# Purpose of the Nexus Guide\n\n[Product delivery]({{< ref \"/tags/product-delivery\" >}}) is complex, and the integration of [product development]({{< ref \"/categories/product-development\" >}}) work into a valuable product requires coordinating many diverse activities. Nexus is a framework for developing and sustaining scaled product delivery initiatives. It builds upon Scrum, extending it only where absolutely necessary to minimize and manage dependencies between multiple Scrum Teams while promoting empiricism and the [Scrum Values]({{< ref \"/tags/scrum-values\" >}}).\n\nThe Nexus framework inherits the purpose and intent of the Scrum framework as documented in the [Scrum Guide](../_guides/scrum-guide.md) Scaled Scrum is still Scrum. Nexus does not change the core design or ideas of Scrum, or leave out elements, or negate the rules of Scrum. Doing so covers up problems and limits the benefits of Scrum, potentially even rendering it useless.\n\nThis Guide contains the definition of Nexus. Each element of the framework serves a specific purpose that is essential to help teams and organizations scale the benefits of Scrum with multiple teams working together.\n\nAs organizations use Nexus, they typically discover complementary patterns, processes, and practices that help them in their application of the Nexus framework. As with Scrum, such tactics vary widely and are described elsewhere.\n\n![The Nexus Framework](../../assets/images/nexus-framework.png)\n\n# Nexus Definition\n\nA Nexus is a group of approximately three to nine Scrum Teams that work together to deliver a single product; it is a connection between people and things. A Nexus has a single [Product Owner]({{< ref \"/tags/product-owner\" >}}) who manages a single [Product Backlog]({{< ref \"/tags/product-backlog\" >}}) from which the Scrum Teams work.\n\nThe Nexus framework defines the accountabilities, events, and artifacts that bind and weave together the work of the Scrum Teams in a Nexus. Nexus builds upon Scrum's foundation, and its parts will be familiar to those who have used Scrum. It minimally extends the Scrum framework only where absolutely necessary to enable multiple teams to work from a single Product Backlog to build an Integrated [Increment]({{< ref \"/tags/increment\" >}}) that meets a goal.\n\n# Nexus Theory\n\nAt its heart, Nexus seeks to preserve and enhance Scrum's foundational bottom-up intelligence and empiricism while enabling a group of Scrum Teams to deliver more value than can be achieved by a single team. The goal of Nexus is to scale the value that a group of Scrum Teams, working on a single product, is able to deliver. It does this by reducing the complexity that those teams encounter as they collaborate to deliver an integrated, valuable, useful product Increment at least once every Sprint.\n\nThe Nexus Framework helps teams solve common scaling challenges like reducing cross-team dependencies, preserving team self-management and [transparency]({{< ref \"/tags/transparency\" >}}), and ensuring accountability. Nexus helps to make transparent dependencies. These dependencies are often caused by mismatches related to:\n\n1.  **Product structure:** The degree to which different concerns are independently separated in the product will greatly affect the complexity of creating an integrated product release.\n2.  **Communication structure:** The way that people communicate within and between teams affects their ability to get work done; delays in communication and feedback reduce the flow of work.\n\nNexus provides opportunities to change the process, product structure, and communication structure to reduce or remove these dependencies.\n\nWhile often counterintuitive, scaling the value that is delivered does not always require adding more people. Increasing the number of people and the size of a product increases complexity and dependencies, the need for collaboration, and the number of communication pathways involved in making decisions. Scaling-down, reducing the number of people who work on something, can be an important practice in delivering more value.\n\n# The Nexus Framework\n\nNexus builds upon Scrum by enhancing the foundational elements of Scrum in ways that help solve the dependency and collaboration challenges of cross-team work. Nexus (see Figure 1) reveals an empirical process that closely mirrors Scrum.\n\nNexus extends Scrum in the following ways:\n\n- **Accountabilities**: The Nexus Integration Team ensures that the Nexus delivers a valuable, useful Integrated Increment at least once every Sprint. The Nexus Integration Team consists of the Product Owner, a [Scrum Master]({{< ref \"/tags/scrum-master\" >}}), and Nexus Integration Team Members.\n- **Events**: Events are appended to, placed around, or replace regular Scrum events to augment them. As modified, they serve both the overall effort of all Scrum Teams in the Nexus, and each individual team. A Nexus Sprint Goal is the objective for the Sprint.\n- **Artifacts**: All Scrum Teams use the same, single Product Backlog. As the Product Backlog items are refined and made ready, indicators of which team will most likely do the work inside a Sprint are made transparent. A Nexus Sprint Backlog exists to assist with transparency during the Sprint. The Integrated Increment represents the current sum of all integrated work completed by a Nexus.\n\nFigure 1: The Nexus Framework\n\n# Accountabilities in Nexus\n\nA Nexus consists of Scrum Teams that work together toward a Product Goal. The Scrum framework defines three specific sets of accountabilities within a [Scrum Team]({{< ref \"/tags/scrum-team\" >}}): the Developers, the Product Owner, and the Scrum Master. These accountabilities are prescribed in the Scrum Guide. In Nexus, an additional accountability is introduced, the Nexus Integration Team.\n\n## Nexus Integration Team \n\nThe Nexus Integration Team is accountable for ensuring that a done Integrated Increment (the combined work completed by a Nexus) is produced at least once a Sprint. It provides the focus that makes possible the accountability of multiple Scrum Teams to come together to create valuable, useful Increments, as prescribed in Scrum.\n\nWhile Scrum Teams address integration issues within the Nexus, the Nexus Integration Team provides a focal point of integration for the Nexus. Integration includes addressing technical and non-technical cross-functional team constraints that may impede a Nexus' ability to deliver a constantly Integrated Increment. It should use bottom-up intelligence from within the Nexus to achieve resolution.\n\nThe Product Owner, a Scrum Master, and the appropriate members from the Scrum Teams belong to the Nexus Integration Team. Appropriate members are the people with the necessary skills and knowledge to help resolve the issues the Nexus faces at any point in time. Composition of the Nexus Integration Team may change over time to reflect the current needs of a Nexus. Common activities the Nexus Integration Team might perform include [coaching]({{< ref \"/tags/coaching\" >}}), consulting, and highlighting awareness of dependencies and cross-team issues.\n\nThe Nexus Integration Team consists of:\n\n- **The Product Owner:** A Nexus works off a single Product Backlog, and as described in Scrum, a Product Backlog has a single Product Owner who has the final say on its contents. The Product Owner is accountable for maximizing the value of the product and the work performed and integrated by the Scrum Teams in a Nexus. The Product Owner is also accountable for effective Product Backlog management. How this is done may vary widely across organizations, Nexuses, Scrum Teams, and individuals.\n- **A Scrum Master:** The Scrum Master in the Nexus Integration Team is accountable for ensuring the Nexus framework is understood and enacted as described in the Nexus Guide. This Scrum Master may also be a Scrum Master in one or more of the Scrum Teams in the Nexus.\n- **One or more\\*\\***Nexus Integration Team Members:\\*\\* The Nexus Integration Team often consists of Scrum Team members who help the Scrum Teams to adopt tools and practices that contribute to the Scrum Teams' ability to deliver a valuable and useful Integrated Increment that frequently meets the [Definition of Done]({{< ref \"/tags/definition-of-done\" >}}).\n\nThe Nexus Integration Team is responsible for coaching and guiding the Scrum Teams to acquire, implement, and learn practices and tools that improve their ability to produce a valuable, useful Increment.\n\nMembership in the Nexus Integration Team takes precedence over individual Scrum Team membership. As long as their Nexus Integration Team responsibility is satisfied, they can work as team members of their respective Scrum Teams. This preference helps ensure that the work to resolve issues affecting multiple teams has priority.\n\n## Nexus Events  \n\nNexus adds to or extends the events defined by Scrum. The duration of Nexus events is guided by the length of the corresponding events in the Scrum Guide. They are timeboxed in addition to their corresponding Scrum events.\n\nAt scale, it may not be practical for all members of the Nexus to participate to share information or to come to an agreement. Except where noted, Nexus events are attended by whichever members of the Nexus are needed to achieve the intended outcome of the event most effectively.\n\nNexus events consist of:\n\n## The Sprint\n\nA Sprint in Nexus is the same as in Scrum. The Scrum Teams in a Nexus produce a single Integrated Increment.\n\n## Cross-Team Refinement\n\nCross-Team Refinement of the Product Backlog reduces or eliminates cross-team dependencies within a Nexus. The Product Backlog must be decomposed so that dependencies are transparent, identified across teams, and removed or minimized. Product Backlog items pass through different levels of decomposition from very large and vague requests to actionable work that a single Scrum Team could deliver inside a Sprint.\n\nCross-Team Refinement of the Product Backlog at scale serves a dual purpose:\n\n- It helps the Scrum Teams forecast which team will deliver which Product Backlog items.\n- It identifies dependencies across those teams.\n\nCross-Team Refinement is ongoing. The frequency, duration, and attendance of Cross-Team Refinement varies to optimize these two purposes.\n\nWhere needed, each Scrum Team will continue their own refinement in order for the Product Backlog items to be ready for selection in a Nexus Sprint Planning event. An adequately refined Product Backlog will minimize the emergence of new dependencies during Nexus Sprint Planning.\n\n## Nexus Sprint Planning\n\nThe purpose of Nexus Sprint Planning is to coordinate the activities of all Scrum Teams within a Nexus for a single Sprint. Appropriate representatives from each Scrum Team and the Product Owner meet to plan the Sprint.\n\nThe result of Nexus Sprint Planning is:\n\n- a Nexus Sprint Goal that aligns with the Product Goal and describes the purpose that will be achieved by the Nexus during the Sprint\n- a Sprint Goal for each Scrum Team that aligns with the Nexus Sprint Goal\n- a single Nexus Sprint Backlog that represents the work of the Nexus toward the Nexus Sprint Goal and makes cross-team dependencies transparent\n- A Sprint Backlog for each Scrum Team, which makes transparent the work they will do in support of the Nexus Sprint Goal\n\n## Nexus [Daily Scrum]({{< ref \"/tags/daily-scrum\" >}})\n\nThe purpose of the Nexus Daily Scrum is to identify any integration issues and inspect progress toward the Nexus Sprint Goal. Appropriate representatives from the Scrum Teams attend the Nexus Daily Scrum, inspect the current state of the integrated Increment, and identify integration issues and newly discovered cross-team dependencies or impacts. Each Scrum Team's Daily Scrum complements the Nexus Daily Scrum by creating plans for the day, focused primarily on addressing the integration issues raised during the Nexus Daily Scrum.\n\nThe Nexus Daily Scrum is not the only time Scrum Teams in the Nexus are allowed to adjust their plan. Cross-team communication can occur throughout the day for more detailed discussions about adapting or re-planning the rest of the Sprint's work.\n\n## Nexus [Sprint Review]({{< ref \"/tags/sprint-review\" >}})\n\nThe Nexus Sprint Review is held at the end of the Sprint to provide feedback on the done Integrated Increment that the Nexus has built over the Sprint and determine future adaptations.\n\nSince the entire Integrated Increment is the focus for capturing feedback from stakeholders, a Nexus Sprint Review replaces individual Scrum Team Sprint Reviews. During the event, the Nexus presents the results of their work to key stakeholders and progress toward the Product Goal is discussed, although it may not be possible to show all completed work in detail. Based on this information, attendees collaborate on what the Nexus should do to address the feedback. The Product Backlog may be adjusted to reflect these discussions.\n\n## Nexus Sprint Retrospective\n\nThe purpose of the Nexus Sprint Retrospective is to plan ways to increase quality and effectiveness across the whole Nexus. The Nexus inspects how the last Sprint went with regards to individuals, teams, interactions, processes, tools, and its Definition of Done. In addition to individual team improvements, the Scrum Teams' Sprint Retrospectives complement the Nexus Sprint Retrospective by using bottom-up intelligence to focus on issues that affect the Nexus as a whole.\n\nThe Nexus Sprint Retrospective concludes the Sprint.\n\n# Nexus Artifacts and Commitments\n\nArtifacts represent work or value, and are designed to maximize transparency, as described in the Scrum Guide. The Nexus Integration Team works with the Scrum Teams within a Nexus to ensure that transparency is achieved across all artifacts and that the state of the Integrated Increment is widely understood.\n\nNexus extends Scrum with the following artifacts, and each artifact contains a commitment, as indicated below. These commitments exist to reinforce empiricism and the Scrum value for the Nexus and its stakeholders.\n\n## Product Backlog\n\nThere is a single Product Backlog that contains a list of what is needed to improve the product for the entire Nexus and all of its Scrum Teams. At scale, the Product Backlog must be understood at a level where dependencies can be detected and minimized. The Product Owner is accountable for the Product Backlog, including its content, availability, and ordering.\n\n### Commitment: Product Goal\n\nThe _commitment_ for the Product Backlog is the **Product Goal**. The Product Goal, which describes the future state of the product and serves as a long-term goal of the Nexus.\n\n## Nexus Sprint Backlog\n\nA Nexus Sprint Backlog is the composite of the Nexus Sprint Goal and Product Backlog items from the Sprint Backlogs of the individual Scrum Teams. It is used to highlight dependencies and the flow of work during the Sprint. The Nexus Sprint Backlog is updated throughout the Sprint as more is learned. It should have enough detail that the Nexus can inspect their progress in the Nexus Daily Scrum.\n\n### Commitment: Nexus Sprint Goal\n\nThe _commitment_ for the Nexus Sprint Backlog is the **Nexus Sprint Goal**. The Nexus Sprint Goal is a single objective for the Nexus. It is the sum of all the work and Sprint Goals of the Scrum Teams within the Nexus. It creates coherence and focus for the Nexus for the Sprint by encouraging the Scrum Teams to work together rather than on separate initiatives. The Nexus Sprint Goal is created at the Nexus Sprint Planning event and added to the Nexus Sprint Backlog. As Scrum Teams work during the Sprint, they keep the Nexus Sprint Goal in mind. The Nexus should demonstrate the valuable and useful functionality that is done to achieve the Nexus Sprint Goal at the Nexus Sprint Review in order to receive stakeholder feedback.\n\n## Integrated Increment\n\nThe Integrated Increment represents the current sum of all integrated work completed by a Nexus toward the Product Goal. The Integrated Increment is inspected at the Nexus Sprint Review, but may be delivered to stakeholders before the end of the Sprint. The Integrated Increment must meet the Definition of Done.\n\n### Commitment: Definition of Done\n\nThe _commitment_ for the Integrated Increment is the **Definition of Done,** which defines the state of the integrated work when it meets the quality and measures required for the product. The Increment is done only when integrated, valuable, and usable. The Nexus Integration Team is responsible for a Definition of Done that can be applied to the Integrated Increment developed each Sprint. All Scrum Teams within the Nexus must define and adhere to this Definition of Done. Individual Scrum Teams self-manage to achieve this state. They may choose to apply a more stringent Definition of Done within their own teams, but cannot apply less rigorous criteria than agreed for the Integrated Increment.\n\nDecisions made based on the state of artifacts are only as effective as the level of artifact transparency. Incomplete or partial information will lead to incorrect or flawed decisions. The impact of those decisions can be magnified at the scale of Nexus.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\nexus-framework\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\nexus-framework",
    "ReferencePath": "resources/guides/nexus-framework"
  },
  {
    "FrontMatter": {
      "title": "Manifesto for Agile Software Development",
      "short_title": "Manifesto for Agile Software Development",
      "description": "Outlines core Agile values and principles for software development, emphasising collaboration, adaptability, working software, customer focus, and continuous improvement.",
      "date": "2024-09-17",
      "weight": 505.0,
      "ResourceId": "poyC7fUGitC",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "manifesto-for-agile-software-development",
      "aliases": [
        "guides/manifesto-for-agile-software-developmen/",
        "/learn/agile-delivery-kit/guides/manifesto-for-agile-software-development",
        "/resources/poyC7fUGitC"
      ],
      "aliasesArchive": [
        "guides/manifesto-for-agile-software-developmen/",
        "/learn/agile-delivery-kit/guides/manifesto-for-agile-software-development"
      ],
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Agile Values and Principles",
        "Agile Philosophy",
        "Agile Transformation",
        "Software Development",
        "Value Delivery",
        "Working Software",
        "Agile Frameworks",
        "Agile Planning",
        "Organisational Agility",
        "Product Delivery"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "references": [
        {
          "title": "Manifesto for Agile Software Development",
          "url": "https://agilemanifesto.org/"
        }
      ],
      "recommendedContent": null,
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about Manifesto for Agile Software Development and how it can help you in your Agile journey!",
        "title": "Manifesto for Agile Software Development"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:11Z",
        "short_title": "2025-07-07T16:40:34Z"
      }
    },
    "BodyContent": "We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\n\n- **Individuals and interactions** over _processes and tools_\n- **[Working software]({{< ref \"/tags/working-software\" >}})** over _comprehensive documentation_\n- **Customer collaboration** over _contract negotiation_\n- **Responding to change** over _following a plan_\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\n## Principles behind the Agile Manifesto\n\nWe follow these principles:\n\n- Our highest priority is to satisfy the customer through early and [continuous delivery]({{< ref \"/tags/continuous-delivery\" >}}) of valuable software.\n- Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.\n- Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n- Business people and developers must work together daily throughout the project.\n- Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n- The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n- Working software is the primary measure of progress.\n- Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n- Continuous attention to [technical excellence]({{< ref \"/tags/technical-excellence\" >}}) and good design enhances agility.\n- Simplicity--the art of maximizing the amount of work not done--is essential.\n- The best architectures, requirements, and designs emerge from self-organizing teams.\n- At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\manifesto-for-agile-software-development\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\manifesto-for-agile-software-development",
    "ReferencePath": "resources/guides/manifesto-for-agile-software-development"
  },
  {
    "FrontMatter": {
      "title": "Kanban Guide for Scrum Teams",
      "short_title": "Kanban Guide for Scrum Teams",
      "description": "Explains how Scrum Teams can use Kanban practices to optimise workflow, track flow metrics, and enhance transparency, efficiency, and continuous improvement in product delivery.",
      "date": "2024-09-17",
      "weight": 840.0,
      "ResourceId": "Z3HzXH_nmmz",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "kanban-guide-for-scrum-teams",
      "aliases": [
        "/guides/Kanban-Guide-for-Scrum-Teams.html",
        "/learn/agile-delivery-kit/guides/kanban-guide-for-scrum-teams",
        "/resources/Z3HzXH_nmmz"
      ],
      "aliasesArchive": [
        "/guides/Kanban-Guide-for-Scrum-Teams.html",
        "/learn/agile-delivery-kit/guides/kanban-guide-for-scrum-teams"
      ],
      "concepts": [
        "Framework"
      ],
      "categories": [
        "Product Development"
      ],
      "tags": [
        "Definition of Workflow",
        "Service Level Expectation",
        "Software Development",
        "Flow Efficiency",
        "Operational Practices",
        "Metrics and Learning",
        "Transparency",
        "Value Delivery",
        "Agile Frameworks",
        "Empirical Process Control",
        "Throughput",
        "Cycle Time",
        "Scrum Team",
        "Pragmatic Thinking",
        "Team Performance"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "references": [
        {
          "title": "The Kanban Guide for Scrum Teams on Scrum.org",
          "url": "https://scrum.org/resources/kanban-guide-scrum-teams"
        },
        {
          "title": "Work can flow across the Sprint boundary",
          "url": "https://nkdagility.com/blog/work-can-flow-across-sprint-boundary/"
        },
        {
          "title": "No Estimates and is it advisable for a Scrum Team to adopt it?",
          "url": "https://nkdagility.com/blog/no-estimates-and-is-it-advisable-for-a-scrum-team-to-adopt-it/"
        }
      ],
      "recommendedContent": [
        {
          "collection": "practices",
          "path": "_practices/service-level-expectation-sle.md"
        }
      ],
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about Kanban Guide for Scrum Teams and how it can help you in your Agile journey!",
        "title": "Kanban Guide for Scrum Teams"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:08Z",
        "short_title": "2025-07-07T16:40:34Z"
      }
    },
    "BodyContent": "The flow-based perspective of [Kanban]({{< ref \"/categories/kanban\" >}}) can enhance and complement the [Scrum]({{< ref \"/categories/scrum\" >}}) framework and its implementation. Teams can add complementary Kanban practices whether they are just starting to use Scrum or have been using it all along. The Kanban Guide for Scrum Teams is the result of a collaboration between members of the Scrum.org community and leaders of the Kanban community. Together, they stand behind The Kanban Guide for Scrum Teams. It is their shared belief that professional [product development]({{< ref \"/categories/product-development\" >}}) practitioners can benefit from the application of Kanban together with Scrum.\n{: .lead}\n\n### Relation to the Scrum Guide\n\nThis guide does not replace or discount any part of The Scrum Guide. It is designed to enhance and expand the practices of Scrum. This guide assumes the reader is operating a process using the Scrum framework. Therefore, The Scrum Guide applies in its entirety.\n\n## Definition of Kanban\n\nKanban (n): a strategy for optimizing the flow of value through a process that uses a visual, work-in-progress limited pull system.\n\n## Kanban with Scrum Theory\n\n### Flow and Empiricism\n\nCentral to the definition of Kanban is the concept of flow. Flow is the movement of value throughout the product development system. Kanban optimizes flow by improving the overall efficiency, effectiveness, and predictability of a process. Optimizing flow in a Scrum context requires defining what flow means in Scrum. Scrum is founded on [empirical process control]({{< ref \"/tags/empirical-process-control\" >}}) theory, or empiricism. Key to empirical process control is the frequency of the [transparency]({{< ref \"/tags/transparency\" >}}), inspection, and adaptation cycle – which we can also describe as the [cycle time]({{< ref \"/tags/cycle-time\" >}}) through the feedback loop. When Kanban practices are applied to Scrum, they provide a focus on improving the flow through the feedback loop; optimizing transparency and the frequency of inspection and adaptation for both the product and the process.\n\n### The Basic Metrics of Flow\n\nThe four basic metrics of flow that Scrum Teams using Kanban need to track are as follows:\n\n- **Work in Progress (WIP)**: The number of work items started but not finished. Note the difference between the WIP metric and the policies a [Scrum Team]({{< ref \"/tags/scrum-team\" >}}) uses to limit WIP. The team can use the WIP metric to provide transparency about their progress towards reducing their WIP and improving their flow.\n- **Cycle Time**: The amount of elapsed time between when a work item starts and when a work item finishes.\n- **Work Item Age**: The amount of time between when a work item started and the current time. This applies only to items that are still in progress.\n- **[Throughput]({{< ref \"/tags/throughput\" >}})**: The number of work items finished per unit of time.\n\n### Little’s Law – The Key to Governing Flow\n\nA key tenet governing flow theory is Little’s Law, which is a guideline that establishes the following relationship:\n\n![Littles Law](https://nkdagility.com/wp-content/uploads/2020/11/naked-agility-littles-law.jpg)\n\nLittle’s Law reveals that in general, for a given process with a given throughput, the more things that you work on at any given time (on average), the longer it is going to take to finish those things (on average). If cycle times are too long, the first action Scrum Teams should consider is lowering WIP. Most of the other elements of Kanban are built upon the relationship between WIP and cycle time. Little’s Law also shows us how flow theory relies on empiricism by using flow metrics and data to gain transparency into the historical flow and then using that data to inform flow inspection and adaptation experiments.\n\n## Kanban Practices\n\nScrum Teams can achieve flow optimization by using the following four practices:\n\n- Visualization of the workflow\n- Limiting Work in Progress (WIP)\n- Active management of work items in progress\n- Inspecting and adapting the team’s definition of “Workflow”\n\n### Definition of “Workflow”\n\nThe four Kanban practices are enabled by the Scrum Team’s Definition of Workflow. This definition represents the Scrum Team members’ explicit understanding of what their policies are for following the Kanban practices. This shared understanding improves transparency and enables self-management. Note that the scope of the Definition of Workflow may span beyond the Sprint and the Sprint Backlog. For instance, a Scrum Team‘s Definition of Workflow may encompass flow inside and/or outside of the Sprint. Creating and adapting the Definition of Workflow is the accountability of the relevant roles on the Scrum Team as described in the Scrum Guide. No one outside of the Scrum Team should tell the Scrum Team how to define their Workflow.\n\n### Visualization of the Workflow – the Kanban Board\n\nVisualization using the Kanban board is the way the Scrum Team makes its Workflow transparent. The board’s configuration should prompt the right conversations at the right time and proactively suggest opportunities for improvement. Visualization should include the following:\n\n- Defined points at which the Scrum Team considers work to have started and to have finished.\n- A definition of the work items – the individual units of value (stakeholder value, knowledge value, process improvement value) that are flowing through the Scrum Team’s system (most likely [Product Backlog]({{< ref \"/tags/product-backlog\" >}}) items (PBIs)).\n- A definition of the workflow states that the work items flow through from start to finish (of which there must be at least one active state).\n- Explicit policies about how work flows through each state (which may include items from a Scrum Team’s [Definition of Done]({{< ref \"/tags/definition-of-done\" >}}) and pull policies between stages).\n- Policies for limiting Work in Progress (WIP).\n\n### Limiting Work in Progress (WIP)\n\nWork in Progress (WIP) refers to the work items the Scrum Team has started but has not yet finished. Scrum Teams using Kanban must explicitly limit the number of these work items in progress. A Scrum Team can explicitly limit WIP however they see fit but should stick to that limit once established. The primary effect of limiting WIP is that it creates a pull system. It is called a pull system because the team starts work (i.e. pulls) on an item only when it is clear that it has the capacity to do so. When the WIP drops below the defined limit, that is the signal to start new work. Note this is different from a push system, which demands that work starts on an item whenever it is requested. Limiting WIP helps flow and improves the Scrum Team’s self-management, focus, commitment, and collaboration.\n\n### Active Management of Work Items in Progress\n\nLimiting WIP is necessary to achieve flow, but it alone is not sufficient. The third practice to establish flow is the active management of work items in progress. Within the Sprint, this management by the Scrum Team can take several forms, including but not limited to the following:\n\n- Making sure that work items are only pulled into the Workflow at about the same rate that they leave the Workflow.\n- Ensuring work items aren’t left to age unnecessarily.\n- Responding quickly to blocked or queued work items as well those that are exceeding the team’s expected Cycle Time levels (See Service Level Expectation – SLE).\n\n### Service Level Expectation (SLE)\n\nA service level expectation (SLE) forecasts how long it should take a given item to flow from start to finish within the Scrum Team’s Workflow. The Scrum Team uses its SLE to find active flow issues and to inspect and adapt in cases of falling below those expectations. The SLE itself has two parts: a range of elapsed days and a probability associated with that period (e.g., 85% of work items should be finished in eight days or less). The SLE should be based on the Scrum Team’s historical Cycle Time, and once calculated, the Scrum Team should make it transparent. If no historical Cycle Time data exists, the Scrum Team should make its best guess and then inspect and adapt once there is enough historical data to do a proper SLE calculation.\n\n### Inspect and Adapt the Definition of “Workflow”\n\nThe Scrum Team uses the existing Scrum events to inspect and adapt its Definition of Workflow, thereby helping to improve empiricism and optimizing the value the Scrum Team delivers. The following are aspects of the Definition of Workflow the Scrum Team might adopt:\n\n- **Visualization policies** – for example, Workflow states – either changing the actual Workflow or bringing more transparency to an area in which the team wants to inspect and adapt.\n- **How-we-work policies** – these can directly address an impediment. For example, adjusting WIP limits and SLEs or changing the batch size (how often items are pulled between states) can have a dramatic impact.\n\n## Flow-Based Events\n\nKanban in a Scrum context does not require any additional events to those outlined in The Scrum Guide. However, using a flow-based perspective and metrics in Scrum’s events strengthens Scrum’s empirical approach.\n\n### The Sprint\n\nThe Kanban complementary practices don’t invalidate the need for Scrum’s Sprint. The Sprint and its events provide opportunities for inspection and adaptation of both product and process. It’s a common misconception that teams can only deliver value once per Sprint. In fact, they must deliver value at least once per Sprint. Teams using Scrum with Kanban use the Sprint and its events as a feedback improvement loop by collaboratively inspecting and adapting their Definition of Workflow and flow metrics. Kanban practices can help Scrum Teams improve flow and create an environment where decisions are made just-in-time throughout the Sprint based on inspection and adaptation. In this environment, Scrum Teams rely on the Sprint Goal and close collaboration within the Scrum Team to optimize the value delivered in the Sprint\n\n### Sprint Planning\n\nA flow-based Sprint Planning meeting uses flow metrics as an aid for developing the Sprint Backlog. Reviewing historical throughput can help a Scrum Team understand their capacity for the next Sprint.\n\n### [Daily Scrum]({{< ref \"/tags/daily-scrum\" >}})\n\nA flow-based Daily Scrum focuses the Developers on doing everything they can to maintain consistent flow. While the goal of the Daily Scrum remains the same as outlined in The Scrum Guide, the meeting itself takes place around the Kanban board and focuses on where flow is lacking and on what actions the Developers can take to get it back. Additional things to consider during a flow-based Daily Scrum include the following:\nWhat work items are blocked and what can be done to get them unblocked?\nWhat work is flowing slower than expected? What is the Work Item Age of each item in progress? What work items have violated or are about to violate their SLE and what can the Scrum Team do to get that work completed?\nAre there any factors not represented on the board that may impact our ability to complete work today?\nHave we learned anything new that might change what the Scrum Team has planned to work on next?\nHave we broken our WIP limit? And what can we do to ensure we can complete the work in progress?\n\n### [Sprint Review]({{< ref \"/tags/sprint-review\" >}})\n\nThe Scrum Guide provides an outline of the Sprint Review. Inspecting Kanban flow metrics as part of the review can create opportunities for new conversations about monitoring progress towards the Product Goal. Reviewing Throughput can provide additional information when the [Product Owner]({{< ref \"/tags/product-owner\" >}}) discusses likely delivery dates.\n\n### Sprint Retrospective\n\nA flow-based Sprint Retrospective adds the inspection of flow metrics and analytics to help determine what improvements the Scrum Team can make to its processes. The Scrum Team using Kanban also inspects and adapts the Definition of Workflow to optimize the flow in the next Sprint. Using a cumulative flow diagram to visualize a Scrum Team’s WIP, approximate average Cycle Time and average Throughput can be valuable. In addition to the Sprint Retrospective, the Scrum Team should consider taking advantage of process inspection and adaptation opportunities as they emerge throughout the Sprint. Similarly, changes to a Scrum Team’s Definition of Workflow may happen at any time. Because these changes will have a material impact on how the Scrum Team performs, changes made during the regular cadence provided by the Sprint Retrospective event will reduce complexity and improve focus, commitment and transparency.\n\n### [Increment]({{< ref \"/tags/increment\" >}})\n\nScrum requires the team to create (at minimum) a valuable, useful Increment every Sprint. Scrum’s empiricism encourages the creation of multiple valuable increments during the Sprint to enable fast inspect and adapt feedback loops. Kanban helps manage the flow of these feedback loops more explicitly and allows the Scrum Team to identify bottlenecks, constraints, and impediments to enable this faster, more [continuous delivery]({{< ref \"/tags/continuous-delivery\" >}}) of value\nCheck our blog for more details\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\kanban-guide-for-scrum-teams\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\kanban-guide-for-scrum-teams",
    "ReferencePath": "resources/guides/kanban-guide-for-scrum-teams"
  },
  {
    "FrontMatter": {
      "title": "Investing for Business Agility - Using evidence-based portfolio management to achieve better business outcomes",
      "short_title": "Evidence-Based Portfolio Management",
      "description": "Explains how evidence-based portfolio management helps organisations extend agile practices beyond teams, enabling greater responsiveness and improved business outcomes.",
      "date": "2024-09-17",
      "weight": 1000.0,
      "ResourceId": "KD08D48Weks",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "evidence-based-portfolio-management",
      "aliases": [
        "/learn/agile-delivery-kit/guides/evidence-based-portfolio-management",
        "/resources/KD08D48Weks",
        "/resources/guides/investing-for-business-agility-using-evidence-based-portfolio-management-to-achieve-better-business-outcomes"
      ],
      "aliasesArchive": [
        "/learn/agile-delivery-kit/guides/evidence-based-portfolio-management",
        "/resources/guides/investing-for-business-agility-using-evidence-based-portfolio-management-to-achieve-better-business-outcomes"
      ],
      "concepts": [],
      "categories": [
        "Uncategorized"
      ],
      "tags": [
        "Business Agility"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about Investing for Business Agility - Using evidence-based portfolio management to achieve better business outcomes and how it can help you in your Agile journey!",
        "title": "Investing for Business Agility - Using evidence-based portfolio management to achieve better business outcomes"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:06Z",
        "short_title": "2025-07-07T16:40:35Z"
      }
    },
    "BodyContent": "Organizations who seek to improve their competitiveness by being more responsive to change often turn to agile approaches to improve their responsiveness. While many organizations have reaped the rewards of agility at the team level, their traditional management practices impede deeper change that would enable true [business agility]({{< ref \"/tags/business-agility\" >}}). Agile principles and practices must spread beyond the [Scrum]({{< ref \"/categories/scrum\" >}}) Team in order for organizations to achieve the dramatic improvement that they seek in their business results.\n\nRead: [Investing for Business Agility: Using evidence-based portfolio management to achieve better business outcomes](https://scrum.org/resources/investing-business-agility)\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\evidence-based-portfolio-management\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\evidence-based-portfolio-management",
    "ReferencePath": "resources/guides/evidence-based-portfolio-management"
  },
  {
    "FrontMatter": {
      "title": "The Evidence-Based Management Guide: Improving Value Delivery under Conditions of Uncertainty",
      "short_title": "Evidence-Based Management Guide for Value Delivery",
      "description": "A practical guide to Evidence-Based Management, showing how organisations use experiments, feedback, and key value areas to improve value delivery amid uncertainty.",
      "date": "2024-09-17",
      "weight": 390.0,
      "ResourceId": "ltc7lzhy14U",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "the-evidence-based-management-guide-improving-value-delivery-under-conditions-of-uncertainty",
      "aliases": [
        "/learn/agile-delivery-kit/guides/evidence-based-management-guide",
        "/resources/ltc7lzhy14U"
      ],
      "aliasesArchive": [
        "/learn/agile-delivery-kit/guides/evidence-based-management-guide"
      ],
      "concepts": [
        "Principle"
      ],
      "categories": [
        "Product Development",
        "Product Management"
      ],
      "tags": [
        "Customer Focus",
        "Strategic Goals",
        "Decision Making",
        "Evidence Based Leadership",
        "Evidence Based Management",
        "Metrics and Learning",
        "Value Delivery",
        "Agile Product Management",
        "Agile Strategy",
        "Business Agility",
        "Organisational Agility",
        "Product Strategy",
        "Software Development",
        "Enterprise Agility",
        "Common Goals"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "recommendedContent": null,
      "videos": null,
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about The Evidence-Based Management Guide",
        "title": "The Evidence-Based Management Guide Improving Value Delivery under Conditions of Uncertainty"
      },
      "Watermarks": {
        "description": "2025-05-07T12:57:55Z",
        "short_title": "2025-07-07T16:40:37Z"
      }
    },
    "BodyContent": "### May 2024\n\nOrganizations exist for a reason: to achieve something that they think they, uniquely, can achieve. They often express this purpose in different ways, at different levels, to create purpose\nand alignment about what they do:\n\n- A Vision Statement , an expression of the change that the organization wants to make in the world.\n- A Mission Statement , an expression of why the organization is uniquely capable of achieving the Vision Statement.\n- Goals , on several different levels and timescales, that help the organization achieve its Mission and Vision.\n\nOrganizations form goals to make concrete progress toward achieving their _Mission_ and _Vision_. Without goals, the _Mission_ and _Vision_ are simply lofty aspirations. Furthermore, without effective _Mission_ and _Vision_ statements goals lack a compelling purpose, especially for those working under conditions of uncertainty.\n\nThis Guide defines EBM and its concepts.\n\n## Definition of Evidence-Based Management\n\nEvidence-Based Management (EBM) is a framework that helps people, teams, and organizations make better-informed decisions to help them achieve their goals by using intentional [experimentation]({{< ref \"/tags/experimentation\" >}}) and feedback.\n\n## EBM Helps Organizations Achieve Their Goals in a Complex World\n\nComplex problems don't have easy solutions. In order to solve them, organizations must experiment by defining, working toward, and achieving larger goals in small steps. Each step\ninvolves comparing the actual result of the experiment with its desired outcome, and adapting the next step based accordingly (see Figure 1).^1\n\nEBM focuses on three levels of goals:\n\n- [Strategic Goals]({{< ref \"/tags/strategic-goals\" >}}), important things that the organization feels it needs to achieve to realize its Mission and Vision. These goals are so big and far away, with many uncertainties along the journey that the organization must use empiricism to achieve them. Because a Strategic Goal is aspirational and the path to achieving it is uncertain, the organization needs a series of practical targets, like Intermediate Goals.\n- Intermediate Goals , achievements of which will indicate that the organization is on the path to a Strategic Goal. The path to the Intermediate Goal is often still somewhat uncertain, but not completely unknown.\n- Immediate Tactical Goals , which are the current focus of the organization’s improvement efforts.\n\nTo progress towards Strategic and Intermediate goals, organizations form hypotheses about improvements they can make to move toward their Immediate Tactical Goals. These\nhypotheses form the basis of experiments that they run to try to improve. They measure the results of these experiments (evidence) to evaluate their progress toward their goals, and to\ndetermine their next steps (new hypotheses), which may include adjusting their goals based on what they have learned. This is empiricism in action with EBM.\n\n(^1) 1 For more on complexity, see the [Scrum]({{< ref \"/categories/scrum\" >}}) Theory section of the Scrum Guide at\nhttps://www.scrumguides.org/scrum-guide.html\n\n**Figure 1: Reaching strategic goals requires experimenting, inspecting, and adapting**^2\n\n### Setting Goals\n\nOrganizations must define measurable goals that will indicate whether that goal is achieved. These measurable goals, measures, and experiments should be made transparent in order to\nencourage organizational alignment.\n\n(^2) 2 Figure adapted from Mike Rother’s Improvement Kata\n(http://wwwpersonal.umich.edu/~mrother/The_Improvement_Kata.html)\n\nConsider the case of the response to an infectious disease:\n\n- The Strategic Goal is to eradicate the effects of the disease as measured by the number of people who fall ill and suffer significant illness. Measurement is important to understand if progress is being made and if the strategic goal is relevant across time. In this example, the goal is focused on the effects of the disease, and not on the means for\n  achieving the desired impact. For example, the goal is not to vaccinate a certain percentage of the population against the disease. While that may be an activity\n  necessary to achieving the Strategic Goal, it is not the Strategic Goal.\n- An example of an Intermediate Goal is the successful completion of a trial of a vaccine against the disease. This is still ambitious and measurable, and achieving it may require the completion of many different activities. It is a necessary step on the path to achieving the Strategic Goal.\n- Examples of immediate tactical goals may include activities like isolating symptoms, evaluating a therapy, sequencing the DNA of a virus or bacterium, and so forth. These are critical near-term objectives toward which a team or group of teams will work.\n\nThe Strategic Goal is usually focused on achieving a highly desirable but unrealized outcome for a specific group of people. Achieving the goal results in improved happiness, safety,\nsecurity, or well-being of the recipients of some product or service. In EBM, we refer to this as Unrealized Value, which is the satisfaction gap between a beneficiary’s desired outcome and\ntheir current experience. Unrealized Value is described in greater detail below, in the Key Value Areas section.\n\n## Understanding What is Valuable\n\nOrganizations measure many different kinds of things. Broadly speaking, measures fall into five categories:\n\n- _Inputs_. These are things that the organization spends money on. While necessary to produce value, there is no correlation between the amount of input and the value that customers experience. Inputs establish constraints on experiments, e.g. an organization may establish limits on how much a team may spend (the input) to test an improvement idea.\n- _Activities_. These are things that people in the organization do, such as perform work, go to meetings, have discussions, write code, create reports, attend conferences, and so\n  forth.\n- _Outputs_. These are things that the organization produces, such as product releases (including features), reports, defect reports, product reviews, and so on.\n- _Outcomes_. These are desirable things that a customer or user of a product experiences. They represent some new or improved capability that the customer or user was not able to achieve before. Examples include being able to travel to a destination faster than before, or being able to earn or save more money than before. Outcomes can also be negative, as in the case where the value a customer or user experiences declines from previous experiences, for example when a service they previously relied upon is no longer available.\n- _Impacts_. Results that the organization or its non-customer stakeholders (such as investors) achieve when customers or users of a product achieve their desired outcomes. Examples include things like increased revenue or profit, improved [market share]({{< ref \"/tags/market-share\" >}}), and increased share price. Positive Impacts are only sustainably achievable when customers experience improved outcomes.\n\nThe problem most organizations face, which is often reflected in the things they measure, is that measuring activities and outputs is easy, while measuring outcomes is difficult. Organizations may gather a lot of data with insufficient information about their ability to deliver value. However, delivering valuable outcomes to customers is essential if organizations are to reach their goals. For example, working more hours (activities) and delivering more features (outputs) does not necessarily lead to improved customer experiences (outcomes).\n\nWhile it is possible for organizations to improve _impacts_ without improving customer outcomes, doing so usually harms the organization, such as when it reduces product quality to improve\nprofitability, or when it sells products below cost to increase revenue and market share but harms profitability. Achieving impacts is important, but they have to be achieved in a sustainable way that does not harm the organization’s long-term viability.\n\n#### Making Progress Toward Goals in a Series of Small Steps\n\nThe first step in the journey toward a Strategic Goal is understanding your Current State to frame your thinking about where and how you need to improve. For example, if your goal is to\nimprove the satisfaction of your customers you will need to know what your customers experience today and what they would like to experience in the future. You will probably also\nneed to understand your own capability for delivering value, i.e. how fast you are able to makeimprovements in the value that your customers will experience, so that you can set realistic\nshort and medium term goals.\n\nThe Experiment Loop (shown in Figure 1) helps organizations move from their Current State toward their Immediate Tactical Goal, their Intermediate Goal, and ultimately their Strategic\nGoal, by taking small, measured steps, called experiments, using explicit hypotheses.^3 This loop consists of:\n\n- _Forming a hypothesis for improvement._ Based on experience, form an idea of\n  something you think will help you move toward your Immediate Tactical Goal, and\n  decide how you will know whether this experiment succeeded based on measurement.\n- _Running your experiments._ Make the change you think will help you to improve, and\n  gather data to support or refute your hypothesis.\n\n(^3) The Experiment Loop is a variation on the Shewhart Cycle, popularized by W. Edwards Deming, also\nsometimes called the PDCA (Plan-Do-Check-Act) cycle; see https://en.wikipedia.org/wiki/PDCA.\n\n- Inspecting your results. Did the change you made improve your results based on the measurements you have made? Not all changes do; some changes actually make things worse.\n- Adapting your goals or your approach based on what you learned. Both your goals and your improvement experiments will likely evolve as you learn more about customers, competitors, and your organization's capabilities. Goals can change because of outside events, and your tactics to reach your goals may need to be reconsidered and revised, for example:\n- Was the Immediate Tactical Goal the right goal?\n- Are the Intermediate and Strategic Goals still relevant or do they need to be adapted?\n- If you failed to achieve the Immediate Tactical Goal but you think it is still important to achieve, how might you do better next time?\n- If you achieved your Intermediate or Strategic Goals you will need to formulate new goals.\n\n### Hypotheses, Experiments, Features, and Requirements\n\nOrganizations can spend a lot of money implementing features (distinguishing characteristics) and other requirements in products,^4 only to find that customers don’t share the company’s\nopinion on their value; beliefs in what is valuable are merely assumptions until they are validated by customers. This is where hypotheses and experiments are useful.\n\nA hypothesis is a belief that doing something will lead to something else, such as delivering feature X will lead to outcome Y. An experiment is a test that is designed to prove or reject\nsome hypothesis.\n\nEvery feature and every requirement really represents a hypothesis about value. One of the goals of an empirical approach is to make these hypotheses explicit and to consciously design\nexperiments that explicitly test the value of the features and requirements. The entire feature or requirement need not actually be built to determine whether it is valuable; it may be sufficient for a team to simply build enough of it to validate critical assumptions that would prove or disprove its value.\n\nExplicitly forming hypotheses, measuring results, and inspecting and adapting goals based on those results are implicit parts of an agile approach. Making this work explicit and transparent is what EBM adds to the organizational improvement process.\n\n(^4) Adapted from the IEEE 829 specification\n\n## EBM Uses Key Value Areas to Examine Improvement\n\n## Opportunities\n\nIn addition to using hypotheses and experiments to move toward goals, EBM provides a set of perspectives on value and the organization’s ability to deliver value. These perspectives are\ncalled Key Value Areas (KVAs). These areas examine the goals of the organization (Unrealized Value), the current state of the organization relative to those goals ([Current Value]({{< ref \"/tags/current-value\" >}})), the\nresponsiveness of the organization in delivering value (Time-to-Market), and the effectiveness of the organization in delivering value (Ability-to-Innovate).\n\nMarket value KVAs (UV, CV) reflect customer outcomes. Whereas, organizational capability KVAs (A2I, T2M) reflect the organization’s ability to deliver valuable customer outcomes, and\nso may be measured in terms of either outcomes or outputs. Input, activity, output, and impact measures do not tell an organization anything about organizational capability to deliver valuable outcomes.\n\nFocusing on these four dimensions enables organizations to better understand where they are and where they need to go (see Figure 2).\n\n**Figure 2: Key Value Areas provide lenses to examine improvement opportunities.**\n\nEach KVA focuses on a different aspect of either value, or the ability of the organization to deliver value. Delivering business value (Current Value) is important, but organizations must\nalso show that they can respond to change (Time-to-Market) while being able to sustain innovation over time (Ability-to-Innovate). And they must be able to continually make progress\ntoward their long-term goals (Unrealized Value) or they risk succumbing to stagnation and complacency.\n\n### Current Value (CV)\n\n##### Measures that quantify the value that the product delivers today\n\nThe purpose of looking at CV measures is to understand the value that an organization delivers to customers and stakeholders at the present time; it considers only what exists right now, not\nthe value that might exist in the future. Questions that organizations need to continually re-evaluate for current value are:\n\n1. How happy are users and customers today? Is their happiness improving or declining?\n2. How happy are your employees today? Is their happiness improving or declining?\n3. How happy are your investors and other stakeholders today? Is their happiness improving or declining?\n\nConsidering CV helps an organization understand the value that their customers or users experience today.\n\nExample: While profit, one way to measure investor happiness, will tell you the economic impact of the value that you deliver, knowing whether customers are happy with their purchase will tell you more about where you may need to improve to keep those customers. If your customers have few alternatives to your product, you may have high profit even though customer atisfaction is low. Considering CV from several perspectives will give you a better understanding of your challenges and opportunities.\n\nCustomer happiness and investor happiness also do not tell the whole story about your ability to deliver value. Considering employee attitudes recognizes that employees are ultimately the producers of value. Engaged employees that know how to maintain, sustain and enhance the product are one of the most significant assets of an organization, and happy employees are more engaged and productive.\n\n### Unrealized Value (UV)\n\n##### Measures that quantify the potential future value that could be realized if the organization met the needs of all potential customers or users\n\nLooking at Unrealized Value measures helps an organization to maximize the value that it realizes from a product or service over time. When customers, users, or clients experience a\ngap between their current experience and the experience that they would like to have, the difference between the two represents an opportunity; this opportunity is measured by Unrealized Value.\n\nQuestions that organizations need to continually re-evaluate for UV are:\n\n1. Can any additional value be created by our organization in this market or other markets?\n2. Is it worth the effort and risk to pursue these untapped opportunities?\n3. Should further investments be made to capture additional Unrealized Value?\n\nThe consideration of both CV and UV provides organizations with a way to balance present and possible future benefits. Strategic Goals are formed from some satisfaction gap and an\nopportunity for an organization to decrease UV by increasing CV.\n\nExample : A product may have low CV, because it is an early version being used to test the market, but very high UV, indicating that there is great market potential. Investing in\nthe product to try to boost CV is probably warranted, given the potential returns, even though the product is not currently producing high CV.\n\nConversely, a product with very high CV, large market share, no near competitors, and very satisfied customers may not warrant much new investment; this is the classic cash cow product that is very profitable but nearing the end of its product investment cycle with low UV.\n\n### [Ability to Innovate]({{< ref \"/tags/ability-to-innovate\" >}}) (A2I)\n\n##### Measures that quantify the effectiveness of an organization in delivering new capabilities\n\nThe goal of looking at A2I measures is to maximize the organization’s ability to deliver new capabilities and innovative solutions. Organizations should continually re-evaluate their A2I by\nasking:\n\n1. What prevents the organization from delivering new value?\n2. What prevents customers or users from benefiting from that innovation?\n\nImproving A2I helps an organization become more effective in ensuring that the work that it does improves the value that its products or services deliver to customers or users.\n\nExample : A variety of things can impede an organization from being able to deliver new capabilities and value: spending too much time remedying poor product quality, needing to maintain multiple variations of a product due to lack of operational excellence, lack of decentralized decision-making, inability to hire and inspire talented, passionate team-members, and so on.\n\nAs low-value features and systemic impediments accumulate, more budget and time are consumed maintaining the product or overcoming impediments, reducing its available capacity to innovate. In addition, anything that prevents users or customers from benefiting from innovation, such as hard to assemble/install products or new versions of products, will also reduce A2I.\n\n### Time-to-Market (T2M)\n\n##### Measures that quantify how quickly the organization can deliver and learn from feedback they gather from experiments\n\nThe reason for looking at T2M measures is to minimize the amount of time it takes for the organization to deliver something that is potentially valuable. To know this they must measure\nthe result so that they know whether they actually improved the value their customers experienced. Questions that organizations need to ask to evaluate their T2M are:\n\n1. How fast can the organization learn from new experiments and information?\n2. How fast can you adapt based on the information?\n3. How fast can you test new ideas with customers?\n\nImproving T2M helps improve the frequency at which an organization can potentially change CV.\n\nExample : Reducing the number of features in a product release can dramatically improve T2M; the smallest release possible is one that delivers at least some incremental improvement in value to some subset of the customers/users of the product. Many organizations also focus on removing non value-added activities from the [product development]({{< ref \"/categories/product-development\" >}}) and delivery process to improve their T2M.\n\nExample Key Value Measures (KVMs) for each KVA are described in the Appendix.\n\n## Inspecting and Adapting Based on Experiment Results\n\nOnce you have gathered measures from your experiments to improve value, you will need to inspect or evaluate your results against your goals to see if your improvement ideas worked.\nExamining measures in each of the Key Value Areas will help you to maintain a balanced perspective.\n\nImmediate Tactical Goals should improve Current Value and reduce Unrealized Value. Even when Immediate Tactical Goals are focused on organizational effectiveness or speed of obtaining feedback, considering CV and UV helps the organization keep [customer satisfaction]({{< ref \"/tags/customer-satisfaction\" >}}) in sight. Each KVAs is a different lens that helps you focus on different aspects of your performance towards the goals you are trying to achieve.\n\nSimilarly, when your Immediate Tactical Goals are focused on improving effectiveness (A2I) or the speed at which you can obtain feedback (T2M), you never want to ignore or take for granted\nyour customers’ experiences. When an organization targets improvements only in A2I and T2M without monitoring CV and UV, they are focused only on internal processes that may not help\nthem further satisfy customers or achieve value. This can lead to, or be an indication of, a lack of outcome-based goals.\n\nIf you succeed in achieving your Immediate Tactical Goal, congratulations! Your next step will be to form a new Immediate Tactical Goal that, when achieved, will take you closer to your\nIntermediate Goal. Continue devising experiments, or things you can try, to achieve that goal.\n\nIf you’ve actually achieved your Intermediate Goal, even better! Now you’ll need to form a new Intermediate Goal that, when you achieve it, will move you closer to your Strategic Goal. You’ll also need to form a new Immediate Tactical Goal to provide you with a nearer target to work toward.\n\nSometimes you’ll find that your goals need adjusting. You might discover that a goal is no longer relevant, or that it needs to be refined. This can happen to your goals at any level. And\nsometimes you’ll fail to reach your Immediate Tactical Goal because your experiment did not produce the results you had expected. This is not a bad thing, and what you learned helps you\nto devise new experiments that may yield better results.\n\n## End Note\n\nEvidence-Based Management is free and offered in this Guide. Although implementing only\nparts of EBM is possible, the result is not Evidence-Based Management.\n\n## Acknowledgements\n\nEvidence-Based Management was collaboratively developed by Scrum.org, the Professional\nScrum Trainer Community, Ken Schwaber and Christina Schwaber.\n\n## Appendix: Example Key Value Measures\n\nTo encourage adaptability, EBM defines no specific Key Value Measures (KVMs). KVMs listed below are presented to show the kinds of measures that might help an organization to understand its current state, desired future state, and factors that influence its ability to improve.\n\n### Current Value (CV)\n\n| KVM                                                              | Measuring                                                                                                                                                                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Revenue per Employee]({{< ref \"/tags/revenue-per-employee\" >}}) | The ratio (gross revenue / # of employees) is a key competitive indicator within an industry. This varies significantly by industry.                                                                 |\n| Product Cost Ratio                                               | Total expenses and costs for the product(s)/system(s) being measured, including operational costs compared to revenue.                                                                               |\n| Employee Satisfaction                                            | Some form of sentiment analysis to help gauge [employee engagement]({{< ref \"/tags/employee-engagement\" >}}), energy, and enthusiasm.                                                                |\n| Customer Satisfaction                                            | Some form of sentiment analysis to help gauge customer engagement and happiness with the product.                                                                                                    |\n| Customer Usage Index                                             | Measurement of usage, by feature, to help infer the degree to which customers find the product useful and whether actual usage meets expectations on how long users should be taking with a feature. |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n### Unrealized Value (UV)\n\n| KVM                                         | Measuring                                                                                                                                                       |\n| ------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Market Share                                | The relative percentage of the market not controlled by the product; the potential market share that the product might achieve if it better met customer needs. |\n| Customer or User Satisfaction Gap           | The difference between a customer or user’s desired experience and their current experience.                                                                    |\n| Desired Customer Experience or satisfaction | A measure that indicates the experience that the customer would like to have.                                                                                   |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n### Time-to-Market (T2M)\n\n| KVM                                                              | Measuring                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Build and Integration Frequency                                  | The number of integrated and tested builds per time period. For a team that is releasing frequently or continuously, this measure is superseded by actual release measures.                                                                                                                                                                                                                                                                                |\n| Release Frequency                                                | The number of releases per time period, e.g. continuously, daily, weekly, monthly, quarterly, etc. This helps reflect the time needed to satisfy the customer with new and competitive products.                                                                                                                                                                                                                                                           |\n| Release Stabilization Period                                     | The time spent correcting product problems between the point the developers say it is ready to release and the point where it is actually released to customers. This helps represent the impact of poor development practices and underlying design and codebase.                                                                                                                                                                                         |\n| Mean Time to Repair                                              | The average amount of time it takes from when an error is detected and when it is fixed. This helps reveal the efficiency of an organization to fix an error.                                                                                                                                                                                                                                                                                              |\n| Customer [Cycle Time]({{< ref \"/tags/cycle-time\" >}})            | The amount of time from when work starts on a release until the point where it is actually released. This measure helps reflect an organization’s ability to reach its customer.                                                                                                                                                                                                                                                                           |\n| [Lead Time]({{< ref \"/tags/lead-time\" >}})                       | The amount of time from when an idea is proposed or a hypothesis is formed until a customer can benefit from that idea. This measure may vary based on customer and product. It is a contributing factor in customer satisfaction.                                                                                                                                                                                                                         |\n| Lead Time for Changes                                            | The amount of time to go from code-committed to code successfully running in production. For more information, see the DORA 2019 report.                                                                                                                                                                                                                                                                                                                   |\n| [Deployment Frequency]({{< ref \"/tags/deployment-frequency\" >}}) | The number of times that the organization deployed (released) a new version of the product to customers/users. For more information, see the DORA 2019 report.                                                                                                                                                                                                                                                                                             |\n| Time to Restore Service                                          | The amount of time between the start of a service outage and the restoration of full availability of the service. For more information, see the DORA 2019 report.                                                                                                                                                                                                                                                                                          |\n| Time-to-Learn                                                    | The total time needed to sketch an idea or improvement, build it, deliver it to users, and learn from their usage.                                                                                                                                                                                                                                                                                                                                         |\n| Time to remove Impediment                                        | The average amount of time from when an impediment is raised until when it is resolved. It is a contributing factor to lead time and employee satisfaction                                                                                                                                                                                                                                                                                                 |\n| Time to Pivot                                                    | A measure of true [business agility]({{< ref \"/tags/business-agility\" >}}) that presents the elapsed time between when an organization receives feedback or new information and when it responds to that feedback; for example, the time between when it finds out that a competitor has delivered a new market-winning feature to when the organization responds with matching or exceeding new capabilities that measurably improve customer experience. |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n### Ability to Innovate (A2I)\n\n| KVM                                                  | Measuring                                                                                                                                                                                                                                                      |\n| ---------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Innovation Rate                                      | The percentage of effort or cost spent on new product capabilities, divided by total product effort or cost. This provides insight into the capacity of the organization to deliver new product capabilities.                                                  |\n| Defect Trends                                        | Measurement of change in defects since the last measurement. A defect is anything that reduces the value of the product to a customer, user, or to the organization itself. Defects are generally things that don’t work as intended.                          |\n| On-Product Index                                     | The percentage of time teams spend working on product and value.                                                                                                                                                                                               |\n| Installed Version Index                              | The number of versions of a product that are currently being supported. This reflects the effort the organization spends supporting and maintaining older versions of the software.                                                                            |\n| [Technical Debt]({{< ref \"/tags/technical-debt\" >}}) | A concept in programming that reflects the extra development and testing work that arises when “quick and dirty” solutions result in later remediation. It creates an undesirable impact on the delivery of value and an avoidable increase in waste and risk. |\n| Production Incident Count                            | The number of times in a given period that the Development Team was interrupted to fix a problem in an installed product. The number and frequency of Production Incidents can help indicate the stability of the product.                                     |\n| Active Product (Code) Branches                       | The number of different versions (or variants) of a product or service. Provides insight into the potential impact of change and the resulting complexity of work.                                                                                             |\n| Time Spent Merging Code Between Branches             | The amount of time spent applying changes across different versions of a product or service. Provides insight into the potential impact of change and the resulting complexity of work.                                                                        |\n| Time Spent Context-Switching                         | Examples include time lost to interruptions caused by meetings or calls, time spent switching between tasks, and time lost when team members are interrupted to help people outside the team can give simple insight into the magnitude of the problem.        |\n| Change Failure Rate                                  | The percentage of released product changes that result in degraded service and require remediation (e.g. hotfix, rollback, patch). For more information, see the DORA 2019 report.                                                                             |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\nThe percentage of released product changes that result in degraded service\nand require remediation (e.g. hotfix, rollback, patch). For more information,\nsee the DORA 2019 report.\n\n© 2024 Scrum.org\nThis publication is offered for license under the Attribution Share-Alike license of Creative\nCommons, accessible at http://creativecommons.org/licenses/by-sa/4.0/legalcode and also\ndescribed in summary form at http://creativecommons.org/licenses/by-sa/4.0/. By utilizing this\nEBM Guide, you acknowledge and agree that you have read and agree to be bound by the\nterms of the Attribution Share-Alike license of Creative Commons.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\evidence-based-management-guide\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\evidence-based-management-guide",
    "ReferencePath": "resources/guides/evidence-based-management-guide"
  },
  {
    "FrontMatter": {
      "title": "The Evidence-Based Management Guide 2020: Improving Value Delivery under Conditions of Uncertainty",
      "short_title": "Evidence-Based Management Guide 2020",
      "description": "Evidence-Based Management (EBM) guides organisations to improve value delivery under uncertainty by using empirical goals, measurement, and continuous experimentation.",
      "date": "2024-09-17",
      "weight": 360.0,
      "ResourceId": "Rv0ZjvwYVy5",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "the-evidence-based-management-guide-2020-improving-value-delivery-under-conditions-of-uncertainty",
      "aliases": [
        "/resources/Rv0ZjvwYVy5"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "aliesses": [
        "/learn/agile-delivery-kit/guides/evidence-based-management-guide-2020",
        "practices/evidence-based-management-guide-2020",
        "practices/evidence-based-management-guide-2020.html",
        "guides/evidence-based-management-guide-2020",
        "guides/evidence-based-management-guide-2020.html"
      ],
      "references": [
        {
          "title": "The Evidence-Based Management Guide | Scrum.org",
          "url": "https://scrum.org/resources/evidence-based-management-guide"
        },
        {
          "title": "Evidence-based Management: Gathering the metrics",
          "url": "https://nkdagility.com/blog/evidence-based-management-gathering-metrics/"
        },
        {
          "title": "Metrics that matter with evidence-based management",
          "url": "https://nkdagility.com/blog/metrics-that-matter-with-evidence-based-management/"
        },
        {
          "title": "Evidence-based Management: Gathering the metrics",
          "url": "https://nkdagility.com/blog/evidence-based-management-gathering-metrics/"
        },
        {
          "title": "Professional Agile Leadership with Evidence-Based Management (PAL-EBM)",
          "url": "https://nkdagility.com/training/courses/professional-agile-leadership-with-evidence-based-management-pal-ebm-training-experience-with-certification-measuring-value-to-enable-improvement-and-agility/"
        }
      ],
      "recommendedContent": null,
      "videos": null,
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about \"The Evidence-Based Management Guide and how it can help you in your Agile journey!",
        "title": "The Evidence-Based Management Guide: Improving Value Delivery under Conditions of Uncertainty"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:05Z",
        "short_title": "2025-07-07T16:40:39Z"
      },
      "concepts": [
        "Model"
      ],
      "categories": [
        "Product Development",
        "Product Management",
        "Engineering Excellence"
      ],
      "tags": [
        "Customer Focus",
        "Evidence Based Management",
        "Continuous Improvement",
        "Current Value",
        "Decision Making",
        "Evidence Based Leadership",
        "Experimentation",
        "Metrics and Learning",
        "Value Delivery",
        "Empirical Process Control",
        "Hypothesis Driven Development",
        "Software Development",
        "Operational Practices",
        "Business Agility",
        "Organisational Agility"
      ]
    },
    "BodyContent": "### 2020\n\nEvidence-Based Management (EBM) is an empirical approach that helps organizations to continuously improve customer outcomes, organizational capabilities, and business results under conditions of uncertainty. It provides a framework for organizations to improve their ability to deliver value in an uncertain world, seeking a path toward [strategic goals]({{< ref \"/tags/strategic-goals\" >}}). Using intentional [experimentation]({{< ref \"/tags/experimentation\" >}}) and evidence (measures), EBM enables organizations to systematically improve their performance over time and refine their goals based on better information\nBy measuring current conditions, setting performance goals, forming small experiments for improvement that can be run quickly, measuring the effect of the experiment, and inspecting and adapting goals and next steps, EBM helps organizations to take into account the best available evidence to help them make decisions on ways to improve.\n\nThis Guide defines EBM, its concepts, and its application.\n\n## Seek Goals using Empiricism\n\nComplex problems defy easy solutions, but instead require organizations seek toward their goals in a series of small steps, inspecting the results of each step, and adapting their next actions based on feedback.\n\nThis model has several key elements:\n\n- A **Strategic Goal**, which is something important that the organization would like to achieve. This goal is so big and far away, with many uncertainties along the journey that the organization must use empiricism. Because the Strategic Goal is aspirational and the path to it is uncertain, the organization needs a series of practical targets, like\n- **Intermediate Goals**, achievements of which will indicate that the organization is on the path to its Strategic Goal. The path to the Intermediate Goal is often still somewhat uncertain, but not completely unknown.\n- **Immediate Tactical Goals**, critical near-term objectives toward which a team or group of teams will work help toward Intermediate Goals.\n- A **Starting State**, which is where the organization is relative to the Strategic Goal when it starts its journey.\n- A **Current State**, which is where the organization is relative to the Strategic Goal at the\n  present time.\n\nIn order to progress toward the Strategic Goal, organizations run experiments which involve forming hypotheses that are intended to advance the organization toward their current Intermediate Goal. As they run these experiments and gather results, they use the evidence they obtain to evaluate their goals and determine their next steps to advance toward these goals.\n\n![Reaching strategic goals requires experimenting, inspecting, and adapting](https://nkdagility.com/wp-content/uploads/2020/11/naked-agility-hypothesis-driven-480x450.jpg)\n\n## Setting Goals\n\nWhen setting goals, organizations must define specific measures that will indicate that the goal is achieved. Goals, measures, and experiments should be made transparent in order to encourage organizational alignment.\nConsider the case of the response to an infectious disease:\n\n- The Strategic Goal is to eradicate the effects of the disease, as measured by the number of people who fall ill and suffer significant illness. Measurement is important; in this example, the goal is focused on the effects of the disease, and not on the means for achieving the desired impact. For example, the goal is not to vaccinate a certain percentage of the population against the disease; that may be an activity necessary to achieving the Strategic Goal, but it is not the Strategic Goal.\n- An example of an Intermediate Goal is the successful completion of a trial of a vaccine against the disease. This is still ambitious and measurable, and achieving it may require the completion of many different activities, but it is seen as a necessary step on the path to achieving the Strategic Goal.\n  Examples of immediate tactical goals may include activities like isolating symptoms, evaluating a therapy, sequencing the DNA of a virus or bacterium, and so forth.\n- The Strategic Goal is usually focused on achieving a highly desirable but unrealized outcome for a specific group of people that results in improved happiness, safety, security, or well-being of the recipients of some product or service. In EBM, we refer to this as Unrealized Value, which is the satisfaction gap between a beneficiary’s desired outcome and their current experience. Unrealized Value is described in greater detail below, in the Key-Value Areas section.\n\n## Understanding What Is Valuable\n\nOrganizations measure many different kinds of things. Broadly speaking, measures fall into three categories:\n\n- **Activities**. These are things that people in the organization do, such as perform work, go to meetings, have discussions, write code, create reports, attend conferences, and so forth.\n- **Outputs**. These are things that the organization produces, such as product releases (including features), reports, defect reports, product reviews, and so on.\n- **Outcomes**. These are desirable things that a customer or user of a product experiences. They represent some new or improved capability that the customer or user was not able to achieve before. Examples include being able to travel to a destination faster than before or being able to earn or save more money than before. Outcomes can also be negative, as in the case where the value a customer or user experiences declines from previous experiences, for example when a service they previously relied upon is no longer available.\n\nThe problem most organizations face, which is often reflected in the things they measure, is that measuring activities and outputs is easy while measuring outcomes is difficult. Organizations may gather a lot of data with insufficient information about their ability to deliver value. However, delivering valuable outcomes to customers is essential if organizations are to reach their goals. For example, working more hours (activities) and delivering more features (outputs) does not necessarily lead to improved customer experiences (outcomes).\n\n## Four Key Value Areas\n\nIn addition to using hypotheses and experiments to move toward goals, EBM provides a set of perspectives on value and the organization’s ability to deliver value. These perspectives are called Key Value Areas (KVAs). These areas examine the goals of the organization (Unrealized Value), the current state of the organization relative to those goals ([Current Value]({{< ref \"/tags/current-value\" >}})), the responsiveness of the organization in delivering value (Time-to-Market), and the effectiveness of the organization in delivering value (Ability-to-Innovate). Focusing on these four dimensions enables organizations to better understand where they are and where they need to go (see\nFigure 2).\n\n![EBM focuses on four Key Value Areas (KVAs)](https://nkdagility.com/wp-content/uploads/2020/11/naked-agility-evidence-based-management-768x394.jpg)\n\nEach KVA focuses on a different aspect of either value or the ability of the organization to deliver value. Delivering business value (Current Value) is important, but organizations must also show that they can respond to change (Time-to-Market) while being able to sustain innovation over time (Ability-to-Innovate). And they must be able to continually make progress toward their long-term goals (Unrealized Value) or they risk succumbing to stagnation and complacency. Example Key Value Measures (KVMs) for each KVA are described in the Appendix.\n\n### Current Value (CV)\n\nThe value that the product delivers today.\n\nThe purpose of looking at CV is to understand the value that an organization delivers to\ncustomers and stakeholders at the present time; it considers only what exists right now, not the\nvalue that might exist in the future. Questions that organizations need to continually re-evaluate\nfor current value are:\n\n- How happy are users and customers today? Is their happiness improving or declining?\n- How happy are your employees today? Is their happiness improving or declining?\n- How happy are your investors and other stakeholders today? Is their happiness improving or declining?\n\nConsidering CV helps an organization understand the value that their customers or users experience today\n\n> Example: While profit, one way to measure investor happiness, will tell you the economic impact of the value that you deliver, knowing whether customers are happy with their purchase will tell you more about where you may need to improve to keep those customers. If your customers have few alternatives to your product, you may have high profit even though [customer satisfaction]({{< ref \"/tags/customer-satisfaction\" >}}) is low. Considering CV from several perspectives will give you a better understanding of your challenges and opportunities. Customer happiness and investor happiness also do not tell the whole story about your ability to deliver value. Considering employee attitudes recognizes that employees are ultimately the producers of value. Engaged employees that know how to maintain, sustain and enhance the product are one of the most significant assets of an organization, and happy employees are more engaged and productive.\n\n### Unrealized Value (UV)\n\nThe potential future value that could be realized if the organization met the needs of all potential customers or users\n\nLooking at Unrealized Value helps an organization to maximize the value that it realizes from a product or service over time. When customers, users, or clients experience a gap between their current experience and the experience that they would like to have, the difference between the two represents an opportunity; this opportunity is measured by Unrealized Value.\n\nQuestions that organizations need to continually re-evaluate for UV are:\n\n- Can any additional value be created by our organization in this market or other markets?\n- Is it worth the effort and risk to pursue these untapped opportunities?\n- Should further investments be made to capture additional Unrealized Value?\n\nThe consideration of both CV and UV provides organizations with a way to balance present and possible future benefits. Strategic Goals are formed from some satisfaction gap and an opportunity for an organization to decrease UV by increasing CV.\n\n> Example: A product may have low CV, because it is an early version being used to test the market, but very high UV, indicating that there is great market potential. Investing in the product to try to boost CV is probably warranted, given the potential returns, even though the product is not currently producing high CV. Conversely, a product with very high CV, large [market share]({{< ref \"/tags/market-share\" >}}), no near competitors, and very satisfied customers may not warrant much new investment; this is the classic cash cow product that is very profitable but nearing the end of its product investment cycle with low UV.\n\n### Time-to-Market (T2M)\n\nThe organization’s ability to quickly deliver new capabilities, services, or products\n\nThe reason for looking at T2M is to minimize the amount of time it takes for the organization to deliver value. Without actively managing T2M, the ability to sustainably deliver value in the future is unknown. Questions that organizations need to continually re-evaluate for T2M are:\n\n- How fast can the organization learn from new experiments and information?\n- How fast can you adapt based on the information?\n- How fast can you test new ideas with customers?\n\nImproving T2M helps improve the frequency at which an organization can potentially change\nCV.\n\n> Example: Reducing the number of features in a product release can dramatically improve T2M; the smallest release possible is one that delivers at least some\n> incremental improvement in value to some subset of the customers/users of the product. Many organizations also focus on removing non value-added activities from the [product development]({{< ref \"/categories/product-development\" >}}) and delivery process to improve their T2M.\n\n### [Ability to Innovate]({{< ref \"/tags/ability-to-innovate\" >}}) (A2I)\n\nThe effectiveness of an organization to deliver new capabilities that might better meet customer needs\n\nThe goal of looking at the A2I is to maximize the organization’s ability to deliver new capabilities\nand innovative solutions. Organizations should continually re-evaluate their A2I by asking:\n\n- What prevents the organization from delivering new value?\n- What prevents customers or users from benefiting from that innovation?\n- Improving A2I helps an organization become more effective in ensuring that the work that it does improves the value that its products or services deliver to customers or users.\n\n> Example: A variety of things can impede an organization from being able to deliver new capabilities and value: spending too much time remedying poor product quality, needing to maintain multiple variations of a product due to lack of operational excellence, lack of decentralized decision-making, inability to hire and inspire talented, passionate team members, and so on.\n> As low-value features and systemic impediments accumulate, more budget and time is consumed maintaining the product or overcoming impediments, reducing its available capacity to innovate. In addition, anything that prevents users or customers from benefiting from innovation, such as hard to assemble/install products or new versions of products, will also reduce A2I.\n\n## Progress toward Goals\n\nThe first step in the journey toward a Strategic Goal is understanding your Current State. If your focus is to achieve a Strategic Goal related to Unrealized Value (UV), as is typically the case, then measuring the Current Value (CV) your product or service delivers is where you should start (of course, if your product or service is new then its CV will be zero). To understand where you need to improve, you may also need to understand your effectiveness (A2I), and your responsiveness (T2M).\n\nThe Experiment Loop (shown in Figure 1) helps organizations move from their Current State toward their Next Target Goal, and ultimately their Strategic Goal, by taking small, measured steps, called experiments, using explicit hypotheses.3 This loop consists of:\n\n- **Forming a hypothesis for improvement.** Based on experience, form an idea of something you think will help you move toward your Next Target Goal, and decide how you will know whether this experiment succeeded based on measurement.\n- **Running your experiments.** Make the change you think will help you to improve and gather data to support or refute your hypothesis.\n- **Inspecting your results. **Did the change you made improve your results based on the measurements you have made? Not all changes do; some changes actually make things worse.\n- **Adapting your goals or your approach based on what you learned.** Both your goals and your improvement experiments will likely evolve as you learn more about customers, competitors, and your organization’s capabilities. Goals can change because of outside events, and your tactics to reach your goals may need to be reconsidered and revised. Was the Intermediate Goal the right goal? Is the Strategic Goal still relevant? If you achieved the Intermediate Goal, you will need to choose a new Intermediate Goal. If you did not achieve it, you will need to decide whether you need to persevere, stop, or pivot toward something new. If your Strategic Goal is no longer relevant, you will need to either adapt it, or replace it.\n\n## Hypotheses, Experiments, Features, and Requirements\n\nFeatures are “distinguishing characteristics of a product” , while a requirement is, practically speaking, something that someone thinks would be desirable in a product. A feature description is one kind of requirement.\n\nOrganizations can spend a lot of money implementing features and other requirements in products, only to find that customers don’t share the company’s opinion on their value; beliefs in what is valuable are merely assumptions until they are validated by customers. This is where hypotheses and experiments are useful.\n\nIn simplified terms, a hypothesis is a proposed explanation for some observation that has not yet been proven (or disproven). In the context of requirements, it is a belief that doing something will lead to something else, such as delivering feature X will lead to outcome Y. An experiment is a test that is designed to prove or reject some hypothesis.\n\nEvery feature and every requirement really represent a hypothesis about value. One of the goals of an empirical approach is to make these hypotheses explicit and to consciously design experiments that explicitly test the value of the features and requirements. The entire feature or requirement need not actually be built to determine whether it is valuable; it may be sufficient for a team to simply build enough of it to validate critical assumptions that would prove or disprove its value.\n\nExplicitly forming hypotheses, measuring results, and inspecting and adapting goals based on those results are implicit parts of an agile approach. Making this work explicit and transparent is what EBM adds to the organizational improvement process.\n\n## End Note\n\nEvidence-Based Management is free and offered in this Guide. Although implementing only parts of EBM is possible, the result is not Evidence-Based Management\n\n## Acknowledgements\n\nEvidence-Based Management was collaboratively developed by [Scrum]({{< ref \"/categories/scrum\" >}}).org, the [Professional Scrum]({{< ref \"/tags/professional-scrum\" >}}) Trainer community, Ken Schwaber and Christina Schwaber.\n\n## Appendix: Example Key Value Measures\n\nTo encourage adaptability, EBM defines no specific Key Value Measures (KVMs). KVMs listed below are presented to show the kinds of measures that might help an organization to understand its current state, desired future state, and factors that influence its ability to improve.\n\n### Current Value (CV)\n\n| KVM                                                              | Measuring                                                                                                                                                                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Revenue per Employee]({{< ref \"/tags/revenue-per-employee\" >}}) | The ratio (gross revenue / # of employees) is a key competitive indicator within an industry. This varies significantly by industry.                                                                 |\n| Product Cost Ratio                                               | Total expenses and costs for the product(s)/system(s) being measured, including operational costs compared to revenue.                                                                               |\n| Employee Satisfaction                                            | Some form of sentiment analysis to help gauge [employee engagement]({{< ref \"/tags/employee-engagement\" >}}), energy, and enthusiasm.                                                                |\n| Customer Satisfaction                                            | Some form of sentiment analysis to help gauge customer engagement and happiness with the product.                                                                                                    |\n| Customer Usage Index                                             | Measurement of usage, by feature, to help infer the degree to which customers find the product useful and whether actual usage meets expectations on how long users should be taking with a feature. |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n### Unrealized Value (UV)\n\n| KVM                                         | Measuring                                                                                                                                                       |\n| ------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Market Share                                | The relative percentage of the market not controlled by the product; the potential market share that the product might achieve if it better met customer needs. |\n| Customer or User Satisfaction Gap           | The difference between a customer or user’s desired experience and their current experience.                                                                    |\n| Desired Customer Experience or satisfaction | A measure that indicates the experience that the customer would like to have.                                                                                   |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n### Time-to-Market (T2M)\n\n| KVM                                                              | Measuring                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Build and Integration Frequency                                  | The number of integrated and tested builds per time period. For a team that is releasing frequently or continuously, this measure is superseded by actual release measures.                                                                                                                                                                                                                                                                                |\n| Release Frequency                                                | The number of releases per time period, e.g. continuously, daily, weekly, monthly, quarterly, etc. This helps reflect the time needed to satisfy the customer with new and competitive products.                                                                                                                                                                                                                                                           |\n| Release Stabilization Period                                     | The time spent correcting product problems between the point the developers say it is ready to release and the point where it is actually released to customers. This helps represent the impact of poor development practices and underlying design and codebase.                                                                                                                                                                                         |\n| Mean Time to Repair                                              | The average amount of time it takes from when an error is detected and when it is fixed. This helps reveal the efficiency of an organization to fix an error.                                                                                                                                                                                                                                                                                              |\n| Customer [Cycle Time]({{< ref \"/tags/cycle-time\" >}})            | The amount of time from when work starts on a release until the point where it is actually released. This measure helps reflect an organization’s ability to reach its customer.                                                                                                                                                                                                                                                                           |\n| [Lead Time]({{< ref \"/tags/lead-time\" >}})                       | The amount of time from when an idea is proposed or a hypothesis is formed until a customer can benefit from that idea. This measure may vary based on customer and product. It is a contributing factor in customer satisfaction.                                                                                                                                                                                                                         |\n| Lead Time for Changes                                            | The amount of time to go from code-committed to code successfully running in production. For more information, see the DORA 2019 report.                                                                                                                                                                                                                                                                                                                   |\n| [Deployment Frequency]({{< ref \"/tags/deployment-frequency\" >}}) | The number of times that the organization deployed (released) a new version of the product to customers/users. For more information, see the DORA 2019 report.                                                                                                                                                                                                                                                                                             |\n| Time to Restore Service                                          | The amount of time between the start of a service outage and the restoration of full availability of the service. For more information, see the DORA 2019 report.                                                                                                                                                                                                                                                                                          |\n| Time-to-Learn                                                    | The total time needed to sketch an idea or improvement, build it, deliver it to users, and learn from their usage.                                                                                                                                                                                                                                                                                                                                         |\n| Time to remove Impediment                                        | The average amount of time from when an impediment is raised until when it is resolved. It is a contributing factor to lead time and employee satisfaction                                                                                                                                                                                                                                                                                                 |\n| Time to Pivot                                                    | A measure of true [business agility]({{< ref \"/tags/business-agility\" >}}) that presents the elapsed time between when an organization receives feedback or new information and when it responds to that feedback; for example, the time between when it finds out that a competitor has delivered a new market-winning feature to when the organization responds with matching or exceeding new capabilities that measurably improve customer experience. |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n### Ability to Innovate (A2I)\n\n| KVM                                                  | Measuring                                                                                                                                                                                                                                                      |\n| ---------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Innovation Rate                                      | The percentage of effort or cost spent on new product capabilities, divided by total product effort or cost. This provides insight into the capacity of the organization to deliver new product capabilities.                                                  |\n| Defect Trends                                        | Measurement of change in defects since the last measurement. A defect is anything that reduces the value of the product to a customer, user, or to the organization itself. Defects are generally things that don’t work as intended.                          |\n| On-Product Index                                     | The percentage of time teams spend working on product and value.                                                                                                                                                                                               |\n| Installed Version Index                              | The number of versions of a product that are currently being supported. This reflects the effort the organization spends supporting and maintaining older versions of the software.                                                                            |\n| [Technical Debt]({{< ref \"/tags/technical-debt\" >}}) | A concept in programming that reflects the extra development and testing work that arises when “quick and dirty” solutions result in later remediation. It creates an undesirable impact on the delivery of value and an avoidable increase in waste and risk. |\n| Production Incident Count                            | The number of times in a given period that the Development Team was interrupted to fix a problem in an installed product. The number and frequency of Production Incidents can help indicate the stability of the product.                                     |\n| Active Product (Code) Branches                       | The number of different versions (or variants) of a product or service. Provides insight into the potential impact of change and the resulting complexity of work.                                                                                             |\n| Time Spent Merging Code Between Branches             | The amount of time spent applying changes across different versions of a product or service. Provides insight into the potential impact of change and the resulting complexity of work.                                                                        |\n| Time Spent Context-Switching                         | Examples include time lost to interruptions caused by meetings or calls, time spent switching between tasks, and time lost when team members are interrupted to help people outside the team can give simple insight into the magnitude of the problem.        |\n| Change Failure Rate                                  | The percentage of released product changes that result in degraded service and require remediation (e.g. hotfix, rollback, patch). For more information, see the DORA 2019 report.                                                                             |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\n© 2020 Scrum.org\nThis publication is offered for license under the Attribution Share-Alike license of Creative Commons,\naccessible at http://creativecommons.org/licenses/by-sa/4.0/legalcode and also described in\nsummary form at http://creativecommons.org/licenses/by-sa/4.0/. By utilizing this EBM Guide, you\nacknowledge and agree that you have read and agree to be bound by the terms of the Attribution\nShare-Alike license of Creative Commons.\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\evidence-based-management-guide-2020\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\evidence-based-management-guide-2020",
    "ReferencePath": "resources/guides/evidence-based-management-guide-2020"
  },
  {
    "FrontMatter": {
      "title": "Detecting Agile BS",
      "short_title": "Detecting Agile BS",
      "description": "Guidance for identifying genuine agile software development in DoD projects, including key principles, warning signs, essential tools, and critical evaluation questions.",
      "date": "2024-09-17",
      "weight": 360.0,
      "ResourceId": "Tt8SPr3xJER",
      "ResourceImport": false,
      "ResourceType": "guides",
      "slug": "detecting-agile-bs",
      "aliases": [
        "/Guides/Detecting-Agile-BS.html",
        "/learn/agile-delivery-kit/guides/detecting-agile-bs",
        "/resources/Tt8SPr3xJER"
      ],
      "aliasesArchive": [
        "/Guides/Detecting-Agile-BS.html",
        "/learn/agile-delivery-kit/guides/detecting-agile-bs"
      ],
      "concepts": [
        "Tool"
      ],
      "categories": [
        "Product Development",
        "Engineering Excellence"
      ],
      "tags": [
        "Customer Focus",
        "Software Development",
        "Operational Practices",
        "Product Delivery"
      ],
      "ResourceContentOrigin": "Human",
      "resourceTypes": "guide",
      "layout": "guide",
      "image": "https://nkdagility.com/wp-content/uploads/2020/12/image-2.png",
      "references": [
        {
          "title": "DIB Guide - Detecting Agile BS",
          "url": "https://media.defense.gov/2019/May/02/2002127286/-1/-1/0/DIBGUIDEDETECTINGAGILEBS.PDF"
        },
        {
          "title": "Defense Innovation Board Ten Commandments of Software",
          "url": "https://media.defense.gov/2018/Apr/22/2001906836/-1/-1/0/DEFENSEINNOVATIONBOARD_TEN_COMMANDMENTS_OF_SOFTWARE_2018.04.20.PDF"
        },
        {
          "title": "Defense Innovation Board Metrics for Software Development",
          "url": "https://media.defense.gov/2018/Jul/10/2001940937/-1/-1/0/DIB_METRICS_FOR_SOFTWARE_DEVELOPMENT_V0.9_2018.07.10.PDF"
        },
        {
          "title": "Defense Innovation Board Do’s and Don’ts for Software",
          "url": "https://media.defense.gov/2018/Oct/09/2002049593/-1/-1/0/DIB_DOS_DONTS_SOFTWARE_2018.10.05.PDF"
        }
      ],
      "videos": [
        {
          "title": "stackconf 2021 | The Tyranny of Taylorism and how to spot Agile BS",
          "embed": "https://www.youtube.com/embed/OJ-7YVekG2s"
        },
        {
          "title": "stackconf online 2020 | Agile Evolution: An Enterprise transformation that shows that you can too",
          "embed": "https://www.youtube.com/embed/6D7ZC5Yq8rU"
        },
        {
          "title": "Agile Evolution: Live Site Culture & Site Reliability at Azure DevOps",
          "embed": "https://www.youtube.com/embed/5bgcpPqcGlw"
        }
      ],
      "creator": "Martin Hinshelwood",
      "card": {
        "button": {
          "content": "Learn More"
        },
        "content": "Discover more about Detecting Agile BS and how it can help you in your Agile journey!",
        "title": "Detecting Agile BS"
      },
      "Watermarks": {
        "description": "2025-05-07T12:58:02Z",
        "short_title": "2025-07-07T16:40:40Z"
      }
    },
    "BodyContent": "Agile is a buzzword of [software development]({{< ref \"/tags/software-development\" >}}), and so all DoD software development projects are, almost by default, now declared to be “agile.” The purpose of this document is to provide guidance to DoD program executives and acquisition professionals on how to detect software projects that are really using agile development versus those that are simply waterfall or spiral development in agile clothing (“agile-[scrum]({{< ref \"/categories/scrum\" >}})-fall”).\n\n![Detecting Agile BS](https://nkdagility.com/wp-content/uploads/2020/12/image-2.png){: .responsiveImage}\n\n## Principles, Values, and Tools\n\nExperts and devotees profess certain key “values” to characterize the culture and approach of\nagile development. In its work, the DIB has developed its own guiding maxims that roughly map\nto these true agile values:\n\n| Agile value                                                                               | DIB maxim                                                                                             |\n| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |\n| Individuals and interactions over processes and tools                                     | “[Competence]({{< ref \"/tags/competence\" >}}) trumps process”                                         |\n| [Working software]({{< ref \"/tags/working-software\" >}}) over comprehensive documentation | “Minimize time from program launch to deployment of simplest useful functionality”                    |\n| Customer collaboration over contract negotiation                                          | “Adopt a DevSecOps culture for software systems”                                                      |\n| Responding to change over following a plan                                                | “Software programs should start small, be iterative, and build on success ‒ or be terminated quickly” |\n\n{: .table .table-striped .table-bordered .d-none .d-md-block}\n\nKey flags that a project is not really agile:\n\n- Nobody on the software development team is talking with and observing the users of the software in action; we mean the actual users of the actual code.1 (The Program Executive Office (PEO) does not count as an actual user, nor does the commanding officer, unless she uses the code.)\n- Continuous feedback from users to the development team (bug reports, users assessments) is not available. Talking once at the beginning of a program to verify requirements doesn’t count!\n- Meeting requirements is treated as more important than getting something useful into the field as quickly as possible.\n- Stakeholders (development, test, ops, security, contracting, contractors, end-users, etc.)2 are acting more-or-less autonomously (e.g. ‘it’s not my job.’)\n- End users of the software are missing-in-action throughout development; at a minimum, they should be present during Release Planning and User Acceptance Testing.\n- DevSecOps culture is lacking if manual processes are tolerated when such processes can and should be automated (e.g. [automated testing]({{< ref \"/tags/automated-testing\" >}}), [continuous integration]({{< ref \"/tags/continuous-integration\" >}}), [continuous delivery]({{< ref \"/tags/continuous-delivery\" >}})).\n\nSome current, common tools in use by teams using agile development (these will change as better tools become available):\n\n- Git, ClearCase, or Subversion – version control system for tracking changes to source code. Git is the de-facto open-source standard for modern software development.\n- [Azure Repos]({{< ref \"/tags/azure-repos\" >}}), BitBucket, [GitHub]({{< ref \"/tags/github\" >}}) – repository hosting sites. Also provide issues tracking, continuous integration “apps” and other productivity tools. Widely used by the open-source community.\n- [Azure Pipelines]({{< ref \"/tags/azure-pipelines\" >}}), Jenkins, Circle CI, Travis CI – continuous integration service used to build and test BitBucket and GitHub software projects\n- Chef, Ansible, or Puppet – software for writing [system configuration]({{< ref \"/tags/system-configuration\" >}}) “recipes” and streamlining the task of configuring and maintaining a collection of servers\n- Docker – a computer program that performs operating-system-level virtualization, also known as “containerization”\n- Kubernetes or Docker Swarm – for container orchestration\n- [Azure Boards]({{< ref \"/tags/azure-boards\" >}}), GitHub, Jira, Pivotal Tracker – issues reporting, tracking, and management\n\nGraphical version:\n\n![DIB DevSecOps Technology Stack](https://nkdagility.com/wp-content/uploads/2020/12/image-1-768x428.png){: .responsiveImage}\n\n## Questions to Ask\n\n- How do you test your code? (Wrong answers: “we have a testing organization”, “OT&E is responsible for testing”)\n  Advanced version: what tool suite are you using for unit tests, regression testing, functional tests, security scans, and deployment certification?\n- How automated are your development, testing, security, and deployment pipelines?\n  Advanced version: what tool suite are you using for continuous integration (CI), continuous deployment (CD), regression testing, program documentation; is your infrastructure defined by code?\n- Who are your users and how are you interacting with them?\n  Advanced version: what mechanisms are you using to get direct feedback from your users? What tool suite are you using for issue reporting and tracking? How do you allocate issues to programming teams? How to you inform users that their issues are being addressed and/or have been resolved?\n- What is your (current and future) [cycle time]({{< ref \"/tags/cycle-time\" >}}) for releases to your users?\n  Advanced version: what software platforms to you support? Are you using containers? What configuration management tools do you use?\n\n## Questions for Program Management\n\n- How many programmers are part of the organizations that own the budget and milestones for the program? (Wrong answers: “we don’t know,” “zero,” “it depends on how you define a programmer”)\n- What are your management metrics for development and operations; how are they used to inform priorities, detect problems; how often are they accessed and used by [leadership]({{< ref \"/categories/leadership\" >}})?\n- What have you learned in your past three sprint cycles and what did you do about it? (Wrong answers: “what’s a sprint cycle?,” “we are waiting to get approval from management”)\n- Who are the users that you deliver value to each sprint cycle? Can we talk to them? (Wrong answers: “we don’t directly deploy our code to users”)\n\n## Questions for Customers and Users\n\n- How do you communicate with the developers? Did they observe your relevant teams working and ask questions that indicated a deep understanding of your needs? When is the last time they sat with you and talked about features you would like to see implemented?\n- How do you send in suggestions for new features or report issues or bugs in the code? What type of feedback do you get to your requests/reports? Are you ever asked to try prototypes of new software features and observed using them?\n- What is the time it takes for a requested feature to show up in the application?\n\n## Questions for Program Leadership\n\n- Are teams delivering working software to at least some subset of real users every iteration (including the first) and gathering feedback? (alt: every two weeks)\n- Is there a product charter that lays out the mission and [strategic goals]({{< ref \"/tags/strategic-goals\" >}})? Do all members of the team understand both, and are they able to see how their work contributes to both?\n- Is feedback from users turned into concrete work items for sprint teams on timelines shorter than one month?\n- Are teams empowered to change the requirements based on user feedback?\n- Are teams empowered to change their process based on what they learn?\n- Is the full ecosystem of your project agile? (Agile programming teams followed by linear, bureaucratic deployment is a failure.)\n\nMore information on some of the features of DoD software programs are included in Appendix A [DIB Ten Commandments on Software](https://media.defense.gov/2018/Apr/22/2001906836/-1/-1/0/DEFENSEINNOVATIONBOARD_TEN_COMMANDMENTS_OF_SOFTWARE_2018.04.20.PDF), Appendix B [DIB Metrics for Software Development](https://media.defense.gov/2018/Jul/10/2001940937/-1/-1/0/DIB_METRICS_FOR_SOFTWARE_DEVELOPMENT_V0.9_2018.07.10.PDF),\nand Appendix C [DIB Do’s and Don’ts of Software](https://media.defense.gov/2018/Oct/09/2002049593/-1/-1/0/DIB_DOS_DONTS_SOFTWARE_2018.10.05.PDF).\n",
    "FilePath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\detecting-agile-bs\\index.md",
    "FolderPath": "C:\\Users\\MartinHinshelwoodNKD\\source\\repos\\NKDAgility.com\\site\\content\\resources\\guides\\detecting-agile-bs",
    "ReferencePath": "resources/guides/detecting-agile-bs"
  }
]
