[
  {
    "Title": "Why Your Definition of Done Is the Secret Weapon Your Team Needs to Win",
    "Description": "Unlock your team's true potential—discover why a powerful definition of done drives real business impact, customer value, and lasting competitive advantage.",
    "ResourceId": "LHqjlId0SiU",
    "Url": "https://www.youtube.com/watch?v=LHqjlId0SiU",
    "Date": "2025-07-16T06:45:00Z",
    "Captions": "Most teams don't fail because they can't build. They fail because they don't finish the right way.\n\nDefining done isn't just a technical exercise; it's a strategic advantage. It's the difference between products that work and products that win, between features that exist and features that deliver real value, between teams that complete tasks and teams that move the business forward.\n\nA strong, evolving definition of done protects your revenue. It boosts your customer satisfaction. It reduces waste, rework, and firefighting. It increases confidence across leadership teams and customers.\n\nWe don't just teach teams how to build; we teach them how to finish well, consistently, predictably, and at scale. Because done isn't the end of work—it's the beginning of real impact.\n\nIf you're ready to turn done from a checkbox into a competitive edge, let's define it together."
  },
  {
    "Title": "Why Your Definition of “Done” Is Holding Back Quality, Agility, and Trust—And How to Raise the Bar",
    "Description": "Is your team’s “done” really done? Discover how a clear, objective definition of done boosts quality, agility, and trust in product delivery.",
    "ResourceId": "lRBsJkDeKrI",
    "Url": "https://www.youtube.com/watch?v=lRBsJkDeKrI",
    "Date": "2025-07-09T06:45:00Z",
    "Captions": "Can your product pass the done test? Good done isn't aspirational. It's objective. It's measurable.\n\nA strong definition of done means the increment is tested, deployed, monitored, gathering telemetry, validating or diminishing a real business hypothesis. It's not about tasks being finished. It's about outcomes being real. It's about delivering something that works, that's safe, that's valuable, and that you can learn from immediately.\n\nWe help teams set real-world benchmarks for excellence because raising the bar on done raises everything else with it: quality, agility, trust, time to value.\n\nReady to define your done and raise the bar on quality? Let's build your future-proof standard."
  },
  {
    "Title": "Acceptance Criteria vs Definition of Done: Why Getting This Right Builds Trust and Delivers Quality Faster",
    "Description": "Stop confusing acceptance criteria with definition of done—learn the crucial difference to boost quality, speed, and trust in your agile delivery.",
    "ResourceId": "6SEsBq0qvr0",
    "Url": "https://www.youtube.com/watch?v=6SEsBq0qvr0",
    "Date": "2025-07-02T06:45:00Z",
    "Captions": "One defines quality, the other defines scope. Acceptance criteria and definition of done are not the same thing, and confusing them leads to missed expectations, hidden risks, and broken trust.\n\nAcceptance criteria defines the specific conditions for a particular backlog item. Did we meet this specific need? Did we cover this particular case?\n\nBut the definition of done, that's the organisational quality baseline. It applies to everything. It's the minimum standard every increment must meet: security, telemetry, testing, deployment readiness, regulatory compliance. It's not negotiable, it's not optional, it's not story specific.\n\nWe clear up this confusion so your teams can move fast without cutting corners, and your customers get reliable, consistent outcomes.\n\nStill mixing up acceptance criteria and done? Let's build clarity that scales."
  },
  {
    "Title": "How to Evolve Your Definition of Done: Start Small, Grow Smarter, and Build Lasting Momentum",
    "Description": "Unlock a smarter Definition of Done—start small, evolve standards, and build team momentum without overwhelm. Discover how progress drives excellence.",
    "ResourceId": "-tlSlpyeb9A",
    "Url": "https://www.youtube.com/watch?v=-tlSlpyeb9A",
    "Date": "2025-06-25T06:45:00Z",
    "Captions": "Start small, grow smarter. A perfect definition of done doesn't happen overnight. You don't start with perfection; you build towards it incrementally, deliberately, and strategically.\n\nEarly on, done might just mean usable. Then it evolves, adding automated tests, telemetry, security, compliance, continuous deployment. Each improvement makes your increment stronger. Each improvement builds trust, quality, and business resilience.\n\nWe help teams evolve their definition of done over time without overwhelming people, without losing momentum, and without sacrificing outcomes. Done is a journey, not a single decision.\n\nWant to evolve your standards without overwhelming your teams? Let's start the journey."
  },
  {
    "Title": "Why Your Definition of Done Is the Secret Weapon for Real Business Impact and Agile Growth",
    "Description": "Transform your definition of done into a strategic advantage—deliver real value, reduce risk, and drive business impact with every sprint.",
    "ResourceId": "V8Qpo-Gh6CE",
    "Url": "https://www.youtube.com/watch?v=V8Qpo-Gh6CE",
    "Date": "2025-06-18T06:45:00Z",
    "Captions": "Your definition of done affects your bottom line. It's not just a checklist. It's not just technical standard. Done is strategic.\n\nA strong definition of done means faster time to value. It means lower risk. It means real agility, not just faster sprints.\n\nWhen teams constantly deliver increments that are live, usable, gathering telemetry and validating outcomes, you don't just move faster, you make smarter bets, you adapt quicker, you grow stronger.\n\nWe help organisations connect their definition of done directly to business impact. Because done isn't about getting through the work. It's about making work matter.\n\nWant to make done a weapon for growth, not just a process? Let's talk."
  },
  {
    "Title": "Stop Flying Blind: Why Telemetry Belongs in Your Definition of Done",
    "Description": "Stop flying blind after release—learn why telemetry is vital to your Definition of Done and how real feedback drives better software, value, and team success.",
    "ResourceId": "Nj4BIom2Jeg",
    "Url": "https://www.youtube.com/watch?v=Nj4BIom2Jeg",
    "Date": "2025-06-11T06:45:00Z",
    "Captions": "Dipping without telemetry is flying blind. If you ship and you can't see what's happening, you don't know if it's working, you don't know if it's broken, and you don't even know if anybody's using it. No logs, no metrics, no real feedback.\n\nAt Naked Agility we help teams make telemetry part of Done, not an afterthought, not a nice to have, a core requirement.\n\nEvery increment you ship should gather real data: usage, performance, behaviour, so you can validate outcomes, spot problems fast, and make better decisions. Because until you're gathering telemetry, you're not learning. And if you're not learning, you're not delivering real value.\n\nReady to stop flying blind after you ship? Let's make telemetry part of your definition of done."
  },
  {
    "Title": "Modernising Legacy Systems: A Practical, Low-Risk Strategy for Real Business Transformation",
    "Description": "Struggling with legacy systems? Discover why modernisation is a strategy, not a gamble—reduce risk, boost efficiency, and future-proof your business today.",
    "ResourceId": "4iK4RTQegD8",
    "Url": "https://www.youtube.com/watch?v=4iK4RTQegD8",
    "Date": "2025-06-09T06:00:00Z",
    "Captions": "Legacy systems. You've got them. They work, mostly, but they're slow, expensive, and getting in the way of where you need to go.\n\nThe problem isn't just the technology. It's the way it's wired into everything: your processes, your compliance requirements, the thousand little integrations that nobody remembers setting up.\n\nThat's why modernisation feels risky, because if you pull the wrong thread, everything unravels.\n\nWe're not here to rip and replace. We help you understand your system—not just the code, but how work flows through it, where the bottlenecks are, what's worth fixing, what's holding you back.\n\nSometimes the right answer isn't a full rewrite. Maybe it's automation. Maybe it's incremental changes that reduce risk. Maybe it's rethinking how your teams operate so you're not constantly firefighting.\n\nWhatever it is, we help you see the bigger picture so you can modernise on your terms, without grinding everything to a halt.\n\nIf you're done sinking money into a system that's working against you, let's talk. Because modernisation shouldn't be a gamble. It should be a strategy."
  },
  {
    "Title": "Stop Firefighting Bugs: Why Shifting Left Saves Time, Money, and Your Reputation",
    "Description": "Stop firefighting late-stage bugs—discover how shifting left saves time, money, and reputation by building quality in from the start. Learn the smarter way.",
    "ResourceId": "cgZVYLmyyH0",
    "Url": "https://www.youtube.com/watch?v=cgZVYLmyyH0",
    "Date": "2025-06-04T06:00:00Z",
    "Captions": "Patching defects at the end is too late.\n\nIf you're finding problems during UAT, staging, or after release, you've already lost. Every latest stage defect costs you more time, more money, and more reputation than it should. And most of them could have been caught much, much earlier.\n\nWe help teams shift left. We strengthen the definition of done to embed quality checks early, validation during deployment, security built into the pipeline, telemetry ready before everything goes live.\n\nWhen you move quality to the front, you stop firefighting at the back. You save time. You save face. And you deliver increments you can actually trust.\n\nNeed fewer production surprises? Let's shift left and catch issues earlier."
  },
  {
    "Title": "DevOps: The Practical Path to Modernising Legacy Systems Without Starting Over",
    "Description": "Unlock legacy system agility—discover how DevOps transforms slow, brittle tech into fast, scalable, and change-ready platforms without starting from scratch.",
    "ResourceId": "Tr1b0hru0zE",
    "Url": "https://www.youtube.com/watch?v=Tr1b0hru0zE",
    "Date": "2025-06-02T06:00:00Z",
    "Captions": "Want to make your legacy systems faster, more scalable and easier to change? You need DevOps.\n\nA lot of organisations struggle with modernising their systems. They know they need to move faster, but they're stuck with decades of decisions. Decisions that made sense at the time, but are now holding them back. And the risk of change just feels overwhelming.\n\nThis is where DevOps practices come in. By introducing automation, continuous integration and deployment, and systemwide observability, you make it easier, safer and faster to evolve your systems. You reduce the cost of change, shorten feedback loops, and create an environment where improvements happen continuously, not just once every few years in a major rewrite.\n\nWe don't fix your systems for you. We help you understand how to make your systems work better for you. That means looking at the entire flow of work, identifying where things slow down, and making it possible for teams to deliver improvements without disrupting business operations.\n\nModernising a legacy system isn't about throwing it all away and starting over. It's about making smarter decisions at the system level, so change becomes a natural part of how you work.\n\nIf you want to make legacy modernisation a reality, let's have a conversation."
  },
  {
    "Title": "Stop Hoping for Quality: Why Automated Pipelines Are the Only Way to Deliver with Confidence",
    "Description": "Stop relying on memory for quality. Discover why automated pipelines beat manual checks, and how embedding quality gates ensures trust, speed, and consistency.",
    "ResourceId": "FLMIoTT0Mu0",
    "Url": "https://www.youtube.com/watch?v=FLMIoTT0Mu0",
    "Date": "2025-05-28T07:00:00Z",
    "Captions": "If it's not in the pipeline, it's not in your process. You can tell people to follow standards, you can tell them to check security, you can tell them to run tests, but if it's manual, it's optional. And if it's optional, it's missed.\n\nManual quality gates fail because people are human. Automation fixes that.\n\nWe help you embed real, enforceable quality gates right into your delivery pipeline: security scans, static analysis, linting, automated tests. No check, no deploy, no exceptions.\n\nBecause real quality isn't about hoping people remember, it's about making it impossible to forget.\n\nWant automated quality that you can trust? Let's embed it in your delivery pipelines."
  },
  {
    "Title": "How to Tackle Technical Debt Without Halting Progress: Smarter Ways to Keep Your Team Moving Forward",
    "Description": "Struggling with technical debt? Discover practical ways to tackle legacy systems, boost team morale, and deliver value—without grinding to a halt.",
    "ResourceId": "p3Agu-9sZnA",
    "Url": "https://www.youtube.com/watch?v=p3Agu-9sZnA",
    "Date": "2025-05-26T06:00:00Z",
    "Captions": "Technical debt. It's one of those things that creeps up on you slowly, quietly, until suddenly you're spending more time just keeping things running than actually delivering anything new. And at that point, it's not just slowing you down, it's actively getting in your way.\n\nSo how does this happen? Well, legacy systems don't start out as a problem. They work, they're familiar, they've been built up over time, layer upon layer, quick fix stacked on top of old workarounds. At some point though, making even the smallest change becomes risky. Everything is interconnected, nothing is well documented, and nobody really wants to touch it.\n\nAnd yet the business still expects progress, customers still need new features, and your team, they just want to do good work without feeling like every change is a minefield.\n\nThis is where CTOs and engineering leads hit a tough reality. You can't just stop everything and refactor the whole system from scratch. The business won't wait, and neither will your customers.\n\nThat's why we don't tell teams to stop delivering and fix their code. Instead, we help them change the way they work so they can gradually refactor while still keeping the lights on.\n\nIt's about making better decisions at the system level, understanding what changes will have the biggest impact and how to prioritise them, and making sure that teams have the engineering practices in place to actually improve things over time without grinding development to a halt.\n\nBecause here's the thing: technical debt isn't just a technical problem, it's a system of work problem. And if you don't change how decisions are made, how teams collaborate, and how work flows through the organisation, then even the best refactoring efforts will lead to just more debt.\n\nSo if you're dealing with a system that feels like it's holding you hostage, let's talk. We don't fix the system for you, we just help you change the way you work so that fixing it becomes a natural part of how your teams deliver value.\n\nBecause in the end, managing technical debt isn't about rewriting everything."
  },
  {
    "Title": "Stop Paying the Hidden Costs of Weak Delivery: Why a Strong Definition of Done Transforms Your Team’s Results",
    "Description": "Stop paying the hidden costs of weak delivery. Discover how a strong, shared definition of done builds trust, quality, and real agility in your team.",
    "ResourceId": "xxdg6WPNcDc",
    "Url": "https://www.youtube.com/watch?v=xxdg6WPNcDc",
    "Date": "2025-05-21T06:00:00Z",
    "Captions": "Every shortcut adds to your technical debt. Every time you skip quality standards, every time you fudge what done means, you're not saving time. You're creating future rework.\n\nA weak definition of done means your increment isn't truly usable. It means production risks, hidden failures, and uncertainty. It means you can't trust what you've built.\n\nWe help teams create a strong, enforceable definition of done, ensuring every increment is shippable, usable, and backed by real evidence. Not just built, but delivering real insights. Not just working, but meeting organisational and strategic goals.\n\nWeak delivery isn't about missing features. It's about missing outcomes, missing feedback, and missing trust.\n\nReady to stop paying the hidden costs of weak delivery?"
  },
  {
    "Title": "Breaking Free from Vendor Lock-In: How to Regain Control and Future-Proof Your Business",
    "Description": "Struggling with vendor lock-in? Discover practical steps to break free from legacy contracts and regain control of your business’s systems of work.",
    "ResourceId": "V2TRsAFaSgo",
    "Url": "https://www.youtube.com/watch?v=V2TRsAFaSgo",
    "Date": "2025-05-19T06:00:00Z",
    "Captions": "Are legacy contracts keeping you stuck with the wrong vendors? You're not alone. Vendor lock-in is a real issue for organizations trying to modernize their systems of work. It happens when outdated contracts, proprietary platforms, or deeply embedded dependencies make it nearly impossible to shift.\n\nInstead of focusing on what's best for your business, you're trapped maintaining somebody else's business model. So how to break free? First, let's talk about why it matters. Sticking with the wrong vendors doesn't just slow you down, it limits your ability to adapt. You're forced to work within their constraints, whether that's rigid licensing, slow innovation cycles, or overpriced services that no longer align with your needs.\n\nWe don't sell tools. We help organizations make sense of their systems of work—the way teams collaborate, plan, and deliver value. Because the real issue isn't just the software you're using, it's how decisions are being made.\n\nBreaking vendor lock-in isn't about swapping one system for another. It's about making better choices—choices that give you flexibility, control, and the ability to adapt as your business evolves. We work with teams to understand their real constraints, whether that's technical, contractual, or organizational. Then we guide them through pragmatic, step-by-step transitions towards more open, adaptable solutions.\n\nThis isn't about throwing everything out and starting over. It's about untangling dependencies, enabling better decision-making, and creating options instead of dead ends.\n\nIf you're feeling stuck, the first step isn't buying another tool. It's understanding the choices you actually have. Let's start a conversation."
  },
  {
    "Title": "Why a Shared Definition of Done Is the Secret to Consistent, Predictable Quality in Agile Teams",
    "Description": "Struggling with inconsistent delivery? Discover why a shared definition of done is key to predictable, high-quality results your teams—and stakeholders—can trust.",
    "ResourceId": "n-id2x9wLhg",
    "Url": "https://www.youtube.com/watch?v=n-id2x9wLhg",
    "Date": "2025-05-14T07:00:00Z",
    "Captions": "Without shared standards, quality is a coin toss. When every team defines done differently, you don't get value, you get uncertainty and risk. Different interpretations mean chaos, production risks, and invisible liabilities. It means you can't trust the increment.\n\nWe help organisations define and align on a single, clear definition of done—a standard that every team understands, a standard that ensures every increment is truly usable and validated. Because predictability doesn't come from a fragmented process; it comes from a shared standard that everybody honours.\n\nWhen consistency and predictability matter across teams, let's align your definition of done."
  },
  {
    "Title": "Modernising Legacy Systems: How to Tackle Security Risks Without Breaking Your Business",
    "Description": "Struggling with legacy systems? Discover how to modernise securely, reduce risk, and build resilience—without trading old problems for new ones.",
    "ResourceId": "j_oduUBphYc",
    "Url": "https://www.youtube.com/watch?v=j_oduUBphYc",
    "Date": "2025-05-12T06:00:00Z",
    "Captions": "Legacy systems are a security nightmare. You know it, I know it. Outdated security protocols, compliance failures waiting to happen, systems nobody wants to touch because, well, who knows what will happen when they break.\n\nThe reality is these systems were built in a different time, under different assumptions. They were never designed for the level of threat we face today. And yet, businesses depend on them, which means modernization isn't optional. It's inevitable.\n\nBut here's the thing: modernizing blindly is just a risk. A bad move can introduce security holes you never had before. So how do you modernize safely?\n\nWe don't just talk about digital transformation. We help organizations understand their systems of work so they can make better decisions about security, compliance, and maintainability. This means looking at how teams plan, build, and deploy software. It means integrating security-first practices, not as an afterthought, but as a fundamental part of the way work happens.\n\nBecause security isn't a checkbox. It's a continuous discipline built into how teams collaborate, how decisions are made, and how systems evolve over time.\n\nSo if your legacy systems are keeping you up at night, let's talk. Because modernizing shouldn't be about keeping up. It should be about getting ahead."
  },
  {
    "Title": "Why “Done” Only Counts When It’s Live: Moving Beyond Fake Finishes to Real Value in Software Delivery",
    "Description": "Discover why “done” means live in production—not just code complete. Learn to deliver real value, close feedback loops, and drive outcomes that matter.",
    "ResourceId": "9nnnOYDoMu8",
    "Url": "https://www.youtube.com/watch?v=9nnnOYDoMu8",
    "Date": "2025-05-07T11:46:58Z",
    "Captions": "If it's not in the hands of users, it's not done. Writing code isn't done. Testing code isn't done. Demoing something in a meeting isn't done. Done means that the increment is live in production, gathering telemetry, delivering real evidence against real goals.\n\nWe help teams shift away from celebrating fake finishes towards shipping actual usable outcomes, because work that isn't live isn't learning. And if it isn't learning, it isn't delivering value.\n\nYour customers don't care about completed tasks. They care about what's available to them right now. If your teams confuse code complete with done, let's talk about shifting to real value delivery."
  },
  {
    "Title": "Cloud Migration Without the Mayhem: How to Move Legacy Systems Safely and Set Your Teams Up for Success",
    "Description": "Worried about cloud migration chaos? Discover why a hybrid approach beats “lift and shift” and how to align teams for a seamless, risk-free transition.",
    "ResourceId": "shstUjNe8tU",
    "Url": "https://www.youtube.com/watch?v=shstUjNe8tU",
    "Date": "2025-05-05T06:00:53Z",
    "Captions": "Migrating legacy systems to the cloud can feel like walking a tightrope. Nobody wants downtime, unexpected failures, and systems grinding to a halt. But cloud migration doesn't have to be a nightmare. It's not about lifting and shifting everything overnight. It's about making deliberate, well-informed decisions that ensure your teams can continue working without disruption.\n\nA hybrid cloud approach is often a good first step. Keep critical systems running while gradually transitioning workloads. It's about balancing risk, minimising surprise, and ensuring the right foundations are in place before committing fully to the cloud.\n\nWe don't migrate systems for you. What we do is help you understand your systems of work, the way that your teams collaborate, plan, and deliver, so that when you do move to the cloud, you're not just shifting problems from one environment to the other. We guide you through structuring your software systems in ways that make them easier to change, operate, and scale over time.\n\nThe key to a seamless cloud transition isn't just technology. It's making sure your teams are aligned, your practices support the change, and your decisions are made with maintainability in mind.\n\nIf you're planning a cloud migration, don't let it become a fire drill. Let's talk about how to set up for success."
  },
  {
    "Title": "Unlocking Legacy Systems: How to Embrace Automation and Drive Innovation",
    "Description": "Learn how to automate legacy systems by shifting organisational mindset, adopting DevOps practices, and making incremental improvements to boost efficiency and innovation.",
    "ResourceId": "cEvTqpcClmE",
    "Url": "https://www.youtube.com/watch?v=cEvTqpcClmE",
    "Date": "2025-04-28T06:00:34Z",
    "Captions": "Think legacy systems can't be automated? Think again. A lot of organizations assume that because something's old, it's untouchable; that automation is only for modern cloud-native systems. That's just not true. In fact, the biggest efficiency gains often come from tackling the most outdated, cumbersome processes. \n\nThe real issue isn't whether legacy systems can be automated; it's whether organizations have the will and the know-how to do it properly. The challenge isn't just the technology; it's the way people think about the work. They assume that because something's always been done manually, it has to stay that way. But that's a mindset problem, not a technical one. \n\nDevOps and automation tools aren't just about speed; they're about creating consistency, eliminating bottlenecks, and freeing up teams to focus on work that actually delivers value. If you're still relying on manual approvals, handoffs, or batch processes just because that's how it's always been done, you're probably leaving a lot of potential on the table. \n\nThe good news? You don't have to rip everything out and start over. Automation isn't an all-or-nothing decision; it's about incremental improvements that reduce friction, improve flow, and build confidence in your ability to deliver. So if your legacy system is slowing you down, the problem isn't the system itself; it's how you're managing it."
  },
  {
    "Title": "Navigating the Shift: Key Strategies for a Successful Transition to Microservices",
    "Description": "Learn essential strategies for transitioning from monolithic systems to microservices, including planning, team alignment, managing complexity, and ensuring scalable delivery.",
    "ResourceId": "pQyifHyTkWo",
    "Url": "https://www.youtube.com/watch?v=pQyifHyTkWo",
    "Date": "2025-04-21T06:00:41Z",
    "Captions": "So you're looking at your monolithic system and you're thinking this isn't working anymore. Maybe it's slowing you down, maybe it's getting harder and harder to maintain, or maybe the business needs more flexibility and you just can't get that with a monolith. Whatever the reason, you're considering microservices and that's great. \n\nBut let's be clear, if you just start breaking things apart without a solid strategy, you're setting yourself up for a world of pain. This isn't about blindly following trends; it's about understanding how to decompose your systems in a way that makes sense for your business. Scalability, flexibility, maintainability—all great outcomes if you can do it. But if you rush in without thinking it through, you'll introduce complexity that doesn't actually help you. \n\nAt Naked Agility, we don't come in and do the work for you; that's not our approach. Instead, we help you make sense of your system so that you can make better decisions about how to transition, where to start, what to break off first, and how to avoid turning your monolith into a distributed mess. \n\nWe work with CTOs and engineering leads to improve the way that you work so that you can map out the transition step by step, allowing you to move towards microservices as needed without chaos. This isn't just about technology; it's about how you work, how you design your teams, how you handle dependencies, and how you ensure each service is independently deployable and maintainable. \n\nMicroservices aren't the goal; the goal is faster, more adaptable delivery without the drag of a massive, tightly coupled system. So if you're thinking about this shift, make sure you do it for the right reasons with the right approach. And if you want to talk through your options, let's have a conversation."
  },
  {
    "Title": "Navigating the Legacy System Dilemma: Balancing Stability and Innovation for Modernisation Success",
    "Description": "Learn how to modernise legacy systems by balancing stability and innovation, managing technical debt, and adopting gradual, sustainable improvements for long-term success.",
    "ResourceId": "S-YSqmiQ8BE",
    "Url": "https://www.youtube.com/watch?v=S-YSqmiQ8BE",
    "Date": "2025-04-14T06:00:33Z",
    "Captions": "Modern legacy systems don't mean breaking what works but striking a balance. That's where things get tricky. On one side, there's the risk of innovation disrupting stable systems, introducing technical debt, increasing operational complexity. On the other, the cost of stagnation, getting stuck with outdated processes, slow delivery, and losing ground to more agile competitors.\n\nMost organizations struggle with this. Either they move too fast and create chaos, or they move too slow and get left behind. But the reality is you don't have to choose between stability and progress. You can have both if you modernise in the right way.\n\nAt Naked Agility, we don't come in and fix your systems. We work with you to help you understand. We help you see where your systems work, your processes, your engineering practices are enabling you and where they're holding you back. And from there, we help you make better decisions: non-disruptive, gradual modernisation, incremental improvements that build resilience, not work.\n\nEngineering advice on maintainability, testability, and supportability. All things that make modern systems sustainable in the long run. Because real innovation isn't just about moving fast; it's about moving forward without breaking the things that keep you running.\n\nWant to figure out how to do that in your organization? Let's have a conversation."
  },
  {
    "Title": "Navigating the Legacy System Labyrinth: Strategies for Modernisation Success",
    "Description": "Explore practical strategies for overcoming legacy system challenges, addressing technical debt, compliance, integration, and guiding effective modernisation decisions.",
    "ResourceId": "pTZaZcASniA",
    "Url": "https://www.youtube.com/watch?v=pTZaZcASniA",
    "Date": "2025-04-07T06:00:36Z",
    "Captions": "Every CTO knows the pain you're dealing with technology that's years, maybe decades, past its prime. It's slow, it's expensive, and every time you try to integrate something new, you're wrestling with layers of technical debt and questionable architecture.\n\nSo why don't organisations just modernise? Why does this problem persist? Because ripping out a legacy system isn't just about swapping old tech for new. These systems are embedded in how work gets done. They're connected to critical processes, compliance requirements, and a patchwork of integrations that were never designed to play nicely with today's expectations.\n\nSecurity? A constant nightmare. Scalability? Forget it. You're in a situation where every change, every update, every attempt to innovate is met with friction.\n\nAt Naked Agility, we don't claim to solve this for you because no one can just fix a system that's entrenched overnight. But we do help you make sense of the challenge. We help you see the full picture, understand the trade-offs, and practical paths forward, whether these are incremental improvements, strategic modernisations, or shifting how your organisation manages its systems of work.\n\nIf you're tired of pouring money into a system that holds you back, maybe it's time to step back and look at the bigger picture. Let's figure out the right approach on your terms."
  },
  {
    "Title": "Mastering Sustainable Scaling: Overcoming Product Development Challenges with Naked Agility",
    "Description": "Learn how to overcome scaling challenges in product development by reducing technical debt, improving team alignment, and building sustainable, growth-ready systems.",
    "ResourceId": "bYqzpA0697Y",
    "Url": "https://www.youtube.com/watch?v=bYqzpA0697Y",
    "Date": "2025-02-28T06:00:27Z",
    "Captions": "Scaling product development is never as simple as adding more people. At Naked Agility, we know that real scaling means building systems that enable teams to grow smoothly without losing speed or quality. We help organisations tackle key challenges like alignment, technical debt, and slow feedback loops. Common roadblocks to growth, without addressing these, scaling just amplifies inefficiencies.\n\nOur approach focuses on creating clarity, reducing friction, and fostering a scalable culture where collaboration, DevOps, and continuous learning can thrive. Frameworks like LeSS or Nexus can help, but they're not the solution alone. Sustainable scaling needs strong leadership, clear priorities, and systems designed for that growth.\n\nNaked Agility works with you to eliminate bottlenecks, structure teams efficiently, and ensure tech debt does not hold you back. We believe data matters: time to market, ability to innovate, and understanding your value. With Naked Agility, you get a tailored approach to growth that's controlled, sustainable, and built on proven practices.\n\nLet's build a system that grows with you, not against you. Talk to Naked Agility today to scale your product development the right way."
  },
  {
    "Title": "Scaling Teams: How to Foster Innovation Without Falling into Bureaucracy",
    "Description": "Explores how organisations can scale teams to boost innovation while avoiding bureaucracy, focusing on empowerment, streamlined processes, and agile communication.",
    "ResourceId": "3X2Oka9IrKw",
    "Url": "https://www.youtube.com/watch?v=3X2Oka9IrKw",
    "Date": "2025-02-27T11:00:09Z",
    "Captions": "More teams should mean more innovation, right? Not more layers of process, not endless meetings, not bottlenecks at every turn. But scaling often feels like you add teams and suddenly everything slows down. Decisions take longer, processes get heavier, and before you know it, you're buried in bureaucracy.\n\nSo why does this happen? Well, when organisations scale, they tend to fall back on what feels safe: rigid structure, formal process, and top-down control. But the irony is all that structure kills the very thing they're trying to achieve: innovation, speed, and value.\n\nAt Naked Agility, we take a different approach. Scaling shouldn't mean slowing down; it should amplify your ability to deliver value, not suffocate it. And that's exactly what we help teams do. We focus on building adaptability into the core of your organisation, so no matter how much you grow, you stay responsive, nimble, and innovative.\n\nBecause at the end of the day, scaling isn't about adding more layers; it's about unlocking more potential. And that's what we're here to do."
  },
  {
    "Title": "Embrace Simplicity: How to Transform Complexity into Continuous Delivery Success",
    "Description": "Explains how simplifying complex software and committing to change enables continuous delivery, highlighting the need for cultural shift, resilience, and ongoing improvement.",
    "ResourceId": "DsvMKLto30o",
    "Url": "https://www.youtube.com/watch?v=DsvMKLto30o",
    "Date": "2025-02-27T07:00:10Z",
    "Captions": "So I just wrote a post called stop hiding behind complexity and start delivering continuously. The premise of the post is that any person in any organisation working on any software anywhere in the world that says our software is too big and too complex to be able to deliver continuously is either lying, lazy, or they don't know. Probably they don't know how. The most likely scenario is they think they don't understand how to get from where they are right now with their mainframe-backed, old, crusty software to continuous delivery. \n\nWe don't know how to get there, but you can get there if there is an organisational will to improve the quality of the product. If there is an organisational will to improve the speed of delivery of features in the product, right? Because improving the delivery of features in the product is not about adding more people; it's about getting your product in shape. \n\nIf you've got this huge, lumbering, obese product, it's not going to be able to do the things quickly that you want it to be able to do. People aren't going to be able to get it to do the things that you want it to do quickly. It's lumbering; it's the 500-pound gorilla in the room, right? But it doesn't have to be. \n\nHow would you, as an individual, if you were not where you wanted to be health-wise, how would you get healthy? How would you get to that goal that you wanted? Perhaps you want to look like Hugh Jackman in the Wolverine, right? How would you get from where you are right now to there? Because it is possible. I mean, you wouldn't look exactly like him because everybody's body type is different, but how would you get that type of physique, that level of body fat? \n\nWell, you're going to have to work. You're going to have to change all aspects of your life in pursuit of that goal, right? You're going to have to eat differently. You're going to have to exercise differently. You're going to have to change when you do things, how you do things in order to get to that physique you want. \n\nIf you want your software to get to that physique so that it's easy peasy to add features to your product, then you've got to do the work to not just ensure that it gets there. That's the tough part, right? If you're incredibly unfit, getting to that fitness point is really hard. Maintaining it is easier, right? Once you are fit, let's call it, once the product is fit, maintaining it in that position is definitely easier. It still requires investment and effort, and time to do things, but you're not necessarily doing the same things that you had to do in order to get there. It should be easier. \n\nAnd that's where you see a lot of organisations and software struggling. I think the one that gets me is every so often the airlines falter. Someone once called it a scrumble, right? I know they may not be doing scrum, but it's like a cross between scrum and stumble. You effectively trip over your feet, you fall on your face because something's wrong with the way you're doing, the way you're running, the way you're building your product, and you fall on your face. \n\nIf you just pick yourself up and start running again, you're in danger of having exactly the same thing happen. You see that with the airlines, right? They have these old mainframe systems behind, under the covers, deep in the bowels of their systems, but they don't understand. They don't have people that can understand anymore. \n\nI think American Airlines, I heard stories about pulling people out of retirement, going to find the last person who could fix the system, and they were in a retirement home, and having to pay them exorbitant amounts of money to come out and take them five minutes to fix it, right? Knowing where to poke because they've lost that knowledge, they've lost that capability, yet they keep that system. They've lost understanding of a system, and they keep it around, which is massive amounts of risk. \n\nYou see that American Airlines has been down, Delta's been down, British Airways has been down, and those are the big ones that I can think of because they hit the news because they're massive airlines. But the reason they've been down is because they've not cared for their application. They've done a one-and-done, right? You build it, you get to the end of the project to build it, and then that project is done. There's no more funding; therefore, the product then starts to stagnate, atrophy, and decompose. \n\nThat's what happens, right? I mean, the system keeps doing what it was always doing, but the systems around it are changing. The needs of the business are changing. The world has changed, and then you have to layer on more and more stuff to take care of the fact that this core of the system doesn't necessarily work exactly like you need it to work, but you can't change it anymore, or you feel like you can't change it anymore. \n\nAnd all of that is crap. It's all crap. You absolutely can change it. You absolutely can fix it. You absolutely can make those problems go away. You can make it so you never go down again. You can make it so that when, what was it? It was CRCH strike happened, right? Wait, failure of DevOps, let's not talk about that one. But when Crowstrike happened, I think it was Delta Airlines that was taken out by it, and it took them a week, even though Crowstrike fixed the problem within hours, right? \n\nSo theoretically, Delta was only out of action from the external source for hours. The implication of that outage was that they really struggled to get a whole bunch of systems up because they didn't have good resilience, didn't have good disaster recovery, didn't have good stories around these things that were practiced and manageable and able to be delivered quickly. \n\nSo it took ages of people running around with their hair on fire to get stuff working, and I think some of the stuff didn't come up and running for more than a week after the outage. That's not good enough, right? That's a business risk. That's a time bomb waiting to happen in your organisation. Don't have those systems. Those are not the right systems for if you're running a multi-billion dollar business. \n\nThose are not the right systems, man. If you're running a little business, right? Because risk is what's it called when it matches your size? If it's a 10% risk that something's going to go down, if you're a small business, that's a massive risk to your business. If you're a huge multinational, it's the same amount of risk, right? It's 10% of your business. \n\nSo proportional, that's the word I was looking for. Fix it. Get off your ass and fix it. And this is not just an engineering problem, right? Because you'll probably find that there are engineers around this system. There are managers of those engineers around this system that know the problem. They know what it'll take to fix it, right? They know those things, but there is no organisational will to fix it because it's going to take time, effort, and money. \n\nTime, effort, time, and effort cost money. It's going to take time, effort, and money to deliver on those changes to fix those problems, and organisations don't want to pay for it because they don't see the value, right? They throw their toys out of the pram when something goes wrong and demand it be fixed and demand it never happen again. \n\nBut the only way for it to never happen again is they get out their checkbook and they write a check big enough to make sure it doesn't happen again for the engineers to go fix the problem, to remove those systems, to replace those systems, to upgrade those systems, and to continuously upgrade those systems. They don't have a good application lifecycle management, right? They don't have it. \n\nAnd that's why I feel like they're hiding behind the complexity, right? \"Oh, this is too big and too complicated, and it's too difficult to do.\" No, it's not. It's really not. Just fix it. The Windows team went from delivering to production once every six years with massive amounts of legacy code. I know somebody who worked on the Windows team who was talking about what they were working on, and they're the ones that were responsible for, do you remember when you used to copy a file or group of files from one folder to another in Windows? If there was one file that had an error, it would just crap out the process and stop, and you've copied half the files, and you don't know which is which. \n\nThey went in and changed the file copying protocols so that it had resumability and it had the retry button and all of those things. That was their work, and the code that they were changing hadn't been changed since 1985. This was maybe 10 years ago, right? So what's that? 20 years had changed in 20 years. That's not good enough. \n\nAnd that's why Windows became this continuous delivery story, because that's how you build modern products. Continuous delivery forces you to deal with those problems because they magnify. They start magnifying, right? If you're trying to do continuous delivery and you've got some slow-moving mainframe system in the back end that the team can only deploy once a month, and you're deploying many times a day and you need changes from them, they're not going to be able to keep up. \n\nThey're just not. They're going to become the bottleneck. They're going to become the thing that you need to go fix. So go fix it. Don't just look at it and go, \"Yeah, I've got a problem.\" I've got another blog post about ignoring the signals, right? That's a signal in your organisation to say there's something wrong here. You need to fix it. \n\nAnd yes, it might take investment of money, time, and effort. Azure DevOps, when it was TFS, took about, I guess they went to deploying Azure DevOps overnight, getting it up and running within a couple of weeks. But to really pay back the technical cruft, the long years of just fire-and-forget code, right? To really start to pay that back took them almost four years of continuous effort. \n\nNow they're delivering features, and in fact, they were ramping up and delivering more and more and more features throughout that time, but they still had to continue that effort, and they continue that effort to this day to start breaking up some of those monolith pieces that make sense to break up. Because there's nothing wrong with a monolith, but break them up so that they can deliver some things continuously and other things take longer. \n\nAnd what you need is a business need for it. I can't imagine that American Airlines is sitting there saying we're okay with this ticking time bomb of risk that could happen at any moment, at any time, on any day. It could happen on Christmas Day; it could happen on our biggest sales day of the year, and we're okay with that. \n\nNobody's sitting there doing that. They just don't want to pony up the dough and get off their ass and fix the problem. No matter how much complexity you have in your system, you can positively move towards continuous delivery."
  },
  {
    "Title": "Mastering the Art of Scaling Agile: Strategies to Maintain Agility Across Multiple Teams",
    "Description": "Learn effective strategies for scaling agile across multiple teams, managing dependencies, avoiding common pitfalls, and maintaining agility as your organisation grows.",
    "ResourceId": "8lUeIYEGg7k",
    "Url": "https://www.youtube.com/watch?v=8lUeIYEGg7k",
    "Date": "2025-02-26T06:00:08Z",
    "Captions": "Agile works exceptionally when it's just one team, but what happens when you've got 10 or more? Suddenly, all those simple interactions become complex. Dependency piles up, and before you know it, everything slows down. Does this sound familiar? \n\nScaling agile isn't about adding more teams; it's about maintaining the same level of agility across all of your teams. Frameworks like SAFe, LeSS, and Nexus each offer a different approach to scaling, but here's the challenge: making the right choice. Because what works for one organisation might not work for yours. \n\nAnd that's where we come in. At Naked Agility, we don't believe in cookie-cutter solutions. We roll up our sleeves and work with you to find the right scaling model that fits your context. We've done this countless times with countless organisations, and trust me, it's never the same twice. \n\nWe help you navigate the complexities, avoid the pitfalls, and most importantly, keep delivering value at speed, no matter how big you scale. So if you're ready to scale without losing agility, let's talk."
  },
  {
    "Title": "Scaling Smart: How to Tackle Technical Debt for Sustainable Growth",
    "Description": "Learn how unmanaged technical debt can hinder growth, and discover strategies like sustainable architecture, DevOps, and automation to scale efficiently and maintain quality.",
    "ResourceId": "PfZU13BEwiY",
    "Url": "https://www.youtube.com/watch?v=PfZU13BEwiY",
    "Date": "2025-02-25T06:00:28Z",
    "Captions": "Scaling without managing technical debt is a recipe for disaster. Technical debt slows everything down. Every quick fix or shortcut adds complexity. At first, it's manageable, but as you scale, it becomes a major blocker. New features take longer to deliver, bugs become more frequent, and productivity drops.\n\nScaling isn't just about adding resources; it's about building on a stable foundation. If your architecture isn't solid, every new addition becomes a risk. That's where naked agility helps. We work with teams to implement sustainable architecture and DevOps practices. We identify and address weak points, ensuring your systems are ready to handle growth.\n\nWith automated testing, continuous integration, and streamlined deployments, you can scale efficiently and confidently. If you're ready to scale without being slowed down by technical debt, let's talk."
  },
  {
    "Title": "Unlocking Sustainable Growth: Why Leadership is the Key to Successful Scaling",
    "Description": "Effective scaling depends on strong leadership—empowering teams, removing bottlenecks, and decentralising decisions to enable sustainable organisational growth.",
    "ResourceId": "ZVZEO1Ggihs",
    "Url": "https://www.youtube.com/watch?v=ZVZEO1Ggihs",
    "Date": "2025-02-24T10:12:43Z",
    "Captions": "Scaling isn't just a tech challenge; it's a leadership challenge. You see, when companies think about scaling, they usually focus on architecture, infrastructure, and tools. But the real constraint is leadership because at scale, the way people think, collaborate, and make decisions has a far bigger impact than the technology.\n\nStat CTOs, CIOs, IT managers, this is where you come in. It's not just about funding more teams or throwing more engineers at the problem; it's about creating an environment where scale is possible, where teams aren't waiting for approvals, where dependencies don't create bottlenecks, and decisions happen at the right level.\n\nThat's where naked agility comes in. We work with leadership to coach, train, and embed the principles that make scale work. It's not just about frameworks or blueprints; it's about shaping the leadership behaviours that allow organisations to grow without grinding to a halt. Because if your teams are struggling to scale, chances are it's not the tech; it's the way the organisation is being led.\n\nSo what's the next step? Let's talk."
  },
  {
    "Title": "Why the Concept of a \"Junior Scrum Master\" is a Misguided Myth",
    "Description": "Explains why the Scrum Master role requires experience and competence, debunking the myth of a \"junior\" Scrum Master and highlighting the need for proven skills in Agile teams.",
    "ResourceId": "_Hd8NZeiwFA",
    "Url": "https://www.youtube.com/watch?v=_Hd8NZeiwFA",
    "Date": "2025-02-24T07:26:46Z",
    "Captions": "So there's no such thing as a junior Scrum Master. I wrote this post because I see and continuously see a lot of multiple things. I see a lot of organisations thinking that the Scrum Master can be or teams thinking that the Scrum Master can be anyone in the team and going, \"Well, they're just facilitating a few meetings, so we will just pick who's the least productive on our team.\" Okay, it's this junior person. \"We'll pick them as the Scrum Master. You go do this stuff.\" And that does that person and themselves a complete disservice. Let's tackle that one first, right? So that's the first part of why I wrote it.\n\nThe other part is on the Scrum Master side. There is a belief in the industry that if you want to get into it, then a good way to do it is to come in through the Scrum Master because you don't need to do anything technical. And that, for want of a better expression, is total BS. You do need to be technical within the context of the team. Just like if you wanted to coach a professional soccer team—you're probably, football in my words—you're probably going to want to understand the rules of the sport. You're probably going to want to understand the nuance of not just the sport itself, the league tables, how you move between the leagues, right? The mechanics and the mechanisms of not just the sport but the leagues and how do you navigate your team through that story. How good do the individuals need to be? How well do they need to work together? How do they thread that needle of becoming a high-performing team in that league? And perhaps going to the next league if you can. And maybe you don't want to go to the next league, so maybe you deliberately need to lose a game, right? Because you don't want to be pegged high and have to go to the next league, and then you'd be the bottom of that league rather than the top of this one.\n\nAll that kind of stuff—the understanding of what we're doing, how we're doing it, why we're doing it, and how we're going to get to where we're going from a strategy perspective—that's not the in Scrum's perspective, in the perspective of a Scrum team. The product owner is going to take care of the what. I'm pushing it off to the product owner. The whole Scrum team takes care of the how, but the product owner has the accountability. We've got this what that we're looking at, but we've also got the system that we're using, and that system needs to be as effective as possible. So no matter what comes through the system, we're able to deliver them as quickly as possible.\n\nThe system coach, the person who is most focused on the system itself and encouraging people to reflect on the system itself and figuring out how the system itself needs to change in order to maintain that, and how the systems around that system need to change. So that could be things in the organisation or things in other teams that would enable us to be more effective if they changed. But is that good for the overall system or just a local optimisation, which might be good for us but negative for the rest of the system? How do we fit into that whole story? That's not a junior who figures that out, right? That's somebody with deep knowledge and understanding of the type of work that the team does.\n\nSo in my case, that's usually engineering teams. They have deep technical knowledge in the type of work that the product owner does, so the context of the business, right? Because the system has to operate inside of a bigger system. The system of the team has to operate inside of a bigger system that is the whole organisation. So understanding the systems of the organisation and how we navigate that. And then they also need to understand the things that we see most, which are the tools and practices around how do we actually do those things.\n\nSo I think too many people look at the outcome and look at the tools people used to get to the outcome, and they focus on the tools, but they don't focus on how did we pick that tool? How do we get to that tool? And does that tool continue to support our needs over time? And that's the purview of the Scrum Master. They are a system mechanic. They're a mechanic for the system. And if you're going to be a mechanic for a system, you want to understand the systems. And that system is made up of the way the team works, the capabilities of the team, the knowledge of the team. It's made up of the knowledge of the product owner and what they're picking and what direction they're going, and that informs what knowledge the team might need in the future.\n\nAnd we're looking at the organisation and what the organisation understands about the system, what the organisation's system is. It's just such a big ball of worms that you need somebody with significant expertise, significant history to be able to do that. So that's why I use the phrase, \"There's no such thing as a junior Scrum Master.\" There is no such thing as a junior Scrum Master, just the same as there's no such thing as a junior CEO or a junior CIO. There might be somebody who's new to that role, but how did they get in that role? They were selected. They were picked for their demonstrated skill and ability already. They didn't arrive fully formed, right? That's a little bit of a misnomer.\n\nI think a good example is that idea of a gunnery sergeant in the military, right? There's no such thing as a junior gunnery sergeant. You have a person who demonstrates skill at different levels and is promoted through the ranks, right? And then they get to that. They're now a gunnery sergeant. They may be new to the role of gunnery sergeant and have to learn things about that role, but they bring with them significant skill and expertise in what we're doing already. You're not going to make gunnery sergeant if you don't understand the organisational structure, if you don't understand not just the hierarchy but also that network of how you actually get things done inside of the context of the organisational structure.\n\nSo there really is no such thing as a junior Scrum Master. There should be no route to Scrum Master for somebody who doesn't have any skills within the context of the team because they're going to do the team and the organisation a disservice. They're not competent within that context. So my advice for people—I'll use a concrete example. I had somebody set up a meeting to have a chat about becoming a Scrum Master, and they worked in accountancy. They worked for an accounting firm, and they wanted to get into the idea of the Scrum Master that they'd heard about. My advice to them was to find a team or a group inside of the world of accountancy, right? So you already know the context. Hopefully, you have some skills in that context. And make them try. Work while you're doing the work with the team to enable them to be the best team anybody's ever seen within that context. \n\nAnd by pursuing that goal, you learn the processes and practices that are required within that context of an account team doing accounts. What are the actual processes? What are the systems that make sense within that context? How do I educate the people on that team and in that group and the wider organisation on those practices and convince people? And that will build your skill, and eventually, the people in your team and the people in the organisation will look to you for those things because you have demonstrated competence in them. If they're looking to you for those things, you are the Scrum Master, right? You are the coach. You are that person. And you arrived at it almost—you became it fully formed because you've demonstrated that capability. But it took a long time to learn the things you needed to go over that line and become that thing. And then yes, you're a new Scrum Master, but there's no such thing as a junior Scrum Master."
  },
  {
    "Title": "Why More Teams Won't Speed Up Delivery: The Truth About Scaling Effectively",
    "Description": "Adding more teams doesn’t guarantee faster delivery; effective scaling requires reducing dependencies, aligning goals, and minimising coordination overhead for real results.",
    "ResourceId": "bHwgZ_Cx99U",
    "Url": "https://www.youtube.com/watch?v=bHwgZ_Cx99U",
    "Date": "2025-02-21T07:59:43Z",
    "Captions": "More teams doesn't always mean faster delivery. You've probably seen this happen: a company says, \"Let's scale up! More teams, more developers, more features, faster releases!\" And then everything slows down. Dependencies pile up, teams get out of sync, and technical debt explodes. \n\nSo what's wrong? The issue isn't the number of teams; it's how they're working together. When teams aren't aligned, they spend more time coordinating than delivering. You see constraints, handoffs, rework, and instead of shipping value, they're drowning in knittings and delays. \n\nAt Naked Agility, we take a different approach. Scaling isn't about adding teams; it's about eliminating friction. We help organisations structure their teams in a way that removes dependencies, keeps high quality, and actually speeds things up. The right patterns, the right guard rails, and just enough structure to keep things moving without bogging teams down. \n\nBecause at the end of the day, scaling should mean better outcomes, not just bigger teams. If your organisation is struggling with this, then let's talk. We can help you scale without the chaos."
  },
  {
    "Title": "Is Your Engineering Culture Ready to Scale with Your Technology?",
    "Description": "Explores why scaling technology alone isn’t enough, highlighting the need for engineering cultures that support collaboration, DevOps, and continuous learning as teams grow.",
    "ResourceId": "yu9CmrDiBPc",
    "Url": "https://www.youtube.com/watch?v=yu9CmrDiBPc",
    "Date": "2025-02-20T07:33:26Z",
    "Captions": "Hex stacks can scale, but can your culture? That's the real question because scaling technology is the easy part. You add more servers, more clusters, more automation, and you're done. But if your engineering culture doesn't scale with it, you're setting yourself up for failure. \n\nAnd the worst part? You won't even see it coming till it's too late. When your teams grow, when complexity increases, when the pressure mounts to deliver faster, your culture is either your greatest asset or your biggest liability. Collaboration starts to break down. DevOps becomes a buzzword instead of an enabler. Continuous learning turns into an afterthought. \n\nAnd that's where so many organizations hit a wall. They think they can just throw more tools at the problem: more JIRA, more dashboards, more standups, more daily scrums. But culture isn't a tool problem; it's an ethos problem, a philosophical problem. And if you don't build a culture designed to scale, all the tools in the world won't save you. \n\nThat's what we do at Nak Agility. We help companies not just grow, but grow right. Building a culture that scales within your teams, your goals, your ambitions. A culture where collaboration isn't forced, DevOps isn't just automation, and learning isn't a one-time event. It's just how you operate. \n\nBecause at the end of the day, the companies that win, they're not the ones with the best tech; they're the ones with the best culture. So is yours ready to scale?"
  },
  {
    "Title": "Scaling Smart: How to Build Sustainable Growth Without the Chaos",
    "Description": "Learn how to achieve sustainable, resilient organisational growth by focusing on simplification, value delivery, and effective agile practices—avoiding chaos as you scale.",
    "ResourceId": "MwieMDwVuOg",
    "Url": "https://www.youtube.com/watch?v=MwieMDwVuOg",
    "Date": "2025-02-19T07:25:02Z",
    "Captions": "Scaling isn't about moving fast, it's about moving smart sustainably because if you scale too quickly without the right foundations, you're just accelerating towards a bigger mess. \n\nNow agile gives us a way to scale, but let's be clear, it's not just about picking a framework and running with it. Nexus, less disend, agile, they all bring structure, but structure alone doesn't guarantee success. The real question is, are you scaling for sustainability, for resilience, or for value? \n\nWhat happens too often is organizations reach a tipping point, realise they need more coordination, more alignment, and they just slap a framework on top of what they already do. But frameworks don't fix systemic issues; they expose them. If you're struggling to deliver value now, scaling isn't going to fix that; it's going to magnify it. \n\nThat's where NE agility comes in. We don't just implement frameworks; we help organizations build the capability to scale in a way that actually works for them. It's about understanding your current constraints, your bottlenecks, your organizational design. Then we use agile not as a set of rules, but as an enabler. \n\nBecause here's the thing: agile isn't about complexity; it's about simplification. The right teams working on the right things with the shortest possible path to value, that's how you scale successfully. \n\nSo if you're thinking about scaling, ask yourself: are we just growing bigger, or are we setting ourselves up to deliver better value? Because one leads to chaos, the other competitive advantage."
  },
  {
    "Title": "Mastering the Art of Scaling Product Development: Why Adding More Developers Isn't the Answer",
    "Description": "Explores why scaling product development requires system improvements, not just more developers. Covers alignment, technical debt, and feedback loops for sustainable growth.",
    "ResourceId": "KWiWgLFalyA",
    "Url": "https://www.youtube.com/watch?v=KWiWgLFalyA",
    "Date": "2025-02-18T07:08:05Z",
    "Captions": "Scaling product development sounds simple, right? Just hire more developers, write more code, ship more features. But in reality, it's never that simple because scaling isn't just about growing head count; it's about building a system that can grow effectively. And that's where things start to break down.\n\nCommunication starts to fray, teams get out of sync, constraints emerge. Suddenly, instead of accelerating, delivery slows down, and the more you scale, the worse it gets. So why is it so hard? It's because most organizations focus on adding people, not fixing the system. And when the system is flawed, throwing more people at the problem just magnifies the ineffectiveness.\n\nTake alignment, for example. Teams aren't clear on priorities; you don't get speed, you get wasted effort. If technical debt isn't managed, every new feature gets harder to ship. If feedback loops are slow, bad decisions linger, compounding the problem. Scaling well means fixing these issues first. It means creating clarity, reducing friction, and enabling teams to move quickly without tripping over each other.\n\nAnd that's where naked agility comes in. We help organizations build the kind of systems that actually scale, where teams stay aligned, delivery stays smooth, and adding more developers means faster results, not more complexity. If you're facing these challenges, let's have a conversation because scaling doesn't have to be painful; you just need the right approach."
  },
  {
    "Title": "Unlocking Unrealised Value: The Key to Elevating Your Product Development Strategy",
    "Description": "Explains how identifying and validating unrealised value, understanding user needs, and rapid feedback loops can enhance product development and maximise user impact.",
    "ResourceId": "ynIqkNbDN8I",
    "Url": "https://www.youtube.com/watch?v=ynIqkNbDN8I",
    "Date": "2025-02-11T06:00:40Z",
    "Captions": "In evidence-based management, we talk about multiple areas of focus. We talk about multiple key value areas, and one of those key value areas which is really important and most organizations and teams forget about is unrealized value. Right, they're just as important. All four of them are as important as each other, but because this is the one that's often forgotten about, unrealized value.\n\nUnrealized value is features you don't have, maybe features you know you need to have but you haven't shipped yet. Maybe there's features that you don't know you should have, and all of those things are driven by the market. Right? And when I'm talking about market, you could picture in your head one of two things. If you deliver to customers, general public, it's a commercial product, then your market might be external to your organization. If you deliver inside of your organization, then the market is inside of your organization. Right? So that's what I mean when I say market. The driving forces for what your product needs to do, right? Whether you fit the market, people are going to use it. People are using the features. People are engaging with the things that you're doing. People care about what you're building. Right? That's all part of that market story.\n\nSo, unrealized value means that you don't know. You don't know necessarily what you need to build, or even if you think you know what you need to build, it's based on assumptions, and you don't know what's actually going to provide market value. Right? Actual value only happens when you get it in front of real users. Everything before that is an assumption. We can try and validate our assumptions. We can try and weed out bad assumptions, right? Bad features, things that we don't think, \"Oh yeah, we've done it on paper and it doesn't look like it's going to work.\" But the reality is that until you get something that you think is going to provide value in front of real users, you don't know whether it's going to provide value.\n\nLike if you were renovating a house, right? Are people actually going to buy it? And are they actually going to pay the price that you think they're going to pay? If you have a keen understanding of what people are looking for, if you have a keen understanding of the market, if you have a keen understanding, yeah, of who's going to turn up and potential buyers, then you can tailor the build of your product towards those potential buyers and make it more appealing for them rather than less appealing. Right? So if you're renovating a house and you're going for a family of four, right? Two kids, don't concrete over the garden, right? Because the kids want to play in the grass. The kids want to kick a ball about. A large back garden with lots of grass looks appealing to a family of four. Right? But if you've got a one-person house with a garden, you want that, or a couple, right? A childless couple, you want that to be as easy maintenance as possible because they might want to sit out in it, but they don't want to spend a lot of time maintaining it.\n\nThose are the things that you're thinking about with your products as well. Who's going to be using our products? What do they want to do now? What do they want to do in the future? How can we get different users? Who could we get in so that there's more people using our product? What features do we have to build to bring in net new users to our systems in order to maximize our value? Our product provides more value if it serves more users, either through a commercial relationship or through an internal providing value inside of the organization. So that unrealized value piece is that story and how we engage with it. We don't know whether things are going to be successful even if we have the coolest idea ever.\n\nSo we want to break that down. I'm a firm believer in hypothesis-driven practices from a product management perspective. You have a belief, right, that a feature's going to add value to the product. As a product manager, as a leader in the business, as a CEO, right? I want this feature, but we need to break that down. What's your hypothesis? Right? If we build this feature, what do you think is going to happen? We're going to have more users. Okay, well, how many more users do you think you're going to have? Right? You turn it into a hypothesis. If we build this feature, we think we'll get 10% more users. Okay, what's the smallest thing from this feature that we can build in order to start validating that hypothesis? Well, we think this is the most valuable piece. Well, let's build that and see how many users we get. How many new users come to our platform because we built this smaller thing? And maybe that's only a few days' work to build that smaller thing to test the market, to test the hypothesis.\n\nWhat was the great example of this, which is a little bit orthogonal, is Dropbox. Right? When Dropbox, somebody came up with the idea for Dropbox. I can't remember the dude's name, but he came up with the idea for Dropbox. But his investors didn't believe that anybody would want that, so he couldn't get investors. Nobody would invest in his product. So he needed to demonstrate that people wanted to buy his product. So they created a pretty cool video. It's probably not pretty cool now, but Dropbox is pretty old. A pretty cool video that demonstrated the features in a selling video. And they put up the video on a website with a text box for your email address. Put your email address in here if you're interested in this product. And then they spent some money marketing it, and they got millions of signatures. Millions of people put in their email address, and that was the evidence that they used to go to the investors to get them to invest. And they got their funding to start building the product.\n\nThat's an example of we have an assumption. We think people want this product. We're going to create a hypothesis. We're going to get lots of, that's my crappy hypothesis. We're going to get lots of people if we build this product. And then how do we test? Well, here's one way to test whether people are interested in it, and we didn't even have to build the product to do it. So validating those hypotheses at every stage, and that requires, especially once you build your product and you're starting to add new features, you're going to be using feature flags. You're going to be using continuous delivery to get those features in front of real users as quickly as possible to gather feedback, gather telemetry on whether and how people are using those products.\n\nSo your deployment frequency is a huge part of that story because that is the minimum length your feedback loop can be. Right? So if you deploy once every two weeks, you can't get feedback shorter than every two weeks. Right? You're going to deploy to production at the end of the two weeks. You've then got to recognise telemetry, and then you've got to get it back into your story of delivery. Usually, it's twice your deployment frequency for most things. It's twice your deployment frequency. So if you do two deployments, your feedback loop is four weeks. Getting into production, customer feedback, analyse it, get it into your backlog. Product team picks it up. The shortest that can really realistically be is twice your frequency. So if you're deploying to production continuously, if every commit ends up in production, it minimizes that part of the feedback loop, and everything else is people. And people are much easier to figure out how do we get this done more quickly than systems because systems take a lot of work for that."
  },
  {
    "Title": "Navigating the Balance: How Lean Governance Can Boost Agility and Innovation in Your Organisation",
    "Description": "Explores how lean governance reduces unnecessary processes, enabling organisations to stay agile, meet compliance, and foster innovation without excess bureaucracy.",
    "ResourceId": "yvIanYh3bcQ",
    "Url": "https://www.youtube.com/watch?v=yvIanYh3bcQ",
    "Date": "2025-02-09T22:00:37Z",
    "Captions": "Governance is important for organizations to function safely. Too many organizations, if you've got extremely high levels of governance within your organization, you're probably going to have a great deal of difficulty taking advantage of opportunities and dealing with surprises. A surprise, something that goes wrong in the market or your organization or your product or whatever it is, is going to take a long time and be much more expensive to fix than it needs to be.\n\nNow, that doesn't mean that you can't do something because most governance is self-imposed. I'm going to explain that because it's something that I've seen time and time again. In most organizations, especially if you're siloed, if you have a governance department, this is even more true. Just like if you have a security department, you’ve weird security decisions. There's this idea of local optimization rather than system optimization.\n\nSometimes when you look at just one thing and you make a change or make a fix for that one thing, you're actually making a change that's better for this one thing, but it breaks something overall in the organization. I really say an example is, let's say you have a cog in a machine and you're looking just at this cog and it's slow to turn because it's pushing against all these other cogs in the system. What would make this the most efficient cog possible? Well, if we delete all the teeth from the cog, then it can just spin freely, but now it no longer drives the rest of the system. It's no longer part of the rest of the system. We've made a local optimization that makes this better, but it doesn't help us overall.\n\nThat's what often happens when governance is a separate department. When governance is a group of people in an ivory tower and they're making decisions about governance for the sake of governance, they're not making decisions about governance to provide value, safety, and security to the organization. They're doing it for the sake of governance. What you find often happens is they take the externally imposed regulatory governance that you might be required to meet. There might be government regulations, there might be industry regulations, there could be HIPAA, there could be FDA, there could be whatever the things, FAA, whatever regulations you come under. SOX audit, right, being one. SOX audit is a great example.\n\nWhat you're supposed to do to meet a SOX audit is you're supposed to do the absolute minimum that it says in order to meet a SOX audit. For example, you have to be able to trace who did what in the system, but it doesn't have to be easy to trace who does what. It just has to be traced. Writing a log file, for example, is adequate. If you have to go look it up because you're being audited or because something's gone wrong, you can look it up. It might cost you a little bit more for that one time, but overall it costs you a lot less because you don't have to build any systems around maintaining the audit logs, being able to query the audit logs. All of that stuff is time and expense you don't need.\n\nSOX audit, the people who created the SOX audit expect you to do the absolute minimum you need to meet that minimum bar, which is the SOX audit. But that's not what happens in organizations. What happens is overzealous compliance folks think about, well, if this is the minimum bar, then we should be here. We should be much higher than the minimum bar to protect ourselves. But that's not true. You only need to meet the minimum bar to protect yourselves. That's it. You've met the compliance.\n\nThat means that there's lots of things that you do in organizations that don't have to be there or don't have to be like that. A fantastic example is I worked with an organization, I try to remember where it was, somewhere in the US, and they had a huge compliance need, so much so that every meeting that we had, the notes all get sent off to compliance and then feedback came back and that kind of thing. We were talking about my level five, we were talking about all those things, and the compliance folks were getting a bit antsy because we were moving from their old system to Team Foundation Server, and they wanted to have change request logs. They wanted to have all of those things.\n\nSo I invited compliance to the event where I was talking about how the system worked. In Azure DevOps, it maintains every value of every variable that ever was on a work item. Every field, the full history of that field is maintained. It's never lost, it's never overwritten, it's just always available. I talked about that, and the team was saying, \"Yeah, but we have to have this change request work item.\" The compliance person was at the back of the room, sitting, working away, just listening. I just asked them directly, \"Is this good enough to meet the compliance?\" and they were like, \"Yeah, no problem, that's great, that works.\" \n\nSo we just removed the whole need for change request work items. They had other documents and assets that were around that story of change requests that we no longer needed because we met the compliance without them. This company had been doing them for years. So there's all sorts of organizational craft that builds up. You want to think about lean governance, lean procurement, lean processes. Is there any waste in the system? You want to think about organizational hygiene. What do you need to do on a regular cadence to minimize? Because sometimes we create, we think something looks a bit scary, so we create a policy for it, and then it's not actually that scary, but the policy still exists. Then another policy gets bolted on, and another policy gets bolted on. \n\nSo we need to go through organizational hygiene where we divest ourselves of waste, of the things that don't work for us, of anything that is getting in our way that doesn't add value to the overall system. That's one thing for sure. We want to have as much compliance as code as possible. So if you can have it built into your product that it just complies, this is for times where you do need to have, you know, just write that log and meet that compliance, then have it in there. \n\nThese types of governance should be met in the absolute minimum required, minimum amount of work, minimum amount of effort, minimum amount of code, minimum amount of everything required to meet the compliance and no more."
  },
  {
    "Title": "Avoiding the Local Optimisation Trap: How to Ensure Your Governance Drives Organisational Success",
    "Description": "Explains how focusing on isolated improvements in governance can harm overall organisational success, and offers strategies for integrated, system-wide optimisation.",
    "ResourceId": "ACZWkkvKEnw",
    "Url": "https://www.youtube.com/watch?v=ACZWkkvKEnw",
    "Date": "2025-02-08T07:49:38Z",
    "Captions": "So, a really silly example is, let's say you have a cog in a machine and you're looking just at this cog. It's slow to turn because it's pushing against all these other cogs in the system. What would make this the most efficient cog possible? Well, if we delete all the teeth from the cog, then it can just spin freely. But now it no longer drives the rest of the system; it's no longer part of the rest of the system. Right? We've made a local optimisation that makes this better, but it doesn't help us overall. And that's what often happens when governance is a separate department."
  },
  {
    "Title": "Unlocking Product Value: Why Real User Feedback is Your Best Asset",
    "Description": "Real user feedback is essential in product development to validate assumptions, guide improvements, and ensure your product delivers real value to its target audience.",
    "ResourceId": "rbEQRJrs4NY",
    "Url": "https://www.youtube.com/watch?v=rbEQRJrs4NY",
    "Date": "2025-02-07T07:52:12Z",
    "Captions": "Value only happens when you get it in front of real users. Everything before that is an assumption. We can try and validate our assumptions; we can try and weed out bad assumptions, right? Bad features, things that we don't think, \"Oh yeah, we've done it on paper,\" and it doesn't look like it's going to work. But the reality is that until you get something that you think is going to provide value in front of real users, you don't know whether it's going to provide value.\n\nLike if you were renovating a house, right? Are people actually going to buy it, and are they actually going to pay the price that you think they're going to pay? If you have a keen understanding of what people are looking for, if you have a keen understanding of the market, if you have a keen understanding of who's going to turn up and potential buyers, then you can tailor the build of your product towards those potential buyers and make it more appealing for them rather than less appealing."
  },
  {
    "Title": "Empowering Leadership: Driving Cultural Change for Agile Success",
    "Description": "Explores how effective leadership drives cultural change, supports agile practices, and fosters collaboration through vision, automation, learning, and breaking down silos.",
    "ResourceId": "XyprV8F_es4",
    "Url": "https://www.youtube.com/watch?v=XyprV8F_es4",
    "Date": "2025-02-07T06:00:27Z",
    "Captions": "In organisations, leadership plays a pivotal role in driving cultural and organisational change that enables you to support the frequent and reliable deployments across multiple teams. There are a number of key things that leadership probably wants to focus on or at least try to see if it can have an impact on these things. One is setting clear vision and goals. If you look at Dan Pink's book Drive around autonomy, mastery, and purpose, purpose is a huge part of that, and setting clear vision and goals enables people to have purpose. They can see how the work that they're doing every day benefits the overall organisation worked to achieve those goals. \n\nSo making those connections, leaders can also invest in automation and tooling. If you want to do continuous delivery to production, it's going to require a number of things to happen within your organisation. One of those things is that you need to support that ability to deliver faster. Right? So if you've got on-prem servers where on-prem environments, where if the developers ask for a new environment, it takes six weeks for the operations team to go buy the hardware, build that out, deliver that in some way, then you're not going to be able to move to continuous delivery. It's not possible. Right? That's a six-week blocker in the middle of that six weeks constraint. \n\nSo investing in learning around these technologies, automation, and tooling to be able to support that, to be able to support teams moving more quickly, automated deployments, automated building out of environments, automated everything. Right? Then that's one piece. The other piece is that the applications that you currently have, that you may have a long-term strategy for, they're going to be around for a long time, may not be architected in a way because maybe they've been around for a long time already, may not be architected in a way that's suitable for continuous delivery to production. That's just reality. \n\nAs you change the demands you're putting on the product, you're going to have to change the architecture of the product in order to support the new demands that you're putting on it. So investing in the time and effort for the teams to be able to work towards those outcomes. And we're not talking about delivering any new features because we're trying to do this. We're talking about enabling them to do a little piece at a time. \n\nThe Azure DevOps team had some architectural changes they needed to make in their test infrastructure in order to reduce their time to market. To completely clear off the old test infrastructure took four years. Right? We're not talking about a shorter time frame; we're talking about long-term products that exist in the market. Azure DevOps, the product that is Azure DevOps, was originally released in the market in 2006. We're now in 2025, so it's 19 years that product has been in the market, been making them money, been a flagship product within that context. \n\nVisual Studio has been a product for longer. Right? These are long-term products, and they need long-term thinking about investment in architecture, investment in refactoring, investment in automation, and in change. Right? Because your needs, your demands as the business on engineering, the demands of the customer on engineering are going to change over time, and you need to change your product and invest in changing your product to support that. \n\nSo that really comes back to this idea of continuous learning and improvement, not just on your plate as leaders but also on the engineering team's plate. Are you putting your engineers under so much time pressure that their biggest problem is getting stuff out the door, or do they have time to talk about and discuss how what they need to learn, how they need to change the product, the refactors that they have to do? Or when they start talking about those things, is the immediate answer, \"No, we don't have time to do that because we've got to ship some features\"? That's a losing proposition, absolutely a losing proposition. \n\nIt's not a short-term losing proposition, but it's a long-term losing proposition. There is no way to win cutting short-term quality, cutting quality for short-term wins rather than long-term wins. So those things together as leaders, along with, there's loads of things you could do. You could break down silos in the organisation. So if you have coding hierarchy and test hierarchy, anytime you've got a test manager and a dev manager, and then you get team members that are reporting to multiple people because they've got the team that they're on and perhaps a product manager that they're dealing with, and then they've got their dev manager as a line manager, and other people in the team have their test manager as a line manager, that's a mess. \n\nRight? That's complicated. That's people being pulled in different directions. That's teams having more difficulty, more friction in working together towards a common goal than in not working together towards a common goal. Right? Because there's more things pulling them in different directions. So breaking down silos and ultimately leading by example. People are going to look to their leaders to see how are we expected to behave within the context of this organisation, and our leaders need to present that example that we can use to build that culture of collaboration and trust within our organisation."
  },
  {
    "Title": "Embracing Change: How Architectural Adaptation Fuels Software Development Success",
    "Description": "Explores how adapting software architecture to changing demands drives long-term success, highlighting incremental change, team investment, and a culture of adaptability.",
    "ResourceId": "PNLCxB2zmUA",
    "Url": "https://www.youtube.com/watch?v=PNLCxB2zmUA",
    "Date": "2025-02-06T17:06:47Z",
    "Captions": "As you change the demands you're putting on the product, you're going to have to change the architecture of the product in order to support the new demands that you're putting on it. \n\nSo investing in the time and effort for the teams to be able to work towards those outcomes. \n\nAnd we're not talking about, we're not going to deliver any new features because we're trying to do this. We're talking about enabling them to do a little piece at a time. \n\nThe Azure DevOps team had some architectural changes they needed to make in their test infrastructure in order to reduce their time to market. \n\nTo completely clear off the old test infrastructure took four years. \n\nRight, we're not talking about shorter time frames; we're talking about long-term products that exist in the market."
  },
  {
    "Title": "Mastering Market Leadership: The Power of Frequent Product Releases",
    "Description": "Learn how frequent product releases help businesses lead markets, adapt quickly to change, boost user engagement, and deliver continuous value in a fast-paced digital world.",
    "ResourceId": "gM0_K8u2puo",
    "Url": "https://www.youtube.com/watch?v=gM0_K8u2puo",
    "Date": "2025-02-06T11:02:31Z",
    "Captions": "You want to be the one setting the market. You don't want to be following your competitors. You want to be the one setting the market trends. \n\nIn order to do that, you have to be on a tight release frequency. You have to be continuously delivering your product to production. You have to be getting every change you make in front of real users. \n\nThat is going to help you adapt to market opportunities, deal with market surprises, and maximise the value that you create in your product."
  },
  {
    "Title": "Transforming Agility: How Azure DevOps Went from Two-Year Releases to 880,000 Deployments",
    "Description": "Explores how Azure DevOps shifted from slow, two-year releases to rapid, continuous delivery, highlighting the benefits of fast feedback, agility, and frequent deployments.",
    "ResourceId": "_gyzx59-AJk",
    "Url": "https://www.youtube.com/watch?v=_gyzx59-AJk",
    "Date": "2025-02-06T10:20:34Z",
    "Captions": "If you're an organisation and you're trying to respond to changes that happen in the market, you want to be able to respond to them as quickly as possible. So those changes could be surprises. Surprises are usually bad, that you have to go deal with, or it could be opportunities, right? Things you want to go take advantage of. And if you have a long lead time between deciding you want to do something and it ending up in production, then you're not going to be able to take advantage of opportunities that arise. Lots of opportunities are going to float by, and somebody else is going to take advantage of them, or you're not going to be first to market or any of those things.\n\nSo one of the, I'm going to use an example. So the Azure DevOps team, when it was TFS back in 2010, 2012 type of timeframe, they were doing a two-yearly ship schedule, right? So they were shipping to production every two years. That was their cadence, with a service pack halfway. What would invariably happen is they would get halfway through their development, their two years, so after a year or maybe a year and a half, they would ship a beta of the new version of the product, and people would start kicking the tyres on the beta. They would have lots of feedback, and some of that feedback could be incorporated, but maybe the feedback was a bigger missing feature or something that customers are doing in the market that isn't in the product, or some change in the way we do things that's a bigger change, something a little bit meatier, right? And there's no way we can fit that into this version of the product, right? \n\nSo there's six months left to go. We're effectively mostly bug fixing and tweaking from our two-year development. They're coming to the end of our two-year development, and we've already planned the work that's going to go into the next version of the product. So in actual fact, unless this feature is super important, it might be just a little problem for customers. We're not going to bump anything out of the next version of the product to fit this in. So those features aren't going to make it into the product for more than two years because it'll be not the next version, but the next next version of the product. And that was a huge conundrum for them because DevOps was starting to move faster. Azure was taking off, and customers wanted these faster cycles, faster deployments, and Visual Studio and TFS and those kind of tools weren't able to keep up at all. Windows as well, but that was a little bit later, not much later, but a little bit later.\n\nSo they needed to shorten that delivery time, right? They had to have high deployment frequencies rather than low deployment frequencies. And they literally went from, in 2010, Microsoft was doing something like 20 or 30 deployments a year, right? So the deployments of their products, and by the end of 2018, I think they were at 880,000 deployments per year across the organisation. And that's just in Azure DevOps, not for Azure DevOps, but in the product Azure DevOps that they used for that.\n\nSo when you shorten your feedback loop between getting an idea out there, getting something in the market, testing it in the market, getting that feedback loop back around, how quickly can you adapt, right? Time to learn is going around that loop twice. So in order to do that, you don't want a yearly deployment, you don't want a six-monthly deployment, you don't want, you don't even want a two-weekly deployment. You want continuous delivery to production. You want to continuously be able to get the features that you're working on, that your teams are working on, in front of real users as quickly as possible. You want to take an idea that you have, and you want to take, like, what's the smallest test we can do? What's the smallest feature we can build? The smallest thing we can build in our product to validate whether this market opportunity actually exists, right? And get that into your product as quickly as possible. Then look at the data, look at the telemetry, and decide whether you're going to invest more in that, or it needs to be changed slightly, or, yeah, it was a great idea in my head, but once we started engaging with users, it wasn't a good idea.\n\nAnd in order to be able to do that, in order to be able to move with market changes, meet market demands, and look forward into the future to preempt and try to get ahead of the market, right? You want to be the one setting the market. You don't want to be following your competitors. You want to be the one setting the market trends. And in order to do that, you have to be on a tight release frequency. You have to be continuously delivering your product to production. You have to be getting every change you make in front of real users, and that is going to help you adapt to market opportunities, deal with market surprises, and maximise the value that you create in your product."
  },
  {
    "Title": "Balancing Speed and Stability: Why Quality Should Always Come First in Delivery Management",
    "Description": "Explores why prioritising quality and stability over speed in delivery management leads to better long-term outcomes, even when facing tight deadlines or external pressure.",
    "ResourceId": "Tz784ysJX7Q",
    "Url": "https://www.youtube.com/watch?v=Tz784ysJX7Q",
    "Date": "2025-01-24T06:30:21Z",
    "Captions": "So one of the questions I often get is how do we potentially, as delivery managers, balance the difference between speed and stability? Right, when you're under pressure for tight deadlines. And I'd assert that there's a fundamental problem with the question, and that's that we're under tight deadlines. Why are we under tight deadlines? We tend to be, because let's be honest, most deadlines exist because people don't believe you can meet them. That's why a deadline—this is the ridiculous thing about deadlines.\n\nSo there are some deadlines which are not even real deadlines that are coming, the external deadlines. Right, so let's say you've got a business, you're something within the context of, let's say, a regulated thing. Something's regulated by the government. The government brings in a new rule, and your software does not currently comply with that rule. And the government says, \"By this date, if you don't have compliance, we're going to start finding you x amount of money for every day that you're not compliant.\" Right? That, for many businesses, they would decide that that's just an absolute deadline. But the reality is that's not even an absolute deadline either. We can pay the fine, right? We can pay the fine. How much is it going to cost to build a feature? How long is it going to take? And what are the implications of trying to push for that feature to come out faster than we are able to deliver that feature? Right?\n\nPeople are going to start tripping over their feet if we start pushing them too hard. They're going to fall on their face, and if they fall on their face, the software is going to fall in its vase. What's the impact of that on our brand and our business? And is it worth the fine? Normally, the fine's a lot smaller than the cost implications of going too fast. So long-term, you're probably not wanting to pay all those fines, right? But short-term, you need to build the feature in the right way, with the right capabilities, with the right level of quality. Otherwise, you're going to start eroding your customers' confidence in your product. You're going to start eroding the brand awareness of your company. This is not okay, right? It's not okay to ship poor quality, unstable product under almost any circumstances.\n\nThe only circumstance I can think of—even so, the circumstance I think about is our company will go out of business next week if we don't have this feature. I think that's totally arbitrary, but I've heard that one. But if we ship that feature and we have that feature, but it doesn't work properly and it's buggy, is that actually going to help us? Right? Is that actually going to help us stay in business? I would be dubious as to that. Maybe we can try and hide it. A good example of that being successful is Zoom during the pandemic, right? They succeeded. I actually don't understand why they didn't get more crap for it, but what they did was when the pandemic happened and everybody started working from home, their user base massively multiplied, right? Very, very quickly, massively multiplied. And what they found was that their systems could not support that number of users.\n\nBut if you start capping users, right, and saying to people, \"No, we can't have another user on the system,\" they're going to go somewhere else. They're going to go to your competitors. They're going to go to Teams. They're going to go to WebEx. They're going to go to somebody else. So you don't want to do that, right? Good business practice is—sorry, what good? That's one of those could be either way. Moral and ethical business practice would have you either cap the number of users until you can increase capacity and bring on more people, bring on more capability, right? But Zoom chose a different route. They decided that maintaining that user curve and supporting it was more important. So they started systematically building features more quickly at lower quality. They started ignoring security concerns because security is a lot of your cost, right, for building stuff, validating and checking. So let's cut all of that, and then we can build more stuff.\n\nAnd they deliberately turned off encryption. So one of Zoom's selling points was end-to-end encryption. But end-to-end encryption adds about 40% load. I'm just ballparking that. I'm sure there's all sorts of variations there, but 40% load. So they can immediately have 40% more users stable on the system by turning off encryption. But they didn't want to turn off encryption and tell their users they were turning off encryption because that was a huge selling point for the product, having encryption. And what would existing users do if they were told that it was encrypted? So there was a little green light in the corner of Zoom, and it was the encryption light, and it would go green when the communication was encrypted. They turned off the encryption, but they changed the code so the light continued to be green. Right? That's a reduction in quality. That's a massive, massive business risk, and they were caught. And that had a massive impact on their brand awareness and a massive impact on their business.\n\nThere are still companies today that have Zoom blocked as a product within their organisational network that they will not allow it to be used, and it's because of that moral and ethical decision that was made at senior levels of that organisation to reduce quality, reduce stability of features that users expected to work effectively. They did. They were even worse. They kind of lied. It's kind of like the Volkswagen scandal a little bit, right? Except I don't think anybody died. But don't reduce quality in order to ship features quicker. It has an impact, and it has—because we're building complex systems, it often has an impact you're not expecting. It often pushes you into a corner, and you're then left with those moral and ethical decisions, and you have to go a particular way. One's going to suck, and one's going to be nefarious. And quite often, we as humans pick the nefarious one because it's easier, cheaper, more manageable in order to do that.\n\nSo how do you strike a balance between speed and stability? Stability is more important than speed—much, much, much more important than speed. Stability and quality is much more important than speed. Pay the fine if you have to pay the fine, but do things well and do things properly."
  },
  {
    "Title": "Rethinking Continuous Delivery: Why Best Practices Don't Exist in Complex Environments",
    "Description": "Explores why fixed best practices don't suit complex continuous delivery, highlighting adaptive approaches like audience-based delivery, testing in production, and ongoing improvement.",
    "ResourceId": "5J8RLcOAE3E",
    "Url": "https://www.youtube.com/watch?v=5J8RLcOAE3E",
    "Date": "2025-01-23T06:30:03Z",
    "Captions": "I often get asked about best practices that help teams do continuous delivery. How do, how one of the best practices? And I'm going to start right up front by saying there's no such thing as best practices when you work in the complex environment. There's no such thing as best practices. Best practices are for simple work in simple environments where you can have a procedure and you follow it continuously. It becomes the best practice, the best way to do it, and you get the same results every time. That's not the world that we live in.\n\nSo the phrase I quite often use, which is I guess a little bit passive-aggressive, is there's no best practices. There are only adequate practices for the situation at hand, and the situation might change. Right? That's fundamentally what we're talking about. But there are a bunch of practices that we see many organizations leveraging and getting success from, and we should try them and see if they work for us. That maybe makes more sense than best practices.\n\nSo the question usually is, and if I take out the word best, there, what practices enable cross-functional collaboration to support continuous delivery without compromising quality? One of those practices is some way to control what code ends up in production or not. That's a very powerful practice, or what code is enabled for people. That's probably a better way to just say it. Most organizations, most products have moved or are moving towards or are thinking of moving towards more of an audience-based deployment pattern or delivery pattern rather than an environment-based delivery pattern. Right? And so there are still environments within the context of this, depending on how it's set up.\n\nBut one of the core practices that supports this idea of continuous delivery, that supports this idea of continuous quality in production, is definitely moving towards an audience-based delivery strategy. So in the old, the old, in the ye olden days, the delivery strategy was Dev, test, staging, production. Right? Dev, test, staging, production kind of thing. And everything was done in Dev. The developers built all the stuff, and then it got pushed to test. Testers tested all the stuff, and then it got pushed to staging and something else, usually load testing there, and then it got pushed to production. Maybe if you're deploying to customers, they have in the way. Right? There was also a UAT environment. These are all costs. These are all at costs, and they're extreme costs, and they're not worth it costs. They not only have a cost to actually do at the time, they have massive, massive cost implications on our ability to build the right thing. They have massive cost implications on the cost of fixing stuff later, and they have massive cost implications because we're effectively testing quality in rather than building it in. Right? Testing quality in is the most expensive way to gain quality. Building quality in is how we should be doing that.\n\nSo this practice of audience-based delivery means we switch to a model, and I'm going to use the words, I'm going to use, make it sound like we're testing in production. And in fact, that's one of the terminologies that we do use in that context is testing in production. Right? And the reality of the world in which we live in, building these complex interconnected systems that we all build and work on, is that there is no place like production. There's no way to simulate production. There's no way to truly validate that what you've done works in production until you get to production. So wouldn't it be better if we can get a small change quickly into production for a small set of users and then be able to increase or decrease that user set on demand so that we can validate that the product works in real-world and real scenarios? And that's effectively what we talk about with this set of practices, this idea of shifting left and continuous delivery. And there's a lot of practices that help with that.\n\nSo audience-based deployment model is probably the main thing. And if you're thinking, \"Oh, our product is too big and too complicated to be able to do that,\" the Windows team moved to that. Windows is deployed on an audience-based model rather than a more traditional environment-based model. There's, because there's a physical product that's physically deployed to people, there's still a little bit of the old school environment in there for sure. So it's not a complete thing. Cloud products, you can go complete, but they go, their time from cutting code to it being in production with real users is only, I think for themselves, it's only a few hours. Like internal to the Windows team, but nightly, as I understand, at least nightly, they're deploying new versions of Windows out to all of the participants within Microsoft.\n\nSo if you're inside of Microsoft and you take a BG, that's their internal IT department BG build of Windows, like you're not self-managing BG build, then you're getting nightly builds of Windows. Or I think many people are. That means that what the developers wrote yesterday, you're testing today, and it's in production. Because you're, you know, you're a manager in Microsoft. You're doing your day job, which is managing people. You might be managing marketing people, right, inside of Microsoft, or managing consultants or managing whatever. And your machine has the latest version of Windows. You're using it in production. So that's getting into production as quickly as possible.\n\nAnd then what they're doing, the engineering team, is they're monitoring the telemetry. This is the audience-based deployment model. They're monitoring the telemetry and deciding whether they want to open that particular build out to more people. And when they open it out to more people, the next ring, I guess Microsoft calls them rings, ring-based deployment model, right? But it's really audience-based. Each ring has an audience of people, and they're all in production, and they're just opening it out to more and more people. That's a pretty simple version because it is a physical product that's deployed on your machine, right? Physical, which is your operating system.\n\nSo it's got to run on bare metal and in cloud, but it runs on metal. Right? But if you look at something like Microsoft Teams, Office 365, right? They have the ability to switch on and off features for specific users. So regardless of what build is shipped in Microsoft Teams, for example, and I have, I'm in the TAP program for Teams, basically their version of the insiders, and I get features before the general public. The, the, everybody gets features, and that can be specific to me as an individual user within my company or all users within my company. And that enables that choice. Right? So you, even as a customer in the TAP program, I can choose that I get the, oh my goodness me, the cutting edge latest and greatest, and somebody else in my business gets the reasonably stable. They're kicking the tires, ready for moving to a wider audience, more general public audience. And then general public have a way to opt into some extra features and things.\n\nSo we're all able to communicate with each other, right? We can all join the same call, and some people are using more different features from other people within the context of that call. Some of them have new capabilities, whole new code bases that are running their part of that story. And it's really interesting because I do calls with folks at Microsoft, and I've had folks at Microsoft who are on much earlier builds than me because they're choosing to help out that team or they work on that team. And yeah, occasionally their call drops, and they have to log back in, like, \"Oh, sorry, early build, I got a bug.\" And there's a risk-benefit analysis there. If you're working in a company and you want to take the earlier features so that you can pre-validate them for your company, understand what they are to help with training and whatnot of people in your company, understand what's coming down the pipeline, then you can choose to do that. But you're choosing to take a little bit of risk, right? Because it's going to be a little bit less stable.\n\nThis is this idea of testing in production. I'm not expecting a complete crash of everything and nothing works, right? But the occasional glitch, the occasional weirdness, I'm good with that. I teach training classes on Microsoft Teams. I teach all my classes on Microsoft Teams using Microsoft Teams breakout rooms, using all those things. I'm in the TAP program. I have an earlier capability. Occasionally, things go a little bit weird for me. That's just a teaching moment in the class because we're talking about how we deliver software and how we deliver products. And part of that is accepting that there are going to be some mistakes. There are going to be, if you're doing continuous delivery to production, there are going to be things that get past your automated gates, right? And end up in production. It's what you do with that information.\n\nThat's one of the best complimentary practices. I'm going to use the word best there. Is that philosophy and how you do it. In fact, it's not even a practice. It's a philosophy. You need to have a philosophy of find it and fix it. So if something does make it past into production and you're doing continuous delivery, you need to figure out how, why, how did this get past my automated checks? And how can I change my automated checks to be able to catch those things? That's it. If you find, \"Oh, it's not possible to change our automated checks because of the way we've architected the system,\" then this, you might be asked, I would expect a team to be asking themselves the question, \"Should we be changing our architecture so that these types of problems can't make it into production?\" And how long is that going to take?\n\nA great example, the Azure DevOps team had a bunch of incidents where one service that really shouldn't be mandatory took out the entire platform. Right? So they're running an online platform, and for example, the profile service, this was their first example. The profile service stops working. Does it matter that you're showing the ID of the user or the good of the user versus the friendly name of the user? Because the pro, you get that friendly name. I've got the good ID. I get the friendly name. But what if that profile service is down? Would you rather your entire system was down or it showed a good in place of a username in some cases? Right? Some small number of cases, I'd rather it showed the good and the system still worked because then my users can still do their job. My users can still use the system. They just see a small controlled glitch. Right? And then when that profile service comes back up or we fix it, that turns back on again.\n\nAnd there's a pattern, a coding pattern called the circuit breaker pattern. And it's exactly what you think it is. When one of the services stops working, it breaks the circuit. And then every so often, it tries the circuit to see if it's back up. And if it's not up, it just breaks the circuit again and then waits a little bit longer and then tries the circuit. If it still doesn't work, it breaks the circuit and waits a little bit longer. So this service on this site is not down because it can't connect to this service. And the Azure DevOps team had this problem that the profile service took out the entire system. So millions of developers all over the world were unable to look at their code, do their work items, do all these things because the friendly name couldn't be displayed. I mean, a bit factious with that, but the profile service was down. That's insane.\n\nSo one of the practices that you need to think about is one of the, let's call it philosophy. The philosophy you have to think about is, \"No, we need to change it. We need to look at the impact to our users and make decisions based on our ability to maintain our service, maintain high levels of quality, maintain the ability for people to continue to work within the context of our product even when the unavoidable happens, which is systems are going to break, systems are going to be down.\" How do you cope with that? That's probably, if I was to say there's a best practice, it's not a best practice. It's maybe a best philosophy, and that's to continuously seek to better your product, better its ability to support its users, and do that continuously and relentlessly."
  },
  {
    "Title": "Maximising Deployment Frequency: The Key to Faster Time to Market and Business Success",
    "Description": "Explores how increasing deployment frequency, stable environments, and fast feedback loops improve software delivery, reduce time to market, and align with business goals.",
    "ResourceId": "1-jUmFcyiI8",
    "Url": "https://www.youtube.com/watch?v=1-jUmFcyiI8",
    "Date": "2025-01-22T14:16:54Z",
    "Captions": "Deployment frequency can serve as a leading indicator of your company's ability to reduce the time to market. I think there's a lot of metrics in that space that you probably want to look at because it's pretty difficult. You could deploy really frequently to a test environment, and that has no bearing on your ability to deploy to production. You're deploying stuff to a test environment that is breaking all the time, so that metric on its own is not going to tell you that you're going to be awesome. That's absolutely not true. \n\nThere are a number of things that you can look at, but your ability to deploy to an environment and the speed with which you can deploy to an environment—let's assume that that environment is stable—so measure that as well. The stability of that environment would be a reasonable indication. If we had a stable environment we're continuously delivering to, we should be able to get stuff into production and deliver it to the market much more quickly. \n\nBut then you need to look at what gets in the way. I have a little formula that I think works really well. I've seen it work in organisations. I know it's not my formula; I think it's a fairly logical thing. Look at your entire pipeline, from ideation—coming up with ideas to go into your product—all the way through to getting it in front of your customers and closing the feedback loop. You're collecting data and telemetry on how that feature is being used, how performant it is, those kinds of things, and then having it feedback. That whole loop is your time to learn, and that is your largest feedback loop. \n\nIf you look at your time to learn and figure out how long it takes, you can find the thing in that time to learn that is taking the longest amount of time and go tackle that. Go make it shorter, go fix it, and then once you've fixed that thing, you've collapsed it into something much faster, much sleeker. Look for what the next blocker is in getting your time to learn down to a manageable size. \n\nBut the question then begs: what is a manageable size of time to learn? As any quantity question, as much as you need and no more. Making those things faster than you need might have an additional cost. So maybe focus on how quickly you need to be able to get things into production. How quickly do you need that to maintain the existing customers? How fast do you need to be able to do that to get new customers? \n\nYour sales team is going to be promising things to customers, and then you have to come back around and build them. Because they've been promised, there's an expectation. Don't train your sales team not to promise stuff, but there might be an expectation. If there's an expectation of a feature, then you need to ship something within that context as quickly as possible to start building on that expectation, building trust. Otherwise, you start eroding trust because there's an expectation that's not fulfilled. \n\nThis is one of the quandaries of the delivery manager: how fast we need to go. There's definitely a school of thought that faster is better, even if your business doesn't need or isn't demanding to be able to change faster. If we, in engineering, in building the product, are able to shorten those feedback loops as much as possible, we can iterate on it. We can use that data, we can get little changes in front of real customers as quickly as possible, and then we can monitor the telemetry. We can see how we've impacted performance, we can see live error messages coming through, or live telemetry, live performance, live error messages, and then be able to do something about it and make little tweaks to get things right. \n\nI think that's the important thing when the outcomes that we're trying to achieve are so complex. Not only how we achieve the outcome, there's a lot of unknowns about what the outcome's going to be. There's a lot of unknowns in what we're going to discover along the way. If we get that loop as tight as possible, we can deal with surprises. When something goes wrong, we can deal with it. We can make a change, we can ship it, we can make a change, we can ship it. That didn't work; we can make another change and ship it. We can iterate on that. \n\nWhen the business comes along with an opportunity—which they invariably will—they're going to come along and say, \"This massive opportunity has come along.\" They're not going to say it like that; they're going to say, \"Oh my God, I need this feature. I need it right now. I need to ship it tomorrow.\" If you are shipping once every sprint, shipping once every two or three weeks, that's not an impossible task to add something and ship it within a few days. But it's going to be fraught with risk and danger because if you're doing something that you've not done before and you have to get it out quicker than you're used to doing it, there are lots of points of failure in that story. \n\nIf you, as an engineering team, if you're a delivery manager and you have a team or a bunch of teams, a product or a bunch of products, if they're able to continuously ship to production—so they're doing continuous delivery to real users—then this opportunity comes along. We add some capability, it ships. We add some capability, it ships. We build on that capability, it ships. We get that much tighter iterative cycle. \n\nIf that feature is this big, how much of this feature is required in order for sales or the business to start advertising that feature? Maybe you only need a very small amount. Maybe you can do a couple of days of work and ship it, and then that feature is there, and they can start marketing it, getting value from it, and then you're building on that as users start using it. You can focus on what it is you need as you go. \n\nThis confluence, I think, of product development and delivery of that product is absolutely critical in order for us to maximise the value that the business gets, that the business creates. In order to do that, there has to be extreme trust, not only between us and the business but between us and the customer. It's not the business and the customer; it's us and the customer because the customer knows that the business doesn't ship the product. They know that we ship the product. Engineering ships the product. \n\nSo when it's not the right thing, they're blaming the business. When it's poor quality, they're complaining to the business that we suck. If we can get rid of that problem, then the only problem is what are we going to go build? If we're in a position—engineering is in a position to help provide all of the data for the business to be able to make a determination on what it is they build and what they don't, that's our job. We need to help the business make those decisions and give them as much information as they need in order to make those decisions effectively. \n\nThat means collecting telemetry, that means being able to continuously ship to production, that means enabling the ability that when an opportunity for the business arises, we are able to deliver on that opportunity faster than our competitors."
  },
  {
    "Title": "Unlocking Continuous Delivery: How Feature Flags Transform Software Development",
    "Description": "Explains how feature flags enable safe, incremental software releases, support continuous delivery, and use user feedback to improve features before full rollout.",
    "ResourceId": "YVrGU0oZmc0",
    "Url": "https://www.youtube.com/watch?v=YVrGU0oZmc0",
    "Date": "2025-01-16T06:45:00Z",
    "Captions": "So one of the key practices that I think is hugely valuable for organisations if they're moving towards that more frequent delivery, if they're starting to get things in front of customers as quickly as possible. Right, you want to, if you want to be able to do continuous delivery, you're going to accept that you're going to be deploying features, new features to production that you're not ready for customers to use yet. Right, you might need, you might have a feature that takes multiple deployments to get to the point where you're happy to have it in production. Right, even if the end of the feature is much further down the line, you've got 10% you want to do before you want the majority of users to be accessing it, but you're going to be delivering 1% at a time. Right, just as a random example, a great example of this, again, the Azure DevOps team do a great job of this. You can go open up dev.your.com and when you're logged in, you'll see that there's a button in the top right with a picture of you or a blank picture of you. You click on that and it'll have a preview features option, and when you click that, it will list all of the feature flags that are available.\n\nOkay, so what they effectively do is they write all of, if they're writing an update to an existing feature that's in production, it's just going to go, unless they're replacing a whole feature like they did recently with Azure Boards. They had old boards and new boards they wanted; they were doing a big update and they had a feature flag for that. Right, typically if you're adding functionality to an existing feature, you're probably just shipping it, right, because it's a smaller change. But if you're adding a net new functionality to your product, a new feature, a new capability, a new different thing, then they hide it behind a feature flag. The feature flag would then be turned on in their environment. They have the developers themselves' environment in their environment for testing. Once they're happy with their testing, they're going to turn it on for the product group. Right, so the environment that they're working in, their account has that new feature, and they're going to be looking at the telemetry. The developers that built the feature are going to be looking at the telemetry. So it's off for 99% of all the users in the system; it's on just for their own engineering team. And then they're looking at the telemetry: is this performing? Is it doing the right thing? Is it causing a lot of exceptions? They're looking at all of that data. Once they're happy that that's good, they maybe open that up to everybody within Microsoft that's opted in to see those things. So then everybody inside of Microsoft can turn on that feature and can turn off that feature. The feature flag's visible. If you turn off a feature flag, it asks you why you're turning it off and if it's okay to contact you. Very prudent. I always give a message and I always tick the box to say it's okay to contact me, and I do get contact from those teams because they're interested in, like, why are you turning it off? Oh, you've said why it is, but I don't quite understand what you mean. And then they'll contact you and try and figure it out. What's missing? Right, what's missing that you need? Is there an expectations gap? Is it bad? Right, it's not what I need. Is it causing errors and performing badly on my machine? Right, those are all could be reasons why I want to turn it off. But at some point, they're going to want to open it out to a wider audience, more people in the world. So what they typically do is they publish a blog post on their team Azure DevOps blog that says, \"Here's a new feature we're working on. We're looking for people to help us kick the tyres.\" And \"kick the tyres\" is just a euphemism for try it out and see if it works. And they give an email address for you to email with your account, and they'll enable it for your account. Then on your account, you'll get that feature flag, and it will be off by default, and you can go turn it on. Again, they're looking for people turning it off and feedback. They're looking for telemetry of people leaving it on. Is it performing well? That's their private preview. So you have to explicitly opt in to that capability, and that means that you're limiting your audience. Right, they'll have an idea; they'll be able to look across all of the times they've done this and have an idea how many people they're going to get. With that number of people, they're then monitoring the telemetry and looking at, do we have enough people using it? Is it because they might have to do another blog post, right, or another way to get people in? And do we have enough people using it? Does the telemetry look good? Is this viable for the next stage? So the next stage after that might be a public preview, and a public preview is that switch that feature flag then becomes visible to everybody on the service. And they put it out in a blog post saying, \"This is now available to everybody. We'd like you to try and kick the tyres.\" So people that want to then go switch it on, it's now easy. They don't have to email; it's just there. They can go turn it on and see what it's like. Some people just discover it; other people, they're reading the blogs and they find it. And again, they're looking at telemetry: do we have enough people using it? Do we need to promote it again? Do users care? Do they use this feature? Is it performing well? All of that type of data they're looking at on whether they need to invest more in that feature, whether anybody cares about that feature, whether they just need to stop. Right, or so it's pivot, anti-up or call, right? That's your poker analogy, right? You're, is this feature viable? If they get enough telemetry and everything looks good, the next stage is they turn on the feature for everybody on the server, but they leave that feature flag to be able to turn it off. So they're interested in that feedback: who's turning it off? Why are they turning it off? Can we have a chat with them and find out what's missing? What do they need? Right, you're engaging with your customers. This is the development team, the engineering team that built that functionality, is continuously engaging with real customers in production, either through telemetry or actually talking to them because you want to find out what's going on. I've turned off a feature before because I didn't like it and said I didn't like it. This is bad; it's not working for me. Take the box, hit submit, and a couple of days later, I've got a communication from the product manager for that feature, the person who's managing that feature and bringing it through, to basically ask what's it need? What's missing? Why do you not like it? All useful. And do we need to keep continuing to make changes to it before it goes live? So at any point in that story, you can pull that feature. You can just disappear that feature flag, and it's gone for everybody because it's performing badly. And you can automate that as well, so you could have automation that checks for performance and then automatically lets get rid of that feature if it's impacting the system. Right, that should be just built into the system. And then once everybody's got it turned on, people aren't turning it off. There's probably a few lards; there's probably a few unhappy people when you change things, right? You move their cheese; that's just the cost of doing business. But everything's generally okay. Then feature flags on for everybody. You start removing that feature flag from the system, and that feature's just in production. So that could be a very long time. I know that when the Azure DevOps team did their boards, the new boards, old boards, it took them nearly two and a half years, nearly three years to get everybody over to the new boards because they kept hitting missing functionality. They kept hitting some performance problems, and then they had to kind of old boards rewrite that new boards again, and it took them a long time to get from where we need to replace the boards to it's done. It was a very long time. And so feature flags and how you enable feature flags, so they can be behind the scenes. They can be something that you give actual users access to. This is one of the core practices that enable you to do continuous delivery to production while protecting your system, protecting your users, and enabling you to get the telemetry you need to understand whether you've built the right thing in production."
  },
  {
    "Title": "Unlocking the Future of Software Development: Why Automation is Your Key to Success",
    "Description": "Explores how automation boosts software development by reducing errors, speeding up deployments, and ensuring consistent, high-quality releases in dynamic environments.",
    "ResourceId": "tKEl0YVeWv4",
    "Url": "https://www.youtube.com/watch?v=tKEl0YVeWv4",
    "Date": "2025-01-15T06:45:00Z",
    "Captions": "Automation plays a massive role in enabling your teams to develop faster and more effectively. Right, automation is almost the thing that supports your ability to do that, and you should automate everything. If it can be automated, it should be automated. If it can't be automated, you want to do the work in your product to enable that thing to be automated. Right, so automated deployments, automated testing. I use Azure DevOps as an example a lot because they've done a lot of this work and hit a lot of these problems.\n\nOne of the things that they started doing was they wanted to automate the changing of security. Right, so on every deployment, every security key, every certificate, everything is refreshed. Every environment, every server, you know, so infrastructure as code, everything is refreshed. So you never deploy; they never deploy to upgrade the version of their service on an existing environment. They build a new environment and put that in and take the old environment out. Right, and these sorts of automations enable you to continuously be as slick as possible. Right, and it means that one thing that's really important to understand is that humans suck at following a set of steps in the same way every time. That's what robots are for. Right, robots follow a set of steps continuously. That's what automation is. Automation follows a set of steps and always follows it the same way and always follows all of the steps. Right, so if you get an exception or you have a problem, there's a problem with the steps.\n\nRight, when humans are following a set of steps manually, for example, then you don't know whether the problem is with the set of steps or the problem is with the human following the steps, and that's a risk you don't need. It's absolutely a risk you don't need. So a great example of that is the Knight Capital Group in the US. It was a company in the US; they had 450 million in the bank at the beginning of the day, and they were doing a deployment of a new version of their system. A lot of things were not quite right; they were repurposing some code in their product. They were doing a bunch of silly things because they didn't have good quality, but they also were doing a manual deployment, and the engineer that did the deployment deployed to six out of the seven servers that they had.\n\nSo the system then started behaving oddly because six of the servers had the correct code, and one of the servers didn't have the correct code. So if you can imagine a load balancing situation where you're trying to look at the system, it's not working, it's not functioning properly, but you can't figure out why because some calls are working and some calls are not, and it looks kind of random because it's the load balancer that's load balancing between the servers. It took them all day to figure it out, but they'd started losing thousands of dollars every second. And with 450 million in the bank at the beginning of the day, by the end of the day, they had to file for Chapter 11 bankruptcy. They were listed on the New York Stock Exchange, which is why we know what the problem was because they had to file that as part of their bankruptcy filing. That would have been prevented by automation. It would have been prevented by automated testing. It would have been prevented by automated deployment. It would have been prevented by automated checks.\n\nA more recent one that had a massive global impact was CloudStrike. Right, that would have been prevented by automation. It would have been prevented by automated deployment. It would have been prevented by automated checks. It would have been prevented by these types of capabilities that we're talking about. As you increase the number of deployments that you do, you're forced to deal with these types of scenarios. Right, how do I roll out to a smaller group of people so that I can figure out whether... One of my favourite quotes is from a gentleman called Brian Harry. Brian Harry was the product unit manager for the Azure DevOps team, so he ran that whole developer division at Microsoft for many years, and one of his mantras was that there's no place like production. You know, like kind of Dorothy type of thing, clicking the red shoes. There's no place like production. No matter how much testing you do, no matter how much validation, no matter how much money you throw at that, no matter how much time you throw at that, you're going to have production issues. You're going to have production issues because you can't simulate production. It's not fundamentally possible. You can do your best, and you can spend an awful lot of money trying to figure out how to simulate production as much as possible, but there's always gaps. It's not possible to simulate production, to simulate the type of transaction, to simulate what users do. It's not possible.\n\nSo a better strategy than testing quality in is to build quality in. And if you're building quality in, you want to get that product in front of real customers in production as quickly as possible. I Google... Google does... No, Facebook. It's Facebook. I was thinking of Facebook. They do a really interesting thing where when a developer's rolling out their new version of the product, they have a point in time when a call into Facebook is executed twice. It's executed with the current production version, and then it's executed with the new version that's not in production yet. So it executes, executes, executes, executes, executes, and then they can turn up the dial and go from a small, like 10,000 users, up to 10 million users, up to 100 million users doing this. And developers can see the telemetry for what's happening with this. Is it performing well? Is it doing the right thing? Is it having similar... you know, comparing the output from the two?\n\nAnd what they actually do is they do it completely automated. So the time from a developer committing a new capability to it replacing this production capability that's there is, as I understand, about 12 to 13 minutes. And that's with a full test suite, full regression, full validation of do they operate the same way? Do they have the same output that we need? Do they work in that context? Do they perform and scale out across the entire platform in about 13 minutes? So they can have these small changes, small fixes go out really quickly. And then when they work on bigger things, perhaps they're using feature flags or they're using other capabilities.\n\nSo automation, that's an automated process. Automation is absolutely critical to your ability and your product's ability to have fast, reliable... the fast, reliable ability to add features, fast, reliable ability to deal with problems, to deal with surprises and opportunities as they arise in your market."
  },
  {
    "Title": "Embracing Automation: The Key to Transforming Your Development Process and Boosting Confidence",
    "Description": "Explores how automation in testing, deployment, and validation streamlines development, reduces technical debt, and builds confidence for teams and customers alike.",
    "ResourceId": "VkhIXCsoSJw",
    "Url": "https://www.youtube.com/watch?v=VkhIXCsoSJw",
    "Date": "2025-01-14T06:45:00Z",
    "Captions": "When you are working on very complex products, one of the main steps developers and engineering groups can take is automating everything. I mean, that's probably, along with reducing the backat size, so making the things that you're delivering smaller, so that you can do more of them and you're iterating on them, right? \n\nOne of the key things that enable your engineering team to have the confidence that they can continuously deploy to production those small things is to automate everything. You should have automated testing, you should have automated deployment, you should have as much automated validation as you can. There are automated validations you can do, especially if you're collecting telemetry in your product. A great example of that was the Azure DevOps team when they first started deploying their cloud version of the product. They didn't have, you know, they'd been used to doing two yearly deliveries and suddenly they were doing three weekly deliveries. \n\nThey had technical debt, they had poor quality code, they had big gnarly chunks that were very difficult to edit, and they had automation that took a very long time to run. So, one of the two big focuses, big engineering pushes that they made in that team that I think had the biggest impacts on me observing their improvements, and the first one was that they reduced as much as possible that cycle time, right? They wanted to reduce that time to learn as much as possible. \n\nTime to learn is all the way from coming up with an idea for a feature, it gets all the way through being built, or some of it being built, being deployed to production, or some of it being deployed to production and collecting telemetry, and then feeding that back all the way around to the next loop. That's time to learn all the way around. So, figuring out what the biggest time suck is in that space and tackling that. \n\nFor the Azure DevOps team, they found a number of things. One of those things was their testing infrastructure. Their testing infrastructure was, for want of a better expression, terrible. It took, as I understand, about 48 hours to find out for developers if they made a code change whether it was successful. Their time to self-test, right? Their ability to test for themselves was incredibly long. That's 48 to 72 hours, and the time to run the regression suite was even longer than that. It was perhaps a week to get that done because they had long-running regression tests. \n\nOne of the biggest focuses, biggest pushes they had was on converting all of those long-running functional tests into short code tests, right? They were top-heavy on their largest number of tests, which were these long-running functional tests. Their smallest number of tests was unit tests, and they flipped that pyramid over. It took them four years because, remember, they'd been working on this product for six to eight years in a waterfall way, and they built this massive test infrastructure. \n\nSo, it took them four years of doing a little bit at a time, paying back that technical debt to get to the point where they'd flipped that pyramid over. In fact, they just removed whole layers of that pyramid, and they ended up with all of these fast-running unit tests. Instead of 80,000 long-running automated tests, they had 880,000 short tests. They moved that number from 48 hours to find out if a developer had done something wrong to three and a half minutes. They could run the whole test suite in three and a half minutes on their local machine. \n\nThey could stand up, via command line calls, any parts of the system that they needed in order to be able to do functional tests locally on their machine. That was one of the other changes that they made. How do we enable that so that developers can just run a command and it sets up the bits they need to test the stuff that they're working on locally? So that they can have a copy of the system running locally and walk through it. \n\nThey built all of that functionality. It took them a long time to get there, but that investment helped improve their confidence in their ability, not just as individuals but as a group, to be able to deploy and build features in the product and improve the confidence of their customers. Right? Their customers had greater confidence that this is a good product, it's a solid product. Yes, we've seen things go wrong, but when things go wrong, they own up to them, they fix them, they move forward, they don't make that mistake again. \n\nSo, that building, because it's okay to make mistakes, if you've got a customer that you make a mistake and they throw a tantrum and they throw their toys out of the pram, it's because they're used to working with vendors that they have low confidence in, and they have low confidence in you fixing it. So, they believe that they have to throw that tantrum in order for you to fix that thing. \n\nYou need to build their confidence in you and in your product, and then they'll stop doing that. They'll accept, \"Oh, something went wrong, you messed up,\" but we know you're going to fix it, we know you're going to do a good job, and we know that you're not going to do it again, right? Or it's unlikely that you'll do it again. That's confidence. \n\nWhen you're working in big complex systems like Azure DevOps or other types of systems that you have, you need that level of confidence, not just at the whole product level but at every individual team level. I, as a person working on a team, need to have confidence that if I'm using capabilities delivered by another team, that they're going to be solid, that they're going to work, that they're going to meet that quality bar that I need in order to do my work, and I'm not going to be your crutch to enable functionality. \n\nSo, this is really, really important to have that underlying attention to detail, attention to quality, shorten those feedback loops, build up that automation, automate everything. There should be no manual tests. One of my favourite examples of that is the Azure DevOps team. They had poor telemetry in their product when they first moved to this cloud environment, and they were deploying through regions. \n\nSo, they would deploy to a region and then they would check to see that everything was working properly. They would check to see whether they adversely affected users. They'd do this all manually, and then they would deploy to the next region. One of the developers, an intern, for fun, developed something they called the Twitter sentiment bot. \n\nSo, this was a little bot that trolled Twitter for negative comments about your product. What they would do is they would do a deployment to a particular region, and then the Twitter sentiment bot would monitor Twitter for a couple of hours to see whether the level of negativity about your product increased in any way. You're always going to have a baseline of people that are unhappy with stuff, right? So, if it increased in a certain way, then they would automatically stop the deployment and flag that there was something that needed to be looked at. \n\nThat's a crutch, right? That's a way to automate something that isn't automatable because of the way you built your system. They eventually didn't need that bot anymore because they had those full automations built into the system. But you need crutches while you get there to be able to push those boundaries and keep pushing for continuous delivery, keep pushing to do things faster, keep pushing to improve your code, improve your quality, and improve your engagement with your customers, and you'll get there eventually."
  },
  {
    "Title": "Unlocking Code Quality: The Transformative Power of Frequent Deployments",
    "Description": "Explores how frequent code deployments improve code quality, reduce technical debt, enable faster feedback, and support iterative, user-focused software development.",
    "ResourceId": "D1wz-J1jklQ",
    "Url": "https://www.youtube.com/watch?v=D1wz-J1jklQ",
    "Date": "2025-01-13T06:45:00Z",
    "Captions": "When we don't deploy very frequently, there are a number of dysfunctional behaviours that don't have to be there but tend to creep in when we're deploying bigger chunks of work. One of those things is that we tackle bigger chunks of work instead of taking a big thing and breaking it down into smaller things. We try and tackle that big thing, and because we tackled that big thing and then we deploy it maybe after a couple of months, maybe after a year, that is unlikely to be edited. We're not going back around and editing that code again and again and again. Maybe in five years' time, somebody will come back around and add something to that feature. \n\nBut if we're deploying more frequently, if we're deploying faster, then our deployment window is smaller than the features that we're delivering. So we're thinking about how do I take this big chunk of work and break it down into smaller things that have value? If I'm deploying that smaller thing that has value, I'm probably going to be thinking about, well, if customers are using it, I can look at the data of how customers are using it and perhaps change the way I build it. \n\nSo that's one advantage. But the main advantage from a technical debt perspective is that when I'm writing that code, I know that I'm going to have to go edit it tomorrow to add the next slice and perhaps edit it the day after that to add the slice after that. So I'm thinking more about how do I make sure that this code is maintainable, supportable, and adaptable because either I myself or one of my colleagues is going to be coming and editing it tomorrow. \n\nYou don't want to, I guess there's a little bit of peer pressure, right? You don't want to look bad in front of your colleagues. I shipped some really bad code, and now my colleague has to go clean up my mess. That's not polite, right? Because they've got to go edit it again. But even if I'm doing it myself, I'm editing it again tomorrow. \n\nI don't know if you've ever been in this position, but quite often when you find some nasty code, something that's written very badly, and you want to go look up the blame tool to find out who do I blame, usually it's yourself, right? You're the one who made the mess, and you don't remember. So even if you don't want to see yourself that way as writing that messy code, then we take a little bit more care. \n\nIt's also worth noting that if we're doing hypothesis-driven engineering practices, right, so that we can collect telemetry and data and then validate whether we're actually building the right thing, then we're perhaps only going to invest in the second slice if it's worth investing in it. If users are connecting to it, if they still desire to continue to invest in that feature. \n\nSo quite often, we actually want to do a quick job on the first slice. We're choosing to incur technical debt, knowing that we're going to be looking at the telemetry, looking at the outcome, and seeing whether it resonates with users and whether we continue to invest in it or we take that chunk back out. \n\nSo this frequent deployment can not only help developers tackle technical debt issues because it just makes it harder to incur technical debt. We make it easier to write good code because if you're deploying to production at the end of the day, it needs to be production-ready. Every time I edit the code, it needs to be production-ready. \n\nYou're potentially doing continuous delivery, right? Everything that makes it into main ends up in production. Every commit perhaps makes it into production. So reducing those gaps enables us to reduce technical debt because we know we have to do a better job. It enables us to understand our customers' needs better because we can see them interacting with the partial thing we have built in order to get telemetry and feedback. \n\nThese small changes help build confidence, not only with the customer but build confidence in the product itself, build confidence in our ability to deliver and continuously deliver those small changes. So when the systems that we're working on are big and complex and have lots of interactive parts, that's when we want to be delivering smaller and smaller changes so we can see immediately when things go wrong. \n\nObviously, we need telemetry and we need observability of our system to be able to do that, but this is one of the core practical steps that any engineering team, any developer can take: make the batch size smaller. This works in a lot of cases, but in this particular case, if you're delivering code to production, reduce the batch size, increase the frequency of delivery and deployment to production, and you will see an improvement in the code. You will see an improvement in the product, and hopefully, that will result in happier customers."
  },
  {
    "Title": "Transforming Organisational Culture: Unlocking Engineering Excellence Through System Optimisation",
    "Description": "Explores how understanding and optimising organisational systems can drive engineering excellence, improve value delivery, and foster a culture of technical leadership.",
    "ResourceId": "KhKFVRcdbGo",
    "Url": "https://www.youtube.com/watch?v=KhKFVRcdbGo",
    "Date": "2024-12-21T06:00:00Z",
    "Captions": "Naked Agility helps organisations create a culture of engineering excellence. I struggle with the idea of creating culture; culture is just what is within the organisation. But what we can help you do is think of culture as the shadow on the wall. You need to change the shape of the thing in order to change the shadow on the wall, and Naked Agility can help you understand your current system of delivering value in order to measure the things that make an impact on where you want to go and what you want to achieve. \n\nIn order to create the highest value optimisation that we can have within your context, we do that by monitoring the system, identifying what your system is, and defining that system of delivering value. Then we create or help you create metrics and understanding and transparency of that system so that you can see what's going on and make better decisions that enable you to get to the outcomes that you're trying to achieve. \n\nThese outcomes could be reducing cost or maximising value. I would go for maximising value, to be honest. This idea of technical leadership and engineering excellence within the context of building software products is that overall ethos of understanding your system, measuring it so you can see what's going on, and then making substantive changes to that system to see whether you're able to optimise the goals and outcomes that you're trying to achieve. \n\nThose are all things that we can help you do. We can help you control your costs and achieve technical leadership with Naked Agility. Contact me today to get started on your journey."
  },
  {
    "Title": "Mastering Product Development Costs: Empower Your Team for Financial Success",
    "Description": "Learn how to track, manage, and optimise product development costs by empowering teams with financial awareness, key metrics, and continuous improvement for better outcomes.",
    "ResourceId": "UgFVn4Sp1rw",
    "Url": "https://www.youtube.com/watch?v=UgFVn4Sp1rw",
    "Date": "2024-12-20T07:00:00Z",
    "Captions": "So if you're building products, you really need to understand the cost of those products. There are a number of factors; it's really complicated because there's the actual cost you pay, which is normally due. In general, your two big costs at building software products are hardware—that's the smaller one—and people. Right? So if you have 50 people working on a product, that's probably going to be your biggest cost. If you deploy to the cloud, that's going to be your second biggest cost, right? So your infrastructure and people, those costs should be fairly consistent. You should understand your cost profile. I usually talk about it in terms of what's the cost per sprint, right? Why should we do another sprint? What's it going to cost? What do we get for it? And are we getting a clear return on investment for the cost that we're putting in, right?\n\nSo sprints are part of the Scrum framework, and they're a way of planning and managing work, right? They don't imply an engineering process; it's just about the management of the work part and planning for what's happening next. So if I was looking at a cost per sprint, let's say I'm doing a two-week sprint, what's my cost per two weeks of work? What are my teams working on for those two weeks, and is it valuable? It's also really important in that context for the people doing the work to understand the cost of doing the work because they'll make better choices, right? If you want to create an environment in which people are spending the money as if it's their money, and if they understand the cost of the sprint, they'll think about what it is that we're doing for this sprint, the cost of the sprint, and try and maximise your return on investment. That needs to be an evolution, an effort that every single person that's working on your product is involved in; otherwise, you're not going to have people working on the right thing, and you're not going to have people making the right decisions.\n\nSo one effective way to minimise your cost and maximise your value is to have every member of every team and everybody working on your product understand what the costs are within their context. I've actually spoken to some colleagues about this, and I've kind of come to the conclusion that every team should be running a P&L, right? Not just are we adding value in the product, because value is a little bit in the eye of the beholder; it can be a little bit difficult to actually measure its capability. But revenue, we can absolutely measure that, and what percentage of the revenue is attributed to a particular feature. This team owns that feature; therefore, that's the revenue they're making. This is the cost that they're having, and are we as a team making a profit working on what we're working on? If we're not making a profit working on what we're working on, should we be working on something else, right? \n\nThat dynamic and flow of the team within the context of product management and product leadership with deliberate choices on investment in long-term efforts, right? Just like an infrastructure build. If you were running a country and you decided to invest in roads, that's a big capital expenditure to invest, and that needs to be understood as a concept. We're investing a bunch of money just now, so it looks like we're making a loss in order to get a larger return in the future, and that's a deliberate thing that we're doing. But we're still looking at the P&L; we're still understanding what it is that we're doing.\n\nSo I think from a team, from a group, from a product perspective, we should be looking at all of that information, and every member of every team should understand it to the extent that they need to, right? Within their context. To do that, you kind of need to understand a little bit more about what your product is, where you intend your product to go, what market you're in, what's happening in the market, and how you're interacting with the market. This is where I tend to fall back a little bit on evidence-based management. So there's the evidence-based management guide from Scrum.org, and it does give example metrics, right? But it doesn't really talk about specific metrics in the context of the guide. It basically says there are four key value areas that we need to think about. There are four key questions we need to ask ourselves, and in order to answer those questions, we need to have metrics which help inform but not control those decisions.\n\nSo the four key value areas that we need to monitor, right, in order to understand our cost-to-value profile, I think that's probably a good way to say it, is we need to understand where we sit in the market for our product. That market could be an external B2C or B2B market, or it could be an internal market—whatever you want to call that. You're the people that are using your product internally in the organisation. That's why lots of organisations have internal cost structures as well. You know, I worked at Merrill Lynch, and if I wanted a server or to use a piece of software, even if it was an internally built piece of software, there was a cost attributed to it. Yes, it was a little bit of a fictitious internal cost, but it allowed them to do a little bit more P&L and understand what's going on with the product. They definitely went too far with bean counting, but it is important.\n\nSo we have to understand our market value, and that's made up of two areas. There's current market value—what we've got right now, what we're delivering right now. So that could be customer happiness; it could be employee happiness; it could be usage, right? Lots of information we can collect around our current value. And then we've got hypothetical value, future value, which should be represented in our product backlog, right? What's the future value of our product? Looking at what market opportunities we can open and how do we measure whether we're opening enough market opportunities? \n\nThink of the example of Netflix. Why do they choose to create a new show, the first season of a new show, rather than add a second season to an already successful show? That's because second seasons always have less users; less people care about a second season, whereas the first season of a new show, you can big it up and onboard new people that weren't customers before, right? So that's opening out new market opportunities rather than leveraging existing market opportunities, and that's what your product backlog is about, right? You need to measure and understand those things within that context, and those things are really, really hard to measure. That's one of the hardest parts, I think, to measure for most organisations. Are we solving customers' problems? Are there other problems that the customers have that we should be solving instead? All of those kinds of questions. \n\nBut that's your market value. And then the other thing that you need to understand and have metrics for—I'm deliberately not referring to specific metrics because it really depends on your context, your industry, what it is you're doing, how your product works—you need to find metrics in these areas that suit your particular product in your particular world. I do work with organisations to help them understand those things, but it's something that they need to understand, right? The people doing the work, the people in the organisation need to understand.\n\nSo that's the market value, and then you've also got your capability of your organisation. So the two pieces are time to market—how quickly do you get your product in front of real customers, right? Time to market is about how quickly can you realise an idea to data, right? So that's time to market. And then the other one is the ability to innovate. How much time do you spend opening those new markets versus maintaining and supporting existing stuff, right? This is where if you had high technical debt, you might spend more time on maintaining and supporting. If you have low product quality, you might have more time on supporting and maintaining. \n\nSo those are the types of things you might measure in that world, right? What's our technical debt? We might do so in our code analysis of our product or whatever else you're doing. How do we understand bug trends, live site incidents? We might be looking at all of those things within our ability to innovate context and our time to market. We're looking at cycle time and lead time, right? How quickly can we get stuff out the door? What are other things in your organisation that impact those ideas, right? What are the things that inhibit your organisation's ability to reduce its time to market? Measure those, right? To get faster at delivering your products, what are the things that are getting in your way? That's what you should measure. If you're struggling to innovate, what are the things that are getting in your way? Those are the things you'd measure, right?\n\nAnd once you've got a handle on those things, figure out what the next thing you measure is to get your next biggest bang for your buck. And that's a constant cycle. So the metrics are changing over time. Some of them will take longer than others to resolve, but measuring and monitoring the value that you're creating—revenue in P&L and the cost of delivering in your product—these are other metrics that help you get that holistic picture of what's going on. It is almost the most important thing for a CTO, for a business, to understand and disseminate through the organisation so that we can all, at every level, make the best decision we can."
  },
  {
    "Title": "Navigating Technical Debt: How to Transform Challenges into Opportunities for Quality and Efficiency",
    "Description": "Explains how managing technical debt and distinguishing it from poor quality can boost product efficiency, reduce costs, and support sustainable software development.",
    "ResourceId": "npnQtdLEwQY",
    "Url": "https://www.youtube.com/watch?v=npnQtdLEwQY",
    "Date": "2024-12-19T06:00:00Z",
    "Captions": "Technical debt is something that adds a massive cost to your product and the way you do things. But I want to be really clear that I'm including multiple things in technical debt because that's how people see it. So from a technical standpoint, technical debt is like it's the implied cost of future rework because we prioritised speed over long-term design. Right, so that's where we come to a decision point. We have to, we're building a feature and we can either do it the fast way or the right way, and we choose the fast way. Right, that's technical debt. It's usually deliberately incurred, right, with choices that we make. It's either deliberate by the engineer, deliberate by product leadership, or deliberate by the organisation.\n\nThere's also an unintentional technical debt that isn't generally, I mean, in general, people characterise it as technical debt for sure, but technically it's not technical debt. Trying to get my brain around that, but it's poor quality. Poor quality is not technical debt; poor quality is just poor quality. So when people talk about technical debt and they talk about, \"We've got a lot of bugs in the system,\" they're probably not talking about technical debt; they're probably talking about poor quality. But they don't want to call it poor quality because that makes them look bad. \"Why did you deliver poor quality?\" says the CTO. I understand why you made decisions to expedite a feature in order to ship more quickly to our customers, but why did you ship poor quality?\n\nRight, you will generally find that C-suite is not interested in poor quality. They want high quality; they want their product to work, and they want users to be happy. But they would be happy to make design decisions that expedite, right, that get things done faster. So the problem is that, maybe I'm being a bit jaded here, but I would say most engineering groups—I'm using the word group very specifically there, like department, group, perhaps team, depends on your context—they characterise poor quality as technical debt, like it's a choice. I mean, it is a choice. They deliberately didn't do the stuff they needed to do in order to maintain the quality of the product, and that builds up over time.\n\nSo technical debt builds up over time, and poor quality builds up over time. Poor quality is by far your biggest killer. Both create rework, both create higher costs of maintenance, both create slower development. It's harder to add features to your product because you made what we now realise are subpar design decisions. Right, we might have made the right decision at the time, but now it's the wrong decision because the world's changed, or the market's changed, or we shipped a bunch of crap to production, which is what I see quite often. I don't understand it, but I see it quite often with teams and with products that we don't deliver high-quality usable product to production. We deliver barely functioning product to production, and when you build new features on top of new barely functioning features on top of old barely functioning features, you're going to have barely functioning squared, and it starts to become excessive cost.\n\nI use an example in one of my other videos of a company I worked with that had manual testers to 300 coders. That was because of poor quality. Definitely, some of it was to do with technical debt, but most of it was to do with poor quality. It was horrendous. So this has a massive cost. It has so much cost, and it's especially easy for it to happen when you take longer to ship your product to production. Right, so if you have a really long product cycle, let's say two years between releases, then the last six months is what they say is bug fixing. Right, but it's not really; you're out with the sticky tape and the super glue patching it up to a state where it can be shipped. If it's patched up, that means it's not right.\n\nOkay, that some of that might be technical debt, and some of that might be low quality. It's the reason that Windows, for example, is so much more stable now than it ever was in the past. In the past, they used to have a six-year ship cycle, right, and that incurred massive amounts of debt and cost. And then when they came back around at the end to clean things up, some things were now fundamental to the product, and they couldn't clean them up; they had to paper over them. Right, you've got the paper mache over the top making it like a lovely glossy product. But then hackers and nefarious people come along and start peeling back at the edges to get underneath and exploit things in it.\n\nWith the new model that the Windows team work in, where they're delivering continuously to production, every member of every team is in charge of quality or part of that story of quality, of security. They go back and fix things on a continuous basis. They don't build up that technical debt anymore; they keep on top of it. And the way you keep on top of technical debt is to continuously deal with it. You're continuously refactoring; you're continuously re-architecting your product when things happen that you find you need to deal with.\n\nA great example is when the Azure DevOps team ran into an issue that they'd moved to the cloud. They got a bunch of smaller services. One of those services was the profile service, right, where you give it an email address and it comes back with your profile data, like your picture and your friendly name and all of those kind of things. And something went wrong with the profile service, and because the profile service wasn't responding, the entire system didn't work. You couldn't change work items; you couldn't commit code; you couldn't do any of the things that, anytime it called the profile service, you couldn't even view code because it was calling the profile service to get the friendly names for the people that were committing the code, right, in the history and stuff, or the work items. Right, you couldn't see anything in the work items.\n\nSo, but why? Right, if there's something wrong with the profile service, just show the email address. You don't need to go get the friendly name. I, as a user, might go, \"Why is it just showing me the email address?\" But I can still use the system; I can still work. Right? And that was there because they made architectural decisions that were perhaps done for expediency, perhaps done deliberately, but also could be done accidentally. Right? They didn't realise this was going to be a problem in the future. But as soon as they figured that out, they realised this technical debt. We had a production incident because of our design choices, right? This service was too tightly coupled, and we need to figure out what was the cause of the problem. Well, it's this tightly coupling. What do we need to do about it? Well, we need to go re-architect, and anywhere that calls this service, we need to introduce—in this case, it was introduced the circuit breaker pattern. So that when it's not working, it just turns it off and doesn't keep trying to call it. It just stops calling it, and then maybe every ten seconds it goes, \"Is it working? No. Is it working? No. Okay, wait a minute. Is it working? Oh yeah, it's working now,\" so we can reconnect it. Right? That's a circuit breaker pattern.\n\nSo they did that so that they would never have that problem again. It would never happen that the profile service going out would result in another service not working. Right? So that's paying back some of that technical debt that you either deliberately incurred or you found later. Right? You realised you'd got into debt over your head, and you need to fix it. But you need to fix it; you need to go back and refactor it, and there's a cost to that. Right? It's engineering work; it's time; it's possible mistakes; it's reworking tests; it's all of those things to make that work.\n\nAnd then I think a year later, they had a similar problem with another service, so they took the decision at that point to go and introduce the circuit breaker pattern in all the communication across their entire service, and then they never had that problem again. So you're always going to incur technical debt, whether you choose to do it deliberately or you discover it later. You should never have poor quality. You should have an absolute minimum quality bar that's set by the organisation to protect the business, the brand, your employees, and your customers. Right? That's your organisation's—we I would call it a definition of done. Right? What's the minimum quality level required by your business? But from a technical debt perspective, we still need to go back and pay it back, and it pays back dividends when we go fix these things because it pays it back in making it easier for us to add new features to the product. It pays it back because our customers have less issues, so they're happier. They think better of our product, and if they think better of our product, then we tend to make more money. It's a lagging indicator, but we tend to make more money. So managing technical debt minimises your costs and maximises your profit."
  },
  {
    "Title": "Why Embracing Automation is Essential for Reducing Human Error in Software Development",
    "Description": "Explores how automation in software development reduces human error, improves reliability, and streamlines workflows, using real-world examples and practical insights.",
    "ResourceId": "sdIPSpbeA9w",
    "Url": "https://www.youtube.com/watch?v=sdIPSpbeA9w",
    "Date": "2024-12-18T06:45:00Z",
    "Captions": "Automation is a huge part of enabling the building of software to be more effective, more standardised, more efficient. I don't like that word, but it certainly fits here. The difficulty is that anytime you've got a human doing something, you're going to have mistakes. You're going to have mistakes, you're going to have steps missed, you're going to have things go wrong. \n\nTwo examples: one's a commercial example and one's just an interesting one. One of the interesting ones, do that one first, is that I used to teach a bunch of testers how to use the Azure DevOps test tools when there was a separate app. It was quite some time ago, and you would think that the superpower of testers would be that they could follow a test script, right? They're going to spend a bunch of work creating the test script, but then they're going to follow that test script to run the test, running a manual test and following those steps, right? \n\nSo there's 10 steps in the test; they follow those 10 steps, and it either passes or it fails, right? Well, in this training, we had workshops, we had labs, and they had to follow a set of steps on the lab. I kept getting feedback from loads of people in the room, loads of instances of the training. I would get feedback all the time that the labs were wrong, that the labs didn't work, that they were following the steps and the lab doesn't work; it doesn't do what it's supposed to do. \n\nThis was false; they just weren't following the steps. They were either missing something or clicking the wrong button or not doing whatever it was, right? So those testers, whose job it is to create and then run sets of steps manually, perhaps to validate whether something is built correctly, were manifestly unable to successfully and consistently run through a set of steps. This is just part of being human; it's not a slight on them, it's not a tester thing, it's a human thing. \n\nThe commercial example is the KN Capital Group, which you might have heard of or maybe not, but they went bankrupt because somebody couldn't follow a set of steps. They had a deployment of a new version of their product; they were Stock Exchange Management trading software. So you can imagine when something goes wrong, the cost of something going wrong is pretty enormous. \n\nWith $400 million in the bank at the beginning of the day, a deployment happened. It went wrong because the person running the deployment deployed to eight out of the nine servers, and because not all the servers had the latest version of the code, some weird stuff started happening. It took them till the end of the day to figure out what the problem was, which was steps missed, and by that time, they had to declare bankruptcy. They were done, right? \n\nThe cost of these types of mistakes is enormous. That one is a very extreme example, but the cost of somebody who's running a set of steps—this could be a tester, it could be a coder, it could be UAT, right?—could be a user. They walk through a set of steps and then communicate back that it was wrong; it didn't work. That cost is in investigation from the engineers, in loss of focus on new features because they're not building new stuff for you when they're having to go look at this erroneous problem. \n\nWhat we want instead is automation. The solution to both of these problems is automation. There is an expression I use: if it can be automated, it should be automated, and if it can't be automated, it should be rearchitected. \n\nClose the feedback loop. Think about if you were telling a story. I'm thinking code is kind of like telling a story. You're telling a story, you're working on part of this story, and then you submit it to your publisher, and the publisher takes six months to come back with feedback. The feedback is, \"This didn't work, that doesn't work, can you change this, can you reformat this?\" \n\nNow you're much further along in the story; you're working on a different part of it, and now you have to come back to this previous part of the story and get into the mindset of this part of the story and try and ignore the things you learned during the future part of the story, right? The character development has changed, and you have to go back to this old version of the character with an older style of how that character does things. \n\nNow you need to do this differently, so now we're trying to make a change back here in the past when we have understanding from the future that would impact how we would do this, but we can't let that impact what we're doing. It's a huge cognitive load, right? And that's in code; it's exactly the same. Exactly the same thing happens when you have to do that. \n\nSo not only do we want automation in our process to automate tests so that we don't have as many false positives of tests failing or false negatives—anyway, false negatives are probably good and false positives, right?—but we also want to have those tests run as quickly as possible so that we get that feedback loop closed as quickly as possible. Preferably, I'm talking about minutes. That's what I'm talking about here: we want automation that runs in minutes that tells us whether we've passed or failed, preferably seconds, right? Or milliseconds, but minutes at the most, at the outside. \n\nA great example of that is the Azure DevOps team. They used to have very long automation to find out whether they'd broken something; it was 48 to 72 hours because they had to run on a bunch of servers. They had long-running automated tests, but they were long-running system tests. Those are the wrong types of automation. So not all types of automation are the right type of automation. They were certainly better than trying to do it manually, right? \n\nBut those types of tests tend to be flaky, tend to have a lot of false positives, tend to be difficult. So they embarked on an endeavour to invert that triangle of tests, right? So if you think about it, you've got fast-running unit tests that your developers are creating; that's testing just the smallest unit of work, all the way down to long-running system tests at the bottom. \n\nThey had 38,000 long-running system tests and a very small number of unit tests at the top, so their pyramid was the wrong way up, right? So what they did was they spent a whole bunch of time, money, and effort flipping that pyramid round and working through moving all of those tests to fast, slick automation. They got from 24 to 48 hours to find out whether something was wrong all the way down to three and a half minutes to run their entire test infrastructure locally on the developer workstation. \n\nSo you close those feedback loops; you shorten those cycles. Manual is the longest cycle. Anything manual, whether it's deployments, whether it's testing, anything manual is prone to mistakes. So you get false positives and negatives, but it also takes time. It's time-consuming, and it's costly. \n\nI worked with an organisation years ago; that's the only organisation I've ever encountered like this, so it is unusual; it's an outlier. But they had twice as many testers as coders. Their quality was so bad in their software that they had to do, I think it was, a thousand and a half hours of manual QA to validate whether any change the developers had made would actually work in the system. \n\nSo they had 600 testers and 300 coders in their teams, and it was all manual tests. That is just unsustainable. Think of the cost of having all of those people versus having fast, tight, secure, easy to understand, easy to validate automation that could run and check your software on a regular cadence. You will build more features; you will build those features with a higher level of quality, so you'll have happier customers. \n\nAnd if you're building more features, you're having happier customers, you're doing more experiments, right? Because you're building more features, you're more likely to open out new markets, and you're more likely to make a profit."
  },
  {
    "Title": "Transforming Waste into Value: How to Boost ROI with Agile Metrics",
    "Description": "Learn how agile metrics like innovation rate, product index, usage index, and version adoption help identify waste and improve ROI by focusing on value-driven engineering.",
    "ResourceId": "Gym5-p-mNtw",
    "Url": "https://www.youtube.com/watch?v=Gym5-p-mNtw",
    "Date": "2024-12-17T06:00:00Z",
    "Captions": "Most organisations don't realise the amount of waste that they have in their system, the amount of money that they're haemorrhaging because they don't have a focus on engineering excellence. This idea, within the context of agile, of business agility, of everything being continuous, right? So you've got continuous integration, continuous delivery, continuous feedback, continuous testing. That continuous nature, that things are happening dynamically, enables you to find problems quicker. So the problems are smaller; that eliminates some waste, but it also enables you to collect data and telemetry and understand what's going on a little bit more easily, which means that you can identify problem areas and do something about them before those costs spiral out of control.\n\nI work with so many customers that have so much waste. I've got some DORA metrics here. I think not all of them are DORA; most of them are DORA metrics. We use it to tell this exact point for agile leaders in our agile leadership classes, but we talk about a number of different metrics, right? And if we're talking about a $1, one Euro, one pound budget and how much of that, how much of that pound, dollar, Euro ends up as actual value delivered in your product, right? And what do you measure to understand your return on investment on that story?\n\nSo these are just four metrics that I'm going to use. There are many more metrics that you could be looking at that can impact on this. But one of the biggest ones is innovation rate. What percentage of your people's time do they spend innovating rather than augmenting existing functionality or support and maintenance, right? So it's net new capability within your product. This is really important because it's the reason why Netflix creates a new show rather than doing the second series of that show that you liked. It's because when you do a second series, right, you augment existing functionality. When you do a second series, your audience for the second series is going to be smaller than the first series unless there's some kind of information that leads differently. The default is that the second series is going to have less audience, right? So it's going to make less money than the first series.\n\nSo if your second series is going to cost just as much as a first series, wouldn't it be better to invest that money in a first series to get a higher potential audience? It's a bet, right? A higher potential audience return than it is to do a second series of an existing. If the existing series has enough of an audience and enough of a demand for a second series, then it's probably worth it, right? You'll get your return on investment. But otherwise, it's not worth it, which is why you see the rise of limited series, right? I think we'll see the rise of limited features and products. But innovation rate is around 39% on average. That was the last DORA metrics that I kind of looked at. So 29% of the budget goes on net new functionality—that's new customers, new markets opening out, new capabilities for your product. That's not a lot; that's 29 cents on the dollar, 29 cents on the Euro, 29 pence on the pound. That's terrible, right? And that's just one metric.\n\nSo now we only have 29 cents of big ROI in our product or big potential ROI in our product. What about our product index? That's what percentage of our engineers' time do they spend, or our people's time do they spend working on the product versus doing other stuff, right? The average is about 80% of their time they spend on the product, 20% on other stuff. So we would be down to 23 cents on the dollar. What about usage index? What percentage of the features that you build in your product are actually used by your customer, right? The industry average is about 35%. 35% of the features that you build are used by your customer. That means the rest is waste, right? It's not really all waste because sometimes you need to build features that people don't like to find out what they do like. So that wouldn't be waste; that would be learning, right? So some of it's learning. It's difficult to quantify the learning, but certainly a huge piece of it is waste. Lots of companies build lots of features that your users have absolutely zero interest in, right? You'd be surprised. Go ask your engineering teams what their usage index is, what percentage of the features that they've built are used and used often by their customers.\n\nSo Microsoft has a measure that they use, which is monthly active users for each feature in your product. What are the monthly active users? If you can't answer that question, you have no idea whatsoever whether your features are being used or not. So why are you building them? How do you know you should be adding new features to this piece of functionality, right? That augmenting existing? If we don't even know what our user base is, why are we adding? Why are we spending money on it, right? It's a blind bet, right? That's a bad bet; it's completely unhedged. But a 35% usage rate now brings us down to 8 cents on the dollar. So we went from a dollar to 28 cents on the dollar, 23 cents on the dollar, now 8 cents on the dollar, and we're not even finished yet. Because if we're building an application that people install, if you look at things like Windows, right, what percentage of the user base is on the latest version of the product? Now the industry average is about 70%, right? So 30% of users are on an older version of the product. I have lots of customers where that's not even remotely true, that it's a much smaller percentage on the latest version of your product. So that brings us down to 6 cents in the dollar.\n\nIf your return on investment for every dollar you spend, you get 6 cents, that's 0.06% return on investment. Is that a good investment? I think it's not a good investment. I think we need to do a whole bunch of work in understanding why that's so low and dealing with the reasons why it's so low. So in our example here, the biggest hit at the start was innovation rate, right? Do you even know your innovation rate? Percentage of time on innovation, percentage of time spent on augmenting existing functionality, support, and maintenance, right? What are those three percentages for your business? You should absolutely understand that for every product that you have. The next biggest thing is usage index, right? What percentage of the features are actually used by your customers? Do you understand that? Are you collecting the telemetry that you need to understand that so that you can make decisions on where you're investing your capital and not letting costs spiral out of control?\n\nAgility is part of this story. Agility and DevOps talk about how you can close the feedback loops, get faster at iterating, and reduce costs. No, you're not really reducing costs because you've got the same people doing the same amount of work, but your cost-to-value ratio should go up, right? You should be delivering more value for the money you're putting in, not the other way around."
  },
  {
    "Title": "Transforming Chaos into Clarity: How Optimising Systems Fuels Engineering Excellence",
    "Description": "Explores how optimising systems, reducing technical debt, and strong leadership improve engineering quality, productivity, and innovation while minimising chaos.",
    "ResourceId": "zqMzD1PXq4s",
    "Url": "https://www.youtube.com/watch?v=zqMzD1PXq4s",
    "Date": "2024-12-16T06:00:00Z",
    "Captions": "Chaos costs money. Most organisations that I work with and have worked with really struggle with controlling the chaos within the context of delivering usable working product to their customers. They find that the work is substandard. We've got a lot of bugs hitting production. We've perhaps got a lot of rework happening because things aren't quite what we expect them to be or don't meet the minimum standard for our organisation, and we end up going down dead ends. \n\nI'm going to need to explain that, but a lot of the time—and I do this as well when I'm building products—you try and figure out a solution to the problem you've got. Right? You've got a problem; you know where you want to get to just now, and you come up with a solution that gets you to that thing that you want to get to. But over time, that where you want to get to does in fact shift. Right? It could shift because of different market opportunities that arise, or it could shift because we're scaling. \n\nWe came up with a solution that was on par at the time, but now it's subpar. It doesn't, you know, it's slow. We're running into problems. We're having a lot of support calls because of technology choices that we made that are no longer valid. You see this a lot in the extreme in the airlines and car rental companies. Right? They have a lot of, I would call it, technical debt. The choices that were made at the time that they've never gone back around and refactored. \n\nRight? So they still have mainframe systems, and they don't have people who understand the mainframe systems anymore. So they've got a double problem. Not only do they still have those mainframes, but nobody in the organisation knows how they work, how to reimplement them, how to manage them, or where to kick them when something goes wrong. And that happens all the time in technology. Right? The technology moves forward. \n\nI work with lots of organisations who have solved problems in ways that made perfect sense at the time because there was no solution on the shelf out there that you could go get. I've got one customer that built their own source control system because they started developing software 30 years ago, and 30 years ago, building software at scale, there weren't very many options for source control systems. The ones that were out there maybe didn't fit their needs, so they created their own one. But today, that doesn't make any sense whatsoever. Right? There are plenty of good source control systems out there. Git is the de facto standard, and they should have all of their code, all of their systems on Git. \n\nBut you need to invest time and money to move from what you had before to what you need now, and that's part of this story of technical leadership and engineering excellence. We need to be focused on ensuring that our systems and processes that our people are using are as effective as possible so that their job is as slick and easy as possible. Right? Satya does good work on this at Microsoft. Right? He would rather people spent the best engineers, the most skilled people, spent time on optimising the systems that we have because then we can come back around and build all the features we want because we have these really slick systems. \n\nAnd it seems like it's a cost, right? But actually, the slickness of these systems that control the chaos are a value centre because they are the thing that supports our ability to deliver new features. A great example is the Azure DevOps team. They, back in 2012, before they improved their systems, were delivering something like 24, 25 features to production each year with 650 people, with an application of technical excellence and effort. Right? This is not for free, and great technical leadership within the organisation. They took that from 25 features to production each year to over 600 features to production each year, and that difference was because they paid back a lot of the—I’m going to say technical debt. Some of it was technical debt; other stuff was technical cruft, just a buildup of, I don't know, sediment, a buildup of rust in your system because things get old. \n\nTechnology moves really fast, and we need to keep up with it. And because they made those changes, just one simple thing, they flipped from lots of long-running system tests to unit tests. It took them four years of effort to get there, but they took their engineering team's ability to see whether what they've done works from 48 hours down to 3 and a half minutes. Think what that would do to your productivity if you had to wait 48 hours to find out if the simplest change had been successful. You'd push bigger and bigger changes through the pipe. \n\nSo when you do have a problem, it's harder and harder to figure out what that problem is, whereas if you're able to find out if it works in 3 and a half minutes, you'll be running that all the time on the smallest changes you make, and you will build a better product that's more scalable and has less Band-Aids. Right? You're not out with the super glue and sticky tape trying to seal over the gaps for bad choices that you made because you didn't know that there was a problem. You didn't know it wasn't going to meet the standard. \n\nSo that cost of chaos is because of poor technical leadership and low engineering excellence. You might see engineering mediocrity within an organisation. You can solve these problems by having your best engineers, your best people, focus on delivering the systems, the optimisations to the systems that you need so everybody on every team has the easiest possible job adding value in your product."
  },
  {
    "Title": "Maximising ROI in Software Development: Unlocking Value Through Quality and Expertise",
    "Description": "Learn how quality, technical expertise, and regular reviews in software development can maximise ROI and ensure your organisation delivers lasting business value.",
    "ResourceId": "jKXc6hByR_k",
    "Url": "https://www.youtube.com/watch?v=jKXc6hByR_k",
    "Date": "2024-12-13T06:30:00Z",
    "Captions": "If you want to build teams and an organisation that can deliver the highest possible value for the investment that you're taking, maximise that return on investment for your business, then Naked Agility can help you in advising and coaching at any level in your organisation. Be it team members who are actually doing the work in the engineering practices that they're doing, all the way up through to you as a CTO or CEO trying to understand hypothesis-driven practices, trying to understand which features should we bring in, which features should we not, how do we budget across our engineering practices organisation so that we maximise a return on investment and maximise the care within which the people doing the work take of their time and the spend that they are making, which is hugely important.\n\nUnderstanding that context enables the highest quality of work. Right, we want, if we're building software products, regardless of whether that's our main business or whether it's a side hustle for our business, right, it's an enabler for our business. We want to build products of the highest possible quality. Every product that we build, every line of code that is written by the people in our teams is an organisational asset. Right, these are things that provide, it's like buying a building, it's infrastructure. Right, it's stuff that you've built, that you've invested in, that you get a return on investment on, that you get a continuous return on. Are they of the highest quality?\n\nIf you bought a building as a leadership in an organisation, you're going to do a lot of due diligence, and the due diligence for that is well known. When it's software, there's a lot of opacity. There's the stuff the magic wizards do that build the software, and we don't often understand all of the ramifications of that. So we need to have some technical expertise on hand, whether it be in-house or bringing somebody in that helps us understand some of those relationships and some of those things that connect to each other in order to maximise the value that our business is able to bring to market."
  },
  {
    "Title": "Empowering Teams with Financial Insights: The Key to Maximising ROI and Fostering Ownership",
    "Description": "Empowering teams with financial insights boosts ownership, informed decision-making, and ROI by aligning daily work with business goals through transparency and team-level P&L.",
    "ResourceId": "uetzybp7bf4",
    "Url": "https://www.youtube.com/watch?v=uetzybp7bf4",
    "Date": "2024-12-12T06:30:00Z",
    "Captions": "If you want to maximize your return on investment for the time and effort that people put into the products that you're creating, you need to try and enable and foster a culture where the people that are working within the context of your products care about the products and your customers. They care about what it is that they're creating because they feel that they have ownership of it. People care about things they have ownership of.\n\nThere are a whole bunch of ways you can do that. You're effectively fostering a culture of continuous improvement. Kind of a little bit of buzzword bingo there, right? But the idea is that when we talk about hypothesis-driven practices, we're having an idea, we're trying a little bit of that idea, we're getting feedback from the customer, and then we're adapting that idea to be better. So it's double down, right? We're going to invest more in this because it looks like it's awesome.\n\nWe've got pivot, which is we change what we're doing based on what we learn, or we've got kill it, which is stop investing in it and do something else. Like, don't keep doing this. You see Google are doing this a lot. There are two websites: Microsoft graveyard and Google graveyard. It's products that Microsoft and Google have killed over the years. Some of them are very high profile, some of them are lesser known. The more high-profile it is, probably it's been invested more money in it, and more people liked it, but not enough people. It didn't make enough of an impact to continue to invest in it for the cost that it is.\n\nSo if we want the people that are doing the work to care about our product, to care about our customers, and to spend money, which is their time, right? That's their time. Every time they do something, they're spending your money. Every person in your organization is spending your money. If we want them to spend that money diligently, I don't like that word, with care, then they need to understand the context within which they make that decision about whether they do this thing or they do not do this thing, or they do it this way or they do it that way.\n\nIn order to do that, and this is something that I see lots of organisations doing, I consider it a little bit of a dysfunctional behaviour. I see lots of organisations doing, especially professional services organisations, but also product organisations as well. They shield the people doing the work from the finances of doing the work because it's all shifted off to a finance department. What that does is remove the context of money from the people doing the work.\n\nImagine you trying to run your business and make decisions about what you're going to invest in and what you're not going to invest in, but you had no information about budget, you had no information about money, you had no information about spend, you had no information about revenue. How good are you going to be at making successful decisions to make a successful business if you don't have access to any of that information? It's going to suck, right? You're going to make bad decisions because you don't have all the information. That's every member of every team in your organisation. They're right now potentially making bad decisions about what features they build, about how they build those features because they don't understand the ROI effectively of what it is that they're doing.\n\nThey might think it's going to provide value, but do they actually know? And do they know what it costs to make? I'd advocate for every team doing their own P&L. What value are you as a team bringing to the business? What do you cost? I want value to be higher than the cost. If you're a team and you're thinking about those things, you're going to make different decisions because you have additional context. You turn every member of every team into an entrepreneur trying to figure out how do we maximize what we're doing in this work within the context of this product? How do we maximize the value that we return? What should we be working on? Well, we should be working on this stuff over here because that's going to give us the biggest return, right? Biggest short-term return, biggest long-term return.\n\nWhen you're thinking, you as a business owner, you as a CTO or CEO, are thinking about how you invest in your company. You're thinking about short-term wins to generate revenue quickly. You're thinking about the long-term objective of the business and how you're going to make money in the long term and sustainable income. That's all part of the story. It needs to be for every member of every team. You can't, if you hide that information from them, if you obfuscate it and create a filter so they don't see any of that stuff, they're going to make bad decisions.\n\nSo don't shield them from that. Build that into the story of how a team operates. Do P&L with every team. Have that filter up through the organisation, and I guarantee you'll see higher return on investments and higher value being delivered."
  },
  {
    "Title": "Maximising Product Value: The Power of Hypothesis-Driven Engineering",
    "Description": "Explores how hypothesis-driven engineering helps teams maximise product value by testing ideas, measuring outcomes, and learning from failure to guide investment decisions.",
    "ResourceId": "Ig-HpUfQr3M",
    "Url": "https://www.youtube.com/watch?v=Ig-HpUfQr3M",
    "Date": "2024-12-11T06:30:00Z",
    "Captions": "If you want to ensure that your products... I actually don't like the phrase \"stay within budget.\" I know everybody uses it, but I don't think that way anymore. When I'm investing in things, I think about it as I have a pool of money, and I'm going to move that pool of money around where it's going to provide the most value. Right? So I need to be looking at... I need data, right? I need to understand what's going on.\n\nFor example, I talk a lot about hypothesis-driven engineering practices. If we're building brand new products or even adding capabilities to existing products, I want to have a hypothesis-driven story. That means that we're going to have a... you know, it starts with an idea. What do we think we would like to add to our product? This could be applied to a thing on your backlog, this could be applied to the whole product, or it could be applied to a portfolio of products. Right? But what do you think you're trying to do?\n\nThen you would do some kind of analysis of that and figure out, well, what's the outcome I'm trying to achieve? Right? This is what I want at the outcome. This is the thing that I'm going to do that I think will help us move towards this outcome. What's the smallest experiment that I can run? And then I would look at how am I going to measure whether I've made progress towards that goal? And I'm going to regularly assess based on my progress towards that on whether I continue to invest in this thing or I don't. This can be at the small scale or it can be at the grandiose scale—any scale you like.\n\nSo a good example is the Azure DevOps team at Microsoft. They were interested at one point in trying to answer a particular question. Right? So the head of the product, Microsoft called it the product unit manager, I think that's their technical term, has overall budgetary control. Right? So they have all the money. They know that that means people. Right? So they have exactly 600 people—it's not but exactly 600 people—and I need to allocate those people to the ideas that make sense in order to maximize my return on investment and keep my stakeholders happy, keep my customers happy, keep building products, and have an eye to the future on ideation and what is it that's coming next.\n\nSo they're allocating people's time as the biggest expense. Right? So they had this idea brought to them that we'd like to help... this is the idea: we'd like to help customers discover and deal with their technical debt. Right? All they're building software that helps build software. So we're all building software, and we have technical debt. So it would be great if we could understand what technical debt we have and then have things we can do to help us—things that help us minimize that technical debt. So that's a grandiose idea; it's a big idea that goes across the entire product suite.\n\nYou know, I'm going to allocate a bunch of time. So the idea is that I, as the product owner—the Uber product owner—there's lots of people in charge of different parts of the product, but the Uber product owner, product unit manager, decides we're going to try this thing. I'd like to see some experiments within the context of this story, and you folks figure out what it is you're going to do.\n\nSo his lieutenants, who run the different parts of the product, come up with ideas on how to collaborate together. What are we going to do? What are the ideas we think we can have? They come up with some ideas, and they bring that, saying, \"This is what we're thinking. This is what we want to try.\" Okay, cool, let's try this one. This looks pretty good, and they try it. This could involve 100 people spending some amount of time within a quarter, within a year, within a fixed time scale to try and create some features within this context. Right?\n\nSo when we're spending time on this experiment, that's money not being spent on other things that we know are valuable. We're speculating on something that we think might be valuable in the future, right? That we might be able to do something with. So they spent a bunch of time on it. I think they spent about six months—four to six months on it, if I'm remembering rightly—and they come back and they're like, \"We don't understand how to solve this problem.\" The things that they'd created, they'd managed to create some things, they'd got them in front of real customers—like myself, I'm their customer—got them in front of real customers, and they just didn't resonate. They just didn't provide value.\n\nThey tried a whole bunch of different ideas. There were five or six different teams, different groups involved in it. They all had different ideas; they all collaborated together to create some of these ideas, and nothing resonated with the customers. So at some point, the product unit manager is like, \"Right, let's not invest any more money in this because we're not... we've not got an idea that's good enough to move the needle or solve this problem.\"\n\nYou could say that that amount of money—maybe they invested 10 million in this capability—was wasted money. You could say it was wasted money, but you could also say that there was a lot of learning involved. They learned not to go tackle that problem. They learned to save their money and spend it on something else. So in the traditional world, they would have spent years on that capability to find out that it was a bad idea. Right? Think of Windows 8. No, not Windows XP—Windows 8, sorry, my brain died there. The Windows 8 debacle, where Microsoft spent six years. They had 4,500 software engineers working on Windows. They had 15,000 other people involved in that story. So you're talking nearly 20,000 people working for six years. Imagine the cost in your budget for 20,000 people working for six years on a product, and the end outcome did not meet the expectations of the customer, did not meet the brand value, right? In fact, it detracted from the brand value, detracted from the customer experience, and you had a lot of unhappy customers that went to other products like Apple. Right? That was a big jump ship moment that people moved to other platforms.\n\nThis fundamentally was the catalyst for Microsoft looking at themselves and kind of going, \"Yeah, we're doing this wrong.\" This long cycle, long budgetary five-year plan, right? And not getting things very quickly in front of customers, very quickly testing and validating whether we're doing the right thing. That's what we need to be doing, and we need to be doing it on every product, everywhere in the business, at every scale possible—from the lowest teams working on products, hypothesis-driven engineering practices, to the board making decisions about which products and capabilities to fund and which products and capabilities to not. Hypothesis-driven engineering practices—you need to be doing it at every level of your business."
  },
  {
    "Title": "Navigating the Unknown: How to Fund Your Product Like a Venture Capitalist",
    "Description": "Learn how to fund product development by thinking like a venture capitalist—run small experiments, validate ideas, manage risk, and balance data with creative vision.",
    "ResourceId": "vbY6LUq81uY",
    "Url": "https://www.youtube.com/watch?v=vbY6LUq81uY",
    "Date": "2024-12-10T06:30:00Z",
    "Captions": "Building products is always doing something that's never been done before. Anytime you've got a team writing code, they're doing something that's never been done before. If they weren't doing something that's never been done before, you wouldn't be writing code; you would be buying the product, right? You would be buying the framework; you'd be buying the thing. So, anytime we're building products, we're doing unknown things, right? That's why we have such a high degree of variance in software engineering.\n\nIn the business space, there is something that kind of equates to that, or an analogy within the business context, and that's entrepreneurship. If you've got an idea for a company that delivers some kind of value, regardless of how that value is achieved, then you need to go and find somebody to invest in that idea. That works almost the same within the context of an organisation as it does in the context of me. If I wanted to go start a new business, I would probably need to go speak to the bank. I might need to go find some venture capitalists. I need to convince them. I need to find people in my company; I need to convince them that it's a good idea that needs to be promoted up to a level of somebody with some spending power. That person with some spending power offers me the ability to go try this out, but I have to convince them.\n\nNew ideas, things that have never been done before, are not guaranteed. They're not guaranteed to work; they're not guaranteed to have the return on investment that you expect them to. If you're in business, you already understand this concept, right? I believe my numbers might be slightly off, but I believe that 70% of new businesses fail within the first year, and 30% of the leftovers fail within five years. I think I might be underestimating the second part, the five-year part; it might be more than that. So, there is a risk profile to everything you do when you're investing money in a possible outcome within your business or external to your business. \n\nYou need to figure out what your risk profile is for investment in things that have never been done before, and you need to gauge the return that you're expecting to get on the investment that you're putting in. This is exactly how products should be funded as well. If we're going to fund a product in that way, and I'm going to be the one funding that product, I want to see value and market fit as quickly as possible, right? \n\nSo, what we tend to do is run lots of very small experiments. I might come to you and say, \"I need some money.\" Sorry, I'm switching personality here. I'm going to come to you and say, \"I need some money. I want to try out this idea. Hi, I've got this idea for a database of movie stars,\" right? And you're like, \"How are you going to make me some money?\" Because you want to return on your investment. So, I'm thinking, \"Well, I really, I'm the geek, right? I want to have a database of all the movies with all of the actors.\" \n\nThen you can ask, \"Can we have the budget for the movie in there? Can we have how much each of the actors made?\" Suddenly, you've got an idea of who you could sell this product to, right? What its possibilities are going forward into the future with a little bit of ideation from that geek idea of having a movie database, and IMDb is born, right? Which is massive now. If you don't know, IMDb has two halves. It has the public free half, which is where we just go look up movies, but then it sells inside of the industry and can give directors, for example, who are looking for a leading man or a leading lady, data on who can make my movie the most money. \n\n\"Oh, it's The Rock. Well, I can't afford The Rock. Who's within my price range for the budget for my movie that I can get that's going to maximise the amount of money?\" They pay IMDb a lot of money for that story. That's not something that was within anybody's budget; it was a venture capitalist effort, right? \n\nSo, you want to be thinking within the context of your business. You want to be thinking more like entrepreneurs, thinking more like venture capitalists. What's your return on investment? If you put money into this product or project, what do you get? How much do you get? What's the longevity of what you get? What's the story for this? I want to see a business plan. I want to see a lean canvas on what this looks like. Have people thought about the different aspects of it before I'm going to let them spend some money? \n\nEven once they're spending money, I want to see a little thing. I want to see a proof of concept, right? Let's get something out there, see what it looks like, get it in front of some other people. Does it resonate with people? Does it seem like it's going to provide value? Okay, what's the next stage? What's the next bigger thing we can do? What's the next experiment that we can run? \n\nI talk about it as hypothesis-driven engineering practices. Lots of folks out there use the phrase MVP. They're mostly, I see MVP, minimum viable product, being kind of misused. Minimum viable product is a proof of concept that you throw away at the end before you build the real product. I know lots of people use it as a small experiment, so whatever context you use it within. But we want to be running lots and lots and lots of small experiments. We know lots of experiments are going to fail, but we're going to find the ones that work, and then we're going to invest more in those, invest less in the ones that don't work. \n\nThat's how you stay within budget: lots of little experiments that have a hypothesis. What are you going to do? What do you expect the world to be like afterwards? How are you going to measure whether you've been successful? We want to see the numbers, and we're going to cull anything that is not living up to its expectation unless we can be convinced otherwise, right? There's heart as well as data in building your products and staying within budget."
  },
  {
    "Title": "Rethinking Budgeting: How to Break Free from Traditional Constraints and Maximise Value",
    "Description": "Explores the limitations of traditional budgeting and explains how flexible, value-driven approaches like Beyond Budgeting can improve agility, innovation, and resource use.",
    "ResourceId": "kXhJrisYofU",
    "Url": "https://www.youtube.com/watch?v=kXhJrisYofU",
    "Date": "2024-12-09T06:30:00Z",
    "Captions": "In traditional budgeting, we take all, we spend a bunch of time once per year and have been a little bit factious but have a whole bunch of people in our organisation fight over how much money is going to be allocated to their pot, right? And then that's their pot for the year. They know that if they don't spend it, they lose it, right? If you allocate a million dollars to a particular project and they only use 500,000, next year you're going to be thinking of giving them 500,000, and it's going to be very hard for them to fight for a million, even if that's just the normal ebb and flow of what it is we're working on. \n\nIf something doesn't fit within, like we spend such a long time building the budget and balancing it, right? Like a, like a, like one I've seen, the budget that countries have, it's this massive, massive, massive book. We end up with not obviously as big as that because we don't have as many things, but a big book of here's what the budget is for the year. The problem is that five minutes after we've ratified the budget, that we put our stamp on it and said, \"Yep, that's our budget for the year,\" the market changes, the state of the product changes, ideas change. \n\nSo if somebody comes up with an idea that's not in the budget for this year, right? But the market opportunity is in a couple of weeks, we have enough time to build it, but we don't have any budget, right? That's maybe small enough that we can, there's discretionary funding, but let's say it was six months' worth of work, so it's a massive effort, massive endeavour, but huge, huge, huge payoffs. Then we'd probably do something, right? But where's that balance in your organisation? That level, that scale of the payoff versus the cost. We have the money; we have to go find where's that biting point and how much do we lose? How much value in the market do we lose because lots of things just don't quite hit that biting point because we're doing yearly budgets? \n\nSo there's a bunch of things around Beyond Budgeting, which is how do we re-do budgets in order to be more effective? But effectively, the result that you want for your organisation is that you can fund the things that make sense at the time they make sense, right? So in the agile world, we're getting working product in front of our customers as frequently as we can, right? So depending on what it is you're building, that timescale might change. The manifesto says from a few weeks to a few months, right? Scrum talks about 30 days. 30 days is the maximum amount of time between getting things in front of your customers. \n\nIf you look at the Detecting Agile BS paper from the US Department of Defense, they talk about every iteration, including the first, getting your product in front of real customers. So not just to UAT, not just merely test users, but to real production users. So you're going to production every iteration. If you're doing that, if you're getting to production every iteration, then that's your pivot point, right? It's not a yearly pivot point figuring out what we're going to do, but it's a much smaller pivot point. \n\nSo instead of allocating all the money at a single yearly point, we want to be ebbing and flowing. As you know, this project reaches a dead end, there's not much more value to be had, so we're not going to continue it. We're not going to do more sprints; we're not going to do more iterations at the moment. We're going to move it into maintenance mode, which changes its cost profile. And for other things, there's a new initiative. Some folks have come up with a great idea. Let's fund that. \n\nSo you're effectively looking at more of a venture capitalist or an entrepreneur-style budgeting model in that you're not allocating all the funding to projects upfront. You're allocating, you have a pool of finance available, like how much can we spend? You should know that on a regular basis. What's our capability? And then we want to spend as little as possible to get the maximum value, and that ebb and flow needs to happen. \n\nThe difficulty in the traditional model is I had a customer recently who were doing big things. It's manufacturing, and they're making big things, big expensive things. And they had a machine that was faulty. Well, okay, it wasn't faulty; it was just getting old. It was starting to make mistakes. It was creating less effective parts than the product needed, and they kept using it. The person who ran the machine wrote the business case for getting a new machine and started passing it up the chain. They did all the due diligence they needed to do, and it kept going up in the organisation because I think it was a 10 or 2 million spend. Therefore, it had to go fairly high in the organisation to get approval. \n\nIt got to somebody who looked at it and said, \"That's not on my budget for this year.\" No. And that, that's not in its budget for this year, no. It cost the company billions of dollars in recall calls to recall the product and resolve the issues that resulted from this machine that could have been replaced for 10 million dollars, and it cost billions. So that's why we need to do something different. \n\nThe bit that you don't see, like that's an obvious one, right? That's a catalyst for change because, oh my goodness me, we just had this huge cost. Why did we have it? Because of this 10 million dollars we didn't spend. Well, let's spend the 10 million. But the bit you don't see is your unrealised value. If you think of in evidence-based management at the top of the curve in your market value of your product, you've got unrealised value on one side and value on the other. \n\nSo you've got value that's in your product, your current increment, and then you've got unrealised value, which should be reflected in your backlog. But there's more unrealised value than is actually in your backlog, right? We want to be continually adapting that unrealised value as the market shifts, as opportunities arise, as things change in the world. And it's very difficult to do that within the bounds of a traditional yearly budget cycle. \n\nSo we need to adapt our yearly budget cycle into the context of we're not doing yearly projects anymore. We're building products, and a product has a budget, and they can allocate it however they like. Budgets for products tend to look like n number of people, right? The most, usually the most expensive thing, especially when we're building software, is the people. So this particular product has the budget to support 100 people a year on it. That's their budget cycle. And then within that budget cycle, they're deciding how they allocate it, what features they allocate to. \n\nWithin that context, that can be a kind of halfway where your organisation might still be doing yearly budgets, but you're able to adapt it to the product cycle. But there's more you can do. Take a look at Beyond Budgeting."
  },
  {
    "Title": "Unlocking the True Power of Continuous Delivery: How Automation Transforms Software Development",
    "Description": "Explains how automation in continuous delivery improves software reliability, reduces risk, and enables faster, safer deployments through consistent, rapid feedback loops.",
    "ResourceId": "LWRAX3OyO28",
    "Url": "https://www.youtube.com/watch?v=LWRAX3OyO28",
    "Date": "2024-12-06T06:00:00Z",
    "Captions": "If you're trying to unlock the power of continuous delivery, then you've probably considered the type of benefits that you get from it, and perhaps they're not the benefits you think. While it is true that continuous delivery can help you become faster, that's a lagging side effect of the work that you would do. The real benefit of continuous delivery is the requirement for automation within the context of DevOps, and the real value of automation within the context of DevOps is you've not got a person doing the deployment; you've got an automated tool during the deployment. So you gain consistency and reliability of what is happening, and that consistency and reliability reduces your risk.\n\nIf you're interested in how much risk that is, there's one example that I always used to use, which was the Night Capital Group, a financially traded stock exchange organisation in the US. They did a deployment of their software; it failed due to various reasons, mostly to do with manual deployments. They ended up losing about $10,000 an hour or a minute or whatever it was, but at the end of the day, they had to file for bankruptcy, and at the beginning of the day, they had $450 million in the bank. \n\nSo that's the example I usually use. Probably today, I would say CrowdStrike. If you've got automation that checks that your system, that what it is you've created, your teams have created, is good and meets the minimum bar for the business, what's your risk level? That's the power of continuous delivery: consistency and limiting risk. You can ensure that within your continuous delivery process, you have the checks that you as a business require to protect your business. \n\nSo there's protecting your business, protecting your brand, protecting your employees, and protecting your customers. All of those things can mostly be automated. Almost all of those things that could possibly go wrong can be automated. You can't automate legal stuff, so you would still have to handle some things there. But from the context of not wanting my software to fail, not wanting it to send money to the wrong place, we use testing, we use automation, we use continuous delivery, continuous everything: continuous testing, continuous deployment, continuous delivery. \n\nThose are the things that help you get faster feedback because if it's an automated process, you can go around that loop, and the developers can find out that it's broken or it's not doing the right thing much faster. A great example of that is the Azure DevOps team at Microsoft, which went from delivering 12 features to production per year for 600 people to delivering 280 features to production per year for 600 people. \n\nSo the number of people didn't change, but they massively increased the number of features delivered. Part of doing that was changing the feedback loop, making the feedback loop faster. They went from an automated build that would take days to get a response from to one that took minutes and seconds to get a response from. They used to have to run their full suite of tests in, I think it was four or five days, to actually get a response for a particular thing, and now it's three and a half minutes for the entire test suite. \n\nThat level of feedback makes feedback faster, costs less, reduces risk, and increases effectiveness. That shortened the feedback loop. If you're also deploying and getting your feature in front of customers, that continuous delivery piece means you're getting your product in front of real customers. You're moving to production on a continuous basis. \n\nEven the Windows team, which is probably the biggest, most complicated product on the planet, is 24 hours or less doing continuous delivery from developer cutting code to being in the hands of real production users, albeit inside of Microsoft. It's 24 hours; it's a week. They've got it in front of real external users; it's a month. They've got it in front of 20 million external users, and then it's three months. They've got it in front of, I don't know, 850 million external users. \n\nIf CrowdStrike was doing what the Windows team does, they would not have caused the errors that they did. Continuous delivery, the practices within the context of DevOps that enable continuous delivery, are the things that reduce risk, increase effectiveness, and give you faster feedback."
  },
  {
    "Title": "Rethinking Software Estimation: Embrace Probabilistic Forecasting for Agile Success",
    "Description": "Explores how probabilistic forecasting improves software project planning by replacing traditional estimation with data-driven confidence levels for agile delivery.",
    "ResourceId": "mZvRMHFUarM",
    "Url": "https://www.youtube.com/watch?v=mZvRMHFUarM",
    "Date": "2024-12-05T06:30:00Z",
    "Captions": "One of the big struggles within the context of software projects is estimation. Most organizations try and do some form of estimation. Either they're using absolute estimation, so we're talking errors here, or they're using some kind of relative estimation tool. It's really difficult because we feel like we need estimates to understand what we're going to do. We actually don't. \n\nBut what we do need is the ability to forecast out into the future with some kind of probability. Right? So when we're talking about software delivery, where we have really high variance, it's still really difficult. There is no tool when you have more than 50% unknown that you can use to accurately predict the future. Right? Accuracy is not a thing you can have. \n\nSo what's the best we can get? Right? We want to be looking at probabilities and probabilistic forecasting. So what we tend to do is use some kind of forecasting simulation tool to look forward into the future based on what actually happened. So we're never actually effectively estimating an individual item within our backlog. We're just saying that we can deliver, let's say, in the next 30 days, we'll deliver another 50 items with an 85% likelihood that that's going to happen. \n\nThat leaves wiggle room for things not happening the way you think, and it doesn't require the people on your teams to spend a significant amount of time estimating. It doesn't require any actual numbers to come out of the team. It still requires the people doing the work to analyse the work and break it down into smaller chunks. Right? That's reducing the batch size of each individual item. That is still required. That is something you want to spend time on because it builds understanding within the context of what it is that we're delivering. \n\nRight? We want to understand the thing we're delivering, and that understanding is the main impactor of our ability to execute on those things. So in this new world, there isn't really estimation, but we still have confidence, and we put an actual probability on our confidence. I usually encourage teams and departments and organizations to look at about an 85% confidence level, being that what 70% of all startups fail. So it probably relates a little bit to 70% of all ideas are going to be unsuccessful. \n\nRight? So what's your confidence level of being able to deliver? As long as it's higher than 70%, it's probably a good bet, and we can figure it out from there."
  },
  {
    "Title": "Transforming Scope Creep into Success: Embrace Agility and Deliver Value in a Changing Market",
    "Description": "Learn how to turn scope creep into an advantage by adopting Agile methods, focusing on value delivery, and adapting to changing requirements in dynamic markets.",
    "ResourceId": "qNJ2suVslzE",
    "Url": "https://www.youtube.com/watch?v=qNJ2suVslzE",
    "Date": "2024-12-04T06:00:00Z",
    "Captions": "If you're struggling with scope creep, it's probably because you're using practices and philosophies that were developed within the context of low variance. Very little changes all the time, so you can create a plan, you can create your Gantt chart, you can run the plan, and that's how you're managing risk. But when your variance—the difference between what you think's going to happen and what actually happens—is bigger than what you thought in the first place, more than 50% variance, those tools no longer work, and we start having problems with scope creep. We start to not be in control of what's going on, and that shift towards product delivery, a product operating model, is that move away from those old ideas of scope and deadlines. \n\nThere are other tools that we use to have the same outcome because the outcome you're looking for is a usable, working product in the hands of your customers so that you're delivering value, maximising the value of that item. But those old tools are no longer working for us. If you're having a conversation about scope creep, then we're probably having the wrong conversation because it needs to be okay for the scope to change. The market doesn't stay still. If you're delivering a product into your organisation or into a market, whether it's B2B or B2C or internal, then the ecosystem within which you're delivering that product is changing over time. \n\nIt's not only changing over time continuously, but that means that what you need is changing continuously, which means that what you have to do is changing continuously. It might even change in response to something you show the stakeholders. You show the customers, you show the users a capability, and they're like, \"Oh yeah, that's awesome! Don't spend any more time on that. This is the next most important thing.\" Suddenly, we're shifting direction, and maybe there's a hundred things in your list of things to do that you know you don't need. \n\nSo that scope creep is the good way where we have less scope to deal with, but also you might show them something, and they're like, \"Oh, that's not what I want. I need something completely different.\" Suddenly, you've got a whole bunch of additional work. That ebb and flow of what needs to be is the reason that Agile was created. The lean movement came out of that story of ebb and flow of delivering products. The Lean Toyota system and Agile was the adaptation of that story into the context of software delivery, which is slightly different. \n\nIt's much easier to change software; it's much easier to iterate on software. You can ship a new version. It's difficult to ship a new car to the same customer because you want to change something than it is to do it for software. So this idea, if we want to be on time and on budget, then we need to consider scope to be not the thing we're looking for. We're looking for value. The thing we're focusing on is delivering value to our customers, and if we're delivering value, we're doing the right thing. \n\nWe manage budget and time differently within the context of Agile. If we have a clear product vision, a clear direction on where we're going, and a well-defined product backlog that we know is going to change constantly, then we can much more effectively plan what we're doing and change direction as needed without worrying about scope."
  },
  {
    "Title": "Building a High-Performance Delivery Engine: Unlocking Success Through Competence and Collaboration",
    "Description": "Explores how competence, collaboration, and agile philosophies drive high-performance software delivery, focusing on business value, continuous improvement, and team empowerment.",
    "ResourceId": "quFj6dy5M7E",
    "Url": "https://www.youtube.com/watch?v=quFj6dy5M7E",
    "Date": "2024-12-03T06:30:00Z",
    "Captions": "Building a high performance delivery engine in your organization is super hard. We need to have expertise within our teams, within various contexts, and I think we mostly underestimate the level of competence that's required for the people participating in the software delivery process to build those high performing teams. A high performing delivery engine to get stuff out the door. We need not only competence in the technical tasks—that's usually what most organizations focus on—but we also need competence within the context of business, right? Business and business need, and how business works, and what business wants.\n\nEvery member of the team should be a product developer. Well, every member—you're going to have some extremely unusual technical people who probably just want to focus on the technical side, but you want to have at least a high enough number of product developers rather than just software developers on your team. What I mean by that is that they're focused on product and delivering a successful product, which includes many different things, right? You don't just magically deliver a successful product. You need to focus on the right technologies. Do we have the right technical skills to be able to deliver this product? Do we understand the business need? Do we have the right hypothesis to be able to test our product within the market? Have we got the right market fit? Do we need to change the way we do things? This is every member of the team, as much as possible, thinking about these things as they're building the product, as they're developing features.\n\nAnd then you also need a keen understanding of the philosophies and theories behind these things. We're talking about Agile, we're talking about DevOps, we're talking about Lean, talking about Scrum, right? And mixing a few things in there. But we need to understand the core philosophies, theories, and practices that underpin these things so that we can apply them in a way that adds value to our organization, right? Because we're trying to deliver. We're trying to create a high performing delivery engine. We're trying to deliver lots of stuff and lots of the right stuff, or as much of the right stuff as we can. And for that, we need to be able to leverage the right emergent practices, right? The evolution of our practices over the life of the product lifecycle and how we pick the best stuff.\n\nAnd to do that, the people doing the work, the people managing the work, the people overseeing the work, all need to be practitioners, right? They need to be playing at the practitioner level to understand how those things influence it. I usually—the analogy I usually use is if you're renovating your house and you want to remove a wall, right? So we want to change the way we fundamentally do something and see whether it makes sense. Can we just knock down that wall? Well, no, we should probably do a little bit of due diligence. We should probably understand the structural integrity of the context. We should probably understand whether it's a good idea to remove the wall or is it a bad idea? And if it's a bad idea, is there something we can do to mitigate it so we can do it? Because we want to do it right.\n\nAnd you can absolutely remove any wall in your house, any wall in your house, with due diligence to the structural integrity of the building. The same is true when you're changing your business, when you're changing your team structure, when you're changing your system of doing work. You need to have the competence in your high performing delivery engine to build it in a way that enables you to maximize the value delivery to your stakeholders."
  },
  {
    "Title": "Navigating the Unpredictability of Software Development: Embrace Agile for Success",
    "Description": "Explores how Agile principles, technical leadership, and engineering excellence help teams manage unpredictability, adapt to change, and deliver quality software projects.",
    "ResourceId": "h3J11t10A0g",
    "Url": "https://www.youtube.com/watch?v=h3J11t10A0g",
    "Date": "2024-12-02T06:00:00Z",
    "Captions": "Most organisations that I encounter really suffer from missed deadlines and budget overruns for their software projects. It's probably the most common issue that I see happening in organisations, and it can be really unpredictable. You can think that you've got this one in the bag, but the bag just melts, and it starts dropping out the bottom all over the street. \n\nThis is something that is a fundamental reality of the world of complexity, right? What we know is less than what we don't know; therefore, we have a high degree of unpredictability. The things we use to mitigate that are effectively technical leadership and engineering excellence. We need our engineers to be building products that are of a high enough quality that we can pivot as needed at any moment. \n\nWe need our leadership within our organisation, who have a controlling interest in the product delivery, to have enough of an understanding of the technical realities—not just of doing the work, but of ideation and futurism. What are the possibilities for this product to enable better decisions to be made within the context of the product? \n\nThis is super hard because we like to think that there's one right way to do something. There's a best practice, and that's a fallacy. We like to think that all of the awesome engineers we've hired just know how to solve the problem, and that can quite often be a fallacy as well. \n\nSo, we need tools and capabilities around that to help us be more effective. The principles and philosophies behind Agile and Scrum—those ideas of iterative development, continuous delivery, continuous feedback, continuous testing—pretty much anything with \"continuous\" in front of it in the modern software engineering space are those things that will enable us to be more effective, to make better decisions, to encourage technical leadership, and to encourage engineering excellence."
  },
  {
    "Title": "Transforming Engineering Excellence: The Power of Naked Agility in Quality and Leadership",
    "Description": "Explores how adopting naked agility boosts engineering excellence, quality, and leadership by addressing technical debt, shifting left, and fostering a culture of improvement.",
    "ResourceId": "tdOSrPOlyAI",
    "Url": "https://www.youtube.com/watch?v=tdOSrPOlyAI",
    "Date": "2024-11-30T06:00:00Z",
    "Captions": "Naked agility can be your partner in creating engineering excellence and technical leadership within your organisation. In the last few videos, we've talked about a number of different ways or things that we focus on that are part of that story. We talked about that high cost of bad quality, of mediocre product—right? Not even mediocre, poor quality product. There's lots of poor quality products out there that have a massive cost, particularly in your brand recognition. Right? People don't want to use products that they have an image in their head to be of poor quality.\n\nWe talked a lot about shifting left and the different components that we would shift left. Not just testing and test automation, but continuous integration, continuous delivery. We talked about user experience shifting left. We talked about security shifting left, architecture shifting left. All of these things need to move as close to the engineering team that's making the decisions, the people that are making the decisions and doing the work. All of those things, those skills, those capabilities, those need to be built up in those teams in order for you to move towards this idea of engineering excellence.\n\nRight? We need to not manage technical debt but pay it back. Deal with it. Deal with the technical debt when it happens. Own up to it when we make a mistake. Be transparent and open about what the problem was and what we're going to do about it. Build that culture of quality. Build that culture of engineering excellence within our organisation. Your purpose is creating value for your customers. Our purpose is value creation for you through building the technical leadership and engineering excellence that enables your value creation. And that's what naked agility can help you with."
  },
  {
    "Title": "Cultivating a Culture of Quality: Lessons from Boeing and Volkswagen for Engineering Excellence",
    "Description": "Explores how fostering a culture of quality and engineering excellence prevents failures, using Boeing and Volkswagen as examples, and highlights the impact on software development.",
    "ResourceId": "HmAIUiR8QSo",
    "Url": "https://www.youtube.com/watch?v=HmAIUiR8QSo",
    "Date": "2024-11-29T07:00:17Z",
    "Captions": "Building a culture of quality within your organization is absolutely not something that you can do on your own. It's not something that any individual can do. Each individual within the context of your organization needs to be able to demonstrate their own technical excellence, their technical leadership, their engineering capability. If they demonstrate their own, other people around them will see a way of behaving that hopefully they want to copy. The more people in your organization behave that way, the quicker other people in your organization will see that as the way to behave.\n\nI was trying to think of an example there of it being true, and I really keep coming back to the opposite being true. And that's the Boeing story. If you've been following the Boeing story really for many years, the Boeing story's been going on. When Boeing bought McDonnell Douglas, Boeing's focus was on engineering excellence, technical leadership, and they built that mantra of \"if it's not Boeing, I'm not going.\" Their planes were the best; they were the best build qualities; they were the least likely to fall out of the sky. They were the standard for quality in the entire aviation industry.\n\nThen they had that culture of engineering excellence and technical leadership, and then they moved. They bought McDonnell Douglas, and through some weird happenings, which I don't fully understand, McDonnell Douglas came out on top of being in charge. McDonnell Douglas's leadership and their focus was on revenue extraction. That was their focus. \"We're not here to build value; we're here to extract money for our shareholders and for ourselves.\" That's what we're here for.\n\nOver the next 20 years, I think it's been 20 years; I might be a little bit out there, 15 to 20 years, they've decimated that culture, that culture of quality inside of Boeing completely and utterly destroyed it. So much so that you might have seen videos of Boeing employees saying, \"Yes, I'd fly in this plane, but yeah, I've got a death wish.\" Right? That's not what you want if you're going to be flying in a plane. The culture you want within the context of the engineers that are building it, so why would you want it within the context of the software that you're purchasing, the software that you're using? \n\nHow much of the software that we use is actually life-critical or actually has a substantive impact on our quality of life, on the world around us? We want those products to be built within the context of a culture of quality, of delivering the right thing, of doing the right thing, and providing us with value—not \"let's cut all the corners we possibly can to deliver more revenue to our shareholders.\"\n\nIf you want to build amazing products rather than mediocre or even dangerous products, we need to focus on the things that really matter. Agile people talk about agile frameworks all the time and how agile frameworks were the solution, and agile frameworks are now the problem. None of those things are true. Agile frameworks are just tools that we use. It's the culture within our organization that leverages those tools in a positive or negative way. A hammer is just a tool, but you can use it to hit a nail, or you can use it to smack somebody around the head. Which one is going to add value, and which one's going to land you in jail?\n\nBuilding those cultures of quality can you—what world of culture of quality did a Volkswagen engineer write code that determined whether a car was in a test condition and faked the results? Right? They changed the way the engine operated in order to get the results they wanted, and the engine operated differently on the road. What world of quality does anybody in your organization make that sort of decision? No world of quality. If you have a culture of quality, you're not going to have people make that decision.\n\nThat's what we need to focus on. We need to focus on building a culture of engineering excellence, the technical leadership to set that direction and go in that direction. We need to build within our organization the knowledge and understanding of the theories behind the reasons things work the way they work and how we can then apply our empirical learnings within our context. Every organization is different, with the knowledge of those theories to then extrapolate what's the next best decision that we can make.\n\nThis is something that Naked Agility can help you and your organization do. We cannot do it for you, but we can be there to help you understand the theories and practices, how they apply within your context, and what are good engineering decisions and what are bad engineering decisions. So build engineering excellence and technical leadership within your organization."
  },
  {
    "Title": "Mastering Technical Debt: Strategies to Transform Challenges into Opportunities for Your Development Team",
    "Description": "Explains technical debt in software development, its impact on teams, and practical strategies to identify, manage, and reduce it for long-term productivity and code quality.",
    "ResourceId": "PZa77csy5r8",
    "Url": "https://www.youtube.com/watch?v=PZa77csy5r8",
    "Date": "2024-11-28T06:00:11Z",
    "Captions": "Technical debt is a huge problem for organisations. I want to quickly define technical debt. Technical debt is future cost that you incur when you or your team prioritise quick short-term solutions over more robust long-term approaches. Right, so anytime you make a choice to do something fast but wrong because you need it fast, you're knowingly introducing technical debt. You can also unknowingly introduce technical debt, i.e., we made some architectural choices. They were good choices at the time, but now they're no longer good choices. Technical debt can appear over time.\n\nI'm thinking of a transactions system, and we supported X number of transactions per second, and our platform of choice was reasonably priced and was able to support well beyond what we thought we were going to transact. But now we're transacting a lot more than that, and we're reaching the limits of the system that we chose. A great example of that is the Azure DevOps team when they originally envisaged work item tracking fields. A work item was a row in a database, and fields were a column. Those of you who are software engineers have already figured out what the problem would be with that in that you can only have 1024 columns in a SQL database. \n\nSo they not quickly, but they did hit limitations on the number of columns that you could have for custom fields because who would have more than a thousand fields on a work item? But yeah, people do. They do exist, and people do that, and it was totally within the system. So they thought, \"We'll never have a thousand fields,\" or somebody made that decision, just like the two-digit date decision back in the day. So they had a lot of work to go back and refactor, not just refactor the system but write the capabilities to refactor the data on upgrade for their customers into a format where each field was a row in a database rather than in a column. \n\nSo then you have unlimited capability for fields and data, and those types of decisions, either knowingly made decisions that result in something that's not quite the way it needs to be or unknown ones, are where most technical debt comes from. There are other issues that people call technical debt which aren't necessarily technical debt, but most people lump it all together and say technical debt. I think I often do as well, and that's I've written bad code and shipped it. That's not technical debt; that's incompetence. \n\nRight, so within the context of a competent team, there's known technical debt and unknown technical debt. But there's another thing that we call technical debt, which is just shipping bad code, making poor choices, knowing that they're poor choices, and not doing anything about it. Right? Shipping bad code. Stop shipping bad code would be the way you pay that one back. But for technical debt, you need to pay it back. You need to prioritise paying back that technical debt. Think of it more as an unhedged fund rather than a debt like a credit card. \n\nMost debt is secured against something, secured against an asset. If you stop paying your mortgage, then the bank comes and repossesses your house and gets their money back, right? And maybe you get some leftovers because you paid some of your mortgage. But who's ensuring your product quality? Who's ensuring your product against your technical debt? There's no insurance; it's uninsured from that perspective. Nobody can magically come along and pay back all the debt. It's not insured at all, or sell something and pay back. We claim an asset, so it's something you're going to have to deal with, and you can't let it get out of control.\n\nAnd there's a lot of unknown technical debt. I mean, that's like, I mean, I use the Azure DevOps team a lot as an example, but they'd been a waterfall team for many years, shipping once every two years. And then they moved to a more continuous delivery three-week model, and they found that they made lots of poor decisions, right? That weren't necessarily poor decisions within the context of two years, but they couldn't really see the impact of the technical debt, the choices that they'd made, deliberate and undeliberate, right, on their ability to deliver product and their ability to deliver value.\n\nBut I have a graph of, I think it's 2010 through to 2018 for that product team, so eight years of development, and they effectively go by moving to continuous delivery, moving to three-week sprints, moving to that faster cycle from a two-yearly cycle and running into issues with that. And every issue they're running into, paying it back, right? Paying back the reason that they made those choices, which were perhaps valid reasons at the time, but you still need to pay it back. It doesn't matter whether it was a valid reason or not. \n\nAnd paying it back and doing the work, they actually went from 25 features to production each year in 2010 to something like 360 features to production in 2018. So by focusing on paying back their technical debt, enabling their engineers to close the feedback loops, then shorten the feedback loops, three ways of DevOps, right? Closing the feedback loops first, then shortening them. And that act of shortening the feedback loops can massively increase the amount of value that you can deliver long term. \n\nAnd that's the value of paying back technical debt, of managing technical debt well, is that you can go from removing those limitations to maximising the value that you deliver in your product with the same number of people. That was the Azure DevOps team literally went from 25 features to production each year in 2010, worked very hard to pay back technical debt, and were able to, even in the first year of focusing on paying back technical debt to get their new way of working up and running, they went from 25 features to production to 68 features to production within that one year. \n\nAnd they weren't even focused on delivering more features; they were focused on, \"Let's deal with our crap,\" and \"Let's figure out how we deal with those problems.\" And they still delivered more features. That's the benefit of paying back technical debt. That's the benefit of having a slick, easy system to add features to your product, and that's what everybody needs. Don't manage technical debt; pay it back."
  },
  {
    "Title": "Code Reviews for Quality Assurance",
    "Description": "Explores modern code review practices, emphasising automation, pre-reviewed code, and shift-left strategies to improve software quality, speed, and team collaboration.",
    "ResourceId": "r2G-NrSIj2k",
    "Url": "https://www.youtube.com/watch?v=r2G-NrSIj2k",
    "Date": "2024-11-27T06:00:25Z",
    "Captions": "There are multiple schools of thought on code reviews. One school of thought is that code reviews help us improve our code quality and help reduce defects because we've got multiple eyes looking at the product. But I think that's only part of the story. As we shift left, another school of thought starts to come to the forefront, which is our code should be pre-reviewed. A code review, a person manually code reviewing our code, should not actually be required because our code should already have been reviewed by the time we submit a pull request. \n\nThat would then enable all of our pull requests to be almost totally automated, or as automated as we can get, so that the pull request process itself is not becoming a blocker to deliver value in our business. There are lots of different techniques and practices within the context of code reviews. I very much support and value code reviews and pull request systems that are in place in GitHub and in DevOps. \n\nI would absolutely recommend that nobody is able to commit code to master or main without going through a pull request and without passing validated checks. But those validated checks should be as automated as they can possibly be within the context of your system. Naked agility has helped others and can help you create automations and practices and procedures that enable you to have the highest quality possible code and detect defects as early as possible."
  },
  {
    "Title": "Cultivating a Culture of Engineering Excellence: The Essential Role of Technical Leadership",
    "Description": "Explores how technical leadership shapes a culture of engineering excellence through clear standards, continuous learning, collaboration, and ongoing improvement in organisations.",
    "ResourceId": "CXOrndz5lN4",
    "Url": "https://www.youtube.com/watch?v=CXOrndz5lN4",
    "Date": "2024-11-26T17:53:11Z",
    "Captions": "We need to focus on building a culture of engineering excellence. The technical leadership must set that direction and go in that direction. We need to build within our organisation the knowledge and understanding of the theories behind the reasons things work the way they work, and how we can then apply our empirical learnings within our context. \n\nEvery organisation is different, and with the knowledge of those theories, we can then extrapolate what the next best decision is that we can make."
  },
  {
    "Title": "Confronting Incompetence: How to Stop Shipping Bad Code and Tackle Technical Debt Effectively",
    "Description": "Learn how to prevent bad code, distinguish technical debt from incompetence, and apply practical strategies like code reviews, testing, and prioritisation for healthier software.",
    "ResourceId": "FquWl26Uc8Y",
    "Url": "https://www.youtube.com/watch?v=FquWl26Uc8Y",
    "Date": "2024-11-26T13:55:20Z",
    "Captions": "I've written bad code and shipped it. That's not technical debt; that's incompetence. Right? So, within the context of a competent team, there's known technical debt and unknown technical debt. But there's another thing that we call technical debt, which is just shipping bad code, making poor choices, knowing that they're poor choices, and not doing anything about it. Right? Shipping bad code. Stop shipping bad code would be the way you pay that one back. \n\nBut for technical debt, you need to pay it back. You need to prioritise paying back that technical debt. Think of it more as an unhedged fund rather than a debt like a credit card. Most debt is secured against something, secured against an asset. If you stop paying your mortgage, then the bank comes and repossesses your house and gets their money back, right? And maybe you get some leftovers because you've paid some of your mortgage."
  },
  {
    "Title": "Security by Design Building Secure Software",
    "Description": "Explains how integrating security and quality early in software development—using practices like TDD, pair programming, and continuous feedback—builds robust, reliable systems.",
    "ResourceId": "NgoP5W5y7Gs",
    "Url": "https://www.youtube.com/watch?v=NgoP5W5y7Gs",
    "Date": "2024-11-26T13:35:33Z",
    "Captions": "Many companies make the mistake of treating security as an afterthought, doing security validation and security checks at the end of the process. This is not a small company problem; it's not a big company problem; it's an all-company problem. Some of the largest tech companies have resolved this with something you'll probably hear about in the Dora report, which is shift left. Shifting left means shifting everything as left as you can, as close to the developers and engineers as possible, to resolve these issues.\n\nWhat has been happening is that we will do many years of work on a product—could be months, could be years, could be weeks. We do a whole bunch of work on a product and then we ship it to pen testing or someone who's going to do some security validation for your product, even if it's yourselves doing it. But you just do it at the end, and you find a whole bunch of problems. Some of those problems are going to be systemic to how you've built your product in the first place. In order to fix that, we're going to have to rearchitect.\n\nIf we're late in the game, we're ready to ship, and everybody's asking us when it's going live, we need to get out. We need to blue Peter the heck out of that, and we get out our super glue, our sticky tape, and we go figure out how to paper over the cracks in our product to prevent the hackers from getting in. The problem is that hackers are super good at peeling away the edges of those things to get underneath and gain access to your system and take it over.\n\nI've been involved with some exercises that the Azure DevOps team did, where they hired a team of professional hackers. This is a red-blue exercise: hire a team of professional hackers, bring them in, and their job—the red team's job—is to hack the system. The blue team's job is to detect them and do something about them, either prevent them from getting in or push them out, or all of those things. The red team always wins. That's the thing you have to realise: eventually, the red team is always going to win. They're going to find a flaw; they're going to find ways to peel up that tape. The only way for you to prevent those things is to not have vulnerable code in the first place, not have vulnerable architectures in the first place. \n\nThe only way to do that is to refactor the heck out of your system to make those things go away and then stop those things from happening in the first place. For example, the Azure DevOps team does these red-blue exercises, and the red team's job is to go around all of the teams in the organisation and show them how the red team was able to use their code to get access to the system and how they could have coded it differently or architected it differently or changed the way they do something in order to prevent hackers from getting in. That's security by design; that's security from the start; that's security baked into the problem.\n\nThis is true for a lot of different facets of software engineering: it's every team member's problem. What the business wants is every team member's problem. How much it's going to cost is every team member's problem. The customer's worries are every team member's problem, and security is every team member's problem. So building security in rather than testing it in, building quality in rather than testing it in, is about shifting left, getting as many of those skills that you need for your context into the hands of the developers that are doing the work.\n\nThere are a bunch of tools out there that can help with that. There’s SonarQube and SonarCloud, which enable your developers to analyse their code and find and hopefully deal with vulnerabilities. There are known vulnerabilities that happen in the code. You can also use GitHub, which has an advanced security protection system that you can use in GitHub or as part of Azure DevOps to again analyse the code, find problems, and poke at it. \n\nIt's why, if you're a developer and you try to upload some code that has a PAT token or something that looks like a security token or a password into the system, you will be prevented from checking in that code, from committing that code, from the repo, from doing a push to production by GitHub and Azure DevOps, because the advanced threat protection is detecting that and preventing it from getting into the system in the first place. Shifting as far left as we possibly can to validate that those things are not going to cause vulnerabilities.\n\nA really common vulnerability is developers on dev machines putting passwords in text files. On dev machines, there are all sorts of vectors that hackers can use. My advice is to help you within the context of shifting left and enabling your teams to have the knowledge and skills they need to be able to prevent and remove as many of these issues as possible before they become a problem."
  },
  {
    "Title": "NKD Agility: Your partner in developing engineering excellence",
    "Description": "Learn how NKD Agility supports organisations in building engineering excellence through modern practices like performance engineering, testing in production, and leadership.",
    "ResourceId": "DSIXtHZTirA",
    "Url": "https://www.youtube.com/watch?v=DSIXtHZTirA",
    "Date": "2024-11-23T07:00:12Z",
    "Captions": "If you want to be able to ensure that your software performs well and creates a great user experience, you're going to have to put in a lot of effort in making that happen. It is not going to magically happen. You're not going to have awesome software with an awesome experience and fast and responsive without actually putting in the effort to figure out how to do that. Performance engineering has a huge impact on user satisfaction and the business goals you're trying to achieve. Without a focus on performance engineering, and this is also shifting left, right towards where the team is doing the work, without that, you're not going to be able to build a product that suits your customers. Customers are going to leave because it doesn't perform well, or customers are going to leave because it doesn't do what they need it to do, or customers are going to leave because it's buggy and you're not getting things there fast enough.\n\nPerformance engineering is where we're looking at how quickly users are able to do things. Some of that could be user experience based, taking steps out of the process, and some of it can be does the software actually function at speed? Does it function at load? While some of these things can be load and stress tested, I'm going to quote one of my favourite product managers, Brian Harry, who said, \"There's no place like production.\" No matter how much testing you do prior to production, you're going to have problems that only exist in production. You can't simulate real users; it's not possible. You can only synthetically simulate users. So no matter how much of that stuff you do, you're going to have problems when you hit production. They can be performance problems; they can be the way people use it problems, right? The order that people do things or the amount they do this particular thing is different from what we had in the simulation, and that's where you run into a lot of your major performance problems.\n\nMy philosophy is that we want to get into production as quickly as possible so that we can figure out the impact of the changes that we've made and analyse the load and stress test within the context of real usage, real users using it for real. This is the story of testing in production, which doesn't mean you're not testing before production. Holy moly, no! Don't ship stuff that's not tested to production; that's a bad idea. But we need to get into production as quickly as possible, which means we need to automate and create fast, sleek automated testing for all of the normal stuff that we need to test. Does the software actually function the way we expect it to? Then we want a ring-based or audience-based deployment model so that we can control the exposure of these new capabilities and features, and we do load and stress testing effectively in production.\n\nSo what that might look like, I'm going to use an example because I love the way that they've done this. I've worked a lot in the past with the Azure DevOps team at Microsoft. Seeing how they do things has been really enlightening because they've got quite a big product; it's quite a big scaling problem. They've got millions of users, and what they effectively do is they have some of the rings that you're deploying to are physical rings, like environments. But even once you've deployed a new capability to all of your production environments, let's say you have six areas around the world, you've deployed to them all. Those features that are deployed might not be accessible by people, right? So they're not impacting production in any way; their feature flag is off.\n\nBut then the team that owns that feature that's deploying that feature wants to ensure that that feature is load tested, stress tested, is the right thing, right? Is the right thing that resonates with customers, provides the right capability, but also works load tested, stress tested? We agreed, well, I agreed, that we can't do load testing and stress testing very well, not in production. So what we need to be able to do is we need to be able to limit the number of users that are accessing this new feature and then expand it over time. There are various ways to do that. What they would do is their first ring that they would create, and this is actually a ring for each feature. So they're creating an audience-based deployment model per feature if it's big enough, right? You might have features that you just ship; you might have changes that you just ship. You don't do this with everything; this is expensive, right?\n\nBut what they do is the team will go, \"Ah, we want to start getting real users into kicking the tyres on this feature.\" It's just us so far, just internal people. So what we're going to do is we're going to publish a blog post. They publish a blog post that says, \"We're working on this new feature; it's going to provide this capability. Here's what it currently looks like, and if you would like to help us kick the tyres, send an email to this email address, and we'll enable it for you.\" You give them the data of who you are, and then they enable it for you. You can then go in the tool; you would then have a little feature flag that you can turn on and off. When you choose to turn it off, you get asked for a comment, and it goes to the team, right? So they can find out why you don't like it, right? Why you're not using it. It's slow, it's this, it's that. Then they can go look at the telemetry.\n\nBut that's a very private preview, right? People have to actively opt in. Once they have enough data to say that they think this is a good feature, they think it performs well, at least with the small number of users, once we have enough telemetry, they then open it out. They'll turn it off for everybody that's using the service but with the feature flag enabled for everybody, so everybody can go turn it on. They'll do another blog post that says, \"We're now ready for more people to try this. You don't have to email us anymore; you can just go switch it on, go try it out, and tell us what you think.\" So that encourages a bunch of people to go turn it on, and then they get a bunch of telemetry for people using it. Either people then continue to use it, or they turn it off because they don't like it, right? Maybe it overrides the existing functionality, and they don't like the way it is because something's missing, so they got to turn it off. They're asked what the problem is; they type in, \"I don't like it because it's slow,\" \"I don't like it because there's features missing,\" \"I don't like it because I don't like my cheese being moved,\" whatever the reason is, right? \n\nAnd then they're collecting more telemetry. If they get enough data, they maybe go to the next stage, or maybe they need to do more iterations on the capabilities, improve the performance. Maybe they need to turn it off because it's not performing well, and then they need to do some performance improvements and then turn it back on again. Eventually, if they've got enough telemetry, they'll turn it on by default for everybody with the option for people to go in and turn it off. So everybody gets it forcibly turned on, and then we're collecting data and telemetry from the people that turn it off to find out why they don't like it. Why do they go turn it off? What do we need to do to get those folks on board? Once they have enough telemetry, they see there's not so many people turning it off. There are always going to be people that don't like what you're doing, right? So you can't—it's not a unanimous thing. They then have it on by default; you can't turn it off, right? They maybe disable the option to turn it off, see what complaints roll in for people that want to be able to turn it off, and then eventually they get rid of the feature flag, and it's on for everybody in production.\n\nThat's a modern software engineering implementation of continuous delivery to production and then an audience-based rollout and expansion and testing story to allow you to do load testing and performance testing and stress testing in production. That takes discipline; that takes effort. It definitely has a cost, right? There are a lot of things that had to happen there and things that had to be organised and things that had to be done. But Azure DevOps, using that capability that they built into the system, using that story, they created a massive following from their users. Their users expected excellence, expected new things, expected those new things to work. As those new things rolled out, because you have an expectation if you opt into a private preview that there might be some things that don't work quite as well or we don't know yet, right? \n\nSo you're not testing in production with users that haven't chosen to be part of that test story, right? You're soliciting for people to come in and help you, and because they want to help you, one, they're more forgiving, and they'll give more feedback, right? Because they're choosing to be there. And that's how you create a story of performance improvements and enhancing user experience in a progressive, modern engineering excellence manner. This is something that Naked Agility can help you build within your teams, build within your product. Don't expect it to be magically overnight; these things take effort. They take discipline. Sometimes mistakes are made, but with a focus on delivering high-quality, usable, working product continuously to our users, we can build some of the best products you've ever seen."
  },
  {
    "Title": "Unlocking the Superpower of Software Development: How Shifting Left Transforms Quality Assurance",
    "Description": "Explains how adopting a shift-left approach in software development improves quality, speeds up delivery, reduces costs, and fosters collaboration by involving QA early.",
    "ResourceId": "whKX9Mn1eb8",
    "Url": "https://www.youtube.com/watch?v=whKX9Mn1eb8",
    "Date": "2024-11-22T14:04:14Z",
    "Captions": "This is fundamentally why having high quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value. \n\nSo the concept that we talk about a lot from the perspective of modern software engineering that enables you to push quality, build quality, build security, build these things in from the beginning, build it in rather than testing it in later, is the concept of shift left. \n\nShift left is about moving quality assurance earlier in the development cycle."
  },
  {
    "Title": "Building a culture of Quality",
    "Description": "Explores how fostering a culture of quality and engineering excellence across teams leads to better, safer products, highlighting the impact of leadership and shared values.",
    "ResourceId": "IZ-FlBbGaSY",
    "Url": "https://www.youtube.com/watch?v=IZ-FlBbGaSY",
    "Date": "2024-11-22T07:00:08Z",
    "Captions": "If we want to improve the quality of our product and reduce risk, part of our automation story is going to be CI/CD pipelines. It's worth noting that most teams don't use CI/CD for CI/CD; they use it for an automated build. I see very few teams applying engineering excellence and doing CI/CD as it's intended to be done.\n\nJust to clarify a little bit, continuous integration is coupled with mainline branching. It's not integrated if it's not in the mainline with the rest of your code. So if you've got a CI, a continuous integration on a separate branch, that's not actually a CI; that's just a continuous build on your separate branch, which is great. Definitely have that, but we want continuous integration. We want to be continuously pulling things into the one true version so we have fewer and fewer integration problems. We have fewer and fewer other problems coming off that because we're having to support multiple versions of our product.\n\nIf you've got test-live in branches, you're just fundamentally doing it wrong. You might have an older product; I definitely don't judge the decisions that led to that in the past. You might have made that choice 20 years ago in your product, but you shouldn't be making that choice today. Dev-test-live with branches? No product anywhere should be making that choice today. We should be doing continuous integration and continuous delivery. Continuous integration is where you have mainline branching and things are continuously integrating into that mainline branch. Everything, all the work of all the engineers that are working on your product, are continuously integrated every day.\n\nGoogle is notorious for this one. They have one source control repository for the whole company. Every product everywhere in the company is on that one main line. That's a little bit extreme; that's a mono repo. But at least for a product, you want to have that mainline branching model where you're continuously integrating every day. You should not—I would object to a branch that's around for longer than a day. I'd strenuously object to a branch that's around for more than a couple of days. I'm not saying that they wouldn't happen; it's possible, but I strenuously object.\n\nWhere people are adding new things, adding new capability, branches shouldn't exist for very long. That's CI. Continuous integration, continuous delivery is when it hits the main line; it's going to production. Continuous delivery is not \"I'm continuously delivering to my test environment\"; it's \"I'm continuously delivering to production to real users.\" Now, you might use a ring-based deployment model where you're protecting and limiting the blast radius of any problems behind an audience. Perhaps it could be audience-based rings that enable you to have your high-risk customers in a later ring, so you find the problems first with lower-risk customers.\n\nBut continuous delivery—the delivery part in continuous delivery—is production. It should be real users really using your product. So if you're doing continuous delivery, you should be seeing every commit to the main repo or a particular branch. Let's call it a branch; it could be called main, could be called master, could be called HK, whatever it's going to be called, it ends up in production. That's where people continuously integrate. So you CI into that, and then you CD from there to production.\n\nMost teams and most organisations don't seem to do that. They say they're doing CI/CD, but they're just using the terminology and the tools that are part of it to do something else, which is just an automated build, which is also fine. You've got to have the right technology for the right thing. I recommend CI/CD; I recommend continuous integration, mainline branching, and continuous delivery into production.\n\nFor example, on products that I use, that I build, I might not use true CD. I think I'm almost there; I'm not quite there. I think it's a little bit too much risk for me because of my ability to test. But I continuously integrate to main, and it ships to production. I have CD on main; it ships to production as a preview, so the smaller number of users are controlling the blast radius. When I feel like the preview has enough telemetry to tell me that it's good, that I don't have a larger number of errors, I don't have people not being able to do the stuff that they're supposed to be able to do in the tool, when I have enough data, then I push the button and it rolls out to the next ring, which is everybody.\n\nSo I effectively have a two-ring system: a preview or CD system. Preview is a smaller subset of people that opt in to be using the preview version, and then everybody else. Sometimes, if somebody asks for a new thing, I'll get it into preview and I'll tell them it's in preview, and they can try it there and kick the tyres. I'll bring new stuff that's never been tried into preview; people will come and kick the tyres, and then it will only go to the rest of the world once it's been successful.\n\nThat's generally how Windows works; that's generally how Microsoft Teams works. Office 365—most of Microsoft products are now on a ring-based, audience-based deployment model, and that seems to be the most effective for services that you deliver to your customers. I think websites are a little bit different for commercial websites, but again, these are all things that we can talk about and figure out what the most effective model is. CD might not be the most effective model for you; CI might not be the most effective model. We might just want some automated builds.\n\nHaving the expertise to understand your product, understand its architecture, and understand what the business is trying to achieve with the product will help create that indication of how naked agility can support you in creating CI/CD or just some automation to enable you to be as effective as possible and increase your release frequency and reduce your cost of deployment."
  },
  {
    "Title": "Transforming Technical Debt: Unlocking Innovation and Value Through Quality Product Delivery",
    "Description": "Explores how managing technical debt enables faster delivery, higher product quality, and greater innovation, highlighting strategies for continuous improvement and value.",
    "ResourceId": "FFrTLuRhyVo",
    "Url": "https://www.youtube.com/watch?v=FFrTLuRhyVo",
    "Date": "2024-11-21T17:01:52Z",
    "Captions": "Technical debt is not just a cost; it's a missed opportunity. How much money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having a high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "Title": "Technical Debt Management for Long-Term Quality",
    "Description": "Explains how managing and repaying technical debt improves software quality, delivery speed, and long-term value by addressing both known and unknown code issues.",
    "ResourceId": "BAwBXYtKj7o",
    "Url": "https://www.youtube.com/watch?v=BAwBXYtKj7o",
    "Date": "2024-11-21T07:00:11Z",
    "Captions": "Automated testing is extremely important to our ability to use modern software engineering to benefit our organization and increase our profit, increase our margins, increase our capability, and deliver better quality, higher value software to our customers. \n\nAutomated testing comes in lots of different flavours, and I'm definitely going to stretch the term automated testing maybe from your traditional concept. One of the things that automated testing does is it reduces human errors. You would think I used to teach a training class; I still have it on my list of things for manual testers to use as your DevOps test tools. We had labs in it. You would think that if there was one group of people that were awesome at following a set of steps and validating whether they worked or not, you would think that a group of testers would be that magical group of people that would be able to do that. \n\nIt's absolutely not the case. Most of the groups that were doing the labs failed to follow the steps and resulted in the lab not working. This lab doesn't work, right? And it's like, yeah, it does. Did you follow all the steps? Yes, yes, yes, we followed all the steps. Then you sit with them, and they walk through it, and I'm like, you missed step four. You didn't do step four, or you didn't do the second part of step four, or whatever it is, right? You didn't follow the instruction. \n\nThis is just a human thing; this is not an assassination attempt on testers. It's just how humans work, right? So you cannot expect somebody to follow a set of steps and do it the same every time. That's not how humans function. That's how computers function. So we want to take those things that make sense and convert them into automated tests. \n\nNow, we're not looking for a particular level of code coverage, although no code coverage is probably bad. Chasing code coverage is always a bad idea because you'll just have lots of people writing terrible tests that get you good code coverage but don't actually validate your product, right? So don't chase code coverage or test coverage, but it is a way for us to get faster feedback. \n\nWe want to have fast-running automated tests that we can validate the changes that we make on a continuous basis. TDD results in some of those, right? Some tests out of TDD are like that. Most tests out of TDD validate that at least the product does what the software engineer intended it to do and validates that we've got an architecture that probably is a little bit better. \n\nThat's hopefully part of that testing mode, but the value in automated testing is it happens the same every time. You do need to balance this idea of test infrastructure, right? Because when we write test automation, we have a body of tests, and whenever we make a change to our product, it's going to have an impact on those tests. \n\nThere used to be a great feature in Azure DevOps that had something called test impact analysis, and you could make a change in the code, and it would tell you exactly which code paths had changed and tell you which tests were impacted. I think there were a lot of false negatives, which is why it's not well thought of, but it was a great idea, right? A great idea. How do we know what tests we need to run? Well, let's look at what's changed and what the tests hit, and are we missing something, and which tests need to be rerun in order to reduce your test matrix? \n\nBut because that fundamentally doesn't work because of complexity, right? That's what got in the way: the complexity of software engineering. We need to run them all, which means they all need to be super fast. We need unit tests, not end-to-end tests, not integration tests. We need unit tests that run really, really quickly and thousands of them in milliseconds. \n\nThe Azure DevOps team moved from long-running end-to-end tests to fast-running unit tests and took their test strategy, their test infrastructure, from 72 hours down to 3 and a half minutes almost to run their entire test infrastructure. That's what you're looking to be able to do, and there's something like between 60,000 and 100,000 tests being run to validate that their product still works. \n\nThat's the story that you're looking for. You're looking for small, lean, discrete tests that don't have an impact across the entire platform so that when you make a change in this part of the system, you only need to change the tests in that part of the system. All the other tests should still pass because you've not broken what they're expecting in other parts of the system, and it gives you a good indication. \n\nSo having this tight test infrastructure, shifting left as much as you can, can and automating everything. The phrase I usually say is if it can be automated, it should be automated, and if it can't be automated, it should be refactored so that it can, right? Automate everything. You should not have any manual steps between developer cutting code and production. \n\nThe only thing that I'd say was a valid place where you put a human between those things is maybe an approval, but I would prefer for those approvals to be automated. Right? On what basis does this human decide whether we're a go or no-go for release? Well, they look at this data. Well, we can automate that. They look at the calendar, and they only do it on these days. Well, we can look at that. We can say we only release on Monday mornings, right, to give us maximum amount of time to deal with any problems. \n\nNever release on Friday; don't do that. CL strike did that; don't do that. We can do all of those things. We can automate everything so that we have that engineering excellence, modern software engineering excellence built into our entire story so that we can then spend the time that we would have spent doing all those things manually and fixing all those problems focusing on delivering the value that's going to generate the revenue that we need to grow and create more. \n\nThat's what we should be focusing on, and test automation is a huge part of that to reduce the number of problems that make it through to production, to reduce the amount of time it takes to detect that you've injected problems into the system. We can help you create those strategies, build that engineering excellence within your organization, and ultimately build better."
  },
  {
    "Title": "Transforming Technical Debt: Unlocking Opportunities for Innovation and Value",
    "Description": "Explores how addressing technical debt boosts innovation, team morale, and value delivery by enabling agile development, better products, and proactive organisational growth.",
    "ResourceId": "1M2_AVqoRbs",
    "Url": "https://www.youtube.com/watch?v=1M2_AVqoRbs",
    "Date": "2024-11-20T16:53:31Z",
    "Captions": "Technical debt is not just a cost; it's a missed opportunity. How much money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having a high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "Title": "Unlocking Success: How Small Experiments Transformed Feature Delivery from 25 to 150 in Software Development",
    "Description": "Explores how breaking features into small experiments boosts software delivery, enabling teams to deliver more features, reduce risk, and improve customer-focused products.",
    "ResourceId": "WEYf9jWG9wk",
    "Url": "https://www.youtube.com/watch?v=WEYf9jWG9wk",
    "Date": "2024-11-20T08:02:36Z",
    "Captions": "They went from 25 features to production each year with the same number of people to nearly 150 features to production each year, and even taking four years to get there. Holy moly! I would rather have 800 features than 25 features, right? And yes, the features are smaller, but it's more experiments, right? It's more chances to get something right. It's more ideas to see if they connect with the customer.\n\nSo in the old way, you have to stick with and focus on something even when it's not quite the most optimal thing. But if you're doing lots of little experiments, you can find, \"Oh, this thing resonates really much more than these other things with the customer.\" Let's do more on that until it stops resonating, and then we move on to something else and move on to something else. And we build a better product with more capabilities."
  },
  {
    "Title": "Code Reviews for Quality Assurance",
    "Description": "Explores code review practices for quality assurance, highlighting automation, pull requests, and early defect detection to ensure high-quality, reliable software delivery.",
    "ResourceId": "s4h2K62V_d0",
    "Url": "https://www.youtube.com/watch?v=s4h2K62V_d0",
    "Date": "2024-11-20T07:00:26Z",
    "Captions": "So the concept that we talk about a lot from the perspective of modern software engineering that enables you to push quality, build quality, build security, build these things in from the beginning, build it in rather than testing it in later, is the concept of shift left. \n\nMoving quality assurance earlier in the development cycle. Now shifting left is often controversial because when do you stop? How far left should you shift? As far as I'm concerned, it's all the way to the left. The people writing the code should be the ones that are writing the tests. They should be the ones that are running the tests, that are taking the fallout from the tests, that are all the way through to, \"I need to support this.\" If I wrote the code, I need to support this in production. \n\nNow usually in bigger products, that's team-based, right? So the team that's working on this feature or this capability or this part of the product, this area of the product, are the ones that also support it in production. But I don't just mean support it in production. They're dealing with the bugs, they're dealing with almost with the support requests. It's probably being, in a big organisation, it's probably being filtered through some kind of levels in a centre, but they need to handle those support requests and they need to look at the telemetry for the experiments that they're doing and figure out whether their experiments are successful, whether things are right. Do we have the right alerts to know when something's gone wrong with this feature or capability? \n\nThat is all shifted left to the engineering team that is building the product. They are building it, running it, supporting it, maintaining it, validating it going forward into the future, which means you need all of those skills that in the past you maybe had dispersed around the organisation. You need all of those skills on the engineering team. \n\nSo usually, you have a lot of people who can code, right? But you also have people who have security expertise, who have testing and validation expertise, who have user experience expertise. All of those things move further towards the source of all of our problems and all of our successes, which is building the code. \n\nIn the modern engineering space, in agile practices, there are a bunch of tools and techniques that have kind of grown in that space to be really popular, but also very contentious because people don't want to put in the work because they're more effort to do right. So it seems like we're going to deliver less stuff because we're spending more time on the engineering space. But because we don't have that arc, or I don't have, is probably too strong, we have less of that arc of people finding problems in production. \n\nWe have less of that arc of reduction in brand. Everybody's losing their mind because we're not being presented well in front of our customers. We have less of that. We have an opportunity here to do stuff, but we need to fix this stuff first because we never fixed it before. We just pushed it out and we didn't bother with it. All of those things are more effective. \n\nTherefore, when we start shifting left and we're doing more things from the perspective of the engineering team, it takes longer to do each thing the first time, but each thing is done more right. Because the lack of doing things—I'm trying to avoid the term technical debt because I'm including more things in this story than just technical debt—are poor engineering practices and poor quality output, right? For whatever reason, including technical debt is an exponential problem, not a linear problem. \n\nThink about if you built the first story of a building with substandard materials, and then you built the second story of a building with substandard materials. How far are you going to get before the building collapses? Right? Now we have an advantage in the software industry that we can build the first level. We can build the first level of the building quickly, and when we go to build the second level of the building, we can go back and refactor, redo any of the things that we need to enhance the support of the second story of the building, right? \n\nThis is a terrible analogy, but it's working for me just now. It enables us, as you don't know how many stories your building's going to have when you're doing software engineering. If you want to look up the building analogy, look up the Chrysler Building and how the Chrysler Building was built because it was effectively built in an agile manner. They didn't know how many stories they were going to put on it. They didn't have all the materials up front. They didn't have a plan up front of the building and what they were going to do. \n\nIt's a great example of this in that physical space, but in the virtual space, we can do test-driven development. Test-driven development is not about building better code; it's about having better architectures. We create better architectures because we only create what we need to support the things that we need it to do. \n\nDoing pair programming means that we've got more eyes on the code. It feels like it's going to be less productive, but productivity is not a moment in time for the engineering team. It needs to be looked at across the whole system. We can take what seems like a hit on productivity to do pair programming because there's two people doing things. Why can't we have them both doing their own thing? But we have less problems that we need later, which are much more expensive than the pair programming is at the start, right? \n\nSame with test-driven development. We build better architectures, so it's easier to add stuff going forward into the future. And when we do need to refactor our architecture, we have a test infrastructure to validate at each change as we make it to make sure that we're not breaking existing things, existing stories that are supposed to happen. \n\nThese tools are fundamentally part of that story of how do we build a practice of engineering excellence within our organisation and enable great things to happen. We want to build great products. We want to make great profits from the great products that we build, and the only way we're going to do that is if we do things in a way that enables us through the future rather than us getting to a point where we're drowning under the weight of all the crap that we've shipped to production over the years. \n\nAnd if you are currently drowning under the weight of all of that, as the Azure DevOps team was when they moved from their waterfall model that they'd been doing for 200 what let C to the for five years, and then they moved to continuous delivery to production, they had to go pay back all of those loans that they'd taken out for the future, right? \n\nBut what they found was that in paying back those loans, they became so much more effective because of the exponential cost of taking out those loans. They became so much more effective that in actual fact, the cost of paying it back was completely irrelevant to the benefit and value that they got from it being paid back. That makes sense, right? They went from 25 features to production each year with the same number of people to nearly 50 features to production each year. \n\nAnd even taking four years to get there, holy moly, I would rather have 800 features than 25 features, right? And yes, the features are smaller, but it's more experiment, right? It's more chances to get something right. It's more ideas to see if they connect with the customer. \n\nSo in the old ways, you have to stick with and focus on something even when it's not quite the most optimal thing. But if you're doing lots of little experiments, you can find, \"Oh, this thing resonates really much more than these other things with the customer. Let's do more on that until it stops resonating,\" and then we move on to something else and move on to something else, and we build a better product with more capabilities. \n\nSo there are lots of tools and techniques that you can use within the context of modern software engineering practices to build quality in from the start and enabling your teams to be as effective as possible to choose the practices because they need to be able to choose the practices that work best for their context. That's something that naked agility can help you with."
  },
  {
    "Title": "Transform Your Software Architecture: The Game-Changing Impact of TDD and Pair Programming",
    "Description": "Explores how test-driven development and pair programming improve software architecture, code quality, team skills, and long-term productivity by reducing complexity and errors.",
    "ResourceId": "CWxkBJJduCE",
    "Url": "https://www.youtube.com/watch?v=CWxkBJJduCE",
    "Date": "2024-11-19T16:55:41Z",
    "Captions": "Test-driven development is not about building better code; it's about having better architectures. We create better architectures because we only create what we need to support the things that we need it to do. Doing pair programming means that we've got more eyes on the code. It feels like it's going to be less productive, but productivity is not a moment in time for the engineering team. It needs to be looked at across the whole system. \n\nWe can take what seems like a hit on productivity to do pair programming because there are two people doing things. Why can't we have them both doing their own thing? But we have less problems that we need later, which are much more expensive than the pair programming is at the start."
  },
  {
    "Title": "The Hidden Costs of Poor Quality Code—and How to Turn It Into a Superpower",
    "Description": "Explores the financial, productivity, and reputational impacts of poor-quality code, and offers practical steps to turn code quality into a competitive advantage.",
    "ResourceId": "1AO6FFBlE4Y",
    "Url": "https://www.youtube.com/watch?v=1AO6FFBlE4Y",
    "Date": "2024-11-19T09:58:28Z",
    "Captions": "It's a lot more expensive than you think having poor quality code. There are lots of hidden impacts. The obvious stuff is the cost of fixing bugs, right? Because you've got poor quality and people find issues, and that cost gets exponentially more expensive the closer to production you get, right? More expensive to fix it with the customers. But you've also got the cost of customer support. That's obvious stuff. The things that people generally don't think of are things like brand reputation, right? What is the impact of poor quality on brand reputation? Not just poor quality in your product, but poor quality in the way you do things.\n\nThe most recent one is CrowdStrike, right? They had poor engineering practices that resulted in a massive global impact when something went wrong. All they did was what lots of companies do, which is push something to production and didn't really think about controlling the blast radius or any of the other modern engineering practices that they might have. So you've got loss to your brand. You've got productivity of your team, right? If everybody's got to run around trying to figure out what the problem is because it's too difficult to figure it out, then you're going to have a massive loss of productivity.\n\nNot just productivity. There are lots of engineering practices that people use that reduce quality, but they don't think it reduces quality. One of those is branching, right? Having a really large branching strategy. I worked with a company recently that had 96 teams, and they had 96 long-running branches, one for each team. Then each team created their own branches of that. The cost in lost productivity to maintain that, to ensure that you have a working product, is just enormous. Add to that if you're maintaining multiple versions of your product, right? This is a massive cost. \n\nIn general, you should not be maintaining multiple versions of your product. You should not be supporting multiple versions of your product. You should be supporting the latest version of your product and not anything else. In general, I can think of circumstances where I might have two versions of my product or maybe three at absolute tops. But if you have more than that, perhaps you have a version of your product per customer. That's a very common one. That's a massive cost, not just to support and maintenance, but in lost productivity.\n\nIf I'm a developer and I fixed a problem, I fixed a bug, right? Let's take that as an example. I fix a bug in the main version of our product, the latest version of our product, but we realise that it's in lots of customers' versions. Maybe there are 10 customer versions that have this bug. Can I fix it the same in all of those versions? Probably not, right? Because they diverge over time, and perhaps things that I used to fix the product as part of the fix in the main version aren't there in older versions, or it's slightly different, or it's not quite the same version. All kinds of that increases the cognitive load on the engineers. It increases the likelihood of something going wrong because you're increasing that cognitive load.\n\nAnd because you have to backport all of those fixes across all those different versions, what's the cost in missed opportunities? Because your team's having to mess around with lots of work that is avoidable. I'm going to put that in there. These are all avoidable losses in productivity. What are the missed opportunities for your business? What features are you not able to ship because it's harder for you to add features? A great, fantastic example is some data from the Azure DevOps team. The Azure DevOps team had a very long tail on figuring out whether they'd been successful in building the product, right? The engineers had been successful in the code that they write and having the test and validation of those things done, and it was taking 48 to 72 hours to figure that out.\n\nThey invested a bunch of time and energy in paying back poor choices they'd made in the past, some of them deliberate. That's okay, but poor choices they'd made in the past and things they didn't realise were poor choices in the past that they now realise were poor choices. Paying that back took them nearly four years of investment in that story to fully pay it back, right? You know, just like if you take out a loan, you pay it back over a longer period of time, a little piece at a time. So they were paying it back as they had time. They were prioritising it, so it was important to them. They were spending time on it, but they were also doing other things, so it's getting done over time.\n\nSo it took them four years to pay it back, but that, plus fixing that problem, refactoring that problem, re-architecting that part of the problem, so they went from 72 hours—that was the longest—to find out whether you'd broken stuff to three and a half minutes, right? So that's a massive shift. Shifting from long-running system tests to small discrete unit tests as their measure of validation massively impacted their productivity. They went from 25ish features to production each year with 650 people to over 800 features to production with the same 600 people. Not quite the same, right? Because it's four years' time, but more or less the same 600 people.\n\nEven in the first year, when they had a really big focus on paying that back, although there was a long tail, a really big focus on paying it back, they spent most of their time in the first year focusing on fixing a lot of these types of architectural problems. They weren't focused on features, and they still managed to go from 24 features to production to like 60-something features to production—almost three times the number of features were delivered to production at the end of the first year, and they weren't even focused on delivering features. They were focused on building up engineering excellence, fixing those older problems that had crept in over time.\n\nYou know, it's like 15 years working on this product, and it had this massive, massive boost to not just productivity, right? The productivity of the team, but brand reputation went up because you're delivering more features, more experiments, more things that your customers need. You're missing fewer opportunities, and you're having fewer security breaches because if we're iterating much more quickly, which is what you're trying to do, is reduce those feedback loops. You can't leave security to the end. One of the main reasons that companies get large-scale, high-cost security breaches is that they leave security as an afterthought. It's not baked into the process.\n\nIf security is an afterthought, you find a problem in the way you've architected your product. It's a lot of work to go back and fix that, so most people in teams don't because it may be hundreds, thousands of hours to go fix it. Or we could get out the sticky tape and super glue and stick over the top and create something over the top that prevents the hackers from getting into that flaw. But hackers spend copious amounts of time figuring out how to peel back the edges of those sticky things and get underneath and get access to the system.\n\nSo by paying back this technical debt of increasing the level of quality in your product, you have all kinds of exponential benefits to your ability to deliver product to your customer, the happiness of your customer, and you're able to not just reduce costs. Technical debt is not just a cost; it's a missed opportunity. Right? What money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "Title": "Mastering Azure DevOps Migration: Expert Insights for a Seamless Transition",
    "Description": "Learn key strategies and expert advice for migrating to Azure DevOps, including handling database complexities, validation, and when to seek external expertise for success.",
    "ResourceId": "4Tjc5uEtM7M",
    "Url": "https://www.youtube.com/watch?v=4Tjc5uEtM7M",
    "Date": "2024-11-08T05:45:01Z",
    "Captions": "One of the biggest issues with migrating Azure DevOps up to the cloud is probably that you're only going to do it once. Because you're only going to do it once, you're unlikely to have the skills already in existence in-house to be able to do that migration. It probably doesn't make sense to build and maintain those skills in-house because it's something you're probably only going to do once.\n\nFor Microsoft's database migration, depending on the size of your database, it can get quite complicated. It doesn't quite hit complex, but when you start running a lot of the validation tools against it to make sure that your environment is compliant for moving up to Azure DevOps, is when you get a lot of wacky stuff. There are rabbit holes you need to go into to understand a lot of that stuff because there are things that perhaps could have happened to your system. For example, in the past, somebody had a particular version installed, and Microsoft made a mess up. They released a patch, and between the install and the patch, somebody made the change that the patch is supposed to fix, but it didn't quite fix the actual data. Then you're left with data in a little bit of an inconsistent format.\n\nWhat you normally need to do is run some commands against the system, and understanding those commands and what they're actually doing can be quite a deep rabbit hole to get into. Ultimately, we've done hundreds of migrations. I've been working with Azure Ops since it was Visual Studio Team System, and it launched back in 2005 or 2006. I've been working with it for a long time, and I built the tools that Microsoft recommends to do the peace more peace bu migration. Like, I want to move one team, I want to merge projects, I want to split projects—those types of migrations require even deeper skills necessary to be able to run that tool.\n\nIt's really, really flexible, and when you have things that are really, really flexible, that increases the complexity and configurability of that thing. You need somebody to spend a lot of time figuring that out. We have that knowledge and expertise because we built the tool. If you're going to do one migration or a few migrations over a small period of time, you're probably better off just hiring somebody to do that work. If you're going to do a whole bunch of migrations over a long period of time, I do also work with customers where we train people within the organisation to use the tools, and then we help them run the tools on a continuous basis. \n\nWe help with support because you always run into crazy things that are specific to you as a customer. Those data shapes that I mentioned, perhaps in the midst of your TFS environment, your environment—the database was originally controlled under the control of the developers because it's a developer tool. Maybe operations didn't really own it, and the developers decided to install TFS 2013 Beta 1, which was supported by Microsoft but can cause lots of weird data things. Then it's on track; it's been handed over to operations, but there are some weird idiosyncrasies in there.\n\nSo, bringing in expertise for those types of things, whether it's for training the people that you have that you want to do long-term lots of different migrations, or if you just want somebody to take it off your hands and do it for you, that's ultimately what we're here for. You don't need the expertise in-house."
  },
  {
    "Title": "Mastering Cloud Migration: Overcoming the Fear of Incomplete Data Transfers",
    "Description": "Learn how to address concerns about incomplete data transfers during cloud migration, with practical steps for planning, risk mitigation, and using Microsoft tools.",
    "ResourceId": "x6a_BuQq580",
    "Url": "https://www.youtube.com/watch?v=x6a_BuQq580",
    "Date": "2024-11-07T05:45:02Z",
    "Captions": "There's a little bit of a fear of incomplete migrations, that things won't be available when you move to the cloud. I've done hundreds of migrations using Microsoft's database import tool, and I have never had any data loss in any context whatsoever that wasn't known about beforehand. There are certain things that don't work in the cloud that you can do on-prem. You can increase the database attachment size on-prem, and that will unfortunately not be possible in the cloud, right? Because there are other people on the system; it's not just your company, so you're not the only ones taking the hit for performance issues for having attachments that are too big or build lists that are bigger than normal.\n\nSo there are some things, but upfront when you're planning the migration, we need to call those things out. We need to cut them down; we need to figure out how to resolve those things. Microsoft provides tooling to help understand what those things are, what the impact is, and what we need to do in order to make our environment viable for moving up to Azure DevOps. \n\nSo there's not really any such thing as an incomplete migration within that context; it will just work. I've had migrations get stuck, and then we have to back off, restore, and turn back on. That's how you restore; you turn it back on, turn back on TFS locally, and then replan something because something's gone wrong or something needs to be done on Microsoft's end. But usually, especially if it's a bigger migration, you talk to Microsoft first, and they have a support team available who know you're doing a migration. You can email them, and they'll go kick the environment or figure out what the problem is at the time so that you can continue.\n\nSo, incomplete migrations from that perspective are not a big deal. If you're doing an ad hoc PC email migration, like you're moving the bits and pieces that you want to move, like would you just want to move this team or this subset of this team or this project or just this data, then we will know upfront exactly what you can and cannot do within the context of that migration. But it's not something we can define at this point because it's wholly dependent upon your data, the format of your data, what you want to move, what you're okay with losing, and having conversations around that. So you'll know upfront. \n\nSo when it gets to migration time, there shouldn't be any surprises at all."
  },
  {
    "Title": "Navigating the TFS to Azure DevOps Migration: Overcoming Compatibility Concerns with Confidence",
    "Description": "Guidance on migrating from TFS on-premises to Azure DevOps, addressing compatibility, customisations, code security, and best practices for a smooth transition.",
    "ResourceId": "qpo4Ru1VVZE",
    "Url": "https://www.youtube.com/watch?v=qpo4Ru1VVZE",
    "Date": "2024-11-06T05:45:03Z",
    "Captions": "If you're worried about compatibility problems once you've moved from TFS on-prem to Azure DevOps, I probably really wouldn't worry that much about it. Everything that works on-prem works in Azure DevOps. It's more the other way; not everything that works in Azure DevOps works on-prem, where there's more likely to be compatibility issues. \n\nBut there are certainly, if you're on an older version of Team Foundation Server, we did a migration recently for TFS 2010, and they had some customisations that they built. They had some customisations that they bought that are just no longer a thing. They're no longer a thing in newer versions of on-prem TFS, so we had to plan around what they were going to do differently when they moved to the new location. \n\nRight, because even just an upgrade of TFS, they're going to lose that functionality, and they have to upgrade. TFS 2010, I think, was out of support five years ago, maybe longer. So they were really hurting from that perspective. They need to be in compliance if you want support, data integrity. These are the systems that hold your company's IP. \n\nRight, you need the code to be able to build your product, and that needs to be safe and secure. This is your organisational asset. If you have any building of software going on, this is a very expensive asset to work on, so you need to make sure that it all works. \n\nAs you move up to the cloud, you will still have a bunch of on-prem stuff going on. You probably have on-prem build agents; you probably have other things locally. Those can largely just continue to function as is. The agents will just connect to Azure DevOps in the cloud, and it's a one-way system. So the agents talk to the cloud; the cloud never talks to the agent, so you don't need to punch any holes through your firewall. \n\nAnd then you've got to consider all of your own in-house customisations that you've created. It's very easy and has been for 14, 15 years to create extensions, plugins, and other systems that bounce off TFS. So you'll need to take into consideration what they are going to do in the new model of working with the cloud. These are all things that you can just resolve; they're not that difficult."
  },
  {
    "Title": "Mastering Data Migration: How to Minimise Downtime and Keep Your Engineers Productive",
    "Description": "Learn practical strategies to minimise downtime and maintain engineer productivity during data migration, including planning, dry runs, and effective use of Git for collaboration.",
    "ResourceId": "tzmbqdEULUY",
    "Url": "https://www.youtube.com/watch?v=tzmbqdEULUY",
    "Date": "2024-11-05T06:00:34Z",
    "Captions": "When you're doing a migration of data, downtime isn't of always great concern for organisations. If you've got 5,000 software engineers in your collection, you don't want it to be down for an extended period of time and your engineers not able to work. I'm going to put that in air quotes because it's not really true; not able to work for that period of time. \n\nSo, there's a couple of things that you do need to kind of understand in this context. Even if TFS or Azure DevOps is down, like offline, your engineers can still work. It's just more difficult for them to collaborate together. So, if they're using Git as the source control system, which is the primary source control system in Azure DevOps and TFS, then they're able to even share code in a way that works within the context of the tool, even when they're offline. That's how Linux was created; there was no central source control system and they sent patches to each other over email. \n\nRight? So, Git fully supports that. Obviously, they wouldn't have access to the work items, so they would need to know what it is we're working on for the time that it's down. But I will point out that if you plan it right, downtime can be absolutely minimal. The largest migration we have done was 2.5 terabytes, a collection that we moved up from on-prem in Europe to Azure DevOps. \n\nWe took the system offline because it needs to be offline to do the final part of the migration. We're actually moving up to the cloud. We took it offline at 5:00 p.m. on Friday, and we were back online Sunday morning. The engineers came in over the weekend to validate that things looked good. They did their cursory checks; everything's in the right place, that that's working, this is working, that kind of thing. \n\nAnd they were back up and running Monday morning. So, that's probably one of the very few people out there that have collections that big. But if you plan it right—and that took, in order to do a 2.5 terabyte system in that time, we probably took 3 to 6 months of planning and dry runs and validations and making sure everything's good in the data. \n\nDry runs are really important for that. Sorry, that's practice runs, right? To get the data out of the data centre in a timely manner, get it up to the cloud in a timely manner, or get it processed, because that can be quite failure-prone. You want to have done a dry run so that you know that's going to work. \n\nAnd perhaps have Microsoft on hand to help out if there are any issues. So, that was minimal downtime. I think that was about 5,500 software engineers, and they really, really had no downtime. 5:00 p.m. on Friday, back up in the morning. But they were a global company, so there was some downtime for some engineers in some regions, right? Because that's just unavoidable. But we minimised it as much as possible."
  },
  {
    "Title": "Mastering Data Integrity: The Key to Successful DevOps Migrations",
    "Description": "Learn how to maintain data integrity during DevOps migrations, weighing full versus selective data transfer, managing risks, and ensuring team readiness for Azure DevOps.",
    "ResourceId": "hWyF6CbcbQ8",
    "Url": "https://www.youtube.com/watch?v=hWyF6CbcbQ8",
    "Date": "2024-11-04T06:06:49Z",
    "Captions": "Here's what you need to know about data integrity and your DevOps migrations. You can't have everything depending on what it is you want to do. So there's a balance to be had between the fidelity of the data that you're migrating and the flexibility that you want as part of your migration process.\n\nAs your DevOps on-prem was TFS, it has a database-based architecture. Right? So you have a whole database of data. If you're taking that whole database, the collection in TFS and Azure DevOps, if you're taking that up to Azure DevOps services in the cloud, as one thing, the whole thing, we're taking it together, then we have the highest fidelity possible. Right? We're effectively taking the entire database up with everything in it, in exactly the same format that it is just now.\n\nBut for many organisations, that's not what they want to do. They have a couple of teams that want to go, or they have some teams that are able to go and other teams that aren't. So part of that migration process, we've built a bunch of tools that allow you to selectively slice out the data that you want to take. But it does mean lower fidelity because we're effectively replaying the story of the data against the new environment. Right? So we're not importing the database; we're replaying what happened with the data, and that means that there is a little bit of data loss. Things don't always go perfectly.\n\nBut within that context of taking your choice of data, pick and mix from one place to another, it is the most flexible approach you can have."
  },
  {
    "Title": "Unpacking the Scrum Master Role: Moving Beyond Misconceptions to True Accountability",
    "Description": "Explores common misconceptions about Scrum Masters, clarifies their true accountabilities, and highlights the importance of principles, competence, and organisational impact.",
    "ResourceId": "Cia3d_y9akQ",
    "Url": "https://www.youtube.com/watch?v=Cia3d_y9akQ",
    "Date": "2024-10-25T07:02:17Z",
    "Captions": "There are lots of misconceptions about what the accountability of the Scrum Master is supposed to entail. Focus on, um, most of this manifests because of the difference between an organisational role, which might include many accountabilities, including Scrum Master, even if it's called Scrum Master, um, and the actual accountability as what Scrum talks about and what it genuinely leads to. Because there's been so many people that have transitioned from whatever they did before into Scrum Master, so they might have been, um, project managers, they might have been managers, they might have been developers, right? And they transition into the role and they have limited understanding of the core principles and philosophies that underpin Scrum and underpin Agile. Um, they end up making some very common, um, mistakes. So common that you'll see, um, one of the most common responses when people say, \"Oh, Scrum's not working, we did this,\" and the most common response is, \"That's not Scrum.\" \n\nThe reason that's the most common response is because the thing that they describe, RBE, is not talked about in the Scrum Guide. It's not part of Scrum; it might not even be part of anything to do with Agile. Um, and people will say, \"Well, but in Scrum you have to...\" Great example: \"You have to have a user story.\" User stories are not a Scrum thing. \"You have to have a burndown; if you don't have a burndown, you're not doing Scrum.\" Burndowns aren't a Scrum thing. Burndowns come from before Scrum, and yes, they might have been encouraged, uh, for a while, but they're not in the Scrum Guide anymore for sure. Um, user stories were never in the, I don't think they were ever in the Scrum Guide. I would need to go look at the history of that thing, but, um, I'm pretty sure they don't. Planning poker? Not a Scrum thing. User story points? Not a Scrum thing. All of these things are mechanisms that people have chosen to use and might be quite common within the context of Scrum, but that doesn't mean there's something that you have to do. \n\nRight? If it's not working for you, stop doing it or pick something else, right? Um, so one of the most common, uh, dysfunctional behaviours that I see Scrum Masters time after time doing is focusing on mechanisms. And the reason this goes back to the confidence story that we have, the reason they're focusing on mechanisms is they have no skills and abilities and knowledge within the context of the philosophies, principles, and theories. If you don't understand the philosophies, principles, and theories, you can't apply them in new and interesting ways. You're going to look at what other people are doing and just copy that. So you end up copying planning poker. \"We're just going to do planning poker; we're going to do user stories; we're going to have a burndown.\" We're going to do those things that everybody else is doing because I don't understand why they're doing it. I don't understand the principles, philosophies, and theories that underpin the reason this thing isn't successful for this particular team or this particular company. \n\nCompetence, right? Move away from these mechanical practices that are a choice and move towards understanding the principles, theories, and philosophies. Another great, uh, most common, um, Scrum Master thing is actually the reason that Agile Coach exists, even though there's no such thing as an Agile Coach, is people think the Scrum Masters focus on the team. It's not; that's one-third of their focus. Scrum Masters should be focused on the team, the product owner, so the business side, and the organisational structure and capability. All three of those things in equal measure are the accountability of the Scrum Master. So focusing on the team means that you're perhaps creating suboptimal improvements within that team that then create an overall dysfunction in the organisation because you're not doing, you know, all of... If you're working in a team and it's within the context of an organisation and you're trying to help that team and you get them to do something that causes friction with the rest of the organisation, right? You probably got a suboptimal change. \n\nWhat you should be doing as a Scrum Master, instead of making that change in this team and making them unpopular within the organisation because they're not doing the things they need to do, is to work on changing the organisation. Or perhaps it's the right thing to do, right? Just change it, and they see it's being successful, and now we can do that. But that's a strategy. Are you using the correct or most effective strategy within the context of your understanding as a Scrum Master of the theories, principles, um, and philosophies that you're trying to fulfil, right? That will help you make those choices. \n\nUm, there's a whole bunch of, uh, stances. Uh, we talk about stances of the Scrum Master, um, and for me, the stances: coaching, mentoring, uh, teaching, right? These are stances of the Scrum Master, and the ones that we see time and time again, actually, I have... They're so common they're included in the advanced Scrum Master class because they're so common. Does the Scrum police, right? \"That's not Scrum,\" or \"If you're not doing user stories, you're not doing Scrum,\" or, um, \"Oh, you... The team shouldn't be talking to the customer,\" right? All this crap. \n\nUm, you've got the scribe of the team, so the Scrum Master writing things down for the team. The Scrum Master has no, in general, I'm using this to highlight a specific context. The Scrum Master has no need to have permission to... No, no, no specific need for that. I've helped loads of teams that use Jira, and I've never touched Jira. I've never been an admin of Jira. Um, those are not part of the Scrum Master's role. And that brings us to Jira admin, right? Um, being the chairman of the team, being the secretary of the team, being a hero on the team, all of these are very dysfunctional behaviours that are the result of a lack of competence within the context of Scrum Mastery, right? \n\nUm, so anytime a Scrum Master is making decisions, they're not being a Scrum Master, right? Any time they're, um, hiring and firing, although those are things they might do, right? It's absolutely possible for a Scrum Master to also be the manager of a team. Therefore, they might be accountable in the organisational context in addition to them being a Scrum Master for the team. They're also accountable for reports, for hiring and firing, for decision-making, right? For other things. But that's not the focus of the Scrum Master. And if those other things are conflicting with enabling the effectiveness of the team, then they become something that it's expected that Scrum Master to try and address, right? \n\nSo this idea of the Scrum Master, the reason they moved it from talking about it as a role to talking about it as accountabilities is because most people in organisations have multiple sets of accountabilities, right? And not all of them are Scrum-related. Scrum is not your whole world when you're a developer, when you're a product owner, when you're a Scrum Master. If you're a Scrum Master, you might also be a manager. You may be a delivery manager accountable for delivery, accountable for other things, right? You might be accountable for, um, uh, uh, reviews. You might be accountable for various things. If you're a product owner, you're probably a product manager. You're accountable for other things within the organisation. If you're a developer, although you're doing Scrum, you might also be accountable for other things in the organisation. You might support and maintain things that are different from what it is your main piece that you're working on. \n\nSo there are so many common misconceptions, and I feel like these misconceptions are so common that they become fact. They become true, like you must do story points, you must have user stories. Try and move away from those things. Try and look at... Do your research, right? Understand why those things exist, and perhaps they are the right thing for your organisation or your team, but also perhaps they're not."
  },
  {
    "Title": "The Problem with Incompetent Scrum Masters: Why Lack of Skills in Team Context Results in Poor ROI",
    "Description": "Incompetent Scrum Masters reduce team performance and ROI by lacking key skills. Learn how to measure their impact using innovation, usage, and delivery metrics.",
    "ResourceId": "EMJyUOy2gP4",
    "Url": "https://www.youtube.com/watch?v=EMJyUOy2gP4",
    "Date": "2024-10-22T07:00:08Z",
    "Captions": "Having Scrum Masters that have a lack of competence within the context of the team's work, the product owner's work, and the organisational structure means that you're going to be getting less return on your investment. I mean, that's fundamentally what it is. The team is probably going to be delivering less stuff. It's probably going to be making fewer bets on new stuff, so you're probably going to spend less time on that new stuff, and they're probably going to have higher defect rates, right? Because they don't have the modern engineering excellence and DevOps practices that are needed to build awesome products in today's world.\n\nThere are absolutely teams out there that are doing this without Scrum Masters, right? I'm not disagreeing with that. I'm saying that if you have a Scrum Master with the capability to help a team maximise those capabilities, then you're going to be able to vastly increase your ROI for your team. But you need Scrum Masters with those competencies; otherwise, all you're going to get is teams that are happier with each other, not teams that are able to actually deliver more stuff. Both of those things are important, but delivering more stuff is where your ROI comes in.\n\nWhat I would want you to do is collect some metrics and use those metrics to measure the fundamental benefit that the Scrum Masters are bringing you, okay? Bang for their buck, right? Here are some examples. I'm going to use an example over here because I have some data around it. I would want to measure innovation rate, which is the percentage of time that your team spends working on net new functionality versus maintenance and support and augmenting existing functionality. \n\nIf you're Netflix, that's a new series versus a second season of an existing series, right? Or remastering some older series, right? So that's this measure. I want to measure my on-product index. I want to be measuring the percentage of time that my team members have to work on my product versus having to work on other things. What percentage of time are they actually working on my product? \n\nI want to be monitoring my usage index for my product, so I'm looking at the data around how my users interact with my product, right? That's a great metric. And then perhaps, if you have an app that is installed, I maintain and support one. You have the installed version index: what percentage of people running your tool are on the latest version of the tool, and what percentage are on older versions of the tool? Because that goes to engineering excellence and various things.\n\nLet's say you had those metrics. I'm going to tell you the industry standard for each of those metrics, and we're going to base it on a dollar. And yeah, I'm using US dollar, pound, Euro, whatever you want. For each dollar you spend on your product, what you lose by each of these metrics. The innovation rate is about 29%. That's the average innovation rate; that's from the DORA metrics. So for every dollar that you spend on your product, you're getting about 29 cents of net new value, right? For opening up new markets, for adding new capabilities to your products, 29 cents. \n\nSo you're 29 cents in the dollar, right off the bat. Most teams spend about 80% of their time working on the product and 20% of their time doing other stuff for the organisation. So that could be meetings, all hands, training stuff, right? It's about, I think that's about a day a week, isn't it? Something like that. Anyway, so now you're down to 23 cents in the dollar because you've lost 20%.\n\nWhat about usage index? What do you think the metric shows? The data that I've seen, some of it's from real customers. The happy metrics are from the Chaos Report from the Standish Group in Boston, and they found that only about 35% of the features that are built are actually used by your customers. Only about 35%, right? That's because we're not changing fast enough; we're not adapting fast enough. 35%. So now we're down to 8 cents on the dollar. \n\n8 cents on the dollar. Eight out of 100, right? 8 cents return on investment for a $1 input. What the heck? That is terrible. 8 cents on the dollar. And that metric is really optimistic. I did some work with a bank in the US who said that 35% usage index? That's crap. We know our customers way better than that. We understand they're using all of our features, or as much as, you know, they're, oh, we're 80%, right? \n\nSo we said, why don't we add some telemetry onto your product and let's see? They are cloud-based products; it was easy. So we added telemetry to the product, we gave it three months, and we looked at the data, and it was about 8% of the features in the product were actually used by their customers. And that was over a year-end. Luckily, we were just in the right time for that, so it was over a year-end. So that was a really good picture: 8%, not 35%. 8% of the features. \n\nSo that wouldn't be 8 cents in the dollar; that would be a lot less. And then let's say installed version index: let's say it's 70%. 70% of your users are on the latest version of your product. Now we're down to 6 cents on the dollar. Do you even know what your numbers look like? Just those metrics: innovation rate, on-product index, usage index, and installed version index. It's only four metrics. Go collect them and then measure your progress over time. \n\nIf you hire Scrum Masters, they should be able to change those numbers. Your Scrum Masters should be accountable for the effectiveness of the team, and you can measure the effectiveness of the team within the context of a product by some of these metrics. These are not the only metrics; I just picked four, right? Because I have some data around them. Pick some metrics that are product-based metrics, value-based metrics for you as a business, and expect those numbers to improve when you hire Scrum Masters. If they don't, you've got the wrong Scrum Masters."
  },
  {
    "Title": "The Crucial Role of Competence: How Knowledgeable Scrum Masters Drive Team Success",
    "Description": "Scrum Masters with deep knowledge and competence enable teams to deliver better products, drive business outcomes, and foster real improvement in software development.",
    "ResourceId": "r9aCEFpUHWU",
    "Url": "https://www.youtube.com/watch?v=r9aCEFpUHWU",
    "Date": "2024-10-21T05:32:11Z",
    "Captions": "When Scrum Masters don't have an understanding of both the philosophies, theories, and practices within the context of the team, and an understanding of what the team does every day, the impact on those teams and those organisations is profound. They're not going to improve. If you had a coach for a soccer team that didn't understand soccer, had never played soccer, how effective would they be at coaching that team in the processes and practices that you need?\n\nNow, immediately a bunch of folks are thinking, \"But Ted Lasso did it.\" You've got to remember Ted Lasso is a fictional character, and that fictional character runs off a script. The script works because of plot. So he's a good coach, and a successful coach, sorry, because of plot, right? Not because it would work in the real world. Almost every successful coach for a sports team understands fundamentally how that sport works, the training, the specific training techniques that need to be done in order to maximise the capability of that team.\n\nIf they don't, they have sub-coaches that help for a specific thing. Like, I think in American football, you have an offensive coach and a defensive coach, and then you probably have an overall coach. The overall coach might have a different skill set from the offensive and defensive coaches, but they have a fundamental understanding of the sport, its rules, the training techniques, the types of muscles that are used by the team, and how they can train those muscles to be as effective as possible. How they prevent injury, all of those sporty things.\n\nAnd that's what we're talking about when we talk about the competence of Scrum Masters. They need to understand if they're a Scrum Master for an engineering team, they need to understand all the engineering team things that the team needs to be able to learn, practice, and do change in order to become more effective. If that's not there, they won't change. If you have somebody who is just a professional coach, right, and perhaps taking a two-day Scrum Master class, typically what you will see is very little actual improvement in the team's ability to deliver product.\n\nThey might be better at engaging with each other, but are they actually better at delivering product? Because that is what your business cares about. They want product. They want working, usable product that solves business problems. That's what we're here for. That's what we're paid for. That's the outcome they want to improve. Have these Scrum Masters actually improved? Is that what we're measuring at all?\n\nThe lack of basic skills around Scrum Masters results in an organisation's continued status quo, which is likely an inability to deliver. This is why they brought in Scrum Masters in the first place, because building software is hard. Building products that don't exist yet is hard. Are we making the right bets? Are we using the right philosophies in how we build our product, how we design our features, how we get our features in front of our customers, how we engage with the rest of the business? Without understanding all of those things, we're not going to be able to help the team be effective.\n\nWe're going to have them, I don't know, I'm being facetious, sitting doing some Lego team-building exercises and perhaps building a bridge with spaghetti and straws, right? Which sure, might be great for a team-building exercise like Myers-Briggs. I've done some Myers-Briggs exercises with teams I've worked on for organisations I've worked with, and it's a great team-building exercise, but it's of no value for delivery.\n\nThere's only so much you can help a team from the context of the team working together more effectively, but there's a massive difference you can make by improving their knowledge. It's like in Lean; you can make a certain amount of impact by looking at reducing batch size. If you make the work items smaller, you're going to improve the flow. But your biggest bang for your buck is probably limiting WIP. That's where the highest percentage of a Scrum Master helping a team comes in.\n\nThe biggest bang for your buck is that Scrum Master being able to teach the team new skills and capabilities that enable it to be more effective, enable it to build better products, to test more effectively, and have higher quality. These are the primary skills that you want your Scrum Master to have: knowledge and competence so that they can help the team.\n\nOnce all of those are awesome, perhaps at the same time, right? But once all of those are awesome, the biggest bang for our buck then becomes because the team is already awesome at engineering. They have the best DevOps practices; they have the best architectures they can in their product. They have the most effective engineering systems. Then, if we enable the team to collaborate more effectively, we'll get more stuff, right? That's a small percentage of the overall effectiveness, and we get that from competence.\n\nSo organisations are suffering because they don't have Scrum Masters that fundamentally understand the work that needs to be done and how to enable that work to be more effective."
  },
  {
    "Title": "The Competence Crisis in Scrum Master Roles: A Call for Excellence",
    "Description": "Many Scrum Masters lack essential skills and experience, leading to poor agile outcomes. True competence requires deep knowledge, practical experience, and ongoing learning.",
    "ResourceId": "GJFklM1U5Pc",
    "Url": "https://www.youtube.com/watch?v=GJFklM1U5Pc",
    "Date": "2024-10-16T07:00:09Z",
    "Captions": "The current state of Scrum Masters in the industry at the moment is pretty terrible. There is a massive systemic lack of competence in the Scrum Master role and the Scrum Master accountability across organisations. I think much of this comes from the boom that we've had, the cash cow that we've had in the agile world, where the demand for Scrum Masters to help teams, which really wasn't realised as much before the early noughties, has far outstripped supply. \n\nSo we want to have somebody with some kind of competence within this context on every team, in every group, in every department of every company. Whether you're called a Scrum Master or an Agile Coach or whatever, it's all the same skill set. Because there's been a massive demand but very small supply, the price has gone up. And because the price has gone up, all the folks who aren't even in it, aren't even in that world of the context of that team, are looking at these very lucrative jobs over here in this other space, and the grass is greener over there. \n\nSo let's go over there. We have lots and lots of people over the last 15, almost 20 years, that have moved into this space to be a Scrum Master or Agile Coach, who largely have no skills whatsoever within the context of the team. Maybe they've done a two-day Scrum Master class, which, FYI, does not make you a Scrum Master. Just like passing your driving test doesn't make you a Formula 1 driver. It just means that you're hopefully not a danger to everybody on the road. \n\nHopefully, that doesn't mean that that's not true. You've got a lifelong learning and experience. You can't just jump in a Formula 1 car; you can't just jump in any racing car on any track without some level of skills, training, knowledge, expertise. You can get a track day, but expect there to be limitations on what it is you can do because it takes experience and time to build that experience and understanding of the detail of the world within which you're coaching and helping teams. \n\nIf I was coaching, here's a great example of a lack of competence. I did a bunch of training, not coaching, but training for police officers in Ghana. They were going to be using Scrum as an organisational change mechanism, not to do their work. We were teaching them Scrum so that they could use Scrum to change as a change mechanism in their organisation. I have competence and can understand organisations and organisational structure through experience, and understand how Scrum can be used to incrementally and iteratively change your organisation and deal with that complexity. \n\nYou have a backlog of organisational changes and what cadence you are iterating on them, all those kinds of things. But I have absolutely zero understanding of police work beyond what I see on TV. I have no experience or skills. I can't say to a police officer, \"This is how you should do your job and it will make you more effective.\" I can't do that, and I wouldn't do that. \n\nWhen I was teaching the training, I had the head of CID in one of the classes. We did a bunch of classes. The head of CID is, if you're in the US, it would be the chief of detectives, maybe. I don't know. The head of detectives, lieutenant for detectives. CID in the UK and the British Empire world is the investigative division. I don't even know what it stands for. Anyway, he was the head of CID, and he started asking me a bunch of questions about how he could apply the things we were talking about to police work. \n\nI had to say, \"Look, I have no knowledge or understanding of what it is you do beyond the movies.\" I can imagine that you don't know how long it's going to take to solve a case. You have to do a bunch of work. There are some things you always have to do, and there'll be something different in every case, everything that you do. But you know perhaps what the definition of done is, what the list of things at the end is that you need to have. \n\nIt's great if you can figure out how to leverage some of these practices to help with that, but I can't help you with that because that's not my background and expertise. What we're seeing and have seen over the last 15 to 20 years is loads of people coming into IT. My background is IT; that's where this stuff kind of spawned from most recently, right? The Agile Manifesto for software development. \n\nThey have no background in software, no background in any sort of IT, and they've perhaps done a two-day Scrum Master course or perhaps done a coaching class. So they've learned to coach, professional coaching experience, and that's just not good enough to be able to fulfil the accountability of the Scrum Master. The Scrum Master has an accountability to help the team be as effective as possible, and they do that through three areas. \n\nThey have three sets of accountabilities, as it were. One is the accountability to the team itself. So what can they do to help the team be effective? In order to help a team be effective, you need to understand the context within which the team are working. Whatever that context is, for me, it's software engineering. If you're going to be helping a team of software engineers become more effective, you have to understand the practices, the principles of that work so that you can help them. \n\nIn the software engineering world, we have modern engineering practices, we have DevOps, we have things like release planning and scaling, and all of those things to do with the actual engineering practices. But you also have stuff you might gain through experience in other areas, like how to do organisational change. That's not something that maybe you need specific skills for, or conflict management. That's something that you might learn in your professional coaching. \n\nBut that doesn't remove the need to have that understanding of what the team is working on, what it is they're doing. For a Scrum Master within that context, within the context of a software team, there would be other things on my list if it was for a different type of work. But for a software team, I would expect them to understand DevOps principles, DevOps practices, understand what it takes to fulfil them, what it looks like when they're being successful, to understand modern engineering practices. \n\nIf the team's work is building software, you need to understand how to build software in order to help the team be effective at building software. They might not know. I've worked with lots of teams all over the world as a DevOps consultant, as an Agile consultant, that have huge gaps in their understanding. One of the biggest ones that I usually use as an example is using source control and understanding branching but not understanding merging. \n\nNot understanding that there are tools within your source control system that allow you to merge code in a mostly automated fashion, right? If there's no conflict in changes, and then dealing with conflicts. I worked with a team of 30 engineers in an organisation. They've been building software for many years. Those lead engineers, there were people who had been building software for many, many years, and they had no idea that there were tools inside of the source control system that allowed you to merge code. \n\nThey were doing it manually with Beyond Compare. They were just comparing files and copying across the bits that they wanted, hugely error-prone, huge number of bugs introduced by that kind of mechanism because they weren't using those tools. If I didn't know that those tools existed, if I didn't understand the workflow of source control, regardless of whether you've actually used source control or not, although I think if you're going to be working with software teams, you have to understand how source control works. \n\nYou have to understand how automated builds work. You have to understand how work items, the work that you're doing, can be linked to the code so that you can get more effective understanding of what's being changed and how it's being changed and how you're testing it. That doesn't require you to have been a software engineer. If you've been a tester or you've been an analyst on a team and you've done those things for many years, you're going to understand those things. \n\nIf you don't understand those things, you need to learn those things in order to be an effective Scrum Master for a software engineering team. But that's just one of the three things that a Scrum Master is accountable for. They're also accountable for services to the Product Owner, not just to the team, but specifically to the Product Owner. \n\nSo what does the Product Owner do? The Product Owner maximises the value delivered by the work from the team. One of the Scrum Master's jobs, roles, accountabilities, things they have to do is they have to be able to enable and help that Product Owner become more effective because that Product Owner might not understand the things that they have to do. They might not understand the processes and practices that are available to them. They might have outdated knowledge. \n\nThey might come from a traditional background where we're not doing fast iterations. While most of the practices can still be used, they need to be modified to allow it to work in the iterative and incremental world of continuous delivery and continuous learning. So how do you help them if you don't understand what they do? How do you know that they don't understand hypothesis-driven engineering practices? \n\nIf you don't understand hypothesis-driven engineering practices, how do you know that they should be able to look at the telemetry from the product and understand and use it to help inform the decisions that they're making? How do you know that they need to be building relationships with people inside of the business and how they build relationships with people inside of the business and how they understand the dynamic of those relationships? \n\nUnless you do, you can't help them do that. You can't help them do something that they don't know or don't understand how to do already. In my experience, at least in my experience, right, because remember my caveat with everything is I get called by people who need help. In general, Product Owners don't have the background knowledge, understanding, or experience to know how to maximise the value delivered in the product. \n\nThere are absolutely product managers and Product Owners out there who do understand that, absolutely. But they don't need to call me to come and help them. They don't come to my Product Owner classes. They don't come to my product management mentor programmes because they already know that stuff, so they can do it. But if you want to help those people who don't understand, you need to understand that thing to be able to help teach them, coach them, and mentor them. \n\nAnd we're not even done yet because there's a third thing. The third thing is the organisational, I guess, Lisa Atkins calls it organisational transformational mastery. I usually call it organisational evolutionary mastery because I feel like evolution doesn't have an end, whereas transformation might have an end. It's a continuous thing. How do you help the organisation change? \n\nIf you don't understand organisational topologies, if you don't understand how organisations function and go together, if you don't understand the options that have been known to be effective within that space for things to try and see whether it works within this particular organisation, if you don't have that standing, how do you know that something needs to change? How do you know that things can be different? \n\nYou've got that accountability to the organisation for helping them be effective. When you bring all of that together, you end up with an individual that is quite significantly skilled with lots of experience. They probably have a grey beard because they've been around for a while, or grey hair. They have been in the trenches with the team. They've worked as a team member. \n\nWhen I'm thinking about a Scrum Master, I'm thinking about somebody who's worked as a team member for many years, gained a bunch of experience, helped their team. Their team has realised that they're helping. They look to them as a leader in that space of effectiveness, and then that grows over time. Not just the team looking to them; the Product Owner looks at them, and the other people in the organisation start looking to them as somebody who can help them be more effective, deliver more value, change the way we do things because they have this understanding of how all of the... \n\nThey have a core understanding of the theory, the philosophies, and the principles to be able to apply them within multiple various contexts. But you get that through learning. You get that through experience, not just experience of doing it and trying it, but experience of learning and figuring it out and then seeing whether it works and closing those feedback loops and having that triple-loop learning and changing your worldview and how you can do things. \n\nThis is just not that common. There's a massive deficit at the moment in the level of competence. If you're interested in how big that deficit is, there's some data from an organisation called Scrum Match, who review Scrum Master skills. As part of their story, it's a little bit of a recruitment story, but they review Scrum Master skills. \n\nIt's not just people who are looking for jobs; it's to get a badge. \"I'm this level of Scrum Master.\" Some people look at it as a badging. What they found was that 61% of the people that they engaged with, reviewed who were Scrum Masters, already perhaps had been a Scrum Master for 10 years or more. So there were people in that list that were 10 years or more. \n\n61% of them shouldn't be Scrum Masters. 61% of them, I think it was 38%, I'm going to be a little bit off in the percentages but only by fractions, it was about 38%. I think had never read the Scrum Guide. There were Scrum Masters who had been enrolled for 10 years or more, never read the Scrum Guide. \n\nThe rest of that 61% had read the Scrum Guide but kind of, you know, didn't really understand Scrum that well. I understand Scrum, and I can rudimentarily apply it to organisations. None of those things are good enough to be a Scrum Master. None of those things are good enough to help a product team be more effective. \n\nSo it's absolutely no surprise that as we enter a period of fiscal uncertainty, a global fiscal uncertainty, organisations are looking to reduce their costs, and they're looking at the capability of the people that they currently have as Scrum Masters, and they're saying, \"This isn't good enough. These people are not competent.\" If you're not competent, you're incompetent. \n\nThe majority of Scrum Masters in a row today are incompetent. They should not be in that position. They should not be doing that role. The only way organisations have to demonstrate their lack of satisfaction with that is to start getting rid of Scrum Masters and Agile Coaches. That's the position we're in right now. We're seeing a massive industry correction. A competence bubble has popped, or an incompetence bubble has popped. \n\nThere are loads of good Scrum Masters that have been caught up in the nasty as organisations are divesting themselves. Almost all of these organisations are still hiring Scrum Masters; they're just being more discerning. I think we're moving from an era of wild west Agile towards more of an era of competent Agile."
  },
  {
    "Title": "The Importance of Competence in Organizations: Building a Culture of Learning and Growth",
    "Description": "Explores how fostering competence, continuous learning, and well-being in organisations leads to happier teams, better products, and sustainable growth.",
    "ResourceId": "I9avUDYFw-E",
    "Url": "https://www.youtube.com/watch?v=I9avUDYFw-E",
    "Date": "2024-10-15T06:45:00Z",
    "Captions": "It's critical that we start investing in the competence of the people that we have, of hiring the right people, of keeping the people that we have that are competent, in supporting them in experimentation and learning and figuring things out. Because without them, we're not going to be able to create the value that we need. We're not going to be able to create the products that are going to lead to us being successful.\n\nThe thing I always think about was an epiphany of mine many years ago, and that's that unhappy, sad people don't build great products; they build mediocre ones. Do you want to build mediocre products? If you want to build great products, you need to find great people. You need to find people that are happy. You need to create environments within which you encourage people to be happy. You encourage them to learn. You encourage them to care about what it is you're doing and the products that you're building.\n\nThe first part of caring is self-care, and self-caring within the context of the work environment means caring about your knowledge and your capability and your competence and doing something about it. Just like if you care about your health, you eat well and you go to the gym. If you care about your competence, you learn and you practice. That's why it's so important that we have this focus on competence within organizations and stop hiring for a lack of it."
  },
  {
    "Title": "Where Agile Went Wrong: Understanding the Competence Crisis",
    "Description": "Explores how early assumptions about competence led to Agile’s current skills gap, highlighting the need for continuous learning, better hiring, and deeper expertise in teams.",
    "ResourceId": "txN41c6znbE",
    "Url": "https://www.youtube.com/watch?v=txN41c6znbE",
    "Date": "2024-10-14T07:00:38Z",
    "Captions": "Agile went wrong fairly early on. It started to go off the rails almost right from the beginning because there were certain assumptions that were made by the folks that codified it that created the Agile manifesto. So think of those folks as they were the right people that were available at the right time. Right, so there's probably people that were around at the time that could have been in that room but weren't, right, just because they weren't available or whatever. But the people that were invited to Snowbird were the best of the best working with the best of the best. So because they were already very highly regarded in their industries, they were already working with people who were very highly regarded, and there was an assumption of competence, an assumption of capability of the people that were participating within the process that we're talking about.\n\nSo for Agile to be successful, we have to be continuously trying to figure out whether we're doing the right thing. We have to be continuously validating. We have to be continuously learning and figuring out new ways to do things and continuously closing those learning loops so that we change our mental model of how things work. And I don't think our current systems of education and the world itself is set up to create the majority of people that are like that. I feel like the majority of people aren't really interested in all of that stuff and perhaps just want to go to work, get a paycheck, and go home. I think a lot of people can be convinced to work differently, but if we're talking about what's the current status, I would probably hazard a guess, and it is a guess, that only about 20% of people are really interested in that level of commitment of figuring things out, of trying to do things.\n\nWhich means that the demand for folks that understand Agile, now that's quite a wide bucket, right? Folks that understand Agile within organizations, whether that's for leadership positions like Scrum Master on up through the organization or for product-focused folks, product management through the organization, or for doers, right? The I work with software teams, so generally it's the engineering team members that I'm talking about there. But the doers up through the organization, what percentage of your leaders, product people, and doers actually take the time to go read blog posts, read books, experiment, discuss, and collaborate? I participate in a number of communities, like meetups, where people gather to discuss some of these topics and learn more, and there's not that many people there compared to the number of people that are doing that type of work.\n\nWhen you sell a book on a particular topic, the well-known people, you know, they sell more copies. The new Spring Gold book has been doing awesome, but still the number of people that buy it is a tiny percentage of the people that probably need to read it. So I think that when we need to caveat when we're talking about Agile, Agile teams are like special operations teams, right? They have a distinct particular focus on maximizing the value from the work done, right? And continuously iterating on that and learning new things and practicing. They probably spend quite a high percentage of their time learning and practicing and trying new things, and that's not most teams, that's not most organizations, that's not most people.\n\nI read a blog post years ago, and it struck me. This was when I was brand new. It struck me very much that the first line was, \"If you're reading this, you're already in the top 10%.\" It was about software engineers and learning and that kind of thing. If you're reading it, you're already in the top 10%. What percentage of your people actually read and learn and try to better themselves? That is the assumption that you're going to have a team of people like that that comes from Agile. There's kind of a fundamental requirement of being Agile is having folks like that, and that's kind of why I guess the Scrum Master exists to proxy some of that because you're going to have lots of people on your team who are not like that.\n\nSo the person who's like that on your engineering team, the doer who's most focused on the effectiveness of the team, is probably the perfect choice to be the Scrum Master and then move up through the organization through leadership roles. A great example of that is Satya Nadella, right? He was a software engineer and now runs the whole show. So the thing that went wrong is Agile accelerated much more quickly than there was supply of these folks. There was an assumption that these folks had those skills and capability, and they're just not there, and they don't exist today. There's not been systemic investment in bettering people within organizations of hypothesis-driven practices, right? Of encouraging people to experiment and try things and place bets.\n\nIf you can get that efficiency, we can spread that across the organization because it works within our context. If we don't, then we advertise the cost of running that experiment across the whole business, and that philosophy is just not fundamentally there. So when we do find people that are really good at it, that's the folks that we want to have promoted through Scrum Master through leadership in our organization. But they're so few and far between that even within that context, most people in positions as Scrum Masters, there's some data from an organization called Scrum Match. Effectively, I'm going to paraphrase this; it's not quite the way it works, but they're effectively validating Scrum Masters so that if you're going to go hire this person as a Scrum Master, you know what you're getting.\n\nSo it's validated through a face-to-face validation process with two professional Scrum trainers who understand not just the Scrum Master's competence within Scrum, right, but their competence within enabling teams to be effective, enabling product owners to be effective, and enabling the organization to be effective. So all the way up the tree, and they give effectively a capability level based on their engagement with that person. I think it's like a two or three-hour process, right? Validation process of talking and discussing and describing scenarios and talking about the skills and what they found. Not everybody that's coming to them is looking for a job. For example, I went through their process, and I'm not looking for a job, right? But that's their intent is you have this moniker for your CV to validate for employers that you do have a certain level of skill.\n\nSo there’s certainly going to be a bias to people who are looking for work. What they found was that 39% of the people that were coming and saying, \"I'm a Scrum Master,\" hadn't even read the Scrum Guide, hadn't even taken the most basic learning step of reading the manual for the thing, the job that they're taking. And the Scrum Guide exists; it's there, it's been around for 14 years. These were not just new Scrum Masters; these were people who had been in role for up to 10 years. So this is somebody who's been a Scrum Master for 10 years in an organization and hasn't read the Scrum Guide. For me, that's a lack of competence. That is not capable of fulfilling the role of Scrum Master in an organization.\n\nI mean, it may depend on how the role of Scrum Masters is defined, right? I'm kind of separating here the idea of what the accountability for the Scrum Master is within the context of Scrum and the job title of Scrum Master, which is company-specific and will have other accountabilities. But at a fundamental level, if you're going to be a Scrum Master, you should have read the Scrum Guide. Even I think there was a further 12% that had read the Scrum Guide but had a really rudimentary understanding of Scrum, and then another few percent that probably weren't capable of applying it within the context. So what it ended up with was 61% of people who identify as Scrum Masters, perhaps currently hold jobs as Scrum Masters, are not capable of being Scrum Masters, yet they've been holding positions and have experience as Scrum Masters.\n\nThat is systemic of what we're talking about here. That's systemic of the problem that the two things, the demand has outstripped supply. Therefore, organizational hiring practices have systematically reduced the bar to meet the demand, right? The quality of the participants that they demand has dropped so that they can fill the positions. That means that there's a lot of people who have absolutely no business being Scrum Masters in role. You may go look to hire somebody, and they're like, \"I've been a Scrum Master for 10 years at XYZ,\" and they are still incapable of fulfilling that role.\n\nI just saw a comment recently. It was highlighted by one of my colleagues on LinkedIn of a Scrum Master who had been in role for two years. They'd been a Scrum Master for two years and didn't know what a release plan was, no idea what a release plan is, no idea how to create one or what one looks like. How can you possibly coach a team within the context of that organization and not understand the things that that organization needs to function? Rightly or wrongly, you might not like release plans, right? Or you might have a different idea of a release plan from what I have from a release plan. But if you've worked for two years in a company in a role for maximizing the effectiveness of teams and you don't know what the assets are that the teams need to create in order for the organization to consider them effective, you’re in trouble.\n\nAnd why? I mean, that's a specific occurrence. I'm not trying to throw them under the bus. But why do people not have this information? Why do they not understand it? Why are businesses hiring people that have no ability, absolutely no ability to do the job? For me, there's a couple of things that this comes down to. It comes down to the supply-demand issue, i.e., there are very few people who take the time and effort, who care enough about their capability to go do that stuff, to go read blog posts, watch videos, try stuff, learn. There are very few people in that category. I know lots of people in that category, right? I know lots of people who do that, but I think I probably wouldn't know the people that aren't because that's the circles that I'm in.\n\nSo all of my colleagues are kind of like that. I do come across people who have absolutely no interest in learning anything new, none at all. So that's a big piece. But I also think a big piece is organizations' willingness to cut quality to fill roles. I can kind of understand that in certain contexts, right? If it's software engineers, people on teams, doers, right? You can train doers. I would say it's much easier to teach somebody a programming language or teach somebody a test tool or some capability that they don't have than it is to teach them a philosophy. So that fundamental philosophy of continuous lifelong learning is something you need to hire for, not teach for, because you're probably going to be very difficult to teach that.\n\nI think please correct me in the comments, right? But I think that's going to be very hard to teach for such a fundamental pivotal role as the coach for the team. How are they possibly going to be capable without deep knowledge and understanding of the context of that team, the context of the product, and the context of the organization? Right? Those are the three contexts that that person needs. Now, you gain context in the organization, general organization, your organization, by being in it for time, right? You gain context of the product by either working in that industry or that context for a long time and then that specific product for a while. You gain context of the type of work that the team are doing by doing that type of work for a time.\n\nSo the most logical people to go through that promotion into Scrum Master, right, for the team, which should be a self-selection, not self-selection, I select it, but the team selects the person. They're the candidates for moving through leadership in the organization. They have empathy, they have skills in the context of the work that we're doing, they have skills in the context of the organization, and they have time in the organization, experience in understanding those things. That's who you want as Scrum Masters. You don't really want to be hiring them in because they're not going to have any of those contexts or potentially not have any of those contexts.\n\nThis is why the financial industry, who have very specific kind of idiosyncrasies, tend to require if we're going to hire people, they need to have worked in finance before. We're not going to hire somebody who's not worked in finance because it's too much trouble to teach them, and it's too disruptive because finance is like this. So I need people who are already able to work within that environment. So why does that just apply to finance? Why doesn't that apply to other places? This fundamental lack of not just lack of initial competence, right, but our skills atrophy. I once, and this was in finance, I worked in finance many moons ago. I probably wouldn't do it again as an employee for sure, but I worked in finance, and the person sitting next to me, I just started a new job. The person that was next to me was a user experience specialist, and they were complaining that they hadn't done anything new. They'd been working there for four years, and they hadn't done anything new in four years, and they felt like they were unemployable.\n\nThink how sad and dejected and unhappy that person is and how much effort do you think they spend on enabling the success of the organization? None, right? They're not spending any time on that. They're biding their time. That organization actually didn't last super long after that. But that's that fundamental competence that you should be looking for, and we need to have that focus. Otherwise, we're going to continue to end up in exactly the same position, which is bringing what organizations have been doing for many years. We're going to take the most junior, unskilled person and make them the Scrum Master who's accountable for the effectiveness of the team. How the most junior, unskilled person is going to be able to do that, I do not know, because it's not deemed as a valuable thing. Therefore, there's no leaders to promote through the organization who have a fundamental background and understanding of what it is that we're doing, how we're building products, and that experimentation and ideas up through the organization.\n\nSo I think we've kind of done it to ourselves. There are pockets of agility; there are folks out there who are really good at this stuff, but they're generally not listened to. They're generally skilled enough that they go become a consultant, right? Because of the supply-demand issue. If the supply-demand issue was different, they would maybe still be employees because they would be being successful and having fun within an organization. But they're not. They're getting frustrated that organizations can't change, and organizations can't change because they're fundamentally not addressing these core competency issues. They don't have enough momentum; they don't have enough people who have those core competencies to move forward. These folks get frustrated and go, \"Screw this, I'm going to go start my own business being a consultant,\" and at least I get paid more for doing terrible work with these organizations.\n\nBut there's light at the end of the tunnel if you're an organization who is already on their journey to improve the agility of their organization or you want to be. Hire for competence. Hire for lifelong learning. Hire for somebody who has the interest enough to do more than a PSM or CSM level one certification to be that thing. I really fundamentally don't understand why HR and hiring managers are expecting somebody who's done a two-day course to understand how to... I mean, I kind of do. Years ago, I worked in an organization, and the accountant was sent on an MS Project course, and when he came back, he was the new project manager, and it was the disaster that you're expecting in your head. It was the absolute unmitigated accounting-focused disaster.\n\nSo I understand that it's happening, but if we want to be different, if we want to get the value from agility that we need, we have to change the way we approach that. We have to hire for competence within the context of the roles, and that probably means... Now, I don't know the CSMs. I'm not a Scrum Alliance trainer; I'm a Scrum.org trainer. So my understanding, my knowledge is more in that space. If I'm looking to hire Scrum Masters, I am not looking for PSM1, not even remotely looking for PSM1. I'm looking for, if I'm looking for a Scrum Master for one team in a large organization, I'm at least looking for PSM2, but realistically, I want a PSM3. PSM3 has demonstrated knowledge and capability; it's essay-based questions. We're no longer in the multiple-choice world, so it's much harder for somebody without the competence who isn't interested in lifelong learning. It's much harder, much, much harder for them to gain that certification, right? The PSM3.\n\nSo that would be my minimum bar. I think it has to be my minimum bar. My minimum bar would be PSM3 if I'm hiring a Scrum Master and I'm bringing them into my business. Minimum PSM3. And I then want to look at what's the context of my product. Does that Scrum Master have experience within that context? So if my context is software engineering, which mine generally is, I want to hire somebody who understands software engineering, somebody who has experience and understands the philosophies of DevOps, who understands the practices and techniques that make sense to help teams be effective. Because a good coach coaches and teaches the team in practices they don't understand or aren't very good at, right? And in order to do that, you have to understand them if you want to teach those things.\n\nSo at the very least, PSM3, then look at engineering competence, then look at product competence because they need to help coach the product owner, product management in building a better product. And then business, well, that's kind of business product/business, and then I guess it's called organizational evolutionary context, right? What skills and capabilities do they have in organizational change, in building relationships across the organization, in doing those things? These are the folks that can do it all are fairly rare, right? Folks that can do it all are absolutely fairly rare. I agree there. But if I've got somebody just for a team, I probably need mostly, if it's a new team, mostly engineering support with a little bit of business and a little bit of org.\n\nIf I'm hiring for somebody who's looking across multiple teams, I probably have the engineering as maybe not as important, but the business context is much more important. And if I'm hiring somebody who's looking across the whole organization, then the organizational transformational mastery is the most important. But I still want business context, and I still want, I'm calling it engineering context, right? But the context, the work context on that end as well. So this is fundamentally why somebody like Satya Nadella is so hugely successful within the context and has absolutely turned a multi-million dollar business around. Because while he has engineering capability, he understands engineering, he understands the practices, he understands how important it is to spend time on learning and those practices and those things. He also understands business, which is how he made it up through management in the organization, and he understands organizational transformational context, right? How do you change an organization? How do you adapt it towards a new outcome that opens up new markets and new capabilities? And that's why he's the CEO, right? And he's been hugely successful at it. He's got a book, \"Hit Refresh,\" definitely worth a read.\n\nThis is what we're talking about. This level of competence is what's not there, and this level of competence is what we need to fix."
  },
  {
    "Title": "Focusing Beyond \"Agile\": Building True Capability in Organizations",
    "Description": "Explores why building organisational capability, competence, and continuous learning is more effective than focusing solely on Agile roles, frameworks, or labels.",
    "ResourceId": "4zGsmQFWFpo",
    "Url": "https://www.youtube.com/watch?v=4zGsmQFWFpo",
    "Date": "2024-10-11T06:45:00Z",
    "Captions": "We need to change the way we focus and what we focus on within the context of these organisational strategies, business strategies, technical strategies that we need to be able to adapt to complex work. Right? Did you see how much I try to avoid the word agile there? Don't think about it as agile; think about it as increasing our capability, maximising our value, and maximising our effectiveness to deliver that. The name, the moniker, is irrelevant because what we've ended up with by a focus on the mechanical elements is we've ended up with backlog barons and scrum stumblers. That's product owners and scrum masters that have no capability to do what they're being asked to do, and they're pushed into positions of just not knowing what they're doing.\n\nSo what we can do, what I've got a couple of previous videos on this topic on the detail of what went wrong, but a summary is that demand has outstripped supply of competent people, and businesses have reduced the bar in order to meet the open positions. So we've got a bunch of people who don't know what they're doing. There's not been a focus on continuous learning and hiring people for that mentality, especially for the specific positions like product owner and scrum master, and engineers and lead engineers, to be able to have the body of people within our organisation, the culture and outlook within our organisation that moves us in that direction.\n\nSo that's where we are now, and we need to look at where we're going to go next and how we're going to get there. The first thing we need to do is fix the hiring practices. We need to stop hiring people who have no competence for the thing that we're trying to do. It's absolutely okay to bring in interns and bring in people at the lower levels, but we want to be bringing people in at the lower levels in the work context. Right? So think of it as, I'm trying to think how to describe this. The way I think, if we want good leaders in our organisation who are able to lead products or lead people, right, I'm thinking of them as two separate things because product management is leading the product, and I don't know what the name of the other one is; leadership is leading the people.\n\nThen we need people who understand the context that we're working in to be those people leaders. So where do they come from? Well, usually they've done the job, right? They've done something within the context. I work with some great scrum masters. By the way, this is why I'm saying this. I'm not talking about being a software engineer; I'm not talking about writing code. I'm not expecting a scrum master to be able to write code. Right? I know scrum masters well. I might roll that back a smidge, but I know scrum masters who have never been coders, who have perhaps been a business analyst or perhaps been a tester, right? Or perhaps been some other context within a team, and they've demonstrated, they've worked hard, they've brought in and learned the philosophies around enabling a team to be effective. They've made suggestions that panned out within the context of their team. Their team has noticed that they quite often make suggestions that pan out and help them, and the team has promoted them to scrum master. That's the way I think about how you become a scrum master, right? You don't get hired into that position; the team hires you into that. The team enables you to pick up that accountability, however you want to describe it. The team get together and go, \"Yeah, Bob is really good at this stuff. Bob, can you help coach us to do more stuff, to do more capability?\" They've already gained the respect of the team by participating in the team, participating in the work that the team is doing. So the team knows they understand the work, and they're making suggestions on how we do our boards or different practices or different engineering things we can bring in to understand that.\n\nSo does somebody who's a scrum master need to be able to code? I would say no more than anyone needs to be able to code, which is yes. I don't know if you've looked at the international computer driver's licence, but at most of the levels, the coding's pretty basic. Being able to understand those logical constructs because then you can participate in conversations, you can participate in understandings like what architectures, what patterns and practices are valuable within the context of a particular product. If a product's big focus is engineering, a scrum master needs to understand the patterns and practices of engineering. If the focus of the doers is on accounting, right, then the scrum master needs to understand the patterns and practices of accounting so that they can help coach that group of people towards better accounting, better organisation of that work, better planning, better all of the just making things more effective.\n\nSo that's where we need to get to. So we've got where we are right now, which is lots of incompetent people doing the roles, and we've got where we want to get to, which is lots of competent people doing the roles. For me, it's fairly logical how we make that transition: we stop hiring people that can't do it and start hiring people that can. Primarily, try and promote from within our organisation into those roles and improve the overall capability and lead by example. So this is why we want scrum masters who are supposed to be leaders, right? A scrum master might be a delivery manager; they might be a defined role in your organisation. They might be a delivery manager; they might be a lead developer who picks up the accountability of scrum master. They could be something else, right? But they pick up that accountability, and they are somebody who has those lifelong learning genes. I don't know how better to describe it. They have that lifelong learning mindset, that lifelong learning philosophy, that I want to understand the world better, and they demonstrate that through leadership. So they lead the team, and they are demonstrating that this is how we want people in our organisation to behave.\n\nEvery time an organisation promotes somebody who's not capable, it tells every other capable person in the organisation that this organisation is not for them. That's what's been happening: promoting people through lack of competence and just not having the right people in the right place. There's a great book, The Ideal Team Player. It's a great book, and in that book, it talks about the types of behaviours that you want to see in people that you hire. We need to be hiring the right people. We need to be expanding the capability of the teams, of the parts of our organisation, of the product development effort within our organisation to be able to build better products that are more effective and add more value to our customers."
  },
  {
    "Title": "Agile is Not New: A Journey Back to the Basics",
    "Description": "Explores Agile’s historical roots, the loss of human connection in business, the impact of competence gaps, and why a return to core Agile principles is needed today.",
    "ResourceId": "XhPHa1RXrWo",
    "Url": "https://www.youtube.com/watch?v=XhPHa1RXrWo",
    "Date": "2024-10-10T15:48:56Z",
    "Captions": "Agile is not a new thing by any means. One could absolutely argue that it is a very old thing. Prior to the Industrial Revolution, although it's not totally to do with that, things were done in small, Mom and Pop shops all over the world. Your local cobbler made your shoes, and your local cobbler understood fundamentally your needs as an individual because they knew who you were. They knew your life story, and they created goods just for you. As we scaled up, we lost that human connection between things, and a lot of people blame Frederick Winslow Taylor. He’s not strictly at fault; it wasn't his intent to dehumanise the work environment. It was just the outcome of the practices that he pushed and how they were interpreted.\n\nAgile is a thing that has always been true for most of human existence. The way you get stuff done is you figure it out. If you don't know how to do something, you go try some stuff and figure out what works best and what doesn't. Ultimately, it's an evolutionary story because the people in the world that were able to do things better perhaps survived, and those that were not able to do it did not. Those that adapted to farming and new farm equipment and were able to increase the yield of the crop prospered. Those that weren't able to do that or couldn't figure it out did not. That's fundamentally how evolutionary theory works and how humans interact with the world around us. If we're successful, we do well at something; if we don't do well, we're not.\n\nSo, agile's not a new thing, but even as far back as the late 1900s, they were talking about harnessing the social aspects of work in order to maximise our ability to deliver value. If you want to look up some of the theory and stories around that, it's Maryanne Fetter you want to be looking up. She was a contemporary and perhaps a little bit in opposition to Frederick Winslow Taylor at the time, and her work was largely lost by the 1930s. However, there was really a resurgence of this idea. The thing with good ideas is they'll keep coming back even if we forget them.\n\nIn the '90s, XP came along in the software world because it was very obvious that it wasn't working. We weren't able to successfully and repeatedly build high-quality, valuable products without copious amounts of waste. We had lots of unhappy people. I think Ken Schwaber talks about it as \"hateful work.\" We hated the companies we worked for; we hated the work that we were doing. The managers hated the work that they were doing. Everybody just hated it because we were dealing with complexity, and everything would always go wrong. When you try to control chaos, much like a lion tamer, you might get eaten. In fact, the likelihood is that you're going to get eaten at some point if you keep trying to do it that way, and that happened in project after project.\n\nWhen I started out in the software industry, right when I graduated university, there was talk of this idea of a \"death march.\" A death march project is a project that every single person on it already understands before we hardly started that it is dead on arrival. It's not going anywhere; it's not going to be successful. We're not going to be able to do this. It's not going to cost what they think it's going to cost; it's not going to be done in that time; it's not going to have the features that they think it's going to have. But we have to do it anyway because that's what we're paid to do, and somebody bean counter higher up in the organisation has made the decision.\n\nThis resurgence culminated in the '90s with XP, which was really the start of the bigger resurgence, although it had been mulling around before that. Then Scrum eventually culminated in the Agile Manifesto in 2001. The manifesto really defined the principles for a new way of working, one that focused on dealing with complexity and the unknown with empathy and with connection to people, bringing that social aspect that Maryanne Fetter wrote about nearly 100 years before.\n\nHowever, it was predicated on competence. There was an assumption of the inherent craftsmanship and competence of the participants that we were going to build on. However, the demand, especially when I graduated university in 2000 and started my first job in 2001, for engineers, product managers, and leaders that had both the competence and understood this new way of working far outstripped the supply in the market. It still does. Part of the reason it still does is that we didn't focus on the competence of who we needed to do these things to make these changes and fundamentally support them from a leadership perspective, from an engineering perspective, and from our goals and discovery.\n\nBecause we didn't focus on that level of competence, it's largely starting to fall apart. That realisation is not quite like the dot-com bubble bursting; that was a money thing. This is a competence thing. Of the hundreds of thousands of people that are currently in roles where they're expected to either participate in craft or oversee, the level of competence is a tiny percentage of people in that space. It's starting to show in organisations where they are looking for what they are getting for their money because we're paying perhaps a lot of high-price salaries for engineers, product managers, and leadership. We're not getting the return on investment that we're expecting, and we need to get the return on investment; otherwise, it's not worth spending that money. That's how business functions in our world.\n\nIf we can't justify the cost, we're going to have to get rid of the thing that's costing us, and at the moment, it looks like it's not the engineers and not the product managers, but it's the leaders, the Scrum Masters, the coaches—those folks that just don't necessarily have the level of competence that's demanded to fulfil the role and be successful. They may have had enough to convince the people that were hiring them that didn't necessarily understand what they needed, but as it turns out, they couldn't do it.\n\nIt's systemic at the moment, and that's what we're seeing in the industry. There's a wide-ranging general reset of our understanding of what these competencies are, and most people are coming up lacking. That's kind of what we intended to do when we were originally talking about agile back in 2001. The outcome has not been that; it's been a commercialised, watered-down lip service-based result, and that's where we're at right now."
  },
  {
    "Title": "How to Achieve Predictability in Business through Agile Principles",
    "Description": "Learn how Agile principles help businesses improve predictability by addressing challenges, optimising systems, aligning goals, and adapting to change for consistent results.",
    "ResourceId": "G1BQG2tsbYg",
    "Url": "https://www.youtube.com/watch?v=G1BQG2tsbYg",
    "Date": "2024-10-08T10:33:32Z",
    "Captions": "Businesses want predictability. Predictability enables them to focus on achieving the outcomes that they desire in a consistent way. It reduces uncertainty and helps them achieve their business goals. But predictability is hard to achieve. There are all sorts of things that get in the way of us having predictability as a business. \n\nNow, the things that we can't avoid that get in the way of predictability are things like market volatility, the changes in the market, and the unpredictable nature of the world and the ecosystem in which we're in. These are things we cannot control, so we have to include that in our story. But there are a bunch of things where we get unpredictability that we can control, that we can do something about. \n\nHaving clear goals or unclear goals causes unpredictability. Operational inefficiencies create unpredictability. You don't know how long things are going to take because everything takes a different amount of time to go through the system. Really having an undefined system—if you don't have a description of how things go through each of your systems—you could have many systems in your organization. Then how do we know that each thing that goes through each system is going through it in a consistent way, which enables that predictability? \n\nAll of those unpredictabilities, those frictions to our ability to do stuff, and inconsistent frictions to our ability to do stuff will impact on the performance of our organization. It will impact on revenue growth, it will impact on profitability, and it will impact on our ability to be competitive in the market. \n\nThe role of agile in this story, the role of agile in enabling predictability, is in the application of the ideas. It's a lot about changing from rules to principles. Instead of having a bunch of rules that people mindlessly follow, have a bunch of principles under which the folks that you have within your organization can make decisions. Define the systems that you have and how you want them to work—not just as leadership telling people how to do it, but the people that are doing the work defining the systems. That's pushing responsibility down the organization to the people who are actually doing the work. \n\nAgile, or the mindset of agility, the agile philosophy, is about enabling people in our organization to improve the predictability of our business outcomes by improving the predictability of the things that they do. I think one of the difficulties is that most organizations, most people in organizations, are not looking at predictability metrics. They're not looking at the data that indicates instabilities in the system. Those are the things that you want to control, where you want to make changes. \n\nThis whole idea of increasing business predictability is not something that just randomly happens. It's not something that just installing agility in your organization is going to result in an increased level of business predictability. It's something that is systematic, that is deliberate, that requires effort and consistency of application over a longer period of time to start making the changes, moving the needles to increase the level of predictability within your business. \n\nThere's a myth that I see all the time in organizations at every level: that because we're doing agile, we can't plan or predict what's going to happen. We can't do estimates, we're not supposed to be looking forward too far into the future. All of that is kind of bunkum. The fundamental principle of agility is about minimizing the amount of work you do until it needs to be done. \n\nWe don't want to do documentation that is going to change frequently unless we need that documentation in order to understand what we need to change. We'd be better building some product, right? Build some product, test it in the market, and get into those tight feedback loops. That's one of the key things that I find that organizations really struggle with within the context of predictability: they don't close the feedback loops. \n\nSo if you're looking at what you're doing within the context of agility, this myth that you can't plan for the future is just that—a myth. The poster child for agility is Microsoft's transition in the last 10 to 12 years. They do planning looking forward over 18 months. The granularity is really high level, but they do plan over 18 months. They do a season-based model and they plan for 18-month seasons. There's nothing wrong with that; there's nothing anti-agile about that. \n\nBut it's the way that you do it. It's how you implement it. Is that 18-month plan something that is enshrined in \"this is what we're going to do\"? How changeable and malleable is that plan over time? How much effort do you spend on that plan versus doing the work that you need to do just now? Those are all things that belay this myth that you can't plan or predict because you're doing agile. You absolutely can; you just use different tools and techniques to achieve that. \n\nThere's a really famous quote: \"Plans are irrelevant; planning is everything.\" That's the key to success within the context of business predictability. If you want to increase the predictability of your business, you need to stop creating plans and start planning. What is it we're going to do next? Where do we want to go? What do we want to achieve? If we're answering those questions and then communicating it effectively within the business, we can enable a level of strategic alignment with everybody in our organization. \n\nIf you look up \"team\" in the dictionary, it says a group of people working together towards a common goal. How can we do that if we don't have that common goal? A goal is a single thing; it's not a whole bunch of things. So what is it that your business is trying to achieve that you want everybody and every product and every effort to align behind? For a particular product within the context of that business, what is the thing that you want everybody working together towards? The outcomes of that product should align behind the product's goal, the vision, the strategy. \n\nThese are things that are commonly missing in organizations, and that creates a fragmentation of effort. The effort that people put in is in a direction of their choosing—each individual on the team's effort of their choosing, each manager's effort of their choosing, each leader's effort of their choosing, each product owner's effort of their choosing. How do we enable us to be all working together towards that common goal? That requires planning to gain predictability. \n\nWe're not really talking about risk mitigation as a document; we're talking about risk mitigation as a holistic strategy for our organization. We're not talking about resource management at the individual level; we're talking about where our investment opportunities are as a business that fit inside of our strategic goals and strategy. \n\nThis whole idea of planning to gain predictability is to enable your business to have a competitive advantage in the market against other businesses in the same market. Naked agility can help you increase your business predictability by enabling you to do that. We can't come in and just provide you with increased business predictability. You need to do that; it's your business, it's your organization, it's your department, it's your team. \n\nThe only people that can help you increase that predictability are you. We can bring our knowledge and expertise of what has worked in other organizations. We can bring ways and tools for analysing the data—what's the current state of your system—helping you define your system so that you can then see where the problems are that are reducing your predictability so that you can fix them. \n\nOne of the big things we bring is visibility, so that you can see what's going on. If you can see what's going on, you can make tweaks to the way you do things. You can help the people that you work with make tweaks to the way they do things to hopefully increase that level of predictability within your business. \n\nNow, that can be data-driven. We can look at data for team morale and capability. We can look at data for knowledge and skills. We can look at profitability of the business and where we're spending the money. These are all data-driven approaches. We can then help bring frameworks and methodologies—ideologies, philosophies—what are things that are holistic to all businesses that can enable you to look at things in a different way to be able to see what's going on and make those changes. \n\nPerhaps Scrum is a good idea. Perhaps Kanban is a good idea. Perhaps lean thinking is a good idea. Perhaps Lean UX is a good idea. There are all sorts of tools, frameworks, and ideas available that have been shown to work in many different sorts of businesses that we can try and analyse to see if it works for your business in your context. \n\nWhat we're offering is a completely custom solution for your business that doesn't make you like somebody else's business. One of the things that I commonly see as a negative consequence of going and working with a large consulting organization that brings a standard methodology and practice and then applies it to your business is that you become like every other business that they've applied it to. \n\nOne of the things that made your business successful was its unique ability to take advantage of a niche that you've built in a market. Your business grew to take advantage of a niche, and if somebody comes along and applies their business practices or their system on top of it, then you're just like every other company that uses that same system. \n\nA great example is road hauling. If you're moving goods around, those businesses are fairly standard. But businesses that use the same tooling as every other business that does the same thing are just the same business with a different owner or a different manager. They're not different; there's no differentiation in the market. They're just filling that market. \n\nHow do they open new markets? How do they ingeniously solve problems in interesting ways that help them adapt their business towards a new niche or new capability or open up new markets? They can't because they're working within a structured system that doesn't allow them to explore other opportunities. \n\nWhat we want to do as a business is come up with our own way of moving from whatever it is we're doing now towards a greater degree of agility so that it's our business processes, it's our unique way of doing things to fill that unique niche. If you look at every single commercially successful organization that has adopted agile practices, especially agile practices at scale, you'll see that every single one of them has created their own system that fits the way they want to do business and is shaped by the way they want to do business. \n\nThey're not just installing somebody else's system. That's why Microsoft uses the season-based model, Spotify has their way of doing things, and Google has their way of doing things. Every single one of these organizations has a unique way that's bespoke to them of solving this problem of how do we increase our business predictability and our ability to serve the markets within which we're in. \n\nIt's pretty hard to describe what it looks like, sounds like, or feels like once you're on this journey and you've made some progress towards a greater degree of adaptability and a higher degree of predictability. It's going to impact everything in your organization. \n\nMicrosoft is often asked, \"What changed?\" When you made these changes and adaptations to your business, what changed? The answer is usually everything. Everything changed. The way they do financing changed, the way they do business changed, the way they find new customers changed, the way they manage customers changed, the way they build the products has changed, the way they engage with the people who build the products, and the way they engage with the outside world has changed. \n\nEvery part of their business processes has changed in their entire organization. Now, that's a little bit of an overestimation; not everything has changed. They still have their journey, and they've not addressed some things that they probably could address. But they've done a good job of tackling some of those big things. \n\nA great example you can go look up is the change in the way they measure bonuses for salespeople. It used to be that they were measured based on the amount of Azure time that they sell because Azure is the big selling feature. How much do you sell? But now it's on usage. If you measure how much time they sell, the salesperson gets the customer to clinch the deal. They're a closer, and that's who you want as a salesperson. \n\nThen the customer has paid the money, and the salesperson gets their bonus. But the problem with that is what happens at the end of the year when the customer hasn't used the thing they've paid for, and it expires? They bought a year’s worth of stuff, and they've used 10% of it. Now they're annoyed and angry that 90% of their funds have been wasted. \n\nIf you switch that around to usage, the sales folks get their bonus based on usage. They then need different skills; they're not a dual closer. This is an example of a little tweak in the way a business functions that has a massive impact. The perfect salesperson is no longer a closer; they're an enabler. They enable your company to help this customer use the service more and more. \n\nFor example, perhaps the closer brings in an expert to bamboozle the customer with all the cool things that you can do, and they close the deal, and they're done. But what the enabler does is bring in, perhaps out of their own budget, external consultants and helpers to help over a longer term enable that customer to use the services more. \n\nNow we're talking about what enables you to use your more agile transition. DevOps—all of these things mean that you need to consume things more quickly, and it benefits both parties. It benefits both Microsoft because they get to sell more Azure, and it benefits the customer because they're able to adapt to their market needs more quickly and more effectively. \n\nWhat does it look and feel like? It looks and feels like everybody working together towards a common goal. We're not working against our customers; we're working with our customers. We're not working against each other; we're working with each other. That is the superpower that brings this whole story together. \n\nIt changes the behaviours of people in your organization. It changes the organizational culture. It changes the experience that both employees and stakeholders have, and it changes the way that you measure success in your business. Everything will change if you embark on this journey. \n\nAt the end of that journey—it never ends, but once you've made some progress on that journey—you will have more predictability in your business and a higher ability to take advantage of market opportunities when they arise because you're then able to deal with surprises. You've got that level of predictability."
  },
  {
    "Title": "Navigating Complexity: How to Foster Agility and Innovation in Business Decision-Making",
    "Description": "Explores how businesses can boost agility and innovation by adapting decision-making, avoiding bureaucracy, and fostering continuous learning in complex environments.",
    "ResourceId": "RnMOINwjO84",
    "Url": "https://www.youtube.com/watch?v=RnMOINwjO84",
    "Date": "2024-10-03T07:00:16Z",
    "Captions": "If you're looking for rules on how to make informed decisions based on the data that you've collected, whether it's from evidence-based management, telemetry data, or whatever data you're collecting, you're not going to find it. You're not going to find something that you can apply everywhere. In times gone by, there have been large decision-making frameworks that generally apply because we lived in a complicated world, not a complex one. \n\nSo, if you think about complexity theory, if we understand more about a thing, we're going to go do more than we don't know. That's like playing chess. We understand more than we don't know, then we can apply a bunch of rules. We know what the next move is. If you've ever watched a professional chess game and listened to the commentary, they know exactly what the next move is supposed to be. The only time when there's a mistake is based on the set of exchanges, depending on how smart the commentator is, how far ahead they can think. They know who's going to win, and then it’s does somebody make a mistake? \n\nThat's how I think lots of modern businesses are failing. Take, for example, a non-technology example. Let's say you're a hauling company and you're going to haul stuff from A to B in trucks. You have your drivers, you have your trucks, you need to do schedules, you need to do procurement for what goes in what truck and how it's organised in the truck, and all of those kinds of things. If you go buy off-the-shelf software that everybody else uses, all your competitors are using exactly the same software to manage this, perhaps you're buying SAP, and then having the POGE plugin and the staff management plugin and whatever stuff it has, then your business is no longer unique. \n\nYou're filling a known niche with a known business model that works, and then the only difference between you and your competitors is probably quality. Are you on time? Did you have the right stuff? Are the right things delivered to the right place? You build a reputation around that. This is a good haul company because they mostly do the right thing. This is a bad haul company because they mostly do the bad thing, and then they'll go out of business, and you'll stay in business because they mostly do the wrong thing and you mostly do the right thing. \n\nBut your business models are identical, your business practices are identical because they have to be. You have to fit within the plugins, the business model plugins that you've brought in for SAP. But when we work in a world where we know less upfront than we discover by doing, that's anything where we're bringing in a creative element. Software engineering is being creative. Anything where there's a lot of unknowns. \n\nA great set of this is red team thinking, which is a military tool. Red team thinking comes from the military. I don't remember if it's the US or the British military, probably the US military. It's a military model that is applied quite heavily in the agile space because we're talking about the same thing. We're talking about complexity, we're talking about the fog. We've got a lot of unknowns, and how do we move forward while being able to adapt to any challenges, surprises, or opportunities as we move forward and the world reveals itself? \n\nThat's something that the military do very well, or hopefully do very well, and we need to do very well at it because most of the stuff that we do when we're building software, because we're writing code, it's never been done before. If you're writing code that's been done before, you're doing it wrong. Stop doing that. When you're building products that don't exist yet, then we're exploring the unknown. \n\nThink about when the explorers went out to go somewhere new. They didn't know what they were going to find when they got there. They didn't know what was going to happen along the way, so they had to take into account bringing all of the things they needed. Scurvy was a problem for early explorers because they didn't have the right vitamins. What they found was they could take citrus fruits, which lasted a long time in storage if you stored them right, and then you could provide that to your crew and they don't get scurvy because they get the vitamins that are missing from the normal diet. \n\nThat adaptation enabled those explorers that did that to go further, and the explorers that didn't do that all died. So, which ones came back? They did this. Let's do more of that. That's what we're talking about when we talk about agile. When we talk about agility, it's about creating a system for your way of work that adapts dynamically to those changes. We have emergent knowledge, we have emergent data, we have emergent customers. We don't know who our customers are yet and what they're going to want. \n\nThen we get some of those customers and we understand what they want, so we deliver something to them, but it's not quite right because they don't like what we've delivered. So, we need to keep adapting, continuously evolving our product, our business, to fill a unique niche that we've created for ourselves. Perhaps we maintain that niche, but those niches don't exist forever. \n\nIt used to be in the old days of the Industrial Revolution where there weren't that many textile mills and there weren't that many textile mills within selling distance. Perhaps you, as a tailor, were buying cloth from the local textile mill. You had no option. You were buying the bulk of your stuff from the local textile mill, and then maybe you could get some really expensive stuff from the fancy store, wherever you managed to get that really expensive stuff from. But that's not for your main clientele. Your main clientele is going to be the stuff from the factory up the road. \n\nWhereas today, you can get stuff from any factory anywhere in the world for a relatively competitive price. That market, that niche, those factories were in is largely gone. It's not a niche anymore. There are loads of competing species within that area. The same for our companies. As competition grows, we either have to become unique in different ways or we need to be the best in that space in order to not have any of this competition come in. \n\nAs we grow as a business, this is all part of this data-driven decision-making. As we grow as a business, we have a tendency to say, \"Well, this worked one time, let's write that down and everybody does it that way.\" That's bureaucracy. That's what we're fighting against with agility because the next thing we do is slightly different, just a little bit, but slightly different. \n\nSo, this is not optimal anymore, but it kind of works. But time change after change after change, eventually this doesn't work anymore. But everybody in the company still does it because that's the way we do things. That's the mindset we're trying to change. We're trying to change to a mindset that we don't keep this longer than it's necessary. We don't keep this longer than it's valuable. Any process or practice we have, emergent practices within our organisation, any process or practice can be dissolved at any time because it's deemed to be no longer optimal or suboptimal. \n\nThis set of stories should continually change. If it's not changed, why hasn't it changed? Because the world will have changed, our environment will have changed, and we need to continually adapt. That's agile decision-making. How we make decisions is emergent based on what we understand, what we're doing, what we're trying to achieve, and the results that we get based on that decision-making. \n\nSo, you're also continuously looking at the data and analysing your decision. Did we make the right decision? Are we continuously making the wrong decision? If we're continuously making the wrong decision, why are we continuously making the wrong decision? What is our decision-making process? Because it needs to change. \n\nThere are lots of tools out there that you can use. I had a quick look for agile decision-making tools and I found a few that I recognise that I have used in the past but maybe not used recently. Fist of five, if you've got a group of people and you need to make a decision, fist of five is a great way to make a decision. Is that going to last forever? Are you always going to do fist of five in that same group of people? Probably not, because its usefulness, as you start working together for longer as a team, you may recognise more each other's tails, and then you don't need that mechanism anymore. \n\nSo, stop doing it if it's not adding value. If anything in your business is no longer adding value or it's actively inhibiting value, stop doing it and do something different. I see this in organisation after organisation where they have a departmental model and some department has decided that you can't do a thing in an organisation, and that thing that you can't do inhibits all of this value over here. It either makes it slower or makes it harder for us to take advantage of opportunities. \n\nIt just makes it too hard to do business, so the people over here stop trying to do those things because it's too hard. Usually, this is security. That department has forgotten that they work for the business. The business does not work for them. Their purpose for being is to protect the business. Perhaps that department model is a protection model, so compliance or security or those kinds of things. But they're protecting the business within the context of the business actually functioning. \n\nAs soon as they're inhibiting the business functioning, they are a cost, not a value. They're supposed to figure out, \"We need to do this. How do we do this so that you can be happy?\" Not, \"No, you can't do this.\" That's an example of that organisational craft that rust builds up over time, inhibiting your ability to deliver value because you're stuck in the past, even if the past was only five minutes ago. \n\nUse whatever tools make sense within the context of the decision that you're making, but always check. Is that tool that we're using, so it could be fist of five, DAKI, RACI, decider protocol, consent decision-making, lean coffee, holacracy, there are loads of different ways to do that. If we use that and we have a bad decision or we use it in a bunch of decision-making and all of those decisions ended up wrong, or the majority of those ended up wrong, then stop doing it. \n\nThat's the key to this agile process, to figuring out how to make decisions within the context. There aren't any rules for you to go look up. There aren't any known practices that always work, and that's true across all of agility and all of lean. There are certain rules that we know to be true, but they're not rules, they're laws. Little's law is a great example of that, queuing theory. It's true. That's how things work. \n\nSo, we make decisions within the context of that story. Figure out what the laws are that apply to your business, and everything else is flexible. Everything else is flexible. How you do business is flexible. How you find business, how you engage with customers is flexible. Emergent. How people do the work is emergent. How you engage with them, how you do everything that you do needs to be emergent because what you want to be able to do as a business is when the market shifts or your environment changes, you need to be able to evolve, and you need to be able to evolve as quickly as possible because you don't want to go extinct."
  },
  {
    "Title": "Mastering Evidence-Based Management for Agile Success",
    "Description": "Learn how Evidence-Based Management uses data to guide Agile teams, improve decision-making, track value, and boost innovation, customer satisfaction, and time to market.",
    "ResourceId": "S0h_7ayLpsE",
    "Url": "https://www.youtube.com/watch?v=S0h_7ayLpsE",
    "Date": "2024-10-02T13:17:24Z",
    "Captions": "With evidence-based management, it's really important to gather the data, the evidence that you're going to use to help you in your decision-making, to help inform your decision-making. So we need to gather a bunch of data, and then we need to be able to analyze that data. There are lots of different places you can get your data from, depending on what type of data it is that you need. \n\nIf you remember, there are four key value areas in evidence-based management that we want to kind of try and make sure that we have at least something in each of those areas. In each of those key value areas, we want to find what it is we want to collect and then figure out how to collect it. Then we have to actually collect it, and then collecting it's not good enough; we have to actually analyze it. \n\nThere are some areas that are easier than others. In the organizational capability, the two key value areas that are part of organizational capability are time to market and ability to innovate. There's a plethora of data that you can collect within the context of your engineering teams. My focus tends to be around software engineering, so I might collect things like how much technical debt do I have, how many bugs do I have over time, right? So the trend of bugs. I might be collecting, \"Oh, there's loads of data I can collect.\" \n\nI could collect code coverage or the trend of code coverage over time; that might be valuable at some point. There are hundreds of different data points that we can collect within that context. A few that might make sense: if you're in the ability to innovate, you'll probably find a lot of metrics coming from D. If you look up the DORA metrics, there's lots of great stuff in there. \n\nThere are things like defect trends, but also innovation rate is really important. What percentage of time do you spend innovating versus doing all the other stuff that you need to do? Collecting things like technical debt, some of these things are easy to collect. Innovation rate is fairly easy; you just categorize the work that you're doing as net new work, augmentations to existing functionality, and then support and maintenance work, whatever you want to call those categories. \n\nThen you graph that over time, right? So you'll be able to see what's going on there, and you can then make decisions based on the amount of money that you're investing in each of those areas. Do you want to change how your investment strategy works? Do you want to spend more time on innovation, or do you need to spend more time on augmenting your existing functionality? That might depend on some of the other metrics from the market value side of the story. \n\nIn market value, we had current value, so what our product currently does, and unrealized value, which is the things that our product might do that it doesn't do yet. This would ultimately result in your product backlog, and this is your actual increment, your actual product. If we were looking at data for your actual product, we might be looking at something like customer satisfaction. How satisfied are the users of your product with your product? How satisfied are they with the features? Do they meet their needs? \n\nThere's a bunch of questions you can ask around that, interviews you can do to try and get some of that data, and that might inform where you want your innovation rate to be. If your existing customers are very unhappy, then perhaps you need to address that. Perhaps you need to invest more in augmenting the existing stuff or figuring out what you're missing in that space. That could be an expectations gap, which would be more on the unrealized value side—stuff your product doesn't do yet. \n\nBut understanding that data informs the decisions that you make. So there's a piece of data in our organizational capability, specifically in the ability to innovate, and our innovation rate. Our decision on what should we do with that data depends on this other data, right? Data on how people feel about our current product or the features in our current product. Maybe it's all the way down to individual features; granularity is quite important there. \n\nWhat we're missing in our product, and if we're missing a lot, we probably want to invest a lot of money in the missing stuff. If we're not missing much but our customers are unhappy, we probably want to invest a lot in increasing the satisfaction of our customers within our existing product structure. All of these decisions are informed but not controlled by the data, right? \n\nSo not only do we need to collect the data, but we need to realize that just because the data says something doesn't mean we should immediately act upon it. There are some things that you absolutely should immediately act on, like if the trend of defects is suddenly shooting up or customer satisfaction suddenly takes a big drop. Those are things that you want to check the data first, then perhaps have some kind of bigger action on it. \n\nBut there are times where you might take the opposite action. One of the things that you would definitely collect in current value is your usage index, as they call it in evidence-based management. But how, what is usage data? It's telemetry in your product, right? So do you know if you have a button that takes you to a feature, and that feature has options? How many, what percentage of your users use that feature? How often do they use that feature? And when they do use that feature, what parts of that feature do they interact with? \n\nThat should be data that you have on hand, right? That's data that we can reasonably easily collect. It requires engineering work; your developers need to add stuff to your product to collect that data. If you're building a website, you might get some of that with Google Analytics, but usually, we're looking for a deeper story than just what pages are hit, depending on the way your website's constructed. \n\nIf you're doing web, exactly what features, how long features take to load, how long actions take—these are all parts of that telemetry story that give you an absolute wealth of data that you can access. I heard a great story from a car company that I worked with, and they were talking about how easy it was to access that data within their organization. Most car companies collect this type of telemetry, even if they have no over-the-air updates. \n\nWhen your car goes in for a service and they connect up the computer system at the dealership, it sucks down all of the telemetry data on all of the gear shifts, how the gear shifts performed. There's a big log in the system; they load that data, and it gets sent off for faults and all those kinds of things. That gets sent off to the parent company, and then the idea is you would analyze that data, right? \n\nThey were talking about their inability to access that data, even though it exists. To get access to a slice of that data, to a piece of that data, required a whole bunch of time and approvals. In this particular case, they said something like six to eight months before they could get access to the data once they requested it, and that's far too long. That's us then making business decisions based on six to eight-month-old data. Because by the time we get that slice of the data, it's old, and we need a new slice of the data. \n\nWhereas they told me that one of their colleagues worked at Tesla, and at Tesla, everybody has access to all of that data instantaneously, continuously. You can go look at the real-time stream of that data from the cars to know what people are doing, how people are interacting with the features and capabilities within the car. That's game-changing data, right? Having it at all is game-changing. \n\nHaving access to as close to real-time as possible—like if I'm working on a feature right now and I'm doing continuous delivery, so I'm shipping to production on a regular basis, let's say it's on average every couple of days. I'm shipping this feature to production, and it's shipping out to all the cars like Tesla does, right? They do continuous updates. Then I want data at this point. I want as close to this point as possible. \n\nSo I make a change, I ship it in, I've got two days until my next change. I'm going to push out, what do I need to fix? What do I need to change? Well, I'm going to be analyzing the data in that segment to update my product backlog and engage with the team and figure out what needs to happen. This is what product management is all about, right? You're actually managing the product, and you're managing the product with the data to understand how you need to manage the product. \n\nThis is hugely important, and that difference is your customers loving your software or hating your software. I have a Nissan Leaf, and their software is probably some of the worst, least useful. I don't know how much more to describe it; it's the most horrible software to use and work with and the least useful from any perspective in the way that it's constructed, the way it functions, the way I engage with it. It doesn't provide me with the things I want; it doesn't provide me with the things in a timely manner. \n\nIt's terrible; it's just terrible. And that's likely because nobody's looking at the data. Nobody's looking at it. I think it has the Android store; it's got a—I think it did have a 1.2 rating at one point. It was a horrible, horrible app that nobody must be looking at that data, or they don't care, right? If the business doesn't care about that part of the system, then why provide it, right? \n\nMaybe they're providing it because they feel they have to, but if you have to provide it because it's table stakes, it needs to be good; otherwise, it reflects on your company and your business, right? Collecting this data as a product manager is the whole ball game. So we just talked about one metric. We started with an innovation rate, and we ended up connecting all those stories together. \n\nThe Visual Studio team at Microsoft gets seven terabytes of data per day, and that's just from the clients, the Visual Studio desktop clients out in the world that are on networks that allow that data to be sent. Lots of big organizations have those things locked off so that that data doesn't exit the network, right? So this is just a subset of users, but it's a subset of data that they can interact with, that they can see what's going on in the product, that they can make a change and push it out, and then see almost real-time whether they've been successful or they've not in achieving the hypothesis that they had. \n\nWe think adding this feature is going to make a change in people's behaviour in this way. Let's look at the telemetry. Did we improve the user engagement with this feature? Did we improve the number of people that used it? If not, we didn't achieve our outcome with that change. Let's think about why we didn't do that. Maybe we want to talk to a couple of users and figure out why they didn't change their behaviour, right? \n\nAll of those types of things are part of building great products. So we've talked about some where we can get some of the data. We talked about how to collect the data. Some of it is just, I guess, we talk about to collect it. Some of it is just you stick it in Excel, right? There's nothing bad about Excel; it's a great tool. \n\nSo you just record it on a regular cadence and stick it in Excel. That could be from customer survey data; that could be a slice of your innovation rate when you're looking at it. If you're really on the ball, you might feed all of that data that you have into a data warehouse and then use something like Power BI to analyze it and have dashboards that show you what's going on near real-time in your product, in your system, when your customers are doing and how they're interacting with it. \n\nThere are leading measures and lagging measures. Leading measures are ones that change frequently, right? That you can make a change to the system and then see that data changing. Lagging measures are things that take a little bit longer to come to fruition. If you surveyed users on their satisfaction, then that's going to be a lagging measure, right? \n\nYou're making changes to the system; it isn't going to immediately reflect changes to the data. You would need to analyze it over a longer period of time. Both are important, right? Your leading stuff is changing the work that you're doing right now; your lagging stuff is perhaps affecting more your overall strategy and what's going on. \n\nThere's a great example of a feature that the Visual Studio team built called IntelliTrace. If you don't know what it is, it doesn't matter, but it was a big, big, expensive feature. It was only in the Enterprise product to start with, and it was a very expensive feature to build. I can't overstate that enough; it's like huge amounts of money, more ridiculous amounts of money than we could possibly imagine. \n\nWhat they found was that nobody was using it. So they built this feature, they spent all this money on this feature, they shipped this feature, and then they're looking at the telemetry, and it says nobody's using it. So what do you do? Do you cut that feature? Do you stop investing in that feature? Do we invest more in that feature? We maybe need a little bit more information. \n\nSo when they did dive into it, right? Go see a little bit of gamber, right? Go have a look, talk to people. They found that people weren't using it because they didn't know it was there, and it was off by default, and they had to go turn it on in the settings. So in the next version of the product, because this was actually when they were on the two-yearly releases, it then took them, let's say, 18 months or whatever amount of time to get this change in. \n\nSo that's 18 months of people not using the feature, remember, of that feature effectively sitting on a shelf and depreciating while your competitors might have that feature. You do have that feature, but your customers don't know it's there, so they don't use it. They might go to your competitors because they think your competitors have a feature that you don't. \n\nWhen they turned it on by default and shipped it out, nobody turned it off. Very few people—the percentage of people that turned it off was very small, and then they were getting that usage data and getting that usage telemetry. That's why I always say the data that you collect informs but does not control your decision-making. \n\nBecause there needs to be more to it than that. You're playing poker, not chess, right? If you're playing chess, all of the information that's available is in your hands, right? You can see the state of the board; you know all the moves; you know all the possible counter moves. That's where you get to those grandmasters thinking 20, 30 moves ahead. \n\nI don't know how many moves ahead they think, but they're thinking so many moves ahead. You know it's 10 moves to checkmate, right? And then how does this person get out of it? The only way they can do that is to, I guess, maybe fake you into doing something, or you make a mistake, right? I'm going to win unless I make a mistake; I'm going to win this game. \n\nThere’s no hidden information. But for building products, it's more like playing poker. We have incomplete information; we don't understand all of what's going on. Now ideally, we want as much information as we can on the things we can find out to fill in enough of the gaps so that when we're looking at our big picture or even our little picture, we can kind of say, \"Well, we think this is what's happening,\" right? \n\nWe can infer the missing information. When you're playing poker, you know the cards in your hand; you know the cards that are open on the table, on the type of pool you're playing, but you don't know what your competitors have got in their hand, and you don't know what the dealer is hiding or what the next card's going to come off the stack. \n\nNow, if you're really good at card counting, if you're telemetry and data, then you can have a more informed decision-making. If you get very good at reading the other players around the table, really reading their emotional intent, right? Those tails that they have, then you get more information that you can use. \n\nThat's who the best poker players are, right? They are poker players that recognize the cards that go through the deck. They've got good memories; they recognize the emotional engagement between the players and the game to be able to discern more information about what their competitors are doing without actually knowing, right? It's a lot of guesswork. \n\nThen they make decisions on whether they're going to ante up, fold, or increase the bet. They might go all in, right? I've definitely got the winning hand; we're going to go all in and run with this. So that's what we're playing as product management. \n\nUnderstanding the data, collecting the data, viewing the data, analysing the data—some tools for analysing the data. Wow. IT probably is the big, big tool. My background is in the Microsoft space, so I tend to know the Microsoft solutions for these problems. But I know a lot of people like Power BI, even when they're using other platforms to store the data. \n\nPower BI to put all the data together. Probably things like App Insights is great. Application Insights is Microsoft's tool for collecting telemetry. It supports open telemetry. There's a platform called OpenTelemetry that you can use, and you can store the data wherever the heck you want. \n\nBut it enables you to collect and stream data direct from customers; that's your telemetry capture. This is part of the story, right? So you've got your data, you've analysed your data, you've been able to tell the difference between what you think is happening versus what you know is happening, right? Your intuitive versus your actual data. \n\nYou need another tool; you need a tool to help enable your organization to more quickly adapt and sync through those processes. The main tool that I would use to collect data to understand our processes, right? It's exactly the same as understanding our organization. We want to understand our process that our team or our product is our operating model for our product. \n\nI'm probably going to use a Kanban metrics, right? That's going to give us quantitative data on what's going on within our system that our teams have created, that we've created within our organization to handle work. Then I want to make tweaks to that system and be able to see in the quantitative data that it's changing, right? \n\nIt's changing in a way that we want it to change, right? We're improving, reducing our cycle time, improving our throughput—all of those kinds of things. So that's great. Kanban really allows you to model any system, right? But there are tools out there, technologies out there that you can adopt that allow you to kind of jumpstart that process. \n\nYou might be way over here on, \"My team, every team in my organization made up their process, and every member of every team does their own thing.\" That's a pretty common place for most organizations to be. We want to have a little bit of standardization while enabling the teams to be free to do those things that we've standardized in any way they choose. \n\nThis is the same idea that Microsoft talks about: one engineering system. That's Azure DevOps, right? This idea that you have one place to store all the stuff so everybody knows where to go look. Everybody knows how to go set things up in that thing. \n\nWhen an engineer moves from one product to another product, they're not going and hunting for, \"Well, where's the automated builds? What technology is this? I need to learn a new technology to even change and understand this automated build.\" You don't have to do that; we understand that stuff already. \n\nThen it's just looking at how does it actually run, right? Then we can jumpstart our people coming into that process. The same is true in process, like 1ES for our actual engineering systems. Scrum is a social technology for our social systems, right? \n\nWe can jumpstart our move towards agility. Doing Scrum doesn't mean you're agile, right? We want to improve our systems, and Scrum can be a good application to say, \"Here's our bounded environment,\" right? So that if you're familiar with Kotter's Change Model, you create a bounded environment for change. \n\nYou create a set of principles that are going to guide that change, and perhaps there's some rules in there at the start, right? We need a set of rules to get people started so that they're then following the principles. Then we start taking away, like, \"You don't have to do this; you don't have to do that.\" \n\nWhen you were new at this, you had to do it this way. You know, like training wheels on your bike. Then you can take the training wheels off, and suddenly you're riding your bike on your own. If you look at the Scrum Guide, it has a literal set of rules, but it's based on a set of principles. \n\nSo the rules are not a must; the principles are a must, if that makes sense in the Scrum Guide. But the rules are there because most teams, especially when they start out, especially when they're coming from something else, need an example of how to start doing something. Once they are doing that thing and doing that thing well and understand why those particular structures are in place, they can then start doing something different from those particular structures in order to still fulfil the same outcome from the principles. \n\nThat's why I talk about Scrum as a social technology. We've got our engineering, you know, one ES, one engineering system. What is your one ES? Your one engineering system that helps from an engineering perspective ensure that everybody in your organization is able to move between different products, is able to help each other, and collaborate with each other, share knowledge and ideas because they're all working within the same relative context, even though how they actually do stuff is completely up to them. \n\nEvidence-based management is really your lead into a whole bunch of things that we can do really, really well and to understand how we're doing things. You can apply evidence-based management to your business; you can apply evidence-based management to your product; you can apply evidence-based management, some of the metrics, to an individual team, and you can figure out what's happening with your system, how your business is organized. \n\nWhen you make changes to that system, you can see it's the empirical data that you need to understand, not just your engagement with the market and your engagement with your users, but how your people are engaging and your products are delivering within that market so that you can adapt your strategic, intermediate strategic, and tactical plans in order to have a successful business, build the best product possible, and generate lots of money."
  },
  {
    "Title": "Mastering the Agile Balance: Navigating Flexibility and Inflexibility for Project Success",
    "Description": "Explores how agile teams can balance flexibility and structure, manage data integrity, and adapt processes to achieve project goals and improve decision-making.",
    "ResourceId": "KzNbrrBCmdE",
    "Url": "https://www.youtube.com/watch?v=KzNbrrBCmdE",
    "Date": "2024-09-19T11:05:27Z",
    "Captions": "The flexibility that you gain by being able to move things around ad hoc. I can move this one team from here to here. I can move this one project from here to here. I can merge projects. I can split projects. That overrides in most cases if you need it. The inflexibility on how the data is formed, right? That it's not quite as high fidelity as some folks would like, that they're able to do it when they before is enough. \n\nSo I think flexibility and inflexibility depend on what it is that you're trying to achieve. What's the outcome that you're doing? What's your goal? Figuring out which is the best method within that context and doing the best we can within that context."
  },
  {
    "Title": "Mastering Cloud Migration: How to Leverage Microsoft’s Tool for a Seamless Transition",
    "Description": "Learn how to use Microsoft’s migration tool to identify issues, review customisations, and plan for a smooth, risk-free transition of systems to the cloud.",
    "ResourceId": "XEtys2DOkKU",
    "Url": "https://www.youtube.com/watch?v=XEtys2DOkKU",
    "Date": "2024-09-18T11:59:33Z",
    "Captions": "Microsoft actually provide a tool that you run against your database that will tell you almost all of the things that are going to be wrong and how to fix them. So it's a case of just working through all of those stories. \n\nUm, so there's some customizations that aren't going to work in the cloud. There's quite a few custom field setups or backend customizations that are not going to be able to work because you have no access to the back end. Those would need to be rewritten, but luckily they can be rewritten prior to the migration."
  },
  {
    "Title": "Evidence-Based Management: The Four Key Value Areas in Scrum",
    "Description": "Explains Scrum’s four key value areas—current value, unrealised value, ability to innovate, and time to market—for data-driven product and organisational improvement.",
    "ResourceId": "sT44RQgin5A",
    "Url": "https://www.youtube.com/watch?v=sT44RQgin5A",
    "Date": "2024-09-13T07:00:34Z",
    "Captions": "When I'm talking about evidence-based management, I generally talk about four key value areas with specific metrics in those areas. The reason I talk about four key value areas is because they cover different aspects of our holistic system view. Rather than a suboptimal optimisation at a single level, we want to ensure that we have metrics in all of those key value areas.\n\nThe four key value areas in Scrum, as outlined in the Org's evidence-based management guide, are kind of broken into two categories. There are two key value areas in each of the categories. The one that is more business-focused is the market value. If we have a product and we're trying to build a software product and we're trying to get it into the market, there are two places we have to look for where our value is. One is the current value of our product. That's the product that already exists, potentially. If we don't have a product that exists yet, that one maybe doesn't have any metrics yet. But if we do have a product and it exists and we've got it in front of real users, then we want to think about what our current value is and how we measure our current value—the value we have in the system right now.\n\nI might have telemetry. In fact, don't just think about it—get telemetry on your product. If you're a product manager and you manage a software product, you should have access to telemetry that shows you what features in the product are used, how often they're used, which users, and which of your customers, if you've got bigger customers, use those features. That's part of your evidence-based decision-making process. But also, are your customers satisfied with your product? Are they actually satisfied? You could do that with surveys; that's a very lagging one. Telemetry is almost immediate. You could have real-time telemetry on what's going on in your product or near real-time. That's us understanding our current value—the product we have in the market right now. It could be how much money we're making from it right now, which is also part of that or revenue by employee. There are a bunch of metrics you can use in that current value space.\n\nThen we've got this idea of unrealised value. That's value that could be in our products that isn't yet. We store a list of the things that we're going to go build in our product backlog, so that's part of the story—your product backlog. But also, you're probably looking at market analysis, competitor analysis, and industry trends to figure out how we can open up new markets for our product. That unrealised value piece is actually the scenario I like to use for market value.\n\nTV showmakers generally prefer to invest in a new show, a brand new series, than to add another season to an existing series. The reason is that a second season to an existing series is almost never going to have a higher audience. Your first season is your maximum amount of audience, and then over time, it's going to dip. How good the show continues to be will either be a \"holy moly, that's bad\" or a slow decline over time. That's why you have shows like Halo, which was just cancelled. The new Halo show showed a steep decline in the second season, so they're not going to do a third. Or you think of another show, I think it's Supernatural, which went for 16 seasons, 16 years, before they finally brought it to an end. That's because that line is declining, but it's declining at a slower pace, so there's still enough money to be made to make it worth investing in that show.\n\nIf we do something brand new that the audience has never heard of, that doesn't know whether it's good or bad, then we can open out that new market, that new group of people, and bring them into seeing that show. You're more likely to have a higher audience for a new thing than you are for adding features to an existing thing that existing people use. Existing people are the ones that care about it, and you're already shortening your audience. The same is true for features in your product. Whenever you add a net new feature to your product, that's you opening out new markets, new opportunities, new capabilities for your customers—brand new capabilities that will hopefully be able to bring in new customers that you didn't have before or even whole new segments of customers that you didn't have before into your story.\n\nBut that takes a lot of effort and focus and data and analysis, right? Trying stuff, experimentation, hypothesis-driven engineering practices sit in that space where we're going to keep trying new stuff to engage or re-engage with users in that unrealised value space. That's our market value at the top. That's the focus of everybody. Let's be clear that we want to have as many product developers as developers in our team and not just jobbers doing the job. We're looking at how we all work together to make this product a success. We need experts as well that maybe don't care about that stuff; they care about their piece. But we want at least some of this. That's where product ownership kind of sits in the Scrum world, focusing on unrealised value and current value, the market value, and then up into the rest of the business.\n\nProduct management sits in that space, and hopefully, we have some product management skills in the developers on the team. Product developers, we have a good product owner who is a product manager who understands Scrum, and we have other people in the organisation also looking at this. You might have marketing people with a marketing skill set looking at this, people from a sales skill set looking at this, and all working together to start funneling features and capability and ideas into what are we going to do in this product—that's market value.\n\nThe other piece is organisational capability. This is the piece that, if you're on an engineering team, you lead an engineering team, or you're part of an engineering organisation, you have 100% control over. There are no excuses in this space; it's all you. Those two key value areas are the ability to innovate. The ability to innovate is about how much focus, how much time, how much effort do we spend innovating net new functionality? How much time do we spend on that net new functionality versus on the other stuff that we have to do? We have to do a lot of other stuff as well, but are we maximising the amount of time we are able to spend on that and minimising the amount of time that we spend struggling with complexity? Technical debt in that space of ability to innovate—any technical debt is going to reduce your ability to innovate. Any undone work is going to reduce your ability to innovate. Anything that is slow is going to reduce your ability to innovate. We have to spend time on the slow stuff rather than the fast stuff.\n\nThe other side of that is time to market. Time to market is how quickly can we go from that change we've made all the way to production? Those two make up organisational capability, and we need to measure them as well. Our ability to innovate can be measured in lots of different ways. I actually have some metrics examples that I can use over here. Ability to innovate has loads and loads of metrics. My background is engineering, so my list is going to be a little bit engineering-focused. If we're building a product that has customers that take versions of our product, either because we run private cloud for them or because we're building something that people install, I probably want to be looking at our percentage of people that are on the current version of our product. I probably want to be looking at our time spent merging code between branches. How much time do we spend on that? If you've got a branch branching policy, usually that's if you promote by environment. This is really old-school DevOps, but if you promote by environment—Dev, QA, staging, production—then normally it's four environments, and you promote by environment, i.e., you're merging code between those actual versions of your code that are then deployed to physical environments. That's really old school, by the way; don't do that anymore.\n\nIf you're in that world, then we might want to measure the amount of time we spend merging the code between branches. That could be a lot of time. I worked with an organisation a few years ago that had 90 teams in 13 locations in nine different countries. I think they know who they are when I describe that. They had a single product that had 90-odd teams working on it—90-odd active branches—and then merging that down and creating a unified product was a lot of work and a lot of effort. Getting a new version of your product was difficult. Ensuring that everything works together, ensuring that all of those things work well, could be something you measure. So installed version index, time spent merging code, production incident count—how many incidents are you having in production? If we're innovating and we're shipping bad quality code, then we're going to have a higher level of incidents in production. We need to have both positive and negative measures. We're doing the innovation really well, but we're delivering crap to production. We need to fix that; that's not going to help ensure that our customers are happy with us.\n\nThe two biggest ones that I think are easiest to collect from a data perspective are innovation rate—what percentage of your time do you spend on net new functionality versus maintenance versus support? This is the age-old CapEx versus OpEx conversation or can be, depending on your product and your organisation. How much time do you spend on those things? Obviously, you want to be spending more time on capital expenditure because it's taxed differently anyway. From a financial perspective, that's a good idea. But also, we want the capital expenditure—investing in our product's future and new features and new capabilities—is the thing that's going to bring in net new users, which is hopefully going to translate to revenue. So we want to be looking at innovation rate; that's a big part of the story.\n\nThe other one that I like to look at is technical debt. Technical debt is really important. I generally use Sonar, SonarQube, to do that. You can do on-prem or you can use their cloud version. If you're open source, it's free; if you're not open source, you have to pay. SonarQube looks at code bases using industry standards and recognises industry standard metrics for technical debt. It looks for known code flaws. There are constructs that people create in specific languages. Let's say I write in C. If I run SonarQube against it and it tells me here's a whole bunch of security problems you have in your code, I should really go fix them. They're known potentials for attack. There will be other vectors that you don't know about, but at least you don't have the ones you do know about. It could have code smells—things that are just constructed in a way that means it will be more difficult to maintain and support. These are things that we can fix, and we can monitor and we can fix. When you do run it first, it's going to look nasty; it's going to find like 6,000 things that are a problem. But if you have a policy of leaving any code a little bit better than you found it, then if you're going to edit some code, look up the metrics for that part of the code base, fix any of those problems, then make changes to the code, then revalidate, and you should find that it gets a little bit better over time. That's just policies and procedures for the team—make things a little bit better.\n\nTechnical debt is super important, and it's much easier to collect than you think. You just apply SonarQube, but it's really hard to do something with it. There's definitely a human thing that when we see 5,000 things dumped on us, we get dejected. I think that's the right word—unhappy with that—and then let it go. Instead, that's really important. The ability to innovate is one of our key stories here, and the other one is time to market. Time to market is about how quickly we get our product into production. Good examples in the industry of fast time to market are things like Facebook—12 and a half minutes from developer code commit to production. That's including all testing and load testing and stress testing and all those kinds of things. That's super quick.\n\nStarbucks, at least when I worked for a company that engaged with them back 13 years ago, had decided that their effective planning horizon, i.e., time to market, effective planning horizon for changes they needed to get was 48 hours. From implementing a thing that they wanted to get out into production to actually being out in production, they wanted to be 48 hours. That was a business decision. Another one is, and this one's a little bit more—it could be what's it called when it's not like a tale rather than reality—but I heard tell that after the Windows Vista quality debacle fixed in Windows 7 and then the Windows 8 usability debacle fixed in Windows 8.1 a year later, Satya, the CEO of Microsoft, reasonably new to it at the time, went down to that team—the Windows team, which is like four and a half thousand software engineers cutting code every day—and basically said to leadership that we've taken a business decision. We want to see working copies of Windows in the hands of real users at least every 30 days. We want it rolled out to everybody in the world at least every 90 days. They said that's impossible; you can't do that. He said it's not my problem; that's an engineering problem. This is a business decision; your job is to make it happen. Go figure it out.\n\nThat business decision is what birthed Windows 10 and that new release cadence. Now, they're less than 24 hours from code to production inside of Microsoft—a week to production for what is it, 17 million people in the Insiders program. Every three months, they do that big ship to everybody in the world—the 950 million other people that are using Windows. That cadence means that you need a higher quality on a daily basis. Time to market brings in things like cycle time, release frequency—how often you release. Back in 2012, you could probably count on both hands the releases for major software products from Microsoft. As of about 2018, they were doing 86,000 deployments a day. That's a huge difference, and it takes time and effort to get there. You have to pay back your technical debt; you have to build architectures in your product that support it. You have to build teams and knowledge and skills that support it. But once you get there and you're on that continuous cycle, you can fix stuff much more quickly. Any changes you do make have a lower impact because you have that.\n\nInstead of promoting through environments where it's easy to miss stuff, they promote through what's usually called a ring-based deployment structure or controlled exposure to production, where you're actually in production very quickly but on a small subset of users. Then you continually increase the potential blast radius. You're hoping that if each of those rings has enough people in it and you're monitoring the telemetry and understanding what's going on within that space, you should minimise the chance of things making it into production. Perhaps that's something that CrowdStrike should have done. I just saw a post from those guys that said, \"Yeah, we're going to start doing that now.\" It's like, \"Yeah, you should have been doing that already.\"\n\nSo that time to market—getting things quickly—lead time, cycle time, how quickly you get things in front of customers, time to change direction. If you're doing something and you find out it's the wrong thing, how quickly can you change direction? Time to build, time to self-test—how quickly can your developers test things locally? I think the Azure DevOps team was like six weeks to get a build out the door back in 2010. Now they're doing continuous delivery, so they're delivering it out the door every day. That time to market reduction, even just time to self-test—how quickly do your developers know that they've caused a failure? \n\nI think the Azure DevOps team went from 48 hours with their automated builds. Because they had mostly end-to-end system tests, don't do that anymore. That's like so 15 years ago. End-to-end system tests are not a way to validate that your product works. That's the pants. I can't be bothered actually building quality into my product, and I need to test quality in a way of building—of ensuring that your product works. Unit tests, unit tests, behaviour-driven—whatever you need to do, but unit tests, fast-running, super quick unit tests. I think the Azure DevOps team went from 48 hours, and it took them four years to take all of those. I think they had like 30,000 system tests and turned them into 990,000 unit tests. The 90,000 unit tests run in three and a half minutes, and the 30,000 system tests took two to three days to run. That's a huge impact on your engineering team's ability. Engineers are waiting for those things to be successful. If they're not waiting, they've moved on to other things, and now you're suffering context switching and cognitive load between those things.\n\nFrom an organisational capability perspective, all of this stuff is 100% within the control of engineering—of whoever builds the product. Do that right. If you're able to do that really quickly and effectively, that gives the business the incentive that we can ask for something and get a change really quick. So what should we be asking for? Perhaps we should start thinking about hypotheses and trying stuff and testing stuff that we can get into the product, testing in production, and then perhaps we ditch it out of the product because it's not providing the value that we think it should.\n\nThis idea of evidence-based management has the four key value areas: current value, which is your product that exists right now; collecting telemetry, understanding what's going on and how users are using it; unrealised value, which is things your product doesn't do yet; market value, getting new customers, getting new capabilities; and at the bottom, you've got your organisational capability with the ability to innovate—how much time do you spend adding that new functionality versus supporting and maintaining existing functionality—and time to market—how quickly does it take for a change you make to get into production? Hopefully, close that learning loop all the way back to your products and have that full time to learn cycle in there. That is the four key value ideas of evidence-based management."
  },
  {
    "Title": "Mastering Outcomes: How Evidence-Based Management Transforms Your Project Success",
    "Description": "Learn how evidence-based management uses clear outcomes and targeted metrics to improve project success, enabling informed decisions and continuous improvement.",
    "ResourceId": "MO7O6kTmufc",
    "Url": "https://www.youtube.com/watch?v=MO7O6kTmufc",
    "Date": "2024-09-12T13:46:15Z",
    "Captions": "Once you've figured out what your outcomes are, you need to figure out what metrics are going to help you measure progress towards those outcomes. So, I mean, these can be super tactical things that help you move towards those outcomes. It can be leading or lagging measures; there's all kinds of things that come into that. But evidence-based management is that application of practices within the context of that data to help you make decisions."
  },
  {
    "Title": "Understanding the Difference: Traditional Management vs. Evidence-Based Management",
    "Description": "Explains how traditional management relies on authority and intuition, while evidence-based management uses data, analysis, and meaningful metrics for better decisions.",
    "ResourceId": "3CgKmunwiSQ",
    "Url": "https://www.youtube.com/watch?v=3CgKmunwiSQ",
    "Date": "2024-09-12T07:00:02Z",
    "Captions": "So I get a lot of questions about the difference between traditional management versus evidence-based management. I'm not sure the term traditional applies. It's interesting; I had a book on evidence-based management practices that I gave to my father about 10 years ago when he was asking me what the heck it is that I do. I gave him this book, Radical Management, and he read the book and he said, \"Oh, that's what I've been doing for the last 40 years in my company.\" That's the type of things, trying to change the organization and move people in a particular direction and do all those things. \n\nSo maybe that's why traditional, like if people have been doing it 40 years ago, 80 years ago, then it's the common management, the normal way people approach things. Evidence-based management is hard. If we're talking about the differences between traditional, classic, the way most people do things, common cause, right? Evidence-based management is hard. Evidence-based management is we have to collect data, we have to read the data, and we have to make informed decisions. \n\nMost management decisions are made one of two ways: make it up. I'm just going to decide. I'm the manager, I'm the boss, I will decide, and I make a decision, right? Or I ask somebody more senior to me to make the decision, right? So escalation-based decision making. Both are bad. We shouldn't be making decisions on multi-million dollar things based on, or even smaller than that, right? But based on just making it up. We want to be asking, \"Why are we doing this thing? What do we hope the outcome's going to be? And how are we going to measure it?\" \n\nWe want evidence to know. That's why when we're in court, we don't make decisions based on how we feel today, right? We collect a bunch of evidence, we present that evidence to a group of people, and a group of people analyse that evidence, including, you know, not evidence parts as well, how they feel about it, how they think about it, and they put it together into something that is a coherent decision. And that's what we would like to see in management today. \n\nMost managers trying to do evidence-based decision making, unfortunately, the evidence that they choose to accept is generally whatever the easiest data is to collect. Most of that revolves around metrics, right? Original estimate, actuals, how far off course are we? People talk about scope creep. Well, you said you were going to do this and it's changed to this; therefore, the scope has changed. \n\nThat traditional look at data is very... what's a good way to describe it? Vanity metrics. That's the expression I've not used in a while. Vanity metrics are the biggest part of this. I want to create metrics. For me as a manager, I want to have metrics that make me look good. I want to keep my job. I want to perhaps get promoted. So I want to create metrics that make me look good. That would be nice. So that's the ones I'm going to focus on. That's the ones I'm going to judge my people that report to me by, is the metrics that I think make me look good. \n\nUnfortunately, metrics that make you look good are suboptimal metrics. We're looking at one part of the puzzle. Me, right? Me as a manager, I'm looking at one part of the puzzle and I'm trying to make a decision on how I measure things based on one part of the puzzle. But is my decision going to be good for the whole thing, for the whole organization, for the whole product or organization team, whatever it is? At whatever level you're playing at, is that going to be the right metric that's going to help progress the outcomes, the impacts, the goals that we're trying to have as an organization, the vision? Or is it just making me look good? \n\nThat's a suboptimal metric. We're not looking at the whole system, just part of the system. And that's really common. I see that with story points and velocity, right? Ridiculous metrics to look at outside of the context of internal to the team. Story points and velocity can be useful inside of a team. Actually, I would maybe disagree with my own statement there, but they might be useful within that context. But outside of the team, no use whatsoever. \n\nAny manager that makes a decision based on velocity, any product owner that makes a decision based on velocity, you know, sum of story points per sprint or sum of tasks, whatever it is, it's just mental. That's vanity metrics. We're trying to massage the metrics to make ourselves look good. And that's really the big difference between traditional management and evidence-based management. Evidence-based management is about the evidence. We're going to collect the evidence, we're going to try and validate that evidence, right? Is it good evidence or is it bad evidence? And then we're going to try and make decisions based on it rather than just making stuff up."
  },
  {
    "Title": "Unlocking Team Potential: How Measurement Influences Engagement and Collaboration",
    "Description": "Explores how performance metrics shape team engagement and collaboration, highlighting the impact of measurement on behaviour, motivation, and organisational culture.",
    "ResourceId": "hu80qqzaDx0",
    "Url": "https://www.youtube.com/watch?v=hu80qqzaDx0",
    "Date": "2024-09-11T13:45:58Z",
    "Captions": "The way we measure people informs the way they behave. So whenever you're working within an organisation and you find somebody's working against you or somebody's not being as involved as you think they should be involved, and you're wondering why, there's probably some organisational measure or metric, something being levied against them, that enables that behaviour, that ensures or encourages that behaviour in that person. \n\nSo the best way to figure out why somebody is doing something in a particular way that maybe you feel has a negative impact on the way your things need to happen is to figure out how they're measured."
  },
  {
    "Title": "Mastering Evidence-Based Management in Agile: Inform, Don’t Control",
    "Description": "Explains how to use data in Agile management to guide decisions and behaviours, focusing on informed outcomes without letting metrics control teams or stifle value delivery.",
    "ResourceId": "66NuAjzWreY",
    "Url": "https://www.youtube.com/watch?v=66NuAjzWreY",
    "Date": "2024-09-11T13:36:29Z",
    "Captions": "Evidence-based management is the application of evidence-based practices at the strategic and tactical levels in an organisation. It involves using data to inform but not control the actions and behaviours that have been shown to impact outcomes. So what that means is that we're going to collect a bunch of data within the organisation. The way we measure people informs the way they behave. So whenever you're working within an organisation and you find somebody's working against you or somebody's not being as involved as you think they should be involved, and you're wondering why, there's probably some organisational measure or metric something being levied against them that enables, ensures, encourages that behaviour in that person.\n\nSo the best way to figure out why somebody is doing something in a particular way that maybe you feel has a negative impact on the way your things need to happen is to figure out how they're measured. That can be difficult, but if you can glean that information, you can figure out why they're behaving the way they're behaving, why they're taking the actions that they're taking. We want to try and have more behaviours and actions that impact our outcomes positively. We want to deliver more value to our customers. \n\nWhat other outcomes might your business want? Well, they might want more revenue. They might want more value for their customers. They might want to save money. What else might be good impactful outcomes for our business? We might want to increase our capability within a particular market. It's difficult without a specific instance to have a specific outcome that you're trying to achieve. \n\nOnce you've figured out what your outcomes are, you need to figure out what metrics are going to help you measure progress towards those outcomes. These can be super tactical things that help you move towards those outcomes. It can be leading or lagging measures; there's all kinds of things that come into that. But evidence-based management is that application of practices within the context of that data to help you make decisions. \n\nOne of the reasons I very specifically said inform but not control is that the data is not always going to result in a specific action. For example, let's say I had a metric for my team or teams. I've got a group of teams I'm working with, and my metric is the number of live site incidents that last or exist for longer than two sprints—let's call it three sprints. We're running a live service; we're going to have outages and issues and things that happen in the live service. When those things happen, we're going to create live site incidents or live site incident mitigating actions—things we're going to change in the product in order to not have that type of live site incident happen again.\n\nSo we've done our analysis, we've come up with these ideas, and then we expect our metric to be that we expect teams to clear those off within three sprints. If I expect them to clear it off within three sprints, I maybe want to have a measure, a team dashboard, and I'm going to have a measure that says what is the number of live site incidents that have been existing for longer than three sprints and what is the trend of that number. Is it trending up or is it trending down? \n\nYou may see your list of teams, and you see the numbers, and they're all good apart from this one team that has these four outstanding live site issues that have been there for longer than, let's say, six or seven sprints. That doesn't mean there's something wrong in that team. These are indications, these are flags, pieces of evidence that you use to inform your decision-making. So you'll probably need to go ask them how it's going, and maybe there's a team that they're waiting on something else to happen. They can't fix their thing until some other third party that they don't control and we have limited influence over needs to do something. \n\nSo the team, that data looks bad, but the team's doing fine. They're chasing it on a regular basis; they're putting pressure on that other group on a continuous basis. It's just taking time to get resolved. That's why it informs but does not control. \n\nWe're making decisions based on the evidence. We're collecting a bunch of evidence; we're extrapolating what we don't know or don't understand. The evidence is going to have gaps in it, and then we're making an informed decision based on our understanding of the current situation. That's evidence-based management in a nutshell."
  },
  {
    "Title": "Seamless Migration to Azure DevOps: Unlocking Enhanced Collaboration and Productivity",
    "Description": "Learn how to migrate projects to Azure DevOps using self-service or managed tools, ensuring accurate data transfer, improved collaboration, and streamlined development workflows.",
    "ResourceId": "2Sal3OneFfo",
    "Url": "https://www.youtube.com/watch?v=2Sal3OneFfo",
    "Date": "2024-09-03T09:57:36Z",
    "Captions": "There's a number of migration services that we offer. They're kind of related as two sets of tools. There's Martin as your DevOps migration tools, which is on GitHub and available for people to use, but we help people use it. We do it for customers when they don't want to learn it themselves. So that's the more targeted migration tool. \n\nI want to move, I want to stuff, I want to merge stuff. So that's the actual moving individual work items around. That's what I want to do. Then that's one of our services. The other one is a kind of managed import into Azure DevOps. Microsoft have a tool called the Azure DevOps data migration tool, and that data migration tool takes the whole thing."
  },
  {
    "Title": "Empowering Employees: The Crucial Link Between Financial Awareness and Motivation",
    "Description": "Explores how financial awareness boosts employee motivation, decision-making, and accountability, highlighting the impact of financial literacy on workplace culture and performance.",
    "ResourceId": "f8q2fBkUez0",
    "Url": "https://www.youtube.com/watch?v=f8q2fBkUez0",
    "Date": "2024-09-03T03:33:58Z",
    "Captions": "Good now to you. Hello, good now. This is Riffing with Ryan. I am Ryan Ericson, surprise surprise. If you didn't want to see me this morning, too bad for you. But if you did, thank you and welcome to be here today for an episode that we have titled \"Should Companies Take Money Off the Table?\" Why, why, why, you ask, is this the topic? Because of the two gentlemen I'm going to invite out of the Penalty Box on stage. Had a little bit of a repartee about this a couple of weeks ago. We've been trying to arrange the session for a little bit. One of those gentlemen I'm going to bring on stage now is Martin Hinwood. \n\nHello, Martin. \n\nHello, how you doing? \n\nOh, I'm just fantastic, you know that, because I'm always fantastic. And the second gentleman to bring on to the stage for this conversation today is Mr Michael Cers. \n\nHello, Michael. \n\nHello, a frequent partner and friend on this particular show that we do here. I do, God, I keep calling it a we. Who is a we anyway? \n\nSo, money. I know, and I have a big huge deal with saying we, we, we. Like we are not a we until I agree that I am part of this we. You get it? And that's just me. But I would propose a couple of things here. One is that Martin, actually I'm going to do this one way. Michael, let's go first and say just ten words or so about who you are, what it is you do, and where. And we'll go to Martin, and then we'll come back to Michael again, and you can give your riff to start us off. \n\nSo, without further ado, Michael, give me ten words about your life. \n\nOh, ten words? Okay, that was too okay. So, I'm currently COO for one of the pretty important edge networking things. I have my background in everything IT, computers. Love to be full-stack developer. Been in agile organizational development, and I like to get into a lot of conversations, write a lot of stuff, and yeah, that's my life. \n\nThere you go. Alright, ten words from Martin. \n\nWell, I am a professional Scrum trainer, a professional Kanban trainer, and I've been a Microsoft MVP in DevOps for the past 15 years. I run my own business called Naked Agility, where I do agile DevOps consulting, coaching, helping people get better at building software and products. \n\nPerfect, nice. That's the ten words. Okay, Martin gets round one for using less words than you did, Michael, so sorry about that. \n\nSo, to set the stage for the conversation, again, we're talking about money. The post that you did a couple of weeks ago, Michael, had some themes around financial literacy. \n\nAgain, I'll leave it there. Financial literacy, is that enough to guide you into your point of view on that particular topic, Michael? \n\nThat's you. \n\nOh, that was my cue. Good. I didn't... So, I can bring the post up if you want, but it was, should companies take money off the table? That was... Alfie Kohn, Dan Pink says you take money off the table is beautiful. And then you came in with a not that. \n\nSo, exactly. So, there's one very interesting proverb I picked up in my student time, and that's everything worth doing is worth overdoing. So, that is basically where we get from. Of course, I know that the original intent of Dan Pink is to say that I don't want people to be worried about their livelihood because it distracts them from achieving the things that they're setting out to achieve. And that is not something that we would like to have in a company. But of course, I'm taking this one a bit further, and it's also based a lot on investigation, a lot of experience in organizational transformation, organizational change, observing also from the good old times of being a project manager or system architect that the financial conversation is usually very, very hard. \n\nA friend of mine recently also gave this example. So, you have this team of developers, they're working in their traditional way of working, and everybody's somehow happy. The salaries are paid, everybody has a stable job, nobody needs to worry about anything. And so they have this issue that they're doing three releases per year, which is not even once a quarter, but every three or four months, more like it. And of course, they're always doing work, but then when the release comes, first you come the release packaging, then comes release testing, the debugging, preparing the release, release coordination, all of those kind of things. \n\nAnd so does this team have a problem? Yes or no? And the team somehow starts to argue, \"Yeah, you know what? Nowadays, modern and CI/CD, and we should make the transition.\" And what do you think the manager understands? \"Oh, the nerds want a new toy.\" What does the manager say? \"No, we've got serious work to do.\" So what they're failing is the communication about how much does this process cost us. \n\nSo we're spending like 60 days for a whole team just on the release management, on the release process every quarter or every four months. That is 60 days cost. How much? Let's just say $1,000 per developer per day. So 60,000 per developer. You have a team of ten people. We're talking 600,000 three times a year. We're talking over $2 million for what? What do we get for that? What is the value we produce? And that is a kind of a different conversation. \n\nAnd yeah, we would like to introduce continuous delivery because it's a better process, because it's more modern, and it's kind of a conversation many people are not able to lead. And because they have never considered how much are we spending on what and what is the returns that we are getting because they do not have the literacy to even think in those terms. \n\nAnd what I just told you is really, really simple math. One developer, one day, $1,000. Ten developers is $10,000. Sixty days is $600,000. There's no magic to this. It's not like you need to have studied accounting or an MBA in order to do this kind of thing. But people struggle to have this conversation because, like I said, the money for ties has been taken off the table. They are happy. We get a fixed salary. Can we live from this salary? We can pay our rent. And where the money comes from or where the money goes, that's my manager's problem. But like that, they are bringing themselves into a situation where they are unable to make the impact that they need to make in order to do the best possible job. \n\nAlright, we let that sit for a moment. Thank you, Michael. Martin, you had a response to that in public. I'll hang you out there to when you go. \n\nYeah, so I mean, there's absolutely nothing wrong with what Michael said. I think he is correct that there is an epidemic of people in organizations that don't understand what their time and their group time costs to the business, costs to the customers. So they're making decisions and making, as you know, Ryan, Michael, but every developer, every person in your organization, all the way up the chain, makes lots of micro-decisions every day within the context of what they know, their knowledge and expertise, that they don't go ask anybody. But they make those decisions, and those decisions cost the business money. \n\nAnd are they making the right decisions, or are they making the wrong ones? And I fully agree that they should be making those decisions within the context of understanding what it costs to do business. I used to work on a Scrum team with an Australian company, and we knew that our Scrum team was charged to the customer. So this was a consulting company, so that includes margin as well, for $60,000 a Sprint. \n\nSo this was Australian dollars, right? So $60,000 for two weeks. So we were looking at every Sprint thinking about, well, if the customer is giving us $60,000 and we're doing this work, what are we providing for them? What are we doing next? What's the most valuable thing we can do to spend their $60,000? \n\nAnd that's absolutely key. But I think that is completely unrelated to the Dan Pink story. It might be anecdotally related, as in a manager that sucks or an organization that sucks, and I'm using \"sucks\" in a totally bad manner there, but that isn't very good. That doesn't understand these concepts might equate the two, and thus we end up with a difficult conflation that Michael's talking about. \n\nBut the idea of me as an employee and my personal outlook on my finances and having enough as an individual with my family has nothing to do with the business. The business that's running, that's a totally different story. That's a personal story to the business operating cost story. Although my personal story of how much I earn and how much is provided to me is a number on the accounting for that, right? \n\nBut for me, this is a personal story of if I'm sitting here, this is the Dan Pink idea. If I'm sitting here worried about being able to pay my rent, I'm not going to be focused on solving the business problems. I'm going to be focused on worrying to pay my rent. Me having enough so I'm not worried about the intrinsic versus extrinsic motivations and can focus on the intrinsic motivations of autonomy, mastery, and purpose does not preclude me understanding how much I and my team and the work that we're doing costs to the business or the customers. \n\nThey should definitely understand that stuff, but I think my belief is they're two unrelated and separate stories. However, the outcome of the personal story is a line item on the accounting on the other story, if that makes sense. That's the way I think about it. \n\nActually, in this one, and this may be my personal take here, I have a company too. How do you separate me as a person from the company I run? It's probably pretty difficult because I identify as this company, and this company exists because of me. If this company is in financial trouble, so am I, and the other way around. \n\nSo for me, as a business owner, it is absolutely natural that every financial decision, every product decision, every development decision I have to take from two angles. Even the question, do I go into the cloud? Do I rent the VM? Do I host this stuff by myself? Is made from a perspective of this one. Ultimately, it hits my pocket. \n\nSo I have a different way of making decisions than I would have as an employee who doesn't care where the bill gets sent and how big it is. And even you have this, I mean, I'm joking in this one because what we're talking about is five or ten dollars, but still the point stays that if you have financial responsibility for your own business because it affects you personally, you make different decisions than if it's completely detached. \n\nSure, but that's not an employee issue. That's a business owner issue, and there is only one or two or three of you in a particular business, maybe a little bit more depending on the scale of the business. And then there's hundreds of other people who are the people doing the work that actually don't care about that story explicitly because the success of that story for you as a business owner lines your pocket. It does nothing for the employees. \n\nBut if the business makes a hundred million more profit this year, I don't get any more as an employee in my paycheck, in most companies, unless there's profit share, right? But as a business owner, and as a business owner myself, I do separate those things. My success as a business owner means I earn more money, right? Because it's my business. \n\nBut I need to be conscious as a business owner that that's not how my employees think, and that's not how they're supposed to think. And even all of that doesn't preclude those employees taking care of the pennies and pounds. A great example of this is what they've done in Jaguar Land Rover recently. \n\nSo one of the things that they found, they were doing a bunch of analysis on why this disaster happened. The disaster that cost them something like $300 million. And the fundamental root cause of this problem was an aging machine that was creating slightly faulty parts. Like they were good enough, but not good enough long term, so they had to be replaced later, and that was much more expensive. \n\nAnd this machine was run by a person, and they asked that person, \"Why didn't you request a new machine?\" And they're like, \"I've requested a new machine every year for the past five years.\" But what happened in that story is that that request went up in the organization to somebody who it wasn't in their budget for this year because perhaps they were looking after the shareholders, right? And we want to have a certain amount, so we can't afford $5 million for a new machine, and they would deny that request. \n\nSo the change that they made in the organization was they now allow every single person in the organization to approve any amount of spend. And that sounds ridiculous. That sounds like people within the organization will just start spending money willy-nilly, and you know, you're then hemorrhaging cash. But they created this understanding of kind of spend it like it's your own money, right? Would you spend this money on this thing? \n\nAnd that's kind of, that's orthogonal but related to what it is we're talking about, right? That we want the people doing the work, regardless of whether they are owners in the business or not, if you're doing work, if you're making decisions, you want them making decisions with the understanding of the context, the operating context of the business, the costs that we're running, and things that are happening. \n\nAnd I absolutely, one thing I totally agree with you, Michael, I see time and again, especially in professional services organizations, where they seem to deliberately shield the people doing the work from the costs of the work. I was just working in an organization where I think we had the group that I was in that was about 150 people working with the customer, right? And this was mega ridiculous cost. You probably would talk about an operating cost per day of about $2,000, $2,500, maybe $3,000 to the customer, right? \n\nSo $3,000 a day per person, 150 people, that's more than a, that's holy crap, that's like more than $400,000. My math in my head sucks, Michael, sorry. It's more than $400,000 per day. It's a lot, a lot of money. And what were they getting for it? People were sitting doing make-work because they couldn't think of what to do. But they didn't fundamentally understand the cost of the business. They didn't understand what they were being charged to the business, to the customer. They didn't understand how much money they were burning just sitting there not doing anything for a day. \n\nSo they weren't making decisions with context, and it's that context that's important. And I very much agree that lots of businesses think that they have to shield their staff from the cost of actually doing business, and I think that's wrong. \n\nExactly, and that is the point where I said this is the point where I said that, look, really, and I was teasing with this post quoting Dan Pink, \"Take the money off the table,\" of course, because this is the point where it goes wrong when you run your business and say, \"I do not want for any reason, whatever, not picking out anything, my employees to know the financial impact of what they are doing.\" At that point, you're hurting your own business. You cannot run a successful business if you're surrounded by people who don't know the consequences of their actions from a financial perspective. \n\nI guess then I really don't understand why you put down on the table because they're completely unrelated things, right? So I know you're saying you're teasing, right? But even when you're teasing, if you're making an analogy between two things, they have to be the same thing. And I think they're fundamentally not the same thing, and that's what triggered me to reply, right? \n\nBecause I guess I got suckered. I'm easy to be triggered, right? I have, I definitely, I have an Asperger's coach and helps me very much on not poking at things. But for some, when they're ABS, the issue I have is not that when you're creating these two things that are radically different, even in kind of in G, right? It's not for the likes of us who are practitioners within this space who could potentially fully understand that, \"Oh yeah, Michael's just taking a rip at Dan Pink to try and get engagement and talk about the topic.\" \n\nBut pull it apart a little bit. But what about all of the people out there who stumble upon your post? And what they read, and if they read your post and they're not in that context of understanding these concepts, they're going to read, \"Dan Pink's ideas are crap. They're not what we want to be looking at, and we should disregard everything he's talking about.\" \n\nThat's what I feel that they would hear, which is why I quite often, Ryan will know this because we follow each other as well, I quite often reply to posts based on that context, right? I'm not actually replying to the person who made the post. I'm replying to all the other people who would read that post, and maybe at least I can save some percentage of them from getting the wrong end of the stick. \n\nThat's a British idiom. What's wrong end of the stick would be getting the wrong idea, right? Misinterpreting the joke as a reality. And I think it's very easy to make those conflations that result. What's the dual track agile? That's a really famous one, right? \n\nAre you familiar with dual track agile? \n\nYeah, so dual track agile is this idea, sorry, go means the ability to do the right thing at the right time. So dual track is, let's have the ability to sometimes do the right thing. Isn't that better than doing it all the time? \n\nYeah, so this is Joel's track agile. It's this paper talking about this idea that there are two types of work, right? You've got discovery work and you've got delivery work, and you need to do both. And the same people need to ebb and flow between that work depending on how, you know, if you don't know about something, you're going to spend more time on that discovery track. If you know a lot about it and you're just executing on it, you'll maybe spend a little bit more time on that delivery track. \n\nBut lots of people read that and then post about dual track agile being you need a delivery team and a discovery team, and they end up being two completely separate teams. And then we all have to spend a whole bunch of time and effort explaining to people that, \"No, that when people say that, that's not what it was talking about.\" You end up having to explain away those issues. \n\nAnd I just felt that there was a danger in the comment that you made of that similar idea happening, that disconnect between your intent and what we want to help people understand and what Dan Pink was trying to help people understand, which is that intrinsic-extrinsic motivation thing, which is separate from that business operating cost as part of the context that every employee should understand. \n\nInterestingly, I would say, yeah, I am not so sure that, how to say, and like you say, maybe business owners are a little bit different than the regular employees. And the question of should money be a motivating factor? But then I even come back to the concept, how can you promote entrepreneurship, not entrepreneurship, but entrepreneurship if your employees don't have this mindset? \n\nWhich mindset are we talking about? Because there's the mindset of they're happy and successful and feel like they can spend more time focusing on the work because we've taken money off the table at home versus the business focus of we need to understand the financial motivations within the context of business for business. And I don't think that piece is any different between an employee and a business owner, right? \n\nIt shouldn't be. If we can agree that it shouldn't be, I'm with you. The problem is, in practice, it too often is very, very different. \n\nWhy does that happen? \n\nI've got an idea on that. It's a very good question. Ultimately, I mean, you brought this up that the employee, they do not think like the business owner. So yes, I agree with you. So what's the... I do agree. I mean, I was thinking about this one from my own perspective. I used to be an employee for a long number of years, and when I transitioned into freelancing, into being a business owner, this shift, it took me, like I would say, like three or four years to start thinking differently. \n\nI mean, in part, it is, like you said, because as an employee, there are other people making this decision for me. I used to work for a company where I was out of the loop. I did not know the company's finances except for, \"Yeah, we don't have enough money for a raise.\" \n\nSo this... go ahead, go ahead. I think you're going to come back in there. \n\nYeah, I think I think there's a fundamental why here that's really important, which is why historically that thing that we're talking about has happened, that we've disconnected that businesses have systematically and deliberately disconnected their employees from the financial runnings of the business. And it's fundamentally so that they don't discover what their colleagues are being paid because they pay them differently. \n\nI had this exact circumstance. I used to work for a little company called Merrill Lynch. You might have... yeah, it was not fun, Ryan. It was not fun. I subprime mortgage as well, so it was even worse pre-2008. The... so I was having a conversation with one of my colleagues, and I offhandedly, not even thinking of the ramifications, offhandedly said, \"Oh, now I'm in the 40% tax bracket. That's going to kind of suck.\" \n\nAnd my colleague, who did exactly the same job as me, was incredibly pissed because they were nowhere near that 40% tax bracket. So they go to their boss, and I get into trouble rather than them getting into trouble for not paying them properly. I get into trouble for letting slip. \n\nFunnily enough, that was in 2007, and in 2008 in the UK, that became protected speech, right? Because in many places, I know it's... to... it... everybody should be talking. This is part of how we break this cycle, Michael, is that every employee should be talking to each other about the financial stories. How much do we earn should be open information within an organization. \n\nIt absolutely should, and I think in most states in the US, isn't it? It's protected speech as well, or is it federally protected? I think it might be federally protected. As an employer, you're not allowed to say to your employees, \"You can't tell each other about...\" If you don't want to, you're not forced to talk about it, right? \n\nYeah, I'd have to check into the legality of it, but that seems like it would be a more company-to-company kind of compliance issue. I'm not sure. \n\nRegulations protect it, and that's, again, this is completely BS as far as I'm concerned. I think, as far as you're concerned, what I was going to say is going to Michael's point and then coming back. When you become a contractor, when you have your own business, what are you? You're independent. Well, what does that mean? You are dependent on yourself for your financial awareness and your business acumen and those things. \n\nBut when you are employed by a company who has the financial information and controls the compensation about who they decide where you are ranked, what are you? You're dependent. It creates a dependency relationship. And then I think that was evidenced, Martin, by that situation. \n\nOh, well, we're dependent on this other person to give... well, hey, boss, you know, Martin's telling me this, and then seeking some other authority as opposed to having a conversation where the structure is set up for you to have that conversation. \n\nAnd I agree with you. I mean, Ryan and I both went on the same masterclass, so we know. The reality is in many organizations, though, that you do have that situation, even with the best intentions of leadership when it comes down to salaries and stuff. You normally... I'm not saying it's the right... I'm not saying it's good, but you normally end up in that hierarchy issue with line management and discussions of salary, perhaps with HR, right? \n\nAnd I think that the... that does fundamentally have to change. I think I don't fully understand what that would look like in an ideal world, and maybe there is no ideal, and it's company to company and that kind of thing. But I did see... who was the web guy from New York that used to be very active? I think he's retired now. He had a company, and he published all of his employees' salaries for all of his employees were published internally in the organization, and they had levels. \n\nBecause it wasn't... I can't remember the guy, but this was an engineering... they were a software development company. And it was just... it was very interesting. And he would open source that story, right? And say, \"Here's the story. Here's what I'm thinking.\" And actually publish it publicly and then say, \"What do you think? Is this going to work? What are the things that might not work?\" \n\nAnd I think that kind of open discussion... I actually... I don't understand where the closed salary discussion comes from, me personally. And this is a Martin thing. I'm quite happy to tell anybody what I earn, right? But I definitely feel like most people feel like it's secret information. \n\nYeah, I'm not sure where that comes from. There's also a lot... how to say, there's also a cultural element to this. I know that in Germany, there's this PR: you don't talk about money. You have it. But literally, that is part of the problem, that the people, the business owners who have access to the money, they don't talk about it. \n\nSo that other people don't know. And like you already mentioned, it creates a dependency. It creates a power slope. And even bringing this one back to the point of taking the money off the table, as a regular employee, will I ever know whether I am being paid enough to be silent or whether I am being paid as much as I am worth? \n\nHow do I find out? For that one, I need to understand what my contribution to the company is because if I understand this, I can argue, \"Look, because of me, you're making $50 million. How about my share is just two of that?\" It's an entirely different story of, \"I would like a raise.\" \n\nYeah, but financial situation is difficult. Well, perhaps employee-employer relationships have had their time, right? Perhaps it should be business owner to business owner relationship, and everybody we hire in our organization is... I always found it weird. Ryan won't get... maybe won't get this, and I'm not sure what happens in Germany. I found it weird, Ryan, that I had to do my tax returns when I went to the US. \n\nIn the UK, you don't do a tax return. A normal employee does not do a tax return. It's done for you by your company and the tax man. \n\nWhy? \n\nYeah, because that's how it's done here. Same reason we don't have sales tax, and it's all included in the price. You pay the price on the ticket is the price you pay, right? The salary I get is the salary I get, and I don't have to worry about how much tax I've paid. I don't have to... that's all taken care of by your employer. \n\nRight. How is that different? So this is very interesting. I had no idea how is that different in Germany, Michael. \n\nYeah, actually, it's very interesting. The tax system is probably... it's been a running gag for a long time that sometimes politicians like to advertise that one... it was like ten years ago they said that maybe we should simplify the tax system so that your tax form fits on a beer stamp. But this never happened. If I would show you the tax forms, and literally every single German has to do their tax form every year, and it's a science, literally. It takes you about a day just because of how complicated it is. \n\nAnd how to say, in Germany, you tell your employer your envisioned gross salary, but that doesn't mean that that is your net salary. So what is transferred to you on your bank account is about half of that, and depending on which tax bracket you are and whether you're single, married, have children or more, it could be a bit more than half or a bit less than half. \n\nThe problem is that this one already creates the first level where people feel treated very, very unfairly because in Germany, you have two levels of tax. One is the tax that you pay as an employee, and the other is the level of tax that the employer pays. \n\nAnd I like to say I run a business. I charge my customer €100. From those €100, I, as a private person, can spend about 30. The rest goes to the government in one form or another. So as an employer, I always see the €100 that I need to make in order to pay myself as an employee. There is €0 as an employee. \n\nAnd there was even one comedian in Germany who made this joke that it's a bit schizophrenic running a one-person company. As an employer, you say, \"My employees, they're asking too much money.\" And as an employee, you say, \"My employer is ripping me off.\" \n\nBut I think, I think, Michael, by default, if you're just an employee in Germany and you have no special circumstances, the company does your tax return. No, correct? \n\nNo, no, they file, of course, they legally have to do, but you still have to take care of your tax returns by yourself. The company's not involved in this process. \n\nOkay, that's not the information I have over here. It just says that you may want to file tax returns, but you don't have to. In the UK, I can file as an employee. I can file a tax return if I want to, but by default, unless if I'm only working for one company, Ryan, if I only have one employer, then they know everything about my incoming finances. \n\nSo unless I have any other things that I need to declare, I can just let the company file my tax returns on my behalf, and that's a legal obligation of theirs within the UK. So they pay the employees' tax. \n\nWhat's actually really interesting is companies shield from employees that other piece that Michael's talking about because you have the cost of the employee, right, from the perspective of the employee. Like I know I get paid X amount, and my tax is this amount, but what you don't see is the employer's liability tax, workers' compensation, and federal programs, and all that stuff that we have here. \n\nAnd even like we pay something called national insurance, which is like Social Security in the US, which used to be for a specific thing, and now it's just tax, right? And there's employer and employees' contributions, and the employer's contributions is higher. So staff don't normally see or even understand. Staff, employees, not business owners, just pure employees don't normally have any visibility on what they actually cost the business. \n\nExactly, and yeah, that's weird. Well, I think this comes down to a basic... so we're talking about individual incentivization, right? And I think this... and Michael, you brought Alfie Kohn into the conversation with that too. And Alfie, as you know, and Martin, I think you know this too from where we've been talking about in Beta Codex and all that stuff, is that incentives are individual incentives are demotivating. The punished by rewards kind of thing. \n\nAnd that employee of the month is one of my favourite ones. \n\nYeah, well, and I think we're coming down to this, okay, so my individual tax burden is this. What am I contributing to that? That all that conversation becomes null and void when a small group of employees in this area are managing a business in and of themselves with their own profit and loss statement. They're managing that again. It's a different relationship in terms of, oh, it doesn't necessarily matter what all of us... no, no one person creates value on their own. \n\nAnd I think that that is a big concept because I need both of you to create value in whatever I'm doing. And on the variable compensation is top of that. But if you raise... and then I'll leave there, but the baseline base compensation, if you pay people fairly and pay them well, then that quote... I think this is a Deming quote. I think that that is actually... I was trying to find it. My Deming... I'm not 100% sure, but I'm... \n\nYeah, I think so. I think it's really interesting, though, Ryan, that the... and suddenly we're starting to have a conversation just about capitalism, right? The big elephant in the room, right? In the system within which we operate, that we're all operating is fundamentally about a small group of people gathering large amounts of wealth, right? Because the wealth flows from the people who don't get paid very much, but we make a lot of profit on the people that are not. \n\nAnd rather than paying them better, the wealth flows up to that one person at the top, right? The CEO with the multi-million dollar salary for whatever reason. But they're taking a lot of risk. But are they really taking $100 million worth of risk? Personal risk? Not really, right? \n\nAnd I think that's... that idea that we were kind of the employer-employee relationship, if every person in the story would their own boss, right? You basically got a... they're a bunch of boutique individuals who are selling themselves for how much they think they're worth and doing their own taxes and doing their own thing and understanding that part of the business, like you're saying, Ryan, doing profit and loss for that part of the business. \n\nYeah, I think the reason we don't have that systemically is because those people would be absolutely aghast at the levels of profit that they generate. That's money that's going somewhere else that they don't get, right? \n\nExactly. Behind the business to hide that. It's not really hide; it's a virtual hide. Make it as... what's the...  01:00:00.000 --> 01:00:00.000"
  },
  {
    "Title": "The Importance of Validation in Product Development: A Strategic Approach",
    "Description": "Explains why validating product features is essential, highlighting hypothesis-driven development, data collection, and evidence-based decisions to maximise long-term product value.",
    "ResourceId": "roWCOkmtfDs",
    "Url": "https://www.youtube.com/watch?v=roWCOkmtfDs",
    "Date": "2024-09-02T15:30:15Z",
    "Captions": "When you think a feature is going to be valuable to your customers or to your business, how do you know that that work has actually provided value? I've been working with a customer recently where a lot of sales-driven features end up in the product, which is actually having the impact of fragmenting the product and making it more difficult to use. The driving force for adding those features to the product is closing a deal; it's got nothing to do with what the users of the product want. It's got nothing to do with what the business that is creating the product wants. All it has to do with is closing the deal with the customer.\n\nSo why is that bad? We obviously want to close deals with customers, but what's bad is because we don't know whether those things that we're creating actually produce value or not. There's definitely an assumed value, right? We think if we add this feature, we're going to get value from it, close that deal. But what's the long-term impact of that feature? We might close that $30,000 deal, but if over the next five years that feature is going to cost us $100,000 in support and maintenance and all those kinds of things, and we don't close any more deals because of that feature, then it wasn't worth adding that feature to close that $30,000 contract.\n\nBut your sales guys don't care because they've made their 5% bonus on the $30,000 of the deal they closed. There's no incentive for them to really focus on the right features that will support many of their customers. They're just worried about closing the deal because that's how they get the bonus. That's usually the metric for salespeople.\n\nOne of the ways to turn that around is to start changing the way you measure, changing the way you deliver bonuses. People behave how they're measured, right? A great example again is Microsoft, which has lots of these examples because they've been through some of these traumas. They switched the Azure sales folks from getting their bonus based on the number of Azure hours they sell to being instead on the number of Azure hours the customer uses. \n\nSo then instead of selling a million dollars to the customer and then the customer being unhappy at the end of the year because they bought a million dollars' worth of Azure and they've used $40,000 and the rest is waste, the salesperson is focused on usage. How can I help you as the customer use this product, not how can I be Draconian and close the deal and get you to sign on the dotted line? Signing on the dotted line is not the value that the customer wants; using the features and capabilities to the maximum capability that they have is what the customer wants.\n\nIt's that shift in focus from revenue extraction towards value creation because quite often that short-term view on revenue extraction has a long-term cost that's not obvious to the people that are making the decision that the feature goes in. It might be obvious to the people who are actually doing the work, but they don't have any say or control over that. \n\nThis validation is really important because you pull back around and once you've shipped a feature, you monitor that feature's usage. You collect telemetry from that feature. Now, in order to collect the right telemetry, we can always in hindsight say, \"Well, this feature did this,\" right? But was that what was intended? Is that why you added that feature in the first place? Is that the change that you wanted to make? \n\nThis is why I'm a big proponent, as part of product management, of hypothesis-driven engineering practices. It doesn't have to be engineering; it can be anything we're building. If we're building a product, I guess I would just call that engineering anyway. If we're building a product, every feature that we want to add to the product that is not just table stakes—there are features that we just have to have. \n\nFor example, if you're going to have a web-based product and there's dynamic content specific to the user, they're going to have to be able to log in. I don't need to have a hypothesis to say, \"Is adding login a good idea?\" We kind of have to have it; it's table stakes. But what level does that go to might include some kind of hypothesis, right? \n\nIf we make it easier to log in—right, so base username and password is how most login systems work. Most systems are moving to passwordless. If we implement a passwordless system, do we get more or less users using our product? If we put a LinkedIn auto-login or a Windows or an Apple or Google auto-login, does that increase the number of users that we get in the system? \n\nSo the hypothesis would be, \"If we add the capability for people to log in with Facebook, we're going to get a higher number of people logging into the system because it's easier for them to log in.\" That would be a hypothesis. Then you might ask the question, \"Well, how much more is that worth?\" Hopefully, it's very minimal. That sort of thing should be very minimal effort to add to your system, right? \n\nIf you add that to your system, what data are you going to collect to know whether you've successfully achieved that hypothesis? Well, I want to know how many people click the Facebook link versus use the username and password. I also want to know the total number of new net users coming onto the system. \n\nWhat I would expect to see is, you know, we've got our line for new users in the system. We add that feature, and that line has something noticeable that says we're increasing at a higher rate. Then we can look at the data and say, \"Well, 10% of people clicked the Facebook button; we've got a 10% increase in the net new users. Therefore, we've opened up access to new users and new markets.\" \n\nLess people go to the page and then bounce; more people go to the page and then sign in just because it's easy—they can just click the button. So that's hypothesis-driven practices. We have to look at the data and figure out whether the thing that we added has the result that we expect. \n\nBut this is the important part: that means whose job is it to provide the hypothesis? It could be the person who wants the feature, who's asking for the feature. This is something that I encouraged a customer recently. I encouraged them to push back to sales. \n\nSo if sales say, \"We want feature X because we think it's going to close this deal,\" and this deal is worth X amount of money, engineering should say, \"Well, how many other customers are going to use the feature? How much do we think it's going to increase usage of the product?\" \n\nI'd like you guys to come up with a hypothesis of why we're adding this feature and what we expect to be different other than just closing that deal because we want to look at the total cost of ownership, let's say, over five years of adding a feature—support and maintenance and testing and automated testing and all of those things. \n\nWhat's the total cost of that? The amount of time it adds to the build, right? All those kinds of things. A lot of that is guesses, but we come up with, \"Here's what we think it will cost.\" Are we actually going to make the money back that we're putting in? Is it enough of a difference to make it worth doing? If we do it, what else is it going to support? How many other customers is it going to help? \n\nThat's the clincher. Do you understand how many customers are using the features that you have in your product? I think there's some data from the Standish Group in Boston that used to create the Chaos Report. I think they still do create a report called the Chaos Report every year; it might have a new name now. \n\nIn that report, they collect data—they're a data analysts group. They collect data across, I think, about 70,000 to 75,000 projects worldwide, mostly in the US and Europe but some in the rest of the world. I think it's like 60% US, 30% Europe, and then 10% of the rest of the world. I can't remember exactly, but I seem to remember those numbers; I could be making them up. \n\nThe data that they analysed showed that only 35% of the features that we build in our products are actually used by our customers. I think it could be used a little bit but not enough to make it worth adding to the product. They've analysed that across all these products. \n\nSo why is that number so low? Because that sounds like for every million dollars you invest in your product, you're only getting $350,000 worth of value, right? So that's a lot of waste—$650,000 waste. That's a lot of money. Where's it going? Why are we building features that our customers aren't using? \n\nEven worse, why are we continuing to invest in features that we could know that our customers aren't using? That's the even more interesting question. How many features do you track the usage of features in your product? And how many features in your product are you actively adding new functionality to that your customers don't use? \n\nBecause if they're not using it, you probably want to think twice about adding new features. You may want to double down, right? You've got that old adage that we can either double down, right? So we keep investing in that feature because we think it's going to be valuable in the future and customers will use it. \n\nWe pivot; we need to change the way that feature works in order to maximise user engagement with it, right? Which means it's valuable if they're engaging with it. Or we stop investing in it and perhaps take it out of the product. \n\nHow often do you make those decisions? And how often do you make those decisions based on data? Do you have the data to be able to make those decisions? This is something that product management wants. The only way they can get the data is if the team adds that capability into the product. \n\nIt needs to be integrated with the product because you want to be looking at the actual features, how they work, and create telemetry specific to those features. Understand based on what you intended the feature to do that you're able to track that data, see the needles moving, and decide whether to continue investing in it or stop. \n\nThat's something that every product manager, every product owner should have for almost every feature they add to the product or the intent to add to the product. That can be great feedback and information you can use when you're talking to stakeholders who've asked for those features. \n\nBefore you've built the whole feature, build a little bit of it, validate that it's the right feature, and if you see there's very few people using it, go back to the stakeholder and say, \"We don't want to keep investing in this feature because nobody's using it. Do you know why nobody's using it?\" \n\nYou can go ask the customers as well, but this is your pushback on that financial investment that's maybe been imposed upon you if you don't control everything. Validation is a super important part of product development. It's often lacking. \n\nI feel that it's more often lacking than almost anything else in product development. So go out there, figure out what telemetry you need in your product, get your engineers to build it, and start making evidence-based decisions. Validate that the features that you create are actually adding the value that you intended for them."
  },
  {
    "Title": "Boosting Team Morale and Engagement Through Effective Mentorship Programs",
    "Description": "Explores how long-term mentorship programmes boost team morale, engagement, and performance by fostering intrinsic motivation, collaboration, and continuous learning.",
    "ResourceId": "TCs2IxB118c",
    "Url": "https://www.youtube.com/watch?v=TCs2IxB118c",
    "Date": "2024-09-02T07:00:19Z",
    "Captions": "I don't know if you've noticed, but unhappy, sad people tend not to be engaged in what it is that they're doing. One of the metrics for whether you're going to have success in the future is the morale of the people that are doing the work. That could be people actually building the products, it could be the people designing the products, it could be the people managing the people, people that are designing the products. If we're sad and unhappy, we don't do good work as humans, no matter how much you encourage them to just be professionals and get on with it. \n\nSo we want happy, engaged, excited people. Part of what makes us as humans happy and engaged and excited about topics is if we have our intrinsic needs met. Hopefully, you're paying people enough in your organisation that they're not worried about extrinsic needs, like paying the mortgage or the rent or putting food on the table. Those are things that hopefully the people within your organisation are already able to achieve, which means if you've read Dan Pink's book, \"Drive\", the intrinsic motivators that really encourage us to do the best work we can are autonomy, mastery, and purpose. \n\nAutonomy means us feeling like we're in control of our own destiny and we decide what we're working on. Mastery means we're good at what we do; we're being valuable, right? We're learning and understanding. Then purpose means the things that we do matter to others; they provide value in the space, and we can see the value that those things create. \n\nPart of the thing that I think is most valuable about this idea of the longer-term mentor and training immersive programmes is that we're provoking discussion within the organisation. We're provoking thought leadership within the organisation. I found that the people within the organisation start becoming more engaged and animated in the particular topics. They start talking to other people in the organisation about the things that they've been learning, but also the things they've been discussing, the things they've been discovering. They start figuring out who in the organisation they can go speak to have a conversation on this particular topic. They're starting to get engaged and excited and animated about what it is that they're trying to do because they're starting to see how the work they do every day connects to the overall purpose of the organisation, even if the organisation doesn't yet understand the purpose that it's trying to achieve. \n\nLots of organisations don't have that overriding goal, that North Star that they're working towards. I'm working with a few organisations at the moment where the leadership hasn't even thought about that. \"Oh, to make more money,\" which is not what everybody can get behind because it's making somebody else money. \n\nEven knowing, especially this is especially true for the product management mentor programme, the things we talk about help those folks understand the need for those things. Their initial purpose becomes how do I engage with my organisation and help them create those goals and vision that this is what we're trying to achieve, that North Star. \n\nI have a current mentor programme that's underway for product management, but I had a previous one that ended perhaps two months ago, something like that, for an organisation in the UK. About halfway through the programme, I got an email from the CEO effectively saying, I’ve not an exact quote, but to paraphrase what he said, he said, \"I've never had a training programme that we've purchased as an organisation provide the level of engagement and excitement and potential change than the mentor programme did for product managers.\" \n\nIt highlighted to him because effectively one of the weeks, everybody was in Poland. From a time scale perspective, I think it was an afternoon session. In Poland, it's like two hours later. The product managers had their day in the organisation, then they'd had this class into the evening, so I take four hours of their time into the evening. There was a dinner organised with the CEO and all the product managers and some other folks. The CEO was expecting all the product managers to turn up tired and grumpy, you know, all of those things that you expect when they've just spent four hours doing this thing. \n\nBut when they came to the dinner, they were engaged in talking about the topics that we'd been discussing during the day. They were engaging the CEO in discussions about what it is that they would like to try and do, how it's different from what they've done before, how it might impact on the value that we create in the organisation. That engagement and excitement was enough to prompt the CEO to email me directly and say, \"Well, this was great. I've never seen this before. This is fantastic.\" \n\nThat, obviously, for me, is a great outcome as well. We've actually done follow-on mentorship programmes for their engineering teams as well, where we've taken their engineering teams into a similar type of programme, same model. We did a product development mentor programme with two of their four teams in the organisation, and we've already started to see improvement in the teams, improvement in what it is that they're doing in the organisation and their ability to deliver and support the business. \n\nI've seen way more instances of success with this type of format than I ever saw before with the traditional training, four half days or two full-day formats that have been delivered in the past. I've really only seen that work once really successfully in hundreds of trainings. That doesn't mean it's not been successful for people, but me being able to see and engage with this group of people over eight to fifteen weeks or perhaps longer, depending on the programme, and just have that continuous engagement, talking about those topics, has produced some fantastic results already from every single instance of running these programmes. Every single instance has created actionable outcomes for the businesses that have purchased it."
  },
  {
    "Title": "Transform Your Product Development: Unlock User Value, Reduce Waste, and Enhance Collaboration with Structured Learning",
    "Description": "Learn how structured learning in product development boosts user value, reduces waste, fosters collaboration, and encourages creativity through evidence-based practices.",
    "ResourceId": "OFUsZq0TKoo",
    "Url": "https://www.youtube.com/watch?v=OFUsZq0TKoo",
    "Date": "2024-08-27T07:07:18Z",
    "Captions": "The course will definitely change your product development game. First point, you will be able to increase user value. Why? Because you are going to deliberately design experiments to better understand user needs and find effective ways how to address them. So we believe this is the best way to increase user value.\n\nSecond point, because you will be able to increase user value and have this process more conscious with a lot of learning, you are definitely on your path to decrease waste. As a result, you will also improve return on investment when it comes to what the team is working on. You will invest based on evidence; you can adjust your budgeting based on experiments, based on the results, based on the data that you get. And at the end of the day, thanks to that, you can embrace the agility principle of simplicity. So in that process, you will also be maximising the amount of work that is creating little or no value.\n\nAnother important point: we, as human beings, really often jump into solution space immediately or just by briefly presenting the problem. In this class, we want to unlock creativity by thinking in problems and showing a different perspective on that. So hold your horses and let's try different experiments to make sure that we truly understand what the problem is. You might be amazed how many different solutions may be finally created when we first pay a lot of attention to understanding the problem.\n\nAnother point: some of the customers, some of the teams, companies complain when it comes to collaboration with stakeholders. With this class, you actually might be equipped with some tools and ideas on how to improve collaboration between the teams and between the stakeholders. This collaboration may change completely because if you invite others and show them this different perspective, your product development may start with using data, not opinions. In that case, it might also be easier for you to get a green light from important stakeholders, but also to show them that certain paths, certain ideas are not worth investing in.\n\nFinally, I believe it's also a class that is improving our toolbox, our product development toolbox. Because after the class, you will have a bunch of valuable practices, techniques, and ideas when it comes to discovery and validation, and you can start using them immediately after you leave the class. So it might be a great beginning of changes that you will start very soon, just after you say goodbye in our class."
  },
  {
    "Title": "Understanding Product Discovery: Why It Matters More Than Ever",
    "Description": "Explains Product Discovery in product development, its role in setting strategy, uncovering opportunities, and aligning teams to build valuable, user-focused products.",
    "ResourceId": "Qzw3FSl6hy4",
    "Url": "https://www.youtube.com/watch?v=Qzw3FSl6hy4",
    "Date": "2024-08-26T07:44:38Z",
    "Captions": "What is product discovery and why is it different from what we've always done? Man, I would say it's not different from what we've always done, but it also is different from what we've always done. So product discovery is all of the work that you do that's about planning for the future, right? \n\nSo if in order for a team to deliver some piece of work, you need to do a bunch of research or you need to create some designs or, um, or whatevers, right? Another team has to do something before it gets to our team. All of that, from our perspective, is discovery work. That may be work for the other team, right? But from our perspective, it's discovery work. It's discovering this item. It's making, um, ensuring that we understand that item as much as possible and not just focused on the items that we know we want. \n\nDiscovery also focuses on the items we don't know we want. So how do we find the things that are going to enable our product to be better? That's going to enhance our users' experience. That's going to, um, open up new markets, increase our user base. Um, those are all things that we would do as part of discovery. \n\nUm, Scrum calls it refinement, right? Although I think refinement's probably a little bit tighter scope than discovery. Discovery is a lot bigger. Um, but it's something that we have always done. It's just not always been explicit. It's not always been something that we say, \"This is that body of work.\" Who's accountable for organizing that body of work? And in the Scrum world, that would be the product owner, right? They're accountable for maximizing the value of the work done in the product. \n\nBut in whatever process you're using, somebody needs to be directing that. It's not necessarily okay for there to be no direction. So part of discovery will be figuring out what your goals are, what your vision is, and what your goals are. What is it you're trying to achieve as a business, or what is it that your product's trying to achieve? Um, what direction are you going? And then what are the steps you want to try and take to get there? \n\nAnd then figuring out what do you need to do in your product to get there. Um, a great example, I think, at scale is the Azure DevOps team. At least when I worked with them a few years ago, the scale of that team, I think they were up to 90 plus teams at one point working on this one big product. So that's a lot of work to feed that engine that is delivering value. Those teams working together, hopefully highly effective teams, but teams. \n\nSo they set strategic direction at the high level, and then there's a bunch of discovery that has to go on at that level. Like, where are we going? What are we doing? What are we trying to achieve? Right? Think of it like portfolio. What are your value propositions for your product? How do you think you're going to be able to affect those? And then they come up with ideas through the structure. This is what we want to build and then send it to the next level down within that larger product organization and say, \"This is what we're trying to achieve. You go figure out what's going to make it happen.\" \n\nSo then discovery launches again at that level. What do we think? Perhaps this is Azure boards, right? We're trying to help the business achieve this outcome. They're trying to achieve. What do we think we can do to help make progress towards that goal or those goals, right? Um, and then they might have 20 teams working on that idea. So they would create their level, like, what is it we think we're going to try and achieve? How do we want to move the needles? \n\nUm, and then they're going to give that to the teams below, and the teams below are going to be like, \"Okay, here's what we're trying to achieve,\" all the way up the chain, right? All the way up to the product vision. Um, what do we need to do to make progress towards those goals in that vision? \n\nActually, a really good example, I've got another example which is maybe more people have experience of, and at the holistic level, and that's the Windows team or Microsoft as a whole across many products. Um, has a strategic goal for six months, right? They, um, Microsoft calls it the season. I don't know if they call it this, right? But I, looking in, observing what they're doing, many people call it the season-based model. \n\nUm, so they have a six months in a season, and they're looking out three seasons, current season plus two more, right? So that could be up to 18 months, but somewhere between six and 18 months, they're looking out. And one of the things that they wanted to go after, the market shares that they wanted to go after as a business, um, from their consumer products was creators. \n\nSo there are people writing books, there are people drawing pictures, there are people making music on computers, right? We want to go after that group of people, that market share, and we want to increase our market share in that space. So they created this idea of the creators update. That's kind of what they call it, right? That, again, they do a spring and a fall update across the board. That's kind of like that cadence of the season-based model, the six months. \n\nSo within that six months, they're overriding product goal, product focus across all of their products. Season focus is to, um, help creators create stuff. That's that overarching thing. And then each team, each group, each product group, and then each team inside of that that works under that story is trying to figure out what can we do to help further that. \n\nSo I remember the, the, I don't have one here, but the pen support folks in Microsoft moved from 255 pressure levels to 1024 pressure levels. That was one of the things they did. So that required the people who make the pen, the people who make the screens, um, the people who make the operating system, right, to all work together in order to work towards this idea of improving pen support. \n\nAnd that was to enable artists and enable that. And then they have software that comes off that, and they create SDKs and all this thing so that other people can build products on top of that. That was one of the endeavors in that, and that was just for drawing on the screen or writing on the screen, right? \n\nUm, that effort to all work together improved their market share, right, in the creator space. That's what they were trying to do. But then they realized during, right, they've got their three, six months, three seasons planned out. They just finished the creators season, so their product is shipped. It's everybody's 950 million people using Windows, and I don't know how many of them are creators, right? But they're getting feedback and telemetry and, uh, getting all that stuff. \n\nAnd then they realized that they needed another creators update because they didn't quite move the needle as far as they would like. There was certain feedback, and then they're going to do that again. All of that is product discovery. So it's really big. It depends on the scale of your organization, right? How much, uh, how big the scope is. But that is the scope of product discovery that you and everyone in your organization should be focused on, from the lowest person doing the work all the way up through the business to whoever is in charge of that, whatever level you roll up to, right? \n\nSo that could be Azure DevOps rolling up to the head of Azure DevOps, um, but then it eventually rolls up to Satya, right? The CEO of the organization. And Satya has lots of products and lots of different parts of the business, from, uh, consumer-focused parts of the business to non-consumer-focused parts of the business, seven business-focused parts of the business. \n\nSo how do we enable and align all of these things so that we are an entity that's all working together towards these common goals, towards these common outcomes? And that is part of product discovery because you deciding what your product needs isn't necessarily going to create the best outcomes. \n\nBecause we're narrowing the choices to what you can imagine. If we expand it out to include all of the people working on your product, we are diversifying and perhaps generating more ideas for how we can solve these problems in more interesting ways and help our customers even more and open out new markets and new capabilities and new ways of doing things. \n\nAnd that, yeah, product discovery is huge. It's huge, and it is very underserved in organizations. It's not very deliberate in organizations. Um, and that's one of the things, one of the reasons, uh, that there's a lot of shift in focus in the market towards product. Many teams are good engineering teams. They're good at building solid, usable, working product on a regular cadence. \n\nUm, but if they're not provided with focus and direction, they're not going to go anywhere. If that focus and direction doesn't provide additional market share, additional market opportunities, then the investment goes away, right? There's only so long companies will invest in something that they don't feel like they're getting a return on. \n\nSo product discovery is all of those things that happen within the business in order for people to figure out what they're going to go build."
  },
  {
    "Title": "The Power of Kaizen: Continuous Improvement in Scrum and Beyond",
    "Description": "Explains how Kaizen’s continuous improvement principles enhance Scrum and Agile teams, with practical tips for retrospectives, workflow optimisation, and team culture.",
    "ResourceId": "pVPzgsemxEY",
    "Url": "https://www.youtube.com/watch?v=pVPzgsemxEY",
    "Date": "2024-08-25T22:00:34Z",
    "Captions": "We love taking Japanese words and using them not quite right for their meaning. But one of the key phrases that we use all the time in Kamban is Kaizen. Kaizen is really just about continuous improvement. It's keeping changing things, hopefully for the better, because you're observing improvements in the system or measuring improvements in the system. \n\nSo the idea of continuous improvement, continuous change, and continuous optimisation of your process or your system is generally referred to in the Kamban community as Kaizen. Kaizen's not limited to Kaizen; it can be used absolutely anywhere you like. We should always be continuously striving for anything that we do to be a little bit better every time we do it, and that continuous nature is what we mean by Kaizen."
  },
  {
    "Title": "Navigating DevOps: Crafting Unique Solutions for Unique Organizations",
    "Description": "Explores how organisations can tailor DevOps strategies to their unique needs, highlighting the value of external expertise, adaptability, and continuous improvement.",
    "ResourceId": "L2u9Qojrvb8",
    "Url": "https://www.youtube.com/watch?v=L2u9Qojrvb8",
    "Date": "2024-08-23T07:00:12Z",
    "Captions": "In order to meet the unique needs of all the different organizations that we work with, and we've worked with medical device organizations, military organizations, all the way through to internet startups and web organizations, whatever the organization, the intrinsic philosophies of DevOps are the same. \n\nBut how they're solved within the context of your organization is completely unique. It will always be unique in every organization. Although a lot of the stories sound the same, right? There's a lot of stories that you'll hear about DevOps and DevOps implementations that kind of sound the same. The devil's in the details, right? The way that it's solved, the tools that are used, the limitations those bring will be different in every organization. \n\nThe value of engaging with us is that we're generally going to be focused on that big picture, right? That state of DevOps: where are we right now, where do we want to go, and how do we maintain progress on that route? We do a lot more work at the start, and then there's a lot of work that has to be done by the people within the context that are doing it. \n\nWe can help keep progress in a particular direction. We can help engage with them over the longer term to coach them around some of these gnarly issues that they run into. Right? You want to solve a particular problem and you don't understand how to do it, but you need to try some things and then perhaps get some advice from somebody who's been doing it a long time. If you don't have those skills in your organization, sometimes you need to look outside of your organization for those additional skills. \n\nBecause every organization is unique, every solution is unique, and we can't tell you how to solve your problems, but we can tell you about how other people have solved similar problems to give you ideas for things to try. \n\nCreating this philosophy inside of our organization, where we're able to take little pieces of what works for us within our context, sometimes we need to adapt our context but keep moving forward, keep adapting to the needs of the market, and continually increase our capability to deliver software within our organization is where we can help you understand that direction and how it sits within those DevOps philosophies."
  },
  {
    "Title": "The Limits of Self-Taught Learning: Why External Perspectives Matter",
    "Description": "Explores the limits of self-taught learning in tech, highlighting how external expertise and diverse perspectives drive better solutions, growth, and organisational success.",
    "ResourceId": "DvW-xwxufa0",
    "Url": "https://www.youtube.com/watch?v=DvW-xwxufa0",
    "Date": "2024-08-22T07:00:08Z",
    "Captions": "When we're engaging with customers, especially new customers, one of the things we try and be 100% clear on is that we're not going to solve your problem. All of the messes, all of the issues are yours to fix. But what we can do is help you see the problems and keep a little bit of focus on those problems so that you can solve them. Right? We're bringing the torches so that we can see what's going on, shine a light in those dirty corners, under the rug where we've been sweeping the dust, and point at that and say, \"Look, we need to resolve this. This is causing you problems. This is slowing you down. This is costing you money.\" Right? \n\nWe help those organisations get better by helping them figure out what their options are. Quite often, I think it's really interesting how many organisations and engineers—I’m going to include engineers in this because I think it's true there too—we tend to not get a lot of training. Right? I don't see organisations sending their engineers on coding courses. I don't see them sending them on product courses. I don't see them sending them on API courses. I don't see them sending them on security courses. They don't do that. So almost every one of your engineers is self-taught. \n\nRight? And when you're self-taught, you learn something within the bounds of what you looked at, and we stop looking when we find an answer. Right? It's like when you're looking for your keys in your house. Right? If you've lost your keys and you're looking for them, you don't find your keys and then keep looking. Right? You don't find them and go, \"I think I'll look a little bit more in case I find more keys.\" No, I found them, so I'm going to stop looking. Right? So they're always in the last place you look, and that same is true for knowledge. When we find an answer, most of us stop looking and use that answer. But perhaps there are five better answers. Perhaps there are five progressively better answers that we could be finding. \n\nAnd that's the value of bringing in sometimes somebody from the outside to look at what it is you're doing and how you can be more effective at it. It's that experience, knowledge, and experience. I've been doing DevOps—probably the best way to describe it—doing DevOps before it was called DevOps. It was called application lifecycle management before then, and I've been looking at that for 20 years. I've been a software engineer for 20 years. I've been a scrum coach and consultant for 10 years, seeing what all of these organisations out there are doing and seeing the things that work for them and the things that don't. Because not every organisation does everything well. They might do some stuff well and other stuff not so much. Right? \n\nThat means that we can bring a whole bunch of ideas. Have you thought about this? Have you looked over here? Here's a tool that you could use to get you started in the space. Oh, if that tool doesn't work for you, here's the type of tool you're looking for. Right? And that provokes people to go look for alternatives, look for other ways to do things, look for solutions, and perhaps they'll find their own ones that are even better than the ones that we came up with. But that process is something that you and your people have to do. \n\nSo when you're engaging, as for DevOps, we're going to help you understand where you are right now, help work with you to understand what direction you want to go, and help you keep moving in that direction. But it's you and your people that have to do the work because it's you and your people that have to learn the things—institutionally, you know, that institutional knowledge that an organisation gets. When you bring in new people, although they come in with their own ideas, they learn that institutional knowledge. You want that institutional knowledge to be moving in that direction. Right? The weight of progress is in the direction that you want to go, which is not building up a whole bunch of refinement and work you've not done. It's doing those things and doing it properly and not actually doing things well. \n\nAnd we can help you keep progress in those directions."
  },
  {
    "Title": "The Crucible of Learning: Transforming Organizational Effectiveness Through DevOps",
    "Description": "Explores how DevOps transformation, refactoring, and ownership reduce technical debt, streamline development, and boost efficiency, team satisfaction, and business value.",
    "ResourceId": "KXvd_oyLe3Q",
    "Url": "https://www.youtube.com/watch?v=KXvd_oyLe3Q",
    "Date": "2024-08-21T07:00:19Z",
    "Captions": "So when customers engage with us, they're quite often in a place where they've identified a problem themselves. They don't call a DevOps consulting service randomly; they have some kind of problem that they've identified and they want help figuring it out and what's the next thing to do.\n\nProbably the biggest engagement I saw was with a really large organisation in the oil and gas world. They had a product that was, I think, $50,000 a licence for this product. It's a desktop product, and the main problem that they had was that what they thought their main problem was and what actually the main problem was might be different things. This is, I'm thinking from retrospection, right, because I've been through it. One of the main problems that they had was that they had 90 teams in 13 locations in nine different countries working on this product. Each of those teams had their own long-term branch that they worked on, so things would diverge. They could diverge for quite some time; it could be as much as a year. They were trying to mitigate that with an application of force. That's probably the way I would think about it. They tried to solve the problem with an application of force.\n\nSo what they did was they spun up a DevOps team, right? A dedicated DevOps team. Here are our DevOps engineers; they're in this central area. Some of you have already spotted the problem. They can't change what all of these teams are doing, but they have to figure out how they solved the problem of wanting continuous delivery. They wanted to have a daily build of their product; that was their goal. So they ended up creating a bunch of infrastructure to allow them to do that and managing that infrastructure. They would manage it, right? The teams didn't have to do anything, and if the teams changed something, that was their problem to go fix.\n\nYou had this team, I think it was eight or nine people, but I think it was eight or nine people on this team, and their whole job was building this product. In order to do that, they ended up building a system that facilitated about 11,000 build executions a day. That's 1.2 million build executions a year, and that was just to have a working product every day. They would have these temporary branches where they brought the code together and automated merging of code from all of these different branches. All of those different teams—these 90 teams—were all on different source control systems, different not only systems but platforms as well. They might have had 10 teams on Git, 10 teams on Team Foundation Version Control, another 10 teams on Subversion, and another 10 teams doing something else.\n\nSo they all had different capabilities, different branching capabilities, different merging capabilities, and their build system, their build engine, had to go reach out to all of these systems and pull together a version of the code and then build it to be able to create this unified version of the product. It was insanely complicated, insanely complicated and super expensive. I think in order for a developer to work on the product on their workstation, in fact, to run it in production as well, you had to have like 100 cores. I can't remember exactly what, but it was 128 GB RAM, lots and lots and lots of cores—24-core machine type of thing. It was just obscene, the speed of the machine required because it was a massive complicated product, and you couldn't just build parts of it. You had to build the whole thing to make sure it worked—the whole platform and all the things that were built on top of it.\n\nIt was just hugely unwieldy. So we did a DevOps assessment, a state of DevOps assessment for them. We identified those key areas: everybody's on different source control systems, everybody's doing everything differently. They had some limitations because I think there were 13 different funding routes for this product, so they didn't have full control of the whole thing. But what we were able to do was, over a number of years—because it's a really big product, a really big organisation—I think there were something like 600 to 700 people working on it in different locations, and they weren't in the same reporting structure. You can't just tell them to do stuff.\n\nIt took four years to get everything aligned into a single source control system, right? So that we could do one build out of this source control system and result in one version of the product. Then how do we fold down the branches so that they don't have so many branches working towards that model? How do we work towards this idea of mainline development? It's these types of ideas, these types of outcomes that vastly simplify the problem that companies are trying to solve. People don't get into these positions from a nefarious intent.\n\nIn this particular example, this product had been built and worked on for 25 years. They had bought anybody who tried to compete with them. So bring that piece into the puzzle, right, and you end up with a massive product with a very complicated architecture that's very difficult and time-consuming to work on. You need lots of people; it's very distributed because all of these different parts of the puzzle were brought in from different entities that now all work for the same company. They hadn't taken the time to pay back their technical debt. They'd accrued debt. You know, we use Git; we take on a company that uses Subversion, and instead of helping them migrate all of their stuff into Git and fix all of the stuff that we need to fix in order to bring it into our system, we're just going to leave them as is and plug into them and pull their stuff out and integrate it into our system.\n\nSo rather than doing that work because it seemed insurmountable at the time, they didn't do that. They just pulled the stuff in. On top of that, perhaps things didn't exist 25 years ago, so they had a lot of teams that were on their own custom in-house built source control system. When they started working on this product, there were no large-scale source control systems. You were probably talking about Visual SourceSafe at the time, but Visual SourceSafe was developed at the time of small networks and had a max size of about 5 GB. This thing was ginormous, right? So how do you manage that? Well, you have to build your own systems. When you go to try and create an automated build, perhaps there isn't a commercial automated build system, so you build your own. Then once a commercial automated build system becomes available, you adapt into that, but you're actually just calling out to your existing thing because you've not taken the time to rewrite everything because that's an inordinate task. \n\nSo we integrate it rather than refactor, right? We're missing all of those refactors over time, and it just gets bigger and bigger and bigger and more unwieldy. Sometimes it's difficult—that's a terrible expression—but difficult to see the forest for the trees, right? All of these things, like what should we go fix? Where should we go look? Where should we start? What's our biggest bang for our buck that we can go fix and figure out? Perhaps lots of little things we need to fix around the edge.\n\nSo what I would expect an organisation to get—what's like the outcome and improvement that our customers can expect? It's a more effective process, right? We're talking about taking what the organisation is doing right now, usually within the context of a product when you're talking about DevOps, but it could be holistically across an organisation and figuring out how do we eliminate waste? How do we ensure that we have automation, that that automation is effective? Because you can have ineffective automation, like that massive build system I was talking about. \n\nHow do we simplify, simplify, simplify? What I would expect the outcomes to be would be reduced cost to deliver new features, reduced time to deliver new features, improved happiness of the people that are building the product because they're spending less time struggling with the complexity that we've created over time and more time focusing on solving the business problem. These are multipliers for your capability to deliver. \n\nA great example of those multipliers is actually the Azure DevOps team at Microsoft, right? They create a product called Azure DevOps; it used to be Team Foundation Server when it was local. Back in 2010, before they started doing much more frequent deliveries and all the automation and focusing on these things, before they brought DevOps into their story, they were delivering about 25 features to production each year, and that was with 600 people working on it. They were delivering about 25 new features, lots of bug fixes, lots of little tweaks, but 25 new features to production each year.\n\nFast forward to five years later, they'd spent a huge amount of time investing in reducing the amount of time it takes them to build their product from, I think, three or four days—72 hours plus—to build their product down to three and a half minutes. Those types of capabilities enabled them to go from 25 features to production each year to nearly 300 features to production each year with the same number of people and the same people. It's not different people; it's the same people, right? \n\nSo what we're talking about is holistically scaling up all of the people that we have within our context so that everybody understands DevOps, everybody understands refactoring and clean code and what the impact is on all of these things so that we can make them more effective over time. You will be faster, you'll be slicker, and it will be cheaper, right? That's what we're talking about when we talk about bringing DevOps and the DevOps philosophy into an organisation. But it takes skill. We can't install DevOps in your organisation; you still have to do the work. If you can find a consultancy that says they will do all the work for you, your people are not going to learn anything. They're not going to have gone through the pain of actually fixing their problems. \n\nIt's like getting a cleaner in to clean your teenager's room, right? Has your teenager learned to clean up their room? No, they haven't. They're just going to do the same thing over and over and over again. When you do those big rewrites of your product and you take the same people and get them to rewrite your product, what do you think is going to be the outcome except a rewritten product that's in exactly the same state over time as your existing product? Because they've not gone through that crucible of learning the pain of actually cleaning up—the pain of pulling that mouldy plate out from under the bed and having to deal with this mouldy plate. Maybe next time I won't leave the plate because I don't want to deal with that mouldy plate, right? \n\nThat's what we're talking about with engineering practices. We're talking about upskilling, dealing with our own crap, right? Dealing with it ourselves so that we make less of that stuff in the future, that we do things in a better way that enables us to be slicker and more effective."
  },
  {
    "Title": "The Common Challenges of Adopting DevOps Practices",
    "Description": "Explores key challenges in adopting DevOps, including managing evolving risks and closing feedback loops, with strategies for rapid iteration, feedback, and continuous improvement.",
    "ResourceId": "swHtVLD9690",
    "Url": "https://www.youtube.com/watch?v=swHtVLD9690",
    "Date": "2024-08-20T08:04:38Z",
    "Captions": "I think the most common challenge that organisations face when trying to adopt DevOps practices is regression. I think that's probably the best way to describe it: you make two steps forward and five steps backwards. Part of that is how do we maintain our ability to control risk within this new context because the risk profile is different. \n\nBecause the risk profile is different, we need different tools and techniques to manage that risk. In the old days—I'm calling it the old days; it might be the current days for lots of organisations—but in the old days, we would spend a bunch of time designing our product. We would design the architecture, we would decide what we're going to build, we would list out all of the features, and then we would work towards some kind of release date of our product. \n\nOnce we got close to that release date, once we delivered a body of features that made sense, we were going to test those features. We had a different group of people who were testing and validating those features. I mean, it is still quite common to have separate test teams from engineering teams rather than a combined engineering force. Then, once they had done those tests, it was probably handed off to some kind of operations team who were going to deploy it to an environment. \n\nThen something like UAT was going to start, where you had some kind of additional validation of what's going on in the product. Once all of those things were successful, then it moved on to maybe deploy to production or staging, or you might have other environments. The traditional, most common model is deploy by environment, and that fundamentally doesn't work within the context of DevOps. It's going to slow you down. \n\nIt's not going to get you the key thing that DevOps is trying to bring to your business: high quality, flexibility, adaptability, and your ability to validate assumptions. We have an assumption that this feature is going to be valuable, but in order to actually validate it, no matter how much stuff we do on paper or in labs or in studies, the only place to really validate that feature is in production. \n\nA great example of that is Windows 8. Microsoft spent hundreds of millions on user experience, on labs, on flying people into labs to video them using the product, performing certain tasks, and then getting feedback from them in interviews or sitting with people that are using the product. They did all of the things that you're supposed to do, and still, they ended up with a product that bounced off their consumers from a usability perspective. \n\nThat is because of that production problem. One of my favourite people, Brian Harry, who used to run the Azure DevOps team, made this comment that I loved: \"There's no place like production.\" No matter how much testing, no matter how much validation you do—especially if you're in the service world where you're building a service that's got thousands and thousands of customers using the same service—no matter what you do, you cannot simulate production. \n\nWe can maybe do some stuff, but that common challenge is how do we address these things as that world is changing? We've no longer got six months or a year. The Windows team used to be on a six-year delivery; that's how long it would take them to get a new version of Windows out the door, from starting to write the code to it actually being released to production. \n\nThey had six years to do testing. I had a colleague from Boeing, and he talked about one of the things that he saw as a problem: Boeing don't build quality in; they test quality in. You've got all of this aggressive testing that's happening as part of building something, and then you're testing it. \"Oh, right, it failed.\" So what do we have to do differently? \n\nThat is quite often what you have to do with some manufacturing stuff these days. You've got simulators, so you can do a lot more, but in the software world, we don't have to suffer from that problem. We don't have to spend lots of time building a rocket to put it on a rocket pad and launch it, and then it explodes, and we look at the telemetry and figure out what went wrong. \n\nWe don't have to do that. We're building software; we can get that software out the door as quickly as humanly possible with the level of quality that we need to maintain our business brand, protect our business, protect our consumers, and protect our producers. We can get things out the door as quickly as possible, test it in the real world, test it in the market, find out how accepted that thing is in the market, whether it's increasing our market or decreasing our market, and then adapt around that. \n\nThat's part of that DevOps story: closing those feedback loops, not just identifying those feedback loops and eliminating waste in the process to get it to go through the process as quickly as possible, but actually closing the feedback loops, not just collecting the data. \n\nThe two big common challenges that I see are, one, closing the feedback loops, and the other one is actually getting how do we change the way we understand our risk profile and how we mitigate and organise around risk within that context. Then, how do we adapt to the things that we see in a timely manner? Those are the two most common challenges, and those are the things that we can help teams, products, and your organisation deal with and figure out how to do better."
  },
  {
    "Title": "Mastering Assumptions: Unlocking Success in Product Development Through Hypothesis-Driven Strategies",
    "Description": "Learn how to identify, prioritise, and test assumptions in product development using hypothesis-driven methods, experimentation, and critical analysis for better decision-making.",
    "ResourceId": "wLJAMvwR6qI",
    "Url": "https://www.youtube.com/watch?v=wLJAMvwR6qI",
    "Date": "2024-08-20T07:06:21Z",
    "Captions": "In our new class, we will learn how to work with assumptions. So first, a very important point: we actually introduce assumption to our product development dictionary. One of the very important points we will learn is this moment of realisation: oh, we have made assumptions, and not one, not two, but many. \n\nSo what kind of assumptions are we making when developing products, when discussing potential product futures, when creating product backlog items? This is a very important aspect, but we are not only talking about this fact. Okay, the assumptions were made, but which of them need to be validated? Obviously, not every assumption requires validation. Some of them are more important, less important; there might be a crucial role in ordering our assumptions. So which should be validated first and why? We are going to cover that in this course.\n\nOkay, so first point: assumptions realisation, ordering, and choosing which one to start. The second one, when we work with assumptions, the next important topic is about hypothesis. So we will learn how to create hypotheses and how to test them. In this class, we will pay a lot, a lot of attention to using the right data that will help you verify your hypothesis. \n\nIn fact, we may realise that our product development is actually navigating around some kind of tree of different hypotheses to test. We will also discuss the topic of the importance of desired signal or evidence strength on our product development process. So when we test assumptions, when we talk about hypothesis-driven development, it's important to realise that there will never be 100% confidence. But what is your desired level of confidence? And based on that, how high do you want to be when it comes to confidence? \n\nWe will be talking about experiments that will help us test the hypothesis. So we will learn how to manage costs related to product development based on those experiments that we choose, and this will be aligned with desired signal strength and desired confidence level. \n\nAnother valuable outcome for us is learning how to analyse experiments, how to take what we got out of our experimentation journey, and how to use this data in the decision-making process. So we already talked that learning is important in this class. So think about it as a way of targeted learnings that will help in this decision-making and critical thinking. \n\nThanks to that, we want to avoid toxic love related to our ideas and to what customers told us. Instead, we will be equipped with a certain way of thinking. Maybe for some of us, it will be a new perspective on product development, and thanks to that perspective, we will be learning a lot about what to do, what not to do, and how to use those concepts to be effective in our product development."
  },
  {
    "Title": "Unlocking Continuous Improvement: How Metrics and Visualisation Drive Workflow Success",
    "Description": "Explores how using metrics and visual tools enhances workflow transparency, helps identify improvement areas, and supports a culture of continuous process optimisation.",
    "ResourceId": "hBw4ouNB1U0",
    "Url": "https://www.youtube.com/watch?v=hBw4ouNB1U0",
    "Date": "2024-08-19T06:45:02Z",
    "Captions": "One of the key elements of Caman is improving, making improvements or changes to the system in order to see whether you've managed to improve things or not. \n\nSo we use metrics and visual tools to enable us as humans to see patterns and understand the data to increase transparency, so that we can make changes to the system. This allows us to ask more interesting questions of ourselves and others that participate in our system. \n\nImproving the workflow is absolutely critical. If you're not making changes to your workflow on a continuous basis, you're probably not doing Caman. If you are making changes, are you looking at the right data? Do you have the right visualisations to really be seeing what's going on?"
  },
  {
    "Title": "Transform Your Team's Efficiency: The Three Core Principles of Caman Workflow Management",
    "Description": "Learn the three key principles of Caman workflow management to boost team efficiency: visualise processes, actively manage tasks, and drive continuous improvement.",
    "ResourceId": "220tyMrhSFE",
    "Url": "https://www.youtube.com/watch?v=220tyMrhSFE",
    "Date": "2024-08-17T19:03:52Z",
    "Captions": "There are three core principles of Caman. To keep it really simple, there's defining and visualising your workflow. That's like creating your rule book as a team. How are you going to function? What does your system look like? \n\nSo, defining and visualising a workflow. The second core principle is to actively manage the items in the workflow. Now that you can see them, you can see what's going on. You have a visualisation, so you're going to actively take action. You're not just going to passively look at it; actively take action. \n\nThen, the third principle is improving your workflow. You want to make changes to the workflow in order to make things a little bit better, to make things flow better through your system."
  },
  {
    "Title": "DevOps: Elevating Your Organization’s Performance Through Bespoke Solutions",
    "Description": "Learn how tailored DevOps strategies help organisations assess current practices, streamline processes, ensure compliance, and boost software quality and delivery frequency.",
    "ResourceId": "sXmXT_MDXTo",
    "Url": "https://www.youtube.com/watch?v=sXmXT_MDXTo",
    "Date": "2024-08-16T07:18:10Z",
    "Captions": "We've been doing DevOps for quite some time. It's really difficult to provide an overview of our DevOps services because our DevOps services tend to be bespoke for every single customer that uses them. There are some patterns, but there are not that many formulas that work everywhere. Every company is different, every group of people is different, and every outcome that they're trying to achieve with the philosophy that is DevOps is different. \n\nBut there are some patterns that do kind of make sense. One of those is a state of DevOps report. The idea is you want to understand, as an organisation, where we are based on modern engineering and DevOps practices. Where do we sit? Because it's difficult to understand where you want to go unless you know where you are right now. That's the first thing you do when you have a map and you're trying to figure out how to get somewhere; you have to find out where you are so you can then figure out what the direction to go is. \n\nSo that kind of state of DevOps, state of agile, where are we right now in our understanding of or our application of DevOps practices? We might talk about things like how products are being released. We might talk about what sort of tools are being used within that context of releasing products. I worked with an organisation that had 13 different source control systems in use for one product. There's a lot of waste there that can be identified. \n\nWhat are we actually doing? How do we take the ideas that we've created in our product, and how do they actually get into production? Not just what leadership thinks is happening, but what's actually happening on the ground. We tend to interview a bunch of people in the organisation, usually trying to do solo interviews because people are more willing to speak when there's not somebody else present. This kind of anonymous information allows us to find out all sorts of things. \n\nFor example, I worked with an organisation where their team of 30 engineers understood branching, but they didn't understand automatic merging. So they were manually copying code with a text diffing between branches in order to merge code, which is just mental. I worked with another organisation that had built a custom tool because the business had asked for a capability. They built a custom tool that allowed product managers to pick features and create a build of the product that only had those features merged together into the product. \n\nThis might sound like a good idea if you're on the business side, but from an engineering standpoint, creating a cohesive, valid, high-quality, usable, high-value product is totally insane. There are all sorts of non-dysfunctional behaviours; I tend to call them opportunities for improvement because it's a little bit more positive. But the reality is they're dysfunctional behaviours that are really common in the industry and have been for many years because people are pushed towards solving a problem, and they don't necessarily know that there are known logical ways to solve that problem already. \n\nEven if they do know about those non-logical ways to solve that problem, somebody in the business has an objection to it. A great example is automatic deployments. The objection might be that we're under Sarbanes-Oxley audit; we're Sarbanes-Oxley compliant, therefore we need a separation of developers from the people who do the releasing of the code. That means we can't have developers with access to production. \n\nThat's actually not true with Sarbanes-Oxley; not true at all. But because somebody believes it is, you then end up with these ideas where development and operations are separate. One of the biggest values that we bring, the biggest benefit that we bring to organisations when we're talking about the DevOps philosophy, is that ability for higher quality, more frequent delivery, and less friction in your ability to get software out the door. \n\nSome of it's about ownership. If it's you, you have an idea, you're going to build that idea, you're going to deploy that idea, you're going to monitor that idea, and you're responsible for the upkeep of that idea, the support, and the continued value add of that idea. That should all be within the control of the group, the team. \n\nSo, IDE all the way through to deployment and closing those feedback loops should be part of that story, and that's very difficult to do within a lot of organisations. So what are the steps that you can take to get towards that? What are the tools that you can use to ensure that you meet the compliance that you need to meet in order to continue to meet your compliance but do these new things? How do you maintain quality? \n\nHow do you maintain the level of quality? If, for example, you're not doing UAT because UAT is a cost centre, not a value centre for software engineering, if your UAT is a value centre because it finds stuff and protects your business, then we've not got high enough quality delivery of our product. But if we create that high enough quality and UAT becomes a cost centre, we want to get rid of those cost centres. \n\nHow do we ensure that we don't end up in the same situation as CrowdStrike? There's a great example of an organisation recently in the news that caused massive disruption. I think they're going to be sued by Delta for 500 million dollars that Delta has lost over the week that they had a problem, which is partly their own problem with DevOps. \n\nWhat could CrowdStrike have done differently? One of the things they didn't do was control the blast radius. You don't just deploy to production; you don't just deploy to 100 machines. I'm not sure exactly how many machines run at CrowdStrike, but you don't deploy to all of them at the same time. That's insanity. Even Windows, who have very high quality in the product that they ship, deploy to a small number of people first. \n\nThey control the blast radius. What are our lowest impact customers or customers that would be impacted the least by an outage? Deploy to them first. Perhaps deploy to our own systems first and run it for a few days to see if there are any problems, monitoring that feature and that capability that's being deployed. \n\nNot deploying on a Friday; the best time to deploy is Monday morning when everybody comes in because you get a whole week to fix any problems. Deploying on Friday is probably not the best idea. There are all kinds of things that make logical sense and are within the context of this DevOps story that we can help educate, coach, and engage with your team, your engineers, as well as with your business and your leadership to understand what these things are, what value you get from them, and how you maintain your ability to control risk within this new world of continuous delivery to production."
  },
  {
    "Title": "Mastering Your Kanban Board: A Practical Guide to Visualising and Optimising Your Workflow",
    "Description": "Learn how to design, review, and adapt Kanban boards to accurately visualise workflows, identify bottlenecks, and support continuous improvement in team processes.",
    "ResourceId": "r1wvCUxeWcE",
    "Url": "https://www.youtube.com/watch?v=r1wvCUxeWcE",
    "Date": "2024-08-16T07:04:15Z",
    "Captions": "Really important part of visualising your work when you're doing Kanban is having some kind of Kanban board. Okay, you want to take the way your system currently operates. You want to think about the things that move across your board, things that will move through your system, and then decide what are the columns that need to move through.\n\nNow, the absolutely most optimal way to do that would be single piece flow: one item at a time to do, in progress, and done. But the reality is we don't all live in that perfect world; in fact, none of us do. So you're going to have to look at how your work flows through your system. What are the columns that you currently have on your board with the stages of the work? Come up with a board that represents that."
  },
  {
    "Title": "Unlocking Continuous Improvement: How Metrics and Visual Tools Transform Your Workflow",
    "Description": "Learn how using key metrics and visual tools like Kanban boards drives continuous workflow improvement, transparency, and informed decision-making in teams.",
    "ResourceId": "sIhG2i7frpE",
    "Url": "https://www.youtube.com/watch?v=sIhG2i7frpE",
    "Date": "2024-08-15T07:04:39Z",
    "Captions": "One of the key elements of Caman is improving, making improvements or changes to the system in order to see whether you've managed to improve things or not. So we use metrics and visual tools to enable us as humans to see patterns and understand the data to increase transparency, so that we can make changes to the system. \n\nThis allows us to ask more interesting questions of ourselves and others that participate in our system. Improving the workflow is absolutely critical. If you're not making changes to your workflow on a continuous basis, you're probably not doing Caman. \n\nIf you are making changes, are you looking at the right data? Do you have the right visualisations to really be seeing what's going on?"
  },
  {
    "Title": "Harnessing Evidence-Based Management: Transform Your Decision-Making with Data-Driven Insights",
    "Description": "Learn how evidence-based management uses data and purposeful metrics to inform decisions, shape behaviours, and drive continuous improvement in organisations.",
    "ResourceId": "Nf6XCdhSUMw",
    "Url": "https://www.youtube.com/watch?v=Nf6XCdhSUMw",
    "Date": "2024-08-14T07:12:45Z",
    "Captions": "Evidence-based management is the application of evidence-based practices at the strategic and tactical levels in an organisation. It involves using data to inform but not control the actions and behaviours that have been shown to impact outcomes. So what that means is that we're going to collect a bunch of data within the organisation. The way we measure people informs the way they behave. So whenever you're working within an organisation and you find somebody's working against you or somebody's not being as involved as you think they should be involved, and you're wondering why, there's probably some organisational measure or metric something being levied against them that enables, ensures, encourages that behaviour in that person.\n\nSo the best way to figure out why somebody is doing something in a particular way that maybe you feel has a negative impact on the way your things need to happen is to figure out how they're measured. That can be difficult, but if you can glean that information, you can figure out why they're behaving the way they're behaving, why they're taking the actions that they're taking. We want to try and have more behaviours and actions that impact our outcomes positively. We want to deliver more value to our customers. \n\nWhat other outcomes might your business want? Well, they might want more revenue. They might want more value for their customers. They might want to save money. What else might be good impactful outcomes for our business? We might want to increase our capability within a particular market. It's difficult without a specific instance to have a specific outcome that you're trying to achieve. \n\nOnce you've figured out what your outcomes are, you need to figure out what metrics are going to help you measure progress towards those outcomes. These can be super tactical things that help you move towards those outcomes. It can be leading or lagging measures; there's all kinds of things that come into that. But evidence-based management is that application of practices within the context of that data to help you make decisions. \n\nOne of the reasons I very specifically said inform but not control is that the data is not always going to result in a specific action. So what's a good example of that? Let's say I had a metric for my team or teams. I've got a group of teams I'm working with, and my metric is the number of live site incidents that last or exist for longer than two sprints—let's call it three sprints. We're running a live service; we're going to have outages and issues and things that happen in the live service. When those things happen, we're going to create live site incidents or live site incident mitigating actions—things we're going to change in the product in order to not have that type of live site incident happen again.\n\nSo we've done our analysis, we've come up with these ideas, and then we expect our metric is that we expect teams to clear those off within three sprints. If I expect them to clear it off within three sprints, I maybe want to have a measure, a team dashboard, and I'm going to have a measure that says what is the number of live site incidents that have been existing for longer than three sprints and what is the trend of that number? Is it trending up or is it trending down? \n\nYou may see your list of teams, and you see the numbers, and they're all good apart from this one team that has these four outstanding live site issues that have been there for longer than, let's say, six or seven sprints. That doesn't mean there's something wrong in that team. These are indications, these are flags, pieces of evidence that you use to inform your decision-making. So you'll probably need to go ask them how it's going, and maybe there's a team that they're waiting on something else to happen. They can't fix their thing until some other third party that they don't control and we have limited influence over needs to do something. \n\nSo we can't make them do it; they're going to do it in their own time. It's on their backlog; it keeps getting pushed, and we can't resolve our issue until they've resolved their stuff that they need to do. So the team, that data looks bad, but the team's doing fine. They're chasing it on a regular basis; they're putting pressure on that other group on a continuous basis. It's just taking time to get resolved. \n\nThat's why it informs but does not control. But we're making decisions based on the evidence. We're collecting a bunch of evidence; we're extrapolating what we don't know or don't understand. The evidence is going to have gaps in it, and then we're making an informed decision based on our understanding of the current situation. That's evidence-based management in a nutshell."
  },
  {
    "Title": "Embrace Kaizen: Unlocking Continuous Improvement for Personal and Team Success",
    "Description": "Explains how adopting Kaizen’s continuous improvement approach can enhance personal growth, team collaboration, and process optimisation in work and daily life.",
    "ResourceId": "V44iUwv0Jcg",
    "Url": "https://www.youtube.com/watch?v=V44iUwv0Jcg",
    "Date": "2024-08-14T07:04:17Z",
    "Captions": "We love taking Japanese words and using them not quite right for their meaning. But one of the key phrases that we use all the time in Kamban is Kaizen. Kaizen is really just about continuous improvement. It's keeping changing things, hopefully for the better, because you're observing improvements in the system or measuring improvements in the system. \n\nSo the idea of continuous improvement, continuous change, and continuous optimization of your process or your system is generally referred to in the Kamban community as Kaizen. Kaizen's not limited to Kamban; it can be used absolutely anywhere you like. We should always be continuously striving for anything that we do to be a little bit better every time we do it, and that continuous nature is what we mean by Kaizen."
  },
  {
    "Title": "Unpacking Assumptions: How to Elevate Your Product Development Beyond the Feature Factory",
    "Description": "Learn how to identify and challenge assumptions in product development, avoid the feature factory trap, and use discovery, experimentation, and validation to meet real user needs.",
    "ResourceId": "fUj1k47pDg8",
    "Url": "https://www.youtube.com/watch?v=fUj1k47pDg8",
    "Date": "2024-08-13T07:14:40Z",
    "Captions": "Let's start with the why. Why was the PPD V course created? Based on our observations of how companies work and how teams work, it seems there is still a lot of attention when it comes to delivery. One may also think that, hey, if we have to put just one goal of every sprint, what is the most important thing that we have to achieve? It is creating a product increment. Done. Product increment. \n\nSo, it seems this is an important topic, right? But this is not enough, and I believe we forget, although we emphasise this a lot, that we are solving complex problems. What does it mean? We, along this product development journey, will make a lot of assumptions. What is even worse, some of those assumptions, in some cases, I would dare to say even the majority of them, might be made unconsciously. \n\nSo, we made an assumption, we take the next step, but we miss a learning opportunity. This may lead us to the feature factory problem. Of course, we have a lot of memes and stories like, \"Hey, strong stakeholders, stakeholder-driven development,\" and here we go, we have the feature factory problem in place. But if we think about it deeper, there might be a lot of factors affecting this problem. \n\nMaybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not the healthy collaboration. And maybe we have chosen the wrong metrics. We have a misalignment here. All those things may cause the problem that we call the feature factory problem. \n\nSo, what do we want to do with this course? We want to emphasise the topic of assumptions in the complex world. In the complex environment, we don't know many things. In fact, in many cases, we don't know what we don't know yet. So, that's why this path towards creating high value, towards creating valuable products and solutions for the customers, should be some kind of way how we navigate around assumptions. \n\nOur biggest question is: what works best for the user? To find the answer with the knowledge gained in that course, we will embrace that. In fact, a full end-to-end empirical cycle requires discovery, delivery, and validation. So, those three elements work together to help us navigate around those assumptions. \n\nOur new course is designed for product leaders, product owners, product managers, but also for product teams in general. We believe that everyone involved in the product development process will benefit from this class. This class is designed to be a one-day course, so around eight hours, which can also be split into two half days or smaller chunks. \n\nIn this class, we will use a case study that will help us navigate through different concepts throughout this whole story, how to better incorporate discovery and validation into the product development process. Thanks to that, we will get familiar with working with assumptions, experimentation, collecting evidence, and an important word for this class: learning. \n\nSo, it will be a conscious learning process on how to build better and better products."
  },
  {
    "Title": "Unlocking the Power of Caman: Why It’s the Perfect Companion to Scrum for Process Optimisation",
    "Description": "Explains how Caman complements Scrum by providing transparency and insights to optimise workflows, identify bottlenecks, and improve processes across any industry.",
    "ResourceId": "Qko_93YAV70",
    "Url": "https://www.youtube.com/watch?v=Qko_93YAV70",
    "Date": "2024-08-13T07:04:49Z",
    "Captions": "If you're having a conversation about Caman vs Scrum, you probably don't understand Caman very well. Caman is a strategy that you can apply to any system, any process, to gain deeper insights and understandings of that system and process so that you can optimize it to increase the flow of value through that system. So it's not Scrum, it's Caman. It's Scrum and Caman always. If you're using another system, it's that system and Caman always. \n\nSo you can see what's going on. Caman is a tool to increase transparency for any system, for any type of work, in any situation, and it will always add value to the conversation."
  },
  {
    "Title": "Unlocking the Power of Immersive Learning for Product Management",
    "Description": "Explores how immersive learning in product management blends practical assignments, evidence-based metrics, and reflection to drive real organisational change and improvement.",
    "ResourceId": "KAqCTOIB4hk",
    "Url": "https://www.youtube.com/watch?v=KAqCTOIB4hk",
    "Date": "2024-08-12T10:03:43Z",
    "Captions": "So the new immersive learning program for that we apply to pretty much everything we do now is designed around this idea of not just imparting knowledge, right? Not just going through some content, but it's an immersive format where we have the content delivered over a much longer period of time. So we have a structured program over a much longer period of time, and it includes some learning. Right? We want to learn some new things, some new tools, some new techniques, some new philosophies, some new ideas. \n\nBut at the end of each of those learning sessions, even though we've done some exercises, perhaps practical exercises demonstrating how it might work within the context of the learning, right? We use liberating structures to help create smaller groups and have people figure out how to use the knowledge. But it's still within the context of that group of people, right? It's not out in your real organisation; it's not out with your real product and your real teams and your real customers. \n\nSo at the end of each kind of learning session where we learn something new, we have an assignment, and that is an outcome-based assignment. The idea is that for each assignment, we're trying to achieve something. So, for example, I just had the third session of the product management mentor program for a company in Sri Lanka and their product managers. We talked about value with the product managers. \n\nThe learning piece, the new information I was providing for them was, \"Here's how you can think about value. Here's how you can understand value. Here's how you can potentially measure value.\" So we talked about evidence-based management. We talked about the value pyramid, then we talked about evidence-based management, and we talked about other metrics and stories around that. \n\nEven people, because we were talking about metrics, they started to bring up other questions around, you know, answering that old question, \"When will it be done?\" So we talked a little bit about just a little bit about probabilistic forecasting and flow metrics as well, right? So they drove the learning content as well as me having a plan for what I would like them to understand. \n\nAnd then the outcome-based assignment, the assignment that they've got is to go apply that to their organisation. Like, what metrics go out into your organisation and figure out what metrics do you currently use in your organisation? How, what do you collect? How do you use them, and how does it impact on decision-making, right? That's the kind of core part of their assignment is to go understand what it is the company has and what the company's doing. \n\nBut then, in addition to that, perhaps they should start a conversation about, \"Do we have the right metrics? Is there a simpler way to collect the thing we're trying to achieve? Can we optimise this?\" and start having those conversations. \n\nSo the outcome from that that I'm trying to achieve is that they, as a group—so this was about 16 product managers for one company—they, as a group, either in small groups go off and have those conversations, as individuals have those conversations, or they can do it all together. I leave it up to them. But when they come back and we're doing our facilitated reflections, the idea that I'm trying to achieve is that they understand more about what it is that their product does and how does it work and what they're trying to achieve with it because they've looked at how they're measuring their success. \n\nThey've looked at how they're measuring their capability to deliver the product, and then they're thinking about whether those are the right things they should be looking at, right? Because a lot of the time in organisations, we're looking at the wrong things. We're looking at the wrong data. We perhaps have vanity metrics—metrics that look great, you know, like velocity or story points—but don't actually add any value to the conversation. \n\nYou know, we've managed to get our original estimate and our actuals within, you know, 10% of each other. We're awesome! Yeah, but what value does that PR provide to the organisation? Does it actually provide any greater degree of predictability? Does it actually help the organisation understand when things will be done? \n\nAnd the answer is no. But trying to figure out and have those conversations, so they're starting to have those conversations within the organisation, not just within themselves but with other people within the organisation. So they're starting that conversation generally in the organisation. \n\nAnd then when we come back for the next session, which is usually a week later, a week or two weeks later, depending on what it is we're doing, when we come back for that reflective session, they're explaining what it is they did, what they managed to learn, what they discovered in their organisation as they were doing those things. \n\nAnd really sharing with not just with each other, but I can help provide them with potential directions that they could take if things weren't working for them or if things were working well, what might be possible next steps that they could try. \n\nAnd hopefully, over time, they're able to figure out a lot of those things themselves, right? When you start from a position of not necessarily understanding something, not doing it, not knowing that you have to do it, and not knowing what you're trying to achieve with it, you need that kind of facilitated reflection to start thinking about what value it brings. \n\nAs you start understanding the value, the outcome that we're trying to achieve and the value it provides to you and your business, you start getting more engaged with that topic. You start poking at it and pulling at threads and trying to figure that out. \n\nSo this idea of immersive learning, right? Immersive, the immersive programme. So we apply it both to our training classes and to our mentorship programmes that you have. \n\nThese outcomes will hopefully enable changes within your organisation. So there's no guarantees for anything, right? Absolutely no guarantees for anything. Your organisation could completely ignore everything you're trying to do. But I find that this type of engagement has the best chance of impact because the participants are able to go start that conversation and then come back, and we can all share ideas on why did that not work? Why did people ignore you? Why did they dismiss what it was that you said? \n\nI've had product managers come back, and they've been told, \"Stay in your lane, right? This is above your pay grade. You know, you need to stay out of this,\" when in fact it's something that somebody who is a product manager should be heavily involved in and heavily engaged in. Where do the requirements come from, right? \n\nSo each of those assignments is designed to be a catalyst for change within the organisation through conversation and discussion within that organisation. And what we want to be able to do is enable the teams and people within the organisation to be able to become more effective, right? By having those conversations, discussing those things, hopefully, we'll even make small changes or at least plant the seeds for changes and then start them growing over multiple sessions, right? \n\nBecause we come back around on similar topics to reinforce them, and that should enable teams and people within the organisation to become more effective and be able to focus more effectively on the goals that they're trying to achieve and hopefully have better outcomes for their team, for the people, for the organisation, and for the business."
  },
  {
    "Title": "Transform Your Product Development: Unleash the Power of Experimentation and Collaboration",
    "Description": "Learn practical strategies to boost product development by using experimentation, agile methods, and collaboration to increase user value, reduce waste, and improve ROI.",
    "ResourceId": "m4KNGw5p4Go",
    "Url": "https://www.youtube.com/watch?v=m4KNGw5p4Go",
    "Date": "2024-08-11T22:00:33Z",
    "Captions": "The course will definitely change your product development game. First point, you will be able to increase user value. Why? Because you are going to deliberately design experiments to better understand user needs and find effective ways how to address them. So we believe this is the best way to increase user value.\n\nSecond point, because you will be able to increase user value and have this process more conscious with a lot of learning, you are definitely on your path to decrease waste. As a result, you will also improve return on investment when it comes to what the team is working on. You will invest based on evidence; you can adjust your budgeting based on experiments, based on the results, based on the data that you get. And at the end of the day, thanks to that, you can embrace the agility principle of simplicity. So in that process, you will also be maximising the amount of work that is creating little or no value.\n\nAnother important point: we, as human beings, really often jump into solution space immediately or just by briefly presenting the problem. In this class, we want to unlock creativity by thinking in problems and showing a different perspective on that. So hold your horses and let's try different experiments to make sure that we truly understand what the problem is. You might be amazed how many different solutions may finally be created when we first pay a lot of attention to understanding the problem.\n\nAnother point: some of the customers, some of the teams, companies complain when it comes to collaboration with stakeholders. With this class, you actually might be equipped with some tools and ideas on how to improve collaboration between the teams and between the stakeholders. This collaboration may change completely because if you invite others and show them this different perspective, your product development may start with using data, not opinions. In that case, it might also be easier for you to get a green light from important stakeholders, but also to show them that certain paths, certain ideas are not worth investing in.\n\nFinally, I believe it's also a class that is improving our toolbox, our product development toolbox. Because after the class, you will have a bunch of valuable practices, techniques, and ideas when it comes to discovery and validation, and you can start using them immediately after you leave the class. So it might be a great beginning of changes that you will start very soon, just after you say goodbye in our class."
  },
  {
    "Title": "Mastering Product Development: From Assumptions to Hypotheses",
    "Description": "Learn to identify, prioritise, and test assumptions in product development by turning them into hypotheses, managing experimentation costs, and making data-driven decisions.",
    "ResourceId": "j-mPdGP7BiU",
    "Url": "https://www.youtube.com/watch?v=j-mPdGP7BiU",
    "Date": "2024-08-10T07:00:32Z",
    "Captions": "In our new class, we will learn how to work with assumptions. So first, a very important point: we actually introduce assumption to our product development dictionary. One of the very important points we will learn is this moment of realisation: oh, we have made assumptions, and not one, not two, but many. \n\nSo what kind of assumptions are we making when developing products, when discussing potential product futures, when creating product backlog items? This is a very important aspect, but we are not only talking about this fact. Okay, the assumptions were made, but which of them need to be validated? Obviously, not every assumption requires validation. Some of them are more important, less important; there might be a crucial role in ordering our assumptions. So which should be validated first and why? We are going to cover that in this course.\n\nOkay, so first point: assumptions realisation, ordering, and choosing which one to start. The second one, when we work with assumptions, the next important topic is about hypothesis. So we will learn how to create hypotheses and how to test them. In this class, we will pay a lot, a lot of attention to using the right data that will help you verify your hypothesis. \n\nIn fact, we may realise that our product development is actually navigating around some kind of tree of different hypotheses to test. We will also discuss the topic of the importance of desired signal or evidence strength on our product development process. So when we test assumptions, when we talk about hypothesis-driven development, it's important to realise that there will never be 100% confidence. But what is your desired level of confidence? And based on that, how high do you want to be when it comes to confidence? \n\nWe will be talking about experiments that will help us test the hypothesis. So we will learn how to manage costs related to product development based on those experiments that we choose, and this will be aligned with desired signal strength and desired confidence level. \n\nAnother valuable outcome for us is learning how to analyse experiments, how to take what we got out of our experimentation journey, and how to use this data in the decision-making process. So we already talked that learning is important in this class. So think about it as a way of targeted learnings that will help in this decision-making and critical thinking. \n\nThanks to that, we want to avoid toxic love related to our ideas and to what customers told us. Instead, we will be equipped with a certain way of thinking. Maybe for some of us, it will be a new perspective on product development, and thanks to that perspective, we will be learning a lot about what to do, what not to do, and how to use those concepts to be effective in our product development."
  },
  {
    "Title": "Unlocking User Insights: The Key to Meaningful Software Development",
    "Description": "Explores how deeper user understanding, data-driven decisions, and stakeholder collaboration lead to more effective, user-centred software development and strategic planning.",
    "ResourceId": "YGyx4i3-4ss",
    "Url": "https://www.youtube.com/watch?v=YGyx4i3-4ss",
    "Date": "2024-08-09T05:39:57Z",
    "Captions": "Maybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not healthy."
  },
  {
    "Title": "Unlocking the Power of Assumptions in Product Development: Why the PPDV Course is a Game-Changer",
    "Description": "Learn to identify, challenge, and validate assumptions in product development, avoid the “Feature Factory” trap, and build products that truly meet user needs.",
    "ResourceId": "ucTJ1fe1CvQ",
    "Url": "https://www.youtube.com/watch?v=ucTJ1fe1CvQ",
    "Date": "2024-08-09T05:27:35Z",
    "Captions": "Let's start with the why. Why was the PPD V course created? Based on our observations of how companies work and how teams work, it seems there is still a lot of attention when it comes to delivery. One may also think that, hey, if we have to put just one goal of every sprint, what is the most important thing that we have to achieve? It is creating a product increment. So, it seems this is an important topic, right? But this is not enough, and I believe we forget, although we emphasise this a lot, that we are solving complex problems. \n\nWhat does it mean? We, along this product development journey, will make a lot of assumptions. What is even worse is that some of those assumptions, in some cases, I would dare to say even the majority of them, might be made unconsciously. So, we make an assumption, we take the next step, but we miss a learning opportunity. This may lead us to the feature factory problem. Of course, we have a lot of memes and stories like, \"Hey, strong stakeholders, stakeholder-driven development,\" and here we go, we have the feature factory problem in place. \n\nBut if we think about it deeper, there might be a lot of factors affecting this problem. Maybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not the healthy collaboration. And maybe we have chosen the wrong metrics. We have a misalignment here. All those things may cause the problem that we call the feature factory problem. \n\nSo, what do we want to do with this course? We want to emphasise the topic of assumptions in the complex world. In the complex environment, we don't know many things. In fact, in many cases, we don't know what we don't know yet. So, that's why this path towards creating high value, towards creating valuable products and solutions for the customers, should be some kind of way how we navigate around assumptions. \n\nOur biggest question is: what works best for the user? To find the answer with the knowledge gained in that course, we will embrace that. In fact, a full end-to-end empirical cycle requires discovery, delivery, and validation. So, those three elements work together to help us navigate around those assumptions. \n\nOur new course is designed for product leaders, product owners, product managers, but also for product teams in general. We believe that everyone involved in the product development process will benefit from this class. This class is designed to be a one-day course, around 8 hours, which can also be split into two half days or smaller chunks. \n\nIn this class, we will use a case study that will help us navigate through different concepts throughout this whole story, how to better incorporate discovery and validation into the product development process. Thanks to that, we will get familiar with working with assumptions, experimentation, collecting evidence, and an important word for this class: learning. \n\nSo, it will be a conscious learning process on how to build better and better products."
  },
  {
    "Title": "The Strategic Imperative: Empowering Teams with Vision, Goals, and Direction",
    "Description": "Explores how clear vision, goals, and evidence-based management empower teams, improve alignment, and foster autonomy, engagement, and effective decision-making in organisations.",
    "ResourceId": "KvZbBwzxSu4",
    "Url": "https://www.youtube.com/watch?v=KvZbBwzxSu4",
    "Date": "2024-08-08T06:45:00Z",
    "Captions": "Most organisations really struggle to enable the people that are doing the work in their organisation to understand where they're going and what they're trying to achieve. I remember working with an organisation in the US. This is just an example. Probably about 80% of the... no, must be more like 90%. This is anecdotal evidence from me consulting with organisations. Probably 90% plus of organisations, teams, groups that I work with have no idea what value means to their business. They have no idea what the strategic direction of their organisation is, and they have no idea what the current goal is for their organisation. \n\nCan you imagine that you're trying to do work, trying to decide what to build, trying to decide what direction to go, and you've no idea what that direction is? That's like being dropped in a field in the middle of nowhere and told to get to the nearest village, and you have no idea what direction that village is. You're just going to have to come up with a search pattern, and you're going to have to go try and search. Whereas what you really need is a map and a compass. That's what those things are, right? That is what this idea of vision and value is for an organisation. It's the map and the compass. Where are we going? How are we going to get there? Are we going in the right direction? How do we measure how we're going in the right direction? \n\nThat's why I talk about evidence-based management, right? How do we measure we're being more successful than before we made that decision? That's why I talk about hypothesis-driven engineering practices. How do we ensure that the ideas that we have actually have a valid story to them? Are we making the difference that we thought we were going to make with the investment we thought we were going to do? \n\nAnd that's why it's so important for senior management and leaders to grow their product management and product ownership capabilities in their organisation to understand how important that story is for organisations to have. Not just to have a goal and a vision, right, but for it to be articulated in a way that every single person in your organisation understands what that goal and what that vision is, and how the work they do every day contributes to it. Because if the work they do every day doesn't contribute to what it is your business is trying to achieve, then you probably shouldn't be doing it. \n\nAnd if we don't know what direction we're going, how do we know where even the big things that we're working on are supporting that goal and vision that we're trying to achieve? You need to have a North Star. You need to understand as a business what you are trying to achieve and be able to communicate that to everybody in your organisation in a way that makes sense to them. It doesn't matter if it makes sense to you, right? It has to make sense to them because they're the ones who are doing the work. They're the ones who are making the decisions. Every person in your organisation is making lots of little micro-decisions every day within the context of whatever it is they've been hired to do. \n\nRight? So software engineers are making engineering decisions. Architects are making architectural decisions. Project managers are making project decisions. Delivery managers are making delivery decisions. Every single day, they're not going to go ask you whether they're making the right decision or not. In order for them to be able to understand whether their decision is a good decision or not, right? Let's say they just have two options. You never have two options; you have like 50 options. But let's say you've got two options. And depending on the future, one is right and one is wrong. Maybe they're both right, but one could be right, one could be wrong. We don't know yet; it depends on the future. \n\nBut if I am making that decision and I understand more about the context, I understand more about the impact that this choice is going to make on the future, I can perhaps make a better choice. If I don't understand, I'm just going to randomly pick whichever one's my favourite, right? Because that's what people do. What do I think, based on the limited knowledge I have, is the best thing I can do? \n\nSo if you look at something like David Marquet's \"Turn the Ship Around,\" right? It talks about intent-based leadership. What do you intend as a business? How do you communicate that? Does everybody understand your intent? Because if they don't understand your intent, they're going to make bad decisions. You want them to make good decisions because they're going to make the decisions. Because in order for you to make the decisions, you have to understand everything that they understand. \n\nAnd you're hiring incredibly technical people these days, right? In the old days of big textile factories, management and leadership could make better decisions than the people on the shop floor because the people on the shop floor were largely an uneducated workforce. And you could maybe talk... even the foremen were probably not highly educated. They had anecdotal knowledge, right? They didn't understand the theory; they just understood the mechanisms of what's happening on the floor. \n\nYou needed to go up to management levels to get people to understand what it is we're actually trying to achieve as the business. What's the thing? So they didn't make any of the decisions at the bottom, but they weren't doing highly technical work that required lots of decisions. When you're doing simple things, when you're doing... let's say when you're doing complicated things, you can document them into simplicity, right? That's probably a good way... it's a terrible way to describe it, but anyway, you can take a complicated thing, you can write a bunch of documentation, create a bunch of rules, create a bunch of \"if this happens, then this happens,\" and you can provide standard operating procedures, right? \n\nSo you can provide those for people, and they can just follow them, and we're going to have good outcomes, right? Because by following that standard operating procedure, we're going to have the same outcomes every time. But in the world of complexity, when we are dealing with surprises, and surprises can be good or bad surprises and opportunities, right? Those vary too much, and we can't create a standard operating procedure because we will perhaps not be able to maximise the value that we create because we're just following the standard operating procedure. \n\nAnd lots of big organisations definitely fall into that trap of they have a SOP for everything. This is how we do things here. This is our bureaucracy, our red tape, or whatever you call it locally. And it inhibits the ability of the people in your organisation to make better decisions than the person who decided on the standard operating procedure, which may have been 10 years ago in a different market, in a different part of the business, for a different context. And now it's applied to everybody and everything equally across the organisation. \n\nAnd in some cases, it's a good decision; in other cases, it's a really bad decision. We want to make more right decisions and less wrong decisions, and that means everybody in your organisation has to understand what it is you're trying to achieve. And in order for them to do that, you as the business, you as leaders and management within that business, need to grow your understanding of how you communicate and engage with everybody in your organisation to ensure that they understand what you're trying to achieve and what direction they're going. \n\nAnd that means you can't just go install OKRs and have everything be perfect. You can't just write something in your vision statement and have everybody just follow it. They need to understand. Understanding is not a Boolean proposition. It's not something that you can standard operating bureaucrat your way into. It needs to be something that is personal, that is based on empathy, that is based on engagement with people. And for that, that's why we have a product owner. That's why we have product ownership capabilities. And in order to maximise the value that your organisation creates, you're going to have to help everybody understand what it is you're trying to achieve."
  },
  {
    "Title": "Understanding the Power of Kanban in Scrum",
    "Description": "Explains how integrating Kanban with Scrum boosts transparency, limits work in progress, and improves workflow, helping teams identify bottlenecks and deliver value efficiently.",
    "ResourceId": "PaUciBmqCsU",
    "Url": "https://www.youtube.com/watch?v=PaUciBmqCsU",
    "Date": "2024-08-05T06:45:00Z",
    "Captions": "If you're having a conversation about Caman v Scrum, you probably don't understand Caman very well. Caman is a strategy that you can apply to any system, any process, to gain deeper insights and understandings of that system and process so that you can optimize it to increase the flow of value through that system. \n\nSo it's not Scrum, it's Caman. It's Scrum and Caman always. If you're using another system, it's that system and Caman always. \n\nSo you can see what's going on. Caman is a tool to increase transparency for any system, for any type of work, in any situation, and it will always add value to the conversation."
  },
  {
    "Title": "Detecting Agile BS: Lessons from the Department of Defense",
    "Description": "Explores why true organisational agility needs more than Agile development, highlighting the importance of continuous delivery, quality, and removing bureaucratic barriers.",
    "ResourceId": "kVt5KP9dg8Q",
    "Url": "https://www.youtube.com/watch?v=kVt5KP9dg8Q",
    "Date": "2024-08-02T06:45:02Z",
    "Captions": "The final question for asking leadership within the organization is going to be a stickler. I see this in organization after organization being a difficult problem to discuss, and that is: is the full ecosystem of your project agile programming teams followed by linear bureaucratic deployment a failure? How many of you out there listening to this are working within organizations where you're able to continuously deliver to production, where there is no human intervention required between the developer submitting the pull request, being approved, and getting all the way to production? How many of you work in that sort of environment where there are no bureaucratic things in between you and production? There may be tests between you and production; it may take time for your product to roll out because it has to go through a set of automated, standardized checks, perhaps compliance things. \n\nI do work with a team that makes firmware for pacemakers, and you better believe they have a lot of compliance they have to meet. Their software, after they create their usable working item to ship, needs to run a gauntlet of external tests and validations, but they expect all of them to pass because they've done all the things to ensure that it does. So, it's unusual for anything in that story to be a failure that they have to have manual processes, right? That little bit of bureaucracy in their way, but only to protect people's lives. It's the absolute minimum needed to ensure that we protect people's lives. \n\nHowever, for most systems that we work with, we want to be delivering high enough quality to our business that we're able to remove a lot of those traditional bureaucratic points in that story. For example, user acceptance testing. If you have user acceptance testing in your business, it's because it's a value centre. If your customer insists on doing user acceptance testing when you give them product, it's because it's a value centre for them. You give them product, and they find problems. Therefore, UAT has added value for them. Why are they finding those problems? They're finding those problems because the quality of the product that you're giving them is not high enough to pass the bar that they're expecting and that they're paying you for. \n\nIf it was high enough, then their UAT wouldn't find anything and would become a cost centre, and then that's a conversation about eliminating cost. If it's never finding an issue with your product, it's of no value to them to do it because your product is high enough quality. You should all be striving to have a high enough quality product that you don't need additional checks and validations. If you need to have something that somebody else wants to see as part of your process, bake it into your definition of done. Bake it into the way you build software so quality is so high you don't even have to worry about it. You can continuously ship to production. \n\nIf your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then you would probably—I probably wouldn't consider that you're already in the agile space, right? You're not already agile. You might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as yes, we do this, this is how things work here, then we're still lacking. We're still trying. We're still working towards being agile. \n\nNow, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, \"Well, you guys suck, you're not agile,\" because you're not doing this. That's not how we work towards success. \n\nBut I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organization. How many of these six questions are you able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being agile BS?"
  },
  {
    "Title": "Product Ownership vs. Product Management: Busting the Myth That They're Separate Roles",
    "Description": "Explains why product ownership and product management are deeply connected in Scrum, clarifying their roles, focus on value delivery, and the need for agile adaptation.",
    "ResourceId": "XF-yQmPdUME",
    "Url": "https://www.youtube.com/watch?v=XF-yQmPdUME",
    "Date": "2024-08-01T06:45:01Z",
    "Captions": "So effective product ownership focuses on product management. There's a kind of misconception that we're in some way replacing product management with product ownership or that they're different things. Right? They're absolutely not; they're exactly the same thing. \n\nThis is where product ownership, within the context of Scrum, comes in. I definitely want to disambiguate between when I'm talking about the product owner. I'm talking about the product owner as defined within the context of Scrum and the Scrum guides, not the job title or role that your organisation has created and added other baggage that is nothing to do with those things. \n\nYou might have a product owner within your organisation, and it says in the job description, \"also responsible for writing reports for management,\" \"also responsible for managing the product,\" or \"the project,\" right? Or other stuff that is not what I'm talking about. The product owner is an accountability within the context of Scrum. That's it. It defines that the product owner needs to be somebody that the organisation respects and that is accountable for the maximisation of value delivered from the work of the Scrum team. \n\nThat's the product owner. The product owner's job title is not \"product owner.\" That's a made-up organisational misunderstanding of moving towards Scrum. There shouldn't be job titles in your organisation that are \"product owner\" or \"Scrum Master.\" Those should not exist. \n\nYou're in product management. If we take product management as a big wrapper of all of the things that need to be done in order to manage a product, we're shifting the focus of that from a long-term, maybe we do a two-yearly delivery cycle, towards a very short delivery cycle. If we're doing Scrum, there are some accountabilities that Scrum brings for those people that are doing product management. \n\nOne could say that the product owner is an aspect of existing product management that probably should always have been there in the first place but maybe wasn't necessarily quantified enough to make it a viable thing. In the past, organisations have been able to skate by without having that clear vision, goal, and value focus. \n\nOrganisations were able to skate by; perhaps they had deep coffers built up from some product that didn't have any competitors that they made, and now we have lots of money, so we actually, you know, we don't need to maximise; we just need to get by. Or for other reasons, right? But as we move towards that shorter iterative cycle, it becomes more important to focus on value and less important to focus on more stuff. \n\nWe're not maximising productivity; we're not maximising the number of items we deliver per timeframe. We kind of are, but we're not trying to deliver more stuff; we're trying to deliver more valuable stuff. In order to deliver more valuable stuff rather than just more stuff, we need to understand what value is. To understand what value is, we need to understand what direction the organisation's going, and that's the foundation of product management. \n\nProduct ownership is an accountability in Scrum. I think I've said this before: Scrum is like a mirror. The mirror just reflects what you're doing and says, \"Why can't you do this thing that we think you should need?\" So the accountability of the product owner being maximising the value of the work done by the Scrum team—why can't you do that? What's inhibiting your ability to do that? That's why the product owner accountability exists. \n\nIt's not a job title; it's not a job role; it's an accountability that forces product management to reflect on why they can't manage the product in this new context. Because we're moving from those long-term deliveries towards shorter and shorter deliveries for all products across all industries. Part of the reason for that is we want to take advantage of opportunities in the market and deal with surprises that come from the market, right? Our environment or our business. \n\nIn order to take advantage of them, we need to do so more quickly than a competitor can come along and take advantage of them, or a new business can start up and take advantage of them. Otherwise, we're too late to the party. So in order to do that, we need to move faster. What is the amount of time that your business needs to go around that cycle of re-evaluating what we're doing? That's the cycle you need to be on. \n\nHow quickly does your market change? Most of us don't exist in static markets; we exist in volatile markets that are always changing. The niches that our organisation has grown to fit are growing and contracting on a regular basis. If they're growing and contracting on a regular basis and you're in one niche, you're going to feel that pain on that cycle. \n\nThat's something that sometimes my business suffers from, where you've got that cycle of organisations having their flesh with cash, so they're looking to train people and increase skills, so our training business goes up. Then you have an economic downturn, and our training business drops. That's the ebb and flow of any one business. \n\nSo how do you mitigate that? Well, as a product owner or product manager, you need to be thinking about how do we open out new markets? All of the ebbs and flows of those different markets operate on different cycles so that we maintain our ability to operate as a business without loss by divesting our interests into lots of different areas. \n\nProduct management at a big organisational level is thinking about how do we get into new markets? How do we get those new stories in? The product owner's accountability is just to maximise the value of the work done by the team. So if we're going to have a bunch of teams, we should maximise the value of the work that they're actually doing. \n\nIn doing that, maximising the value return on investment that we get from the work that we do, we should be able to adapt to those changing needs in the market, do the product management thing. Product management includes portfolio; that's part of it. Scrum is part of it because it's managing the work done by the Scrum team. \n\nThat's part of that story, creating little social technology that allows you to manage that, but it's within that wider context. The idea is that we have a holistic approach to product management, of which the product owner is just an accountability, a part of that story. We need to create a shared understanding with vision, goals, and value for the direction that we're going so that all of these self-organising teams can work together towards that common goal. \n\nThat's how we achieve that common goal. We're using shorter iterations, particularly Scrum in this context, if we're talking about the product owner, for frequent product validation through inspection and adaptation. Scrum is founded on empiricism. We need to have regular tests to validate our hypothesis that a feature is going to advance value. \n\nThat is why saying that product ownership—how does product ownership build on the foundation of agile product management—is kind of like the reverse of the story. It's actually how does product ownership enable product management to maximise the value that we're trying to create."
  },
  {
    "Title": "Navigating the Complex World of Azure DevOps Data Migration",
    "Description": "Learn key steps, common pitfalls, and best practices for migrating data from legacy TFS systems to Azure DevOps, including identity alignment, database cleanup, and backups.",
    "ResourceId": "3jYFD-6_kZk",
    "Url": "https://www.youtube.com/watch?v=3jYFD-6_kZk",
    "Date": "2024-07-31T12:00:49Z",
    "Captions": "When you're migrating data around in Azure DevOps, there are a hundred thousand things that can go wrong. There are some really big things that people run into. If you're using the Azure DevOps data migration service that Microsoft provides to take your whole collection up, big things are we're on an older version of TFS that's not supported. I did one recently and discovered during the discovery that the customer still had Visual SourceSafe. So we had to do a Visual SourceSafe import first. Visual SourceSafe I think went end of life in 2005, maybe 2005, so it was stuff that had been around for a long time. We had to bring that in first because if you don't bring it in first and you try and upgrade your TFS first, the VSS import was only supported up to TFS 2015 because after that it's ten years after VSS was end of life. Microsoft stopped having that functionality in TFS, so if you don't bring it in before that, you can't bring it in, not with full history and all of the things. They discontinued those tools.\n\nOne of the most common issues that people run into when they're doing migrations is doing things in the wrong order. If you push up to Azure DevOps and you've done things in the wrong order, you might want to do process template changes. You want to do them on-prem before you push them up. You might want to bring in other source control stuff; you need to do that before you take it up. You might want to move from TFVC (Team Foundation Version Control) to Git; you probably want to do that before you move up, but you can probably get away with it. \n\nThe biggest one, and this is the one that there's absolutely no way back from, is account alignment. This is just mental. The way TFS does identity is TFS has an identity, and it wraps whatever the actual identity is. In the old days, this was either a workgroup account if you're familiar with Windows authentication, or it was an Active Directory account. The issue is that if you take a workgroup and then move it into a domain-joined environment and convert it to a domain-joined, but the accounts don't match up, TFS will automatically, when you move between environments, try and find the account that matches the one that already exists and just swap out the bit inside of the TFS identity. But if it can't find it and it's already added to the systems, it will create a new identity. \n\nSo you'll end up with two TFS identities. If you've got Bob in your company and Bob has the old TFS identity and the new TFS identity, when he logs into TFS and he searches for \"show me all work that's assigned to me,\" he won't find anything because it's assigned to old Bob, not new Bob. That's an order of operations issue, and it's really hard in Active Directory because quite often there are groups and things that add people into services before you want them to be added, and then you end up with this problem. \n\nAzure DevOps combats that a little bit when you move stuff around because even once you're in Azure DevOps, you can move from tenant A to tenant B. Your Microsoft intra-tenant identity management can be swapped out, and it does the same thing. But it's going to ask you, \"Here's a list of all the users that we couldn't match up; do you want to match them up?\" If you click that skip button at the bottom, which if you have somebody who doesn't know what they're doing, people are apt to do. I find so many times things go wrong because people click the skip button because they think they know what it says or they don't care what it says, or they just want to do it, or it's not their job, or whatever reason. \n\nThere is no way going back to the old way because now you've got both those identities existing, and there's no way to merge those identities. If you want everything to align through your upgrade process, then all of those things need to be taken into account. Probably the absolute worst case of that having to be managed was years ago when Microsoft sold a part of their business to another company. We had to get all of this work right—the TFS environment from inside of Microsoft to inside of this other company. \n\nAs you can imagine, with legal and compliance and all kinds of things, it wasn't that easy. When you work within a company, you take dependencies on lots of things that maybe your company owns, but then you sell this thing and you're not selling these things that you're taking a dependency on. So how do you get it out? I think we had seven migrations that we had to do with this single environment. There were three outgoing, one outside neither environment, and then three incoming into the new company. At each of those levels, there were different validations, different scripts, different things that had to be run against those environments to ensure that we don't lose anything and we don't get anything we're not supposed to. \n\nIt was an absolutely horrendous nightmare of convoluted legalese to get it all done. The biggest issue was maintaining those identities all the way through because the people were going as well, and they wanted all of the identities to match up on the other side. You have to ensure that you map all of the identities correctly all the way through so that when you get to the other side, people open it up and go, \"Oh, there's all my stuff,\" rather than, \"Oh, where's all my stuff gone?\" Then they have to go find it, and they have to go create custom queries and all kinds of stuff. It's just a pain in the butt.\n\nThose are some of the bad things that can happen with identity management. There's a lot of gotchas in there. Database size moving up to Azure DevOps, the size of the database and what's in there and how you clean it up—that's a bunch of gotchas in there. If your company, which you should know developers are apt to do, you might find that your TFS environment has been around for a really long time, and it didn't used to be run by your operations team with control. It maybe used to be run by the developers before it was handed off to operations. \n\nBefore they knew that in the old days, operations often thought that anything that developers did was non-production, even though all the code is an organisational asset and we're storing it in there. The build environments and build agents are all organisational assets because we can't deliver our product if we don't have it. They were all considered not production, so developers could have the keys to everything and do everything for so many companies like that. \n\nThe problem is that because they can do whatever they want, they go, \"Oh, there's the new beta version of TFS. Oh, it's supported by Microsoft, so we'll install that.\" But it's mostly supported by Microsoft. I've had environments where it's a major enterprise company, but in the midst of time of that environment, it's had a beta version of TFS deployed that was maybe supported way back ten years ago. It causes knock-on errors because there were a couple of things that weren't taken care of that mean it can function the way it is, but it ain't going to Azure DevOps without fixing all of those things.\n\nIf your server is old enough, there are all sorts of buggy things from TFS 2010 that they fixed in 2012. If your server's old enough to have been in 2010, there’s just a whole nightmare of stuff left over that you have to go fix before you can go to the cloud. You can have half-committed stuff because you had to do two commits back in the day to do a rename, but nobody told anybody, and there was no error message. \n\nIn Service Pack One, they brought in the error message, and then in 2012, they fixed it, but there's still a bunch of stuff in there that's messed up. If you imagine a product that's been around for 18 years—no, not quite 18 years, 16. Where are we? It was created in 2005, shipped in 2006. Man, that's a long time, right? Nearly 20—nearly two years off 20, 18 years. My math sucks. Eighteen years of engineering work has gone into this product. Eighteen years of different people working on it. Eighteen years of forgotten stuff. Eighteen years of bodies being buried underneath some of the classes and methods. \n\nThose are probably where the biggest difficulties are. The easy stuff, the stuff that can go right—man, I did mention the migration up to Azure DevOps. This was really early on in Azure DevOps. It took less than an hour. This was a government agency in the UK. It was a council, so not government government, but local government. We ran the tool against it; it said everything was good. The database was a couple of gig, tiny, so we just sequenced the D pack, did a dry run up into Azure DevOps. That took about 15 minutes, less than 15 minutes, and it was there. They looked at the dry run; they thought, \"Oh, this looks awesome. This is perfect. Everything's where it's supposed to be. We see all the stuff. We trust Microsoft.\" \n\nThey were just reasonable folks. We just went, \"Okay, do you want to just do the production one then, or do you want to wait and validate it some more?\" They were like, \"No, just run the production one.\" So we ran the production one, and we were done. Turn off TFS. That's one headache off their plate, one headache off their local admin's plate. \n\nHold on, we need to go back to what's the worst—the absolute most appalling issue with TFS or Azure DevOps Server. Running it on-prem, especially if your developers are running it, this will be done right. If your operations team is running it, I guarantee you it's wrong, and that's backup. Most operations teams want to use their standardised tools, so they just see a SQL Server and they want to plug their standard backup tool into Azure DevOps and suck out the data, store it off-site. If they're doing that, that does not guarantee a restore. \n\nThe problem with systems like TFS—it's not really a problem with TFS; it's a problem with having people that don't know what they're doing running it or that don't care running it. It's actually the same issue for SharePoint and a lot of other systems. You have multiple physical databases inside of the system. When it runs updates, you could have an update that straddles multiple databases. In TFS's case, you've got a configuration database and then you've got a bunch of collection databases. \n\nYou can have an identity update, for example, that will hit the collection and the configuration database. The configuration database is small, so that bit will be done really quickly, and then it needs to complete on the other one. They run it as a transaction. It's absolutely possible to hit the point in time of your backup that it's completed and committed on one database and not completed on the other one. So it will roll back because the transaction has crossed multiple databases, and this one's finished and it's moving on to this one. The transaction allows you to roll back the whole thing, but not if you restore a backup without that transaction being in existence mid-transaction. \n\nThere are things that you're supposed to do that are all documented by Microsoft to enable you to do marked transaction logs. You actually put a mark—you use the transaction system to put a mark across all of the databases, and then you back up. The transaction completes, all of the other transactions are completed, this transaction completes and has this mark, and it might be at different timestamps across the different databases. Then you back up that mark, and when you restore that mark, it's exactly the right point. \n\nBut most people don't do that, and they validate things by doing a trial restore. It's totally possible that that restore will work. Probably in most circumstances, that restore will work. But you know what Murphy says: what's the worst thing that could happen? It will happen at the worst possible time. So in an actual disaster, when you need to recover your database, that's the time when you'll hit that transaction log. If you hit that, you are not going to be able to restore your databases, and you're going to have to call up Microsoft, and they're going to have to have an engineer log into your servers and run scripts to fix the databases. \n\nThen, because they've run scripts to fix the databases, that's another thing that can end up being a future problem when you go to move to Azure DevOps, and something in the database is not quite right when they do the validation, and it fails the import. My advice is never, ever let an operations team run TFS. That's my advice. If you have to let an operations team run TFS, ensure that they must use the TFS documented backup procedures, not their own stuff. That won't work and might end up with you in the hole. \n\nYeah, so that's the big one. Ninety percent of the time, things go perfectly fine. Upgrading TFS is super easy. It used to be an absolute nightmare, but the Azure DevOps team did a bunch of work to validate everything, check everything, and that's part of their ethos. If you run it, it will tell you, \"Here's a problem; here's how you fix it.\" You fix it, it runs, and you can do the upgrade. Totally cool. They're super easy. But when something isn't right, that's when you need that expertise to go, \"What is the problem? How do I fix it? Where does it come from?\" \n\nThe documentation is awesome, but there are still those things that slip through the cracks. So that's really the thing. There are a lot of things that can go wrong and a lot of things that can go wrong that are really important, but 99.9% of the time, everything's going to be fine. You're going to be able to upgrade; you're going to be able to migrate, and everything's going to go great."
  },
  {
    "Title": "Mastering the Migration: Seamlessly Transitioning from TFS to Azure DevOps",
    "Description": "Step-by-step guide to migrating from Team Foundation Server (TFS) to Azure DevOps, covering tools, validation, common issues, account alignment, and best practices.",
    "ResourceId": "Wvdh1lJfcLM",
    "Url": "https://www.youtube.com/watch?v=Wvdh1lJfcLM",
    "Date": "2024-07-31T11:58:11Z",
    "Captions": "There's a number of migration services that we offer. They're kind of related as two sets of tools. There's Martin Azure DevOps migration tools, which is on GitHub and available for people to use, but we help people use it. We do it for customers when they don't want to learn it themselves. So that's the more targeted migration tool. I want to move stuff; I want to merge stuff. \n\nSo that's the actual moving individual work items around. That's what I want to do. Then, that's one of our services. The other one is a kind of managed import into Azure DevOps. Microsoft have a tool called the Azure DevOps data migration tool, and that data migration tool takes the whole thing. So you might have, if you're with TFS, I always call on-prem TFS and the server Azure DevOps just to avoid confusion. Right? I know they renamed the server to Azure DevOps, but it's just confusing. \n\nTFS has multiple databases hanging off it, and those databases are the things that you take and put up to Azure DevOps. So if you have 500 projects in one database, you're taking the whole thing, but you can't just take it because there are things you could do to your TFS that are not allowed in Azure DevOps. There are things that could have happened over the years to your TFS that are not allowed in Azure DevOps. \n\nI think I'm going to double down on things you could have changed in TFS that you're not allowed to do in Azure DevOps, like increasing the max attachment size, for example. There's loads of them. So Microsoft provide a bunch of tools to validate your environment to make sure it will work before you migrate it up, and it has to meet the validation before it will go to Azure DevOps. \n\nBut how do you do that? You have to get onto the latest version, then you have to run the tools, then you have to fix all of the stuff that it highlights, and then you've got to go. So we provide a managed service for moving your entire on-prem Azure DevOps TFS environment—code repos, builds, everything—up to Azure DevOps. \n\nOr we also provide a service where you want to move pieces of things within that context around and consolidate and change process templates. You know, we want to move from Scrum to Agile, or our bespoke one to Agile, or our Scrum one to our bespoke one. All of those, if you want to do things piecemeal, we can help with that. If you want to do the whole thing, we help you manage that process up to the cloud."
  },
  {
    "Title": "Mastering Azure DevOps Migration: Navigating Challenges, Solutions, and Best Practices",
    "Description": "Learn about Azure DevOps migration, including common scenarios, challenges, solutions, and best practices for planning, testing, and ensuring a smooth transition.",
    "ResourceId": "_rJoehoYIVA",
    "Url": "https://www.youtube.com/watch?v=_rJoehoYIVA",
    "Date": "2024-07-31T09:25:17Z",
    "Captions": "There are lots of reasons why companies come to us to help them with an Azure DevOps migration. Mostly, it's knowledge. We've done a lot of migrations. I've done hundreds of migrations. I've done migrations up to Azure DevOps. I've done upgrades to servers over the years, beta servers included. I've written code to move data in a custom way from one environment to another environment, and I've written support code that allows you to standardise that process as well.\n\nSo, the main reasons that companies come to us is we've got a department or a product that we've sold to somebody else, so we need to get it out of the rest of our stuff and move it over here. That's one. We created one big project. I think I coined the term many, many years ago: one project to rule them all. Right? So, they created one massive project, and they actually realised that they need to split it into two. So, take one thing and split it into two, or they created 20 projects and they realised that they're all interconnected and they should all be in one bucket. Those are probably the main ones.\n\nI've sold part of my company. I created too many things and I want less things. I've created not enough things and I want more things, so moving that data around. But also, we don't know what to do. Right? This is our current state of what we've got. We want this. How do we get from here to there? Because it is really complicated to do some of the migrations and upgrades that people want, really depending on their context.\n\nSo, we do a lot of migrations where there are many, many steps to get all the way to Azure DevOps because the servers that their environments are on are crusty and old. And that's the best reason to do it. Right? If your servers and your environments are crusty and old, then your teams that support them are not able to support them. Right? So, you don't want to be running them yourself. You certainly don't want to be running all of your organisational asset, which is your code, in a crusty, falling apart, barely functions, doesn't get any support anymore. Right? Because the environments are old.\n\nSo, if you can get it up to the cloud, get it into that fully supported, fully maintained environment where, in this case, Microsoft do all the updates, do all they take it forward, they engineer the product, they do the support and maintenance, and load and everything, disaster recovery, just everything, they take care of it. And it costs you, what, $4 per user per month to get that? It's a total no-brainer. \n\nSo, getting up to the cloud, doing those things. We've also done a lot of migrations from TFS to Git, from GitHub to TFS. I even did a migration once from Azure DevOps to TFS. I assume somebody in the organisation went without permission and took all the stuff up to Azure DevOps, and there's no way back from Microsoft's perspective. \n\nSo, yeah, there's loads of reasons why companies ask me to do migrations. Some of them are good reasons, some of them are not so good reasons, and sometimes we’ll push back quite heavily and say, \"Look, this is not...\" I get a lot of calls for backup. Right? You don't need to back up Azure DevOps. Microsoft back it up for you. They have disaster recovery, they have copies off the tape, they have all of that stuff for you, and they're all the ISO compliant for the level of recovery that you're paying for. \n\nSo, there's no need for you to do that. So, we push back really heavily on that. But we've also done it because the customer really insists that they want a backup, and sometimes you're going to do that. \n\nSo, there's lots of good reasons, lots of bad reasons to move data around in Azure DevOps. But it's irrelevant. People want stuff done the way they want it done, and sometimes you need to do that. And, yeah, we help them out doing that."
  },
  {
    "Title": "The Evolution of My Journey with Azure DevOps: Lessons and Insights",
    "Description": "Personal experiences and lessons on using Azure DevOps, covering its evolution, migration strategies, custom tools, and practical advice for optimising DevOps workflows.",
    "ResourceId": "isU2kPc5HFw",
    "Url": "https://www.youtube.com/watch?v=isU2kPc5HFw",
    "Date": "2024-07-31T09:21:03Z",
    "Captions": "So I first encountered Azure DevOps back in 2006, so that's quite some time ago. It wasn't called Azure DevOps back then; it was Visual Studio Team Services back in the day. It's gone through many name changes since then, but effectively it's not the same service, but it's the same intent from the service. \n\nAzure DevOps is something that I've been using since then, and I was a lowly software engineer, plugging away building some products. Azure DevOps was really my route into DevOps, into helping teams become better at what they do, increase their capabilities, and use tools to help them better their capabilities. Team Foundation Server was intending to be that tool. I think it largely struggled to do anything outside of the Microsoft space until they moved much further on to Azure DevOps, the cloud version. \n\nThat early product was actually how I got my Microsoft MVP as well, which was building plugins and playing around with the APIs for TFS. I worked with a number of teams, some teams at Merrill Lynch and then some teams at Agreco. In both circumstances, while also doing the work, I helped those teams understand how to do automated builds, how to use the work item tracking, and how to link all the things together. I built some visualisation tools against the APIs, so I've really been plugging away at the Azure DevOps APIs since 2006. \n\nI know where a lot of the bodies are buried in the APIs, which is why when I think what happened, I got my MVP, I moved to the US, and I worked as a DevOps consultant almost exclusively in the Microsoft stack for three years. I was doing a lot of Azure DevOps work. We did a lot of API work; there were some migrations. There used to be this old tool that was totally crazy to work with. I'm trying to remember what it was called. Microsoft created it originally, but really it was just a big code base, and it allowed you to migrate data from TFS to other TFS. It had this kind of adapter model so that you could get from other systems into TFS; that was the idea. \n\nI think I'm the only one—I would hedge; I’m certainly the only one that published creating their own adapter for it. I created a migrator for Test Track Pro into TFS back in the day when Test Track Pro was even a thing, and maybe it is still a thing; I've just not heard about it in 15 or 20 years. That experience of creating that adapter really led me, when I arrived in the UK, to start my own business. One of my first gigs was with a company called Slumber, and Slumber was consolidating. They needed a lot of DevOps help to make the most out of the tools that they had. They were using the tools really well; it was just a little bit convoluted. \n\nThey wanted to take—they're the sort of organisation where everybody does everything, right? So there's every tool you can think of, every engineering process; they have everything. They wanted to consolidate down into using at least a single source control tool with work item tracking, and the tool they picked was TFS, Team Foundation Server. I helped them migrate something, and they had a standard process template, so I helped them migrate something like four to five hundred teams from what they were doing before into this new model and then move them from server to server. \n\nOriginally, I built a bunch of PowerShell scripts. That's when you're prototyping; scripting languages are the best way to run your thought processes. You're effectively writing down your thought process and then running it and saying, \"Yeah, that kind of works.\" If I select this bit, that kind of works, and if I do this, that kind of works. So it's a really good way to do some fast prototyping. It's incredibly error-prone and buggy as heck, but it's a good way to do those things. \n\nI built a bunch of PowerShell tools that I had, I think at one point, four or five people else in the organisation running those PowerShells to start migrating data around, changing process templates, moving data around in fields, all of those things. Then I started looking at, \"Well, really, this needs to be a little bit more solid; this needs to be a little bit more capable; it needs to be something that's a little bit more pluggable.\" I built the first version of the Azure DevOps migration tools. \n\nThere are kind of two ways to do migrations in Azure DevOps. One is really limited but really powerful; the other one is mine. The one that's really limited and really powerful is Microsoft's own migration tools. Obviously, they want as many people as possible to move into the cloud. They don't really want to be supporting and maintaining Team Foundation Server or Azure DevOps Server, the on-prem version of the product. \n\nThey want people to move up to the cloud, so they've built a tool that if you get onto almost the latest version of Azure DevOps on-prem, you can effectively package up your database, give it to them. There's a whole process for that, but package up your database. It's not as easy as it sounds. Package up your process, your database, give it to them, and they'll import it into Azure DevOps. \n\nSo if you're trying to get into Azure DevOps, the easiest, most high-fidelity, most productionised way to do that is to have Microsoft do it. They provide a bunch of tools. I've done this for a bunch of customers over the years, tons and tons of customers. The biggest one was the Slumber engagement, where I think it was 2.7 or 2.8 terabytes was the collection that we moved up to Azure DevOps. It was pretty ginormous. I think they became the third largest customer using Azure DevOps outside of Microsoft in the service. \n\nThat was a huge amount of work, but lots of smaller ones are much easier. I did one for a customer where we did it in about an hour. Their database was small enough; they were on the latest version; they had control of all the servers, the passwords, all the things. It was small enough package; we just sequenced it up, and then they looked at the result and went, \"Yep, that's good; let's go with that,\" and we turned off the on-prem version. \n\nI have personally done a whole bunch of migrations. I have a team that helps with that. We did one recently that was more complicated than it sounds. You're not just taking the Azure DevOps database and putting it in the cloud. Microsoft have to process it. You have to be on a version that's supported by that process, which is the absolute latest version and one service pack back. \n\nThis means that if you're sitting with a local Team Foundation Server and you're on TFS 2010, 2012, 2015, or whatever else was there, you have to upgrade it first, which means that you might need to upgrade SQL Server, you might need to upgrade the operating system, you might have to do all of those things. We did one recently for a customer that was TFS 2010, I think they were on 2010, all the way up to Azure DevOps. \n\nThere were three distinct migrations we had to do because you've got to upgrade from 2010 to 2015. Then you've got to go from 2015 to, I think you can get to the latest version from 2015 up to the latest version of TFS. Then you have to run and validate all the things that you need to do to go to the cloud. Then you can take your environment into the cloud, and that can go one of two ways. You can just take the database if it's small enough; if it's under 150 meg, you can just give them the database that pack, and it'll work. \n\nOtherwise, you have to set up an Azure environment; you have to install the SQL Server, upload data, and then get Microsoft to do stuff with it. That is the easiest, simplest, and most productionised route, but it's not what a lot of people can or want to do. Lots of companies have lots of circumstances that are outwith the bounds of that. They've got 100 teams, and only five teams want to go to the cloud. They've got other teams that can't for whatever reason, and that then adds complexity to that mix. \n\nThey've got teams that want to go just now and other teams that want to go later. Those are the most common ones for that push up into Azure DevOps. But also, you've got companies that sell products. If you've got five products in your company and one of those products is being sold, it's probably inside of the same TFS or Azure DevOps, and you want to move that piece over to somewhere else because you're selling it to somebody, and they're going to take the history and all of the stuff that goes along with it. \n\nMicrosoft provide no support for any of those scenarios. If you've got 50 projects and you want one, you've got projects across five collections, and you want one collection at one count. Or I've got, I don't know, I created one big massive project, and I really should have created two projects. These are things that are just not fundamentally supported by the tool or in any productionised way by Microsoft. \n\nWhat my tool that I created does is it allows you to migrate pieces of your whole thing to another location. We do our query-based, so it's predominantly focused on work items, although there's lots of other tools in there. It's like a Swiss Army knife, and people are adding new tools all the time. But the main tool that you use is work item migration because that's the thing that's just not out there. \n\nYou're basically saying, \"Here's a query; I want these work items, and I want them recreated over here,\" and the tool goes and recreates them. There are lots of limitations, lots of caveats, lots of things around that, but that's effectively the idea. I quite often get asked to help customers in a variety of different ways. Sometimes they want to do the migration if they've got loads of migrations to do. \n\nI've got people out there that have been using my tools for years, and it makes sense if you're going to use the tools. Big enterprise customers find quite often they need to move data from one place to another. They want to consolidate; they want to split, so they spin up a group of people, probably the administrators of Azure DevOps for their company, that they want to spin up on the tool and use the tool. \n\nI provide them with a bunch of support. Sometimes it's just support calls; sometimes it's training. They want to train some people on using the tool. But more often than not, with lots of organisations, it's a one-off thing. We're going here; we want this to happen, and we just want it to happen. We don't want to have to—we don't need that skill in-house. If it's not your core business, you're not doing it all the time, and you don't need it to support your core business, then that's when you outsource. \n\nI did a big migration recently of about 80,000 work items for a customer that wanted an audit trail. They've bought another company; they've not got their hands on all of that company's stuff yet. There's still all the legal stuff that has to happen in between, but they want a copy of all the work items and all the code so that their audit department can then go through all of that and validate and check and match things up. \n\nYes, this is the right thing, and all this is missing, and that's missing. I don't know what they're doing right, but they wanted that copy, so they don't want to mess around having their own people learn a tool and then do it, so we just did it for them. It probably took eight or nine days to migrate actual 24 hours running on it to migrate that number of work items because it's a lot. \n\nBut then after it's done, they have that copy in the new location, and they can do their own thing. Sometimes we do the migrations; sometimes we help support the migrations; sometimes we help train people, and sometimes we just consult. I quite often get calls from folks that just need some advice on how to do something in Azure DevOps. \n\nThese big infrastructure ideas that people have—the business decides they want to consolidate stuff, they want to split stuff, they want to move stuff around—like, what does that mean for us? What are our options? What are our capabilities? I quite often have discussions with customers on how that all goes together, and sometimes they use my services to help them, and sometimes they have enough information to go do it on their own, or it's easy enough that it's just following the docs from Microsoft. \n\nSo as both a user of Azure DevOps, which I have been for many years, although not so much anymore, I do a lot of my work in GitHub now. But as a user of Azure DevOps, I really appreciate the capabilities that it has. But then there are some gaps that you need somebody to fill, and sometimes you want to spin it up yourself, and sometimes you need to kind of get somebody in to help you out. So that's kind of my experience with Azure DevOps."
  },
  {
    "Title": "Is Your Project Ecosystem Truly Agile?",
    "Description": "Explains why true agility requires end-to-end automation and short feedback loops, not just Agile teams, to maximise value and efficiency for stakeholders in project delivery.",
    "ResourceId": "cGOa0rg_L-8",
    "Url": "https://www.youtube.com/watch?v=cGOa0rg_L-8",
    "Date": "2024-07-31T06:45:01Z",
    "Captions": "Is the full ecosystem of your project agile? If you've got agile programming teams followed by linear bureaucratic deployment, then that is absolutely a failure. You're probably not very agile. We need more automation to be able to ensure that we can go all the way from your team members creating content to them delivering it to the customers without having bureaucracy and blockages and time in between. We need to shorten those feedback loops and maximize the value that we get for your stakeholders."
  },
  {
    "Title": "Maximizing Transparency and Improvement in Software Engineering with Kanban",
    "Description": "Learn how Kanban boosts transparency in software engineering, helping teams visualise workflows, identify bottlenecks, and drive continuous improvement and delivery.",
    "ResourceId": "Psc6nDD7Q9g",
    "Url": "https://www.youtube.com/watch?v=Psc6nDD7Q9g",
    "Date": "2024-07-29T06:45:02Z",
    "Captions": "Gaining an understanding of your existing process, the system within which you're working, is absolutely crucial in software engineering. We have really high variance between what we think is going to happen and what actually happens. \n\nUsing Kanban, it allows you to observe your system, have metrics that help you understand your system, and visualisations that show your system. This enables you, as the team, as the people using the system, to understand the different things that are going on and look for patterns, places for improvement, and places that are awesome. \n\nIt also enables you to maximise transparency of the work that you're doing and increase your ability to change, right? Because now you have agreed what all those things are and set up continuous deliveries."
  },
  {
    "Title": "Empowering Teams to Tailor Their Processes: A Path to True Agility",
    "Description": "Explains why empowering teams to adapt their processes boosts agility, reduces waste, and fosters innovation, using real-world examples and practical steps for organisations.",
    "ResourceId": "5H9rOGhTB88",
    "Url": "https://www.youtube.com/watch?v=5H9rOGhTB88",
    "Date": "2024-07-26T06:45:00Z",
    "Captions": "Another key question to ask leadership about their way of working is if their teams are empowered to change their processes based on what they learn. This is one of those critical things that, in order for a group of people to work as effectively as possible, that doesn't mean they work like another team working on the same product or another team working on a different product. It means that every team, although we're going to perhaps follow some general guidelines about how we want to do business with our customer, perhaps that represents the cadence of delivery to our customer, we need teams to be empowered to change their process based on what they learn. \n\nBecause just because you've decided that something needs to be a certain way, doesn't mean that that adds value to this team. It might actually be waste for Team A while it is value for Team B. We need to recognize that we want to maximize the amount of value that teams are able to create, which means we need to minimize any waste. A great example of that is I used to work for an organization; I was an employee of Merl Lynch back in the day. Because they had a trading desk software within the body of their organization, there were certain processes that had to be in place for all software in the organization, even if it had nothing to do with this trading desk bit. \n\nSo the trading desk defined those processes, and everybody had to follow them. I was building a small CRM system for a group of about 20 sales folks who were making calls, calling people up selling the mortgages. What they wanted was a way to tapy interface, pop the call, running it on my desktop or my laptop, and I'm able to click, see the phone numbers, call them up, see notes, that kind of just a simple CRM system. In order to deliver that, I had a whole bunch of constraints that I had to work within. One was that I had to have the architecture signed off before I started, and any changes to the architecture needed to be signed off as well. \n\nSo if you think about it, as you're building the product, you can't go, \"Oh, actually that architecture I thought I was going to use is wrong; I need to do something different.\" It all has to go through an architectural change review board, right? Central environment, and it was very time-consuming. They didn't get back to you within a few days; they got back to you within a few weeks or a few months because they maybe only sat once over a period or they had a backlog of work. \n\nThat's one thing for a small system that doesn't have a lot of consequence or any consequence for the rest of the business and only affects a small number of people. That's a little bit of overkill. I also had to have all of the systems that I used, even though they weren't publicly facing, pent tested. So we had to pay an external company about $20,000 per pentest to pentest our system, even though it was internal and the data was of no consequence. It's not the trading desk system; it's a small data set for a small group of people. Yes, it has some PPI, but from a risk value factor, we probably could have done a lot less security overture and still provided on the compliance for the PPI external PPI compliance site. \n\nSo that was a bunch of waste that we couldn't change. When I had to deploy to an environment, I had to have three servers: front end, middle tier, back end. The database had to run on one server; I had to have a separate server for the middle tier, the API, so it had to have APIs that were available, and then the front end had to run on a separate machine. You had to have those three servers as part of that mix, so you had to pay for them. It worked out about $33,000 per month for those three. \n\nThen you had to have a dev environment, a test environment, a UAT environment, and a production environment. That was $3,000 per environment, and I had to have four environments for a little system that was just used by 20 people in a call centre. Total overkill, total waste for what it was. Those were processes that were imposed on us from the rest of the business. Even worse, we were doing continuous delivery, and in the organization, if you didn't submit a change request for a deployment of your product more than, I think it was, six weeks in advance, it was considered an emergency, and you got a black mark against your name. \n\nWe were doing daily continuous deliveries on a number of different products that we were creating, so we got a lot of black marks. In fact, we got the most black marks of any department. I think the combined black marks of every other department in the whole organization because we were doing continuous delivery, because we were starting to use modern engineering practices, we were punished within the organization because that's not the way we do things here. \n\nSo, are your teams empowered to change their processes based on what they learn so they can make everybody's lives better and maximize the value that you deliver to your customers? If your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then I probably wouldn't consider that you're already in the agile space. You're not already agile; you might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as \"yes, we do this; this is how things work here,\" then we're still lacking. \n\nWe're still trying; we're still working towards being agile. Now, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, \"Well, you guys suck; you're not agile because you're not doing this.\" That's not how we work towards success. \n\nBut I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organization. How many of these six questions are you able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being agile BS?"
  },
  {
    "Title": "The Synergy Between Product Management and Product Development in Agile Environments",
    "Description": "Explains how close collaboration between product management and product development in agile teams drives market value, innovation, and continuous product improvement.",
    "ResourceId": "YGBrayIqm7k",
    "Url": "https://www.youtube.com/watch?v=YGBrayIqm7k",
    "Date": "2024-07-25T06:45:02Z",
    "Captions": "When we're building products, there are really two main parts of the consideration that we have. We need to think about product management and we need to think about product development. So product management is deciding what we're going to go build. Product development is figuring out how we're going to go do that, and they need to be able to complement each other in a way that we're working together towards a successful working product. But product management leads the product development. The product management sets the direction, the strategy, the goals that we're trying to achieve, the high-level goals, strategic goals, and product development focuses on the actual delivery of those goals and delivery of those outcomes.\n\nNow, that doesn't mean that there's no product management in product development or there's no product development in product management. There's definitely a bleed over between those two topics. They're not a distinct thing that somebody hands over from here to here. They're an integrated story, and I think a good analogy for that is the evidence-based management story that helps, at least it helps me think about not only how they interact with each other, but how they complement each other and how they need each other. Product management and product development need to be successful and working together to be successful.\n\nSo the way evidence-based management breaks this down is you've got two sets of metrics at the top of the diagram, which is market value. So in the context of market value, that's where we're talking about product management. We're focusing on two things: we've got our current value in our product, the stuff that's there that maybe we need to maintain, maybe we need to remove, maybe we need to augment in some way. That's the features and capability that we have in our product right now, and all of those features and capability in our product right now should all work. That working usable product we have increments that work, and our current increment, our current product, is our current value. That's what we've currently got; that's part of our market value.\n\nIf you're not in a consumer-facing world, then think about the market that you deliver to as inside of your business. It doesn't necessarily have to be outside of your business; it doesn't have to be a commercial market. It could be an internal market inside your business. And then the other side of that is the unrealised value, and that's where I think a lot of product management maybe doesn't focus but should focus, in this unrealised value area, which is the stuff that our product could do that it doesn't do yet. The net new functionality that we want to bring in, the net new functionality that we want to bring into the story, is going after new markets, new users. We want more people to be using our product than were using it before because you're always going to have a decline in the people that use your product if the features remain stagnant. Even if you add new capabilities to an existing feature, there's still that tail-off that we're keeping our existing user base happy, and our existing user base is always going to juice over time if we don't do anything.\n\nWe might still be bringing in new customers, but the existing people are going to tail off. That's how I think about it. I think about it a lot like Netflix creating new content. If you have an existing show, the viewership for that show is going to decline over time. It's not new anymore; people that have watched it are not necessarily going to watch it again, although some people do, and it's going to decline over time. That's a little bit more drastic than a product that people use in a business, but the idea is that you're not gaining a lot of new customers. When you do a second season of an existing season, you know the viewership is going to be less in the second season. It's always less. But does it maintain high enough for you to justify the investment?\n\nWhat we really want to be doing is focusing as much as we can, while supporting and maintaining our existing investment in our product, in our story, in our existing customers. We also want to be aggressively going after new markets and new customers. That's product management leading. Where are we going? What are we trying to achieve? What's our direction? What's our strategy for building a more valuable product? Value creation; we're creating more value. That's that unrealised value, and those two together, unrealised value and current value, is that agile product management story that leads to market value. That's what we're measuring: market value.\n\nThe activity is product management, but then we've got the product development, which is supporting that story. Product development is our organisation's capability. That's our ability to deliver the things that we identify that need to be delivered and perhaps input to those things as well. Provide part of the feedback cycle; that's what I mean by the bleed over. Product development is going to have good ideas too that we might want to implement. But that's broken into two sets of metrics in product development. One is the ability to innovate. That's how much time can we spend on net new versus maintaining and supporting existence. That's how we're measuring that amount of time that we spend on net new.\n\nThen the other side of that, to balance it off, is time to market. How quickly can we go from an idea to getting it into production? So ability to innovate and time to market both talk about product quality, talk about engineering excellence. That's our agile product development. Product development is about building high-quality, usable, working products that are of value to somebody. That's just product development. Agile product development is just the newer practices in that story.\n\nSo we've got this product management leading, looking at the market, looking at the futures, looking at what customers are going to need in the future, what our stakeholders are going to need in the future, and trying to anticipate those needs by running lots of little experiments. Some of those experiments will be implemented by product development, so we can then get the results. Ultimately, delivering usable, working product enables us to maximise that value return because we're closing those feedback loops.\n\nSo we've got product management leading with strategy and direction and vision. Value and validation is product management's focus. In order to get that value and validation, we need to actually build something. We need to actually create something that we can then put in front of our users, our stakeholders, to then gather feedback and actually see whether it is actually valuable. Are they actually using it the way we expect? Is it actually changing the number the way we would like? And that's how agile product management leads but is supported by product development. Product development supports that story of collecting that data, that telemetry, that additional information that product management can use to figure out whether we are actually going in the right direction. Do we need to stay the course? Do we need to pivot? Or do we need to stop?"
  },
  {
    "Title": "Empowering Teams to Maximize Value and Return on Investment",
    "Description": "Explores how empowering Agile teams to adapt their processes boosts flexibility, continuous improvement, collaboration, and maximises value and return on investment.",
    "ResourceId": "rN1s7_iuklo",
    "Url": "https://www.youtube.com/watch?v=rN1s7_iuklo",
    "Date": "2024-07-24T06:45:04Z",
    "Captions": "Are teams empowered to change their process based on what they learn? If they're not, then they're probably not very agile. \n\nIn order to maximize the effectiveness of the teams that we have and in order to maximize the value of the work that they do, get our maximum return on investment. The people doing the work, the teams themselves, need to be able to change the way that they work to suit the nuance of the tools, practices, and techniques that are best suited to their context. \n\nTheir context might be different from another team that's even doing very similar work. Ensure that your teams are empowered to change their process so you can maximize the value and the return on investment for your stakeholders."
  },
  {
    "Title": "Why Limiting Work in Progress is Key to Success in Kanban",
    "Description": "Limiting work in progress in Kanban helps teams focus, spot bottlenecks, maintain quality, and deliver value efficiently by ensuring a sustainable, manageable workflow.",
    "ResourceId": "XFN4iXYLE3U",
    "Url": "https://www.youtube.com/watch?v=XFN4iXYLE3U",
    "Date": "2024-07-22T06:00:19Z",
    "Captions": "If you're doing Caman and you aren't limiting your work, guess what? You're not doing Caman. It is a crucial element to controlling your work in process, to understanding what's going on when in your system, and enabling you to see what's going on. Limiting work allows you to see when you have constraints in the system. \n\nUm, it enables you to allow people to focus on what's necessary to deliver the value, and it's really, really important to delivering high-quality, usable products because you have to maintain that flow of work through the system that's working at a sustainable pace. Limiting work in process is absolutely crucial to having a Caman board."
  },
  {
    "Title": "Empowering Agile Teams: The Critical Role of User Feedback in Requirement Changes",
    "Description": "Explains how empowering Agile teams to act on user feedback enables rapid requirement changes, improves product relevance, and overcomes barriers like rigid contracts.",
    "ResourceId": "xGuuZ5l6fCo",
    "Url": "https://www.youtube.com/watch?v=xGuuZ5l6fCo",
    "Date": "2024-07-19T06:45:03Z",
    "Captions": "Another question to ask leadership is, are teams empowered to change the requirements based on user feedback? So this is not just gathering the feedback; are you actually able to change the requirements for your product? And I don't mean like little things on your product backlog or little things that you want your product to do. What if you find out that a huge chunky thing is no longer viable or no longer what the business needs? Are you able to close that loop? Are you able to take that feedback and actually action it and make changes to the requirements?\n\nOne of the things that happens a lot, especially when you do sessions where you're engaging with the people who are going to be your users and you're asking them what they want, this is especially important for business systems but also for commercial, for B2B, but also for commercial. When I ask you what do you need in a system, the first thing you're going to think about is all the things that you need now. All of those things are too late; all of those things are stuff we should actually already have in the product. We should already be able to do because the delay in actually building it to get you to the point where you can use it is going to be quite tough. You're, you as the business, as the consumer of the product that you're asking for, you're perhaps losing money or you're perhaps losing time or you're losing something by not having this problem that's been identified solved.\n\nBut you're going to give me this big chunk of things that you need now, and then you're going to go away and think about what might my business need over the next whatever the delivery cycle is. So let's say we are going to deliver on a three-weekly cadence where we're definitely doing some amount of agile, but the business goes away and thinks about what's going to happen. This product's going to last us for the next few years, right? It's going to be in production for the next few years. What types of things do we think we might need to work towards in order to have that product support for that length of time? \n\nSo they're going to think about what's going to happen in the future in the business, what are the choices that are going to need to be made in the business, and they'll think about that big choice that's coming up. We're going to make a big choice in this business in, let's say, three months' time, and it could go A or B, right? I'm making it simple; it could be an octopus problem, right? But A or B. And if we need A, we've got 50 things we want, and if we need B, we've got another different 50 things we want. What happens when we get to that decision, and users are able to feedback to us that we've got to that decision? Are we able to remove half of those work items, the half that we don't need? \n\nWhat about if we've delivered some of those 50 work items that are going to be of value? We deliver, let's say, we deliver 15 of them, 15 things, and we get feedback from the users that, yeah, you're solving this problem just now. This business problem is resolved from our perspective. That other stuff that we put on your list, you've delivered the most valuable piece, and the rest is not as valuable. Can we go delete the rest of those requirements or at least deprioritise them or not do them? \n\nHow quickly can you close those feedback loops? Can you actually make those changes in the system? Quite often, I see teams talking to users. I see teams engaging and getting feedback and then not being able to do anything with it. They're not actually able to change the requirements because somebody else has locked them in, and we're not allowed to change them, or because we don't want them to change the system because perhaps there's a crazy contract in the way. We create a convoluted, complicated change requests system that's very expensive to follow to try and dissuade people from making changes. \n\nWe don't want those things; we want to be adapting to the needs of the customer that we're seeing. We're adapting to the market needs, and their market needs are changing constantly, which means our product and the things we think we're going to do in the product need to also change constantly. This means as well that if you do have contracts, you need to build into the story of the contract that these things are going to change constantly. \n\nMake sure that your teams are empowered to change the requirements based on user feedback. If your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then you would probably, I probably wouldn't consider that you're already in the agile space, right? You're not already agile. You might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as yes, we do this, this is how things work here, then we're still lacking. We're still trying; we're still working towards being agile.\n\nNow, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something within this high bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, well, you guys suck; you're not agile because you're not doing this. That's not how we work towards success. \n\nBut I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organisation and how many of these six questions you are able to achieve and what you could do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being agile BS."
  },
  {
    "Title": "The Evolution of Product Management in the Agile Era",
    "Description": "Explores how Agile transformed product management by enabling shorter release cycles, faster feedback, continuous delivery, and a stronger focus on built-in quality.",
    "ResourceId": "_FtFqnZHCjk",
    "Url": "https://www.youtube.com/watch?v=_FtFqnZHCjk",
    "Date": "2024-07-18T06:45:01Z",
    "Captions": "Agile product management differs from product management that has been done for many years in actually very subtle ways. So you could say it doesn't differ at all as well because all of the tools and techniques that you would use in product management and you have been using in product management for many years are the same tools that you would use in agile product management. But the way that you approach the context of the tools and which tools make more sense and which tools make less sense is the bit where it differs because we're changing the underlying principles of what it is we're trying to achieve.\n\nSo in the traditional world, we're probably going quite a long time between actual releases, at least to get the first release. And then between releases, we're probably taking a long time. I'm thinking about the Azure DevOps team at Microsoft when it was Team Foundation Server and Visual Studio, right? That era around the 2010 era, they were on a two-year cycle, right? So they were delivering a new version of the product every two years. Halfway, they would do a service pack, and then halfway into, roughly about the same time, I guess it was roughly about the same time, they would have a beta of the next version of the product.\n\nWhat really happened was that when you're thinking about product management, you're thinking about how do we make a product that maximises the value for our business, right? That makes the most money. That's what we're talking about with product management. We have a product, we need to manage what we put into that product, what we take out of that product, how we ship that product, how we market that product in order to maximise the return on investment. That's ultimately what we're talking about.\n\nIn that world of releasing long releases, right, long time between releases, they found that they really struggled to maximise that value for a number of reasons. It just took too long to advertise the value that they thought their customer wanted. So the first one is you have to build the whole thing, right? You have to, if a customer wants XYZ feature, you have to build XYZ feature because when you ship XYZ feature, you're not technically shipping again for two years. So if there's something wrong with XYZ feature or XYZ feature doesn't have some capability, right, then the customer is going to be frustrated and may go to another product, right? May go to your competitor because they do have that feature.\n\nSo that idea of shipping once every two years actually means that you can't take feedback and get it in front of your customers for four years. Generally, there may be circumstances where you can change what you're working on, but then it becomes a big issue, right? Because you've planned all of this stuff over two years, and somebody makes a change to what it is they want to deliver. What is the impact across all of the things that you're working on? So that's why we have change requests, right? We make a complicated, convoluted change request policy system in order to reduce the change coming in because change coming in is high cost because we have to change all of the things that are going on in order to accommodate that change.\n\nSo you've got this long cycle. I mentioned that it was twice the iteration length to incorporate feedback from your customer quite often. And the reason for that is that you get your product in front of your customer at this point, and then in two years, we're going to do another ship. But we've already had to plan what we're going to put into that two years, right? So when we get feedback on version one of our product, that's going to end up in version three of our product if it's small enough or important enough. It might end up in version two, but we'll have to kick something out that we were going to deliver. So that's risk, right? Because we're not delivering something that we think the market needs.\n\nWe end up with that twice the cadence, right? Twice our cadence is the amount of time it generally takes to get new features and feedback that the market desires. So what's the cost of delay? What's the cost to our customer of not delivering a feature that they need in order to service their business? And we're not going to deliver it to them for up to four years, probably a little bit less, but up to four years. That is a massive impact on not only your customer's ability to innovate and do things differently or fulfil their needs, but on your team and the people doing the work's ability to see the value that they create being used by the customers because the delay is just too long. They're not working on that feature anymore by the time the customer gets it.\n\nSo one of the fundamental premises that we talk about in agile product management, the agile piece versus the just product management piece, is that we're going to have much shorter cycles, much radically shorter cycles. For example, the Azure DevOps team went almost overnight, some false starts, but almost overnight from a two-year delivery cycle down to a three-week delivery cycle. So delivering to production every three weeks, delivering to real users out in the world every three weeks. And that enabled them to get closer to the customer, right? So even if we still had that same twice the iteration length, you're talking six weeks to get something new in front of your customer that they need or tell you that they need. And six weeks is much shorter than two years, four years, right? Up to four years.\n\nSo up to six weeks instead of up to four years. And that fundamental change means that a lot of the practices that you might use in product management then become a little bit irrelevant, right? So I'm thinking practices that become irrelevant would be change requests, right? They pretty much become irrelevant because change requests were there to protect the plan and protect the investment in the plan. But since our plan is now only three weeks, we don't need to protect it so much because the risk of something derailing that plan is much smaller, right? Because we can correct much more often, so we don't need that change request system.\n\nWe would look at portfolio investment, like how much time are we investing in different features, different parts of the product, or do we want to move people? And we can move people in a three-week cadence rather than on a two-yearly cadence. But then we're also, because we're delivering more frequently, we're able to then remove other things, right? That are going to get in the way of delivering more frequently. Can you imagine having to do UAT for your entire product every three weeks? Right? UAT doesn't make sense. User acceptance testing doesn't make sense.\n\nThere's a famous quote from Brian Harry. I love that presentation of his that he did, and he had a picture of the slippers from the red glittery slippers from Wizard of Oz, and it was like there's no place like production. No matter how much testing you do, no matter how much validation you do, you're always going to find production issues. And that's where UAT came in, right? UAT was trying to protect production from issues introduced by the engineering teams. But if the engineering teams are delivering new versions of the product every three weeks, where's the time to do that UAT?\n\nSo one of the things we need to fix, one of the agile practices we need to bring in, is much higher quality product, much higher quality code, much higher quality engineering in order to not have those issues in UAT. Your UAT should be a cost centre anyway. It should not be a value centre. If UAT finds something that shows a failure of quality in the engineering system, UAT should never ever find anything. So if you build up quality to the point where UAT is a cost centre, not a value centre, then the people that fund the UAT, that desire the UAT because they find stuff, will start to erode that because you're demonstrating the quality of your product. You're demonstrating that that UAT is unnecessary because it never finds a problem.\n\nSo you have to apply that thinking to all of the practices that we have in product management. Do they make sense in agile product management versus the way we always used to do things, right? So can we do it quickly? Is it getting in the way of actually getting our product in front of users? Because that's how we validate that we've built something that's valuable. How do we enable that continuous delivery of high-quality, usable product into the hands of our users? And what of our practices that we use right now in product management make sense in that space and which don't make sense, right? And they maybe don't make sense because they become irrelevant or they don't make sense because they take too long. And what are we going to replace them with in order to effectively maximise the ROI of our product in the market?"
  },
  {
    "Title": "Are Your Teams Empowered to Change Requirements Based on User Feedback? If Not, You’re Probably Not Very Agile",
    "Description": "Empowering teams to adapt requirements based on user feedback is key to true agility. Learn why backlog updates and team engagement drive better, user-focused products.",
    "ResourceId": "qRHzl4PieKA",
    "Url": "https://www.youtube.com/watch?v=qRHzl4PieKA",
    "Date": "2024-07-17T06:45:01Z",
    "Captions": "Are teams empowered to change the requirements based on user feedback? If not, then you're probably not very agile. We need to be engaging with the people that are building the product, and as we understand the work better, as we understand different ways to do things, as we gain more knowledge and context about the product and the market and what it is we're trying to achieve, we need to be able to update the backlog, update the requirements, change them, delete them as well. If we're not doing that, then we're not going to be able to maximize the value that we deliver to our customers. The people doing the work, the people creating the product, are really important to that story, and their input is just as important as the stakeholders. Are you maximizing the value that you deliver to your customers?"
  },
  {
    "Title": "Does Your Team Truly Understand Your Product Vision and Goals?",
    "Description": "Ensuring every team member understands and connects their daily work to the product vision and strategic goals is key to true Agile alignment, collaboration, and value delivery.",
    "ResourceId": "CPYTApf0Ibs",
    "Url": "https://www.youtube.com/watch?v=CPYTApf0Ibs",
    "Date": "2024-07-12T06:45:00Z",
    "Captions": "The second question that we should be asking leadership of organisations is, is there a product vision that lays out the strategic goals? And do all members of the team, all people doing work inside of our organisation, understand both of those things? And are they able to see how the work they do every day contributes to both of them? This is really lacking in organisations. It's probably more lacking than creating usable working product. Most organisations that I've worked with, even if they do have a clear product vision for their product and strategic goals for their business, it's not well communicated to the people in the organisation.\n\nA key test for this is to go to folks in your organisation and ask them what the strategic goal is, what's the vision for the product, what are the strategic goals for the business, what's the strategic goals for the product? And if they aren't able to articulate it, then it doesn't exist in your organisation. It might exist on paper, but if people aren't able to internalise it and articulate it, then they don't understand it and it's not there.\n\nThe second part of that is even more powerful, and that's that the people doing the work need to understand how the things that they're doing every day contribute to those overall vision and goals. Because the doers in your organisation and management and everybody in your organisation are making lots of little micro decisions within the context that they understand of what it is we're trying to do. They're going to make continuous micro decisions. Software engineers are going to make decisions about what architecture to choose, about ways to build things, and they might talk to each other or they might talk to nobody when they make that little decision. Because it's a little micro decision, in order to get somebody to help you with that decision, you need to impart the context.\n\nQuite often, other people don't understand the context because what you're talking about is incredibly technical. It could be coding technical, it could be testing technical, it could be marketing technical. They can't just go ask a boss, ask a leader, ask somebody senior in the organisation because they don't understand the context. The only way to enable those people, because they're going to make the decision anyway, is for them to understand what it is you're trying to achieve, where it is we're going as a business, what are we trying to do with our product, where do we think it's going. That will enable them to make more of the right decisions and less of the wrong ones.\n\nThis is how we maximise the amount of work not done, how we maximise the value that we deliver to our customers. Because the people that are doing the work, if they're not connected to that goal and vision and what it is we're trying to achieve, how do they value what it is they're doing? Are they just turning up for their day job and they're punching, you know, like a machine punching cards? At the end of your day, do you go home? Or do you feel for the customer? Do you understand the wants and needs for the customer of the business, of what it is we're trying to achieve?\n\nPart of that is creating camaraderie, creating this story of, are we as a group all working together towards a common goal? Or are we potentially working against each other because we all have our own idea of what our common goal and vision is, and we're all doing our own thing and perhaps pulling each other in different directions within our business? So do you have that alignment so that we can share knowledge, share decisions, so that even decisions that we make on our own are working towards a common outcome? That's the very definition of team, right? A group of people working together towards a common goal.\n\nSo you need to have clear product vision and strategic goals, and you need to ensure that everybody that's working on your product understands the vision and the strategic goals, and also how the work that they're doing every day contributes to that. So how can you help them make those connections? If your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then you would probably, I probably wouldn't consider that you're already in the agile space, right? You're not already agile. You might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as yes, we do this, this is how things work here, then we're still lacking. We're still trying. We're still working towards being agile.\n\nNow, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, well, you guys suck, you're not agile because you're not doing this. That's not how we work towards success. But I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organisation and how many of these six questions you are able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work to work towards this idea of not being agile BS."
  },
  {
    "Title": "The Fallacy of Equating Agility with Speed: What Agile Really Means",
    "Description": "Explains why Agile is not about speed but about prioritising valuable work, adapting to feedback, and avoiding wasted effort to deliver products that truly meet user needs.",
    "ResourceId": "b3HFBlCcomk",
    "Url": "https://www.youtube.com/watch?v=b3HFBlCcomk",
    "Date": "2024-07-11T06:45:01Z",
    "Captions": "There's an idea out there: the agility equals speed. I think this is in the same category as agile project manager, right? It's an oxymoron; it doesn't exist. It's not a thing. That's not what agility is about. Agility is about spending your time well. That's probably a bit... I think that's a good way to describe it. Probably spending your time well. The time we do spend is on valuable endeavours. We spend less time doing the wrong thing and more time doing the right thing. That's the idea that we're trying to achieve. But in order to find the right thing, we've got to try ten things to find the three things that work, right? \n\nSo the idea that agility is about speed is a complete fallacy because we might have to do nine things before we find the one thing that works. So if each of those things took two weeks, that's twenty weeks. And we did one thing. Well, why don't we just decide what those ten things are up front, look at them, and go, \"Let's do that one. Let's do number five and just do that one thing, and then we're done. We've built a product.\" \n\nWell, is that the right product? Does it have market fit? Are people going to buy it? Is it even the right feature? Does it actually provide value to the customers? We don't know any of those things. We could have just built the wrong thing. Lots of organisations fail because of assumptions. They fail because they think they're building the thing that they want, but they're not. They're not building the thing that the customer wants. \n\nMy favourite example was... I use this one a lot. Sorry, that they've been bought, so now the product sucks. But I was an average user of a product called Zoom AI, right? So this was an awesome product, and what it allowed you to do was multiple things. It was basically a calendaring tool, right? One of those calendaring tools, but its unique focus was on a kind of bot-based calendaring tool. So you could have a bot. I use Teams, so I had a bot in Teams that I could just go message and say, \"I want to meet with Simon at four on Friday. Go organise that.\" \n\nAnd it would email Simon and say, \"Simon, Mar wants to meet at four Fridays. Does this work for you? Yes or no? Would you like to pick some times that you and Martin have available?\" Okay, pick some times, and then it comes back. And that was that story. So it was a bot-based interactive. It was maybe a bit early, right? Probably the versions coming now with AI are going to make this a lot more effective, but it worked. \n\nAnd almost all of the other customers found that they didn't really use it that way. What they used it was as a calendaring tool: send people a link. \"Here's how... here's my free time. Go book a slot,\" because it was just easier, right? You didn't even have to write a message to someone; you just sent them the link. \n\nSo while they were Zoom AI and this AI story, they actually very much ended up just changing the whole company ethos and focus from that to Calendar Hero. And they were just another calendaring tool, but a very good one. They've been bought by somebody else now, and everything has gone crap. But, you know, you're really good; somebody comes and buys you, and then they absorb you and eat you, and now you're no longer good. \n\nBut that idea of completely changing not only your business, your focus, your company name is around why is your market fit? And what a lot of big organisations fail to realise is that their market changes. It's not that they fail to realise it; it's that they don't understand how to take advantage of it because they build up rust, right, in all of the bureaucracy that builds up around the organisation. We shouldn't have a lot of bureaucracy. If you have a lot of bureaucracy in your organisation, you're doing it wrong, right? That's all. You're not able to respond to market changes quickly enough if you have a lot of bureaucracy. \n\nLocal optimisations, right? So this comes back to that idea of agility is not equal to speed. The purpose of agility is not to go faster. If you think you're going to do Agile to make you go faster, you're wrong. It's not going to work that way. If you have three hundred things to do, it's going to take three hundred things' worth of time to do, whether you do Agile, waterfall, whatever. You've got three hundred things to do. \n\nThe way Agile makes it seem like you're going faster is maybe you don't need three hundred things; maybe you only need one hundred things. That's how it might seem like it's faster because we do one hundred things, and we're done, right? Think of the Sentinel project, right? That's the big famous one. That was the US FBI records-keeping system. In 1995, a brand new system was delivered. It was green screen with terminals, right? We all had Windows 95 at that point, and they realised it was obsolete the moment they shipped it. \n\nSo they started working on the new version, Project Sentinel, right? And they had money from Congress—so $400 million. And I can't remember the company; it might have been Lockheed Martin that was building it. And they spent four years, $400 million, and at the end of that, they didn't have a working product. No working product. So they had to go to Congress, get more money—$300 million, five years spent, $300 million, another five years, no working product, right? Not very fast. \n\nGot to, I don't know, 2012. They'd been going for nearly ten years. This project had been going for nearly ten years, maybe 2005. Anyway, nearly ten years, and they decided to quit the whole thing. They took the best people out of the group that they had building it. They hired them. The FBI physically hired the people, set up scrum teams in the basement of the Hoover building. So they had about forty people, went from four hundred people to forty people, and they delivered to production within a year. \n\nSo you could say that they went faster, but they didn't go faster. They just didn't try and build the whole thing. They just built the first piece, right? They got to production within a year. That's the speed that we're talking about. We're not actually talking about delivering what you thought you were going to get faster. You're going to get a better product in the same amount of time. \n\nSo the best way to think about it is if we have a... let's say it costs $10,000 per sprint. We've got $100,000; we can do ten sprints. We can do five things per sprint. Do we just do these fifty things we decide up front, or do we figure out as we go which fifty things are the best fifty things to build? We've still spent exactly the same amount of time, but we have a better fifty things that we've delivered. We've got fifty of the right things than just the fifty things we thought we needed at the start. And that's why Agile is not about speed."
  },
  {
    "Title": "Turning User Feedback into Actionable Work: A Guide to Maximizing Product Value",
    "Description": "Learn how to quickly turn user feedback into actionable work items in Agile teams, improving product value through fast feedback loops, prioritisation, and continuous improvement.",
    "ResourceId": "OZt-5iszx-I",
    "Url": "https://www.youtube.com/watch?v=OZt-5iszx-I",
    "Date": "2024-07-10T06:45:01Z",
    "Captions": "Is feedback from users turned into concrete work items for teams on timelines shorter than one month? We need to engage with our users. We need to take the feedback that they give us and turn it into something that we can actually action in a very short period of time. If we don't, then we're probably not very agile. \n\nHow long does it take for you to get feedback from your customers into your backlog, changing those work items that you're delivering so that you can deliver something else, something better, or more of the same? Maximise the value that you deliver in your product by collecting feedback from your users and doing something with it."
  },
  {
    "Title": "Mastering Your Kanban Board: A Practical Guide to Visualising Workflows for Maximum Efficiency",
    "Description": "Learn how to design and customise Kanban boards to visualise workflows, identify bottlenecks, and boost team efficiency through clear, practical process mapping.",
    "ResourceId": "E2aYkadJJok",
    "Url": "https://www.youtube.com/watch?v=E2aYkadJJok",
    "Date": "2024-07-08T06:00:07Z",
    "Captions": "Really important part of visualising your work when you're doing Kanban is having some kind of Kanban board. Okay, you want to take the way your system currently operates. You want to think about the things that move across your board, things that will move through your system, and then decide what are the columns that need to move through.\n\nNow, the absolutely most optimal way to do that would be single piece flow: one item at a time to do, in progress, and done. But the reality is we don't all live in that perfect world; in fact, none of us do. So you're going to have to look at how your work flows through your system. What are the columns that you currently have on your board with the stages of the work? And come up with a board that represents that."
  },
  {
    "Title": "Why Cost-Cutting During Recessions Is Counterproductive",
    "Description": "Cutting costs during recessions can harm long-term business success. Investing in people, agility, and continuous improvement builds resilience and drives future growth.",
    "ResourceId": "wiEH7vsfrSE",
    "Url": "https://www.youtube.com/watch?v=wiEH7vsfrSE",
    "Date": "2024-07-04T06:45:04Z",
    "Captions": "I always find it interesting when in a recession or potential recession or market instability, right? Whatever your story is in your country, we talk about this idea of cost cutting and organisations divesting themselves of things they believe is waste. Like we've seen Capital One get rid of a lot of agile coaches and scrum masters, and even though they didn't really, because they're still hiring agile coaches and scrum masters, lots of other organisations have kind of done a lot of those cost cutting measures. \n\nActually, they're shooting themselves in the foot. They're absolutely shooting themselves in the foot. They're disadvantaging themselves in the face of other organisations that don't do that, that do it differently. Probably the best analogy I remember, I have done a little bit of marketing in the distant past or remember from university at least, is that the best time to invest in marketing is when sales are down and the economy is not so great. \n\nBecause the benefits that you reach on the other end are the payday, right? You have to put in the investment, put in the time when everything's booming and everything's going on. You don't need a lot of marketing to do the business that you want to do. When everything sucks, you need to do more to get what's there, right? Because everything sucks and there's not enough to go around. \n\nSo those that invest in sales and marketing during a recession are the ones that are more likely to be successful coming at the other end. The same is true for agile and let's call it business agility rather than the big A word, whatever we want to call it. I want businesses to be able to effectively take advantage of market opportunities when they arise, right? \n\nAll businesses exist in a volatile market. There are very few non-volatile markets. Today, there are very few non-volatile markets. Maybe diamonds, I don't know, that's maybe a non-volatile market. I don't know much about it, but it feels non-volatile. But all of the markets that we're all going to exist in, if you're building software and products, I have a good example in oil. \n\nOil and gas, if you're in that volatile market, when things start to suck, that's the time you should be investing in your efficiency, your productivity, and your effectiveness, right? Those are the times when you should be investing in those things. Because part of it is you get a little bit of breathing room, right? Because if there's not a lot going on in the market, like the market starting to stagnate a little bit, then you've not got that clamouring for new features, and it gives you time to get your house in order, to reorganise, re-evaluate what's going on. \n\nBut we tend to focus purely on the numbers, right? Because a lot of organisations have shareholders, and shareholders want their cash. So we can either not pay the shareholders this quarter and reinvest in our company and our people and our organisation, or we can fire 500 people and give the shareholders this higher yield than they were expecting, right? And lots of organisations opt for that second one, and that is shooting yourself in the foot. \n\nThat is revenue extraction over value creation. We want to be focusing on value creation because long-term value creation is what builds an effective business. It's how your business was built in the first place. So we want to be focusing during a recession on effectiveness, productivity, and all those lovely goodies. \n\nSo in the boom times, we tried all the things, right? Anything that came along, \"Oh, we've got cash for it, let's do that.\" \"Oh, we've got cash for this, let's do that,\" right? Because we've got a lot of cash. We're affluent. When we start moving into the opposite of boom, bust, I guess, when that bubble pops or deflates, right? It could just be deflating a little bit. \n\nThen we need to focus on our own effectiveness. If we can become more effective, we can do more with what we've got, and that means that we'll be the ones in the market innovating and adapting to the changing market more effectively. Does that make sense? If we start firing lots of people, we're going to have an unhappy workforce because people are unhappy when their friends get fired or other people in the company because they get scared. \n\nThen there's fear, and they don't want to do stuff, and they're like, \"Holy crap, what's going on?\" So unhappy, afraid people don't do good work. By having those layoffs within your organisation, you've created a culture of fear, maybe unwittingly, and maybe some of it's necessary, right? But you've created that culture of fear, and the people that are in there are not going to be serving the customers' needs as well because they're fearful. \n\nSo then customers are more unhappy with what it is that you're doing, and you get that vicious cycle. Lots of organisations end up in a death spiral at that point, and you just know they're going to disappear. It can be quite difficult to recover from some of those things. \n\nSo what we do when the bubble starts deflating is we start focusing on our effectiveness. How do we ensure that we're able to maximise the amount we're able to deliver? If you think of this, this is my market line, right? Above the line is the market, and then the people that are doing the work are here, and all the way down here is the CEO, who's not really connecting with the market, right? \n\nThe market, the people in your organisation are connected directly to the market. They're the ones that we want to have as effective as possible and dynamically shifting to whatever market opportunities come up. Because the more opportunities we're able to take advantage of within that market space, even in a recession, the less impact it's going to have on our overall business, especially if we're doing lots of small experiments, which can be risky. \n\nBut also, without risk, you don't get the bonus, right? If we're able to adapt to those changing needs as much as possible, as quickly as possible, then we, as a business, are more likely to survive. We're just more likely to survive if we're able to adapt to those changing market needs. \n\nI want to quote Satya Nadella here. I have a little quote up here: \"There cannot be a more important thing for an engineer, for a product team, than to work on the systems that drive our productivity.\" So I would any day of the week trade off features for our own productivity. I want our best engineers to work on our engineering systems so that later on we can come back and build all of the new concepts we want. \n\nThat is the epitome of this idea, right? Although from an engineering perspective, because Satya has an engineering background, right? If we, as a business, have slicker, more effective processes, minimised processes, right? You want to have systems in your business that are based on principles, not rules. \n\nIf you have rules, everybody will follow them, and they don't need to think. If they don't need to think when a market opportunity comes along, they follow the rule, not the market, right? Because they're not thinking. They need to follow the rule. But if we have a system based on principles, then the people within it need to think. \n\nWithin the bounds of those principles, they take advantage of market opportunities as they arise or other opportunities or different ways of doing things in order to be successful. So this idea of boom and bust, of non-recession and recession, is when things are going badly, the thing you want to be investing in is your people and your organisation and your practices and processes and making things more effective. \n\nMore effective is really important. A lot of people in business talk about productivity, and productivity is important, but I think effectiveness is that nuanced version of the word productivity. Because we could be highly productive, we're delivering lots of stuff, but are we delivering the right stuff, right? \n\nI know that this is basically me nitpicking the word, right? But effectiveness includes, are we building enough of the right stuff? These are the types of things that we need to invest in. That doesn't mean that you have to go and invest hundreds of thousands in scrum training or Kanban training or coaches or scrum masters or any of those things. \n\nYou want to figure out for your business in your market, right? Because remember, you were in that volatile market. What help and support do the people that are interacting with the market need in order to become more effective? Now, sometimes that is going to be training, right? Do they understand the theory and principles behind this? \n\nWe think this might help those teams. Let's train them in this. We're not going to make them do that, right? For example, let's take scrum as an example. We're not going to make them do scrum. We want the people that are doing the work, that are engaging with the volatile markets, to choose to be able to choose the best approach based on the principles that we base our organisation on. \n\nSo in order for them to choose the best approach, best within the context, right? Most effective within the context, they need to have the knowledge and skills and understanding necessary to be able to make those decisions. So this is where actually you also don't go and hire one of the big consulting companies to come in and do it for you, right? \n\nYou could hire a Boston Consulting Group or McKinsey to come in and say, \"This is how you're going to do everything.\" But the people in the system didn't learn. The way humans learn is by doing. We learn more by doing than by just talking about it. So in order to learn what works and what doesn't and how much it works and how much it doesn't, we need to actually do and try the things. \n\nSo you need the people within your system, right? That's the people that work for you in your company. This is your people. They need to be the ones that do the work. They need to be the ones that learn, that become the practitioners that understand those processes, practices, tools, principles, theories, right? \n\nSo the theory of constraints, you might be talking about scrum theory, you might be talking about first principles for all of these things. They need to be the ones that understand it so that they're able, within any context, to make the best decision possible, right? To make the best choices possible within the system of principles that we build around our organisational structure. \n\nThat means that you're probably going to be doing a lot of training. You're probably going to be bringing in experts on specific topics to help engage with people inside the organisation. But generally, you probably don't want to be doing that wholesale, right? Because what's right for one part of the organisation might not be right for another part of the organisation. \n\nSo what I think is an effective way is to let the people that are doing the work decide who and what they need. I work with a company in Spain. There are kind of two sister companies that are kind of the same but different. They give every single one of their employees a budget for training and consulting, right? \n\nSo every employee, I can't remember how much it was, let's say it's €5,000. Every employee has €5,000. So if you've got a team of five people, that's €25,000 to spend on training and consulting. It's their budget. They can spend it how they like. They can get together and bring in some kind of coach. They can get together and bring in maybe they want a scrum master for a little while or somebody specific, right? \n\nLike you want somebody who focuses on sprint goals and value, and there's people out there that focus on engineering practices and DevOps, right? So you could bring in an expert for a period of time to participate with the team, and it comes out of their budget. They're the ones making the decision, and that means that because they're making the decision, they care about what that person they've chosen to bring in has to say. \n\nThis is the whole thing of other people don't care about your goals, right? They care about their goals. So the way you enable more effective organisations is either you make their goals your goals, or they make your goals their goals, right? So we all have to be going in the same direction. What is it we're trying to do? \n\nPrinciples and goals, strategic goals, intermediate strategic goals, those are the things that help us move together in the same direction as a distinct company. When we put all of that together, we're then able to be more effective. We're able to deliver more value. We're able to adapt as needed to the changing circumstances, right? \n\nSo as a team or group inside of your organisation decides they need some help with something, they can just bring that help in. It's not hard. There's not a bunch of procurement hoops, none of that crap, right? That just gets in the way. They're able to just bring in those people, get them to help them with that story, make it a little bit better. \n\nWhat's the next problem we've got, right? We need this other person to come in and help with this little bit, make them a little bit awesome, right? What's next? We maybe don't know what's next. Maybe we bring in a generic expert who's able to say, \"Oh, maybe you should try this, this, and this.\" \"Oh, that's a good idea, let's try that.\" \n\nThey're able to do all of those experiments, build that story of effectiveness that works best for them, and each area within your organisation is able to do that. Concentric circles, all interacting with the market. \n\nSo ultimately, it doesn't matter whether you're in boom or bust. This is how you want to focus on maximising your chances of weathering that storm. All markets deal in surprise. It doesn't matter what markets you're in, there are going to be surprises. A recession is just another type of surprise. How effective is your organisation at dealing with those surprises?"
  },
  {
    "Title": "Empowering Agile Teams: Why Understanding Product Vision is Key to Success",
    "Description": "Explains why agile teams need a clear understanding of product vision and strategic goals to boost alignment, ownership, decision-making, and adaptability.",
    "ResourceId": "2tlzlsgovy0",
    "Url": "https://www.youtube.com/watch?v=2tlzlsgovy0",
    "Date": "2024-07-03T06:45:00Z",
    "Captions": "Is there a product vision that lays out the strategic goals? Do all members of the team understand both, and are they able to see how the work that they do every day contributes to your goals and strategic objectives? If you don't have that story, if you speak to the team and you ask them what the vision is, what the strategic goals are, and they need to go look something up, then they don't fundamentally understand them. They don't understand how their work contributes, which means that we're probably not being very agile. \n\nWe need to push responsibility down the organisation. We need the people that are making the tight technical decisions every day to have the most context so they can make the best decisions possible to maximise the value that you get in your product."
  },
  {
    "Title": "Mastering Kanban: A Simple Guide to Its Core Principles",
    "Description": "Learn the three core Kanban principles—visualising workflow, actively managing tasks, and continuous improvement—to boost team efficiency, transparency, and collaboration.",
    "ResourceId": "nfTAYRLAaYI",
    "Url": "https://www.youtube.com/watch?v=nfTAYRLAaYI",
    "Date": "2024-07-01T07:00:24Z",
    "Captions": "There are three core principles of Caman. To keep it really simple, there's defining and visualising your workflow. That's like creating your rule book as a team. How are you going to function? What does your system look like? Right, so defining and visualising a workflow.\n\nThe second core principle is to actively manage the items in the workflow. So now that you can see them, you can see what's going on. You have a visualisation; you're going to actively take action. So you're not just going to passively look at it; actively take action.\n\nAnd then the third principle is improving your workflow. You want to make changes to the workflow in order to make things a little bit better, to make things flow better through your system."
  },
  {
    "Title": "Detecting Agile BS: Lessons from the US Department of Defense",
    "Description": "Learn how to spot fake Agile practices using six key questions from the US Department of Defense, and discover steps to assess and improve true Agile maturity in organisations.",
    "ResourceId": "O6rYL3EDUxM",
    "Url": "https://www.youtube.com/watch?v=O6rYL3EDUxM",
    "Date": "2024-06-28T06:45:01Z",
    "Captions": "One of the really interesting articles that I've seen in the last few years has been from a little organization that you might have heard of called the US Department of Defense. They released an article called the DIB guide to detecting Agile BS. This was sent out to all of their procurement officers worldwide so that they could tell whether the vendors that they were hiring, because they're the procurement officers, were actually Agile or were just making it up. \n\nBecause one of the problems that they ran into was right at the start, they realized that when they switched over to Agile procurement terms back in 2013, the US Department of Defense updated their main procurement terms to require iterative and incremental delivery of any product or system. When they moved to that model, their vendors just all immediately declared themselves to be Agile. The next day, \"Oh yeah, we're Agile, we do it in an Agile way.\" But most of them were lying. \n\nSomething that I found working with organizations, and I'm going to use the word that's quite dramatic, most organizations that say they're doing Agile are also lying. I've been dramatic, but they kind of are. The detecting Agile BS article came up with a whole bunch of questions. It's totally worth going reading it, but there are six main questions which I think are the most important pieces of the story. \n\nThis was the questions to leadership within the organization, so I'd like you to think about these questions from your perspective within your organization. If you asked your leadership if this is true across the board in your organization, is it true? \n\nSo there are six questions. The first one is: Are teams delivering working software to at least some subset of users every iteration, including the first, and gathering feedback? Think about that. Every single iteration, you should be delivering working product to real users, not UAT, not a test environment, real production users every iteration, including the first. \n\nNow that's really hard. Lots of teams struggle with creating working product, with getting that working product out the door, and even more like gathering feedback. That's almost as rare as delivering working product. So what this is effectively saying is that if you as a team or you're part of the organization is unable to deliver working software to production on a regular cadence, you're probably not being very Agile. \n\nIdeally, you want to be delivering on a very regular cadence. The Agile Manifesto would talk about from a couple of weeks to a couple of months, I think is the phrasing it uses, with a preference to the shorter time scale. So you probably shouldn't go two months without shipping to production. \n\nFor the Scrum Guide, it talks about no more than every 30 days, so it puts a hard one month figure on that 30 days. That can be difficult for organizations. There are lots of organizations out there that have made this change. No organization that has made this change towards continuous delivery to production has gone back and decided not to do it anymore. \n\nOnce you get there, the level of quality that you need in your product, the engagement you get with your customers, these are all things that are much, much, much higher once you get there, and nobody wants to go back. But getting there is difficult. It takes time, investment in skills for your engineering teams, in skills for leadership, in changes to your business practices to make that in any way viable. \n\nBut it is absolutely worth it, and even the US Department of Defense requires that their vendors are able to deliver working software to real users every iteration, including the first. If your answer to any one of these questions, or the answer of your business to any one of these questions is no, we're not doing that, then you would probably, I probably wouldn't consider that you're already in the Agile space. \n\nYou're not already Agile. You might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as yes, we do this, this is how things work here, then we're still lacking. We're still trying. We're still working towards being Agile. \n\nNow this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, \"Well, you guys suck, you're not Agile because you're not doing this.\" \n\nThat's not how we work towards success. But I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organization. How many of these six questions are you able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being Agile BS?"
  },
  {
    "Title": "The Power of Technical Excellence in Agile Development",
    "Description": "Explores how technical excellence in Agile development reduces risk, prevents technical debt, and boosts product quality and delivery speed through strong engineering standards.",
    "ResourceId": "JTYCRehkN5U",
    "Url": "https://www.youtube.com/watch?v=JTYCRehkN5U",
    "Date": "2024-06-27T06:45:00Z",
    "Captions": "Technical excellence is one of the most important concepts when you're building products. Scrum talks about this in that you should always have a usable working product at the end of every iteration. Agile talks about this. The idea is that in order to mitigate risk, we need to create a usable working product.\n\nIn the more linear model, where we know lots of stuff up front, let's say we were going to build 300 houses on a construction site. We know a lot up front; we know exactly what designs of the houses we're going to have. We've probably had to get planning permission, right? So a lot of that is locked in for what it is we're going to do. We know how much materials, how much wood, how much plaster. We know when we're going to do certain things, or mostly when, right? There's some variant, but not a lot of variance. So when there's low variance, we mitigate risk by doing more planning. We plan up front, we create a bunch of documents around that planning. We create a list of risks that might happen. If this risk happens, here's the mitigating action we're going to have. Here's the percentage likelihood that that risk is going to happen. We'll maintain that data over time.\n\nWe create this whole body of material and planning and dates and things around that story, and that's great when variance is low. That allows us to mitigate the risk because if you're going to spend, I don't know, £20 million building this area of houses, then you need to plan for that. But even then, you're going to take a little bit of an agile approach, right? You're not going to build all the houses at once and then sell them all at once. You're going to build a few houses and sell them, and a few houses and sell them because you're testing the market and you're seeing. You might then even need to apply for different planning permission to change your mind. So there's still a lot of variance in that story.\n\nI do get that for those that are in that industry, but in general, old school, you're kind of making those decisions up front. But when we have high variance, which, as I just noted, can happen in the building industry as well, we can't mitigate risk by writing everything down and creating a story for every single thing that might maybe happen because every single thing that might maybe happen is going to change every day. Think of the multiverse, right? You've got all those decision points that happen, and every time you make a decision and go down a new path, a whole different set of decision points and problem points and issue points occur. So every time you make one of those decisions, every time you make one of those little changes, you would need to rebuild all of that body of asset, and it's just not reasonable to do that. It puts too much of an overhead on people, time, everything, and you end up with that story of the plan not being able to keep up with the reality of the world. Therefore, we then make bad decisions because we can't really see what's going on, and so we're not mitigating risk at all.\n\nBut in that high variance world, we mitigate risk by creating a usable working product on a regular cadence. That's how we mitigate the risk. We deliver something; we create that thing that the customer is looking for, and we offer it to them for inspection so they can look at it and see, \"Yeah, yeah, yeah, you're doing the right thing,\" or, \"Oh, I don't understand why you made those decisions.\" Great, that's a great conversation.\n\nIn order to be able to have a usable working product at the end of every iteration, I do want to point out this is not a pipe dream; this is not an ideal world thing. I want you to all go look up the US Department of Defense article on detecting agile. It was an article, a paper that was sent out to every procurement officer in the Air Force to let them know what they need to look for when they're working with vendors, right? When they're buying stuff from vendors so that they can make better purchasing decisions. This vendor is telling me that they're agile. How do I know that they're agile? I'm a layman; I don't necessarily understand agile. I don't necessarily understand that new world. How do I ensure that I'm buying the right thing? This article lays out a whole bunch of questions that enable that person to at least start getting some insight.\n\nOne of the key questions, and this is like the first one for leadership, was, \"Do you have a working version of your product every iteration, including the first, that gets into the hands of real users?\" Real users, not UAT, not fake users, not test environments, real users every iteration, including the first. So if you're doing two-week iterations, then at the end of the first two weeks, you should have a usable working product. That's how we mitigate risk in the agile and scrum space. That's how we ensure that when people give us money, we're actually delivering something that will be valuable for them.\n\nThat's really hard if our software, our product, the quality of our product is terrible. Can you imagine trying, even if you were building houses, right? And there are broken joists, there are things not attached properly, there are leaky pipes, there's flooding. We've not built the house properly, and we're trying to hand that house over to the customer and have the customer come in and look at it, and the customer's like, \"Well, this is terrible; I'm not going to buy this.\" That's where engineering excellence comes in; that's where technical excellence comes in. We want to build things that actually work. We want to deliver less stuff up front, right? In the fictional, you know, that old phrase, \"80% of the work takes 20% of the time, and the last 20% takes 80% of the time.\" That is because our quality was bad; that's because we didn't have technical excellence in what it was that we were doing.\n\nSo we got that 80% of the functionality we've done; it looks like it works, but actually, behind the scenes, it's a total mess, spaghetti, absolute garbage. The customer comes along and tries to use it, and they're like, \"Oh, we need to fix this; we need to fix that,\" and you end up patching, right? You're getting out the sticky tape and super glue and trying to figure out how do we patch this together. Then they're like, \"Oh, I don't like the way this works.\" You can't rebuild it because it's part of the fundamental architecture, so you have to add another layer of obfuscation on top to make it look like it works the way the customer wanted it to work. But actually, behind the scenes, it just works the way the developers originally built it to work, and now we've got extra complexity. We've got something that is more difficult to maintain, more difficult to understand, and you can imagine that over time that builds up on top, and you end up with massive amounts of layers that inhibit your ability to deliver value.\n\nThat's something that I would quantify with some data. I do a lot of presentations on how the Azure DevOps team, that's the team at Microsoft that built the Azure DevOps product, they, in 2012, were technically a waterfall team. They were delivering once every two years to production, and they moved almost overnight towards continuous delivery and three-week iterations, right? So they were delivering usable working product every three weeks. They were shipping to production every three weeks, and they've delivered every three weeks for the past, I don't know, 26 three-week sprints.\n\nBack in 2012, with 650 people, they were delivering around 24 features to production each year. Part of the reason that that number is quite low, 24 features, is that one, the features were really big, but also the difficulty in adding the features and interacting with the codebase in order to get the product to do the things that you wanted it to do was really difficult because you had all those little layers of things that had built on top. This doesn't quite work the way it was supposed to. I think Azure DevOps was originally Team Foundation Server, if you remember those days, and Team Foundation Server was originally a bunch of other products that were native inside of Microsoft. They had source control in-house, source control products; they had in-house work item tracking products; they had in-house other stuff, and that was kind of cobbled together in order to create the first version of Team Foundation Server.\n\nNow, I'm sure lots of stuff was rewritten, but you've got that fundamental architectural mindset, right? Even though you're rewriting something, you're taking something else. So actually, the genetics of that product is quite long, quite old. Then you get to that point where you're switching from needing two years to get a piece of functionality working to needing three weeks to get a piece of functionality working. So they moved to this new model, and in 2012, they were delivering about 24 features to production. They then focused absolutely the majority of their time—maybe going majority is probably too much; their primary focus was on paying back technical debt, building in technical excellence, solving those effectiveness problems of moving to that new model, both in their process and in the product as well. By 2018, they were delivering 280 features to production each year with the same number of people.\n\nSo from 24 features to production, 24 experiments, 24 new features to try and see if the customer likes to 280 new features, the customer experiments to try things that might work and might help the customer. Now, yes, those things were smaller, right? But they were also delivered faster. That focus on technical excellence enables us to do that. If we don't have technical excellence in the way we do things, then it just doesn't work.\n\nI did a recent interview with Dan Helm, who runs Azure Boards, the work item tracking part of the system. When he was quizzed on the definition of done and how that works, he didn't really have a solid answer, and that's because technical excellence is so baked into the way they do everything at that level. All the engineers know what it is they need to do, what level of quality is required. They know all of those things; they don't need to focus on it, right? It's just the way they do business. Technical excellence, engineering quality is just the norm; it's not an exception, which means that they can then focus on delivering value to the customer. They've reduced risk, and they can focus on delivering value. They can focus on those other things. That's what technical excellence brings for product management, for product leadership, is the ability for them to stop focusing on fighting fires, on fixing bugs, on struggling with complexity, on being frustrated that they can't get certain features done because it's just too hard to do within the architecture of the product. You start focusing on the art of the possible: what is it we can do? Where are we going? What are we trying to achieve? You can then let go of those things because you're no longer having to ride that quality.\n\nThat's a terrible analogy, but you're no longer having to hold on for dear life while this product bucks around. You're now in the groove; it's smooth. We're adding features, we're building capabilities, we're building an awesome product. That's part of that story of mitigating risk, building technical excellence. There's a myth as well; there's a huge myth in the software industry that it's okay to sacrifice some quality in order to go faster and meet the market need. There's a recent article, I think it was a Harvard Business Review article; it might not have been, but it might have been a Forbes article. There are some studies done around that idea of what happens when we cut quality in order to go faster, right? And what's the trade-offs involved in that? The ultimate outcome was that it's not a valid trade-off. The impact of that reduction in quality is much higher than the benefit you get from being able to go fast over the short term.\n\nSo that a cruel, let's call it two things: there's undone work, stuff that you need to do in order for your product to run in production that hasn't been done yet, right? That's that 80/20 thing; that's where that pit comes from. Then there's technical debt, which is shortcuts, deliberate shortcuts that we make in order to do things in a suboptimal way within the product. That's technical debt, right? Both of those things added together don't scale linearly; it's an exponential curve. That's where that Azure DevOps team was at the start. They were at the top of that exponential curve, only delivering 24 features to production each year. But in focusing almost religiously, zealot-like, on paying back that technical debt, getting rid of all of that undone work, and bringing that curve back down to a manageable level, right? And beyond, getting it towards zero. We want to have as high quality, effective a product as possible. They actually, in one year, nearly tripled the number of features delivered to production, even though their main focus was on, \"Let's do it right; let's pay back the technical debt.\" They actually delivered more stuff.\n\nSo that goes: reduced quality to go fast is a losing proposition. It always has been a losing proposition. Definitely, what you want to do is focus on technical excellence. If you don't have a definition of done, create one. If your organisation doesn't have a definition of done, which it should, your organisation should be thinking about, from a technical excellence perspective, what is the minimum level of quality we as a business require in order to have a product that is fit for purpose? Right? Protects our brand, our business as a whole. This product is representing our brand or however that works, representing your brand. Protecting the people that are using it and protecting the people, your employees and your developers, right? To make sure that everything's done right. You don't want, like, think about Boeing, right? The reduction in quality is just now seeping out. What else do you need in order to have a viable product in your market, in your situation, right? So different levels for different markets; that's the business's requirement for done.\n\nWe're not talking about features. There's a big conflation, I think, between features being feature complete and quality. Engineering excellence is about quality; it's not about having the features, right? So let's take that, put that aside. What we're building, we're going to take that aside, and we're going to focus on the how we're building it. Do we have the level of quality required to meet compliance? Do we have the level of quality required to meet the testing level that we want? Do we have the amount of telemetry in there to see what's going on? All of those things are part of that definition of done, which has nothing to do with the features. We're only focusing on the quality of the product, and that enshrines your engineering excellence.\n\nSo if the organisation doesn't have that standard, it's the developers, the scrum team, or the developers that are charged with creating one that is relevant for your product and significant enough that you're going to be able to create a usable working product every sprint. The reason you have a more usable working product is to mitigate that risk and build out your engineering excellence. So don't get left behind; don't get bogged down in the quagmire of engineering inferiority. Focus on engineering excellence. Build the best product you can and maximise the value to your customers."
  },
  {
    "Title": "The Importance of Delivering Working Software Every Iteration",
    "Description": "Explains why delivering working software to users every iteration is vital in Agile, highlighting feedback, value, and practical steps for continuous improvement and success.",
    "ResourceId": "3-LDBJppxvo",
    "Url": "https://www.youtube.com/watch?v=3-LDBJppxvo",
    "Date": "2024-06-26T06:45:00Z",
    "Captions": "Our team's delivering working software to at least some subset of real users every iteration, including the first, and gathering feedback. If you're not doing that, you're probably not very agile. The purpose of agile is to close those feedback loops and get tight interaction with our customer. Everything that we do before we actually get our product in front of our customer is an assumption, and we need to validate those assumptions by getting work in front of real users as quickly as possible so that we can ensure that, as much as possible, we're going in the right direction and not the wrong direction. Maximise the amount of work not done. Maximise the value that you get to your stakeholders."
  },
  {
    "Title": "Understanding Kanban: A Tool for Transparency and Continuous Improvement",
    "Description": "Explains how Kanban visualises workflows, tracks metrics, and supports continuous improvement, helping teams identify bottlenecks and enhance transparency and efficiency.",
    "ResourceId": "BFDB04_JIhg",
    "Url": "https://www.youtube.com/watch?v=BFDB04_JIhg",
    "Date": "2024-06-24T06:48:02Z",
    "Captions": "Caman is not a process itself. Caman is a tool that allows you to observe whatever process it is that you're doing. So it provides the metrics, the visualisation, the definition, creating the definition of workflow for whatever process it is you're using. Its primary goal is in creating that additional transparency. It allows you to see better what's going on, ask more interesting questions, and update and improve your system."
  },
  {
    "Title": "Unlocking Naked Agility: How Happy Teams Drive Exceptional Products",
    "Description": "Explores how team happiness, autonomy, mastery, and purpose drive engagement and lead to higher-quality, more impactful products in agile organisations.",
    "ResourceId": "yCyjGBNaRqI",
    "Url": "https://www.youtube.com/watch?v=yCyjGBNaRqI",
    "Date": "2024-05-10T06:45:01Z",
    "Captions": "The purpose of naked agility is to help organisations create great teams. It's something that I've... it's plainly obvious when you say it, but if you have unhappy, sad people, you're not going to get good work out of them. You're not going to build great products. I believe that every person deserves to be using great products. We, as customers, we, as users of products, don't deserve bad, shitty products. We don't deserve that. We deserve great products that provide us with a great experience and do great things for us to help us do the things that we need to do. Unhappy, sad teams don't create great products; they create bad, terrible products.\n\nIn order to have happy, engaged people, we need to create those ideas of great teams within our organisation. How do we engage with people? How do we enable them to be the productive story that we're trying to create? In the creative world, in the software world, that means autonomy, mastery, and purpose. Right? Autonomy is we need to be the ones making the decisions. We need to be the ones that are on board, that are engaged in the story. The people doing the work need to be engaged in the story. We certainly need to also be masters of the work that we're doing. We need mastery, we need expertise, we need skills, we need knowledge. We need to be able to be the best that we can be at what it is that we're doing. Lots of organisations suppress that.\n\nWe need purpose. We need to understand what direction we're going and why we're going there, and how the work that we're doing contributes to that story. Otherwise, it doesn't matter what we're working on. Like, why would I care about the product if I don't know what it's for or who it's helping? And if I don't care, what care am I taking in the product, in the work that I'm doing? I'm taking less care because I don't care.\n\nEnabling... you can't just tell people to care, right? You have to enable. You have to create an environment within which the people that are participating, that are working on the software products that you want to create and use and develop, care about what they're doing. They have that autonomy, they have mastery, and they have purpose. And that's how we create great teams that create great products."
  },
  {
    "Title": "Empowering Your Team: Why Quick Fixes in Agile and DevOps Are a Myth",
    "Description": "Explains why lasting Agile and DevOps success requires empowering teams and building internal capability, not relying on quick fixes or external consultants for solutions.",
    "ResourceId": "BJZdyEqHhXc",
    "Url": "https://www.youtube.com/watch?v=BJZdyEqHhXc",
    "Date": "2024-05-09T06:45:00Z",
    "Captions": "So there's no way for an external party to come in and give you a solution. Recipe is something that you can no. Recipe is the wrong word, but there's no way that somebody can come into your organization and just tell you how to do your stuff. It's the reason that the big consulting companies don't affect any change. It's the reason that the big frameworks for Agile or DevOps don't actually tend to change anything in the organization, apart from cost during your bank account. That's big consulting companies too. \n\nIt's the reason that most organizations struggle to incorporate the story that they're trying to work towards a new story, right? And the reason that they struggle is because they're trying to buy it in rather than adapt it. It's like if you wanted to be a gymnast and are you just going to hire somebody to do the gymnastics for you? But you wanted to be the gymnast. They're the gymnast; you're not the gymnast. \n\nSo there's a fallacy in consulting that a lot of consulting is just contracting, right? You're hiring somebody in to do the job. You've got a butt on a seat doing that job for you. And if that job inside of your organization is a business-critical job, which anything that's around the purpose of your organization, anything that's around how your business does business is critical to your organization, then you're outsourcing part of your organization. \n\nAnd now why would anybody in your organization learn how to do that thing? Because there's somebody else doing it who doesn't want to share it because they're a contractor. And if they keep that knowledge, they keep their job. If they share that knowledge, they lose their job. And that for me is the big difference between contracting and consulting, right? Although a lot of people sell consulting when actually they're doing contracting. \n\nAnd that's that. The purpose of a consultant is to provoke change. That's probably the most interesting way to say it. The purpose of a consultant is to provoke change. The consultant shouldn't be doing any of the work within your organization. If you hire a consultant, you're not hiring them as an Agile coach; that's a contractor. You're not hiring them as a development lead or a project manager; that's not a consultant; that's a contractor, right? There's somebody in your organization doing the work. \n\nWhat a consultant is, is an advisor who provokes change. They are somebody from the outside who maybe has additional deep knowledge and skills in that particular topic who doesn't come in to just tell you how to solve the problem. Even if they know how to solve the problem, right? They might give you advice, but they're not going to solve the problem for you. But they help enable you as the person inside the organization or group of people, if it's a team, to understand the theory so that you can make the decisions for the organization, so that you can make the changes in the organization. \n\nAnd because you understand the theory and the principles, you're able to then make the future decisions as well that are better than the previous decisions, if that makes sense. The whole idea of consulting is to help organizations change by provoking the people inside of the organization to do things differently."
  },
  {
    "Title": "Transforming Training: The Power of Immersive Learning in Scrum",
    "Description": "Explores how immersive, hands-on learning in Scrum boosts knowledge retention, practical skills, and continuous improvement compared to traditional training methods.",
    "ResourceId": "VOUmfpB-d88",
    "Url": "https://www.youtube.com/watch?v=VOUmfpB-d88",
    "Date": "2024-05-08T06:45:02Z",
    "Captions": "So in addition to our mentoring and consulting programs, we also provide training. The purpose of training is to teach those underlying theory and principles with actionable practices that people can use. And that's kind of why I do scrum.org based training, because their philosophy around training is about understanding the core theory and principles. Like, here's the first principles of what it is we're trying to achieve. Then building on top of that, here's the thing, right? So you're learning the thing, and then what are the additional processes and practices, complimentary processes and practices that can be used on top of that to do more, to get the value out of it that people are expecting to get.\n\nAnd one of the main reasons I liked scrum.org was because of that story, because of the community of trainers, the people that it gave me access to, to discuss and collaborate on how do we understand these things, how do we communicate these things, how do we enable them to be as effective as possible within organisations. But the two-day training format that was pre-pandemic was really good for the trainer, right? Because you fly in somewhere, you do two days training, and then you fly out. But not so good for the customer, because if you've got a bunch of people who are struggling to deliver value in your organisation and you spend two days teaching them scrum, where's the rest of that story? If they're still under pressure after that two-day class, then how are they actually able to do anything, to action any of those things? \n\nAnd time goes by, and then they've forgotten most of what it is that they've learned. That's why I think they say only 10% of things you learn in that format actually stick. Right? So you put 20 people through the class, they all remember a different 10% of the course because it's what matters to them or impacts them. They maybe implement 2% of that, so you get a 2% net gain of knowledge from that two-day class. But if we change that format up, this is why we've moved towards the immersive learning format and incorporating it into a bigger mentor program.\n\nEven if that 2% was all that was true, you're then getting 2% compounded over multiple sessions. Right? So rather than having two full days, let's say we did eight half days, right? So we've got eight half days over a longer period of time. And even if we still got that 2% actionable change, we get 2% and then compound it with another 2% and then compound it with another 2% because there's a gap in between and there's an assignment for people to go do inside the organisation. But I believe that that format is a heck of a lot more than remembering just a 10%, because we're only learning a couple of hours' worth of stuff. We're not learning 16 hours' worth of stuff and then you have to try and remember a percentage of that 16 hours. \n\nWe're remembering from that two hours' worth of stuff that we've researched and talked about and collaborated on to understand that teaching part. And then they have to go and try and apply something in that context within their organisation. And yes, everybody's going to learn, still going to learn something different. People are all going to retain different things. But even if it was again just learning the 10%, it's 10% of two hours plus 10% of two hours plus 10% of two hours. So the end percentage for the same learning content is much more powerful, much more effective, like orders of magnitude more effective for organisations. \n\nBecause they get the assignment to go try and do things within their organisation during that time, they've also provided actionable value for the organisation. So think of it like that iterative process in scrum where we do a sprint and then we deliver usable working product. We've got a learning exercise, then at the end of that learning exercise, they go deliver usable working product within the organisation. They just need to figure out what is the use. You know, we give them an assignment, but it can be quite vague, right? We give them lots of different ways to resolve that assignment. They pick something, they try it in the organisation, they've made a change. That change either was successful or it wasn't. It was either able to be implemented or it hit a roadblock. \n\nAnd then when we come back around, we're able to debrief that activity that they did, so they then get feedback and engagement, closing that feedback loop. Right? On how, you know, what did you manage to change? How effective was it in your organisation? What roadblocks do you hit? How do you get past those roadblocks? What have other people tried? And even especially when you put a big group through that within your organisation, you even get cross-pollination and cross-learning because one person or one group within the bigger group says, \"We weren't able to do that because this doesn't work in our organisation.\" And the other group is like, \"Well, actually, we were able to speak to this person and this person and get this to happen, so we were able to do this, which got us halfway there.\" \n\nAnd that cross-pollination and learning is hugely important to that story, and it works great across organisations as well when you have multiple organisations participating. So that's moving towards that immersive format. So we kind of started in the two-day format, we then moved into the four half-day format, then into the eight-week immersive format, and now moving into the kind of more mentor program, maybe over eight to 50 weeks of that program, with sessions and workshops and different things going on. I think this is the game changer for organisations because we're not just giving you the information, we're collaborating and working with you to help you implement it over a longer period of time."
  },
  {
    "Title": "Empowering Teams for Success: The Key to Thriving Product Development",
    "Description": "Explores how empowering and engaging diverse software teams boosts motivation, collaboration, and product quality through trust, feedback, skills development, and shared goals.",
    "ResourceId": "EyqLSLHk_Ik",
    "Url": "https://www.youtube.com/watch?v=EyqLSLHk_Ik",
    "Date": "2024-05-07T11:02:49Z",
    "Captions": "So the product development mentor program for software organizations is designed around helping people that actually build the products. So in Scrum, we would call those folks the developers, right? But that includes testers, coders, it includes analysts, it includes product owners, it includes cyber security operations. It includes all of the people involved in building and creating a product. \n\nAnd the product development mentor program is how do we build in excellence to the way we do things? How do we enable happy, creative people who are working together towards a common goal? Right? I don't know if you've noticed or I don't know if you've thought about this, but unhappy, sad people don't build amazing products. If the people that work on your product feel like they're unable to achieve the things that they're asked to achieve by the business, they're going to be unhappy. If they feel like the things that they're doing don't add value to the organization, they're going to be unhappy. If they feel like they know how to do something better than other people that are telling them how to do it in the organization, they're going to be unhappy. Unhappy, sad people don't build amazing products. \n\nSo how do we turn that around and enable the people in your organization to step up? We have to enable them to step up and be able to deliver the highest possible value, and that means they're going to have to be happy and engaged in what it is they're doing. We're going to have to look at things not just around the process, like your ways of work and how you manage that work, but how do you manage dependencies? How do you do DevOps and continuous delivery? How do you do testing? How do you integrate more feedback loops into your process for all of those different process control systems that you might have within your organization? \n\nAnd build a story and a culture of engineering excellence within your organization because that happy, motivated wants things to be successful, wants things to be valuable for their customers and for them and for your business is the mindset that we want in people that are all working together towards building this product. It's not just enough to have that direction, right? Although that's quite a lot of the story, they also need the knowledge and skills. They need to understand the theory behind why we're doing things a certain way so that they can take that story forward. \n\nIt's not them doing it a particular way because they've been told to; they understand the theories and principles behind the things that we're trying to do. They understand why they need to pay more attention to the quality of the product. They understand why they need to be trying to engage with the customers more. Every developer in your organization should be able to engage with customers. Almost every developer should be able to engage with customers and communicate with them effectively so that we can maximize the value. \n\nBecause ultimately, the people that are doing the work on the teams that are working on your product are the ones that are making the majority of the decisions. Even if you feel like that's not true, it is true. They're making the majority of the decisions every day. Every person on every team in your organization is making hundreds, if not thousands, of micro-decisions that will impact the future of the product, the future of how users use it, and they're not asking anybody because they don't believe that anybody else would understand the situation, right? \n\nSo the way I think about it is, if I was—my background is software engineering—so if I was making a decision on whether I use an array or a linked list, right? A linked list might be more efficient for the thing that I'm trying to do, but if I'm looking forward into the future, if I'm thinking about what it is we're trying to achieve, I'm collaborating heavily with the business. I understand the goals and objectives of what it is we're trying to achieve. I've been communicating with customers, and I understand their wants, needs, and desires. I might realize that a linked list is not the best solution for this particular problem, and I should use the less efficient array because it's going to provide us with more benefits going forward into the future. \n\nAnd that sort of choice, that's just one choice that might have taken me 20 seconds to make and a couple of hours of implementation in my system, but that could have an implication on what it is we're able to do tomorrow, what it is we're able to do next week. And it would take a bunch of rework to go back and make those changes later. Now we want to be able to go make those changes later, which is why good testing, good architectures, engineering excellence will mean we can. \n\nBut what if we could make more of the right decisions, and every single person on the team could make more of the right decisions as we flow towards the end of our product? Because the further we get down that line of building our product, the more of our product we've actually created, right? Our inventory of product is bigger, and making changes to that, rearranging the warehouse, right? If you've got 10 things in your warehouse, it's super easy to rearrange. If you've got 100,000 things in your warehouse, it's not very easy to rearrange, right? And the chances of something going wrong, something going missing, all of those things is pretty high. \n\nHow do we create an environment within which those things are just not true? We're not going to have—we're, in general, not going to have those mistakes because everybody is paying attention to what it is we're trying to do. We're working together towards that common goal. We're making decisions based on the best possible outcomes with the inbuilt knowledge of what's happening in the future. Intent-based leadership, right? How do we create that story at the team level so that we're all going in the same direction?"
  },
  {
    "Title": "Debunking the Top 5 Myths About Scrum: Unlocking Agile Success in Your Organisation",
    "Description": "Explores and corrects common misconceptions about Scrum, clarifying its true principles, events, planning, and governance to help teams adopt Agile practices effectively.",
    "ResourceId": "4YixczaREUw",
    "Url": "https://www.youtube.com/watch?v=4YixczaREUw",
    "Date": "2024-05-06T14:12:53Z",
    "Captions": "Scrum is like communism; it doesn't work. This is a phrase I hear often from folks who have been unable to adapt their systems of work to incorporate the core philosophies, theories, and practices of Scrum. They sit and look at the signals coming from Scrum that things are broken and don't work like they're supposed to work and do nothing but say, \"Scrum is like communism; it doesn't work.\"\n\nHi, I'm Martin Henwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nIn this video, we'll explore five myths from Scrum that inhibit its adoption. From language definition inflation to cognitive bias, here are the top five myths that result in the idea that Scrum is like communism.\n\nThere's a myth in Scrum that you spend more time talking than doing. I see this quite a lot; people talking. Usually, people are using old school terminology. When you hear them talking about that, you hear them talking about ceremonies rather than events. One of the main reasons why Scrum doesn't call the activities ceremonies is because it's ceremonies. We get together and nothing happens; it's a ceremony. It's something we do that's perhaps the same every time, and there's no actual outcome to a ceremony apart from maybe people have some jollies and they feel good.\n\nThe reason Scrum calls them events and also not meetings is that something's supposed to happen there. Every single one of the Scrum events serves empiricism; that's their purpose. You're going to inspect something and adapt something. If you're not adapting, there's no point in being there, there's no point in having it, there's no point in doing it. Their purpose is to adapt.\n\nFor example, at your Sprint planning, you're inspecting your product backlog and your product goal, and you're adapting your Sprint backlog and your Sprint goal. That emerges through that conversation. But at the end of your Sprint planning, you should have a Sprint goal, you should have selected backlog items, and you should have some kind of a starter plan to complete them. If those three things don't exist at the end of Sprint planning, there was no point in having it. That's what it's there for, so that we understand what it is we're going to take into the next Sprint.\n\nSo that we can communicate that perhaps with other people. What's our goal for this Sprint? What are we trying to achieve? How do you get the stakeholders to actually turn up for the Sprint review? Well, you have to give them something that they're interested in coming in providing feedback on; that's your Sprint goal. And that's just one of the events in Scrum.\n\nEvery single daily Scrum is only 15 minutes. How does that add up to a boatload of meetings? At most, 15 minutes per day where the team gets together and plans the next 24 hours; that's its purpose. You're inspecting your existing Sprint backlog and you're adapting that Sprint backlog based on what you learned in the last 24 hours. You might have learned some stuff from actually working on the product, what can and cannot be done. You might have gained more information and insight from other stakeholders and collaborating with the business and doing analysis on what it is you're going to work on. That means that something you've got in the Sprint needs to be taken out because it's no longer viable, or something else needs to be brought in because it becomes part of that story of what it is you're trying to achieve that Sprint.\n\nThat's your daily Scrum. It's not an elaborate status event; it's not a time that you're wasting. It's where you're maintaining the transparency that is required to be able to inspect and adapt. You're serving empiricism, and all of the Scrum events serve empiricism.\n\nOne of the common myths in Scrum is kind of a proxy myth. This proxy myth is, \"Why do we spend so much time working on story points?\" When story points measure complexity and not time, and then we have to figure out how many story points fit in a Sprint. I 100% agree with that; that part is not a myth. The bit that's a myth is that story points are even a Scrum thing in the first place. They're not. Story points have nothing to do with Scrum; it never has, apart from as a practice, potentially a complimentary practice that teams choose to take on in order to get to an outcome.\n\nWhen you find complimentary practices are not adding value, you should be stopping doing them, not continuing with them. So if you're in that position where you find that story points are not adding value, great, stop doing them and choose something else. The guy that invented story points, or that is generally accredited with inventing story points, has a public apology online for creating them in the first place because of how they tend to be used within organisations as a pseudo proxy for time to beat developers around the head with. They were originally invented as a reasonable way for developers to sit and have a conversation and figure out what they don't know. That's the purpose of story points.\n\nWe can all get together; we maybe use another complimentary practice called planning poker. All that really is, is we keep our cards to ourselves. We're not going to tell each other what story point we're going to pick, how complex, t-shirt sizes, right? Whatever you pick, how complex this thing is. You've got one developer that says this is a small or a one, right? You've got four developers that say that this is a five or a medium, and then you've got one developer that says this is an extra large or a 21. The idea is, what do they know that we don't, or what do we know that they don't? That's the purpose of story points and complexity conversation.\n\nIt should be used almost solely during refinement in order to enable teams to right-size their backlog items and decide, do they fit in a Sprint? Do we understand them, or do we not? After that, delete the numbers; they're useless. Don't use them anymore. That's their purpose for that one context; don't bring them into the wider context.\n\nOne of the common myths in Scrum is that it is really a forum for micromanagement. There's a core test for this in your team. It is a myth, right? But it's a reality for many teams. So is it a myth or is it not a myth? That is a matter of perspective. However, I would point out that it's not Scrum. So it's a myth in the context of Scrum, but it's not a myth in the context of how lots of organisations and teams approach Scrum.\n\nMost organisations approach something like Scrum from their traditional top-down steering-based perspective, and they want to tell teams what they're going to deliver in a Sprint. So you walk into Sprint planning, and the product owner or the tech lead or the project manager, or whoever, the Scrum Master—the worst one—but the Scrum Master says, \"Here's a list of things we need you as a team to do this Sprint.\" As soon as that happens, not Scrum. We've gone out of the bounds of the Scrum guide. Who decides what we work on this Sprint? The developers. Who decides how we work on it? The developers. It's not anybody else because the developers—that's the core reason why they dislike that approach. It's the developers that understand the nuance and intricacies of the technical challenges of actually delivering on the work inside of the Sprint. Nobody else can understand that nuance because they're living it, right? They've got skills that I don't have as a manager or as a product owner. They've got an understanding of the product and the technologies that we're using to deliver that product, the tools and techniques that we're using. They're best placed to make that decision.\n\nNow, can the product owner say, \"Oh my goodness me, we're in a difficult place because we're not working through the work that we need to deliver as fast as we would like?\" Yeah, absolutely, they can have that conversation. And they can have a conversation with the developers about how the developers might choose to cut corners in order to accelerate work. But it must be done with their assent. If the developers say no, then we can't work any faster because we might be taking on too much technical debt. For most businesses, all technical debt is a risk to the business, and most businesses don't understand the context of technical debt enough to make an informed decision on whether they should accrue it and how they should pay it back. That's why we have hired these technical experts in order to deliver our product, and we should trust their understanding and view of the product in order to do that.\n\nSo I would say that it is a myth that anybody should be telling the developers what to work on and when to work on it. But I do understand that lots of organisations don't understand how to let go of that control and are not yet ready for Agile.\n\nOne of the common myths in Scrum is that since we're doing Agile, we don't need planning. That is just utter garbage. Scrum, for example, is all about planning. We have Sprint planning, we have refinement, which is a type of planning, we have daily Scrum, which is about planning the next 24 hours, we have a review where we review what happened based on the plan and adapt the plan going forward into the future. It's all about planning; it's all about getting things right. It's not about planning upfront; it's not about spending too much time upfront planning.\n\nBut there's a phrase which is often misinterpreted, which is we should do just enough planning. We should do just enough, right? If we do too much planning and we plan a bunch of stuff that we end up not doing because it gets taken out of the backlog, then that was waste. Maybe that was okay waste; maybe we needed to do that planning in order to find out other stuff and have that thing removed. Or maybe that was a little bit too much. Is there a way that we could have learned the same thing that we learned doing that planning, doing something a little bit less?\n\nThe converse of that is if you are building—I'm trying to think what you could be building that needs lots of—let's say you're working on Windows and you're one of two and a half thousand software engineers. How many teams is that? Metric assloads of teams, right? If you're that many teams working on one product, then you're going to need to plan, right? You're going to need to understand what's happening going out into the future. You're going to need to coordinate across hundreds of teams on direction and strategy. I mean, most of that in Scrum is done through communication, right? Vision, product goal, Sprint goal, right? You've got that communication chain. How do we all get behind the same thing?\n\nBut we're trying to have as light a plan up front as possible within our context. So even if I was working on the Windows team, I would probably have a roadmap. I'm probably going to have a roadmap for my current six months. If you're not familiar with how Microsoft product teams have created their own scaling framework around what they need in their business, it's often called the season-based model because they talk about the spring update and the fall update for their really big products. Many of their products do continuous delivery, but they're talking about a long-term view of what it is they're trying to achieve, and that's about six months. They look three seasons ahead, so they're looking 18 months out. They have an 18-month plan, and I'm using air quotes because it's probably pretty vague, right? If you're looking at that third season out, things are really big, right? You might have themes rather than individual things you're going to deliver. You might be looking at what are the investment opportunities, what's happening in the market, where do we need to get ahead of the competition going over the next 18 months? That generates these big themes, buckets of work that many hundreds of teams might work in to actually make progress towards those big themes.\n\nBut you're looking that far out; you're planning that far out. You probably know what your goal, your product goal—if they call it that, but whatever their theme for each of the seasons is. They probably know what they're going to be 18 months out for the season that we're in. We're probably going to have backlog items and actual things we're going to tactically deliver for the next three, four, maybe five Sprints. Maybe, and then in the next bucket, we might have, you know, here's some Sprint goals we might tackle, here's some product goals we might look at in that next seasonal bucket. And then the season after that, we don't have any of those details, just what's the big theme. You can see how they did that. They did one recently—I'm saying recently in the last five years, right? Recently—that was called the Creators Update. So when they were talking to us, the general public about the products, they talked about the Creators Update. We're going to invest in opportunities to make our systems and products and services better for creators. That was an organisation-wide theme that can spawn out of the Windows team. But think of all the things that impact. Not only does that impact on Windows, the operating system, right? But what about Office? It impacts most people who interact with the operating system through Office. So if you're talking about pen support, right? You've got the actual pen touching the screen on the Surface and the number of levels of capability that it has in that world. You've got, so that's hardware; that's the Surface hardware and perhaps third-party vendor hardware collaborating with. Then you've got the application that you're actually using that is interpreting those signals. So that could be Microsoft's applications; it could be Office; it could be third-party software. And then you've got the underlying operating system, which is providing support for, I think it used to be 256 levels of pressure, and now it's 1024 at least levels of pressure that you can put on the pen in order to get that, you know, I'm drawing on the page type of feel. And that requires collaboration, looking forward into the future. What do we need? What are we trying to achieve? All of those strategic things happening, we just probably don't store them in a Gantt chart.\n\nOne of the myths in Scrum is that we have no governance. This kind of leads on to the bigger myth that just because it's not in the Scrum guide doesn't mean you're not supposed to do it. Scrum does absolutely have governance; it has small amounts of governance baked in. But in general, you need governance to build your product. So it's kind of correct to say Scrum doesn't have a lot of governance. There's a very small amount of governance built in, but if you want to be successful at building products—if you're, for example, building products within the healthcare space—then you're going to have to worry about your ability to support HIPAA, to support the regulatory compliance that comes from the outside. That's governance imposed on your organisation from the outside that you have no control of. You're going to have things that your organisation does internally. Perhaps your organisation has usability guidelines; perhaps they have UX guidelines for how all our products' UX is going to function so that anybody interacting with our software already knows how it's going to work because it follows the same rules. Then that's internal governance that has been applied to your product.\n\nYou maybe have business rules; that's another form of governance. You might have particular ways in which you interact with the market as a business. That's one of your unique selling points, your unique engagement points with the market, and those ways of working have to be implemented in your systems in that way. That's internal governance. Just because Scrum talks about minimising that governance doesn't mean it's not there. You just have just enough governance to support the business need. It's when you have way too much governance that you start running into a problem. That's why in very large organisations, for example, banks, they really struggle to move towards Scrum and Agile practices because they're encumbered by the baggage that they can't put down. Royal Bank of Scotland in the UK was, I think, the first bank in the world; it's currently the fifth biggest bank in the world, and they've been going for over 200 years. Can you imagine the procedural and compliance baggage that organisation has? Many of it around for no other reason than nobody's revisited it in a long time. Nobody's challenged it in a really long time. How many policies and procedures do you have in your organisation that nobody knows where they came from or what they're for or who owns that policy or procedure or why, right? It's just the way we do things here. Those are the things that we want to challenge. We want to challenge anything that gets in the way of inhibiting our ability to deliver value. Those are the things we want to prevent. Those are the policies, practices, and procedures, the governance that we want to reduce to the absolute minimum."
  },
  {
    "Title": "Bridging the Gap: How to Align Your Organisation for Successful Agile Product Management",
    "Description": "Learn how to align teams, stakeholders, and processes for effective agile product management by fostering shared goals, clear communication, and evidence-based practices.",
    "ResourceId": "ZcMcVL7mNGU",
    "Url": "https://www.youtube.com/watch?v=ZcMcVL7mNGU",
    "Date": "2024-05-06T13:29:40Z",
    "Captions": "The product management mentor programme for software development is really a programme to allow companies that are building software products to build better software products. There's a huge gap in the way organisations approach software development and software engineering and building those types of products where when we start transitioning, they realise that the work is so different and so complex and different all the time that the kind of more common ways of managing projects like you might for building houses or building bridges is just not going to work. \n\nUm, because everything's so much more complex. So they try and shift from those old ways of working where you have Gantt charts and plans and milestones and deadlines and they try and move towards agile, right? Whatever people are calling it locally, they move towards that story and they don't, they take away those milestones and Gantt charts and traditional project management tools, right, that are supporting that story. They take those away and then they don't replace it with anything and they wonder why it doesn't work out, right? Things start to go wrong fairly quickly. Things go off track. We're not going in the right direction and it's because they're missing a piece of that puzzle and it's a pretty big piece of that puzzle and it's vision, value, and validation. That's what's missing. \n\nThey don't have what, um, if you go look up in the dictionary, it's a group of people working together towards a common goal. So if you want people to work together towards a common goal, whether they're an individual team or they're your whole company, you need to have that common goal that they can all get behind and they can all follow, that they all understand, that it's been communicated effectively. \n\nAnd what I see in a lot of organisations is they'll maybe communicate at once, they'll maybe set directives and they don't involve the people that are part of the story, the people that they want to follow that goal. And the reality is that people don't follow your goals, they follow their goals. So in order for you to engage with all of the people in the organisation, the people in the software teams building the software, the people in the legal department, in cyber security, and all of those different parts and have us all working together towards that common goal of building and delivering this product to customers that's going to maximise the value means that we all have to be going in the same direction. \n\nWe all have to understand the same thing, right? What is it we're trying to achieve? And that is one of the main focuses of the product management mentor programme. We're talking about tools and techniques, we're talking about theories and principles and practices that help us understand why those things are needed and how we get everybody moving in the same direction. How do we, as product managers, enable not just to communicate that direction with the people within our organisation or outside of our organisation as well to involve those stakeholders and those customers in the story? \n\nBut also do we, how do we measure whether we've been successful, right? How do we bring in things like evidence-based management, right? Looking at our whole product and are we moving in the right direction? Are we looking at the right numbers? Do we have the right measures to be able to figure out where we're going? Looking at things like hypothesis-driven engineering practices, right? Why are you adding this feature? What would you like the world to look like after this feature has been delivered? What would you expect the difference to be? How are we going to measure that? \n\nBuilding that whole story into the way we build products so that we can maximise the value that we deliver to the business for the return for the money that they've put in."
  },
  {
    "Title": "Avoiding the Seven Deadly Sins of Agile: Transform Your Organisation for True Agility",
    "Description": "Identifies seven common Agile pitfalls—quick fixes, backlog overload, resource focus, lack of accountability, blame, imitation, and pride—and offers practical solutions for true agility.",
    "ResourceId": "5RJpAeKMRzs",
    "Url": "https://www.youtube.com/watch?v=5RJpAeKMRzs",
    "Date": "2024-04-14T12:17:16Z",
    "Captions": "Agile is hard and it's designed for complex environments. So, as you would expect, there are many behaviours that I've found in organisations that are suboptimal, to say the least. Here are my seven deadly sins of Agile.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nOne of the seven deadly sins of Agile is lust. Loads of organisations are talking about Agile transformation, digital transformation, whatever transformation. They want something different because they've realised that the markets have changed. It's taken them a long time to realise the markets have changed. They changed years ago. In fact, the 1930s was when the market started to change. By the 1970s, they were totally changed, and it's taken until now for a lot of companies to actually realise, \"Oh, stuff's changed. What's going on? Why isn't our old processes and systems working?\" So now they're looking around for something new. They've got that, I was going to say, \"70-year itch,\" but it's the 70-year itch, and they're looking around for new processes and practices that they can use. They see this Agile thing doing really well, and they want it. They want it desperately, and they don't really want to do the work for it. They just want to buy it. I think there must be a USism for that, but I think I'll stay away from it. They just want to buy this thing; they don't want to actually spend the effort and the time and the energy to figure out what it means for them and their business. They just want somebody else to come in and install it. They just want to pay somebody to come in and do it for them. That's what they want to do.\n\nThat's why you see a lot of organisations bringing in the big four consulting companies. You see McKinsey, Accenture, and Boston Consulting Group coming in, giving advice. But the problem is they're giving advice based on all of these other big organisational transformations. There is no precedent within your organisation for Agile. You can't just look at what somebody else is doing and lust after it and bring it into your organisation. You need to build your own unique way of doing things over time and actually do the work to get there. That's why you can't just lust after this Agile thing; you need to do the work to bring it into your organisation.\n\nOne of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team you're working with and you look at their product backlog, and let's say there's six or seven people working on this team and they have 5,000 things in their product backlog, they're doing it wrong. That's greedy. They've eaten all those backlog items; they're sitting in their belly and they can't walk around. They can't move; they're not going to be nimble. They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.\n\nAnother way gluttony manifests is during Sprint planning, shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint. That continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it. Taking on too much and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, maybe not every Sprint is probably okay. You're not going to be successful in everything you do, but if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, \"Are we taking on too much work? Are we doing too much? Are we taking on too much work?\"\n\nThat's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. The Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide. They found that only 35% of the features that we build are used by our customers. 65%, I think the phrase was, \"Ed little if ever.\" So hopefully we can stop building them in the first place. That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long does your build take if you remove 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams will be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things.\n\nSo the way to... loads of teams just need a gastric bypass for that. How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog. It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, features that aren't used by your customer. I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap and they knew their customers way better than anybody else. There was no way they were wasting 65%. It was a lot less, that's what they said. So we said to them, \"What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?\" They said, \"This one, this one's the best.\" So we got in amongst the code, we added application insights. Application insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box it does a bunch of stuff. But then if you add this as a feature, you can say, \"How many times do users click that button of our body of users? How many of them have clicked that button?\" You can get all of that data.\n\nWe analysed their product end to end, so we collected data for three months, and then we went back to them and said, \"Here's the 7.5% of features that your customers use. All the rest was waste.\" Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers. So no, don't eat the whole thing. You've got to figure out how do I pick and choose what I'm going to eat. Don't eat the whole feature at once. You don't know if you like haggis yet, so don't order a whole plate full. Get a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more. But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.\n\nOne of the seven deadly sins of Agile is greed. This usually manifests in organisations by an overwhelming focus on resource utilisation. Let's get rid of the fact that we're calling everybody resources as if they're cogs in a machine rather than actual people. That focus on resource utilisation was a fantastic idea when we were running machines, and machines could churn out things on a regular cadence. The more your machine is running, the more value you're getting in return for the cost of the machine and the cost to run it. That's where that resource utilisation idea comes from. But when you start looking at people and how people do work, people need thinking time. People need to do things different ways. If we can automate stuff that we do the same all the time, but if we're going to do something different all the time, which in my world, background as a software engineer, everything we coded was something new. Otherwise, we would have used an existing framework. Anytime you're writing code, you're doing something new. Anytime you're building a product that doesn't exist yet, you're doing something new that's never been done before. When you're doing that, you need to give people the space to be able to do things well, to be able to think about things, to be able to learn things, to be able to try things. That means that people aren't always 100% focused on the work that they're doing. They're doing other things while thinking about that work.\n\nSome examples, maybe. Have you ever been working on something and got stuck? No matter how much time you spent on this thing, you were stuck. You're 100% utilised because you're working on this thing, but you're not making any progress. You're not delivering any value. But if you just go out for a walk or you sit with your wife and you explain the problem to your... I do this all the time. I explain some problem to my wife, and she doesn't necessarily understand the problem that I've got. I'm talking about code and architectures and things, and halfway through explaining it, I figured out what my problem was. I just didn't have a moment to look to the side. I don't know if that makes sense, like an out-of-body experience and look at that thing from the outside.\n\nThat resource utilisation is a fallacy when you're talking about people. There's no such thing as resource utilisation. You want to be looking at flow efficiency and value delivery. How much value are you delivering to your customer? I actually don't care if my team members are sitting around on their butts for 90% of the time as long as we're delivering the value to the customer. The value to the customer is the important thing. Is the customer happy? Are we getting an adequate return on investment for our product? Those are the ideas that make sense. I worked with somebody years ago who ran a little experiment with some teams that he worked with in a company in the US. He decided to, or got convinced leadership that per Sprint, he would remove an hour from each Sprint. You can imagine you've got a 40-hour week per week, per Sprint. You've got a 40-hour week. The next Sprint, he's going to do a 39-hour week with the team. The Sprint after that, he's going to do a 38-hour week with the team. The Sprint after that, he's going to do a 37-hour week with the team. I've got a question for you: at what point do you believe that value delivery suffered if the focus is on value delivery, delivering features? Now, that doesn't mean that for the other two hours people aren't actually working. If you think about it, a Scrum team, somebody who's focused on solving problems works 100% of the time. When I'm having a shower in the morning or when I'm... I actually do a lot of my best ideas at the gym. I go to the gym, I'm working out at the gym, and I go, \"Oh, that's a great idea,\" and I go on my phone and I message it to myself. The next idea pops in how to solve problems and figure these out is not something that you get from 100% utilisation. You need thinking time.\n\nCan you guess where he got to? He got to 16 hours per week before value delivery started to suffer because all the rest of the time is thinking time that the team needed. Thinking and noodling time. Very much stop being greedy. Stop trying to get people to maximise their utilisation and instead focus on maximising the flow of value delivery to your customers.\n\nOne of the seven deadly sins of Agile is sloth. This manifests in a number of different ways with teams, with organisations, with leadership all over the place. One of the most common elements is just not bothering to actually do the things that we say we're going to do. We say we're doing Agile, but we don't deliver working product at the end of the Sprint. We say we're doing Agile, but we have long convoluted deployment processes which are not in control of the developers. We say we're doing Agile, but we don't have an ordered backlog. All of these things are places where we say we're doing something, but really we're just kind of lazy and lying through our teeth in order not to have to do the work. Perhaps it's because somebody in leadership in the organisation has decided that thou shalt do Agile, and your product is not particularly suited to that model because it was built in a traditional... maybe it's got mainframe and all kinds of crazy stuff in there. Maybe there are other reasons why it's not viable within the confines, the structure of your organisation, the system that you're in. But I would much rather teams and people were honest and transparent with their companies and their organisations about what they can and cannot do, what is and is not Agile.\n\nI really like there's a great article called \"Detecting Agile BS\" from the US Department of Defense. If you search for it, you will find a great little workflow on it. It's one of my favourite things that I use in organisations. Here are six sloth things that organisations kind of say they do or pretend that they're Agile, but they don't actually do these things. I think these are great. The first one is: are teams delivering working software to real users every iteration, including the first, and gathering feedback? That's almost Agile in a nutshell. Are we coming up with ideas, getting those ideas in front of customers, and getting that feedback? If you're not doing that, sloth. You're not able to get things done.\n\nThe second one, and because this is the Department of Defense, is: is there a product charter laying down the mission, strategic goals, and do all members of the team understand how they contribute? That's absolutely key. How can we expect people within the context of our product, of our teams, of our organisation to make good decisions about what it is that they need to do if they don't have all the information they need? We're hiring smart, clever people, and then we're not empowering them to do the things that they need to do. We're just not empowering them. That's part of we need to communicate with them. If you don't communicate with them, sloth. If you don't actually do those things, you're being lazy. Just do it.\n\nThe third one is feedback from users turned into concrete work items on Sprint timelines shorter than one month. Are you getting things in front of your customers at least once per month? That shouldn't be that hard. It shouldn't be that hard to engage with your customers, get parts of your product in front of your customers, and then get them to tell you what they think of it. Gathering feedback from those users shouldn't be that hard, and if you're not doing it, sloth, because it's not that hard. You're just being lazy.\n\nOne I already mentioned a little bit is the full ecosystem of your project. Agile programming teams followed by linear bureaucratic deployments is a failure. Why do you have linear bureaucratic deployments after your Agile team have done the work? We might be able to make working product in two weeks, but how long does it take before that increment, that two weeks' worth of work, actually gets in front of real users so that you can close those feedback loops, break down those assumptions, validate what it is that you're creating, that it is actually value? If that's too long, that's not Agile. If you look at the Agile Manifesto, it says ideally a shorter time frame, but only a few months between having an idea and getting it into production.\n\nThe fifth one: are teams empowered to change their requirements based on feedback? The people doing the work should be able to change and adapt the requirements that they're creating in the system, the things that they're building. We want to build more of the right things and less of the wrong things. We want to maximise the amount of work not done. All of those things require the people doing the work to be able to delete, add, or change things from the backlog as needed based on those interactions that we've already talked about with the customer. If you're not doing that, sloth. Why are you not doing that? Why is somebody not addressing the problems of why you can't do that? If your organisation is saying we want to do Agile and we want to get all the benefits, but you can't change your requirements, you have to do everything that... here's the 300 things we need you to do. That's fundamentally not Agile. Welcome changing requirements, even late in development. These are just fundamental principles of agility.\n\nThe last one on the Department of Defense, not well known for being an Agile organisation, but the last one on their list is: are teams empowered to change their process based on what they learn? Not only changing the work that they're doing, but changing the way that they're doing the work. Why aren't your teams empowered to do that? Well, because people more senior can't be bothered with that. They just want to buy Agile from some vendor, install it, and then everybody just does it that way. That's not fundamentally how Agile works. Agile is about the emergent practices, the continuous change, emergence, and adaption of our processes, practices, and tools in order to be able to maximise the value delivered to the customer, the stakeholder, which may be the business themselves. Without those abilities, we can't do that. I feel like these six things absolutely embody sloth. If you're not able to do all of these things, you're not really that interested in moving towards agility. You're really not that interested in doing those things. It's lazy. It's inept. Get off your ass and fix it.\n\nOne of the seven deadly sins of Agile is wrath. Wrath occurs in many different forms in teams working in organisations. Most often, it's the inability for us to do things wrong. It's the inability for an organisation to accept that we're not going to do things right every time. This can kind of manifest in an example from recently. We need to work with an organisation; we need to create some procedures and practices around doing a deployment. We need to create procedures and practices, and the team that I've been working with wants to create, \"Here's what we think is going to work. Let's try that, and then as we figure out more, we can iterate on this policy and procedure and get it to be what we need it to be in order to be successfully in production.\" Then we can reuse that as we go for future applications, right? Future things that we're doing. But the other side didn't want to do that. They wanted to create your final draft, we'll take that, we'll run it around the 100 people that need to go see it, and we'll create a spreadsheet with all of the things wrong with it. Here are the things wrong with it that you have to go fix before we can approve it. That approval process is wrath. You can't be wrong; therefore, the end result needs to be approved before you can do it. Because if it's approved, it's now no longer your accountability, so we're not going to blame you. It's a blame culture technique. It's going to run up the chain, get approved, and then whoever's approved it at the top, it'll be beneath them to solve the problem anyway. If something goes wrong, oh, it's not the people down here's fault because it was approved. Go up. Who approved it? Oh, the CEO approved it. Well, okay then. Well, it was wrong, whatever. There's no accountability. A lack of accountability results in wrath going on in the organisation, and I think this manifests in lots of different ways. I think that's the core thing, but it manifests in lots of different ways.\n\nOne of them that I've seen happen with a team was during a Sprint review. The team was demonstrating their product and features to the stakeholders, and one of the stakeholders asked the team, \"Why did you build it that way?\" in a kind of accusatory tone, like, \"Why did you build it that way?\" What I would expect to happen would be that the product owner would take accountability for the value delivered in the team, and they would get out in front of that and say, \"Well, these are the decisions that we made. We can always go back and change them.\" Blah, blah, blah. That's taking accountability. But no, that's not what they did. Wrath. They passed the buck, and the product owner turned to the team and said, \"No, why did you build it that way?\" That's not taking accountability. I think wrath is a big reason I don't want it to be my fault. It needs to be somebody else's fault. Otherwise, something will land on me. I'll get covered in the poop from the mistake that happens. I think that lack of mistakes is a huge part of that story. So don't let your organisational culture of wrath create this environment where nobody will take accountability.\n\nOne of the seven deadly sins of Agile is envy. For me, I think envy in Agile looks like just copying other people's stuff. That's one of the ways it manifests. We believe that if somebody else is getting success with something, then of course we will get success with something. The difficulty is that that's not necessarily true at all. I'm going to rephrase that. It might be. It might be possible on the small scale. You're working with a team. One of your colleagues and another Scrum Master or another product owner is using a practice that they're like, \"Oh, this is great. We do this and this, and we have this value stream, and we're able to get good stuff from that.\" You're like, \"Okay, I'd like to try that.\" That's not really what I consider envy; that's just trying stuff. Envy would be looking at a great example of envy: the Spotify model. The Spotify model is a fantastic example of envy. There is no such thing as the Spotify model. \n\nThere was a presentation and paper that a couple of folks that were leaders at Spotify did at a conference. I think they did a couple of conferences talking about what Spotify was doing, what their journey was, and where they currently were on their journey. They were telling an example of how they did things, and everybody went, \"Ooh, the Spotify model! Let's do that!\" They absorbed that into their... \"I want this capability,\" and they go try and bring it into the organisation. But what folks don't realise is six weeks later, Spotify were doing it differently. They weren't doing what was defined in the Spotify model. A year later, they got rid of the idea of tribes and guilds and whatever else they were doing because it didn't work for them. They tried something, and it didn't work for them. That envy of, \"Oh, they're doing this awesome thing, so we need to be doing that awesome thing,\" results in a lot of... it results in a lot of FOMO, if you've heard that expression, \"fear of missing out.\" I think that's kind of part of envy. Other people are getting stuff, and you want the same stuff. That's where, at many levels, organisations fail. They fail at the process level because you look at a Spotify model or you look at SAFe or you look at any of those big models and say, \"I want that. I want to install that in my organisation.\" Then you pay lots of money to get it installed and then wonder why you're not getting the benefit.\n\nThere's the application level. I talked about this recently on a podcast. Installing an application that enshrines somebody else's business processes into your organisation is not necessarily going to be successful for you. The example I used before was SAP. SAP is a massive application tool, very common in our industry. If you adopt an SAP tool, SAP comes with a bunch of different capabilities. Let's say it's invoice processing. SAP has a workflow for invoice processing that comes out of the box. It has certain ways that it does things, and you're giving up the way your organisation does things in order to adopt the way SAP does things. Does that kind of make sense? There are some things that you can adapt in SAP, but only within the bounds of what the developers that created it allow. This means that when you see some of your competitors perhaps installing SAP and building their whole procurement processes in SAP, you think, \"Oh, we need to do that.\" If they're doing that, we need to do that. Or if our competitors are adding these features to our product, we need to add those features to our product. That's envy. That's following, not building your own path.\n\nSimon Sinek does a great video on this topic, and he talks about the why. He talks about going to two conferences: one is a Microsoft conference under Balmer, and one is an Apple conference. At the Microsoft conference, everybody wanted to know what their competitors were doing. What are their competitors doing? What are their competitors saying? What are they launching? What features do they have? At the Apple conference, they didn't give a crap about what the competitors were doing. They're like, \"This is the way we're going. We're doing this because it fits within our belief model.\"\n\nGenerosity, comfort, confidence, contentedness, friendliness, goodwill, kindness, benevolence, friendship. Those are the opposites of envy, and I think that if you can put aside what everybody else is doing and focus on what you need to do and what your customers need, you'll have a lot better time both in the process space, in the tool space, and in your organisational structure space.\n\nOne of the seven deadly sins of Agile is pride. Now, you do want to take pride in your work. We all want to do good things. We want to believe that the things that we create are valued. But I think the pride that's the sin part is blind pride. You're taking pride in something without actually measuring its outcome. We talk about this all the time for product owners. Don't just build stuff willy-nilly. You need to collect the data, the telemetry, the analysis. You have to do hypotheses. You have to create the hypothesis: \"I think this thing, if I build it, is going to add value.\" You create it, and you don't just assume that it's going to make the value that you think it is. That's pride talking. You need to analyse the data and figure out if that actually did provide the value you're expecting. You need to stop investing in something that isn't providing the return that you're expecting it to do.\n\nAnother good example of that is Satya writing down the cost of Windows Phone, writing off Nokia for $8 billion. Sometimes you have to swallow your pride and not sink more money into something that's not going to provide a return, and you just have to stop. I used to work at a bank in the UK near Edinburgh, and they created this massive piece of software that basically all it did was create forms for customers to fill out. But it was the most convoluted, unusable, unwieldy... I'm trying to think of more words to describe the ridiculousness of this software. It didn't provide the features that they actually needed, but they'd spent $2 million on building it, so they must use it. We must continue to use it. That's that sunk cost fallacy, which I think is very closely related to pride. While we've invested this much money, it must be awesome, so we must use it. Those are assumptions. I think pride is how come we assume stuff. We assume lots of things. The product owner assumes that the features, the ideas that they have are good ones. The market doesn't always agree. Developers building things in a way that entertains them rather than that actually focuses on the value delivered to the business. I've been guilty of that many times, working on features because they were fun, not because they provided any value to the customer. I've done that a ton. You need to be really careful that you don't become too prideful, making assumptions about the products and capabilities that you're building, the code that you're writing, the stories that you tell in such a way that it clouds your view of what's really going on. Because then all you're looking at is vanity metrics. You're missing out on what's really going on. So don't be so prideful that you miss out on what's really going on."
  },
  {
    "Title": "Mastering Azure DevOps: Avoiding Common Pitfalls for Agile Success",
    "Description": "Learn how to avoid common mistakes in Azure DevOps, improve agile workflows, maintain traceability, and simplify processes for better team productivity and project success.",
    "ResourceId": "jcs-2G99Rrw",
    "Url": "https://www.youtube.com/watch?v=jcs-2G99Rrw",
    "Date": "2024-04-09T08:00:20Z",
    "Captions": "I work with many enterprise organisations that use Azure DevOps, and many of them do things that either reduce the effectiveness of the features or break them entirely. I asked Dan Helm, the principal product manager for Azure DevOps, what the top four issues were, and this is the result.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years. \n\nAzure DevOps, in its current incarnation, was built for agile teams by agile teams. The Azure DevOps product team transitioned to Agile around 2013, and they moved almost overnight from a two-year delivery schedule to one of three weeks. As of the time I recorded this video, they have completed 235 sprints and delivered 235 times to production in this new model. \n\nThis was not always the case, and many of the tools, features, and capabilities which persist from the Visual Studio Team System days of the product are much more relevant for companies that are not using agile practices. When Microsoft created Team Foundation Server back in 2006, the intent was to create a connected experience for all of the tools and capabilities that an engineering team would use. The idea was to create a holistic connected experience from ideation all the way through to delivery, with full traceability of how and why things were added. \n\nHowever, back in 2006, Microsoft found this to be at odds with the organisation's general outlook, and they ended up with a very Microsoft technology-only focused system. Fast forward to 2011 and the move to the cloud, and suddenly those limitations were much more prominent and needed to be fixed. There's a fantastic paper from Buck Hodges, director of engineering for Azure DevOps, on this, and I'll put a link in the comments below. \n\nAs Microsoft transformed TFS to become a cloud product, it also addressed many of the Microsoft-centric issues that held back its adoption. The tool started to reflect the original dream, and the idea of 1ES, or one engineering system, was born. The intent of 1ES, as with the original team system, was to reduce the complexity of product delivery by ensuring that everybody working on a product knew where their stuff was: work items, builds, release environments, and more. \n\nToday, Azure DevOps supports any technology from any stack and has enabled that 1ES dream. However, as with all products, users use them in many ways that were not envisaged by their creators. But with something as complicated as Azure DevOps, there are a number of things that users do that go against the very intent and paradigms of the tool itself. \n\nI'll show you the top four issues that give the Azure DevOps team palpitations. \n\nSo the first item that has the Azure DevOps product team pulling their hair out is same-level hierarchy. Creating a hierarchy of work items that happen to be exactly the same level. So let's take a look at what that looks like. I'm going to show a simple example, and then we'll go make a customisation and show a more complicated example. \n\nSo here I have my product backlog. I've got my product backlog items. I have under here a task, which is a sub-item. So I can quite easily go in here and add a new item. I'm going to call it a child, and I'm going to add a task. Click okay. You can see I suck at that, and now I have two tasks underneath this item. But what I've done over here is I have added product backlog items as children of product backlog items. \n\nSo it is represented on this board, and I should be able to... can I still move this around? Oh, I can still move this around here. But when I go to try and grab one of these items, I can order it inside of the context. Oh, and there I've managed to break it. This is why this is a problem. \n\nWork item 4052C can't be ordered because it's appearing in the same category. So if I hit refresh, it'll have gone back to where it was. There we go. So I was just trying to order within this category, and it jumped out, and that was the problem. If I go and try and order it over here, I will immediately get that error. That's the one I was going to show you. \n\nAnd now I can't do anything with that until I refresh, and it will go back underneath because it has a parent-child relationship. You can't order that hierarchy."
  },
  {
    "Title": "From Chaos to Clarity: My Journey Through DevOps and the Three Key Challenges to Overcome",
    "Description": "Explores a developer’s transition to DevOps, highlighting key challenges: cultural change, toolchain automation, and continuous learning for effective software delivery.",
    "ResourceId": "icX4XpolVLE",
    "Url": "https://www.youtube.com/watch?v=icX4XpolVLE",
    "Date": "2024-04-04T11:34:59Z",
    "Captions": "So I first encountered DevOps as a developer at Marl Lynch, but I experienced the frustration that created the need for DevOps in many jobs beforehand. I started my career back in the early 2000s, 2001, and I was working for what was then called New Media agencies, which are just web development companies these days building websites. We did all the things you shouldn't be doing. We deployed from our local machine, we edited in production. We did all of those crazy, nasty things because at the time, continuous integration wasn't really a thing. Oh, it was around right at that time in 2001. I think continuous integration had been around for about nine years, but most people hadn't really heard of it. Most people weren't really doing it around then. Your experience will absolutely vary. There'll be lots of people that were doing it, and I experienced the frustration of mistakes, of deployments that failed, of overwriting things you shouldn't be overwriting, all of those kind of things.\n\nWhen I moved to Marl Lynch, which is a big investment banking company, the tools were different. You didn't have access to production. Once it's production, you only had access to specific environments. You had to have specific deployment packages. You couldn't make changes to certain types of systems like SQL Server. You had to give them a patch to be able to apply. When you're in those restrictions and you try and do the same thing that you were doing before, because when I arrived at the part of Maryland that I was working at, they didn't have any automation. They didn't have any of these things. You experienced even worse frustration because you give somebody who doesn't care one jot about your product, some DBA in I don't know where they were. I know that Marl Lynch had five and a half thousand DBAs in the organization who you would give scripts to, and they would go run it against the databases, and nobody else was allowed to go near the databases. \n\nBut it meant that you would give them it. It would take them a half day to get to it, and they would tell you that the script didn't work, and then you would have to go tweak the script and give it to them, tweak the script and give it to them, and it would just be a nightmare. It would take ages to get anything deployed. So what we started doing was thinking about how we could do automation, how we could create a more slick process where at the very least we were able to get into production with less hiccups. There wasn't a lot of DevOps going on back then. It was called application life cycle management, and application life cycle management was both good ways of doing things and bad ways of doing things, but just under that guise of we're going to be actively managing these applications. \n\nIt's the term that then morphed into DevOps a little bit later on once DevOps was coined. So what we did was we introduced tools, we introduced ways of doing things, we introduced automation to our story, and I started using at the time Team Foundation Server as part of that integration automation. Everything linked together, traceability story for application life cycle management. We made it a little bit more professional. But while that was my kind of baptism into that very different environment where there were a lot of controls, we still didn't do it very well. It really wasn't until I started working more heavily in the Team Foundation Server community and I became a Microsoft MVP that I started engaging with other people who were in that category and really working towards making things more effective. \n\nWe started talking about how we could do the automation, how we could enable getting from code all the way to production without having people in the way, messing things up or other stories in the way, getting in, you know, other biases in the way, getting in the way of the thing you're trying to deploy. That was really my introduction into proper DevOps. It was as a Microsoft application life cycle management MVP, working with other ALM MVPs within that category to really focus on that story. I found that I seemed to have an affinity for that, an affinity for engaging with development teams and helping them get better at that continuous delivery, continuous integration tools. Tools are not all of DevOps. Tools support DevOps, but they're definitely a common route into towards DevOps because I really think of DevOps as the other side of the agile coin. \n\nI.e., agile was something that was created by some people who were definitely engineers. You think of the signatories of the Agile Manifesto, but they were also much higher-level engineers. They were managers, and they were working on big products and projects, so they weren't just software engineers building products. It was a much bigger thing, and they really thought of, came up with this idea of agile from that perspective. Some things seemed to be a little bit missing that were only implied in the Agile Manifesto but weren't actually explicitly stated. This is the thing you need to worry about, and that for me, this is how I feel about it. I think that's why DevOps was born. That's why application life cycle management became DevOps, is because we really wanted folks from the engineering perspective who were trying to get to the same thing that the folks from the Agile Manifesto perspective were trying to get to as well. \n\nThat engineering focus means that there's a lot more reliance, engagement, and support on tools, on processes, on systems because that's how core engineering folks kind of think. That story kind of culminated in me co-authoring a book for Rocks called one of the big red books, engineering books called Professional Application Life Cycle Management with Visual Studio 2013. That kind of solidified my progress towards supporting that story. I don't remember when it came about. It might have been around that time. It might have been a little bit later. A great DevOps person called Donovan Brown, who did eventually work for Microsoft, came up with a definition of DevOps that I think makes the most sense. It's a little bit tools-focused, but not as well. I quite like it. \n\nDevOps is the union of people, processes, and products to enable continuous delivery of value to our end users. So when you think about where DevOps came from, application life cycle management, the engineering side of delivering products, and that move towards realizing, and this was a big realization for me as well, is that tools—sorry, let me rephrase that—tools don't solve problems; people do. People, with folks like myself with an engineering focus, very much focus on the tools and the code and the engineering, and we sometimes forget that the people are part of the story as well. We need to bring the people and the processes and the products together to create our system that allows us to build effectively, build products, and continuously deliver products to our end users.\n\nThere are kind of three primary challenges in that story of DevOps, which is what I experienced as I moved through them myself. I think the best way to experience them is to move through them yourself. We learn by doing. The first one is that culture and collaboration shift. If you think of the Agile Manifesto, people and interactions are more valuable than processes and tools, and that's absolutely true even on the DevOps side. But DevOps, to a much greater degree, acknowledges that processes and tools support the people in doing the things that we need to do. I keep thinking of the Night Capital Group, right? That story about the investment firm listed on the New York Stock Exchange, $450 million cash in the bank to support their business. \n\nThey had a failed deployment because they were manually deploying. They had poor quality code. They had a poor quality deployment with just one person, and something went wrong that they couldn't figure out. They started hemorrhaging money the moment they did their deployment and ended up, by the end of the day, they managed to figure out what the problem was with their deployment and fixed production, but by then it was too late. They drained their capital reserves. They didn't have any cash flow anymore, and they had to file for bankruptcy. The reason we know so much about why they failed is because the bankruptcy filing has to list why they're going into bankruptcy, and it detailed the problems that they'd figured out they ran into. They'd been reusing code that they thought wasn't used for anything. They had not been focusing on their architectures and building up software quality, and they had one person doing the deployment with no backup or support to validate what it was that they were doing. \n\nThe person accidentally deployed to seven out of the eight servers that they were deploying to. That's roughly the story. So that cultural shift on the people side of getting people on board with this idea that while tools and processes don't solve your problems, they're there to serve the people's needs and enable them to make things that are really complicated and difficult, like deploying software, can often be really complicated and different. I build and maintain a product still, and I think there's 20 steps in building the product and maybe five or six steps in deploying the product, and they all have to be done correctly in order for the output to work. I don't want to have to walk through that list every time. Not only would it be time-consuming, but I'm likely to miss stuff. I'm likely to have my eyes go from step two to step four instead of one, two, three. \n\nThat happens all the time. I did training years ago for a bunch of testers, and I had made the assumption that if anybody in the world was able to follow a set of steps that they created to validate that a thing happens the correct way, it would be people who were trained as testers. But as it happens, that was not true. We had labs that they were doing in this training against a DevOps, and they would constantly go, \"Wow, this isn't working. I can't, this doesn't work. This is broken. Your lab's wrong,\" when in fact they missed a step. It's even professionals whose job it is to follow those steps when you're running things manually also miss those steps. It's just the way the human brain works. It's the way things happen. We're not going to be able to fix it by focusing on the people, but we can build automation to help support that cultural shift. \n\nBut people have to accept that the people that are part of your organization have to accept that automation is the key, that automation in defining those processes is the key to supporting that story. Lots of organizations still prevent us from being able to deploy directly to production using automation. What we ideally want to do is go from developer checks a line of code into source control. It ends up in our deployable branch, whatever that is. We want to go from there all the way to production and rolled out to everybody without any human intervention because that's our production line. The key shift here is from development to delivery. Think about the way car companies build cars. They've, and Toyota kind of pioneered this. \n\nToyota pioneered the ability to deliver cars. They're taking something that they've designed and created and that works and delivering lots of it into production. That's their production line. We can apply those ideas and mentalities to our DevOps production line, which is from we've created the thing and we validated that it works all the way through, and we can actually do the validation as part of that. But all the way through to getting it in the hands of real users. That's not only that culture shift but also the toolchain integration and automation that needs to happen in order for that to work. Once you've got that toolchain and automation in place, we're able to do this thing. We then need to figure out how to do it better. How do we optimize that production line to make it more effective? \n\nThe story I always think about is the Azure DevOps team, right? When they were the TFS team and they were moving towards continuous delivery from their waterfall mindset, the head of that group, Brian Harry at the time, decided to run a little test. They were creating a version of their product, and they had shipped their product all the way to production. It had gone through the gauntlet of lawyers and validation and signing and all of the gobbin that has to happen in between. It took them, I don't know, 10 weeks, 20 weeks, whatever it was, to get their product to a state where it would pass the entire gauntlet that it had to go through, and then they had a deployable version. \n\nHe called it a null build. There were no changes to the code base. We're just doing the same thing again. How long does it take to go through the process? You know upfront every one of those checks, so they had a concerted effort to look at their toolchain, to look at how they did the build and process, and what of these checks could they automate into the process so that they can then just give the artifacts and they sign them off? Or even if we have those artifacts and we pass these checks, will you automate that sign-off? Will you, as the person who has to sign off over here, just say, \"I'm happy if you followed this process. I'm happy it all worked. All I was doing before was checking that you'd followed the process manually. If you can automate that, I'm good to go.\" \n\nThey worked through that story inside of the organization of convincing all of those different people, and the build started to chunk down to a much smaller capability. I think they got it down that way to 48 hours was their automated pipeline. Then they started thinking about the advanced stuff. If your biggest problem is going from eight weeks to 48 hours, focus on that story. Getting all the approvals, getting all the engagement, bring it down. Now you're at this 48 hours. What's the next biggest thing we need to deal with? That's part of that cultural shift. Not only have we got the toolchain involved, but we've got that cultural shift of what's the biggest problem? What's the most length of time that our process is taking, and how can we make it shorter and engage in that story? \n\nThen you start thinking about more advanced stuff like our advanced automation and orchestration. The next thing that particular team focused on was why does it take 48 hours to run our tests? Well, we need the whole system up. We need to feed it with test data, and then we're orchestrating across the entire system to do those tests. Is there a different way? Perhaps we can convert all those long-running tests that need data loaded, and maybe we can convert as many of them to unit tests as possible. So they worked for another four years getting rid of flipping that pyramid, right? From having most of their tests being the long-running automation and a few unit tests, flipping that pyramid until, in fact, after four years, all of their tests were unit tests, and they got that 48 hours down to three and a half minutes. \n\nThat's three and a half minutes for a developer to validate that the product that they just made changes to still works the way it's intended to work. That's a total game-changer for organizations. Think about if you make a change and you don't know for 48 hours whether it was the right change or not, or it worked or not. Do you work on other stuff and perhaps introduce more breaking changes, or do you stop and wait for that result and then continue on? That delay is a huge amount of waste in the system. Again, lean product delivery, right? You're thinking about how you do that. Once you do get there and you're confident you can get things into production, what about monitoring, logging, and observability? \n\nAre you able to see what's going on in production? Are you able to head off and find and trace issues before they become customer problems? Are you able to go and find out what happened when something goes wrong? Do you have the transparency that you need in your product? That's a huge part of that toolchain and automation that it takes many, many months or years of effort to get your product to a state where you even have time to focus on that stuff. So monitoring and logging is really important. That's telemetry, right? How much telemetry do you get out of your system? I only know the stats from about five years ago, but about five years ago, Visual Studio, the big Visual Studio product, was sending 7 and 12 terabytes of telemetry to Microsoft every day. \n\nThat's telemetry on what features developers are using, how long the things that we're using take, how long it takes to load, what buttons we click, all of those things so that they can build a better product. Because then you start thinking about, well, if we've got our advanced orchestration, we've optimized our pipeline, we've also optimized, we can see what's going on because we've got telemetry and logging, and we can observe in almost real-time what's happening in the system, then we can start talking about optimizing for scalability and reliability. These are all part of that DevOps story. \n\nThen there's the third thing. So we had cultural shift and collaboration. We had toolchain integration and automation. The third thing is continuous learning and skill development. None of that stuff I just talked about comes along overnight, and none of that stuff everybody already knows in your organization. Even if you start hiring in people that have DevOps skills, what do they really know? What do they really understand? We need to build these skills inside of our organization. Don't think you can buy DevOps and install it, right? You can't just bring in a consulting organization, tell them to install DevOps in your organization, and expect that to be the outcome. \n\nThe people in your organization have to have gone through the journey and had the battle scars to understand why they do things differently. They're then incumbent in your organization, in your organization's culture, and they're able, as new people come in, to reduce the number of scars that the new people need inside of your organization in order to get on the same track. Does that make sense? It's kind of like why we train recruits going into military organizations. You train them so that they don't make the mistakes that people made in the past, things that we already understand aren't going to work out well. That's why we train them, so that having that incumbent knowledge in our organization and then having people come in and train and become part of that organization and that culture in our organization is really important to that story.\n\nThat's kind of where I got to over, I guess, six or seven years. From 2006 to 2013, 2013 is around when I did the application life cycle management book. That was my story to that point. But then, as you learn new stuff, sometimes we do things because we're told to do things, and we don't know why we're doing things. In order for true learning to happen, we have to understand the theory. That's actually why training theory is so important inside of organizations, right? Because in order for the people in your organization to have the knowledge and skills to be able to make the best decision in circumstances they've never encountered before, because we're doing complex cognitive work, we need to understand the theory of why those things are true.\n\nThings like Little's Law and the theory of constraints are part of that lean story. If we understand those underlying theory and concepts, we can start doing stuff and learning. We feed that learning loop through our theory, and it solidifies our understanding because the theory is the thing that helps tailor our way towards knowledge and understanding. The thing in DevOps, if you've not heard of it, is something called the three ways of DevOps. These are kind of the core tenets, I guess. They're probably not universally agreed, but these are the core tenets in the way I think about DevOps. This is that perspective shift to what's the theory that we generate, the body of theory we generate that we then build all this other stuff on top of because we've seen it working in organizations.\n\nSo then what are the commonalities? What are the theories that we can understand that will then work in everywhere else as well? Because everywhere else is different, so the theories are the bit that connects it all together. The first of the three ways of DevOps is systems thinking, amplifying feedback loops, and a culture of continual learning and experimentation. Systems thinking is really, really important. We can't think about systems in isolation. If you think about your software as the system, and that's what I'm working with, what about the people that are doing things around your system? What about the automations that are in place that build and deploy your system? The system is your entire organization and everything that impacts on your system. \n\nSo we have to look at all of those things. We have to take the blinkers off and raise that impact because if we don't look at systems thinking as a wider view as part of DevOps and Agile as well, right? If we're not thinking about systems and we think about just one small part, we might make optimizations for the part that don't, in fact, result in a better outcome for the entire system. We end up making incorrect choices that maybe inhibit the rest of the system. I'm not sure that I'm explaining that well. Let me think about how I can explain that better. There are definitely things that I've done where I've made a change to the way I do things on the small scale that means that the bigger scale of things is harder to do.\n\nAn example of not thinking of the big picture in the IT world is where organizations have a centralized security department. The security department, in order to optimize their world of security, decides that everybody has to use, for example, a virtual machine. In order to maximize our ability to be secure, and this makes perfect logical sense, we want to 100% secure all of our stuff. Okay, nobody's allowed to do work remotely. In order to interact with any of our systems, you have to be on our network, on our hardware. Therefore, we're going to prevent anybody from doing anything else. Or you could do what Microsoft does, for example. When you're working with Microsoft, you can buy your own physical hardware, join your own physical hardware to their domain. They then take control of that hardware and validate that it has all of the security requirements that they need. \n\nThey can remote wipe it, and suddenly you're able to work with any local machine on their systems and be able to interact with a local machine. You've got full low latency access to everything, moving stuff around, that kind of thing. That is more effective. That's a let's take security with a wider picture of everybody needs to be able to do the job that the business requires rather than focusing on security as a blinkered view of just that thing. That's an example of systems thinking. It's widening that view and looking at the wider scope of things. The second one is amplifying feedback loops. We need to be able to not only have feedback loops but how do we maximize the value in those feedback loops? \n\nHow do we increase our ability to do stuff with those feedback loops? A great example is when you're using telemetry. Do you have the right telemetry? Not just do we have telemetry from our product seeing how people are using it, but do we have the right telemetry with the right timings of the right things? How do we enable ourselves to get the right data to then make different choices on the way we build and deliver our applications to customers? Those feedback loops are hugely important. In Scrum, we have loads of feedback loops implementing that empirical process control system. \n\nThe third thing is that culture of continual experimentation and learning. How do we enable people to not get blamed for mistakes? We want to take accountability for our actions that we're going to be doing as much of the right thing as possible, but in order to push the boundaries, in order to experiment, not all experiments are successful, and that's normal. It's normal that not everything goes well. So how do we create an environment within which we're able to not just punish people for things going wrong but explore what was the root cause of things going wrong? How do we change the way our system works in order to enable less of those things that go wrong to happen? \n\nHow do we change the way we do things in order to minimize our recovery time and maximize our learning from the outcomes? These are the most important things in application life cycle management, which became DevOps, and that story of the other side of the coin from Agile. Agile coming from the business perspective, DevOps coming from the engineering perspective, both focused on trying to solve that same problem. At Naked Agility, we love DevOps. DevOps is how we engage with our customers. It's how we enable them to be more effective. It's how we get people working together, a combination of DevOps and Agile practices, which quite often are the same practices. \n\nIt enables us to help teams because there are well-known metrics that we can use in the DevOps space. If you look at the DORA report, you'll find a bunch of metrics that you can use to get an understanding of where we are as an organization. Are we focused on the right things? Are we looking at holistic systems, or are we looking at isolated things? Are we amplifying the feedback? Can people even amplify their feedback loops, or is everything restricted and locked down, enclosed, and there's no experimentation, no learning, no ability to change anything? No ability to do anything with those feedback loops, in which case people will stop using them. \n\nThose are the things which enable organizations to not only understand where they are right now, organizations and teams, to understand where they are right now, but what's the next most important thing they could be working on? Or what's the next thing on their backlog of increasing their capability to successfully and continuously deliver products of the highest possible value? What's the next thing they should be focused on to enable that to happen much, much quicker? If you're trying to integrate DevOps into your team or organization, then Naked Agility can help you focus on the three ways and enable you to get the value that you and your customers deserve. Get in touch below."
  },
  {
    "Title": "Maximise Your Scrum Process: Leveraging Azure DevOps for Agile Success",
    "Description": "Learn how to customise Azure DevOps to support Scrum teams, manage backlogs, plan sprints, and improve agile workflows with practical setup and process tips.",
    "ResourceId": "5IBKxYLA494",
    "Url": "https://www.youtube.com/watch?v=5IBKxYLA494",
    "Date": "2024-04-03T17:21:43Z",
    "Captions": "As your DevOps was built for agile teams by agile teams, there are many ways you can use it to support your agile practices. Here I'll show you how to use Azure DevOps to support your Scrum process from the perspective of Scrum.org and the teams at Microsoft that created it. The focus will be on using the Scrum framework coupled with value-focused, hypothesis-driven, flow-based practices.\n\nHi, I'm Martin Henwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nWould it surprise you that there are no metrics in the Scrum Guide? Would it further surprise you if there were no user stories, story points, planning poker, or burndown charts that were part of Scrum? These are and always were optional practices that many people found value in their way of working, but that you don't have to have. Just because you use a tool or practice in a previous context doesn't mean that it will fit a future context. The practices that you use and how you use a tool to support your team's practices and behaviours will add or detract from achieving the outcome and impact that you're trying to achieve. Scrum is just a container for other practices, which can be helpful or unhelpful.\n\nI'm generally pedantic when teaching and pragmatic when implementing, so everything you see here would be guidance based on the common cause, not just rules to follow, with some pragmatism for Azure DevOps' own idioms. It's important to realise that everyone and every team will have dumb ideas that sound good at the start. The most effective teams are the ones that are able to let go of an idea when they find that the evidence does not support it.\n\nSo let's take a look at how we can use Azure DevOps within the context of professional Scrum for teams that build software products. In order to understand how I've got this set up in Azure DevOps, we're going to take a look at how Azure DevOps constructs what it is we're going to be looking at. In Azure DevOps, you have an organisation; you can see my list of organisations on the left-hand side here, and inside of each organisation, you have a set of projects. \n\nWhen you create a new project, you are able to select what process to use. Now I've got a bunch of custom processes here to select from. I've created one based on the Scrum Guide, which I'm going to show you a project that's created with that one. The way that's constructed, you will all be able to see this even if you can't edit it, but if you open the organisational settings on the bottom left and go to process, you'll then see all of the processes that are available. \n\nOut of the box, there are core processes of Basic, Agile, Scrum, and CMMI. Those ones are locked; you can't edit them, but you can create inherited processes. I've created a process based on it, and this one here I'm actually going to make the default. That should be set as the default process; it's my custom process that I've created based on the Scrum Guide. \n\nWhat I've done is I have disabled Epic and Feature. I don't want those things; I don't want any hierarchy in my backlog. A product backlog is a flat list of things to be done, and Epics and Features and User Stories are just states of a product backlog item. They're things that a product backlog item can be. \n\nIf you check on the backlog levels, I can't remove Epics and Features on the backlog levels. I'll show you how I've disabled them, but I've disabled the work items so they can't be created. On here, at the same backlog level, I've got backlog product backlog item, and I also have Bug, which I've put at that level as well. I know that you'll see there somewhere else you set that. I have tasks too if teams want to use tasks, but in general, it's whatever they want to do. \n\nEach of these backlog items, if I go back to the work items and I open up the actual work item, has a set of fields. I've added one custom field; you'll see that in a moment. I've added one custom state and removed an existing state. I don't want it to say committed; I don't think that reflects the new Scrum Guide. I know it used to say committed in it, and it's a little thing, but \"In Progress\" is a much better state. \n\nBecause I have Bugs and Product Backlog Items at the same level, I've also made exactly the same change for Bugs as well so that they're going to be the same at the same level. That's the custom process that I've created. I'm going to click on my Scrum demo and open up my project. \n\nWhat you will most likely be concerned about, if you're an engineer, is whether you're going to have access to all of these other things as well. But for most people that are not engineers, we're going to be talking about boards, so I'm just going to click on that and open boards. By default, it's just going to show me all the work items, and you can see when I click \"New Work Item,\" I have Bug, Impediment, Product Backlog Item, Risk, Task, and Test Case. Those are just the basic work items. I've removed Feature and Epic.\n\nIn Azure DevOps, there's a bunch of tools built on top of the basic work item tracking system. So what we're going to take a look at is how we can do some of the things that we would normally expect to do as a Scrum team within the context of Azure DevOps. \n\nFirst off, there are some logistics that we want to set up before we get started. This is where this is something that maybe your admin will do. I prefer that everybody on the team has permission to do the things that I'm going to show you, but in the context of the project, there are two things that you definitely want to configure: one's area path and one's iteration path. These are very confusing, brand new, possibly terminologies, but area path is the breakdown of teams and what that looks like, and iteration path is a time-based breakdown.\n\nI'm going to open project settings; just going to pop open there in the top right. So we're going to the project settings, and you can see the name of the process, remember Scrum 2020 there as well. On here, on the left-hand side, there's project configuration, so I'm going to go into project configuration first. You can see that my current Sprint setup, which may or may not be a good idea, but what I have is a season-based model set up here. \n\nI have two halves to the year; I have the first half and the second half of the year, and inside of that half, I've got the 11 Sprints that make up that half. I've just started adding a couple of Sprints in here, and you'll see that each of these Sprints has a start and an end date. That's a subset of this higher-level item. I've set it up like that; it might be a bad idea, but that's what I've done. \n\nI then have three teams; well, technically I have four teams. I have a Kanban team, which is the area path, and this is the team that it's assigned to. I'll show you where that happens in a second. So I've got Scrum Team 1 and Scrum Team 2 and Kanban Team 1, and then I've got Scrum demo, which is the top level of this setup. \n\nThat's my areas and iterations that I have set up. I then go to my team configuration just to validate that things are all in the right place. This is where you can see the Epics, Features, and Backlog Items. By default, when you create a team, it's Backlog Items and Features. I'm going to take that Features out, and now that will not be shown for this Scrum team at all. \n\nDown the bottom here, you can see how I'm going to work with Bugs. I always pick Bugs to be managed with requirements. I have a blog post called the \"Bug as a Task Anti-Pattern\" blog post that I'll put in the comments that you should go take a look at and make a decision. I've decided that I want Bugs managed with requirements. You can also choose Bugs to be managed with tasks, and you can also choose we're not going to manage Bugs on the backlog or boards at all; we're going to keep them separate. \n\nI don't recommend that either; Bugs are just backlog items that we need to work with and deliver and do stuff with. But in this context, you can see at the top here I've got the context of my team, and what I've got is I've got iterations that are assigned to this team. This is irrespective of the iterations that we've created; this is which ones are assigned to this team. \n\nI've gone ahead and assigned iterations 1 to 10 to this team, and you can see the dates don't overlap there. If I click on areas, you'll see I have one area assigned to this team; it's the default area, and it's for Scrum Team 2, which matches the team name. So that's very straightforward and very simple in there. \n\nIf I were to switch to the kind of parent team that is looking down across everything, I have the main area path, which is the same as the project name here, and I've got sub-areas included. This team will be able to see all of the sub-areas, and in the iterations, instead of adding the individual Sprints, because this is like the higher-level overview, I'm adding the seasons. \n\nIf we're planning the seasons, we go to this level; if we're planning the Sprints, we go to the lower level. Now you have an understanding of hopefully where to go look to find the configurations, where to set up some of the things that will manage the way your team looks. Each team has its own area inside of this project, and you can control what columns are available on your backlog, what columns are available on your boards, how things are laid out per team. \n\nThe states on the work items are the same across everybody, so if we were doing reporting across a bunch of Scrum teams, we would use the state-based transition. If we're doing reporting on one Scrum team, we would just use the column-based transition. \n\nI'm going to just go to the backlog first for this team, which team I am Scrum Team 2. Perfect, that's the one I want to be looking at. The first thing that we're probably going to look at is refinement. How do we do refinement in Azure DevOps? Well, refinement is all of the work that we do against the product backlog items as opposed to the in-Sprint work, which is against the product itself, right? That results in the increment. \n\nEverybody on the team, the product owner, the developers, perhaps other people involved in this story, are going to be doing both of those things all of the time. Some people will spend more time in refinement and less time in delivery; some teams will spend more time in delivery and less time in refinement, and perhaps it will change over time. That's just the way it is. \n\nDuring refinement, you're going to be looking at these backlog items; you're going to be understanding what's coming up next, right? How far into the future are you looking? You might do some long-term planning; you might do some dependency management around these items, and your main friend here is the tagging system. This is your main friend; we want to be able to manage this backlog by filtering the items. \n\nFiltering is hugely important because it allows us to group items that might not be together in importance but are together in another context, another type of slicing. For example, in here, I have a bunch of tags already added to these items, so I have a bunch of items that are associated with a particular product that we're integrating in. These are integration points. \n\nI have some different categorizations of work that might have more importance for certain groups of people in here as well, so they can filter by their slice. I have some work in here that is to do with a particular feature that we might be working on, and I have some external stakeholders to our team. We've got some external stakeholders to our team, and some of them are running projects that go across the entire organisation and a bunch of different products. Our product might have some work in it that we're doing to support them with our product, and they want to be able to see what's going on, ask us questions, and we want to collaborate on those items. \n\nSo I'm going to show you how I can do some of those things in here. Right now, this is my backlog. This is an ordered list; no two have the same order number, and I can drag and drop these around and put them in a different area. If I have a really big backlog, don't have one of those; practice lean inventory control. But I can select a bunch of items, and I can move to a particular position, like send to the top or send to somewhere where we're going to then do some fine-grained checking. \n\nDon't have that many items that need to do that. If you can't actually grab it and drag it and scroll, you probably have too many items in your backlog. That's probably a good litmus test there. So here I'm going to be filtering. Over on the right-hand side here, there's a filter button; you can see that highlighting. I'm going to click on filter, and I'm going to do refinement, and we want to filter by the thing that we're looking at. \n\nThe project manager who's running this cross-cutting project has been feeding some items into our backlog and is asking us, can we collaborate on some items? Can we figure out if we can, you know, they need to be different, break them down? Do we have the right thing? We want to have a conversation, so we're going to get in a room, do a little bit of refinement, and I'm going to click on tags, and I'm going to find Project A. There it is, and I'm going to filter by those items, and we're going to have a conversation about them. \n\nIt will show the actual order relative to right, so this is number 11 on the total backlog. Number one and two are not part of this project. If I turn the filter off, take the filter off, and take like, where's Project A? I'm going to put it way down here, and then I'm going to filter by Project A again. There we go; you'll see there's that 24, 10, and 24 because I just moved that item further down. \n\nSo now we can have a conversation about relative to the rest of the backlog where these things are. I can't drag and drop these things around anymore; it won't actually let me do that. I'll drop it, and nothing will happen, but I can have a conversation around these items. We can open them up; we can edit them; we can break one down into smaller ones; we can delete that other one. We can do anything we want at this. \n\nWe might do some forward planning; we might assign them to different Sprints, so it's quite easy to do that. On the right-hand side, I have a planning panel. If I click on more actions, view options, I can turn on and off planning down here. Planning is quite useful, so I might say that these two are in Sprint 7. These ones here I probably can't; oh, I can do that. There we go; they're going to be in Sprint 8, and these two are going to be in Sprint N. \n\nThat's through the conversation we've been working with the whole team. We've taken a guess at what these things are, so this is not, they're not actually going to be in that Sprint. The team still has to have a conversation during Sprint planning, but I might be looking out a little bit into the future, seeing what's going on, figuring out what's happening. \n\nNow my filtering is way more powerful than that. I'm going to take off Project A. What I might have is I might say, well, I want to see Feature A, and here's Feature A here, and I want to say, and Compliance Check, there it is. There's only one item in Feature A for Compliance Check, but if I take off it, you can see the rest of the Compliance Check items here. \n\nSo you can create multiple slices; you can do ORs or ANDs in how you view these slices in your backlog so that you can decide what it is you're doing, what you're opening up, what you're editing, and what you're doing in here. You can tag people and have conversations and track those things as you're going through. This is a really powerful tool for storing the result of your refinement. You still have to do the refinement.\n\nThe first event that you're going to do as a Scrum team is Sprint planning. When you're planning your Sprint, just as in refinement, you're going to need to look at the contents of your Sprint. You're going to need to have a conversation about what your Sprint goal is going to be. You're perhaps going to store your Sprint goal somewhere, and then you're going to have a conversation about what do we need to do to fulfil that Sprint goal and then what other sorts of work are we going to take into the Sprint. \n\nAzure DevOps is going to store the outcome of that conversation, but you still need to have that conversation, facilitate that conversation as a team. We might decide that in order to facilitate this next Sprint, the most important thing that we can be working on is the group of work that results in Feature A. We think we've got enough together to be able to create something viable value that we can ship in our product, and we think it fits quite snugly into our Sprint with lots of other room for other things that we're going to do. \n\nSo I'm going to filter to Feature A, and here are the items that we're going to do. We can see there's a couple of items that are left over from the previous Sprint. Sprint 6 was the last Sprint; our current Sprint that we're going to be working on is Sprint 7. What I actually want to do is move all of these items into Sprint 7, so I'm just going to drag and drop, and you can see that's updated that iteration path. \n\nSo you can see there's what, 1, 2, 3, 4, 5, 6, sixish items, but we have 11 items total in the Sprint. That's fine; these are the things that are going to be our Sprint goal. We're going to commit to our Sprint goal. If anything happens that's unto, we're going to focus on the Sprint goal, and other things drop away. This is our one most important thing that we're going to do. \n\nYou might have multiple things that you're going to do in a Sprint, but pick one as this is the one that we're going to prioritise over all other things. If we have to make choices, hopefully everything goes great and we don't have to make choices, but not everything always goes great, right? \n\nSo those have been moved into the Sprint. I can actually now click on Sprints on the left there, and it should default to Sprint 7, which is our current Sprint, and now I can see just the work that has been assigned to the Sprint. These things should be approved; I've not actually done that yet, so I'm just going to edit that state and move them to approved state. \n\nBecause why would you bring stuff that's not approved into the Sprint, right? That's data cleanliness problems creeping in, and you'll see that a few times as we go through. I'll always try and fix it as I go because the demo gods, right? So we do have a couple of items that were brought over from the previous Sprint. This is totally fine if you have a flow focus, and you're modelling the flow of work. \n\nSprint planning is the end of the Sprint; it's not like a hard deadline. You're going to have activities; you're going to have changes that are going to take multiple Sprints to be able to deliver. If you're three days before the end of a Sprint and there's the next most important thing that's the product owner, there we have a conversation. The next most important thing is a six-day task. Sure, we can start it, and that's totally fine, and it will just flow into the next Sprint. \n\nThat is predicated on us having awesome engineering practices where we can hide that behind feature flags so we can still continuously ship to production. We still have a usable working increment, at least for the Sprint review, while still continuing to do work. But maybe we take that cut of the usable working increment if that's how we're working. We take that cut prior to starting that work, and that's the version that we're going to show at the Sprint review, and then we're going to start some more work that is going to lead into the next point. \n\nThat's totally, totally fine; do it as you see fit as long as you have that usable working increment that's of value to somebody to show at the Sprint review. All of that is okay; it's okay to do that. \n\nSo here I have these items; we can reorder them inside of this Sprint backlog. That will affect the product backlog, so just be careful with that. We can maybe create some kind of plan to complete these items. If I add, I should be able to add tags on here. Tags. Oh joy, that's... I don't know why I did that. Joys of JavaScript. \n\nLovely. So we'll be able to see what features we've got. I should be able to filter these by tags, so there's the important stuff for Feature A, and then there's all of the stuff that we're going to be working on during this Sprint. Great, we're going to create a plan to complete those items. That could just be a whiteboard plan that we agree as a team, or if you do want, you can create subtasks for these items. \n\nYou can do that by clicking on the taskboard here, and in the taskboard, you'll see the items pinned to the left, and you're able to add tasks to this board. You don't have to do tasks; I generally don't recommend using this board apart from for planning purposes. It's quite useful for that. In general, I'm going to be focusing on the flow of value through the system. \n\nBut during Sprint planning, I might indeed use some of these ideas. The second event that you're going to hit, and you're going to hit it loads of times, is your daily Scrum. When you get into your daily Scrum, probably one of the better views is the board view. So you're going to be looking at this board and seeing what's happening with the flow of work, trying to identify if there are any issues in your board. \n\nYou can remember if I marked all those items as active and I've hit the WIP limit because I'm silly and I haven't built my board very well at the moment, but this is just the default board. If you remember the states on the work items: new, approved, in progress, done. If you're using flow metrics, then the flow metrics that come out of the box in Azure DevOps, if I do this, the flow metrics start at a particular time. \n\nYou've got cycle time and lead time. Now we all know that lead time is a special type of cycle time, and they're all cycle times. If I do into approved to leaving approved, that's a cycle time, but those words have been defined within the context of Azure DevOps for their reporting. If you put on a cycle time graph, the cycle time graph is between these two points. \n\nWhen it moves into in progress, the cycle time timer will start. When it moves out of in progress, the cycle time start timer will finish, and this line over here is the lead time. So as soon as it crosses into new, your timer is starting. That's not always ideal. I do recommend using a tool called Actionable Agile; I'll cover that in another video. \n\nBut it does allow you a lot more flexibility in how you want to report on this data and how it gives you more insights into what's going on. But for this video, I'm going to show you the out-of-the-box capabilities. So one of the things that we would expect to do as a team is have perhaps a more interesting board, a little bit more planning going on, a little bit more decision rather than just using the out-of-the-box states. \n\nThese are the minimum states that work goes through. I highly recommend not adding more states to the process but instead just columns to the board. If you have a state that has to be true across that every work item will go through that state and you want it to be applied to every team, then add a customisation. But don't do a customisation for blocked; that should be a tag. Don't do a customisation for on hold or any intermittent states that a piece of work might not enter. \n\nThe states on your board should be a card that should flow from left to right through all of the states ideally. This should be the common cause, and then we can deal with exceptions separately, preferably using tags. I'll show you that in a minute. But what I want to do for my daily, I'm going to be looking at the things that are in progress. \n\nYou'll remember that I had some stuff that's approved that we haven't started yet. If we've not augmented this board, I would probably move all of those items to in progress as soon as they hit the Sprint, but I don't want to do that. That seems to me a little bit basic. So what I want to do instead is I want to take this in progress column, and I want to split it into multiple columns. \n\nSo I'm going to do that now. If you go over to the little cog on the top right, this is for my daily. You're going to see lots of options. Now we can customise the fields that are available on the work item, so we can add additional fields. We can customise and add some style rules that can apply either to the colour of the card or titles. We can apply style rules based on field values on whatever it is we want. \n\nWe can add tag colours. My favourite one is I've always... oh, I don't have a block; I haven't added blocks to anything. But I'm going to add a blocked colour, make it like some really bright red. That's going to be my... that's going to highlight any blocked items on my board, give you a visual indicator. You have some annotations; subtasks can be added on here as well. I've got that added; I'll show you how that works for creating the plan or changing the plan. \n\nWhat we're going to do is we're going to add an additional column. So I want to take in progress, and I kind of want to split it. I want to... what am I going to do? Let's split it into options, I guess. So let's change this to options because we want things to be coming into our Sprint, and then we're going to pick from those options, and then we're going to replenish those options during Sprint planning, right? That's our general cycle. \n\nWe can replenish any time, but that's our general cycle. So this is going to be in the in progress state. There you can see the mapping of the states on the work item to the name of the column. So what I'm going to do is I'm going to add a new column. I'm going to insert right, and this new column is also going to be for in progress for both work items. But what are we going to call it? \n\nLet's call this develop. I can't spell; let's just call it develop. I definitely can't spell, so you'll see that as well throughout. Develop, and then we're going to put a new one to the right called validate. Develop is going to be split into doing and done columns, but validate isn't. Yeah, that's what I'm going to do. \n\nSo now, obviously, this would not be done arbitrarily; your team would get together and have an agreement on what this is. But now I have my options column, so what I'm going to do is I'm going to move all of those items that I wanted in this Sprint into the options column. Yeah, that's what I'm going to do for this one. I actually have an idea for how I would set this up, but again, that should come out in the wash. \n\nSo I'm going to move all of these states to in progress. This is me starting all the work at the beginning of the Sprint. Not always the best one for flow, but you can plan around that. So see everything's jumped over into options. Now we can say I'm going to pull this into doing for develop, and we're going to have a few items in there. \n\nI'm going to push a few items in here just so the board looks a bit nicer, just for fun. As things move across the board, I've got my options, which is my Sprint backlog. I'm going to pull things into develop, and I'm going to do something in there. Okay, and then as things move into develop, we think it's finished, and then at some point, we're going to pull things from done into validate, and somebody's going to do some validation. \n\nIt could be any member of the team. The basic validation that we do is we check against the definition of done. Let's double-check; let's double make sure that things meet the definition of done. If it does meet the definition of done, we then push it into done. I don't know if you saw that, but as soon as I pushed it into done, the states changed to done. \n\nSo the columns here, if I'm just going to take an item, I'm going to highlight it. Let's highlight it as blocked because I just want you to be able to see it. There we go; so I have this red, this is the red card, right? It's in approved in this column, and when I move it into options, it moves to in progress. \n\nAs soon as I move it into develop, the in progress doesn't change because these three columns are all in progress. Validate... oh, see, this is how... why you test stuff. I put that... let's move that back, fix that validate column. I did that wrong. Approved in... oh, in progress, yes, I know. Save that; there we go. \n\nNow I can take that column and put it in validate, and it ends up in progress. There we go, perfect. Now I can look at this board during my daily. I can see what's going on; I can see the work flowing across the board. The next event in Scrum is the Sprint review. \n\nThere are some data points that you might want to look at in the Sprint review. Most of those I would get actually from Actionable Agile again, but there are probably some things that I'm going to look at. I might jump over to my Sprint, and I'm going to say what of these items is done, and I'm going to cheat. I'm going to change the tag to that, not Project A, Feature A, and we're going to mark all of those things as done. \n\nThere we go, and then I'm going to... so during this Sprint, we managed to get all of the things for our Sprint goal completed, so they're all marked as done. We're all good to go. That's what we're going to show the stakeholders, and separately, we're going to do perhaps we're going to do a demo. \n\nWe're going to show what was created against what we've got in here, but then the next part of our Sprint review, which is arguably the most important part, is we need to figure out whether our product backlog still reflects transparency of the future, still reflects the work we have to do next. So we're going to have conversations with the stakeholders that come to our Sprint review with the team. \n\nWe're going to collaborate on what's happening in the business, what's happening in the market, what's happened in the product, what are the choices that we've made. We're going to put that all together in a big melting pot, and we're going to go update the product backlog, which it looks like I have. Oh, because it's got a filter on there; that's why. \n\nThere we go; we're going to go update the product backlog. So the product backlog is not going to include any of the items that are already done; it's going to include the items that are still to do. Since these are in progress, I might like to actually just stick them up the top. There we go, and now we're probably definitely going to do these things. They've already been started. \n\nI'll perhaps show you how to not have to have them started, and then I've got some work here that is coming up next. This has been approved; we need to go refine these items. We need to have this conversation during Sprint review where we talk about what needs to change here. \n\nI would like to see physical changes in the product backlog during that event because the next thing we do after a Sprint review is we're going to go into the retro, and then we're going to go into next Sprint planning. Who's going to update the product backlog between those items? Probably nobody. \n\nSo this is the last moment we have to get those changes in. I'd be opening these items; I'd be making changes. We'd be talking to the stakeholders about it. Does this still reflect what it is we need to do? Are there changes that we've learned? Maybe the stakeholders have gone and talked to additional people in the organisation, and they want to bring in some changes. \n\nThese are all... maybe there's a whole body of new work that needs to go in here. We can start creating it now so that we have the best possible product backlog for going into the next Sprint planning. If there's a bunch of stuff we really don't understand, perhaps they need to be able to go on a list of we're going to need to get together with these stakeholders and discuss and refine more things into the product backlog during the next Sprint because that's work that happens all the time. \n\nRefinement happens all the time, but what's the important stuff we need to update here to get straight into the next Sprint? Feedback or core changes, anything like that should be in there. The last event in Scrum is our Sprint retrospective. I'm probably not going to spend as much time in Azure DevOps during my retrospective. \n\nWe might have a conversation about things that happened during the Sprint, things that were left over, things that were difficult. We might need to go look at some items in the product backlog and discuss why they were so difficult, what did we not understand, and we might do some root cause analysis on that. But in general, we're probably going to be having separate conversations: people, processes, tools, relationships, all of those things are on the table for the Sprint retrospective. \n\nI wanted to show you a board that was done a little bit differently. So here I have a board where I have the backlog on the left-hand side. So I have a column for backlog, so that's the new state. If you remember, we had the approved state, and I've renamed the approved state to Discovery and set it as doing and done. \n\nSo I have that doing and done in here. I've colour-coded these items because they're too big, so I've got a field called item size, and it has unsized, right-sized, and oversized, with unsized being the default. So if it's oversized, then it's going to highlight that we need to do some refinement work, and that's where in this discovery column doing, I wouldn't expect to see anything with this orange title any further. \n\nThis needs to be broken down, refined a little bit more. This might split into multiple items before we start bringing it into that discovery done column. This is where we might do some usability analysis; we might do some user studies; we might do paper prototyping. \n\nAll of those things in this column, if you're doing a lot of those things, you might split it out into multiple columns for how you're going to process that work. Then it moves into analysis at the beginning of the Sprint. If you remember our timer starting for... oh, that's not the right one. That one, our timer for cycle time is between these two lines within this box. \n\nCycle time starts here at analysis, whereas lead time starts all the way over here, and that's for the built-in stats. Hopefully, this gave you some ideas about how you can use Azure DevOps to support your Scrum environment. If you're more interested in the board and the columns, I have a Kanban session that goes a lot more in-depth into that story as well. \n\nIf you do have any questions, put them in the comments below and get in touch if you need any help."
  },
  {
    "Title": "Mastering Caman Strategy: How to Leverage Azure DevOps for Effective Visualisation in Hybrid Work Environments",
    "Description": "Learn how to use Azure DevOps to set up and customise Caman boards for clear workflow visualisation, shared rules, and effective work management in hybrid teams.",
    "ResourceId": "jCrXzgjxcEA",
    "Url": "https://www.youtube.com/watch?v=jCrXzgjxcEA",
    "Date": "2024-03-29T16:42:17Z",
    "Captions": "Creating an effective Caman strategy is hard. In this world of hybrid work, we need to share our visualizations using digital tools. One such tool is Azure DevOps. Here, I'll discuss how you can use Azure DevOps to visualize your work as part of a Caman strategy.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for years.\n\nBefore we start, it's essential to understand why we need to use something like Azure Boards in order to manage our work. Since the pandemic, many teams have moved away from physical offices, and even when we're in a physical office, we're not all there at the same time. This means that there's no physical wall or meeting room that teams can use to present all of their work visually, where they can all see it. Digital tools for saving and presenting that work have really become more critical than ever.\n\nNow, there is way more to a Caman strategy than just a tool. A Caman strategy works best when applied to a stable system, one where we're all following the same rules. However, most of us don't work in environments like that. Each participant in the system typically makes choices based on their own internal system, one that they don't necessarily share with the rest of the team. \n\nWell, why don't we share it? I think it's a result of not realizing how important it is that we do share it. We don't realise how much impact those seemingly small choices make, like which item to pull or not and why, on the entire system. We've created a lot of local optimizations for our overall system that may have a negative impact on that larger system.\n\nSo, what do we do about it? Well, I recommend that you sit down with all of the participants that are going to be working on the work that goes through your system and have them work out what rules they want to use or come to an agreement on the choices that they're going to make. It doesn't need to be perfect; you'll have ample opportunity to change and adapt those rules as you discover the impact that it has on the work. But we need a place to get started, and really, you don't have to do all of that before you start with Caman. You can get started and then work through those problems with a rougher workflow, like just guessing whatever it is you work on just now. More details can be added later to start stabilising that system and make it more effective.\n\nBut let's leave that for now. For now, we're going to look at how we can create a Caman board for a typical software team and then how we can implement that in Azure DevOps. I'm going to show you how to manage the cards on the board, how to customize the cards so that you can see what's going on, and also how to customize the columns and perhaps swim lanes if you have the need for that, and then be able to see and visualize what's going on on your board and filter that board for the things you might need.\n\nSo, let's take a look at what's going on in Azure DevOps. I have an environment here; this is just my environment. I have a lovely org over here on the left; that's my learning environment, and I have a few projects that I've preset up with things that we can look at. So, let's look at a finished environment first, or at least the first stage, like we've set up our boards to be able to see what's going on. I'm going to click on the demo environment.\n\nSo, on the left-hand side, you'll see boards, and you'll see two things that are important: you'll see under boards you'll have boards and backlog. Those are the two main things that I would expect both Caman and Scrum teams to use when they're managing their work. So, I'm going to click on boards first, and here you'll see I have a pre-set board for this team. \n\nIn this view, you can see that I've got a number of different columns going on here, but the important thing to realise is that the states of the work items, the underlying work item states, have not been changed here when we've customized the columns. This means that multiple teams working inside of the same Azure DevOps project can have a different set of columns while maintaining the same states.\n\nLet's take a look at some of the work item states and how it applies to Caman, depending on the process that you've selected. So, here you can see an overlay with two things going on. Horizontally, you can see the states for the particular process that you might have selected. So, if your process for your work is based on the Agile process, on the Scrum process, or the CMMI process, it'll have these different states that you see here. \n\nI prefer the Scrum process because I believe it's the most generic, although I do make some changes to it. So, here's the Scrum process: we go from new to approved to committed to done. In the Agile process, which is the other most common one, people go from new to active, active to resolved, resolved to closed. But the vertical columns here, where you have proposed, in progress, resolved, and completed, give you an indication of how those states are going to be treated by Azure DevOps.\n\nUnder the covers, Azure DevOps has a whole bunch of Agile planning tools that have been applied to the system that has been created, and the fundamental basis upon which they work is that you have a proposed state. So, that's things that we're not working on yet. When things get added to the system, you'll see that the lead time timer starts, but the cycle time timer doesn't. \n\nInside of Azure DevOps, they specify cycle time as from when the developers start the work to when it's finished, and lead time to when it's added to the system to when it's finished. You can absolutely argue the validity of that. I would maybe prefer a more configurable option, but this is how it's configured currently inside of Azure DevOps. \n\nSo, if something's in the proposed state, the lead time timer started, but the cycle time timer's not. In the Agile template, you only have one state, which is new, which is in proposed, and then you have active and resolved, which are in progress states, and then you have one completed state called closed. That's where both the timers stop.\n\nOkay, so when it crosses this line, it gets marked as active or resolved. Sorry, when it crosses this line, the cycle time timer gets started. So, in this case, one of the reasons I prefer the Scrum process here is that by default, although you can absolutely add it to the Agile template, by default it has two states in proposed. You've got new; it's been added to the system. It might have been added by some random person in your organisation, so you don't necessarily want to have started the work. \n\nI usually use approved or some kind of second state to indicate that the person who manages that backlog, who is or this could be the team themselves, the team has agreed that they're probably going to do it. Right? So, that's where it's approved; we're going to work on it. That's why I would kind of like lead time to start there, but you can't have everything. \n\nThen in progress, I actually prefer just one state. I usually change it from committed to something else, like forecasted or just in progress. Right? New, approved, in progress, done. But I prefer one state so that the developers get the choice to split into however many columns that they want. Having an active and forced resolved state can limit the way you can configure the board, but also you can work it into the way you do things for sure. \n\nAnd then everything has a default closed state, so that's the kind of flow of work from Azure DevOps internals perspective. But we can configure that however we like on the board. So, you can kind of see here I'm going to try and show you what this looks like. \n\nSo, on this board, you'll notice that I have inventory, I have backlog, and I have discovery. When you look at the work items, they are new in all of those columns. Okay? So, they've not yet... This is the Scrum template, not the Scrum template, the Agile template. So, you'll notice that the items haven't been moved to a different state. \n\nAnd then in development, we have active, and then in validation, we have resolved, and in done, we have closed. Okay? So, this means that when work crosses this line here, that's when the timer starts on the lead time, but it has to cross this line here in this particular process to start the timer for cycle time, and all the timers stop at this line here. \n\nOkay? So, that allows us to implement a bunch of controls that we can use to kind of see what's going on and manage our work. So, this particular team has set up... We've got our inventory; this is stuff that's been added to the backlog that we may or may not do yet. So, that's like the back warehouse in our shop. \n\nAnd then we've got a backlog, which is the stuff that we're going to try and sell. We're going to do... has been moved to the front, and it's moved into that column. So, inventory is just a big list of stuff, and then when we decide we're going to do something, we've agreed to do it, whatever those reasons are, it ends up in the backlog. \n\nAnd things in the backlog are then options to be pulled into discovery. So, you could call this options. Right? So, I'm going to pull things... The team's going to pull things from here into discovery so they can put it anywhere they like in discovery. So, let me drag and drop that in there. Once it's in discovery, that column will change to discovery, but you'll note that the state has not changed. \n\nI'll show you how that works in a moment. So, once that is in this doing column, discovery doing, that's when we're going... The team's going to do all of that discovery or refinement work that they need to do to figure out what this thing is before they actually start it. Right? Before they actually start executing on creating this, and things may drop out of this space, right? Because we might do some analysis on this and figure out that it's not something we want to do. \n\nIt's either too costly or whatever reason. Here, we've got generating invoice reports that has been blocked. Perhaps it's been blocked because we're waiting for new information. We've got a request out to somebody else, but it currently is blocked. \n\nBut we've split this column into doing and done, so the doing column and the wait state column. We've done the work, and it's waiting for the next column to pull it in. When it crosses this line here from discovery to development, that's when this item is going to change state. So, if I bring this across, you'll notice it's currently set to new, and now it's going to be marked as active because we've crossed that line for the internals of Azure DevOps from one state to another state, even though we've got multiple columns. \n\nI'll show how that's configured soon. So, we've got that development column now. So, this is the team's going to work on it. We're going to work on it, and at some point, we're going to mark it as done, so it's now moved to the next column. \n\nSo, again, we've not changed the state; it's still active. So, if you're creating reports across multiple teams inside of the same project, you can still report on those states. You don't need to worry about the columns. Right? There's ways you can do that too, but you don't need to worry about the columns. \n\nSo now, it's development done. It's waiting for whoever does validation to pick it up. This could be last-minute checks by the developers who want to check that everything is... all the eyes are dotted and the tees are crossed before they say officially say it's done. They're going to check the work against the definition of done, against anything else they believe they need to do. \n\nWhatever it is they need to do in that particular stage, and then that item, when it moves across this line here, is going to move from active to resolved. You'll notice I've hit the whip limit, gone beyond it, but just for demo purposes, I'm okay with that. And then they're going to validate that it's in the resolved state. We believe, we as the team, believe the work has been done. \n\nWe're marking it as resolved. We're going to come back around, do a sanity check on that, and then move it into closed to say it's been finished. And there you go; we had a piece of work flow from left to right through our system, hopefully as effective as possible. \n\nNow, this team is generally, hopefully, when they're working on their checks, when they're viewing this board, is going to walk the board from right to left, ensuring that they've populated the board, that they've got it all set up. They can do those things here, and you can see I've got the blocked visualisation there highlighted to see what's going on.\n\nSo, how might you configure this? There's a number of things that you're going to want to configure to be able to set this up. So, I'm going to show you how to set up and manage the columns and lanes if you do want lanes. So, if I click configure board settings over here on the top right, you'll see that in here, I have a configuration for fields where I have bug and user story. \n\nSo, if I click on user story, you'll see that it's showing what fields are available for user story. So, I've added iteration path. I think I didn't unbug, so I can easily just add iteration path on here, and it will show up on the bug items as well. So, if I save that, you'll see that bug item change to include the iteration state as well. \n\nThere's iteration path there coming in. So, I can add additional fields if I have custom fields or something I want to show on there. It's definitely worth considering that the more fields you add, the bigger the card's going to be, the less you're going to be able to show on the screen. So, just consider that and have only the most important information surfaced here.\n\nYou can add style rules. Style rules enable you to change the look and feel of the work items. So, you might add... If I do a test rule, whatever it's called, and then I can change either the colour of the card or the colour of the title of the card. So, if I change the background colour of the card, let's say I'm going to change it to a kind of light blue, only if the changed date... Let's do change date is greater than, let's say today minus one. \n\nOkay, so if I save that, if I've got my... There we go. So, these items that I've moved today are going to show up today or yesterday, today minus one, are going to show up as these things have moved. Everything else has been static and hasn't moved. So, I can prove that just by bringing this one across, and you'll notice it changes colour immediately because it's been changed recently. \n\nSo, you can use that to highlight things that have moved recently or not. I can also... Not only can I do styles on the cards, you can have multiple styles if you want. Again, a kaleidoscope of colour removes the importance of colour, right? So, try and be careful with that. \n\nAnd here you can see I've got a tag, a blocked tag, that highlights a particular colour. So, in this case, a block tag highlighting red. You can add other tags as well, depending on what it is you want to look at too. On these cards, you can have annotations. So, if the sub-item of this is tasks or things linked to GitHub or tests, you can have them actually show up on the cards, and you can click on it, and it will drop down. \n\nI don't have any of those set up just now, just for that view, but then we get to customizing the columns themselves on the board. So, if I click on columns, you'll see that I have the same columns that I had set up before. The first one, inventory, has to be in the new, and the last one, done, has to be in that closed because those are the start and end states for the work items. \n\nRight? So, you must have at least one start state and at least one end state. Everything else in the middle you can configure. So, for example, I added backlog but kept it in new, and I set the whip limit to 15. So, you can see that's 11 out of 15 is in the backlog at the moment. \n\nAnd I can also choose to split the column between doing and done. And then there's a... I don't really like the name of this; this is the definition of workflow field. So, let's say in order for things to move from backlog into discovery, there might be some things that need to be true. \n\nSo, I could create some markdown that says inventory to backlog, I'm going to do that inventory to backlog rule one, rule two. And then on the next one, I'm actually just going to copy that so that I can be quick and call that backlog to discovery. And what are the rules that are going to be applied? \n\nAnd if I save that now, you'll see at the top the backlog has a little... If you hover over it, it will show you that markdown information there. So, you can add some of your definition to workflow. You can add links in here as well, so I guess it might link out to your wiki page or wherever you've got additional information for these rules for your definition of workflow. You could even store the whole thing out there and just link it so you can go and click those items. \n\nSo, that's quite useful in the columns. As you go through, you can see discovery, which is a split column here, doing and done. All I need you to do is take the box again. You've got whip limit; you've got what state it's in. This one is new. Development is where we switch to active again; it's split, and validation is set to resolved, and done is set to closed. \n\nSo, those are really those column configurations. It's not as... There's not as many configurations as I might like in the long run, but it does give me that ability to have those visual boards and have work flow from left to right across those boards in a way that allows me to create those visualisations that I'm looking for. \n\nYou can add swim lanes, so if you had different classes of service for work flowing across this board, then you could create different lanes for this. It's not something I normally would do, but let's call this expedite, and we're going to make it neon red because expedite is really important. \n\nBut the default is not going to be expedite. If I create that, you'll see I'll have this expedite lane going across the top, and I could pull a piece of work in and move it along, and it just counts to the usual whip. I don't think there's a whip you can add for the expedite lane. Is there? Where can I maybe set some rules for things that have to be in the expedite lane versus in the default lane, which can't have rules? \n\nI don't know; I need to explore what criteria does there. It's not something that I've actually used. So, there we go. You can see I've been able to configure the board. I've been able to set up an expedite lane. I've been able to set up my columns, and I've now got a configured Caman board. \n\nThere are some additional things that you might want to do. For example, if I switched to backlog, I've added some additional columns here to the backlog. So, as well as having state, I've also added board column and board column done. So, you can see a little bit more about what's going on on the other board. \n\nSo, if you're the product owner or you're the team lead or whatever, people, the whole team, right, looking at the order of the backlog, you're able to manage it from there pretty effectively. \n\nIf you're struggling to understand your systems or how work flows through these systems, Naked Agility can help or help you find somebody who can help you. We specialise in helping companies that build software get better at building software, and being able to analyse the flow of work through your existing system is critical to figuring out what to improve. \n\nDon't wait; get help as soon as possible to minimise that waste. Get in touch."
  },
  {
    "Title": "Rethinking Backlog Management: Why a Flat Structure Boosts Agility and Value Delivery",
    "Description": "Explains how using a flat backlog structure—rather than a hierarchy—improves agility, prioritisation, and value delivery in Scrum and Kanban teams.",
    "ResourceId": "ZBb8OZ0I6qA",
    "Url": "https://www.youtube.com/watch?v=ZBb8OZ0I6qA",
    "Date": "2024-03-26T10:56:26Z",
    "Captions": "You can't order a hierarchy. In this video, I'm going to demonstrate why hierarchies in backlog management inhibit the ability for us to manage them effectively and how we can think about backlog differently. My name is Martin Hinwood. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in DevOps for 15 years. A backlog is just a list of things you're going to do, but backlogs have some special characteristics. One of those main characteristics is that it's ordered in some way. You still need to decide how it's ordered, but your backlog should have an order, i.e., there's a distinct first item, second item, third item. There are no items in your backlog that have exactly the same level; therefore, it is a flat list of what it is we're going to do next or what the most important thing is. The order of the backlog informs but does not control the selection of the work that the team is going to work on at any time. There may be other things that come into that story at selection time, not just what of the most important things that are there. There might be other implications in technology, the state of the product, other things that are going on that we need to consider as we move through our product.\n\nSo why is hierarchy a problem? The most common thing that you see in teams is, depending on the product they're using to manage their backlog, they might have epics break down into features, break down into stories or backlog items. They might have features break down into epics, break down into backlog items. You might have any number of other things going on. You might have initiatives that break down into something that break down into the theme. Here is that you've got things that break down into other things, i.e., a parent-child relationship. If you have a parent-child relationship in a tool, it's very difficult to manage it in a way that allows us to use that context without that context inhibiting our ability to do stuff in the tool. So I'm going to show some examples, and this is also not just a tooling issue but a mindset issue as well. If you're thinking about your work as a parent-child relationship, the tendency, the easy thing that happens is that we end up with a work breakdown structure, which is not effective because ultimately it's not value-focused, and that's what we're trying to achieve. All of agile, whether you're using a specific agile framework or you're trying to follow the agile manifesto or you're thinking about lean and Kanban, any of these things is focusing on the flow of value through your system. So if you're focused on the flow of value through the system, you need to be focused on the value. If you're focused on the work breakdown, you tend not to be focused on value; you tend to be focused on delivering more stuff.\n\nSo that's the tendency. But what's the relationship that makes it difficult in hierarchies? So I've created a demo here to show what the problem is. In this example, I'm just going to use Azure DevOps; that's my tool of choice, that's my preference, but this could be any tool, including just a mural with backlog items. So here I've got three features: feature one, feature two, feature three, and the intent of this tool is that features work at a different level from backlog items, and they inform but do not control the next level down. But the reality is that they do control the next level down because most people use this kind of view to see what's going on. So you're looking at features breaking down into backlog items here, and perhaps those backlog items break down into tasks: task one, save that. Oh, I need to close it now. I made two, don't save that one. So now I've got this hierarchy, this work breakdown structure towards this item, and then the tendency is to use this view and to put little progress bars and whatever you want on this view, and you end up with what looks a little bit like a project status report. That's the tendency when you use these types of views. With huge amounts of discipline on your team, you can certainly avoid this, but I find that that's not the case for the majority of encounters that I've had with teams that are doing this.\n\nThe other thing that makes it very difficult is that if I want to make one item more important than another item because I'm looking at this view, I actually tend to only make things important or not important inside of the scope of the feature because I can still drag and drop inside of here and order that hierarchy, same as if you were using just mural and stickies. It has to be under that feature. But if I want to make this item more important or less important than this item here, I want to drag it below this item, and suddenly if I drop this, I now changed the parent-child relationship from feature one to feature two, and this is a feature one element, not a feature two element, and that doesn't make any sense. So I need to go put that back. So when we manage our work and we're trying to actively manage what's going on here, it tends to make it a little bit more difficult to visualize, to engage with the work. What we really want is we want people to turn off the parents and manage the backlog as a backlog, not as a hierarchy. So they're dragging and dropping things within here, they're ordering this list, and creating a view that makes sense just for them.\n\nSo the main problems with a backlog hierarchy are the first one is the tendency towards ending up with a work breakdown structure. The other tendency is to not order your backlog because it changes that parent-child relationship, and it's effort to switch between the different views. It's even more so on stickies on a whiteboard, right? Because you have that fixed view; you can't pivot that display that you like you can in tools. The last element that is difficult is parent-child relationships are one parent, many children within the context of almost all tooling. It's a tree structure, and that inhibits our ability to have an item that goes on our backlog that has many parents, a many-to-many relationship. I might have a thing that I put in my backlog that enables five different features, and then that becomes quite an important thing to work on because it enables these five different features or is the first foundation for these five different features, and it's very difficult to represent that when we have that breakdown structure from epic to feature or high-level item to next-level item to backlog item.\n\nSo how can we think differently so that we don't have this problem? What we want to be able to do when we're thinking about our product backlog is we want to think about it as a flat list. It always should be a flat list, and each item has additional context. That additional context should be able to be visualised in various ways depending on the tooling that you're using, whether you're using a hub, GitLab, Azure DevOps, or Jira. The tooling will allow you to create some of those visualisations, those pivots on the data without actually having a hierarchy, parent-child relationships. That's the primary way to do that. So I'm going to show you how to do this in Azure DevOps. I have an example set up here. I'm just going to use the same team, and I have a bunch of things in my backlog here. If you ignore that effort column there, I will just remove it because it's inconsequential for what we're talking about here.\n\nSo one of the things that we're interested in in this list is going to be a flat list that we're going to order, but there might be additional things that we want to take care of. So if you remember, we had a bunch of things that had features assigned to them. So what I can do is I can turn on the parents again, and what I'm going to do is I'm going to get rid of those parent relationships, and I'm just going to do a tag ad, and I'm going to cheat, and I'm just going to call it feature one, use feature one, and I'm going to call this one feature two. I'm going to ignore feature three, tag ad. Now tags need to be a little bit more deliberate. You can control both the ability for people to create tags; that's pre-moderation, or you can use a post-moderation technique. There is a plugin on the store; you can see it's got 28,000 installs across TFS and Azure DevOps. This allows you to actively post-moderate those tags, so activities like merging tags, filtering tags, managing things you can do to manage those tasks across TFS and Azure DevOps. I'm sure there is the same story in other platforms as well, whether you're using GitHub, GitLab, or Jira.\n\nSo now I have a feature assigned to each work item. I can easily open a work item. I can see that it's to do with a particular feature or capability. I could even link to that capability as a link to a wiki page, so I could link to an existing item here and just pick a hyperlink and go to a wiki page, some kind of documentation on what this is. But what I ultimately want to be doing is managing this flat list of work items so that I can say that any item is more important than any other item, whether it's feature one or feature two. I can intermingle all of those things between feature one and feature two to best represent the business order and business priority of my product backlog. So this is not implying that this is the order that we're going to select items in. This doesn't mean that the team is going to say, \"Well, we think we can do five items in the next 14 days.\" These or ten items, these ten items are ready. That's not how that's supposed to happen. What a team would do is on each cadence, whether it's marketing, whether it's either replenishing the ready queue in Kanban, or they're doing their sprint planning, they're going to make a decision on how much work are we going to take in from the priority list versus how much other work do we have. Perhaps there's some long-running engineering work that's going on that has to happen behind the scenes that the customer doesn't really care about in the short term, but in the long term, it's going to provide them with a huge amount of value. So those items are going to be brought into the sprint, are going to be prioritised in that same way as these other business items. You may even add them to your product backlog. I don't have any of them in here, although it does seem like that because there are things like reviewing application architecture, but that's for the product that is referencing.\n\nWhen I'm looking at this list, I might want to filter and understand what's going on with certain items. So what I can do is I can hit this filter button here, and one way to filter would be to use the tags that we created. So I can say, \"Here's feature one,\" and here's all the feature two items. And feature one, here's just the feature two items. I can also look at, for example, all of the risk guardian items. So if I pick risk guardian, which is one of the projects that is represented in here, so I'm using tags to not only represent the features that we might be working on and delivering. Some of those features might go across applications that we're building, but we're also able to filter this by the application that we're building. So I can very clearly see that these are the items that are part of feature two that are part of this application, but these three items down here are not part of feature two for that application. So I'm able to very easily change my filter and say risk guardian and feature two, and I can effectively matrix and filter what I'm looking at to see what I might want to take on into the next sprint.\n\nIn Azure DevOps, I might even do a little bit of planning, and there's my future sprints for this team. I'm just going to do some arbitrary forward forecasting. I'm not using a tool here to do probabilistic forecasting, but I'm just taking a guess, which is very much a bad way to do it. But you can see on this list the actual order of these items on the backlog, and I'm not able to reorder those items because I don't have that full list of items because we're filtering. It disables that ability to order, but I can still go in here and move to a certain position within this list. So I can say move to, it's 25. I want to move it to about eight, move to eight, and then we can go fine-tune that later. But here you're seeing there's one item that's really important for risk guardian here at four, and then these things are a little bit further down the chain. But we're going to create a sprint plan around risk guardian because it's been deemed fairly important for the business, and feature two is more important than things that are not feature two. But risk guardian is also important, so I'm creating this filter to see what it is we're going to take. We can take about 20 things into the sprint, but we only really want to take maybe five things for our sprint goal, which is going to be around feature two and risk guardian. We're going to create a story around that.\n\nSo what I might do is take a little look across these items and say, \"Well, this item's great; we're going to need to do that. That's going to come in.\" And then we've got, \"Yeah, that's not as interesting, that feature one, but it should really be part of this,\" even though feature two is currently more important than feature one. And this one, and this one, so that's three. I need a fourth one. This one's not as useful yet, but this is much more useful, so we're going to take that one. And now I can drag these into the next sprint. There we go, they've all been assigned to that sprint. You can see that in there, and that's our plan. We could have done this in sprint planning; we could have done this in refinement, and then we're going to review it in sprint planning. Like we're going to take about 20 things into this sprint, but here's the five that we think are to do with the next goal. We might get more information at the review, but we can adapt this. This is not set in stone; this is just a best guess at this moment in time what we think would be a good idea here for sprint one as we get nearer to sprint one starting.\n\nSo there I've been able to do that with filtering. So if I remove that filter, you'll see those sprint one items are not next to each other in the product backlog because we're using the order of the product backlog to inform but not control the contents of our backlog with a focus on value. And we made the decision about what items we're going to bring into the sprint based on multiple vectors of information. One was the projects, right? So here I've got risk guardian, insight ledger, unity ERP. There are various, maybe we're integrating into other systems, right? We've got various projects that are going on that are managed by other people. We're delivering the value, and we've got a bunch of features, which are a different way of grouping the contents, not based on project. We actually have, there's another vector in here that we didn't really talk about, which is the stage of each of those pieces of work. So what's the main topic of those pieces of work that is independent of feature and independent of project going on within the bounds of our product that we're delivering here, which looks like an integration tool.\n\nSo hopefully, this was a useful view of how we can move away from a hierarchical work breakdown structure towards something that is more flexible, that is more usable, and more effective. If you are struggling to move away from a project-based work breakdown structure for visualising your backlog, we can help you. We have consulting, coaching, and mentor programmes that can help kickstart your company's ability to manage your work actively and focus on the value that your business needs. Get in touch below."
  },
  {
    "Title": "Illuminate Your Workflow: Harnessing Candan Strategies for Continuous Improvement and Transparency",
    "Description": "Learn how Candan strategies use flow metrics and transparency to reveal workflow issues, drive continuous improvement, and support data-driven decision-making in teams.",
    "ResourceId": "pw_8gbaWZC4",
    "Url": "https://www.youtube.com/watch?v=pw_8gbaWZC4",
    "Date": "2024-03-08T07:00:31Z",
    "Captions": "One of the key aspects of a Caman strategy is improving the system, improving your workflow. So after you've defined what your workflow is, you've written down how you're going to work your system, and you've started actively monitoring the work that is underway, you'll hopefully start seeing patterns. If we're using the metrics from the flow metrics from a Candan strategy, then we should be able to see when things are sitting around for too long and they're too old. We should be able to see patterns of delivery. We should be able to see groupings of things that are perhaps not quite where we expect them to be on the graphs that we might use to visualize that data. \n\nAnd that allows us to ask more interesting questions. It allows us to lift the carpet and see in the dark. See in the dark, that's a great Cban strategy. It's like a torch shining the light in the darkness of your system to see where things are broken, where things aren't working as optimally as they could be, to see what's going on where it would be opaque normally. This is especially true for teams doing Scrum. Scrum has no metrics at all, and the metrics that I would always recommend would be the Caman flow metrics, right? Because Cban is designed as something that can be used to monitor any system. It's a monitoring tool; it's not the system itself. It's the tool you use to observe the system. \n\nThink about if you were building software and you wanted to understand which features of your product your customers were using so that you could choose which parts of the product to continue to invest in and which not. How would you do that? Well, you'd need to put some hooks into your application and collect a bunch of telemetry and then analyze the data, right? So you can see what's going on. You need to increase transparency, and a Candan strategy is that tool for any system. So regardless of whether Scrum is your system, that might be your starting point, or that might be where you jump to, right? You might start from over here, but you jump to Scrum, or you've got a system that you just made up, right? That's totally cool. That's what lots of people do. \n\nWe have a system that we just made up, then we can use Caman to gain insights and understanding on what's going on in this system by monitoring it, by collecting some telemetry on how our work happens so that we can see better what's going on. I don't understand why teams try and manage their system from a position of opacity, right? They can't see what's going on; they're looking into the fog of war, and they can't see the problems. A Cban strategy, and particularly the flow metrics part of a Candan strategy and the visualization of the work, remove that fog of war so you can see what's going on. You can actually see when things aren't working properly, and it's obvious. \n\nLook, here's a problem here; I can see it. It's visually triggering my brain, and I can see it. So hopefully, being able to see all these problems will encourage you to actually do something, actually make a change. And we're effectively not implementing a Candan strategy if we're not improving the workflow, right? Improving and making changes to the system in order to see the numbers change in a more positive or more likable manner, right? So Caman supports continuous improvement by giving you the torch to shine on the problem. The view through, it's your radar that lets you see through the fog of war and be able to make better decisions. \n\nIf you're struggling to create a pool-based system of work, then we can help you. We provide world-class Candan training from Pro Caman, as well as consulting and coaching for teams trying to implement a Candan strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and have Cbang classes from Scrum.org as well."
  },
  {
    "Title": "The Importance of Visualizing Your Work in a Kanban Strategy",
    "Description": "Explains how visualising work in Kanban boosts team clarity, transparency, and alignment, and offers steps to define workflows, avoid misalignment, and improve collaboration.",
    "ResourceId": "SLZmpwEWxD4",
    "Url": "https://www.youtube.com/watch?v=SLZmpwEWxD4",
    "Date": "2024-03-07T07:00:10Z",
    "Captions": "A hugely important technique for any implementation of a Kanban strategy is to visualize your work. Right, you need to be able to see what's going on. You need to be able to visualize that. I'm a big user of Azure DevOps. I know Jira has these features as well. But being able to visually see your cards moving across the board, the units of value, we don't really care about tasks at this point, right? But your smallest unit of value, to see them flow across the board, see where things are. So if somebody asks you, \"Oh, where's this? What's that? What's going on with this?\" it's very obvious where and what it is.\n\nThat visualization, while super important, is actually super difficult to create because we generally make assumptions as a team about what each other think the system is. Okay, so I'll think the system works like this, and another team member will think it works like that. But we'll think we're on the same page. We'll think we understand each other on how the system works. But because we've never sat down and had that conversation about how this system works, then we don't.\n\nI have a, I don't know if you've noticed, but I kind of like board games. If you were to take any one of these board games off my shelf and throw away the rule book and get four people together to decide they're each going to decide how they're going to use the pieces and move them around in order to get points, and then you're going to work together to solve the problem that is the board game. You pick a cooperative one, but if we don't agree what the rules are, then how could we possibly have a successful game, right? We're not all playing the same game because we all have not agreed what the rules are. That's why games come with a rule book.\n\nThe first part of implementing a Kanban strategy is you need to write your rule book. What are the rules of your system? How are you going to decide how things work? So even one of the first decisions is what are we going to visualize on this? What are we actually going to put on the board? Is it only things on our backlog, or is it bugs as well? What is it that's going to go on there, and how does it move through this system? So creating that visualization is super important.\n\nSo what I recommend that you do is do a workshop. Get everybody together, sit down, and just build a board. Whether you're building it in Azure DevOps or you're building it in Jira or Trello, or just pop open Mural or Miro and use a digital whiteboard, right? Totally freeform. Make the decisions, write the notes, and document your system. How does your system work? And agree as a team. When you find differences on how your system is supposed to work, then at the very least, even if we've still got a system that might not be optimal, right? Because this is where we are right now, this is what we're doing right now, we at the very least have a system that we all agree is the same system, right? Because if we want to play together, we want to play as a team, and we want to be successful together, we need to define what those things are. We need to define how the system works, and we all need to be playing in the same system.\n\nIf you're struggling to decide how your system works and create a definition of workflow, then we can help you. We provide world-class Kanban training from Pro Kanban, as well as consulting and coaching for teams trying to implement a Kanban strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and have Kanban classes from Scrum the Door."
  },
  {
    "Title": "The Key to a Kanban Strategy: Understanding WIP Limits",
    "Description": "Explains how setting and adjusting Work-In-Progress (WIP) limits in Kanban helps teams manage workflow, prevent bottlenecks, and improve productivity and collaboration.",
    "ResourceId": "Ir8QiX7eAHU",
    "Url": "https://www.youtube.com/watch?v=Ir8QiX7eAHU",
    "Date": "2024-03-06T07:00:17Z",
    "Captions": "One of the key components of creating a Kanban strategy is WIP limits. If you don't have WIP limits, it's definitely not a Kanban strategy that you have. So when you visualise your work, when you do that workshop where you figure out what are the columns, the states, the activities that happen for any piece of work that flows through our system, and you create those columns, you're going to have to decide what your WIP limit is in each of those areas. Coming up with a WIP limit is a little bit of an art, right? It's like coming up with what's the Goldilocks zone for this particular activity.\n\nI actually found out that I really fundamentally thought that Goldilocks and the Three Bears was a completely ubiquitous story. But I was working recently with a group in Romania, and they don't have Goldilocks and the Three Bears as a bedtime story. It's not a thing. So kind of what we're talking about, and actually this was the bit that resonated the best for them, was think of what they describe as the Goldilocks zone in planetary physics. I know I'm sounding like a nutball here, right? But bear with me.\n\nIn planets, when they talk about planets being in the Goldilocks zone, they mean it's between water freezing and water boiling, right? So you can have life when there's water, but you can't have life when it's steam. In general, that's where they—yes, I know that's possible—but let's say you've got that zone. If the water's frozen, it's probably very difficult to have life. If the water's steam, then it's very difficult to have life. So what is the zone within which it's just right? That's the Goldilocks zone. You can go look up the story, the fable, later.\n\nThe idea is that we need to figure out not just our WIP limit for the whole system, but our WIP limit for individual stages in the system. The WIP limit for the individual stages, if we create individual stages, will probably inform the WIP limit for the overall system, right? Because you just add them up, and that's the WIP limit for the whole system. \n\nSo, the ideal WIP limit, right? There is an ideal WIP limit. If everything is perfect, the ideal WIP limit is one. The most optimal WIP limit in flow is one single piece flow, right? But that only works when our system is perfect, when it operates exactly like we expect, in the timing we expect, when all of those things are absolutely perfect. \n\nThe WIP limit is one. The thing I usually use to visualise that is I do a version of the coin game with teams. If you've not done the coin game, it's a great exercise where you give a group of people 20 coins. They flip them all to heads, and then it's a batch size exercise, right? So they flip them all to heads, and then they have to flip them all to tails, pass to the next person, and they have to flip them all to tails, pass them to the next person. So you've got this simulation of a production line, right? Something happens in this stage, the next stage happens, something happens there, next stage.\n\nIn an ideal world, you just want one flip, the coin, move it on, flip the coin, move it on, flip the coin, move it on, and you'll have the maximum number of coins going in action at any point in time. Does that make sense? Right? If you've got a batch size of 20 and you've got 20 coins and you've got 10 people in a row, you've got one person working and nine people waiting all the time, the whole time. If you do a batch size of one, you've got 10 people working, and you'll get the fastest delivery of the first unit of work and the fastest delivery of all the units of work.\n\nOkay, but the world isn't made up of flipping coins, right? We're not—that's not what we're doing all day. We are writing code, we're solving problems, we're painting pictures, we're waiting on customers to reply. There's all sorts of things that make what we do a nonlinear thing, not a thing that just happens at once. So you're going to have to figure out for each of those columns what the most optimal WIP limit is based on your ability to keep things moving and the need to identify when there's problems.\n\nIf we make the WIP limit 100 in every column, it's going to be difficult to identify problems because we'll maybe never hit it. We'll never hit the WIP limit. We deliberately want to constrain the work to slightly less than we can do so that we create slack in the system that enables us to see more of what's going on, ask more interesting questions, and figure out do we need to increase this or reduce this one. Those are the types of discussions that we want to have.\n\nWhenever we run workshops where we run simulations around this, that's the kind of conversations that people have in the groups. Who should we create the WIP limit bigger? Yeah, but if we create the WIP limit bigger, then there'll be more stuff in here, and there'll be more pressure on this part of the system. The people in the groups are then able to visualise those things and see the impact of those things, which is the whole point of a Kanban strategy—that everybody in the system understands the system that you've created better, and it allows them all to have more rational, more interesting conversations about how the system goes together and how we might change it in order to improve it or attempt to improve it, and then the impact of those improvements. You're able to monitor them.\n\nThat is really picking WIP limits. Just make up some numbers at the start, pick stuff, and see what works. Increase them if they're too small, make them smaller if they're too big, and figure out where that optimal level is. If you're really searching for Martin, what would you recommend as our WIP limit? I would say in any stage, as a starting point, if you have to have a Martin says we should do it this way, if you have to have that, then pick one less than the number of people that you have performing an activity in that area. So if you have four people, pick three as your WIP limit and see how you go.\n\nIf you're struggling to create WIP limits so that you can see what's going on in your system, then we can help you. We provide world-class Kanban training from Pro Kan, as well as consulting and coaching for teams trying to implement Kanban strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and also have Kanban classes from Scrum.org."
  },
  {
    "Title": "Mastering Kanban: Creating a Pull-Based System for Workflow Efficiency",
    "Description": "Learn how Kanban’s pull-based system boosts workflow efficiency by visualising tasks, setting WIP limits, managing bottlenecks, and enabling continuous process improvement.",
    "ResourceId": "hXieCawt-XE",
    "Url": "https://www.youtube.com/watch?v=hXieCawt-XE",
    "Date": "2024-03-05T07:00:18Z",
    "Captions": "When you're implementing a Caman strategy, we're effectively creating a pool-based system of work. So, Caman kind of does this. There are three core practices to Caman: defining and visualizing your workflow, actively managing items in that workflow, and then improving that workflow. \n\nOur ability to define and visualize that workflow as part of creating that Caman system means we need to decide what is the system that we're going to use Caman, a Caman strategy, to monitor. Right? So we define generally, and you'll see this a lot with teams, as they'll define columns. If they just stop there, it's probably not a Caman system yet. Right? It's not a Caman strategy if they just define the columns and then we're done. There's a little bit more to it than that. \n\nSome of the minimum things that you kind of need at a minimum: you should have WIP limits. Right? At absolute minimum, you should have WIP limits. Those other things we should have, but definitely if you don't have WIP limits, definitely not a Caman system yet. \n\nWhat we're able to do is decide what of the stages that our work flows through, but we also want to think about what are our wait states. Wait states are places where work stops because the next thing that needs to happen, the next activity, the next stage in the process is full. Right? There's no capacity. \n\nIf you think about, I'm trying to think of a good example. A good example is if you go to the hospital and you go to the waiting room and there are no seats left. Quite often, there'll be another overflow waiting room where people can go and wait to get into that situation. Then the people running that department in the hospital are going to be looking at how many people end up in this overflow. They're all waiting longer than we expect because everybody's waiting longer than we expect, and we don't want too many things in the system. Perhaps we need to reduce the number of people that we book on a particular schedule, right, in order to minimize the amount of time people wait and maximize the amount of people we get through the system. \n\nThat's more difficult for hospitals because they have to take into account people that cancel, people that don't turn up, all of those kinds of things. So, yeah, that's fun. But this idea of the wait state is really important. \n\nSo quite often for a stage, let's use a really simple visualization where you've got some kind of analysis, discovery happens, then some sort of development or doing happens, and then some kind of validation or testing happens, and then things are finished. You want to be able to indicate on your board, in your visualization, in your system, visualizing your system when things are complete from the perspective of analysis. Right? \n\nBut we've not yet started development, doing work on it. So if the analysis team just put it into the development team's backlog, and I'm using teams badly here, but the people doing analysis put it into the backlog of the people doing development, they're committing to that work on that other group's behalf. Right? They're putting it in their system inside of their view without permission. They're just dropping it in there. Even if they ask, they're kind of pushing that system. That's a push system. \n\nIf we want to create a pull system, then the folks in the stage before, so in this case analysis, they want to kind of have an analysis doing and an analysis done indication. That analysis done is a wait state for the next stage to look at that list of things that are done from the previous stage and then pull them in. But it still counts as time in that previous stage. \n\nThat way we can visually see when work piles up and see when we need to do something about it, like the overflow in the waiting room at the hospital. We want to be able to take action. Right? We want to actively manage the items in the workflow, which means we're going to be looking for those wait states. We're going to be looking for work piling up. \n\nYou might find if we're limiting work in process, which we should be in a Caman system, then if the development activity has four things that they can take and the analysis activity has four things, then perhaps the analysis work stops because they have four things in done, and the development activity has more things in progress/done, and we can't take on any more. \n\nAnalysis can't take any more because their WIP is four, and they then stop working. They say to the system, \"We don't have anything left to do. We can't start new work because we don't have room in our system.\" Right? \n\nYou might think, \"Well, surely they can just take on something else.\" But what if they keep doing that and don't stop and put up the flag and alert that we've stopped work? What if they just keep going? So they keep pulling work and dropping it into their done column, and their done column just gets bigger and bigger and bigger and bigger. \n\nPerhaps the next stage can't pull from that list very quickly, and it means that the wait time, the amount of total time in the system for all of those things that are in that wait state is getting longer and longer and longer, and it's just waste. Wouldn't it be better if that group in analysis just put up the red flag and said, \"We've stopped because we've got no more room in our system. The next stage has not filtered more down. What should we do?\" \n\nRight? In reality, if you're an engineering team working together, perhaps they go help the next stage down the line. Right? Maybe they can help out and help make that faster. Or perhaps we need to bring this up as a bigger thing for leadership and say, \"We've got some kind of problem in the system, and we need to change the system in order to make it more effective so the things that we bring into the system flow through the system more quickly.\" \n\nBy creating a pull system, we actually create a system within which we can see, we can visually see when the system's not flowing properly, when the engine's not working properly. It will back up, and it will back up all the way to a point where we're like, \"Okay, everybody in this line of all, every single activity is effectively blocked.\" Right? \n\nIt's not a blocked thing, but everything is constrained. And then, \"Oh, this is where it's constrained because they're still working, and everybody after them has stopped.\" What's the problem? Do we not have enough people here to be able to process the amount of work that's going on? Are we taking on too much work into the system so it's flowing through too quickly for this? \n\nWhatever the constraint is in this area, we need to figure out what it is and go fix it. \n\nThis dynamic applies both for a Caman strategy. Right? You want to be looking for those stages and thinking about how do we visualize them. But it also applies in the Scrum world as well. Scrum has a wait state built in because the developers select work during Sprint planning. Right? \n\nSo that's their moment for pulling work into the system, and then the system runs, and we see what comes out the other end. So we can apply a Caman strategy on top of that as well, in addition to the work-limited pool system that's implemented by Scrum, and add additional work-limited pool systems so that inside of the system that Scrum creates, we can break it up into other activities that allow us to see what's going on in those activities and where within the system that's implemented by Scrum where the actual activities are blocked, are stuck, are constrained, that we need to take action and we need to fulfil that final part of a Caman strategy, which is improving the workflow. \n\nNot just actively managing it, but improving it. So we need to go take action and make a change. If you're struggling to create a pool-based system of work, then we can help you. We provide world-class Caman training from Pro Caman, as well as consulting and coaching for teams trying to implement a Caman strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complementary practice and have Cang classes from Scrum.org as well."
  },
  {
    "Title": "3 best ways to wreck Kanban. Sweep problems under the rug.",
    "Description": "Ignoring problems in Kanban leads to workflow blockages, technical debt, and crises. Learn why prompt issue resolution and transparency are vital for effective Kanban.",
    "ResourceId": "Xa_e2EnLEV4",
    "Url": "https://www.youtube.com/watch?v=Xa_e2EnLEV4",
    "Date": "2024-03-04T07:00:13Z",
    "Captions": "One of the most common behaviours that will greatly impact on your ability to be successful, um, at any process, but specifically having a CAD strategy, is sweeping your problems under the rug. Um, so that's a most teams will not necessarily nefariously but hide or ignore their problems. That's why when we talk about retrospectives, we talk about, uh, H, um, reflection, we talk about Kaizen as a phrase, are we hiding or ignoring anything, right? That's something to actively look at. And it's because we, we as humans are really, really good at ignoring stuff that maybe we feel like it's too much effort. Maybe we feel like we can't do anything about it.\n\nI remember, um, a time, uh, living in a flat with my brother in the West End of Glasgow, and, um, we never cleaned the grill because nobody wanted to do it. We effectively swept that work under the rug and went, \"I don't, I don't really know how to do that,\" right? I mean, that's, I've got to go figure out. This was before YouTube, right? I got to go figure out how to clean this. Perhaps I have to phone my mum and ask her, right? How do I, how do I do this? Um, what's the best way to approach it? What level of detail do I need in how to do that? So both of us ignored it completely, and we used it all the time. \n\nSo what do you think happened? Eventually, what do you think happened? Eventually, yeah, you're right, it caught fire. It caught fire, and we had a fire in the kitchen. We didn't have a fire extinguisher because we also swept that under the rug and didn't do that. At one point, my brother had grabbed a pan full of water and was about to throw it into the grill, and then he realised, \"No, like, it's not a good idea to throw water on a fat fire,\" right? If you've ever seen those adverts on TV, it just explodes. You don't want to throw water on a fat fire. \n\nUh, so we stopped, called the fire brigade. The fire brigade arrived, they came up with a fire extinguisher and went, \"Done,\" right? But we needed to clean the grill. That was our trigger to go do that and then to continue to do it regularly. I actually don't remember. We were teenagers. I don't remember if we actually continued to do it regularly or we just did it once and then maybe then wherever that cooker ended up, somebody else will need to do it. But you've got to do the things, otherwise this cruft builds up, right? \n\nAnd that cruft could be dirt, it could be fat, it could be clogging up the system. It can be just getting in the way, making things a little bit more difficult. It could take the guise of bureaucratic processes in your organisation. It could take the guise of technical debt in your product. It could just be purely architected, purely designed stuff that you've created, and nobody goes back, uh, to resolve those things. Just sweeping problems under the rug and ignoring them. \n\nYou know that in every cartoon, they have that moment where they're cleaning up a kid's room and they just open the cupboard, shove everything in, and then close the cupboard really quickly. And then at some point, the cupboard door pops open and all the stuff falls out again. That's what we're trying to avoid. That's why we need discipline to not sweep things under the rug, to do something about it. We need courage when things might be a little bit more difficult to deal with. \n\nA CAD strategy is not going to be effective if you or your team sweep things under the rug. Have the discipline and courage to implement a CAD strategy fully. If you're struggling to implement a CAD strategy, we can help or help you find somebody who can. Click on the link below to get in touch."
  },
  {
    "Title": "3 best ways to wreck Kanban. Don't have a working agreement.",
    "Description": "Not having a working agreement in Kanban leads to team misalignment, inefficiency, and conflict. Clear agreements ensure roles, goals, and processes are understood by all.",
    "ResourceId": "h6yumCOP-aE",
    "Url": "https://www.youtube.com/watch?v=h6yumCOP-aE",
    "Date": "2024-03-01T07:00:17Z",
    "Captions": "One of the main ways to wreck your campaign strategy is not agreeing how you're going to work as a team. Right? Unless you've sat down with the people you're going to work with and decided on how we are going to approach things, we probably don't have agreement. Right? Most people, unless you sit down and agree, are probably not on the same page. We don't have all of our noses pointed in the same direction. Right? I might pick things based on their affinity to something I like; you might pick things based on their affinity to something you like. And suddenly, from the outside, it looks like we're randomly picking stuff to work on. Right?\n\nThat working agreement is so often missing from teams. For some reason, lots of people think that you can just throw ten people together and they'll magically figure out how to navigate the complex nature of delivering high-value complex products and be able to just figure it out. And they also think that you can just apply some framework, and if we all follow that, we'll also all be in agreement. So, for example, Scrum. Right? We have a campaign strategy. We're going to do Scrum as part of that. That's our working agreement. No, it's not. It's not your working agreement at all. Scrum is a framework; it's not a blow-by-blow how to do stuff. Are you going to use story points? Are you going to use planning poker? Those are not part of Scrum; they're optional things that you might pick. Have you decided to do those things? If you're not doing Scrum, you might just have ten people who all want to work a slightly different way, working together towards some outcome.\n\nSo I would say to you, if I took one of my lovely board games to my board game group, I'll be there tonight playing. If I took one and we got the pieces out, I don't know if you've seen these things, but they have like 300 pieces in the box. Right? We got all the pieces out of the box. I set it up the way I think it looks like it should be set up, so I'm not going to look at the rules; I'm just going to make some stuff up. And then every member that's playing, all four of us, make up our own rules for how to play the game. We don't read the official rules; we just do it our own way. Are we working together? Are we playing the same game? Right? You can't have a win; you can't have success unless you've agreed what the rules are for success. Right? Most of these games, it's the most points. Right? But have you agreed how you get points? Can I just move a piece to here and say now I have 300 points?\n\nThat's total disorder. That's total disarray. And most teams that I see and engage with operate in a state of total disarray because they've not agreed what their rules are. They've not agreed what game they're playing, what success looks like, how they get little successes within the context of the bigger successes that the organisation's trying to achieve. So sit down with your team and agree the way forward. Don't tell you need to agree, because if you tell me how to do the stuff that I do, I'm going to ignore you. I need to be in agreement with you. You need to collaborate on creating that definition of workflow. We need to collaborate on creating our working agreement. And it actually doesn't matter whether you have a CI. I don't care if you're doing a Kanban strategy, Kanban method, Scrum. It doesn't matter what it is. If you've got a bunch of people working together, you need to get together and agree how you're going to work. Otherwise, you have disarray. Everybody's making it up as they go along. Don't do that.\n\nIf you're struggling to implement a Kanban strategy, we can help or find you someone who can. Click the link below and get in touch today."
  },
  {
    "Title": "3 best ways to wreck Kanban. Use vanity metrics.",
    "Description": "Learn how to avoid common Kanban mistakes by focusing on actionable metrics like WIP, cycle time, and throughput instead of vanity metrics for better workflow efficiency.",
    "ResourceId": "S4zWfPiLAmc",
    "Url": "https://www.youtube.com/watch?v=S4zWfPiLAmc",
    "Date": "2024-02-29T07:00:09Z",
    "Captions": "One of the main ways to mess up the implementation of your cand strategy and not get the value that you're expecting, i.e. we're doing better than we were before, is to not look at the data. I see this in team after team. They say they're doing caman, but all they have is a board with some columns. They don't have any whip limit, and that's it. They just have a board with some columns and they call it caman. I'm sorry to say, but that is definitely not enough to be a Canan strategy. It's just not enough. \n\nOne of the key things that they miss out is not looking at the data or using vanity metrics. Oh my goodness me, the vanity metrics coming up my ears! Story points, velocity, burndowns—get rid of all that crap! It's terrible. It's not going to help you maximize the flow of value for your customers. It's not going to help you see what's going on enough to be able to ask more interesting questions that allow you to change your process in order to optimize it. Those metrics are absolutely not good enough. \n\nIn that story, there are four key metrics in cat that you should be looking at. They're all fairly straightforward, easy to collect. Most of us are using digital tools today, so you effectively only need one piece of data—well, technically two pieces of data—for each piece of work that flows through your system: the date and time when it started and the date and time when it finished. That's it! Those two pieces of data. If you're using Jira, if you're using Azure DevOps, if you're using Trello, all of that data is collected for you. It's in there, and you just need to render it in a way that makes sense. \n\nSo if it's started but not finished, it's part of your working process, right? That's your whip. If it's started but not finished, you can also see how old it is—how long it's been sitting there. That's work item age. If it's finished, if it's crossed that finish line, you know how many items you've delivered per unit of time. Right? So over each 30-day period, how many items do we deliver? There you go, we've got that number just by virtue of that end date. And if you have the start date and the end date, you also have the cycle time—how long it actually took to deliver each of those items. \n\nThen you can do a bunch of math, which is pretty standardized. You can go or look at a bunch of pieces of information in that, but without that data, you can't see what's going on. Right? Transparency, inspection, and adaption—where's the transparency if you don't have the data or you decide to look at vanity metrics or metrics that don't actually provide you with anything actionable? That's the key. It is the data. What are you doing with the data you're looking at? How are you changing the way you work based on the outcome of that data? \n\nIf you're not, you're either not doing it or you're not looking at the right data because the data is not telling you something that helps you. Stop looking at back data as part of your cband strategy. Stop looking at vanity metrics and improve your process. If you're struggling to implement a cband strategy, we can help or help you find somebody who can. Click on the link below and get in touch."
  },
  {
    "Title": "3 core practices of Kanban. Improving a workflow.",
    "Description": "Learn how to improve Kanban workflows by identifying blockages, reducing waiting times, and making continuous changes to boost efficiency and value delivery in your process.",
    "ResourceId": "qWHCBUwpOZk",
    "Url": "https://www.youtube.com/watch?v=qWHCBUwpOZk",
    "Date": "2024-02-28T07:00:19Z",
    "Captions": "The third most powerful practice in Kaman is improving your workflow. It's all well and good to have your visualisation so you can see everything that's going on. It's all well and good to actively manage the works through the system, but if your system's broken or your system could be improved and you don't do anything, that's not going to bode well for the future, right? \n\nSo improving the workflow, making changes to the system in order to maximise the flow of value through the system can help us prevent things like blockages and things backing up in the system, things getting old in the system. Once you've identified why those things are happening, you need to actually do something. You need to actually change the system in order to make those things more effective. \n\nSo many, so many, so many teams will just sit there and they'll understand that there's a problem with the system and they'll just say, \"Well, we can't do anything about it. That's Bob. Bob is getting in the way and Bob is not doing something he's supposed to do in a regular cadence.\" \n\nI worked with a team in the US and we had the Kaman board on the wall, right? And we couldn't change this part of the system, okay? Because it was our Kaman, but we had a dependency, right? That might be something you actively manage away. We had a dependency on somebody else and it was basically an approval state, right? So stuff would go through our system and then at this point it had to be approved and then it would continue through our system. \n\nThe person who did the approvals didn't want to look at the board every day, didn't want to approve stuff every day, so he did weekly approvals. He would, every, I can't remember what day it was, let's say it's Monday, every Monday he opens up the board, Monday morning, he opens up the board and approves the things that need approved. But what if we finish something Monday afternoon that sits there for seven days before it gets approved? \n\nSo what we started doing with our board was this: we were quite lucky, our board was on the wall in the main area of our business, right? In the corridor where everybody was going past, like everybody, the CEO, CFO, everybody would go past this board. And what we did was in that column, just at the bottom of that column, we started adding Post-its in there that listed financial numbers. \n\nWe kind of came up with a calculation. This was part of our actively managing how much does it cost for things to be sitting waiting to be approved. And we started putting that cost in there and those numbers would go up towards the end of the week and then they would go to zero on Monday and then they would start building up again and go to zero and start building up again. \n\nWe had a little graph showing that flow of that bad flow of work through the system and at some point that person whose job it was to approve walked past that board and kind of had a double take and kind of went, \"What are these numbers?\" And we just explained, \"That's the cost of these items sitting there and waiting. That's our wait time cost.\" \n\nSo we thought we would put it on the board because this is where one of our bigger costs is. And what happened? That person changed their behaviour almost immediately and started checking every morning for anything that was blocked or needed approved. In fact, I think at one point they were checking every morning and every end of day so that everything was just flowing through the system. \n\nAnd that was the single biggest cost benefit that that team had in a six-month period was reducing that cost of delay of things sitting there and not being approved when they were in fact valid, they were in fact approvable, i.e., they would be approved and just waiting. \n\nSo changing your workflow or creating a situation within which that workflow is changed is one of the three most important principles of a Kaman strategy that the things you have to have in Kaman. If you're struggling to implement a Kaman strategy, we can help or we can find somebody who can. Click the link below and get in touch."
  },
  {
    "Title": "Mastering Kanban: The Essential Guide to Defining and Visualising Your Workflow for Maximum Efficiency",
    "Description": "Learn how to define and visualise workflows in Kanban to boost team clarity, alignment, and efficiency, with practical steps for stable processes and effective task management.",
    "ResourceId": "sbr8NkJSLPU",
    "Url": "https://www.youtube.com/watch?v=sbr8NkJSLPU",
    "Date": "2024-02-27T07:00:31Z",
    "Captions": "One of the core practices of Kanban is to define and visualize your workflow. This is really important because it sets the groundwork for us all, all the people that are participating in the work in the system, as all agreeing what is it that we do and how do we currently work. \n\nSo there are lots of pieces of information that we need to pull together to figure this out. One might be like, what goes on our board? That might be a great question to ask. What types of work go on our board? Another question might be, what are the current stages that all of our work goes through? Not a specific piece of work, but all of our work goes through that would generate the columns within your Kanban board. \n\nBut also asking additional questions like, why do we pick this item? How do we pick the item from this column when we go to select things? And what you'll find is that for most teams, most groups of people, they don't have any level of agreement on what that is. Why would you pick something? Lots of people will pick stuff because they think it's cool, because it fits, they think it fits their skill set. \n\nBut the important questions to be asking are, how do we pick this so we maximize the value of what we're delivering? Is that the right thing to select in order to do that? Is that the right business decision? Answering those questions and coming up with a set of rules for our team—right, these are our decided rules on how we're going to select things, why things move from one column to another, what are the defined states, what are the types of work, and how are we going to control the amount of work that we have in progress—are all part of defining our workflow and explicitly setting policies. \n\nThat's all part of this defining and visualizing your workflow. Bringing all of those things together allows us to have a way of working. Another way of saying this, another way of saying define and visualize your workflow, is what is your team's way of working? And does everybody on your team agree that that's the way that they should be working? \n\nThis definition is absolutely fundamental to figuring out how work flows through your system. Right, you'll probably have heard folks talk about having a stable system. Right, you need a stable system. Well, you can't have a stable system if every member of the team decides ad hoc how they're going to do all of the things within the system. We don't have a system; we've got to make it up as you go along system, and that's never going to generate stability. \n\nSo having a stable system means we've decided what it is, we've written down how we're going to work, we've debated as a team and decided on certain things, and then we visualize that so we can all see what's going on. If you are struggling to implement a Kanban strategy, we can help, or we can help you find somebody who can. Click on the link below."
  },
  {
    "Title": "3 core practices of Kanban. Actively managing work items in a workflow.",
    "Description": "Explains how to actively manage Kanban workflows by monitoring work in progress, resolving bottlenecks, and optimising flow for greater efficiency and value delivery.",
    "ResourceId": "u56sOCe6G0A",
    "Url": "https://www.youtube.com/watch?v=u56sOCe6G0A",
    "Date": "2024-02-26T14:06:47Z",
    "Captions": "Once you've defined and visualised your workflow, the next most important thing you can do in a Kanban strategy is to actively manage the work within your workflow. That means that you are not just a bystander to the process. The people that are participating in the process are not just sitting there looking at a piece of work going, \"Yeah, that's not working very well,\" and not doing anything about it. The core practice here is to actively manage that. \n\nThis means that if we're finding that we've got too many things going on in a particular area, perhaps we should reduce our work in process. If we've got lots of folks sitting about doing nothing in a particular area because we don't have enough work, perhaps we should increase the amount of work. Actively manage your WIP. You want to avoid work piling up anywhere in your system. \n\nSo if you're viewing your visualisation of your Kanban and you see lots of things piling up before another group, another team, another process, what are you going to do about it? You can't just sit there and watch it pile up. That's not going to help us maximise the flow and the amount of value that we deliver. We need to do something about it. We need to go and figure out what the problem is. We need to change our system in order to make it better. \n\nMaking sure we don't have stuff pile up and making sure something doesn't sit there for ages is part of actively managing your work. There are so many teams that I work with where we start looking at this data, and the first thing I'll say is, \"Why has this thing been active for 250 days?\" It's something that's either fallen through the cracks, or it's some kind of bucket piece of work that exists forever, or it's just something that's taken a really long time because it's got blocked, or we didn't understand it, or any of those things. \n\nWhy is it still sitting there? How can we make it go away? How can we move it towards completion? If we have a history of things taking a long time, then we need to do something about that. If items on your board are blocked, how are you visualising and indicating that they're blocked? That was the first practice, but what are you going to do about it? Are you just going to sit there and go, \"Yeah, we've got all this blocked stuff, let's move on and work on something else?\" No, you need to actively manage the blocked items. \n\nHow do we unblock them? How do we unstick them? How do we get them moving through the system again? It's kind of like having a pipe. If the pipe gets clogged with whatever it is that's clogging the pipe, it's difficult for other things to move around it because our attention is continuously pulled in different directions. So we want to actively work to get rid of those blockages. \n\nAnything that's blocked, anything that's slow moving and getting old sitting there, and anything that is piling up—something that's stuck—usually things pile up behind blocked stuff. All of those things are required for you to be actively managing your work in a Kanban strategy. If you're struggling to implement a Kanban strategy, we can help or help you find somebody who can. Click on the link below and get in touch."
  },
  {
    "Title": "My journey with Kanban and why I actively recommend it to clients.",
    "Description": "Explains how adopting Kanban improves workflow, predictability, and transparency for any team or industry, offering practical insights and benefits over traditional approaches.",
    "ResourceId": "ZisAuhrOhcY",
    "Url": "https://www.youtube.com/watch?v=ZisAuhrOhcY",
    "Date": "2024-02-23T07:00:12Z",
    "Captions": "I got introduced to Cban by Daniel Vante and Steve Porter when I did the participated in the first professional Scrum with Cban class back in 2018, late '17, early '18. I didn't fundamentally understand at the time the value of this different way of thinking, of this observational tool. I think it's quite important to understand that Cban is not a system itself. That's why Pro Cban and the Cban guide talks about it as a strategy. It's a strategy for understanding your existing system and then actively managing the flow of work through that existing system.\n\nWe talked about it in that context, within the context of a Scrum team, and how we can actively manage the flow of work within the system, use the Cban metric to augment our existing, perhaps awesome, Scrum process in order to really understand the predictability that we're getting and increase that predictability for the business. Because lots of teams do struggle with their ability to deliver. They struggle with getting to the end of the Sprint and having working product. They struggle with consistently getting working product. They struggle with the quantity of working product, and that creates fear in the business because the business are paying a lot of money to get stuff, and they feel like they're getting that stuff in fits and starts in an unpredictable way. They feel like it's not what they asked for, it doesn't cost what they thought it would, and it's not delivered when they thought it would.\n\nPart of that is because they can't see what's going on. We're not giving them any information. The standard Scrum team is not giving the business any information to reassure them. They're not doing transparency right. They're not increasing the transparency to a level where the people viewing who need to understand actually understand what's going on, and that creates that fear. That means that we want to have more control. When we fear something isn't working out, when we fear that our money isn't being spent well, we want to take more control of that thing. That's the knee-jerk regression that we get from a lot of teams in organisations when a lot of teams move towards Scrum because they take away some of the tools for measuring productivity from the teams. \n\nBecause in Agile, we don't measure productivity, they take that stuff away, but then they don't replace it with anything. Because they don't replace it with anything, transparency drops, fear increases, and then we want to go back to the old way. So a Cban strategy, and this is something that I've learned really over the last five years of working with Daniel Vante and the Cban guide and Pro Cban, is that the only way to be successful is to use a Cban strategy. Because we need to understand our predictability, we need to understand and actively manage the flow of work through the system, and we are not going to be successful if we don't do that. \n\nSo I recommend a Cban strategy for any team doing anything in any context. That's right, any team doing anything in any context. If you're a marketing team delivering marketing content, if you're a software team delivering software and you're using Scrum, you're a software team using SAFe, you're a software team using something else that you made up yourself, or you're a management team managing a portfolio, or I don't know, I'm trying to think of other things. If you work in a factory and you're delivering stuff, you should be using a Cban strategy in all of those contexts. That is the metrics you need in order to then be successful. \n\nBecause those metrics create transparency. Transparency allows you to make better decisions and ask more interesting questions, and those interesting questions and better decisions result in more effective flow or stop doing the thing that you thought of. That's why Cban is so important to the strategy for every team building anything in any company. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Overview of the 'scaling with portfolio Kanban' course",
    "Description": "Learn how to apply Kanban at the organisational level to optimise workflow, improve predictability, and make data-driven decisions across multiple teams and projects.",
    "ResourceId": "kOj-O99mUZE",
    "Url": "https://www.youtube.com/watch?v=kOj-O99mUZE",
    "Date": "2024-02-22T07:00:26Z",
    "Captions": "The applying scaling portfolio cbank class is really about how do we look at our system no longer at the team level but how do we look at our system at the organisation level at the programme level. Um, and what how how do we then understand, analyse the work and create effective strategies for enabling that flow of portfolio items through our system to increase the amount of value that we deliver for our products to increase predictability so that we can have a better understanding of which things are likely to be successful, which things we need to cut our losses on, um, which things need to be changed drastically in order to result in that value creation.\n\nAnd so it really focuses at for heads of departments, so agile coaches, project managers, development leads, high-level product owners, scrum masters and product managers that are trying to deliver lots of things, um, that may be competing things into production. Um, and they need to increase the flow through the system. Right, we want to deliver um more stuff more quickly. We want to get faster and more predictable um at delivery and those are all things that we're going to talk about in the applying scaled portfolio cbank class.\n\nSo this course will help um leaders in organisations understand the current flow through their system and ask more interesting questions about what they can do differently to improve the flow and predictability through the system. Um, so whatever your system is at that level, how do you understand what is going on in portfolio and increase that flow of delivery of work for the business and increased predictability?\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. Um, we also have our immersive and traditional public classes on our website and would love to hear from you."
  },
  {
    "Title": "Overview of Applying Professional Kanban course.",
    "Description": "Learn how to implement Kanban in any workflow, use key metrics and visualisations, and drive continuous improvement for better project management and value delivery.",
    "ResourceId": "ZQu2uSt1xxk",
    "Url": "https://www.youtube.com/watch?v=ZQu2uSt1xxk",
    "Date": "2024-02-21T07:00:11Z",
    "Captions": "The applying professional Cang course from Pro Caman is really that foundational class on understanding how to apply a cand strategy to your existing system. It doesn't really matter what your existing system is; you could be doing Scrum, you could be doing waterfall, you could be doing anything. Whatever process you've got right now is the process that you apply the Cang strategy to. \n\nThis course's purpose is to help you understand what is needed in order to have a Cang strategy and what are some of the starting points, tools, and techniques you can use to get started with a cand strategy. What's the minimum you need to be doing Cang right? \n\nSo, what are the minimum metrics we need to be collecting, visualisations we have to have, and decisions that we have to make in order for our continuous improvement to start happening? How do we start interpreting the graphs, start understanding the data, and analysing it in order to get better at whatever it is that we're doing? \n\nIt really helps improve the flow of value through the system. It helps you get an idea of what your current flow is, and that helps you figure out how to ask more interesting questions of your team. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. \n\nWe have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Overview of 'applying metrics for predictability' Kanban course.",
    "Description": "Learn how to use Kanban metrics like cycle time and throughput to improve team predictability, make accurate forecasts, and deliver consistent project outcomes.",
    "ResourceId": "gjrvSJWE0Gk",
    "Url": "https://www.youtube.com/watch?v=gjrvSJWE0Gk",
    "Date": "2024-02-20T07:00:27Z",
    "Captions": "So the applying metrics for predictability course from Pro Caman is really focused on a deep dive into how you can use the metrics coming from your Caman strategy to really focus on improving the predictability of your teams. Right, the predictability of our ability to deliver. \n\nSo we need to understand what the impact of the changes is, like how we want to change the metrics in order to improve predictability. How do we identify in the graphs what things might be the issue? Like how do we interpret the graphs in order to maximise those changes to predictability? \n\nAnd how do we make forecasts, right? Make accurate forecasts for single items, for multiple items, looking forward into the future to understand what we're going to do next. \n\nAnd really, lots of teams struggle with the two questions: when will it be done and how much work will I get? These are really important questions that the business has that most teams are unable to answer. And these metrics for predictability really bring that answer to the forefront. \n\nHow do you, what data do you collect? How do you interpret the graphs? How do you analyse that data in order to make good choices around increasing predictability? And how do you improve the flow of value into production? \n\nHow do you increase the flow of value to the business, which is what we're all here for? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. \n\nWe also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Overview of 'applying flow metrics for Scrum' course.",
    "Description": "Learn how to use Kanban flow metrics in Scrum to improve value delivery, track progress, identify bottlenecks, and drive continuous improvement in agile teams.",
    "ResourceId": "NeGch-lQkPA",
    "Url": "https://www.youtube.com/watch?v=NeGch-lQkPA",
    "Date": "2024-02-19T07:00:09Z",
    "Captions": "So the applying flow metrics for Scrum course is an amazing class about Kanban from the proamband.org about how you would leverage the metrics and capabilities that a Kanban strategy brings within the context of a Scrum team. We're going to be talking about how to leverage the different data aspects in Sprint planning, in Daily Scrum, especially the other events, retrospective, what tools you can use around product backlog refinement to help you increase flow, how you track progress towards critical dates and deliverables, and to identify opportunities for the team to ask more interesting questions. \n\nAnd that's the purpose of the applying flow metrics with Scrum course. It exists mainly because there are lots of people who are doing Scrum in their organisations and they're really struggling to deliver value at the end of each Sprint, to focus on that value delivery. A Kanban strategy enables you to focus on and increase the flow of value delivery through your system. \n\nSo it really, really, really benefits Scrum teams. I wouldn't want to be doing Scrum without this capability. It really helps teams deliver on that value, right? And it's really core focus on delivering value, not tasks, but actual value to the customers. \n\nSo you should be able to increase your ability to deliver, make your stakeholders happier, and your business happier using these techniques. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "How long does it take to transition from project management to Kanban?",
    "Description": "Learn how to move from traditional project management to Kanban, including steps, benefits, and tips for a smooth, gradual transition to Agile workflows and continuous improvement.",
    "ResourceId": "IU_1dJw7xk4",
    "Url": "https://www.youtube.com/watch?v=IU_1dJw7xk4",
    "Date": "2024-02-16T07:00:10Z",
    "Captions": "So the question is if you're working in a traditional project management world. I know everybody has qualms about the word traditional, but what people have always done in a traditional project management world, and you're I guess daunted by this idea of agile and the changes that need to happen in order to get there, then probably a Kanban strategy is a way that you can gain benefits over a longer period of time.\n\nSo what lots of teams and organisations get benefit from jumping to a Scrum process, right? It highlights where you've got problems. It very quickly identifies things in your organisation that inhibit the ability for you to move towards an agile process. But quite often, depending on the organisation, that can be too much too fast. You can end up with just bad Scrum. We're going to call everything with the agile terminology, use the Scrum terminology, but in actual fact, we're not actually going to make any changes to the way we do things.\n\nSo maybe a better approach for those types of organisations that don't have the willingness to change—and by the way, the best time to change the way you do things in an organisation is when your organisation has completely and utterly failed to deliver or achieve something. That's when people are most open to change. So that's where you might bring in a radically different process like Scrum. \n\nBut the advantage of a Kanban strategy is you start from where you are right now. A Kanban strategy does not require you to change the way anybody works. I'll say that again: a Kanban strategy, applying a Kanban strategy, creating and applying a Kanban strategy does not require anybody in your organisation to change the way they work right now. \n\nThat's really important to understand. Kanban is not a way of doing things; it's not a process in itself. It's observational. It observes your existing process and gives you data and information about how effective it is being. That's the purpose of a Kanban strategy. So you don't need to change the way you work; you just need to document how you work right now. That's your definition of workflow. You write down how you work right now, and then you need to collect some metrics.\n\nOnce you've collected those metrics, you're going to look at them and you're going to see if there are any patterns that allow you to identify things that need to change. That's it. So one person, you as the project manager in your organisation, can yourself implement parts of a Kanban strategy. You can at least collect the data, right? You can load it out of Jira or Azure DevOps into tools. You can pull it into a spreadsheet and figure this stuff out, right? \n\nSo you have the start date and the end date, the age of the work items. Because you get the start date and the end date, you get the cycle time, right? How long things take to go through the process. And then you can do some data analysis on that. You can start to plot it in a cycle time scatter plot and look for outliers. There's a number of graphs that you would definitely use within the context of Kanban, and each of those graphs are there to visualise the flow of work through your system.\n\nOnce you visualise the flow of work through your existing system that you've not changed, how everybody works, you'll then see things that you want to have a conversation about. It's actually quite startling how easy it is once you point out, once you do the graph, and somebody like myself, who's been trained to read the graphs and have read graphs from lots of teams, points at some things and says, \"What's this? Why is this group of things kind of like this?\" And then you're like, \"Oh yeah, I can see that too.\" \n\nIt's very easy to identify, at least initially, right? When we've not made any changes to the system, it's very easy to identify anomalies. It's going to be super obvious. You'll have things like lots of dots clumped together. You're like, \"What's that?\" Well, that was a release. Okay, well, is that the best way to do that? Or you've got all of these dots way up on your cycle time scatter plot because they took a really long time to complete. It's like, \"Why did these all take a long time to complete?\" \n\nWell, we've got to get the Architectural Review Board to approve this thing, and they only sit once every six months. Oh right, so you can only get architectural stuff approved once every six months. What happens if you need a change in between? Sorry, I'm using this example because I worked in this environment. What happens if you need a change in between? Well, you need to stop work, put it into the Architectural Review Board, and they meet every six months, so you need to wait. \n\nIt could take years to deliver a product because you need to make changes to it. Those types of things you probably already know some of them, right? You already know that some of those things in your organisation are broken. You know it. A Kanban strategy will give you the data to prove it. And if you can prove it, you can put it in front of somebody who can do something about it and say, \"Look at the data. I would like to run an experiment. Stuff's taking a really long time to complete. I think this is the problem. This data is telling me that this is the problem. I'd like to change this, and we can see if the data improves.\"\n\nYou just change your system. You just optimise your system. Keep doing that and you'll get to the most optimal system for the type of work that you're doing, which will be different for every team, every group, everybody, right? But that's how you make that transition. You need to understand how the system works in order to be able to make the change.\n\nSo how long would it take to transition from traditional project management to Kanban? As long as it takes, right? You optimise as much as you need at whatever speed you want, and that's up to you. If your current system of work is failing you, then you would benefit from creating and applying a Kanban strategy. Our professional Kanban trainers and consultants are ready to help. Don't wait. The sooner you start, the sooner you'll improve. Get in touch below."
  },
  {
    "Title": "Does Kanban integrate into a Scrum environment?",
    "Description": "Explains how Kanban can be integrated with Scrum to improve workflow visibility, provide key metrics, and enable continuous improvement in agile teams.",
    "ResourceId": "zltmMb2EbDE",
    "Url": "https://www.youtube.com/watch?v=zltmMb2EbDE",
    "Date": "2024-02-15T07:00:31Z",
    "Captions": "The question is, does Cban integrate with a Scrum environment? And I want to be super clear: Cban integrates with any environment, any way of working, whether you're doing Scrum or you're doing Waterfall or you just made up a way of working. All of these things can benefit from the application of a Cban strategy.\n\nRight, the Scrum in particular doesn't have any metrics. There are no metrics in Scrum. Go read the Cang guide; there is no mention of velocity, no mention of story points, no mention of time, no mention of any of those things. The only thing that's about as close to a metric as the Scrum guide talks about is it says that the team should have discussions to understand the size of things that are in their backlog. That's it, right? How you define that size, all of those things are up to the team. Teams generally pick things like story points and velocity, and unfortunately, those metrics have damaged our ability as an industry—building software industry in particular—to have conversations with customers, have them understand what we're saying, and be able to actually answer the customer questions.\n\nIt is absolutely unreasonable for a customer to come to you, has given you and your team a bunch of money, and says, \"When will it be done?\" and you say, \"We're doing Scrum; we don't have an answer to that question.\" That is completely unreasonable, and if I was that person, I would say, \"Fine, I'm not giving you any more money. I'll go find somebody else who can answer my questions,\" right?\n\nSo, Cban—a Cban strategy—enables you to actually answer those questions, right? You're definitely not answering it with absolutes, right? Because that's impossible. We understand the cone of uncertainty; we understand that those difficulties. But we can start to use probabilistic forecasting—a fantastic tool, probabilistic forecasting—to help us answer those questions of \"When will it be done?\" or \"What will I get by this date?\" Right? These are such important questions.\n\nDaniel Vante, who's one of the creators of Pro Cban, the creator of the Cban strategy, who worked with Scrum.org to create the Cban guide for Scrum teams and H Cban for Scrum teams—of course, he has a book called \"When Will It Be Done?\" That's how important that question is to your business. You need to be able to answer that question: \"When will it be done?\" And the tools that Cban gives you, the metrics that you have to monitor, enable you to then get those answers to those questions very specifically, right?\n\nSo, does Cban integrate with a Scrum environment? I think Cban has to integrate with a Scrum environment. In fact, Scrum is not as good without a Cban strategy. For me, this is a pairing that just has to happen. If you're doing Scrum, you should be using a Cban strategy. I don't really have any—what would you call it?—like, \"Well, maybe you should use...\" No, you should be using a Cban strategy. Everybody should—for every system, in every workplace, everywhere—you should be using a Cban strategy. That's how you understand the flow of work through your system so that you can make the optimisations, right? That's where you get the continuous improvement from when you're doing Scrum.\n\nRight? You have a retrospective. How do you know what optimisations you should make? How do you have conversations about what the problem is if you've got no data? How do you see whether the things that you've decided to try actually provide any benefit or not? You need metrics, and you need data. And story points and velocity and burndown charts are completely useless to answer any of those questions. Are we on track? Are we doing well? Do we need to improve? None of those questions can be answered with burndown charts and velocity. Don't even try; they're a waste of time.\n\nWhat you need is cycle time, you need lead time, and you need throughput. You need work item aging, and you need work in process. That's it. Those are the metrics that you're looking for. Those are the metrics that you need. If your current system of work is failing you, then you would benefit from creating and applying a Cban strategy. Our professional Cban trainers and consultants are ready to help. Don't wait; the sooner you start, the sooner you will improve. Get in touch below."
  },
  {
    "Title": "Getting started with Kanban.",
    "Description": "Learn how to launch a Kanban pilot, define workflows, use metrics like cycle time and throughput, and foster continuous improvement for better team productivity.",
    "ResourceId": "kTszGsXPLXY",
    "Url": "https://www.youtube.com/watch?v=kTszGsXPLXY",
    "Date": "2024-02-14T07:00:19Z",
    "Captions": "So how easy is it to get started with Caman? To have a pilot, to try something, it's super easy. Pick a team, apply a Caman strategy. It's really that easy. Sometimes it's difficult to convince people. People behave how they're measured, so normally it's the traditional metrics and measures within the organisation that prevent you from doing some of these things. But there are tools out there that can help. Most folks today are probably using either JIRA or Azure DevOps to manage their work, since most of us work from home quite a lot of the time, right? So we don't have the boards on the wall anymore; we don't have the opportunity for that.\n\nUsing JIRA and Azure DevOps, get access to some of the data analytics, look at some of the data, look at the Caman data, look at the graphs, and see what's going on in your current system. That's see what's going on, and then get together and run a workshop. Run a workshop on defining your definition of workflow, defining how the way it is you work just now. Start to have those conversations, but don't think—absolutely do not think—you can have a two-hour workshop and then you're done. That two-hour workshop is just a start for starting people thinking about how they work because most people don't really understand how they work. They don't understand how they work because they just do it. They just do it the way they do it. They've never had to write it down; they've never had to discuss it with each other. \n\nYou start having very interesting conversations with the team. That arc of conversations kind of needs to play out, right, in order to get to consensus of this is the way we agree how we work. Once you've got that agreement, you're doing Caman. But you can just start with the metrics, right? Sometimes using metrics to kind of drive people's behaviours can be super valuable. So if you started recording the cycle time from when work starts to when it finishes in the system and just start looking at that data—how long does work take on average to go through the system? How long does an individual item take to go through the system? \n\nThen you can look at something like a cycle time scatter plot and look for outliers. This is something that you actually don't need any buy-in from anybody in the team or anybody in the organisation to do. Load the current data from Azure DevOps or JIRA into a tool that lets you visualise the Caman metrics and look at what's going on. Start asking more interesting questions during your meetings and events that you have with the team. When you see those outliers, that piece of work that took, you know, we do two-week sprints, and there's a piece of work that took 430 days to complete, right? Ask that question at the retro: why did this take 430 days? What could we have done differently? \n\nThat's asking more and using the data to ask more interesting questions. As you start asking those more interesting questions, hopefully somebody on your team or in your group or a leader will ask, \"How do you know? How did you see this? How did you spot these things?\" You can start introducing little pieces of Caman, saying, \"I'm using this cycle time scatter plot. It's showing that all of these items are above the 95th percentile; these are the outliers. So I'm asking questions about these and why are they like that, and how do they go together?\" \n\nOh, that's really cool! Is there any more data like that? Well, yes, there is. You can start having those conversations. So I think it's very easy to start using Caman in the organisation. All it takes is any individual on the team to start analysing the data and looking and suggesting optimisations for the team, trying to build some credibility so that you can start having discussions about the definition of workflow. You can do it ninja, right? You can say, \"Well, how do we pick?\" You know, doing the retrospective, \"I'm interested in how we all pick the next piece of work we're going to do.\" \n\nOh, well, I do this, and I do that, and I do the other thing. Start pulling on those threads. Just start pulling on the threads. So ultimately, how easy is it to create a Caman pilot in your organisation? Super easy. Just do it. It just needs one person to start looking at the data, one person to start asking more interesting questions. If your current system of work is failing you, then you would benefit from creating and applying a Caman strategy. Our professional Caman trainers and consultants are ready to help. Don't wait; the sooner you start, the sooner you'll improve. Get in touch below."
  },
  {
    "Title": "Why is Kanban becoming increasingly popular in creative industries?",
    "Description": "Explains how Kanban helps creative industries optimise workflows with flexibility, personalisation, and continuous improvement, contrasting it with Scrum’s limitations.",
    "ResourceId": "MDpthtdJgNk",
    "Url": "https://www.youtube.com/watch?v=MDpthtdJgNk",
    "Date": "2024-02-13T07:00:14Z",
    "Captions": "I think Caman is becoming popular in the creative industries because there's very little other help out there for the creative type work where you're, for example, building computer games or you're building marketing content or you're building videos. Whatever it is that you're building, that's not really software engineering, because everybody thinks of Scrum as a software engineering process and find it a little bit weird trying to apply it within their context. Right? They actually, they're actually running into the same thing that everybody runs into, that doesn't, that would, things don't work that way here. So Caman is a much better starting point for getting into making changes to the way that you work and trying to optimise your processes.\n\nSo coming up with that definition of workflow for your existing process is usually much easier than trying to apply something like Scrum. So for lots of organisations, they don't want that big bang change. Right? When you apply something like Scrum, you're making a leap from the way you currently work and changing it to something else, and this is going to be your starting point. So that would be you start at Scrum and then you're going to move forward from there and optimise. You're still going to use Cban Caman strategy and you're going to optimise from there. But if your way of working right now is kind of working and you don't want to disrupt that too much or you don't feel you don't know if you're going to get value from that Scrum thing, then start from where you are. Right? That's the beauty of a Caman strategy is it doesn't care what the, it doesn't care the way your system currently works. You model your existing system, that's where you start from.\n\nSo you can take any industry, any system, creative or otherwise, and you can just model your existing system. A huge difficulty though, I've worked in quite a few creative, I've worked in the creative industry. Right? When I first started as a software engineer after I graduated back in 2000, my first jobs were New Media agencies. You probably wouldn't call them that anymore, but New Media agencies. I worked with groups of designers building Flash applications, Flash websites, if anybody remembers Flash. If not, don't even look at it, it's mental. And those kind of things, working with the creative industry, it's a very difficult space because of the way art works. Right? It's very difficult to be iterative and incremental right away in that space because the way we traditionally work with art is it's your personal thing, and your personal thing is going to a certain point till you're personally happy with it, and then you're providing it to other people to give you feedback and that kind of thing.\n\nSo there's a much more personal nature to that than there is in maybe other industries like software engineering, right? Where there's less, a little bit less personal. It can still be personal, but a little bit less personal. So that's why creative industries and creative folks struggle with something like Scrum, because it talks about team, it doesn't talk about individual, and creativity is about the individual. So finding the balance in that is very standoffish. So Caman strategy, but the hardest part of a Caman strategy, at least at the beginning, is writing down your workflow. Right? Documenting your definition of workflow. How are you going to get five creative people in a room and agree what your existing workflow is? So that's going to be your first struggle. But Caman is popular in creative industries because it seems like actually, I'm actually going to recant some of that a little bit. I think that Caman is popular in a lot of places where people don't want to change, and they see Scrum has a bunch of rules, and Caman doesn't have a bunch of rules, and they feel like they can just put a board on the wall, call it Caman, and they're done.\n\nThat's not Caman. Having a board on the wall and moving cards across it is one very small part of Caman, maybe an important part, that visualisation part. But have you taken the time to actually define your workflow? To agree as a group, all the people working together, that this is how we are all going to act, how we're all going to make decisions in the same way? I doubt that happens in most organisations. Have you agreed what the working process limits are? How much work is going to sit in each column? If you don't have WIP limits, you ain't got Cban at all. Right? So sitting down and agreeing that this is really hard stuff. It's hard for a group of people to get together and make these decisions and come up with these rationales. It's just hard. I do workshops with groups of people talking about this stuff, and you can do a four-hour workshop with a group of five or six people and not get anywhere near a definition of workflow. Nowhere near. And this is people who largely agree on what it is they're doing, because the devil's in the details. Right? When you've got a bunch of work in a pile and you need to start a new piece of work, how do you choose that piece of work?\n\nHow do you choose it? Right? We have to agree as a group how we're going to choose it, because this is our system that we're all working within. So how, whose way of choosing it do we pick? Right? Out of the five different opinions on how they select work. Well, I like this type of work, so I'm going to take that. No, that's not good enough. That's not how you optimise a system. Right? That's not how you optimise the flow of work through a system. What is the most valuable piece of work to take next? Now that's an interesting conversation. And how do you define value? And does it matter whether you as an individual are comfortable with that piece of work or not? Right? There's probably some yes, some no, right? Within the bounds of that. So making these agreements and writing them down is very hard. And although Caman has become popular, particularly in the creative industry, I definitely feel there's a lot of \"Can't Ban,\" right? That they really don't want to do anything or change anything or have anything imposed upon them and their way of working.\n\nI know a lot of creatives, creatives are very much, very much, \"My way of working is the best for me. That's how my muse.\" Right? And that's absolutely reasonable. But we're all working together within a business driving a particular outcome, and that business needs to optimise the work in order to maximise the return on investment. Right? So how much effort we spend versus how much money we get. And yeah, we need some level of standardisation, and a core critical part of Caman is defining that standardisation. Have personal Caman. If you don't want to work together as a team, each individual has their own Cban. Problem solved. Right? Everybody just decides their own way of working, their own workflow, as long as they define it, they write it down, they have the visualisation, limit their work in process. Personal Caman. There's a book on personal Caman, and I highly recommend that as well.\n\nSo I know Caman's getting popular, but please do look at the Cang guides. Right? Take a look at the Cang guides, look at what is actually involved in creating a Caman or using a Caman strategy against your work. And usually, there's more rigor, more effort, more ambiguity, and more difficulty than something like Scrum. If your current system of work is failing you, then you would benefit from creating and applying a Caman strategy. Our professional Caman trainers and consultants are ready to help. Don't wait. The sooner you get started, the sooner you will improve. Get in touch below."
  },
  {
    "Title": "What is Kanban?",
    "Description": "Explains Kanban as a flexible strategy for visualising, analysing, and improving workflows, enabling continuous improvement and efficiency across any team or process.",
    "ResourceId": "LMmKDlcIvWs",
    "Url": "https://www.youtube.com/watch?v=LMmKDlcIvWs",
    "Date": "2024-02-12T07:00:11Z",
    "Captions": "What is Caman? There are lots of different definitions of Caman, and there are lots of misunderstandings about what Cban is. At its core, Caman is a strategy, not an actual system of delivering stuff. That's one of the common misunderstandings of Cban: that it's a system of delivering stuff. It's not; it's a strategy to help you understand your existing system of delivering stuff and help you optimise that system of delivering stuff.\n\nQuite often, I'll sometimes describe it as a meta process. It's a process that lets you monitor a process, which just messes with people's heads. But effectively, Caman brings some rigor, some metrics, and some analysis of those metrics to allow you or your team or your organisation to look at any system and what's happening in that system and adapt it in a good way. You can see when we make a change to the system, how does that affect the data? How does that affect the flow of work through that system? If you've made a positive impact, you keep doing that thing, and if you've made a negative impact, you stop doing that thing. Go back to the old way.\n\nYou could also say that Caman is a work-limited pool system, but that's a little bit... nobody understands that terminology. The easiest way to describe it is it's a way of looking at your existing system and helping you, as an individual, ask more interesting questions about how that system goes together in order to have a more optimal system to have work flow through your system more effectively.\n\nA Cban strategy can be applied to any system; it doesn't matter what the system is. If the stuff going through a system, whether that is a checkout at a supermarket—that's a system with stuff flowing through it—or your engineering team and you've got work flowing through it, or your creative team and you've got work flowing through it, it doesn't matter what your system is. Cban brings that Caman strategy that you apply, bringing a little bit of rigor to that system and some metrics that allow you to monitor that system.\n\nFor example, one of the key things that happens at the beginning of any CAND discussion is that you create what Cbang calls a definition of workflow. All that means is you write down how you work. That's it; that's all the definition of workflow is. You've got your way of working for a particular thing that you do. It could be a team with work going through it, it could be a machine that processes something, or it could be a checkout at a supermarket. You write down the way everything works in that system because what a lot of people... even just the act of doing that can create optimisations in the system.\n\nIf you've got five people working in a system and you've never written down how that system works, what do you think the chances are that everybody working in that system uses the same terminology, makes the same or similar decisions, applies the same rules to playing the game? Yeah, that's a great example, actually. I like that one as well. So if you went out and bought Monopoly—I'm not suggesting it, by the way; there are way better games than that—but if you did buy it because it's the most common thing, right? You can find it in every supermarket. If you went out and bought Monopoly and you immediately tore up the rule book and you just guessed how to play the game, and you had four people playing the game and everybody just guessed... Monopoly is a good one because everybody knows how Monopoly kind of works, right? \n\nWould everybody be playing the same game? Would everybody be playing by the same rules? Would everybody have the same understanding of the mechanisms of the game and how it actually works? No, they wouldn't, right? They would each come up with their own way of doing it. If you've ever been at one of those family dues where you've got Monopoly out, you argue over how the rules work. You argue as a group, as a family, about how you should play the game because you've not agreed as a group how to play it. That's what the rule book that comes with a game is: here's the way you play the game.\n\nSo where's the rule book for your team, for the way your team works? Where's the rule book? When a new team member comes in, do they also just make up how they work, and then you tell them when they're doing it wrong, and hopefully, they end up figuring out how to do it right? It doesn't make any sense. You write it down.\n\nWhat that typically looks like... we've all seen what a lot of people do: they draw a board on the wall or in JIRA or in Azure DevOps, and it has a bunch of columns, and they call that CAND. That's not a CAND strategy; that's just a board. Anybody can have a board and have work flow through the board. Part of the CAND is deciding and agreeing what that workflow is. Once you've agreed what that workflow is, you can then apply some metrics and monitor what's going on in that workflow.\n\nOnce you're monitoring what's going on in that workflow, just looking at the data is not enough. Remember, you have to actively manage the work that's going through the system. You actively make choices about what is happening within the system in order to optimise the outcome. Then you're going to look at the data to improve the system. You look at the data, and then you actively make changes to the workflow. \n\nSo you've written down how you think you work right now. That's where you start. There's an expression they use in Caman: start from where you are. That's the expression. So where you are is what you do right now. Write down what you do right now; that's your current definition of workflow. You build the board, you visualise your work in process, your work that's going on, and then you start using it. You're like, \"Oh crap, we didn't think about this. Oh, that doesn't quite work like that.\" So you start making changes so that it more accurately reflects your definition of workflow.\n\nBecause you're visualising your work, you start noticing things. Humans are really good at visual seeing when things aren't quite right or the way you think they should be. Then you can go look at the data and say, \"No, no, no, we should actually change this. We shouldn't have two columns; we should have one,\" or \"We shouldn't have one column; we should have two.\" Then you make those decisions. You're changing your workflow, you're actively managing your work, and you're changing your workflow. \n\nThat's what creates this continuous improvement loop of optimising your process. Making a little change: did we make it better? Yes? Awesome! Let's see what's going on. Okay, we use it for a while. But this is still broken; this doesn't work right. Okay, well, let's fix it. Let's try something different. Okay, now does that work? Yeah, yeah, yeah, that works great.\n\nThis application of... it's actually an application of Little's Law; you can go look that up later. This application of a CAND strategy to any system will help improve it. If your current system of work is failing you, then you would benefit from creating and applying a CAND strategy. Don't wait; the sooner you start, the sooner you'll improve. Get in touch below."
  },
  {
    "Title": "The Power of Immersive Learning: Bridging Theory and Experience",
    "Description": "Explains how immersive learning combines Agile and Scrum theory with hands-on practice, real-world scenarios, and expert guidance to boost skills, confidence, and teamwork.",
    "ResourceId": "GfB3nB_PMyY",
    "Url": "https://www.youtube.com/watch?v=GfB3nB_PMyY",
    "Date": "2024-02-09T07:00:06Z",
    "Captions": "One of the really powerful things about immersive learning is that because all of the trainers are experienced professionals who've been working in the industry that we're talking about, they bring not just their ability, their knowledge and skills on the theory and the ability to explain the topics, but they also bring a sway of experience of actually having done these things, of engaged with teams, tried things in organisations big and small. So you effectively get consulting as well as training, right? You get facilitated debrief consulting training. You get the whole package with immersive learning."
  },
  {
    "Title": "Immersive Learning in Scrum: Why Theory and Experience Must Go Hand in Hand",
    "Description": "Explores how combining theory and hands-on experience in Scrum training leads to deeper understanding, critical thinking, and continuous improvement for Agile teams.",
    "ResourceId": "BmlTZwGAcMU",
    "Url": "https://www.youtube.com/watch?v=BmlTZwGAcMU",
    "Date": "2024-02-08T07:00:06Z",
    "Captions": "One of my favourite quotes is from Denning: \"Without theory, experience has no meaning. Without theory, one has no questions to ask; hence, without theory, there is no learning.\" \n\nOne of the purposes of our immersive classes is that we're able to give you the tools that you need to ask the right questions, to figure out what you need to learn, what you don't understand, and that is the value of immersive learning."
  },
  {
    "Title": "The Power of Peer Feedback in Immersive Learning",
    "Description": "Explores how peer feedback in immersive Scrum and Agile training enhances learning, fosters real-world application, and supports continuous improvement for participants.",
    "ResourceId": "yQlrN2OviCU",
    "Url": "https://www.youtube.com/watch?v=yQlrN2OviCU",
    "Date": "2024-02-07T07:00:27Z",
    "Captions": "One of the great parts of immersive learning is getting feedback from your peers and colleagues. We give an assignment at the end of every session, something to do in your organisation to actually practically implement some of the techniques. And when we come back, we do a debrief, but it's a facilitated debrief. So it's not just myself or one of the other trainers doing the debrief; it's your colleagues in the class, the other people that are participating, who've also tried the same thing. They're providing their input, their review, their reflections on what you've tried, and you can provide it on what they've tried. And hopefully, we can build a much bigger body of experiential knowledge."
  },
  {
    "Title": "The Power of Building Relationships Through Immersive Learning in Scrum",
    "Description": "Explores how immersive learning in Scrum fosters strong peer relationships, enhancing collaboration, trust, and long-term growth for practitioners beyond the classroom.",
    "ResourceId": "7SdBfGWCG8Q",
    "Url": "https://www.youtube.com/watch?v=7SdBfGWCG8Q",
    "Date": "2024-02-06T07:00:03Z",
    "Captions": "Another great thing that practitioners get from immersive learning is relationships. Relationships with the other people in the class who are bringing their knowledge, their experience, who effectively become your colleagues over a period of time. If you just spend a few half days with them over a week, you're probably never going to see or speak to them again. But if you spend 8 to 16 weeks with those folks, collaborating, talking about how you did things, that's where relationships are built."
  },
  {
    "Title": "Unlocking the Power of Immersive Learning in Agile: Overcoming Cognitive Bias",
    "Description": "Explores how immersive learning in Agile and Scrum helps overcome cognitive bias, promotes hands-on practice, and supports continuous improvement for practitioners.",
    "ResourceId": "C8a_-zn1Wsc",
    "Url": "https://www.youtube.com/watch?v=C8a_-zn1Wsc",
    "Date": "2024-02-05T07:00:03Z",
    "Captions": "One of the great things for immersive learning for practitioners is that it combats cognitive bias. We tend to think we know more than we do about a particular topic. You wouldn't believe the number of people that participate in training, uh, agile training, that have been doing agile and scrum for a very long time, and they haven't read the Agile Manifesto and they haven't read the Scrum Guide. The Dunning-Kruger effect; they think they know more, uh, than they do. So the power in immersive learning is we continuously whittle away. Um, they can't escape the idea that we know less than we discover by doing. Um, and in order to be doing more, we need that focus."
  },
  {
    "Title": "The Power of Immersive Learning in Agile Training",
    "Description": "Explores how immersive, hands-on learning in Agile training fosters real-world application, continuous improvement, and lasting organisational change through feedback and adaptation.",
    "ResourceId": "HjumLIMTefA",
    "Url": "https://www.youtube.com/watch?v=HjumLIMTefA",
    "Date": "2024-02-04T11:00:23Z",
    "Captions": "One of the huge impacts of immersive learning is the impact that it has on the organization because the participants are going back to their organization and trying things and then getting feedback on it and perhaps trying slightly different again to try and make it work. That act of continuous learning and continuous change enables actual change to happen in the organization, which is the reason that we go to training in the first place, so that we can enact actual change. Immersive learning is the best chance for organizations to make actual change."
  },
  {
    "Title": "Unlocking the Power of Immersive Learning in Agile",
    "Description": "Explores how immersive, hands-on learning helps teams internalise Agile principles, shift mindsets, and drive lasting Agile transformation through real-world experience.",
    "ResourceId": "OlzXHZihQzI",
    "Url": "https://www.youtube.com/watch?v=OlzXHZihQzI",
    "Date": "2024-02-03T07:00:12Z",
    "Captions": "One of the great things about immersive learning is that we specifically give students the ability to adapt their mental models. It's not something we force upon them, or we can actually, you know, you can lead a horse to water, but you can't make it drink, right? You have to want to change your mental models. But the new format, because they're doing things in their organisation, they're seeing how it works, they're seeing the benefits and the negatives. They're hopefully able to change their whole mental model so that they make different choices in the future, and they're able to assimilate these core agile practices into the way they do things."
  },
  {
    "Title": "The Power of Immersive Learning in Scrum Training",
    "Description": "Explores how immersive learning in Scrum training reduces cognitive load, boosts engagement, and improves retention through shorter, interactive, hands-on sessions.",
    "ResourceId": "bXb00GxJiCY",
    "Url": "https://www.youtube.com/watch?v=bXb00GxJiCY",
    "Date": "2024-02-02T07:00:16Z",
    "Captions": "One of the great benefits of immersive learning is that there's generally less cognitive load. There's less fatigue and tiredness. That video conferencing fatigue that we get from having those 8-hour or multiple consecutive day four-hour sessions is just not there. People can engage for a shorter period of time; they feel more connected to the topics, more connected to the content, and they just don't feel so tired. So we get higher levels of energy, higher levels of excitement, and more engagement from people in the class. And if there's more engagement, there's more learning."
  },
  {
    "Title": "Why Immersive Learning Keeps Scrum Students Excited and Engaged",
    "Description": "Explores how immersive, hands-on learning keeps Scrum students engaged and excited, supporting continuous improvement, real-world application, and ongoing team growth.",
    "ResourceId": "OyeZgnqESKE",
    "Url": "https://www.youtube.com/watch?v=OyeZgnqESKE",
    "Date": "2024-02-01T07:00:09Z",
    "Captions": "Another reason I love the immersive learning experience for students is because it maintains a level of excitement of newness. There are new things to be discovered each session, and I find that because people are able to try things in their organisation, they feel excited to come every week. It's not a trial; it's a discovery of new topics, new things. And because they get time to assimilate it, they keep coming back around for continuous learning."
  },
  {
    "Title": "The Power of Immersive Learning in Scrum Training: Why Less Is More",
    "Description": "Explores how immersive, bite-sized learning in Scrum training boosts retention, engagement, and real-world application by reducing information overload and promoting reflection.",
    "ResourceId": "El__Y7CTcrY",
    "Url": "https://www.youtube.com/watch?v=El__Y7CTcrY",
    "Date": "2024-01-31T14:44:15Z",
    "Captions": "One of the reasons I love the immersive learning experience for students is the fact that they don't get indigestion. There are a lot of things that we talk about during the classes. Quite often, people talk about drinking from the fire hose. Um, but if you actually imagine a fire hose hitting somebody, they get knocked off their feet. And that's sometimes what it feels like with the amount of information in the very short space of time, um, that we have generally for the 2-day classes. \n\nSo what I love about the immersive classes is that there's less indigestion, there's more bite-sized pieces, and you get time to chew."
  },
  {
    "Title": "Stop Starting and Start Finishing: The Key to Team Success",
    "Description": "Multitasking reduces team productivity. Learn how focusing on finishing tasks, limiting work in progress, and value-based prioritisation boosts efficiency and business value.",
    "ResourceId": "8aIUldVDtGw",
    "Url": "https://www.youtube.com/watch?v=8aIUldVDtGw",
    "Date": "2024-01-31T14:26:11Z",
    "Captions": "There's a quote in Lean that says, \"Stop starting and start finishing.\" It's been around for quite some time, and it's something that I use all the time with Scrum teams. While it is predominantly a Lean thing, there's no reason why you can't have Lean stuff in empirical stuff. There's no reason why those two things can't go together, and I think it's really important for teams that are doing anything. Whatever type of work that we're doing, we need to focus on finishing stuff, not on starting more stuff.\n\nThe traditional idea is that the more work we have underway, the more that we're doing, which means that people and teams often juggle multiple things in what they do. When you're juggling multiple things, you tend to find that less stuff gets done because you spend a bunch of cognitive cycles context switching. If you think of the work that Gerald Weinberg did in his book \"Systems Thinking,\" you might recall a graph that shows the number of projects underway and the amount of time that we lose to context switching. It's about 20% per thing. So, if you're doing two things at once, you're going to lose 20% of your time, and it's gone to context switching and your cognitive load.\n\nYou're in the shower in the morning, and instead of the back of your brain solving the complex cognitive problems that will help your business be successful, the back of your brain is thinking about how to juggle these two or three projects. How do I keep these three projects' stakeholders happy? If the back of your brain is occupied with juggling those things, you're spending less time and focus on solving the actual problem that we're here to solve, which provides your business with value. There's no value to your business in juggling five things; all they care about is whether they are getting the value they expect.\n\nThere is a big push, especially from leadership, but I think there's a little bit of a fallacy there. I don't think leadership pushes it; I think middle management pushes it because they are under pressure to get more stuff done. If you're sitting on a team and you have multiple masters, with multiple people telling you what to do, then you're the one who has to juggle those multiple things. One of the things we talk about in Scrum is having a single product owner. That single product owner is the focus for what we are going to do next, what we are working on.\n\nDepending on how your organisation is structured, this is not ideal. If you have multiple voices in your organisation, then the product owner becomes the funnel that allows the team to work on a single stream. The product owner has to deal with all the different stakeholders. I'm not saying the team won't help; the rest of the developers will help with that. But the product owner becomes that final say, that point of knitting together all those different ideas and threads into a single cohesive story so that the team has focus and can maximise the value.\n\nLean talks about this as well, discussing having a definition of workflow. If you're thinking of a Kanban strategy, you're going to have that definition of your workflow. You decide what it's going to be, and you're effectively going to decide those things as well, like what things we work on. We're going to limit our work in process for sure, but then how do we decide which thing we pick? A lot of teams pick the oldest thing; whatever has been hanging around the longest is what we're going to pick. From the options, the stuff we haven't started yet, we might order that by whatever we decide as a team that maximises the value.\n\nYou might order it by age, but I'm not sure that's the best idea. Ordering it by value would be best; have the highest value stuff we’re going to pick next, and then we pull things based on that value and need. Lean focuses on the idea of the virtual product owner for creating that loom, whereas Scrum talks about it as an individual, a person who is going to do that. But the outcome is the same: you have a much tighter, cohesive story and focus for the team, which is really important.\n\nThat's why we need to stop starting work and start finishing work. Ultimately, the more work we have in progress, the longer it takes to deliver. You can see that if you've ever used a cumulative flow diagram. You can very clearly see when the lines of the amount of work you're starting and the amount of work you're finishing get further apart. The amount of things you have in progress is increasing. If you're getting further apart, then you're starting more work than you're finishing.\n\nIf the lines are getting further apart, then the horizontal line is also getting further apart, and the horizontal line is your approximate average cycle time. As you start more things and haven't finished them, all of the things in the system take longer to deliver, and that's not what we want. We want to have as short a time as possible that we're working on things because that increases the throughput, the stuff delivered for the business. If we're focused on valuable stuff, it hopefully maximises the value that we're delivering to the business.\n\nWe can go through that process really quickly, which means the business gets predictability because they know if they give us something important and we take it on immediately, they know roughly how long it's going to take to deliver it. It will be short because we're focusing on shortening that cycle time. I think that’s the idea behind stopping starting work and starting finishing work. It matters for Lean teams, it matters for Scrum teams, and it matters for all teams. Stop starting work and start finishing it.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Mastering Evidence-Based Management (EBM) for Product Owners: Maximizing Value Delivery",
    "Description": "Learn how product owners use Evidence-Based Management (EBM) to make data-driven decisions, track key value metrics, and maximise product value and team engagement.",
    "ResourceId": "Af-wBYtyyRU",
    "Url": "https://www.youtube.com/watch?v=Af-wBYtyyRU",
    "Date": "2024-01-29T07:00:07Z",
    "Captions": "So the PBM course is a fantastic idea for product owners because ultimately product owners are the entrepreneur, the mini CEO of a product. If you want to be making good decisions about which bets to make on the success of your product, right, which features to build, you need to understand the holistic outcome of your product, the whole product. \n\nEBM, evidence-based management, can be used to look at a whole product and say these are the metrics that we've decided in each of the key value areas, right: unrealised value, current value, ability to innovate, and time to market. Once we've chosen those metrics, we can then monitor them over a long period of time and see that we're taking the product in the right direction. \n\nHow do you know when you're going off topic? When you're going on a tangent to what your organisation is trying to achieve? When you're off the beaten path? Maybe off the beaten path is the best place to be because you look at the data, you look at the metrics, and holy moly, this has been really successful, right? \n\nThen you need to have a conversation with your business about, well, we were going this way, but actually we think this way is a better way to go that's going to add more value. How do you know to have those conversations with the business? How do you make those determinations? We need to understand what's going on in the product, right? We need to understand our ability to innovate. We need to understand our time to market, how quickly we can get things through to maximise our capability. \n\nAs a product owner, you want to maximise your ability to deliver business value, right? That's your whole job: maximise our ability to deliver value, maximise the value that we deliver. So our capability of our teams that are delivering value, right? Are we maximising the throughput of our ability to deliver value? And then are we delivering the right value, our market value? Are we maximising that? \n\nAnd how do you know if you're not measuring? That's why product owners like the PAL EBM, the evidence-based management class is awesome to help you give you extra tools to help you figure out what that is, help you engage with the rest of your team and bring them along on that story, and perhaps help you turn some of your developers from developers to product developers. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. Have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "The Power of Metrics: Why PAL-EBM is Essential for Your Organization",
    "Description": "Learn how evidence-based metrics drive organisational success, avoid negative behaviours, and enable transparent, data-driven decisions for leaders and teams at all levels.",
    "ResourceId": "m2Z4UV4OQlI",
    "Url": "https://www.youtube.com/watch?v=m2Z4UV4OQlI",
    "Date": "2024-01-27T07:00:19Z",
    "Captions": "I would recommend the PAL EBM class really to anybody who works in a company who wants to take it in a direction of success. So you could be a manager managing a team within your organisation, you could be managing a group of teams, you could be managing a whole product, or you could be CEO managing the whole company. You could be a product owner, you could be a Scrum Master, you could be a leader anywhere in leadership in the organisation. The PEBM class is designed to take the participants through a story that enables understanding. Right, that's how we as humans learn best, is to experience and tell stories and engage in some kind of activities. The PBM class is designed to take us through those ideas about effectively why our existing metrics that we collect aren't being successful. Right, what is it about them that's being unsuccessful? So not just this one's bad and this one's good, but what is the underlying reason, the people reason, why a lot of those metrics are unsuccessful? Connecting those dots and enabling the people in the group to really understand the impact of having good metrics. Almost every participant I've had that goes through the PAL EBM has had epiphany-like realisations about what they're not doing in their organisation that they really should be doing. Right, that they really should be looking at these metrics, they really should be iteratively looking at them over time, seeing the trend and direction, and using metrics to shape the direction of the organisation while watching out for negative behaviours caused in people by monitoring those metrics. Right, there's lots of great examples out there of poor metrics. We tell a lot of those stories in the class. Right, in the PBM class, the trainer tells a lot of the stories of organisations out there. A lot of that information is publicly available as well, that you can find those metrics that we've always used and the negative impact that they've had on organisations over the longer term. That's not really obvious in the short term, but you do something over five or ten years in your organisation, and it can be absolutely detrimental to the way that you do business. One of the stories that I always tell for leaders is Microsoft. Microsoft used to do stack ranking. If you Google stack ranking, you'll find a whole bunch of other organisations that have also never been successful using it, in fact, been wholly unsuccessful using it. But stack ranking was this idea that you, as a manager, every manager in the organisation stack ranks every one of their direct reports, and the bottom 10% is out of the team. Right, and if you're in the bottom 10% three times in a row, you're out of the company. One of the things that we engage with is how would something like that impact on the behaviours of the people within the organisation? Right, and it's so obvious in hindsight the negative impact of those types of metrics on behaviours of people that you want to be collaborating together towards a common goal. How would this impact them? It's blatantly obvious to us the negative impact of that, but then why was it policy within Microsoft and the engineering organisation for ten years? Right, why did they not change it sooner? It took Satya coming along to make that change, and it's because people cling onto their beliefs in spite of the data. The data is telling them it's not going well, and they cling to it. Part of PAL EBM is transparency. Right, we have an empirical system for monitoring our data, so we want to be able to really see what's going on, see the real data, and then make decisions based on what's really going on, not the general fiction that most business decisions are made on at the moment. So that's why I would recommend the PAL EBM. I would heartily recommend it for individuals, but I would even more recommend it for organisation leadership teams to go through together. I've done that a number of times with organisations, and one of the comments that I got from a CIO in the PBM was, \"These are the conversations that we've never had time to have,\" right, that we should have had before. Now that we've all had that little warning bell going off, thinking we should have these conversations, and we've just not had them because we don't have time, we don't have the inclination, we don't feel like we can voice it. The class creates space for leadership teams to really have those deep conversations on how are they going to measure success, what does success even mean, and how are they going to iteratively strategise towards the desired outcome? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "How Do You Know How Long It Takes to Deliver Value?",
    "Description": "Explains how Agile teams can measure and improve Time to Market using key metrics like lead time, cycle time, and time to fix to deliver value to customers faster.",
    "ResourceId": "xaIDtZcoVXE",
    "Url": "https://www.youtube.com/watch?v=xaIDtZcoVXE",
    "Date": "2024-01-26T11:00:51Z",
    "Captions": "How do you know how long it takes you to deliver value? Evidence-based management has a key value area called time to market, where you would choose metrics that enable you to understand your organisational capability in this space. You might look at things like lead time, cycle time, time to pivot, time to learn, time to fix. These are all things that will help you understand how long it takes you to deliver value."
  },
  {
    "Title": "Evidence-Based Management: The Key to Agile Success",
    "Description": "Evidence-based management uses data-driven decisions to help organisations achieve business outcomes, adapt to market changes, and maximise value beyond agile processes.",
    "ResourceId": "VkTnZmJGf98",
    "Url": "https://www.youtube.com/watch?v=VkTnZmJGf98",
    "Date": "2024-01-26T07:00:25Z",
    "Captions": "Evidence-based management has improved agility by actually having some way to monitor whether we're making changes to the organization. I think one of the core problems that we've had is that there hasn't been any real metrics. If you look at the research out there on agility in any form, whether that's plans or SAFE or DAD or LeSS or Nexus or Scrum, whatever it is you decide to do, in general, organisations are not being successful by implementing those things. They're not making systemic changes to their organisation; they're not getting the benefits that they expected to get. \n\nPart of the reason that is true, that they're not getting the benefits, is that they're focusing on the wrong thing. We're focusing on delivering the agile, which is not the point. The point of this is having a successful business that delivers value into the market so that we increase the value of our organisation. That's what we're trying to achieve, and agile is just a set of tools and practices and capabilities that we can use to help us be better at that. But unless we focus on what it is that we're trying to achieve—being more successful in the market—we're not going to get the benefits from agile because we're not going to make the changes in our organisation that we need in order to be successful.\n\nWhen you look at organisations that are hugely successful at agile in the market, they're using agile. They've monitored what's going on in their organisation, and they've changed things in their organisation: the way their organisation functions, the way they do business, the way they lead people, the way they manage people, the way everything in their business operates. Every process, every service, every workflow has been impacted, and they've made those changes based on the data that they see. They're able to make a change in the way they do their business and monitor that data.\n\nEvidence-based management practices, even without using those terminologies, is how every successful organisation has become successful. Then we get complacent once we get to a certain size, and the organisation quite often stagnates. Every startup that ends up being successful is using an evidence-based approach. Every organisation that is continuously growing—not necessarily through the acquisition model, which is a different model—but growing through their ability to deliver is doing that based on looking at the data, making the right decisions in the market, and expanding. \n\nThis is how you scale an organisation: you use the data to figure out what's next. Evidence-based management just quantifies that and says, you know, just looking at revenue is not a good idea. What about markets we haven't tapped yet? The unrealised value? What about the ability to innovate? Because if we continuously just deliver stuff, at some point we're going to get slower and slower at delivering stuff. If we want to maintain our ability to deliver stuff into production—hopefully the right stuff—and maintain our ability to deliver stuff, we need to be continually making sure that our ability to innovate and our time to market is of a manageable size. \n\nThere's balance in this framework of unrealised value, current value, ability to innovate, and time to market that enables you as an organisation to make better decisions, to focus on the right things for your business to be successful. So forget about the agile piece. Evidence-based management is about how you adapt your organisation to be more successful, how you enable your organisation to deal with the surprises that come along in the market. They could be good surprises or bad surprises, but when things happen, how quickly can your organisation take advantage of that surprise or mitigate the cost of that surprise? \n\nThat ability to adapt is what people are trying to quantify when they talk about agility. So really, evidence-based management is the thing that helps your organisation be successful in the market. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "How to Measure Your Organization's Ability to Improve Value Through Innovation",
    "Description": "Learn how to assess and improve your organisation’s innovation capability using evidence-based management and key metrics like technical debt, innovation rate, and complexity.",
    "ResourceId": "Puz2wSg7UmE",
    "Url": "https://www.youtube.com/watch?v=Puz2wSg7UmE",
    "Date": "2024-01-25T11:00:18Z",
    "Captions": "How do you know how effective your organisation is at improving value? In order to do that, you need to understand your organisational capability, and part of that is understanding your ability to innovate. Evidence-based management has some key example metrics that you might use within the context of monitoring your ability to innovate. If you're building software products, you might be looking at your active branches, number of active branches. You might be looking at technical debt on any product. You might be looking at innovation rate, percentage of time you spend innovating rather than struggling with complexity. But there are plenty of other metrics that you might choose from in that space. You need to understand how effective your organisation is at improving value."
  },
  {
    "Title": "Unlocking Business Value: The Power of Evidence-Based Management for Effective Leadership",
    "Description": "Explains how evidence-based management uses data-driven decisions and tailored metrics to boost business value, leadership effectiveness, and organisational innovation.",
    "ResourceId": "MCkSBdzRK_c",
    "Url": "https://www.youtube.com/watch?v=MCkSBdzRK_c",
    "Date": "2024-01-25T07:00:13Z",
    "Captions": "What is evidence-based management? I think the easiest way to describe it is just bringing science and empiricism to leadership. All right, how do we make decisions as leaders? What's the data that we're using to inform our decisions? And when we make decisions, what is the impact that those decisions have on the organization, and how are we measuring that? \n\nIn most organizations that I see, a lot of that is done by either gut feeling, right? So there's not really any data, or there's a lot of vanity metrics in the organization. The metrics represent us looking good but don't necessarily change the way we do business. So evidence-based management is an attempt to address that and help organizations understand their business value. Right, that's the key thing there: the business value. Are we focused on delivering value to our stakeholders, our customers, and how are we measuring that value? \n\nIt really talks about two categories with four key value areas that we feel like is a good idea to measure. At the top, we've kind of got market value. Obviously, that's key, right? If we don't have any market value, we're not going to be a sustainable business. The two sides to that are value we already have, our current value, so that's in our products and our services and things that our business does right now. The other side of that is unrealised value, right? What's the value we've got left sitting on the table? Markets we haven't explored, new opportunities, new things that we haven't pursued, new customers we haven't got yet. \n\nSo trying to understand those two, and although evidence-based management comes with a set of, I guess you could call them example metrics in each of these key value areas, the reality is that you need to find the metrics that make the most sense for your organization within those contexts. I just like to see us having metrics in each of the key value areas. \n\nSo we were talking about market value, so current value and unrealised value, but there's also our capability as an organization, our ability to actually do stuff, right? The top two are about doing the right thing. Are we moving in the right direction? Are we focused on filling those gaps, perhaps in our market capability? The bottom half is our organisational capability, so that kind of sits in two key value areas. \n\nSo it's four total, and that's time to market, which is how fast we can go from idea to market, getting stuff in front of the customers to test our assumptions, right? Because we assume that something is going to provide value, but until we actually get it in front of customers, we're not really sure. We just have an assumption, and we want to test it. The other side is the ability to innovate, right? How much time do we spend delivering new stuff, and what are the things that impact our ability to spend time delivering new stuff? \n\nI think those four together, if we as a business have a core understanding of our current value, our unrealised value, our ability to innovate, and our time to market, that gives us a holistic view of our ability to deliver business value. Then once we've decided on what those metrics are and we're able to monitor our organization, maybe you only do that quarterly, right? Collecting this large set of metrics, we're then able to see how the decisions that we make, the changes that we make to our organization, actually impact on those metrics that we've decided to look at. \n\nSo that is what evidence-based management is. We're going to use evidence to manage our organization, right? This is something that a manager would use, depending on whatever you're at the top of, the pyramid for, right? It could be a product, it could be a service, it could be a whole organization, a whole company. How are you measuring these things, and how do you use that data to inform the decisions that you make? \n\nEvidence-based management is just bringing that story together and saying, yes, we have metrics, yes, we're looking at them, we're monitoring them in a regular cadence, and we're making different decisions based on those metrics and seeing how that shapes the direction that we end up going. \n\nAnd that's because this is something that so many organizations don't do. You would believe the number of organizations that I go into, and they have no goals, they have no strategy, and they have no way to measure it. This can be a competitive advantage, right? If you're able to leverage empirical, hypothesis-driven, data-based decisions to shape the direction of your organization to the market and the market niches that you are able to find, that can be the competitive advantage that you need to be successful. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "How to Discover Unrealized Value in Your Product",
    "Description": "Learn how to identify and measure unrealised value in your product using Evidence-Based Management, key metrics, and actionable steps to improve customer satisfaction and growth.",
    "ResourceId": "cbLd-wstv3o",
    "Url": "https://www.youtube.com/watch?v=cbLd-wstv3o",
    "Date": "2024-01-24T11:00:29Z",
    "Captions": "How do you know what additional potential value you could be achieving with your product but that you haven't yet? How do you find those gaps? Evidence-based management has a key value area called unrealised value, where you would be expected to come up with some metrics to help you understand that dynamic. Now, evidence-based management does have some example metrics in there. You might look at the experience or satisfaction gap in your product. You might look at market share. You might look at other metrics that you can come up with for your product, but you need to understand what value's left on your table. That's where your product backlog comes from."
  },
  {
    "Title": "Addressing Systemic Issues in Agile Organizations",
    "Description": "Explores why Agile fails without addressing systemic issues, highlighting the need for organisational change, meaningful metrics, and the courage to make bold improvements.",
    "ResourceId": "QBX7dnUBzo8",
    "Url": "https://www.youtube.com/watch?v=QBX7dnUBzo8",
    "Date": "2024-01-24T07:00:16Z",
    "Captions": "Organisations and people are too scared to address the real problem, which is the way the system works. Right, so they're focusing on the little bits and pieces around the edge. Oh, let's push responsibility down the organisation for some things but not other things. Let's, uh, what else do they do? Let's have people run these ceremonies, right? Uh, we're going to do a daily, we're going to have a daily, that'll fix everything, right? But these are the mechanisms, not the thing that you're trying to achieve. You're measuring the wrong thing if you think that having those things is going to result in a different way of doing things. You should be measuring return on investment. You should be measuring, uh, um, a profit per team member, right? Uh, you should be looking at your feedback loops and your cost to deliver and your meantime to repair and things, your time to learn, right? Closing those feedback loops. You should be measuring, um, what you don't know, right? What does your product not do that it could do? That is a market opportunity. And where do you go looking for that information? How do you, as a business, find that? This stuff is hard, and 70% of all startups, right? 70% of all ideas that people have are going to fail. Easy. 70% of ideas are going to fail. In fact, 70% of startups, I bet it's a much higher percentage of ideas because not all ideas manage to convince somebody to give them the money to start the idea in the first place, right? Ideas are the most nebulous one, and if you're building products and you're trying to capture market, you have to be focused on what helps us as a business be as effective as we can be within the context of those markets. And that doesn't come, um, from not having the courage to admit that you need to change more things.\n\nSo the common one that I see in organisations is that an agile coach, uh, comes in. I've been, I've been, this, this, I wasn't an agile coach at the time, uh, but my biggest regret, this is my biggest regret in consulting. It's from years ago. I was still wet behind the ears. I wasn't, uh, a very sophisticated, uh, consultant at the time. Um, this was probably nearly 10 years ago, and a CEO pulled me aside and basically said, \"Look, we've just gone through a major reorganisation.\" Um, and they'd reorganised into silos, by the way, just different sort of silos. And he said, \"Um, all the things that you're talking about, I was talking about DevOps, seem to be different from the way we've organised ourselves. Do we need to throw all of that out?\" Because it was very expensive, right, to do that reorg. Reorgs are expensive, or else don't do reorgs, it's expensive. Um, and do we need to change the way we do things completely? And I said, \"No, you can change slowly and iteratively towards the thing you want to achieve.\" And that was a bad answer. The right answer would have been, \"Yeah, rip that Band-Aid off, disinfect the wound that you just created by changing your organisation to even more silos, right, in the wrong direction, and move faster and with less constant pain and suffering and haemorrhaging of money to a resolution to a different system that enabled you to be more successful.\" \n\nAnd that is the difficulty, the difficult call that lots of organisations have is that fundamentally, the reason you can't take advantage of agile, the reason agile is so difficult, the reason you've got agile atrophy in your organisation, that people are just like, \"I can't be B, what? Don't mention agile to me anymore,\" that kind of attitude is because you've not addressed the changes that need to happen in the way you do business in order for agile to be successful. It isn't just magically successful. You need to fundamentally change the way you do business at every level in your organisation in order to move towards what people are calling agility, right? This agile movement, big A agile or little a agile, but really it's about your organisation systematically and continuously improving its effectiveness in sometimes small jumps, but sometimes you need big jumps to improve that effectiveness. And do you have the courage to make that change? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. Uh, we also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "How Do You Know the Value Currently Delivered in Your Organization?",
    "Description": "Learn how Evidence-Based Management helps organisations measure delivered value using key metrics like customer satisfaction, employee engagement, and product usage data.",
    "ResourceId": "5qtS7DYGi5Q",
    "Url": "https://www.youtube.com/watch?v=5qtS7DYGi5Q",
    "Date": "2024-01-23T11:00:05Z",
    "Captions": "How do you know the value that is currently delivered in your organisation? Evidence-based management is a tool that will help you understand the current value in your organisation. You might use metrics, like customer satisfaction, employee satisfaction, or even revenue per employee or product cost ratio. You might be looking at telemetry for your customer usage index—how much of your product is actually used in your organisation. These are all things that will enable you to make better decisions."
  },
  {
    "Title": "Unlocking Agile’s Core: Questioning to Create Value",
    "Description": "Explores how questioning, continuous improvement, and team empowerment drive Agile success, helping organisations adapt quickly, spot inefficiencies, and create lasting value.",
    "ResourceId": "M4ap4uNzptg",
    "Url": "https://www.youtube.com/watch?v=M4ap4uNzptg",
    "Date": "2024-01-23T07:00:07Z",
    "Captions": "There's a quote by Steve Denning: \"Being agile is about questioning what you do and continuously improving what you're doing.\" And that really is that fundamental kernel of what's the difference between what people have always done and what agile is talking about. We'd like people to do going forward into the future. And that's that question everything you do: why you do it, value it.\n\nIf it doesn't have value that it creates that's greater than the pain of doing it, then you need to change what it is you're doing and do things differently. And that is why we talk about, or at least Ken talks about, Scrum as a mirror. Right? I can't do Scrum because here's something you need to go fix in the way your organisation does business in order to become more effective. Because the more effective you are at adapting to change, the more chance you have of being successful in your market. The more chance you have of adapting around whatever it is the market throws at you, the world throws at you, or your competitors throw at you.\n\nAnd if you can change and adapt faster than your competitors can, you'll be the one setting the trend in the market. You'll be the one that they're following, and you'll be the one making the money first. Right? And that's ultimately what it's all about. The most capitalistic organisations are the ones that can change as quickly as possible to take advantage of market opportunities. Right? That's what it's all about.\n\nSo, be that ninja, being able to dynamically change your business anytime you need. And for that, you can't do that. You can't make those decisions as a leader in an organisation or as a CEO. Right? You have to have the people that are at every level in your organisation need to be looking at the same thing. They need to be not following the rules; they need to be questioning the rules at every possible moment. They need to be asking, \"Is there a better way to do this?\" Right? That could be faster and quicker. Maybe we don't need to do this at all. Maybe we need to do it differently.\n\nThose are all the questions that we should be constantly asking and creating forums within our organisation so that you can have those things dealt with. There's no point in having all those questions asked and then doing nothing about them, because all you do is end up with a bunch of disgruntled people working in your organisation who can see all the things that need to be fixed, but they can't fix them. They don't have the authority to fix them, and nobody else has the authority to fix them. Right? Or nobody else wants to, or senior leadership doesn't care. Right? That's going to have a massively negative impact on your business.\n\nSo, focus instead on creating forums within your organisation where you can have those legitimate moments—might be continuously—where you continuously look at and question the things that are going on, the way you do things, the choices that have been made, the decisions that have been made, so that you can continuously have the best possible version of your organisation emerge over time.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "The Importance of Evidence-Based Management in Agile Environments",
    "Description": "Explains how evidence-based management helps Agile teams use data and key metrics to measure progress, make informed decisions, and drive continuous improvement.",
    "ResourceId": "9kZicmokyZ4",
    "Url": "https://www.youtube.com/watch?v=9kZicmokyZ4",
    "Date": "2024-01-22T11:00:07Z",
    "Captions": "You need evidence-based management in your environment so that you can understand and measure the impact of the changes that you make to your system on your overall ability to be successful. We're here to deliver value to the business in whatever shape or form that takes. We need to be able to measure it so that when we do make changes to the system, we can see whether we've been successful or not."
  },
  {
    "Title": "Redefining Agile’s Core: Beyond Rituals and Procedures",
    "Description": "Explores how Agile’s true value lies in delivering outcomes and adapting to change, not just following rituals or procedures, and highlights the need for human judgement in complex systems.",
    "ResourceId": "XZVixdVy-PQ",
    "Url": "https://www.youtube.com/watch?v=XZVixdVy-PQ",
    "Date": "2024-01-22T07:00:11Z",
    "Captions": "So there's a quote from Ken Schwaber: \"Agile is not about rituals; it's about developing software in a different way.\" I would broaden it out first and say, \"Agile is not about rituals; it's about developing products in a different way.\" It's broadening that out in organisations. The goal is not agility; the goal is not the rituals, right? They're part of the system, but they're not the thing you're trying to achieve.\n\nMost organisations seem to measure success in adopting Agile as, \"Is everybody doing a daily scrum? Does everybody have a Sprint review?\" And those things, those measures, the behavioural outcome from those measures is that you end up with zombie scrum or mechanical scrum, right? Or mechanical processes. People are following the processes because they're told to follow the processes, not because they believe that they are the right processes to follow in order to get the outcomes that the business needs. And that's where the failure is. Why are people just following the rules? Why don't they believe in the rules? Because if they believe in the rules, they'll perhaps make better decisions, right? If they believe that this is the way we need to do things, they'll figure out better and more effective ways to do things.\n\nAnd this is actually why it's really hard when you purchase large-scale, sweeping software systems that take care of, like, let's say your entire procurement pipeline is now fully automated. But now you're stuck in that automation; you're stuck in the rituals that that automation has created. And that's the difference between how we've implemented the Toyota Way in the West and how Toyota implemented it. Toyota didn't have a fully automated production line; they had lots of pieces of automation for the work that people do, but they had people checks at the end of every one of those pieces of automation because you're building big, complex products. It's a big, complex system, and computers are not actually that great at managing big, complex systems because they only manage what we think of for them to manage, right? We have to think of it in order for it to be managed.\n\nSo you end up with stuff built on top as you figure out different edge cases and different scenarios. And it's the same with our policies and procedures in organisations, right? It builds up this organisational or software craft that is all the rules around which it runs. And that's the same as delivering, trying to deploy or install Agile in your organisation. It's not about the rituals; it's about doing things in different ways, right? You want to build software in different ways; you want to build products in different ways; you want to do business in different ways that maximise the return on investment. That's what Agile is all about—doing things in different ways.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "There’s No Such Thing as an Agile Transformation: Why You Should Focus on the System, Not the Culture",
    "Description": "Explains why lasting organisational change comes from adjusting systems—rules, processes, and structures—rather than trying to directly transform culture.",
    "ResourceId": "Ca_0rw9AUlg",
    "Url": "https://www.youtube.com/watch?v=Ca_0rw9AUlg",
    "Date": "2024-01-21T07:00:06Z",
    "Captions": "There's a quote: \"There's no such thing as an agile transformation; it's a cultural transformation.\" I agree with the part that says there's no such thing as an agile transformation. That's agile transformation, digital transformation, whatever transformation you want to call it. It's not really a thing. But I also disagree that it's a cultural transformation. \n\nCulture is not something you can change; it's not something you can affect directly. The culture is an outcome of the way you do things, the system, and the way the system engages people. People interact with the system, resulting in the behaviours that create the culture in your organisation. \n\nSo, the easiest way to think about it is: culture is just a shadow on the wall. Right? So if you want to change the shadow on the wall, do you try and change the shadow, or do you change you? You change your position, you change your shape, and then the shadow on the wall changes. \n\nIf you want to make changes to your organisation, if you want to change the way people act in your organisation, if you want to modify the culture of your organisation, you don't actually focus on those things. Those are not the things you change; those are the outcomes. You focus on the system that your organisation has. What are the rules? What are the procedures? What are the practices? What are the ways you measure people within your organisation? What are the principles upon which people make decisions in your organisation? \n\nWhen the rules don't fit, those are the things that changing will affect the way your organisation runs, the way it functions, and the way people act within your organisation, which is your organisational culture. \n\nSo, you can't really affect how people act. Well, there my dad's spinning on that one. But if you want to change the way people behave in your organisation, you're going to have to focus on the system. Change the system itself and tweak the system. Make changes; maybe it's small changes, maybe it needs large changes to the system. \n\nThen monitor the outcomes, which is the culture and the way people act and the behaviours that you see in your organisation. Then keep shifting the system to get the result that you want. So you need to focus on that system; you can't focus on the culture because you can't change culture. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "The Importance of Evaluating Direction: Are You Heading the Right Way?",
    "Description": "Learn why regularly evaluating your direction is vital for developers, product owners, and organisations to ensure goals, features, and strategies truly meet user and business needs.",
    "ResourceId": "17qTGonSsbM",
    "Url": "https://www.youtube.com/watch?v=17qTGonSsbM",
    "Date": "2024-01-20T07:00:00Z",
    "Captions": "So there's a quote from Lau which is, \"If you do not change direction, you may end up where you're heading.\" And I think that's absolutely a thing we have to be concerned with. We want to be continuously asking ourselves, are we going in the right direction? And that can be asked at many levels, right? I can be a developer building a product, and I'm writing code. Am I writing the right code? Am I taking this product in the right direction? Am I making the right architectural choices? Am I making the right security choices? Right? Because you don't want to head in that direction where you end up at the end of a product cycle, you're shipping your product to a bunch of users, and there's security flaws, and there's usability issues, and there's... because we've not been heading in the right direction.\n\nAnd that's also true at the product owner level, right? Are we building the right features in our product? Are we going in the right direction to maximise our ability to provide benefit in the market and thus have lots of people use our product? And it also works at the organisational level. Are we as a business focused on the right vision? Are we going in the right direction? And quite often, lots of organisations head off the cliff and don't change direction, right? They forget to look at the data. They forget that the world is ever-changing and ever-dynamic, and that where you thought you were going might not be the right place for you.\n\nThere's a great example. It's a product I use. It used to be called Zoom, nothing to do with the video conferencing tool, but it allowed you... it was basically an AI assistant that would help you with booking your meetings. So you could add them on Teams, you could add them on whatever chat platforms you've got, and I could just message it and say, \"Set me up a meeting with Satia at 3:00 on Thursday,\" right? And it would go off and it would email Satia and say, \"We've got this meeting to set up. How would you like it to be? You want to pick your valid options?\" And it would figure out from everybody's valid options what's a good time to host that meeting, and then it would just book it, right? It would book it straight into your calendar.\n\nBut they realised that that's not how people use their product. Most people that used their product just went to the website and booked through the website, right? They literally went, \"New meeting, here's who I want to attend, submit,\" and that would go off and do it. So they weren't going through the chatbot, so the chatbot was largely irrelevant to their business outcome. The thing that they were delivering that people were using was largely irrelevant. So they actually changed their whole business strategy in order to fit how people were using their product, right? They were taking advantage of an opportunity that arose. Instead of heading in the direction that they were heading, they pivoted. Maybe not far, right? But they pivoted over to a different direction, and they actually renamed their entire organisation. They reasserted all of their interfaces and stuff around this. This is the paradigm that people are actually using in our product.\n\nAnd that's something that lots of organisations don't do. What's a good example of things not happening that way? Oh, I'm not going to remember the dude's name, but the dude that was doing the high jump. Everybody at the time was doing the high jump one leg first, right? And he started doing it. He was the first person to start going backwards, doing the backflip over the high jump, and he was winning gold medals and totally outing all of the competition, like going far higher than everybody else for ten years before everybody else went, \"Oh, actually, maybe we should do it that way. Maybe that's better. He seems to be getting better results.\" Why does it take ten years? Because this is the way we've always done things. We're going in that direction, and we like to keep going in that direction. That's our comfortable, is to keep doing the thing that we've always been doing. And perhaps keeping doing the thing you've always been doing is going the wrong way.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Continuous Adaptation: The Key to Success in a Dynamic Market",
    "Description": "Explores how businesses and individuals can achieve success by embracing continuous adaptation, flexibility, and principle-based decision-making in dynamic markets.",
    "ResourceId": "Bjz6SwLDIY4",
    "Url": "https://www.youtube.com/watch?v=Bjz6SwLDIY4",
    "Date": "2024-01-19T06:08:37Z",
    "Captions": "In order to be successful, we need to constantly readjust to our surroundings. Right? Things happen. If you're going through life and you meet new people, people disappear. Things happen in the world, right? Medical things happen. Winning the lottery happens. All of those things happen, and we as humans are default behaviour is to adapt around those situations. \n\nThe same is true for businesses, right? It's basically an ecosystem. Your business exists within a specific niche that it developed into. Your business grew into one or maybe many niches, depending on the size of your organisation. In those niches, things aren't constant; things are continuously changing. \n\nSo, in the old days, the niches used to be there for a really long time. They used to change very slowly. Right? So if you were a carpet manufacturer in Islington, then your market was fairly stable. Your competition was fairly low. But today, that's not true for any organisation. There are organisations which don't have competitive markets, but they are incredibly rare. You're probably not one of them. \n\nIf you exist in those highly competitive, highly dynamic markets, you need to be constantly adapting to the needs of those markets in order to maximise the value that you deliver to your customers and maximise the revenue that you create and profit that you return for your organisation. That requires constant adaptation—constant adaptation to the market, constant adaptation to changing circumstances, constant adaptation to things that happen in the world that affect your business. \n\nI think that the great example of that is when COVID came along. If you were an organisation in March of 2020 that had already embraced the interwebs, right? You already had people working from home. You had already embraced modern security practices, so you weren't using VPN tunnels into a specific office location. Then you probably, if you were already in that modern camp, you probably had—and your business was largely either doing business, i.e. people working in an office—then you probably had very little impact to your business from the work-from-home rules. Right? Because people could just go work from home, and it was cool. \n\nYeah, we had to deal with, you know, we lost some productivity because the kids were at home as well. Right? We lost some productivity because I don't have an office in my house, and I had to work on the kitchen table. Right? And there's things going on around me. But we adapted. Right? We adapted to those circumstances. We adapted to what it was we had to do, and we made it work. \n\nThat's the genius of humans. That's the thing that we're really good at. So you don't want to get in the way of that inside of your organisation. The way we get in the way of that is by creating rules. \n\nSo companies, organisational controls or boundaries or organisational boundaries should be maintained using principles rather than rules. If you use principles in the way you do business, i.e. a guiding principle, then you're not constraining people to the way we currently do things. You're leaving it open for people to choose different ways to do things. \n\nYou might have policies and procedures and rules, right? You might work in a regulated industry, and here's a bunch of stuff we have to do. But how you interpret those things should be fluid based on the needs of the market while still complying with the rules. \n\nThat is probably one of the hardest things for organisations to adapt to, is that old thinking—the Industrial Revolution thinking—that we can just create a bunch of rules, a bunch of ways that we work, and have everybody follow it, and we're going to continue to be successful. Those days were gone in the 1920s. They're completely eradicated by the 1970s. \n\nAll successful organisations continuously adapt. If you continuously adapt to your market, why don't you continuously adapt to the work inside of your organisation? What's holding you back from making that change? \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "The Agile Bandit: How to Spot and Combat Project Management Mindsets in Product Owners",
    "Description": "Explains how project management mindsets in Product Owners can harm Agile teams, and offers practical strategies to promote value-driven, collaborative team environments.",
    "ResourceId": "21k6OgxeKjo",
    "Url": "https://www.youtube.com/watch?v=21k6OgxeKjo",
    "Date": "2024-01-10T11:00:01Z",
    "Captions": "Have you ever worked with a product owner who really, really should have been a project manager? Where they're focused on work breakdown and delivering to time and task with a Gantt chart? If you have, you've encountered an agile bandit product owner. It creates lots of negative impacts for the team. They don't care about the work; they're just interested in their tasks, and they are not a connected, engaged, empowered team. That way lies agile banditry. Stop it."
  },
  {
    "Title": "How to Overcome Agile Banditry: A Product Owner’s Journey",
    "Description": "Explains the pitfalls of micromanagement in Agile, showing Product Owners how to avoid \"Agile Banditry\" by focusing on vision, value, and empowering their teams.",
    "ResourceId": "EoInrPvjBHo",
    "Url": "https://www.youtube.com/watch?v=EoInrPvjBHo",
    "Date": "2024-01-10T07:00:11Z",
    "Captions": "Have you ever encountered the product owner as an agile Bandit? I have. I worked with a product owner quite some years ago that believed that if every single person on the team just followed their detailed plan and Gantt chart with start times and end times for all of the tasks, if everybody just followed that, everything would work out perfectly. And the only reason it doesn't work out perfectly is because people don't follow his plan. \n\nThat is an agile Bandit. A product owner is not a project manager. They're not looking at task to time; they're focused on goals and outcomes and what is it we're trying to achieve. And we've hired these super smart people to be able to deliver these amazing products. A product owner should be focused on vision, value, and validation. Where is it we're going? What is it we get out of it? And have we managed to actually get there? \n\nIn order for a product owner to focus on those things, they perhaps need to let go of some of the things that they've used in the past and focus instead on enabling the team, the people around the product, to be an engaged, happy group of people. Have you ever met a sad, unhappy group of people that made amazing products or did amazing things as a team? I bet you haven't, because they don't exist. Happy, engaged people build great products. \n\nIf you've got a product owner who's focused, laser focused on task and work breakdown, you are not going to have a happy, engaged team that is connected to the story that we're trying to tell as a product. That person is an agile Bandit; they shouldn't be a product owner at all. It was just terrible. You should see the team. The team was just in a complete mess. They just didn't care. All they cared about was delivering stuff. \n\n\"I've got these things on my task list. I need to deliver these things or I'm going to be in trouble from the product owner.\" There was no team. So don't destroy your team with agile banditry as a product owner. Stop it. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you, or we can help you find somebody who can. You can set up a no-obligation consultation using the links below. Don't forget to like and subscribe if you enjoyed the video."
  },
  {
    "Title": "The Pitfalls of Agile Burndowns: Stop Being Agile Bandits",
    "Description": "Explains why relying on Agile burndown charts leads to over-planning and false progress, and advocates for minimal, adaptive planning and continuous value delivery.",
    "ResourceId": "P2UnYGAqJMI",
    "Url": "https://www.youtube.com/watch?v=P2UnYGAqJMI",
    "Date": "2024-01-09T11:00:51Z",
    "Captions": "Burnd downs are a key indicator of agile banditry going on. Burnd downs encourage teams to plan too far in the future. Whether it's a Sprint burndown or a product burndown, we're planning too far ahead if we have enough data to understand where we currently are and where we're eventually going in number of items. This is why we talk about goals and D action in Scrum and agile. We want to be focused on those things, which means we probably don't understand the details and don't have enough information to even create a burndown. Don't be agile bandits."
  },
  {
    "Title": "Rethinking Sprint Planning: Why Burndown Charts Are Agile Banditry and What to Do Instead",
    "Description": "Explains why burndown charts hinder agile teams, highlighting the pitfalls of detailed upfront planning and advocating for minimal, adaptive Sprint planning and continuous flow.",
    "ResourceId": "BtHASX2lgGo",
    "Url": "https://www.youtube.com/watch?v=BtHASX2lgGo",
    "Date": "2024-01-09T07:00:05Z",
    "Captions": "A common thing that agile teams do is they use burndowns to figure out how things are going throughout the Sprint. I've got to say burndowns are agile banditry. The whole idea of burndowns, in order for a burndown to move from top left to bottom right in a reasonable linear fashion, you have to have planned the whole Sprint up front. Right? In order to have a project burned down or a product burn down moving from top left to bottom right, you have to have planned the whole product or project up front.\n\nHopefully, we can all be on the same page that if we're doing, if we're building products that don't exist yet, right? We're developing products that don't exist, then there's too much variance, too many surprises, too much complexity in what it is we're doing to really plan the next six months' worth of work. It's always going to change more than we would like. And if we look at data from like the Standish Group, that do the chaos report, for example, you'll find that 65% of things that we build change over the life of the product. And in fact, even worse than that, only 30% of the features that we do build are actually used by our customers. The rest are used little, if ever. Right? So that brings those two things together. We have a massive amount of unknowns in what we're doing. It's usually always more than 50%. So we know less than half of what we're going to have to figure out along the way. And that means that being able to plan up front, even the next 10-day Sprint, is just a ridiculous exercise in making stuff up. A ridiculous exercise in telling a fictional story.\n\nThe reality is you should walk out of Sprint planning with no more than is needed to get started. That's how big your plan should be. Getting started in the Sprint, how big should your plan be for your product? Enough to get started, right? Or enough to convince somebody to give you the money. That's also, you know, you might need more for that. But that ability to get started is all you need. So you maybe walk out of Sprint planning with 24 hours' worth of work. We've planned the next 24 hours because we're going to get together every 24 hours and plan the next 24 hours after that. So we don't really need more than the first 24 hours to get started. If we're going to build a product, we don't really need that much more than the first Sprint to get started. What of the backlog items we're going to do maybe during that Sprint? We can come up with, you know, how far out into the future we do want to look. But you want it to be minimal but sufficient. You want to have less stuff to manage, less stuff in these things. That's why burndowns are one of the reasons that you can't tell what's going on.\n\nThis is the banditry part of it. Being for bandits, it's that if I plan the whole Sprint, right? And I've got, let's say I've got five developers working on my product, and I've got five stories coming into the backlog, and each of those five stories has ten tasks that I'm going to write down as part of my plan. How many per person, right? How many tasks do I have at the end? I have lots and lots and lots and lots of tasks. What happens on day two of the Sprint when you figure out that your plan wasn't that great and 50% of it needs to change because you figured out something new? It gets out of date. And the reason it gets out of date is because none of your developers, they want to focus on delivering the stuff because we're under pressure to deliver the product, deliver the value. And yet they need to go and edit or manage these hundred things that are in the Sprint backlog. Right? Don't have them there. You don't need them. All you need is a just-in-time, just-enough plan either for the Sprint or a just-in-time, just-enough plan for your product in order to start getting started and get developing your product.\n\nSo don't get stuck in that rut of too much planning up front, which is what a burndown forces you to do. Stop being a bunch of agile bandits and focus instead on continuous flow of value through your system. If you are being ambushed by agile bandits in your organisation, then my team at Naked Agility can help. Or we can help you find a consultant or expert who can. You can set up a no-obligation consultation using the links below. And don't forget to like and subscribe if you enjoyed the video."
  },
  {
    "Title": "Ditching Agile Banditry: Why Story Points and Velocity Metrics Are Undermining Your Team's Success",
    "Description": "Explores how relying on story points and velocity can harm Agile teams, advocating for objective metrics like cycle time and throughput to boost collaboration and transparency.",
    "ResourceId": "eK8YscAACnE",
    "Url": "https://www.youtube.com/watch?v=eK8YscAACnE",
    "Date": "2024-01-08T11:00:37Z",
    "Captions": "One of the most common forms of agile banditry is the use of story points and velocity. They're often used to beat the team around the head with them. They're used to ambush the team. They're used to ambush leadership as well. Story points and velocity are subjective. They are not useful out with the bounds of a conversation between team members. So please don't be an agile bandit. Don't use story points and velocity. Instead, look at cycle time and throughput and other objective measures."
  },
  {
    "Title": "Avoiding Agile Banditry: Why Story Points and Velocity Are Misleading Metrics",
    "Description": "Explains why story points and velocity can mislead Agile teams, and recommends focusing on throughput, cycle time, and customer value for effective performance measurement.",
    "ResourceId": "EfogGslFkBQ",
    "Url": "https://www.youtube.com/watch?v=EfogGslFkBQ",
    "Date": "2024-01-08T07:00:06Z",
    "Captions": "If you are working on an agile team and you're focused on story points and velocity, then you're probably an agile bandit. Story points and velocity have a really negative impact on our ability to deliver. For many teams, I know there are going to be lots of people that, and you're welcome to comment, that story points and velocity work great for you. I'm sure there are teams out there; I have yet to meet a team that uses story points or velocity that got a positive benefit from it. That's from observing many, many, many teams. \n\nIt creates lots of little negative niggles, like wanting to put things in the Sprint to get the points right. \"Oh, we're going to put a bug in the Sprint; how many points is this worth?\" so that we can get our points at the end of this Sprint. The point becomes the points. We don't want the point to be the points; we want the point to be the value that we deliver for our customers. The points are irrelevant. The points are just a tool to help us as developers on a team have a conversation about what we know and what we don't, and our understanding, and to gain more understanding. \n\nThat's the point of any estimation for complex cognitive work where you're building a brand new product that doesn't exist yet. You want to be focused on the flow of work through your system and throughput and cycle time. Those are the metrics you're looking for. Story points and velocity are terrible metrics for teams to look at. There are lots of teams, especially brand new teams who have never done anything before, that definitely get encouraged to move down the story point route, and I just think it's a bad idea. Ditch the story points from the start; focus on flow metrics, cycle time, throughput. Go there. \n\nI did have a customer recently who made the biggest agile banditry mistake I have ever seen, and that was that story points were in the contract with the customer. They were mandated to do story point estimation upfront to provide that story point estimation to the customer, and the customer would measure the team based on the number of story points that they delivered. If you were out with a 15% standard deviation of the number of story points you normally deliver, then you were in trouble and potentially in breach of contract with penalties that come along with it. \n\nI can't think of a better way for everybody to just make up whatever they needed in order to complete the contract. You're not going to get transparency there; you're not going to be able to see what's going on. Those story points are not going to be the story points that you want them to be. Even if you could possibly get there, which I don't think you can, ditch story points. Don't have them in contracts. Don't ever talk about story points outside of the team. \n\nIf you want to do planning poker and sit with a team and do planning poker, fantastic. It's a great tool to help us as a team collaborate and figure out what we don't know. But at the end of that event, at the end of that meeting, delete all the data. It is of no value whatsoever beyond our understanding of the need to break things down. That's what estimation is about. It's not about story points, and it's not about velocity. Product owners should not be using velocity to monitor teams; that way lies agile banditry. \n\nSo you should avoid being agile bandits. Instead of focusing on story points and velocity, subjective metrics, focus more on objective metrics like throughput and cycle time. Don't be agile bandits. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you, or we can help you find a consultant or expert who can. You can set up a no-obligation consultation using the links below. Don't forget to like and subscribe if you enjoyed this video."
  },
  {
    "Title": "Ditch the Agile Bandit Mentality: How to Prioritise Value Over Estimates for Team Success",
    "Description": "Explores why focusing on value delivery and psychological safety leads to better Agile team outcomes than fixating on estimates, output metrics, or blame culture.",
    "ResourceId": "UFCwbq00CEQ",
    "Url": "https://www.youtube.com/watch?v=UFCwbq00CEQ",
    "Date": "2024-01-05T11:00:32Z",
    "Captions": "If you are working in the agile space and you're focused on, say, do metrics like original estimate versus actuals, then you are an agile Bandit. You want to stop doing that. It reduces the psychological safety of your team. It creates a focus on estimation rather than actually delivering stuff, and it encourages teams to focus more on the output—more stuff being delivered—than the outcomes that they're trying to achieve. Don't be an agile Bandit and don't use S do metrics."
  },
  {
    "Title": "Say-Do Metrics: Avoiding Agile Banditry in Your Organization",
    "Description": "Explains the risks of using say-do metrics in Agile, highlighting how they encourage vanity metrics, harm psychological safety, and shift focus from outcomes to outputs.",
    "ResourceId": "oKZ9bbESCok",
    "Url": "https://www.youtube.com/watch?v=oKZ9bbESCok",
    "Date": "2024-01-05T07:00:28Z",
    "Captions": "One of the agile practices that puts us clearly and explicitly in the category of agile banditry is using say-do metrics. That's metrics where you're looking at what people say they were going to do and then what they actually did. A great example of that is, oh, I guess my favourite example is from an organisation that I worked with many years ago. The head of PMO brought me into his office to show me some of the metrics that they presented up to leadership in the organisation. For each of the projects, this was many years ago, each of the projects that they had underway, I think there were five projects they had underway, they had an original estimate versus actual. That's the quintessential say-do, original estimate and actuals for each of the projects, and they were in the thousands of hours, right, like 5,000 hours.\n\nSomething I noticed right away when he showed me this presentation, it was a presentation to show the leadership, was that of the five projects, all of them were within 20%. But if you know your BCKs and you know your statistics, you'll probably know from the Chaos Report of the Standish Group that 65% of the features that we think we're going to build change during the life of the project. So how could it possibly be only a 20% deviation between the amount of time we think it's going to take and the amount of time actually going to take? So that was my first clue that something was up.\n\nMy second clue was that three of the projects were within 15%, two of them were within 10%, and then I noticed that one project that said 5,232 hours original estimate, 5,232 hours actuals. I just turned the graph around, pointed at that one and said, \"But this is BS. How could you possibly have these numbers be the same?\" He said, \"Well, right, you know there's something bad coming when somebody does that well.\" Last year, we created this report with what happened, and we gave it to leadership, and they had a tantrum and threw their toys out the pram and shouted at us, and made our lives a misery. So this year, we made a change to the system and we allowed project managers to make a change request to their original estimate. That project manager just got his change request in just before we completed the report, before the deadline. So the original estimate had been changed more than once in order to get the graphs to look like they did. \n\nSo they're going to go and present this to leadership, and leadership is potentially going to make decisions on what they fund, what they don't fund, based on this type of data, this data that is complete fiction. It's just complete fiction. So you don't want that in organisations. If you have a monitor say-do metrics, there are many other types of say-do metrics, but the most common one is original estimate and actuals. Monitoring say-do metrics reduces psychological safety. The PMO of a big organisation didn't feel safe enough to show leadership the real data; they had to create vanity metrics in order to make them happy.\n\nWe tend to focus on output rather than outcome. Well, you said you were going to deliver 10 things, but you only actually delivered nine things. You suck! Whereas in actual fact, we delivered nine of the most valuable things. Wasn't that better if we delivered nine things that were more valuable than the 10 things that were asked for? Or you delivered zero of the things we asked. I remember being at an MVP Summit at Microsoft, where they invited us to come and talk about the product. The year before, we’d done a whole bunch of stats and learnings on what are the most valuable features that we as MVPs believe as your DevOps needs as a product. I think it was TFS service at the time. What are the cool features we need? We did days, like five days of figuring out what that was and came up with a list of here's the top five things that we believe all of our customers need in the product.\n\nThe very first thing, the next year when Brian Harry got up to do his keynote, starting presentation to kick the next Summit off, he said, \"Here's a list of the five things that you said were the best things we could build, and I'll tell you now we've built none of them. Here's what we did build.\" Instead of building the things that we thought were the most valuable, he went off and totally blew our socks off with all the things he did build that were much more valuable to our customers. If we'd held them to the say-do metric, they delivered nothing that we asked for, and that is absolutely not the case. \n\nSo don't focus on output over outcome. You want to be focusing on the outcomes, what it is you're trying to achieve. That overemphasis that comes from it on estimation is key to that negative feeling that people have when you monitor them with say-do metrics. Just stop doing say-do metrics. Don't be a bandit and give up on that agile banditry of say-do metrics. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you or help you find a consultant or expert who can set up a no-obligation consultation using the links below. And don't forget to like and subscribe if you enjoyed this video."
  },
  {
    "Title": "Ditching the Myth of Special Sprints: Embrace True Agile Practices for Usable Products",
    "Description": "Explains why relying on special Sprints undermines Agile, and advocates for continuous improvement, accountability, and delivering usable products each Sprint.",
    "ResourceId": "uvZ9TGbMtnU",
    "Url": "https://www.youtube.com/watch?v=uvZ9TGbMtnU",
    "Date": "2024-01-04T12:14:45Z",
    "Captions": "There are no special Sprints. There are no Sprint Zeros. There are no hardening Sprints. There are no bug fix Sprints. All of these things create safety nets, and safety nets generally get used. People take more risks because they know they have a safety net, and risks, when we're trying to create usable working product, are not a good thing. They are risks to the business, and we want to focus on usable working product at the end of the Sprint. So don't have any special Sprints. Don't be an Agile Bandit."
  },
  {
    "Title": "Special Sprints: Agile Banditry or Risk Management?",
    "Description": "Explores why special sprints like Sprint Zero or hardening sprints undermine Agile by delaying work, increasing risk, and reducing continuous delivery of usable products.",
    "ResourceId": "rEqytRyOHGI",
    "Url": "https://www.youtube.com/watch?v=rEqytRyOHGI",
    "Date": "2024-01-04T11:09:15Z",
    "Captions": "You can't have spent any time in the agile space without encountering people doing some kind of special Sprints. They might be doing Sprint zeros, they might be doing refactoring sprints, they might be doing bugfix sprints, they may be doing hardening Sprints. Whatever special type of Sprint they're doing, it is absolutely agile banditry, and those that are doing it are just bandits. They're not doing good things. Special Sprints reduce and dilute our ability to deliver usable working product. \n\nSo the whole purpose across the board, the whole purpose of agile practices is to enable that visibility and connection with the stakeholders with continuous delivery of usable working product, and that's how we manage risk in agile. In the old traditional model, we managed risk by having a detailed plan, right? That was our management of risk. Here's my full detailed plan because things aren't going to change that much; this plan will work. \n\nBut in the complex cognitive space that we tend to operate in, when there are more unknowns than known, you need a different way of managing risk. In all of agile, we do that by creating usable working product. That's our key risk mitigator because we can't document everything that's going to happen because there are too many surprises. So having those usable working products mitigating that risk, no special Sprints is key there. \n\nA great example of that is a scenario that happened to the Azure DevOps team when they first started moving towards this agile thing. They were kind of moving towards this scrum thing, and they decided initially that they would have six Sprints, six three-week Sprints, and then they would do a kind of hardening bug fixing, you know, safety net, some kind of safety net Sprint. I don't remember specifically what they called it; it was some kind of safety net Sprint. \n\nWhat they expected to happen was, as each Sprint started and completed, that you would have a kind of ebb and flow of undone work, right? Whatever you want to call it, of undone work, of technical debt, of things that weren't quite right. They would have this little uptick, and then towards the end of the Sprint, it would come back down again. Then the next Sprint would have a little bit undone, and then it would come back down again. Maybe there'd be a little bit left over at the end of a Sprint, but then we'd pay it back the next Sprint. \n\nBut because they had that safety net, and because every single member of every single team knew that they had that safety net, they thought constantly, \"Well, I'll just leave that for our safety net. We'll leave that for our safety net Sprint.\" It happened so much that instead of that kind of ebb and flow of undone work, they ended up with a nice little upward curve trajectory of undone work. They got to that sixth Sprint and realised that they had more work that they could do in the safety net to pay it back and create a usable working product. It wasn't working. \n\nSo what did they do? They restarted the whole thing. \"Let's start again, and we're just going to do three-week Sprints, and at the end of every three-week Sprint, we're going to ship to production.\" Not a maybe; we're going to. So we have to have good quality, we have to have paid back our technical debt, we have to have as little undone work as possible going into the next Sprint because there is no safety net. \n\nPeople who have safety nets take risks, and if you have a safety net, that's agile banditry. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you, or we can help you find a consultant or expert who can. You can set up a no-obligation consultation using the links below. Don't forget to like and subscribe if you enjoyed this video."
  },
  {
    "Title": "The Pitfalls of Routine Agile Questions: Avoiding the Ghosts of Agile Past",
    "Description": "Explores how routine Agile questions can hinder team progress, stressing the importance of focusing on value delivery, goal alignment, and managing task bottlenecks.",
    "ResourceId": "JzAbvkFxVzs",
    "Url": "https://www.youtube.com/watch?v=JzAbvkFxVzs",
    "Date": "2024-01-03T07:00:13Z",
    "Captions": "One of the ghosts of agile past is dogma. We've all run into those dogmatic folks that try and pursue an idea irrelevant of the data and the experience of the people around them. We need to kick those folks to the curb. I usually, I can be— not dogmatic is the wrong word— almost 100% of the time when I'm working with teams, I'm pragmatic. But I can also be pedantic if I'm in a training situation. Whatever it is I'm training, if I'm teaching you that thing, I'm going to be specific about what things are called and what they mean based on what they're called, whether that's Scrum or continuous delivery or C or whatever it is. There are specific meanings for the nouns that have been defined within the context of the thing that we're learning, and we need to understand what they are, what the impact is, and how they engage with each other in the real world with teams.\n\nWe need to be pragmatic. We need to understand that people call things different things than we're expecting. They have different knowledge and skills; they've come from different places where they use things in different ways, and we need to work within the bounds of what it is we've got. So one of those ghosts of agile past is dogma. Oh, there's been some dogmatic things I've seen. The worst one was told to me by a good friend and my boss, Steven Borg, about a Scrum Master who had just been fired from their job in Washington State because they had been adamant that if the team weren't standing up during the daily standup, then they weren't doing Scrum, and you have to be standing up in order to do Scrum. But that team had specifically decided that they wanted to sit down because they had a disabled team member in a wheelchair, and they didn't want to be towering over that person. \n\nThat is the right thing. That is the very definition of a Scrum team, of being respectful to each other, of openness, respect, and courage to do the things that they think are valuable. And one of those was, \"Let's all sit down so that we can be at the same level and work together.\" This dogmatic Scrum Master got themselves fired for cause. I think anyone who is dogmatic— and dogmatic is where, see, dogma has this relationship to religion. It's really about believing something in spite of the evidence to the contrary. That's what I think about dogma, right? So that team was told that if they're not standing up, they're not agile, when in fact they were demonstrating agility and sitting down, and the other person was just following. \n\nAnd it's not even the letter of the law because there's no stand-up in Scrum, right? But the letter of their understanding of the law in order to just enforce that rather than working with people within the context and learning more. And that's where dogma differs from just being pedantic, right? Being pedantic is sometimes valuable within the context of training, but being pragmatic is the way most Scrum Masters and agile coaches should be. Don't be dogmatic; be pragmatic and try and get rid of one of those ghosts of agile past.\n\nIf you are being haunted by this ghost of agile past, we can help you exercise it or help you find a coach, consultant, or trainer who can. Don't let this phantom undermine the effectiveness of your value delivery, and the longer it lingers, the more it will damage your team's progress. So email me at martink@agility.com about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Overcoming the Ghost of Agile Certifications",
    "Description": "Explores the limits of Agile certifications, emphasising real-world experience, continuous learning, and team validation over credentials for true professional growth.",
    "ResourceId": "eLkJ_YEhMB0",
    "Url": "https://www.youtube.com/watch?v=eLkJ_YEhMB0",
    "Date": "2024-01-02T07:00:20Z",
    "Captions": "One of the ghosts, it's actually two of the ghosts of Agile past, are the three questions you might have heard of: the three questions in relation to the Daily Scrum. What did I do yesterday? What am I doing today? And what's blocking me? Or you might be thinking of the retrospective: what went well, what didn't go well, what do we need to change, right? There's various renditions of the three questions. Three must be a good number, but the reality is that if you've got a Scrum team and you do the three questions once, maybe a couple of times, either at your daily or at your Sprint review, then that's probably okay, right? There's nothing fundamentally wrong with the three questions.\n\nBut what is dysfunctional? What is that ghost of Agile past? It's when the three questions become the purpose of the daily or the purpose of the retrospective. You'll see that on teams; they'll come into the Daily Scrum and they will go into autopilot. It becomes a rote procedure for them to follow that they each need to answer the three questions. You'll perhaps see the project manager, sorry, Scrum Master, writing down the answers to those three questions so they can go update their project plan. That is not the purpose of the daily, certainly not the purpose of the retro.\n\nWith the other three questions, you need to be focused on the value that we're delivering and is that value moving towards the outcome that we're trying to achieve? We're trying to be successful at delivering on the Sprint goal and potentially other stuff in the Sprint. Are we making progress towards that? Are we blocked with that as a group? \n\nSo what I tend to see as a more effective way to move forward is for teams to focus on the value in the Sprint. We don't need to hear from everybody, right? If Bob is working on the same task for three days in a row, it's boring to hear from Bob and really adds no value. There might be a good reason why Bob is stuck on that task for three days in a row, right? But that doesn't mean that's how we want to surface that during the Sprint, the Daily Scrum, because most people in the room don't really care, right? It's not part of their thought process.\n\nBut what you could do is focus on the value that's being delivered. What is the next most important piece of value that we need to deliver? How are we doing with it? Well, Bob and Brenda and Billy are all working together on this item, and Brenda provides an update for the team on how we're doing on that, right? As a group, how are we doing? That might be a better way to proceed. You've just one person spoken, one piece of value, and three people have been working together on that particular item.\n\nOr perhaps, focusing on the value, you might be thinking about which of these items on the board have not moved in a long time, right? What are we forgetting in our daily? That's something to look at. How old are these items? Is something getting too old on this board? You've maybe seen, if you Google \"banana peel daily work item aging,\" you'll see a board with stickies on it and actual real banana peels stuck to it. The more brown the banana peel gets, the more fruit flies there are flying around, and the older that item has been. Let's deal with it before the fruit flies come out.\n\nNow, that's just an arbitrary silly visual indication, but the reality is the longer things are stuck in your system, the longer things are stuck there, the longer they're going to take, right? I mean, the exponentially longer they're going to take the longer they're in there. And that's based on the data, right? You can go collect that data, look at that data, monitor the flow through your system, and you'll see that very much happening. Things that get stuck tend to get stuck.\n\nIf you don't have clear rules on, as a team, right, our team's way of working, if you don't have a clear consensus on what do we do about those things, quite often they just get left. Because they get left, you end up getting to the end of the Sprint and there's things you haven't done and things that haven't moved and things that get left behind because we're not focusing on maximising the value that we're delivering as a team. \n\nAnd that is a ghost of Agile past: the three questions creating dysfunctional behaviour where we're not focusing on value delivery. If you are being haunted by these ghosts of Agile past, we can help exercise them or help you find a consultant, coach, or trainer that can. Don't let these phantoms undermine the effectiveness of your value delivery, and the longer they linger, the more they will haunt your team's progress. \n\nSend me an email to martin@nkdagility.com and we'll help you get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "The Ghosts of Agile Past: Why Burndown Charts Might Be Holding You Back",
    "Description": "Explores why burndown charts can limit Agile teams, highlighting the drawbacks of fixed planning and advocating for adaptability, empirical work, and value flow.",
    "ResourceId": "ymKlRonlUX0",
    "Url": "https://www.youtube.com/watch?v=ymKlRonlUX0",
    "Date": "2024-01-01T07:00:20Z",
    "Captions": "Another ghost of Agile past is burndown charts. You know, I always, always had a problem with burndown charts. There was just something niggling at me that there was something wrong with them. Everybody seemed to talk like they were the holy grail of monitoring a team. But when you start thinking about just-in-time planning, just-in-time planning doesn't just extend to the product backlog, it also extends to the sprint backlog. And if we do just-in-time planning, how could you possibly have a burndown that reflects the team, the work that the team's working on? Think about it. The way a burndown works is it goes from top left to bottom right. It goes from a list of all the stuff that we need to deliver burns down towards that trajectory of we've delivered all the stuff in it. In order to do that we have to understand all the stuff that's going to come into the sprint backlog at the start. This is why you see lots of teams and organisations fixated on that once you've brought things into the sprint backlog you can't change the scope. Crap, right? The idea that you can't, that if you're going to remove something from the sprint backlog you have to bring in something of equal size and all of that stuff that is really really just smacks of traditional project thinking right we've got scope we want to maintain that scope we want to control that scope so we're gonna have this burndown that we want to be on this line of that and it's just just a crap. The worst way to do burndowns is if you are burning down hours on tasks. That's probably the worst form because it implies that we've built all of the tasks with all of the hours at the beginning of the sprint. And I don't mean all, right? There's at least one person out there is sitting there thinking, but Martin, we don't plan all of this stuff, but maybe we get 90% of the way there. I'm saying 90% is crap. I'm saying 70% is crap. I'm saying 50% is probably crap, right? We discover more by doing than we could by thinking up front. That's the fundamental context within which Agile sits. And anybody that thinks that they can build products that don't exist yet and have a higher than 50% probability of the things you bring in being the things you need is, I don't know what they're smoking but it would be great to get some of that stuff. Because it's just not how the world works. How the world works. When we have that high degree of probability that things will be different, low predictability in what we think's gonna happen and what actually happens, we need a different way to manage the work. We need to manage the work empirically and in any empirical process which Scrum is founded on empiricism, most of Agile is founded upon empiricism, in any empirical process you're not going to know what it's going to take to do something. That's the first part. So if we're thinking we can create a whole big list of hours at the start and then burn down and see that we're on that trajectory, that's not gonna happen. \n\nSo a solution for that that many teams have tried or many teams that I've seen have tried is to do burn down in story points so instead of burning down the hours they burn down the story points so it's slightly less granular or go even more less granular and burn down in stories right so you get that more jagged line rather than a smooth line but the real and that's a little bit better at least if we're 50% way through the sprint and we're 50% delivered value that's probably the best that the burndown is going to get right in in that world where we've brought 10 things into the sprint and we're gonna deliver 10 things if we're halfway through the sprint and we've delivered five of them things are going good if we're halfway through the sprint and we've delivered three of them, things are not going good, right? That's probably, there's a lot of assumptions in there that things are of similar size, there's all kinds of assumptions in there, but that's probably the best of that world. \n\nBut the reality is that all of those are predicated on the idea that you've decided what that thing is up front. You've decided how many of those things you're going to bring in up front. And whether it's hours or story points or stories, that's not how it works. Most teams have a higher degree of volatility. They're not just thinking about the value that they're delivering in the sprint, their sprint goal. They're also thinking about how much technical debt do we have to pay off? How much refactoring do we maybe have to do as we're building this product? They're thinking about that, those little bugs that keep, you know, that steady stream of small, inconsequential but valuable defects that keep coming through the system you don't want them building up so you've got to take some of them on and responding to the business and the business needs something and be able to respond to it or production issues or there's too many ors the reality is you are much better focusing on the flow of value through your system and maintaining a steady consistent flow as much as you can within the bounds of the work that you're doing, than on trying to meet some arbitrary top left to bottom right graph, burn down. That's just ridiculous, and it is one of the ghosts of Agile past. \n\nIf you are being haunted by these ghosts of Agile past, we can help you exercise them or find a coach, consultant, or trainer who can. Don't let these phantoms undermine the effectiveness of your value delivery. The longer they linger, the more they'll haunt your team's progress. Send me an email to martin at nkdagility.com and we will help you get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website and we'd love to hear from you."
  },
  {
    "Title": "Story Points: A Ghost of Agile Past",
    "Description": "Explores the problems with story points in Agile, their impact on team behaviour, and why flow metrics offer a better way to measure progress and deliver real value.",
    "ResourceId": "beR21RHTUvo",
    "Url": "https://www.youtube.com/watch?v=beR21RHTUvo",
    "Date": "2023-12-29T07:00:14Z",
    "Captions": "There are a number of ghosts of Agile past that plague us and the first one that I want to talk about is story points. The person that originally created the idea of story points has publicly apologised for creating them. That should tell you something about story points. But ultimately, story points have been with us for a very long time. In the old, old, old days, people used to do a lot of absolute estimation. So things like hours, right? We used to figure out exactly how many hours this thing would take. This will take 5,000 hours. And then we would perhaps measure ourselves against how many hours it did take. And in order to kind of move away from that idea of hours and absolute estimation, a lot of teams started talking about relative estimation and relative estimation points in some way. And that could be t-shirt sizes I often hear, but the main one is story points. Story points have been with us probably for about, about 20 years. They've been plaguing, they've been haunting teams for about 20 years. \n\nAnd story points create a whole bunch of, wow, really difficult things with teams. So one of them is that you'll often see or hear teams having a conversation about how they claim points for the work that they've done so that they can push the rest of the work that they haven't done into the next sprint. That's pretty dysfunctional behaviour right? The point is not the points, the point is the value that we're delivering and that's what we should be focusing on, not some arbitrary set of points. \n\nWe also see teams being measured or compared across teams based on their story points. This team delivers 30 story points per sprint, this team delivers 20 story points per sprint, so this team must be better than this team and that is utter garbage. There is no way to compare story points across teams. There is no way, there is no normalisation algorithm that you can use to do that comparison or create it in some way. It's just one of those agile bullshit things that keeps sticking around we can't get rid of. \n\nSo the what was the other thing that story... Story... Oh! I recently engaged with a customer and they had a team that was struggling to deliver. It was actually five teams working on one product and they were struggling to deliver. And I was trying to figure out what the problem was and they kept going on about story points were the most important thing for them to progress and they had to get a specific number of story points. And this was a professional services organisation. And I found out that the contract that they had with the customer, obviously, somebody on the customer's side and somebody on their side had decided that it would be a great idea, because they've heard about these story point things, to put story points into the contract and they were contracted for an exact number of story points and if they were outwith a 15% deviation from the exact number of story points then there were fiscal penalties for the professional services organisation so you can imagine the raft of dysfunctional behaviours that resulted from that. \n\nI used to think story points were a good thing. I used to think they were a good thing. And now I'm a little bit more aligned with Daniel Vacanti on this. He's the Kanban, pro Kanban guy. Story points have set our industry back 20 years. Story points are one of the things that have restricted the ability for us to adapt to changing circumstances as we might have because there's that continuous focus on the numbers, continuous focus on the work that's done because story points reflect the work, not the value, right? Continuous focus on the work, the butts on the seats, rather than on the value that's created. \n\nSo I'm a firm believer in flow metrics moving towards, they're not the be all and end all, right? Because we can have awesome flow and we're delivering tons of crap into production, but at least flow is telling us what's really going on, right? We're looking at our cycle time, we're looking at our work item aging, we're looking at our throughput, right? Those metrics are just based on historical fact for what we're delivering. We can certainly manipulate them by reducing batch size, which usually has good outcomes. And I just find that they're all round a more useful way of looking at the data of, and potentially looking across multiple teams as well for a whole department, for a whole organisation. What is it we're able to deliver, what does that look like? But ultimately, moving towards more flow-based metrics and away from relative size estimation, I think is a good idea. \n\nAnd that's why I put story points in that list of ghosts of Agile past. And if you are being haunted by these ghosts of Agile past, we can help you exercise them or help you find a coach, consultant or trainer who can. Don't let these phantoms undermine the effectiveness of the value that you deliver. And the longer you wait, the more they're going to haunt your team's progress. So send me an email at martin at nkdagility.com and we will get you the help you need to get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website and we'd love to hear from you."
  },
  {
    "Title": "Introduction to Agility’s Ghosts: Shedding Dogma and Embracing Pragmatism",
    "Description": "Explores the dangers of dogmatism in Agile, highlighting the need for flexibility, pragmatism, and people-focused adaptation over rigid rule-following in teams.",
    "ResourceId": "_5daB0lJpdc",
    "Url": "https://www.youtube.com/watch?v=_5daB0lJpdc",
    "Date": "2023-12-28T08:40:54Z",
    "Captions": "One of the ghosts of Agile past is certification. We've been hearing a lot about it recently, with many folks being very dismissive or pooping on certifications a lot. I want to kind of add to that pile a little bit but also validate some of the value that we get from certifications.\n\nCertifications have had a significant impact on our industry because they get in the way. They kind of get in the way of learning a little bit. They really shouldn't get in the way of learning, but they do get in the way of learning. People get jobs because they have certifications, not because they are actually able to do stuff, and people chase certifications rather than the knowledge that is the thing that those certifications are supposed to assess.\n\nI'm going to say this now, absolutely categorically: there is no two-day course that any of you can go on and then pass a certification that will enable you to be the thing that the certification enabled you to pass. At the very most, I think of it like passing your driving test. Right at the moment when you are 17 or whatever age it is in your area that you passed your driving test, were you the most awesome driver out there? No, you were not. You were the minimum. You had the minimum information you need to not be a danger to those around you. Quite often, not even that. But mostly, the idea behind a driving test and the driving training that you get, which you don't have to do training for; you can just sit the test, is to ensure that you're not a danger to others.\n\nDoes getting your driving test mean you can also ride a motorbike? Probably not. Can you drive a ten-ton truck? Probably not. All of those things are additional licenses and certifications you need to get in order to do those other things, and usually, they come with additional limits and constraints as well.\n\nWhat I think the value of certifications is, well, the certification itself, if you just get given the certification, is not valuable. The value is in some kind of assessment at the end of your course, regardless of whose assessment that is. The value of it is whether you were paying attention to the core things that were expected to be paid attention to. Did the trainer manage to cover the core things that we expected to be in the class? Did I, as a student, understand the core things as they're intended to be in the class? Those are the minimum bars that we would like to meet, and sometimes things happen; sometimes we don't meet them. Having some kind of certification can help validate that knowledge a little bit.\n\nBut ultimately, if you're using certifications for job interviews or you're using them for some kind of professional acumen, or forbid this, if you've just passed a Scrum Master certification and now you've put Scrum Master on your LinkedIn profile or Agile Coach because you've passed an ICF certification, then get that off there as quickly as possible unless you've got the experience to back it up. You are not the thing. My first Scrum Master job is not the same as being a Scrum Master. So if you're selling yourself as a Scrum Master and you haven't even had your first Scrum Master class job, then that's probably not a good idea.\n\nMost of the best Scrum Masters that I've met did not go on a Scrum course and become a Scrum Master. They became a Scrum Master and then they went on a Scrum course. The way they became a Scrum Master was the team that they worked in selected them for that role because they were the most competent person on the team within the context of maximizing the effectiveness of that team. That's how the best people become Scrum Masters.\n\nSo if you want to be a Scrum Master, my advice would be to join a team that uses the skills that you already have and demonstrate to that team that you provide value, are effective, and are interested in their effectiveness, and can help them. They will select you to be their Scrum Master. It's not really a job title.\n\nThat's the certification ghost of Agile past. If you're being haunted by these ghosts of Agile past, we can help you exercise them or help you find a coach, consultant, or trainer who can. Don't let these phantoms undermine the effectiveness of your value delivery. The longer they linger, the more they'll haunt your team's progress or even destroy it.\n\nSend me an email to Martin at nkd agility dot com, and we will help you get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at naked agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Stay Ahead of the Curve: How Continuous Learning Keeps You in the Top 10%",
    "Description": "Explains how continuous learning helps you stay relevant, seize new opportunities, and grow personally and professionally through reading, community, and experimentation.",
    "ResourceId": "-T1e8hjLt24",
    "Url": "https://www.youtube.com/watch?v=-T1e8hjLt24",
    "Date": "2023-12-19T11:00:00Z",
    "Captions": "A blog post that I read years ago started with the phrase, \"If you're reading this, you're already in the top 10%.\" That's because there's only a small number of people that actually focus on continuous learning, that actually try new things all the time, that are actually reading up on different techniques and different topics. They don't have to be new; they can just be new to you. They can be older things that you're going and figuring out. \n\n\"Crossing the Chasm\" was written in the 80s, right? What are the things that you're reading? How do you enable yourself to be in the top 10%? Because that's how you maximise your chances of getting the best gigs, right? You need to be in the top 10%. If all you need to do to do that is read some blog posts every week, maybe a couple of books a month, that's not a high bar."
  },
  {
    "Title": "The Power of Continuous Learning for Product Owners",
    "Description": "Explains why continuous learning is essential for product owners, highlighting key tools, practical advice, and strategies to stay effective and ahead in a changing industry.",
    "ResourceId": "XKmWMXagVgQ",
    "Url": "https://www.youtube.com/watch?v=XKmWMXagVgQ",
    "Date": "2023-12-19T07:00:11Z",
    "Captions": "If there was one thing that new product owners should know above all the other things that we've talked about, that's that they need to focus on continuous learning. They need to be looking at what's happening in the industry, what's happening in the market, what are the new tools and techniques that are available. It doesn't mean you're going to use them; there's always a little bit of a danger of the cult of the new, right? Well, we're using it because it's new, but you need to understand all of the different tools and techniques that are available to you, at least enough to know what thing you might choose for a particular circumstance so you can have a goal. The more tools you have in the toolbox, the better.\n\nThere's a great blog post that I read years ago. It was focused on developers, coders, but the theory applies just the same, and it started with the phrase, \"If you're reading this, you're already in the top 10%.\" And that's because there's only a small number of people that actually focus on continuous learning, that actually try new things all the time, that are actually reading up on different techniques and different topics. They don't have to be new; they can just be new to you. They can be older things that you're going and figuring out. \"Crossing the Chasm\" was written in the '80s, right? What are the things that you're reading? How do you enable yourself to be in the top 10%? Because that's how you maximise your chances of getting the best gigs, right? You need to be in the top 10%. And if all you need to do to do that is read some blog posts every week, maybe a couple of books a month, that's not a high bar to get into that top 10%. And then you'll be the one with people knocking at your door trying to figure out how to get you to be their product owner.\n\nSo, as a new product owner, read voraciously. Read blog posts, watch videos on YouTube, follow on LinkedIn the other product owners out there that you'll be able to find. Product owners and product managers, what are they talking about? What are they into? What are they teaching you? Learn about evidence-based management, hypothesis-driven engineering, OKRs, all of those marketing things around A/B testing, Mechanical Turk, different tools you can use to enable you to have the information you need to make the best decisions you can around maximising the value of the work done by your Scrum team, or if you have multiple Scrum teams, by all of those Scrum teams. What is it that you're going to do to maximise the value? Continuous learning is the key to that.\n\nWe can help you. We have a bunch of Scrum classes at Scrum.org. We have the Professional Scrum Product Owner, Advanced Product Owner if you want to dive a little bit deeper. But on the side of that, you've also got the Professional Scrum with Kanban, bringing in those flow mechanics and flow stories, Professional Scrum with UX, which is focused on the Lean UX. Go read the Lean UX book if you want to understand what that is. These tools and techniques, along with many others that you can learn online, that we can certainly point you to, are the things that are going to differentiate you from all the other product owners out there.\n\nYou need to focus on continuous learning. If you find it hard to focus on continuous learning, if you don't know where to look or what to do, then my team at Naked Agility can help you or point you in the right direction to find the help you do need. Don't let the plethora of misinformation out there get in your way. We can help you filter all of that nasty stuff and get to the nuggets of gold that will help you stand out as a product owner. Use the links in the description to get in touch, and let us help you."
  },
  {
    "Title": "Mastering the Art of Understanding: Essential Skills for Product Owners to Foster Team Clarity",
    "Description": "Guidance for product owners on improving team clarity by reading non-verbal cues, adapting communication, and fostering open dialogue to ensure shared understanding in teams.",
    "ResourceId": "M5U-Pdn_ZrE",
    "Url": "https://www.youtube.com/watch?v=M5U-Pdn_ZrE",
    "Date": "2023-12-18T11:00:15Z",
    "Captions": "You can't measure understanding. You just can't measure it. You can't say, \"Here's a line in the sand,\" and at this point, everybody understands it. It's a lot more nebulous than that, a lot more fuzzy than that. So you, as a product owner, need to learn to read the room, to know what language you need to use in order to enable understanding, to know what sometimes people don't want to admit that they don't understand your thing. Right? So you need to learn to be able to read when people are in that category and maybe do some more around it."
  },
  {
    "Title": "Mastering Product Backlog Management: Essential Skills for Product Owners",
    "Description": "Learn the core skills and best practices for effective product backlog management, including risk, value, sizing, learning, and refinement to maximise product delivery.",
    "ResourceId": "il1GdfG7rWk",
    "Url": "https://www.youtube.com/watch?v=il1GdfG7rWk",
    "Date": "2023-12-18T07:00:15Z",
    "Captions": "One of the key things that new product owners need to learn is how to manage their product backlog. It's a key part of the story. Yeah, I will point out that you don't necessarily need to do it yourself, right? You can delegate it, but you remain accountable. You, as the product owner, are accountable for value delivery and for maximising the value delivery. If you have a terrible product backlog, regardless of whether you delegated or not, it's still going to be you that's held accountable, right? So you, at least, especially if you're a new product owner, you're going to want to learn how to manage a product backlog, how to order that backlog, how to write a good backlog so that you enable understanding with everybody who needs to be reading it.\n\nUm, so in order to do that, it does a lot of work involved in managing a product backlog. One of the key concepts that I think is often overlooked by product owners is that the purpose of the things in your backlog is they become ready, right? So the team can take them on based on everybody's understanding of it. You can't measure understanding, right? You just can't measure it. You can't say, \"Here's a line in the sand,\" and at this point, everybody understands it. It's a lot more nebulous than that, a lot more fuzzy than that. So you, as a product owner, need to learn to read the room, to know what language you need to use in order to enable understanding, to know what sometimes people don't want to admit that they don't understand your thing, right? So you need to learn to be able to read when people are in that category and maybe do some more around it.\n\nBut there are kind of four key vectors that you need to understand, you need to enable for your product backlog. The first one is risk. How risky are the things on your product backlog? And that could be fiscal risk, it could be operational risk, um, it could be lots of different types of risk. What's the risk involved? And if things are really high risk, those are the things you want to spend a little bit more time on upfront to understand them better, break them down, reduce the risk, right? That's key. That's part of refinement, right? Refining your product backlog is really important.\n\nYou also need to understand the value. What are you going to get out of it? What do you think you're going to get out of it? Because remember, everything you think you're going to get out of it is an assumption until you actually get it in front of real users who are using it in production. Okay? So you need to figure out what we think the value is going to be and does the value we think we're going to get actually outweigh the risk, right? If the risk is too high for the value, perhaps we don't bother doing it. It's too dangerous, it's too risky for our product.\n\nAnother thing to understand is the size of the items on your backlog. How big are those things? Um, that can... I'm not going to tell you how to determine what big is, but I generally have a conversation with teams, uh, the people who are going to do the work, right? They are one of your primary audiences. Do they feel that they understand it enough that they can deliver it in a single sprint? That might be a question to ask. If they do understand it enough to deliver it in a single sprint, you're probably good to go. If they don't understand it, it could be either because it's too big or because there's not enough information or they need more questions answered to be able to understand it a little bit more. And that's where refinement comes in.\n\nSo we talked about risk, value, and size. And the last item is how we solve some of those problems is learning, right? Is there something that you need to learn, uh, by doing? Right? Remember Agile Manifesto: we learn more by doing. So maybe you can do, maybe you can try and build something small. Maybe you can, um, take on a little piece of that risk early on and try and do something in the product that hopefully alleviates that risk or at least you figure out more about that risk. That's product backlog management. You've got this overarching refinement. You need to refine this backlog to ready, and then everybody needs to understand it so that the team can deliver it and the stakeholders understand the value. Because if they don't understand the value, they're not going to turn up at the review, right?\n\nUm, so how are you able to do that? We have, uh, scrum.org have the new product backlog management course, which is specifically focused on this topic that takes you through a whole bunch of complimentary practices that can help you with that story. Uh, but there's also lots of different tools and techniques that we talk about in the product owner class, the advanced product owner class around that topic. Heck, even the professional scrum with user experience brings in that refinement story. And if you really want to get serious, then you probably want to bring flow mechanics into your story, as in have a Kanban strategy applied to whatever your process is for delivering, uh, your product and enable, um, the maximum throughput in your process while you're also focused on maximising the value. And that's an awesome combination, right? The ability to deliver and delivering the right thing. That's how you make awesome products.\n\nIf you find it hard to manage your product backlog and maximise the value that you're returning, my team at Naked Agility can help, or we can help you find somebody who can. Don't let these sorts of issues undermine your ability to deliver value. Don't have a poor quality, not understood product backlog. Use the links in the description to get some help as soon as you can."
  },
  {
    "Title": "Transforming Sprint Reviews: How to Engage Stakeholders and Secure Meaningful Feedback",
    "Description": "Learn practical strategies to boost stakeholder attendance and engagement in Sprint reviews, encouraging valuable feedback and stronger collaboration for product improvement.",
    "ResourceId": "KhP_e26OSKs",
    "Url": "https://www.youtube.com/watch?v=KhP_e26OSKs",
    "Date": "2023-12-15T11:00:17Z",
    "Captions": "One of the key issues I see in organisations is the great difficulty that product owners, especially new product owners, find in getting your stakeholders to turn up for your Sprint reviews. Right? And oftentimes it's hard, even if they do turn up, to get them to provide you with feedback. Right? You ask them for feedback and all you can hear is tumbleweeds rolling through the desert. Right? You're trying to engage them and they're just not getting there. \n\nAnd that's, to me, a marketing issue. They don't understand the value of what you're showing them. They're not emotionally engaged in what you're showing them. If they were emotionally engaged, they'd be desperate to sneak into that discussion and provide that feedback, provide you with more information. And that is part of marketing."
  },
  {
    "Title": "Mastering the Art of Product Ownership: The Power of Marketing Your Vision",
    "Description": "Explores how Product Owners can use marketing skills to communicate vision, boost team and stakeholder engagement, and align feedback for successful product delivery.",
    "ResourceId": "Fgla_Oox_sE",
    "Url": "https://www.youtube.com/watch?v=Fgla_Oox_sE",
    "Date": "2023-12-15T07:00:05Z",
    "Captions": "One of the things that a new product owner needs to understand is that there's a lot of their job which is about marketing. You're going to be marketing the vision that you have in your product to the people doing the work, to the people consuming the work, and to the people paying for the work. They might be different people. They have to buy into your story. They have to engage with what it is you're trying to do, and ultimately they need to engage emotionally with that story. That's what marketing is all about: how do you enable people to engage emotionally with what it is you're trying to do so that they're following with anticipation what it is that you're trying to do? That's how you get people engaged in your story.\n\nOne of the key issues I see in organisations is the great difficulty that product owners, especially new product owners, find in getting your stakeholders to turn up for your Sprint reviews. Right? Often times it's hard, even if they do turn up, to get them to provide you with feedback. Right? You ask them for feedback and all you can hear is tumble weeds rolling through the desert. Right? You're trying to engage them and they're just not getting there. And that's, to me, a marketing issue. They don't understand the value of what you're showing them. They're not emotionally engaged in what you're showing them. If they were emotionally engaged, they'd be desperate to sneak into that discussion and provide that feedback, provide you with more information. And that is part of marketing. You need to figure that out: how do you get into that story?\n\nWe talk about it in the Professional Scrum Product Owner only a little bit. I talk about it more in the course, where does... So, I like this topic, but also we talk about it a little bit more in depth in the Advanced Product Owner because we start talking about the visionary and the collaborator and the different aspects of the product owner. And that's where it starts to matter a little bit more when you get a little bit more advanced. But marketing is that piece that enables you to sell your story and your conversation to the other people that are involved in your product and maximise the value that you're delivering.\n\nBecause all the people funneling, providing input to your funnel, that results in your product backlog, that results in the value that you're delivering as you release to customers. Everybody's following the same funnel rather than buffing against it with friction because they're all going in different directions. Is your leadership of your organisation, are your members of your team, are your customers all aligned in where you're going and what you're trying to achieve? That's your job as a product owner: to figure that out.\n\nIf you find it hard to enable this engagement with your stakeholders and get them into your Sprint reviews, my team at N Agility can help perfect your ability to do that, or we can find somebody who can help you. Don't let these sorts of issues inhibit your ability to deliver value. That lack of feedback at the review kind of sucks. Use the links in the description to get help as soon as you can."
  },
  {
    "Title": "Filling the Understanding Gap: A Product Owner's Guide to Vision, Engagement, and Value",
    "Description": "Guidance for Product Owners on clarifying product vision, engaging teams, and ensuring value delivery to bridge understanding gaps in product development and leadership.",
    "ResourceId": "XF95kabzSeY",
    "Url": "https://www.youtube.com/watch?v=XF95kabzSeY",
    "Date": "2023-12-14T11:00:22Z",
    "Captions": "What you need to do is you need to fill that vacuum and as a new product owner this is the key part for you to understand as well as for you to be able to engage and communicate to other people in the organization up up down sideways whatever it is.\n\nDo you understand the vision of your product? Do you understand what it's trying to achieve? If you don't, that's step number one. Figure out what the value is in your product. What's the vision? Right? What is it you're trying to achieve? Where are you going? What's your North Star?\n\nOnce you've figured out that, once you've figured out that and you can communicate it, right, you have to learn to speak in front of people and engage people in that story because you need to engage them in that story. Then you need to think about the value that you're going to deliver. Are the things that you're delivering in the product actually serving that vision? Are they working towards that vision? What is it that you're trying to achieve?"
  },
  {
    "Title": "Vision, Value, and Validation: The Keys to Successful Product Management",
    "Description": "Explains how Product Owners can replace traditional project management with vision, value, and validation to guide teams, deliver real value, and ensure product success.",
    "ResourceId": "Tye_-FY7boo",
    "Url": "https://www.youtube.com/watch?v=Tye_-FY7boo",
    "Date": "2023-12-14T06:45:02Z",
    "Captions": "One of the five things that I would teach a new product owner is about vision, value, and validation. One of the common things that happen in organizations as they start to move from focusing on project delivery to focusing on product management is that they take out all of the things that you think of as traditional project management, like the milestones and dates and Gantt charts and project plans. We take out those things because they're not agile, but then most organizations don't replace them with anything, and you end up with this vacuum in the middle where we're not going to do any planning, we're not going to do any forecasting, we're not going to really understand what it is we're doing. We're not going to explain to people what it is they need to do. Instead of giving them the plan, we're just going to say, \"Here's the product, get on with it,\" and then we expect magic to happen. That is an absolute recipe for disaster. \n\nDon't do that. What you need to do is fill that vacuum, and as a new product owner, this is the key part for you to understand, as well as for you to be able to engage and communicate to other people in the organization, up, down, sideways, whatever it is. Do you understand the vision of your product? Do you understand what it's trying to achieve? If you don't, that's step number one. Figure out what the value is in your product. What's the vision? What is it you're trying to achieve? Where are you going? What's your North Star? \n\nOnce you figured out that, and you can communicate it, you have to learn to speak in front of people and engage them in that story because you need to engage them in that story. Then you need to think about the value that you're going to deliver. Are the things that you're delivering in the product actually serving that vision? Are they working towards that vision? What is it that you're trying to achieve? \n\nThen you need to think about validation. How are you going to check that you're actually making progress towards those key ideas? That you're actually making progress towards your vision with the value that you're delivering? Is the value you're delivering even value at all? You might think it's value, but do your customers, do your stakeholders, do the people who are using it think that it's value? \n\nThis is a key major thing that we talk about in the Professional Scrum Product Owner class. We dive even deeper in the Advanced Product Owner class, but ultimately that vision, value, and validation is what's supposed to fill that product management vacuum that occurs when we make that transition from project management towards product management. \n\nThat doesn't mean that there are no project managers anymore. That is absolutely not the case. Project management is not being deleted from our working. It just becomes one of the tools. The focus is the product. We want to deliver the most successful, most valuable product that maximises the value creation in our organisation, rather than focusing on the project, which you can be on time, on budget, with the features that we asked for, and still be unsuccessful. \n\nFrom a project manager's perspective, from a project's perspective, we can still be successful and not have delivered any value. That's why that transition, that focus, and that's why when you take away those pillars that project management uses, you need to replace it with something else. The answer is vision, value, and validation. \n\nIf you find it hard to identify how you can enable vision, value, and validation within your organisation, my team at Naked Agility can help you or help you find somebody who can help you. Don't let these sorts of issues inhibit your ability to deliver value and maximise the value creation in your organisation. Use the links in the description to seek guidance as soon as you can."
  },
  {
    "Title": "Mastering Negotiation: Essential Skills Every Product Owner Needs from *Never Split the Difference*",
    "Description": "Learn key negotiation skills for product owners, including empathy, active listening, and strategic questioning, inspired by *Never Split the Difference* by Chris Voss.",
    "ResourceId": "BR9vIRsQfGI",
    "Url": "https://www.youtube.com/watch?v=BR9vIRsQfGI",
    "Date": "2023-12-13T11:00:08Z",
    "Captions": "So negotiation is really important. As a product owner apprentice, there's a great book; the title is *Never Split the Difference*. *Never Split the Difference* is about negotiation. It's written by the FBI's head hostage negotiator for the last 20 years, and he talks about it as whether you're negotiating bedtime for your kids or negotiating hostage releases. It's the same tools and techniques that you use.\n\nHe has a masterclass on masterclass.com, and what you need to consider as a product owner, and if you're helping out an apprentice product owner, is that they need to understand the ramifications of the decisions that they're making and how to engage in communication that gets them to an effective result."
  },
  {
    "Title": "The Art of Negotiation for Product Owners: Essential Skills to Master",
    "Description": "Learn key negotiation skills for Product Owners to manage stakeholders, balance priorities, and maximise product value through effective communication and decision-making.",
    "ResourceId": "DBa5_WhA68M",
    "Url": "https://www.youtube.com/watch?v=DBa5_WhA68M",
    "Date": "2023-12-13T07:00:07Z",
    "Captions": "One of the things to teach a product owner apprentice is negotiation. Negotiation is something that, as a product owner, really as any team member, but especially as a product owner, you're going to be using constantly. You're going to have to negotiate with the developers on your team, you're going to have to negotiate with your stakeholders, you're going to have to negotiate with leadership in your organization. If you, as a product owner, want to be able to influence the things in your organization that affect your ability to deliver value, even if you don't control them, you need to understand how to negotiate and engage with the people who can. \n\nSo, negotiation is really important. As a product owner apprentice, there's a great book—I'm trying to remember the author—but the title is \"Never Split the Difference.\" \"Never Split the Difference\" is about negotiation. It's written by the FBI's head hostage negotiator for the last 20 years, and he talks about it as whether you're negotiating bedtime for your kids or negotiating hostage release; it's the same tools and techniques that you use. He has a masterclass on masterclass.com. \n\nWhat you need to consider as a product owner, and if you're helping out an apprentice product owner, they need to understand the ramifications of the decisions that they're making and how to engage in communication that gets them to an effective result. Just because a stakeholder wants something, even if they're the CEO, doesn't mean it's a good idea to build it. It just doesn't mean it's a good idea to do it. But you might not be able to just say no to that person. \n\nWhat are the tools and techniques that you build as an individual to help you enable that other person to withdraw the request? That's the way I think about it. You don't want to say no; you want them to say no. If so, you might not start with saying no; you might start with asking them questions about what it is they expect to achieve from that thing. When they don't know the answers, that could be a good indication that it's not well thought through. \n\nPerhaps you sit with them and do a lean business canvas. What information do they need? For example, the CEO—if you're an apprentice product owner, you're not going to be able to say no to the CEO. What do they need to understand themselves so that they say no? That's what you need to enable as a product owner. You need to enable their understanding so that they realise that that's not the outcome that they're trying to achieve. \n\nIf you want them to say yes to something, if you're the product owner asking for more money, or asking for new features, or asking for a different name for your product, or more budget—whatever those things are—you don't want to start by just asking a question that has a yes or no response. \"Will you give me the money for this?\" No. You want to figure out how do you get to yes, and it's not always a straight line. That's what negotiation is all about. \n\nThese are fantastic skills that you need to learn, and we do cover some of them in the Professional Scrum Product Owner class. We don't dive that deeply, right? I mean, we've got a two-day class; you can't really dive too deeply into some of these topics. But what we do cover is what are the things that you need to understand and where can you find the additional information that you need to engage in longer-term learning about this topic or these stories. \n\nIf you're taking our immersive classes, right, they have a lot more assignments to go and do in your organisation, so you would be able to come back. We can talk about how you engage with people in your organisation and how you improve those techniques over time. That's the value of negotiation. \n\nAs a product owner apprentice, or as somebody who's getting started as a product owner, or even if you've been a product owner for a while and you're struggling to engage with people and get that influence that you need to maximise value, those are the techniques that you probably want to focus on: negotiation techniques. \n\nIf you find it hard to learn negotiation skills, my team at Naked Agility can help you find a product ownership course or coach who can help you, or we can find somebody who can. Don't let these sorts of issues undermine your ability to deliver value and get help with them as soon as you can. Use the links in the description to get in touch."
  },
  {
    "Title": "Empathy in Agile: Building Trust and Stronger Relationships for Success",
    "Description": "Explores how empathy, trust, and respect strengthen agile teams, improve collaboration, reduce bias, and foster continuous improvement in organisations and with customers.",
    "ResourceId": "2cSsuEzGkvU",
    "Url": "https://www.youtube.com/watch?v=2cSsuEzGkvU",
    "Date": "2023-12-12T11:00:04Z",
    "Captions": "Bringing modesty and respect for others into the conversation in agility is going to help you build trust. Right? Build those empathetic relationships both within the team, within the organisation and leadership, and outwardly towards customers. Don't make assumptions. Right? That's the key risk here is making assumptions. Um, and also cognitive bias, although that's more difficult to detect in yourself. Usually, you need somebody else to look in on it to point it out. Um, but then do you listen to those people? Do you realise that perhaps other people's perceptions are important to our decision making?"
  },
  {
    "Title": "The Power of Humility in Agile: A Core Virtue for Success",
    "Description": "Explores how humility strengthens Agile teams by fostering trust, collaboration, openness to feedback, and better decision-making through reduced bias and data-driven insights.",
    "ResourceId": "4scE4acfewk",
    "Url": "https://www.youtube.com/watch?v=4scE4acfewk",
    "Date": "2023-12-12T07:00:02Z",
    "Captions": "One of the seven virtues of Agile is humility. We need to realise, especially product owners and product managers, that the things we expect to be valuable, or the things that we think are valuable, are not always the things that are actually valuable. Just because it's our idea and our thinking doesn't mean that it's going to be successful. And that's true for the product owner thinking about ideas and the product. It's also true for developers, right? People doing the work thinking that their idea is the best. \n\nHow do you collaborate as a team? Do you collaborate with arrogance, thinking, \"I'm always right and you're always wrong,\" or do you collaborate with humility? \"Here's my idea, and maybe it's a good one; maybe it's not. Let's discuss.\" Bringing modesty and respect for others into the conversation in agility is going to help you build trust, right? Build those empathetic relationships both within the team, within the organisation, and leadership, and outwardly towards customers. \n\nDon't make assumptions, right? That's the key risk here: making assumptions. And also cognitive bias, although that's more difficult to detect in yourself. Usually, you need somebody else to look in on it to point it out. But then, do you listen to those people? Do you realise that perhaps other people's perceptions are important to our decision-making? I'm not saying blindly listen to what other people say, right? I'm saying we need to take that into consideration. \n\nSo, in order in the product world, in the product management world, to be humble, having humility, we need to be looking at how people see our ideas and see our product, how they see us. We need to be looking at the data, right? There are facts in this story, but you know we can interpret as lies, damn lies, and statistics, right? We can interpret facts differently, but having those facts to hand—how are people using the features in our product? How are they engaging? How do the people on our teams feel about the way that we engage in this product world? How are employees happy? What's their morale like? \n\nHaving that data to hand will help us make better decisions, and we need the humility to look at the results, to listen to what people say, and perhaps make a change to the way we do things because we're not always right. \n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "Title": "Empowering Users: Transforming Products from Burdens to Essential Tools",
    "Description": "Explores how empathy, clear value, and open feedback can turn products from burdens into empowering tools, fostering positive user relationships and lasting engagement.",
    "ResourceId": "tPkqqaIbCtY",
    "Url": "https://www.youtube.com/watch?v=tPkqqaIbCtY",
    "Date": "2023-12-11T11:00:47Z",
    "Captions": "That could be, you know, when dealing with bug reports or it could be just with engaging with them and talking to them about the problems that they're encountering and trying to solve within our product domain. Um, and we want to be benevolent. We want to be seen as we're providing them with something that helps enable them to do something else. If they see our product as a burden or they see our product as, um, I don't know what the cost version of burden is for me. Burden's broad and then there's a cost, like a cost centre. If they see your product as a cost centre, then, um, they're not going to think of your product with kindness. Um, and you're probably not thinking of them with kindness."
  },
  {
    "Title": "The Power of Kindness in Agile: A Core Virtue for Success",
    "Description": "Explores how kindness, empathy, and compassion in Agile foster trust, improve team collaboration, and enhance customer focus for long-term organisational success.",
    "ResourceId": "4nhKXAgutZw",
    "Url": "https://www.youtube.com/watch?v=4nhKXAgutZw",
    "Date": "2023-12-11T07:00:01Z",
    "Captions": "One of the seven virtues of agility is kindness. Kindness could be compassion, it could be benevolence, it could be empathy, and it could be directed in a number of different places within our organisation. The two key things that I'm thinking about are, one, the customer. We have this relentless customer focus that we're trying to deliver something that adds value in the market. For that, we need to focus on the customer. We need to be compassionate about the customers' issues and their difficulties and what it is they're trying to achieve. That could be, you know, when dealing with bug reports, or it could be just with engaging with them and talking to them about the problems that they're encountering and trying to solve within our product domain. \n\nWe want to be benevolent; we want to be seen as providing them with something that helps enable them to do something else. If they see our product as a burden or they see our product as, I don't know, what's the cost version of burden? For me, burden's broad, and then there's a cost, like a cost centre. If they see your product as a cost centre, then they're not going to think of your product with kindness, and you're probably not thinking of them with kindness. \n\nSo that relentless customer focus, building empathy with your customers. Why do people queue up outside of an Apple store to buy the latest product? It's absolutely not because they have the best products; it's because there's an empathetic connection between the customers and the company and the products that they're trying to create and the vision and the outcome that the company has. Building those stories is really important. \n\nYou don't do that by doing something negative towards your customers. You don't do that by screwing them over. You do that by building, again, trust—building trust with the customers with kindness. The other side that I was thinking of was the developers. Are we, the people doing the work, building compassion and benevolence and empathy with them? How do our employees see our organisation? What do they think about our organisation? \n\nI was listening to Richard Branson, and he did a talk where he was talking about that your employee happiness is a leading indicator of your customers' happiness. If your employees are unhappy but your customers are happy, it won't be long until your customers are also unhappy. If your employees are happy but your customers are unhappy, it won't be long until your customers are happy because people that are happy and engaged do the right thing. They do the thing that helps other people rather than, you know, kind of being dismissive and disgruntled. \n\nYou need people to think with kindness, and in order to do that, you need to demonstrate that compassion, that benevolence, that empathy within the context of your organisation to your employees, and they will then demonstrate that to the customers and build value in your brand, value in your organisation, and value in your market. \n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "Title": "Cultivating Patience: The Secret Ingredient for Thriving Agile Teams",
    "Description": "Explores how patience fosters trust, growth, and collaboration in agile teams, offering practical steps to build a supportive, blame-free, and productive team culture.",
    "ResourceId": "4p5xeJZXvcE",
    "Url": "https://www.youtube.com/watch?v=4p5xeJZXvcE",
    "Date": "2023-12-08T11:00:09Z",
    "Captions": "So businesses need to be patient with teams. Leaders need to be patient with people. Product owners need to be patient with the product, right? With the people that are building stuff in the product, are we getting to where we need to go? If we get frustrated and create a blame culture within our organization, we are not going to be successful because we're going to erode the trust that is the foundation to empiricism. One of the key things we need to build trust is patience."
  },
  {
    "Title": "The Importance of Patience and Trust in Building Agile Organizations",
    "Description": "Explores how patience and trust foster effective Agile teams, support learning from failure, prevent blame culture, and enable innovation through empiricism and collaboration.",
    "ResourceId": "9VHasQBlQc8",
    "Url": "https://www.youtube.com/watch?v=9VHasQBlQc8",
    "Date": "2023-12-08T07:00:06Z",
    "Captions": "In order to be successful, organisations need trust, and trust comes from the virtue of patience. Your organisation needs patience and tolerance with the people in the organisation who are doing the best they can within the context that they have and hopefully trying to create the best possible product. If they're trying to create the best possible product and something goes wrong, there's a failure. Things don't go like we expect, or we create something that doesn't look like we expect. Sometimes that's just a fact of life, right? Not everything's going to go the way you want it. Not all of the outcomes are going to be what you want.\n\nEverything that we create when we're building products is something that may or may not work out, may or may not be successful. We're taking a bet, right? We're saying we think this feature, this capability is going to be successful, or we think these practices are going to work for us as we're trying to do things in the organisation. We think this new tool is going to work, and we don't know any of those things are true until we actually get to the end of that process or at least some way through that process, and we have something usable that we can validate with our customers, with our users, within our world, to be able to create good outcomes.\n\nSo, businesses need to be patient with teams. Leaders need to be patient with people. Product owners need to be patient with the product, right? With the people that are building stuff in the product, are we getting to where we need to go? If we get frustrated and create a blame culture within our organisation, we are not going to be successful because we're going to erode the trust that is the foundation to empiricism. One of the key things we need to build trust is patience.\n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "Title": "Bridging the Gap: Understanding the True Meaning of \"Done\" in Agile Teams",
    "Description": "Explores how Agile teams can clarify and align on the true meaning of \"done\" to ensure quality, reduce rework, and meet leadership expectations through clear definitions.",
    "ResourceId": "2QojN_k3JZ4",
    "Url": "https://www.youtube.com/watch?v=2QojN_k3JZ4",
    "Date": "2023-12-07T11:00:05Z",
    "Captions": "And that is the diligence that your organisation expects. The reason organisations and businesses don't really talk about the definition of done from a leadership perspective is because it's just expected that we'll have a level of quality that they're able to use. That's just the default. But unfortunately, it's not the default in many teams."
  },
  {
    "Title": "The Overlooked Virtue of Agility: Diligence",
    "Description": "Explores why diligence—consistent attention to quality and standards—is vital in Agile teams, how it’s often overlooked, and practical steps to foster it for lasting success.",
    "ResourceId": "3S0zghhDPwc",
    "Url": "https://www.youtube.com/watch?v=3S0zghhDPwc",
    "Date": "2023-12-07T07:00:02Z",
    "Captions": "One of the key agile virtues that's often overlooked in organisations is diligence. Diligence is that attention to detail; it's doing the things that need to be done, having that level of focus that enables those things to happen. It's having a definition of done and following it, not just saying it's on the wiki, right? You actually follow it. Everybody on your team has the diligence to understand the definition of done, know the direction, and have the grit to follow it. You're not just paying lip service to this level of quality. Your definition of done is your compliance bar for what needs to happen in order for your product to be able to ship, and that is the diligence that your organisation expects.\n\nThe reason organisations and businesses don't really talk about the definition of done from a leadership perspective is because it's just expected that we'll have a level of quality that they're able to use. That's just the default. But unfortunately, it's not the default in many teams. So, have the diligence to create a level of quality, meet it, follow it, and perhaps expand it. Increase your level of diligence, increase your level of quality in your product, in the way you approach the work, in the way you approach working with others, and make your organisation successful.\n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at NE Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need naked agility."
  },
  {
    "Title": "Unlocking Success: Join Me for a Virtual Coffee to Tackle Your Agile and Technical Challenges",
    "Description": "Book a free virtual coffee chat to discuss and solve your agile or technical challenges, share knowledge, and find practical solutions for organisational success.",
    "ResourceId": "zro-li2QIMM",
    "Url": "https://www.youtube.com/watch?v=zro-li2QIMM",
    "Date": "2023-12-06T11:01:01Z",
    "Captions": "And I do that both in the technical space and in the agile space. If you want to have a chat, you can go to my website and book a coffee, and we can talk about agile. We can talk about the things that are happening in your organization, and if in half an hour I can fix your problem, that's great. We've had a coffee, we've had a chat, and you get something to try that might result in success. \n\nRight, I don't do that for direct remuneration. I do that because I like helping people. I like other people being successful. I want organizations to be successful in agile because that helps all of us, all the employees of the company, the entire thing, the entire ecosystem. And that's charity."
  },
  {
    "Title": "The Power of Charity in Agile: How Helping Others Elevates Teams and Organizations",
    "Description": "Explores how practising charity—helping others without expecting rewards—strengthens Agile teams, boosts collaboration, and drives organisational success and motivation.",
    "ResourceId": "BCWiKTm8hjg",
    "Url": "https://www.youtube.com/watch?v=BCWiKTm8hjg",
    "Date": "2023-12-06T07:00:08Z",
    "Captions": "One of the key agile virtues is charity, and that manifests in our world as things like being willing to help each other for no specific gain. Right? I want to help my colleagues on the team because it helps us all, not because I get something out of it. I want to be looking at making sure that my team is successful, that my product is successful, that my company is successful, and I'm not necessarily doing it because I get my bonus. I'm doing it because it helps the people around me, that we're all better because of it, and that we're able to create the best possible products for our customers. That leads back to Dan Pink's autonomy, mastery, and purpose, right? I want to feel like the work that I do matters, and charity is part of that.\n\nFor example, I'm a Microsoft MVP. I don't get that MVP for paid work; I get that MVP for spending time in the community providing help and support to others for free. I do that both in the technical space and in the agile space. If you want to have a chat, you can go to my website and book a coffee, and we can talk about agile. We can talk about the things that are happening in your organisation, and if in half an hour I can fix your problem, that's great! We've had a coffee, we've had a chat, and you get something to try that might result in success. Right? I don't do that for direct remuneration; I do that because I like helping people. I like other people being successful. I want organisations to be successful in agile because that helps all of us, all the employees of the company, the entire ecosystem, and that's charity.\n\nIf you are having difficulty getting the most out of the Seven Virtues of Agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "Title": "Mastering Agile: The Power of \"Just Enough and No More\" for Optimal Efficiency",
    "Description": "Explores how applying the \"just enough and no more\" principle in agile practices boosts efficiency, reduces waste, and helps teams focus on delivering real value.",
    "ResourceId": "b-2TDkEew2k",
    "Url": "https://www.youtube.com/watch?v=b-2TDkEew2k",
    "Date": "2023-12-05T11:00:27Z",
    "Captions": "I have this picture in my head of Ken saying it to me many years ago: \"Just enough and no more.\" I believe, in fact, he actually—I think he said that no matter what quantity question I ask him, the answer is going to be \"just enough and no more.\" It doesn't matter what the quantity question is, right? \n\nSo how much backlog should we have? Just enough and no more. How many developers should we have? Just enough and no more. How much time should we spend on refinement? Just enough and no more. Same for planning upfront. \n\nThat mantra of being focused on what it is we're doing and minimising our effort. One of the principles in the Agile Manifesto is maximising the amount of work not done."
  },
  {
    "Title": "Temperance in Agile: Why Less is More",
    "Description": "Explores how practising moderation in Agile—by keeping backlogs lean, limiting work in progress, and focusing on value—boosts team efficiency and reduces waste.",
    "ResourceId": "SMgKAk-qPMM",
    "Url": "https://www.youtube.com/watch?v=SMgKAk-qPMM",
    "Date": "2023-12-05T07:00:10Z",
    "Captions": "Too much of anything can be a bad thing, and that leads us to one of our seven agile virtues, which is temperance. You need to take everything in measure, right? Make sure that you don't do too much of something that could manifest in our world as having too much backlog. What does it mean to have a lean inventory in your backlog? What does it mean to not put things in there, to think a little bit more carefully about whether something should be in your backlog or not? What does it mean to have just enough and no more? That's a common phrase that we use a lot, especially in the Scrum space. I remember I have this picture in my head of Ken saying it to me many years ago: just enough and no more. I believe, in fact, he actually said that no matter what quantity question I ask him, the answer is going to be just enough and no more. It doesn't matter what the quantity question is, right? \n\nSo how much backlog should we have? Just enough and no more. How many developers should we have? Just enough and no more. How much time should we spend on refinement? Just enough and no more. Same for planning up front. That mantra of being focused on what it is we're doing and minimising our effort. One of the principles in the Agile Manifesto is maximising the amount of work not done, right? And that's that idea of temperance: maximise the amount of work not done, minimise your effort for the maximum gain, and always look to take the easy path where you can, but be willing to take the hard path when you can't. \n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "Title": "Engaging Your Team: The Secret to Successful Organisational Change",
    "Description": "Learn how involving, empowering, and communicating with your team drives successful organisational change by fostering shared goals, trust, and a culture of engagement.",
    "ResourceId": "OMlLiLkCmMY",
    "Url": "https://www.youtube.com/watch?v=OMlLiLkCmMY",
    "Date": "2023-12-04T11:00:23Z",
    "Captions": "You need to think about how you're going to change your organisation. You need to involve the people in your organisation in that story; otherwise, they're not going to be interested in what it is you're trying to achieve. Nobody really cares about your goals; they care about their own goals. The way you get them to care about your goals is you make their goals your goals."
  },
  {
    "Title": "Embracing Chastity in Agile: Why Taking Your Time is Key to True Transformation",
    "Description": "Explores the importance of patience in agile adoption, highlighting inclusive decision-making, stakeholder engagement, and thoughtful organisational change for lasting impact.",
    "ResourceId": "vftc6m70a0w",
    "Url": "https://www.youtube.com/watch?v=vftc6m70a0w",
    "Date": "2023-12-04T08:39:06Z",
    "Captions": "So one of the seven virtues of agility is chastity. In our context, in the agile context, chastity is really about taking your time. Right? Don't jump into thinking that you've been successful doing agile and we're going to take all the things you want to think about, the impact and the effect within your organisation of the changes that you make. \n\nSo there are loads of implications of agile that go far beyond the actual mechanisms for your organisation. So things, for example, like the democratization of the workplace, involving more people in the decision-making is something that you need to take time over. You need to think about how you're going to change your organisation. You need to involve the people in your organisation in that story; otherwise, they're not going to be interested in what it is you're trying to achieve. \n\nNobody really cares about your goals; they care about their own goals. And the way you get them to care about your goals is you make their goals your goals. Right? They want to be part of that story. So taking your time and looking at... there are tools out there, like open space agile, that allows you to involve the whole of your organisation in your decision-making process as you move towards a greater degree of agility. \n\nAnd that time and thoughtfulness and inclusivity is going to be the thing that enables you to get the most out of your agile strategies. If you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need naked agility."
  },
  {
    "Title": "The Importance of Product Backlog Management in Today's Agile Landscape",
    "Description": "Explains why effective product backlog management is vital in Agile, highlights common pitfalls, and offers practical tips to improve team focus, transparency, and value delivery.",
    "ResourceId": "TYpgtgaOXv4",
    "Url": "https://www.youtube.com/watch?v=TYpgtgaOXv4",
    "Date": "2023-12-01T07:00:11Z",
    "Captions": "Product backlog management is getting lots of attention right now because it is one of the most deficient things in organisations that I and my colleagues encounter. Most organisations do not have adequate backlogs; they do not have backlogs that represent transparency in the work that needs to be done, and they don't have enough information for people who, even within the context of that organisation, context of that product, to be able to explicitly understand what that thing is and what you're trying to do with it. That is hurting the ability of teams to deliver value. It's hurting the ability of organisations to understand what it is that, what the heck, the teams are doing at all anyway. \n\nThat's why product backlog management is the biggest critical focus for organisations right now. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Mastering Product Backlog Management: Key Strategies for Agile Success",
    "Description": "Learn practical strategies for effective product backlog management in Agile, including prioritisation, refinement, stakeholder engagement, and tools to maximise team value.",
    "ResourceId": "R8Ris5quXb8",
    "Url": "https://www.youtube.com/watch?v=R8Ris5quXb8",
    "Date": "2023-11-30T11:00:31Z",
    "Captions": "It's an awesome, little class that helps us get to grips with some of the nuances of product backlog management. How do we make sure that we minimize the amount of things that are in that product backlog in order to maximize the value that we get from it?"
  },
  {
    "Title": "Mastering Product Backlog Management: Insights from the New Scrum.org Course",
    "Description": "Learn practical skills for effective product backlog management, including item creation, prioritisation, breakdown, and alignment with business goals to boost Agile team success.",
    "ResourceId": "UOzrABhafx0",
    "Url": "https://www.youtube.com/watch?v=UOzrABhafx0",
    "Date": "2023-11-30T07:00:11Z",
    "Captions": "So the new product backlog management course from Scrum.org has been a long time coming. It's going to be awesome. It's one of their new skills-based style of classes, which are shorter classes. They're eight hours, rather than the usual 16 hours, and they focus laser focus on one particular skill, and in this case, it's product backlog management. \n\nIn product backlog management, we have a number of things that we cover in the class. We're going to cover where these backlog items come from. We're going to cover how to manage those backlog items, how we write those backlog items, how we break them down into smaller units of work that are maybe easier for the team to consume, easier for people to understand. \n\nIn that, how we maximize the transparency of that product backlog by enabling the understanding of everybody that needs to understand it to be able to understand it, right? And then how do we work through it? How do we order that backlog? How do we make it the best backlog it can possibly be within the context of what it is we're doing and what we know and what we can do within our organization? \n\nSo it's an awesome little class that helps us get to grips with some of the nuances of product backlog management. How do we make sure that we minimize the amount of things that are in that product backlog in order to maximize the value that we get from it? \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Transform Your Leadership: The Power of Evidence-Based Management in Agile",
    "Description": "Discover how evidence-based management empowers Agile leaders to make data-driven decisions, foster continuous improvement, and boost team performance and collaboration.",
    "ResourceId": "2-AyrLPg-8Y",
    "Url": "https://www.youtube.com/watch?v=2-AyrLPg-8Y",
    "Date": "2023-11-29T11:00:03Z",
    "Captions": "Evidence-based management class to help leaders gain additional skills on top of the awesome ones they already have to help them be as effective within the context of AG as possible."
  },
  {
    "Title": "Agile Leadership: Empowering Managers with the Right Skills",
    "Description": "Explores how agile leadership and evidence-based management training help managers develop servant leadership skills, delegate effectively, and make data-driven decisions.",
    "ResourceId": "W3cyrYFXDfg",
    "Url": "https://www.youtube.com/watch?v=W3cyrYFXDfg",
    "Date": "2023-11-29T07:00:23Z",
    "Captions": "[Music] Most managers today are just expected to be leaders as well. They're given no training, no direction; they're just magically supposed to come up with these skills themselves, and that's just not always the case. There are exceptional people that don't need any additional input of knowledge; they're able to go off and find out all of this stuff themselves and put it into effect. \n\nBut most of us benefit from a little bit of a helping hand. So we have the Agile Leadership class, which focuses on a manager transitioning into that servant leadership idea, where they're providing services to the team. They're enabling a team to be effective at the organisation level. So that's somebody who is learning how to delegate, learning how to hire the right people, learning how to connect the people doing the work with the outcomes that we're trying to achieve. All of those things are part of the Professional Agile Leadership class. \n\nBut in addition to that, as a leader, it's important to understand how the changes that we're making in the organisation benefit the overall organisation, increase the effectiveness of the overall organisation. For that, we have the Evidence-Based Management class as well, where we're looking a little bit more deeply into how we measure people, what the impact of those measurements are, and how can we maximise the effectiveness. \n\nAnd how do we measure that? Right, that's effectively what it is: how do we measure that? And so it's very important that we understand all of those things as a leader in an organisation, so that we can make the right choices and know for sure that we're making progress in the right direction. Because we've designed a bunch of measures that are unique to our product or our organisation to help us see whether we're making progress towards the overall outcomes that we're trying to achieve. \n\nMost managers and leaders don't measure those things. They don't have a holistic understanding of where the organisation currently is, where the organisation's currently going, and how we're going to measure that progress towards it. And really, those two things are part of the key focus of both the Professional Agile Leadership class and the Evidence-Based Management class, to help leaders gain additional skills on top of the awesome ones they already have, to help them be as effective within the context of Agile as possible. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Mastering Scrum: Essential Insights for New Teams from a Scrum Master's Journey",
    "Description": "Guidance for new Scrum teams on building strong foundations, embracing empiricism, Scrum values, continuous learning, and the Scrum Master's role in fostering team growth.",
    "ResourceId": "nY4tmtGKO6I",
    "Url": "https://www.youtube.com/watch?v=nY4tmtGKO6I",
    "Date": "2023-11-28T11:00:49Z",
    "Captions": "There's lots of things out with Scrum that a Scrum Master needs to understand in order to be as effective as possible. But if you have a brand new Scrum team that have never done Scrum before, they're just starting out. The first thing that a Scrum Master is accountable for is the knowledge that the team have, their understanding of Scrum, their understanding of empiricism, the Scrum values. Teaching those things is really important for a Scrum Master."
  },
  {
    "Title": "Understanding the True Role of a Scrum Master",
    "Description": "Explains the true responsibilities of a Scrum Master, how to maximise team effectiveness, teach Scrum principles, and address organisational challenges for better outcomes.",
    "ResourceId": "U0h7N5xpAfY",
    "Url": "https://www.youtube.com/watch?v=U0h7N5xpAfY",
    "Date": "2023-11-28T07:00:15Z",
    "Captions": "Most Scrum Masters don't realise what's entailed in being a Scrum Master. Usually, that's because they've just been handed the role by their organisation, and perhaps the role of Scrum Master within their organisation is very different from what I'm talking about with the accountability of the Scrum Master within the context of Scrum. Because, you know, 25 years ago when Scrum was created, Scrum Master was a brand new term that didn't have any baggage, whereas today it has just about as much baggage, if not more, than any other term out there. \n\nSo, as a Scrum Master, you do need to disambiguate the role that your organisation has, perhaps the job title right, and all of the different accountabilities that are included in that that might be nothing to do with Scrum as well. That's fine with the accountability for the Scrum Master within the context of Scrum. That accountability is for maximising the effectiveness of the team. That's really the whole thing in a nutshell. \n\nIn order to do that, there are loads of tools that you need in your toolbox. There are loads of practices and processes that can make sense in that space, complimentary practices to Scrum. So, there's lots of things outside of Scrum that a Scrum Master needs to understand in order to be as effective as possible. But if you have a brand new Scrum team that have never done Scrum before, they're just starting out. The first thing that a Scrum Master is accountable for is the knowledge that the team have, their understanding of Scrum, their understanding of empiricism, the Scrum values. Teaching those things is really important for a Scrum Master. \n\nAnd then, once your team gets beyond that, engaging with not just the team but the rest of the organisation as well. Remember, the Scrum Master not only has accountabilities for the Scrum team, but they have accountabilities to the Product Owner and accountabilities to the organisation as well. So, enabling a team to be as effective as it can has much wider implications across the organisation. \n\nBecause usually, once you've dealt with the knowledge, the knowledge that the team have about empiricism, about working product, and the value contained within that, it's organisational impediments that get in the way. It's things your organisation is doing which impedes the ability for the team to maximise its effectiveness. Getting focus on them, building relationships within the organisation, understanding the business processes, why they're there, and inevitably how to change them is a critical role for a critical area of understanding for the Scrum Master. \n\nSo, if you want to be a Scrum Master, you don't have to come to Scrum training, but the Professional Scrum Master, and more importantly, the Advanced Scrum Master Class can really help you broaden your understanding of what is the context of a Scrum Master and become the most effective Scrum Master that you can be. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "Mastering Prioritisation: How Product Owners Can Drive Value and Accountability",
    "Description": "Explains how Product Owners can use effective prioritisation to maximise value, manage budgets, and build accountability through clear communication and stakeholder engagement.",
    "ResourceId": "xLUsgKWzkUM",
    "Url": "https://www.youtube.com/watch?v=xLUsgKWzkUM",
    "Date": "2023-11-27T11:00:56Z",
    "Captions": "Product owner is accountable for spending the money right. A product owner is accountable for that. Even if, as a product owner, you only have control over ordering that product backlog, right? Maybe you can't even delete stuff from the product backlog. Maybe you can't add new stuff that you come up with yourself, but you're just ordering that product backlog. Then you're controlling the budget. You're deciding when we deliver each piece of functionality. Um, and that’s really powerful."
  },
  {
    "Title": "The Real Scope of a Product Owner: Beyond the Backlog",
    "Description": "Explores the full responsibilities of a Product Owner in Agile, highlighting strategic decision-making, value maximisation, and the importance of market insight and relationships.",
    "ResourceId": "2_CowcUpzAA",
    "Url": "https://www.youtube.com/watch?v=2_CowcUpzAA",
    "Date": "2023-11-27T06:46:47Z",
    "Captions": "[Music] Most product owners or people that have been given the role or accountability of product owner don't really comprehend the breadth of the product owner role, and it's generally sold to them or told to them as being focused on creating a product backlog and making the team work through it. That's a very small part of a product owner. A product owner is really an agile product manager, right? They're a product manager that has a bunch of additional skills and understandings that are encapsulated a little bit in the accountability of the product owner in Scrum. \n\nIt's really important that product owners understand the breadth of the possibilities of the product owner role, what it is they're supposed to be looking at. I find that quite often most people who come to a product owner class realise that they don't want to be product owners because it's a lot bigger role with more actual accountability than they really realised it was in the first place. \n\nA product owner is accountable for spending the money, right? A product owner is accountable for that. Even if as a product owner you only have control over ordering that product backlog, maybe you can't even delete stuff from the product backlog, maybe you can't add new stuff that you come up with yourself, but you're just ordering that product backlog, then you're controlling the budget. You're deciding when we deliver each piece of functionality, and that's really powerful. \n\nIf you can then gain the ability to remove and add things to the product backlog, you're then going to be hopefully more effectively spending that budget. For a product owner, that means a lot of things. What do you think a product owner needs to do in order to maximise the value of the work done? We're going to put stuff in the product backlog, the team's going to work through it, maximising the value of that work. \n\nWhat do we need to look at? What information do we need? What controls and levers do we need to be able to have those conversations? It's not just about focusing on the backlog and the team; it's not just about being a funnel for the requests from the organisation. It's about making decisions, placing bets, looking at probabilities of what's the most effective thing to work on, what's going to produce the most value now for the organisation or the most long-term value depending on your timelines and topics that you're thinking of delivering in the product. \n\nAs a product owner, you really need to be looking out into the future. You need to be looking at what's happening in the business, what's the trend in the market, how do I get to where I need to be in order that instead of me looking at my competitors and saying, \"Ooh, that's cool functionality, we should add that,\" they're looking at my features and they want to add and follow my trend that I'm setting for features and capabilities in the market. \n\nEffectively shifting your product from following the market to leading the market, and in order to do that, you need a clear picture of a lot of information. You need access to levers within the organisation to be able to change what you're working on based on those needs and that understanding. What's the next bet? What's the next hypothesis that you have for something that you think is going to provide value, and can you invest in it? \n\nThat takes a lot of building relationships, understanding the business and the market that lots of people don't understand as part of the product owner role. So if you want to be a product owner, just coming to a training class is not going to help you be the best product owner. \n\nOkay, but a training class is going to help broaden the scope of your understanding of what that role is and what are the different tools and techniques that you can at least start with to start investing in some of those areas that perhaps you're missing. The value of coming to a product owner class, if you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "Title": "How to Choose the Right Agile Coach for Your Business Success",
    "Description": "Learn how to select an Agile coach who is adaptable, experienced across frameworks, and focused on your business needs, ensuring tailored solutions and continuous improvement.",
    "ResourceId": "vXCIf3eBJfs",
    "Url": "https://www.youtube.com/watch?v=vXCIf3eBJfs",
    "Date": "2023-11-24T11:00:52Z",
    "Captions": "When you're considering an agile coach, a really important thing to look at is whether they're agnostic. Do they, are they a one trick pony? Right? Do they only do Scrum? Do they only do Kanban? Do they only do whatever it is that they only do? Or are they able to have conversations around what is the best practice, tool, or technology that will emerge that's right for your business, regardless of what flavour it is?"
  },
  {
    "Title": "How Immersive Learning Transforms Aspiring Agile Leaders",
    "Description": "Immersive learning helps aspiring agile leaders overcome cultural barriers by providing time, practical experiments, and peer feedback to drive real organisational change.",
    "ResourceId": "1VzbtRspOsM",
    "Url": "https://www.youtube.com/watch?v=1VzbtRspOsM",
    "Date": "2023-11-24T07:00:00Z",
    "Captions": "I think it's very difficult for aspiring agile leaders to get the time and the space needed to have a lot of the conversations that really need to be had in the leadership space in their organisation. The P.E. is a fantastic class that enables that space to have those conversations but doesn't necessarily always result in space to actually do the things differently that you want to do or practice the things that you want to practice. \n\nThat's where taking the traditional P.A.L.I. class and exploding it into a six-week immersive class enables more time for people's thought processes, right? To adopt some of these new ideas, for people to try things in between the class. Specifically, the assignments would be something that they're definitely going to try. They might try other things that we talked about in the course, but the assignment is a specific thing: here, go try this, go figure out how this happens in your organisation. \n\nThen bring that back around into a group of their peers, whether it's a public class and there's leaders from lots of different aspiring leaders from lots of different organisations, or it's a private class where you've got the leadership for your organisation in that private class. That coming back around and debriefing those assignments, and also being able to, if you did try other things, being able to ask those questions at that point. \n\nThis is, I tried this, we looked at this idea and it didn't work. We tried to do this level of delegation. How do we do this differently so that we can get more buy-in from the people that are doing it? That collaborative experience is really the why the P.A.L. immersive class is such a great fit for people who are in management or leadership positions inside of their organisation and they want to adopt those agile ideas that they see organisations out there, people out there being able to do and getting so much value from. \n\nHow do we get the same value in our organisation from those conversations? How do we change the way we do things to enable the people in our organisations to take more accountability, to take more ownership of the things that they're working on, to be more invested and connected with the work that they're doing? \n\nThe P.A.L.E. class is an experience that allows you to understand how all of those things are connected together and perhaps reflect on the way your organisation currently does things and how that might inhibit the ability for teams to maximise the value that they deliver to stakeholders, your customers, your stakeholders, your leadership. \n\nIf you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "Title": "Hiring the Right Agile Coach: What You Need to Know",
    "Description": "Learn how to choose an Agile coach by assessing experience, track record, cultural fit, and adaptability to ensure effective, tailored Agile transformation for your organisation.",
    "ResourceId": "1cZABFi7gdc",
    "Url": "https://www.youtube.com/watch?v=1cZABFi7gdc",
    "Date": "2023-11-23T11:00:01Z",
    "Captions": "If you're hiring an agile coach, make sure you take a look at their track record. What have they done in the past? What organisations have they worked with? Is it within the same context that you're in? Is it the same scale that you're in? Do they have references? Is there somebody you can go speak to that they've worked with in the past that can tell you about how they do the things that they do? \n\nSo, in order to maximise your ability to move towards a greater degree of agility, you need a coach with experience."
  },
  {
    "Title": "The Future of Scrum Training: Immersive Learning for Lasting Change",
    "Description": "Explores how immersive, collaborative learning methods in Scrum training enable ongoing support, real-world application, and lasting organisational change over traditional courses.",
    "ResourceId": "Frqfd0EPj_4",
    "Url": "https://www.youtube.com/watch?v=Frqfd0EPj_4",
    "Date": "2023-11-23T08:30:06Z",
    "Captions": "So I believe that immersive learning is the future of, I think, almost all of this type of learning. Whether it's Scrum or Kanban or anything where people are involved, you've got a high degree of complexity. This is different from tools training, right? Different from tools training. But anytime you're talking about processes and practices that people have to organise around, I think the immersive learning approach is much more the future of the way that learning should be happening.\n\nIt's very difficult for people to spend two days or four half days in a class and then be able to go back into their organisation and actually change something. It's very difficult because they'll go to try and change something in their organisation and they'll run into all of these roadblocks, all of these things that get in the way, and there's nobody there to help and support them because, you know, we did the training a couple of weeks ago and now we're doing this, and we run into those roadblocks.\n\nSo the immersive format allows people to keep coming back around and having those questions, having them answered, especially the longer immersive stories. So they last six to ten weeks, and collaborating around with that group of people, bringing those learnings back to the organisation. This is a total game changer for the learning experience that people get when they come to these types of classes.\n\nSo definitely, the future of Scrum training is immersive. If you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "Title": "Hiring an Agile Coach: What You Need to Know",
    "Description": "Learn what to look for when hiring an Agile coach, including key qualities like teaching, mentoring, and inspiring teams to adopt Agile practices and drive transformation.",
    "ResourceId": "sxXzOFn7iZI",
    "Url": "https://www.youtube.com/watch?v=sxXzOFn7iZI",
    "Date": "2023-11-22T11:00:46Z",
    "Captions": "If you're hiring an agile coach, you need to consider that they're not just going to be coaching people. They're an agile coach, not just a professional coach. They're going to have to be able to mentor and teach people how to do particular processes, practices, or perhaps tools in the activities that you're doing. \n\nSo, in order to become better at agile, you need a coach who is able to teach, engage, and inspire your teams and people to greatness."
  },
  {
    "Title": "The Power of Immersive Learning: Elevating Scrum Mastery in Your Organization",
    "Description": "Explains how immersive learning helps Scrum Masters apply knowledge through real-world practice, feedback, and collaboration, leading to lasting skills and team improvement.",
    "ResourceId": "jXk1_Iiam_M",
    "Url": "https://www.youtube.com/watch?v=jXk1_Iiam_M",
    "Date": "2023-11-22T07:00:18Z",
    "Captions": "If you're an organization that buys lots of training, especially if you have a large cadre of people in your organization that are currently trying to do the Scrum Master role, then the most valuable purchase you could make is immersive learning. The reason that's much more valuable for your organization is that it gives the people in your organization the ability to close that loop on their learning. \n\nSo normally when you're training, you learn something, and then you learn something else, and then you learn something else, and by the time you get to the end of that process, you've probably forgotten 80% of all of the things that came before. Maybe when you come out of that training class, there are a few actionable things—those hints and tips and topics and stories and how-tos. There's only maybe a few of those you can actually try. You've increased the level of baseline knowledge in your organization; everybody now understands perhaps what Scrum is and what a Scrum Master is. But have they actually internalised any of those learnings, and how much of those learnings are they actually able to put into practice?\n\nThe key additional value in immersive learning is in allowing the people in your organization to actually put the things into practice. We enable that in the form of assignments. Each person in the class is given an assignment; it's probably the same assignment for everybody. But if you've got a bunch of Scrum Masters you're bringing to the class, they're going to go off into their teams, either with their teams or with their leadership, in that area, in that context, and they're going to try one of these exercises. \n\nAn assignment might be, oh, I'm trying to think of what an example assignment might be. My favourite topic is definition of done quality. Are we creating enough quality in a product? One of the assignments might be to go talk to the team and ask them about their definition of done, and if they don't have a definition of done, help them create one and put it into action. That could be an assignment for a Scrum Master to do. If the only thing that came out of the entire class was that all of your Scrum Masters and all of your teams had a definition of done and it was actually actualised, then that would be a total boon for your entire organization in enabling that level of quality. \n\nBut that's just one of the exercises that we might do, one of the assignments that the teams might get. Not only do they do the assignment, but they come back at the beginning of the next session and explain what they did, how it went, and what problems they ran into, closing that learning loop again. They figure out, well, you didn't get the outcome that you wanted; here are some other things you can try. That can come from both the facilitator of the debrief and from the other people in your organization who've actually done that thing inside your organization. \n\nIf you bring 12 Scrum Masters to a training class and those 12 Scrum Masters all go and try to do this definition of done, some of them will be successful and some of them won't. Some of them will be very successful, and some will only be a little bit successful. So why were certain Scrum Masters successful, and why were others not? How do we bring that knowledge together so that they can assess for themselves what other ways to do things? \n\nBecause quite often, I've done a lot of private training classes, and you find that even inside an organization, one person will say, \"No, there's no way you can do this thing; it's not possible within our organization.\" Then there's somebody over in one of the side videos who will say, \"We do it; our team does that, and we do it very well within the bounds of the organizational constraints.\" Then the other person is like, \"Holy crap, how do you do that? Who do you speak to? How can we get some of that as well?\" \n\nEven that sharing of knowledge—\"We've tried something; it works here; it doesn't work here\"—and closing those feedback loops, bringing those conversations together, are the whole reason that the immersive learning classes are going to be much more beneficial to organizations than the traditional approach. \n\nIf you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "Title": "Hiring an Agile Coach: What to Look For in Both Technical and Leadership Engagement",
    "Description": "Learn what qualities to seek in an Agile coach, including technical expertise, business acumen, and the ability to engage both technical teams and leadership for effective transformation.",
    "ResourceId": "9z9BgSi2zeA",
    "Url": "https://www.youtube.com/watch?v=9z9BgSi2zeA",
    "Date": "2023-11-21T11:00:08Z",
    "Captions": "If you're hiring an agile coach, not only do they need to be able to engage and gain credibility with the technical folks, they also need to be able to engage and gain credibility with management and leadership in your organisation. This means that they need deep technical understanding of business, particularly within your context. \n\nSo, if you're a financial organisation, you're going to want an agile coach who understands the financial ramifications in business of your organisation. If you're a tech company, then they need to understand the business of tech so that they can more effectively help leadership and management be more agile."
  },
  {
    "Title": "Why Every Scrum Master Needs an Immersive Training Experience",
    "Description": "Immersive training helps experienced Scrum Masters deepen practical skills, boost team effectiveness, and develop leadership through hands-on, real-world learning.",
    "ResourceId": "_WplvWtaxtQ",
    "Url": "https://www.youtube.com/watch?v=_WplvWtaxtQ",
    "Date": "2023-11-21T07:00:21Z",
    "Captions": "So what we don't need is any more Scrum Masters that don't have the experience and understanding to be able to help the teams that they work with. We don't need any more Scrum Masters that actively inhibit the maximisation of value and the effectiveness of teams because of their lack of knowledge. \n\nI think the Scrum Master immersive class is a perfect opportunity for people who are aspiring to be Scrum Masters to truly try and understand what it takes to be a Scrum Master. Now, don't get me wrong, if you're thinking of being a Scrum Master and you're not actually a Scrum Master yet, the immersive class is probably not going to work out very well for you. \n\nMainly because you, as an aspiring Scrum Master, are going to have difficulty in enacting and working through the assignments which are specifically designed for people who are already working as a Scrum Master, regardless of their knowledge level. Already working as a Scrum Master and focus on them becoming more effective at what they do, at helping their teams be more effective. \n\nSo really, if you're looking to be a Scrum Master, then probably the immersive class is not for you. But if you are already a Scrum Master, regardless of your skill level, then the immersive class is an absolute perfect fit to enable you to really deepen the knowledge that you need to perhaps become a great Scrum Master. \n\nIf you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "Title": "The Key to Hiring the Right Agile Coach: Building Credibility with Teams and Leadership",
    "Description": "Learn how to choose an Agile coach who builds trust with teams and leadership, combining technical expertise, communication skills, and empathy for effective transformation.",
    "ResourceId": "S1hBTkbZVFM",
    "Url": "https://www.youtube.com/watch?v=S1hBTkbZVFM",
    "Date": "2023-11-20T11:00:30Z",
    "Captions": "If you're hiring an agile coach, one of the most important things to consider is their ability to engage and gain credibility with the teams, the people that they're coaching. Agile coaches generally work with both teams and leadership, but if they're going to be working with teams, they need to understand what it is that those teams do. They need deep technical knowledge in the processes, practices, and tools that those teams are using so that they can more effectively help them get better at agile."
  },
  {
    "Title": "Unlocking the Power of Double-Loop Learning: Transform Your Scrum Master Journey with Immersive Training",
    "Description": "Explore how immersive, double-loop learning in Professional Scrum Master training helps Scrum Masters apply theory, reflect, and collaborate to solve real-world challenges.",
    "ResourceId": "xo4jMxupIM0",
    "Url": "https://www.youtube.com/watch?v=xo4jMxupIM0",
    "Date": "2023-11-20T07:51:59Z",
    "Captions": "Professional Scrum Master immersive learning experience is unique because it enables that double loop learning that you get from being able to try things in your organisation and then take that information, collaborate with others like what happened during that collaboration, bring it all together with a group of people who are all trying to do the same thing and then figure out what you can do differently. Right? How do I make this thing that I was doing even just a little bit better? \n\nAnd I think there's a really big advantage in the PSM because as a public class, because you've got a bunch of people in the class that are from other organisations. While you might come along and you might bring a friend from your organisation, because that's always a good way to get help when you're back in your organisation as well, right? Having somebody else who's been through the same experience. But also you get the different perspectives of the people in the room, and that is absolutely invaluable to enabling you as a Scrum Master to understand what is realistic and what isn't. \n\nRight? A lot of folks come to a PSM class, especially thinking, as we're talking about the stuff in the class, thinking that that just won't work here. Right? That won't work in my company. It won't work in my company because we do this other thing, not realising, and hopefully they do throughout the class, but not realising that Scrum is intended to be a mirror that shows you what's wrong with your organisation. Like, why can't you do that? \n\nOh, we want to do continuous feedback loops, right? We want to, at the end of every Sprint, we want to get some real users in front of the software and we want to find out what they think about it, right? We want to validate our assumptions. Well, why can't we do that? And I think the immersive learning is especially focused on that because it's over a much longer period of time, because you have those sections of learning and then that assignment to go and try something in your organisation. \n\nAnd those assignments are kind of crafted around those most difficult ideas, most difficult things to do in applications in your company. Most difficult, contentious, gnarly problems that Scrum Masters encounter in their organisations so that we can collaborate and get help from each other. Right? I, as the facilitator, might have seen a bunch of experiences in organisations where those things have worked out perfectly, or I might have seen other ones where things you want to try just fell flat. Right? \n\nThere's no right answer to any of these questions, so how do we collaborate around it and how do we maximise that collaboration? And I think the PSM immersive class maximises the learning and collaboration that happens. If you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "Title": "The Key to Being an Effective Agile Coach: Understanding the Team’s Context",
    "Description": "Effective Agile coaching relies on understanding your team's unique context and domain, enabling tailored guidance, empathy, and practical solutions for real-world challenges.",
    "ResourceId": "s_kWkDCbp9Y",
    "Url": "https://www.youtube.com/watch?v=s_kWkDCbp9Y",
    "Date": "2023-11-17T11:00:55Z",
    "Captions": "To be an effective Agile coach, you must have knowledge of the type of work, the context within which the team that you're working with works. Now, most people, most Agile coaches, get that knowledge by having spent many years doing that work. Right? You might have been a software engineer for many years. You might have been a tester. You might have been a UX designer. And then, as you understand the value of Agile, you bring in some of those tools and techniques and move up into that space of Agile coach. But you need to have an understanding of what the people that are doing the work are doing, why they're doing it, how they're doing it, and what is the context within which they work.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Mastering Azure DevOps Migration: A Step-by-Step Guide for Seamless Project Transfers",
    "Description": "Learn how to migrate Azure DevOps projects step by step, including tool setup, configuration, handling common issues, and ensuring a smooth transfer of work items.",
    "ResourceId": "Qt1Ywu_KLrc",
    "Url": "https://www.youtube.com/watch?v=Qt1Ywu_KLrc",
    "Date": "2023-11-16T12:47:09Z",
    "Captions": "We are going to take a look at how to do a migration with the Azure DevOps migration tools. I'm going to take a very straightforward simple migration and walk you through it. We're also going to take care of any exceptions or issues and all those little things that come up, at least the common ones that come up. So let me switch to my desktop. There we go. \n\nSo first thing I'm going to do is install the Azure DevOps tools. We need to get them first. If we go to GitHub, the tool repo, you'll find just down on the right-hand side a little list of all of the releases, and the latest release will be at the top. So you can use this release here. Whatever the latest one is, is the one you should be using. We only support the latest one. We have one going through the pipeline at the moment, but if you open up that release, if you're in an environment where you can't, you don't really have internet access, you don't have any of those things, then you can use this version of the file here. You just download that, and you will be able to unzip it to any location, any folder, and then run the migration from that folder. \n\nYou can do that. I'm not going to do that today because if you check out the documentation, which if you scroll down a little bit, you will find a link here to the documentation. In the documentation, it talks about how you install and configure the tools, and there's a little getting started link up here in the top left. It talks about the install. Now we deploy to Winget and Chocolatey. So if you are on a Windows Server, you need to use Chocolatey. You can use Chocolatey anywhere, in fact, that you're running Windows, but we also have Winget as well for those of us that are on Windows 10 or Windows 11. \n\nSo let's put this in the other mode. I'll switch over here. There we go. So what I'm going to do is I'm going to open a command prompt, and one thing to note is that you want to use a non-admin command prompt. There's actually a bug in Winget that if you use an admin command prompt, it doesn't add the app folder to the path. You don't have to worry about what that means, but they don't add it to the path, which means that you get a missing file. \n\nSo I'm just going to find the package. If you do Winget search, then I'm going to do Azure DevOps and pull up the list of tools that are available for Azure DevOps. I'm just going to copy that ID there, and I'm going to do Winget install that tool. You'll find that will shoot off and go do that. It'll take a minute or so. It's going in downloading the package, verifying it, and then unpacking it and setting up some stuff. But again, it is just a portable setup. \n\nWhile that's running, you can go to... do I have the Chocolatey link in here? No, I maybe don't have the Chocolatey link anymore because we want to use the new stuff. So there we go, starting the install of the package, and it's set it up. So now if I switch to C temp and do dir, you'll see that I've got a config file in there. I'm actually just going to overwrite it and create a new one by calling the tools. \n\nSo if I go CLS, right, so if I want to use the tools, I just call devops migration. That will initially show you, because you've not selected like what do you want it to do, it will say what the options are. There's init, and execute. Execute is for executing a migration, and init is for creating config files. So if I do init and then do help, you'll see it's got some helpful options there for what things are available. \n\nBut we're just going to call init, and it will... there we go, it's updated and created this config file in C temp. So if I just pop that open and go to temp, there we go, I have that configuration file here. I'm going to open it in Visual Studio, and there we go, I'm all set up with this is the default out of the box configuration file. \n\nWe've got some changes to the default configuration file coming down the pipeline just now. They're not quite here yet, so there's a couple of fixes that I have to make. So if you have an older config file or you've generated one before, there's some fixes that you're going to want to make. The first fix is going to be to remove all of the field maps here. Field maps are great for when you want to move from one process to another process, but they get in the way, especially the default ones do get in the way. \n\nSo we've changed that. Although we're on 2.23, I think if you do 2.2.3, which has already been updated while the package is being deployed, then you will have these things already removed. So you need to remove that, and then down here, there's a skip to final revised work item type that should be false by default. It's currently set to true. \n\nThe other one is these node paths just get in the way, so the best way is just to delete them and replace it with null, and then they are gone. We don't have to worry about them. Those are the two things that you have to... that will be the default what you see here will be the default by tomorrow. \n\nSo what we're going to do is we're going to set up this for us. So we have a source project, and we have a target project. Okay, now the source project, we're going to use prompt to connect to it, and we're going to connect to an Azure DevOps instance in preview, but not this project. That one doesn't exist, so I'm just going to open that and go to migration source. This is my default migration source project here. \n\nSomething to note here is that you will need both the URL of the collection and the URL of the project. So this one here is the project, and this here is the collection. So if I take... I'm just going to copy the project because I already have the collection in there, and you'll see here's the collection, and I'm going to update the project. \n\nNow for the source, you don't actually have to worry about reflected work item IDs. It's not required for you to update this. It can be anything you like. It's not going to use it on here, and you can leave this as prompt because we're only going to read from the source. We never write to the source; we only read from it. So I'm just going to use prompt there because it's just easier just now. \n\nThen we need a target project. So what I'm going to do is I'm going to create a brand new target project, and I'm going to call it migration target three because I have lots of ingenuity on what to call things. So I'm going to use the same process. So the source is also this process, and I'm going to create that project here. \n\nWhile this goes off and creates the project, this is going to create an empty project. It is worth noting... there we go. So this has no work items, nothing here, recently updated, nothing, recently created, nothing. Okay, but it does have the process here, and if you're looking for the process, I just clicked the project settings on the bottom left, and then once you've got that open, you will see the process that's connected to your project in here. \n\nIf you click on it, that will go into the definition of the process so you can take a look. Even if you can't edit this, you will be able to read it, but you will need to be able to edit it on the target environment for sure. Okay, because every work item type that's in scope needs a special field on it so that we can track which work items we've created and what they're related to in the source environment. \n\nFor that, we actually add a field called reflected work item ID. If you are migrating work items, restructuring your Azure DevOps, or just need some help, my team at Naked Agility can help you, or we can help you find a consultant or expert who can. You can set up a free consultation using the links below, and don't forget to like and subscribe. \n\nSo I'm just going to add a new one just to show you what it would look like for you. So I'm going to create a new field ID. I'm just going to call it reflected work item ID, because I think I already created one called reflected work item ID 3. It's a single text line; it can go anywhere, no default value, and it can go anywhere. So I'm just going to stick it in details. I don't care. \n\nOkay, so there it's added. If you go to edit again and go to options, you'll see what the name of that field is. Okay, so this is the ref name rather than the friendly name. This is the friendly name here, and then the under-the-covers name is the custom reflected work item ID 3. If you've added or had already got a reflected work item ID in your system like I do, would you remove that one, which is this one? You can go check in options what the ref name is, and you can see this was created quite some time ago, and Azure DevOps has changed the way this works. Yours will probably say custom if you're adding it recently. \n\nIf you've added a long time ago, it will say the name of the process within which it was added. So that's M NK Scrum. So I'm just going to copy that, go back in here, and now I can update the target element to M KD Scrum that reflected work item ID. \n\nThe other thing that's worth noting is that in the target, if you're using Azure as your target, you will need to fill out a personal access token. There are certain capabilities in ADO that require us to do some weird patchy things that require a PAT token. So all you do is on your environment, click on the little person cog with personal access tokens and create a personal access token. You see I created one earlier, so I'm just going to regenerate that one. \n\nThere we go, I've got my personal access token. Now you'll notice I have it set up as full access. You can try other stuff, but we tend to use full access when creating these. So now all I need to do is put in my personal access token in there. If you want to only use the PAT token and not use prompt, you can say access token in the authentication mode, and it will just use the token. \n\nSo we can set that up here. So we're going to use prompt for the source and access token for the target. Prompt just pops Azure Active Directory authentication, and that's easy peasy. You don't need to worry about these language maps. If you have... you may need to worry about it in the source if you're migrating from, let's say, a German installation of TFS where the database is set up as a German collation, then you'll need to fill out whatever the German is for area and whatever the German is for iteration because that's how the system stores it, and then that will make sure all the mappings work. \n\nSo you just fill out your language-specific terminology in here, but 90% of the time, you're not going to need to do that at all. So then everything else is kind of not needed for a simple migration. If you're changing the process or you want to move data from one field to another, I've done things like I had a customer who had the version number as year dot number. I think it was year dot month in their source system, and in the target system, they wanted two fields, one with year and one with month. \n\nSo I just added a field map to regex those out into the individual fields. No problem at all. The documentation has a list. I jump to the docs. The docs have a list on the left-hand side under V1, under ref V1. You'll find a list of field maps here. So there's the regex field map, and all I did was set up a source field being my version, target field my version year only, pattern match the year out, and put it in the new field. \n\nRight, that's pretty straightforward. So you would just copy this, obviously change it to what you need, and put it into the field map. Okay, so it's just a list of field maps, and the field maps are run in the order that they're listed there. Right, so you can control the order a little bit. \n\nIf you have links from your work items to Git repos, then you will need to have those links fixed so that in the new system, they will match up. It's worth noting that we only fix the work item connection to the Git repo. We don't fix the Git repo connection to the work item. So in your Git commit text, you might have IDs or work items that no longer exist. They're not links; it's kind of invalid; it's just text. \n\nBut the link from the work item to the Git commit will be fixed with the tool. So if you've changed the name of the Git repo, you just create a name list of name-value mappings in here, similar to the language map, and have the original Git repo and the target Git repo under here. You only need it if you've changed the name of your Git repo during the migration. If it's the same name on both sides, it doesn't matter; you don't have to do anything in there. \n\nOkay, so then the main body in here is the processor. That's the bit that's got all the goings for actually doing the migration, and we're actually pretty close to being able to run a migration at the moment. So we've set up the connection, and then in here, we have the migration. The important bits are what type of processor it is, and then you've got your work item query bit here. That's one of the most important sections here. \n\nWe're going to run into a few problems when we do our migration. We're going to fix them in here, so I can show you what that looks like. So what I'm going to do is just show you this query. So in this query here, you can see it excludes certain work item types. These are work item types that we do not migrate at this point using this tool. There are things you can do with shared steps and shared parameters, but that is definitely more advanced. \n\nFeedback requests, test plans, and test suites should never be migrated with the work item migration processor. There's a separate tool for doing that stuff. So in here, this is this bit at the front, and closed date equals nothing means that it will only migrate things that aren't closed. But I can just delete that, and I will just not migrate those types of work items. Everything else will come across. \n\nThat's basically everything. This is great if you have a really big migration. If you've got more than 10,000 things that come back from your query, you're going to get an error. What you're going to have to do is shape your query so that you bring back chunks of smaller than 10,000 work items. So you might do that with date range. You know, let's migrate everything that's been changed in the last 90 days. Migrate everything that's been changed between 90 and 120 days, and then keep making those chunks in order to migrate it across. \n\nAnd yeah, so that's it. We've set up our query, we've set up our connection, we should be good to go. So I'm going to run the migration. So I'm going to switch back to my codes. There we go. And what we're going to do is we're going to do devops migration execute minus C for the config file, and it's c m. \n\nIs it JSON? I actually can't remember. What is that configuration? There we go. So I'm going to run that. There we go. So it's loaded the file, and it's done nothing. So this is the first thing that will happen when you try and run it because you have forgotten something in the config file. You'll notice that it has processor enabled equals false. We need to change that to true for it to do anything. \n\nThis is so that you can actually set this up so that you can have multiple configs in there and then enable and disable them as needed. I tend to have multiple files just to make things less confusing. But now I'm going to go back and run it. So this... boom. Okay, so now you can see, oh, it went quite quickly there, and I got an unhandled exception. I maybe messed something up, so I will need to check that. \n\nSo it connected here to the source. Grant it. Then it tried to connect to the target with access token, and then I got access granted. Oh, look what I did. See, there we go. What I did was I forgot to update the project name. Always something that Martin does that messes things up. There we go. Let's go back to... so it's migration target three was our empty project. There it is, migration target three. \n\nSo there we go. I forgot to update that. So clear. There we go. Let's run it again and see what happens. So connected to the source, connected to the target, and then it's doing a node migration. So it's creating the area and iteration nodes in the target. All of these little things here, and they have to match. \n\nWe use a thing called rules. Overrides, can't remember what it's called, but rules bypass. We bypass the rules engine, which means that all of the areas and iterations that are on the work items must exist. So the first thing we do is we go through... if I make that smaller, there we go. We go through, and this is checking and validating all of the areas and iterations that are in the source and checking that they're in and valid in the target. \n\nBut what we also do is after we've loaded the work items, and you see there's 10 work items, we actually go through the full history of all of the work items, and we pull out all the area and iteration paths, and we check that they all exist. We check that they all exist because in the history, there are two things that might have happened. You might have an area or iteration path that's from a previous project if somebody has moved a work item from one project to another. \n\nThat only happens in Azure DevOps, but it's possible. The other issue is that you might have an area or iteration path that has subsequently been deleted. So then it doesn't exist anymore in the source. So when we create the main set, it doesn't exist. So what we're going to have to do is we're going to have to create a mapping for these. The system will stop and say there's a missing iteration. There is one that is missing that we need to deal with. Actually, there's two, right? \n\nBecause what it's actually done here is it's created these two, which didn't exist before, so it's generated them on the fly. But we're still missing this one called Sky Point Cloud because it doesn't recognize what to do with it. Right? It's from an older project. So if I open up work item 414 in here, so if I just go 414, it should let me just... oh, I might need to go to the source project. \n\n414, there it is. So here's 414, and you can see, well, it looks like it's got perfectly valid iterations. But if I go in here and all the way back to the past, you'll see that the team project that it was created in was Sky Point Cloud. That is not this project. This is migration source. So it's been moved from one project to another, but that data is still in the history. \n\nSo it's had history, and then it's been changed and moved to this project. So we need to go deal with that in the config. So the config has been helpful and just said, \"Here's the missing thing you need to add.\" So I'm going to grab that because that's what we need to create and go into the config. \n\nSo down in the config under the processor, you've got area maps and iteration maps. I'm going to give you some secret information as well that you need to add. So effectively, we have an iteration map that we need to add for this text. We want to match this text and map it to something else. \n\nSo I'm going to give you some secret sauce. First is that in JSON, you need to escape slashes. That's why that's doing that weird underline. So if I put another slash in, we've escaped it. But because this left-hand side is a regular expression, we need to escape the escape slashes. So we need another two slashes to escape. So when this goes through the JSON, it will turn into two slashes to go into the regex, and the regex will turn it into one slash for it matching. \n\nI know, madness, but there you go. And what we want to do is we only... you know, we might have an iteration path that has Sky Point Cloud in it, like old project SL something/Sky Point Cloud/Sprint One, and that would match that. So just to protect ourselves, it's better to put a hat at where you want the start of the string, i.e., this has to be at the beginning, Sky Point Cloud, and then you can put a dollar at the end to say that is the end of the string. Don't match anything after that. \n\nSo we only match this exact text, and then our target project is migration target three. So where we want it to go is migration target three. We need to escape that slash, and then Sprint One maybe, I guess it could be Sprint One. Let's check. \n\nSo migration target three, let's go to project iterations. There's a Sprint, and there's an iteration that's all messed up, but you know, that's what there is. So we'll put it in Sprint One. And then just to give you a super secret thing, there's a bug at the moment where it doesn't list the root as a problem. \n\nIf you remember from viewing the history, you'll note that the area path was also Sky Point Cloud. So we actually need to match just Sky Point Cloud on its own and map it to migration target three for the area maps. Okay, so you just need to remember at the moment that if you're doing a project to project map, sorry, a project rename or change, then you need to move these in. \n\nOkay, so now if I go back and run this migration, you'll see it will skip past. There's loading the work items. It's getting a list. It's going to check it twice. There we go. Now it's migrating work items. So it's iterating through each of the work items, creating them. We iterate through each work item in turn. \n\nLet me make that smaller so it looks nicer. We iterate through each work item in turn. So when you're doing work, if work item A links to work item B, we're going to process work item A first, and we're not going to be able to create the links. You'll see on the first work item, it will actually usually say, \"Migrating link, skip, skip, skip.\" Right? That's absolutely fine because the other side, the target side, doesn't exist yet. The target work item has not been migrated yet. \n\nBut as it goes through, you'll see skips, and then as we go further down, we'll start to see creates. Right? It's going to create them. So when it creates the other side of the link, it's going to link it back together. If I go down to the bottom, it's probably pretty close to finished. It is finished. \n\nSo we have just migrated all the work items and links for those work items, and we did it fairly quickly. It took 48 seconds. There we go. So let's take a look at what we created. So when our migration target... I'm going to load up work items. Migration target three, I'm pretty sure that's what I called it. So let's have a look. \n\nThere we go. They are there. It was just a caching issue. If I go back, can I... there we go. Here are the work items that we just created. You can see there's the one that was moved from Sky Point Cloud, and in the history, all the way back in the source, it now just says migration three, right? Because we did that core mapping. \n\nSo we got all the work items. If I go to the backlog, close that, you'll be able to see that it's linking things in. If I change this to look at appearance as well, you'll see there's the feature, the backlog item, and the task coming in as well. And we did have some other work items on there, right? We had PPIs, we have some tasks and stuff, so we're not particularly worried. \n\nAnd there's all the stuff there. So there you go. We just migrated our first set of work items. So this operated fairly quickly. It brought them all across. If you want to run it again, you can run it again. And what it will do is it will go check everything twice. \n\nThinking about how we might resolve that, but it checks everything twice. So it's going to go through each of the... it's actually not going to check all of those work items again. It's just going to say that all work items were found. But what will happen is at some point, somebody will go to the source, and they'll go onto the board, and they'll drop that item from resolved to active, right? Because it regressed. \n\nSo now when we run this, we actually want it to migrate that extra change, but it will not because at the moment we've got a thing that will remove all found work items. So what you need to do is go in here, filter work items that already exist in target, false. Once you've turned that to false, let me do clear, rerun the migration, and what it will do is instead of just not trying to run all those work items, it will run through each of the work items. \n\nIt will check the number of revisions, and it's found one work item that has one revision that needs to be updated. And there you go, it has moved that revision across. It's going to check the links as well and make sure they're all up to date, and it skips it because they're already existing. So it's checking every revision of every work item that exists, that it's correct, that all the links work. \n\nSo it will eventually find that work item. There we go, run the whole thing. And if I go back to... so that was the source. We go to the target, go to the board. It should have moved across. There you go, it's now moved across. So we rerun the migration. Well, that's... oh, there's a bug. It shouldn't do two of those, but that's the different migration run that we can turn that off in the config. \n\nBut there's that additional change that came across. We changed the state, and then it's adding this text, which it shouldn't do. But in here, my migration comment, it won't do that again. It can be handy if you want to do it for the first run because in the actual work item, it creates a link back to the old work item. So you can quite easily just click it and go, \"Oh, what was the old work item again?\" \"Oh, it was this one. Does it match?\" \"Yes, it matches.\" \n\nRight? So people can find that. So there you go. That was a pretty straightforward migration between two Azure DevOps projects, moving the work items."
  },
  {
    "Title": "The Power of Community: Becoming an Awesome Agile Coach",
    "Description": "Explores how Agile coaches grow by engaging with diverse communities, embracing feedback, and challenging assumptions to deliver greater value to teams and customers.",
    "ResourceId": "hij5_aP_YN4",
    "Url": "https://www.youtube.com/watch?v=hij5_aP_YN4",
    "Date": "2023-11-16T11:00:37Z",
    "Captions": "To be an awesome agile coach, you really need to be part of a community, especially a community that doesn't just listen to you or doesn't just have the same ideas as you. You don't want to be in an echo chamber; you want to be in a group of people that are going to challenge the way you think, challenge the choices that you've made. That's going to say, \"No, what you've done is not good enough.\" In order to be effective at agile and to help you realise and grow your experience to be able to deliver the most value to your customer.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Mastering Agile: 3 Essential Strategies to Boost Your Team's Sprint Success",
    "Description": "Learn three key Agile strategies: define clear completion criteria, avoid overcommitting in Sprints, and prioritise backlog refinement for better team productivity.",
    "ResourceId": "ks38bwDTVfM",
    "Url": "https://www.youtube.com/watch?v=ks38bwDTVfM",
    "Date": "2023-11-16T07:00:16Z",
    "Captions": "Number one, have a definition of done. That would be great, right? Know the amount of work you need to do in order to get to done. That's part of the purpose of the definition of done. How do you know? How does every member of your team know when they're thinking about how much work they can take on in a Sprint? What they actually need to do to get there, right? That's your definition of done; it helps enable that.\n\nSo also, the second thing is probably stop taking on too much work. That's always a good one. Most teams will take on the amount of work that they feel will fit in a Sprint, and that's wrong, right? You shouldn't take on the amount of work that should fit in a Sprint. You need to think first about how much time you need to reserve for other things, okay? \n\nSo there are a number of other things you need to reserve time for in the Sprint. One is how much time do you have to spend paying back technical debt? That's one. Perhaps you've got some refactors or re-architectures to do. There's work around that. Perhaps there's been some production issues, and you want to go figure out and rework some of the way you've done things in order to make those production issues less likely. There's a bunch of work. Perhaps there's just some bugs you need to go fix. There's things that customers have asked for or feedback that are small things. You'd never have a whole Sprint just on those things, but you've got a bunch of stuff there.\n\nAnd then you need to think about how much work do you think is left in order to fulfil your Sprint backlog. This is your net new work that goes towards your Sprint goal that you're going to do in the Sprint. So this is the high complexity work. Usually, fixing above can be really simple or it can be really hard, right? You don't know, but all of net new functionality is generally really complex and very unknown. So you need to have enough space to take on a piece of work that might expand to fill that space, right?\n\nAnd there's one thing, which is the third thing that I've not talked about, and that's refinement. How much time do you need to think about refinement that needs to be reserved? Because the third thing, refinement, you need to understand the future to some degree, right? A lot of folks talk about, \"Oh, we're doing agile; we don't need to do planning anymore.\" That's crap. You need to do more planning and more often. \n\nOne of those things that we do, we call refinement, which is any work that you do as a team that is looking at the product backlog, not adding capability to your increment, right? So if you're looking out into the future and you're saying, \"What are the things that are coming up in the backlog? Are they the right size? Maybe we need to break them down. Do they have dependencies that we need to plan for?\" Right? If you get into Sprint planning and you realise that you need a firewall change that has a six-week lead time, you're already screwed, right? That's not happening this Sprint, even though that's when it needs to happen because we've got this firewall change.\n\nWhereas if we're looking out six weeks into the future in our product backlog and anticipating, trying to anticipate as best we can, you're never going to be perfect, but as best you can, what's coming up that we need to deal with? Those dependencies, those different activities that we need to request stuff or do stuff, you know, could be servers, could be environments, could be all sorts of things that could get in the way. What do you need to know now? You can mitigate a lot of that by your Scrum Masters should be thinking about, \"Well, why do we have to look out six weeks for firewall changes?\" Well, it's because this team over here takes six weeks to action a firewall change. Perhaps that's something you want to go fix so you don't have to look out so far on your product backlog, and you can bring that range in, right? \n\nBecause you want how far out you look to be minimal but sufficient, right? You've got that Goldilocks zone of how far do we need to look out, and you want it to be as short as possible. So any other activities you can do to make that shorter. \n\nSo those are the three things that a team who is struggling to get work completed in the Sprint needs to think about. You need to think about doing good refinement. If you understand things a little bit more, you'd be surprised how much more easily they fit in a Sprint. You need to not plan the whole Sprint; just plan the bit that you believe you can do and take into account those other activities that you need to do every Sprint. Don't fill the whole thing; that's mental. \n\nAnd the other one was having a definition of done so that you understand the amount of work that is required to complete each thing. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Agile Success: The Essential Knowledge Every Coach Needs",
    "Description": "Discover the essential knowledge areas for Agile coaches, including frameworks, principles, technical skills, and practical steps to support and guide Agile teams effectively.",
    "ResourceId": "xOcL_hqf1SM",
    "Url": "https://www.youtube.com/watch?v=xOcL_hqf1SM",
    "Date": "2023-11-15T11:01:00Z",
    "Captions": "To be an effective Agile coach, you need knowledge. You need knowledge in the processes, practices, and tools that might be effective for teams. You need to understand the underlying principles yourself. Why might teams choose it? Under what circumstances? What benefit would you expect them to get from it? You need deep technical expertise in the thing that you're delivering for them. \n\nSo that means that you might want to learn and understand Scrum. You might want to learn and understand Kanban and Lean Kanban method, Kanban strategy. What are the tools and techniques that you think will be most effective for you moving forward?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Mastering Complexity in Scrum: Transform Your Team with Agile Product Strategy Insights",
    "Description": "Learn how understanding complexity, empiricism, and key Scrum principles like transparency, inspection, and adaptation can boost Agile team effectiveness and product strategy.",
    "ResourceId": "n4XaJV9dJfs",
    "Url": "https://www.youtube.com/watch?v=n4XaJV9dJfs",
    "Date": "2023-11-15T07:00:28Z",
    "Captions": "So the most useful element of the APS class for beginner Scrum teams is really that grounding in understanding complexity and empiricism. Right, um, so that's something that we really focus on and double down on those two things. So the first one is complexity, right? \n\nThere is a difference as you increase in complexity, and usually it's an exponential scale, right? The type of processes and practices that you use need to change as you increase in complexity. So if we have very low complexity, um, let's say it's just complicated or even it's simple, then we can probably plan further out into the future and be okay. Right? We can plan, let's say we're running a textile mill and we have a thousand machines producing fabric. Um, in general, you'll be able to predict how long to a very high degree of accuracy it will take to fulfil whatever order comes in, right? Because you understand the cadence of the machines, you understand how long it takes to retool the machines for different types of fabrics or different patterns. You already understand all of that stuff up front, and it's fairly consistent. \n\nThere's the odd thing: a machine breaks down, something else goes wrong, somebody gets injured, right? These are all things that can surprise you or get in the way, but generally the variance is very small. As soon as you get into really high variance work, the APS really focuses on that piece, that high variance work, and quantifies what does it look like and how does it feel, right? How does it feel for the people involved? \n\nUm, so we do that through an exercise that enables people to experience complexity. Depending on which class you go to will depend on what experience that is. Uh, we've done building websites, uh, we've done Minecraft, right? That's my favourite one, is using Minecraft in that class, um, to create that complexity so that people actually feel it. Once they realise the difference between complicated and complex, they feel it. Then we can start talking about, well, how do we mitigate risk in that world of complexity? \n\nAnd that's where we focus very heavily on transparency, inspection, and adaption, right? That's why we talk about the definition of done really heavily. We talk about the product backlog and why it needs to be transparent. Um, we talk about the Sprint backlog and why it needs to be transparent. All of those things are the important piece because everything else is built on top of it. \n\nThere's no point in doing a Sprint review unless you have a transparent product to look at. There's no point in doing a Sprint planning unless you have a transparent product backlog to look at. You need those, um, artifacts, those three artifacts in Scrum with their commitments in order to be able to do everything else, and that's what makes it valuable. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How to Be an Effective Agile Coach: Agnosticism in Practice",
    "Description": "Learn how Agile coaches can empower teams by staying framework-agnostic, focusing on core principles, and enabling teams to choose and adapt practices for their needs.",
    "ResourceId": "nhkUm6k4Q0A",
    "Url": "https://www.youtube.com/watch?v=nhkUm6k4Q0A",
    "Date": "2023-11-14T11:00:50Z",
    "Captions": "If you want to be an agile coach, one thing you must be is agnostic in your practices. While you may have a favourite (mine is Scrum), you need to ensure that the team, the people you're working with, are able to choose the most effective practices that work for them. And that means sometimes not picking the one that you like. You want to encourage and enable them to understand the principles that underpin the lean principles, the agile principles, and perhaps the Scrum principles as well, to enable them to make better choices.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why 'Definition of Done' is Crucial for Success in Scrum",
    "Description": "Explains how a clear Definition of Done in Scrum ensures consistent quality, team alignment, and customer satisfaction across all projects, regardless of the solution.",
    "ResourceId": "syzFdEP1Eso",
    "Url": "https://www.youtube.com/watch?v=syzFdEP1Eso",
    "Date": "2023-11-14T07:00:30Z",
    "Captions": "This is one of my favourite questions. So the question is, how do you define a definition of done if you aren't 100% sure what the solution is going to look like? And I would say easy, because the definition of done has nothing to do with the solution, absolutely zero to do with the solution that you're trying to create. The definition of done is the level of quality that each thing needs to meet in order for it to be an even viable solution.\n\nRight, so let's use an analogy because that's always great for these things. Let's say you've decided to quit your job in this IT or whatever malarkey you're in at the moment, and you are going to go open a bakery. Right, you're going to go open a bakery. In this bakery, you've decided that your new products that you're going to ship in this bakery are donuts and baguettes. \n\nRight, donuts and baguettes have very different recipes. One's made with sugar and one's made with salt. Right, so if you have these two different products that have different characteristics, you could say that you have a different recipe for each one. You have different characteristics you would like each one to be. Right, let's call them acceptance criteria. In order for you to accept your donut as, in fact, a donut, it normally has to be round, it has a hole in the middle or no hole in the middle if it's filled with something. Right, it should be fried and dusted with sugar. Right, donuts, very tasty.\n\nRight, the other tasty thing is baguettes. If a baguette looked like a donut, that would be a bit weird. I'm not going to fry my baguette and dust it with sugar. Right, what I am going to do is I'm going to create a long rod of dough that then goes in the oven, and you need to cut it in a particular way to get that kind of twisty thing that you see on the top, and they need to be golden brown. And they're not sweet. Right, those are maybe some characteristics, some definitions of acceptance criteria for baguettes. \n\nMake sense so far? Okay, what needs to be true for both of those products in order for you to ship it? The customers, not specific to any particular thing you're shipping in your bakery. What needs to be true for both of those things? I would suggest the kitchen is clean at the time of preparation. That would be good. You could swap that out with meeting local health standards. Right, all ingredients are fresh at the time of preparation. Right, you don't want to be making with mouldy or poor quality products. Right, the better quality of the product input, the better quality of the output.\n\nAnd each batch is taste tested before it goes on the shelf, before it goes on sale. There's your definition of done. And those three things have nothing to do with what your baker is creating in the bakery. In fact, I would suggest that those three things should be true for any kitchen in the world preparing any type of food. Right, once your bakery decides to add some meat products, right, let's say you want to have some kind of pie, a steak pie or something you're going to sell as well, suddenly you might need to add an extra thing to your definition of done, and that might be heated to the appropriate temperature. Right, because you want to cook the meat. You don't want people to get salmonella and all of those nasty germs. You need to kill the germs.\n\nBut that new definition of done, cook to the appropriate temperature, still applies to donuts and still applies to meat. Right, so all four of those things can then be true for every single thing you create in your kitchen. That's the definition of done. It's about quality of the product. How do we ensure that we don't make our customers sick, that we don't put ourselves out of business, that we have happy and successful customers? That's your definition of done. \n\nSo it has nothing to do with what you're making in your kitchen. So let's apply that to the software world. Right, what needs to be on your definition of done for you to be sure that you're protecting your customers, that you're protecting your brand, that you're protecting your business, and you're protecting yourselves? What needs to be true? That would be your definition of done.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Before You Call Yourself an Agile Coach: The Importance of Real Experience",
    "Description": "Real-world experience with teams is essential for Agile coaches, providing credibility, empathy, and practical insight needed to effectively guide and earn team trust.",
    "ResourceId": "Po58JnxjX7M",
    "Url": "https://www.youtube.com/watch?v=Po58JnxjX7M",
    "Date": "2023-11-13T11:00:29Z",
    "Captions": "Before you can call yourself an Agile coach, you must, absolutely must, have worked with a team actually building some kind of product. If you're going to be working with teams and helping encourage them to do more practices, more higher quality in their product, you really need to understand and gain credibility from their perspective of actually doing the work. \n\nSo, if you want to be an Agile coach, have you ever worked with a team? If you haven't, go join one, help them build a product, and learn what it takes to work on a team. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Success in Agile: Why Your Definition of Done is Essential for Quality Delivery",
    "Description": "Explains why a clear Definition of Done is vital in Agile and Scrum for quality delivery, transparency, and risk mitigation, with tips for team alignment and improvement.",
    "ResourceId": "APZNdMokZVo",
    "Url": "https://www.youtube.com/watch?v=APZNdMokZVo",
    "Date": "2023-11-13T06:56:47Z",
    "Captions": "Definition of done in Scrum is one of the most important pieces of the puzzle. Definition of done really represents the level of quality that your product has, but it's almost that line you have to cross. If you look at the US Department of Defense guide detecting Agile, one of my favourite articles, you'll see it talks about working product in front of real users every iteration, including the first. The Agile Manifesto talks about working usable product at least every few weeks, at least every few months, right? And Scrum is probably the strictest of them that says you need to have usable working product at the end of every Sprint. Every Sprint, you must have usable working product. That doesn't mean you're going to ship it, although why would you build a bunch of value and then not advertise it, right? But the minimum for Scrum, the minimum to be doing Scrum is that you need a usable working product at the end of the Sprint. That usable working product is the foundation of risk mitigation in Scrum. Ultimately, usable working product is the foundation of risk mitigation in all of Agile practices, right? \n\nBut it's also that moment of transparency. If you think about the other transparencies in Scrum, you've got transparency of the future with the product backlog, you've got transparency of the present with the Sprint backlog, and then transparency of the past is the increment. The way we enable transparency of the past is through committing to the definition of done. Without that commitment to the definition of done, having a definition of done that represents usable working product and meeting it at the end of every Sprint, then the other two transparencies are irrelevant. Unless we can see what we've done, how can we know where we're going? If you don't know where you are and where you've been, how do you know how to get to where you want to be? You have to understand what's in your product currently, whether it works or it doesn't. Is it finished, or is there more work to do to make it get to that point before you can figure out how do we, if this is the future state and this is the current state, and our backlog represents a diff between those two states? If this is a false state, it's not transparent where we currently are. Maybe we're here, maybe we're there, maybe we're over here. If we don't know, then we don't know the journey we have to take between those two points, right? \n\nSo, definition of done is the commitment to quality that enables us to have that point. Then the next little journey is your Sprint backlog, but we still have to know where we are to know where at the end of the Sprint we need to be, right? So that's that critical importance, and we use that as our risk mitigation in Scrum. In traditional models, you're going to look across the entire life of the product, the project, right? You're going to look at all of the risks that might possibly happen, and then you're going to create a bunch of mitigating actions should those risks arise, and that's part of your plan for the whole thing. But in Agile, we're not planning that far ahead. We're planning more often, but in smaller chunks to see if we get there. \n\nSo the way that we mitigate risk in that story, and we don't go off in the wrong direction, we don't build a bunch of stuff that doesn't actually work, and then we find out later, right? That's adding risk. We need that working usable product. So the definition of done is the most important and foundational concept in Scrum, and I would suggest all of Agile. Knowing what it means to be done is that important. \n\nYeah, so that definition of done being so important is absolutely critical to the success of any product. Here's a good test that you can use with your team. If you have a team, if you work with a team, if you're a leader and there are teams, right? Go ask somebody on the team, perhaps bring it up at the review. Ask what the definition of done is if they haven't articulated it to you. If the answer is anything other than \"our definition of done is this,\" if it's anything other than that, they don't have one. If the answer is \"it's on the wiki,\" they don't have one. Because if it's on the wiki and each individual member of the team can't articulate it, what are the chances that they're meeting it? Therefore, it does not exist. \n\nSo have a definition of done. Get one if you don't have one. Definition of done is the most important thing in Agile and Scrum. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Breaking the Silence: How to Combat the Hidden Dangers in Agile Teams",
    "Description": "Explores the risks of unspoken issues in Agile teams, detailing how silence harms communication, trust, and value delivery, and offers strategies to foster open dialogue.",
    "ResourceId": "WpsGLkTXalE",
    "Url": "https://www.youtube.com/watch?v=WpsGLkTXalE",
    "Date": "2023-11-10T06:45:01Z",
    "Captions": "One of the seven signs of the agile apocalypse is silence. Silence manifests in many ways, but it often manifests as people not willing to speak up when they see something wrong. They're not willing to speak up when they see teams or people doing things that aren't part of what we're trying to do. They don't speak up when decisions are made that negatively impact the value delivery to the customer. They don't speak up when we lie to the customer by saying that we can do something before we've done it. These are all things that manifest as silence, and silence is one of the seven signs of the agile apocalypse."
  },
  {
    "Title": "Taming the Chaos Factor: How to Align Your Agile Teams for Success",
    "Description": "Explores common causes of chaos in Agile teams and offers practical strategies to improve alignment, communication, and collaboration for better team performance.",
    "ResourceId": "ItvOiaC32Hs",
    "Url": "https://www.youtube.com/watch?v=ItvOiaC32Hs",
    "Date": "2023-11-09T10:45:01Z",
    "Captions": "One of the seven signs of the agile apocalypse is chaos. Chaos! Oh my, chaos is everywhere in teams. It manifests as not having a plan, of not knowing which way we're going, not having goals. And what would you expect when everybody doesn't have the same goal? They're not working together towards a common goal. You end up with chaos; everybody's pulling in different directions. \n\nAnd this applies not just at the team level, but all the way up your organisation. Why would you think everybody would be going in the same direction if they don't all understand the goals of the organisation, the goals of the product, and how the work that they do every day contributes to those goals?"
  },
  {
    "Title": "Navigating the Judgment Trap: How to Foster a Healthy Agile Environment",
    "Description": "Explores how judgment in Agile teams harms morale and innovation, and offers practical steps to create a supportive, collaborative, and growth-focused Agile environment.",
    "ResourceId": "uRqsRNq-XRY",
    "Url": "https://www.youtube.com/watch?v=uRqsRNq-XRY",
    "Date": "2023-11-09T06:45:04Z",
    "Captions": "One of the seven signs of the agile apocalypse is judgment. Judgment manifests in many forms. Usually, it manifests as rules that you need to follow, and you are judged for not following them. You're judged for not having the velocity that somebody else wants. You're judged for having too many bugs. You're judged for writing too many lines of code than they would like or not enough lines of code. These are all judgments, and those judgments have an impact on the team. You need to set goals and create metrics that help you monitor progress towards those goals. When those metrics create negative behaviours in people, you need to adapt the metrics to make sure you're making progress towards those goals."
  },
  {
    "Title": "Overcoming the Plague of Rigidity: Embracing True Agility in Your Team",
    "Description": "Explores how rigid adherence to tools and processes hinders true agility, and offers strategies for fostering adaptability, experimentation, and continuous improvement in teams.",
    "ResourceId": "pDAL84mht3Y",
    "Url": "https://www.youtube.com/watch?v=pDAL84mht3Y",
    "Date": "2023-11-08T11:00:53Z",
    "Captions": "One of the seven signs of the agile apocalypse are plagues. Um, and there are a number of plagues, but one that really kills my goat is tools and process becoming sacran within the team. That's a plague on agile and agility. You can't be agile; you can't have agility if you're not willing to continuously adapt and have your processes, practices, and tools emerge over time. If you're stuck on one thing or you're forcing people to use one way of doing something, then I'm afraid that is one of the seven signs of the agile apocalypse: plagues."
  },
  {
    "Title": "Combatting the Agile Apocalypse: How to Overcome the Famine of Feedback and Engagement",
    "Description": "Explores the impact of lacking feedback and engagement in Agile teams, highlighting risks and offering strategies to boost stakeholder involvement and team motivation.",
    "ResourceId": "ARhXjid0zSE",
    "Url": "https://www.youtube.com/watch?v=ARhXjid0zSE",
    "Date": "2023-11-08T06:45:00Z",
    "Captions": "One of the seven signs of the agile apocalypse is famine, and in our context of Scrum, that famine manifests as a lack of feedback, a lack of engagement with stakeholders, perhaps even a lack of engagement with your product owner. Um, that famine results in a lack of care and attention. If the business doesn't care to turn up and provide feedback, why should your team care?"
  },
  {
    "Title": "Navigating Team Conflict: From Healthy Disagreement to Agile Harmony",
    "Description": "Explores recognising and managing team conflict in Agile, outlining stages from healthy disagreement to destructive \"war\" and offering practical de-escalation strategies.",
    "ResourceId": "GGtb7Yg8gHY",
    "Url": "https://www.youtube.com/watch?v=GGtb7Yg8gHY",
    "Date": "2023-11-07T11:30:07Z",
    "Captions": "One of the seven signs of the agile apocalypse is war. This manifests as team conflict. It's fine to have disagreements on your team; that's where the awesome ideas are generated. But if it escalates to a contest, the aim becomes to win the argument. That's the line at which the Scrum Master probably needs to step in and help. If it gets to Crusade or World War with the teams, then you're just hosed. You need to deescalate that. So, one of the seven signs of the agile apocalypse: war manifesting as team disagreement."
  },
  {
    "Title": "Beware the Fake Agilists: How to Protect Your Team from the Agile Apocalypse",
    "Description": "Learn how to identify and prevent the harm caused by unqualified Agile leaders, protect team trust, and ensure genuine Agile practices drive software development success.",
    "ResourceId": "T07AK-1FAK4",
    "Url": "https://www.youtube.com/watch?v=T07AK-1FAK4",
    "Date": "2023-11-07T07:36:21Z",
    "Captions": "One of the seven signs of the agile apocalypse is the Antichrist. In our context, that Antichrist is fake agilists. I think that's probably the best way to describe them. People who perhaps have a certification in agile, they passed an assessment; perhaps they didn't even take a class, they just passed an assessment. And they believe that they're qualified to help engage and enable software teams when they have no clue whatsoever how software is made. Those are the Antichrist."
  },
  {
    "Title": "Taming the Chaos: How to Align Your Agile Team for Success",
    "Description": "Learn how to reduce chaos in Agile teams by improving alignment, setting clear goals, fostering open communication, and using visual tools for better collaboration and efficiency.",
    "ResourceId": "X4QzM00onL4",
    "Url": "https://www.youtube.com/watch?v=X4QzM00onL4",
    "Date": "2023-11-03T05:11:45Z",
    "Captions": "Of the Agile Apocalypse is chaos. Chaos! Oh my, chaos is everywhere in teams. It manifests as not having a plan, of not knowing which way we're going, not having goals. And what would you expect when everybody doesn't have the same goal? They're not working together towards a common goal. You end up with chaos; everybody's pulling in different directions. \n\nAnd this applies not just at the team level, but all the way up your organisation. Why would you think everybody would be going in the same direction if they don't all understand the goals of the organisation, the goals of the product, and how the work that they do every day contributes to those goals? \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—Agile, Scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Breaking the Silence: How to Combat Communication Gaps in Agile Teams",
    "Description": "Explores the impact of communication gaps in Agile teams, their causes and consequences, and offers practical strategies to foster open, effective team dialogue.",
    "ResourceId": "KHcSWD2tV6M",
    "Url": "https://www.youtube.com/watch?v=KHcSWD2tV6M",
    "Date": "2023-11-02T11:30:10Z",
    "Captions": "One of the seven signs of the Agile apocalypse is silence. Silence manifests in many ways, but it often manifests as people not willing to speak up when they see something wrong. They're not willing to speak up when they see teams or people doing things that aren't part of what we're trying to do. They don't speak up when decisions are made that negatively impact the value delivery to the customer. They don't speak up when we lie to the customer by saying that we can do something before we've done it. These are all things that manifest as silence, and silence is one of the seven signs of the Agile apocalypse.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Navigating the Agile Apocalypse: How to Combat Judgment and Foster Team Growth",
    "Description": "Explores how judgment in Agile teams—via metrics like velocity and bug counts—can harm collaboration, and offers strategies to foster growth and psychological safety.",
    "ResourceId": "xk11NhTA_V8",
    "Url": "https://www.youtube.com/watch?v=xk11NhTA_V8",
    "Date": "2023-11-01T11:30:27Z",
    "Captions": "One of the seven signs of the agile apocalypse is judgment. Judgment manifests in many forms. Usually, it manifests as rules that you need to follow, and you are judged for not following them. You're judged for not having the velocity that somebody else wants. You're judged for having too many bugs. You're judged for writing too many lines of code than they would like or not enough lines of code. These are all judgments, and those judgments have an impact on the team. \n\nYou need to set goals and create metrics that help you monitor progress towards those goals. When those metrics create negative behaviours in people, you need to adapt the metrics to make sure you're making progress towards those goals. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always like the comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Breaking Free from the Plagues of Agility: How to Cultivate Flexibility and Innovation in Your Team",
    "Description": "Explores how rigid adherence to Agile tools and processes can hinder flexibility, and offers strategies to foster team innovation, adaptability, and continuous improvement.",
    "ResourceId": "HFFSrQx-wbQ",
    "Url": "https://www.youtube.com/watch?v=HFFSrQx-wbQ",
    "Date": "2023-11-01T09:42:43Z",
    "Captions": "One of the seven signs of the agile apocalypse are plagues. Um, and there are a number of plagues, but one that really kills my goat is tools and process becoming sacrosanct within the team. That's a plague on agile and agility. You can't be agile; you can't have agility if you're not willing to continuously adapt and have your processes, practices, and tools emerge over time. If you're stuck on one thing or you're forcing people to use one way of doing something, then I'm afraid that is one of the seven signs of the agile apocalypse plagues. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a session with me through Naked Agility."
  },
  {
    "Title": "Combatting Famine in Agile: How to Foster Stakeholder Engagement and Boost Team Morale",
    "Description": "Explores how lack of stakeholder feedback in Agile harms team morale and alignment, and offers practical ways to boost engagement and maintain effective collaboration.",
    "ResourceId": "k4F9DSE99Ok",
    "Url": "https://www.youtube.com/watch?v=k4F9DSE99Ok",
    "Date": "2023-10-31T07:00:18Z",
    "Captions": "One of the seven signs of the agile apocalypse is famine. In our context of Scrum, that famine manifests as a lack of feedback, a lack of engagement with stakeholders, perhaps even a lack of engagement with your product owner. Um, that famine results in a lack of care and attention. If the business doesn't care to turn up and provide feedback, why should your team care?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Navigating Team Conflict: How Scrum Masters Can Prevent 'War' in Agile Projects",
    "Description": "Explores how Scrum Masters can identify, manage, and prevent destructive team conflict in Agile projects, promoting healthy collaboration and effective communication.",
    "ResourceId": "Wk0no7MB0AM",
    "Url": "https://www.youtube.com/watch?v=Wk0no7MB0AM",
    "Date": "2023-10-30T14:30:10Z",
    "Captions": "One of the seven signs of the agile apocalypse is war. This manifests as team conflict. It's fine to have disagreements on your team; that's where the awesome ideas are generated. But if it escalates to a contest, the aim becomes to win the argument. That's the line at which the Scrum Master probably needs to step in and help. If it gets to Crusade or World War with the teams, then you're just hosed. You need to deescalate that. \n\nSo, one of the seven signs of the agile apocalypse: war manifesting as team disagreement. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, Scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "The Antichrist of Agile: How Fake Agilists Are Undermining True Innovation",
    "Description": "Explores how unqualified Agile practitioners undermine genuine innovation, erode trust, and hinder software teams, stressing the need for real experience over certifications.",
    "ResourceId": "XZ1Swam_Cx0",
    "Url": "https://www.youtube.com/watch?v=XZ1Swam_Cx0",
    "Date": "2023-10-30T07:00:13Z",
    "Captions": "One of the seven signs of the agile apocalypse is the Antichrist. In our context, that Antichrist is fake agilists. I think that's probably the best way to describe them. People who perhaps have a certification in agile, they passed an assessment; perhaps they didn't even take a class, they just passed an assessment, and they believe that they're qualified to help engage and enable software teams when they have no clue whatsoever how software is made. Those are the Antichrist.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or devops—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How to Tackle the Challenge of an Ineffective Product Owner in Agile Teams",
    "Description": "Learn practical steps for Agile teams to address ineffective Product Owners, including support, education, relationship-building, and fostering team excellence for better outcomes.",
    "ResourceId": "JGQ5zW6F6Uc",
    "Url": "https://www.youtube.com/watch?v=JGQ5zW6F6Uc",
    "Date": "2023-10-27T14:30:10Z",
    "Captions": "So the question is what are the steps that the team can follow if the product owner is incompetent? Um, that's pretty strong, right? Incompetence is pretty strong, but I have met a ton of product owners that would perhaps fit into that category or the other adjacent category, which is I don't know what I'm supposed to do or my organisation doesn't allow me to do the things I'm supposed to do. Right? So it's not it manifests the same way; the outcomes are the same and ineffective product owner. Um, but the reason could be incompetence or I'm not allowed, right, within the bounds of the org or I don't feel I'm allowed. Um, in both of those circumstances, I would probably suggest that there's some um onus on the Scrum Master to figure out how to deal with that, right? It might not, might not be ideally the product owner is the person with the money who can resolve those problems, but often they're not. So what can you as a Scrum Master do? Um, with the support of the whole team, right? Perhaps with the support of the whole team, perhaps with the support of the person who is the product owner to engage with the business, to engage with the organisation and the way the organisation is structured in order to enable a greater degree of product ownership, right? That's part of the Scrum Master services to the product owner. \n\nUm, if you don't have a Scrum Master on your team, just pick somebody in your team who has an interest in dealing with some of those things and they can be the Scrum Master, right? They don't need any special skills. Um, they just need to be a bit battle-hardened in working within your organisation, which if you've been working there a while, you probably are. And start going building those relationships, right? Who do you need to speak to, take out for dinner, buy a beer for in leadership, in HR, in the organisation to start building those relationships for them to start seeing your point? Build in those back channels. \n\nUm, there's, there's, uh, what was that movie with the nuclear explosion? Um, uh, in the baseball game? Uh, Clear and Present Danger? No, it was the other one. Um, anyway, that movie which you probably remember better than I do. Uh, uh, the channels were how things got done, right, between the Americans and the Russians. There were people, uh, that are low in the organisation who are in either organisation who were able to have conversations to trade information, to find out things that are going on. That’s one of the skills of a Scrum Master: politic, right? It's politics. \n\nUh, being able to practice um, um, politic, getting into um, the conversations that you need to get into. And in order to get into those conversations, you have to demonstrate an understanding of the topic. You have to make small suggestions around the side, perhaps an email with one person who then maybe invites you to some of those conversations because you've demonstrated your knowledge and your capability. Um, and then, you know, you don't want to say anything unless you actually can add value. Add value where you can, build up your knowledge and experience in that space and encourage change. And that's how everything gets done in organisations, right? Especially when there are lots of people that don't understand how to do that. \n\nSo if you have an ineffective product owner, um, that's the best route. If you have an incompetent product owner who really just shouldn't be in that position at all, they are not, uh, the right person. The old adage is kind of true: people are promoted to their level of incompetence, right? Um, people are good at their job, so they get promoted to the next level up. Um, and then in the next level up, they're also good at their job, so they get promoted to the next level up, and they get to a level where they're no longer good at their job, and that's where they stay. \n\nUm, when in reality, organisations should offer that capability to drop back down, right? To, to, you might have the seniority, but I, I don't want to do this job up here; I want to do this job here or this job even further down in the organisation. I really respect some of the things I, I meet people at Microsoft who've been a software engineer, a real coder, um, for 20, 30 years, um, inside of the organisation. And they take on more responsibility and accountability by um, mentoring other people, helping with other stuff, but not actually managing people, um, which often is not a skill that lots of people have, right? Just like taking any, anybody with skills with people and making them a programmer is probably not a good idea. The converse is also true. \n\nUm, so maybe that product owner is just not meant to be in that position, and there's very little that you as a team can do. Um, there's certainly with the politic around the side, you could maybe let people become aware of the problem. Um, but you need to really skirt that moral and ethical area of um, should you be going behind this person's back? Perhaps you go speak to that product owner and say, uh, say, say something in the first instance, although that might get you, you've got to gauge that situation yourself. \n\nUm, but all the team can do ultimately is be the best team they can, um, deliver working usable product, be that competence at that level. And if we're not building the right thing, that's not the team's fault; that's the product owner's fault. And hopefully at some point, the organisation sees that we're continuously building awesome product, but it's the wrong product. Um, and then they see that light of it's the product owner that's the problem, not the team. Um, and perhaps the Scrum Master can help educate with that, right? Rather than going behind the product owner's back, just explain to the business what a product owner's job is, what the team's job is, what their roles and responsibilities are, and hopefully they'll be able to see what the problem is. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Training: A Bridge to Knowledge and Growth",
    "Description": "Explores how effective training, continuous learning, and a supportive culture help teams grow, adapt to change, and overcome skill gaps in modern organisations.",
    "ResourceId": "_2ZH7vbKu7Y",
    "Url": "https://www.youtube.com/watch?v=_2ZH7vbKu7Y",
    "Date": "2023-10-27T07:00:14Z",
    "Captions": "So the question is, what can a leader pragmatically do with a team that is identified as incompetent, right, but identified as deficient in some way? Before you resort to any kind of firing, there's plenty of things to do. You may want to bring in training. Training is a good way to broad pace some knowledge across a group of people. They might not remember everything that they learned, but I do find, although we might remember 20 to 25% of what we learned in a class, we learn that 25% is spread across all of the capabilities that you maybe learned. Maybe there's 30 topics, or let's say there's 25 topics, and you remember 1% of each of those topics. That 1% of the total course in each of those topics that you remember enables you to know where to go look, where to go find that additional information.\n\nAs long as the people that you've got have some kind of willingness to do things themselves, discover, right, then you can just broad paste some training. Perhaps applying professional Scrum for software developers, right? Get some broad paste of these modern engineering practices across the team. At least they're understanding them and thinking about them, and they can go do additional research on those topics. It shows commitment from the organisation on updating. \n\nBut if they're already in, I guess I would say, a dejected state, I worked at an organisation in the UK, another bank, and they had... I worked beside somebody who believed themselves to be unemployable because they hadn't done anything new in four years. That kind of depressive, dejected, they're already unhappy but don't know what to do about it state. You might find that over time they learn not to learn, right? They stop learning, they stop figuring stuff out because they're like, \"Why bother if I'm not going to be allowed to do anything?\" \n\nSo you need to build that back in slowly. You need to start encouraging them to learn new things. It might not be that you encourage them to learn; you might say, \"You need to learn this new thing so we can do this new capability.\" Have them learn the thing and then do the new capability. Have them learn the thing, do the new capability, suggest they learn the thing, drop in the new capability, right? So then they're expected to... it has them have that feeling of, \"If I learn it, I get value from it,\" rather than, \"If I learn it, I'll not get value from it because nobody's going to let me use it.\" \n\nSo you have to start building back in that capability into the team, into the whole organisation, right? Because people don't get that way out of the box. Most people that I have ever worked with, most teams, most people that I've ever worked with, are interested in learning more about their field unless the organisation has beaten it into them that they're not going to be able to use anything they learned. \n\nI spent my early career as a .NET developer, hopping between companies because I would go to a company because they were using .NET too, and then I would be working there for a couple of years. About halfway or three-quarters, you know, a year to 18 months in, .NET 3 would become available, and I'd be starting to learn that technology and then asking them, \"So when are you going to use this new technology?\" And they'd be like, \"Maybe in 3 or 4 years.\" And I'd be like, \"Okay, I'm job hunting then for somewhere that's pulling in .NET 3.\" \n\nThen I'm going to go work with that, not .NET 3. When .NET 4 comes out, I'm going to be learning that new technology, and then if my organisation isn't willing to change, then I'm going to change, right? Change your org or change your org. I think that continuous move into technology maintained my ability to be employable, my ability to learn and grow my knowledge and career. I personally wasn't afraid to switch between companies, but lots of people are, right? \n\nSo it can be beaten out of them very easily. That was through a number of organisations, investment banking as well as other stuff. But you need to create an environment within which people are rewarded. That doesn't mean financially, but rewarded for learning new things and figuring out new ways to do things. Do you give people the freedom to try stuff out? Do you give them the freedom to fail? \n\nDoing something about doing new stuff is... you might find things that don't work, right? Well, yes, we can do it this way. No? Okay, well, this bit doesn't work. We're down a dead end; we need to backtrack a bunch and then go down a different route. There's some waste in that, but the waste that you get from that is often overshadowed by the clever and interesting ways that you solve those problems and the capabilities that those ideas bring to the organisation. \n\nYou don't open out new markets, new capabilities, get new users by just staying in your lane. You have to be continually switching lanes and figuring out what the best way to solve a problem is. So if you have a team that you take over as a product owner or as a development manager or any way you come into contact in leadership with a team, if it feels like they don't feel they're allowed to learn, that they're allowed to use new things, that they're allowed to do stuff, you need to fix that problem in your organisation. Fix the system, and then you'll start seeing a difference in the teams. You'll start seeing a different vibe, a different capability, a different interest in solving problems in clever and interesting ways.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What Should a Product Owner Do with an Incompetent Team?",
    "Description": "Guidance for product owners on handling underperforming teams, distinguishing incompetence from knowledge gaps, and knowing when to support, train, or let them go.",
    "ResourceId": "rNqYGyB6PtY",
    "Url": "https://www.youtube.com/watch?v=rNqYGyB6PtY",
    "Date": "2023-10-26T14:30:26Z",
    "Captions": "So the question is, what does a product owner do if the team are incompetent? Well, if it's really that bad and the team really are incompetent, I would say fire them and get a new team. That's ultimately where I would go with that. Now, that predisposes, obviously, we're going to try our hardest to engage with that team to enable them to have every opportunity to improve. All of the things that you would expect to happen, right? We're not just going to fire people for no reason. But the fact that the question is the team is incompetent. Don't work with incompetent people. Don't hire incompetent people. Don't keep incompetent people. They are not the people you need in your business to be successful. Amazing teams build amazing products, and amazing teams don't come from incompetence. So get rid of those folks as quickly as you humanly can.\n\nNow, if it's they don't know something that they could have known, that's not necessarily incompetence. You want to provide them with training opportunities. You want to provide them with knowledge opportunities. You want to provide them with... I don't know, I've never worked with a truly incompetent team. Actually, that is not true. Well, it's kind of true, kind of not true. I was going to say I've never actually worked with a truly incompetent team, but I have. But they were not incompetent in their favour, if that makes sense.\n\nSo I worked with a team in an organisation; it was a bank, and they had... man, I'm trying to think of other teams. Yeah, plenty of other teams I've worked with that present as incompetent that actually aren't. So this team that I'm talking about, they... I was a lowly DevOps consultant helping a part of the organisation transition from what they were using before into Azure DevOps, TFS at the time, and this was Java teams. So at the time, if you were a Java team and you had to use TFS, you were already a little bit hostile towards it, right? But this particular team didn't want to use source control. They believed that it would slow them down. That's their comment on source control.\n\nAnd I kind of asked them, I challenged them a little bit and said, \"Well, why do you think it would slow you down?\" And they're like, \"Well, if we need to make changes, we just log into the environment and make the changes.\" So I asked them about how they develop, and it's like, \"Well, we just log into the server, the production server, we open up our IDE, we make changes to the code, and we publish it right away.\" And I was kind of like, \"But how do you do that publish?\" And they're like, \"Well, we just click the publish button and it goes straight into production.\" So already, I'm horrified, right? I was horrified already, even more horrified now.\n\nAnd then I asked, because they have five servers around the world, I said, \"How do you keep all of those servers in sync? You know, how do you make the changes across all of those servers?\" And they said, \"That's why there's five of us.\" There were five people on this team; each one owned a server independently. And when there were changes needed to the code, they would all log in independently, write their own code in their own way on their server in order to action those changes. So I was even more horrified. And then you find out that it's the real-time banking transaction system for a multinational bank, and now you don't want to keep your money in a bank anymore.\n\nAnd those types of teams, there was a strategic incompetence, right? Because they're making sure the bank can never fire them. And when I brought it up with leadership and said that this is a massive risk to your business, they said, \"We know, but if we say anything, they'll leave, and then what do we do?\" Right? So this small group of people were holding an entire multinational bank hostage for this piece of software, and that's not okay. That goes beyond incompetence towards malevolence, right? And that level of malevolence, the organisation, this would be my recommendation: the organisation needs to fire that entire group of people and take their lumps for figuring out how to resolve the problem, right? Of actually figuring out the software, getting it out of those servers. If those people are still around, they're going to sabotage that at all costs because it's their property. They believe it's their property; they believe they control it.\n\nSo if you have a truly malevolent team, definitely fire them. If you have an incompetent team, probably fire them, but be careful that you're not reading incompetence into just they don't know stuff; they've never been told. I've worked with teams that don't understand how source control works, that they know how branching works, but they didn't know how merging worked because nobody had ever explained it to them. So teach them as best they can, get rid of the malevolence, work on the incompetence. But ultimately, if they're that bad, get rid of them.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Nak Agility."
  },
  {
    "Title": "Scrum is like communism, it doesn't work. Myth 5.",
    "Description": "Explains why Scrum does not mean a lack of governance, highlighting the need for regulatory compliance and internal standards while maintaining Agile flexibility.",
    "ResourceId": "kORUKHu-64A",
    "Url": "https://www.youtube.com/watch?v=kORUKHu-64A",
    "Date": "2023-10-26T07:00:29Z",
    "Captions": "One of the myths in Scrum is that we have no governance. This kind of leads on to the bigger myth that just because it's not in the Scrum Guide, doesn't mean you're not supposed to do it. Scrum does absolutely have governance; it has small amounts of governance baked in, right? But in general, you need governance to build your product. So it's kind of correct to say Scrum doesn't have a lot of governance. There's a very small amount of governance built in, but if you want to be successful at building products, if you're, for example, building products within the healthcare space, then you're going to have to worry about your ability to support HIPAA, to support the regulatory compliance that comes from the outside. That's governance imposed on your organization from the outside that you have no control of.\n\nYou're going to have things that your organization does internally. Perhaps your organization has usability guidelines; perhaps they have UX guidelines for how all our products' UX is going to function so that anybody interacting with our software already knows how it's going to work because it follows the same rules. Then that's internal governance that has been applied to your product. You may have business rules; that’s another form of governance. You might have particular ways in which you interact with the market as a business. That's one of your unique selling points, your unique engagement points with the market, and those ways of working have to be implemented in your systems. That's internal governance.\n\nJust because Scrum talks about minimising that governance doesn't mean it's not there, right? You just have just enough governance to support the business need. It's when you have way too much governance that you start running into a problem. That's why in very large organisations, for example, banks, they really struggle to move towards Scrum and agile practices because they're encumbered by the baggage that they can't put down. Royal Bank of Scotland in the UK was, I think, the first bank in the world; it's currently the fifth biggest bank in the world, and they've been going for over 200 years. Can you imagine the procedural and compliance baggage that that organisation has? Many of it around for no other reason than nobody's revisited it in a long time; nobody's challenged it in a really long time.\n\nHow many policies and procedures do you have in your organisation that nobody knows where they came from or what they're for, or who owns that policy or procedure, or why? It's just the way we do things here. Those are the things that we want to challenge. We want to challenge anything that gets in the way of inhibiting our ability to deliver value. Those are the things we want to prevent. Those are the policies, practices, and procedures, the governance that we want to reduce to the absolute minimum.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why Agile Success Relies on Effective Planning: Debunking the Myths of Scrum",
    "Description": "Explains why effective planning is essential in Agile and Scrum, debunking myths about planning, and highlights strategies for teams of all sizes to achieve project success.",
    "ResourceId": "J3Z2xU5ditc",
    "Url": "https://www.youtube.com/watch?v=J3Z2xU5ditc",
    "Date": "2023-10-25T13:30:11Z",
    "Captions": "One of the common myths in Scrum is that since we're doing Agile, we don't need no planning. Um, and that is just utter garbage. Scrum, for example, is all about planning. We have Sprint planning, we have refinement, which is a type of planning. We have, uh, daily Scrum, which is about planning the next 24 hours. We have a review where we review what happened based on the plan and adapt the plan going forward into the future. It's all about planning. It's all about getting things right. It's not about planning upfront. It's not about spending too much time upfront planning.\n\nOkay, but there's a phrase which is often misinterpreted, which is we should do just enough planning. We should do just enough, right? If we do too much planning and we plan a bunch of stuff that we end up not doing because it gets taken out of the backlog, then that was waste. Maybe that was okay waste. Maybe we needed to do that planning in order to find out other stuff and have that thing removed. Or maybe that was a little bit too much. Is there a way that we could have learned the same thing that we learned doing that planning doing something a little bit less?\n\nAnd the converse of that is if you are building... I'm trying to think what you could be building that needs lots of... let's say you're working on Windows and you're one of two and a half thousand software engineers. How many teams is that? Metric assloads of teams, right? If you're that many teams working on one product, then you're going to need to plan, right? You're going to need to understand what's happening going out into the future. You're going to need to coordinate across hundreds of teams on direction and strategy. I mean, most of that in Scrum is done through communication, right? Vision, product goal, Sprint goal, right? You've got that communication chain. How do we all get behind the same thing?\n\nBut we're trying to have as light a plan upfront as possible within our context. So even if I was working on the Windows team, I would probably have a roadmap. I'm probably going to have a roadmap for my current six months. If you're not familiar with how Microsoft product teams have created their own scaling framework around what they need and their business, um, it's often called the season-based model because they talk about the spring update and the fall update for their really big products. Many of their products do continuous delivery, but they're talking about a long-term view of what it is they're trying to achieve, and that's about six months. They look three seasons ahead, so they're looking 18 months out. They have an 18-month plan, and I'm using air quotes because it's probably pretty vague, right? If you're looking at that third season out, things are really big, right? You might have, um, uh, uh, uh, themes rather than individual things you're going to deliver. You might be looking at what are the investment opportunities, what's happening in the market, where do we need to get ahead of the competition going over the next 18 months? And that generates these big theme buckets of work that many hundreds of teams might work in, um, to actually, you know, make progress towards those big themes.\n\nBut you're looking that far out, you're planning that far out. You know, um, probably what your goal, your product goal, if they call it that. But whatever their theme for, uh, their primary theme for us each of the seasons, they probably know what they're going to be 18 months out for the season that we're in. You know, we've probably got backlog items and actual things we're going to tactically deliver for the next three, four, maybe five Sprints. Maybe. And then in the next bucket, we maybe have, you know, here's some Sprint goals we might tackle, here's some product goals we might look at, um, in that next seasonal bucket. And then the season after that, we don't have any of those detailed just what's the big theme.\n\nAnd you can see how they did that. They did a, uh, one recently, uh, I'm saying recently in the last five years, right? Recently, that was called the Creators Update. So when they were talking to us, the general public about the products, they talked about the Creators Update. We're going to invest in opportunities to make our systems and products and services better for creators. That was an organisation-wide theme that kind of spawned out of the Windows team. But think of all the things that impact. Not only does that impact on Windows, the operating system, right? But what about Office? It's the most people interact with the operating system through Office. So if you're talking about, um, pen support, right? You've got the actual pen touching the screen on the Surface and the number of levels of capability that it has in that world. You've got... so that's hardware, that's the Surface hardware, and perhaps third-party vendor hardware collaborating with. Then you've got the application that you're actually... is interpreting those signals. So that could be Microsoft's applications, it could be Office, it could be third-party software. And then you've got the underlying operating system which is providing support for, I think it used to be 256 levels of pressure, and now it's, uh, 1024 at least, uh, levels of pressure that you can put on the pen in order to get that, you know, I'm drawing on the page type of feel.\n\nAnd that requires collaboration, looking forward into the future. What do we need? What are we trying to achieve? All of those strategic things are happening. We just probably don't store them in a Gantt chart. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Scrum is like communism, it doesn't work. Myth 3.",
    "Description": "Explores the myth that Scrum leads to micromanagement, clarifying that true Scrum empowers teams with autonomy, collaboration, and trust, not top-down control.",
    "ResourceId": "CawY8x3kGVk",
    "Url": "https://www.youtube.com/watch?v=CawY8x3kGVk",
    "Date": "2023-10-25T07:00:09Z",
    "Captions": "One of the common myths in Scrum is that it is really a forum for micromanagement. There's a core test for this in your team. It is a myth, right? But it's a reality for many teams. So, is it a myth or is it not a myth? That is a matter of perspective. However, I would point out that it's not Scrum. So, it's a myth in the context of Scrum, but it's not a myth in the context of how lots of organisations and teams approach Scrum. \n\nMost organisations approach something like Scrum from their traditional top-down steering-based perspective, and they want to tell teams what they're going to deliver in a Sprint. So, you walk into Sprint planning, and the Product Owner or the Tech Lead or the Project Manager, or whoever, the Scrum Master—the worst one—but the Scrum Master says, \"Here's a list of things we need you as a team to do this Sprint.\" \n\nAs soon as that happens, it's not Scrum. We've gone out of the bounds of the Scrum Guide. Who decides what we work on this Sprint? The developers. Who decides how we work on it? The developers. Okay, it's not anybody else because the developers—that's the core reason why they dislike that approach. It's the developers that understand the nuance and intricacies of the technical challenges of actually delivering on the work inside of the Sprint. Nobody else can understand that nuance because they're living it, right? \n\nThey've got skills that I don't have as a manager or as a Product Owner. They've got an understanding of the product and the technologies that we're using to deliver that product, the tools and techniques that we're using. They're best placed to make that decision. \n\nNow, can the Product Owner say, \"Oh my goodness me, we're in a difficult place because we're not working through the work that we need to deliver as fast as we would like?\" Yeah, absolutely. They can have that conversation, and they can have a conversation with the developers about how the developers might choose to cut corners in order to accelerate work. But it must be done with their assent. If the developers say no, then we can't work any faster because we might be taking on too much technical debt. \n\nFor most businesses, and for all businesses, all technical debt is a risk to the business, and most businesses don't understand the context of technical debt enough to make an informed decision on whether they should accrue it and how they should pay it back. That's why we have hired these technical experts in order to deliver our product, and we should trust their understanding and view of the product in order to do that. \n\nSo, I would say that it is a myth that anybody should be telling the developers what to work on and when to work on it. But I do understand that lots of organisations don't understand how to let go of that control and are not yet ready for Agile. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Scrum is like communism, it doesn't work. Myth 2.",
    "Description": "Explains why story points are often misunderstood in Scrum, clarifies their intended use, and offers practical advice for more effective Agile estimation and team collaboration.",
    "ResourceId": "l3NhlbM2gKM",
    "Url": "https://www.youtube.com/watch?v=l3NhlbM2gKM",
    "Date": "2023-10-24T11:00:39Z",
    "Captions": "One of the common myths in Scrum is kind of a proxy myth. This proxy myth is, you know, why do we spend so much time working on story points when story points measure complexity and not time? And then we have to figure out how many story points fit in a Sprint, right? And I 100% agree with that. That part is not a myth. The bit that's a myth is that story points are even a Scrum thing in the first place. They're not. Story points have nothing to do with Scrum. It never has, apart from as a practice, potentially a complimentary practice that teams choose to take on in order to get to an outcome. \n\nWhen you find complimentary practices are not adding value, you should be stopping doing them, not continuing with them. So if you're in that position where you find that story points are not adding value, great! Stop doing them and choose something else. Choose a different way. The guy that invented story points, or that is generally accredited with inventing story points, has a public apology online for creating them in the first place because of how they tend to be used within organisations as a pseudo proxy for time to beat developers around the head with. \n\nRight? They were originally invented as a reasonable way for developers to sit and have a conversation and figure out what they don't know. That's the purpose of story points. We can all get together. We maybe use another complimentary practice called planning poker, and all that really is, is we keep our cards to ourselves, right? We're not going to tell each other what story point we're going to pick, how complex, t-shirt sizes, right? Whatever you pick, how complex this thing is. \n\nAnd you've got one developer that says this is a small or a one, right? You've got four developers that say that this is a five or a medium, and then you've got one developer that says this is an extra large or a 21, right? And the idea is, what do they know that we don't, or what do we know that they don't? That's the purpose of story points and complexity conversations. It should be used almost solely during refinement in order to enable teams to right-size their backlog items and decide, do they fit in a Sprint? Do we understand them, or do we not? \n\nAfter that, delete the numbers. They're useless. Don't use them anymore. That's their purpose for that one context. Don't bring them into the wider context. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, add Scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Scrum is like communism, it doesn't work. Myth 1.",
    "Description": "Explains why Scrum events are not pointless meetings but structured opportunities for inspection, adaptation, and progress, clarifying common misconceptions about Scrum.",
    "ResourceId": "7O-LmzmxUkE",
    "Url": "https://www.youtube.com/watch?v=7O-LmzmxUkE",
    "Date": "2023-10-24T06:50:42Z",
    "Captions": "There's a myth in Scrum that you spend more time talking than doing. I see this quite a lot. People talking, usually people are using old school terminology. When you hear them talking about that, you hear them talking about ceremonies, right, rather than events. One of the main reasons why Scrum doesn't call the activities ceremonies is because it's ceremonies. We get together and nothing happens. It's a ceremony; it's something we do that's perhaps the same every time, and there's no actual outcome to a ceremony apart from maybe people have some jollies and they feel good.\n\nThe reason Scrum calls them events and also not meetings is something's supposed to happen there. Every single one of the Scrum events serves empiricism; that's their purpose, right? You're going to inspect something and adapt something. If you're not adapting, there's no point in being there. There's no point in having it; there's no point in doing it. Their purpose is to adapt.\n\nSo, for example, at your Sprint planning, you're inspecting your product backlog and your product goal, and you're adapting your Sprint backlog and your Sprint goal. That emerges through that conversation, right? But at the end of your Sprint planning, you should have a Sprint goal. You should have selected backlog items. What do the developers think best serves working towards the product goal? You should have some kind of a starter plan to complete them. If those three things don't exist at the end of Sprint planning, there was no point in having it. That's what it's there for, so that we understand what it is we're going to take into the next Sprint, so that we can communicate that perhaps with other people. What's our goal for this Sprint? What are we trying to achieve?\n\nHow do you get the stakeholders to actually turn up for the Sprint review? Well, you have to give them something that they're interested in coming and providing feedback on. That's your Sprint goal, right? And that's just one of the events in Scrum. Every single daily Scrum, it's only 15 minutes. How does that add up to a boatload of meetings? At most, 15 minutes per day where the team gets together and plans the next 24 hours. That's its purpose. You're inspecting your existing Sprint backlog, and you're adapting that Sprint backlog based on what you learned in the last 24 hours. You might have learned some stuff from actually working on the product, what can and cannot be done. You might have gained more information and insight from other stakeholders and collaborating with the business and doing analysis on what it is you're going to work on. That means that something that you've got in the Sprint needs to be taken out because it's no longer viable, or something else needs to be brought in because it becomes part of that story of what it is you're trying to achieve that Sprint.\n\nThat's your daily Scrum, right? It's not an elaborate status event; it's not a time that you're wasting. It's where you're maintaining the transparency that is required to be able to inspect and adapt. You're serving empiricism, and all of the Scrum events serve empiricism.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 Harbingers of the Agile apocalypse - Silence",
    "Description": "Explores how silence in agile teams signals disengagement, and offers strategies to boost stakeholder participation, open communication, and effective sprint reviews.",
    "ResourceId": "YuKD3WWFJNQ",
    "Url": "https://www.youtube.com/watch?v=YuKD3WWFJNQ",
    "Date": "2023-10-23T11:00:23Z",
    "Captions": "One of the signs of the agile apocalypse is silence. Quite often, this manifests in your Sprint reviews when you're trying to get engagement from stakeholders. Perhaps you can't even get your stakeholders to turn up. When they do turn up, you ask them for any feedback, and a tumbleweed floats past, and that's all the feedback you get. Perhaps when you ask for feedback, you already know before you ask that which person—the usually the loudest and most outgoing person—you know they're the one that's going to answer that question, and nobody else's feedback is going to be offered because they don't want to. Sometimes there's a little fear; if you're in a room with a lot of other people, your feedback is going to be invalid. There's fear that somebody else in the room might have a different idea than your idea, and they might be more senior, and you don't want to step on their toes by offering feedback that perhaps goes in the wrong direction. \n\nSo, it's very difficult to get that feedback, break the silence, and get people to actually talk about your products, talk about the direction of your products, talk about more than just the features that you've built. Even what are the things that the stakeholders that you have in the room understand about the business and the business choices that have happened since your last Sprint review? What do the stakeholders understand that we maybe don't understand about the market opportunities that are presenting themselves since the last time we had a Sprint review or that have been manifesting over a period of time, and suddenly they become important? This is all part of that North Star, that direction, as well as trying to break that cone of silence so we have good communication.\n\nQuite often, another way that silence manifests is all of the stakeholders that do turn up know they can go have a private chat with the product owner later and get their agenda heard. They can beat that product owner into doing things differently than they know other people in the room want to do things, or other people in the room know that some other direction is more important to the business, so they want to go browbeat that product owner privately so that they can get their agenda rather than the whole organisational agenda because that makes them look good, not the other people in the organisation. We don't care about them, right?\n\nSo how do you create, break that silence and get that engagement from people? You need to stop building the wrong thing. If you're building the wrong thing, stakeholders aren't going to turn up. I was working with a team in Norway, and the product owner didn't even turn up for the Sprint reviews. How do you think the team felt about the work that they were doing and the value that it provided to the business? So what did they pick at their Sprint planning? Whatever they felt like and they thought was cool to work on because nobody cares, so we may as well come up and care about the cool things we're working on, right? Rather than working on the right things, working on the things that they thought were cool. That's not who should be making those decisions. Those decisions should be informed decisions. \n\nThey're still making the decision about what it is they work on, but what bounds, what context are they making that decision? Making it based on what's cool for them to work on or what's right for the business and supporting the customers and the overall strategic direction of the product? So that silence has created that lack of engagement, lack of care in the product. If you do get people, stakeholders to turn up, build something they care about. That's how you get them in there. Ask them to come to offer advice. Stop having those side conversations. Right, product? You're going to have side conversations, but you product owners know the conversations that I'm talking about—those side conversations where you know you're going to get browbeaten, where somebody's just going to be spouting their agenda, not the organisational agenda. \n\nInstead of having those meetings in private, bring those discussions, bring those topics into the Sprint review where you've got more voices to be heard. The gestalt can look critically on that idea of let's serve this one part of the business at the detriment of the rest, and they can say, \"No, that's not a good idea because it's going to have this impact,\" and have that work for you rather than against you. So build up those ideas, have those conversations during the Sprint review. Break big groups down into small groups. I was recently at a Sprint review, and 60 people turned up. Right, there were 60 people at the Sprint review. Lots—it was quite a big team, right? Lots of teams working on the same product, so a lot of them were team members. But when they asked for feedback, there were maybe two people that spoke out of the 60 people in the room. Why would you bother having 60 people in the room if you didn't want to hear from 60 people in the room? That you didn't want a collaborative experience with 60 people in the room?\n\nSo do breakout rooms, use liberating structures, send people out to do small parts of that story. Perhaps take some stuff off the product backlog that you think might not be right and give little assignments out to smaller groups to go figure out what we could do better and what we could do next, and then bring it back and make it into a more cohesive story. There are all sorts of things you can do to break that cone of silence around value, around direction, around what we're actually doing. Discuss budgets and release schedules. Everybody on the team, everybody working on the product, everybody working with the product should understand those things because they will impact on the decisions that we make. We want people to make the best decisions possible, not be making decisions within that cone of silence. We're not going to talk about anything.\n\nSo make sure that you don't have silence on your teams, that you engage with people. Product owners, this is your accountability. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 Harbingers of the Agile apocalypse - Chaos",
    "Description": "Explores how chaos arises in agile transformations due to unclear vision and poor communication, and offers strategies for restoring alignment, clarity, and effective teamwork.",
    "ResourceId": "vhBsAXev014",
    "Url": "https://www.youtube.com/watch?v=vhBsAXev014",
    "Date": "2023-10-23T07:00:21Z",
    "Captions": "One of the seven signs of the agile apocalypse is chaos, and chaos seems to be the watchword of almost every organisation's digital transformation, agile transformation, whatever watchword transformation they're using at the moment. It comes out as kind of two things that resonate in chaos. One is about the work, and then one is about how we do the work. \n\nSo the one about the work is really about poor product ownership, which results in chaos. It results in chaos because if we've got no well-communicated goals, then everybody's able to go in whatever direction they like. If you think of trust and no trust, trust, autonomy, and alignment, where do you fit in that story in your organisation? Most organisations create high levels of alignment by having lots of rigorous project management things going on. They have milestones, and they have dates that you have to hit, and most of those dates are just somebody's decided what that date is. There's not a reason for that date; they've just decided it. \n\nBut it creates this bounded environment within which everybody moves forward. But when you remove the milestones and the Gantt charts and the deadlines, what would you expect to happen? If you don't fill that void with anything but chaos, right? Nobody knows what direction they're supposed to go, what needs to be done, when. How do we create that bounded environment in the agile space? It's very different from how we created it in the traditional management and traditional project management structure. \n\nSo the way we do that is, and we talk about in the product owner class, is vision, value, and validation. You need to create this core strategic direction so that everybody understands what direction they're going in. I talked about it recently in the evidence-based management class as well. You've got your strategic objective; that's your reach for your North Star. Your strategic objective is like a reach, and it's a bit far out. It's difficult for people to see how the work that they're doing every day connects to that story. \n\nSo you need some kind of intermediate strategic goal that brings that into something we think we can work towards. It's progress towards our North Star, but that gets us there. Then we can start thinking about what are we tactically going to do, what are our tactical goals, what are we going to do, what's our next step we're going to take towards that next destination in our journey towards our North Star, our outcome. \n\nThen we can start to see how the work we're doing every day, people doing the work, can see how the work they're doing every day connects to the tactical goal, connects to the intermediate strategic goal, and helps work towards fulfilling the overall strategic goal and North Star. With that connection, you enable all of those people at every level in your organisation, depending on what level goals they care about, to make decisions that best fulfil the vision and purpose of the organisation because they all understand and are going in the same direction. \n\nBut if you don't have that, if you don't provide that, and you take away the milestones and Gantt charts and reports, suddenly there's chaos. That's one way that chaos occurs. The other way I mentioned was in implementation chaos. This is the meta-information around how you do a digital, agile, DevOps, whatever thing you want to put in front of it, transformation, some kind of change in your organisation. This is really around poor communication. \n\nYou don't involve the people doing the work in the story that you're trying to tell, and you don't communicate that story back to them in a way that helps them understand, that continuously reinforces the story that we're trying to get to. What I see most organisations do is somebody really senior in the organisation sends out an email saying, \"We're going to move in this new direction; we're going to do this new thing,\" and that's it. They just magically expect things to happen. \n\nWhat really happens is every single person in your organisation interprets that email differently. Every single person then takes that interpretation, and over time, as they add more information to that interpretation, they all start going in slightly different directions. So even if from that one email everybody ended up going in the same direction, they start to fragment, and you end up with chaos because you've got loads of different people pulling the organisation in different directions. \n\nSo in order to create that, we're moving in this direction, just like the goals for what direction are we taking the product, what are we actually building, we also need goals on what do we want our organisational culture to look like, how are we measuring people in order to get them to go in that direction. A great joke in that space is if you give developers a bonus for the number of bugs that they find and fix in their code, all of your developers will end up writing themselves a very large bonus because they can just go add the problem that they can then fix and get the kudos for fixing it. \n\nIf you reward firefighters, you breed arsonists, right? If it's within that same package. So what you need to do instead is look at how are we measuring and incentivising people, right? Because the measures and incentives that you create in your organisation are the things that drive behaviours. We think it's the goals that we created over here, right? But if your measures and incentives are at odds with the goals, it's going to start pulling people in a different direction, perhaps in the opposite direction, because you've not actually changed the system. \n\nThe measures and incentives are part of the system within which everybody's operating. So you need to focus on how do we understand how those measures are impacting people's behaviours and continuously tweak those measures in order to maintain the direction and people working together towards that goal. Communicate everything effectively. You can't just say to everybody, \"We're going to do something new.\" No, you have to change the measures so they can see that we're doing something new. \n\nThen you have to continuously reinforce what it is we're doing, what direction we're going, why we're going there, how they can help, how they're contributing to the story, and you continually build that picture towards going in that new direction. Otherwise, you end up with chaos: chaos of building the wrong thing or chaos of just going in the wrong direction. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Conquering Sloth in Agile: 6 Signs Your Team Might Be Stalling",
    "Description": "Learn to spot six key signs of sloth in Agile teams, including missed deliveries, ignored feedback, rigid processes, and lack of adaptation, to improve true agility.",
    "ResourceId": "uCFIW_lEFuc",
    "Url": "https://www.youtube.com/watch?v=uCFIW_lEFuc",
    "Date": "2023-10-20T16:01:48Z",
    "Captions": "One of the seven deadly sins of Agile is sloth, and this manifests in a number of different ways with teams, with organisations, uh, with leadership all over the place. Um, one of the most common elements is just not bothering our ARS, actually doing the things that we say we're going to do. Right? We say we're doing Agile, but we don't deliver working product at the end of the Sprint. We say we're doing Agile, um, but we have long convoluted deployment processes which are not in control of the developers. We say we're doing Agile, um, but we don't have an ordered backlog. Right? All of these things are places where we say we're doing something, but really we're just kind of lazy and lying through our teeth in order to not have to do the work. Perhaps it's because somebody in leadership in the organisation has decided that thou shalt do Agile, and your product is not particularly suited to that model because it was built in a traditional... maybe it's got Mainframe and all kinds of crazy stuff in there. Maybe there are other reasons why it's not viable within the confines, the structure of your organisation, the system that you're in. Um, but I would much rather teams and people were honest and transparent with their companies and their organisations about what they can and cannot do, what is and is not Agile. \n\nUm, I really like there's a great article called \"Detecting Agile BS\" from the US Department of Defense, and if you search for it, you will find a great little workflow on it. It's one of my favourite things that I use in organisations. So here are six sloths, uh, things that organisations kind of say they do, um, or pretend that they're Agile, but they don't actually do these things. Uh, and this, I think these are great. \n\nSo, the first one is: are teams delivering working software to real users every iteration, including the first, and gathering feedback? That's like the first thing. That's almost Agile in a nutshell. Are we coming up with ideas, getting those ideas in front of customers, and getting that feedback? If you're not doing that, sloth. Right? You're not able to get things done. \n\nUh, the second one, and because this is the Department of Defense, right, is: is there a product charter laying down the mission, strategic goals, and do all members of the team understand how they contribute? Right? That's absolutely key. How can we expect people within the context of our product, of our teams, of our organisation to make good decisions about what it is that they need to do if they don't have all the information they need? Right? We're hiring smart, clever people, and then we're not empowering them to do the things that they need to do. Right? We're just not empowering them. \n\nUm, and that's part of we need to communicate with them, and if you don't communicate with them, sloth. If you don't actually do those things, you're being lazy. Right? Just do it. \n\nUh, the third one is feedback from users turned into concrete work items, um, on Sprint timelines shorter than one month. Right? So, are you getting things in front of your customers at least once per month? Um, and those... that shouldn't be that hard. Right? It shouldn't be that hard to engage with your customers, get parts of your product in front of your customers, and then get them to tell you what they think of it. Right? Gathering feedback from those users, that shouldn't be that hard, and if you're not doing it, sloth, because it's not that hard, you're just being lazy. \n\nUh, one that I already mentioned a little bit is the full ecosystem of your project Agile, i.e. Agile programming teams followed by linear bureaucratic deployments is a failure. Right? Why do you have linear bureaucratic deployments after your Agile team have done the work? Yeah, we might be able to make working product in two weeks, but how long does it take before that increment, that two weeks' worth of work, actually gets in front of real users so that you can close those feedback loops, break down those assumptions, validate what it is that you're creating, that it is actually value? And if that's too long, that's not Agile. If you look at the Agile Manifesto, it says ideally a shorter time frame, but only a few months between having an idea and getting it into production. \n\nUm, that should be the case. And then the fifth one: are teams empowered to change their requirements based on feedback? The people doing the work should be able to change and adapt the requirements that they're creating in the system, the things that they're building. We want to build more of the right things and less of the wrong things. We want to maximise the amount of work not done. All of those things require the people doing the work to be able to delete, add, or change things from the backlog as needed based on those interactions that we've already talked about with the customer. And if you're not doing that, sloth. Right? Why are you not doing that? Why is somebody not addressing the problems of why you can't do that? If your organisation is saying we want to do Agile, yeah, we want to get all the benefits, oh, but you can't change your requirements, you have to do everything that... here's the 300 things we need you to do. That's fundamentally not Agile. Welcome changing requirements, even late in development. These are just fundamental principles of agility. \n\nAnd then the last one, on the Department of Defense, you know, not well known for being an Agile organisation, but um, the last one on their list is: are teams empowered to change their process based on what they learn? So, not only changing the work that they're doing, but changing the way that they're doing the work. And why aren't your teams empowered to do that? Well, because people more senior can't be bothered with that. They just want to buy Agile from some vendor, install it, and then everybody just does it that way. That's not fundamentally how Agile works. Agile is about the emergent practices, the continuous change, emergence, and adaption of our processes, practices, and tools in order to be able to maximise the value delivered to the customer, the stakeholder, which may be the business themselves. Right? And without those abilities, we can't do that. \n\nThat I feel like these six things absolutely embody sloth. Right? If you're not able to do all of these things, you're not really that interested in moving towards agility. You're really not that interested in doing those things. It's lazy, it's inept. Get off your arse and fix it. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 harbingers of the Agile apocalypse - Judgement",
    "Description": "Explores how rigid, judgmental Agile practices stifle creativity and innovation, and advocates for principle-driven, adaptable approaches to foster true business agility.",
    "ResourceId": "FdQpGx-FW-0",
    "Url": "https://www.youtube.com/watch?v=FdQpGx-FW-0",
    "Date": "2023-10-20T11:00:13Z",
    "Captions": "One of the harbingers of the agile apocalypse is judgment, and this normally comes in the form of prescriptive ways of doing things. This could be organisational prescriptive ways of doing things, but quite often it's these top-down totalitarian prescriptive frameworks that tell organisations exactly what to do, when to do it, what practices to use. \n\nI understand why organisations and leaders love it. They don’t necessarily know any different, right? They don’t know what the impact is on the ground of a lot of these tools and things that people decide you’re all going to do it this way. They don’t understand the whole problem of you’re all going to do it this way. That’s fundamentally part of the problem; everybody doing the same thing at the same time is a factory, not a creative collaborative organisation. \n\nSo, these prescriptive ideas, whether those prescriptive ideas could be Scrum. I’ve worked with organisations where Scrum ends up in the contract: \"Thou shalt do Scrum,\" or it ends up as an organisational mandate: \"Everybody’s doing Scrum because they’ve been told to do Scrum.\" That’s stupid. Scrum might not be the right thing for every team. It might not be the right thing for every group in your organisation. Agility is not about Scrum. Business agility is about figuring out how you can effectively deliver the highest possible value to your customers. That’s what it’s about. Everything else is the tools you use to try and make that happen. \n\nOkay, so one of those tools in your toolbox might be Scrum. Another one might be Kanban. Another one might be Scrum and Kanban. There are all sorts of tools that you can have in your toolbox that your teams can choose to use. Don’t prescribe stories or story points. Don’t prescribe planning poker. Those things are great once or twice, maybe for a little bit, but they’re not the long-term solution to your problem. The long-term solution to your problem is not in rules; it’s not in prescription. \n\nRules beget judgment, right? People are going to judge you for breaking the rules or not following the rules, and \"Thou shalt follow here’s the Commandments you must follow in our organisation: Thou shalt do Scrum.\" Don’t covet your neighbour’s agility, right? Your other organisation’s agility. Don’t do those things because you will be judged. \n\nWhat we need instead of judgment is we need principles. What are the principles upon which you would like people in your organisation to make decisions? You create a set of principles for your organisation, for your ways of working. Be very careful that they don’t just become rules in disguise. You should have very few principles in your organisation. This is how we’re going to do business. Everybody should be honest, right? We want honesty in what we do. We want courage in what we do. We want openness and transparency in what it is that we do. These are principles that can help us make better decisions. \n\nEvery single person in your organisation is then an effective decision-maker. They understand; they have access to the data. They have access to the information they need in order to make those decisions. A great example of access to data is I was talking to some product owners from a car company, and I asked them, \"So how do you get access to the telemetry that’s collected from the cars?\" You know, not all cars have live telemetry, right? They might have, when you go in to take your car in for service, they plug in and download the telemetry, right? So it’s dumped into the system. But how do product owners and things get access to that telemetry? \n\nWell, at their organisation, it took six to eight months to get access to the telemetry for whatever request they made because of all the legal rules and procedures they had to follow in order to get there. Oh, but they did tell me a story about what happens in Tesla when a product owner wants access to the telemetry data. That’s all it takes. They just have full access, open and transparent within the organisation. All of the product owners have access to all of the data, and they can go slice and dice it however they like in order to help them understand what’s going on, what trends are happening, what faults are happening, what do we need to focus on in order to make better decisions. \n\nBut rules and procedures get in the way of people doing the work. Rules and procedures were great in the old school of organisations, traditional management organisations. You had a largely uneducated workforce. This is turn of the century Industrial Revolution thinking, right? You’ve got a largely uneducated workforce. They are not educationally or intellectually capable of making decisions about the future of your business. Therefore, we want to push all of those decisions up the organisation, and here’s the leadership cadre, the bosses who make all of the decisions, and the people on the ground just do what they’re told. \n\nSo we’re going to plan their work, we’re going to separate them into ability-based groups, and we’re going to tell them, and we’re going to train them only in those particular abilities that they’re going to do. That’s how we’ve ended up with marketing departments and sales departments and legal departments and engineering departments and testing departments and whatever other silos you’ve got in your organisation. They slow down the ability for you to do business. \n\nIn the old days, it was great, right? Because you had this group of people you could train them in that one thing; they just do that one thing, and our product goes through those gates. Those things happen, or it’s designed, and then the analysis happens, and then it’s coded, and then it’s tested, and then it’s deployed, right? It goes through that process. \n\nBut today, we don’t have the luxury of that amount of time. The markets move much faster, and those procedures that were designed to enshrine the business processes that we need in order to continue to move forward with a largely uneducated workforce are now getting in the way because you have a hugely educated, massively smart, engaged workforce. They’re looking at your rules and procedures and going, \"Why do I have to do it that way?\" That’s getting in the way of me delivering value for my company. That’s getting in the way of me taking advantage of a business opportunity that’s floating by, right? They can’t take advantage of it. \n\nWhat happens to you when you’re extremely frustrated with an activity? Do you continue to like that activity, or does it really annoy you, and maybe you want to leave that activity? That’s why your best, smartest people leave, because they don’t like working in those environments. You need to move towards principles based on the three key motivators of people: autonomy, mastery, and purpose. \n\nAutonomy, right? People need to feel like they’re in control of their own work, that they’re making decisions for the betterment of the organisation and are able to support and engage in the organisation in order for them to engage with your company. For that, you need principles, not rules and judgment. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 Harbingers of the Agile Apocalypse - Plague",
    "Description": "Explores the widespread issue of incompetent Agile coaches and Scrum Masters, its impact on teams and organisations, and practical steps to restore true Agile values.",
    "ResourceId": "UeisJt8U2_0",
    "Url": "https://www.youtube.com/watch?v=UeisJt8U2_0",
    "Date": "2023-10-20T07:00:23Z",
    "Captions": "So one of the harbingers of the agile apocalypse is plague. And what plague am I referring to? The plague of incompetent agile coaches and scrum masters. And yes, I'm using that word very specifically. I'm talking about those folks that have no clue or understanding about the work being done and yet seem to be elevated to a position where they are responsible for the effectiveness of the people doing that work. And they often, especially in large organizations that have a lot of hierarchy, have more powers than you would ideally like an agile coach or scrum master to have. And they wreak havoc and devastation in your organization by leveraging those powers.\n\nThis looks very much like... what's a good example? I worked with an organization in Seattle. I think they might have been actually in Portland; it was just that part of the world I was in. This organization had just fired their scrum master. Why had they fired their scrum master? Well, their scrum master had decided that if you're not standing up, you're not doing scrum, even though standing up has nothing to do with scrum. But if you're not standing up, you're not doing scrum.\n\nThe team had decided that they would sit during the daily scrum because they had a team member who was disabled and in a wheelchair, and they didn't want to tower over that person during the event. Which of those two options is the very epitome of scrum and agile in that mindset? It's the team that self-organised to pay respect to their teammate and had the courage to talk about it and decide on a way of doing something. That is the epitome of scrum and the scrum values. This scrum master, total charlatan, didn't have a clue what was really going on, focused on mechanical scrum and practices.\n\nAnd I'm seeing right now, this is quite topical because I am seeing a ton of posts about \"here's why agile's [___].\" What was the one today? \"Agile is a cancer\" or \"scrum is a cancer.\" I think it was \"scrum is a cancer.\" And he goes on to talk about why scrum is a cancer. Although, you know, that terminology has its own weight, right? But it was because it gives an excuse for leaders to tell teams what to do. It gives... you have to stand up during the daily scrum; you have too many meetings, right? Too many meetings.\n\nWhat were the other things? Man, there was a whole host of those things today. And there's been a number of posts that seem to go in waves. So this plague that affects scrum and agile in general is this mis... not even misunderstandings; they're just abject failures of competence. Abject failures of competence. These are people that have maybe never read the scrum guide, never kept up to date, never actually read the agile manifesto, don't actually understand what are the underlying principles that we're talking about here. And they just make decisions and do stuff based off nothing.\n\nAnd then you have the impact, right? What's the impact on the organization? What's the impact on the teams? You can see these posts from people that abjectly hate scrum or hate agile or just think that agile just doesn't work, right? And mostly when you ask them what are the things that you've seen that is the reason why agile doesn't work or scrum doesn't work or many of these things, they describe scenarios that are the very opposite of agility. Agile doesn't work because we all have to do story points and guarantee the number of stories delivered per sprint. These are things that are part of this plague.\n\nYou can see that I'm quite annoyed by this one. It annoys me every day. And I meet such awesome and amazing scrum masters and agile coaches every day who really understand what they're doing. They're lean agile practitioners, and they have a complete deep technical understanding of the processes, practices, and tools that are needed for the teams that they engage in and coach with for them to be as effective as possible at the job that they're doing. But unfortunately, for every one of those awesome coaches, there are ten people who decided yesterday to become a scrum master after their... I'm being a bit sarcastic... their arts degree, right? And they have no clue. They want to change their career and become a scrum master, and they have no clue about the work that the team does. They have really no clue and certainly no experience about how to engage with those teams.\n\nAnd because there is a shortage... this is a big rant because there's a shortage of qualified people in the industry. Most organizations, they need scrum masters; only two good ones apply, but they need five, so they hire three crap ones because that's who's available. We can do better. Organizations need to stop hiring for just their need; they need to hire for the quality of the people that they get as well. This is a good example of technical debt in organizations, and it's a great example of a plague affecting our entire industry and organizations.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 Harbingers of the Agile Apocalypse - Famine",
    "Description": "Explores how resource scarcity—like lack of trust, funding, tools, and training—undermines Agile teams, and offers strategies to empower and support organisational success.",
    "ResourceId": "W3H9z28g9R8",
    "Url": "https://www.youtube.com/watch?v=W3H9z28g9R8",
    "Date": "2023-10-19T15:00:30Z",
    "Captions": "One of the harbingers of the agile apocalypse is famine, and famine manifests in organisations by lacking something. You know, people, teams, groups, leaders, products. We don't have the things we need in order to be successful. Quite often, that's because of one of the other harbingers: the top-down management structure. We effectively don't have what we need. We're either starved of trust in our teams and our organisation, so people can't do the things that they need to do because nobody believes that they'll do it right. They might be starved for money, right? Quite often in organisations, you need somebody high enough in the organisation to approve the spending of money. \n\nBut what if that person's high enough in the organisation that they actually don't give a [__] about the problem? They actually don't care. They're just looking at their budget and going, \"It's not in my budget for this year, so no, I'm not going to sign off on that.\" Yeah, but what's the actual real cost of making that decision? What's the impact on the people doing the work, on the customer of making that decision? \"It's not in my budget for this year\" is not a good answer to that, and it results in that famine. We don't have the stuff we need. \n\nDo the people in your organisation have the training they need? I work with a couple of organisations in Spain where every single member of the organisation, every employee, has their own budget for training. They decide how they want to spend it. If they want to spend it on some agile training, or they want to group together and buy some training together, or they want to spend it on technical training or on whatever they want, they're able to spend it on whatever they want. It's their budget that they get to spend. They're not starved for things that they need; they have the ability to get the things that they need. \n\nHow do you do that in your organisation? I'm working with an organisation at the moment that I needed a piece of software as a consultant helping this organisation. In order to facilitate, I needed a licence for a particular piece of software, and I had to go on and request that licence. I made that request two and a half weeks ago. I escalated it a week ago. There was a little escalation button on the page where you can request it, so I escalated it after a week of nothing happening, and I still don't have a licence for that software. I still don't have access to that thing. \n\nWhat is the cost and impact of that delay? What is the cost and impact to the organisation of me not being able to provide the services that I could be providing to people inside of the organisation? What is the cost of all the people that I would be providing those services to that can't get those services because there's a fundamental piece of the puzzle missing? There's a blocker in the way of actually doing work. \n\nSo famine is all about those things that make sure that people don't have the things they need. It's not deliberate, right? These policies—somebody didn't go, \"Let's make sure people don't have the stuff they need.\" Nobody did that, right? They were looking at somebody at a level who's, I guess we would traditionally call them bean counters. The bean counters are looking at the amount of money something costs, and they want to restrict access to that thing so it doesn't cost more. This could be travel, this could be software, this could be training; it could be anything. \n\nBut who are the people that understand the most about what is needed in order to maximise the success of the organisation? A great example of this is one of the organisations that I worked with for training. They're a very big car manufacturer, and they had a circumstance in their organisation where a machine—I don't know what the machine was doing, but the machine was creating something for the production line for the cars, for the parts, right? And it was no longer operating in a way that it needed to operate. It was too old; no matter how much repair you did, it wasn't going to be able to actually do the things they had to do. \n\nA ton of workarounds to make it actually suit the needs of the business, and that machine really needed upgrading to the newer version of that machine that supported more capability, that was able to do more stuff, more cheaply, more effectively, faster. The person who runs the machine followed the business procedures and wrote the business case for it, sent it up the chain, and that's it. It got to somebody who was looking at their budget and said, \"Nope, I don't have $2 million in my budget for this new machine, so scratch it off.\" \n\nWhen they finally figured out that one of the major problems they had was this machine was making defective and inaccurate parts, they found that it actually cost the organisation over a billion dollars in lost revenue, in having to rework things, in fixing stuff in production. If you can imagine if you have to recall a car or a model of car because something's wrong with it fundamentally, what's that going to cost you down the line? But it wasn't in this block's budget. \n\nBut do you think that block had the power to approve a billion-dollar loss for the company? No, no. Nobody has that power to be able to do that, but they can block the thing that might result if it's blocked. It might result in that. So what they did as an organisation, this particular organisation, is they pushed responsibility for spending money down to the people who were best placed to make the decision. \n\nAnybody in the organisation, no matter how below you are, can approve any needed expense of any amount for doing your job. You might need to validate it afterwards, right? You need to—it's almost like you're pre-approved to expense it, but then you still have to write the business case. You still have to say, \"This is why we bought this. This is what it was for. This is what it was needed. This was the impact.\" You still have to do all of those due diligence things, but you're not blocked from solving the problem. \n\nWhat's causing famine in your organisation? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 harbingers of the Agile apocalypse- War",
    "Description": "Explores how unmanaged conflict in agile teams can escalate from healthy debate to destructive division, and offers strategies for resolving disputes and fostering collaboration.",
    "ResourceId": "wHGw1vmudNA",
    "Url": "https://www.youtube.com/watch?v=wHGw1vmudNA",
    "Date": "2023-10-19T13:00:46Z",
    "Captions": "The next harbinger of the agile apocalypse is war. War manifests in organisations as a distrust. It manifests as politics. It manifests as disagreement and effectively results in conflict. There are multiple levels of conflict that happen within your organisation. You might start with just a simple dispute, right? We're not sure how to do something; we're having a conversation. Those things are kind of easy, easier to work through. \n\nAs you move up, you get to more conflict, more things happening, more disagreement. It becomes not about what we can do to move forward, but it becomes what I can do to make you lose. That's when you transition from a collaborative environment where you do want constructive disagreement. You want constructive arguments because I firmly believe that arguments and discussion and debate are like the flint on steel that generate the sparks of ideas that start the fires in your organisation that enact change, that enact new products, enact new ideas. \n\nYou need some level of conflict within your organisation, but as soon as it moves to the point where I win and you lose, where my job becomes not winning but making sure you lose because I don't like what you're doing, that's when it escalates into all-out war. It becomes not about collaboratively moving forward; it becomes about winning. Winning isn't always the right answer. \n\nDon't let your organisation degenerate into war. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 Harbingers of the Agile apocalypse - Organizational Structure",
    "Description": "Explores how rigid, hierarchical structures hinder organisational agility and offers practical strategies for shifting to decentralised, empowered, agile teams.",
    "ResourceId": "56hWAHhbrvs",
    "Url": "https://www.youtube.com/watch?v=56hWAHhbrvs",
    "Date": "2023-10-19T11:00:06Z",
    "Captions": "So the first in our series of harbingers of the agile apocalypse is really about the Antichrist. What is the Antichrist of agile? I think if you've been following me at all, you'll know exactly what my answer is going to be, and that's that Alpha organizational structure—the traditional management structure in organizations—that creates environments within which you have that steering from the top. \n\nSo you've got the market at the bottom, where we're interacting directly between the people in the company and the customers, and then you've got this hierarchy up the organization to somebody who's the decision maker or makes decisions or needs approval for something or whatever that is. That's one of the facets of the Alpha organization where that type of model inhibits the ability of the organization to move towards agility. \n\nYou can absolutely get little wins, right? You can make things a little bit better. You can improve your time to market. You can improve the ability of the teams to deliver. A team could be doing continuous delivery. You can do all of those things to make the team as effective as possible, but ultimately, within that traditional organizational structure, you're not going to be able to have a product owner who decides what it is we're working on, that looks at market, looks at budget, engages with customers, decides what and when to release, decides what we're going to build, where are we going to invest money in this product, where are we not going to invest money, what's our pricing strategy for our product. \n\nThose are all things that are often decided far higher up the organization. So as organizations flow from the Alpha model of top-down commanding control—I mean, it's not, it's commanding control oversimplifying it, right?—but that top-down steering-based style towards a more beta, democratized, self-organizing format, more of a sales-based structure that is able to interact directly with the market, as they move towards that, you'll start to see more and more benefits in the organization. \n\nBut what happens in most organizations is the Antichrist blocks it. This Alpha top-down organization where somebody says, \"No, I'm not going to approve that,\" or \"You need to get my approval for all of those things,\" or \"I don't know any of these things,\" that just get in the way and mean that the organization never crosses that line and starts its journey towards decentralization. They never start making that journey towards decentralization because we work this way; this is our hierarchy; this is how we do things. And that is the killer to agile in your organization. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Does 'starting with why' - Simon Sinek - really matter?",
    "Description": "Explores how defining purpose and starting with 'why' boosts motivation, engagement, and success in Agile teams, drawing on insights from Simon Sinek and Dan Pink.",
    "ResourceId": "sAKCLQ38GzA",
    "Url": "https://www.youtube.com/watch?v=sAKCLQ38GzA",
    "Date": "2023-10-19T08:22:23Z",
    "Captions": "Simon Sinek talks about starting with why. It's a whole book on that topic, and the question is, does it really matter? Like, who gives a crap? I think the big piece here we need for us to understand is we need to bring in something else. Start with why is great, but I think the underlying reasons are a little bit different, and that's that what motivates people. \n\nSo now we're talking about if you want to look at Drive by Dan Pink. What Drive talks about is what are the underlying things that motivate people. Now, we all know the extrinsic, the outside motivators of people. You know, you want more money, you want that cool new PlayStation game. So, stuff, money stuff, a roof over your head, food, right? Kids' education. These are all things that are extrinsic motivators. They come in from the outside, and they're the most important thing if they're a problem, right? If you're worried about putting food on the table, then money is going to be your most important thing. If you're worried about putting a roof over your kid's head or your head, then money is going to be your most important thing to get that problem solved. \n\nSo that's my focus. But once people are earning enough that those things are dealt with, right? They're resolved. We've resolved all of those extrinsic, or generally resolved all of those extrinsic motivators. Then more money is not something that motivates people. If it is, right? Because in some organizations, they have that culture where money's the motivator. Think of, you know, I'm thinking of stocks and shares or sales or whatever. They've turned it into a game, right? They've turned being the best salesperson or making the most money or beating the quota. It's not actually about the money anymore; it's about the points. It's about the game. \n\nBut if you take all of those things off the table and you don't have that weird dysfunctional game culture, which probably works quite well in sales, right? But is still dysfunctional game culture, then the underlying intrinsic motivators, the stuff that comes from the inside of you, is three things: autonomy, mastery, and purpose. Right? Autonomy. We want to feel like we're in control of our destiny, right? We choose how we do things. We choose where we go. We choose who we work for, right? All of those types of things. \n\nAnd then we've got mastery. I don't know anybody who gets up every morning and thinks they want to do a worse job today than they did yesterday. Most people want to get better at their job. They want to learn more about the thing they're doing. Again, remember we've taken that purely financial motivation off the table. We've got enough money to not worry about those things. So then our motivation becomes mastery, right? \n\nA way that money still sits on the table is that Taylor and Gantt, Frederick Winslow Taylor and Henry Gantt, came up with this ideology around paying people less than they need to survive, and then they have to work really hard to get the bonus in order to go above that survival line, right? That's, you're maintaining, your organization is deliberately and explicitly maintaining people below that line in order to artificially make money the motivating factor. \n\nSo that's what the focus is: money, money, money, money, money. Because maybe we've got lots of money; we're a bank, right? So we can throw money at people and get more stuff. All the other stuff's hard. Autonomy, mastery, and purpose is hard, right? Money's easy. So let's make money the point by paying them less, right? That's quite a common strategy. I worked at a company a while ago where they paid about 10% below industry standard for wages, but there was a 50% bonus scheme, right? Or was it 20% below? So you felt the pinch on the base wages. You could just make things meet, but only barely. But then at the end of the year, you got that 50% bonus if the company did well. \n\nThat might be called golden handcuffs. There are all kinds of things around that. But if we take that off the table, mastery, doing the best job you possibly can, becomes more of a motivator than money. Would you rather have people looking for their next paycheck or being motivated to be the best they can possibly be at that job? Right? So we've got autonomy and mastery, and the last one is purpose. \n\nAnd that's where we jump into this start with why, right? Purpose is, do you understand how your work contributes to some greater goal that you care about? Right? The greater goal is also a book on this topic, Start With Why. Why are we doing the thing we're doing? What am I then doing right now to help visualise this why? And when you start focusing on that why, right? Why we're doing the thing we're doing, what is it we're trying to achieve? The outcome of that is visions and goals. \n\nAnd when you move from traditional project-based model towards a product-based model, we start to remove certain things from that process, right? We start removing milestones and deliverables, and those things, those Gantt charts, those things that enshrine that traditional project management process. But what the mistake lots of organizations make is they don't replace it with anything. They have no why, they have no motivation, they have no goals, they have no outcomes that the team's trying to achieve. \n\nSo if you look up team, right? For example, if you look up team in the dictionary, it says a group of people working together towards a common goal. So if you don't have any why, if you don't have any goal, if you don't have any outcome that the team is trying to achieve, or even the organization is trying to achieve, how do we have teams? How could we possibly have teams? How do they, what are they working together towards, right? What are they collaborating on towards? So they have no purpose, right? \n\nDoes this knock-on effect? And we talk about this in the product owner, the PSM P product owner class, and we talk about replacing these traditional elements with vision, value, and validation, right? Vision: where are we going? What are we trying to achieve? That you'll get that from your why, right? So the why is at the top. Why are we doing what we do? Create a vision. That's how we're going to get to this why. If we enact this vision, we should get to this why we're here. \n\nAnd then what's the value we're trying to achieve? And that should inform your goals, right? What's the next big goal we're trying to achieve? And perhaps you've got a set of goals or hierarchies or OKRs or SMART or whatever it is you're using to figure those out. But the way we know we've got the right thing is that the people doing the work can feel a connection from the work that they're doing every day through those, however you're defining your goals towards the vision and the why we're here. \n\nWhy are we a company? Why do we exist? And in fact, if you do that, you engage your customers as well because they see your purpose. They see every employee working towards that common purpose, and that common purpose becomes that thing that makes customers look at your organization, \"Wow, they're doing great things. They're going in this direction.\" \n\nAnd that's fundamentally what Apple has achieved or did achieve many years ago. They were able to achieve this almost godlike status that customers believed in their journey, right? They believed in their journey, and it wasn't because they had some vision that the customers liked. It's because the whole organisation, every employee of the organisation, every manager in the organisation, every leader in the organisation are working together towards this common goal. \n\nSo make sure you understand why. Why is your company there? Why are you doing this work? What do you get out of it? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Are there any Scrum courses that teach you how to scale Scrum?",
    "Description": "Learn how to scale Scrum by tailoring frameworks to your organisation, focusing on dependency management, alignment, and iterative improvement for effective agile delivery.",
    "ResourceId": "vubnDXYXiL0",
    "Url": "https://www.youtube.com/watch?v=vubnDXYXiL0",
    "Date": "2023-10-18T07:00:23Z",
    "Captions": "The question is, are there any Scrum courses that teach you how to scale? And the answer is no, there's not. There's not any Scrum courses that teach you how to scale, but there are Scrum courses that help you understand the tools and techniques that you can use to build your own scaling framework. That's probably the best way to describe it.\n\nEvery successful organisation that I've seen operating at scale, I've worked with organisations with 600 people working on one product. I've worked with organisations that have four and a half thousand people working on one product. These are all scaling situations. Those are mega scaling situations. For most organisations, you're probably looking at just two or three or maybe four or five Scrum teams working together delivering value, but they have to deliver it together.\n\nI'm working on an engagement right now where we've got about 13 teams working together on one common outcome. And how do you scale that? The answer is that there is no prescribed way to scale. You have to find a way that works for your organisation.\n\nSo the course that we have, scaled professional Scrum, is from Scrum.org and it focuses on a little bit around a framework, right? But that's a tiny, tiny, tiny, tiny part of this course. The Nexus framework that we talk about is not really much more than Scrum, and it talks about three to nine teams working together on one outcome. But what it does heavily focus on is about 50 different practices that you can use to help you build your own scaling framework.\n\nJust like Scrum is not a method for delivering software, Scrum is a framework around which you can build your own method for delivering software. In the same way, Nexus is not a method for delivering software; it's a framework, a scaffolding, so that we make sure that we're not missing something as we continue to build and iterate on our own framework. What practices are going to work for you in building your scaling framework for your teams in your organisation?\n\nPlease do not start with everything in the kitchen sink. That's a bad place to start. You want to start small. What's the smallest thing we can improve and change? And then what's the next thing after that? What's the next thing after that to make things a little bit better? And you'll build a framework that's suited specifically for the product, specifically for the organisation that you're in, that entity of your organisation.\n\nSo that's a lot of work, right? The scaling class that we have is not going to teach you how to install a scaling framework in your organisation. It's going to teach you the foundations of you being able to build your own scaling framework that fits your organisation like a glove. I think that is the best way to enable scaling.\n\nThere's a little bit of a kickstart; there are some things that are definitely very common. If you're interested, the two things that you really need to focus on are dependency management. That's the killer for most organisations, so we spend a ton of time talking about and dealing with dependency management. The other one is alignment—alignment between your product, the organisation, and the people. You need alignment there; that things smoothly flow through that system. If the architecture is different from the way you organise the people, the architecture of your product is different from the way you organise the people, it's going to generate friction.\n\nSo the tools and techniques that we deliver in the course, about 50 different practices, we might not talk about all of them, but there are 50 different practices in the pot. They are all there to help you figure out how to best scale your product and your teams for your organisation.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—Agile, Scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is the one thing that no Agile team can survive?",
    "Description": "Explores how a culture of contempt undermines Agile teams, its causes, impact on morale and productivity, and practical steps leaders can take to build a positive, inclusive culture.",
    "ResourceId": "c0ncdBixyfo",
    "Url": "https://www.youtube.com/watch?v=c0ncdBixyfo",
    "Date": "2023-10-17T11:00:23Z",
    "Captions": "A common thing that I see happening in Scrum teams and any product teams, to be honest, any product teams, is that they have contempt. They have contempt for their leadership, they have contempt for their company, they have contempt for their product, they have contempt for their customers, and they have contempt for the outcomes. This is a little bit more than they just don't care; it's that they actively dislike, have disdain for choices that are made. This is largely, I think, because those choices are made in spite of their opinions and their understanding of the product and the direction that the company needs to go. Choices are being made without their support—input might be the right words. They don't feel like they're listened to on their teams or as part of their organisation, and that seems to be a trend of traditional organisations. \n\nWe're just going to steer from the top; therefore, we actually don't care what the people on the ground say or do or understand. That's irrelevant. We're making the decisions at the top, and unfortunately, it's the people on the ground that tend to be closest to the market. It's the people at the top that tend to be furthest away from the market, and this constant ignoring of the realities of the market, the realities of the situation, the realities of the product, the realities of the quality of the product breeds contempt in the people that are doing the work for the organisation they work for. \n\nA great example is that I used to work for an organisation in the UK, pretty near to where I live. This was back when I was an employee, and I think it was one of the last employee jobs I had. There was absolute, abject, and constant contempt by every single employee for the organisation they worked for. So much so that they had a nickname for the company. The company at the time—I don't think it exists anymore—was called Intelligent Finance. It was one of the first internet banks, but the nickname that the employees had, at least within the bounds of what I was interacting with for the organisation they worked for, was that they changed the \"Intelligent\" to \"Incompetent\" and the \"F\" in Finance to a Scottish term for somebody who's not very smart. \n\nIf you're going to think of your company as incompetent, what does that mean for the attitude and investment that people bring to work every day? It's going to mean that it's reduced or doesn't even exist. There were a number of things that kind of led to that feeling. I remember while I was there, there was a new CIO for the organisation who admitted that he had trouble with email. This is the Chief Information Officer for the organisation admitting that he struggled to leverage email as a tool. You can't make that up. \n\nThe guy I sat next to, a user experience person, admitted to me that he felt like he was unemployable because he'd worked there for four years and not done anything new. Think about those things. This was back in 2005 or 2006, so we're pretty far into Windows 2000, pretty far into the .NET Framework and all of those capabilities. I had an NT4 workstation as a .NET developer. NT4 does not support .NET, so it took me weeks to get a badge, and then I had to request, using my badge, a machine to be installed under my desk that ran Windows 2000 that I could then remote into from my desktop. \n\nThat disconnect—that's the focus here. That disconnect between what the people are doing and what the organisation believes is happening in the direction they believe that they're going is the problem that creates that kind of disgust, contempt for the organisation that people work for. They don't believe that it's going anywhere; they don't believe that they're just there for the paycheck, and that's it. I quit. I was the shortest employee ever at this organisation. I quit after six weeks. I did not want to exist in that culture of contempt for their organisation. \n\nOne of my favourite sayings is, \"Change your company or change your company.\" So I went with my feet and walked out the door. What is your organisational culture? If you're in leadership, how do the people on the ground see your organisation? Do they believe in what you're doing? Do they feel like they're engaged and involved in what it is you're trying to achieve? Do they feel listened to? These are all the things that create a group of people that are engaged and want to see the organisation succeed. \n\nUnhappy, sad people don't build amazing products; they build unhappy, sad products. One of the core responsibilities and accountabilities of leadership is to create a happy, engaged workforce that wants the organisation to succeed, and you can't do that by just telling people what to do. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—Agile, Scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 deadly sins of Agile: Wrath",
    "Description": "Explores how blame and intolerance for mistakes harm Agile teams, and offers strategies to replace blame with accountability, learning, and a safer team culture.",
    "ResourceId": "U18nA0YFgu0",
    "Url": "https://www.youtube.com/watch?v=U18nA0YFgu0",
    "Date": "2023-10-16T11:00:31Z",
    "Captions": "One of the seven deadly sins of Agile is wrath. Wrath occurs in many different forms in teams working in organisations. Most often, it's the inability for us to do things wrong. It's the inability for an organisation to accept that we're not going to do things right every time.\n\nThis can kind of manifest in an example from recently. We need to create some procedures and practices around doing a deployment. The team that I've been working with wants to create, \"Here's what we think is going to work, let's try that,\" and then as we figure out more, we can iterate on this policy and procedure and get it to be what we need it to be in order to be successfully in production. Then we can reuse that as we go for future applications, right? Future things that we're doing.\n\nBut the other side didn't want to do that. They wanted you to create your final draft, we'll take that, we'll run it around the hundred people that need to go see it, and we'll create a spreadsheet with all of the things wrong with it. Here's the things wrong with it that you have to go fix before we can approve it, right? That approval process is wrath. You can't be wrong, therefore the end result needs approved before you can do it because if it's approved, it's now no longer your accountability, so we're not going to blame you, right? \n\nSo it's a blame culture technique. It's going to run up the chain, get approved, and then whoever's approved it at the top, it'll be beneath them to solve the problem anyway. So if something goes wrong, \"Oh, it's not the people down here's fault because it was approved. Go up. Who approved it? Oh, the CEO approved it. Well, okay then, well it was wrong, whatever.\" Right? So there's no accountability. A lack of accountability results in wrath going on in the organisation, and I think this manifests in lots of different ways. I think that's the core thing, but it manifests in lots of different ways.\n\nOne of them that I've seen happen with a team was during a Sprint review. The team was demonstrating their product and features to the stakeholders, and one of the stakeholders asked the team, \"Why did you build it that way?\" in a kind of accusatory tone, like, \"Why did you build it that way?\" \n\nWhat I would expect to happen would be that the product owner would take accountability for the value delivered in the team, and they would get out in front of that and say, \"Well, these are the decisions that we made. We can always go back and change them,\" blah blah blah. That's taking accountability. But no, that's not what they did. Wrath. They passed the buck, and the product owner turned to the team and said, \"No, why did you build it that way?\" \n\nThat's not taking accountability, and I think wrath is a big reason. I don't want it to be my fault; it needs to be somebody else's fault. Otherwise, something will land on me. I'll get covered in the poop from the mistake that happens. I think that lack of mistakes is a huge part of that story. \n\nSo don't let your organisational culture of wrath create this environment where nobody will take accountability. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Quotes: Dictatorship vs Democracy",
    "Description": "Compares dictatorship and democracy in Agile leadership, highlighting the need to balance clear direction with team collaboration for better decisions and engagement.",
    "ResourceId": "utI-1HVpeSU",
    "Url": "https://www.youtube.com/watch?v=utI-1HVpeSU",
    "Date": "2023-10-15T07:00:31Z",
    "Captions": "Dictatorship vs Democracy. Dictatorship is absolutely fantastic for getting what you want done. The difficulty is what you want is not necessarily what everybody else wants, and it's not necessarily what the right thing is. What we've kind of found, lots of papers and research around this, is that groups of people collaborating towards a common goal come up with better ideas than one individual specialist alone. So democracy versus dictatorship is probably more somewhere in the middle; someone to set strategic direction, and then a bunch of folks who are going to collaboratively work towards it."
  },
  {
    "Title": "Quotes: Less is More. True or False?",
    "Description": "Explores how applying 'less is more' in Agile boosts productivity and quality by focusing on high-value tasks, reducing waste, and streamlining team workflows.",
    "ResourceId": "V88FjP9f7_0",
    "Url": "https://www.youtube.com/watch?v=V88FjP9f7_0",
    "Date": "2023-10-14T07:00:13Z",
    "Captions": "Phrase less is more does apply in the agile space. It really does, and Kanban as well. \n\nSo, doing less to do more is really important. One of the core concepts of the Agile Manifesto is maximising the amount of work not done. \n\nSo, let’s not do stuff that's not of any value. But if you can focus in on the work that's of value and do more, that would be even better."
  },
  {
    "Title": "Quotes: You can't connect the dots looking forward; you can only connect them looking backwards. Steve Jobs",
    "Description": "Explores how reflecting on past experiences, as Steve Jobs advised, guides Agile teams in making informed, adaptive decisions and continuous improvements.",
    "ResourceId": "hj31XHbmWbA",
    "Url": "https://www.youtube.com/watch?v=hj31XHbmWbA",
    "Date": "2023-10-13T11:00:40Z",
    "Captions": "Steve Jobs said you can't connect the dots looking forward. You can only connect them looking backwards. And he's absolutely correct. Any dots that you connect looking forward into the future are based on assumptions, are based on probabilities. Maybe it will happen, maybe it won't. But what we can do to help get a greater inform of the future, to help inform us more about the future, is to look at the past. Look at the things that have happened in the products that we have, in the teams that we've got, and that will help inform our choices moving forward. But we still need to validate and check that they're not bad ideas."
  },
  {
    "Title": "7 deadly sins of Agile: Pride",
    "Description": "Explores how unchecked pride can harm Agile teams, stressing data-driven decisions, learning from failure, and balancing confidence with humility for real customer value.",
    "ResourceId": "BDFrmCV_c68",
    "Url": "https://www.youtube.com/watch?v=BDFrmCV_c68",
    "Date": "2023-10-13T07:00:05Z",
    "Captions": "One of the seven deadly sins of Agile is pride. Now, you do want to take pride in your work. We all want to do good things. We want to believe that the things that we create are valued. But I think the pride that's the sin part is blind pride. You're taking pride in something without actually measuring its outcome. Right? We talk about this all the time for product owners. Don't just build stuff willy-nilly. You need to collect the data, the telemetry, the analysis. You have to do hypothesis. You have to create the hypothesis: \"I think this thing, if I build it, is going to add value.\" You create it, and you don't just assume that it's going to make the value that you think it is. That's pride talking. You need to analyse the data and figure out if that actually did provide the value you're expecting. And you need to stop investing in something that isn't providing the return that you're expecting it to do.\n\nAnother good example of that is H Satia writing down the cost of Windows Phone, writing off Nokia for £8 billion. Sometimes you have to swallow your pride and not sink more money into something that's not going to provide a return, and you just have to stop. I used to work at a bank in the UK, near Edinburgh, and they created this massive piece of software that basically all it did was create forms for customers to fill out. But it was the most convoluted, unusable, unwieldy... I don't know, I'm trying to think of more words to describe the ridiculousness of this software. It didn't provide the features that they actually needed, but they'd spent £2 million on building it, so they must use it. We must continue to use it. That's that sunk cost fallacy, right? Which I think is very closely related to pride. \"Well, we've invested this much money; it must be awesome, so we must use it.\" And those are assumptions.\n\nYeah, I think pride is how come we assume stuff. We assume lots of things. The product owner assuming that the features, the ideas that they have are good ones, right? The market doesn't always agree. Developers building things in a way that entertains them rather than that actually focuses on the value delivered to the business. I've been guilty of that many times, of working on features because they were fun, not because they provided any value to the customer. I've done that a ton. So you need to be really careful that you don't become too prideful, make assumptions about the products and capabilities that you're building, the code that you're writing, the stories that you tell in such a way that it clouds your view of what's really going on. Right? Because then all you're looking at is vanity metrics. You're missing out on what's really going on. So don't be so prideful that you miss out on what's really going on.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Quotes: In the past the man has been first; in the future the system must be first. Frederick Winslow Taylor",
    "Description": "Explores the shift from people to systems in work, the impact on Agile practices, and the importance of balancing efficient systems with human collaboration.",
    "ResourceId": "KX1xViey_BA",
    "Url": "https://www.youtube.com/watch?v=KX1xViey_BA",
    "Date": "2023-10-12T11:00:15Z",
    "Captions": "So during the Industrial Revolution, the focus really moved from people doing work to systems outputting stuff. I think that was an important move that was valuable. Frederick Winst Taylor said, \"In the past, the man was first and in the future, the system must be first.\" That's kind of still true, but we need to do more; we need to do better. When the system gets in the way of people and collaboration and actually doing stuff, that's when you know that the system is wrong and the system needs fixing. There are no people problems; there are only system problems."
  },
  {
    "Title": "When is an APS course appropriate for a scrum team?",
    "Description": "Explains when an Applied Professional Scrum (APS) course benefits Scrum teams, helping them identify and remove ineffective practices to improve Agile performance.",
    "ResourceId": "HrJMsZZQl_g",
    "Url": "https://www.youtube.com/watch?v=HrJMsZZQl_g",
    "Date": "2023-10-12T08:32:45Z",
    "Captions": "An APS class is appropriate for a Scrum team if they are, in fact, a Scrum team. Right? That's in my book. If you're a Scrum team, then the APS class is a great way to both get started and get those barnacles off your ship. But also, I think there's a difference between the traditional APS class all the way through to the immersive APS class. \n\nSo, if you think about the traditional APS class, it's usually two full days or four consecutive half days. That's usually the traditional format, and that's really appropriate when, man, we just don't have time as an organization to really invest in our change. We just need a quick punch, right? A quick one-two. Let's get started, let's get going, let's solve a couple of those problems. \n\nYou're probably not going to solve a lot of the problems, right? From the class, the people that are attending will pick particular things that they're like, \"That's the thing that really annoys me,\" and they'll help you fix that. It'll probably be only a couple of things, but that's still valuable, right? Super valuable in organisations that are getting started. \n\nThe immersive class is more the longer-term investment in change for your team and your organisation. It enables you to have a continuously adaptive learning process so that you can close those feedback loops and have that double-loop learning, right? So that you can get feedback on the things that you tried. \n\nIf you're doing it as an APS, your whole team can get feedback rather than it being an individual assignment, which a lot of the other immersive classes have. If you're doing it as a private class inside of your organisation, it's more like it's a team assignment. What is your team going to try this week to help them be more effective? What are they going to try next week to be more effective? \n\nAll come back together. Let's have a retrospective, right? A debrief on, \"We tried this. Did it work out? Could we have done better? Is there stuff we want to keep? Stuff we want to stop doing?\" Right? And you can then continuously, over 10 weeks, improve the capability of your team, identify some of the impediments in your organisation as you go through, and perhaps you can fix them during the class. \n\nGetting feedback from the trainer, the trainer providing some consulting for your organisation to help them deal with some of those issues, that's really what the APS class is appropriate for. Any team, if you want a hard one-two, let's get some stuff sorted, get some crap out of my team's way. \n\nThe probably the two-day APS class in a private company is the one to go to. But if you really want to solve as many problems as you possibly can within your organisation, have as much learning as you possibly can within your organisation, and close as many of those feedback loops, right? Have it in as empirical a process as you can, then I would definitely suggest the immersive APS. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 deadly sins of Agile: Lust",
    "Description": "Explores why Agile transformation requires genuine commitment and adaptation, warning against quick fixes and emphasising the need for a tailored, organisation-specific approach.",
    "ResourceId": "RBZFAxEUQC4",
    "Url": "https://www.youtube.com/watch?v=RBZFAxEUQC4",
    "Date": "2023-10-12T07:00:12Z",
    "Captions": "One of the seven deadly sins of agile is lust. Loads of organisations are talking about agile transformation, digital transformation, whatever transformation. They want something different because they've realised that the markets have changed. Right, it's taken them a long time to realise the markets have changed. They changed years ago. Right, in fact, the 1930s was when the market started to change. The 1970s, they were totally changed, and it's taken until now for a lot of companies to actually realise, \"Oh, stuff's changed. What's going on?\" Right, why isn't our old processes and systems working? \n\nSo now they're looking around for something new. They've got that, I was going to say, seven-year itch, right? But it's the 70E itch, and they're looking around for new processes and practices that they can use. They see this agile thing doing really well, and they want it. Right, they want it desperately, and they don't really want to do the work for it. They just want to buy it. I think there must be a use for that, but I think I'll stay away from it. They just want to buy this thing. They don't want to actually spend the effort and the time and the energy to figure out what it means for them and their business. They just want somebody else to come in and install it. They just want to pay somebody to come in and do it for them. Right, that's what they want to do.\n\nAnd that's why you see a lot of organisations bringing in, you know, the big four consulting companies. You see McKinsey and Accenture and Boston Consulting Group coming in, giving advice. But the problem is they're giving advice based on all of these other big organisational transformations. There is no precedent within your organisation for agile. You can't just look at what somebody else is doing and lust after it and bring it into your organisation. You need to build your own unique way of doing things over time and actually do the work to get there. \n\nAnd that's why you can't just lust after this agile thing. You need to do the work to bring it into your organisation. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Quotes: Fake it until you make it",
    "Description": "Explores when \"fake it till you make it\" works or fails in Agile teams, stressing the need for real expertise, coaching, and continuous learning over mere pretence.",
    "ResourceId": "ArVDYRCKpOE",
    "Url": "https://www.youtube.com/watch?v=ArVDYRCKpOE",
    "Date": "2023-10-11T15:00:13Z",
    "Captions": "Fake it till you make it. Fake it till you make it. Oh, but that, yeah, bake it till you make it has its limitations. You can, if you have some knowledge and you're missing something, right, you're missing a small piece, you can, uh, uh, uh, fake it till you make it. You can do the thing, like learn as you're going and figure out how to do it better. But if you were, for example, I wouldn't want my neurosurgeon faking it till they make it. I wouldn't want, uh, uh, my plasterer that I'm hiring to do the walls of my house faking it till they make it. Hire expertise, but those experts should be coaching and helping those that don't have skills, uh, or don't have the skills but want them to make them better."
  },
  {
    "Title": "7 Deadly Sins of Agile: Greed",
    "Description": "Explores how greed in Agile leads to overwork and reduced value, offering strategies for value-driven delivery, balanced sprints, team trust, and effective leadership.",
    "ResourceId": "fZLGlqMdejA",
    "Url": "https://www.youtube.com/watch?v=fZLGlqMdejA",
    "Date": "2023-10-11T12:00:36Z",
    "Captions": "So one of the civil and deadly sins of Agile is greed, and this usually manifests in organisations by an overwhelming focus on resource utilisation. Let's get rid of the fact that we're calling everybody resources as if they're cogs in a machine rather than actual people, right? But that focus on resource utilisation was a fantastic idea when we were running machines, and machines could churn out things on a regular cadence. We were able to— the more your machine is running, the more value you're getting in return for the cost of the machine and the cost to run it, right? That's where that resource utilisation idea comes from.\n\nBut when you start looking at people and how people do work, people need thinking time. People need to do things in different ways, right? If we can automate stuff that we do the same all the time, but if we're going to do something different all the time, which in my world background is as a software engineer, everything we coded was something new. Otherwise, we would have used an existing framework, right? So anytime you're writing code, you're doing something new. Anytime you're building a product that doesn't exist yet, you're doing something new that's never been done before, right? So when you're doing those, even if it's been done before by somebody else, it's not been done before by you.\n\nAnd when you're doing that, you need to give people the space to be able to do things well, to be able to think about things, to be able to learn things, to be able to try things. And that means that people aren't always 100% focused on the work that they're doing. They're doing other things while thinking about that work. Some examples maybe— have you ever been working on something and got stuck? And the only way for you to get unstuck, no matter how much time you spent on this thing, you were stuck, right? You're 100% utilised because you're working on this thing, but you're not making any progress. You're not delivering any value.\n\nBut if you just go out for a walk, right? Or you sit with your wife and you explain the problem to your— I do this all the time. I explain some problem to my wife, and she doesn't necessarily understand the problem that I've got, right? I'm talking about code and architectures and things, and halfway through explaining it, I figured out what my problem was, right? Because I knew I just didn't have a moment to look to the side. I don't know if that makes sense— like an out-of-body idea experience, an out-of-body experience, and look at that thing from the outside.\n\nSo that resource utilisation is a fallacy when you're talking about people. There's no such thing as resource utilisation. You want to be looking at flow efficiency and value delivery. How much value are you delivering to your customer? And I actually— I don't care if my team members are sitting around on their butts for 90% of the time, as long as we're delivering the value to the customer, right? The value to the customer is the important thing. Is the customer happy? Are we getting an adequate return on investment for our product? Those are the ideas that make sense.\n\nI worked with somebody years ago who ran a little experiment with some teams that he worked with in a company in the US, and he decided to—or got convinced leadership that per sprint he would remove an hour from each sprint. So you can imagine you've got a 40-hour week per week per sprint. You've got a 40-hour week. The next sprint, he's going to do a 39-hour week with the team, and the sprint after that, he's going to do a 38-hour week with the team. And the sprint after that is going to do a 37-hour week with the team. And I've got a question for you: at what point do you believe that value delivery suffered if the focus is on value delivery, delivering features?\n\nNow, that doesn't mean that for the other two hours people aren't— the hours that you remove, people aren't actually working, right? If you think about it, a scrum team, somebody who's focused on solving problems works 100% of the time, right? When I'm having a shower in the morning or when I'm— I actually do a lot of my best ideas at the gym. I go to the gym, I'm working out at the gym, and I go, \"Oh, that's a great idea,\" and I go on my phone and I message it to myself, right? And then the next idea pops in how to solve problems and figure these out is not something that you get from 100% utilisation. You need thinking time.\n\nSo can you guess where he got to? He got to 16 hours per week before value delivery started to suffer because all the rest of the time is thinking time that the team needed— thinking and then noodling time. So very much stop being greedy. Stop trying to get people to maximise their utilisation, and instead focus on maximising the flow of value delivery to your customers.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "7 deadly sins of Agile: Gluttony",
    "Description": "Explores how Agile teams can avoid overloading backlogs, Sprints, and products by focusing on prioritisation, value delivery, and lean, effective practices.",
    "ResourceId": "2ASLFX2i9_g",
    "Url": "https://www.youtube.com/watch?v=2ASLFX2i9_g",
    "Date": "2023-10-11T11:35:09Z",
    "Captions": "One of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated. Bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team, you're working with a team, and you go to look at their product backlog and there's, let's say, six or seven people working on this team and they have 5,000 things in their product backlog, they're doing it wrong. Right there, that's greedy. They've eaten all those backlog items; they're sitting in their belly and they can't walk around, they can't move. They're not going to be nimble, right? They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.\n\nAnother way gluttony manifests is during Sprint planning, right? Shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint, and that continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it. Taking on too much and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, maybe not every Sprint is probably okay, right? You're not going to be successful in everything you do, but if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, are we taking on too much work? Are we doing too much? Are we taking on too much work?\n\nSo that's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. This Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide, and they found that only 35% of the features that we build are used by our customers. Sixty-five percent, I think the phrase was \"used little if ever.\" So hopefully, we can stop building them in the first place, right? That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long would your build take if you removed 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams would be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things.\n\nSo the way to... ah, man, loads of teams just need a gastric bypass for that, right? How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog, right? It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, right? Features that aren't used by your customer because I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap and that they knew their customers way, way better than anybody else, and there's no way they were wasting 65%. It was a lot less, that's what they said.\n\nSo we said to them, \"What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?\" Like, \"This one, this one's the best.\" So we got in amongst the code, we added application insights. Application insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box, it does a bunch of stuff. But then if you add this as a feature, you can say, \"How many times do users click that button of our body of users? How many of them have clicked that button?\" You can get all of that data.\n\nWe analysed their product end to end. We collected data for three months, and then we went back to them and said, \"Here's the 7.5% of features that your customers use. All the rest was waste.\" Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers.\n\nSo, no, don't eat the whole thing, right? You've got to figure out how do I pick and choose what I'm going to eat? Don't eat the whole feature at once, right? You don't know if you like haggis yet, so don't order a whole plate full. Get like a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more, right? But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Quotes: Don't scale Scrum! Pragmatic or defeatist?",
    "Description": "Examines whether the belief that Scrum can't scale is practical or defeatist, highlighting Nexus as a proven approach for scaling Scrum to deliver greater value.",
    "ResourceId": "Oj0ybFF12Rw",
    "Url": "https://www.youtube.com/watch?v=Oj0ybFF12Rw",
    "Date": "2023-10-09T14:30:08Z",
    "Captions": "Don't scale Scrum is a phrase that I've heard quite a lot, and I think it's utter bollocks. It implies that there is no scaling within the context of Scrum, and while yes, Scrum explicitly focuses—the Scrum Guide focuses on one team building one product—we can use Scrum to scale Scrum and deliver more value at a higher scale. \n\nIf you look at Nexus, Nexus is a great example of using Scrum to scale Scrum. It is just Scrum, but it adds some additional things that you need to concern yourself with to scale. So, use Scrum to scale Scrum."
  },
  {
    "Title": "7 deadly sins of Agile: Envy",
    "Description": "Explores how envy leads teams to copy Agile models like Spotify, warns against FOMO-driven adoption, and stresses tailoring Agile practices to your team’s unique needs.",
    "ResourceId": "4mkwTMMtKls",
    "Url": "https://www.youtube.com/watch?v=4mkwTMMtKls",
    "Date": "2023-10-09T11:17:10Z",
    "Captions": "One of the seven deadly sins of Agile is envy, and for me, I think envy in Agile looks like just copying other people's stuff. That's one of the ways it manifests. We believe that if somebody else is getting success with something, then of course we will get success with something. The difficulty is that that's not necessarily true at all. \n\nI'm going to rephrase that: it might be possible on a small scale. You're working with a team, and one of your colleagues, another Scrum Master or another Product Owner, is using a practice that they're like, \"Oh, this is great! We do this and this, and we have this value stream, and we're able to get good stuff from that.\" You're like, \"Okay, I'd like to try that.\" That's not really what I consider envy; that's just trying stuff. \n\nEnvy would be looking at a great example of envy, the Spotify model. The Spotify model is a fantastic example of envy. There is no such thing as the Spotify model. There was a presentation and a paper that a couple of folks who were leaders at Spotify did at a conference. I think they did a couple of conferences talking about what Spotify was doing, what their journey was, and where they currently were on their journey. That was them telling an example of how they did things, and everybody went, \"Ooh, the Spotify model! Let's do that!\" \n\nThey absorbed that into their organisation, but what folks don't realise is six weeks later, Spotify were doing it differently. They weren't doing what was defined in the Spotify model. A year later, they got rid of the idea of tribes and guilds and whatever else they were doing because it didn't work for them. They tried something, and it didn't work for them. \n\nThat envy of, \"Oh, they're doing this awesome thing, so we need to be doing that awesome thing,\" I think results in a lot of FOMO, if you've heard that expression: fear of missing out. That's kind of part of envy. Other people are getting stuff, and you want the same stuff. That's where, at many levels, organisations fail. They fail at the process level because you look at a Spotify model, or you look at SAFe, or you look at any of those big models and say, \"I want that! I want to install that in my organisation!\" Then you pay lots of money to get it installed and then wonder why you're not getting the benefit. \n\nThere's the application level. I talked about this recently on a podcast. Installing an application that enshrines somebody else's business processes into your organisation is not necessarily going to be successful for you. The example I used before was SAP. SAP is a massive application tool, very common in our industry. If you adopt an SAP tool, it comes with a bunch of different capabilities. \n\nLet's say it's invoice processing. SAP has a workflow for invoice processing that comes out of the box. It has certain ways that it does things, and you're giving up the way your organisation does things in order to adopt the way SAP does things. Does that kind of make sense? There are some things that you can adapt in SAP, but only within the bounds of what the developers that created it allow. \n\nWhen you see some of your competitors perhaps installing SAP and building their whole procurement processes in SAP, you think, \"Oh, we need to do that! If they're doing that, we need to do that!\" Or if our competitors are adding these features to our product, we need to add those features to our product. That's following; that's envy. That's following, not building your own path. \n\nSimon Sinek does a great video on this topic, and he talks about the \"why.\" He talks about going to two conferences: one is a Microsoft conference under Ballmer, and one is an Apple conference. At the Microsoft conference, everybody wanted to know what their competitors were doing. What are their competitors doing? What are their competitors saying? What are they launching? What features do they have? \n\nAt the Apple conference, they didn't give a crap about what the competitors were doing. They were like, \"This is the way we're going. We're doing this.\" It fits within our belief model: generosity, comfort, confidence, contentedness, friendliness, goodwill, kindness, benevolence, friendship. Those are the opposites of envy. \n\nI think that if you can put aside what everybody else is doing and focus on what you need to do and what your customers need, you'll have a lot better time both in the process space, in the tool space, and in your organisational structure space. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Quotes: \"I estimate that 75% of those organisations using Scrum will not succeed in getting the benefits that they hope for from it.\" - Ken Schwaber",
    "Description": "Most organisations fail to achieve Scrum’s promised benefits due to focusing on team processes over holistic, organisation-wide change and an agile mindset.",
    "ResourceId": "dT1_zHfzto0",
    "Url": "https://www.youtube.com/watch?v=dT1_zHfzto0",
    "Date": "2023-10-06T07:00:16Z",
    "Captions": "So Ken once said that 75% of organisations at using Scrum will not succeed in getting the benefit they hope from it. Um, and I don't agree with them. I think it's 90% of the organisations that adopt Scrum will not get the benefits they hope from it. And it's because they focus on the mechanisms of Scrum at the team level, and they don't broaden that out to the holistic organisational changes that are required to support actually delivering software and products on a regular cadence for your customers."
  },
  {
    "Title": "Why is Lego a shit idea for a scrum trainer - Part 3",
    "Description": "Explores why Lego may oversimplify Scrum training, contrasting it with Minecraft’s ability to reflect real-world complexity and collaboration in agile learning environments.",
    "ResourceId": "AJ8-c0l7oRQ",
    "Url": "https://www.youtube.com/watch?v=AJ8-c0l7oRQ",
    "Date": "2023-10-05T07:00:04Z",
    "Captions": "While we don't use Lego in our training classes, we have been known to use Minecraft. You might say, \"Well, why is Minecraft okay but Lego isn't?\" It's about the complexity and collaboration of the experience. We don't use Lego throughout the whole class. We don't use Minecraft throughout the whole class either. We use it for a very specific circumstance, which is demonstrating to people how they feel in the office when the level of complexity is too high."
  },
  {
    "Title": "Why is Lego a shit idea for a Scrum trainer - Part 2",
    "Description": "Explains why using Lego in Scrum training oversimplifies real-world software complexity, leading to unrealistic expectations and missing key integration challenges.",
    "ResourceId": "mqgffRQi6bY",
    "Url": "https://www.youtube.com/watch?v=mqgffRQi6bY",
    "Date": "2023-10-04T11:24:58Z",
    "Captions": "One of one of the main ideas that we're trying to get across is this different sort of working that is based on complexity. Right, the work that we're doing has a really high variance of time, which makes it incredibly complex. We're doing things that have never been done before, and I feel like Lego is completely the opposite of that. Like, Lego bricks fit together. I don't know if you've ever built software, but trying to get two bits of software that were built independently to fit together is an absolute nightmare. Lego trivializes that story."
  },
  {
    "Title": "What are the barriers that prevent developers from fully accepting a Product Owner as the final decision maker?",
    "Description": "Explores key barriers preventing developers from accepting Product Owners’ authority, including accountability gaps, stakeholder interference, and trust issues.",
    "ResourceId": "A0Y-zySHXyc",
    "Url": "https://www.youtube.com/watch?v=A0Y-zySHXyc",
    "Date": "2023-10-03T07:00:08Z",
    "Captions": "What are the barriers that prevent developers from fully accepting a product owner as the final decision maker? Wow, there's a lot of barriers to that. I see that all the time at the moment. Other people not respecting other people who are perhaps more senior, not respecting the product owner is probably the biggest barrier, right? It's other people coming down and saying something different to the team from the product owner or going behind the product owner's back or agreeing with the product owner in person but then getting in a larger environment with more people and perhaps recording is on than disagreeing with them and seeing it different.\n\nI had an experience recently where a product owner was really, really frustrated because they'd been collaborating with somebody in the organisation to get the backlog all like this is what we need, this is what we're doing, and they've been collaborating with them quite heavily. They've had lots of private meetings with them where they collaborated and literally written the backlog items word for word like that key stakeholder, that's the way they wanted it, and collaborated heavily on that. And then they get into the Sprint planning and the stakeholders like, \"No, that's not what I want.\" \n\nAnd it's like, that is explicitly... there's a couple of things there, right? Apart from being a bit douchey, right? That's one piece. But because it's then in that group team forum, it undermines the ownership of the product by the product owner, right? That totally undermines it. And if the developers, the people doing the work, see that the product owner is being undermined, well, I can't really listen to the product owner. I still have to run it by Bob or I still need to speak to Janet or whoever it is that is doing the undermining. And as more and more of those things happen, the less the developers are able to feel that they are able to respect the product owner as the final decision maker, right?\n\nAnd if you look at the Scrum guide, who needs to respect the product owner as the final decision maker? Everybody in the organisation. Everybody. Not just the people below them, but also all of the people above them. If you're above a product owner and the product owner is consistently not making the right decisions, get rid of that product owner and get a new one. That's your call, right? You've hired somebody to do a job. If you don't think they're doing a good job, you don't undermine them. You get rid of them, right? And that maintains that respect of product management, that respect of product ownership, right? That the team sees that the person that's appointed is respected by management, even if management might not necessarily 100% agree with all of the decisions that are made. \n\nBut if most of the decisions are made result in value delivered to the business, because that is the true outcome, right? What you find... yeah, I'm going to add an additional bit because what you find is that that disrespect or undermining of authority of the product owner comes from a position of maybe one key stakeholder not wanting to give all the information, not wanting to take accountability for their decision, right? \n\nAnd it just results in nobody having any capability. Leadership doesn't take the accountability, the product owner can't take the accountability because they're continuously undermined or the ideas are changed without their knowledge or understanding, and the developers... there's no credibility in that story. So then if I were to come back to the question and answer it in one word, what are the barriers? There's only one. What is the barrier that prevents developers from fully accepting a product owner as the final decision maker? And it's accountability. Or in three words, a lot.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is Lego a shit idea for a Scrum Trainer - Part 1",
    "Description": "Explores why using Lego in Scrum training can undermine professionalism, dilute key concepts, and disengage senior participants, urging more context-appropriate methods.",
    "ResourceId": "f1cWND9Wsh0",
    "Url": "https://www.youtube.com/watch?v=f1cWND9Wsh0",
    "Date": "2023-10-02T11:00:28Z",
    "Captions": "The first reason why we don't use Lego in our training is that it completely undermines the importance of what it is that we're talking about. Um, it is really, really difficult to express the ideas of this new collaborative, engaging, fast-paced way of working when you've got a bunch of CEOs sitting there on the floor playing with Lego."
  },
  {
    "Title": "Cutting Through the Red Tape: How Eliminating Committees Can Boost Your Time to Market",
    "Description": "Explores how committees can delay decision-making, reduce agility, and increase time to market, highlighting the benefits of empowering teams and streamlining processes.",
    "ResourceId": "ye1wQic8et0",
    "Url": "https://www.youtube.com/watch?v=ye1wQic8et0",
    "Date": "2023-10-02T07:00:33Z",
    "Captions": "So the question is, it's said that you can reduce time to market by up to 50 simply by removing committees. True or false and why? \n\nUm, I would say that the 50 is probably false, right? Somebody's just made up, you know, it lies, damn lies in statistics, right? Or was it, um, 99.32 of all statistics are made up on the spot, right? Kind of thing. \n\nUm, but committees, and I'm seeing that in engagements I'm currently in, that the committees of people being brought together, whether formal or informal committees, right? \n\nUm, to make decisions result in those decisions taking long. It results in those decisions taking longer. You know, we need to make a decision. \n\nUh, we need to decide that, I don't know, um, decision, right? But we need to be a bad decision and, um, all right, in order to make this decision, you know, we need Bob and we need Allison and we need Jamie and we need Roberta and, you know, we need Maria. We need all these people together in order to make this decision, and suddenly you've got disagreement and they're pulling in other people. \n\nSometimes you just need to make a decision, right? And if it's the wrong decision, we'll fix it later. \n\nBut we need to move forward because while they're collaborating on this, um, you've got a bunch of people sitting about not doing anything because the team is sitting there waiting for the decision to be made so that they can do the work, and they have their deadlines as well. \n\nUm, what? Oh, I just thought of a kind of generic but specific example, um, from an engagement I'm working at the moment. \n\nIs that there's quite a lot of, um, procedures and policies that need to be created, more rules, right? The procedures and policies need to be amended, created, or adopted for a new way of working. \n\nAnd what one group of people would like to do, the people doing the work, right? The people doing the work on the bottom would like to be able to do is they'd like to be able to just use a document management system like, uh, SharePoint or Google Docs, right? Put the doc in there and then send a link to the people that need to collaborate on this doc, and then they can come in on that link and add comments and collaborate and make sure, you know, make the little changes that we can then accept using the review functionality of these documents, you know, modern document management techniques. \n\nBut the people on the other side were like, \"No, no, no, no, no, no, we're not, we're, we don't work that way. We're not going to do it that way.\" \n\nYou send us your final draft for the document, and then we'll take it off. We'll go around all of the people that in our organization, right? And you don't know how many that is. That could be hundreds of people need to, will be emailed this document and have their input, and then we'll have a group of people who maintain an Excel sheet with a list of all the changes and issues in the document, and then we'll give you that back and you can, you can, you can make your change. \n\nFirst way, modern document management techniques was specifically designed and developed to solve this problem, right? \n\nBut they don't want to do that, so that's a policy and procedure or a way of working that is getting in the way. That committee is getting in the way of delivering value, and I would say in that circumstance, it's way more than 50, uh, of the time to market is increased by having, by removing that capability, right? You could have a quick collaboration on a document, and in a couple of days of a little bit of back and forth on this document, come out with something that is 99 of the way there. \n\nUm, or we can spend six to twelve weeks going around with this other way of working where it's more, we do our bit, we hand off to you, you then do your bit, you hand that back, we make the changes, and then hand it back to you, and then you do your bit, right? That's that difference between collaborative and agile and staging in traditional, right? \n\nSo I think, um, committees are part of that story. Committees are part of that staging traditional management practices. \n\nUm, and they really, really, they need, they need to go as a concept. \n\nUm, committees and steering and all of these kind of things. \n\nUm, so yeah, I fully think that 50 is not unreasonable, but I think it's definitely underselling the effects or the impact of, um, or committees on your ability to get decisions made and take advantage of business opportunities, right? Think about all of those business opportunities that are floating by that if you just had a team that was able to take advantage of that business opportunity, but you can't because the document's tied up in committee. \n\nHow much money, how much additional capability, not just time to market, but how much, how, forget time to market, how many opportunities does your business lose out on? \n\nBecause by the time the decision is made, it's no longer an option, or your competitors got there. \n\nAnd especially if you're a big traditional bricks and mortar organisation, like I mentioned Royal Bank of Scotland before, right? Like the Royal Bank of Scotland, uh, and you're having to compete with the likes of Monzo, right? \n\nSmall, nimble tech-based organisations that are able to move a lot faster. They don't even have to move a whole hell of a lot faster; they just have to move faster than you, right? That's all they have to do, move faster than you to build a market for themselves and start stealing your customers. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Transforming Agile: How to Shift from Blame to Systemic Solutions for Better Team Dynamics",
    "Description": "Explores how shifting from blame to addressing systemic issues and measurement systems can improve team dynamics, collaboration, and agility in software development.",
    "ResourceId": "LxM_F_JJLeg",
    "Url": "https://www.youtube.com/watch?v=LxM_F_JJLeg",
    "Date": "2023-09-29T07:00:14Z",
    "Captions": "I think I think one of my favourite favourite sayings, um I don't know I don't know where I heard it to be honest I think I've heard it a few times from a few different places, um but it's the that don't put down to malevolence what you can put down doing confidence. \n\nRight, most of the time when you're working as an agile coach in organisations or a scrum master or a product owner or a developer and people are doing things in a way that negatively affects your ability to do your job, right, most of the time they're not doing it because they're dicks, right, they're not doing it with their dicks, they're doing it because they're measured. \n\nThere's a reason that they're being measured in a way that results in them making decisions that have a negative outcome, right, or, uh, so somewhere in the organisation there's some level of incompetence that this decision has not been changed, right. This measurement has not been changed. \n\nThe old adage that hopefully nobody still has in their organisation is that developers being measured by the number of lines of code they write, right. We all know that's a dumb thing to do because especially if you're a developer because what you do is you start copying and pasting out Shakespeare into the comments and then you end up with these, uh, lots of lots of, uh, lots of lines of code you've written. \n\nAnd in fact, um, I've seen organisations do the opposite as well. The fewer lines of code that you write, right, which is meant to be somebody thought it would be a good idea because you want to optimise your code as much as possible. \n\nBut what you end up doing is you get a bunch of people that go, well, it's not raining but today then and I'll get my bonus, right. So you have to, you have to, people's behaviours are directly related to the way you measure, right. \n\nYou think it's the culture, right, that creates that. So people focus on changing the culture in an organisation but it's not the culture. The culture is just as the shadow on the wall of the measures for people reflecting through people's activities and that's the shadow in the wall, right. \n\nSo you can't, you can't actually change that. You can't change culture. Change the way people are measured. Change the system, right. And this, if you change the system, the light will shift and the shadow will change. \n\nSo it's always a system problem. It's never actually the people are in the middle and they're just doing what the system's telling them to do or the system's encouraging them to do or, or, you know, like, um, you know how sometimes you feel like doing something is an uphill battle that at every turn you're, you're, you're sabotaged by somebody in your, you know, you're trying, I'm trying to ship this product to production and you just get sabotaged at every, like, oh, we're gonna be, oh crap, here comes compliance or, you know, whatever it is, you're sabotaged at every turn. \n\nThat's because it's an uphill battle, right. The system has created an uphill battle because they don't want you to do that. You need to tip it the other way, make it easier. \n\nHere's a perfect analogy for that. Um, why, why do we have change requests? Yes, that's the way. Why do we have change requests in organising? You've got a project, you try to deliver your back project and the customer comes along and says our business has changed, we need to change what we're working on and we're like, well, here's the 5,000 page change request form and the contract negotiation team that come along with it to help you navigate this problem. \n\nAnd the reason we do that is we don't want to change anything because if we've got a traditional project mindset, you want to plan out the project at the start, you want to minimise the variance in the project and just deliver it, right. That's, we need to make 5,000 widgets. You've placed an order for 5,000 widgets. We're gonna make 5,000 widgets and if you come along later and say you only want 400 widgets, that's tough, we've already committed to making 5,000, you've signed the contract, right. \n\nThat works great for factories, right, because it protects both parties but it totally sucks for building stuff that doesn't exist yet. \n\nSo this, this, this malevolence that we sometimes feel that is directed at us to inhibit our ability to do stuff, inhibit our ability to get stuff done is not malevolence at all. It's the incompetence of the system. The system has created this level of incompetence in the people that results in that shadow in the wall that we can't change. \n\nChange the system. Always work on the systems. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments and if you want to have a chat about this or anything else agile, scrum or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Agility: How Decentralisation Empowers Teams to Maximise Value in Any Organisation",
    "Description": "Explores how decentralising decision-making boosts team agility, engagement, and innovation, helping organisations of any size maximise value and adapt to change.",
    "ResourceId": "E2OBcBqZGoA",
    "Url": "https://www.youtube.com/watch?v=E2OBcBqZGoA",
    "Date": "2023-09-28T11:09:12Z",
    "Captions": "If even large organizations are struggling to maximize the value from the work they're undertaking, what chance do small organizations have? They have a greater chance because they're more able to adapt the way they do business in order to get the benefits we're looking for. We want to decentralize decision making. We want to push responsibility down the organization, and we want to maximize the ability for the people in our organization to leverage the skills that they have in order to maximize our value. They need to be connected to our story. They need to be behind it, and you need to involve them in creating it."
  },
  {
    "Title": "Unlocking Organisational Value: The Transformative Power of Engagement in Agile Teams",
    "Description": "Explores how decentralising decision-making, fostering autonomy, and building a shared vision in agile teams can boost engagement and unlock greater organisational value.",
    "ResourceId": "tPX-wc6pG7M",
    "Url": "https://www.youtube.com/watch?v=tPX-wc6pG7M",
    "Date": "2023-09-28T10:27:47Z",
    "Captions": "If even large organizations are struggling to deliver value to figure out what products they should build and how to maximize their effectiveness in the market, what chance do small organizations have with smaller budgets and less quantity of people to be able to focus on this task? \n\nAnd the reality is, it's not about scale; it's about your ability to engage the people that you've got in creating those products of the highest possible value. Traditional management practices inhibit the ability of you to get the most out of the people that you have because it tells them what to do, it tells them where to go, it tells them what to do, and it tells them how to do it. \n\nWe need to start looking at this whole process differently. We need to reorganize the way we structure organizations in order to decentralize, democratize, and engage the people that we have in maximizing the value that our organizations can deliver. And that doesn't come from rules; it comes from principles. Principles so that everybody knows and understands the direction that we're going and what we're trying to achieve. \n\nAnd we let them figure out how they can leverage their own skills that they understand in maximizing the benefits for our organization. That's not something we can know as leaders. We have to enable the people in our organization to figure out how best to leverage their capability for our benefit. And for that, they need to be engaged, they need to care, and they need to want the organization to succeed. \n\nIf they're just turning up for a paycheck and they don't really care about your organization, you're not going to get those outcomes. Thank you."
  },
  {
    "Title": "Unlocking Success: The Essential Role of Product Ownership in Lean Product Delivery",
    "Description": "Explores how effective product ownership and lean delivery drive alignment, collaboration, adaptability, and continuous improvement in modern product development teams.",
    "ResourceId": "UW26aDoBVbQ",
    "Url": "https://www.youtube.com/watch?v=UW26aDoBVbQ",
    "Date": "2023-09-28T09:01:38Z",
    "Captions": "Our lean product development and product owner workshop. We'll talk about where we currently are in the world of product ownership and what that looks like going forward into the future and why it's so important for organisations today. Ultimately, why more and more people are talking about product ownership, focusing on product ownership, and trying to get better at lean product delivery. Thank you."
  },
  {
    "Title": "Unlocking Success: How Lean Product Development Transforms Decision-Making and Value Creation",
    "Description": "Explores how lean product development improves decision-making, reduces risk, and increases value by focusing on customer needs and efficient product ownership practices.",
    "ResourceId": "IFX3SRUlunc",
    "Url": "https://www.youtube.com/watch?v=IFX3SRUlunc",
    "Date": "2023-09-28T08:29:48Z",
    "Captions": "Over the last 18 months or so, we've seen significant more interest and more questions around this idea of lean product development, especially within the realm of product ownership. Right, what is it that is pushing that? I think there is a huge push in the industry to get better at deciding what it is that we're building, better at making the right bets, better at understanding what we should and shouldn't build within a particular context, and how do we minimise the chance of building the wrong thing. Hypothesis-driven engineering practices, right? Those lean product development stories.\n\nAnd I think that this is such an important topic that Joanna and I will be running our workshop on product ownership and lean product management. We're only going to talk for about 18 minutes, and then we're going to have about 40 minutes of Q&A for you to bring your questions, your ideas, your stories to this puzzle of what it is. You know, what is lean product development? What does it look like going forward into the future, and why is it so important to our organisations today? \n\nSo that we can waste less money in our organisation, so that we can build more value for less money, higher return on investment. That's really what it's all about."
  },
  {
    "Title": "Why Azure DevOps is the Ultimate Game Changer for Scrum Masters and Agile Teams",
    "Description": "Explains how Azure DevOps streamlines agile workflows for Scrum Masters and teams, offering simplicity, integrated tools, real-time insights, and improved collaboration.",
    "ResourceId": "Zegnsk2Nl0Y",
    "Url": "https://www.youtube.com/watch?v=Zegnsk2Nl0Y",
    "Date": "2023-09-28T07:00:22Z",
    "Captions": "Scrum Masters love Azure. The Azure DevOps Scrum Masters love is your DevOps. The reason they love Azure DevOps is that it is much simpler and cleaner than a lot of other tools out there. It allows people to focus on what it is we're actually trying to do. \n\nUm, and it gives them that view into not just what people are working on, but also how they're doing other things like source code and builds and releases, so that you can get a much more holistic view of the capabilities of the team as they're moving forward. \n\nThat's why Scrum Masters love is your DevOps."
  },
  {
    "Title": "Scrum doesn't solve problems, it reveals them. How, and why is that valuable?",
    "Description": "Explains how Scrum exposes hidden organisational problems through transparency and feedback, enabling teams to identify issues, improve processes, and drive real change.",
    "ResourceId": "Ys0dWfKVSeA",
    "Url": "https://www.youtube.com/watch?v=Ys0dWfKVSeA",
    "Date": "2023-09-27T07:00:29Z",
    "Captions": "So Scrum doesn't solve problems; it reveals them. How and why is that valuable? \n\nUm, there's an old adage that Ken Schwaber used to say all the time, and Scrum's like a mirror. It gives you a way of doing things, and if you can't do it that way, why? That's your mirror, right? What is the thing? Because it doesn't sound unreasonable, right? There's nothing unreasonable in Scrum. You have a group of people who are working together towards a common goal, right? They're a team working together towards a common goal. You give them some work, they take a piece of that work, they build that work, and they deliver that work. You take the feedback from people using that work and inform the next thing that you build, and you keep going around that loop, right?\n\nWhy is that so hard for organisations? It seems like a no-brainer, right? We do it all the time. How did your kids learn to walk? They fell over a lot, and they kept picking themselves up and kept trying. They would see other people doing those things, right? They could see other people doing those things—the walking. I want to do that. For my daughter, we bought squeaky shoes. I don't know if you've ever seen these squeaky shoes. That's basically shoes with a squeaker in it, and when you walk, it goes \"squeak.\" She loved that noise, so she learned to walk at nine months with those shoes on, and she was running down concrete concourses on holiday with those shoes.\n\nAnd it's just that mirror that other people are doing it. You have some incentive to do it, and then you get the outcome, right? Most organisations move to adopting Scrum because they're struggling to deliver, right? They've failed in some way to achieve the desirable outcome, and people are like, \"Oh, this sucks. Why is this taking so long? Why are we building the wrong thing? How do we build the right thing?\" And somebody's like, \"Well, there's this Agile thing that people are talking about. They seem to be talking about these short feedback loops, delivering more value, maximising that amount of—oh, that sounds like a good idea. Let's do that.\" And then you go to try and do it in your organisation, and suddenly all these mirrors pop up and say, \"You know, you go to try the simplest one ever. You go to try and ship your product to production, and what happens? The mirror pops up and says, 'You can't ship to production. I'm sorry, you have to fill out these 14 forms, and you have to fill them out a minimum of six weeks in advance before you do a deployment.' There you go.\"\n\nWell, there's something we need to fix, right? That's the first thing we need to fix. That's an example. I used to work at Merrill Lynch, and that's exactly—if we didn't submit all the paperwork six weeks before a deployment, it was considered an emergency deployment, and every emergency deployment got a black mark against your name in the hierarchy of departments. If you get too many black marks at a particular level, then leadership comes down to slap people around and say, \"Why are you doing this?\" \n\nThe group that I worked for, because we were trying to do ideal delivery, we were doing continuous delivery, right? So we were maybe shipping twice a day. We had more black marks than any other part of the organisation. I think it was—somebody said it as we had more black marks than the whole rest of the organisation combined, right? Because we were generating two or three of them a day, and that was just my products. There were other products in our group as well.\n\nSo that then disincentivises people to do the right thing, right? Why is the rest of the organisation not doing continuous delivery? Well, because they're not willing to just go, \"Yeah, whatever, your black marks,\" right? They didn't have strong enough leadership who says to the rest of the organisation, \"No, this is fine. We're okay with this level of black marks. This is perfectly acceptable, and we're getting the value we need. This is okay.\"\n\nAnd why did that exist? Why does that black mark system exist? It's organisational crap, right? Our organisations build up a whole bunch of rules. I'm going to call them rules. They build up a whole bunch of rules because they did something, it worked well, and they wanted to enshrine that in the way they do things so that they continue to do well. \n\nAnd that idea worked fantastically when we existed in slow-moving markets, right? And you'll see the organisations with the most bureaucracy are the organisations that have traditionally existed in the slowest moving markets, right? Governments always had lots of high levels of bureaucracy and rules and procedures. Banks have been around for—well, I think the first bank was, was it not Royal Bank of Scotland? 250 years. There's still an organisation that still exists. Can you imagine having 250 years of these rules and procedures? I worked with Kongsberg in Norway. That's a 200-year-old mining company that found diamonds and then got into everything, right? They have all these rules.\n\nSo, for example, at Merrill Lynch, I had a rule that the software that I create had to be tested to make sure that it didn't interfere with the trading desk software if it was installed on the trading desk. But the software I was building was for a small group of people in a call centre who were calling people and had nothing to—not even in the same league as the trading desk folks. So this piece of software would never be installed over there, but yet I had to spend six months in testing and assessment to validate that that was true, even though it was of no relevance whatsoever. \n\nThat's a rule that's applied across an entire organisation for a very small group. Now, risk mitigation, right? If that software was installed on the trading desk and it interfered with it, maybe that's hundreds and hundreds of millions of dollars worth of risk to the organisation. So they applied it across the board, but there needs to be a reasonableness test, right? There needs to be a reasonable test across all of the organisation's rules. \n\nSo challenge—that's Scrum's job. It pops up that mirror and says, \"No, you should be able to do this. You should be able to do continuous delivery. You should be able to have an ordered backlog that's just a list of stuff that you need to do with the most important thing at the top. You should be able to say, 'Product Owner, here's the product. You own it. You make the decisions.' If you can't do that, there's a problem for leadership.\" \n\nThat pops up that mirror immediately. We've got to fix this. So the whole purpose of Scrum is not to solve your problems for you; it's to highlight that you have them in the first place, right? It's a little trigger mechanism that you can't do the short feedback loop. You can't deliver stuff into production. You can't get working products. You can't—you can't—you can't—you can't, right? That's—I don't know what to call that. Is that the art of the negative? I don't know. I work with so many organisations where here's how I would expect the conversation to go, right? \n\n\"We need to do this.\" \"We can't do this.\" \"Okay, how? We can't do it that way, but if you did this and you did that, then you would be able to do it this way.\" Or, \"Let's pull in that compliance person that we need to sign off on this so we can make this change because it's a business need, right? We need to be able to ship more quickly.\" \n\nWhereas what really happens in organisations is you go, \"Oh, we need to be able to do this,\" and the other person goes, \"Nope, you can't do that.\" That's the end of the conversation. How is that supporting the business, right? The whole purpose for every department in your organisation's existence is to support the business making money. Anything that's inhibiting the business making money is getting in the way, and you need those mirrors, right? \n\nDevOps pops up those mirrors. Scrum pops up those mirrors. Damn man pops up those mirrors. These are all tools to help you see what's wrong because the way we do things is the thing that's getting in the way of actually delivering value. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Embracing Asynchronous Communication: Transform Your Collaboration and Boost Productivity",
    "Description": "Discover how asynchronous communication improves team collaboration, flexibility, and productivity by enabling thoughtful, documented interactions without time constraints.",
    "ResourceId": "79M9edUp_5c",
    "Url": "https://www.youtube.com/watch?v=79M9edUp_5c",
    "Date": "2023-09-26T07:00:02Z",
    "Captions": "From Masters love asynchronous communication. Asynchronous communication is something that has become more popular since lockdown. Right, we're able to collaborate with people in a much more dynamic manner. We don't have to wait for people to reply. We don't have to all be in the same place at the same time all the time. We can have these back and forth, communicate with people, engage with them on a constant basis, and it provides a much more compelling way to facilitate communication without imposing too much on people's time. Because everybody's trying to get work done as well, and they can reply as needed. Asynchronous communication."
  },
  {
    "Title": "Where is consensus valuable and where does it kill great product development?",
    "Description": "Explores when consensus helps or hinders product development, highlighting the need to balance collaboration, leadership, trust, and timely decision-making.",
    "ResourceId": "Na9jm-enlD0",
    "Url": "https://www.youtube.com/watch?v=Na9jm-enlD0",
    "Date": "2023-09-25T07:00:08Z",
    "Captions": "Question is where is consensus valuable? Where does it kill great product development? And I think that's a really interesting topic. Consensus just means general agreement, right? That everybody generally agrees. And sometimes getting to agreement is the right way forward. But also, conversely, sometimes making a decision is the right answer. \n\nBut trying to split that and figure out how, in what circumstances you want to make a decision based on consensus and what circumstance you want to make a decision based on, you know, we're making a decision and we're going this direction, it's something that is very much at the heart of the complexity of being a product owner, right? If you think about the product owner as a mini CEO or an entrepreneur, right, we're perhaps operating in a highly dynamic, highly volatile market, and things can change quite quickly. \n\nAnd sometimes if we want to take advantage of opportunities that are floating by, we need to just make a decision and go for it. And as long as we're... Oh, what's the... I usually an organization is generally an organization is willing to make a financial bet on seven percent success, right? That's the general... It's a good bet if it's 70 as a success; it's a bad bet if it's less than that. \n\nBut people that are entrepreneurs tend to accept a much higher degree of risk than that 70, right? That 70 is like bricks and mortar organisation; that's what they look at in other financial departments. But for an entrepreneur, you see an opportunity and you have a gut feel, right? And usually, it's not really a gut feel, right? It's based on your experience and the data that you've got, and you're making a call. \n\nBut yes, I'm going to invest in this idea. But if you're familiar with startups, 50 of all startups fail in the first year, and 70 of the rest fail in the first five years. So you've actually got a really small chance of success from being an entrepreneur. So to be that entrepreneur, you have to be continually making decisions, trying stuff, failing, making stuff, trying to stop, failing. \n\nWhat was the... What's the bad Edison quote? I know it's a bad quote; he didn't... I don't know, I'm sure he 100 said this, but the consensus quote, right? That is probably wrong, is that he said, \"I didn't figure out how to make a light bulb; I found 99 ways you can make light,\" right? Because it took a hundred tries at something to get that one thing that worked. \n\n99 things. So that's the mind of the entrepreneur. That's the difference between a big organisation CEO and an entrepreneur is the amount of risk they're willing to accept in the endeavours that they're trying to achieve. Yeah, look at Elon Musk buying Twitter, right? That's a really high risk of potential failure. But if you disrupt enough and change enough and keep changing until you get to those ideas, that's that entrepreneurial mindset. \n\nSo that in the product owner as an entrepreneur can work at the small scale as well as the bigger scale. If you look in the Scrum Guide, right, it quite explicitly says everybody must respect the product owner, right? The product owner's decisions that they made. And part of that is because sometimes we have to move quickly. That's one. Sometimes we just have to try stuff, even if we're not 100% sure it's going to be successful. \n\nSo you might be making a decision to try something even though lots of other people think it's a bad idea, right? And that's where you have that piece of... It's not about consensus; it's about just making the decision and moving forward. But on the other side of that, you've got the times when you do want to get consensus. \n\nBecause it's very difficult to do stuff when the people that you need help from to do stuff believe you're wrong, right? If they believe you're wrong, they're not going to help, right? Entrepreneurs kind of sidestep that by building a group of people around them that are supportive of their vision so that when they do have to make decisions, that people are like, \"Really? We're going to go that way?\" \n\n\"Oh, you know, Leslie, the CEO, the entrepreneur, Leslie's like, 'Yeah, this is the way we're going.' They're like, 'Okay, we trust you; we're going to move forward and go anyway,' right?\" That's how they get support for that. So you've got people that support you. So that's not really consensus, but it kind of is. It's that other type of consensus where it's lead consensus, right? \n\nBut you have another type of consensus where you... And this is more facilitation idea of consensus or at least convergence, right? It doesn't have to be consensus, but it's convergence. And that facilitation idea, and I don't mean just a facilitator, right? This could be the product owner; this could be the Scrum Master; this could be a team member. \n\nThis could be in a video; you're trying to brainstorm ideas for your family vacation, right? It doesn't matter what it is, but you have this initial expansion of ideas, right? When you ask a group of people, \"How might we solve this problem?\" We're going to generate, hopefully, right, lots and lots and lots and lots of ideas. \n\nSo we get this big buildup of ideas, and then you want to get to what's the thing we're going to try? What's the thing we're going to do? But there might have been 15 different options. How do we not only get to the thing we want to try but gain a moratorium of consensus so that everybody's behind the thing? Because if people aren't behind something, it ain't going to happen, no matter how awesome it is. \n\nIt's not going to happen if the people are not behind it. That's why I feel a lot of projects fail, is that there's no attempt to get people behind it. They're just told what to do. So you end up with those... I don't know if you remember in the old traditional days, you had death march projects. \n\nAnd a death march project is where every single person that's working on it knows that it's not going to work, right? They know in their bones that it's not going to work. So what happens? It doesn't work, right? But somebody thinks it will work and keeps going towards it, spending the money, but nothing happens. You want to avoid that. \n\nAnd I think this building to consensus is getting everybody behind the idea, even if they don't necessarily think it's the best idea, right? That's for me is building consensus around that story. So this, to get back to the original question, right? Where is consensus valuable, and where does it kill great product development? \n\nIt doesn't... It's always valuable, but how you achieve it is different depending on your circumstance. If you're the CEO, you gain consensus by creating an environment where everybody trusts your decisions. They're far... They're willing to go along with and are happy with your decisions because they know the chances of you being successful are fairly high because you've built a level of trust with them. \n\nThat's consensus through leadership. But then you've also got consensus through collaboration, right? We're collaborating together as a group. We want to generate... This is usually on the macro scale. The CEO is making the decisions on the big, on the macro scale, and then on the micro scale, you've got lots of little decisions that have to be made by the team. \n\nLots of things to try, lots of things to do, and you need those ideas and then consensus. And you have to navigate that growing zone in the middle, right? That's usually what it's called, the drone zone, where stuff's just... You know, nobody agrees on anything. And you have to, as a good facilitator, even the CEO has to do this, has to figure out we're going to generate a bunch of ideas, and then I have to get it down to what it is we're going to try that everybody's willing to get behind. \n\nI've had more consensus behind so that it moves forward and it has the possibility of being successful. So I think consensus is absolutely imperative to all aspects of product development, but there are different routes to achieving it depending on the circumstance, right? You might have fast-moving stuff where you have to make decisions and people trust you. \n\nBut how do you build that trust in the first place? Well, you have to do all this other stuff to gain consensus in the other way that people... You know, you get them behind it because you get them to agree to be behind it, even if they don't think it's the best idea. And then, oh wow, that was successful. You just gained credibility to then make a decision and have people support it. \n\nSo I think it is absolutely imperative, but it's also important to think about. I really recommend there's a book, Mike Voss's book called \"Never Split the Difference,\" right? And I think that's a fantastic story about how you create that. Where are we going without needing to have a bunch of people that are unhappy with the outcome, right? \n\nSo the way I think his little description is that whether you're negotiating, because it's all a negotiation, right? Collaboration, whether you're negotiating with terrorists for hostage release or you're negotiating with at bedtime for kids, right? It doesn't matter; the same rules and techniques apply, right? You're trying to get that consensus that yes, this is the right way forward. \n\nYes, you should go to bed now. But if they're unhappy, you know, they'll go into their bedroom and they'll go under the covers and get the flashlight out, and they'll read their book anyway, right? Or whatever it is, they'll try to not do the thing. So building that consensus is absolutely imperative. \n\nBut I really recommend \"Never Split the Difference.\" I recommend looking at facilitation techniques for navigating that growing zone to get consensus. And also, another awesome book, \"Thinking in Bits,\" for those entrepreneurs, right? Building products is like playing poker, right? You don't have all of the information all the time, but you still have to make decisions. \n\nSo how do you navigate that data analysis and then make the best decision possible based on the information that you have and being consensus along the way? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Signs You're Failing as a Product Owner: How to Take Control and Deliver Real Value",
    "Description": "Learn key signs of failing as a product owner, including poor product quality, lack of vision, and inconsistent delivery, plus practical steps to regain control and deliver value.",
    "ResourceId": "uvU_ATou6QY",
    "Url": "https://www.youtube.com/watch?v=uvU_ATou6QY",
    "Date": "2023-09-22T07:00:32Z",
    "Captions": "What does failure look like for a product owner? Um, I think it's very quantifiable what failure looks like for a product owner. Um, if you see a product that has poor quality or low value, inconsistent delivery, probably a sign of a failing product owner. Um, if the product owner is sitting there just writing the requirements, I'm not doing much else, they're just writing the requirements, perhaps ordering them, but they're taking orders from somebody else, that's probably a failing product owner.\n\nIf you ask people in the organisation or even on the team what is the vision of the product, what is it that we're trying to achieve, and they don't have an answer or say, \"Well, that sits on the wiki,\" right? If people don't intrinsically know what that is, then we're probably failing as a product owner. Um, if we're, as the product owner, not in control of the evolution and direction of the product, um, I maybe wouldn't put that in the absolute failing category, but we're definitely not doing very well as a product owner if we're not able to influence and control the direction of the product based on our understanding of the market, right? That's something that we really do need to be able to do.\n\nUm, not taking actual ownership of the product—this is our product, we're building this product, we are making decisions, we're taking the risks, we're spending the money. It needs to be our product, so taking that ownership of that is really important. Um, and if it's all about perception over reality, then that's definitely a failing product owner. \n\nUm, do we want the numbers to look good, or do we want to actually deliver value in the product, which brings in more revenue, brings in more capability to the organisation? Um, there's a lot of focus on vanity metrics in the industry, and metrics, if you don't know that expression, are metrics that just make us look good, like a burn down being on the line, right? So what does that actually tell us about the product? Can you be on that line and things still suck? Yes, of course you can.\n\nSo let's focus on vanity metrics more on the reality of the product, what's going on, what we need to do. Like, uh, Satya, um, writing down eight billion dollars for Nokia—that's looking at the reality of the situation, um, and understanding it, rather than reaching for fairies and magic that we're going to be successful with this. No, we're done; we need to cut our losses on that. \n\nThat's what being a product owner— that's what a failing product owner looks like, right? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Team Potential: Why Every Scrum Master Needs a Quality Camera for Effective Engagement",
    "Description": "Explains how a quality camera helps Scrum Masters boost team engagement, read body language, and foster better communication in remote meetings through clear visuals.",
    "ResourceId": "gWTCvlUzSZo",
    "Url": "https://www.youtube.com/watch?v=gWTCvlUzSZo",
    "Date": "2023-09-21T07:00:14Z",
    "Captions": "Scrum Masters love good cameras. Right? If you are working with a team, there's so much more information gained by being able to see the people that you're engaging with. Not just that they're on camera, but that it is good quality, that you can see part of the body so that you can see their body language. You can see whether they're interested, whether they're excited about the topic, whether they couldn't care less. Right? But they all crossed arms. Right? All of these are indications about how we're facilitating, how we're engaging with people. So good cameras with good staging is what Scrum Masters love."
  },
  {
    "Title": "Harnessing Your Entrepreneurial Spirit: Key Strategies for Product Owners to Drive Team Success",
    "Description": "Learn how product owners can boost team success by connecting work to value, making evidence-based decisions, and improving time to market through agile practices.",
    "ResourceId": "a6aw7xmS2oc",
    "Url": "https://www.youtube.com/watch?v=a6aw7xmS2oc",
    "Date": "2023-09-20T07:00:00Z",
    "Captions": "Uh, what are the top two things that a product owner needs to bear in mind when adopting the entrepreneur stance? I kind of think of the entrepreneur stance as like the visionary looking forward to the future. And that's where a lot of the stuff that ends up on your product backlog is going to be. This is just one part of being a product owner.\n\nI think the two most important things to focus on are, one, connecting the team to the value that you're creating. Does everybody on the team understand the connection between the work they're doing every day and what it is we're trying to achieve? Do they understand that connection? So that would be a lot around vision, communicating it, product goal, communicating it, sprint goals, right? Making that connection between the work that's happening every day. I think that's probably one of the most important things and the most common lacking things.\n\nThe other one is where the value comes from. One of the things that I find when I engage with product owners, the first thing I ask them is, how do you decide what's valuable and what isn't? Quite often, the answer is, I make it up as I go along, right? Which, while not necessarily 100% wrong, a lot of people have very good gut skills at reading the market, reading the information that they have. But really, we want to be taking a more evidence-based approach.\n\nSo from a product owner's perspective, are you making decisions based on information? Do you even have the information that you can get? There's going to be lots of hidden stuff, right? We're still taking bets, we're still taking risks. But do you have enough information to make more of the right decisions and less of the wrong decisions? For that, I usually look towards evidence-based management, right? Making sure that I understand my current value I have in the system, like our product, that's our current value, puts features already in there, and our unrealised value, what are the stuff that we need to have in our system that we haven't built yet? So kind of looking forward into the future.\n\nBut I also really consider our other more organisational capability-focused metrics, where I'm gathering data from both our ability to innovate, right? How much time do we spend on net new things versus existing things? That's the same reason that we all get upset that Netflix is cancelling our favourite show, right? Because they do a season and the numbers are good, but they're not amazing. And if they're not amazing, they know that the second season is going to be less amazing than the first season because it just always is. \n\nSo they would rather invest that same money they would invest in doing a second season of an existing show into doing a first season of a brand new show that might be more likely to get a higher return on investment for that first show, right? We get all upset because they cancel our favourite show with their favourite characters, right? But in reality, they're making commercial decisions based on the data and the analytics that they're collecting from who's watching all the shows and how they're doing it. You need to do that as a product owner, right? That's the product owner making those decisions based on the data.\n\nSo you've got your ability to innovate, and then you've also got your time to market, right? How quickly can you go from, same for Netflix as well, right? How quickly can you go from an idea to getting that thing in front of real users who are then able to give you feedback? Right? How quickly can you get stuff in front of them? And I think that's, if you think in the movie TV show space, that's why we're seeing so many limited series now.\n\nAnd that's because we are unhappy with that false sense of we're getting more later, right? We're getting a second season and we're hoping for a second season, and then we don't get it. Whereas if they market it to us as it's a limited series, we're only making one. If something happens, we might make that, but we're only making one. Then we don't have that sense of loss as users. And that's product ownership, right? They're managing our expectations, they're looking at where the next piece of value is coming from, how can we get different users, increase our market share into our product, and really understanding value and how it impacts on that. \n\nAnd the decisions that you make get the data in there as well. That was thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Team Potential: The Essential Role of Digital Whiteboards in Agile Collaboration",
    "Description": "Explores how digital whiteboards boost agile team collaboration, engagement, and organisation, offering practical tips for effective use in remote and hybrid work settings.",
    "ResourceId": "rbFTob3DdjE",
    "Url": "https://www.youtube.com/watch?v=rbFTob3DdjE",
    "Date": "2023-09-19T07:00:21Z",
    "Captions": "Scrum Masters love digital whiteboards. It doesn't matter what flavour; you can use any flavour you like. There's Mural, there's Miro, there's Lucid Spark, there's Clarkson, and there's a bunch of other ones out there, like Microsoft Whiteboards. \n\nWhatever one it is, building compelling interactive experiences for teams, for groups of people, for workshops, or just your daily scrum is something that you can do in a digital whiteboard. It really helps provide those kinds of information radiators and engagement with people. Digital whiteboards."
  },
  {
    "Title": "What are the top 3 things a Scrum Master needs to bear in mind when adopting the coaching stance?",
    "Description": "Summarises the top considerations for Scrum Masters adopting a coaching stance: building trust, understanding team context, and leading through influence, not authority.",
    "ResourceId": "v1sMbKpQndU",
    "Url": "https://www.youtube.com/watch?v=v1sMbKpQndU",
    "Date": "2023-09-18T07:00:32Z",
    "Captions": "It depends what type of coaching we're talking about. If we're talking about coaching an individual, then the absolute top thing they need is permission. You don't coach without permission; that's just rude and can sometimes come across quite dickish. \n\nWhereas, I think what I'm thinking is the coaching stance is when are you coaching the team, like as a group, the whole team, rather than one-on-one coaching. The team versus, you know, telling them stuff, teaching the team. I think three things you need to learn are to listen. You need to listen to the team and not just listen to respond, but you need to listen to understand. One of the problems that the people on the team have is what are the problems in their interactions with themselves, between each other, outside of the team. How do you understand the dynamic? \n\nListening to the team is really important. Another top thing, I think, is the understanding of what it is that the team are doing. For me, I would maybe put that one first, although I thought of the other one first, but I would put this one probably pretty high on the list. As a Scrum Master, you're leading; therefore, you lead from credibility. You don't lead from mediocrity. You need to be credible within the space that you're leading people. \n\nSo, do you understand what it is they do, how they do it, what the trials and tribulations are? What does good look like for the type of work that the team is working on? And how can you engage with the team in a way that enables them to do more of the right thing and less of the wrong thing? \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why the Scrum Master’s True Power Lies in Influence, Not Authority",
    "Description": "Explains why a Scrum Master leads through influence, not authority, focusing on building trust, fostering team effectiveness, and supporting agile collaboration.",
    "ResourceId": "6L2r8YrehWc",
    "Url": "https://www.youtube.com/watch?v=6L2r8YrehWc",
    "Date": "2023-09-15T07:00:06Z",
    "Captions": "Why isn't the Scrum Master given any real power or authority in the Scrum Guide? What's the thinking behind that? \n\nSo, but they are. They are given accountability over the effectiveness of the team. In Scrum, the Product Owner isn't really given any power or authority apart from the accountability for maximising the value of the work done. Right? The developers aren't given any authority apart from maximising the quality of the product that they're working with. \n\nSo, the Scrum Master has the same type of accountability assigned to them that they need to figure out, without that explicit authority, how to create an environment within which the Scrum team can be as effective as possible. \n\nAnd that generally is the way that most things happen within organisations. Right? Most things in organisations don't happen through authority. Authority is used for escalation. Right? Something's screwed, escalated up, somebody says make this choice. It doesn't matter if it's the right one or not, but go this way. Right? That's that escalation point. \n\nBut a Scrum Master is a leader. Right? And leaders, while in some contexts, yes, leaders get authority and they may have authority as well, but people need to choose to follow them. People need to want to do the things that the Scrum Master is suggesting because they're helping, because people see value in the things that they're doing. \n\nAnd that takes real skill. Right? It's not you as a Scrum Master. You need to understand the processes, practices, and tools. Right? What is it that the teams that you're working with are actually doing? Right? What's their context of their technical environment? What's the context of the business environment? Because you're going to be helping the Product Owner. \n\nAnd what's the context of the organisation as a whole? And figure out how do I increase the effectiveness of the teams going forward. \n\nSo, while they don't necessarily have any real power or authority, they can gain that power and authority through people looking to them for guidance. They're providing value to people. If you provide value to me, I'm going to listen to the things that you have to say because I've listened to you in the past. You provided me with value; I got a success out of it. \n\nTherefore, if I'm unsure or I need more information, I'm going to perhaps come to you because I respect you. I respect your opinion. I respect the information that you have. I respect the value you provide me. And that's how a Scrum Master makes changes in an organisation. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "5 tools that Scrum Masters love. Part 1",
    "Description": "Discover how Scrum Masters use liberating structures to boost team engagement, improve meetings, and drive effective collaboration in Agile and Scrum environments.",
    "ResourceId": "Ce5pFwG5IAY",
    "Url": "https://www.youtube.com/watch?v=Ce5pFwG5IAY",
    "Date": "2023-09-14T07:00:08Z",
    "Captions": "Scrum Masters love liberating structures. Liberating structures are 33 different little constructs that you can use in your meetings, in your events, to make them more eventful, to make them more powerful, to make them have more purpose. You don't just use them willy-nilly. You have a plan, right? What is it you're trying to achieve with your event that you're running with a team or with a group of people? And then building strings of liberating structures that allow you to get from the ideas that people have to the outcome that you're trying to achieve. Liberating structures."
  },
  {
    "Title": "How do you decide whether to pivot or stay the course? (Nokia story)",
    "Description": "Explores how product owners make critical decisions to pivot or persevere in Agile projects, balancing data, instinct, feedback, and adaptability for success.",
    "ResourceId": "B12n_52H48U",
    "Url": "https://www.youtube.com/watch?v=B12n_52H48U",
    "Date": "2023-09-13T13:59:54Z",
    "Captions": "So the question is how do you decide whether you pivot or stay the course? This is something that quite often will need to make a decision at either at the Sprint review or pretty close after it, where the product owner decides whether we're going to pivot and change direction based on what we learned, cancel the whole thing, or we need to stay the course. \n\nI think it's going to depend on an awful lot of factors. There's loads of things that the product owner is going to have to take into account: what the business wants, the direction the business is going, what the stakeholders want if they're separate groups, what the customers want, and what direction is going, and what the team wants as well, and what the current state of the product is. So all of that information kind of comes into this funnel, and then you have to make that decision. Sometimes the right decision is to walk away, so sometimes that's going to be the right decision.\n\nYou want to be really careful and avoid the sunk cost fallacy, right? Where if you've invested so much money in something that you feel like you can't let it go and you have to keep moving it forward. I worked at a bank here in the UK called Intelligent Finance, and they were anything but, by the way. It was an oxymoron. But they had this XML-based form generation system, and they invested so much money in it that they had to use it. They kept using it going forward even though it was demonstratively and arguably the wrong implementation, that there were better ways to solve the problem. \n\nWhen it was solved at the time, that was the right way, and I think that's an example of staying the course when you shouldn't stay the course. That should just be, let's figure out how to solve this problem a different way that's more effective. \n\nAnother great example, probably one of my favourites, is Nokia. Microsoft bought Nokia, and Satya had to make a choice, right? Do we stay the course? Do we keep moving forward, or do we pivot? Maybe we do something a little bit different, or do we have to just abandon it? His choice, based on all the information he had at the time, was to abandon it, which was probably the right choice to make. But that was what, an eight or nine billion dollar write-off of investment Microsoft had just bought it. \n\nAs soon as he came in as CEO, he actually—there's, if you've read his book—he arrived at Microsoft just too late to stop the deal. He didn't want the deal to go through at all, and it was too late for it to stop. So it was immediately upon the purchase, he was like, we're going to have to write this down, we're going to have to write it off. \n\nThe implications are huge, right? Because that has implications at that level, that has implications on share price, it has implications on other companies, on vendors, on all of the companies that have built up things that they were building on top or delivering in combination with Windows Phone. And yeah, they had to kill it. \n\nSo as a product owner, you're accountable, right? In that case, Satya was the product owner for Microsoft, the CEO. Hopefully, your decisions won't be as big or as scary as that, but they can be as big and scary within the context of what it is that you're doing. It's your call, right? And you need to make that call with incomplete information. If you wait long enough that you've gotten all the information you need, it might be too late. \n\nSo sometimes you have to make that call, place that bet, or fold when based on the information you have, based on your gut. You've got the data available, and then add your gut feel to it. What do you think is going to happen? Work for probabilities. \n\nSo don't keep investing in something that you don't believe is going anywhere. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How does a Scrum Master or Agile coach motivate a Scrum Team?",
    "Description": "Explains how Scrum Masters and Agile coaches boost team motivation by setting clear goals, fostering engagement, recognising achievements, and promoting continuous improvement.",
    "ResourceId": "hFjoIf3KPeI",
    "Url": "https://www.youtube.com/watch?v=hFjoIf3KPeI",
    "Date": "2023-09-11T07:00:17Z",
    "Captions": "How does a Scrum Master or Agile Coach motivate a Scrum team? I don't know, is that their job? I think it's part of their job. I mean, the accountability of the Scrum Master is the effectiveness of the team. How are we as effective as possible? Sad, unhappy people doing work are definitely not effective. If people don't care about the work that they're doing, if they don't feel an empathetic connection to the product, an empathetic connection to the stakeholders or the customers, then you're not going to get great products. That's where great products come from.\n\nSo if a team is eminently demotivated, you've got to figure out a way to get some mojo back into that team so that they can move forward. A really common thing that I see is the reason why teams get demotivated is we're building the wrong thing, and nobody turns up at the Sprint review. Right? That's one. I had worked with a team in Norway, and the Product Owner didn't even bother to turn up for the Sprint review. So why would the team care about what it is they're building if even the Product Owner doesn't care about what it is that they're building? Right? That's a really powerful message there.\n\nBut quite often, it's because of the Sprint goal. Because teams tend to create Sprint goals that encompass the entire Sprint, right? So this, you need the entire 10 days in a two-week Sprint, 10 days to go well in order to achieve the Sprint goal. Or you've got a Sprint goal that's complete these 10 things, right? That's one. Or these three features, that's the other one that I see as well. Right? They're all sprinkles because what happens is the chances of success are smaller.\n\nAnd I don't know about you, but if I say to my customers I'm going to do this, and then I have to listen to them complain about how I didn't manage to do that for whatever reason, I'm not a happy team. And if you do that Sprint on Sprint on Sprint on Sprint, why would you think the outcome would be anything else other than a demotivated, unhappy team that isn't able to deliver a working product?\n\nSo figuring out that the Sprint goal doesn't have to be your whole Sprint, right? And if you've got three important things you're working on, pick one. What's the most important? What's the most important thing for the product, right? For your Sprint goal, what's the most important thing for your stakeholders at Sprint review, right? What do they care about? That's your sprinkle. It might only be 20% of the work you're going to do in the Sprint. That's your sprinkle. That's what you're committing to show them at the end of that Sprint. Everything else then effectively becomes optional. That's your buffer zone, but you're going to do as much as you can of that other stuff that needs to happen.\n\nRight? It could be long-term architectural changes are happening. It could be two other features that you're working on in the product. But reduce the size of that Sprint goal so that you have more chance of being successful at the end of the Sprint. And if you're successful at the end of the Sprint, it'll add a little bit of happiness to your team. You know, we were able to be successful. We did something. We provided it. If you focused on something that's of value to your customers, then the customers are like, \"Oh, great job, team! This is awesome. This is exactly what we want.\" And here's how we want you to just because they're engaging, right? So the team sees people that care about the work that they're doing engaging with them, and that builds that motivation.\n\nSo if you really goes back to Dan Pink's book, Drive, right? Autonomy, Mastery, and Purpose. Right? That purpose piece, if you don't have purpose, it all falls apart. So it makes sure that your team understands how their work helps other people and have those other people part of that Sprint review so that they can tell the team that, \"Yeah, this is great. It's helping us. We've solved this problem. We've solved that problem. Here's the next thing we need to work on.\" And you'll start to build that motivation in the team.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What should you do if your Sprint Review delivers harsh, scathing feedback?",
    "Description": "Learn how Agile teams can handle harsh Sprint Review feedback by analysing root causes, engaging stakeholders, and deciding whether to halt, pivot, or persevere.",
    "ResourceId": "LpiLOBG7WgI",
    "Url": "https://www.youtube.com/watch?v=LpiLOBG7WgI",
    "Date": "2023-09-08T07:00:07Z",
    "Captions": "So what should you do if the Sprint review delivers harsh, scathing feedback? I feel like it's more likely that you get no feedback at all. That's as scathing as you can get. We don't care enough to give you any feedback, right? \n\nBut perhaps you should consider what it is you're building and what the direction it is that you're taking the product in. So thinking about, are we building the right thing? Right? Are we building stuff that our stakeholders care about? If we're not building stuff our stakeholders care about, why would you expect them to turn up and give you feedback? \n\nIf they're forced to turn up, right? Like they've been told it's mandatory, they turn up and they don't say anything, it's because they have to turn up and they don't care. You want your stakeholders to want to turn up and want to give you that feedback. \n\nAnd if you get a bunch of negative feedback, that's awesome! Right? That's our indicator that we're going in the wrong direction, that we're maybe doing something wrong, or maybe we're doing something right. We were deliberately trying to ruffle feathers and generate some more ideation in the product. \n\nBut the product owner and the whole Scrum team needs to really focus on what's next. If we get horrible feedback, they hate our products. Are we even building the right product? Is it even worth continuing the product? Is it worth investing in this? Do we need to change tactical direction? Do we need to change strategic direction? Have we got the right product? \n\nThese are all questions that you can ask during that Sprint review. And don't, in a Sprint review, just go, \"We got bad feedback,\" and stop the Sprint review. You need to dive into why you're getting negative feedback. What do the stakeholders think? What's the difference between what the stakeholders expected and what they got, so that you can try and close that gap? \n\nIf you don't know what that gap is, if you don't know where they thought you would be, you don't know how to get there. And it could be that we just cancel the product. That's a perfectly valid outcome from a Sprint review. We decide that, you know, somebody had a great idea, somebody thought it was worth spending some money on, we tried to spend some money on it, and we didn't have any good outcomes. So stop wasting money and go after the next idea, something different, right? That's entirely possible. \n\nSo the kind of three, I guess, three outcomes from a Sprint review are: stop doing what you're doing, that's one outcome; pivot. We love that word, don't we? We pivot and change direction, right? We need to do something slightly different or even a lot different. Or perhaps perseverance, right? We know we're on the right track. It's not yet resonating with the customer base, but we have a firm conviction and belief that this is the right way forward and that we'll be able to get there. \n\nAnd that's your three choices at the end of the Sprint review. Make them well. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Agile Training versus Agile Consulting",
    "Description": "Compares Agile training, which builds broad organisational knowledge, with Agile consulting, which delivers targeted solutions to specific business challenges.",
    "ResourceId": "GS2If-vQ9ng",
    "Url": "https://www.youtube.com/watch?v=GS2If-vQ9ng",
    "Date": "2023-09-07T07:00:08Z",
    "Captions": "Agile training is great for hard testing. You know, getting that knowledge into the business, getting that knowledge into a large group of people. Especially if I've done gigs where you train everybody in the company in the agile practice season and nobody can say they didn't understand what that thing was, right?\n\nBut agile consulting is also generally hard hitting, right? Because you've got a very time-limited nature of that. But it's about targeting specific things that the consultant identifies as not going well or opportunities for improvement within your business. So that's the main difference between training and consulting."
  },
  {
    "Title": "Who Should Lead the Sprint Review? Unpacking the Role of the Product Owner in Agile Success",
    "Description": "Explains why the Product Owner should lead Sprint Reviews in Agile, detailing their role in maximising value, gathering feedback, and updating the product backlog.",
    "ResourceId": "n6Suj-swl88",
    "Url": "https://www.youtube.com/watch?v=n6Suj-swl88",
    "Date": "2023-09-06T07:00:15Z",
    "Captions": "So who should lead the Sprint review at why and how? I think that's a great question. I'll start with the purpose of the Sprint review, right? The purpose of the Sprint review is to get the best possible information from the stakeholders in order to maximize the value of the next Sprint. Right, the product backlog is in the best possible state. It's got all of the things that we need in it. We've absorbed the, the, we've brought together the information from, you know, what we've done in the last two weeks in the product, what's happened in the last two weeks in the business, what's happened in the last two weeks in the market, and we're mushing that together and actually updating the product backlog. So when we walk out of Sprint planning, we have that updated as up-to-date as we can, as effective as we can put it backlog, so we maximize the value that we deliver.\n\nUm, so then the question of who is to lead it? Who on the scrum team is accountable for value delivery, for maximizing the value of the work done by the scrum team? Product owner, right? So I would normally expect the product owner to be the one leading the Sprint review. I mean, it can be anybody on the team. I have no problem with that, right? But the product owner is the accountable party for maximizing the value of the work done, so it's in their best interest to make sure or enable the Sprint review is as valuable as possible. And quite often that means they are the facilitator, right? They are the ones who are getting the most out of it, right? Because that's their accountability, they're ensuring their accountability.\n\nSo perhaps they should create the flow of the Sprint review. What do you, if you're a product owner, what do you need from your stakeholders this Sprint? Right, that's what you're trying to get to. How are you going to create and organize that event so that you maximize the chance of you getting the information that you need in the time that you need it, having the conversations that you need during that event?\n\nUm, so how do you run it? Wow, that any way you like, as long as you get to the outcome, right? I don't really care how you run it. So some teams do demos, some teams don't do demos, right? Because they're already in production. Perhaps a flow that I kind of like, um, I have it documented on my website, but a flow I kind of like is you need to use, you know, the product owner should be setting the scene at the start, right? What's the current vision of the product? Let's reset. This is what we're talking about, is the vision. That's what we're trying to get towards. What's the current product goal, right? What's our current short-term or intermediate strategic goal that we're trying to get to?\n\nUm, and then what was our tactical goal this Sprint? What was it that we were actually focused on? What's the outcome that we told the stakeholders at the beginning, the singular Sprint goal? What's the outcome that we're going to focus on? And then perhaps the team do a demo showing, you know, what it was, what we created in the last two weeks that's pretty cool. \n\nUm, but also we need to get feedback on that demo. That's almost more important than anything else, is getting feedback on that demo. Um, but then if that's the end of your Sprint review, then you're missing out on a lot of extra stuff because perhaps we need to have a conversation about, yeah, we need to have a conversation about what's happened in the business, what the stakeholders are coming to bring information, what information can we get out of the stakeholders about things that are coming up in the future, things that might be talked about in the business, changes in the market that we can bring into our story.\n\nUm, and all the whole throughout this, we need to be actually updating the product backlog. So I think there's lots of ways to run that, but those are the key information pieces that we need to get by the end of it. So run it however you like, whoever you like can facilitate it, but ultimately the accountability we're fulfilling here is the product owner's.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Mastering Product Ownership: Unlocking the Secrets to Effective Product Management in Agile Teams",
    "Description": "Explores the vital role of product ownership in agile teams, highlighting key skills, challenges, and strategies for effective product management and team success.",
    "ResourceId": "WIVDWzps4aY",
    "Url": "https://www.youtube.com/watch?v=WIVDWzps4aY",
    "Date": "2023-09-05T07:00:12Z",
    "Captions": "So my, my one of my favourite classes to teach is the product owner product owner class. It used to be the APS class; it's now the product owner class. The reason it's now the product owner class is because I've found that the singular thing that is most lacking in organisations and teams is good product management."
  },
  {
    "Title": "What should be top of mind when a Scrum team prepare for a Sprint review?",
    "Description": "Learn how Scrum teams can boost Sprint review success by engaging stakeholders, tailoring communication, and focusing on value, transparency, and active participation.",
    "ResourceId": "Juonckoiyx0",
    "Url": "https://www.youtube.com/watch?v=Juonckoiyx0",
    "Date": "2023-09-04T07:00:13Z",
    "Captions": "One main thing that should be top of mind is what do my stakeholders care about. Right, so one of the big values of a Sprint review is engaging your stakeholders, getting information that you as a Scrum team—so that's the Product Owner, the developers, and the Scrum Master—that we as a Scrum team don't have. \n\nHow do we get that out of the stakeholders? And in order for those stakeholders to engage, they have to care. So your engagement with them during Sprint planning has a lot of marketing in it. You're asking, \"What have we done for you, the stakeholder, in the last two weeks or four weeks?\" Right? What have we done for you? Here’s the cool stuff we've done for you. \n\nNo, here are the API changes that we've made or the database triggers we've updated, because the stakeholders are just going to basically fall asleep and probably not going to want to come next time. So that focusing quite heavily, that one big thing is the engagement between what the team is creating and producing and the stakeholders, and how do we maximise that collaborative experience. \n\nAnd perhaps even maximise the number of people that turn up. I find that in a lot of Sprint plannings, teams struggle to get the stakeholders to actually turn up, let alone engage once they're there. Right? But struggle to get them to turn up, and it's because they don't care. \n\nSo are we building the right features? Right? Are we communicating them in a way that those stakeholders need them to be communicated in order for them to understand what it is we're doing and engage with what it is we're doing? Because if you don't have that engagement, the purpose of the Sprint review is to make sure that when we walk out of the Sprint review, we have the most transparent and up-to-date product backlog. \n\nSo when we start the next Sprint, we have the most transparent and up-to-date information to get started with, and you're not going to get that if you don't engage with your stakeholders. \n\nSo getting that engagement is absolutely key. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Organisational Agility: How to Empower Your Team for Rapid Market Response",
    "Description": "Learn how empowering teams, streamlining communication, and providing context enable organisations to respond rapidly to market changes and gain a competitive edge.",
    "ResourceId": "omsEiYqX-Dk",
    "Url": "https://www.youtube.com/watch?v=omsEiYqX-Dk",
    "Date": "2023-09-01T07:00:18Z",
    "Captions": "So organizational agility provides a competitive advantage for organizations, not because agile's the point, because it's not, right? Lots of organizations, that's why a lot of our agile transformations fail, is because the agile becomes the point, not a tool to get to the outcome that the business really needs, which is being able to respond to the market faster. That’s ultimately what it is that we're trying to do with agile, with DevOps, with lean, with Kanban. All of these practices are designed to enable your organization to respond more quickly to market changes. If you can respond more quickly than your competitors to market changes, you get there first, and quite often the person who gets there first is the one that gets the prize, right?\n\nUm, it’s really hard for a lot of organizations to be able to respond to the same, right? So I think something in the market changes. It could be a customer complaining, it could be like a fundamental shift in the actual market, and your business needs to respond. How long does it take to respond? Because the signal happens, we need to make a change, and does it have to go up your organization through different layers to the person at the top? And then the person at the top makes a decision, and then those decisions go back down. It sounds like, well, that could be quite quick; we've got quite a flat organization. But the problem is that because the person who's dealing directly with the market doesn't actually care, quite often they don't. They don't care that much, right? They want to do the right thing, but it's a job, right? \n\nUm, they're looking at that change and going, well, that's not painful enough for me to escalate it to Bob because it's a pain in the ass talking to Bob, so I'm just gonna shut up for a while. And then a couple of months later, well, this is now getting painful enough, I'm gonna escalate it to Bob. So it goes and talks to Bob, and then it has to be painful enough for Bob for him to escalate it to the next level, and then painful enough to escalate it to the next level. \n\nSo it can be a really long time before it escalates up the chain. And then how often have you heard leadership in your organization say, you know, we're changing strategic direction and we're going this way? And nothing happens, right? And it's because that communication has to come all the way back down the organization. So a lot of agile and a lot of agile practices is about pushing responsibility down the organization, enabling the people who have the most information about what it is we need to do to actually respond themselves to the market, right? They don’t have to go ask anybody; let's just deal with these things that are happening. \n\nSo your business responds more quickly, but that means you have to provide those people with a lot more context, a lot more understanding. If you go look up \"Turn This Ship Around\" by David Marquet, that's a perfect story talking about that. How do you know when you can do something if it's within your power to do it? Well, you need more contextual information about the right decision to make. \n\nUm, and that's really what agile is all about. It's about enabling us to go faster in the market, right? Deliver things more quickly, respond to that change more quickly. And surprises, there's good changes and bad changes, right? But respond to the market more quickly.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "One thing an Agile Coach MUST do to be successful?",
    "Description": "Agile Coaches must deeply understand their team's tools, practices, and technologies to effectively guide, challenge, and help teams improve and reach their goals.",
    "ResourceId": "g1GBes-dVzE",
    "Url": "https://www.youtube.com/watch?v=g1GBes-dVzE",
    "Date": "2023-08-31T07:00:17Z",
    "Captions": "I think one thing an agile coach must have to be successful is a deep, deep understanding of the processes, practices and tools of the teams that they work with. Those are the technologies that those teams have to use. \n\nUnderstanding, being a lean agile practitioner, understanding all of the different flavours. Right now, you don't have to understand them all deeply, but all of the different flavours. What is it that your team is working on? What tools and technologies are they using, and how are they using it? Are they using it well? Do they need help in using it? Do they need to be moved in a different direction? \n\nRight, agile coaching is about a lot more than just babysitting the team."
  },
  {
    "Title": "What is empiricism and why is it so critical to great Agile?",
    "Description": "Explains how empiricism—continuous observation, inspection, and adaptation—drives Agile success by enabling teams to respond effectively to real project data and feedback.",
    "ResourceId": "7UZsdsD23rs",
    "Url": "https://www.youtube.com/watch?v=7UZsdsD23rs",
    "Date": "2023-08-30T07:00:05Z",
    "Captions": "What is empiricism and why is it so critical? \n\nYeah, I think in empiricism, so what is empiricism? That is a great question. So, empiricism is effectively inspecting and adapting. We hear that a lot in the agile space, and empiricism is we need to—something happens, we need to be able to see what happened, right? We will look at the data; that's the transparency piece, right? We can see what's going on—really what's going on, not vanity metrics, not all of that [ __ ], right? We can actually see what's going on.\n\nAnd then we're going to— we're actually going to look at it. So it's not good enough just to have the transparency; you have to go look, right? You have to go and analyse the data. You know, all those reports that you create that nobody ever looks at, they're all crap, right? You want to be actually—what data do you need in order to make different decisions? So we have the data, the transparency, right? Or what's going on—look at it, and then we change the way we do things. We change something, right? And that could be lots of different inspect and adapt loops. There's a bunch of inspecting and adapting loops, for example, baked into Scrum. That's why they call it an empirical process, right? It's implementing a number of different inspect and adapt loops.\n\nOne of those loops is the daily, right? You've got a Sprint backlog; your Sprint backlog represents your transparency of the present—what's going on just now. And then every day, you're adapting, inspecting and adapting that backlog, continually adapting that plan towards completion of the Sprints. \n\nYou've also got the Sprint review, right? Continually adapting the product backlog and the product goal towards whatever direction you're going. That way, you're able to kind of steer in different directions as you close those feedback loops. \n\nAnd then you get the Retro, which is the feedback loop for the process itself—our working agreement, right? Our definition of workflow. And every—at the end of every Sprint, we're going to get together and figure out what happened during the Sprint and how can we change this to make our lives in the next Sprint a little bit better, or my—our lives five Sprints down the line a little bit better.\n\nSo there's three inspect and adapt loops just in that part of the process, and the entire Sprint is another inspect and adapt loop. Your customer, right? The stakeholders are engaging in that inspect and adapt process at the end of every single Sprint. They can see what you've done and can decide whether they want to invest in another Sprint, right? Do I—am I getting enough value, or is there enough potential value that it's worth me spending money for another Sprint, or are we done? \n\nRight? Perhaps it was a bad idea, right? We're quite early in the process, and we had a cool idea, but it doesn't turn out it's very good. Or perhaps we're going in slightly the wrong direction and they need to twitch it over somewhere else—pivot, right? At the end of the Sprint, and figure out where we're going next. \n\nThat's the real power of inspect and adapt, and that's why organisations that have large hierarchies and the people that are making decisions are too far away from this actual work that's going on and aren't able to respond quickly enough to the market, right? Because either your market is either a commercial market, right? Your business is doing business with other people, or potentially for a product, your market is inside of the organisation, right? It's another part of the business that is delivering something. \n\nAnd as their needs change or the market needs change, you need to continually adapt the features that you're creating, the direction that you're going, what you're supporting in order to best meet those needs because they're serving some other market as well that's constantly changing. So that's why we need those feedback loops. That's why we need empiricism, because we actually don't know where we're going. We might know what we want to—what we think up front we want to create for this product, right? \n\nBut what about who we're providing that product for? Is their capability, business direction stagnant, or is it constantly changing? What about what those people are creating their outputs for? Is that stagnant or constantly changing? And how quickly can we close those feedback loops? That's really what agile is all about.\n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, Scrum or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Agile Mastery: How the Minecraft Case Study Transforms Training and Team Dynamics",
    "Description": "Discover how using a Minecraft-based case study enhances Agile training by boosting engagement, illustrating complexity, and improving team collaboration in real-world scenarios.",
    "ResourceId": "dTE8-Z1ZgA4",
    "Url": "https://www.youtube.com/watch?v=dTE8-Z1ZgA4",
    "Date": "2023-08-29T07:00:14Z",
    "Captions": "I think Simon is one of the best APS trainers out there. He's really focused on delivering in that space, and in doing so, he created the Minecraft case study in the EPS. Having run it myself as well, I believe it connects people to the work far better than any of the other case studies. It really demonstrates the complexity of the work and connects back to the way we work in the office, although it doesn't seem that way when you think about it, right? Minecraft. But it is far more effective, and that's why I trust Simon."
  },
  {
    "Title": "What has the initial response been to the immersive learning experiences, how do you see that evolving?",
    "Description": "Immersive learning is transforming professional development with ongoing, interactive sessions that boost engagement, retention, real-world application, and tailored growth.",
    "ResourceId": "6D6QTjSrJ14",
    "Url": "https://www.youtube.com/watch?v=6D6QTjSrJ14",
    "Date": "2023-08-28T07:00:05Z",
    "Captions": "So the initial response to the immersive learning has been incredibly positive. Almost every single pair, I can't think of anybody I've spoken to that have said, \"Well, that sounds like it sucks. I'd rather do a two-day class.\" Nobody said that. Everybody detests the full-time two-day workshop. I don't know why we kept doing it for so long. Actually, I do know why we kept doing it for so long. It's because we insisted on trainers going on site to do it, which means that you have to do it in a short period of time because the company that you work for doesn't want to pay for me in a hotel for six weeks and all the stuff that that entails in order to be able to deliver a six-week workshop, right?\n\nSo we need to compress it into a short period of time. Now, in the virtual space, we're free to experiment with different formats, different ways of engaging with students, and it's really resonating with the people that are thinking about taking the class or wanting to be part of it. We've already had customers express interest. We've had customers buy onto, especially the PSPO, which has been hugely popular because they're really interested in that continuous development, right? That conversation that you have over a longer period of time so that you're not just, \"Here's a bunch of content. Bye, that's it.\" That's a two-day class, right? This is more, \"Here's a little bit of content and here's something to try in your business. Go try it, come back next week, and let's have a chat about it. How did you get on? How did it work? What happened?\" \n\nThat piece, businesses, especially small to medium-sized businesses, really see that extra value that they get for it, for really not that much extra cost, right? It's spreading that out over a longer period of time, closing those feedback loops, getting people really embedding those ideas. Not, oh, my favourite expression that actually one of my good friends, Jim, mentioned is that a job as a trainer is to plant seeds, right? Seeds of ideas that are then going to grow into something. \n\nOne of the problems with the two-day format is you're planting a whole bunch of seeds and you don't know what's going to grow, and nobody's coming back to water those seeds or care for them, right? That's just self-service. You've seeds are on your own figuring out how to expand that, whereas this format is the gardener's coming back, tending all of the different plants, the different seeds. You know, if these plants in this area aren't getting enough water, they can spend more time on that, and that really gets those thought processes going. \n\nI'm really looking forward to these immersive classes. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is Kanban such a popular approach for people in creative industries?",
    "Description": "Explains how Kanban helps creative teams organise workflows, reduce chaos, prioritise tasks, and improve efficiency without stifling creativity, using real-world examples.",
    "ResourceId": "-xrtaW5NlP0",
    "Url": "https://www.youtube.com/watch?v=-xrtaW5NlP0",
    "Date": "2023-08-25T07:00:00Z",
    "Captions": "I think Kanban is hugely popular in all industries, not just creative industries, because it does model the behaviour of the existing system. Right? It doesn't require you to change how you're currently doing things. So effectively, when you're implementing a Kanban approach, you start from where you are. You model your existing system, right? And in modelling your existing system, you actually iron out some variability. Because if you've got 10 people in your organisation that are, let's say, our output is marketing videos, right? Marketing content for businesses that we're working with, then, and we've got 10 people working on that marketing content, how does each person choose what the next thing is they go work on? If every person picks differently, right? Makes choices differently, then we've got a high degree of variability in our system that we can iron out. Right? If all these 10 people just got together and agreed whatever thing is in our list of things to do that's been sitting there the longest, let's do that. Right? That way, the oldest thing is the quickest thing to get through the system because you're trying to reduce your overall cycle time, right, for your customers. Then you can use Kanban to model your system, right? You have that conversation: what is our working agreement? What is our definition of workflow for our system? You model it, decide when it starts, when it finishes, and then you've got the data to figure out when we make changes, is it improving the system or is it not improving the system?\n\nActually, I had this conversation a couple of months ago with my dentist, right? So totally nothing to do with software, nothing to do with it, nothing to do with any of those industries. If you're a dentist, right, you have to book people in for appointments. How quickly can you book people in for appointments? So if I say to my dentist, I need an appointment, and it's three months out, right? That's a very long time, right? So their cycle time, their ability to get something into the system, I've asked for an appointment and be able to actually deliver it, is really, really long. Really long. What could they do to shorten that cycle time? Well, perhaps they need little gaps in their calendar to be able to have things that pop in. Perhaps they need to deal with cancellations better. Perhaps they can chase people to say, do you still need this appointment? All those kinds of things, right? But how do they know that that's effective? How do they know that it's valuable and it's changing the way they do business? Right? Because wouldn't it be great if you went to the dentist and said, I need an appointment, and they said, yeah, we've got one next Thursday for you, right? That would be great.\n\nSo having a model for your system so you can monitor the flow of work through your system and look at your cycle times, look at your throughput, look at how long things are taking. Because the shorter the throughput, quite often, the shorter the cycle time, right? People getting into the system and getting through it quicker. And I'll tell you something: people are happier customers if they get their stuff faster. And that's what we're looking at. We're looking at that continuous flow, continuous delivery of stuff. Whatever stuff's in your system, we want to deliver it as quickly as possible.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why do you trust Russell to deliver the PSPO course for NKD Agility?",
    "Description": "Discover how Russell’s extensive product development experience and practical teaching approach make his PSPO course ideal for mastering Product Ownership at NKD Agility.",
    "ResourceId": "qnGFctaLgVM",
    "Url": "https://www.youtube.com/watch?v=qnGFctaLgVM",
    "Date": "2023-08-24T07:00:31Z",
    "Captions": "Russell is one of the best PSPO trainers. He has long experience building something other than software. He used to design control surfaces for military aircraft. In the past, he really understands that connection between product and how we need to work in order to maximise the value of the work that we do. That's absolutely crucial to that product owner class. I've caught up with Russell. I've been in classes with him. I've participated as a student in his classes, and he's one of the best trainers in the world."
  },
  {
    "Title": "Unlocking the Power of Kanban: Transform Your Workflow with Data-Driven Insights",
    "Description": "Learn how Kanban uses data-driven insights and probabilistic forecasting to optimise workflows, improve delivery, and enhance transparency across any team or process.",
    "ResourceId": "RSPw8pZ9NT8",
    "Url": "https://www.youtube.com/watch?v=RSPw8pZ9NT8",
    "Date": "2023-08-23T07:00:10Z",
    "Captions": "So, uh, the Kanban workshop is from uh procamban.org. It's called the APK applying professional Kanban. Um, and it's, uh, really it's 16 hours of a deep exploration of the strategy that is DevOps. \n\nSo there are other things out there that are actual software processes, right? Um, but the core of Kanban is this strategy that allows you to, um, or meta process that allows you to monitor any existing process. Doesn't matter what it is, right? Your existing process could be Scrum, your existing process could be we've made it up as we go along, or your existing process could be, uh, Maurice or SSADM or whatever thing your organisation's doing. \n\nThe Kanban strategy would allow you to observe and record what's going on in that process. You're effectively monitoring the flow of work through that system. Thus, then you're looking at the data, right, enabling you, uh, to continually make tweaks and changes to the system in order to optimise that flow of value, right? So that's, that's, that's really about that delivery piece. How quickly are we able to take an idea that we get and get it all the way into, or all the way into production potentially so that our customers can use it? \n\nBut it will model any system. I think that's the key piece for me, um, is that it models any system and any part of any system, right? So even if you had a team that's just looking at, you know, their view or their area of control is, uh, from when the product owner gives them a feature of the business, gives them a feature to, to, to when they've sent it off to the operations team, right? That could be one view. So you're looking at the cycle time across these two points, doing the report item aging, controlling your whip in it at that level. \n\nBut your business could be looking at a much higher level, right? Instead of individual pieces of value that a team’s working on going through the system, your business could look at all of the endeavours that are underway and what is there from when they come up to it, from when it's actually delivered and what is their throughput, what is their cycle time, what's their current whip, what's the capability of the organisation? \n\nAnd this is especially true in things like professional services, right, where you get gigs coming through and you're trying to service them with the people that you've got. And you don't want to end up in that death spiral of, you know, we've got more people so we need more gigs, and then we've got more gigs so we need more people, and you end up in a spiral of reduction in quality because you've got to hire people because you need them, not because they're the right people to hire. \n\nUm, and that's true for big organisations as well. So, this allows you to model the flow of value through any two points, um, and really improve the way you work because you're able to monitor what's going on. And that's, that's what the APK applying professional Kanban is all about. \n\nSo whether you're a team, right, and you're looking to improve your engineering excellence and shorten the cycle time, get value through your system quicker, or you're doing Scrum, you want to improve throughput in your system, or you're a leadership team and you're looking at the work that's underway across multiple teams, it really doesn't matter what the system is. This is the tool that you need, uh, to monitor the data analysis that you need to monitor not just the flow of value through the system, but then look forward into the future and do probabilistic forecasting on what's coming up next. \n\nHow long do we think things are going to take and how likely is that to happen, right? If we're thinking in bets and really looking at the data from what we've delivered in the past, if we have a stable system, right? You need a stable system first, then we can start looking out into the future using effectively some of the same tools that when you see them talking about the weather on TV, right? \n\nUm, there they say that on Thursday at three o'clock it's going to rain, right? That's their prediction, and then it'll have a percentage likelihood of that to happen. And let's say it's 85% sure that's going to happen. What they've done, and for them it's much more complicated than what we were talking about, much more complicated. They've got these really complex models that model the weather in whatever area you're in, right? \n\nAnd they feed the data from all of history that they've got, plus what's currently happening in the weather, and they feed it into this model, and then they run the simulation thousands and thousands and thousands of times. And what percentage of those simulations does it rain at three o'clock on Thursday? Well, 68% of the simulations it rains at three o'clock on Thursday. Well, it might rain at three o'clock on Thursday, right? It's 65%. If that's the number of simulations, 65% sure it will rain at three o'clock on Thursday. \n\nAnd that's the same thing that we can do with our engineering processes, right? We can look at, um, what are historical delivery, um, on average, for example, um, 85% of the time, that's on average, that's the wrong Edward, but 85% of the time, uh, we deliver work in our team, uh, let's say six days or less. So I'm 85% sure that any piece of work we take on will be delivered in eight days or less, right? \n\nSo we can make that a forecast looking into the future and put it into a simulation. And for that, we normally use a Monte Carlo. Feed some data in, run it 10,000 times. What's the chances of you delivering 10 things in the next Sprint, 20 things, 30 things? What's the percentage likelihood that's going to happen? And then you can have real conversations with your stakeholders, not about what you will and what you won't do, but what is the likelihood of certain outcomes happening. \n\nWith the clear understanding that there is also, no matter how, um, high in the percentiles you go, right, you never get to a hundred percent. You can get to the 99th percentile, right? But you can never get to 100. So there's always a chance that something wouldn't happen, and that's a key learning outcome for engaging with stakeholders, for the stakeholders and the teams communicating with them that we want to be talking in percentages. We want to be talking about probabilities, um, with our stakeholders for whatever it is we're doing. How likely are things to be successful, just like businesses have always done? \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why do you trust Joanna to deliver Scrum.Org classes for NKD Agility?",
    "Description": "Discover how Joanna’s technical expertise, clear teaching, and real-world Agile experience make her Scrum.Org classes at NKD Agility essential for mastering Scrum and Agile.",
    "ResourceId": "8gAWNn2RQgU",
    "Url": "https://www.youtube.com/watch?v=8gAWNn2RQgU",
    "Date": "2023-08-22T07:00:03Z",
    "Captions": "Joanna is one of the most competent trainers in the ScrumDog space I've ever worked with. I think part of it is her background; she has deep technical expertise, a PhD in robotics, which puts the rest of us to shame. \n\nBut she just has this way of communicating, and the way she cuts through the BS in classes is just amazing. She has this great way of communicating, and her knowledge and depth of understanding of agile leadership, user experience, and all of these tools and techniques that we talk about is just beyond compare."
  },
  {
    "Title": "If a client hasn't considered DevOps consulting as part of their Agile Consulting needs, why should they?",
    "Description": "DevOps consulting enhances Agile by improving collaboration, accelerating delivery, and ensuring quality, making software development more efficient and resilient.",
    "ResourceId": "aS9TRDoC62o",
    "Url": "https://www.youtube.com/watch?v=aS9TRDoC62o",
    "Date": "2023-08-21T07:00:01Z",
    "Captions": "If a client, so if you're doing Agile, why should you incorporate DevOps? I think the core answer is that you can't really, if you're building software products—I'll caveat that—if you're building software products, you can't do one and not the other. DevOps is really synonymous with this idea of engineering excellence, right? Of shortening the feedback loop, making high-quality code, shifting left, and those things are part of that DevOps story. \n\nThey need to go up in kind of logger step with your Agile practices. And if you're doing something else, let's say you're doing marketing, right? You're delivering marketing output, then your Agile practices will increase, but you need to increase your capability of your teams to deliver marketing content, right? That would be that technical site in the software world—it's DevOps, right? \n\nBuilding up that expertise, if you're amazing at delivering products to production really quickly, of delivering high-quality products to production really quickly, but you haven't figured out how to adapt your organisation so that you respond more quickly to the market, then you're still not going to get the value from the DevOps, right? \n\nSo trying to figure out how you maintain, keep increasing your levels of technical capability of engineering excellence, right, on one side, at the same pace as you're increasing your ability for your organisation to respond to the market, right? Whatever market you're in is really important. You have to balance that out. \n\nI mean, one can get further ahead than the other, but you really do need them to go in step. So once you start bringing in those engineering excellence or DevOps practices, you're able to allow your engineers to really focus on how they shorten those feedback loops—not just the business feedback loops, but the actual engineering feedback loops—and build products that they can get into production as quickly as possible so you can validate all of the assumptions that you made when you were designing it. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "1 thing that sinks a consulting engagement before it starts gaining traction?",
    "Description": "Overly detailed consulting contracts can hinder project success by limiting flexibility; focus on outcomes and value to adapt to changing client needs and product goals.",
    "ResourceId": "7VBtGTlkAdM",
    "Url": "https://www.youtube.com/watch?v=7VBtGTlkAdM",
    "Date": "2023-08-19T07:00:06Z",
    "Captions": "The thing that will completely sink your consulting engagement before it gets started is the contract. If your contract states exactly what needs to be delivered, when, on what cadence, and how much it's going to cost, you're already screwed. That’s not the reality of the unpredictable nature of building products that don't exist yet. \n\nIf you sign up to those contracts, you're just gonna have a bad time. Make sure that you think about how you don't want anything in your contract that specifies exactly what you're going to deliver and when. You want to be talking about the outcome: what is it you're trying to achieve and what value are you going to deliver to the customer? Everything else is irrelevant."
  },
  {
    "Title": "Harnessing the Power of Empiricism: Transform Your Decision-Making with Data-Driven Insights",
    "Description": "Learn how using empirical, data-driven methods can improve decision-making, foster continuous improvement, and build trust through transparent, evidence-based actions.",
    "ResourceId": "Q46T5DYVKqQ",
    "Url": "https://www.youtube.com/watch?v=Q46T5DYVKqQ",
    "Date": "2023-08-17T07:00:09Z",
    "Captions": "Empiricism is an interesting beast. Ultimately, empiricism is this idea that all knowledge comes from observable data. Right? That's science, is based on empiricism, and it's been adopted into the agile way of working and many other ways of working in business. \n\nThat really, you should have access to all of the data. You should make deliberate actions that you think will affect the data, and then you monitor the data to see whether those outcomes have actually come to pass. \n\nAnd then you repeat that experiment a bunch of times, and if you are able to repeat it and successfully get the same outcome, then it's probably a thing that you should be doing. Otherwise, it might just be something that worked that way for one time."
  },
  {
    "Title": "Unlocking Agility: How EPS Immersive Learning Transforms Your Team's Performance",
    "Description": "Discover how EPS immersive learning boosts team agility with structured feedback, coaching, and tailored sessions, driving continuous improvement in real-world settings.",
    "ResourceId": "6S9LGyxU2cQ",
    "Url": "https://www.youtube.com/watch?v=6S9LGyxU2cQ",
    "Date": "2023-08-16T07:00:03Z",
    "Captions": "So the question is, is the EPS immersive learning experience the equivalent of having a hands-on Scrum coach? No, but almost. I think is probably the right answer to that. \n\nHaving somebody with your team on a continuous basis is really helpful, right? Somebody to even, even Sprints later, who you're able to get advice from and engage with is really powerful. But we kind of almost do that with our immersive class, right? So what we do is, each session includes a feedback loop, right? The assignment you get at the end of the session to try in your organisation is then debriefed before the next session, so you're closing that feedback loop. \n\nThat includes a little bit of coaching, right? Because you're not just doing it; you're getting the feedback from it and getting coaching from the trainer slash coach who's able to help you with that. But also, it's over 10 weeks, right? Typical Sprint length is two weeks, so you actually get five Sprints' worth of help, and you're only taking one half day per week per Sprint out. \n\nSo that's one day, ten percent of your Sprints, right? In our two-week Sprint, that's ten percent you're losing, right? That's you're losing it as productive time on the team building your product. But hopefully, what you gain back in overall effectiveness of your team over five Sprints, right? Continually coming back, closing those feedback loops, trying something new. \n\nHow many retrospectives do you have in those five Sprints? You have five retrospectives, right? So you can get together as a team and each two weeks, each two sessions, figure out how much the training has helped you and bring that information to the next session so that the trainer can then adapt and augment the training based on the needs of you and your organisation on a continuous basis, right? That's super awesome. \n\nAnd in addition, oh, if that wasn't enough, right? The We Always Nickel Agility always offers an hour of additional coaching per person that's in the class, right? So if you're doing a 10-week, 10 weeks with us, with let's say 12 people in the class, the immersive classes are a little bit smaller, right? So you get 12 people in the class, you get an additional 12 hours of coaching and help. \n\nSo maybe that trainer comes back for your next two or three retrospectives. Maybe they sit in on, or even during that time, right? They sit in on our Sprint review and a Sprint retrospective and your some of your dailies, and you can close some of the more of those feedback loops, get more help, get that coaching as part of the scenario. \n\nThat is being delivered. That part is up to you, right? You have to want it because you have to use it, and you have to figure out how to include it in your process. But the APS immersive class is ultimately a 10-week, five Sprints, five Sprint kickstart for your organisation and moving towards Scrum or Kanban or whatever it is you're trying to do. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What are 3 key takeaways for a scrum team after attending an APS immersive learning experience course?",
    "Description": "Discover three essential lessons for Scrum teams after an APS immersive course: deepening core understanding, overcoming early challenges, and distinguishing true Scrum practices.",
    "ResourceId": "221BbTUqw7Q",
    "Url": "https://www.youtube.com/watch?v=221BbTUqw7Q",
    "Date": "2023-08-14T07:00:01Z",
    "Captions": "Ah, so three. What are the three key takeaways to attending the APS class, especially the immersive APS class? \n\nUm, so I think the first one is that fundamental understanding of the underlying principles of scrum and the practices that make it up, right? That's kind of key. But I guess at a double advantage to that of the immersive class is that you can augment that story with how you're actually implementing it within your organization, right? So you can, although Martin's going to say this is how a product owner works, that's in a box. Here's the definition of product owner from scrum. \n\nUm, you're then perhaps going to go try some of those things inside of your organization and you're going to be like, \"Oh, well this bit sucks and that bit sucks and we can't do this bit,\" and the organization says we're not allowed to do that. And then you can come back and we can tweak it, right? There's not one way to do scrum; you can tweak it to figure out how it is that it can be most effective within the context of your organization. So that's really the first one: that empirical understanding of the underlying principles of scrum and how they work. \n\nUm, the second one is probably that bit at the end, the getting started right. The, um, you know, the getting rid of the Klingons that have come into your process or, um, uh, you know, scraping the Klingons off the starboard bow, if anybody remembers that. \n\nUm, I may be too old; that's what it is. I'm going to be too old. But, uh, the also the getting started right. Lots of teams really struggle. We understand this scrum thing now. \n\nLike, what do I do? What's next? Um, and the advantage to the immersive classes is that's happening continuously throughout the class, right? Rather than you having a two-filled day or here's a week of training and then Monday we're doing something different and we don't know where to start, you get introduced to a little piece at a time. Try it within your organization a little piece at a time. Try to try it little piece, little piece, little piece. \n\nUm, so that's probably the second key takeaway. Man, what's the third? Third one? \n\nUm, probably learning what is not scrum, right? That, that I mentioned, like the Klingons, the things that are built up in our process. But there's also not just institutional knowledge within our organization, um, but institutional knowledge within our industry of what people think scrum is. So you'll have people who have done scrum in other organizations that also bring their Klingons and barnacles, right, to the story. \n\nUm, and when you mush that all together, you end up with something that perhaps doesn't look like scrum at all, doesn't have any empiricism, doesn't close any feedback loops, doesn't have working products at the end of every iteration. And that's fairly common, right? So being able to clearly understand what is and is not scrum so that you can choose the not, even if you're doing the core right. \n\nUm, and I think that's a huge key takeaway for the APS class. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How effectively does an APS prepare a team to do a solid, professional Scrum?",
    "Description": "Explains how Applied Professional Scrum (APS) helps teams master Scrum by focusing on fundamentals, removing unhelpful practices, and enabling effective agile transformation.",
    "ResourceId": "QI3oE9IUc6E",
    "Url": "https://www.youtube.com/watch?v=QI3oE9IUc6E",
    "Date": "2023-08-12T07:00:10Z",
    "Captions": "The EPS prepares a team for professional Scrum and by really doubling down on those core fundamentals of Scrum you must have a working usable product at the end of every iteration, including the first. If you don't, there's no agility there if we don't have working usable products, right? Because we need to be able to test and get feedback from that.\n\nWhat else is really important from the EPS? One of the most powerful features of the APS, which is why it actually is super effective for existing teams as well, like teams that are already doing Scrum, is that level set of what is and is not Scrum. Quite often in our organisation, we pick up Scrum, we learn Scrum, we've been doing Scrum for a little bit within our organisation, and it picks up a bunch of barnacles. I don't know, well, I go with a sailing metaphor. Yeah, let's go with the sailing metaphor. My brother sails; he does races across the channel in the UK from England over to France. I don't think he's come second once, but you know, these are really, really heavy races.\n\nThe thing is, anything that goes in the water that slows down the boat, that slows down the stream of water, because he's dragged, right? Even the smallest amount of drag can severely impact your place over a race. Barnacles are the bane of the ships—not ships, sailboats, boats. You can tell I'm not an expert sailor, right? But the barnacles get on the side and then they cause drag. That's what happens when you've been doing Scrum for a while in your organisation; it picks up a bunch of barnacles, right? Stuff that gets stuck onto it at some point because you needed to solve a problem, because your organisation didn't do things in a way that was as effective as it could be. \n\nSo we have to stick this thing into Scrum. Maybe that thing was user stories or story points, or maybe that thing was, I don't know, we're going to have a burndown, or it could be some other report that your organisation really, really wanted, so you had to capitulate for, and then it's just kind of stuck there. Maybe it's outlived its usefulness, but we as a team think of it as part of that overall package because when we say Scrum within our organisation, that's what we mean—the whole package, including all the barnacles that we've had attached to our process. \n\nSo the EPS is a great place to come and scrape off those barnacles, right? What are the things that are and are not core to Scrum? Because everything else is a choice. So how do we disambiguate the choices that we've made from Scrum itself so that perhaps there's other choices that are maybe more effective now than they were before? \n\nOne of my favourite exercises at the end of the class is where can we—I kind of have a choice, and I let teams decide, the groups decide. They can either do a kind of getting started because we're not doing Scrum and we want to figure out how do we get started doing Scrum in our organisation, and then there's a kind of barnacle exercise, right? Which is how do we improve, like a little retrospective on our implementation of Scrum to start at least identifying the barnacles that we have in our Scrum process within our organisation and then figuring out how to address them a little bit, right? That's a great exercise.\n\nIf we do it privately within organisations, there's an additional exercise that I run, which is the people in the class create an organisational change backlog. What needs to be in an organisational change backlog to make Scrum successful or more successful or valid within our organisation? Really, it's an agile transformation backlog from the people who are actually doing the work, right? What are their problems going to be? Hopefully, there's leadership available who are able to take ownership of that and take it forward.\n\nWe do that mainly in the private classes, not so much in the public ones, right? Because it doesn't make sense if you get 20 people from 20 different companies. That is how the APS effectively prefers teams to be professional Scrum teams. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Dogma versus Empiricism in a consulting engagement",
    "Description": "Explores why rigid dogma hinders consulting, emphasising the value of empirical, flexible, and empathetic approaches for effective problem-solving and continuous learning.",
    "ResourceId": "Iy33x8E9JMQ",
    "Url": "https://www.youtube.com/watch?v=Iy33x8E9JMQ",
    "Date": "2023-08-11T07:00:08Z",
    "Captions": "I think that that Dogma really has no place in a consulting engagement. It actually has no place anywhere. Right, Dogma has no place anymore anywhere. \n\nBut there is a place for being pedantic when you're in training, right? Because you're trying to learn something. Here's the way this thing is supposed to be. But when you're actually implementing inside of organisations, when you're actually talking to people and engaging with them when they're trying to do their jobs, there's no place for pedanticism. \n\nEven a word? Either it's about being pragmatic and empirically adapting our processes to the changing demands of the business. That's it."
  },
  {
    "Title": "Harvesting Agility: What Mushroom Foraging Taught Me About Scrum and Team Dynamics",
    "Description": "Explores how mushroom foraging offers practical lessons for applying Agile and Scrum, highlighting environment, patience, and team dynamics for continuous improvement.",
    "ResourceId": "aWYoJtSgTDo",
    "Url": "https://www.youtube.com/watch?v=aWYoJtSgTDo",
    "Date": "2023-08-10T13:30:01Z",
    "Captions": "One of my friends tends to say that I see Agile and Scrum everywhere, including in the forest and me going to one of my favourite activities, mushroom foraging. And yes, I believe we can learn a lot about agility when we look at what I do, especially in the autumn in the forest.\n\nSo, first point: you have to choose the right environment, right territory, right. You most likely will not find great mushrooms in some of the forests, so this is the knowledge that you can either ask someone. There are some sources of knowledge on how to find the forest where there will be some potential mushrooms. Some of the ideas you can quickly cut out from your list: don't go to the city centre; I don't recommend such places for mushroom foraging. So, some of the places obviously will not work.\n\nAnd when you are coming into the forest, there are also some other, I would say, learned rules for me. If you want to explore, if you want to find the best mushrooms, well, if you just stay in the safety zone, so close to the edge of the forest, my piece of advice as an experienced mushroom forager is that maybe a lot of people have been there already. \n\nSo, if you want to achieve more, if you want to potentially find better mushrooms, more mushrooms, leave this comfort zone, go deeper, explore. And when it comes to how do you do that, well, you don't run in the forest for many reasons. One of them is because you want to focus; you want to make small steps. You want to sense the environment around you, and trust me, sometimes I can even smell good places where mushrooms can be found. \n\nSo, all your senses are needed, your focus is needed, and you have to be patient. It happens that sometimes you are so excited; you have nice new buckets going to the forest, and oh well, nothing in the buckets. But at least that's a very healthy sport, I would say.\n\nSo, being patient, learn how to explore, be careful, be focused, and be prepared that this journey will need more time, more devotion. Definitely, you can learn more and gather more mushrooms if you invest your time wisely in that process."
  },
  {
    "Title": "From Control to Empowerment: Embracing Agile Leadership in a Complex World",
    "Description": "Explores the shift from traditional management to agile leadership, highlighting empowerment, adaptability, and collaboration as key to navigating complex modern challenges.",
    "ResourceId": "Jkw4sMe6h-w",
    "Url": "https://www.youtube.com/watch?v=Jkw4sMe6h-w",
    "Date": "2023-08-09T13:43:27Z",
    "Captions": "That is an amazing, that's an amazing question. \n\nFrom my point of view, the main difference between traditional management and agile leadership is based on the context. Context is the king here, and it plays a crucial role. \n\nTraditional management was created for defined problems. The problems that maybe they are not easy in the sense we are producing some sophisticated stuff, but they are simple or obvious from a complexity point of view. So those are things that are relatively easy to follow. You need instructions, you need monitoring, you need someone with knowledge and expertise how to control the whole process. \n\nSo if you face very little or no ambiguities, you have very little risks, very little unknowns. Well, you can completely forget about unknown unknowns. You might be lucky to take benefits from traditional management. Such managers are very important for this kind of problems and challenges. \n\nIn my view, however, why we are talking about agile leadership and the importance of that? Well, my view is that we, as humankind, we've learned a lot how to improve things. \n\nWell, I mean automation, using sophisticated machines, algorithms, AI is helping us to translate problems that have some unknowns into something that can be handled by the machine. \n\nWhat does it mean for us, for humans? Well, more and more problems to come are moving towards complex domain. The domain that is very interesting, the domain that needs creativity. And this is the domain where traditional management might not be the best tool. \n\nSo imagine the situation that you are coming to the restaurant, the waiter is serving a very hot soup, and now you have a sharp knife. Enjoy your meal! Most likely, you may cut yourself, right? So this is the metaphor that I personally love in that context. When you face complex problems with a lot of unknowns, traditional management might be seen as this sharp knife served next to the bowl with a very, very hot soup. \n\nSo agile leadership changes its approach. It emerges as a response to our world with a lot of problems, a lot of ambiguities, a lot of unknown things. This is the leadership that is focused on taking the best out of us humans, taking the best out of creativity, creating teams, self-managing teams, teams that are making more and more decisions. \n\nAnd the role of the leader, because of that, is changing. It is changing towards creating the right environment, fostering, creating the right culture, and helping others in that process instead of controlling and monitoring."
  },
  {
    "Title": "Part 2: Most influential people in Agile",
    "Description": "Highlights Simon Randell’s significant influence on Agile practices, focusing on his facilitation skills, communication style, and impact on Agile learning and leadership.",
    "ResourceId": "eykcZoUdVO8",
    "Url": "https://www.youtube.com/watch?v=eykcZoUdVO8",
    "Date": "2023-08-09T07:00:14Z",
    "Captions": "One of the most influential people in Agile for me is Ralph Yakum. He is the author of the Professional Scrum Product Owner book from Scrum.org. He is a great colleague. I met him at Agile in Africa for the first time; we met in Ghana of all places. Oh, he just really connects and understands and helps connect me as well to product ownership and product management. He's just amazing at that stuff."
  },
  {
    "Title": "How will the immersive learning experience help coach people on the job?",
    "Description": "Immersive learning enables on-the-job coaching by combining real-world assignments, collaborative feedback, and practical application for deeper, sustained Agile skill development.",
    "ResourceId": "pU57BrP94-8",
    "Url": "https://www.youtube.com/watch?v=pU57BrP94-8",
    "Date": "2023-08-08T07:00:22Z",
    "Captions": "So the immersive learning experience helps coach people on the job because it's done over a number of weeks. Usually, I think the PSM is eight weeks, the PSPO is seven weeks, and the EPS is ten weeks. So we have one session a week at the beginning of the week, like four hours, and then at the end of that session, you get an assignment that you're able to then do within your organization.\n\nSo because you're doing it within your organization, you're then going to come to the next session the next week with, you know, stuff that didn't work out so well, or maybe it was all awesome, right? But be able to get feedback and iterate on some of those ideas.\n\nSo at the beginning of each session, apart from the first one obviously, we have a debrief for that exercise, which is why the immersive classes tend to be a little bit smaller, right? Because we've got to go through everybody's debrief and make sure everybody's good and okay. But you're also going to have maybe up to 12, well, 11 other people as well as myself for the trainer that you are able to have a conversation with, right? And see what did they try, right? If everybody had the same assignment, what worked in other organizations? Maybe there's more than one of you from your organization, and you find out that they were successful and you were unsuccessful. And then you can figure out, well, so what did you do differently in the organization that worked out, and what did I do differently that didn't? And how do we share that knowledge and share that experience?\n\nSo that's that iterative double loop learning that you get so that you can collaborate not just within your organization but without in the immersive class experience.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "5 critical Skills to master as an Agile Consultant?  Part 1",
    "Description": "Explores essential skills for Agile consultants, focusing on understanding client context, embracing uncertainty, learning from setbacks, and continuous adaptation.",
    "ResourceId": "Ye016yOxvcs",
    "Url": "https://www.youtube.com/watch?v=Ye016yOxvcs",
    "Date": "2023-08-07T07:00:10Z",
    "Captions": "A critical skill to master as an agile consultant is really understanding that you can't possibly understand the customer's context. There's just no way you can do that in the short period that you engage with them. \n\nSo you need to leverage your experience with previous customers and make suggestions that may or may not work within the context of the customer. You're probably going to get it wrong more often than you get it right. You need to keep iterating on that idea and figure out what works well with that customer. \n\nYou'll also find a bunch of stuff that works well everywhere. It's just people. You'll find stuff that works well, but yeah, don't assume you know the customer's context."
  },
  {
    "Title": "1 thing you wish you knew at the start of your Scrum journey?",
    "Description": "Learn why combining Lean principles with Scrum from the start boosts team efficiency, collaboration, and insight, leading to a more successful and informed Agile journey.",
    "ResourceId": "5s9vi8PiFM4",
    "Url": "https://www.youtube.com/watch?v=5s9vi8PiFM4",
    "Date": "2023-08-04T07:00:03Z",
    "Captions": "The one thing I really wish that I knew, understood, or was exposed to at the beginning of my Scrum journey was also having a Lean journey, a Lean story as well. I didn't encounter Lean until about seven or eight years into my Scrum story, and it took me that long to really truly understand how it changed the dynamic. \n\nScrum is the social technology that helps us work together more effectively. Lean is the data and understanding of how we're doing that thing that enables us to be even more successful."
  },
  {
    "Title": "3 reasons why you should level up your knowledge and skills?",
    "Description": "Discover how continuous learning, embracing trial and error, and caring deeply about your craft drive professional growth, resilience, and lasting industry success.",
    "ResourceId": "ZXDBoq7JUSw",
    "Url": "https://www.youtube.com/watch?v=ZXDBoq7JUSw",
    "Date": "2023-08-03T07:00:11Z",
    "Captions": "Three reasons why you should level up your knowledge and skills. I only need one: becoming a professional and continuing to be a professional. That's how you're able to keep being successful in your role, successful in your industry. It is continuous learning, continuous understanding, continuous trying and failing and trying again. That's what makes you the difference between a professional and an amateur, right? You actually care about what it is that you do and how you do it."
  },
  {
    "Title": "Hardest part of becoming a professional Scrum Master?",
    "Description": "Explores why embracing true professionalism is the hardest part of becoming a Scrum Master, highlighting the importance of deep understanding, mastery, and continuous learning.",
    "ResourceId": "MCdI76dGVMM",
    "Url": "https://www.youtube.com/watch?v=MCdI76dGVMM",
    "Date": "2023-08-02T07:00:12Z",
    "Captions": "The hardest part of becoming a professional Scrum Master is the professional bit. Um, that's the book that is often missing for folks. Um, it's not just specific people; that's an epidemic in our industry. People aren't um focused on that professionalism, and so the hard part is actually learning the stuff, actually understanding it, understanding the theory, how it applies, and becoming a professional Scrum Master."
  },
  {
    "Title": "How will the Immersive Learning experience change the game for people with a couple of years experience in the field?",
    "Description": "Discover how immersive learning empowers experienced Agile professionals to deepen skills, tackle real-world challenges, and accelerate growth through hands-on practice.",
    "ResourceId": "VjPslpF3fTc",
    "Url": "https://www.youtube.com/watch?v=VjPslpF3fTc",
    "Date": "2023-08-01T07:00:19Z",
    "Captions": "So the question is how will the immersive learning experience change the game for people with a couple of years experience in the field? I think that's going to even level up from folks that don't have so much experience in the field and are learning it for the first time because you'll already be coming to the class the first time round with those questions that perhaps newbies are coming the first time around. You're coming the first time round with questions that you already have.\n\nUm, and we could perhaps enable even greater degree of double loop learning the first time round as well as the second time round. So you're coming with those questions; we can talk about them as part of the theoretical experience. I don't know about other trainers. I know the trainers that I work with, we love it when people come pre-prepared with a whole bunch of really hard questions, right? Because that's what makes it interesting for us. We're not teaching the same thing all the time; it's something different and specific and ideas and situations. \n\nAnd if we can get the theory with some of those ideas answered, the trials and tribulations that you already have in your organisation, and then you get the exercise, the assignment where you're going to try that new thing with that forward knowledge in your organisation, and then we can loop it back again and get"
  },
  {
    "Title": "Transform Your Team's Skills: The Power of Immersive Learning in the Workplace",
    "Description": "Discover how immersive learning boosts workplace skills by connecting theory to real tasks, encouraging feedback, and supporting growth through coaching and collaboration.",
    "ResourceId": "IcmNR--u-kg",
    "Url": "https://www.youtube.com/watch?v=IcmNR--u-kg",
    "Date": "2023-07-31T07:00:12Z",
    "Captions": "The question is how does the immersive learning experience change the game in terms of entry-level capabilities? I think it really connects the skills that people actually need to the job that they're doing. Because normally in a two-day training class, we're teaching a lot of theory, right? It's actually very difficult to connect that to people's real world. \n\nUm, and we perhaps use ways to connect it to something that they can then connect to the real world. Um, but it doesn't, it's still single loop learning, right? They're still absorbing the content and then they have to go figure it out for themselves. Whereas the immersive learning programme allows us to teach a small amount of content, a small amount of theory, and then they get seven days, five, six days a week to go figure out how do I do some of this inside of my organisation? What's the difficulties that we run into? What's the roadblocks that we hit? What's the questions that we get asked by other people in our organisation?\n\nAnd then come back, closing that feedback loop, right? Making learning an empirical process and have that double loop learning where they're then able to, um, have a conversation with the group, figure out how do we solve some of those problems? How do we answer some of those questions? How do we change some stubborn ideas, right? Some folks have, have this is the way I've always done things. Why should I listen to you and do it a different way?\n\nUm, and you can then start coming back around. And that's also why we include additional coaching and consulting as well as part of our training class. Everybody just gets that. So not only do you get in an immersive class and get that group double loop learning, but you also get individual learning as well, where they can come back and get additional coaching as part of that programme.\n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "From Product Owner to Systemic Leader: Embracing the Evolution in Agile Leadership",
    "Description": "Explores how experienced Product Owners transition into systemic leaders, focusing on increased accountability, organisational impact, and fostering Agile team culture.",
    "ResourceId": "cFVvgI3Girg",
    "Url": "https://www.youtube.com/watch?v=cFVvgI3Girg",
    "Date": "2023-07-28T07:00:14Z",
    "Captions": "Of why is the Professional Agile Leadership Essentials course a natural evolution for an experienced product owner. It starts to bring in, um, again as product owners become more advanced in product management, right, as they get more skilled within the organisation, as they get more respected within the organisation as having that product management feel for them, they'll start to be, um, given more accountability, right, or have being able to pick up more accountability, uh, that's enabled for them. And they start moving into a more leadership role as well. \n\nAnd quite often, I know people who are product owners, um, who are not just product owners; they are systemic leaders inside of their organisation. My favourite product owner is, uh, Brian Harry, who is the product unit manager of the Azure DevOps team at Microsoft of the developer division at Microsoft, um, and he had something like 650, 700 people, um, that reported to him. \n\nUm, and he's the product owner, he's the budget holder, he's the direction maker, the strategy designer, right? Even though he's taking lots of input from lots of different people, he's the one that has the final say. So he is the product owner, but he's also the leader. He's the people that everybody in that engineering department looked to. He was the one that created, I'm using the wrong phrase, created the culture that everybody worked within. But that's not really the right phrasing because he didn't create it; he created a system within which, uh, the culture, the desired culture, thrived, right? \n\nAnd that's part of leadership, right, is creating the systems that we all work within. That's slightly bigger than just being a product owner. So I think it is a logical evolution; it's the next step, uh, from product ownership, um, that allows, um, for a better understanding of that holistic organisational view. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is the Professional Agile Leadership - Essentials course a natural evolution for an experienced Scrum Master?",
    "Description": "Explains how the Professional Agile Leadership – Essentials course helps experienced Scrum Masters gain leadership skills, understand organisational challenges, and broaden their impact.",
    "ResourceId": "7R9_bYOswhk",
    "Url": "https://www.youtube.com/watch?v=7R9_bYOswhk",
    "Date": "2023-07-27T07:00:04Z",
    "Captions": "The question is, why is the Professional Agile Leadership Essentials class a kind of core evolution for a Scrum Master? I think, again, there are two great reasons. The first one is that it enables a Scrum Master to hear the questions that leaders and managers have about Scrum, about the context that we're talking about, right? They get to hear some of the other ways that it's important to them or that we can solve problems for them.\n\nBut also, I think of the Scrum Master as being the first rung on the leadership track, right? This idea that I call them kind of gold shirts, right? Like the Star Trek idea. You get people that are on the leadership track, and you get people that aren't really interested in the leadership track. There are loads of people out there who are quite happy being software engineers, right? They're quite happy being Scotty, running these engineering departments. They don't want to be in charge of the ship at all.\n\nSo, we need to be able to cater for both of those groups, and the Scrum Master is a natural position of leadership. They're a leader who serves the team. Then the next level up is the leader who serves a bunch of teams, and the next level up is the leader who serves a part of the organisation or the leader who serves the actual organisation, right?\n\nSo, that gives you that kind of leadership track of the organisation. For the Scrum Master, learning the language, the lexicon, the problems that the leaders see at those levels will help them better serve people at those different levels in the organisation.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is Johanna a great teacher for the Professional Agile Leadership - Essentials course?",
    "Description": "Highlights Johanna’s passion, deep experience, and engaging teaching style in the Professional Agile Leadership course, fostering dynamic learning for leaders and decision-makers.",
    "ResourceId": "EOs5kZv_7tg",
    "Url": "https://www.youtube.com/watch?v=EOs5kZv_7tg",
    "Date": "2023-07-26T04:03:17Z",
    "Captions": "So the question is why is Joanna a great teacher for the Professional Agile Leadership class? I think there are two aspects that really make it perfect for her. One is her absolute enthusiasm for the class. I've heard her say a number of times that this is her favourite class to teach, right? And that sort of thing really comes across when you're engaging with people because the questions are just so interesting. I love this class as well; the questions are just so interesting, the answers are really interesting. The type of people that come to the Agile Leadership class, especially for Joanna and I as also consultants, right, it's the type of people that we're trying to talk to all the time inside of organisations.\n\nAnd because that leads to the second reason she's so awesome, because she's got a swathe of experience in engaging with organisations at various levels, trying to help them understand Agile practices, Lean, all the flavours, right? She's very experienced in having those conversations with leadership, with managers, with people who are playing at that level. And those conversations are just so much fun because convincing somebody in a leadership position to move towards agility or that they get more value by pushing responsibility down, convincing one of those people helps lots of people. And that's, I think, where she gets a lot of her passion from in that class.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Growth: The Transformative Power of Poly Immersive Learning Experiences",
    "Description": "Explores how poly immersive learning enhances professional growth through real-world feedback, reflection, collaboration, and practical application for lasting impact.",
    "ResourceId": "wawnGp8b2q8",
    "Url": "https://www.youtube.com/watch?v=wawnGp8b2q8",
    "Date": "2023-07-13T12:20:07Z",
    "Captions": "So in my view, poly immersive learning experience has a lot of fantastic benefits. But when speaking about three, the most important ones. So first one, we are in a complex world, right? So we obviously don't know what we don't know. We have some knowledge about risks and ambiguities. What will most likely happen is that when you go back to your environment, you will see, \"Oh, some of the things don't work as expected,\" or \"The outcome is not the one that I was hoping for.\" So every assignment brings this opportunity that you learn, \"Okay, it did not work.\" You come back. So it's a fantastic learning feedback loop because you can go back for additional coaching feedback from the trainer. You may share your findings with other participants, and you will have some inspirations for what to do when moving forward.\n\nThe second benefit that I can think of is about time. As I already mentioned, I believe some of the students simply need time to digest, to think, to reflect. It's a natural, in my view, it's a natural feeling. You simply need this retrospective time for yourself. And in this immersive class way, you have regular time for reflection. You have more time for digesting the whole content, and this format brings you regular opportunities to ask more questions when you are ready.\n\nLast but not least, the problem is very typical for many students. I'm amazed with the class. A lot of learnings, a lot of tools, but I came back and, well, I forgot. I did not have time, right? And with this format, we are holding you accountable. We are helping you with that because every module has an assignment, a small experiment that you are supposed to conduct in your professional environment. And thanks to that, you can hold yourself accountable. After the whole learning journey, you will have a set of a few, maybe even several experiments conducted in your professional environment. It might be for you a great opportunity to create habits of experimentation and learning through that in your organisation."
  },
  {
    "Title": "Unlocking Potential: How Immersive Learning Transforms Careers and Organisations",
    "Description": "Explores how immersive learning boosts practical skills, career growth, and organisational improvement through real-world application, coaching, and continuous development.",
    "ResourceId": "NKQr8oGO8lg",
    "Url": "https://www.youtube.com/watch?v=NKQr8oGO8lg",
    "Date": "2023-07-13T12:16:15Z",
    "Captions": "So, um, starting from the perspective of the company that is sending their employees for a course, an immersive class brings not only learning but also coaching and support in applying the knowledge. So, from the company point of view, they will not just have prepared for certification experts or people with just theoretical knowledge. We will help their people to really apply a lot of the things that we cover during the course. \n\nSo, I would say that from a value point of view, this is a great offering for the company because we promise we will do our best to help your people apply and make positive changes in your organisation thanks to this class. What is even more interesting is that every single module will bring the opportunity to deliver value. So, it's, for instance, seven times when the potential value will be delivered for the organisation, and this is just the beginning, right? It's a longer journey.\n\nAnd so, about the second situation, the second perspective: we have someone that wants to become a better expert. This class can actually help you nail your job interview because, again, you will no longer be left with theory, with some fancy tools, concepts, and ideas. You will have practical how-to knowledge that you will bring to the interview. You will be ready to answer challenging questions, and what I believe is, at the end of the day, the most important thing: you will start your job from the very first day with already great knowledge in your head, great tools in your hands, and you know how to do that. How cool is that for this new company, having such a new employee?"
  },
  {
    "Title": "Transforming Leadership: Embrace the Immersive Journey to Agile Mastery",
    "Description": "Explores a shift from intensive workshops to ongoing, immersive agile leadership training, enabling leaders to apply skills, build relationships, and drive team success.",
    "ResourceId": "OWvCS3xb7pQ",
    "Url": "https://www.youtube.com/watch?v=OWvCS3xb7pQ",
    "Date": "2023-07-13T12:06:17Z",
    "Captions": "That is a very good question. \n\nSo let's start from the very beginning. Professional Agile Leadership Essentials course is an entry level for managers and leaders that want to transition from traditional management towards agile leadership. The leadership that agile teams, Scrum teams are looking forward to, the leadership that will help them bloom, that will help them become the best teams creating the best possible products.\n\nSo our current format, typical format, is a simple, I would say, classical two-day class, today workshops. In this format, it works pretty well if you can focus for around 16 hours and you have the ability and support in your organisation to apply learnings from the class. \n\nHowever, what happens, and it happened to some of my students, it might be difficult to digest everything. It might be extremely difficult to come back after those two days to your professional environment and start implementing changes. I even remember my course participant, an amazing woman, and she said, \"Oh my God, Jana, what am I gonna do right now? So many inspirations and now I feel overwhelmed.\"\n\nSo I'm excited about the immersive initiative because it brings solutions to some of those problems. Instead of spending two days together, we have regular shorter modules, for instance, every week, and we focus on one area. We learn, we discuss, and then there is a break. This break will be used by our delegates to apply learning in their professional environment.\n\nSo I believe it's no longer a workshop; it's rather a journey that delegates choose to start with us. I'm super excited because I feel it can help create a better relationship between me and, of course, the participants. I have a very strong feeling that I can support my course participants better, so I'm looking forward to that experience."
  },
  {
    "Title": "Unlocking Agile Mastery: Why Spaced Learning Outshines Traditional Courses",
    "Description": "Explores how spaced learning in Agile and Scrum boosts retention, real-world application, and collaboration compared to traditional intensive courses.",
    "ResourceId": "L9KsDJ2Rebo",
    "Url": "https://www.youtube.com/watch?v=L9KsDJ2Rebo",
    "Date": "2023-07-13T07:45:48Z",
    "Captions": "So it's about the student's ability to take it in really. If you give them two full days, you know how long are they fully engaged in the class? Which bit do they remember? The bits that resonate right now, and then which bit are they going to put into practice straight afterwards? And while that's great and they're going to get a lot of information in there, the ability to spread it up, so for example with PSM over seven weeks means you've got seven opportunities to go and practice things and do things in your real work and not see it in this beautifully clean classroom environment. Let's say in your real work environment, the stuff you have to deal with after the class. \n\nSo you get to see the real challenges and you get to see the real problems, and we can address that. Not only have you got access to a trainer throughout that time, there's a cohort group of people you can work with during the class, and who knows, even beyond if the groups decide to stay in touch with each other. And that will really get them engaged with it, and it'll be a bit more, I hate to say the word immersive, immersive in that you're actually doing it for real. And you know it's well named for that."
  },
  {
    "Title": "Transform Your Career: How to Become a Confident Scrum Master Through Real-World Learning and Community Support",
    "Description": "Learn how practical training, real-world application, and community support help you build confidence and skills to succeed as a Scrum Master in Agile environments.",
    "ResourceId": "cb6JpfomYRU",
    "Url": "https://www.youtube.com/watch?v=cb6JpfomYRU",
    "Date": "2023-07-13T07:41:01Z",
    "Captions": "The first thing they're going to get is the ability to start putting into practice immediately. So you come on session one and you're going to get homework, basically things you need to do. It's not stuff that it's not like school homework where you're given exercises to do; all of the exercises are aimed at doing things in your real organisation and finding out where the issues are, finding out where that is so you can bring it back to the group, bring it back to the class so we can get together on that. But you don't have to wait till the end of the class to start doing it; you can do it right from week one. You're going to get some real value; you're going to find some real things about your organisation.\n\nWe always say scrum doesn't solve your problems; it shows you where your problems are to help you solve them. So we're doing that right at the start, but it doesn't mean in a traditional class you learn this with us for two days and therefore you go and find your problems afterwards. Some of us, some trainers will say, \"Hey, get in touch with your problems,\" but people tend not to, is what I've noticed. It'd be great if they did, actually, but in this, they're bringing their problems back so they're not on their own. So effectively, we're going with a hive mind solution to help them solve their problems rather than make them feel on their own.\n\nThat's absolutely huge because it means they're getting into more of a community of practice way of thinking. So many organisations already have a scrum master community of practice or product growing a community of practice, but if they don't, they need somebody to set them up, somebody like a scrum master, for example, so they can go and do that. And that goes on throughout. So every week, you've got the opportunity to try something new, come back and learn, and learn in a safer environment. So you're bringing in these unsafe, nasty work environments where, you know, like I said, if we're all in a perfect world, you'd probably not be coming on to the scrum class in the first place because you'd already know it all and the organisation would already be doing it. So it would bring in that dirty stuff back into the clean world of the classroom where we can be safe, try things, come up with ideas, talk it through, come up with concepts, and then apply it back. So it's a real mix of coaching and training; it's not just a classroom experience. There's this opportunity to mix those two things.\n\nIt would also give you this opportunity of a brain's trust. Imagine if you are the very first scrum master in your organisation to ever come and learn scrum, and there isn't a community of practice here. I've got a cohort of people I'm going along with on my journey that I'm doing difficult things with, actually, and sharing that experience. And with shared experiences and shared hardships, we build bonds, and those bonds, I imagine, will go well beyond this situation. Certainly, when I've ever worked in a cohort, I always find out I'm still in touch with those people years later.\n\nYou also have this weird thing of not having to take two days out of the office to come to a class. Now we are asking for an actual larger commitment in terms of more out of the office time, but it's much more manageable. It's one afternoon a week; it's not two big days and a big chunk when all sorts of things could happen back at the office that then become distractions while you're trying to learn, and you have to go and deal with things during the class time, so you miss things. Half a day a week is much more manageable, and it allows you to get into that thing without having to have this big headache: how do I have to sort all of these weird things out? \n\nAnd I had to say it, but things like going to pick the kids up from school become a big drag situation, and an online class when it's a couple of days, you don't necessarily have that because we can work around it. \n\nI think the biggest advantage for the people coming on the class, while the certification is the same, it leads to the PSM1 certification. However, you choose the PSM modern class, and the two-day experience is an awesome class. We've refined it; we've done it well, and this gives you that little bit of extra that it's really hard to do in a two-day class. \n\nSpace to learn is essential, and there's a lot of content; there's a lot of cognitive burden on coming onto a two-day class. By the nature of it, this allows you to take it in a chunk, try it for real, take it to that deeper learning level by applying the learning immediately, bring it back, loop through it again effectively in that space as well. So we end up with multiple loops of learning; we'll end up with real application. \n\nSo as a PSM that's been through this programme, as a scrum master that's been through this programme, you get this deeper learning, this deeper understanding that makes you more confident. And what I see with a lot of new scrum masters when they come on the class and at the beginning of their journey, they typically have the hardest problems to solve in their career right at the start when they've got the least experience and the least knowledge to be able to deal with it. That's the nature of it. As you get better, the team's also got better; therefore, you don't need it. The organisation's also evolved; therefore, they don't need quite so much of you. \n\nThis gives you that confidence that you have been able to do this in the real world, and you have had that support net. So when the support net scales back when you finish the class, you've got more confidence in your own ability. And of course, will that get you a better job? Who knows? But certainly, your confidence will shine through when you're talking to those people about that job."
  },
  {
    "Title": "Unlocking the True Power of Agile: Embracing Change and Collaboration for Team Success",
    "Description": "Explores how Agile success relies on team collaboration, embracing change, continuous improvement, and focusing on delivering real value to customers over rigid processes.",
    "ResourceId": "3nSV-v2cK-w",
    "Url": "https://www.youtube.com/watch?v=3nSV-v2cK-w",
    "Date": "2023-07-13T07:38:00Z",
    "Captions": null
  },
  {
    "Title": "Reasons to do a PSM II Course in 60 seconds",
    "Description": "Discover how the PSM II course deepens Scrum Master skills, boosts team performance, supports product owners, and advances agile careers with practical, real-world benefits.",
    "ResourceId": "TcnVsQbE8xc",
    "Url": "https://www.youtube.com/watch?v=TcnVsQbE8xc",
    "Date": "2023-07-12T14:00:30Z",
    "Captions": "So one of the key reasons to do PSM to Scrum Master advanced class is to gain a deeper understanding of the three different focus areas of the Scrum Master and even realise that there are three is a great one as well. The focus on the team, right? How do you help the team be more effective? Right after getting rid of all the crap that you think a Scrum Master has to do, how do you actually help them? How do you help the Product Owner be more effective at your product management? \n\nAnd also, how do you help the organisation? Right? What are the Scrum Master's responsibilities to the organisation and helping them adopt these practices and be more effective?"
  },
  {
    "Title": "Reasons to do a PSPO-A Course in 60 Seconds",
    "Description": "Discover how the PSPO-A course helps product managers and owners master Agile and Scrum, boost collaboration, and drive effective product management in any organisation.",
    "ResourceId": "faoWuCkKC0U",
    "Url": "https://www.youtube.com/watch?v=faoWuCkKC0U",
    "Date": "2023-07-11T14:00:32Z",
    "Captions": "So good reasons to do a PSPoA class would be that you are a product manager or you're in product management and you want to understand how to incorporate and do Agile in that story. Works great if you've if you are a product owner and you want to increase your skills or if you do no Scrum whatsoever and all you're interested in is that product matter Agile product management piece. How do I become more collaborative? How do I become more effective at responding to change? What are all the things that I need to consider in that world of product management in order to deliver the most effective product for my business?"
  },
  {
    "Title": "Reasons to do an APS Course in 60 Seconds",
    "Description": "Discover how an APS (Agile Professional Scrum) course helps teams start, refresh, or align their Scrum practices for improved collaboration and effective Agile delivery.",
    "ResourceId": "yKSkRhv_2Bs",
    "Url": "https://www.youtube.com/watch?v=yKSkRhv_2Bs",
    "Date": "2023-07-10T14:30:31Z",
    "Captions": "There are two main reasons to do the EPS class. The first one is getting started. You have a team that doesn't know Scrum, that wants to try some of the things in Scrum and needs to learn how it's done. The second one is tune up. Your team's maybe been doing Scrum for a number of years, maybe never had any formal training, and you're not sure whether we're actually doing Scrum or we're doing... are we focusing on the right things? Are we just making it up as we go along? Are we just doing waterfall? How do we know? How do we get back to roots? The APS is a great class to kind of level set and everybody in the group on what professional Scrum looks like. And then you can figure out how does that work within your organisational context."
  },
  {
    "Title": "Why have you decided to go all in on immersive learning experiences?",
    "Description": "Explores how immersive learning boosts engagement, retention, and understanding through hands-on practice, community support, and continuous, interactive learning.",
    "ResourceId": "qEaiA_m8Vyg",
    "Url": "https://www.youtube.com/watch?v=qEaiA_m8Vyg",
    "Date": "2023-07-10T07:00:18Z",
    "Captions": "Of why have I decided to go all in on a massive learning experiences? I think it's because that's what works. Right? I feel that time and time again I've run the traditional model, which is two-day or kind of four half-day classes. I've run those traditional classes and I feel like people learned a lot of stuff during those classes, right? They absorbed a lot of stuff. Perhaps it planted some seeds that will eventually someday grow into something. But if anybody's tried to grow seeds into plants, you can't just plant the seed, one seed, and hope for the best, right? You kind of have to nurture it and take care of it over a longer period of time until it's ready to stand on its own, right? You might even have that you have to put that stick in to make sure the plant doesn't fall over until its stem's big enough. All of those things are what immersive learning provides. It provides that extra support, perhaps provides that longer-term continuous engagement that hopefully also results in more collaboration and communication between the people that were involved. Anyway, so it continues beyond that immersive experience.\n\nSo quite often, if you just do a two-day class, how often do you speak to the people that you were in that two-day class for after you've been in that two-day class, right? I bet most people never hear from them again, never speak to them again, never even think of them again, right? But if you went through an immersive experience, and the immersive experiences for different classes vary, right? From six weeks all the way up till, uh, ten weeks, right? Perhaps some of them are going to be longer. But if you've had to collaborate over that period of time, go and do assignments and kind of what's the expression? Barrier? I don't know how to describe it. That thing where you're talking to a group of people when you're debriefing the assignments that you've had and you're talking about the real experiences that you've just had, trying to do that. You're sharing part of yourself with this group of people, and that should build over these weeks a level of camaraderie with the rest of your cohorts, right? That group of people who've been through that experience.\n\nAnd that it should enable a much greater likelihood of continuous collaboration. But also, there's a much greater likelihood that you've actually learned something because you're able to—we're basically implementing double-loop learning, right? Where you're able to go and try and do the thing that you've learned in the class and then come back around and say, \"Was this what I was meant to do?\" Right? What is the result of the thing that I tried to do? Could I have done this differently and got a different result? And then you're able to then try it again. So each of the different learner, each week's learning content has that loop feedback loop, empirical process, right? Bringing it into the learning world, empirical process to bring that knowledge back so you can then do something a little bit different. \n\nAnd I think it also lends itself much more readily to even outside of the context of the fixed courseware, right? So there's going to be an assignment at the end of each session. You go off and do that, and when we do a debrief, when we come back, the outcome of that debrief might be that you want to try something different. There's absolutely no reason that the trainer wouldn't want to have a debrief of that you're trying again, as well as, you know, during the class, we're doing that debrief of the next exercise. But you want to still talk about some of the things that you've tried differently, tried again in the previous exercise, and all of our trainers would be absolutely happy to get on a call and talk about that as well. Perhaps the whole group's interested, right? That's something that we can figure out how we incorporate into that process.\n\nSo that idea of how do we learn, how do humans learn with interactive continuous feedback loops of those learning outcomes? That's what we're trying to bring into this immersive learning experience. And I think, again, it's going to be a game changer for training and learning because it's not just a fire and forget, right? You're not just getting that content shoved into your brain and then it atrophying over time. You've actually got that continuous loop back so you can always ask that question, right? That niggle that you have six weeks later about something that you talked about six weeks ago. Fine, ask the question, right? We're all right here. We can see what we think. And I think that's that important part, that feedback loop, that empirical process in the learning environment.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Part 2: Common Mistakes that Scrum Masters Make",
    "Description": "Explains why Scrum Masters should avoid taking on administrative tasks, highlighting the importance of focusing on team effectiveness rather than acting as a team secretary.",
    "ResourceId": "WTd-8mOlFfQ",
    "Url": "https://www.youtube.com/watch?v=WTd-8mOlFfQ",
    "Date": "2023-07-07T14:00:33Z",
    "Captions": "Another common mistake that Scrum Masters make is being the team secretary, filling out, being the Jira admin, right? Being the admin for the team and filling out their Jira tickets for them, doing reporting for them, doing all those things. Don't do any of that crap; it's totally pointless. There might be organisational reasons why it has to happen, but the focus for the Scrum Master should be on the effectiveness of the team, not on doing stuff for them."
  },
  {
    "Title": "Do you think we are on the slope of enlightenment in Gartner's Hype Cycle?",
    "Description": "Explores whether organisations are moving past Agile disillusionment towards true understanding, highlighting the shift from hype to people-focused, effective Agile practices.",
    "ResourceId": "3NtGxZfuBnU",
    "Url": "https://www.youtube.com/watch?v=3NtGxZfuBnU",
    "Date": "2023-07-07T07:00:03Z",
    "Captions": "Do you think that we are in the slope of Enlightenment in Garner's hype cycle? I would maybe have to say not yet. I think that's going to be my answer. I think we're still in the trough of disillusionment, right? And I think the reason I think that is perhaps I'm wrong, right? But every time I turn on my LinkedIn, I'm reading the feeds, I'm seeing what's going on. Every time I look, it's, \"Scrum sucks, Scrum doesn't work, Safe sucks, Safe doesn't work, Agile 2.0 is the way forward, Agile 1.0 is dead, Agile is dead.\" Right? There's all these types of posts. There's still a significant, and I think majority of people are still in that trough of disillusionment.\n\nDoes that mean that lots of companies are not already in the slope of Enlightenment? I think they are. I think lots and lots of organisations out there, lots of people are in that slope of Enlightenment already. But there are lots of organisations out there who just haven't made it yet. There are people out there who are still disillusioned that they can't have twice the features in half the time. Jeff's book title didn't help with that, right? Because it sets a level of expectation. Lots of people don't even read the book, which is a little bit going on that's not really what it's about, right? But that belief of what Agile was supposed to deliver, most organisations have not really worked out the hard work that is involved in actually doing it and getting there. It's not a magic wand that's going to solve their problems.\n\nSo I think there's still a huge number of people in that trough of disillusionment. I love that phrase. But as I think, I think we're definitely on that upward turn of that slope. There's definitely more, certainly the early adopters and even, could I say, the late majority? Some of the early majority are already in that Enlightenment mode, that they realise that it's not all the hype that is important, but it's the fundamental change in the way we work and the way we understand how we do things. And that realisation that it's people that solve problems, not tools, right? It's people that solve problems, not bureaucracy.\n\nPutting truly, truly putting people first and being willing to dismantle whatever processes, practices, or tools, ways of doing things are getting in the way of people actually doing the work that they need to do and helping the business be successful, right? I think that's where we are right now. But we're certainly on the little up of that slope, I think.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Most Common Thing You Hear in a PSPO Course?",
    "Description": "Many Product Owners in PSPO courses feel a lack of control or influence. This highlights the need for greater empowerment, accountability, and active engagement in their role.",
    "ResourceId": "pazZ3mW5VHM",
    "Url": "https://www.youtube.com/watch?v=pazZ3mW5VHM",
    "Date": "2023-07-06T14:33:51Z",
    "Captions": "One of the most influential people in Agile for me has been Simon Simon Randell. He has always personified that facilitator, um, no [Â __Â]. Um, I’d Agile Agile outlook that I really aspire to. I think that he has this great way of communicating both in class and with customers that, um, yeah, I just I just I look up to it and I try and copy it."
  },
  {
    "Title": "What more needs to happen before traditional organisations consider Agile?",
    "Description": "Explores what traditional organisations must change—beyond adopting Agile tools—to achieve true agility, cultural transformation, and sustained competitive advantage.",
    "ResourceId": "TzhiftXOJdw",
    "Url": "https://www.youtube.com/watch?v=TzhiftXOJdw",
    "Date": "2023-07-06T07:08:30Z",
    "Captions": "So the question is, within the context of the changing world and changing economic situation, what needs to happen before traditional organizations can consider agile? They need to be really... so there's kind of two ways to adopt agile, right? There's the wholehearted \"we want to change the way we do things to have happier people, more productive teams, be able to adapt to changing market needs as quickly as possible,\" in which case you're taking apart your existing hierarchical command and control system, decentralising and democratising the workforce to be able to respond more quickly to the market needs. That's a lot of work; that's a huge amount of risk for your business, right? Because you're changing fundamentally the way that you do things across the board.\n\nBut that is what agility is all about, and inside of agility, there are the big topic of agility or the big topic of DevOps. There are a whole bunch of tools to try and help you with this, right? Everybody talks about the tools as the point, but they're not the point. Even agile's not the point; it's responding to market, right?\n\nBut there's the other type of agile that lots of large traditional organizations adopt, at least initially, and that's kind of like gym membership agile, right? Where you're... you know, you pay the membership to the gym so you can tell everybody that you go to the gym, but you don't actually go to the gym, right? You're just paying a lot of money for nothing, and that's how most big organizations seem, at least observationally, to be adopting agile. And I get it; it's hard and it's scary to change the way we do things.\n\nBut fundamentally, if your competitors are willing to accept that hard, scary thing before you are, then they're the ones that are going to be responding to market demand when you can't. They're the ones that are going to be creating environments for people to work in that are much more conducive to the way people want to work and engage with their companies today. Most young people want to work for companies, and they want to feel like the work that they do matters, that they have purpose in what they do, that they believe in the company that they're working for. And that's just not the case for most big traditional organizations.\n\nSo I think it's really important to have that consideration: are you, as an organization, actually ready to move towards agility, or are you not yet? Are you ready to respond quickly to market changes, or are you not yet? Right? These are important questions to answer. And by all means, you know, pay a bit of lip service, dip your toe in the water, but realise that those things do not result in the thing that you were dipping your toe in the water to achieve. You're only going to be able to achieve that with wholesale, systemic, and radical change of the way your organization functions to a more decentralised model.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How AI is Revolutionising Our Work: Embrace the Future of Productivity and Creativity",
    "Description": "Explores how AI boosts workplace productivity and creativity by automating tasks, aiding idea generation, and empowering professionals to work more efficiently.",
    "ResourceId": "fcOSewXez3I",
    "Url": "https://www.youtube.com/watch?v=fcOSewXez3I",
    "Date": "2023-07-05T14:49:20Z",
    "Captions": "The question is how is technology like AI changing the world that we work in? I think this, we're kind of on the cusp of one of those big revolutionary rather than evolutionary changes in the way that we work. AI isn't going to do your job for you, right? But AI is a very powerful tool as a sidekick or co-pilot for you as somebody who's doing things, right?\n\nFor example, I use it quite a lot when I want to come up with ideas on a particular topic, and I'll ask it to generate some ideas on a particular topic. It will make the ideas, and then I'm going to go write stuff around those ideas, but it makes me much more effective. I don't know if you've ever sat and stared at a blank page for ages trying to figure out how do I start, or you get to a bit of your thing that you're trying to talk about, and you're like, \"Ah, how do I go from here?\" You can effectively take what you've written so far, feed it into ChatGPT, and see what might be next. It will come up with something for you, and it may come up with something that's crap, right? It totally might do that, but then you are still the author, right? You're still the one in control. It's just the co-pilot making suggestions for you, and it hopefully will twig that memory or that thing you want to talk about.\n\nI do find it particularly useful once I've written something to say, \"Oh, create me a lead for LinkedIn for this post,\" and it will go create those things for you. It's really quick to get started and do things. So to tie that back to that idea of how it will change the way we work, it will make us more productive and more capable, right? As an individual who adopts some of these AI tools, we become more capable at our jobs. We become more productive at our jobs. We're able to do more things more quickly, less wasted time, right? You should never again have to copy stuff from one spreadsheet to another or create forms in, you know, you want to take a spreadsheet and you want to analyse the data. AI will build the bits for you, and then you can then write your analysis around it.\n\nAll of these productivity tools are going to mean that you, as somebody who adopts AI, are going to be far more effective at your job than your colleagues who do not. So I would say adopt AI, bring it into the way you're working as soon as you possibly can. Even if you're just tinkering with it, go get a course on prompt engineering or find some content to absorb and figure out how you might use this technology in your job because it is going to revolutionise the way we work. Hopefully, for organisations that adopt it wholesale, it's going to revolutionise their ability to compete in the markets that they compete in by them being able to adapt to changing demands of the market much more quickly than their competitors.\n\nThis is a tool. It's going to help us enormously in figuring stuff out, and that's how it's going to change the way that we work. It's going to change every vestige of it. Get on board or be left behind.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is the Sprint Review workshop and how will it help organisations?",
    "Description": "Explains the Sprint Review workshop, detailing its role in Agile teams for stakeholder engagement, market alignment, and continuous product improvement through practical guidance.",
    "ResourceId": "uYm_wb1sHJE",
    "Url": "https://www.youtube.com/watch?v=uYm_wb1sHJE",
    "Date": "2023-06-30T07:00:18Z",
    "Captions": "Foreign. So the Sprint Review Workshop helps you get the most out of what is one of the most important events in Scrum. This is the event when you engage with your stakeholders, where you find out whether you're building the right thing. You're on track. For me, it is very much a marketing event, i.e. your team and your product is being presented to stakeholders, and you want them to provide you with their opinions and feedback on what it is you're doing, where you're going. Are we missing anything that we don't understand? That can be very difficult and daunting for teams and product owners and product management to understand. It requires a certain level of exposure, right, of revealing yourself and how you work and how you do things to perhaps your customer. That can be quite scary.\n\nSo the purpose of this workshop is to both help you understand what it is, what's supposed to happen, and what you're supposed to get out of this event, right? That's the important core. But also, here are a bunch of tools and techniques that you can use. That's kind of the learning and core workshop part. But then we're going to help coach you through your first few Sprint Review sessions, and then we can have a debrief afterwards where we figure out, did our tactics work, right? The things we tried resonate with our stakeholders? What else could we try based on the experience that we got? And using, ultimately, the tools and techniques that companies have been using for years to engage with their customers, for you to engage with your stakeholders, for you to increase the level of interest and engagement from your stakeholders in your product, so that you have the best possible knowledge to build the best possible product.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Most Common Thing You Hear in a PSPO Course?",
    "Description": "Product Owners often feel limited in control and influence. This article explores common challenges and offers steps to boost empowerment and accountability in the role.",
    "ResourceId": "CdYwLGrArZU",
    "Url": "https://www.youtube.com/watch?v=CdYwLGrArZU",
    "Date": "2023-06-29T11:00:18Z",
    "Captions": "The most common thing I hear in a PSPO course is from the product owners saying, \"But we don't have that kind of control. We aren't able to change the order of the product backlog. We aren't able to influence the product goal. We aren't able to discuss with the business about the strategic direction of the product.\" Right? They just aren't playing at that level.\n\nAnd for me, that's always an invitation. Right? If you're not playing at that level but you realise that you're supposed to be playing at that level, what can you do within your organisation to start playing at that level? What are the meetings you can invite yourself to? The conversations you can have with other people to demonstrate your knowledge and capability? Because in order to get accountability, you have to demonstrate competence."
  },
  {
    "Title": "Unlocking the Power of Sprint Planning: Transform Your Agile Approach for Success",
    "Description": "Learn how effective Sprint planning boosts Agile team performance, with practical workshops, coaching, feedback, and adaptable methods for continuous improvement.",
    "ResourceId": "xJsuDbsFzlw",
    "Url": "https://www.youtube.com/watch?v=xJsuDbsFzlw",
    "Date": "2023-06-29T07:00:19Z",
    "Captions": "So the Sprint planning workshop that we have is delivered over multiple sessions because we want you to be able to have a chance to practice what we're talking about. Right, it's designed to be run with a single organisation and we're going to start off by having a workshop where we figure out what Sprint planning is and what it means to your organisation. That's kind of the first part, so we'll have a lot of learnings in that part, a lot of exercises working through those ideas and hopefully a solid outcome of what you want Sprint planning to be within your arc.\n\nThen we're going to help you through your first few Sprint plannings, right? So, somebody there to facilitate that Sprint planning, help coach you through it, help get the most out of it, and perhaps give a bunch of feedback and debrief those things that happened during that event so that we can make it better. Over time, what we would expect to see is that you take over all of that work in running it and making it effective, and you make it even more your own by adapting it to what you need and having it emerge over time. Right, it's going to keep changing, keep emerging, and as you learn more about what you need, what you get from it, and how you can leverage it to make your business more successful.\n\nThe Sprint planning workshop can be delivered digitally or in person. It actually depends on how you work. There's no point in me coming to you in person and delivering you and teaching you to deliver this workshop in person if you're going to be doing it virtually, right? So pick whatever format makes sense for the way you work because that's where you're going to get the most learnings. The learnings that you get if I'm delivering digitally, I'm going to be using tools, techniques, and practices that work well digitally, and you can also bring those tools and techniques into that story.\n\nAs for formats, it's going to be probably one or two learning active working sessions that we do, and then probably two or three coaching sessions through an actual real Sprint planning event so that you can get practice, right, and have more questions and find out what's going on.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Most Common Thing You Hear in a PSM 1 Course?",
    "Description": "Explores the common challenge in PSM 1 courses of balancing real-world pressures with maintaining honesty, transparency, and moral integrity in Agile and Scrum practices.",
    "ResourceId": "h5TG3MbP0QY",
    "Url": "https://www.youtube.com/watch?v=h5TG3MbP0QY",
    "Date": "2023-06-28T11:00:24Z",
    "Captions": "The most common thing I hear in the PSM class is, \"But in the real world.\" Um, and usually around the point when we're talking about moral flexibility. What we talk about in the PSM is the inflexibility of our moral obligation to our customer to tell the truth. \n\nYou hear many people in that class say, \"But in the real world, we have to tell our customer how long it will take and how much it will cost up front.\" Right? And that, the moral flexibility there, is that that's a lie. Right? You just lied to your customer. You sold them a squirrel burger. Um, a roadkill burger. Right? It's not what you just said it was, and perhaps they bought it based on that understanding."
  },
  {
    "Title": "Agile Scotland 2023: Why does this matter to you and why should people come to the event?",
    "Description": "Explore how Agile 2023 in Scotland brings together tech professionals to share insights, foster collaboration, and highlight Agile’s impact on the local tech community.",
    "ResourceId": "uGIhajIO3pQ",
    "Url": "https://www.youtube.com/watch?v=uGIhajIO3pQ",
    "Date": "2023-06-28T07:00:21Z",
    "Captions": "Scotland 2023 is just around the corner. Um, or it's Agile 2023, the Scotland experience. It's just around the corner. Um, I'm really looking forward to it. Nick Jolte is sponsoring. Um, this year, and one of the reasons that we decided to sponsor is that we're Scottish. We're a Scottish company. Um, I know I say that funny because I've lived in other countries. I've spent a lot of time travelling around the world, but I've always come back to Scotland to live.\n\nAnd I don't actually have, um, although I don't have a lot of customers in Scotland, I'm always interested in what folks are doing, the communities. Um, I sponsor Future of Work in Scotland as well, um, which is a great, uh, event, regular Meetup event where they get some of the best speakers in the world. Um, and I think this is going to be the same. I had your 2023, um, the conference as a whole has this massive presence around the world.\n\nUm, I spoke at Deliver Agile 2023, um, back in—no, well, obviously not 2023—back in, when did I speak at that conference? 2017. Um, and it was a fantastic event, and I think this is going to be the same, a little bit smaller scale, um, but they're just starting out in Scotland, and I think it's going to be amazing, lots of amazing speakers on the lineup.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Scrum Master versus seasoned Agile Coach?",
    "Description": "Compares the roles of Scrum Master and seasoned Agile Coach, highlighting differences in experience, responsibilities, and impact on organisational Agile adoption.",
    "ResourceId": "54-Zw2A7zEM",
    "Url": "https://www.youtube.com/watch?v=54-Zw2A7zEM",
    "Date": "2023-06-27T11:00:03Z",
    "Captions": "While our seasoned Agile coach will definitely include all of the knowledge that a Scrum Master has, it will be deeper with more experience. Effectively, more battle-hardened, they're usually somebody that has had long years of experience working in organisations, developing and implementing Agile practices within organisations and learning the deep technical expertise in Lean, Agile, Scrum, and Kanban that they need in order to be successful. Ultimately, they know where all the bodies are buried. They've seen the successes, they've seen the failures, they know what works and what doesn't. They are there to really help the organisation excel."
  },
  {
    "Title": "Transform Your Scrum Team in 90 Days: Strategies for Continuous Delivery and Empowerment",
    "Description": "Learn practical steps to help Scrum teams achieve continuous delivery, clarify business value, integrate feedback, and build empowerment within 90 days for lasting agility.",
    "ResourceId": "4kqM1U7y1ZM",
    "Url": "https://www.youtube.com/watch?v=4kqM1U7y1ZM",
    "Date": "2023-06-27T07:00:06Z",
    "Captions": "Hmm, that's a good one. What would I hope to achieve with a new Scrum team in the first 90 days? Uh, 90 days should be enough for everything. That's my view. \n\nIt depends on where the team is and where their organisation is and what the organisational constraints are going to be, because I'm sure there's organisations I've gone in to help teams with where there is very limited support from the rest of the organisation, and then you're working within that bounded box, right? You can poke at it, but you get limited ability to do that. \n\nBut if you have an open, receptive organisation, an open, receptive leadership within the organisation, you should be able to take them from zero to a hundred in 90 days, right? They should be able to go from barely able to deliver a working product or not delivering a working product at the end of every Sprint to continuous delivery in that time. That should be where you want to get them at the end of that 90 days. \n\nThey are able to continuously deliver a usable working product to production, separating out the ideas of release, which is a business idea, and delivery, which is an engineering practice, and enable the Product Owner to better represent the value, right? The business now has an understanding of what value is for them, right? Because that's different for every organisation. \n\nWhat value means to them so that you can then have rational conversations with them about what things are more important than other things and why, so that you have an ordered backlog, a direction, a goal, right? What is it we're trying to achieve together? And that then informs that release side, right? What are we actually going to ship? \n\nYou've got that engineering side with the continuous delivery of value to production, right? Continuously delivered to production, and then you mesh that together, then closing the feedback loop, right? With learning. So are you then able to collect telemetry and talk to users and figure out whether you're actually building the right thing or the business value idea is actually correct? \n\nHave you validated them and then close that feedback loop all the way around to change what it is we're working on based on those things that we learned? That's kind of the minimum that I would expect to get to in 90 days. \n\nAnd then hopefully within those 90 days, I found somebody within that organisation who is able to be the champion for this process, or everyone being the champion for this process, this new way of working going forward, so that at the end of 90 days, right, I can back off. \n\nLet them get on with it, right? They've built their unique organisational structure, right, that fits them like a glove, that they're then able to take forward and use. And then perhaps be available to help tweak, coach, answer questions, and be available after that. But ultimately, it's their problem to solve; it's their work to do. \n\nIf we can get them to a certain place in the first 90 days that they understand it, then they should be able to take it from there. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Agile Coach Versus Professional Coach",
    "Description": "Compares Agile coaches, who offer deep expertise in Agile methods and drive team innovation, with professional coaches, who focus on guiding teams using existing knowledge.",
    "ResourceId": "I5YoOAai-m4",
    "Url": "https://www.youtube.com/watch?v=I5YoOAai-m4",
    "Date": "2023-06-26T11:00:14Z",
    "Captions": "So the reason that I believe that an agile coach is greater than a professional coach is that an agile coach will have deep technical knowledge in understanding agile and its practices, lean and its practices, um, all the theory behind these very technical practices that they can leverage in helping teams and organisations be more effective by bringing something to the story that they didn't already have. Um, whereas a professional coach is helping the people in the situation understand and deal with things that they already know, right? They already know how to solve the problem, and they're helping them work through it. An agile coach brings more."
  },
  {
    "Title": "Why Are a Scrum Team Better Served by an Agile Consultant than a Professional Coach?",
    "Description": "Explains why Scrum teams benefit more from Agile consultants than professional coaches, focusing on the need for technical guidance, mentoring, and practical expertise.",
    "ResourceId": "LkphLIbmjkI",
    "Url": "https://www.youtube.com/watch?v=LkphLIbmjkI",
    "Date": "2023-06-26T07:00:07Z",
    "Captions": "Oh, that's a great question. Why is a Scrum team better served by an Agile consultant rather than a professional coach? \n\nI think professional coaching within the context of a specialist task has its limits, right? Professional coaching is great, but it makes the assumption, which in many circumstances is the correct assumption, that the people that you're coaching already understand how to solve the problems that they need to solve. And that's just not fundamentally the case for almost all organisations and teams that at least I work with. \n\nOnce teams are up to speed and heading in the right direction, then we might want to focus on a more cultural focus. But certainly early on, and certainly if teams aren't yet able to continuously create usable working product in a regular cadence, they need to know what they don't know. This means that an Agile consultant or an Agile coach is spending more of their time in a teaching or mentoring stance, where they're helping those teams understand what they don't know or perhaps knowing to look where they don't know. \n\nI mean, that's the fundamental problem with having an Agile coach that doesn't have a deep technical understanding of the work that is underway. And by technical understanding, I don't mean that they can rock up next to the developer and code and then go sit next to the DevOps guy and point out where he's doing his builds wrong. That's not what I mean. I mean a deep technical and philosophical understanding of the processes, practices, tools, capabilities, the direction, the things that great teams do out in the world that other teams don't, that are to do with their engineering practices. \n\nIf we're talking about a software team, you need to be able to understand what DevOps is, what the components that make up DevOps are, why DevOps is successful, how do you convince a team that they should be doing some of those things, how do you have conversations with teams about continuous delivery if they're not doing it, and perhaps the teams say, \"Oh, we can't do that here.\" \n\nHow do you have those conversations, allay those fears within the organisation to enable that for those teams, so that those teams are then able to make that choice? Now they understand that it's valuable; they can't just make the choice. You need to help out with the organisation, help convince people that this is the right direction. \n\nAnd that's even before you've tackled any of those ideas around how people are feeling happy, being safe. They need to be able to do their job as well. So I feel like for Agile consulting or even Agile coaching, the vast majority of the work that they do, that they focus on, is around these technical things. \n\nScrum itself is not technical; it's just a bit of knowledge that you learn. All of the practices and tools around making it successful are deeply technical. Are you able to sit with a group of product owners or product management and help them understand impact mapping and how impact mapping can help them, and help coach them in doing that technical task, which is creating the impact map? Those are all things that I would expect an Agile coach/consultant to be able to do. \n\nNow, I've named some specific things, like impact mapping. You definitely don't have to know them all, right? Because there's hundreds of thousands of these things. But you need to know two things: you need to know enough to know where to look. That's the first part. If you've got enough experience and you know where different tools and techniques have helped in the past, you can then go read up on that tool and technique. Because you already understand all of the foundational concepts and constructs, you're able to bring that into your lexicon, your capability, a lot more quickly, and then engage with the team and help them or a group of people and help them figure out how to actually do that particular thing. \n\nIt can be a learning opportunity for you as well. Deep technical expertise in the fundamental principles of Agile and Lean and DevOps doesn't mean you know how to do all of the things; it means you have the tools and skills to be able to learn and communicate all of those things, regardless of the environment that you're dropped into. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Most Rewarding Part of Being a Scrum Developer?",
    "Description": "Scrum developers find the most reward in creating meaningful, impactful solutions that matter to people, driving passion, creativity, and purpose in their work.",
    "ResourceId": "F0jOj6ql330",
    "Url": "https://www.youtube.com/watch?v=F0jOj6ql330",
    "Date": "2023-06-23T11:00:09Z",
    "Captions": "And so what is the most rewarding part of being a Scrum developer? Building stuff that matters to people. The work that you do should matter. The work that you do doesn't matter, why would you bother getting out of bed in the morning? Why would you care about the thing that you're working on? Why would you spend that extra effort to understand it a little bit better or do something a little bit more creative? Right? Creativity and competence and excellence come from us feeling like the work we do matters. If it matters to others, it matters to us, and we'll focus on it, and we'll do more better work."
  },
  {
    "Title": "Why Is It So Important that Senior Leadership Teams are Engaged During an Agile Consulting Engagement?",
    "Description": "Active senior leadership engagement is essential for successful Agile transformation, enabling systemic change, faster adaptation, and organisation-wide alignment.",
    "ResourceId": "ItnQxg3Q4Fc",
    "Url": "https://www.youtube.com/watch?v=ItnQxg3Q4Fc",
    "Date": "2023-06-23T07:00:11Z",
    "Captions": "So the question is, why is it so important that senior leadership teams are engaged during an agile consulting engagement? \n\nUm, and I guess it really depends on what systemic change you're wanting to get in the organization. Are you actually looking to transition towards a business that is faster at reacting to changing market demand? That's effectively what we're talking about, right? \n\nAnd if we're talking about, I mean, often I come into organizations and we're talking to engineering teams about how they can do that. But can you imagine a circumstance where I could talk to anybody, any team, anywhere in any organization in the world and talk about them getting faster feedback from their customers to enable a greater degree of adaptability to what their customers need? \n\nAnd we're not going to have to have a conversation with the business, right? We're not going to have to have a conversation with leadership. It just doesn't exist, right? Those are the circumstances where you just know they're not actually going to be able to get the things that they're looking for, and you're going to have to figure out a way for them to get the best they can within the bounds of the constrained system because leadership's not involved and not interested. \n\nThe only way you can transition towards that faster market engagement, which is the purpose of agile, right? It's just a tool to help us get there, a philosophy to help us get there, is to have everybody in the organization change, participate, and be willing to change potentially any business practice in the business in order to help us get there. And if leadership's not involved, all of those things are off the table. \n\nUm, so quite often, I, and I've done this in organizations where I've only been involved at the team level, I've just asked, \"Where's the CEO's office?\" and gone and knocked on a door, right? And said, \"Look, can we have a chat about what it is I'm doing and what I think you need to be involved in, understand, and help with?\" \n\nUm, actually, CFOs are way better, right? CFOs are way better. If you get the person with the money on board, who signs the checks and decides how money's spent, then you're totally rocking in that space because who wouldn't want to optimize the value that you get from the money you put in, right? Who better to understand that than somebody who's fiscally minded? \n\nUm, hopefully, CEOs are fiscally minded as well, but you know what I mean. Um, and I think that's why it's so important for senior leadership, and this affects the entire organization. \n\nThere's a great example of this. Um, your DevOps team at Microsoft adopted agility. If you don't know, I've got some videos and posts about it. Um, but they changed the entire way they do business, and when they were asked, \"Right, what did they have to change?\" the answer is everything. \n\nWe had to change the way we sell the product. We had to change the way we market the product. We had to change the way we build the product. We had to change the way our parts of our business operate. We had to change the way we engage with stakeholders. We had to change everything about how they did business in order to get to the point where they were able to continuously deliver valuable, usable product to the customer, get the feedback, and have the autonomy to be able to make the decisions on what they focus on and what they need to build and how they're spending money, right? Pushing that responsibility down the organization, and that's super hard. \n\nYou need senior leadership involved. You need to have um align all the way up the organization to as high as you can possibly go, ideally the very top, to be able to get the, I'm going to say permission, right? Because in a lot of organizations, you don't have permission. But to be able to get the permission that you need in order to make the changes that are going to best benefit the organization. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How Hard is it to Transition from Being a Developer to a Scrum developer?",
    "Description": "Explores the challenges and skills needed to shift from traditional development to Scrum, focusing on continuous learning, Agile practices, and adapting to new workflows.",
    "ResourceId": "cv5IIVUgack",
    "Url": "https://www.youtube.com/watch?v=cv5IIVUgack",
    "Date": "2023-06-22T11:00:25Z",
    "Captions": "Transitioning from a developer to a Scrum developer is pretty, pretty, pretty difficult. We have to get better at continuous everything, right? Continuous delivery, continuous testing, continuous release. \n\nUm, and that takes engineering practices, which takes practice, right? So, um, developers need to practice extensively their craft in order to be able to create products that are able to support the ideas behind Agile. The ideas of being able to continuously deliver our products, continuously release our products, and maintain high quality in our products. \n\nUm, and that just takes time and effort."
  },
  {
    "Title": "Rethinking the Statement of Work: How to Truly Meet Client Needs Beyond the Contract",
    "Description": "Explores why focusing solely on contracts can miss client needs, and how flexible, value-driven consulting builds stronger relationships and delivers lasting results.",
    "ResourceId": "MutnPwNzyXM",
    "Url": "https://www.youtube.com/watch?v=MutnPwNzyXM",
    "Date": "2023-06-22T07:00:15Z",
    "Captions": "Well, I think so. The question is, what is the most valuable lesson you've learned as an agile consultant? And I think you could take the word agile out, and it's just the most valuable lesson I've learned as a consultant in whatever flavour, right? I've ended up working in, and that's that quite often the statement of work—in fact, almost always the statement of work—bears no relevance to the problems that the customer actually has. \n\nAnd that's where you have to try and tread carefully because it is your business, it's my business as a consultant, in delivering a statement of work, or is it maximising the value that I bring to the customer, right? And quite often, consultants will deliver to the statement of work. \"Right, here's the contract, this is what we've been told we have to do, and we need to deliver to that contract.\" \n\nI find that that's a losing proposition because you can quite often—and this happens a lot—have unhappy customers because you've delivered what they asked for, but it's not what they need, right? It doesn't actually bring any systemic, lasting change to their organisation, and things go back to the way they were as soon as you leave because there's not that change because the statement of work didn't include it or scope for it. \n\nA great example of that was I was on a train in England somewhere, and it had Wi-Fi on the train, and the Wi-Fi was absolutely horrendous—absolutely horrendous. And I think I tweeted at the train company, and that's using my mobile signal when I could, and basically said, \"Your Wi-Fi is completely unusable on the train—completely unusable.\" And the answer I got back, obviously from their marketing team, right? Because that's where Twitter goes, was, \"Well, we're not contractually obligated to provide Wi-Fi.\" \n\nSo, \"Of yours,\" right? That was pretty much the answer that came back from them. It's like, \"It's not in the contract, so if it doesn't work, we don't care,\" right? And that, to me, is that idea taken to a little bit too extreme, right? Of just following what's in the contract. I quite often don't like having contracts at all with customers because of that. I want to be able to dynamically and adaptively figure out what it is they need when we get on the ground and get engaging. \n\nFor most customers I work with, I just have a variable contract—an email contract, right? \"Can you come and help us out?\" \"Yes, I can come and help you out.\" \"What dates can you come?\" \"These dates.\" \"Okay, I'm there,\" right? And that's enough for me to go book flights, right? Pre-COVID, book flights, turn up on site, and help them out, and then invoice them afterwards. And I never had a problem—never been burned. I'm sure now I've said that it will probably happen, right? \n\nBut never had a problem for the big, large customers, right? They come with their own contracts that they like you to sign and then do EAS and all of those things. I just assume NDA, right, for every customer I work with. But those bigger organisations with bigger contracts lock you in to delivering something that the procurement we need in the organisation is going to hold you to, regardless of whether you're delivering value to the customer. \n\nSo you have to deliver enough value that the people that you're working with will happily just tick that box and say, \"Yes, Martin delivered.\" Right? What's in this statement of work when actually there's no relationship between what's in the statement of work and what was delivered? But we delivered what they needed at the level they needed that provided them with the value they needed to not worry about what was written in the contract. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unpacking the Scrum Master Myth: Why Servant Leadership is Key to Team Success",
    "Description": "Explains why the Scrum Master is a servant leader, not an authority figure, and how this approach empowers teams, encourages autonomy, and dispels common misconceptions.",
    "ResourceId": "zs0q_zz8-JY",
    "Url": "https://www.youtube.com/watch?v=zs0q_zz8-JY",
    "Date": "2023-06-21T11:00:52Z",
    "Captions": "I think the biggest misconception about a Scrum Master is that they're an order giver. They're somehow in control of anything. Ideally, the Scrum Master has no authority whatsoever within the context of the team and, in fact, is selected by the team. So you could say that they are a servant leader, a leader who serves the team. \n\nThe biggest misconception is that they're in charge of anything, that people should be giving them status updates, that they should be writing reports. These are all ridiculous things that are not part of being a Scrum Master. If you want to know more, come to the advanced Scrum Master class and find out."
  },
  {
    "Title": "How Does Your Consulting Experience Manifest in the Training Environment?",
    "Description": "Explains how real consulting experience enhances training by providing practical examples, bridging theory and practice, and making learning more relevant and impactful.",
    "ResourceId": "AwkxZ9RS_0g",
    "Url": "https://www.youtube.com/watch?v=AwkxZ9RS_0g",
    "Date": "2023-06-21T07:00:03Z",
    "Captions": "How does my consulting experience manifest in the training environment? I think it manifests itself all over the place, to be honest. When I'm consulting, when I'm training, so much so that I definitely quite often struggle to cover all of the content that we want to talk about because for most people, they're coming to training looking for answers. Right? It might not be the answers that the training was designed to give them, right? \n\nUm, that's also often the case. But if we do have time and we do have inclination, and even sometimes if we don't, it's worth having a conversation about particular instances, particular ideas, and particular solutions. One of the things that I feel that I bring to a training class, um, that folks that aren't actually consulting, haven't actually been consultants, kind of aren't able to leverage, is those situational experiences that I've had in organisations with teams, with leadership groups, where we're trying to figure out how to solve a problem. \n\nAnd they're doing some crazy thing. I think my favourite thing that I talk about a lot is I've always got a worse story than whatever the students bring, right? I can, for, I don't think I've ever encountered a circumstance where a student has brought up some crazy, nefarious, ridiculous thing that their organisation does to inhibit their ability to add deliver value that I can't pull out an example of a worse one, right? Of a team or an organisation that is just worse, right? \n\nAnd almost in every circumstance, from technical things that are worse, from cultural things that are worse, to actual implementation things in the way they do business that inhibits the ability for teams and organisations to actually get value. And you'd think that would be something they would want, right? \n\nUm, and I think that's the piece that differentiates, um, nicodilities training from other training classes. And it's something that I look for in all of the trainers that I work with, um, is that they have to have actually done the things that they're talking about. I don't think there's any value in having a trainer that is just a trainer, right? That's, that's so, that's somebody parroting the content or parroting the ideas that somebody else has written. They actually have to have understood them and lived them so that they can not only tell you here's what this thing is supposed to be, but also say, but I understand that you're over here, and here's how I have seen organisations either split that difference, do something differently that gets them as good there as they can, or perhaps even an organisation that has thrown out their existing system in order to move to that new system and what that meant for the business and the types of conversations that had to be had so that the students feel like it's possible. \n\nRight? That's the bit that quite often there's a huge difference between the agile and scrum and lean and kanban that we talk about in training and where companies actually are. And people find it very difficult to understand how do they close that gap. Um, and that's what a trainer with real experience as an agile or devops consultant brings to the story. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What Does an Ineffective Scrum Master's Day Look Like?",
    "Description": "Describes common behaviours of an ineffective Scrum Master, including excessive reporting, poor team engagement, misusing daily Scrums, and blocking team communication.",
    "ResourceId": "KjSRjkK6OL0",
    "Url": "https://www.youtube.com/watch?v=KjSRjkK6OL0",
    "Date": "2023-06-20T12:00:28Z",
    "Captions": "What did an effective Scrum Master's day look like? Probably report writing, probably building some graphs and sending them out to people. Perhaps getting into the daily Scrum so they can get a status update from their team. And then berate them for not working fast enough; it's probably part of their story. Perhaps they're going to make sure that nobody from the business is talking to the developers so that they can control and maintain that relationship. It has a pretty dismal outlook there for anybody who works with this poor Scrum Master that I've come up with."
  },
  {
    "Title": "What is the Single Most Valuable Outcome a Consulting Engagement Can Produce?",
    "Description": "The most valuable outcome of a consulting engagement is achieving systemic change—transforming organisational behaviours, systems, and culture for lasting business impact.",
    "ResourceId": "RLxGdd7nEZE",
    "Url": "https://www.youtube.com/watch?v=RLxGdd7nEZE",
    "Date": "2023-06-20T07:00:10Z",
    "Captions": "So the question is, what is the single most valuable outcome that a consulting engagement can produce? Man, I'm struggling because can it be one thing, right? Is it? Let's apply some lean principle. If we can't get to a thing, we need to go up one level. So perhaps systemic change. Some sort of actual change in either the behaviours because you've changed the system, right? I mean, that's ultimately what we're trying to do. We're trying to change the system within which the organisation is functioning in order to get some business benefit, right? Whether that's a business benefit of the engineering teams being able to work faster or it's a business benefit that the company is able to respond to the market more quickly, whatever that business benefit is, that's the outcome that you're trying to achieve. And you're only going to get that by actually changing the system. Quite often, that's really difficult in organisations because lots of people say they want to change but then don't actually want to do the things that they need to do in order to change. We kind of quite often feel comfortable with the way things are, right? And that can be, um, it can be really difficult to get people on board. But when you do have people on board and they're willing to try new things and experiment, knowing that not every idea is going to work out, right? Then I think the single most valuable outcome for a consulting engagement is some kind of systemic change to the system that enables something, some desire that the business is looking for. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What Does a Poor Product Backlog Look Like?",
    "Description": "Learn how to recognise a poor product backlog in Agile and Scrum, including signs like lack of order, unclear priorities, and confusion among team members and stakeholders.",
    "ResourceId": "JqVrh-g-0f8",
    "Url": "https://www.youtube.com/watch?v=JqVrh-g-0f8",
    "Date": "2023-06-19T13:01:31Z",
    "Captions": "Uh, poor product backlog is probably unordered. Probably the stuff that's important is not at the top. Probably the team doesn't understand what all the things are in the product backlog, and the stakeholders don't understand it either. \n\nWhat's a better idea? A good product backlog looks like a well-understood, ordered list that everybody can get behind. Everybody understands what's in there. Everybody understands what they need to do to get the things that are in there and how they can help and how it contributes towards the overall organisational goals."
  },
  {
    "Title": "What Does the Assessment Phase of a Consulting Engagement Look and Feel Like?",
    "Description": "Explains the assessment phase in consulting, highlighting continuous learning, agile adaptation, and the value of hands-on engagement over rigid upfront analysis.",
    "ResourceId": "GmLW6wNcI6k",
    "Url": "https://www.youtube.com/watch?v=GmLW6wNcI6k",
    "Date": "2023-06-19T10:00:25Z",
    "Captions": "So the question is, what does the assessment phase of a consulting engagement look like? I think ideally there isn't one, or not quite, that it's asynchronous. A consultant should be continually assessing the needs of the business that they're working with, and quite often having that. If we agree that we work in the complex space, right, we know less upfront than we discover by doing. \n\nSo anything that you do in an assessment phase, probably a lot of it is throwaway because as you start engaging with the customer, as you start doing stuff, you start realising that that wasn't true or it wasn't quite right, or a completely different thing is happening anyway. \n\nLots of customers like an assessment phase because then you come in, you assess what it is that they're doing, and then they decide whether they want your help in fixing whatever it is that you've identified. But in actual fact, I think there's more value in just helping, just getting started, just engaging with teams, just engaging with people, and learn what the current state of the organisation is by that engagement, right? \n\nSo while I do sometimes do that kind of assessment phase, I would probably say it's not something that I would recommend to a customer. I just want to get started, I just want to help them, I just want to get going. So if we can get away without it, that's awesome. If we have to do it, it might be there's a great phrase like how much backlog do you need? It's the same idea: how much of an assessment do you need to do up front? \n\nAnd the answer is always the same: as much as you need to convince the customer to work with you, right? So if you're going to do an assessment, do just enough but not more than is needed to get the customer to understand enough to convince them to bring you on, get some help, and then as you start helping them and demonstrating your competence, we can start saying, \"Well, all that stuff we thought up front is kind of irrelevant now,\" and let's get started. \n\nI did a lot of work early on in DevOps engagements. I worked in the US for three years for our DevOps consultancy, and one of the things that I always found weird at the time because I didn't understand it, but they would say if they didn't understand what the customer wanted, right, they got on a call, they tried to understand what the customer wanted, tried to understand what they needed, and they just like either we don't know or we think it's very different from what they said, right? Because that happens as well. \n\nThen they would parachute me in to go figure out what the customer needs because sometimes, if we were doing very short engagements with customers, right, I would have a week max with the customer. Five days. In those five days, I have to figure out what the customer needs and deliver it. And it's not like we can extend it because on Friday I fly out, and on Monday I'm at a different customer somewhere else in the country. So it all has to be done within that time period. \n\nSo how do you dynamically adapt to those changing needs? Well, you can't really have that huge plan up front. You have an idea, right? You have an idea of what you need to do, you have an idea of what's going on, but once you hit the ground, you have to continuously adapt to what's going on. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Hardest Part of Adopting Scrum?",
    "Description": "Overcoming the belief in quick fixes is the hardest part of Scrum adoption; true success requires mindset change, continuous learning, and organisational adaptability.",
    "ResourceId": "c6R8wo04LK4",
    "Url": "https://www.youtube.com/watch?v=c6R8wo04LK4",
    "Date": "2023-06-17T11:00:32Z",
    "Captions": "The hardest part of adopting Scrum is the inherent belief in magic in organisations. The magic that things will just work out without any practice or effort or change. That doing the same thing over and over again won't result in the same outcome. That belief in magic, belief that we can have a person working on five different projects at once and still be successful, it's just ridiculous. Stuff like that, that is the hardest part of Scrum."
  },
  {
    "Title": "Unlocking Agile Consulting: Transform Your Organisation with Diverse Strategies and Continuous Learning",
    "Description": "Explains Agile consulting by highlighting diverse strategies, continuous learning, and practical ways to help organisations improve collaboration, value delivery, and adaptability.",
    "ResourceId": "82_yTGt9pLM",
    "Url": "https://www.youtube.com/watch?v=82_yTGt9pLM",
    "Date": "2023-06-17T07:30:02Z",
    "Captions": "Foreign. Consulting, that is a very nebulous term that people often have difficulty articulating what the heck that thing is. I have my approach to Agile Consulting. I have, there's a number of different parts to it. Probably the main part again is talking to people, helping people understand that there are other options to the way they do things. People kind of get a lot, quite often people get locked into one framework like Scrum or Kanban, and they don't realise that there's not really anything making them do that one thing. There's actually lots of choices in that story. What are the strategies that you need in order to be successful at building products, at delivering whatever it is that you're delivering as an organisation?\n\nAnd there's often quite a loose connection. People focus on delivery and they forget about the business as well, right? So a lot of Agile Consulting is helping them understand that this is not a tool for delivering stuff. Agile's just an idea that is a different way of working for your whole organisation, and how they can start bringing in some of those ideas into their organisation. So it's kind of filling that gap between that ideal world that training talks about and the realities of the organisation and where does the organisation currently sit on those Agile scales, and how do we start moving that needle so that they gain more ability, right? They get more, faster at being able to deliver stuff, tighter feedback loops, talking to their customers more, delivering more value, and ultimately making more revenue, right? That's the ultimate goal of most companies is to maximise the revenue for the effort that they put in. So being able to increase that.\n\nSo having conversations at different levels in the organisations, whether I'm dealing with teams, right, and helping teams get better at building the product that they're building, or talking to people in middle or leadership teams who are orchestrating that across a much wider audience, either their whole organisation or in the professional services environment. So there's a lot of engaging in talking with people, running workshops, right? Helping them not just, there's almost two, there's two things that workshops are good for, right? Well-run workshops. One is that you get the outcome of the workshop, right? That's one, that's only one of the outcomes, but that's quite important. But the other outcome is, do the people that came to the workshop, did they learn anything that can make their work better, right? Did they learn how to run workshops better, how to engage with people better, how to converse with people better, and navigate that minefield that that's often called the grown zone, that battleground of people not agreeing, right? Which is very common. And how do you navigate that? So building up those skills in people that I work with, and that's a lot of Agile Consulting, is finding people in your organisation who are the people that need to be the ones that are doing the work, right? Because I can't do it. I'm outside of your company. I can't make changes to your company. That's not possible. It's not possible for a consultant to come and say, \"Here, here's how you should run your business. Go do it,\" right? That's not how it works. The people in your organisation need to be the ones that make the changes, that understand the ideas, and the job of the consultant is to come in and effectively provoke change, help people think differently so they see what it is they need to do next. That's the hard part, right?\n\nBut also, you know, a state of Agile reports, I've done those as well. Like, where's our organisation currently, right? Lots of organisations are quite large, and perhaps instead of just bringing somebody in to help them, they need to have a conversation first about what is the help we think we need, where are we right now, and where do we want to get to, right? That's an initial conversation. So I've done reports for organisations where I come in and I interview people at all levels in the organisation, create a report that talks about the current state of agility within your organisation, what are the opportunities for improvement, and what are the top three things that I see as the biggest problem.\n\nAnd then it's up to the organisation to have a conversation about whether they need more help or they think they can do all of that themselves, right? And quite often they do come back, but it can take a longer period of time, right? Because they go try things, they're trying to build momentum inside the organisation, and then a year later they come back around and say, \"Can you come and help us with additional stuff or provide some training in a particular context?\" Right?\n\nAnd telling those stories inside the organisation. So I think that's what I would quantify as Agile Consulting. You need lots of tools in your toolbox. I try and have as many tools as I can. I'm always learning and figuring out new tools and new ways of doing things, and then bringing that to the customer engagement, knowledge, experience, methods, theory, right, as well as tools and capability. What is it that what information is your organisation missing that I can provide you to help you move forward?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Can you align DevOps and Software Engineering Teams Through Scrum?",
    "Description": "Explores how Scrum can align DevOps and software engineering teams by fostering transparency, feedback, and engineering excellence in Agile software development.",
    "ResourceId": "Fg90Nit7Q9Q",
    "Url": "https://www.youtube.com/watch?v=Fg90Nit7Q9Q",
    "Date": "2023-06-16T14:30:05Z",
    "Captions": "Can Scrum help us align DevOps and software engineering practices? I think it can. One of the fundamental things that Scrum requires is that we have a working, usable product at the end of every Sprint, including the first. That's our fundamental transparency and feedback loop. How do we get that? Do we just get it magically? No, we need engineering excellence. We need DevOps. We need all of those awesome software engineering practices. Bring them together with Scrum, and then we're able to deliver fantastic software."
  },
  {
    "Title": "DevOps Consulting Overview",
    "Description": "Explore how expert DevOps consulting drives cultural change, process improvement, technical troubleshooting, and tailored solutions for efficient, reliable software delivery.",
    "ResourceId": "QQA9coiM4fk",
    "Url": "https://www.youtube.com/watch?v=QQA9coiM4fk",
    "Date": "2023-06-16T07:00:14Z",
    "Captions": "So what, what, what is it, this DevOps consulting thing that we offered? I've been doing DevOps consulting for quite some time. I started back in 2010 when I moved to the US, providing as a DevOps consultant. I was employed as a DevOps consultant by a boutique consulting company in the US, in Seattle, and I did consulting for three years operating out of there. When I moved back to the UK, I started offering that service to myself, to other customers. \n\nIt really takes a bunch of different forms, right? Some of it is just helping people understand DevOps. So I do presentations, I do workshops, I do just conversations, right, around DevOps, what it is, what it means to organisations. Quite often that's with leadership teams. It depends who turns up, right? But I also offer a lot of, or have done a lot of consulting in the Azure DevOps space, a lot, because of my background as a Microsoft MVP in DevOps, right, within your DevOps space and my history with the Azure DevOps team and Azure DevOps consulting. \n\nSo quite a lot of people that come to me definitely have a Microsoft tint in their way of working. It's not exclusive, right? It's not required, but that quite often happens. If you're known as an expert in a particular tool, then people tend to gravitate towards you that way, which is a lot of fun, and I love talking about Azure DevOps and how it works. \n\nSome of that consulting is tool-based, right? What is Azure DevOps? How does it work? How can it help an organisation? How can they use it better? How can they help people and their teams adopt it better? But the tools and techniques that I talk about can be applied to any tool, whether you're using Jira or TeamCity. These are all tools that I've worked with and helped companies with as well. \n\nAzure DevOps consulting kind of takes a number of forms because there's a bit in potentially understanding what it is that you're doing. Some organisations want a report, right? Where are we? Are we actually doing DevOps? Do we actually generally understand what it is? I've come in and done, they used to be called DPSes. Microsoft had a name for it because there was some funding for it for enterprises, deployment planning services. \n\nEffectively, it's a state of DevOps report. What is the current state of DevOps in your organisation? I would come in, spend a week with folks in your organisation, interviewing them, talking about how they're building products, their ways of working, and then I would build up a report on what's the current state of DevOps in your organisation and what are the things that you're going to need to tackle? What are the opportunities for improvement? Places where things aren't going so well. \n\nWhat if you only did three things? What are the top three things? That's quite a common one. I've done that a lot, both DevOps and Agile, right? That's the same story; it works in both places. But ultimately, consulting is about coming in and actually provoking change inside of an organisation. \n\nSo the most common thing that I do is just coming in and talking to folks. I got one recently, kind of on a little bit of a retainer with a large manufacturing organisation in Switzerland. They're all over the place, but the people I work with are in Switzerland. We talk. That's really all it is from my perspective. We talk, I answer questions, we engage on different topics. We understand how talking about how they're doing work, how they could maybe change the way they do work, how could they change the way they do the work better. \n\nThen they go off and try things in their organisation. They change the way they do things, see if it works for them, and then come back for another session with more feedback, more ideas, more problems, and we discuss and figure them out. I have quite a few customers that are in that category. \n\nThat's the DevOps consulting. I also provide some technical help and support. That's maybe something of note. I actually still write code today. That's Martin still writes code, yep. I build, support, and maintain a product that allows you to migrate data around in Azure DevOps, so taking a project and splitting it or merging projects, whatever it is that you want to be able to do. \n\nI've been working around since 2016. Before then, 2015-2016 is when I started that product, and lots of people use it. Sometimes they have questions about how they should use it, what capabilities does it have, can they get any help and support with it, can they get training for it? So I do provide that as well, and I kind of include that in DevOps, right? Because it's part of that, that they're doing DevOps stuff and they want help with their DevOps stuff. \n\nSo really, it's quite broad. DevOps is this very broad consulting area where I might just talk to people, or I might go all the way to helping them with their tooling and helping them figure out how to use it better. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How Much of An Impact can Scrum Have in a DevOps Environment?",
    "Description": "Explores how integrating Scrum with DevOps boosts software delivery by improving collaboration, automation, speed, and product quality in modern development teams.",
    "ResourceId": "LiKE3zHuOuY",
    "Url": "https://www.youtube.com/watch?v=LiKE3zHuOuY",
    "Date": "2023-06-15T14:45:02Z",
    "Captions": "So in a scrum environment, DevOps is an absolutely critical piece of ideas that the team needs to be able to bring in and adopt into their strategy. \n\nDevOps is the engineering excellence. It's part of that engineering excellence that you need in order to close that loop and build the best products you can."
  },
  {
    "Title": "Unlock £20 Rewards: Join Our Exciting Referral Program for Collaborative Learning!",
    "Description": "Earn £20 credit for each friend you refer to our classes. Both you and your referral get rewards, supporting collaborative learning and building a stronger community.",
    "ResourceId": "IXmOAB5e44w",
    "Url": "https://www.youtube.com/watch?v=IXmOAB5e44w",
    "Date": "2023-06-15T07:00:06Z",
    "Captions": "So we have a 20 referral program, and the reason I created it was because I thought it was a good idea to effectively reward people for bringing other people to the classes. Right? Quite often, it's difficult to get your friends to come along to the classes, our colleagues in your organisation, friends or colleagues to help participate together so that you can learn together and move forward together in the organisation.\n\nSo I created this referral program where you, the person, you can go to my website and you can get this code, right? And the code allows you to give it to somebody else, and they will get a 20 discount on any class, right? Hopefully, it's the one that you're going to be on as well, so you can collaborate together in your organisation, or maybe you go on different classes and pool the knowledge, right? That's cool too.\n\nBut you also get something for it, right? Not only does this other person get a 20 discount, but you get a 20 store credit. That's probably the best way to describe it. You get 20 of the fee that they paid in credit towards a future class. So in effect, if you think about it, because it's 20, if they're all in the same market, you refer five people, you're probably getting a class for free, right? It's probably pretty close to that.\n\nSo this enables you to get something out of it as well, and the more people you refer, the more cash is in that pool, the more classes you can take. Yeah, I think that's a great way to reward people who like my training or who want to bring other people in their organisation to the trail.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is DevOps such a Critical Element of Software Engineering?",
    "Description": "DevOps integrates development and operations to enable continuous delivery, faster feedback, and efficient product deployment in modern software engineering.",
    "ResourceId": "2AJ2JHdMRCc",
    "Url": "https://www.youtube.com/watch?v=2AJ2JHdMRCc",
    "Date": "2023-06-14T14:30:02Z",
    "Captions": "So DevOps is the union of processes, practices and tools to enable the continuous delivery of value to our customers. It's absolutely critical to our ability to successfully build great products because it is the glue, the ideas that enable that to happen. Where do we come up with the strategies to be able to get our product in front of our customers quickly and get that feedback?"
  },
  {
    "Title": "Under employed - 30% upfront, balance when you are employed",
    "Description": "Explains a pay-later training programme for the underemployed: pay 30% upfront, with the balance due only after securing suitable employment and career advancement.",
    "ResourceId": "UeGdC6GRyq4",
    "Url": "https://www.youtube.com/watch?v=UeGdC6GRyq4",
    "Date": "2023-06-14T07:00:18Z",
    "Captions": "So we have this program. I call it the, well, I guess it's confusingly named underemployment, underemployed, unemployed program. I kind of change the name depending on how I feel that day. \n\nUm, and it's a program that allows people who either don't have a job, right, so they're changing careers, or just happen to be made redundant, right? That could be things that happen. Um, or if they're in a job that is beneath them, right? That's depending on your country, they're going to calculate um unemployment in various different ways. But most of the major countries calculate, include in unemployment figures somebody who is underemployed. \n\nSo that is, uh, you're a nuclear physicist and you're currently working at McDonald's, right? You're underemployed. You should be working somewhere using your talents and capability that you've got. But it could be, I mean, I'm creating a big one there, but that could be any, you know, even short gaps. Uh, somebody who is normally a project manager who is working with teams or a scrum master and, um, they're having to do something else because there are jobs available in their particular context, right? That's the under slash unemployed program that we have. \n\nAnd, um, the reason I created it was because there are so many people that are in that category and they can really struggle to afford premium training like we're talking about, right? You want to get your PSM, your PSPO, your Advanced, whatever it is, because you think it will enable um doors to open for you, right? We all know that that certification is not the be all and end all of knowledge. It's not a thing that you should rely on, right? But lots of recruiters and companies do rely on it. And while they do rely on it, it's perhaps something that you could add to your CV. It adds to your story that would open a door and enable you to then have a conversation with somebody, and that's where you are then able to shine. \n\nRight? And part of that, um, um, story is being able to participate in these trainings, gain some extra understanding, and that bit of paper that perhaps cracks that door to get into that interview, um, so that you can shine. So that's why I created it. \n\nUm, if the way it works is, um, you go to my website, you book a class, and instead of paying upfront, which is what most people are going to do, um, you can pick invoice and then give me a call, uh, give me a chat, chat to me, email me, whatever. \n\nUm, and we can have a conversation. And what I do is I just set it as a 30% deposit up front, so you pay a little bit, right? It's not going to be completely free; I have costs too, right? So there's a 30% deposit up front, and then you pay the rest when you're ready, right? When you feel, uh, you're, when you've got that job that you want that's paying you the rate that you're worth, right? Then you can pay it back. \n\nUm, I've done this a few times with a few people. I've never had anybody not pay it back, and most people pay it back fairly quickly. So, uh, I am always happy to help people increase their ability, increase their capability, and if this program can help them, that's great. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, add your scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How do DevOps and Agile integrate?",
    "Description": "Explains how DevOps and Agile work together, highlighting their complementary roles in engineering, process, and people to improve software delivery and team collaboration.",
    "ResourceId": "Gtp9wjkPFPA",
    "Url": "https://www.youtube.com/watch?v=Gtp9wjkPFPA",
    "Date": "2023-06-13T14:30:08Z",
    "Captions": "So how did DevOps and Agile integrate? I think of them as two sides of the same coin. DevOps is on one side, Agile's on the other side. Heads or tails, they are fundamentally the same thing. They are just looking at the same thing from a different lens. \n\nOne is looking at this thing from a lens of leadership and process in people, right? That's the Agile lens. The other one is the DevOps lens that is looking at things from the perspective of continuous delivery, lean, and engineering. Right? That's the two lenses of the same thing. \n\nSo don't get hung up on the difference between the two of them."
  },
  {
    "Title": "Biggest contribution from a Product Owner that you know of",
    "Description": "Explores how visionary Product Owners at Microsoft drove Agile transformation, shortened feedback cycles, and reshaped product development culture and industry standards.",
    "ResourceId": "2IuL2Qvvbfk",
    "Url": "https://www.youtube.com/watch?v=2IuL2Qvvbfk",
    "Date": "2023-06-13T11:32:18Z",
    "Captions": "Question is, what's the biggest contribution from a product owner that you know of? I think there are a lot of great product owners out there, great product managers, but the one that I always think of when I think about great product management is kind of two people in the same organisation, both kind of product owners in the same product, which is confusing because then there's two product owners, right? But I'll try and explain.\n\nThat's effectively Brian Harry, who was the product unit manager for Team Foundation Server for the entire developer division at Microsoft back in the day. When I was getting into all of this stuff, he was the man. He realised, as the single responsible person for about 650 people working on this product, that a two-yearly release cadence kind of sucks, right? So his was the first team in Microsoft to start really en masse moving towards a greater degree of agility.\n\nThe way they came up with, within the context of Microsoft, for doing that stuff is almost the model that was replicated across the organisation. It's never going to be identical, right? But that's when, if you hear Microsoft talking about their season-based model, which they do talk about, they have the spring release and the fall release, right? This kind of cadence of bigger things that they're working on, of product goals maybe, right? That's really what they're talking about, is this season-based model where they have that urban flow of work and ideas.\n\nBrian Harry worked on that, very much supported by my other favourite gentleman, Aaron Bjork, who was, in effect, if you're not familiar with TFS, and it's now called Azure DevOps, right? That's effectively what it is. Back in the day, Microsoft was doing two-year releases of Team Foundation Server and Visual Studio, right? They found that the cadence for closing the feedback loop was actually four to six years because they were in a two-yearly cadence. It's two to three times whatever your delivery cadence of usable working product is. That's ultimately your feedback cadence because what they found was that they would do a beta halfway through to get feedback from people, but as soon as you've shipped that beta, you're now working on this stuff that you need to do for launch, and the feedback you get on the beta you can't actually fit in here because you don't have any time left. You're all booked, right? You've booked out that time for the stuff you need to do to get it to production.\n\nSo then you start thinking about, well, maybe we can fit it into the next yearly release, and they were able to fit some stuff in there. But what they also often realised was the closer they get to that production release, by the time they finish the beta, they're planning for the next two-yearly release, right? So they've already booked out this time as the feedback comes in on this product. The earliest you can possibly get that feedback from the beta into the actual working product is two years down the line, right? Or two and a half, up to two and a half years down the line. But in actual fact, some stuff might not make it into that time box, so it's the next time box, which is another, which is four years, four to four and a half years down the line, which is just too long, right? It's just too long.\n\nSo what, in realising that, this leadership group in this organisation, in this part of the organisation, they realised that they had to do something different, and he led the way in his organisation in making those changes, largely leveraging the respect for his choices, his wisdom within the organisation. The respect and the rest of the organisation for his wisdom allowed him to maybe do things that other people weren't able to do or hadn't been able to do in the past. He is relentless. This guy, he'll work 20-hour days, no problem at all. He's just one of those folks that has that outlook.\n\nHim, along with Aaron Bjork, effectively changed the way Microsoft do business, changed the way Microsoft approached building products, and changed the whole ethos. I mean, not without support, right? Somebody else has to come along and water those ideas and help them grow, and that was Satya, who was able to come along into Microsoft and then start encouraging a lot of these ideas. But the kernel for these ideas was pre-Satya. It was the Azure DevOps team, and they moved to a three-week continuous cadence.\n\nSo, in fact, the product owner, that's how I see the product unit manager, right? Fully fiscally accountable person in your product structure. They're the ones that are actually best placed to enable changes in your organisation anyway. They're the ones with the money. They're the ones with, well, if I'm going to spend your money building this product, I need to be able to control this and this and this in order to be most effective at building this product. They're the ones who need to have that argument. It's not your agile coaches or your consultants or any of these people. Like, what the hell do they know about your business, right? That's the attitude internally.\n\nBut one of the core purposes of that agile coach and consultant is to help that person who can make that change, who does have that respect inside of the organisation, who does have that fiscal accountability, make those changes. And that was the huge, I just think it's such a huge contribution that Brian Harry and Aaron Bjork made to this idea of building products inside of Microsoft, right? But building products in general, because the whole ethos of Azure DevOps is about DevOps, right? It's about shortening those feedback loops. What tools do we need to support that idea? And yeah, that for me is the most powerful story.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "30% Discount for Existing Alumni Overview",
    "Description": "A 30% discount is offered to alumni, recognising their dedication and supporting continued growth in DevOps, Agile, and Scrum skills through further learning opportunities.",
    "ResourceId": "ypVIcgSEvMc",
    "Url": "https://www.youtube.com/watch?v=ypVIcgSEvMc",
    "Date": "2023-06-09T11:00:46Z",
    "Captions": "We really want to help and support your learning going forward into the future. We want to help those that are already not doing the role learn the role, those that are doing the role and have been doing it for a while learn more about the role and be able to participate more. \n\nUm, which is why we offer a 30% discount for anybody who's taken a class with us before. That way they can broaden their knowledge, they can expand their ideas, um, and perhaps the 30% is what's going to make the difference for them, them able to build up that knowledge so that they can be the most successful in their career."
  },
  {
    "Title": "Unlocking the Product Owner Potential: Bridging Theory and Practice in Agile Leadership",
    "Description": "Explores the real-world challenges and expanded responsibilities of product owners, highlighting practical skills, agile leadership, and collaborative learning in organisations.",
    "ResourceId": "vQBYdfLwJ3g",
    "Url": "https://www.youtube.com/watch?v=vQBYdfLwJ3g",
    "Date": "2023-06-09T07:00:27Z",
    "Captions": "So the question is, why is the PSP all a great fit for the eight-week immersive learning experience? I think it's a great fit because there's even more than, I think even more than all of the other classes, there's a huge disconnect between how we teach and explain the breadth of what the product owner is and does and people are actually trying to do it in their organisations.\n\nWe're talking about the product owner as an agile product manager, right? So it's still product management, all the tools and techniques of product management, but then we're bringing in this idea of the product owner moving from a scribe, right? That's the lowest form of product owner, through a journey towards a mini CEO or entrepreneur of that product. Like they're the top of that product totem; they totally own the product, full fiscal and commercial accountability for this product within their organisation. \n\nThen they're able to focus on other things that maybe they didn't have access to at a different level, so things like how do you bring in marketing, how do you bring in sales, how do you bring in contracts? Right, if you've got to write contracts with customers, the product owner needs to be involved in that because how you write the contract matters to how you actually deliver the work. And they're in control, effectively delivering the work or deciding what order we're going to do things in, right?\n\nSo that immersive class allows us to create better connections between those activities that we're going to talk about in the class and the stuff that they need to do in their organisation, and perhaps how they have conversations about how they do that stuff, right? How do they, if they can't directly control that thing, which is quite often the case, right? If you're in a bigger organisation, the chances of you controlling branding and marketing is probably pretty low, right? But perhaps you could influence it. Maybe you can be part of those conversations, then your voice becomes respected at that table as well, so that they're going to be more involving you, looking at you, \"What do you think?\" as well, because you've had some great insight on that topic.\n\nAnd you need to be credible in all of those spaces. You need to be credible in that conversation about legal and the conversation about marketing contracts, all of those things, so that you can have that engagement. This iterative and incremental immersive experience is going to help you bring empiricism into that story, right? We can talk about stuff, we can talk about stuff till we're blue in the face, but you can go actually try that thing in your organisation and then come back and say, \"Well, that didn't work,\" right? Then we can have a conversation as a group, which is great because you'll have a bunch of product owners there, right, who've all tried the same thing. \n\nRight, they've all gone off and tried the same activity in their organisation or different parts of the same organisation, and they can come back with help and advice. They can provide the help and advice, \"I tried it, my organisation is also a bank,\" right? Or the same bank, and we were able to do this because we had this conversation with our compliance director, and they were able to say, \"Yes, we can do it that way.\" That's different from the way we were doing it before. \n\n\"Oh, awesome! I'll go have that conversation with my compliance person and see if we can't come to the same conclusion,\" right? That sharing and collaborating of ideas is going to be exponentially increased as part of the immersive learning experience for the product owner.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why Validate Your Advanced Product Ownership Skills with a PSPO-A",
    "Description": "Learn why validating advanced product ownership skills with a PSPO-A demonstrates expertise, leadership, and the ability to drive product success in Agile environments.",
    "ResourceId": "8F3SK4sPj3M",
    "Url": "https://www.youtube.com/watch?v=8F3SK4sPj3M",
    "Date": "2023-06-08T11:00:05Z",
    "Captions": "So the added value of the advanced product owner is that we really, we've already opened up the idea of the product owner and what they do in the product owner class. But the advanced product owner really pushes the bounds and brings in marketing and contracts and sales and finance and budgeting and all the other things that a true product owner, a true ideal leader, and a true mini CEO or entrepreneur is going to have to think about in order to be successful and have a successful product."
  },
  {
    "Title": "Transform Your Agile Training: The Power of Immersive Learning for Lasting Impact",
    "Description": "Explores how immersive learning in Agile and Scrum boosts retention and real-world application by using spaced sessions, practical assignments, and collaborative feedback.",
    "ResourceId": "qrEqX_5FWM8",
    "Url": "https://www.youtube.com/watch?v=qrEqX_5FWM8",
    "Date": "2023-06-08T07:00:30Z",
    "Captions": "So the question is an overview of immersive learning experience. And I think we need to start with what the heck is immersive learning, right? Because that's just a word that somebody's using. But in the way I'm describing it and the way scrum.org describes it, right, immersive learning is taking the traditional model. The traditional model, right, is that you do a two-filled class or it's four half days consecutively. That's the kind of traditional model.\n\nIn the immersive learning approach, what we're trying to do is connect more the things that we're talking about in the class to the participants' real world, right? So we want to connect them with the story that they're telling in their business rather than our made-up story. Because in most of the classes, especially public ones, right, we have to use case studies so that everybody's talking about the same topic so that we can create those relationships. But in an immersive class, we can connect it to their real world, and we have more time to talk about and connect it to each individual person's real world, right, even if they're from multiple companies.\n\nSo what we're going to do in the immersive class is instead of doing consecutive days or, you know, short four half days, we're going to break it up into more sessions because we're going to make each of the four half-day sessions have more stuff in it now. So instead of just doing the content and then they go home or doing the content and hear some homework to read, right, it's... the first part of the session is we're going to debrief the previous assignment, right? So obviously in the first session, we're not going to have one, but we're going to debrief the previous assignment. That's probably an hour to an hour and a half, right? That's going to be quite a lot of time. If you've got six people in the class, we want to hear from everybody, talk about the problems, we're going to discuss how it went, and then we're going to have some learning. We're going to learn something as well, right? We're going to talk about some new stuff in that, and then we're going to give out an assignment for the next week. And that assignment is something that you can do in your real company, something you can go back and practice, right, for the next week.\n\nWhat's the difference between musicians and martial artists? What's the similarity between musicians and martial artists? They practice, right? So we need time to practice, and this is part of that story. You can practice within your organization by bringing in your real stuff. So it might be, I don't know, I'm trying to think of what an assignment might be. An assignment might be figuring out in your organization—and being very high level here—but figuring out in your organization what does value mean to your business. If you're in the product owner class, what does value mean to your business? Your business might not even notice now, right? \n\nSo as part of that assignment, we would give you some help, some pointers, maybe some workshops you can run in your organization to try and figure out what that information is and what it means. And the answer might be your business doesn't know, right? That might be what you come back with the next week. So then we can have a discussion about what else can you do to figure it out, and that's how we're connecting that story back. \n\nSo this means because we've got this debrief part, that we've got the four-hour session that we were just doing, you know, the content for the course means we've got less time—probably only half the time—to do new content. So it's spread out over a longer period of time. So instead of four half days, I think the PSM is seven half days, done one a week. So that gives you a week's worth of time—should be five business days or four business days, right—to be able to practice that or try the thing that you're going to do. But each of them is different. Each of the classes is different. So the EPS, I think, is ten weeks. I think the PSPO is eight weeks. It depends on how the exercises break down within it, but it is that different format, right? And it's different from the traditional format because it makes those connections. That is the point there.\n\nAnd the reason I really like this format is because I feel like it will give more value to the students, right? Lots of people come into classes and they leave, especially the two full-day classes. They leave with their brains full of knowledge, and they're going to remember ten percent two weeks from now. They're not really going to connect it back to the way they work, how they're going to apply it, to even understand how to apply it within their organization, within their perhaps corporate context, right? With all of the corporate rules that they have, how do they then get questions answered?\n\nSo this format really allows us to directly connect what we're talking about back to real things in every participant's company. That's why I think this format is great. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "2-day PSPO Versus 8-week PSPO",
    "Description": "Compares 2-day and 8-week Product Owner courses, highlighting differences in learning pace, depth, practical application, and how each suits different learning styles.",
    "ResourceId": "N3LSpL-N3kY",
    "Url": "https://www.youtube.com/watch?v=N3LSpL-N3kY",
    "Date": "2023-06-07T07:00:14Z",
    "Captions": "So the core value of the product owner class is that the core value of the learning. Right, you're going to learn a bunch of stuff about the product owner, how it works, what it isn't, what it is. You're going to get an assessment where you're able to hopefully pass that assessment and get a credential. \n\nUm, that's really the core value proposition: understanding the product owner, perhaps getting the credential, and looking forward into where do I learn things next. \n\nUm, the added value of the eight-week class is actually being able to connect the things that we're talking about in the class back to your real-world organization, try and practice some of those things, and then get feedback on it on a regular basis. So instead of two full days, it's eight weekly four-hour sessions."
  },
  {
    "Title": "DevOps Demystified: Why It's More Than Just Tools and How to Embrace Its True Value",
    "Description": "Explains why DevOps is a mindset focused on collaboration and continuous improvement, not just tools, and highlights its true value in modern software development practices.",
    "ResourceId": "BhGThHrOc8Y",
    "Url": "https://www.youtube.com/watch?v=BhGThHrOc8Y",
    "Date": "2023-06-07T07:00:02Z",
    "Captions": "Why shouldn't this? What do people know about DevOps but really don't? \n\nI, well, the first thing, especially for... I have been a Microsoft MVP in Azure DevOps for 14 years. So lots of people, when they say DevOps around me, they mean Azure DevOps. They mean the tooling, and that's quite often the case with a lot of these... when they talk about the work, what they mean is Jira, right? The tool is not the value. The tool is just there to help you surface the value or leverage the value that comes with that idea.\n\nSo the thing that people know about DevOps but really don't is that it's not a tool. It's not a process. It's not a practice. It's an idea, right? And it's really that idea born very specifically in software engineering, right? I mean, that's really where DevOps focuses. \n\nUm, around how do we... if we're talking about Agile and we're talking about getting faster at doing stuff, what's the impact of that on our engineering systems? What's the impact of that on the way we create our product, the way we approach our product, the way we design our product? What is the impact that enables us to shorten those feedback loops? \n\nUm, beyond just talking about it, right? Because Agile is the people and process part, and DevOps is the... wow, the nebulous part of the... not just the tools, man, that's hard to describe, right? \n\nUm, DevOps is just an idea, just like Agile's just an idea. So tools may help you, but figuring out how you're going to use those tools or how those tools work... I had some great conversations with a gentleman who was the almost the source of Team Foundation Server originally, Visual Studio Team Services, as it was called the first time round, and the ideas behind it, which is a gentleman called Sam Guggenheimer. \n\nThere's a great Twitter account which is \"What Would Sam Say?\" which is his people that worked with him created because he would see all sorts of, I don't know, clever and interesting and funny for the rest of us stuff. \n\nUm, but Sam had this laser focus looking forward into the future. What do we need going forward, looking out into the future in order to support this idea of DevOps? \n\nAnd TFS and his journey into Azure DevOps, right, is the result of that thinking, not the cause of that thinking, right? The tools are not the cause; the idea is the cause, and the tools are there to support it. \n\nAnd that's, I think, what people understand about DevOps but really, really don't, because they always default to the tool, the tool, the tool. No, it's default to the idea, and the tool supports that idea. \n\nUm, and that's where you want to be. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Worst Contribution from a Product Owner that You Know Of",
    "Description": "A real-world example of a product owner undermining their Scrum team during a sprint review, highlighting the importance of support, accountability, and collaboration.",
    "ResourceId": "ekUL1oIMeAc",
    "Url": "https://www.youtube.com/watch?v=ekUL1oIMeAc",
    "Date": "2023-06-06T11:00:34Z",
    "Captions": "So the worst product owner experience I have ever seen was at a Sprint review. The customer, the stakeholders who were in the room, the customer was there. It turns to the development team after the demo and said, \"Uh, why, why, why, why, why did you build it that way?\" Right? And you made choices that we didn't like. Why did you build it that way? \n\nAnd instead of getting in front of and supporting the team, the product owner instead turned to the development team and said, \"Yes, why did you build it that way?\" The product owner basically threw the whole team under the bus in the Sprint review. Not a good position."
  },
  {
    "Title": "How big is the gap between an average developer and a great Agile Developer?",
    "Description": "Explores the key differences between average and great Agile developers, highlighting engagement, continuous learning, practice, and self-directed growth in Agile environments.",
    "ResourceId": "96iDY11yOjc",
    "Url": "https://www.youtube.com/watch?v=96iDY11yOjc",
    "Date": "2023-06-06T07:00:04Z",
    "Captions": "So the question is how big is the gap between an average developer and a great agile developer? I think there's two parts to that, but the main part that I think is really important is, um, I read a blog post years ago and I was sitting reading it, and the first sentence it started with was about this topic, right? What makes great developers? What's learning? All of these kind of things. And the first sentence was, \"If you're reading this, you're already in the top 10 percent.\" And that was what it said of the first sentence because so few people are really engaged and care about the work that they do, that they're willing to go invest and investigate and figure out and solve and try stuff and fail and pick themselves up and try again, right? \n\nAnd this is true regardless of whether we're talking about our skills with people, with process, right? So those are those agile group of skills or product management or whatever it is. But it also includes the technical, right? In the detail, in the weeds, and how you actually do the work that you do every day that is irrelevant to the system with which we're working. And I think that is the fundamental difference between somebody who is average at doing their work and somebody who is great at doing the work: the willingness to learn, willingness to adapt, willingness to try things, investing your own time and making yourself better, right? \n\nUm, one of my favourite folk in the world, David Starr, who originally created the APS Applying Professional Scrum class back in the day, had this thing that he always said: \"What do martial artists and musicians have in common?\" Right? What do martial artists and musicians have in common? And they're so different that people are usually like, \"Well, I don't know, what do they have in common?\" They practice. \n\nWhen do we get practice? When do we come off actually performing, right, at the concert, making the production code? And when do we get the time to practice? When we get things to try, different things to try, new things? That's actually, for me, I feel like one of the powers of training classes—not maybe the PowerPoint training classes where you basically fall asleep and your brain dribbles out your ears watching a PowerPoint presentation—but what I try and do is bring in some of the ideas of flipped learning, right? So I provide you with effectively, \"Here's the content I'm going to teach you in day one,\" right? Go read it. \n\nIf you read it, I don't need to tell you it; we can then talk about it and practice it in the live session where we are together because everybody reads at a different pace, everybody learns at a different pace. Perhaps you could spend some time reading that content and then we're going to answer the questions, we're going to dive into the nuance, we're going to figure out how that works, we're going to do some exercises so that we can maybe practice some things. That's the value of all being together, not in reading some content off of a slide. \n\nSo I think that that learning, interest in learning, is what makes it really powerful. And I do have a customer that leverages this, um, and they actually provide their developers, everybody in their company, with a budget of about five thousand Euros a year for training. And you spend it how you like. It's up to you what training classes you want to book, what you want to learn. Perhaps you just want to go do an NLP class because you aren't very good at that stuff and you want to understand it better. Perhaps you do some cognitive behavioural therapy classes because that's what you feel you're lacking. You can pretty much do anything you want with that budget. I'm sure they might frown if you wanted to go on a paper airplane making class, but the idea is that you, as an individual, know what you don't know, right? You kind of know what you don't understand, you know what you need to figure out, and the person best suited to direct the learning that you need is yourself. \n\nIt also has the huge benefit that it's opt-in, right? It's self-service. So the worst type of learning is mandated and forced learning. People generally don't pay attention, don't care as much, and don't participate. But if they pick it themselves, they're generally more eager, more engaged. And that's the difference between the average developer and the great agile developer: engagement, practice, focus. That's what it is. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "8-Week Immersive Learning Course in 60 Seconds",
    "Description": "Discover the structure and benefits of an 8-week immersive Scrum learning course, featuring blended lessons, practical tasks, and collaborative feedback for real-world impact.",
    "ResourceId": "o9Qc_NLmtok",
    "Url": "https://www.youtube.com/watch?v=o9Qc_NLmtok",
    "Date": "2023-06-05T11:00:38Z",
    "Captions": "The immersive learning classes that we're teaching from Scrum.org are all over kind of seven to ten weeks. They have both learning, you know, classroom learning, offline learning, but also assignments at the end of each session for people to go and practice within their organisation. These new techniques, try them out, and then come back and get feedback, collaborate with a group of people who've all participated in the same assignment, and try and figure out what their next move is within their organisation. So the PSPO, for example, is ten at eight week of that iterative model."
  },
  {
    "Title": "Best Scrum advice you ever received?",
    "Description": "Emphasises the importance of flexibility and pragmatism in Scrum, encouraging teams to adapt frameworks to their context rather than rigidly following prescribed rules.",
    "ResourceId": "YUlpnyN2IeI",
    "Url": "https://www.youtube.com/watch?v=YUlpnyN2IeI",
    "Date": "2023-06-05T07:00:20Z",
    "Captions": "The question is, what's the best Scrum advice I've ever received? I think it's the same advice we actually see all the time, although on social media, in varying degrees of upsettedness with Scrum and frameworks and stuff. You'll see there's a lot of movements out there to move away from a dogma that I feel like didn't really exist, except in crappy people anyway, right? This dogma that, oh, you're not doing Scrum unless you're standing up, or you're not doing Scrum unless you're doing user stories, or if you don't do exactly 15 minutes for your daily Scrum and it must be in person, then you're not doing Scrum. All of that stuff I think has always been [___]. It's not really Scrum, it's not really Agile, it's not really in keeping with that story. \n\nPeople kind of latch on to that idea of, in the footnotes of Scrum, of the Scrum Guide, it does say that Scrum, as defined in here, is immutable, and implementing part of it is fine, right? But it's not Scrum if you only implement part of it, and people latch onto that. So I think the main advice is not to be dogmatic, to be pragmatic. I feel like you need to be dogmatic in education, right? Because you're telling somebody how something works. This thing is defined this way; here is how it works. Does it matter that they use it differently when they actually go and use it in their company? No. Are they getting value? Yes. Then we're cool, right? Are they doing all of it? No. Are they still getting value? Yes. Then it's great. \n\nYou don't need to be following every little thing. To me, that's successful, and it's actually something that I think the Scrum Guide struggles with because people complain when it tells you it's too structured and detailed, and then they complain when it doesn't tell you how to solve your problems, right? Oh, the Scrum Guide's not enough. Of course, it's not enough; nothing's enough. You need to come up with the strategies, and that, I think, is that core piece of advice that I see, consistent advice that I see from almost everybody who knows what they're talking about on the internet. Whether it's Scrum, Agile, Lean, Cap, it doesn't matter what it is, the advice is almost always the same. \n\nThe actual framework, the actual tools that you use are just tools; they don't matter. People and interactions over processes and tools. Processes and tools are valuable; use them when they're effective for you, adapt them when they're not, ditch them when they're bad, right? That's it. That's the only advice you need to be more Agile. \n\nBut I would also caveat that. I'm going to caveat that because how do you know something doesn't work for you if you haven't done it, right? There's also that idea that sometimes, especially when we're learning, right? And that could be learning I'm in a classroom or learning I'm trying to figure out how this thing works, is perhaps you want to do it the way it says on the box and then go, \"I tried it this, and this stuff doesn't work. We need to adapt this; we need to adapt that,\" just like a recipe. \n\nAnd that's what I try and where the way I try and phrase it. You know, a recipe book is not there for you to just follow verbatim because you will find that after you've made the recipe verbatim once, right? You follow the instructions, you'll find it's not quite to your taste. Maybe you like a little bit more salt, or you like a little bit more paprika, or you like to put something else in it that is yours. So you take that recipe and you adapt it and make it yours and create your own recipe for what it is that you're doing. \n\nAnd that is the power of Agile. That's the power of flexibility, of adaptive, iterative, incremental, and empirical processes. Use what works, ditch what doesn't, look at the data, see what's going on. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How do you know if you've got a great Sprint Goal?",
    "Description": "Learn how to identify a great sprint goal by recognising signs of team excitement, curiosity, and engagement, ensuring your Agile sprints inspire motivation and collaboration.",
    "ResourceId": "AY35ys1uQOY",
    "Url": "https://www.youtube.com/watch?v=AY35ys1uQOY",
    "Date": "2023-06-02T11:00:12Z",
    "Captions": "Is how do you know if you've got a great Sprint goal? I think the only way you know if you've got a great Sprint goal is if both the stakeholders and the developers go, \"Oh, that sounds awesome!\" Right? That's how you know you've got a Sprint goal. If people are interested in the Sprint goal, they're interested in the outcome, they're asking questions about how, what, how does that work, what does that mean, how are we going to achieve it? That sounds great! Let's have a conversation about that. People have to be excited and interested. That's how you know you've got a great Sprint goal."
  },
  {
    "Title": "How does a Scrum team decide on a Sprint goal?",
    "Description": "Explains how Scrum teams collaboratively define a clear, achievable Sprint goal through early stakeholder input, planning, consensus, and ongoing communication.",
    "ResourceId": "Srwxg7Etnr0",
    "Url": "https://www.youtube.com/watch?v=Srwxg7Etnr0",
    "Date": "2023-06-02T07:00:09Z",
    "Captions": "So the question is how does a Scrum team decide on a Sprint goal? If you were to look in the Sprint guide, it says it just happens, but we all know that's not going to be true, right? It doesn't just magically pop into people's ideas. Some people would attest that the developers and the product owner work together during the Sprint to come up with a Sprint goal, and I would say that's partially true. I feel like if you walk into your Sprint planning and you don't already know or don't already have an idea about what your Sprint goal is going to be, you're already at a disadvantage.\n\nI would normally discuss what a probable Sprint goal for the next Sprint would be at my Sprint review with my stakeholders. I'd probably be talking about what it is we should be working on next, what does that look like, how does that fit into the strategy? So when I do walk into Sprint planning and we already have an idea which direction we're going, and then perhaps we're writing the Sprint goal, right? We have an idea about what it should be, and now we've got to get it down on paper. We've got to quantify it, and then we've got to select the items that go towards it.\n\nI can definitely see circumstances where you walk into Sprint planning and you don't know up front what it's going to be. Perhaps stakeholders just dropped a bombshell on you at the Sprint review. Perhaps the market just dropped a bombshell on you at the Sprint review or after. Perhaps you just don't know yet, right? It's just too up in the air, and you didn't know enough, and it's going to be a really long Sprint planning because we've got to figure it out.\n\nBut how does the team decide on a Sprint goal? They collaborate between the product owner and the developers with significant input from the stakeholders, with significant input from the market and the business context. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How does a Scrum team create a sprint goal?",
    "Description": "Explains how Scrum teams create effective sprint goals by aligning product strategy, tactical needs, and backlog priorities to deliver stakeholder value each sprint.",
    "ResourceId": "GJSBFyoHk8E",
    "Url": "https://www.youtube.com/watch?v=GJSBFyoHk8E",
    "Date": "2023-06-01T11:00:15Z",
    "Captions": "In order to craft a Sprint goal, a team's going to pull in a bunch of information with the strategic direction of the product, the current tactical direction that the product owner is looking for, the current things that are happening in the engineering of the product, and they pull all of those things together and figure out what is the next most important thing they can work on. What is the next most important thing they could show the stakeholders that would provide them with value? \n\nAnd then once they've got that context, that will then enable them to have a discussion about what items they're going to select. They're going to pull from the product backlog into their Sprint."
  },
  {
    "Title": "How does a Scrum team estimate what can be delivered in a Sprint?",
    "Description": "Scrum teams estimate Sprint deliverables by assessing the size and complexity of backlog items, focusing on shared understanding rather than predicting exact timeframes.",
    "ResourceId": "pyk0CfSobzM",
    "Url": "https://www.youtube.com/watch?v=pyk0CfSobzM",
    "Date": "2023-06-01T07:00:31Z",
    "Captions": "That's a great question. So the question is how does a Scrum team estimate what can be delivered in a single Sprint? And the ultimate answer is maybe they don't. The Scrum Guide does not have the word estimate or estimation appear anywhere within its contents. It uses the word size. The team should be able to understand the size of things on their product backlog, which is not quite the same as estimate.\n\nEstimation is a great tool. There are various estimation tools and techniques that teams can use. I generally use those tools and techniques to help teams understand the things on the product backlog better because I find it's much more valuable, much more important to have the developers and the product owner and the stakeholders understand things than it does to say it's going to take this amount of time. Right? Because ultimately, if we say it's going to take this amount of time, we're talking out of our butt. There's no way for us to know how long a creative piece of work is going to take. It's just not possible.\n\nThink to yourself, I'd like you to write a book on the topic of leadership in the United Kingdom, political leadership in the United Kingdom. Then how long would it take you to write that? I want you to tell me off the top of your head how long will it take you to write that? You don't know. You can't answer that question. You could probably take a rough guess, but you might be orders of magnitude under or orders of magnitude over because you don't know whether you're going to get writer's block. You don't know whether you're going to not be able to find a critical piece of information that your brain thinks you need. You don't know any of those things. You can't predict those things.\n\nSo the surprises that happen when you're building products, things you don't know, give you a very high level of variance. So the idea that you can estimate things you don't know how to do yet is just ridiculous. It's very different from the story of if I asked an electrician to estimate how much it will cost to rewire my house. That's something that they probably can estimate because they've done houses like mine before. Right? My house is not that much different from anybody else's house. The way you wire is not different from anybody else's house.\n\nWhen you're building a product that doesn't exist yet, the tools and techniques and practices and ideas and architectures and ways of doing things don't exist yet. You have to come up with those, and that's where those surprises come in.\n\nSo how can a team estimate what can be delivered in a Sprint? I think they take a guess like everybody else does. That's why your Sprint goal should never be the whole Sprint. It should only be part of the Sprint because you might be wrong. You might think this will take two of the 10 days that you have in your two-week Sprint, and actually, it takes five. Okay, well, we've built that in by having a Sprint goal that's much more targeted, and we are going to drop some of the other stuff that we brought into the Sprint that we thought we would be able to do, but maybe we can't.\n\nSo the answer ultimately is you don't. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is a sprint goal?",
    "Description": "Explains the sprint goal in Scrum as a clear, tactical objective for each sprint, guiding team focus, enabling actionable feedback, and linking daily work to product vision.",
    "ResourceId": "2Cy9MxXiiOo",
    "Url": "https://www.youtube.com/watch?v=2Cy9MxXiiOo",
    "Date": "2023-05-31T11:00:01Z",
    "Captions": "So the question is, what is a Sprint goal? \n\nWhere a vision is strategic, a product goal is intermediate strategic. The Sprint goal is really tactical. It's what are we doing just now to make progress towards our product goal, towards our product vision. \n\nIt has to be really something that the stakeholders can take at the Sprint review and provide you with actual feedback. We like this because, or we hate this because of this other thing. It's a tactical goal that your team is working on right now."
  },
  {
    "Title": "How critical is a Product Owner in developing a great Product Backlog?",
    "Description": "Explains why a product owner is essential for shaping, prioritising, and maintaining a focused, lean product backlog that drives effective Agile product development.",
    "ResourceId": "6cczVAbOMao",
    "Url": "https://www.youtube.com/watch?v=6cczVAbOMao",
    "Date": "2023-05-31T07:00:05Z",
    "Captions": "So the question is, how critical is a product owner in developing a great product backlog? If you look at the Scrum Guide, then it will be absolutely imperative. They are the one that decides, makes the final decision, the arbiter of the product backlog. They are responsible and accountable for ordering the product backlog. Although they can delegate it, they're responsible for the contents of the product backlog. Although they can delegate it, they are 100% responsible for expressing and communicating the vision and strategy that results in all of those other things.\n\nSo if you think about what you might put in a product backlog, you're not going to know what to put in there unless you know what direction you're going. Product backlogs can quite often become just this massive dumping ground of whatever crap anybody asks for at any point in time, and that's not what you want. You want your product backlog to be a short list, a lean inventory of the work that needs to be done to maximise the value that you're going to deliver to your customers. This means if you have 5,000 things in your product backlog, you probably don't have a product owner. You've probably got somebody who's just dumping stuff in there, and if a customer makes a request, they just put it in there. Perhaps that's not the right customer request. Perhaps we should say no to that customer request. Perhaps we should ask the customer to keep it in their back pocket because it's not to do with our current strategy.\n\nAnd those are really the core critical activities of the product owner that help us create this lean, directional product backlog that enables then the engineering team, the developers, to select the right things. Because it's all understood, it's transparent, we know what trade-offs we're making as developers. We know what trade-offs we're making when we choose this over that. Even though this is more important, we know we have to do this that first. And those are the types of conversations that we can only have if we have strong product leadership, a strong product owner on our product, who's able to communicate and express that strategy and direction effectively.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is a sprint goal?",
    "Description": "Explains the sprint goal in Scrum as a clear, tactical objective for each sprint, guiding team focus, enabling actionable feedback, and linking daily work to product vision.",
    "ResourceId": "qXsjLuss22Y",
    "Url": "https://www.youtube.com/watch?v=qXsjLuss22Y",
    "Date": "2023-05-30T11:00:40Z",
    "Captions": "So a product goal sits somewhere between the Sprint goal and the product Vision. I think of it as an intermediate strategic goal. Right, it's not as far away as Vision; it's closer, and its purpose is to connect the people that are doing the work with where is it we're going. \n\nIf you look at Sprint goals and Visions, it's usually very difficult to connect those two together because everybody, every single person on your team, works better if they understand how their work that they're doing every day contributes to the overall strategic goal of the product."
  },
  {
    "Title": "How do you select the most valuable items for the sprint backlog?",
    "Description": "Learn how Agile teams collaboratively select high-value sprint backlog items by balancing business needs, technical priorities, and stakeholder input for effective sprint planning.",
    "ResourceId": "uCyHR_eU22A",
    "Url": "https://www.youtube.com/watch?v=uCyHR_eU22A",
    "Date": "2023-05-30T07:00:18Z",
    "Captions": "Foreign is how do you select the most valuable items for the Sprint backlog? If you take a look at this, the Scrum Guide, it will just say you magically select the ones you need, right? You kind of craft a Sprint goal and then magic fairy dust is sprinkled on it and you get a list of things. But the reality is a lot more complicated than that. The reality is that you have to take information from the business, the business context, the product owner's context and their understanding of the market and the business context, the engineering context, what's happening in the product, what's going on there. You bring all of that together and then you figure out what your Sprint goal is going to be. That Sprint goal then at least shapes the initial set of work you're going to bring into that Sprint.\n\nSo, the most important things could be the things at the top of your product backlog, but I would say that the order of the product backlog informs but does not control the work that the developers accept, pull into the Sprint. Because there might be other considerations that take priority, right? This is the most important thing we need to work on. Yeah, but in order to do that, we've got this big chunk of architectural stuff we have to do first. Therefore, we're going to focus on the next most important piece of value and this architectural stuff so that next Sprint we can hopefully take on this most important thing, right? That might be more considerations for that. So, it has to be carefully thought out and by the whole Scrum team. \n\nSo, the product owner needs to work closely with the developers. The developers work closely with the product owner to figure out what are we going to take into the Sprint. And it's not always the most important thing in the product backlog. Thanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is a product vision?",
    "Description": "Explains product vision as a long-term guiding goal that defines a product’s desired future state, aligning teams and inspiring direction beyond short-term objectives.",
    "ResourceId": "oiIf2vdqgg0",
    "Url": "https://www.youtube.com/watch?v=oiIf2vdqgg0",
    "Date": "2023-05-29T14:00:36Z",
    "Captions": "Question is, what is a product division? I feel like a product vision is really just direction. It's what's our currently understood end states that we're trying to achieve. What's the outcome that we're trying to achieve at the end of this product cycle? So we're looking pretty far ahead. We're probably looking much further than a product goal, definitely much further than a Sprint goal, and we want to see what would it look like at the end if we were successful."
  },
  {
    "Title": "What is a Sprint Backlog?",
    "Description": "Explains the Sprint Backlog as a transparent, flexible plan in Scrum, combining goals, tasks, and strategy to help teams stay focused, adaptable, and successful in Agile work.",
    "ResourceId": "T-K7HC-ZGjM",
    "Url": "https://www.youtube.com/watch?v=T-K7HC-ZGjM",
    "Date": "2023-05-29T12:01:04Z",
    "Captions": "So the question is, what is a Sprint backlog? According to the Scrum Guide, a Sprint backlog is kind of three things together. The first is the Sprint goal. The second is the selected backlog items, and the third is a plan to complete them. Some kind of plan for those three together is the Sprint backlog.\n\nMy perspective is that the Sprint backlog is our transparency of the present. Right? It's how do we know what we are working on just now? How do we know where we are in our progress towards our current Sprint goal and ultimately our overall product goal?\n\nUm, so the Sprint backlog is made up of all of the things that we're working on this Sprint, but it's very important that the Sprint backlog isn't 100% to do with the Sprint goal. If we always have our Sprint backlog must be 100% to do with our Sprint goal, then what do we do with all those other things that we need to do over time? Perhaps we've got some refactoring, perhaps we've got some architectural work we have to do, perhaps we've just got some bugs to fix. Do we have to have a bug fixing Sprint? Right? That's where that dysfunction comes from.\n\nSo what you do instead is your Sprint goal encompasses some of your Sprint backlog. This is the thing that you commit to, the thing that you're definitely, definitely going to try really hard to achieve. Right? Because that commitment, try really hard to achieve, that's the thing you're definitely, the thing you'll talk to your customers about, talk to your stakeholders about, engage with them on that topic. And then there's a bunch of other things that you're going to bring into the Sprint that are perhaps nothing to do with the Sprint goal. You might have some refactoring work, you might have some technical debt you want to go fix.\n\nUm, you might have, here's some stuff that we haven't automated in a while and we want to go back and fix that up. Perhaps you've got, oh, the build's taking too long, and we really need to go re-engineer that thing so that it's faster and our engineers know quicker that something's wrong. That's all work that needs to be done that doesn't fit within a Sprint goal because a Sprint goal is always talking about what the customers need, what the stakeholders need, what are we trying to deliver for them.\n\nThe rest is business as usual, right? Stuff we have to do all the time, so that's included in that story. So try and avoid having a Sprint goal that is so big that you can't achieve it. Right? Any team that is working towards a Sprint goal and then they can't achieve it is not going to be happy. Right? Hopefully, they're not going to be happy. I'm not happy that I wasn't able to achieve the thing that I committed to try and achieve to the customers. That wouldn't make me happy.\n\nWhat if the team are in the position of doing that Sprint after Sprint after Sprint? They're not delivering because the Sprint goal is always too big. It's complete these 10 things and you only get six of them done, so we failed. Or it's do this big thing and we got 90% of the way, so we failed. Right? If we're constantly failing, you're going to have an unhappy, depressed team, and unhappy, depressed people don't make good products. They don't make good decisions. They tend to not give a crap about what it is you're building anymore at some point, and we don't want to go there.\n\nSo create, set them up for success by having a Sprint goal that has a narrower focus. Right? Not the whole Sprint, just part of the Sprint, so we know we can achieve it. And then add other things that are much more flexible. Right? Whether we do half the refactoring or all the refactoring is kind of irrelevant as long as we do some of it and make progress.\n\nWe've got that Sprint goal, and don't be afraid to change what you're working on during the Sprint. Right? You can accept new work into the Sprint. That's the other reason you have that flexibility. Right? You have that Sprint goal that's smaller, so you can bring other work into the Sprint. You can change what you're working on, and we can respond to the needs of the business, the needs of the customer, the needs of the market much more quickly. That's what a Sprint goal is.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Mastering Sprint Planning: Key Principles for Agile Success",
    "Description": "Learn essential principles for effective Sprint planning in Agile, including understanding the product backlog, setting clear goals, and fostering true team collaboration.",
    "ResourceId": "uQ786VBz3Jw",
    "Url": "https://www.youtube.com/watch?v=uQ786VBz3Jw",
    "Date": "2023-05-26T14:00:37Z",
    "Captions": "So I guess I guess the number one tip for effective Sprint planning is make sure everybody on your team already understands what's in the product backlog, what's likely to be brought into the Sprint as much as possible. Right, there's all I put a lot of caveats in there. I did put a lot of caveats in there, did it deliberately because again there could be surprises, there could be things you don't know that you discovered during Sprint planning. There could be all sorts of reasons why you have to deviate from the happy path. But the happy path is that number one thing for making you as effective as possible. As much as possible, the entire team should understand the things that are in the product backlog before they bring them into the Sprint. That would be my number one tip for Sprint planning.\n\nIf I was to bring in a number two tip, which I'm gonna, then it would be that have a clear, well-understood product goal as well. Right, what is the context within which we're making decisions? That's really the purpose of the product goal, right? We're making holistic decisions during Sprint planning about what direction we're going to take the product in next. Right, and a clear understanding of the product goal is key to that understanding. It's key to being able to effectively or make those choices as effective as possible. How do we make more of the right choices, less of the wrong ones? We need more understanding, we need more visibility and transparency of the strategic direction of the product, the current tactical direction of the product, or intermediate strategic direction, which is the product goal. But also, that's how we craft the Sprint goal, which is the next tactical thing we're doing in order to reach our intermediate strategic goal.\n\nSo having that clear and making it as transparent as possible, everybody on the team needs to understand it. The product owner needs to understand it, and its impact. Stakeholders need to understand it as well, right? Otherwise, you're going to get to the end of the Sprint and you're gonna have unhappy stakeholders because you went in the direction that they didn't think you were going or didn't understand you were going. Right, don't do that.\n\nAnd if, so yeah, well, if teams don't or aren't able to do those two things, they're pretty much screwed. You're not gonna build great products, right? Unless you actually understand where you're going. I think everybody should look up \"team\" in the dictionary. Everybody should have to look up \"team\" in the dictionary, right? It means a group of people working together towards a common goal. If there's no common goal, there is no team. If you have a list, if your Sprint goal is a list of things, you're not a team. You're just a group of people who pick some stuff and happen to discuss it together. That's not a team. You're not working together towards a common goal.\n\nSo make sure that you have Sprint goals, you have product goals, and that they're not just lists of things, right? And make sure you have it at least for Sprint planning.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is the best application of Scrum in the world?",
    "Description": "Highlights how Microsoft’s Azure DevOps team used Scrum to transform their workflow, cut build times from 20 hours to 3.5 minutes, and deliver greater customer value.",
    "ResourceId": "mkgE6prwlj4",
    "Url": "https://www.youtube.com/watch?v=mkgE6prwlj4",
    "Date": "2023-05-26T07:00:16Z",
    "Captions": "So what is the best application of Scrum in the world? I don't think I could mention the best, but the implementation that I respect the most is probably the Azure DevOps teams at Microsoft. \n\nUm, they took a waterfall product that they delivered once every two years with significant amounts of technical debt and over eight years, uh, moved it towards this, uh, uh, club. They closed the chasm; they were able to build a product that really resonated with their customers. \n\nAnd they were able to, um, go from, man, it used to take them 20 plus hours to build their product, and they got it down to three and a half minutes. That's an application of effectiveness."
  },
  {
    "Title": "What is a sprint goal?",
    "Description": "Explains the sprint goal in Scrum as a clear, tactical objective for each sprint, guiding team focus, enabling actionable feedback, and linking daily work to product vision.",
    "ResourceId": "JVZzJZ5q0Hw",
    "Url": "https://www.youtube.com/watch?v=JVZzJZ5q0Hw",
    "Date": "2023-05-25T14:00:20Z",
    "Captions": "So the question is, what's the most common mistake or mistakes in Sprint planning? Let's start with the purpose, right? \n\nUm, Sprint planning's purpose is to plan the Sprint. Sounds reductive, right? But this purpose is to plan the Sprint. \n\nUm, what I would expect to see happen there is that we're going to walk into Sprint planning with an ordered, well-understood product backlog as input. We're probably already going to have an idea of what your Sprint goal is going to be, right? Because you know what your product goal is going to be. You've probably just discussed it at your review with your stakeholders and what's next, right? \n\nUm, and the team probably already has an understanding of all the other work that they're going to have to bring into the Sprint, as well as working on the Sprint goal. \n\nSo then the purpose of the Sprint is to decide what it is we're doing, how much we think we can do, um, and what does that look like? \n\nSo one of the big mistakes that teams make is not having an ordered, understood product backlog walking into Sprint planning. It is the fundamental mistake that almost every team that I work with runs into at some point. And that's that they're taking on work because they're told to take on work, not because they actually understand that work. \n\nIf you're a good indication of this, it's if your team is sitting doing planning poker during Sprint planning, you're doing it wrong. You should not be sitting doing planning poker like, \"We don't understand this thing.\" What is it? That's too late. That's far too late. If you walk into Sprint planning and you pull something off the product backlog and you're looking at it and the team has never seen it before, they've got no clue what this thing is, and they suddenly realise that you need a firewall change and all ops take six weeks to implement a firewall change, you're just screwed already, right? You can't bring that into this Sprint. You need to know about that six weeks ago. That's what refinement's for. \n\nRefinement is where you push off the understanding of the work, any estimation you want to do, although estimation's not required by Scrum, right? Sizing, right? Or the sizing you're going to do, the understanding of what's in your product backlog, all comes before Sprint planning. And when you walk into Sprint planning, it's a case of planning the Sprint, not planning all the stuff that you should have planned already before you got there, right? \n\nSo that's one of the biggest mistakes that I see teams making is not already understanding stuff. I'm going to caveat and say somebody will say, \"But what if we just received feedback from the stakeholders at Sprint review and there's a bunch of unknown stuff that comes into Sprint planning?\" Awesome! We're going to have a long Sprint planning this Sprint, right? That's where we might see planning poker or other estimation techniques or whatever you need in order to gain understanding because some surprise happened, right? \n\nThere was a surprise, and we need to deal with that surprise. If every Sprint is a surprise, they're not doing it right, right? You're absolutely not doing it right. You need to minimise the chance of surprise. There are some products out there where they get more surprises than other products. That's cool, right? Roll with it. It's what works best for you. You're trying to maximise your effectiveness as a team so we maximise the value that we deliver to the customer. And for that, we need to understand the work that we're doing. We need to understand, as best we can, the work that is coming towards us. \n\nSo that when we get into Sprint planning, we can have a conversation about what we're working on this Sprint, right? That's what we're working on this Sprint. What comes into Sprint planning ends up in your Sprint backlog, and that's what you're going to do. \n\nBut during every Sprint, you are also working on refinement. You're also refining things in the product backlog. You're also gaining more understanding of things that you don't know yet. \n\nSo when you're planning your Sprint, you also need to carve out how much time do we need to spend understanding the surprises and the unknown in the future so that the next Sprint isn't going to be on yet another surprise and the Sprint after that isn't going to be yet another surprise. \n\nOkay, that's why doing too much is another thing. Taking on too much in the Sprint, right? Because if you take on too much in the Sprint, you're like, \"Oh, well, we don't have time to do all this refinement,\" right? \n\nBecause we're doing all this stuff and we've taken on too much and we're really struggling and we're having to cut corners. And then we get to the next Sprint planning and we're like, \"Oh, we don't understand anything that's in our product backlog.\" Okay, we're screwed again. Okay, we're going to do the same thing again, and it's like a death cycle. You also find that teams that end up in that position often don't meet their Sprint goal. So now they're unhappy that they've not met their Sprint goal because that's supposed to be a thing, right? \n\nSo you've got a team that continuously and repeatedly is unable to meet the things that they've been asked to commit to every single Sprint. How happy do you think that team is going to be? Not happy at all, right? \n\nDo happy, successful teams make great products, or do sad, unhappy teams make great products? I would suggest that sad, unhappy teams do not make great products. So you don't want sad, unhappy teams. So stop creating them. Stop building a situation right here where you have these sad, unhappy teams because they're continuously and repeatedly unable to meet the expectations that they're setting for themselves, but other people are setting for them as well. \n\nStop doing that. That's really bad, right? I mean, that's Sprint planning. Sprint planning is supposed to set that purpose. \n\nUm, set the purpose for the Sprint. Why are we doing this Sprint? What are we going to do? How are we going to do it, right? And you've already failed if you walk into the Sprint and you don't know the answer to most of those things already, right? Other than surprises, right? Which I'm fully accepting you could walk into a Sprint and, uh, a great example of that is imagine you were working on the Microsoft Teams team, right? Building Microsoft Teams, and you walk into your first Sprint planning after lockdown from COVID, and you're told immediately that we've just gone from, I don't know, 150,000 simultaneous users to 500,000 simultaneous users practically overnight and that our systems are starting to crumble, right? \n\nThat's where you throw out everything you thought you already knew and you're going to start again. And perhaps they spent 90% of that Sprint refining what's next and only a little bit working on the stuff they can. \n\nRight? Sprint planning is all about figuring out what it is you need to do next. But don't leave it too late. Get your refinement in there first. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Is a Product Owner an Agile Project Manager?",
    "Description": "Explains the key differences between a Product Owner and an Agile Project Manager, highlighting their distinct roles, objectives, and focus within Agile teams.",
    "ResourceId": "HcoTwjPnLC0",
    "Url": "https://www.youtube.com/watch?v=HcoTwjPnLC0",
    "Date": "2023-05-25T07:00:06Z",
    "Captions": "Is a product owner an agile project manager? No. I mean, the agile project manager is interested in a successful project. A product owner is looking to have a successful product. Right? So, a project within a product might be unsuccessful, and we still have the overall success of a product. And a project may be successful, and we still unsuccessfully deliver value to our customer. \n\nSo, a product owner has that laser focus on maximizing the value of the work done by the team, which may or may not fulfill projects."
  },
  {
    "Title": "What is Sprint Planning?",
    "Description": "Sprint planning is a collaborative session where teams define and align on goals, tasks, and priorities for the next sprint, ensuring clarity and focus for effective delivery.",
    "ResourceId": "nMkit8zBxG0",
    "Url": "https://www.youtube.com/watch?v=nMkit8zBxG0",
    "Date": "2023-05-24T14:00:36Z",
    "Captions": "So the question is, what is Sprint planning? There's a more important question there: why is Sprint planning? But what is Sprint planning? It's a time where we get together and we plan what we're going to do over the next, whatever Sprint length we have, over the next Sprint—two weeks, three weeks, four weeks, three days, whatever your Sprint length is. \n\nWe're going to plan the Sprint, right? So Sprint planning is about planning the Sprint. Kind of makes sense. But it matters because it gives us that moment, that check-in, which could be short. It could be a tiny Sprint planning because everybody already knows where we're going, already understands what we're going to take on. We're going to get in a room, five minutes later we're out, we're done. Or it could even be a check-in, an asynchronous check-in over Slack or Teams, right? Do we all understand where we're going? \n\nThe point is the understanding. Do we all understand what we're trying to achieve this Sprint? Do we all understand what's involved in it, what direction we're going, what needs to happen in order to get there? That's the purpose of Sprint planning. \n\nA lot of people come along and say, \"Well, you know, we do Kanban, so we don't do Sprint planning.\" My question is, when do you decide what work you're going to pull into the Sprint? How does that work get onto that list of things, that list of options, right? That the team is able to select from. That is, in effect, Sprint planning, whether you're involved in it as the team or not, right? That is Sprint planning. \n\nAnd wouldn't it be better if you were involved in it? Effective Kanban teams are normally involved in it, right? They've got a say in what ends up on the options, what goes in there, what's ready to pull into the Sprint. That's Sprint planning, right? You've got refinement, which comes before Sprint planning, which is how—like building that list of options. \n\nThen Sprint planning is really about just deciding what is the next list of options. From a Kanban perspective, from a Scrum perspective, the same thing is true. You have refinement, which is all the work that you do that's not on the current, you know, adding features to the product. Then Sprint planning is about now we understand all of that stuff that we would like the product to do that it doesn't do yet. \n\nWhat are the things that we need to do in the next two weeks? We're planning, right? In the next two-week iteration, or that we think we need in the next two-week iteration that we're going to pull into the Sprint. And that might be, you know, here's our Sprint goal, here's what we're going to try and achieve this Sprint. Like, this is the communication goal, the thing we're going to commit to. \n\nIf you're doing Scrum, you commit to the Sprint goal, right? But that might only be a small percentage of the work that you need to do in the Sprint because we've also got that, you know, we had some live site incidents and we've got a large refactoring exercise of our architecture that's going on, and we're doing a little bit of that every Sprint. So we're spending 20 percent of our time every Sprint doing that. \n\nWe have some technical debt that we're working through that we've discovered, and we're going to spend 10 percent of our time on technical debt. We've got some bugs, some things that customers have reported, so we might have some things that they've reported, some defects, some bugs, actual errors in the product. We're going to bring some of them into the Sprint every Sprint, right? Otherwise, you end up with a dumbass bug-fixing Sprint, right? \n\nWe're going to do a little bit of everything all the time to maintain our product. Sprint planning is about deciding what all of those things are and what the percentages are that we think we're going to be able to take on this Sprint. Right? So you don't want your Sprint planning to say, \"Oh, we're going to spend 100 percent of our time on our Sprint.\" That would be silly because what happens when something happens in the product, right? There's a production incident. Well, now we're screwed, right? \n\nOr somebody comes running in from the business saying, \"I know you're working on all this stuff, but this has happened, and this is the most important thing to us right now.\" If we don't have some—what's it called when you make it bigger than it is? Hyperbole, right? If we don't get this done by Thursday, we're all out of business and all out of a job, right? Do we just go, \"No, I'm sorry, we've planned our Sprint, we can't take that,\" or do we create a system within which we can have those conversations? \n\nWe can see, \"Well, yeah, that sounds really important, let's bring that into the Sprint.\" Or, you know, also a customer reports some little bugs, and the customer says, \"Can you please get them fixed because they're just annoying, and they're annoying a bunch of our users?\" Yeah, sure, let's fix them, let's bring them into the Sprint, let's get them fixed. \n\nHow do you create that urban flow of the work that you're doing while still maintaining direction and strategy, right? So you've got the product goal, which is your overall, what's the next big thing we're working on, but the Sprint goal is what's the next little thing we're working on, and that's what we commit to, and that's what we decide at Sprint planning. \n\nSo it creates that cadence of success, cadence of achievement, right? What are we trying to achieve this Sprint? Yeah, we've done these hundred little things, but also we did this, which the customer was really looking forward to, that we had conversations with the customer about, that we crafted into a Sprint goal. That's one of the things that we do at Sprint planning. \n\nI feel like, regardless of whether you're doing a little Kanban or big Scrum, you're really working towards the same idea and can use the same tools and techniques. There's also big Kanban, the Kanban method, which has its own structure and process and rules. That's its own thing. \n\nBut if you're looking at Scrum and Kanban, you definitely want Scrum and Kanban. Scrum is about planning, which is why this starts with the Sprint planning. It's all about planning. Kanban is about delivery. So bringing them both together, and you actually get the best of both worlds. You get that planning cadence, connecting with customers, understanding what we're doing. \n\nSprint planning is the thing that sets the tone for the rest of the Sprint. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—Agile, Scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "From Control to Collaboration: How Project Managers Can Embrace Agility and Thrive",
    "Description": "Explores how project managers can shift from control to collaboration, adopt agile mindsets, embrace uncertainty, and foster team empowerment for project success.",
    "ResourceId": "QpK99s9uheM",
    "Url": "https://www.youtube.com/watch?v=QpK99s9uheM",
    "Date": "2023-05-24T07:00:23Z",
    "Captions": "And add your project manager is in my book tends to be a little bit of an oxymoron, right? Um, they don't really go together. Um, while we can sprinkle some agility into project management, unless a project manager is willing to divest themselves of that understanding that they know stuff, right, and accept and embrace complexity, you're always going to have the same issues. So while a project manager may make a good scrum master, quite often all they make is an agile project manager."
  },
  {
    "Title": "What is a product owner?    Why are they essential?",
    "Description": "Explains the product owner's role in Scrum, focusing on accountability for maximising value, aligning teams with strategy, and ensuring unified direction for product success.",
    "ResourceId": "XdzGxK1Yzyc",
    "Url": "https://www.youtube.com/watch?v=XdzGxK1Yzyc",
    "Date": "2023-05-23T14:00:19Z",
    "Captions": "So the question is, what is a product owner? And that is again an interesting question because the product owner is an accountability, so not a job title, right? So I wouldn't expect to see somebody whose job title is product owner, and I wouldn't expect to see somebody walking around going, \"You know, I'm the product owner.\" But the product owner accountabilities are something that somebody in your organisation picks up, and it's being accountable for maximising the value of the work done by the Scrum team.\n\nSo that doesn't mean they're called product owner; it doesn't mean that they only focus on product ownership, right? They probably have other focuses as well, but it also means that other things need to be true in order for that to be successful, right? Maximising the value of the work done by the Scrum team is not ordering a product backlog, right? That's a small mechanical element of that accountability.\n\nIn your context, right, your corporate context, your organisational context, you're going to have to figure out what does product ownership mean in our business, right? How do we maximise the value of the work done? Do we need to understand the market? Do we need to be plugged into an understanding of what's happening in the market and what direction it's going? Do we need to be plugged into an understanding of how people are actually using our product and interacting with it in different ways? Do we need to be plugged into what our customers are saying, right? That's another piece of information that might be helpful.\n\nAnd the answer is you have to plug into all of that and much more, right? The more understanding that the product owner, the person who's picking up the accountability of the product owner, has of what's going on in the world that may impact on what it is that we're working on, what it is that we're doing.\n\nSo the product owner is absolutely essential as they kind of set that tone for product leadership, for strategic direction of the product, for building something that really resonates with the market. And if it resonates with the market, that means it's resonating with your customers, that your stakeholders understand what it is you're working on, what they're doing, that everything is being communicated openly and transparently so we all understand where we're going. We're all going in the same direction. These are all things that that product owner, that accountability of the product owner, is meant to represent.\n\nNow, in Scrum, the product owner is one person, not a committee, although they may chair a committee, right? I thought that was an interesting caveat. But in the world, I see lots of different types of product owners. I see part product owners that are from the customer. If you're a professional services company, your customer is a product owner. You might have a proxy product owner that liaises with that customer. You might have somebody on your team who is the product owner who was a software engineer who is now becoming a product owner. You might have somebody who was a Scrum Master who's now a product owner. You might have nothing at all, right? And there's a big gap. And how can you be successful if we're not all going in the same direction? That gap is why the product owner is so essential.\n\nYou need to, you need the way we as humans organise around solving a problem is we understand that problem. We work together towards solving that problem, right? We work together towards a common goal. And part of the essential nature of the product owner is to set, communicate, understand, set and communicate those common product vision, strategy, goals that we're going towards so that everybody within the bounds of that product, who cares about that product, can get behind it, whether those people are customer stakeholders or the people who are actually building the product. How are we all working together towards a common goal, a common vision, a common direction?\n\nI mean, it's so common that you see teams and products and customers, like the team delivers up something that the stakeholders are like, \"What the heck is this?\" and customers are like, \"We don't like this.\" We're not in tune; we're not all working together towards a common goal. And that's really the power of the product owner. That's why they're essential.\n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why does project management not work in complex environments?",
    "Description": "Traditional project management struggles in complex environments due to high uncertainty and variance, making adaptive approaches like Agile more effective for such situations.",
    "ResourceId": "lvg9gSLntqY",
    "Url": "https://www.youtube.com/watch?v=lvg9gSLntqY",
    "Date": "2023-05-23T07:00:30Z",
    "Captions": "So project management was designed to plan work that we understand or that has low variance at least right let's let's call it 10 to 15 maximum variance in expected outcome to actual outcome.\n\nBut in complexity the definition of complexity is that more is unknown than none right so it's at least more than 50 percent not understood you don't know 50 of what's going to happen those are the surprises that creep in as you're building products.\n\nSo project management doesn't work in complex environments because it doesn't handle that level of variance."
  },
  {
    "Title": "Unlocking Team Potential: The Essential Role of a Scrum Master in Agile Success",
    "Description": "Explains how a Scrum Master empowers Agile teams by bridging business, technical, and organisational needs to boost effectiveness, collaboration, and delivery outcomes.",
    "ResourceId": "wjYFdWaWfOA",
    "Url": "https://www.youtube.com/watch?v=wjYFdWaWfOA",
    "Date": "2023-05-22T14:00:41Z",
    "Captions": "so the the the question is what is a scrum master and I think that's really interesting because I I think of a scrum Master as a guide right so so perhaps scrum guide would be a better name however that's taken by something else right but they they they're there to um they're they're somebody with with deep technical understanding of what agile is the the the the different agile practices of empiricism of lean I'll lean agile practitioner right and they're there to help guide the team so that they have the knowledge tools and skills to make the best decisions they can within the context that they're making those decisions\n\nso it really helps if the the the the scrum master has understanding of that context right I usually think of it as there's three contexts that this scrum Master should understand there's the the business context right because they've got to help the the product owner build the right product and they've got to help the business understand why they need scrum in the first place like what does it mean to them he has to be able to speak their language\n\num she also needs to um really understand the technical domain of what it is the team is doing right what are they doing why are they doing it if it's this is if this is a software context then I would expect them to understand what devops is how devops functions why devops what are the different tools and practices that a team could be using to help improve the way they do things because not everybody knows right that's uh not true and the other one is organizational change context so understood standing uh beta codex understanding taylorism understanding um uh follett's work understanding how we can organize around solving particular problems so that they can have those explanations and conversations with the organization and with leaders ship and with teams and people on the ground and people high up in the clouds right we've got to have the conversations everywhere in order to have everybody understand why is it that we're moving in a particular direction\n\nand I think all of that stuff being missing is why we're seeing a lot of uh scrum Masters being let go in organizations because they're not able to demonstrate to the organization the value that they're providing because they are absolutely essential to uh to a team in an organization's ability to deliver\n\nit may be that you you you you work on a team and you're thinking oh but but we don't have a scrum master and we're doing great right you probably have what I would call a virtual scrum Master right you've probably got a a Gestalt of the team understanding within the body of the people doing the work of the business of the organization of change of the product of everything and you're able to create that idea of a scrum Master without it being physically embodied in a person but there are lots of teams out there who who don't have that capability and there'll be lots of teams in your company who don't have that capability you are in fact unusual in your ability to have all of that understanding and knowledge and content and be able to create that entity of the virtual entity of the scrum Master most teams really struggle\n\nso the scrum Master is essential to helping um teams focus on the things that improve their effectiveness because if a team is more effective everybody gets more done everything is better other teams even focusing on the right things right if you if you are working with software teams if you are a software team then shortening that feedback loop between uh coming up with an idea and all the engineering tools you need to get it into production as quickly as possible is something that's going to improve your effectiveness at delivering value to the to the customer\n\nare you there yet how do you get there how do you even know that you need to get there you need the scrum master that has that knowledge has that understanding and that knowledge and understanding is critical to a team being as effective as possible\n\nthanks for watching the video If you enjoyed it please like follow And subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility"
  },
  {
    "Title": "What is Project Management?",
    "Description": "Explains project management’s origins, key tools like the Gantt chart, and its evolution into a vital method for planning and delivering work in today’s business world.",
    "ResourceId": "jmU91ClcSqA",
    "Url": "https://www.youtube.com/watch?v=jmU91ClcSqA",
    "Date": "2023-05-22T07:00:14Z",
    "Captions": "Project management is a set of tools and techniques developed during the Industrial Revolution to help manage factory workers and create and deliver goods from factories to customers. That's ultimately where those practices came from. The Gantt chart was developed in 1905 for IR 1906. It's a long time ago, so project management has done a lot of work to make itself more modern, which has helped. But ultimately, project management, the tools and techniques in project management, are designed to help people that know everything that they're going to do plan the things that they're going to do."
  },
  {
    "Title": "What is Scrum?",
    "Description": "Scrum is a framework that helps teams organise and adapt to complex, changing tasks by enabling collaboration and shared goals in uncertain environments.",
    "ResourceId": "o-wVeh3CIVI",
    "Url": "https://www.youtube.com/watch?v=o-wVeh3CIVI",
    "Date": "2023-05-19T07:00:31Z",
    "Captions": "What is Scrum? Scrum is a social technology that allows groups of people to organise around a common purpose. \n\nIt's specifically designed to work in complex space, and that may be a bit of a weird term. So complex is when you know less at the beginning than you understand while doing it, right? \n\nSo usually the things that you do are unrepeatable. You're doing different things all the time, stuff you've never done before. Whenever there's a huge variation in how long you think it's going to take and how long it actually takes, that's complex. \n\nAnd Scrum is specifically designed to operate in that space, or at least the edges of that space."
  },
  {
    "Title": "What is a product backlog?",
    "Description": "A product backlog is a prioritised list of features, tasks, or improvements that guides Agile teams in planning, collaboration, and delivering product value efficiently.",
    "ResourceId": "_Eer3X3Z_LE",
    "Url": "https://www.youtube.com/watch?v=_Eer3X3Z_LE",
    "Date": "2023-05-18T07:00:16Z",
    "Captions": "So a product backlog is really very misunderstood. A product backlog is just a list of things that we would like the product to do that it doesn't do yet. That's it. It can be super short. Here's one thing that I would like the product to do that it doesn't do yet; that's a product backlog. \n\nHere's 20 things that I'd like the product to do; that might be a product backlog. Here's something that's not a product backlog: here's 5,000 things I'd like the product to do. That is absolutely not a product backlog; that's just a dumping ground. That's a dump, right?\n\nOne of the key things that makes a product backlog a product backlog is that everybody—stakeholders, product owner, and team members—understand everything that's in there. And if they don't, it's not a product backlog."
  },
  {
    "Title": "What is a product vision, and why does it matter?",
    "Description": "A product vision defines the shared direction and purpose for a team, aligning efforts and ensuring everyone understands the goals and their role in achieving them.",
    "ResourceId": "Xs-gf093GbI",
    "Url": "https://www.youtube.com/watch?v=Xs-gf093GbI",
    "Date": "2023-05-17T14:00:17Z",
    "Captions": "That's a great question. What is a product vision and why does it matter? \n\nIf you were getting together with a bunch of people and you were gonna go do something and nobody has any clue what it is you want to do, they have no clue where they're going. \n\nWhy would you think they would all be able to organise together to go in the same direction? \n\nWhether you're organising a pub crawl or you're organising your business around the product, if there's no vision, there's no understanding of everybody involved in where we're going and why. \n\nThen there's no way for those people to focus their skills and knowledge and capability to help you move in that direction. Right? \n\nThey're all going to come up with their own story of which direction they want to go and they're going to leverage their skills, knowledge and expertise in going in that direction, and it might not be— it may be antagonistic to the direction that you want to take things. \n\nSo really, a product vision— I don't think there's any one thing that is a product vision, but I would define a successful product vision as everybody working on or with the product understands where we're going, why and how the things that they're doing every day contribute towards that overall success. \n\nThat's a product vision and that's why we need one. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else— agile, scrum or DevOps— then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "#1 tip for a new Scrum Master",
    "Description": "New Scrum Masters should start by thoroughly reading the Scrum Guide to understand Scrum principles, roles, and practices, forming a strong foundation for Agile success.",
    "ResourceId": "cR4D4qQe9ps",
    "Url": "https://www.youtube.com/watch?v=cR4D4qQe9ps",
    "Date": "2023-05-17T07:00:14Z",
    "Captions": "So number one tip for a new scrum master I think is going to be read the scrum guide. You're a scrum master, you should understand scrum. I find that there's a lot of scrum masters out there who haven't read the scrum guide, that don't understand scrum. They don't understand what they're expected to do and the scope of it. But the scrum guide is just the start. You need to understand the principles behind scrum, of empiricism and collaboration, and really get to grips with those ideas."
  },
  {
    "Title": "Unlocking Startup Success: Why Every Entrepreneur Needs to Master Product Management Value",
    "Description": "Explains why mastering product management and focusing on customer value is crucial for startup success, with practical tips for entrepreneurs on vision, strategy, and growth.",
    "ResourceId": "9TbjaO1_Nz8",
    "Url": "https://www.youtube.com/watch?v=9TbjaO1_Nz8",
    "Date": "2023-05-16T14:00:07Z",
    "Captions": "I would definitely recommend the PSP Auto and entrepreneur. I invite the advanced PSPO as well, but that key focus on value from the PSPO and what add your product management looks like are all key things that an entrepreneur needs to bring into their way of doing things, their story of how things happen for them. Because usually, especially for entrepreneurs, their organisations are very small, especially at the start, and they're going to be fulfilling the role of product owner. They're going to set the tone for leadership and product management inside of their organisation. Even if later on they're handing that torch off to somebody else because they're being successful, they're making good decisions, and then they're getting a little bit bigger and they're able to hand that torch off, that torch needs to come with, \"Here's what we're trying to achieve, here's where we're going.\" Yes, we have really thought about value, and I think it's even more important for an entrepreneur because you want to get past that startup phase.\n\nI don't know what percentage of organisations fail; I don't know the exact percentage of organisations, startups that fail, but it's most of them, right? Most startups are going to fail, and one of the reasons that they fail is that they don't have that tight focus on value. They don't understand what's value, what's value to their customers, and they haven't had those conversations, written it down, understood it, discussed it. We have loads of tools in the product owner class that you can use as part of that story. How do I figure out what those things are? How do I think about those things in order to bring everybody in my team along with me and help us understand what it is we're trying to achieve?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Momentum",
    "Description": "Explains how momentum—team movement with clear direction—drives success in Agile product delivery, fostering collaboration, progress, and high performance.",
    "ResourceId": "5bgfme-Pspw",
    "Url": "https://www.youtube.com/watch?v=5bgfme-Pspw",
    "Date": "2023-05-16T07:00:02Z",
    "Captions": "Momentum is movement. Right? You're moving in a particular direction, and you have enough stuff moving in that direction that it's difficult to stop. Right? That, for me, is momentum. Like a ship. When a ship puts on the brakes, it takes 10 miles to stop. Right? \n\nSo, momentum, especially in product delivery, does... does everybody who's working with you understand the direction that you're going? So that they're going in that direction, and they're going to pull other people along with them who don't necessarily understand as well as some people do. \n\nSo, if you've got enough people moving in that direction in order to pull in the rest of the people and folks that you need. And this is true for, I'm building a product or I'm changing an organisation or..."
  },
  {
    "Title": "What is the one thing a PSPO course forces you to focus on?",
    "Description": "Explains how the PSPO course centres on understanding and defining value, highlighting its importance for Product Owners in guiding decisions and organisational success.",
    "ResourceId": "GIq3LZUnWx4",
    "Url": "https://www.youtube.com/watch?v=GIq3LZUnWx4",
    "Date": "2023-05-15T14:00:13Z",
    "Captions": "So the question is what's the one thing that a PSPO course focuses, uh, forces you to focus on? \n\nAnd that is 100% value. It forces you to think about what is value for your organisation. \n\nWhat different types of things or value? Because lots of people think of value as just money in my pocket, right? Which isn't necessarily the only forms of value that there is. And that very much doesn't resonate with public companies or not-for-profits. \n\nSo what are the different types of value that are there? And then what does value mean to us? \n\nAnd the interesting thing is that's also not something that I can go answer for them, right? This is product owner being, um, demonstrating leadership in their organisation. \n\nHow does your organisation decide what value is? And for most organisations, they have no idea whatsoever what value is. It's whatever that boss feels like today is what value is. \n\nSo as a product owner, how do you, um, define and decide what value is? Help express that inside of the organisation, help communicate that, and really become a product manager, right? You're managing that product, um, with a huge focus on value. \n\nAnd that value is the most important focus of the product owner class. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Discipline versus motivation?",
    "Description": "Explores the roles of discipline and motivation in Agile and Scrum, highlighting how both drive successful Agile transformation and sustained team performance.",
    "ResourceId": "sidTi_uSsdc",
    "Url": "https://www.youtube.com/watch?v=sidTi_uSsdc",
    "Date": "2023-05-15T07:00:21Z",
    "Captions": "Motivation is getting you to do, like deciding to do it. That's the motivation. \n\nAnd then discipline is how you do it. That's the way I think about those two things. \n\nMotivation is starting something, maintaining your progress on something. \n\nAnd then discipline is your work ethic for actually doing the work."
  },
  {
    "Title": "Redefining the Scrum Master: From Misconceptions to Empowering Leadership",
    "Description": "Explores common misconceptions about the Scrum Master role, highlighting the shift from tool admin to empowering leader who fosters team autonomy, growth, and self-organisation.",
    "ResourceId": "3YBrq-cle_w",
    "Url": "https://www.youtube.com/watch?v=3YBrq-cle_w",
    "Date": "2023-05-12T14:00:02Z",
    "Captions": "How will a PSM-2 class challenge your sub-assumptions the most? I think fundamentally, people's assumptions about what they think a Scrum Master is, what they think a Scrum Master does, and how they think a Scrum Master guides the team. The number of times that we have to hit on those myths of what people think Scrum Masters are, right? I mean, are Scrum Masters or Jira admins? That's a good one. \n\nSo, realising they're not a Jira admin, they're not there to solve the team's problems. Right? Get impediments out of the way of the team is apparently the Scrum Master's problem. It's like, oh no, they're there to cause the removal of the impediments, right? Which means they probably don't do the work themselves; they're helping the team do the work themselves and effectively doing themselves out of a job, right? You want to be invisibly present. That's a great phrase that I love from the PSM-2: being invisibly present, right? \n\nYou're there, you provide value, you help shape and guide the way people are organising around the work. But then, if you're off for two weeks, the work still happens. If you're away for two weeks, the retrospective still happens, the daily Scrum still happens because the people on the team understand the value that it provides rather than just being told to do it by the Scrum Master and having to turn up and be told what to do, right? \n\nThat, for me, is the biggest transition from Scrum Master into the advanced Scrum Master world. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What do people love most about the 4-day training format?",
    "Description": "The 4-day training format offers shorter, well-paced sessions with breaks, allowing participants to absorb content, reflect, and return with deeper understanding and questions.",
    "ResourceId": "3XsOseKG57g",
    "Url": "https://www.youtube.com/watch?v=3XsOseKG57g",
    "Date": "2023-05-11T12:00:02Z",
    "Captions": "So what do people love most about the four-day trading format? It's not two full days. I think that's what they love most, right? I don't have to sit in a meeting or in a room for eight hours. That just sucks. I feel like the four half days is quite a good intermediary format. I think there's a better format coming, which is either going to be four half days over two weeks or eight half days over eight weeks, right?\n\nBut I think the four consecutive half days gives you enough time to absorb the content, do a bit of reading, right? Think about what it is that we've been working on and then come back the next day with more, better questions. I think that for me is the core value of the four half days over the two full days. I actually still do two full-day classes, and I really struggle in them to pay attention the whole day, right? Because that's a long day. But also, to really understand and rock the content, you kind of need that gap.\n\nSo having that four hours and then you've got the full 24 hours gap and then another four hours does seem to add value to the class. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "No go zone for Agile consultants",
    "Description": "Explores the broader role of Agile consultants beyond coaching, highlighting the need for teaching, leadership, and driving real organisational change for client success.",
    "ResourceId": "ZnXrAarX1Wg",
    "Url": "https://www.youtube.com/watch?v=ZnXrAarX1Wg",
    "Date": "2023-05-10T09:30:14Z",
    "Captions": "Really common mistake that agile consultants make is just being cultures and being a coach assumes that the customer already knows and understands what they need to do differently in order to be successful and that is definitely not always the case.\n\nQuite often if you're consulting you need to teach you might even need to dictate right say do this differently and try it differently. You're definitely going to be giving options right you're definitely going to be suggesting different ways to do things and helping encourage those different ways and organizations.\n\nThe other way is going to make you more money because you're going to be there for longer but being a consultant is about helping the customer not just making money."
  },
  {
    "Title": "How did you come to be a preferred Scrum training supplier for Microsoft?",
    "Description": "Explains how strong relationships, dual expertise in DevOps and Scrum, and trusted referrals led to becoming a preferred Scrum training provider for Microsoft.",
    "ResourceId": "tUC5TainG2E",
    "Url": "https://www.youtube.com/watch?v=tUC5TainG2E",
    "Date": "2023-05-10T07:00:17Z",
    "Captions": "How did I become the third scrum training provider for Microsoft? I think there's a couple of things in there. The first one is I have a long-standing relationship with Microsoft. I've been a Microsoft MVP, most valuable professional in the DevOps space for 14 years. \n\nSo that also leads on to the second reason, right? Because people at Microsoft know me, but also I know Microsoft. I know the organisation. I know how they're in acronyms, right? They're very keen, like most organisations, they're very keen on their own acronyms. If you've popular phrases like \"let's take that offline\" and \"let's double click on that,\" where all the times I first heard of those were through Microsoft. \n\nSo just engaging with their product teams, their people on a regular basis has always been something I've done. And I'm seen as an expert in both spaces. It's actually quite unusual, I feel, to have somebody who's both an expert in DevOps and an expert in scrum and the agile space. That combination means that an awful lot of my customers are Microsoft's customers, right? Because they're using Azure DevOps, they're using Microsoft tools, and they hear about me through that. Then we start talking about agile and we have those conversations. \n\nSo when Microsoft asks its customers, \"Who do you go speak to?\" they might say me. And when their customers ask, have been asking Microsoft for years, \"How do I do this? How do I do that?\" well, maybe you need to go speak to Martin, right? So I get a lot of referrals from Microsoft. I get a lot of engagement that way. So it just, I guess, maybe seemed like a natural step to have that conversation. \n\nSo when Microsoft reached out to scrum.org and said, \"We want to speak to some trainers,\" I was on that list to go speak to them. In that meeting, just being able to have those conversations, right? To talk about what it is they're trying to do and know where they're coming from. That's part of that relationship that I already had with Microsoft, already understanding how they work and how they do things. \n\nAnd that's something that I try and build with every customer. Sometimes it's difficult because you don't work with everybody for very long, right? So building relationships is sometimes difficult when all they want is a single training class. But I have other customers that I work with constantly, and they keep coming back. \n\nI've been working with the Department of Work and Pensions in the UK for, whoo, seven, eight years, nine years maybe, and they keep coming back for more classes. What's more interesting in that engagement is they have to really struggle to get me to do the engagements for them. So they really want me to do it, right? Because of their procurement rules and how do you get the person that you actually want to do it to do it? And that's hard. \n\nI think that attests to the value that they are getting from the classes that I'm teaching. Some of those values might not be immediate or immediately apparent. It's not like people learn a new skill and suddenly they're magically able to do it. But it's in that long-term systematic engagement with a single customer, and they keep coming back. \n\nI'm speaking at their internal organisational conference this week. I'm doing two talks for them at their internal organisational conference. I speak at Microsoft conferences. I was just last week at the MVP Summit in Seattle, talking to people on the product team, engaging with them, giving them feedback on the product, becoming more known, right? You build those relationships, and that's really what it's all about. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Worst agile advice you've ever heard?",
    "Description": "Highlights why rigid rules in Agile and Scrum, like mandatory stand-ups, undermine flexibility and inclusivity, stressing the importance of adapting to team needs.",
    "ResourceId": "L6opxb0FYcU",
    "Url": "https://www.youtube.com/watch?v=L6opxb0FYcU",
    "Date": "2023-05-09T09:30:04Z",
    "Captions": "So one of the worst things I ever heard about in agile was actually when I was working in the US as a consultant in Seattle and I came in to help a team in an organization and they just fired their scrum master.\n\nWhat their scrum master had done was be very dogmatic and totalitarian and had decided that the daily stand-up, not daily scrum, but daily stand-up, everybody had to be standing up in it or they weren't doing scrum.\n\nAnd it just so happened that this team had a disabled person on the team in a wheelchair and the team had decided collectively to all sit down so they weren't towering over the person that was in a wheelchair.\n\nFor me that is absolutely the very purpose and power of agile that every team can do something differently and that scrum master sure deserved to be fired."
  },
  {
    "Title": "In WIP, less is more.  Why?",
    "Description": "Limiting work in progress boosts productivity by reducing multitasking, context switching, and bottlenecks, helping teams focus, finish tasks, and deliver faster results.",
    "ResourceId": "yEu8Fw4JQWM",
    "Url": "https://www.youtube.com/watch?v=yEu8Fw4JQWM",
    "Date": "2023-05-09T07:00:19Z",
    "Captions": "in work and progress less is more\n\nwow there's a lot of math to unpack there if you if you really want to go into it but but ultimately the the Mantra in kanban is is um a different way to phrase what you just said is stop starting work and start finishing work and it's the idea that the more stuff you have on your plate the more you're jumping between the things that you have on your plate\n\num and the more time you lose to Jumping between those things\n\num a great analogy that maybe only works for the Geeks out there is paging in Windows right you have to when you want to do another task you have to unload all of the information and contacts that you've got from the previous task and reload the next task and then continue doing that for a period of time and then you every time you swap you have to unload and reload that's why your computer goes mental and stops running when you try and get it to do many things because it's having to unload and reload all the different tasks and people are just the same our brains are just big computers if you give people too many different things to work on then they're they just get overloaded and aren't able to to function so the that matters not just for for projects right so if you there's a there's a book by Gerald Weinberg systems thinking book by Joe Weinberg that did a bunch of data and Analysis on um context switching and the cost of context switching and it's about 20 of time that you lose per additional thing that you have all they'll be up to I think if they analyze one to five projects and if you're working on five projects at once\n\nyou get about 20 of your time to split between those five projects everything else is lost for this paging right context switch and that's just as true for scrum teams in sprints when they have a bunch of random crap in their Sprint backlog right rather than focusing on one thing are you having a a Sprint goal and having focus and moving in One Direction if they just have uh 10 things they have to do\n\nthen you've got fragmentation and if they start too many of those things at once there's too many of those things in progress at once they've got more whip work in process then it starts to grind to a halt because they're struggling to switch between them struggling to get things done\n\num so less is always more smaller is always better in in engineering work in Building Products you want to do smaller things and you want to have less things on the Go at once and then things move through your system more quickly what's a great analogy for that I think of it like oh this is a terrible analogy maybe I'll maybe get shot at for this one but I I think of it like pipes right and marbles flow through pipes less effectively than water flows through pipes right because water's smaller molecules than marbles are and if you throw a couple of rocks in with those marbles big things it's potential to clog up the pipe right it might get stuck and then the marbles have to flow around the this rock when it gets stuck so then the amount of flow is smaller and that's the way I think about work flowing through the system of your team\n\nright if you've got things that are too big they can more easily get stuck and then once they get stuck everything else has to flow around it and it's a struggle right because you're trying to get rid of this big thing while you're doing these other things\n\nsmaller things are better right they flow through the system better\n\nso have smaller stuff have less stuff on the go and you'll get more stuff done\n\nthanks for watching the video If you enjoyed it please like follow And subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility"
  },
  {
    "Title": "One limitation of reading a book vs attending a course",
    "Description": "Reading a book offers knowledge but lacks real-time interaction, discussion, and collaborative learning found in courses, limiting engagement and shared understanding.",
    "ResourceId": "hB8oQPpderI",
    "Url": "https://www.youtube.com/watch?v=hB8oQPpderI",
    "Date": "2023-05-08T09:30:10Z",
    "Captions": "So what's one limitation of reading a book versus attending a course? \n\nUm, a book can answer your questions. That's a limitation. A book doesn't have a bunch of other people in the same position as you and saying, asking other and different questions that also might be of value to you as well as you're going through the content. \n\nUm, reading the book is great. There are lots of great books on agile. Um, I think the value in attending a physical class is that you're able to have those discussions, talk about the different ideas, share your opinion of those different ideas, and perhaps that will sway the people in the room or perhaps you'll be swayed by the counter arguments."
  },
  {
    "Title": "Mastering the Art of Product Ownership: Balancing Innovation, Customer Needs, and Team Dynamics",
    "Description": "Explores how product owners balance innovation, customer needs, and team collaboration, with insights on hypothesis-driven engineering and effective Scrum practices.",
    "ResourceId": "spfK8bCulwU",
    "Url": "https://www.youtube.com/watch?v=spfK8bCulwU",
    "Date": "2023-05-08T07:00:15Z",
    "Captions": "Why do I think the advanced PSPO is a perfect fit for entrepreneurs? Because it focuses on the things that entrepreneurs need to think about and maybe sometimes they don't.\n\nAre what are you focused on? What type of product owner, right? Or are you looking to be? What are the facets of the product owner that you need to reflect in order to have a successful product in a successful business? Quite often people believe that they just have to be the Steve Jobs type, right, and focus on innovation and doing something different. But that maybe doesn't—is that going to alienate your existing customers that are just looking for refinements and the features that they already have? Is that going to alienate your development teams who feel like we're always reaching for the new thing and never finishing the thing that we've got? Is that going to, you know, if you just focus on one of those facets of the product or stances of the product owner, then you're missing out on a whole bunch of other things that need to be done. You need balance, right? And I think that's really the core focus of the advanced product owner is not just to say, you know, yeah, you might be in this category. Where do you feel you are? Because we do have that conversation, right? Where would you put yourself in these six stances of the product owner that we're going to talk about in the class? But also, and talk about each of those stances and what they're missing from those stances. Because quite often product owners do a little bit of that thing, right? We talk a lot in the class about hypothesis-driven engineering, right? You don't necessarily—although data informs, but doesn't control the choices you make. You need to get that data, and how do you get that data? And how do you decide whether the feature that you're creating is actually valuable? Like, what numbers are you trying to shift, and how are you going to measure it? So that whole holistic focus across the product, across your customers, not just in innovation, but in customer focus, in collaboration, in doing deals with people, right? How do you collaboratively create those most amazing products? And that for me is the value of the advanced product owner.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "One thing a client can do to ensure a successful Agile consulting engagement",
    "Description": "Encouraging clients to embrace provocation and critical questioning helps drive mindset shifts, enabling more effective Agile consulting and lasting organisational change.",
    "ResourceId": "TZKvdhDPMjg",
    "Url": "https://www.youtube.com/watch?v=TZKvdhDPMjg",
    "Date": "2023-05-05T07:00:10Z",
    "Captions": "So one thing that a client can do to ensure a successful agile consulting engagement is to be prepared to be provoked. \n\nI think that's probably the most powerful thing that a consultant can do is provoke, push, nudge their customer in a different way of thinking, a different understanding, or even to just think about what it is that they're doing, how they're doing it, and why they're doing it that way. \n\nAnd the reason I use the word provoke is because it can be very difficult and hard for them to hear the things that might be incorrect, wrong, or just that need fixing, that they think they're doing it great and it's really not."
  },
  {
    "Title": "How can companies derive greater benefits from training by investing in a private training course?",
    "Description": "Private training courses offer companies a safe, tailored environment for open discussion, deeper learning, and team-specific insights in Agile, Scrum, and DevOps practices.",
    "ResourceId": "a2sXBMPHl2Y",
    "Url": "https://www.youtube.com/watch?v=a2sXBMPHl2Y",
    "Date": "2023-05-05T07:00:01Z",
    "Captions": "A good question. So how can companies derive a greater benefit from training if they invest in a private course rather than just sending people piecemeal to public classes? I think it's an interesting question, and I think it's because ultimately, because you're able in the context of that class to air your dirty laundry a little bit more than if you go to a public class.\n\nI always try and create a safe space in public classes that people feel that they're able to talk about things that are happening in their company, and everybody else in the room's going to, you know, kind of pretend they didn't hear it afterwards, type of thing, so that we can talk about things. But you don't feel as comfortable as perhaps you can be within the boundaries of a single organisation.\n\nQuite often, and I've had this with certain private classes where I'm talking about professional Scrum, and I'm talking about continuous delivery to production, and I'm talking about unit testing, and I'm talking about just all of those things around DevOps and Agile. There are people in the room that will say we can't do that here because of XYZ. What's very interesting is you'll have somebody in the room that says, well, actually, on our team, we are able to do that. \n\nAnd I say, okay, well, why can this team do that in your organisation, but these teams believe they can't? That can be an important discussion to have because if somebody can do it, you can pretty much all do it, right? \n\nThe dirty laundry, that realisation of the possible through talking to other people in your organisation, if everybody in the group is on the same team, it's also a little bit different. I've done Agile leadership classes with the whole leadership team for an organisation, and that brings up interesting conversations. Quite often, they're conversations that the participants believe they should have already had. \n\nWhy do I need to come to this training to have these conversations? But it's that they weren't provoked, right? It's comfortable to not have those conversations, to do the same thing that we've always done, you know, running on the treadmill, getting things done. But sometimes you need somebody to provoke you into thinking differently, provoke you into thinking about how you do things. \n\nI think that's the same is true for consulting and training, but especially for private training. There's a lot of provoking and asking difficult questions, and maybe the questions they don't want to answer, right? Because in not one thing to answer it, they realise something about themselves as well. \n\nSo that, for me, is the added value to private classes, is that there's a lot more candour than maybe there might be in a public class. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How did you know you were ready to transition from DevOps practitioner to DevOps Consultant?",
    "Description": "Explores the journey from DevOps practitioner to consultant, highlighting key signals, external recognition, and practical tips for building influence and expertise in the field.",
    "ResourceId": "sb9RsFslUfU",
    "Url": "https://www.youtube.com/watch?v=sb9RsFslUfU",
    "Date": "2023-05-04T07:00:19Z",
    "Captions": "Um, that's a good good question I don't know if you like the answer so the question is how did I know I was ready to transition from a devops practitioner to a devops consultant and I feel like I didn't it just happened to me that's for for me personally I feel like it just happened to me.\n\nI worked predominantly in the Microsoft space I was awarded a Microsoft MVP in 2008 I think 2008 and that kind of gets you access to a different group of people and I got noticed by people who were consultants people who worked in consulting firms and then I was hired into a consulting firm so I feel like I don't know if it's the right answer but I feel like you don't make that decision somebody else makes it for you.\n\nYou need to be you need to be noticed right you need to you need to be good at what you do and you need to do something in that space that somebody who's in the consulting space notices you and says oh that would be great if you were able to leverage those skills to help people rather than just working in one job for one company right because I think it takes a little bit of a different mindset to help many at many companies than just just your own company.\n\nBut I have also met some of the best two of the best devops consultants that I worked with were actually hired from straight from university into a devops consultancy but they were hired out of a competition right so the devops consultant say I worked for in Seattle went to the local university and ran a competition with all of the students in computer science and then they picked the two that looked like they would make the most effective devops consultants.\n\nAnd both of them are now I.T directors in multinational companies in the US so I think I think that that level of expertise demonstrate your expertise and you'll get noticed write blog posts right demonstrate that you know stuff build things in the devops space and people will see you hopefully and think you're doing good stuff and then want you to come and help them out some more and that's that's kind of how you know you're ready is people want your advice people want to talk to you people want to know you.\n\nThanks for watching the video if you enjoyed it please like follow and subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility."
  },
  {
    "Title": "Celebrating Jernimo Palacios: A Beacon of Mentorship and Community in Agile Practices",
    "Description": "Highlights the impact of Jernimo Palacios on agile practices through mentorship, knowledge sharing, and community building, emphasising collaboration and continuous improvement.",
    "ResourceId": "JNJerYuU30E",
    "Url": "https://www.youtube.com/watch?v=JNJerYuU30E",
    "Date": "2023-05-04T07:00:07Z",
    "Captions": "One of the most influential people for me in agile is Geronimo Pascualo, who is a Spanish PST. He built his own business and consulting network in Spain. First person in Spain to do the scrum.org thing, and he effectively shared all and as much of his learnings from that experience with me, with the other PSTs in the community, and really became that kind of beacon of sharing and caring and looking forward into the future and trying to help fellow PSTs get better at doing the stuff that we do."
  },
  {
    "Title": "Embracing Hierarchies of Competence: How Respect and Expertise Transform Workplaces",
    "Description": "Explores how valuing expertise and respect over authority fosters collaboration, continuous learning, and better outcomes in modern workplaces through competence-based hierarchies.",
    "ResourceId": "kT9sB1jIz0U",
    "Url": "https://www.youtube.com/watch?v=kT9sB1jIz0U",
    "Date": "2023-05-03T09:30:09Z",
    "Captions": "I love hierarchies of competence because they're based on respect. Right, they're not based on control. They're not based on telling people what to do. They're based on recognized competence and capability of the people that are doing the work.\n\nAnd you, you, you, we naturally defer sometimes to those people or want more information from those folks to help convince us to do things because they've demonstrated that knowledge, that they are an expert in that space, that they can add value to the conversation and that perhaps they have a more holistic view of all of the facets of the problem and are better able to make that decision."
  },
  {
    "Title": "Why I love heirarchies of competence",
    "Description": "Explores how competence-based hierarchies foster effective leadership and decision-making by valuing expertise over authority, leading to more informed, holistic outcomes.",
    "ResourceId": "WVNiLx3QHLg",
    "Url": "https://www.youtube.com/watch?v=WVNiLx3QHLg",
    "Date": "2023-05-03T09:30:08Z",
    "Captions": "I love hierarchies of competence because they're based on respect. Right, they're not based on control, they're not based on telling people what to do. They're based on recognised competence and capability of the people that are doing the work.\n\nAnd you, you, you, we naturally defer sometimes to those people or want more information from those folks to help convince us to do things because they've demonstrated that knowledge, that they are an expert in that space, that they can add value to the conversation and that perhaps they have a more holistic view of all of the facets of the problem and are better able to make that decision."
  },
  {
    "Title": "Why Agile Success Lies in Principles, Not Tools: A Shift in Focus",
    "Description": "Agile success depends on core principles like adaptability and collaboration, not just tools or frameworks. Focusing on principles leads to better decisions and lasting results.",
    "ResourceId": "y2TObrUi3m0",
    "Url": "https://www.youtube.com/watch?v=y2TObrUi3m0",
    "Date": "2023-05-03T07:00:33Z",
    "Captions": "So what the question is what should be way more popular in agile than it is today. \n\nI think it's the opposite of tools. \n\nSo the main focus of agile coaches, agile consultants and people actually trying to do Agile seems to be tools, right? The focus is on the tools, but the tools aren't how you figure out how to solve problems in a complex environment. Because in a complex environment you might need different tools every time you do something. You might need a different practice, a different capability, a different emergent process, right? \n\nSo the thing that I think is missing is that focus on principles, right? Because the principles are the thing that are underlying everything and helping you make choices that fit within the direction that you want to go of your organization and the way you want to do things. And the tools are just something that supports those ideas, right? Those practices, those principles. \n\nSo I think the big lack of focus is on the underlying principles that support the good decision making that results in great organizations, great teams and great products. And it's just not there. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Agile leader versus traditional manager",
    "Description": "Compares traditional managers’ focus on control and delegation with Agile leaders’ emphasis on empowerment, open communication, and adaptability to market change.",
    "ResourceId": "ZQZeM20TO4c",
    "Url": "https://www.youtube.com/watch?v=ZQZeM20TO4c",
    "Date": "2023-05-02T09:30:14Z",
    "Captions": "So the difference between an agile leader and a traditional manager is that a traditional manager tends to focus on telling people what to do, right, on creating walls so that people can focus. But in actual fact, they reduce communication, they reduce the capability of the organization to make decisions and reduce the capability of the organization to respond to the market. It's not their fault as traditional managers; it's the system within which they're expected to operate, right? So they're just following the conventions of the organization that they're in.\n\nBut the agile leader, I think, in those organizations challenges those organizations, pushes them towards thinking differently and enabling people to make the decisions that they need to make."
  },
  {
    "Title": "Unlocking Value in DevOps: My Role as a Consultant in Driving Change and Overcoming Bottlenecks",
    "Description": "Explains how a DevOps consultant identifies and resolves technical and process bottlenecks, driving continuous improvement and value delivery within organisations.",
    "ResourceId": "0fz91w-_6vE",
    "Url": "https://www.youtube.com/watch?v=0fz91w-_6vE",
    "Date": "2023-05-02T07:00:00Z",
    "Captions": "So the question is, what is my primary role in a DevOps consulting gig? I think that's a difficult question to answer without the context because I find it depends very heavily on where the customer is, what they're trying to do, what they hired you for, and what their problem is. \n\nBut if maybe quantifying that primary goal is to provoke the customer into thinking about how they manage and deliver the work that they do and how the system that they have in place delivers that work and can be disrupted for their benefit, right? \n\nSo DevOps is about optimising that flow of value from idea all the way through to the customers of that product and then closing that feedback loop, right? Getting that feedback back into the system. \n\nSo what is it that's getting in the way of that? Find the thing that's taking the longest in that process and go poke at it and pick at it. And that could be a technical focus, right? A tool issue. The builds are taking 24 hours to do all the testing. Well, that's too long, right? How do we go fix that? \n\nOr that could be a people problem. This approval needs to happen, but the person who does the approval only does it once every two weeks. So if you get the timing wrong, right, you're just waiting for that approval in order to be able to close that feedback loop. That's just waste. That's wasted time. \n\nSo how do you find those things? So I think that would be my focus. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Must have trait in an Agile Consultant",
    "Description": "Tenacity is essential for Agile Consultants, enabling them to persistently drive meaningful change, overcome obstacles, and maintain focus throughout the Agile journey.",
    "ResourceId": "agPLmBdXdbk",
    "Url": "https://www.youtube.com/watch?v=agPLmBdXdbk",
    "Date": "2023-05-01T09:30:00Z",
    "Captions": "So what is a must-have trait in an agile consultant? I think it's tenacity. You have to be able to focus on and not give up on the things that really matter for the organization that you're working with. So once you've figured out what are some of the things that need to change, you've validated some of your assumptions, right? To have that focus, you need to be able to have that laser focus, go for it, and not be dissuaded by all of the naysayers in the organization."
  },
  {
    "Title": "Unlocking Transformation: Why Embracing Difficult Conversations with Agile Consultants is Key to Success",
    "Description": "Explores how open, challenging conversations with agile consultants drive organisational change, foster learning, and support continuous improvement and accountability.",
    "ResourceId": "DceVQ5JQaUw",
    "Url": "https://www.youtube.com/watch?v=DceVQ5JQaUw",
    "Date": "2023-05-01T07:00:05Z",
    "Captions": "So the question is what is the most destructive thing that a client can do to an agile consultant? I think it's shut them down. It's not let them engage, not let them speak and engage with people in your organization because I feel like the purpose of being a consultant is actually quite often to be difficult, right? Because if all we do as an agile consultant is please the customer, nothing's ever going to change, nothing's going to be different. \n\nSo instead of pleasing the customer, what's the other side of that, right? What's the opposite of pleasing the customer? You know, it's being difficult, it's asking difficult questions, it's poking at things. Why is this the way it is, right? And that needs to be enabled and encouraged by the stakeholders in the organization if they're going to bring in a consultant because those are the questions that enact change, that enable the people in your organization to think about why something's the way it is. \n\nAnd that act of thinking about why something's the way it is is quite often the catalyst for the change that's needed in the organization. So allowing your consultants to be difficult, ask hard questions, and provoke people is actually critical to that value that you're getting from an agile consultant. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Beyond the Rituals: Embracing the Core Principles of Scrum for True Agile Success",
    "Description": "Explores how focusing on Scrum’s core principles—empiricism, transparency, and value delivery—leads to true agile success, beyond just following rituals or practices.",
    "ResourceId": "2KovKxNpZpg",
    "Url": "https://www.youtube.com/watch?v=2KovKxNpZpg",
    "Date": "2023-04-28T09:30:00Z",
    "Captions": "So something that really annoys me in Scrum is this focus on the mechanics of Scrum and less focus on the principles of Scrum. People and organisations that will tell you that you're not doing Scrum if you're not standing up, it's just ridiculous. It's not even a conversation we should be having. We should be focusing on the principles: empiricism, transparency, and just getting stuff done."
  },
  {
    "Title": "Unlocking Trust in Scrum: The Power of Openness and Transparency",
    "Description": "Explores how openness and transparency in Scrum foster trust, clear communication, and a supportive team culture, essential for effective Agile collaboration.",
    "ResourceId": "gRnYXuxo9_w",
    "Url": "https://www.youtube.com/watch?v=gRnYXuxo9_w",
    "Date": "2023-04-28T07:00:30Z",
    "Captions": "So the question is what does openness mean in the scrum values and why does it matter? \n\nI think openness is really important. It has a number of aspects to it, but it really comes down to that serving of the transparency. The values are trying to, in order to have transparency, we need trust. Without trust, we've got nothing. \n\nSo how do we get trust? Because trust is an output, not an input. It's just a result; it's a thing that we can observe and see that we have, but you can't magically get it just because you want it. \n\nSo openness serves that by being open and transparent in and of yourself, right? But just telling people how it is. There are things that we need to talk about, there are things that need to be in place, there are stories that we need to tell inside of the organization so that everybody clearly understands what's going on. \n\nAre we expressing things? Are we hiding things? That might be the opposite of openness. Is it easy for everybody to find and understand what's in the product backlog? Is it easy for people to find and understand what our working practices are? Is it easy for people to find and understand how we as a team do things or we as a group do things? If not, then how are we being open? \n\nAlso, just if you bring that back to the emotional context, are we being open and saying to people when we don't like something? Are we being open and saying to people when something's affecting us in a way that maybe they didn't know or recognise? \n\nThat openness enables us all to have a conversation because we're talking. We're not hiding or resenting something that's happening in the organization. We can actually have a conversation; we can talk about it, whether it's a physical thing that's to do with scrum or the way we work, or it's an emotional thing to do with the way we interact or communicate with people. \n\nJust being open, right? That's part of that building up to transparency. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Redefining the Scrum Master: From Boss to Empowering Facilitator",
    "Description": "Explains how effective Scrum Masters empower teams through facilitation, support, and coaching, moving away from authority and micromanagement to foster self-organisation.",
    "ResourceId": "DNCDdWjYis8",
    "Url": "https://www.youtube.com/watch?v=DNCDdWjYis8",
    "Date": "2023-04-28T07:00:08Z",
    "Captions": "Worst trait in unskilled scrum masters is probably their thinking that they're the boss of everybody, thinking that they should be telling people what to do, thinking that they should be micromanaging, thinking that they should be setting up the Jira environment, thinking that they should be allocating the work, and all of that is just crap. That's nothing to do with being a scrum master. Being a scrum master is about helping teams be more effective, and all of those things I can't think of an easier way to make a team ineffective. Focus on what helps the team stand on their own, be better at what they do, being visibly present."
  },
  {
    "Title": "What is Your Peeve in DevOps",
    "Description": "Explores common DevOps frustrations, debunks the myth that continuous delivery is unattainable, and highlights the importance of empowering developers in agile teams.",
    "ResourceId": "TNnpe02_RiU",
    "Url": "https://www.youtube.com/watch?v=TNnpe02_RiU",
    "Date": "2023-04-27T09:30:06Z",
    "Captions": "So I think my pet peeve about DevOps is this, the fallacy that people cling to that they can't do that here. That they can't do continuous delivery, that they can't ship their product into production, that they can't give developers that power to be able to do that. And it's just not true."
  },
  {
    "Title": "Empowering Agile Teams: The Transformative Power of Teaching the \"Why\"",
    "Description": "Explores how teaching the reasons behind Agile practices boosts team engagement, collaboration, and continuous improvement, helping teams adapt and thrive with Scrum.",
    "ResourceId": "xuNNZnCNVWs",
    "Url": "https://www.youtube.com/watch?v=xuNNZnCNVWs",
    "Date": "2023-04-27T07:00:31Z",
    "Captions": "I think the main critical skill for a scrum Master is to be able to teach and teach things in a way that help people understand what it is not just the mechanics of how to do it. So actually teaching people and I think the why is that most people will resist things unless they understand why they should be doing a thing. What value do they get from it? \n\nUm, so being able to teach the fundamentals and have people understand they'll often come to the realization they need to do something different themselves."
  },
  {
    "Title": "Unlocking the Scrum Master's Potential: Embracing Broader Responsibilities for Agile Success",
    "Description": "Explores how Scrum Masters can expand their impact by embracing wider organisational responsibilities, challenging outdated practices, and fostering agile team growth.",
    "ResourceId": "1TaIjFL-0o8",
    "Url": "https://www.youtube.com/watch?v=1TaIjFL-0o8",
    "Date": "2023-04-27T07:00:00Z",
    "Captions": "So what is the most common Epiphany in the PSM2 course? I think there's more than one, and I think it depends on what level you're playing at when you come into the class, which Epiphany you get.\n\nSo probably the biggest Epiphany is the realisation that the Scrum Master is not just focused on the team. That's the big Epiphany for most folks because I think, even though it's very explicit in the Scrum Guide, it absolutely states here's the Scrum Master's accountability to the team, and here's the accountability of the Product Owner, and here's the accountability to the organisation. Most people seem to forget or kind of gloss over that bit for the accountability for the organisation. \n\nWhen we start kind of double-clicking on that and expanding it and figuring out what the implications are of those accountabilities for how the Scrum Master purports themselves within the organisation, I think it changes that dynamic. It expands those ideas, and they really have that realisation that they perhaps need to be doing more, that they need to be poking at some of those, asking difficult questions. Right? That's something that I find is very important as a Scrum Master. \n\nEven if all that difficult question is, is why? Right? Something happens a particular way in the organisation that is getting in the way of the team. Why? Right? Because you do find, depending on the organisation, that there can be rules in place that are ancient rules. \n\nI have been doing a little bit of digging recently on the Royal Bank of Scotland, and they have these rules in place for how their teams work. But there are 200-plus-year-old bank rules, right? There are rules in place because they were a great rule 100 years ago for whatever context they were created in. But are they still relevant today? That's kind of like your organisational package and your organisational craft, and who's going to take care of that? Who looks at that craft? \n\nSo I think that that's one of the big epiphanies at that level. Then there's the meta Epiphany in the PSM2 that I think is really important for those people in the room that are also facilitators. So they kind of get a double Epiphany, and that's how to engage with people and have more people participate in the discussions. \n\nLike, how to become a two-dimensional Scrum Master rather than that one-dimensional of just looking at Scrum. How do I start bringing in additional tools and practices in the way that they do things and demonstrate their own behaviour in order to facilitate change of the people and participation in the events?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Worst trait in unskilled scrum masters?",
    "Description": "Highlights the most damaging traits of unskilled Scrum Masters, such as micromanagement and bossiness, and contrasts them with effective, facilitative Scrum leadership.",
    "ResourceId": "-pW6YDYEO20",
    "Url": "https://www.youtube.com/watch?v=-pW6YDYEO20",
    "Date": "2023-04-26T07:00:00Z",
    "Captions": "The worst trait in unskilled Scrum Masters is probably their thinking that they're the boss of everybody, thinking that they should be telling people what to do, thinking that they should be micromanaging, thinking that they should be setting up the Jira environment, thinking that they should be allocating the work, and all of that is just crap. It has nothing to do with being a Scrum Master. Being a Scrum Master is about helping teams be more effective, and all of those things—I can't think of an easier way to make a team ineffective. Focus on what helps the team stand on their own, be better at what they do, being visibly present. And yeah."
  },
  {
    "Title": "One critical skill for a Scrum Master and why?",
    "Description": "Teaching is the key skill for Scrum Masters, enabling teams to understand Agile principles, embrace change, and achieve deeper engagement and lasting transformation.",
    "ResourceId": "kEywzkMhWl0",
    "Url": "https://www.youtube.com/watch?v=kEywzkMhWl0",
    "Date": "2023-04-25T07:00:15Z",
    "Captions": "I think the main critical skill for a scrum master is to be able to teach and teach things in a way that help people understand what it is not just the mechanics of how to do it. So actually teaching people and I think the why is that most people will resist things unless they understand why they should be doing a thing. What value do they get from it? \n\nUm, so being able to teach the fundamentals and have people understand, they'll often come to the realisation that they need to do something different themselves."
  },
  {
    "Title": "Is a scrum master an agile micromanager?",
    "Description": "A Scrum Master empowers teams by facilitating, mentoring, and supporting—not micromanaging—fostering trust, collaboration, and continuous improvement in Agile environments.",
    "ResourceId": "FNFV4mp-0pg",
    "Url": "https://www.youtube.com/watch?v=FNFV4mp-0pg",
    "Date": "2023-04-25T07:00:06Z",
    "Captions": "Is a Scrum Master an agile micromanager? If a Scrum Master is an agile micromanager, they're doing it wrong. A Scrum Master is there to facilitate, perhaps to teach, but not to micromanage, not to tell people what to do, not to tell people where to do it. Don't be a Scrum Master micromanager. You're not a project manager; you're focused on the effectiveness of the team, and the team can't be effective if you're micromanaging every decision that they make and everything that they do."
  },
  {
    "Title": "Is a Scrum Master an Agile micromanager?",
    "Description": "Explains why a Scrum Master should facilitate and empower agile teams, not micromanage, highlighting the importance of trust, autonomy, and effective team dynamics.",
    "ResourceId": "USrwyGHG_tc",
    "Url": "https://www.youtube.com/watch?v=USrwyGHG_tc",
    "Date": "2023-04-24T07:00:18Z",
    "Captions": "Is a Scrum Master an agile micromanager? \n\nIf a Scrum Master is an agile micromanager, they're doing it wrong. A Scrum Master is there to facilitate, perhaps to teach, but not to micromanage. Not to tell people what to do, not to tell people where to do it. \n\nDon't be a Scrum Master micromanager. You're not a project manager; you're focused on the effectiveness of the team, and the team can't be effective if you're micromanaging every decision that they make and everything that they do."
  },
  {
    "Title": "Transforming Agile Training into Action: Experimentation and Engagement in the Workplace",
    "Description": "Explores practical ways to apply agile training at work, using experimentation, group engagement techniques, and virtual tools to boost collaboration and real-world impact.",
    "ResourceId": "BRRQ1JWsHpQ",
    "Url": "https://www.youtube.com/watch?v=BRRQ1JWsHpQ",
    "Date": "2023-04-24T07:00:03Z",
    "Captions": "Well, the question is the tools you use to train are awesome. How do people transfer their training experience with these tools into their job? They need to try stuff. That's the thing that I kind of try and encourage people to do, and it's one of the particular reasons that I talk about how I run different segments of the class. That met a conversation about how I run different segments of the class with them as well as actually running the class. I guess it depends on the group as well, right? If you've got a bunch of practitioners and scrum masters and facilitators who are interested in that stuff, I maybe spent more time on it than other classes. \n\nBut those tools, like the different flavours of liberating structures for the virtual world, are things that they can take away and use in their own organisation to help them make their environments a little bit better, to help people engage and tell stories a little bit better inside of their organisation. Because that's really how humans connect information to the real world is through stories. And how do you tell your stories in a way that helps other people inside of your organisation understand them?\n\nSo some examples of tools. One of the key, and it's one of the foundational tools in liberating structures, is called a one two four all. It's a great tool where you do one minute on your own, two minutes in pairs, four minutes in two pairs, and then bringing everybody back. The core goal is always I've got a group of people. They're not a tiny group of people; there may be a bigger group of people, and I want them to engage on a particular topic and come up with ideas. \n\nBut I don't want to just ask the room. Let's say you've got 20 people in the room. I don't want to just ask the room, \"What do you think about this topic?\" Because you know already before you ask the question that either nobody's going to say anything and it's going to be tumbleweeds going past, or you've got that one person who you know is the loudest person in the room. They're going to be the only one that speaks, or the hippo in the room, right? The highest paid person is going to be the one that talks, and everybody else can be like, \"I don't want to say anything in case I get in trouble.\"\n\nSo how do you create an environment where everybody's voice is equally contributing to the story and enable all of them, even if it's just they feel like they're involved in the conversation, that they're getting their stories across? So one minute on your own, right? Is everybody heads down, write some ideas on your own, and then you go into pairs. This is my interpretation of this based on my personality, right? But I feel like I'm an introvert. Maybe it doesn't seem that way, but I am. \n\nI'm an introvert, and having one person to go speak to and express my ideas to is great, right? Because I'm not talking to a big room of people. I don't feel like I'm going to be ashamed by people in the room who don't like my idea, but I can share it in this small group. And then we shared our ideas; we've collaborated on our ideas. It's only two minutes, right? But you get that feeling, and then you go into two pairs. So that's two friends, right? People who have made friends and collaborated on their ideas coming together to expand those ideas and make them bigger.\n\nAnd then when you bring it back to the rest of the room, you've maybe only got three, four, or five groups of people to hear from, and you're hearing collaboratively created ideas. So it's okay to have a spokesperson in that group, and everybody else doesn't feel like they're not being heard, right? Because they've already had those conversations and built up to that story. And that's just one of the tools in liberating structures. \n\nAnd you can also take what do we do with the output of that? Well, maybe we feed it into something else that we use to, you know, we've created a whole list of ideas, and perhaps we want to figure out how do we get through that growing zone in the middle of collaboration and coming to consensus towards having that back consensus and single idea, like what is it we're going to do next? \n\nSo helping people understand how those tools work in their world, they can experience using some of those tools in the class, and then hopefully they can see how they function so that they can then take them and use them in their own facilitation techniques as well. Because I feel like I specialise in the virtual space, I feel like most people are in either hybrid or all virtual environments today. \n\nAnd there's no point. I feel there's less value in you coming to an in-person class and me teaching you how to run all these liberating structures or using them, you seeing those liberating structures being used in the physical space, and then you go back to work and there's three people online and two people in the office, and you're like, \"Well, I can't use that thing that Martin used because it doesn't fit the space that I'm in just now.\" \n\nWhereas if you come to a virtual class, you're going to learn how to do that in the virtual space. And we've all seen if you're in the hybrid world, it's really the same as the virtual world, except a few people are in the office and they go sit at their desk, and everybody has their own camera. So you can do the breakout rooms; you can use those tools. And that's also partly, you know, using the technologies as well that we use in the class. We use Mural in my classes; we use Mural and Microsoft Teams. \n\nEnable people to then go back to the office and use similar techniques again, additional meta learning from the class where they're able to learn more than the content that we're actually teaching them because they're learning how to actually do those things through experience. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Unlocking Rapid Delivery: Overcoming Common DevOps Challenges for Agile Success",
    "Description": "Explores common DevOps challenges to rapid delivery, highlighting automation, feedback loops, mindset shifts, and compliance for achieving agile, efficient software delivery.",
    "ResourceId": "LI6G1awAUyU",
    "Url": "https://www.youtube.com/watch?v=LI6G1awAUyU",
    "Date": "2023-04-21T07:00:06Z",
    "Captions": "so the question is what are the most common challenges you are contracted to solve in a devops Consulting geek ah man it's pretty much the same as an agile Consulting geek right it's it's people aren't seeing working products quickly enough right they aren't they aren't able to use the things that the teams are creating perhaps it takes too long to get from from an idea to delivery of working product or even just just too long from we've finished the product to we can actually get it in front of our customers and how do we close those those feedback loops because that that fundamentally devops is coming at the story the agile tells from the perspective of people who are delivering the product right the the the actual delivery teams who are getting the product through trying to get the product through the production line of of delivery and the most common challenges or how do you make that faster how do you automate that process which which means people often think about devops as purely about the automation but there's a lot of uh a mindset and understanding lean agile practitioner behind the story of devops that enables you to make different choices and have different understandings it's it's the same reason that that synovsky had to drag the windows team Kicking and Screaming was his comment to shipping a new version of Windows after Windows 8 right Windows 8.1 was a year later but they didn't want to do it they're like you can't release a new version of Windows within a year can can you imagine working on a product and believing wholeheartedly that you can't ship a new version within a year you can't make one code change and ship it to production within a year that's that's an incredible length of time for that to be true and devops is really about closing those feedback Clips getting that that oh depends how you think about devops right again I always come back to that that story are you an agile practitioner looking at devops are you our devops practitioner looking at agile right because a devops practitioner will say that agile is part of the devops story and an agile practitioner will say that devops is part of the agile story right that's that's different lenses they're different perspectives but it's all the same thing so I don't really count it as a any different between it I do this report for for organizations where I analyze what they're doing and I call it the the state of agile report if they asked for an agile report in the state of devops report if they asked for a devops report and it's the same report right it's the same story that I'm telling it's all about shortening feedback loops it's about uh getting product in the hands of your customers more quickly it's about think of all the different feedback loops how long does it take your developers to to to to validate that the code they've just written actually works right I know teams where where that's 48 hours because of the tests they have to run because their testing infrastructure Is Not Great perhaps that should be Rewritten um for me the most most common challenges are are anytime the customer says or anybody at the customer says but in our industry World company we can't do thing because of some other reason right those those are the big challenges it actually doesn't matter what you fill those gaps with they're they're the big challenges most most commonly um is is we can't um have developers shipping product into production because of our um you know we're a regulated industry and we need to blah blah whatever bollocks blah blah blah blah blah right because because it's just fundamentally not true if you go look on the azure devops website uh at least the last time I looked there were a bunch of articles on um socks audits um and a bunch of articles on other uh and I think there's the the federal drug the US drug stuff like you have to comply with a bunch of stuff right there's there's no mandate that a different person has to test it from the person that codied it not in any of those actual things there's actually socks on it is the big one right because it's the financial world and it it's crazy to think that an auditor right who's a financial auditor would understand anything about software and put some restriction on and they don't and the same is true for everything it get the auditor in the room and ask them the question if we do it like this instead of like this is that still okay and 90 of the times are like yeah it is right yeah that sounds that sounds like it gets me the same stuff I need in fact that sounds like more than I need that's pretty good right and that almost almost 100 of the time that's that's my experience working with compliance in companies external Auditors is that they don't have the Outlook that you think they do because you make we make a sound pins and we don't ask them so the biggest biggest common challenges are we can't do that here that's the biggest challenge and it doesn't matter what it is it's always the same challenge right thanks for watching the video If you enjoyed it please like follow And subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility"
  },
  {
    "Title": "Unlocking the True Potential of Scrum: Why Professionalism Matters in Agile Teams",
    "Description": "Explores how true professionalism in Scrum enables Agile teams to deliver production-ready products, highlighting the importance of transparency, standards, and work ethic.",
    "ResourceId": "AjUC6FPYCQM",
    "Url": "https://www.youtube.com/watch?v=AjUC6FPYCQM",
    "Date": "2023-04-20T07:00:06Z",
    "Captions": "So the question is, do teams really understand the power of applying scrum professionally? This is a really hard one because I, or contentious one, because I don't think that most teams I've ever worked with, like professionals, they act like amateurs. And that's not necessarily their fault; there's not a blame there. It's just how companies expect. They don't seem to expect us to be professionals and do the right thing. They want us to do their thing at whatever speed they want us to do it at, which means that we are, as engineers, as a software engineer for many years, we're encouraged to do things the easy, fast, cheap way, not the right way. And that encourages unprofessional behaviour; it supports unprofessional behaviour.\n\nSo most teams don't necessarily understand what professional behaviour looks like, even to the level of... I worked with an organisation a few years ago, and we did an exercise on what requirements should look like for the engineering team to take them on. So this was not the engineering teams themselves; this was the product management group. And we did this exercise where I love it, get everybody in a room, break them into groups, cross-functional groups, and then they have to take some user interface from their product and break down what the requirements they would have liked to have with hindsight, right? So they build these lovely detailed requirements and how much detail and all the questions they had to go ask and the stuff they didn't know, and they built all this. They're like, \"Holy moly, that's a lot of stuff.\" \n\nAnd then we started the second part of the exercise, which was take something off their backlog that they don't have right now, that they haven't built yet, and do the same thing for it, right? So they're trying to build out these requirements, and the head of product management stopped us, stopped the whole workshop, and basically said that him and his team were not set up to be able to do this. Just, \"We're not fundamentally capable of creating and working with you to build requirements of this level of detail that we obviously now see this is what you needed in the first place, right, that we've never given you before. But we're not set up to do it.\" That's like a moment of realisation that professionalism is up here and your capacity to deliver is down here, right? This is where we need to be. This is where a professional product management group is interacting collaboratively with the team, figuring out what it is they need, working up front, getting ahead of the curve of the things that the teams need so that everything's ready at the right time, and they just weren't ready for that.\n\nAnd I think that's true in lots of parts of organisations, not just on teams and scrum teams. And one of the purposes of scrum is to make those things transparent, right? You've got to try and do these things that you're working. One of the minimum professional things that a team, any team, if you have a software team, they absolutely should be able to create usable working product every iteration, including the first, that is production ready. Right? That's like minimum bar for scrum. If you're not doing that, if you don't have that at the end of the Sprint, potentially shippable, not ship, potentially shippable, right? You're not doing scrum yet; you're just fundamentally not at the level of transparency that you need for a professional scrum team. And so many teams look at that and go, \"Holy crap, we're so far away from that.\" It's insane. \n\nRight? That is a hard place to be, and it's a hard realisation, not just for the team, because as the team tries to get there, they're going to realise all the things they don't have, right? \"Oh, but we can't create production ready because we've got a third-party testing team that comes in and does testing, so how do we know that stuff? How do we know what they're going to come up with?\" Or we submit it to... \"Oh, what did we used to do at Merrill Lynch, PWC? It's also some company we used to submit all of our websites to that would then do a third-party penetration test, and we had no idea what tools they used to do those. They call it just the pen testing cost 15 grand to do a pen test, and you would get an output of stuff you need to go fix.\" Well, it wasn't done right; the product that you created wasn't done, wasn't ready, wasn't shippable quality because you don't understand those tools that they're using. You don't understand those additional checks, and you need to.\n\nSo I think the power of applying scrum professionally is understanding what it takes to be professionals and create, have a professional work ethic where we're creating something that our customers can use, that they can get value from, that they value, right? And most teams don't really understand that until they start, and then they start to understand what they don't know, start to add more capabilities in there, and they eventually get to being professional teams. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How would you like to be remembered as a Professional Scrum Trainer?  What 3 things matter most to you?",
    "Description": "Shares the top three values guiding a Professional Scrum Trainer: integrity, honesty, and approachability, with a focus on transparency, truth, and helpful support.",
    "ResourceId": "Dl5v4j1f-WE",
    "Url": "https://www.youtube.com/watch?v=Dl5v4j1f-WE",
    "Date": "2023-04-19T07:00:06Z",
    "Captions": "How would you like to be remembered as a professional scrum trainer? What three things matter most to you? \n\nI guess the first one is integrity. I like to do the right thing. I like to be seen to be doing the right thing. I don't like to be seen to be doing the wrong thing. I don't like to do the wrong thing, not just be seen to do it right. Sometimes that comes with hard choices because it might be easier for me to market, for example, market my classes in a particular way that I don't believe is morally effective. Probably is the like it's not moral for me to do that. \n\nI could have a policy whereby if a customer came to me and had a quote from another scrum trainer that maybe I know, right, that I could undercut their price in order to win the business. But I don't do that. I have all of my rates published on my website. I do give people discounts, right, but I have all of my rates published on my website and that's generally the rates that I quote. \n\nSo people know, even my competitors know how much I'm going to be charging and they're welcome to undercut me, right? But I'm not going to do that to them because I think that's morally repugnant within the bounds of where a bunch of people are trying to do the right thing. It's not in keeping with the scrum values, right? \n\nSo yeah, that's the first thing. Forthrightness, probably. Part of that comes from my ESD neural divergent, right? I don't like things to be wrong. I feel like I'm reasonably good at separating out the difference between the data, i.e. what's the truth of the matter versus what my opinions are on top of that. \n\nSo I'll work with organizations and I'll help them understand not only what's broken but what my suggestion is for how to fix it, right? My suggestion might be right or might be wrong for them; they need to try it and see. But the data is the truth, and that's really important to me. \n\nJust in general, so that would be the second thing. I'd like people to think of me as somebody that they can come to with their problems. I'm not going to sugarcoat anything, but I'm also not going to poop on them. Does that make sense? If they're doing something that is downright daft, for example, stack ranking all of their employees, right? I've seen that Microsoft did that many minutes ago. \n\nThe detrimental effects to a business, its organization, the ability for people to function is fairly well documented for those types of issues. So I can categorically say that's a bad idea. Here is the effect it's going to have in your organization. I'm not going to say that something's good if it's not. \n\nBut that comes back to that second one, right, of honesty and what are the facts. If you're doing something stupid, you're doing something stupid. Nothing I sugarcoat is going to make it unstupid, so what's the point in the sugar coating when all that does is bring politics into the story? Whereas you can do something with that data of, okay, I understand this is a bad thing and I can do something with it. \n\nSo I feel like that ability for people to come to me, and that's why I offer, you know, 60 minutes one-on-one consulting. Ultimately, I have people that I work with that keep coming back for that 60 minutes because not everybody uses it. So it's fine until it's a problem, it's fine, right? It's like air miles. \n\nThey keep coming back and they'll ask me questions, they'll describe a problem or situation in their organization, and I'll give them advice. I'll give them free consulting, right? Because they need help. They came on my training course; I built a relationship with them. I want to continue that relationship and I want to continue to help them, and I'm not going to charge them for that because that's just me helping somebody out. \n\nI think that kind of comes from my time as a Microsoft MVP, right? In order to be a Microsoft MVP, you're not getting paid to do the thing that you do. The thing you get your MVP for is not stuff you get paid for; it's basically for giving free advice and consulting to anybody who needs it, whether that be in the form of blog posts or conference talks or just talking to people or presenting the product and where things are buried. \n\nIt's where the bodies are buried, right? It's that free and open transfer of information that is really important to me. If you want to come and do a scrum.org class, then you know there's a cost for doing a scrum.org class. But if you just want to come and have a chat with me for 30 minutes, go to my website; it's free. Book a 30-minute chat, have a chat, talk about anything you like. We could talk about board games if you like; I don't mind what it is. \n\nBecause I'm always happy to hear from people and chat to them. I think especially in this day and age, there's too few places for people to go for help. If you've got good Google Foo or Bingfu, you can go find contexts on the internet where other things have helped other people, but they're never the same as your context. \n\nWhile I'm very good at finding code contexts that help me, like when I'm coding, I'll be able to go find some code and then adapt it to what I need. I think that's much harder when we're talking about people and relationships and practices and how we work in organizations. Sometimes you want an expert to hear the story and then offer some advice. \n\nI have a number of people that have literally, I met them coming through my classes, whether public or private, that keep coming back and we chat all the time. I've got one scrum master; in fact, he wasn't a scrum master when I met him. He is now, and we have multiple chats a week just talking about things that are going on in the organization, how he could maybe do things differently. He talks about his wins, right? \n\nSomebody to talk to about the things that you've been able to achieve and what's the next thing I should be thinking of and was that a good idea, right? I think that's something we all need. \n\nSo if there was one thing, like the top thing, it would be I'd like to be known as somebody who is approachable, even though I'm sometimes very pedantic, right? But approachable and able to separate out that pedantic nature of following the scrum guide, right? That pedantic part of learning something, i.e. the teacher mode, right? You're learning something; you want a teacher to be pedantic because that's how that works. \n\nAnd the pragmatic side, which is, well, I'm trying to do this in my company and this is my situation, which means I can't do this thing that you said would be a good idea. How else could I work at this? I'm not going to say, well, that sucks; you have to do it this way. I'm like, well, let's figure out within the bounds of your organizational context what is some way that you can try and make things a little bit better, a little bit more effective. \n\nThat's probably the main thing. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is your favourite DevOps consulting outcome?",
    "Description": "A complex software project unified 80+ teams across 9 countries by adopting Azure DevOps, streamlining processes, and achieving a single engineering system.",
    "ResourceId": "N58DvsSx4U8",
    "Url": "https://www.youtube.com/watch?v=N58DvsSx4U8",
    "Date": "2023-04-18T07:00:08Z",
    "Captions": "So the question is what's my favourite DevOps consulting outcome and I really have to go to actually one of my favourite and longest customers. They were building a piece of software. I'm gonna try and not name them but they'll know who they are when I'm talking about them. They were building a piece of software that was massive multi-billion dollar products. So ultimately leadership didn't care about efficiency so much right when your profit margin is in the four to five billion dollars and you've only got 650 people working on it your answer to a lot of problems might be can't we just hire a bunch of people to solve that right which is not always the best way to solve a problem.\n\nAnd we were in the position that it was a very fragmented product so there was 80 to 90 teams working in 13 locations in nine different countries. They all did their own thing so each team picked their own source control system ran their own source control system locally. There was everything you could possibly imagine there was git but not very much of it there was team foundation version control there was subversion oh there was just everything there was even a source control system that they built themselves right because when they started building this product there were no good source control systems out there and they still had people in the company using their homegrown source control system lots of fun.\n\nAnd in order to build this product because it was one product that was deployed to a machine right so you've got one not one executable but it for one I'm old right it was burned onto a CD and then you know that's your install right so it's one install for your product. In order to get that to exist they had to run a bunch of builds to go pull that code from all the different locations right pull it into some central location then actually do all of the builds that they needed to do and that was hugely complicated because every team did different stuff right so you had different tools different capabilities it was a multi multi-hour fandango to go do it and what they ended up having to do was about this is about 10,000 builds a day in order to create one working version of the product.\n\nSo they had a set of 20 between 20 and 40 build servers. All in order to build this product had to be the most unbelievably powerful machines you could possibly imagine as many cores as you could possibly fit as much memory as you could possibly fit it was just a monolithic product. And it ten thousand builds a day to have a nightly build of the product which needed a team of people to run this.\n\nSo I started working with them that was the state they were in kind of when I started working with them and my overriding advice was you need to simplify this process you need to make it easier faster slick because it's just too hard to find out something's wrong to find out you've broken something and one team breaks another team right all of those things.\n\nSo I did a state of agile state of DevOps report for them which is basically here's what did I how did I phrase it here are the opportunities for improvement right that you have in your system and if you only fix three things here's the top three things right and the top one was that build problem get them all into one source control system one set of builds and those kind of things and that effort because they've got to go do it right I'm the consultant I'm there to help them do it and I also help them with a whole bunch of other stuff as well right but day to day they're the ones that have got to go do it I don't understand their code I don't know where all the bodies are buried and who they need to politically talk to in their company to get stuff done they need to go do all of that so I was there a little bit of coaching mostly consulting on other stuff while they're doing that and then coming back around and having discussions and being part of me all that kind of stuff and it actually took and this was a record in this company four years to get them onto one source control system which was team foundation we got them all into Azure DevOps one source control system all on team foundation version control everything on one set of branches and everybody working in the same area so they'll be able to clone the same clone what was it called create the same workspace in TFVC and I'll work together and not poop on each other still had lots of branches still had 80 90 active branches but at least they were all related to each other and you could do the branching and merging properly and all that kind of stuff.\n\nAnd that was the first stage to getting them onto getting them over onto git optimising their processes you know doing all of the other things that need to happen in order to have I there's a phrase I love it it's called onees. If you've not heard this phrase one engineering system it's from the first time I heard it was from Microsoft and their one es strategy is part of the reason that Azure DevOps exists in the first place and that it's a cloud platform and that's that they had this problem internally and they wanted to you don't want an A person who works for you to go work from one team and they move to another team and suddenly have they have to re-figure out how everything works they have to re-figure out where to store their work items they have to where all the work requests are how they build their code where they build their code where the code comes from all of that stuff shouldn't be that should be like that's the default stuff that we all understand.\n\nAnd then the actual build that happens is different for every product in every platform but it's in the same place right between those lines is different but the wrapper the how you get it done how what you need to install all of those things should be part of the organisational standards and that's what one engineering system was all about was getting everybody onto one platform everybody onto one not way of working that's the wrong phrase but one engineering system that can do all of the things that everybody in the company needed to do so that nobody's confused about where their crap is and where they need to go to go change stuff and do stuff and collaborate with each other and that was the ethos of Azure DevOps and it met it absolutely fantastically.\n\nWhich is why I love that tool that is my go-to tool is Azure DevOps although I use other tools as well but just that vision from Simon Guggenheimer of that one engineering system of that Elm DevOps experience is just phenomenal. \n\nThanks for watching the video. If you enjoyed it please like follow and subscribe. I always reply to comments and if you want to have a chat about this or anything else agile scrum or DevOps then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Is a PSM II certification validation of your skills, or does it develop your skill and capability as a Scrum Master?",
    "Description": "Explains how the PSM II course focuses on developing advanced Scrum Master skills, facilitation techniques, and accountability, rather than just validating knowledge.",
    "ResourceId": "vI_qQ7-1z2E",
    "Url": "https://www.youtube.com/watch?v=vI_qQ7-1z2E",
    "Date": "2023-04-17T07:00:17Z",
    "Captions": "Question is, is the PSM 2 course or PSME right an advanced Scrum Master class validation of your skills or does it develop your skills and capability as a Scrum Master? \n\nAnd I think it's the latter, right? If you're coming to a PSM, an advanced Scrum Master class and you're just validating your skills, go take the assessment and don't bother with the class, right? That's the way I would think about it. \n\nAnd I feel that there's actually not in implementation, there's actually not that much relationship between the intent of the PSM, the advanced Scrum Master class and the intent of the PSM2 assessment, right? They're slightly different things. \n\nAnd I think the class is much broader in that it's designed to develop your skill and capability as a Scrum Master, whereas the assessment is just assessing the knowledge part of that story. \n\nA key differentiator is that the advanced Scrum Master class focuses on facilitation. It focuses on the Scrum Master being a professional Scrum Master rather than just an admin for the team, which often happens, right? It focuses on that difference between being given the job title of Scrum Master and fulfilling the accountability of the Scrum Master that it talks about in the Scrum Guide. \n\nThat's the real purpose of the class with a whole bunch of the way it kind of does it. That's the story of the class, right? And then we're going to talk about not just that part but what is the Scrum Master's accountability to the team, what's the Scrum Master's accountability to the Product Owner, what's the Scrum Master's accountability to the organisation, right? That's the story of the class. \n\nBut in teaching the class and participating in the class, we're using facilitation techniques to help the students understand those things. That also teaches them how to use those facilitation techniques. \n\nThe way I teach the class, I use a lot of liberating structures in the class. I use a lot of strings of liberating structures, so liberating structures connected together to get to a kind of longer outcome. So a bunch of exercises that go towards an overall story. \n\nAnd I try and explain the meta process in the class as we're going through, like what is the exercise that we're doing, why are we doing it, what's the outcome that I'm trying to achieve? And then we've actually done the exercise, you've experienced that. How could you leverage that as a tool to use with your students as well, or not your students, your Scrum Master, your teams, your organisation, the people that you're going to be working with? \n\nSo learning those facilitation techniques, learning to leverage liberating structures is for me a huge part of that class. It's not the only part, right? Because there's also the story of the class. \n\nBut then there's the techniques that we use to get there. So for me, that class is almost entirely about the skill and capability of you as a Scrum Master, both from the perspective of how do I become a better Scrum Master and understand the Scrum Master accountability more, but also that meta process of what are the tools and techniques that I can use to do those things with teams. \n\nIncluded in the class is a whole bunch of effectively take away exercises. We have posters, we have cards, we have exercise content that we provide you at the end of the class that you can then go do some of those exercises with your teams. \n\nAnd in fact, I can imagine as we move towards a more immersive learning model that what we'll do with some of those exercises is, you know, we'll teach you how to run the exercise and then we'll send you off as a Scrum Master to go run that exercise next week with your team. And then you come back the week after and tell us how you got on, what were the difficulties you hit, how could you have run it better, what did you learn, share that with everybody, and then we'll talk about the next bit, teach the next exercise, and then you go off and use it with your team. \n\nAnd that would be the immersive version of the PSM2, which I think would be fantastic. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Essential Skills Every Agile Consultant Needs: Mastering Domain Knowledge, Active Listening, and Honest Communication",
    "Description": "Covers key skills for agile consultants: mastering domain knowledge, practising active listening, and communicating honestly to drive transparency and effective organisational change.",
    "ResourceId": "gImXmxjn_1g",
    "Url": "https://www.youtube.com/watch?v=gImXmxjn_1g",
    "Date": "2023-04-14T07:00:24Z",
    "Captions": "So what are three top tips for a new agile consultant?\n\nUm, so I think the first thing is understand the domain within which you're working. If you're going to be consulting on a particular topic, um, like for example going into an organization that builds some kind of software product and helping them shorten the feedback loop and get better at delivering that product, then you want to understand what it takes to build products. You want to have a keen understanding of the context within which the teams, the people that are doing the work, are operating because it's the people that are doing the work that are actually moving the business forward. \n\nUm, they're directed by—directed, that's probably too strong a word—um, well it might be depending on your level of control, but they're directed by above, like what direction are we going, what's our goals, what's our objectives. But, um, they need to um be intrinsically understanding of that context. That's the first one: understand the context of the people that are doing the work.\n\nUm, what would be a second thing? Listen. Probably a very powerful skill is listening to what the people that are doing the work are saying and how that what differs or relates to what leadership is saying and what customers are saying. I often do um interviews across all levels of the organization when I start working with a team or with a company to really get an understanding of what it is that's going on. And it's incredible the different stories that are told from the same perspective from people at those different levels. \n\nI remember an organization where the leadership was like, \"Yeah, we're awesome, we do continuous delivery, we test everything, we've got automation, we're brilliant.\" Um, and the people doing the work were like, \"Oh my goodness me, we've got no automation, life sucks, we're doing everything manually, it's a struggle every day to get out of bed and go work on this big pile of crap that we're delivering.\" \n\nUm, and that fragmentation was through a lack of transparency, right? And even I spoke to some customers for that team. They managed to get a couple of customers, and they weren't external, they were internal customers to the organization, but they were like, \"Yeah, you know, we don't tell them about every problem that we have, we actually keep a separate list of problems because we as the customer see the engineering teams as totally overloaded and running around like with their hair on fire. So we feed them things that we think of as important,\" right? They're creating a separate backlog of work and prioritising it as the customer because they see the struggle that the engineering teams are under. Yet leadership is like, \"Everything's awesome and we're great,\" right? \n\nSo that, that, that—listening to people, talking to them, finding out what's actually going on at different levels because everybody's story is different, um, and at every level in the organization. And if you get that difference in story, you know there's a fundamental problem with transparency. So that's perhaps your first focus for organisational change and organisational shift.\n\nAnd now I've got to come up with a third one. See, you need to be able to articulate what people don't want to hear. \n\nSo, I remember before I was able to do that, I went into an organization that had just gone through a massive reorganisation, restructure, um, in order to try and achieve agility. And they'd ended up with a test silo and an engineering silo and an operations silo, right? Same old crap. \n\nAnd I was sitting in with the CEO and he turned to me and said, \"Do I need to pick this apart and do another big reorg?\" And I was afraid to say, \"Yes, what you've done is wrong. It is not going to achieve the outcome that you want to achieve, and you're gonna need to redo it with an eye to cross-functional vertical slices, value stream,\" right? Focus on those things. \n\nAnd I was afraid to say that because I was a lowly, uh, wet behind the ears DevOps consultant back in the day, um, and this was sitting in with the CEO of a large multinational company, and I felt I couldn't tell him he was wrong. \n\nUm, I've since learned, and in fact that, that story is one of my catalysts for, um, just saying to people when you think something's wrong, they can always disagree with you, they can always not like you. Um, but you need to, you need to say, if something's not right and you're a consultant, you're hired because you have more information, right? You've got more insight. Uh, you're hired for your expert opinion. Give it, um, even if they're not gonna like what you're gonna say.\n\nSo that was three things. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What are the hierarchies of competence vs control?  Why does this matter?",
    "Description": "Explains the differences between competence-based and control-based hierarchies, their impact on decision-making, and why competence-driven models suit today’s fast-changing markets.",
    "ResourceId": "AaCM_pmZb4k",
    "Url": "https://www.youtube.com/watch?v=AaCM_pmZb4k",
    "Date": "2023-04-13T14:25:06Z",
    "Captions": "Well, that's a great question. What are hierarchies of competence versus hierarchies of control, and why does it matter? \n\nWell, let's define each one. A hierarchy of control is where everybody's told what to do, usually, obviously, in a hierarchy, right? Because it's hierarchies of control. But you've got the traditional organisational structure, the pyramid, right? You've got the small number of people at the top that are the thinkers, right? The deciders. And then you get the majority of people at the bottom who are the doers, and steering flows down, right? \n\nSo, in order for something to be decided, right, there needs to be some kind of trigger that a decision needs to be made. Sometimes that's just going to come from the top because the person at the top has an idea, and everybody shall follow it, right? Everybody shall do it. But sometimes it's a market trigger, right? And when it's a market trigger, this is hierarchies of control. In a market trigger, you've got the markets are actually at the bottom. The people talking directly to the markets are not the people at the top; they're the people at the bottom. They're talking to the shareholders, right? Which is a different sort of market, but who are talking to your actual market of your customers. \n\nSo, there's some kind of trigger, and it has to be important enough that this person who has no authority whatsoever and maybe doesn't give a crap, right? Because they're just doing what they're told, it has to be painful enough for this person that they filter that up to the next level, right? And then it needs to be painful enough for that person above, i.e. there's enough people below giving that feedback that they're like, \"Oh, I need to escalate this.\" And then it escalates, and it escalates. Escalation is the word to watch out for, right? So, we're managing by escalation. \n\nYou've got this item, this problem, escalated up the chain until it gets to somebody who, for want of a better expression, this is how my dad phrased it, you get to somebody who it's beneath them to deal with your problem, right? And they just say to somebody below them, \"Just fix it. I don't care,\" right? Just fix it. Or they just make a decision, and it doesn't matter whether it's the right or wrong decision; nobody cares. They just make one, right? Because at that level, they're not connected to the environment. \n\nAnd so, I worked at Merrill Lynch for a few years before it was bought over by Bank of America. So, Bank of America, Merrill Lynch now. But there were 16 people between me and the CEO. How long do you think it would take in that pyramidal structure for that trigger to get all the way to the top, a decision to be made, and then that to filter all the way down? And remember, it has to be the same message that filters down to the bottom, which is never the case because, you know, politics happens in here as well. \n\nSo, that's hierarchies of control. You're maximising the amount of time it takes for a signal, a message, to get to the person who needs to act on it, and then for the change to come all the way back down. And that was great when we were in the industrial revolution, right? Where these practices came from. Where, in fact, the mantra is \"slow and steady wins the race,\" right? Would be the watchword of the day because the customers aren't changing their mind all the time. The customers aren't exposed to a hundred different companies doing the same thing and then picking that you're making the product that they are buying. End of story, right? \n\nPerhaps really, really, really rich people could afford to import a product from somewhere else in the world, but otherwise, it's all kind of more local industry, right? If you want a ship and you're a shipping company, you go to your local shipyard in Glasgow if you're in Glasgow, or perhaps Southampton. But you're not going to buy a ship from a shipyard in China, right? That doesn't make any sense whatsoever. You wouldn't even know that shipyard existed, right? No marketing, no communications at that level. \n\nSo, that's hierarchies of control. Work great then, but today, with the speed of market change, right? Because there are no static markets anymore, you need this decision process to be much, much quicker. \n\nSo, hierarchies of competence are about kind of, I guess, kind of flipping on its head while still having a little bit of hierarchy because, kind of, I believe that there's definitely a human need for hierarchy, right? \n\nAny time you see a group of people who are challenged to complete some task, whether it's, \"Here's a pile of ropes and stuff across that river,\" right? They're going to have leaders that emerge based on their understanding or ability within that particular context, right? So, if you gave the same group of people another task, it might be a different leader that emerges based on the context that they're in. That would be a hierarchy created based on competence. \n\nI choose to secede some of my control over what it is we're doing to you so that we can all collaborate together to get to the outcome that we desire. And I'm deliberately choosing to secede that control to you because I believe you are the most competent person to do it. And you'll see in larger groups of people, there might be multiple different competing ideas for how to solve the problem. And perhaps you'll end up with two groups of people with two leaders that are both trying to solve it in different ways, and then you see which is the better outcome or the quicker outcome, more of the more optimal outcome, right? \n\nAnd that's just a natural thing that we do. So, the fundamental difference between hierarchies of control is, in hierarchies of control, you as an individual don't choose to follow; you are enforced to follow a specific person, even if you think they're the most incompetent idiot in the world. \n\nAnd in that model, there's an expression that you hear a lot, which is \"promoted to their level of incompetence.\" You heard that expression? That fits perfectly with that model because somebody is seen to be good at doing a job, and then they promote them to the next level up. And maybe the next level up is all about management and has nothing to do with actually doing the same job, and now they're not good at it. But you never demote people; you only promote people. So then they never get promoted again. So, they've been promoted to their level of incompetence. One level down, they're awesome; this level up, they suck, right? \n\nAnd so, you end up with these massive management structures and organisations because you've promoted this person to the level of incompetence, and oh crap, they're not actually doing their job. So, we need to find somebody else, so we promote this other person. I know they're actually good at it, so out of how many people at that level, how many people are actually useful? That's what hierarchies of control create, some of those structures. \n\nSo, in hierarchies of competence, you have no enforced structure in that manner. A good example might be Netflix. I think holocracy, they use some of those ideas where they have a board, which is kind of the enforced hierarchy part. They have a board who sets strategic direction, but everybody in the company's job is to figure out what can they do to best fulfil that overall strategy, right? \n\nSo, that could be, \"I'm going to go join this team over here because I like what they're doing,\" or \"I've got a cool idea, so I'm going to...\" What's it called when you attract people to your position? You know, you're going to be the leader and attract followers. That's the one! Attract followers and move in a certain direction. \n\nAnd that's all ad hoc and dynamic in that world. So, you can almost go, \"Well, that's all the way over here,\" and maybe your company's not ready for that. We're all the way over here in this top-down, terroristic waterfall model. You've got to figure out what's the first thing we can do to help move a little bit more in that direction to leverage the people that we have and get closer to the market and have a faster, shorter feedback loop, faster turnaround time between market triggers and actual things happening in our organisation. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "When is an APS course appropriate for a scrum team?",
    "Description": "Explains when an Applied Professional Scrum (APS) course benefits Scrum teams, helping identify and remove ineffective practices to improve authentic Agile delivery.",
    "ResourceId": "aathsp3IMfg",
    "Url": "https://www.youtube.com/watch?v=aathsp3IMfg",
    "Date": "2023-04-11T07:00:00Z",
    "Captions": null
  },
  {
    "Title": "Unlocking Effective Product Development: How a Hypothesis-Driven Approach Transforms User Experience",
    "Description": "Explains how a hypothesis-driven approach, small experiments, and cross-team collaboration improve product development, user experience, and continuous delivery outcomes.",
    "ResourceId": "wNgfCTE7C6M",
    "Url": "https://www.youtube.com/watch?v=wNgfCTE7C6M",
    "Date": "2023-04-10T07:00:18Z",
    "Captions": "So the question is how does the PSU course help teams make more effective product development decisions? \n\nI think the main value take away from the PSU is this hypothesis driven approach to software engineering, right? To product development. Hypothesis driven approach to product development that in order to know that you want to add something to the product, you need to have a reason for it to be there. Because Bob in accounting asked for it is not necessarily a good reason to add it to the product, right? It might be the right thing for Bob, but what about the 300 other people that use your product? Is it the right thing for them? And Bob might be quite important, but if Bob's happy and he's important but 299 people are unhappy with the feature you've created, then perhaps you're going to have a very negative impression build up slowly over time that overrides Bob and then the customer stops using your product, right? That's that bounce. \n\nSo having, um, creating hypotheses, right? Why are you adding this feature to the product? What value is it going to bring to the business? And how are you going to measure that you've been successful in the changes that you make? And then even once you've got all of that, figuring out what's the smallest experiment we could run to start validating that hypothesis, right? So that's effectively what you should build first. You should be running lots of little experiments for these different little features and capabilities that you might add to the product in the future, right? You might add the full thing to the product, but we need to run lots of little experiments to figure out what are the things that should go on to the main part of the backlog that we're actually delivering, right? That's that delivery channel to customers. This is this discovery channel, this design channel. Are we figuring out what it is we're creating? \n\nAnd the whole team works together on that. The whole team is part of that team that helps facilitate that. And I think that that for me is the big value proposition of the PSU. But it has a kind of additional side proposition in that quite often the design team, like the designers, are separate from the engineers and the designers go design stuff and kind of hand it over to the engineers and then the engineers go build it. \n\nAnd trying to figure out how do we bring that together, right? I mean, you can't expect everybody in your scrum team to be a UX designer. That doesn't make any sense. You've got to study your craft. Just like you can't expect everybody on your team to be a coder, right? You've got to study your craft. You've got to become good at your craft and then you're able to provide value and make the right choices and help with the team. So you're always going to need those expert level skills for these particular skills, but there are also lots of things that everybody on the team needs to understand about design so that they don't, what's a good expression? They don't cut the feet out from under the designers, right? \n\nBecause every person on your team is making lots of little micro decisions every day that may impact on architecture, the way things work, all kinds of things. It's going to impact in the product and perhaps they've spent a whole bunch of time going down this route that then the designers come out with a new way of designing that then has a massive cost and impact on the way the product goes together. And that could have been maybe reduced by having these two groups work closely together so that the team better understood the long-term strategic direction of what it is that the designers are trying to do and that they can incorporate some of those things into their continuous decision making, right? That way they make more of the right decisions and less of the wrong ones. \n\nAnd bringing those two groups together, so that for me is the second part to that story. Not just bringing hypothesis driven engineering in, which should be there anyway, right? But also how do we bring these two groups closer together? \n\nUm, and how do you balance how much of this work you do up front and how you integrate it into the stream of value that you're actually delivering on a continuous basis? So how do you bring this all together into a unified strategy so you can continue not only in the small scale, continually and repeatedly deliver value to the customers, right? But also in the hypothesis driven engineering, continuously run lots of little experiments, maybe five or six little experiments a sprint. We're trying to see the numbers change so that we can spend more time in that area. But that data from those hypotheses are then feeding back into the story that the designers, working with the product owner and the whole team, are figuring out like where are we actually going with the product? How are we shaping and changing it? And how do we incorporate those long-term strategic initiatives into this sprint cycle where we have this regular delivery cadence? \n\nSo answering all of those questions is for me the main purpose of the professional scrum with user experience class. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why Many Scrum Masters Stall at PSM1: The Crucial Role of Passion in Professional Growth",
    "Description": "Many Scrum Masters stop at PSM1 due to lack of passion. Ongoing learning, genuine interest, and active engagement are key to advancing and excelling in the Scrum Master role.",
    "ResourceId": "vWfebO_pwIU",
    "Url": "https://www.youtube.com/watch?v=vWfebO_pwIU",
    "Date": "2023-04-07T07:00:20Z",
    "Captions": "the question is why do so few scrum Masters progressed to the psm2 or the psm3 certification um and and ultimately it's because because they don't care right they're they didn't do it in order to become better scrum Masters or to understand the depth and breadth of being a scrum Master quite a lot of people do it because they've either been told to do it right their company has said go take this class or um the the the the had they took the class in order to get a certificate I always know those people because the first thing they ask is you know what happens with the exam what happens with the assessment that's you know that that's all they care about they want the they want the the certificate um for a job interview or for their professional development or whatever it is their company's company's doing um and those are ultimately not people they don't they don't care I I read this blog post once it was absolutely fantastic and it basically started with this phrase if you're reading this you're already in the top 10 of all software Engineers right and what the author was getting at was that there are so few people doing jobs and work that they actually care about that they actually love that they're willing to invest additional time perhaps outside of work in going and reading content on finding out what's going on and interacting with other people in their profession and learning more about it they just they just I'm done with work we're we're done and I'll pick it up tomorrow and I'm only going to do these with stuff within work time and that's not necessarily the type of person that is looking to to to launch their career in a particular direction that is looking to to to to to help and benefit a bunch of people working towards a common goal if if you're if you're interested in those things you're going to spend the time to go you know listen listen to some podcasts right outside of uh uh at work you're going to or you're enduring your commute right you're gonna instead of watching movies during your commute you're going to be listening to podcasts and reading blog posts and learning more maybe perhaps reading some agile books um and though those are the folks that actually progressed to psm2 and psm3 because they're actually interested in the content they're interested in the topic they're interested in in helping other people particularly for the PSM right because that's the scrum Masters accountability is the effectiveness of the team and the generation of value within the context of the organization so how do they learn those new things how do they figure out uh what it is they do I one of my favorite Expressions actually from a good friend of mine David Starr and I worked for Microsoft in the in in the US and he said um what do violinists and martial artists have in common that was his his question and you're kind of like well I don't know those seem like very different things but the answer is they practice right that's how they get good at what they do is they practice when do we practice when when do we get to practice our craft you tend to spend all day at work fulfilling your craft where's the time that you spend on making your craft better on on studying new ways of doing things of of of of perhaps practicing some of those things um that's the the the the type of person that transitions to psm2 and and perhaps psm3 right somebody who's really interested in diving deep learning more and helping other people uh get better at what they do by thinking about how can they help themselves be better at what they do thanks for watching the video If you enjoyed it please like follow And subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility"
  },
  {
    "Title": "What is the difference between a newbie scrum master and a professional Scrum Master?",
    "Description": "Explores why the distinction between 'newbie' and 'professional' Scrum Master is misleading, emphasising the role’s responsibilities, professionalism, and value in Agile teams.",
    "ResourceId": "PIoyu9N2QaM",
    "Url": "https://www.youtube.com/watch?v=PIoyu9N2QaM",
    "Date": "2023-04-06T07:00:08Z",
    "Captions": "So the question is what is the difference between a newbie scrum master and a seasoned experienced scrum master? \n\nI think it's their approach. So when you're new at something and you have lots of choices on the way you approach a problem, you're going to pick a way and try it. You're going to practice, and the result of that gives you a little bit more experience, right? Some XP points to start levelling up and figuring out what are the things that you know work better within a context. \n\nBecause I guess it depends on the context of the team that you're working with, the context of the organisation, and if you shift those, you might have to relearn a lot of stuff again. But the seasoned scrum master already has a bunch of that knowledge and experience, and quite often those experienced scrum masters go off and write books and blog posts and do videos that the newbie scrum masters are going to watch to try and get a leg up. \n\nBut there's a difference between knowledge, which is what you're gaining that way, and the experience of how to use it. Right? Because those experienced scrum masters have seen this is the practice that I kind of like, that's my default, right? So I'm going to default to this. But you know for this type of company, that's probably not the best way to do it. Maybe I need to go to try one of these other practices because I know already before I walk in the door that this one's not going to work or it's not going to work yet. \n\nI know that I can get a group of people in a company to move towards this thing by doing these little steps along the way, so I'm going to try each of those steps. \n\nYeah, so I think the fundamental difference is iterative and incremental, right? Actually living the scrum dream rather than just talking about it. I.E. it's not a bullion value proposition. Using scrum in an organisation, it's not a you're doing scrum, you're not. Right? It's a journey to get from what people aren't doing to where you want them to get to. \n\nAnd usually those things are not, they're doing a daily scrum. Right? Who gives a crap about a daily scrum? Right? Do they continuously and transparently understand as a team where they are on a daily basis? Right? That's what the value proposition we want over here. How are you going to get the team towards that so that they understand what's going on on a daily basis, their tactical daily situation? \n\nWhat about their long-term strategic? Right? Do they understand going forward into the future over the next five or six iterations that they're working on or five or six things that they're doing? Do they understand what direction they're going? Right? Do they understand the overall strategic direction of the product? \n\nRight? If they don't understand those things, we need to bring in mechanisms to help them get there. And I think a newbie scrum master will go straight for the end game. Oh, we need a product goal. Right? Well, let's deploy a product goal now that's fixed. Right? And they wonder why it doesn't actually change the way the team's working. It doesn't actually change the value proposition that the organisation's getting. \n\nBut the battle-hardened seasoned scrum master will know that if you go straight for this, it will become mechanical. Nobody will get it. They'll just do it because they've been told to do it, not because they understand the value of that thing. Therefore, they want to do it and want it to work well. Right? Everybody in the team has to want to do it and want it to work well in order for this thing to be successful. \n\nAnd this is true for whole companies as well, not just for a team. Right? Micro and macro. \n\nSo the seasoned experienced scrum master is going to start perhaps with teaching the scrum team some of the basic concepts back to empiricism and transparency and lean. Right? Are we actually able to create those things? What does it mean if we don't have those things? \n\nLet's look at the data for what we're actually delivering and see where the problems are and lead the people to their own conclusions, which hopefully positively impact those things and start moving us towards that goal. \n\nAnd that's where you start getting into more coaching rather than consulting. Right? Because you're creating an environment within which the person or group of people are able to understand and come up with their own answers for the problems that we're trying to solve in the situation we're trying to get to. \n\nWhereas consulting is a little bit more the something we need to fix, something we need to flip, switch, we need to flip. We've got to get that changed quickly, and then perhaps the coaching kicks in later because they don't know how to do those things. \n\nSo I think that that's the difference between a newbie scrum master slash agile coach, because for me, they're the same thing, and the battle-hardened scrum master at agile coach. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Is Your Scrum Master Struggling? Discover When to Choose an Agile Process Simulation Workshop",
    "Description": "Learn when to use an Agile Process Simulation workshop to support struggling Scrum Masters, improve team dynamics, and foster collaborative, effective Scrum adoption.",
    "ResourceId": "76mGfF0KoD0",
    "Url": "https://www.youtube.com/watch?v=76mGfF0KoD0",
    "Date": "2023-04-05T07:00:03Z",
    "Captions": "Oh, so if a Scrum Master was battling with their team, would you recommend an APS workshop or an agile consultant? I may recommend a new Scrum Master, right? Because if the Scrum Master is battling with the team, that doesn't even make sense. They're there to help the team be effective; they're part of the team. If a whole team is battling with them, then that makes them the [ __ ]. Right? I think it does. I guess it would be circumstantial, but that's how I feel.\n\nWith an APS workshop or an agile consultant, be better. What I tend to do as an agile consultant is more of a coach, the coach, right? So I'm happy to be there, observe the team, maybe give the whole team advice if that's what's asked for. But I would tend to focus on observing and then coaching the Scrum Master. If the Scrum Master is battling the team, maybe that's not going to be effective, right?\n\nSo probably it depends on what the Scrum Master is battling the team over. So if the Scrum Master is battling the team, like the team, I, we, the team are objecting to doing things that could potentially benefit them, it's kind of let the team decide. It's meant to be a democratised process, not a dictatorship. So the Scrum Master can't dictate anything, but perhaps there's some value in helping the team understand more about what Scrum, for example, has to offer so that they have more ammunition to make a determination, and perhaps they'll make a different determination, right? Because if the team decides not to do Scrum, they probably shouldn't be doing Scrum, right? Because if you enforce it, they're not going to like it, they're going to push back against it, and you're not going to have a good time. It needs to be a chosen thing.\n\nSo what I might suggest is yes, an APS workshop, and treat it as a workshop, treat it as having fun, right, from their perspective. But also from my perspective, they're all going to bring the things, the reasons why Scrum can't work for them. So it's almost like a hybrid. That would, for me, be a hybrid situation where I'm going to run an APS, where I may run an APS workshop, but I'm going to treat it very much as a consulting gig that they do want some answers, right? They don't necessarily just want to understand APS; they want to understand EPS within the context of their company and their problems and their issues. Because there's no point in just teaching them Scrum if they're vehemently opposed to the idea of anything like that or anything being imposed upon them.\n\nSo probably approach it from that perspective, that we're going to use the APS curriculum as a way to shape the conversation and hit all of the things that we need to hit. But even at the end, at the end of the APS, I've mentioned this a couple of times because I just love this feature of the APS. After we've had those conversations, right, whether it's a standard APS where I've got a bunch of public students and we teach the class, they learn a bunch of stuff about Scrum, but we don't necessarily dive too much into their individual context, or if it's a private gig like the one that we're describing here, where we're able to spend as much time as we need on their stuff as well and understanding that link because it matters to everybody in the room.\n\nAt the end of the class, we have this session where we dive into what should you do, right? There's a number of little workshops that I can run with the group that's in the room that depends on what the group is. One of those is a kind of getting started with Scrum workshop. One of those is a tune-up, right? We're already doing Scrum, and we need to tune up our process. What should we look at? But we also first have a kind of set of questions to set them up, and one of those is should we use Scrum? One of the questions is what are the reasons we shouldn't use Scrum? What are the reasons we should? What will happen if we don't change what we're doing? Because those are important questions, not for me to answer, but for them to answer for themselves.\n\nDo they feel their current way of working is actually working? Is it actually providing value to the customer? If not, what are they going to do to change? We've just talked for four half days about a bunch of tools that they could use to help them change. Are they going to try some of those tools, or do they want to try something else? If you think those tools won't work, what needs to change in your organisation in order for that to be effective? And I think that's probably the way I would approach it, a kind of hybrid APS with some agile consulting in order to help the team make better decisions. And you know when to have a long chat with the Scrum Master if they're battling the team, right?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Navigating My Most Memorable Challenge as an Agile Consultant: Lessons in Readiness and Engagement",
    "Description": "A personal account highlighting the importance of organisational readiness, engagement, and listening for successful agile consulting and meaningful change in teams.",
    "ResourceId": "sKYVNHcf1jg",
    "Url": "https://www.youtube.com/watch?v=sKYVNHcf1jg",
    "Date": "2023-04-04T07:00:16Z",
    "Captions": "Um, so the question is what was your worst day as an agile consultant? \n\nAnd I think the worst, well, was it my worst day or was it the customer's worst day? The worst day I can actually think of is going into an organization. I'm going to be on site for a week, so I'm consulting, right? I need to help them fix their stuff. \n\nUm, and I get into the office, shown to a cubicle. This was in the US, so I got shown to a, here's your desk for the week. Sean's the cubicle. Sat down and then the person that sat me down disappeared. \n\nUm, and I was sitting there for, I don't know, two or three hours. Nobody had come by, nothing was going on. \n\nUm, so I just, you know, I called my boss at the time, Steve Borg, and I said, uh, I'm just sitting here, by the way, they're not doing anything. He's like, what do you mean? What do you mean? Just sitting in this cube? Everybody disappeared. And he's like, oh, let me see if I can find anybody. He made a few calls. They weren't ready for me yet. So he called me back and he said, uh, we booked a flight for you. Just go to the airport and come on home. \n\nAnd it took the customer three days to realise I was no longer there. It took them three days to realise that I'd just gone home. That's how long it took them to be ready for me, and that was three days into a five-day engagement. \n\nRight? \n\nUm, so that was probably the worst day for the customer. They just weren't ready, right? They weren't ready for any sort of change. They obviously weren't ready to listen. \n\nUm, and they weren't ready to do that. But I'm not ready to listen. I also did the same engagement three years in a row with a customer. \n\nSame time a year, same group of people. They would invite me to their organisation. We'd sit in the boardroom. They'd talk about all the stuff they're doing. I'd give them a bunch of advice. I did a whole bunch of interviews with everybody, lots of different people at different levels in the organisation. I created a lovely report. This was the first time I went. Lovely report on here are the things you need to fix, the things you need to try. \n\nUm, changes you might want to make, things you might want to do. And then I would come back the next year and they'd be like, yep, we've done none of the things you said. Let's have a chat and figure out what we should do next. And it was exactly the same things because nothing had changed, right? \n\nUm, and I would come back year after year to the same company for the same few days on site with the same group of people who would agree that they haven't done anything to change anything. And then we would maybe troubleshoot some small issues around the edges and help them out, but \n\nUm, again, that's not a good day as an agile consultant because you're not making progress, you're not helping the customer, you're not providing them with value, right? \n\nSo I always feel like I work with lots of customers and if \n\nI'm not, if I'm working as an agile consultant and I'm not getting fed problems \n\nUm, by the organisation, right, to be able to help them out, I'm gonna wander off. \n\nRight? And I'm usually pretty clear if it's a longer engagement. I'm usually pretty clear on that up front, right? If I feel like I'm giving you a bunch of advice and you're just ignoring it, then maybe we're not a good fit and I shouldn't be here anymore. \n\nAnd I think those are the days that kind of suck, is when nobody's listening to you. You're seeing the things you're saying, this thing's gonna happen if you keep doing it this way. And then you've just got to sit there and watch them fall into that trap. \n\nAnd then they come to you and say, oh, we're so broken. Can you, can you, we're totally hosed now. Can you help us fix? And it's like, well, we'll know, like six weeks ago when I told you about the problem was when you could have fixed it. Now you pretty much want to pay the fine for non-contract completion and walk away because that's all you've got left. \n\nI think those are the days that kind of suck as an agile consultant. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments. And if you want to have a chat about this or anything else agile, scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How will a PSM II course challenge your assumptions the most?",
    "Description": "Explores how the PSM II course challenges common misconceptions about Scrum Masters, emphasising advanced skills, team empowerment, and evolving Scrum practices.",
    "ResourceId": "4fHBoSvTrrM",
    "Url": "https://www.youtube.com/watch?v=4fHBoSvTrrM",
    "Date": "2023-04-03T07:00:03Z",
    "Captions": "Oh, that's a good question. How will a PSM2 class help a Scrum Master progress in their career? I think the thing we tackle in the PSM2, or the advanced PSM, is the things. \n\nAlright, how do I explain this? Craft is a great word for this. When you do things for long enough, craft builds up all the things that are holding you back, like the barnacles on a ship. They're making it slower, it's less effective, it's less sleek, and the PSM2 is about scraping those barnacles off so that you can go win the race, so you can be more effective. \n\nWe pick up all sorts of weird things that we... it's the way we work, right? Our ways of working get indoctrinated into the company's way of working, and sometimes we're forced at certain points in our career or in doing stuff to make compromises. Those compromises work great in that space, but then they become enshrined in the way we do things, our craft. We adopt some of that craft, and we need a little bit of a reset to figure out what is and isn't the ship and what is the bit we can get rid of. \n\nIf I'm back to the barnacle analogy, the PSM is about removing the barnacles from the ship. That's really what it's about. It's about identifying those things that you find that Scrum Masters get pushed towards in organisations because perhaps when they were starting out as a Scrum Master, they didn't have the confidence to say no or the confidence to correct leadership or the confidence to challenge leadership and say, \"No, we need to do things a little bit different to be more effective.\" \n\nThen that craft gets just added to our baggage. So it's really that differentiation of, again, what does a professional Scrum Master look like? Here are a bunch of things that we've learned how to do, and then bring it towards what we do want people to do as a Scrum Master. \n\nI think there's lots of people who are Scrum Masters who perhaps have been Scrum Masters for quite some time and have had no formal training. They've not had any experience whatsoever of exposure to... maybe they might not even have ever read the Scrum Guide. That's quite... I have met those folks as well. \n\nThey've been doing it, but they've been doing the role. They've been picking up the accountability, they've been doing the things in the organisation, and they don't want to go do a Scrum Master class because they're like, \"Well, I know how to be a Scrum Master.\" Right? They don't, but I don't know how to be a Scrum Master. \n\nPerhaps the advanced Scrum Master is a good way to level set a lot of those myths, and that's something that we do at the beginning of the PSM2, the advanced Scrum Master classes. We kind of try and kick some of those common myths that you see people fulfilling as a Scrum Master and reset very quickly. \n\nAt the start of the class, there's a quick reset to here's what it should look like. Based on what it should look like, what are a whole bunch of skills, workshops, activities that you could run with your teams? I feel like that's what the advanced Scrum Master really teaches. It's got that short, sharp level set at the beginning, and then it goes into a teaching through experience, right? \n\nThrough participation, teaching different techniques. We teach a whole bunch of different liberating structures to help not, you know, make getting a bunch of people together suck less because it generally sucks in organisations. How do different things go look at, right? \n\nSo how do you help the team understand and improve their definition of done? Well, there's little workshops and things that people can take away and do that, which is why I think at the end of the class, there's like 20 to 30 posters, a big infographic that you can take away to maybe leverage with teams and help them become more effective Scrum Masters. \n\nHow do I, as a more effective Scrum Master, help my team be more effective as well? So there's kind of two sides to it. There's the craft that we've built up doing the role, even if we wear a professional Scrum Master. Right? We passed our PSM1 like five years ago or even 10 years ago or 13 years ago, like myself. \n\nWe've built up some crafts and barnacles that get stuck to the hull. We need to knock them off, or we never had any formal training at all, and we've been doing the accountability, trying to do the accountability of the Scrum Master. Perhaps we've learned from other people's... we've adopted other people's barnacles onto our way of doing things, and we need that level set. \n\nThen what are the tools and techniques we need? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "The Truth About Newbie vs Professional Scrum Masters: Bridging the Experience Gap",
    "Description": "Explores the real differences between new and experienced Scrum Masters, challenging common myths and highlighting the importance of accountability, value, and mindset.",
    "ResourceId": "2k1726k9zvg",
    "Url": "https://www.youtube.com/watch?v=2k1726k9zvg",
    "Date": "2023-03-31T07:00:03Z",
    "Captions": "Oh, I kind of like that question. What's the difference between a newbie Scrum Master and a professional Scrum Master? I feel like neither of those things exist, right? I think that's where I would go initially, and I would say that there's no such thing as a newbie Scrum Master. You become a Scrum Master because you've demonstrated that competence in your team to be able to help them be more effective, right? So you're not really a newbie; you're just picking up that accountability of the Scrum Master. You are an experienced, effective professional at that point when you pick up the accountability of the Scrum Master. \n\nSo I feel like that newbie is a bit of a thing, and really there's no such thing as a professional Scrum Master. That's just a Scrum Master, right? Just as there's no such thing as a newbie Scrum Master, a professional Scrum Master is Scrum.org's brand of how they explain things. But if you look at the Scrum Guide, it doesn't talk about professional Scrum Master or true Scrum Master or certified Scrum Master, right? It doesn't talk about any of those things because there is just the Scrum Master.\n\nAnd I think if we were to look at professional Scrum Master and see, well, what is it? It's trying to create that idea around we need to approach the role of a Scrum Master from a professional's perspective. It's not just, we're not just playing the Scrum Master; we're not just decking around as the Scrum Master. It's a professional role that provides value to the organisation. It provides value to the team. It's picking up accountabilities that perhaps if everybody on the team picked them up, because maybe everybody on your team is capable of picking up the accountabilities of the Scrum Master, the team would have a hard time getting anything done if everybody's picking that up. \n\nSo that's one person who the team respects, says, \"Well, I'll pick up some of these things and go sort them out so that you can all focus on delivering valuable product and being as effective as you can at delivering valuable product.\" And here's some things that I'm going to pick up and help with and help enable you as a team to do the stuff that we need to do, right? And I think that's that idea that Scrum.org is trying to sell of the professional Scrum Master. \n\nOf professional Scrum is that we're doing the thing rather than going, \"Well, you know, we, you know, I'm going to be the Scrum Master,\" but in actual fact, it's Sprint planning. I'm going to, you know, tell the team, \"Right, you're not taking on enough work this Sprint. I'm sure you can fit some more work in there.\" Oh, Bob, have you, you don't have enough stuff assigned to you? I think some more stuff, you can take on some more stuff this Sprint, right? And that idea of, well, that's not Scrum Master, right? That's, that's, well, I guess I might say that's a project manager. But even if you were a project manager and you were doing that, you kind of suck at project management too. \n\nSo that's just somebody who sucks. That's not a professional. When you're a professional, you figure out what are the things I can do to help my team be more effective, right? Help the group of people that I'm working with or that I'm managing, right? It doesn't matter what terminology you use. How do you help that group be more effective? Stop doing things that are less effective or try and change things in your organisation that are less effective and increase their effectiveness. That's really all we're talking about from a professional Scrum Master perspective is do the thing. Don't just mess about the edges of the thing; actually do it.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is becoming a Scrum Master a great career option?",
    "Description": "Explains how becoming a Scrum Master builds leadership skills, advances your career, and enhances team effectiveness within Agile and Scrum environments.",
    "ResourceId": "XZip9ZcLyDs",
    "Url": "https://www.youtube.com/watch?v=XZip9ZcLyDs",
    "Date": "2023-03-30T07:00:10Z",
    "Captions": "That's a good question. Why is becoming a scrum Master a great career option? \n\nI feel like the scrum Master is the first next step for a team member on the leadership track. Right? Like the gold shirts in Star Trek. You're wanting to move forward, you're wanting to take on more accountabilities. You want to demonstrate to your organisation that you can lead, that you can bring a team along on a journey. \n\nI think for that you have to demonstrate that leadership before you get the position. If you're a team member, you've been working every TF team for a long time. Perhaps you've had a focus on excellence in whatever it is that you do, right? Because your background might not just be coding; it might be testing, it might be operations, it might be documentation, right? Whatever that is. \n\nIf you've had a focus on excellence in how can I help my team be more effective, just as an individual, as an expert on that team, then I think it's logical that people on the team are going to look to you for some of those answers. If you're the knowledgeable person about automation and how can we get better at doing this thing and make what we're doing slicker so we add more value to the customer, then that's you demonstrating that leadership ability that hopefully every member of your team has. \n\nBut if you stand out, perhaps they'll be looking to you more and you'll kind of naturally fall into that scrum Master role for the team. The accountability you're picking up, that accountability that's perhaps lying around. \n\nOnce you're there and the team respects you and respects your ability to help them become more effective, then that will be seen hopefully in the organisation. For me, that leadership track from a team member starts with scrum master and then into wherever those go in your organisation. Every organisation is different for how that flow is, but it's that step on the leadership ladder. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Can organisations run an Applying Professional Scrum workshop? How would that help them?",
    "Description": "Running an Applying Professional Scrum workshop helps organisations build agile skills, improve teamwork, and adopt Scrum practices through hands-on, collaborative learning.",
    "ResourceId": "olryF91pOEY",
    "Url": "https://www.youtube.com/watch?v=olryF91pOEY",
    "Date": "2023-03-29T07:00:17Z",
    "Captions": "All right, so the questions can organizations run a professional scrum applying professional scrum workshop and how will it help them? \n\nI think of that they can. We teach probably more private applying professional scrum EPS classes than public ones. It can be of huge value to have everybody within the bounds of the class be from the same company, right? Because you can maybe have conversations that you wouldn't want to have in front of, let's say you're in a class and one of your competitors is also in a public class, right? You want to air some of the dirty laundry that you might want to hear during that private class. \n\nOne of the big advantages of the APS class is that it's an experiential class. It's a practical, how do we engage in problem solving? So the first part of the experience that people have as a group, right? So if you bring your whole team to the class, is that they get an understanding of how they currently approach problem solving. \n\nThis works for both teams that are doing scrum perhaps and have been doing it for a long time and kind of want a tune-up, as well as teams that are not doing anything particular and want to change to doing a new process. Maybe there's some capability in scrum that we want to leverage. \n\nThe first exercise that we have them do is a practical exercise, building product. It's generally a bit of a car crash, right? So they learn how their current approach and the outcome they get from their current approach. We kind of throw people in the deep end and we just ask them to build some stuff, right? But that's their default process. When you and your company go ask them to build some stuff, this is how they initially approach solving the problem. \n\nThen we go through the process of, it's usually quite dramatic, by the way, that experience, especially me providing feedback on the product they've created, especially if they deliver a PowerPoint presentation instead of an actual product, right? Which has happened on occasion. But I can be quite negative about the work that they've done, right? Which is very traumatic for the people that are hearing it. \n\nSo they get this kind of shock of, oh, maybe we've got a problem. Maybe we're not understanding how we're supposed to get to working usable product at the end of every iteration. Maybe we need to think about this differently, right? They've just failed, so their minds are more open to change. What could we do differently in order to have a more happier outcome? \n\nThen we teach them scrum. We're on a bunch of exercises, we have a bunch of conversations, and then we do another sprint where they use scrum practices. They have a scrum master, they have a product owner, and that difference in how they feel, right? Connected to the way they work currently changes their perception on what it is they're trying to do. \n\nHow are we trying to solve this problem? How can these tools that we're talking about, scrum, how can this tool help us get better at delivering usable working products? There's more to it than that, right? There's much more to it than that, but that's one of the key learning outcomes of the class, is that practical engagement with the people that are actually there. \n\nIt really helps when you've got a cross-functional group of people. So I actually don't recommend just bringing your software engineers or just bringing your testers to a class, although I've had people try and do that. You want to bring a whole, who are the people that are building this product, right? So maybe you've got a team of five to ten people who are working on your product. Who are the other people that engage with them? \n\nThat might be stakeholders, that might be other people from other teams, it might be people in leadership positions that engage with this team. Bring everybody to the class so they all get a clear understanding of what value scrum is bringing, right? Because you want the people in a leadership position to help enable this thing. You want the stakeholders to help enable this thing and get engaged in the process and provide help and support to doing things differently. \n\nIf everybody that surrounds your team, your group of people that you want to do things differently, aren't inherently understanding and engaged in that process, they may not understand why you're doing things a particular way. Then they feel like it's not going to provide them with value, so why would they support it? In fact, maybe they sabotage it, not consciously, right? But you're not providing what I just want this thing, and that might not be the engagement that's required. \n\nHow can it help, right? Quite part of that question is, it gives everybody that may be involved in this process a clear understanding of what value it's intended to bring. It gives them a clear understanding because during the class, you know, you've kind of got a safe environment to do things differently from the way your organization is. It gives them a chance to put their baggage, organizational baggage down and do things a different way. \n\nThey also get a clear understanding of, well, maybe we like this different way, right? Everybody within the bounds of the class sees that they like this different way, but they realise that there are organizational things that are going to make it difficult to do that differently. If you have the support of your stakeholders, leadership, and all the people that are building the product, it's very easy to make changes to the way your organization does things, right? Because everybody's supporting it from that perspective. \n\nI think that that shared vision of what it looks like going forward into the organization is, for me, the clearest value proposition of the EPS workshop. Everybody's then on the same page, everybody understands what we're trying to do, everybody's potentially supportive, right? That's part of my job as the trainer is to not only teach people scrum but help deal with those, I don't know what you call them, when there might be negative perceptions of scrum or agile or whatever that come from how people have seen it work at other organizations or how it's been used. \n\nTrying to dispel a lot of those myths, poke at some of those things, and help everybody understand what they could get from it if they did it in a way that provided the organization with value, right? \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "When should an organisation consider a professional agile consultant?",
    "Description": "Organisations should consider a professional Agile consultant after project failures or for fresh, expert insight to drive improvement, growth, and effective Agile adoption.",
    "ResourceId": "y0yIAIqOv-Q",
    "Url": "https://www.youtube.com/watch?v=y0yIAIqOv-Q",
    "Date": "2023-03-28T07:00:21Z",
    "Captions": "When should an organization consider a professional agile consultant? \n\nThe easy answer is when they've just most unimaginably failed to deliver or failed to be successful and would have unfailed to be successful in whatever endeavour they're trying to achieve. \n\nBecause I actually learned this from Ken, at that moment when an organization is reeling from that failure, they are most open to change. They are most open to doing something different. We need something different; we need to try something new. \n\nAs this has backfired on occasion, I do know of a company that only uses Scrum and Agile when a project is in jeopardy and then falls back to Waterfall. So they run all these projects Waterfall and then near the end of the project they have to switch to Scrum to actually deliver it, and then they switch back again, which is totally weird, but that's how they do things. \n\nThat failure to deliver creates that desire and need for change, so that's probably the best time to bring in somebody to help. \n\nUnfortunately, there's an unfortunately there as well, is that quite often companies turn to really large consulting companies who, although they talk a good talk, don't necessarily actually understand standard. They don't really understand it. Companies are won over by fast-talking PowerPoint presentation gurus that are able to talk a good game but can actually deliver. \n\nThat's the risk at that moment, right? Because they're desperate for help, and then they'll take whatever's on offer, and there's not always the right thing. They're going to find the right agile, which is why I guess you said professional agile consultant, right? You've got to get that professional one in there. \n\nBut I think that's probably the key time to get them in. But really, the other answer is anytime. Maybe you're being really successful and you wonder, could we be better? \n\nSometimes having somebody come in from the outside and look at what it is that you're doing, and something that I've done a whole bunch with organizations is kind of like a, I guess I would call it a state of agile report or a state of DevOps report, where I come in and I interview a whole bunch of people in the organization, generally solo but sometimes in teams, and just ask them how they're doing. \n\nHow do they, you know, what's their cadence for delivery? How often do you have working products? Asking all the way up through the organization and into leadership as well, and hopefully you can get a hold of some customers too, right? Because they always have good stories to tell. \n\nCreate that, like, what's the next big thing that this organization should tackle? I don't think that often comes from the inside without a little bit of outside injection of knowledge or a different way of thinking or a different way of looking at the problem. \n\nBecause when we're in the jar looking out, it's difficult to kind of see what our own problem is. \n\nSo yeah, both when you're totally hosed and when you're not, right? So pretty much anytime. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What was your best day as an Agile consultant?",
    "Description": "A personal story highlighting how Agile consulting and Scrum workshops sparked lasting transformation for a development team, with impact felt years after the engagement.",
    "ResourceId": "iT7ZtgNJbT0",
    "Url": "https://www.youtube.com/watch?v=iT7ZtgNJbT0",
    "Date": "2023-03-27T07:00:30Z",
    "Captions": "I think my best day as an agile consultant is difficult to answer so I'm going to answer it in two different ways. My most memorable moment as an agile consultant actually happened about seven years after the engagement that it pertained to.\n\nSo I did an engagement in Utah where we did some training and workshops and consulting with a team of Java developers. At the time, I know nothing about Java but Java developers. I mean, I thought it went well. We helped them understand Scrum, we helped them understand agile, we did some user story workshops, we did some engineering practices workshops. I actually did a TDD explanation and lesson, and we did a TDD kata together even though I was writing in .NET because I know nothing about Java and they were writing in Java, and they were still correcting my code on the projector.\n\nBut about seven years later, I got an email from one of the participants of that engagement just to let me know how much of a game changer that experience was for him, his team, and the organisation. That experience, I think I was only on site for five or six days, but that experience for them felt like a catalyst for so much change inside the organisation.\n\nI still speak to people that are from that engagement and hear from them on occasion, and they always talk about it in that way. I've even done gigs for people that have left and gone to other companies, and they've asked me to come in, but kind of nothing's compared to that one, which is funnily enough, that was the first APS class I ever taught, which was a lot of fun.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Mastering Scrum: Effective Planning and Prioritisation for Agile Success",
    "Description": "Learn how to plan and prioritise effectively in Scrum by aligning with business goals, assessing value and risk, and keeping a lean, focused product backlog.",
    "ResourceId": "sPmUuSy7G3I",
    "Url": "https://www.youtube.com/watch?v=sPmUuSy7G3I",
    "Date": "2023-03-24T07:00:30Z",
    "Captions": "the question is how does the scrum team plan and prioritize work effectively let's leave aside for a moment that the word prioritizes singular rather than plural because that always triggers me a little bit but um the how do they plan and prioritize and that's actually it's actually quite difficult because it depends on the business it depends on the organizer like what is the business trying to achieve the work flows from the business so you need to understand what the business is trying to achieve what are their goals where are they going and then align the work towards those goals and outcomes and how they might actually do it they might um they might do sizing right I'm trying to avoid the e word right the estimation word um they might do they might do some form of sizing right we want to figure out how big some of these things are because that's going to impact on the ROI of the item um they need to understand well how valuable is this item which is a bigger problem because now the business needs to understand what value is right which is a whole whole bigger problem for the product owner and once you kind of understand how much how much how much value there is and you understand how how big things are you also probably want to understand how risky things how much risk is involved in this item um and with all of that information then we can start to figure out uh um like value minus risk divided by size there's a poor man's order of your product backlog right there's a first order and then you could nuance it from there but the reality is that I really don't expect people to have that many things in their product backlog the one of the most important things that folks can do to help plan and prioritize the work is not have so much crap to plan and prioritize right and if you've got 5,000 things in your product backlog it's not a product backlog it's a dumping ground right there's there's no 5,000 things that the product owner and the scrum team and the stakeholders can actually understand what is in there and what this thing is they would need to um remove as many of those things as possible get rid of the the the I don't know all the stuff that's just getting why is there so many weeds in the way to try and find the value that you need to need to deliver the best product backlogs are small um the best product backlogs are probably um two or looking two or three sprints into the future maybe a little bit more if you're a large organization but the further out into the future you look the kind of higher level the item is therefore it's less granular and there's less detail i.e. less weeds right because it's a big thing it's a tree rather than being a plant that you can go deal with and move around and I think that that de-scaling de-escalation removing as much as possible so that they can focus they can focus on the things that they're trying to create what is what is what is the business trying to achieve select the things that go towards that achieving that business goal and iterate right you need to be collecting data and looking at are we actually being successful one of the key key pieces to to planning and prioritization is are we even working on the right thing and how do you know if you're working on the right thing if you have no collected no data to understand how your customers are using it what your customers want um you're building features are they still being used by your customers should you be removing stuff from your products instead of adding it I think it all comes down to a massive of data analysis and understanding of um what it is that that you're trying to achieve so merging those those long-term goals of the business with the short-term goals of the product and the data to back up to validate your hypothesis right thanks for watching the video if you enjoyed it please like follow and subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility"
  },
  {
    "Title": "Would you recommend the APS course to a newbie scrum team, and Why?",
    "Description": "Explains why the Agile Practitioner Series course is ideal for new Scrum teams, focusing on practical Scrum skills, organisational change, and team empowerment.",
    "ResourceId": "rPxverzgPz0",
    "Url": "https://www.youtube.com/watch?v=rPxverzgPz0",
    "Date": "2023-03-23T07:00:15Z",
    "Captions": "So would I recommend the APS course to a newbie scrum team? I think that's its sweet spot and what it was designed for. The outcomes I love about the EPS I've talked in other videos about like what happens in the APS, but the outcome is a realisation of what needs to be different in your organisation in order to give this thing a try.\n\nSo if you're a new team in an organisation moving towards scrum and your organisation maybe has done a little bit of scrum, maybe hasn't, maybe it's brand new to them, one of the exercises near the end of the class is based on everything that you as a team, you as a group of people attending this class have learned. What are the things that are going that you would need to change in your organisation in order to be successful at this? Because we've just talked about what it should look like, the levels of transparency, the interactions between people, the accountabilities, and perhaps those are just not present in your organisation. So what does need to change?\n\nEspecially when I have groups of people that are new, very new to scrum, there's a moment at the end where we create an organisational change backlog. It works the best when you have leaders in the room. If you've got a big class and you've got leaders in the room, I can actually say, so who's the most powerful person in the room? Who's the hippo? Right? Who's the most powerful person? And I've done this in classes where it's the CEO, right? And the CEO says, \"I am.\" I'm like, this backlog's for you, right? And I literally give it to them. It's one bit that's maybe a little bit better in person because you're ceremonially giving them this huge stack. I've had 50 cards out of a class before. Here are all of the things that this group of people that have just been through this class believe need to change in your organisation in order to be successful at this. That's hugely powerful, not only from the perspective of the people feeling that they're heard to come up with it, but also powerful from the CEO participating in the class, like demonstrating that this is important enough that I turn up and receiving that backlog, but then actually doing something with it.\n\nThat's where there's been the most impact from the EPS, is when there is somebody in the room who can take that backlog, who can then do something with it. Because you get like, who's the most important person? Here's your backlog. Who can help them? People volunteer in the room. Could one person from each team volunteer to help this person action some of these items and figure it out? People volunteer and they feel involved and they feel empowered, and it creates this, like, I don't know, get up and go, this gumption to go make the change, go do this thing differently and try something new, right? Try something different and see if it's successful.\n\nAnd I think that for me is why a newbie team moving into scrum, moving into agility is almost the sweet spot of the EPS class. It's also great to realign people who have been doing scrum for a while and think they know everything, right? We need to be doing user stories and we need to be doing story points and we have to do estimation and scrum says we can't change the sprint backlog after we've started the sprint, and all of these crap things that are nothing to do with scrum whatsoever. But people believe they are because that's how they do things in the organisation. And that realignment also results in some of the same epiphanies as well. It's not as huge as new teams, but creating that organisational change backlog, \"Oh, we've got something wrong, let's adapt, let's change it, let's bring some of that empirical process into the way we do business as well.\" Hugely important.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "How good is the APSPO course in helping leaders determine product direction and Why?",
    "Description": "Explores how the APSPOA course equips product owners and leaders with tools and techniques to shape product direction and develop key Agile leadership skills.",
    "ResourceId": "nTxn_izPBFQ",
    "Url": "https://www.youtube.com/watch?v=nTxn_izPBFQ",
    "Date": "2023-03-22T07:00:17Z",
    "Captions": "So how how good is the pspoa course in helping leaders determine product direction and why? \n\nWell, I for me this is one of those ones where well it doesn't right leaders should determine product direction the course isn't going to tell them how to do that. \n\nUm but there are tools in the pspoa that will help leaders and product owners understand what are the things that they're not doing that they probably should be doing. \n\nRight a lot of product owners are not great product owners only because they aren't necessarily focused on the breadth of product ownership. \n\nSo for example many product owners focus solely on the aspect of being a great customer advocate. \n\nRight but in being a great customer advocate they sometimes leave the innovator to the side whereas they should be an innovator as well. \n\nAnd that gap means that they're not being the best product owner they can be. \n\nWhat are those gaps? \n\nUm yeah I was talking about the difference between the customer advocate and the innovator. \n\nAnd the product owners quite often focus on just that one thing when they should be focusing on many different things. \n\nIn the pspoa we talk about six possible focuses not maybe the only focuses but six possible focuses of the product owner and we talk about them as the stances of the product owner. \n\nWhat's the position that they take on a particular topic and it's important to mix and match although we talk about them in isolation. \n\nUm but we talk about we talk about the visionary or the Steve Jobs type right you're trying to figure out what the next big move is that's not necessarily driven by customer demand because customers might be demanding this route but actually the next big innovation is over here. \n\nHow do you get to that? \n\nUm product owners need to focus on they need they need a lot of people to agree and understand what it is they're doing. \n\nRight product owner is a very political position because you've you've got you're you're being given money by the business to go build successful products. \n\nAnd if the business don't believe you're building successful products they're not going to give you any more money. \n\nIf key stakeholders go moaning to the business that you're not doing what they want you might be in trouble of not getting money. \n\nIf developers don't understand what it is that you're trying to create and are behind your vision they're not going to be involved in it enough and you're not going to be able to actually get there and get across that line. \n\nSo there's kind of this box of the collaborator right of connecting all of these people understanding what they need. \n\nI think it should be called the politician rather the collaborator right because you've got to get everybody going in the same direction. \n\nYou've got a vision for the product and how do you get everybody behind it so that you can maintain focus and direction? \n\nAnd I've kind of talked about the customer representative that relentless customer focus as well that's important right it's part of that story but also just being able to make decisions. \n\nI think there's a there's a there's a uh is a parable is it a it's a definitely a phrase that's better to make a decision that's wrong than not make a decision at all. \n\nI've heard that before and that's sometimes what a product owner needs to do is there are two ways to build it and nobody can make a decision and the product owner doesn't have enough information so pick one and try it. \n\nRight pick one and try it or pick both and try a little bit of both right just make a decision so that we can move forward and if we move forward and we've made the wrong decisions ah we made the wrong decision let's go you know pull back and go this other route. \n\nThat need to be that decision maker. \n\nUm and I talked about the experimenter already right focusing on what's the next big innovation. \n\nSo there's a visionary what's the next big innovation but there's also this experimenter which is what's the iterative innovation of what it is we've created. \n\nWhat's the next little experiment we can run to try and see whether what we might get down the line? \n\nAnd I think bringing all of those together as examples of what might be missing from your role as a product owner or as a leader in your business helps open up those ideas and create a deeper understanding of what type of product owner people want to be. \n\nAnd what direction they want to take their business and their product and their teams. \n\nThanks for watching the video. If you enjoyed it please like follow and subscribe. \n\nI always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility."
  },
  {
    "Title": "How does someone become an Agile consultant?",
    "Description": "Explains the steps to become an Agile consultant, highlighting the need for domain expertise, real-world experience, and applying Agile practices within your industry.",
    "ResourceId": "oBnvr7vOkg8",
    "Url": "https://www.youtube.com/watch?v=oBnvr7vOkg8",
    "Date": "2023-03-21T07:00:18Z",
    "Captions": "Oh, that's a great question. So how does somebody become an agile consultant? \n\nWell, I don't think, I don't think, well, become, that's probably the linchpin there. It's really hard, a hard question because you have to be good at something. \n\nRight, agile is not the thing that we're doing. Agile is a bunch of ideas, practices that you bring along to the thing that you're doing in order to make it more effective. \n\nRight, you can say the same about lean. How do you become good at lean? Well, you have to be good at the thing that you're focusing on with lean. \n\nAnd then you bring in lean practices, you apply it to the actual work that you're doing. You bring in agile practices, you apply it to the actual work that you're doing. \n\nYou get seen by people around you as understanding some of these things more and how those things interconnect and how we can maybe change and shift the way we work in order to become more optimal. \n\nUm, and those people that recognise you as doing that encourage you to do more of it. You do more of it and suddenly you're an agile or DevOps consultant, right? That's how you become that thing. \n\nIt's not like it's, uh, uh, I can just go, well, I'm going to be an agile consultant for, um, I don't know, a car factory. \n\nRight, I'm not going to go do that because I've never worked in a car factory. I don't understand all the nuance of how car factories work. That would be a dumb idea to have me as an agile consultant or a lean consultant for a car factory. \n\nMy background and expertise is in software, right? You be a software engineer for 10 years, you be a DevOps consultant for 10 years, and then maybe you have enough knowledge and experience and stories and understanding on how to link those, how to abstract. \n\nIt's really about abstraction, right? You need to understand the thing you're doing enough to abstract the agile and lean story from the work, see how it impacts and affects it in your particular expertise. \n\nAnd then perhaps you could go help and advise outside of that context, right? Because you've then got 10 years of helping and advising in a particular context, go help and advise in another context. \n\nSo, for example, um, I think it was 2016. I did some training for the Ghana Police Service. \n\nSo this was training line police officers. Um, they were not by any stretch of the imagination software focused, not, not, no software skills whatsoever. \n\nAnd they wanted to understand how they could use scrum to enact organisational change. \n\nRight, so instead of the scrum being the product, it's the organisation. How do we enact organisational change over a long period of time and incrementally change the organisation so that, and then we see the results? \n\nWhat data do we need to look at to monitor the feedback and increase that? And part of that was the new Inspector General of Police used to work for Interpol, and Interpol used scrum apparently, right? \n\nI had no clue in what context, but he wanted to bring some of those stories into the way he was doing things in Ghana. \n\nAnd that experience of, I was very clear when I was doing the training. I'm like, everybody be, I want you all to be very clear, I know nothing about policing, except what I've seen on TV, which is probably woefully incorrect, right? \n\nUm, and what was interesting was while we were really talking about how organisational change worked, um, the head of CID, which if you don't know what CID is, it's the detectives, right? \n\nThey're solving the complex cases, the murders and the stuff like that. The head of CID was engaging me in lots of conversations about how would I apply this to solving a case, right? \n\nSo we had to talk about, you know, I'm giving them information about how this would work in my world, and he's trying to figure out how does he apply that in his world, right? \n\nBecause it's completely different, and I can't tell him how to do that because I don't know how he does his work. \n\nAnd that's that piece, is it? You need to be an agile or a consultant within your context for long enough that you can see the abstracted ideas that would work in any context, and then you can consult on them even if you don't know the core context. \n\nThat takes years of experience of doing that to be able to get that abstraction level to be able to work in another department. \n\nSo, for example, if you've spent the last 20 years working in finance, where should you be an agile and DevOps, and not DevOps, right? \n\nBut agile and lean consultant in the financial space, right? Look at finance teams delivering the stuff that finance teams deliver and figure out how to bring some of those ideal practices into there. \n\nDo that for long enough and then you'll have the experience to go into another industry and do the same thing because the same stuff applies, right? \n\nYou just need enough knowledge and experience to be able to abstract it. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is the most interesting outcome you have achieved as an agile consultant?",
    "Description": "Real-world examples of agile consulting outcomes, highlighting both challenges and successes in agile transformation, DevOps adoption, and holistic Scrum training.",
    "ResourceId": "zoAhqsEqShs",
    "Url": "https://www.youtube.com/watch?v=zoAhqsEqShs",
    "Date": "2023-03-20T07:00:20Z",
    "Captions": "Um, that's a really good question. What's the most interesting outcome? Because it can be interesting good and it can be interesting bad, right? I have had the experience. \n\nUm, we'll start with the interesting part, right? Or it depends how you look at it. It depends how you look at it. It could also be interesting goods, right? \n\nUm, but I had this experience with a company in the United States that was a very old-school type of company. Put it this way, the cubes. If you're not familiar with the way things work in the US, you often have these cubicles with partitions, temporary partitions around each desk where you've got a finite amount of space and that's yours. And they're quite high, so you don't hear other people. But there's big, big cubicle thing and the cubicles had oak paneling. That's how old school this organization was and how much money was going around. \n\nOne of the problems with organizations with huge amounts of cash flow and huge amounts of cash to throw around is that they're not that interested in change, right? Because change is risk. And if we have a huge cash cow that we're milking, then why should we change and potentially risk that cash cow? \n\nUm, which is why Ken Kench Weber talks about the time to go into an organization and affect change is when they've most egregiously failed to deliver something, right? That's when people are most open to change. \n\nBut, uh, in this organization, um, I did a whole bunch of sessions. It was kind of DevOps and Agile. It was all homegrown. It wasn't, it was probably prior to doing a lot of stuff with a lot more stuff with Scrum.org. \n\nUm, but I managed to convince the 30 people in IT leadership and management that, um, this Agile and DevOps thing is a great idea. We need to move towards continuous delivery. We need to move towards inspecting and adapting, causing the feedback loops, gathering data, figuring out what's going on. So this, this, it was totally sold on this idea. \n\nUm, and then I heard about the, like, eight months later, maybe a year later, um, I heard about that engagement and they were all gone from that organization. They'd all been, they'd all effectively been fired because the organization had decided not to go that way anymore. So as an organization, we're not going to do Agile, we're not going to do continuous delivery, we're going to do the same thing we've always done. \n\nAnd they kicked up a fuss, right? Because they're like, \"Well, no, that's not good. We're going to have these problems. We're going to have huge amounts of technical debt. We're going to have potential failures going down the line.\" And they were enough of a problem that they were gotten rid of, right? So that's kind of negative. \n\nBut I don't know if you think about it, it's probably those folks went on to better jobs, to more advantageous organizations that are trying to do things a little bit differently. And perhaps they had a better outcome for most of those folks. So that was a big negative one. \n\nUm, that's probably the most negative one that I've seen and that was an unusual circumstance, right? You don't see that sort of thing happening that often. \n\nUm, but the other one, uh, the most positive one, uh, was training for one of my favourite organisations at the time, which is actually in Utah, which is a crazy place. But it was in Utah and, um, it was for a company called Backcountry. \n\nAnd Backcountry were a clothing manufacturer, clothing, uh, ski. It was where, um, you know, where the Olympics were held at one time in Utah. And, you know, basically from their office, you can see the ski jump and all the things that are around that. \n\nAnd they trained, um, everybody in their company. So there was a really interesting organization because there were less than 100 people in the whole company and 48 of them were software engineers. \n\nSo this is a clothing company. Why do they have 48 of their company being nearly 50 of the company being software engineers? Um, and it was that they built and ran their own procurement software. \n\nSo their software that they use to get the stuff to organise the factories in China that were making the apparel, get all the apparel across into the US and get it distributed in the US, their different warehouses. And then you get to get it sent out to individuals because they ran their own points of sale as well. They had five or six different storefronts that were all their brands. And they also had not only their clothes but other competitors' clothes on their own website as well. \n\nThat was all their own kit, right? They built all the software. The guy driving around the warehouse with an iPad attached to his forklift telling him which pallets to go get and pick up and what trucks to put them on, they wrote the whole thing, right? \n\nUm, so that's why they needed so many software engineers. But it was hugely effective for them. \n\nUm, so what we did was we did Scrum training. We did the applying professional Scrum. It was called Professional Scrum Foundations back in the day. It was actually my first ever, uh, uh, classes of that type that I ran. \n\nUm, and there were very big classes. There was like 45 people per class, which is pretty big. I normally max out at 25 now. \n\nAnd they trained everybody in the company. The CEO was in one of the classes. The CEO's secretary assistant was in one of the classes. The guy who drives the forklift in the warehouse was in one of the classes. \n\nAnd even things like the guy who drives the forklift in the warehouse, after the first half day, went to his management and said, \"Uh, what the heck am I doing here?\" Obviously, he drives a forklift in the warehouse, so I'm using the polite version of the way he would say it, right? What the heck am I doing here? This is of no value whatsoever. \n\nUm, can I just go back to doing my work? \n\nAnd, um, you know, his managers like, \"Oh, just stick it out for today and if you still have the same story at the end of today, then you can, you don't have to go tomorrow,\" right? \n\nBut by the end of the first day, he was the one, uh, kind of standing up, uh, pointing at the board with the team, talking about the different, uh, uh, uh, items on the backlog and how they could add more value. \n\nBecause he had an epiphany. He had this realisation of the connection between the feedback he can give and the product that's then created. \n\nSo he realised that he was uniquely positioned to provide major influence to the way the software worked for him to better support the success of the organization. And it was this, \"I need to be involved in this. I need to be a part of this story.\" \n\nAnd that was just a fantastic thing to see and hear. A little bit more to the story than that, but I still get emails from people in that organization. And that's what, that would be 12 years later. I still get emails from people in the organization saying it was a complete game changer for the organization, that experience. \n\nAnd I can't take ownership of that, right? They took ownership of that. It was, can you imagine? \n\nEverybody in the organization goes through this training. This training is so important that the CEO says, \"I'm going to spend two full days sitting in a room with all of these people and demonstrate, even if they know all the stuff already, I'm going to sit here and demonstrate to everybody in the room how important this is, how important it is to our strategy going forward.\" \n\nThat for me is leadership, right? \n\nUm, and that just, that was the most amazing, um, class I've ever been a part of. And then going forward into the future, uh, their CIO has called me in to do additional training with them at Healthgrades, which you can see some videos on my YouTube from the folks at Healthgrades. \n\nUm, I've, uh, uh, people have gone off to work at Coca-Cola, which I've done training for. \n\nUm, yeah, it's been, that was a great experience for me, for them, and for their organization. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments. And if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is your feeling on creating Agile apprenticeships?",
    "Description": "Explores building Agile apprenticeships through mentorship, continuous learning, and community, highlighting real-world support for Scrum Masters and Agile professionals.",
    "ResourceId": "vHNwcfbNOR8",
    "Url": "https://www.youtube.com/watch?v=vHNwcfbNOR8",
    "Date": "2023-03-17T07:00:21Z",
    "Captions": "Oh, that's great. So that what is my feeling on creating agile apprenticeships? I think it's going to be the logical progression of the immersive story as well.\n\nUm, and I feel like I do some of those things already. I have a number of people that have come through my training classes. That's kind of how I got introduced to them. \n\nThat then just keep hanging out, right? That's, uh, um, I don't, I don't, um, how best to describe it? Like I've always, at least for a very long time, I provided this capability for students, for anybody on the internet, just to book a coffee with me, right? Or, uh, a free consultation, right? Whatever you want to call it, freak on stage that cost 30 minutes. \n\nBut also for every training class, for every student, they get an extra 60 minutes of consulting time, right? And I think that lots of students don't use it. I think I worked it out the other day. I looked at the data and it was about less than five percent of people that come through the classes actually used the one hour of coaching consulting. \n\nSo when, uh, for example, Rickard, who's a scrum master, and when he comes back and says, \"Can I get another hour?\" or \"Can I get another hour?\" or he phones me in the evening to talk about the cool stuff that he's been doing in the office and how it's impacted on his team and to ask some questions and \"What do you think might be better?\" or, um, you know, even just he's telling me about his awesome day, right? \n\nThat interaction for me is hugely valuable because Rickard's getting more value, providing more value to his company, to his organisation because he's able to, you know, maybe serve some extra information or even just chat. You know, sometimes you just need to chat with somebody who might even not know anything about what you're talking about, right? But can provide you with a sounding board. \n\nAnd if it's somebody that, and that, that's that, that, um, internship idea, right? Or, um, that ability for those scrum masters to have somebody that they can come and talk to, to say, \"Well, I tried this and it didn't work out. What am I doing wrong?\" And it might be, \"Well, you're not doing anything wrong,\" right? That could be the biggest value that they get from that conversation. \n\nYou're not doing anything wrong. That's just the way it works. Here's something else you might want to try. \n\nSo I think that, um, mentoring internship model I think is really important to people's learning. And I expect that off the iterative, the immersive type of training, that there'll be a lot more of that type of experience for people and people wanting more of that experience. \n\nSo I'm actually really looking forward to that because I love having a chat and finding out how people are actually using the things that we're talking about and being successful at it. Because so many times, um, companies that call me in to help are only calling me in to help when things aren't going so well for them. \n\nSo I don't see a lot of the successes, right? Because by the time those successes are generated, I'm already off to doing the next thing or working for the next company and they're implementing the ideas. But being able to have those follow-on conversations where somebody's actually implementing some of those ideas, trying stuff out, it's just awesome. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Transforming Training: How Immersive Learning and DevOps Drive Real Value in Organisations",
    "Description": "Explores how immersive learning and DevOps practices improve training effectiveness, boost knowledge retention, and deliver real value for individuals and organisations.",
    "ResourceId": "TabMnJpXFVA",
    "Url": "https://www.youtube.com/watch?v=TabMnJpXFVA",
    "Date": "2023-03-16T07:00:16Z",
    "Captions": "So the question was why am I going the immersive trading route? \n\nBecause I want to do the thing that's best for not just the students but their ability to make changes in their organisation. I got into this training thing for the same reason that I got into the DevOps thing back in 2010. It's that I saw that people and organisations were struggling. Right, people were struggling and organisations weren't getting what they needed. So the organisations were blaming the people and suddenly you've got this vicious cycle. \n\nDevOps helped grease the wheels, give people more because you automate a lot of stuff away. Again, I was working with Azure DevOps and more from a technical perspective and how do you improve the flow of value delivery so that then we have time to look holistically and figure out what's going on. \n\nIn doing that, I think I said before, I very quickly figured out that it wasn't actually the tools that were the thing that was helping people. It was the different practices that people were using and that led logically towards this idea of agile and scrum and kanban and those kind of things as well. \n\nSo this is that logical progression of we're using double loop learning in and of ourselves. Right, the outcome of the training styles that we've got is not the most optimal for how people retain knowledge, learn and use that knowledge. People are much better in that practical world. So closing that loop again and saying, well, we need to change how we do training. \n\nPart of that was moving to the flipped-ish learning experience. This is the next progression and I know that there are trainers out there that have been experimenting with different learning formats and this is starting to pull that information together. What are the best learning formats? Not the best, that's probably the wrong word, or what are more effective learning formats for people and how do we incorporate it into the way we do things? \n\nThe harder part for us is that it's, as a trainer and as a business owner, it's actually going to be less. I'm going to have less time to be able to do other training classes. Right, so instead of it being four half days or four half days spread over a couple of weeks or, you know, four half days spread over two days, right, it's going to be eight half days spread over eight weeks. \n\nSo in the time that it takes me to deliver this, I could have delivered in the old format two food classes. But for me, this is a better experience for students. If the students are going to learn more and be more effective, then this type of training is going to be more valuable. \n\nIt's providing value to the customer. That's the most important thing rather than, you know, if we just focus on a revenue extraction model rather than a value creation model, then we're not going to be able to affect change. We're not going to be able to have people look favourably on what it is we're doing. Right, we're not going to have people. \n\nWe both need to get something out of the experience. If companies are realising that they're not getting anything out of the two field days and even the four half days is starting to not provide them with the value that they'd really like to get, they're going to start buying that training and they're not going to be able to provide that to the people in their organisation. \n\nI think this is part of that story of we want to deliver more value to our customer even if it means that it takes more time to get there. I think that for me is that piece from both sides, both the business side, right, because I'm running a business, as well as from the helping people side. It actually benefits both. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments and if you want to have a chat about this or anything else agile, scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What are immersive training courses?",
    "Description": "Explains immersive training courses, highlighting how real-world assignments, flipped learning, and interactive sessions enhance Agile skills and workplace application.",
    "ResourceId": "wa4A_KQ-YGg",
    "Url": "https://www.youtube.com/watch?v=wa4A_KQ-YGg",
    "Date": "2023-03-15T07:00:19Z",
    "Captions": "So the question was what are immersive training courses and I think that's a great question because there's been a lot of buzz around immersive training classes. What's the difference between the different types of classes? I think the traditional class format has always been the two full days, right? Part of that is because if you're going to get a whole bunch of people together for a training class, you want to in a small amount of time as possible so that you're not paying for hotels, you're not paying for people travelling around. However it is you're getting those people into that place. Plus if they're going to be out of the office for those days and they've got to travel to the training location, you only want them doing it twice. You don't want them doing it four half days, right?\n\nBut with the virtual space, I moved all of my classes to four half days, which was kind of a start of this process. The advantage to four half days initially was twofold. One is you can have people are only out half days, right? So they could still get work done in the afternoons or the mornings, however you're running it. But also I tried introducing activities, so more of the flipped learning experience. The first step towards the immersive experience and in the flipped learning experience, people get small assignments to do where they're reading, writing, watching content. So that kind of interactive, much more interactive experience, self-paced learning as well as the immersive experience.\n\nBut the way that's also not as good for the way people learn, right? It's better than to fill this. Flipped learning is better, but what's even better is if you as a participant to a class are able to spend some time learning something and then able to go try and implement it in your real world and then come back around and share that experience with other people who have tried the same thing in their companies or in the same company, right? And then learn some more stuff and then go try that new stuff in your organisation, in your company.\n\nSo the immersive learning experience instead of being at four half days, so 16 hours, what I've been doing is four half days with probably about two hours of additional possible material each day. Is moving it to eight half days over eight weeks, so you do one session a week. At the end of that session, the participants are given an assignment to do in their organisation. So we're starting with the product owner class, so they're maybe given an assignment to try and do something a little bit differently, figure out maybe try and figure out what is value to your organisation, right? \n\nAnd that might be the first one, that might even be one of the assignments, right? So go to figure out that in your company. So then when we come back, we probably spend the first part of the next session talking about what did they discover? What did they discover the their organisation values? How does that change the way they think about the product and what it is they're creating? Did they find that maybe their company doesn't understand what value is and they had to come up with something brand new to figure out what value is and then how do you test that within your organisation? So all those kind of questions and discussions.\n\nAnd I think there's two huge, that different but both equally great value propositions between a private class and a public class, right? Because in a private class, everybody in the room is from the same company, so they can share the same dirty laundry, right? And perhaps have conversations about, \"Oh, but I tried this with these people I'm working with and that worked great.\" And then they can maybe a little bit more sharing, right? So that's a good value proposition.\n\nBut I think the public value proposition is also good as well, right? You've got 12 people in the class, each of the 12 people have gone off into their own company and tried their own thing and then they're bringing back these very different experiences because it's different companies and then sharing them with each other. And what could we do differently? And, \"Oh yeah, I've got somebody in my company who's just like that person in yours. Perhaps we could work together to figure out how we do that.\"\n\nSo that is like the progression of the flipped learning that you don't just have some activities that are offline learning, like self-paced online stuff. I'm going to read some stuff, I'm going to watch some videos, but I've actually got a production assignment. I'm going to go into my organisation, try to do something in a particular way that's to do with the things that we've been talking about in the class and then come back and pull it all together with the other people in my class who have been learning the same thing. That would be the immersive learning experience.\n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments and if you want to have a chat about this or anything else agile, scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why do you prefer agile consulting over agile coaching?",
    "Description": "Explains why agile consulting is preferred over coaching, focusing on empowering internal leadership, fostering self-reliant teams, and enabling sustainable organisational change.",
    "ResourceId": "FJjiCodxyK4",
    "Url": "https://www.youtube.com/watch?v=FJjiCodxyK4",
    "Date": "2023-03-14T07:00:05Z",
    "Captions": "Oh, that's a good question. So the question is why do I prefer agile consulting over agile coaching? And for me, I believe the leadership within your organization is a business critical function. Right, this is not something that you should be outsourcing to somebody else. And I feel like too many organizations bring in coaches who are their semi-filled time probably over a number of years, and those coaches are bringing leadership to the organization. They're filling the gap between traditional organizational leadership and agile leadership, and they become a crutch for the people in the organization. The people in the organization don't actually learn to do things differently. \n\nUm, it's like for if you were to equate it to software engineering, it's like the mythical rewrite of a product. Right, you go rewrite the product, but you don't really realise that the people that built the crappy coded product you have right now are the same people that you've got doing the rewrite. And why would you think it would be any different? Right, and this is exactly the same thing. You have the same people in your organization. So when those coaches rotate off, either because budgets get constrained, right, because that goes in fluctuations over the years, we're in a budget constrained environment right now. \n\nUm, and we're seeing big swathes of organizations divesting themselves of agile coaches and scrum masters, mostly in the contracting space, because um, they're not seeing the value. Right, they're not seeing the value anymore, and those people are leaving. And then the organization's falling back into its old traditional practices because there was no actual learning taking place inside the organization. \n\nSo the way I look at it is an agile consultant's job is to go in, in a very short space of time, help people in the organization understand what they need to do and how they need to change and work on their mindsets. And then they're the ones doing the work. They're the ones taking it forward. They're the ones cleaning up their own mess and dealing with the issues that are a result of their decisions. They're the ones learning. Right? \n\nUm, so then you've got that intrinsic to the way your organization functions now. So when the agile consultant leaves, they're no longer that crutch. Right? So a normal engagement model for me is to only work full time with a team for a couple of weeks, maybe a month tops. I think the longest engagement I did was three and a half weeks. \n\nUm, but then come back periodically, um, and help with advice for the scrum masters, advice for leaders in the organization. Have those constant touch points where they're bringing me some of their problems, and I'm helping them figure out other things to try, right, that might help resolve them. So that I'm not in full time, I'm not helping them full-time."
  },
  {
    "Title": "Unlocking Greatness: How the Right Scrum Master Transforms Teams and Organisations",
    "Description": "Explores how an effective Scrum Master drives team success by fostering team fit, addressing organisational barriers, and building relationships to enable lasting change.",
    "ResourceId": "rHFhR3o849k",
    "Url": "https://www.youtube.com/watch?v=rHFhR3o849k",
    "Date": "2023-03-13T07:00:19Z",
    "Captions": "So the question is what makes a truly great scrum master? \n\nI think that's a very, very difficult question to answer because it's very circumstantial, right? It depends on the organization, the team. You could have somebody who's a great scrum master for this team at this organization and they're not so great at the next gig they go to, right? Because the team is different, the organizational culture is different, the things they were, the fits not right. \n\nSo I think one thing that makes a great scrum master is having a good fit with the team, which is why it's important that, to be honest, that the team selects the scrum master rather than the scrum master being selected for them. Which is why you normally see great scrum masters being promoted, as the wrong word, but promoted within the team, i.e. the team selects this person as somebody who can deal with our stuff, that we as a team trust to deal with our stuff. \n\nAnd they need to really focus beyond the team because, in general, the biggest problems that a team focuses on are not problems of the team's own making, right? Most teams of people doing work know very well what they do well and what they don't do well. Even if they don't admit it to themselves, they still know, right? And so the scrum master can focus for a while on bringing that to the surface, on bringing that out and helping them understand what it is they're doing, what the impact is. \n\nBut at some point, usually very quickly, right within the first year of a team working together, you start hitting those organizational impediments, those things in the organization that just make it hard to do what it is we're all trying to do, which is provide value for the organization, provide value for the business, provide value for the customers. \n\nAnd those are all things that are impediments to our effectiveness. Some of those things the team can deal with themselves, but other things take significant application of politics, I guess. I think I'm using the right word, but effectively politics, right? But the act of politics, which I think is politic, where you're building relationships with people in the organization. \n\nAs a scrum master, you might build relationships with the head of HR, you might build relationships with the CEO, depending on how big your organization is and what it looks like. You're going to build relationships with people so that they know your level of competence, your understanding of the work that's underway, your understanding of the way the business operates, and that you're making suggestions to help the organization be more effective. \n\nAnd then they respect your opinion, they value your counsel, and that you're able to then affect change inside of the organization, not by doing it yourself, but by helping everybody else understand some of the things that might need to change. \n\nAnd that, I think, is the difference between just a scrum master doing a job and a great scrum master, is that willingness to build those relationships to further the organization."
  },
  {
    "Title": "Why do you think that 4 half days is a better format than 2 full days?",
    "Description": "Explains why spreading training over four half-days improves learning, retention, and application compared to two full days, highlighting flow efficiency and continuous improvement.",
    "ResourceId": "jFU_4xtHzng",
    "Url": "https://www.youtube.com/watch?v=jFU_4xtHzng",
    "Date": "2023-03-10T07:00:27Z",
    "Captions": "Question is why do I think that four half days is a better format than two full days. \n\nI think it's a better format because of two things. One is that it allows people to spend a little bit of time absorbing the content of maybe reading up on some questions and additional ideas that they thought of during the class. So over four half days, even if they're consecutive, people are able to rearrange their filing cabinets. I remember somebody telling me that our brains are like filing cabinets. It's just a metaphor, right? But brings all that filing cabinets and during the day we're pulling stuff out and looking at it and leaving it lying around. And then at night when we're sleeping, our brain goes and refiles everything, processing all of the events of the day. That can solidify knowledge, generate more questions. Right? So that's why I really like that four half day format. \n\nBut in fact, the four half day format is sub-optimal as well. We're doing everything within one week. So we're trying to move towards other formats that might be more valuable. So we're already starting to introduce, especially for private customers, classes of maybe over two weeks, four half days over two weeks. Right? So do Tuesday, Wednesday, Tuesday, Wednesday or longer immersive classes over a much longer period of time. So maybe eight half days over eight weeks. And that gives much more capability for the people that are participating in the class to go and try stuff with their team, try stuff in their organisation, and then come back around. \n\nIn fact, in the eight half day format specifically for the PSPO, the product owner class initially, we're going to be giving them assignments at the end of each session. So part of the next session will be a debrief of the previous assignment. That might be quite a lot of the time in that session. Right? Here was an assignment you had to go into your organisation, try to do something different, try to work with the teams in a different way. What was the outcome of that? What's your feedback? And what's going to be your next iteration on that story? \n\nSo it's effectively the same as the traditional product owner class, but we have the extra time to do the assignments and do the review of the assignments, the debriefs, and hopefully create something that allows more loops of learning. Right? People are able to actually try things with their teams, close that feedback loop with the trainer, and perhaps learn even more than we would in a normal class."
  },
  {
    "Title": "What is the difference between resource efficiency and flow efficiency?",
    "Description": "Explains how resource efficiency focuses on maximising individual output, while flow efficiency optimises the entire workflow for better value delivery in Agile processes.",
    "ResourceId": "1ePkQeCVAlY",
    "Url": "https://www.youtube.com/watch?v=1ePkQeCVAlY",
    "Date": "2023-03-09T07:00:02Z",
    "Captions": "Oh, that's a great question. So, the question is what's the difference between resource efficiency and flow efficiency? And first off, I do want to say that most organizations and most teams focus on resource efficiency. That's where you worry more about your access to materials, with people being considered materials in this case. Right, people are resources, and we want to optimize the amount of time that they spend doing the thing as if they're machines in a factory that you're paying a rent for, right? You're paying maintenance for, and you want to maximize the output of that machine.\n\nUnfortunately, in our world of complexity, we're not doing the same thing over and over and over again like a machine does, so we can't optimize with patterns in that way. I mean, there are patterns we can optimize with, but not in the same way that we can with machines. So, when you focus on resource efficiency with a group of people, you end up with feature factories. You end up with unhappy people. You end up with high staff turnover, right? Because people don't really care about your company. They don't really care about what you're trying to do, and they feel like you're not rewarding them for the expertise and capabilities they're bringing to your organization. So, they'll be like, \"Well, I'll go somewhere else that's offering me more money,\" or \"I'll go somewhere else because I don't like you anymore,\" or \"My boss sucks,\" or whatever it is.\n\nWhereas in a flow efficiency environment, you're looking holistically at the flow of work through the system rather than optimizing any particular resource. A great example of that, I think, is in organizations that have sales teams. Quite often, they optimize sales for leads and more work coming into the system, but you don't actually have the capability to deliver that work in the system. So, sales is overselling, and then the engineering teams need to suffer because they have to try and deliver within the bounds of that world of, \"We're under high pressure. We can't actually solve the problems that we want to solve. We've just got to get stuff out the door, get it done, get it finished.\" And that doesn't breed happy people or, you know, it doesn't break the craftsmanship or craftsmanship. I don't know if that's a word, but that idea that I want to be good at what I do. I want there to be value in what I do. I want to understand what it is that I'm trying to achieve and why it matters, right? What's the work I'm doing, and how does it matter to the overall organization?\n\nSo, flow efficiency tries to look at holistically across the flow of work, right? Are we optimizing in the right areas? Are we able to see that when we increase the—what would you call it? If we optimize this one resource, what effect does it actually have on the rest of the system? Right? What effect does it have down the line? If we optimize for software engineering, the developers are churning out stuff, and we've got testers as a separate entity here. Are they then overburdened? And then it looks like they're the problem, and we're all blaming the testers for not getting stuff done.\n\nSo, flow efficiency is about looking holistically across the system, understanding the flow of work through that system, and how do we optimize to maximize the value that we're delivering through the system. Resource efficiency is looking at how do we deliver more stuff. We just need more stuff, right? Whether that's projects finished or it's widgets in a factory or whatever it is, that's resource efficiency versus flow efficiency."
  },
  {
    "Title": "What is your best advice for becoming a Scrum Master outside software engineering?",
    "Description": "Practical guidance on becoming a Scrum Master outside software, covering certification, skill development, validated learning, and applying Scrum principles in any field.",
    "ResourceId": "DWOh_hRJ1uo",
    "Url": "https://www.youtube.com/watch?v=DWOh_hRJ1uo",
    "Date": "2023-03-08T07:00:04Z",
    "Captions": "Foreign. So the question is, what's my advice for becoming a scrum master outside of software engineering? I don't, I think that's an interesting topic because in order to be a scrum master, be a successful, effective scrum master, I believe that you need to be able to understand fully the work that the team is doing. So it makes the most sense for a scrum master to be somebody who has been part of a team doing the thing that they're going to scrum master, has been in that domain, has been part of those organisations, and has worked their way to that advanced position, which is the scrum master. \n\nAs a change leader in the, in as part of a team, right? So if you want to be a scrum master and you're not currently in the IT software world, then what probably makes the most sense is to be part of a team doing what you like and enjoy doing anyway. Right? I was speaking to somebody recently who has an accounting background and wants to be a scrum master to accounting teams to help accounting organisations get better at doing accounting, right? And that's really what you want to be. \n\nBeing an experienced team member doesn't mean that you're awesome at the thing the team does, right? You don't actually have to be awesome at coding to be a scrum master for a coding team. But you have to understand the coding, you have to understand the ramifications of DevOps, you have to understand the ramifications of automated build, automated testing, of what it means to be a software engineer or means to be a tester, right, in that space. \n\nSo if you want to be a scrum master and your background is accounting, what better place to start than joining an accounting team in an accountancy firm and then working slowly to help improve the way they work? And at some point, that team that you work with is going to be seen to be more successful than other teams in the organisation, and somebody's going to come along and ask why. Why is this team more accessible, successful? Why is it doing better? Why are people on this team happier than the other teams that we have in our organisation? \n\nAnd they're going to come and ask, and your boss is going to say, \"Well, I don't know, but if you go speak to Bob, right, he's been leading those ideas, and maybe Bob can tell you a little bit more about how that works.\" And then you build a name for yourself, you're given more accountability and responsibility within the organisation, and you can do it at a higher and higher level across the arc. For me, that's leadership, right? That's the leader who serves from the scrum kite."
  },
  {
    "Title": "Why Pursuing Agile Certifications is Your Key to Career Advancement",
    "Description": "Explains how Agile certifications validate knowledge, support continuous learning, and help employers assess candidates, while emphasising real skills for career growth.",
    "ResourceId": "_fFs-0GL1CA",
    "Url": "https://www.youtube.com/watch?v=_fFs-0GL1CA",
    "Date": "2023-03-07T07:00:09Z",
    "Captions": "So the question was, why would I encourage people to follow a certification path in their career journey? I would say for the same reason that people go to university. The reason people do any course is it gets your foot in the door. Certifications themselves have no value. How many of you have ever had to pull out your university degree, right, ten years after you've graduated from university? You don't. Maybe your first couple of jobs you had to. I had to pull out my university degree when I applied for my H-1B to go work in the US. They actually didn't like it. I had to contribute two years of my professional experience to make up the year that the US degrees have more than my degree that I took. But it all worked out. That's why you have those things, right? Somebody wants to validate your knowledge. It doesn't mean you have skills. Skills and application of learning is different from just amassing knowledge. But kind of at a minimum, for certain roles, you should have knowledge, right? At the very least, if you're going to be working on a scrum team, you should probably have read the Scrum Guide.\n\nIf I was an employer, how do I validate that you've read the Scrum Guide? Well, I could sit and interview the thousand people that apply and ask them, \"Have you read the Scrum Guide?\" Or I could just put in the job spec PSM1. If you can pass the PSM1, you've read the Scrum Guide. It would be very difficult to pass the PSM1 if you've not read the Scrum Guide. So there's a minimum bar, there's a litmus test, there's a quick check that an employer can do to whittle down the thousand candidates to the 200 candidates that have actually read the Scrum Guide because we want somebody who can work on a scrum team. \n\nTaking that assessment, that's why it's valuable from a professional career perspective. External professional career perspective, like somebody looking at you, but internal professional career perspective, it's about validated learning. If I take a course and there's no assessment at the end, how do I know I understood what was the intent for me to understand from the course? Well, I don't. I just have to say, \"Well, I didn't pay attention for half of it and I forgot the other 60,\" and now I've done the course, so I should be able to go do the job. But that's not really how it works, right? Our memories don't work that way. Our understanding doesn't work that way. \n\nThat's why I really like the way that Scrum.org do the validated learning. You effectively get two attempts to take the assessment. At the end of the class, everybody gets a token to take the assessment, and if they take it within 14 days, you get a free second one if you fail. If you pass, well, you passed, right? But in both cases, you get your results broken down by category with a percentage, and you're able to look at that and say, \"Well, I didn't know I had a low score. I passed, but I had a low score in this area, so perhaps I should study this material.\" \n\nThe thing you get with the scores on it actually has a link to a bunch of material to study in that topic that Scrum.org have created. There's a Scrum Master learning path, there's a Product Owner learning path, there's various learning paths. That additional learning, even if I got a high score in it, I want to dive deeply into that topic because I liked it. How do you know where to start or where to look? Here's a place to start. \n\nThat validated learning for you and your career path, because the thing, once you get beyond getting in the door, right, the foot in the door, that gets you to the actual interview, is you still have to demonstrate in the interview that you actually understand stuff. There are so many posts on LinkedIn talking about how to validate that the person at the interview actually understands the thing that you're talking about, and all these trick questions. You just need to know your stuff. \n\nIn order to know your stuff, you have to have done the studying, absorbed the information, and understood it. You don't get that from not looking at anything, not reading the books, not watching the videos, not reading the blog posts, right? You have to invest some time and effort in figuring out what this thing is. Training courses are a great way to level set. \n\nWhat's next? I mean, the output of Scrum.org classes, I think all of them have at least ten books. \"Here you go, here's a bunch of books to read. Here's a bunch of additional content to read.\" Each trainer adds more content into that story as you go. If you take the time to check it out, learn how to do different things, you can improve your career trajectory so that you get further quicker, right? That's really what careers are about.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Transform Your Scrum Master Journey: Key Insights from the Advanced PSM Course",
    "Description": "Discover how the Advanced PSM course helps Scrum Masters shift from admin tasks to empowering teams, supporting Product Owners, and tackling organisational challenges.",
    "ResourceId": "QGXlCm_B5zA",
    "Url": "https://www.youtube.com/watch?v=QGXlCm_B5zA",
    "Date": "2023-03-06T07:00:14Z",
    "Captions": "The question is what will you learn on the PSM course? That's a great question. I think there's really two main things that you're gonna learn on the PSM course, the Advanced PSM. \n\nThe first one is, and this is for most people, that they've been doing this scrum Master thing wrong. They've been focusing on the wrong things. It's not their fault. Quite often they come in as a, and I know many scrum Masters that come in as a Jira admin, right? And then they become the scrum Master through being a Jira admin, and we kind of go back to our default state, right? So we want to be that Jira admin because it's fun, right? That's why you became, well maybe not so much fun in Europe, but that was your thing that you thought was fun.\n\nBut that realisation that there's even more things that you need to be looking at. In fact, the Jira admin is something that should solve itself, right? Give everybody on the team admin rights to Jira and let them do it. I know that sounds crazy for to authoritarians, but that's pushing responsibility down the organisation. Teach the people how to do the thing and then let them get on with it. \n\nAnd that leaves the scrum Master free to focus on other things. What are the services that the scrum Master is providing to the team? What are the services that the scrum Master is providing to the product owner? And what's the services that the scrum Master is providing to the organisation? I think those two, the services to the product owner and services to the organisation, are quite often missing. \n\nThe services to the team constitutes, what's the age-old ones? Protecting the team. Why do you need to protect the team? Can't they protect themselves? Doesn't the team have the skills and knowledge and capability to be able to say no to a customer? That's what's missing. You don't need to protect them. \n\nOr doing the admin, right? Updating the tickets. The team can update their own damn tickets. You don't have to do that. And if you have to do it, it's like, I sometimes liken it to if you have kids and they've got an untidy room, you don't tidy it up for them, right? Because if you tidy it up for them, they'll always rely on you to tidy it up, and it will never be tidy unless you do it. \n\nWhereas if they have to do it and they have to deal with the fallout of it and talk to the customer and why is it not fixed, and you have to do all of those things, you're more likely to go, well I don't really want that, so maybe I should just fix it. I know I don't like doing it, but I'll just do it. \n\nAnd that, I don't like the parenting analogy, but I think it works in that small circumstance that you're trying to enable a group of people to be better at what they do, to take accountability for the things that they're creating, to deal with their own stuff so that you can then focus on the higher level things and capabilities that we want. \n\nSo that the improve the team's capabilities, improve the product owner's capability to deliver value to the business, and improve the business's capability to engage and interact with the team and perhaps deal with organisational impediments as well, which is very difficult to do, especially from where people think the scrum Master sits. \n\nSo that opening out of the scrum Master and being able to do greater things, I think. \n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is the most common Aha moment people have in a scrum course?",
    "Description": "Most people in scrum courses realise the true value of empiricism and purpose behind scrum’s events and artefacts, shifting from rote process to meaningful, high-performance teamwork.",
    "ResourceId": "klBiNFvxuy0",
    "Url": "https://www.youtube.com/watch?v=klBiNFvxuy0",
    "Date": "2023-03-03T07:15:03Z",
    "Captions": "okay\n\nso the question was um what is the most common aha moment that people have in a scrum course and I I think it actually depends on the scrum course because there's quite a few different different flavors but I think the biggest aha moment is the the the total founding in empiricism that that agility has and I see that time and time again both for for General agile and scrum when you start talking to people in a training class and explaining to them what's the purpose of the events right causing the feedback loop what's the purpose of the the the artifacts is to provide transparency they start to realize that they didn't understand what those things are so that that kind of that realization that oh I've been I've been doing that wrong not because I've been mechanically doing it wrong but because I've not understood its purpose I've not understood why this uh uh thing is there and I've not valued it right and so that that realization that there is value in this thing that they didn't even know was there even though they've been doing it for years I was teaching an APS today uh co-teaching with Joanna and that that was a huge realization for the for the for the students there was that um even the ones that I've been doing I've been doing scrum for years and then they're they're they're they're hearing what we're saying they're rereading the scrum guide and going oh I totally didn't see the this this that the empiricism was so important that the scrum values were so important that that this actually worked this now you're explaining it it all makes sense that the feedback loops and yeah that that's probably the biggest aha moment um and I think that maybe it's just the way I teach it right but that progresses across that one is a staple for all the classes because at some point you have to explain empiricism and inspect and adapt and how it interacts with scrum but when you start layering on some of the other capabilities and like hypothesis driven practices hypothesis driven engineering right um that comes in with the PSU that's a that's a big aha moment even because we teach it in product owner as well as in a more advanced in the PSU and that realization probably the the the the the realization as well what the roles aren't that's actually a big big aha moment that that people have and that's what I love about the the advanced scrum Master right is you you go into the advanced scrum master and you immediately you know put up that that um uh uh the stances of the scum master and it's the the negative scrum Master stances and they say oh yeah you know we've got that one and we've got this one and we've got this one and I have to do this one and I have to do that one and then you've got that kind of it's not really a reveal but that kind of slow realization that oh you're putting these up because these are the stances we don't want these are the stancies that that aren't going to result in success that are going to result in in in uh poor quality and me not being an effective scrum master and then we progress into the stances that we do want what we're trying to achieve and then go through it that that's a big aha moment in the the psm2 so I like that one and in the advanced product owner I really like it's it's actually the same thing you've got these set of stancies which are the the the negative stancies for the product owner and then we reveal the and dive deeply into I think this is our six I think there's six stances of of you know like the Steve Jobs type and the customer focus and it's it's just that realization that there's so much more to the role than they ever realized so from the aps it's the team realizing there's so much more to being in a scrum team and the capability there's so much more to being a product owner there's so much more to being a scrum Master than they ever realized before and for me that's the big Epiphany moment in in all of the classes that just continues every time and it never gets old\n\nthanks for watching the video If you enjoyed it please like follow And subscribe I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility"
  },
  {
    "Title": "From Developer to Agile Advocate: How My Journey Unveiled the Power of Scrum and DevOps",
    "Description": "A personal account of moving from traditional project management to Agile, highlighting lessons learned with Scrum and DevOps to improve teamwork, processes, and culture.",
    "ResourceId": "4FTEJ4tDQqU",
    "Url": "https://www.youtube.com/watch?v=4FTEJ4tDQqU",
    "Date": "2023-03-02T07:00:01Z",
    "Captions": "Okay, so the question is why did I embrace Agile over traditional project management practices when I was a developer? I don't think I did while I was a developer. I think the reason I picked Agile and Agile practices was because, as a developer, I was always subjected to the traditional project management practices. \n\nI'd worked at Merrill Lynch, I worked for a number of design agencies, and I worked for a generator manufacturer and rental company. In all of those cases, they approached the projects in quite a similar fashion. Probably the most progressive was the generator company, which is weird, but it's because the boss was awesome. \n\nThat damaged me, I think. I definitely felt like these people didn't know what they were talking about, didn't understand what we were actually doing. It didn't feel like they even gave a crap. And then, as I started to do more DevOps, I started to migrate from development into the DevOps space. So not even the Agile space; it's the other side of agility from the technical side. \n\nI started to get more engaged in the idea that, yeah, DevOps is great, but a lot of DevOps is about tools. I know people might dispute that, but a lot of DevOps is about tools, and a lot of DevOps in the real world is about tools. I started to realise more and more that it's not the tools that solve the problem; it's the people that solve the problem. And it's not the tools that are the problem; it's often the people that are the problem, right? \n\nBecause time and time again, I was using—I did a lot of migrations to Azure DevOps for customers, so moving them from whatever they were doing before to Azure DevOps. They wanted to do the same stupid stuff that they did with their old tool with Azure DevOps, and I had to try and explain to them that the reason this tool is actually a problem is not because the tool is a problem; it's because of the way you're using the tool. \n\nA lot of them did it deliberately, right? They're like, \"Yeah, we've totally messed up this tool, and we really want a clean slate to go into this new thing.\" And then we don't have all the baggage. And I'm like, \"Yeah, but you're bringing this baggage in, that baggage in, this other baggage.\" And that's where you start talking to people. You start convincing people to start thinking about working in different ways, to simplify their process, to reduce levels of bureaucracy, custom fields, and rules. Oh my goodness me! \n\nIf anybody's used Jira as your DevOps of old, custom fields and rules are the bane of your life. And trying to go back to defaults, right? Do you actually need that thing? Does it actually add value? Does it bring you joy? You know, only have those fields, those rules that you absolutely have to have to do business, and you don't really want anything else. \n\nSo my move was through that technical, going into the high-level technical, and then kind of sideways into agility. I actually went to Australia to do the PSD beta for the old PSD class from Richard Hunt Housing, and that was where I got introduced to Scrum. Because in order to be a PSD trainer, I had to take a Scrum class. \n\nI just totally, totally made sense, right? It just made sense. It fit the ideas, solved the problems that I was—or enabled the problems to be solved that I'd been looking at my entire software engineering career. I wanted to help other people do those things better because I saw in all the customers that I'd had that this would start to solve their problems too. \n\nBut I still came in for the next probably five years with a DevOps focus. But as soon as you come in, remember you come in with one focus because the customer says, \"We need some DevOps help.\" And then you're like, \"Okay, you say you need some DevOps help, but actually, you need to fix this problem over here, which is about people in organisation and bureaucracy and how you organise your business in order to maximise the value they create.\" \n\nThe engineers can take care of this DevOps stuff over here. You get smart people, right? They're just constrained and aren't able to actually do things. I think that freeing nature of agility is what kind of drew me to it. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Navigating Client Needs: How Agile Consultants Can Uncover True Value Beyond Initial Requests",
    "Description": "Explores how agile consultants identify clients' real needs, avoid common pitfalls, and deliver lasting value by looking beyond initial requests and surface-level solutions.",
    "ResourceId": "-Mz9cH0uiTQ",
    "Url": "https://www.youtube.com/watch?v=-Mz9cH0uiTQ",
    "Date": "2023-03-01T07:00:00Z",
    "Captions": "So the question was, does a client tell an agile consultant what they need, or does it work the other way around? I think it works the other way around, but I think it's more complicated than that because a lot of clients come with an agenda. So quite often, you come in under a particular agenda, but the mark of a great consultant is you are trying to deliver the maximum value to the customer, right? \n\nSo you have to figure out, regardless of what they've asked for, what is it that they need for them to be successful in whatever it is that they're trying to do? Or even, is the thing they're trying to do the right thing that they're trying to do? And then slowly convince them to do the right thing. So I guess it depends how long you're going to be engaged with the customer for what that really looks like. \n\nI'm quite often engaged with customers for a short period of time. Most of my engagements with customers have either been over two or three weeks. That's generally when they want advice. They're like, \"We want to understand how we do something,\" and I'm coming in, giving them advice, and then they're taking it forward. I'm not working with them to do it, but I've also done longer engagements, usually for professional services teams, where I'm working with lots of different teams inside of their organisation. \n\nSo it's like I'm internally consulting with lots of different teams, and I would come in and help observe, give them some feedback, usually working with their scrum master. So when they come, they want a particular thing, right? They want to, usually actually, they want to get better at this agile thing. But that's not necessarily like getting being awesome at agile. What value does that provide the company? What value does that provide their customers? It's not necessarily the right thing, but that's what they ask for because that's the trend, right? \n\nSo you quite often come in under that guise, but then you've got to figure out what is it that this organisation actually needs. Is it a leadership issue where you need to focus on that whole engagement pipeline that they're working through? I did an engagement recently with a professional services company, and they had built up this great business. \n\nI have a weird name for it; I call it the death spiral of consulting. It's where you get a little bit too big, and you need to feed the monster, which is your business. So you have very aggressive sales tactics. You've built a great name in the industry, you're very aggressive with sales tactics, you bring in more, you have to hire more people to get the gigs done because you've got these aggressive sales tactics that bring in lots of gigs. \n\nThen you need to do them now, and you get more gigs than people, so you have to hire more people. Because you have to hire them quickly, because you've told the customer you can do it, you're not waiting for the top-tier candidates; you're getting the people that are available. Then they're doing the gig, and then you need more gigs because you've now got a bigger headcount and more people, so you have more aggressive sales tactics, getting in more gigs. \n\nThen, oh, all our people are busy; we need to hire more people. Even those level of people are not available at the next level down, and you end up in this death spiral of taking on too much work when what they really need is a whip limit, right? They need to control their sales pipeline. It's not a free-for-all; it's what can your business safely handle to deliver the level of quality that your customers are looking for. \n\nI think this is true not just for professional services; this is true in any business. What is the level of quality and brand and visual that you're trying to get from your customers? And what's the maximum amount of business you can do while safely maintaining that? Then you want to grow slowly while maintaining that level of quality, so you're hiring the right people, you're engaging on the right engagements, right? You're not taking any engagement that comes along because probably any engagement sucks. You're picking and choosing which engagement at that level. \n\nI think most customers don't know what they want. They think they want this agile thing or this DevOps thing, and can you come and install it for us? But you have to figure out what it is that is the actual difficulty, the thing that they need help with, and help them with that, even if it's kind of surreptitiously or kind of around a different way so that they feel like and really do get value from what you're doing. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why is Scrum so easy to understand but incredibly hard to master?",
    "Description": "Explores why Scrum is challenging to master, highlighting cultural barriers, the importance of transparency, and the gap between understanding and effective practice.",
    "ResourceId": "zSQSQPFsy-o",
    "Url": "https://www.youtube.com/watch?v=zSQSQPFsy-o",
    "Date": "2023-02-28T07:00:18Z",
    "Captions": "foreign\n\nso the question was\n\num why is Scrum so easy to understand\n\nbut incredibly difficult to master\n\nand that that's an interesting and\n\nrecently contentious one because there's\n\nthere seems to be a prevailing\n\nidea that if something is difficult and\n\nhard and lots of people can't do it\n\nthat it must be inherently broken\n\nand to that I would say I I'm not gonna\n\nwin a hundred meters race in the\n\nOlympics no matter how hard I try and\n\ndoes that mean that that sport is\n\ninherently broken no it just means that\n\nI can't do it I can try really hard and\n\nI could probably with lots of practice\n\nlearn to run pretty fast without falling\n\non my face although that might be\n\ndifficult but the reality is that\n\num\n\num\n\nit it it's only difficult\n\nbecause of our inherent baggage right\n\num if you think about the the\n\ntayloristic practices of the past and\n\nhow they impose themselves throughout\n\nthe entire hierarchy of an organization\n\nthe entire structure of an organization\n\nand we're we're talking about moving to\n\nsomething different and scrum's purpose\n\none of one of scrum's purposes is\n\ntransparency\n\nright it's designed so that by\n\nimplementing it\n\nit makes transparent\n\nthings that make empiricism difficult in\n\nyour organization\n\nso it's gonna be hard right because lots\n\nof organizations are not set up for\n\naccepting empiricism right many\n\norganizations have vanity metrics have\n\nhave uh uh enforced ways of working that\n\nwork for one team over here somewhere\n\nbut don't work for all of these other\n\nteams so\n\num that idea that that scrum is easy to\n\nunderstand I think is also has a little\n\nbit of a fallacy because it's not that\n\neasy to understand if it was easy to\n\nunderstand you wouldn't have thousands\n\nof books on the Chrome guide right it's\n\nit's not easy to understand the the\n\nit's easy to read the words it's fast to\n\nread the words\n\nbut understanding the theory and first\n\nprinciples that are embedded in there\n\nunderstanding the the the like what are\n\nwe at what is the purpose\n\nfor for each of the events what are we\n\nsupposed to get out of it because almost\n\nalmost all\n\num of the events that teams do that I go\n\nsee\n\num are are don't fulfill the purpose\n\ndescribed in the Chrome guide right\n\num a good example of that is the the\n\nSprint review\n\num the purpose of the Sprint review\n\nis to figure out what's next\n\nit's to to to take into account since\n\nthe last Sprint review the product has\n\nchanged the business has changed\n\nright they might change their mind they\n\nmight change direction the market might\n\nhave changed\n\nhow did those things affect the\n\ntransparency of the product backlog If\n\nthe product backlog is meant to be a\n\ntransparent list of our current best\n\nunderstanding of what's next\n\nhow does what's happened in the last two\n\nweeks affect that\n\nand and very rarely do I find teams\n\nactually walking out of Sprint planning\n\nwith an updated product backlog right\n\nwith with that information embedded in\n\nthere they've they've reordered the\n\nbacklog with the stakeholders they've uh\n\nbrought in that information they've\n\nasked the right questions what I see\n\nmost teams do is they demo the product\n\nask for feedback they don't get any\n\nfeedback or limited feedback or that one\n\nperson that shouts and then they're done\n\nthat's not a Sprint review right so\n\nthat's that's why it's it's not easy to\n\nunderstand and it's not hard to do sorry\n\nyeah it's not easy to understand it's\n\nhard to do and the outcomes that people\n\nget are so varied because of those\n\nincompatibilities between what people\n\ninterpret as The Thing versus the actual\n\nthing and that that I think is\n\num\n\nit's not it's I was going to say that\n\nthat's frustrating right but I don't\n\nthink it is I think it's part of the fun\n\nright it's it's how do we how do we how\n\nevery company need every company and\n\nevery team needs to be unique otherwise\n\nthere's no point in them being there\n\nright if I can just get another team to\n\ndo it or another company to provide that\n\nproduct why would I use your company\n\nversus that company it all comes down to\n\nprice right it shouldn't be about price\n\nit's about value that's being delivered\n\nhow do you create an organizational\n\nstructure how do you create a team ethos\n\na product that is unique and distinct in\n\nthe markets so that you build more value\n\nand that that that's that's these unique\n\ninterpretations of the scrum guide these\n\nunique uh practices that you add to the\n\nscrum guide scrum's just a little\n\nrulebook right it's like when you go out\n\nand buy Monopoly it comes with a rule\n\nbook not a strategy guide you need to\n\nadd those strategies you need to figure\n\nout based on the game that we're playing\n\nof Building Products potentially\n\nsoftware\n\nwhat are the tools that I need to make\n\nthat successful what are the additional\n\npractices I need to add to make that\n\nsuccessful what are the choices I have\n\nand the way I do it that makes me my\n\nproduct and my team distinctive in the\n\nmarketplace so that more people want my\n\nstuff than my competitor's stuff that\n\nfor me is is is is is why\n\nscrum is easy to understand but\n\nincredibly difficult to master because\n\nproducts are doing businesses\n\nthanks for watching the video If you\n\nenjoyed it please like follow And\n\nsubscribe I always reply to comments and\n\nif you want to have a chat about this or\n\nanything else agile scrum or devops then\n\nplease book a coffee with me through\n\nnaked agility"
  },
  {
    "Title": "If you could teach just one thing about Scrum, what would it be?",
    "Description": "The most important aspect of Scrum is empiricism—using transparency, inspection, and adaptation to navigate complexity and drive effective product development.",
    "ResourceId": "5EryGepZu8o",
    "Url": "https://www.youtube.com/watch?v=5EryGepZu8o",
    "Date": "2023-02-27T07:00:01Z",
    "Captions": "If you could teach just one thing about Scrum, what would it be? I think it wouldn't be Scrum at all; that would be the first principles. Right? It would be empiricism and complexity. That's what I would teach, and in fact, that's probably what I spend the majority of my time in the EPS. When I'm just talking to people, engaging with leadership, that's what I spend the majority of my time talking about: empiricism and complexity.\n\nIf you have those fundamental ideas of empiricism and complexity, the understanding, the realisation that no matter what way you choose to do stuff, it might not always work. It might have different outcomes depending on the current circumstances, the prevailing wind, right? Then you realise why people realise why things don't always work out for them. They realise why things are different. They realise why things are difficult. They realise why you don't always get a successful Sprint, no matter how hard you try. You realise why you can't normalise your number of story points delivered per Sprint. You realise why story points become ultimately ineffective.\n\nBeyond the team, you realise why for a lot of those things, people and teams can take those ideas and run with them themselves. I don't believe that Scrum should be forced upon teams. I think they should choose themselves how they work, and if they want to take and use principles of Scrum, then I'm here to help them. But if you want to use other stuff, I'll help them with that too. They should be making those choices with a clear and concise understanding of complexity and empiricism so that they can ultimately make more of the right choices and less of the wrong ones.\n\nI think that's hard, and I think that's missing in a lot of the—I don't know a better word than boilerplate—teachings of the mechanisms in Scrum. Doing mechanical Scrum is not useful at all. People have to understand why each of those things in Scrum is in place, why it provides them with value, why taking it away—what's the result of taking it away? What happens? What doesn't happen? And why we want to keep those things. I think that's so important.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why did you choose the Scrum.Org track rather than the Scrum Alliance track?",
    "Description": "Explains choosing Scrum.Org over Scrum Alliance, focusing on values, certification costs, flexibility, community support, and alignment with agile and scrum principles.",
    "ResourceId": "jhpy9Hy8uEw",
    "Url": "https://www.youtube.com/watch?v=jhpy9Hy8uEw",
    "Date": "2023-02-24T07:00:14Z",
    "Captions": "Question was why did I choose the scrum.org track rather than the scrum Alliance track and the initial the initial choice was kind of not a choice at all.\n\nUm I kind of fell into the scrum.org track right around the time that that Ken left separated from scrum Alliance and founded scrum.org. A few months after that I participated in training from Richard Hundhausen, who created the professional scrum developer which is now the applying professional scrum with software development.\n\nUm I participated in love beta for his class in Australia so I flew down to Australia to do that. I became uh uh the idea was to become a professional scrum trainer with scrum.org and it was funded by my boss at the time Adam Cogan. Uh so I can blame Adam for that choice there.\n\nUm but I think the reason I've stayed with scrum.org is because of a number a business ethos like I don't like working with organizations that I feel and this this is very personal I feel um don't um respect the topic respect the people respect the customer. \n\nAnd I feel like scrum.org do a very good job of that. I feel like um this this idea that you can you as the customer right you're coming for training that you can you magically forget your your all your knowledge every two years and the way you get that knowledge back is to pay two hundred dollars right that doesn't sit well with me. \n\nI prefer the scrum.org model where um once you've got a certification you've got it right like your driver's license or uh your University degree you've got it you've passed bar and then if you want to dive more deeply and increase your knowledge there are other bars that you can also add to your story but that's up to you right that's your choice whereas that idea that your knowledge is taken away and you have to re-certify as that's how that one's crap.\n\nUm and I feel like the investment the scrum.org has made in the idea of community that we are one group of trainers that we collaborate that we have shared courseware that we all contribute to so if you take a class in in uh in Africa or China or Australia or the UK or the US you're going to get a class that consists of the same fundamental ideas it's going to consist of the same story right.\n\nUm and that comes through the the the consistent courseware uh the steward system have a steward system for managing that courseware um and the the constant sharing that we do as a community. So for example a lot of uh we use mural now in the virtual space right.\n\nUm and scrum.org provides standard murals that are as generic as possible like they don't tell the trainer how to teach their class they don't tell the trainer what to say but here's a flow with the exercises and the knowledge that we want to want to share in it.\n\nUm and then I have my own version of the murals that I share back to the community and my murals are more specific right I include liberating structures trading from some of the training from the back of the room content.\n\nUm I have created my own ways of telling stories of doing exercises and I create those murals and then I share them back to the PST community so other PSTs can leverage them so that the greater the community as a whole um the the the the more powerful it is in in telling its story right if all the traders are better then the whole story is better and I think that's really important.\n\nSo it's that sense of community that I like and I've been a PST for let's have a look 13 years 13 years now I was back in early in 2010 that I started this journey.\n\nThanks for watching the video. If you enjoyed it please like follow and subscribe. I always reply to comments and if you want to have a chat about this or anything else agile scrum or devops then please book a coffee with me through naked agility."
  },
  {
    "Title": "What is DevOps and how is it different to Agile?",
    "Description": "Explains how DevOps and Agile share core principles, focusing on delivering value through rapid feedback, systems thinking, and continuous improvement in software delivery.",
    "ResourceId": "00V7BJJtMT0",
    "Url": "https://www.youtube.com/watch?v=00V7BJJtMT0",
    "Date": "2023-02-23T07:00:00Z",
    "Captions": "Um, so the question was, what is DevOps and how is it different to Agile? I would say fundamentally it's not. Right? Fundamentally, DevOps and Agile is really the same thing. We're solving the same problem, but we're just looking at it from different angles. \n\nSo you'll usually find the folks that are very process orientated are like, \"Oh yeah, Agile is the thing,\" and DevOps is, you know, part of that story. It's the automation piece in that story. But then you talk to the DevOps folks and they'll be like, \"Oh, DevOps is this big thing and Agile is the process piece in this story.\" \n\nUm, and I think that for me, having lived both worlds, indicates that it's all the same stuff. We're talking about the same thing. We're trying to solve the same problem. We're telling the same story; we're just coming at it from a different perspective. It's how would technical people solve this problem and how would non-technical people solve this problem? \n\nRight? Although there are non-technical people, a lot of technical people in the Agile space. So, I think of DevOps and Agile as two heads; they're the two sides of a coin, right? \n\nUm, come at it from whatever angle you want. It's the core practices; it's the principles that are behind it that are the thing that we should be focusing on. Everything else is just the [__] we have to do to make those things successful, right? \n\nUm, whether it's getting tools in the DevOps space, whether it's looking at shortening cycle times—it's a big focus in DevOps—or it's systems thinking. In the Agile space, it's more looking at how do we encourage people to take accountability? How do we encourage shared ownership? How do we, um, build an empirical, hypothesis-driven mindset? \n\nRight? Those two things, you can't have one without the other. They both go together. And if you want to be successful at delivering software products, then you need both Agile and DevOps in unison to be able to be successful. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "What is Taylorism and how did it influence project management?",
    "Description": "Explains how Taylorism shaped project management through standardised processes, command-and-control structures, and its impact on efficiency, hierarchy, and modern practices.",
    "ResourceId": "wHYYfvAGFow",
    "Url": "https://www.youtube.com/watch?v=wHYYfvAGFow",
    "Date": "2023-02-22T07:00:28Z",
    "Captions": "The question was what is terrorism and how did it influence project management? I think that's an interesting question because taylorism, let's quantify that first. Taylorism is the name of a gentleman called Frederick Winslow Taylor, who back in the 1880s and 1890s was kind of like the thought leader, the management consultant of the time. He worked with all of these big factory owners. He did a time and motion study about the work, trying to figure out how do we get better at delivering more stuff because in those days the outcomes were guaranteed, right? Because you had a factory that made clocks and you were going to get clocks out the other end of the factory. We just want more clocks, supply and demand. \n\nBut in that world, during the Industrial Revolution, the demand was much higher than the supply. So we had very sparse markets, not so much competition. We didn't have that globalization. So if you were making clocks in Europe, you were selling in Europe. If you made clocks in the UK, you were probably selling in the UK. If you made clocks in China, you were probably selling in China. They didn't have that globalization, so competition was very low and customers didn't really know much about the products that they were buying. So they just bought what they were provided, right? They weren't asking for different things; they weren't trying to get different stuff. \n\nSo you had this very low dynamic, low competition marketplace and a whole bunch of tools and practices were developed around this space. Frederick Winslow Taylor is what we call taylorism. He developed a bunch of these techniques, started developing them, and one of the fundamental bases that they worked with was because people doing monotonous factory work, because they disconnect from the work, you find that they try everything they can not to work. \n\nThere's this famous quote from Taylor: \"Not a competent worker can be found that does not devote a considerable amount of time to studying just how slowly they can work and still convince their employer they're going at a good pace.\" I'm sure listening to this, you're all thinking of those companies that you've worked for and with that have that ethos at their heart, that employees are inherently untrustworthy. They're inherently not going to do their job unless we're much watching them, treating people like factory workers, right? We need to keep an eye on them. We need a foreman to keep an eye on the people, and then maybe we need managers to keep an eye on the foreman and managers to keep an eye on those managers, depending on how big we get. \n\nAnd hierarchy is born, right? You get hierarchies, and then because we're going to put the thinkers at the top of the organization and the doers at the bottom of the organization, because the doers don't need to think, right? They're just making more stuff. We know what we're going to create; we're creating clocks. Then we can create these hierarchical steering-based organizations where budget comes from the top, decisions are made at the top, direction comes from the top. \n\nAnd then that kind of progressed through into the Gantt chart in 1906 from Henry Gantt, through into the 1950s where the US industrial military complex took hold of many of these ideas and started incorporating them into the way they work. So you want to divide people into ability-based groups. You want to standardise the processes that they do, train that group only in those processes, and hey ho, we ended up with departments across our organisations with the sales department and the marketing department and the coding department and the testing department and the operations department, right? Let's keep them separate, train them only in those ability-based groups. \n\nSo out of those ideas was born those traditional project management methods. Now a lot of work has been done recently to try and curtail or morph many of those traditional outlooks to a more people-focused approach because it was a staff-focused outlook. But that staff-focused outlook is still at the heart of a lot of those techniques. Yes, I do know fantastic project managers that don't focus on the stuff; they focus on the people and they get great results. But in my experience, those folks are super rare. They're booking a trend; they're not the mass-produced project manager that you find out in the ether. \n\nAnd what's happening is that project plan becomes the gold standard rather than planning becoming the gold standard. And so taylorism is really the source of, if you read about taylorism, you read about the scientific management method, you'll see that influence going through all of the stuff up until the modern era, even through the lean Toyota production system, right? Which was an adaption of those techniques for the more modern world of the 1950s when markets were getting more crowded, right? So they needed new techniques to be able to move even faster. \n\nAnd that was a lean Toyota production system. But as we move into the modern world, and even 50, 60, 70 years ago, there weren't really any of these markets that were low competition left. Everything's high competition, high demand, high variability in all the things that we do. People are starting to want custom capabilities from their organisations, which is why car manufacturers are increasingly adopting agile practices so that they can start delivering these custom capabilities dynamically and quickly to their customers, incorporating the design of the products into the actual delivery of the products rather than keeping them as separate things, right? Design it and then deliver it. They need to constantly be adapting and changing. \n\nSo taylorism created was the source of those traditional project management practices, but there are many practices and tools in traditional project management that are still just as valid today. Throw out the baby with the bathwater, but try and figure out how to increase your adaptability, reduce your bureaucracy, reduce the plan, increase planning, and deliver more value. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, add your scrum or devops, then please book a coffee with me through Naked Agility."
  },
  {
    "Title": "Why do you think the PSU course has become so popular for product development?",
    "Description": "The PSU course bridges the gap in product development by integrating user experience and design into Scrum, enabling teams to deliver more valuable, user-focused products.",
    "ResourceId": "S7Xr1-qONmM",
    "Url": "https://www.youtube.com/watch?v=S7Xr1-qONmM",
    "Date": "2023-02-21T07:00:07Z",
    "Captions": "Why is the PSU so popular for product development teams? \n\nUm, because there's a gap. There's this massive gap. We talk a lot about in the product development world. We talk a lot about scrum, right? Scrum's not the only process, but it is the predominant process. It's the way most people talk about agile and product development today. It's the way most people um characterise and phrase it, right? They use scrum terminology and the way they speak. It's kind of been adopted. \n\nUm, but scrum itself does not talk about where do you get your backlog from, right? It just says have a backlog, have it ordered. That's product backlog. Here it is. Where does it come from? How do you know what you should put in there? How do you know if the things you put in there and that you've delivered are actually the right thing? And that's kind of the purpose of the learnings that come out of the PSU. \n\nAnd so the professional scrum with user experience looks at um kind of two things. One is how do we integrate all of those ideas that have come out of the expert and awesome work done in the user experience world? How do we integrate that into the product ownership world? Right? Product owners are often user experience experts or have access to user experience experts who are able to help them formulate a more hypothesis-driven engineering practice where they're looking forward, not only looking forward into the future and figuring out what it is we need next, but also looking into the past of what we have delivered and did it actually provide the value we need or do we need it to be slightly different? \n\nSo there's a lot of awesome work in there that's really important. But quite often the experts in that space have to spend too much time um fixing, I'm going to phrase this badly, but fixing the problems that the engineering teams create because they don't understand those things. So engineering teams make decisions just like with lack of security, right? You make decisions based on I need to get this work done, not on how do I support this holistic long-term infinite game that we're playing of delivering valuable product. \n\nSo by those experts encouraging and enabling the engineering teams to take on the parts of that work that don't need the deep expertise, they just need some skills, right? The PSU enables engineering teams to make better decisions. \n\nSo that enables them to understand the additional value that those deep experts in user experience bring to that story and the hypothesis-driven engineering bring to that story. So they respect that more because they understand how it fits into their story. But also the engineering team can take a lot of that lower level work of perhaps gathering the data, perhaps um, and you know, actually implementing the test of the hypothesis off the plate of the experts and give them more time to dive more deeply into the expertise and what does the future look like in strategising and planning for the future and figuring out whether we've actually built the right things. \n\nSo for me, that value of the PSU is in bringing those two worlds together more closely in giving the teams the understanding of user experience that they need to respect it and value it. \n\nAnd giving the user experience folks enough understanding of what the engineering teams are trying to do and how they can incorporate their work and engage with the engineering teams so that um we have more successful outcomes and hopefully everybody sees the value of having these cross-functional teams, not necessarily cross-functional individuals, but cross-functional teams where you have user experience on the team so that they're able to work closely with the product owner to help build out new ideas as well as work with the team during the sprint in order to make sure that the ideas we are building are as valuable and successful as possible."
  },
  {
    "Title": "How important is DevOps in continuous delivery of value to customers?",
    "Description": "Explains how DevOps and Agile work together to enable continuous delivery, rapid feedback, and customer value in software development and product delivery.",
    "ResourceId": "XOaAKJpfHIo",
    "Url": "https://www.youtube.com/watch?v=XOaAKJpfHIo",
    "Date": "2023-02-20T07:00:10Z",
    "Captions": "How important is DevOps in the continuous delivery of value to customers? Well, it's imperative that DevOps is exactly the same thing as Agile but from a different perspective. \n\nSo the Agile piece, looking at how we work together, comes out of that view of looking at the people and how the people are working together. \n\nThe DevOps side is coming from the perspective of, well, we've got all these cool ideas. How do we actually get them over here to the customer? How do we take the idea and actually deliver it? They're kind of part of the same capability that we're trying to achieve. \n\nYou'll find people out there talking about DevOps and Agile as part of that story, and you'll find other people out there talking about Agile and DevOps as part of that story. I feel like they're all talking about the same thing. Any argument between that is irrelevant, and DevOps is intrinsic to Agile. It's the implementation of the same practices that we're talking about: empiricism and shortening feedback loops. \n\nIn the technical space, DevOps has become more than that. If you had a Venn diagram, DevOps and Agile would have this massive overlap. \n\nI think it is absolutely imperative for teams to focus on DevOps practices, focus on that lean delivery of usable working value continuously to their customers so that they can get the feedback that they need to feed into the other processes as well to help us build the best product we possibly can for our customers. \n\nBecause really, without getting our working product in front of our customers, we're not mitigating any risk. We're not testing our hypothesis. This is valuable, but is it actually valuable to the customer? You have to get in front of them. \n\nFor me, those DevOps and Agile practices work intertwined together and are effectively indistinguishable from each other. Both need to be there. Obviously, if you're not working in software, DevOps is not the bit that snuggles in there for delivery. \n\nBut if you're working in the software world, DevOps is those techniques that snuggle in along with your Agile to get that product into production."
  },
  {
    "Title": "What is a common mistake made by rookie agile consultants?",
    "Description": "Rookie agile consultants often mistake strict adherence to frameworks like Scrum for success, overlooking the need for context, team buy-in, and empirical adaptation.",
    "ResourceId": "y0dg0Sqs4xw",
    "Url": "https://www.youtube.com/watch?v=y0dg0Sqs4xw",
    "Date": "2023-02-17T07:00:30Z",
    "Captions": "I think the common mistake made by rookie agile consultants is the belief that just following the rules of whatever process or practices you've picked is going to solve any problems and it's not. \n\nScrum is a great tool but it is just a tool. People need to want to do it. The team needs to want to do it; they need to pick it, not the agile consultant. So picking processes for the team is probably the biggest rookie mistake. \n\nBut also focusing on the rules of the game rather than the underlying reasons for playing in the first place. Right, why are we wanting to move towards a greater degree of agility? Why do we want scrum? Well, it's so we can get closer to the customers and make better business decisions. Right, so that we can iterate quicker on the wrong ideas and do more of the right thing and less of the wrong thing. Empiricism, right? \n\nSo I think their biggest mistake is not focusing on those underlying principles that support the ideas so that the people involved understand what decisions they need to make in order to support and benefit from the process rather than just telling people what to do. You're gonna do scrum? \n\nOkay, well you end up with a lot of friction and push back and people not liking what's going on. And if everybody in the team's not on board, you're not going to be successful."
  },
  {
    "Title": "What would you advise a scrum team to do in their first 4 weeks?",
    "Description": "Guidance for new scrum teams on establishing effective practices, learning from experience, experimenting, and improving during their first four weeks with scrum.",
    "ResourceId": "2I3S32Sk8-c",
    "Url": "https://www.youtube.com/watch?v=2I3S32Sk8-c",
    "Date": "2023-02-16T07:00:01Z",
    "Captions": "So how, what should a Scrum team do within their first four weeks? That's a really interesting question because if their intent as a team is to try Scrum, then what I suggest they do within their first four weeks is try Scrum right. There are all sorts of great reasons why we shouldn't do some of the things in Scrum. There's reasons why we shouldn't have as much focus as we would like on the topic, right? Because we get multiple things that we have to show progress on. There's lots of good reasons why we can't have a single product owner; it has to be multiple people. There's lots of good reasons why we can't have a single unified backlog because we're working on too much stuff. And there's a reason why we can't have a product goal because, you know, we can't decide what it is we're working on.\n\nI think all of those are just excuses for not being able to find focus, you know, commitment, right? To dare to change the way we do things in order to try something different and see if it works for us. So my advice for teams just starting out in Scrum is do that, right? Just do Scrum. A great set of exercises that I do with teams, I have a Scrum startup exercise that I do. Happy to share it with anybody that's interested. What I basically do is I teach Scrum and then provide the startup exercise. They see what Scrum is supposed to look like. Again, the EPS is great for that, right?\n\nAnd then have the people that are doing the work that now understand Scrum create an organisational change backlog. That's something you can do in the first four weeks. If we're going to try and do Scrum, do it and write down every reason you can't. Write down every friction that you hit. Write down everything that needs to change in your organisation in order to be able to do this thing and make that list open and transparent to leadership so that they can see what's getting in your way. Because quite often they can't; it's very opaque to them. Make it transparent, right? That's the very essence of Scrum, increasing transparency so we can see what's going on and perhaps do something about it. Stop moving my advice."
  },
  {
    "Title": "How do you think Agile is evolving since its inception in 2001?",
    "Description": "Explores how Agile has shifted from top-down management to decentralised decision-making, highlighting ongoing challenges and the move towards true organisational agility.",
    "ResourceId": "QgPlMxGNIzs",
    "Url": "https://www.youtube.com/watch?v=QgPlMxGNIzs",
    "Date": "2023-02-15T07:00:07Z",
    "Captions": "foreign\n\nHow do I think agile is evolving since its inception in 2001? I think it's been evolving steadily, although often unfortunately not in the way we would like. \n\nI think one of the whole purposes of agile and the agile manifesto and the ideas behind it, forget the names of the things, right? The ideas behind it is that we're trying to move away from those top-down steering departmental organizations towards something that's more decentralized and democratized, right? So that we can respond better to what's happening in the market, and that's just not been happening. Most organizations, even those that say that they're doing agile, they even I would look at and say, yeah, they're doing pretty well, right? Are actually still hierarchical steering and budget comes from the top type of organizations. \n\nPeople aren't making that leap, which I think it is a leap from steering towards decentralization. I think that's the evolution that's happening now. You're seeing a lot of movements now talking about agile 2.0, talking about rewilding of agile, right? And those ideas are around let's kind of get back to the original ideas, which is getting rid of these monolithic processes that are perhaps getting in the way of the standardized processes, which are getting in the way of our ability to deliver value to our customers and engage with our market in a way that is dynamic and fast, right? \n\nAnd that I think is the new struggle, is how do we get back to those topics? I think one of the things that I've been trying to do is use less agile terminology, right? Because most people I think are fed up of hearing agile this, ideal that, mindset this, mindset that, and they think it's just all a big pile of bollocks now because it's not worked for them. \n\nBut the reality is that they haven't been doing it, which is part of what's not working for them, right? It causes more friction to try and create decentralization and democratization within the bounds of an organization that is inherently command and control. You're just going to cause lots of friction, and then things aren't going to happen in command and control wins. \n\nSo I think that, yeah, I think that's the big change or the big push that we're looking at now and how agile has changed. It's gone through that phase of not actually providing a lot of value or nibbling at the edges of providing value for organizations, and now we're starting to see more organizations move to embracing more of the underlying concepts of empiricism, self-organization, decentralization, and democratization."
  },
  {
    "Title": "2023 is predicted to be a very tough year. What do you think will be needed to win and improve?",
    "Description": "Guidance for 2023: Succeed by clarifying strategy, boosting product development, investing in people, and using agile methods to gain competitive advantage and improve performance.",
    "ResourceId": "9PBpgfsojQI",
    "Url": "https://www.youtube.com/watch?v=9PBpgfsojQI",
    "Date": "2023-02-13T22:00:04Z",
    "Captions": "Foreign\n\n2023 is predicted to be a very tough year. What do you think will be needed to win and improve in 2023? \n\nBusinesses need to be more astute than they are now. I work with organisation after organisation that have no idea what their cohesive corporate strategy is. They have no idea what level of quality they really want in the products that they create, and they have no idea of what is really needed to understand what it is we need to build. Addressing those things is going to make the difference between being successful in 2023 and being unsuccessful in 2023. \n\nThere's quite often a fine line between businesses being profitable and businesses not being profitable, and it can be very small things that make that difference between profitability and not. If you're building products that are delivered in a market where there is lots of choice, then you have to be more attractive than your competitors to your customers. \n\nIf you're slow at delivering what customers are asking for, if you don't have all the features that they're looking for in that particular market, if you're losing your skilled employees because they're unhappy and taking their knowledge and skills elsewhere, perhaps to your competitors, then you're not going to be successful. \n\nIf the market is hard, right? If everybody's under hardship, those that are going to be successful are the ones that are investing in people and investing in their ways of working. If your ways of working are more effective than your competitors, you'll be successful. \n\nI think that's really what it is. You need to be more effective than your competitors, and Scrum and Kanban are tools that you can use to highlight through data visualisation the current state of what's going on in some of those spaces so that you can look at it and know what you need to improve. \n\nThe big things to invest in: product ownership is hugely lacking in organisations. Most organisations have no idea what a product backlog should look like. They have no idea how to analyse the market that their business exists in, and they need people in their organisation that can do that. Those folks aren't going to magically be able to do it; they need training. They need training and they need practice. \n\nThat's one of the reasons that we offer an extra hour of coaching—60 minutes of one-on-one coaching for every student—because I know how difficult it is. You come and take our product owner class, and then three months later you've got all these questions and no way to get answers because your business won't fund a one-hour coaching session with the trainer you had three months ago. So we just include it in the process. \n\nIn fact, if people just wanted a chat, I've got a way on my website to book 30 minutes, book a coffee with Martin, and just have a chat about product ownership, about how to get more out of it. It's actually just product management, right? Product management and the product owner is the same thing. \n\nHow do you leverage those capabilities that Scrum can enable for your business, or Kanban as well can enable for your business to get better at delivering value? That's going to be the big difference: are we delivering value to our customers?"
  },
  {
    "Title": "In high competition markets, how does scrum product development help acquire and retain customers?",
    "Description": "Explains how Scrum supports customer acquisition and retention in competitive markets by enabling rapid delivery, feedback, and continuous improvement, but not guaranteeing success.",
    "ResourceId": "o0VJuVhm0pQ",
    "Url": "https://www.youtube.com/watch?v=o0VJuVhm0pQ",
    "Date": "2023-02-13T07:00:21Z",
    "Captions": "foreign\n\nSo the question is in a highly competitive market how to scrum product development help acquire and retain customers. I think there's two parts to that one part is it doesn't right. Um the the the the you it's the value question again right this this there's kind of two parts to the puzzle there's there's um market value right and Market values made up of current value I.E what's the value that's in your product right now. So you might measure things like I don't know um you might measure customer satisfaction employee satisfaction and usage of the features in your product. Hopefully you get hopefully you've got lots of telemetry coming off your product to know what buttons people are clicking when and why and at what time of the month so that you can gather that data and make decisions right that's current value.\n\nUm but also looking at um um unrealized value right for those that recognize it I'm talking about evidence-based management here but unrealized value is looking forward in the future and figuring out what what value you don't have in your product yet that you need to have in your product. So you could be looking at satisfaction gaps hopefully you're not just doing competitor analysis right but sometimes you might do a competitor analysis and figure out um what you need to have on your product backlog those those two things scrum can't help you with right you you need you need to be able to it's going to create an environment hopefully within which you realize you need to do that and that um you need to collect that data and figure it out but that's your your your your Market your market value is your job as the business right.\n\nUm but then you've also got your your um organizational capability right at the bottom of this this this story in your organizational capability is two things it's you're you're you're organization's ability to innovate and their time to Market right those are those are two things that um people inside of your business doing the work do have full control over the value discussion is a business discussion right and scrum can't help you with that business discussion except to tell you that it needs to happen right or or help make transparent that it needs to happen on the other side of that you've got your capability and again it's scrum just tells you that it needs to happen right the minimum Cadence in scrum is monthly.\n\nYou're expected to have working usable product at the end of every month. Um if you don't have that we're you know we might be doing okay but we're not doing scrum. Um if we are able to do that then maybe there are things that need to change maybe we need better engineering practices maybe we need to pay back technical debt maybe we need to look at look at other things maybe we need to look at how quickly we can get features into production and and from the value conversation that anything we come up with is is is like um a hypothesis it's perceived value until we actually get it into production get the data from our customers or interview our customers and get that back into the into the process.\n\nSo you might be looking at time to learn at the bottom there and both of those categories ability to ability to to to innovate right how much time do we spend adding net new features rather than adding incremental features to or inter incremental capability to existing stuff. Net new features is where it's it's it's where the value is right or potential value is and you're gonna have to add a whole bunch of net new features to find that one piece of value that that is actually valuable so in order to do that we've got to get it into production as quickly as possible which is the uh time to market right how quickly can you get those features that you've created into market.\n\nSo it's a big balance here between figuring out what you need to do for the future the business needs to take care of that into um it being existing value and also figuring out what your your your your your ability to innovate is and your time to Market that that creates that evidence-based management view of your organization. Um and scrum helps and um implicitly I think is probably the best way to describe it implicitly with many of those things right it tells you you need to have a product backlog but it doesn't tell you what goes in your product backlog or where it comes from and or how you you maximize the value of it right that's a business decision.\n\nIt tells you that you need to continuously deliver working usable product but it doesn't tell you how you're going to do that what tools you're going to use what practices and techniques you need in order to achieve that. So scrum is a tool for making transparent that maybe some of these things are lacking in your organization. So in order to bring that back to the the if you're in highly competitive markets scrum enables the transparency you need as an organization to figure out that you're not going fast enough and where it is you need to fix is it that we're delivering lots of the wrong features right because we're monitoring our our usage is it that we're delivering features now that are too late for the market maybe our our ability to to get features into production is too slow is it because uh the the the we're spending too much time struggling with the complexity of our existing product and it's very hard to add new features so we don't add many of them right those are all pieces of information that scrum makes transparent that we can then use to change but we as the business still need to do that change scrum's just going to tell us there's something wrong we still need to do something about it."
  },
  {
    "Title": "How does scrum help leadership teams pick the most valuable work to focus on?",
    "Description": "Scrum highlights issues and provides feedback for leadership teams but does not select valuable work; leaders must set priorities and use scrum to validate decisions.",
    "ResourceId": "bpBhREVX85o",
    "Url": "https://www.youtube.com/watch?v=bpBhREVX85o",
    "Date": "2023-02-10T07:15:02Z",
    "Captions": "Oh, that's a great question. So the question is how does Scrum help leadership teams pick the most valuable work to focus on? And the answer is it doesn't. Scrum has absolutely nothing in it to help leaders pick the most valuable thing to work on. That is their job, not Scrum's job to figure out. \n\nRight, if you're in business and you're running an organisation, you're the one that needs to understand where and what to invest in based on your interpretation of the market demand. Scrum can't do that for you. Kanban can't do that for you. SAFe can't do that for you. Marisa SSADM was never able to do that for you. The leaders need to make that decision. They need to understand their business, understand their customers, understand this strategic direction, having a strategic direction that they want to go in, and figure out what are the things that we need. Not solutions, right? But what are the outcomes we're trying to achieve? What's the next outcome we want to achieve? And then Scrum will help you create teams of highly professional people who can organise around delivering that using Scrum."
  },
  {
    "Title": "Why are recessions a great time for organizations to evaluate the opportunity of agile?",
    "Description": "Explains why recessions are ideal for organisations to adopt agile, highlighting adaptability, rapid learning, and customer-focused growth in uncertain times.",
    "ResourceId": "Nw0bXiOqu0Q",
    "Url": "https://www.youtube.com/watch?v=Nw0bXiOqu0Q",
    "Date": "2023-02-09T07:15:02Z",
    "Captions": "The question is why why might recessions be a great time to re-evaluate our opportunities with agile and I think it's deeper than that forget the agile story right I think the time when you should be investing the most in marketing from a sales perspective right when you should be investing the most in your people from getting the most out of the out of the people that you have is is when the world's a troubled place around your organization when you're when you're struggling and life is difficult that's when you should invest more time in the people and the um and and and getting people to understand the markets and add more value to your customers right so so that really brings you back around to that agile conversation right we talk about agile but what is agile really it's about responding to the market more quickly more quickly that's not English responding to the market quicker right um so we want to respond to the market quicker and in order to respond to the market quicker we need people with the skills and capability to be able to respond to the market more quickly I did it again with uh um with the the the accountability and to be able to do that right that they are able they feel like they are empowered and to be able to go and go and make the changes necessary because that was that was the thing from from years and years ago um when a lot of the organizational practices were created it it was designed to slow the change in the organization because the markets were slow right you wanted to be able to take advantage of your market for as as long a period as possible because it's going to exist for a long time so you didn't want to change the company let's create some burratic bureaucratic processes to enshrine the way we do things uh push responsibility up the organization rather than down and the people at the top made the decision so the people at the bottom who are closest to the market have to have to realize it has to be painful enough because they don't actually care about your business right it has to be painful enough that something's wrong in order for them to tell their boss that that something's wrong and then painful enough to go all the way up the chain to the top and then eventually a decision is made to do something different and comes all the way back down own um but the time that response comes back down the market hasn't shifted in the old way but today the market that opportunity's gone right we we don't have that opportunity to take it or we've lost a bunch of money in the delay it takes to make that decision so so I think um so I can't think of a better time to invest in the ability capability of your organization to deliver value to your customers the more value you deliver to your customers the more favorable your customers will look because they're getting a higher return on investment therefore if there is a choice in our highly competitive markets then they're going to pick you over the competitors that's that's how you survive a recession and they don't because you're able to more quickly adapt to the market demand and provide your customers with more value so the purpose of agility right is to help companies better respond to changing demand in the market give customers more of what they want and less of what they don't so yeah that's perfect time to do that"
  },
  {
    "Title": "How would you help organizations pitch the opportunity of agile internally?",
    "Description": "Learn how to build a compelling business case for agile adoption by aligning benefits with key metrics, stakeholder goals, and inclusive change management strategies.",
    "ResourceId": "3AVlBmOATHA",
    "Url": "https://www.youtube.com/watch?v=3AVlBmOATHA",
    "Date": "2023-02-08T07:15:00Z",
    "Captions": "Foreign. How do I help organisations pitch the idea of Agile internally? I guess it depends whether you're managing up or you're managing down, right? \n\nUm, so if you're managing up, i.e. you're working on a team or with a team or at some level where you're building products and you want to do Agile but your organisation is not yet there, yet is not yet understanding what the difference is or what the impact is, um, then having conversations with them in their language is the most important thing you can do. \n\nUm, you need to, like, there's no point in talking about Agile or Scrum up the organisation because they're words that then you then have to explain, right? The other person's like, \"Well, what the heck is this crap?\" Right? I need to, you need to tell me what it is then, and you end up having to stop all the time. So you need to use their language. \n\nSo if you're talking to people with, uh, um, like a business value focus, then talk about, um, delivering more of the right things, less of the wrong things. Um, talk about, uh, responding to the market more quickly. I'll talk about, um, how to, um, deliver happier, more engaged customers, right? That's probably what they're focused on; that's probably what their metrics push. \n\nBut find out what their metrics are, right? What are they measuring as success in the business? And go look at that. If you're, um, business, if you look at those metrics and your business is a totally fiscally focused, right? Apart from just being screwed, right? You also need, you need to look at, um, what are the benefits from a fiscal perspective that you can get from Agile. \n\nI feel like if your company's focused on just fiscal stuff, then that's not a good thing anyway, right? That's revenue extraction rather than value creation. But, um, that's, that's, you can only get to that conversation once you convince them. So you want to be talking about reducing fiscal risk. You want to be talking about, because quick, fast iterations of actual value they provide reduces operational risk, reduces fiscal risk. \n\nUm, it increases the value that you've delivered, and in most countries, there are tax benefits to write down capital expenditures, right? For example, here's a simple argument: I'm going to spend, uh, uh, 12 million dollars capital expenditure to build a product. Um, at the end of 12 months, I'm going to deliver that product into production, and at that point, and like, I can start writing down that capital expenditure, right? From a tax perspective, normally you can only start writing down so it depreciates over time, right? You can write that down and claim tax benefits for it. Most countries, I don't know about all countries, but UK, US definitely have these things in there. \n\nBut if you remember in school when you do that, uh, um, compound interest calculation, right? And you're always looking at how big the money grows, the opposite is true for, um, writing things down. So at the end of, if you're delivering monthly, right, to production, it's costing you a million dollars a month on a 12 million dollar yearly gig. At the end of the first month, you can just, you can start writing down that million dollars. \n\nAnd then at the end of the second month, you've already had a month of writing down a million dollars, and you start writing down the second million dollars. And then at the end of the third month, you've had two months of writing down the first million dollars, two, sorry, three months of writing down the first million dollars, two months of the second, and you're getting into the third, right? So you end up with this compound, right? \n\nI've never met a CFO, um, who you can't convince that Agile's a good idea if you use their language. What data are they looking at? How could being more Agile shift those metrics? And use their words to describe it. So that's managing up. \n\nUm, if you're in leadership in your organisation and you're looking down in your organisation and you're trying to figure out how do I, um, engage all of these people in this change activity in moving towards a different way of working, um, and the answer is get them involved in that process. You need to create an event whereby you're asking them what it is that we need to do differently, getting them to agree what the action steps are to move forward, getting them to choose the processes and practices that you're going to use. \n\nBecause only by them choosing it, them being involved, and them deciding will they care enough about the change to get behind it and support it and help, help, help make that change. Otherwise, they'll, they're not in, they don't care about your objectives, right? They care about their objectives. You have to make it their objective or help encourage it to be their objective. \n\nSo I use things like, um, open space Agile, and there's a concrete implementation called Open Space Beta, which helps with that as well. Um, so yeah, it just depends whether you're managing up or managing down."
  },
  {
    "Title": "What is the most valuable thing you have learned through training people?",
    "Description": "Training people worldwide reveals that organisations face similar challenges when adopting agile and scrum, highlighting the universal nature of change and shared solutions.",
    "ResourceId": "8uPjXXt5lo4",
    "Url": "https://www.youtube.com/watch?v=8uPjXXt5lo4",
    "Date": "2023-02-07T07:00:06Z",
    "Captions": "So the question is what's the most valuable thing I've learned training people? I think it's that there's two things that are kind of related. One is no matter where you are in the world, everybody's got the same problems when they're implementing Agile, when they're trying to do Scrum, when they're trying to think about the implications of empiricism and a value focus on their organisation. Everybody runs into exactly the same walls. Everybody runs in Texas; they think their walls are unique, but everyone runs into the same walls.\n\nBut the value that I find for me is I love the engagement that I get in multicultural, multi-time zone, multi-country training events much more than I do from single country events because I feel like there's a little bit of echo chamber in a single country event that there aren't as many different ideas generated. I think it kind of demonstrates that value in globalisation, right? You're teaching a class and you've got, you know, even five people from the US, five people from the UK, and they're bouncing off each other. Then that one student that's from Eastern Europe will say, \"But what about this type of thing?\" Oh, never thought of that, right? Because it's not even within their sphere of experience.\n\nAnd those ideas coming in, I think, helped me appreciate the diversity of cultures, but it also results in a better training experience for the students because they get more conversation, more topics, more—disagreement's not the right word—but more ideas coming in there. And for me, that's the most valuable."
  },
  {
    "Title": "Why did so many of the early agile transformations fail?",
    "Description": "Early agile transformations often failed due to top-down decisions, lack of team involvement, and misalignment between leadership and those doing the work.",
    "ResourceId": "8nQ0VJ1CdqU",
    "Url": "https://www.youtube.com/watch?v=8nQ0VJ1CdqU",
    "Date": "2023-02-06T07:00:02Z",
    "Captions": "So the question is, why did so many of the early agile transformations fail? I think a better question is just, without the early part on it, right? Why do so many agile transformations fail? Because the early ones failed for the same reason as they do now. \n\nThat's the people who are doing the implementation are not involved in the process of deciding what we're implementing. Right? That's why it fails. Because your leadership decides we're going to do it this way, and everybody else goes, \"Okay, but that's the wrong way.\" Suddenly, they're resistive and unhappy because they feel like it's imposed upon them. \n\nIf you know that old saying, \"If I'd been asked, I would have...\" right? They would have said to do something different. You get that through organisations, and it can be agile transformations, it can be digital transformations, it can be just changing something, right? \n\nThe top-down command and control triangle model in alpha organisations, right? Where you've got the people at the top making the decisions and the people at the bottom doing the work. All the decisions are made at the top, and we steer the rest of the organisation based on those decisions. You're always going to get into that situation where the people that you need to do the stuff don't want to do it because, in this context, they're smarter than you are. \n\nThey have more information, they have more understanding, and they perhaps have more skills in that space. So they're the ones that should be involved in driving it. I think there's been a lot of good work done by open space agile and specifically, as well, on top of that, open space beta to allow methods and systems to be created, a practice to be created that allows you to involve everybody in the organisation in making those decisions. \n\nIf you involve everybody in the organisation in making those decisions, then even though it might not be the decision that they would have made if they were sitting there on their own, right? Because they were involved in making that decision, they feel like their voice is heard. If they feel like their voice is heard, they're more likely to get behind whatever the ultimate decision was because it's a collective decision, right? \n\nDecentralisation and democratisation of the ideas, and then they'll be supporting and helping with the transition as you move forward rather than getting in the way and hindering because they just don't care, because you didn't ask me anyway. \n\nThat's what I think is why agile transformations fail, and I think it's just as true today as it was in the early days. It's just in the early days, there was a small number of high-profile agile transformations, and today, there are hundreds of thousands of actual transformations going on."
  },
  {
    "Title": "What is the hardest part of working with a brand-new scrum team?",
    "Description": "The biggest challenge with new scrum teams is overcoming misconceptions about scrum and shifting focus from process mechanics to core agile principles and empirical learning.",
    "ResourceId": "-xMY9Heanjk",
    "Url": "https://www.youtube.com/watch?v=-xMY9Heanjk",
    "Date": "2023-02-03T07:00:00Z",
    "Captions": "Imagine, what is the hardest part of working with a brand new Scrum team? I guess it depends on whether you're talking about a team member joining the team or like a Scrum Master, right? Your coach working with a brand new Scrum team, it's probably both pretty similar. It's what we think we know. I think it's the same is true when you work with any group of people new that you... it's... I always, this is one of my tests, right? I ask teams, people, companies, I ask them how they think they're doing. It's grammar, Agile or whatever. And if they say, \"We're awesome at it,\" I know it's going to be a complete car crash. \n\nAnd if they say, \"Well, you know, we don't think we're doing that well. We really need some extra help. We're trying to do different things, but we're hitting stumbling blocks,\" you know, it's going to be absolutely awesome, right? Because they've got to that point where they realise what they don't know. And that's a big inflection point for teams. \n\nSo when you're working with teams, new teams, the biggest gap is what they think they know. They think that they have to do user stories. They think that they should be doing planning poker and story points. They think they should be doing estimation. They think they should be doing burn downs. They think they should be monitoring their velocity, and all of those things are nothing to do with Scrum, right? They're barely mentioned in the Scrum Guide. Burn downs are mentioned; I'm not sure velocity is, but burn downs are mentioned as a, \"Here's a list of things you might do.\" \n\nSo they're not intrinsic to the process at all; they're strategic choices you might make, right? And trying to help them understand the difference between that and the fluff, right? So the core thing that we need to understand as individuals, as teams, as members of teams is that we're trying to create, we're trying to leverage empiricism, right? It's a scientific method. We're going to do something very small, we're going to get it to the people who are going to use it, and then we're going to analyse their usage. And maybe they're going to tell us feedback. We're going to analyse their usage, and then we're going to change what we do based on that. That loop, that's an empirical loop. \n\nAnd that knowledge, that understanding seems to be fundamentally missing from most teams that are doing Scrum, right? They don't... they never learned or never understood the foundational elements, and they're just looking at the mechanisms in Scrum and just following mechanical Scrum. So trying to get them to understand that all of the mechanical parts are just... so the bollocks. You need to make sure you get the empiricism, feedback loops, shortening the time to market, getting that, closing that feedback loop, closing that time to learn, right? Those are the things that actually matter. \n\nAnd whether you're focusing on Kanban or Scrum or kind of an Ann Scrum or Lean or whatever, it's all fundamentally the same thing that we're trying to achieve. Those underlying foundations, if we understand them, everything else is just, \"Right, what would we like to do in the way we do it in order to be successful?\" And bringing those foundations in when people have already built houses on top is much harder."
  },
  {
    "Title": "Debunking the Scrum Myth: Why \"Twice the Work in Half the Time\" is a Misleading Promise",
    "Description": "Explores why Scrum's \"twice the work in half the time\" claim is misleading, emphasising value over output and the importance of realistic expectations in Agile teams.",
    "ResourceId": "e7L0NFYUFSw",
    "Url": "https://www.youtube.com/watch?v=e7L0NFYUFSw",
    "Date": "2023-02-02T07:00:13Z",
    "Captions": "Hmm, does Scrum allow you to do twice the work in half the time? That's such a marketing thing, isn't it? Right, that's how I want to sell lots of books. Does it do that? No, right? That's not what you're trying to achieve when you say twice the features in half the time. Right, you're talking about 400 percent increase—my math is right—at 400 percent increase in output, and it's an output-focused measure, right? \n\nFeatures is output, and Scrum is not output-focused; it's outcome-focused. We want more value, not more stuff. If we could deliver 10 of the stuff that I deliver but a hundred times the value, it's going to be better. \n\nRight, so that's just some... yeah, it's a terrible phrase and probably has done quite a lot of damage to the industry, or at least it seems to have damaged that. But also, Woody actually talks about it in the book. Right, that's the title of the book. It's like when you see Agile books that have the word \"best practice\" on the front, and you're like, \"Oh, but there's no such thing as best practice in the Agile world.\" It's, you know, emergent practices. \n\nYeah, but your publisher is not going to sell a book that says \"adequate practices\" on it, right? They're going to sell a book that says \"best practices\" because that's marketing. \n\nSo, when you actually look at the contents of the book, how he explains what he meant by twice the features in half the time, I think it gets a little bit better, right? It gets a little bit better, and it is definitely a book I have used leverage successfully with people in leadership to get them more friendly, more on board with the process, especially if they're very opposed, right? Because it's got that cover; it covers a good lead, right? \n\nThey're going to have the opportunity to pick up that book, and so I have leveraged it. I have bought copies of the book. I have a box somewhere with copies, and I will go leave them near executive bathrooms and customers. I go, \"Uh,\" and then they're going to... that's that book that they pick up and just sit and have a read of. \n\nIt talks about the Udo Loop; it talks about Jeff when he was a fighter pilot, and just those compelling stories about where he felt some of this stuff came from and being able to do that. But no, the title of the book is just... it's... you're not getting twice the features in half the time. You maybe get twice the value and half the features. I don't know, maybe that makes sense. I don't know, but you want to be focused on outcome, not output."
  },
  {
    "Title": "Why is Satya Nadella a better example of agile leadership than Steve Jobs?",
    "Description": "Compares Satya Nadella’s and Steve Jobs’s leadership, highlighting Nadella’s agile approach that fosters innovation, decentralised decision-making, and lasting organisational change.",
    "ResourceId": "HTv3NkNJovk",
    "Url": "https://www.youtube.com/watch?v=HTv3NkNJovk",
    "Date": "2023-02-01T07:00:10Z",
    "Captions": "so why is Satya Nadella a better example of agile leadership than Steve Jobs? that's a great question. um so it's going to be very contentious because of the number of people that really like Steve and Steve was great Steve Jobs was some fantastic for Apple but I think the difficulty that you see the difficulty that he created at Apple and you see it today and that's that um when Steve was running Apple everything was awesome they were innovative creating new ideas but they weren't really he was he he was driving those that innovation and those changes with with almost like an iron fist and the way treated people was was very very very bad from the measure of today right kind of toxic working environment um but he was an Apple that was successful he left Apple or he got ousted by the by the board I think it was then not successful they brought him back it was successful he died and then Apple started to lose their innovation edge so there was no sustained inbuilt innovation systemically across the organization it was all in that pyramid structure of command and control whereas when when when Satya Nadella took over Microsoft he started and it takes time in organizations of that scale and that history he started making changes to the organization to um effectively but again I know everybody says this right but responsibility down the organization so that the people doing the work have more say in how the work is done and you can see that across lots of lots of different parts of the business I mean the the the the the the windows team and the um Azure DevOps team are teams that I've worked with a little bit with the teams team um and they're a lot more innovative it's innovation across the board so everybody and all of the teams is responsible for coming up with ideas and uh trying to implement them and figuring out what the smallest thing they can change is but the real um the real the real push comes from the non-logical systemic changes that are starting to happen across the business so for for example they used to measure the Azure sales folks they would get bonus to based on the number of hours of Azure that they sold and what they found was they would have unhappy customers because customers would buy a million hours of Azure for the year because the salesperson was great and managed to sell them on it and all the cool things they would use it for and the ideas and all of those things and then at the end of the year they would get their bill for them for the million hours of Azure and realised that they'd only used 50,000 of those million hours but they still have to pay for them um so so so that's a focus on as a business on revenue extraction versus value creation the customer didn't get value from that transaction or a small amount of value compared to what they paid whereas a small change in the way you measure the sales folks and what they did was they changed the Salesforce bonuses from sale sales to usage so the sales folks now get their bonus based on the amount of Azure hours that their customers use which means the salesperson is now not the person who's got the biggest gift of the passer to get clinched the sale and get the deal they're the person who can long term engage with the customer and help them get better at using the thing you're trying to sell so that they get more value from it so they would do things like I've done engagements where somebody in Microsoft sales has hired me to come in and talk to the customer about getting better at DevOps and the benefits they would get from it in order to increase the level of DevOps and adaption and change in in the customer because that sales person knew that that company's operations team couldn't keep up with the need for change therefore they would then have to utilise services in Azure therefore they would get more bonus right so the you're turning the negative behaviour measure into a positive behaviour measure right the salesperson gets their bonus but the customer also gets the value and you're starting to see that change in other parts of the business as well as they go through and figure out what does this actually mean to us what does this change in outlook change in attitude and part of this comes from it's Satya is an incredibly pragmatic guy he's uh he's an engineer in background so he's built products he understands the difficulty of being um building products and having those things imposed and he understands the power of the people that are in his organisation that they're the ones that are important to the business they're the ones that are driving it and it's not just a Satya versus um uh Steve Jobs idea you can see it in the way Richard Branson approaches his his his companies he talks about his job is not to look after customers his job is to look after his employees their jobs to look after the customers he doesn't have to worry about that because if they're happy they'll do that job and do it well um and there's a huge switch at the moment from I feel like from um in leadership styles from this idea of stuff focused leadership to people focused leadership right instead of focusing on more stuff more money for the shareholders more money for uh uh them um more output of products they're starting to focus on um how do we enable the people in our organisation to maximise the value that we deliver so that our customers trust us over the long term and and Simon Sinek talks about this a lot he talks about moving from the finite game to the infinite game if you're playing a finite game you there's a moment where um we all start count up score and find out who wins right that's a finite game all of all of my board games are finite games they have a set of rules we all play by the same rules a point in time where we stop and find out who wins but the infinite game is how businesses run businesses run on the infinite game there's no point in time where we all stop the whole world doesn't stop we can't have score and see who's who's who's who's won in that world it will continue on infinitely so that that's that that that focus on people that focus on leadership that focus on the long-term vision of the company and the products is is is that long-term infinite focus and that for me is the big difference between um Steve Jobs and Satya Nadella and it's actually the same difference between um um Balmer uh Steve Balmer previous CEO at Microsoft and Satya as well."
  },
  {
    "Title": "How effective is scrum training via digital delivery?",
    "Description": "Digital scrum training is nearly as effective as in-person, offering greater accessibility, global perspectives, and practical use of remote collaboration tools.",
    "ResourceId": "Y7Cd1aocMKM",
    "Url": "https://www.youtube.com/watch?v=Y7Cd1aocMKM",
    "Date": "2023-01-31T07:00:08Z",
    "Captions": "A really interesting question. \n\nSo, the question is, is digital delivery of training of live training classes as effective as in-person? \n\nAnd there's really, there's the SE are just answering the question, right? Which is no, it's not. \n\nRight? I mean, that is ultimately in-person is higher bandwidth and it's more engaging, right? \n\nBut the other part of the question is, which would you rather participate in and is it better? And I would say yes, it is better and I would rather participate in a digital delivery than I would in an in-person delivery. \n\nAnd there's a couple of reasons why. \n\nSo, I believe that using techniques, pulling in as many techniques as you can. I use techniques from Training from the Back of the Room, from Liberating Structures, and my own creations based on, you know, mushing those things together. \n\nUsing those techniques, you can get 90% of the way to an in-person delivery, right? \n\nBut in the digital space, you get some added benefits that I think we're only just getting an idea of how big those benefits are. \n\nFor me personally, one is that I like teaching training courses where I have people in the training from all over the world. \n\nI taught a training class today. I was teaching an APS today and I had one person from the US, a couple of people from Europe, some people from India, and somebody from Asia Pacific, right? \n\nAll in the one class, right? So you've got different accents, different understandings, different interpretations, different ways of looking at the world, all coming together and influencing and cross-sharing with each other. \n\nRight? So there's more of that. \n\nI like digital delivery better because it is more accessible to people. \n\nI'll teach our training class and I'll have 10 people book from Africa, right? I'll have 10 people in the classroom from Africa, a couple of people from Europe, a couple of people from the US. \n\nAnd that's a training class. Those folks in Africa might not have been able to participate if we were doing it in person because it becomes so much more expensive. \n\nRight? When you do it in-person class, you've got to have a room availability, you've got to get all the people into the one place, you've got to fly the trainer in and teach the class. \n\nYou can only, it only really makes sense if you do two full-day classes, which I don't teach anymore because I don't think they're as valuable. \n\nSo you have to do two full-day classes because it's not economically viable to do four half-days and you've got a trainer on site for four days, right? \n\nAnd it gives that flexibility to the people in your team because you're able to then do four half-days. \n\nSo they can take a little bit longer to absorb the information. They can absorb some information, try it in the afternoon. \n\nWe could do longer times, but that seems to work pretty well as well. \n\nYou don't have to fly people around, you don't have to pay all of those expensive things. \n\nI just think it's fundamentally better. \n\nThe other thing, the next thing that I think is hugely valuable is how are your teams currently working? \n\nAnd that's my kind of, that's my mic drop one, right? Is if your teams are currently working in person and go to the office every day and sit five days a week together in the office and build products, then absolutely you're going to get bigger benefits from flying a trainer in, having an in-person class, doing it over two days, and everybody's working in the same way that they currently work. \n\nBut that's not how most people in my sweet spot of industry, right, which is IT and software teams. \n\nThey're virtual. They're sitting at home. Even if they're hybrid, right? \n\nAnd everybody has to come in two days a week. Does everybody on your team pick the same two days to come in? No, they don't, right? \n\nSo all the meetings, all of the conversations are all done on Teams or Zoom or whatever platform you've got. \n\nThey're all online. So your teams have to figure out how to engage online, how to collaborate online, and how to discuss and get the most out of online because even your customers are not coming on site anymore to talk to your teams. \n\nThey're wanting a virtual call, right? \n\nSo if I teach a training class over four half-days online, the students learn not just the content of the material but the meta information around how does Martin run a class online. \n\nWhat are the tools and techniques that Martin is using to run the class so that we might be able to use them as well? \n\nYou know, I've heard of this Liberating Structures thing, but how do I do an impromptu networking with breakout rooms in Microsoft Teams? \n\nWell, you're going to experience that in my class and then you can go use that with your customers. \n\nSo I think they're learning more than they would do in an in-person class because they're learning about how to engage, how they work. \n\nThat's my favourite part."
  },
  {
    "Title": "How much of an impact can a strong, skilled product owner have?",
    "Description": "A skilled product owner drives teams to build valuable solutions, anticipate customer needs, and deliver features that create real business impact—not just more features.",
    "ResourceId": "S3Xq6gCp7Hw",
    "Url": "https://www.youtube.com/watch?v=S3Xq6gCp7Hw",
    "Date": "2023-01-30T07:30:06Z",
    "Captions": "okay\n\nso the question is how much of an impact can a strong skilled product owner have\n\nI oh ball game right I mean it's it's if you let Engineers be engineers they will do the engineering right we we can we can it's it's fairly it's fairly straightforward I know that's a generalism but it's fairly straightforward to get a group of people to build lots of stuff right to special engineering teams Sops coders software teams testers they want to get through the work they want to build lots of stuff and you you can you can move teams more easily towards creating lots of stuff so now we've got lots of stuff coming out the other end but it's not the right stuff it's not the valuable stuff it's just stuff it's just what customers have been asking for it's just what which isn't necessarily the right thing\n\nso we can get quite quickly to building lots of stuff but it's very very difficult to build the right stuff and the difference between uh an average product owner right which not a bad product owner is just bad right there's no point in having them an average product owner is going to be focused on how do I be that funnel for for the organization the customer stuff coming in to get a single story right that's an average product owner but when you have a real product owner like a great product owner they're they're they're they're not looking at that they're looking forward into the they've delegated that to their team already right the team's doing that they're looking forward into the future they're thinking about how do I get things in front of the customer when they need them not too late because ultimately when your customer asks you for features when they ask you for capabilities in your product it's already too late because it takes time for you to deliver those features and then by the time you've delivered them that's the delay the cost of delay between the ask or acos of player between what the customer is asking for and when you're actually delivering it I mean it might be two weeks but it might be a big thing and it's three months it might be six months what what does what does not having those features cost the business from when they realize they need them\n\nso great product owners are looking forward into the future they're looking at the markets if it's a b2c product if it's a B2B product they're looking at the state of the organization they're looking at what's what's happening in the business what direction is strategic direction is the business going and building lots of little experimental features to figure out what resonates best with the users in order to solve those future problems and test those ideas so that when customers do ask for features your answer is would you like us to turn that on for you we've got our uh uh uh you know uh we've got a version of that ready to go for you would you like to try it or even it's already there right I mean that's that's the that's the trick that's um I can't remember the name of the author but there's a book called crossing the chasm um and that's what it focuses on is how do we stop building for the laguards right the people that that they aren't the innovators they're just the people there's table Stakes right products must do those things how do we how do we cross over and start building for the early adopters how do we how do we get early adopters into our story how do we engage with those people how do we find them so that we can start building features for the early adopters because what the early adopters want today is what the laguards want in six months time\n\nright so then then those people that are the early adopters who are early adopters because they want to engage and they want to play with new experimental things you're engaging with them and they're telling all their friends who are the laggards right all the cool stuff that's coming down the line and they're like oh that's cool but we don't need it yet right we don't need that yet because we're not using it but even just that planting that seed of that idea starts to lead to the market rather than follow the market right so I and my market I mean either external or internal market so the the the difference between the thing that makes that product owner great is that that they're able to anticipate what the next thing is using evidence-based techniques using empiricism\n\nLevering hypothesis driven engineering practices to be able to get it one step ahead of where everything else is the ultimate the ultimate Accolade for a great product owner is that that company's competitors are looking at what they're doing and saying what are they doing let's build that right that means you're leading the market rather than following the market and that's kind of where you want to be"
  },
  {
    "Title": "What does a poor scrum team look, act and feel like?",
    "Description": "Explores signs of a poor scrum team, including autocratic leadership, dysfunctional product ownership, lack of trust, and organisational barriers to high performance.",
    "ResourceId": "irSqFAJNJ9c",
    "Url": "https://www.youtube.com/watch?v=irSqFAJNJ9c",
    "Date": "2023-01-27T07:00:16Z",
    "Captions": "the hypothetical question was what does a poor scrum team look like and unfortunately that's how well it depends answer as well right because it's not it's not the things the team well there are some things that I would almost always categorically put in the not good category but sometimes most of the time it's the the outcomes that are bad so for example a poor scrum team might be um you've got some lead developer who's always imposing their will on everybody else in the team doesn't listen to what everybody else says and expects everybody to just do what he tells them to do there's there's a there's that and I would just say that's just not a team right does not necessarily need the scrum part it's just not a team um or my favorite favorite example of a dysfunctional scrum behavior that I use a lot is actually the a dysfunctional product owner um and during a Sprint review the customer is a little bit the stakeholders are a little bit irate because they didn't get something they the way they want it and they demanded of the the scrum team why did you build it that way and what you would expect to see in a healthy scrum team is that the product owner would be then standing in front of the stakeholders um defending or apologizing for whatever the problem was and asking how would you like it to be different how what could we do differently in order to be able to support what you need right or we're not going to do it that way because that's not the direction of the product but it's the product owners responsibility to to to make that stand but that's not what happened in the case that I'm thinking of the product owner turned to the development team and said yeah why did you build it that way basically totally passing passing the buck to the development team and saying it's your fault that you didn't understand what the customer said and I translated for you and you didn't build it the way I said that's just what what the hell right that that's not there's no trust there there's no respect there there's no commitment there there's no openness there pretty much totally divested of the scrum values and they weren't doing very good scrum either so I think there's a myriad of examples of what what does a bad scrum team look like and there's actually very few examples of what does a good scrum team look like because there Patrick lisione one of the things that that he said is that that great teams are such a Force multiplier for companies because they're so rare right it's actually really hard to create great teams because most organizations set you up for failure the the the the a policy be used used to have in in Microsoft years ago under Steve Baumer was that every manager had to stack rank every one of their direct reports every year and at the end of that year based on the stack rank the bottom 10 were out of the team if you were out of the team out of out of a team three times in a row you wrote the company so what's the incentive for people to work together right isn't that an incentive for them to try and stab each other in the back what was the incentive for for you as a as a leader to build a great team well I can't build a great team because I'm going to lose 10 every year so I need mostly a great team and some cannon fodder that are going to get lost right and how does that make the cannon father feel or the rest of the people in the team feel it just totally depresses the ability for the organization to create value because mediocre teams or bad teams don't build great products amazing teams build amazing products great teams built great products so you need to have an environment within which teams are able to to be like that and that that's not about imposing processes and tools on them even even scrum you don't impose it on a team they need to choose it um it means not focusing on everybody have the most comprehensive documentation ever right you need that's not going to help and you need to not focus on on on contracts contracts don't solve your problems contracts are just working agreements right they're a working agreement between two companies so they don't deal each other over so that they have an agreement on how we're going to work and as soon as you start enshrining ways of working like ways of people working what you're going to deliver how you're going to deliver in the contract you're starting to constrain the ability for the teams to choose a way of working that best suits what they discover when they're doing the work so I think it's easy to see how organizations fail to deliver value because they're not actually focused on value they're they're focused on treating uh these teams that are meant to be generating value as a cost center rather than a Value Center and that's what results in in poor quality teams in unhappy people and shitty products"
  },
  {
    "Title": "What would be an example of a great agile consulting outcome for a client?",
    "Description": "A great agile consulting outcome enables organisations to adapt quickly to change, fostering resilience, decentralised decision-making, and empowered, responsive teams.",
    "ResourceId": "Cgy1ccX7e7Y",
    "Url": "https://www.youtube.com/watch?v=Cgy1ccX7e7Y",
    "Date": "2023-01-26T07:00:04Z",
    "Captions": "The question is what would be a great ideal consulting outcome for a customer. And that's an interesting question because I think it's different for every customer, right? But it ultimately comes down to trying to think of the right words and the right phrasing. It comes down to being able to consistently deal with surprise. Not sure that's the best way to describe it, right? But the reality of the world is that things are changing and happening all the time, and businesses have two types of surprises. They can have positive surprises and negative surprises. Positive surprises they want to be able to take advantage of; negative surprises they want to be able to, like, let's make sure that doesn't mess with us. \n\nAnd though they're surprises, you don't know what they're going to be; you don't know when they're going to happen. You have to have a system that is able to roll with it. Most organizations are very, very rigid. So an ideal outcome for an agile consulting engagement is that the organization has less bureaucracy and more adaptability, right? I mean, that's ultimately what organizations are trying to do. \n\nThe difficulty is that there are two fundamental mental constructs that seem to be mutually exclusive, and it's very hard to move from one to the other. It's very easy to move from the other to the one, right? This is the bit that's difficult: you have that Tayloristic type of organization, which is top-down command and control, 18th-century Industrial Revolution thinking, right? That's their model, that pyramid model. And then you've got organizations all the way over on the other side, which are fewer in number, who are completely decentralized, node-based organizations where the people making the decisions are the people that are up close to the market. \n\nWhereas in the pyramid organizations, the people making the decisions are furthest away from the market, right? The CEO—one of my favourite quotes is from Simon Sinek. Yes, absolutely, Simon Sinek. So one of my favourite quotes is from Simon Sinek, and he talked about speaking to a CEO and saying to the CEO, or the CEO saying, \"You know, I know what my customers want.\" And Simon says to him, \"Well, you haven't spoken to a customer in 15 years; how would you know what they wanted?\" And that's the person that's furthest away from the market making all of the decisions. \n\nWhereas in the node-based organization, the CEO is at the centre providing services to the organization. There, he's the cost centre, right? The CEO, or he or she, the CEO is the cost centre, and the rest of the organization is the value creation, and they're interacting directly with the market, invoicing, getting money from the customers. So ultimately, the ultimate goal is to move from that top-down Tayloristic organization towards this node-based, people-orientated. \n\nIt was Mary Follett, so I guess Follettism. I don't know organizations; I'm going to think over here. But it's very hard to move from Tayloristic to Politistic, okay? But really easy to fall back the other way because all you need is for rigor mortis to set in to move back to that rigid top-down model because that's what it is. And one of the things that I think a successful agile consultant will do is work with people in that organization to help them have a more flexible mindset. \n\nSo from top down, left to right, at all levels, you want every single person in your organization to be thinking about how do I remain nimble? How do I remain adaptable? How do I stave off the rigor mortis, right? That is bureaucracy, and that needs to be in every part of the organization. It's not something that you can just hire somebody in and they install in your organization. Every single individual in your organization needs to be part of that story. \n\nSo successful agile consulting looks like building understanding in the organization, building tools that people in the organization can use to remain nimble. Otherwise, they'll fall back to the age-old tools that everybody talks about. And not being there full-time, right? It's almost like a crutch when somebody is there full-time; it's a crutch for the organization. They need to learn to stand on their own; they need to learn to make their own mistakes. \n\nSo that—I know that probably doesn't really answer that question of what does it look like, right? But I think what it looks like is different in every organization. I could articulate what it looks like at Microsoft, although they're only some way along that transition towards that goal. Every organization is completely different, and it's so different because their market is different, their products are different, their people are different, and there's no one right way to answer that question."
  },
  {
    "Title": "What are some big red flags when hiring an agile consultant?",
    "Description": "Key warning signs when hiring an agile consultant include lack of community involvement, weak core agile knowledge, and consultancies prioritising volume over expertise.",
    "ResourceId": "9HxMS_fg6Kw",
    "Url": "https://www.youtube.com/watch?v=9HxMS_fg6Kw",
    "Date": "2023-01-25T07:30:02Z",
    "Captions": "So what a question was: what are the red flags to look for when hiring an agile consultant? I think the biggest red flags for me are not engaging in the community, not being part of some group or community or effort where they're sharing their ideas with others, having ideas of others shared with them, and working in that kind of melting pot. There's nothing better than being part of an agile community, which I'm part of a few, and seeing something and you immediately get piled on for saying something so ridiculous that it's not really people aren't deliberately piling on you, right? Because they're agile, it's just, you know, you send them a message and all of them are writing a response at the same time because you've poked at something that maybe wasn't the best thing to pull at. \n\nAnd that gives you, I don't know what the right word is, is it humility? For you're not always going to say the right thing, you're not always going to be able to do the right thing, you're going to say stupid stuff. And you have to be able to take being called on saying stupid stuff. Sometimes it's okay to say stupid stuff because if you don't say what you're thinking, if you don't feel safe enough to say what you're thinking, how would you possibly be able to learn that there might be a different way of thinking? \n\nI think that's one of the key things because there are so many consultants who are not part of any agile community. They just have that echo chamber of their organisation or their consultancy, and there's not anything more information coming in from outside. Having discourse, right? Being able to articulate the core concepts in agile. So I'm thinking empiricism, I'm thinking lean. You need to be able to articulate them in a way that they are able to be understood by the other person within the context of that other person rather than just regurgitating something from the scrum guide that says, \"Well, XYZ,\" right? \n\nYou need to be able to say, \"Well, you know, the scrum guide says this because it's trying to achieve this idea. If you can achieve this idea in a different way inside of your organisation, then maybe that's okay.\" Being able to articulate those things, I think that's key. So that's just a fundamental lack of knowledge, right? That's really it. I think it's actually true in all consultancies, but I'm going to be very specific here because otherwise I'm going to piss off everybody, right? \n\nThere's a difference between a boutique consultancy which specialises in a particular topic, hires people who are experts, known experts in that particular topic, and encourages them to become better experts in that particular topic, and our \"butts in seats\" contracting consultancy who are really only interested in how much money they can make out of the customer. They get into this vicious cycle, right? This is the thing to watch out for in consultancies as you get into this vicious cycle of, in order to stay afloat, we need to win more business, right? \n\nWe're the consultants who say we need to win more business because we've got people that are in the company that need the work. Then you have experts and you have all of these high ideals with the customer, so lots of customers buy your stuff, and suddenly you don't have enough people on the bench to service the gigs that are coming in, right? The gigs in your pipeline. So then you have to go find people who can do those gigs, but we can't wait for those people; we need them now. \n\nSo we're taking the people that are available, not the people that are right for that gig. They're not bringing in people because of their knowledge and skills; they're bringing in people because of their availability. And then you get into that vicious cycle of, now we've got more people, and they roll off a gig onto the bench, and we need to sell more to get more stuff rather than... I mean, it's even worse for an agile consultancy not to do this, but having a lean outlook, right? You don't take on more work than you can handle. You limit your work in process so that you're playing the long game, not the short game of revenue extraction, but the long game of value creation and building relationships with your customers and not pissing them off. \n\nSo for me, those are the two big pieces: the actual individuals and the knowledge and capability that they have to understand agile, articulate it, explain it, and work with it, and work with other people in the agile space, and that bigger consultancy model of the... I call it the death spiral, right? Because there's no way out of that if all you're focused on is, \"I need bots in revenue extraction mode.\" Then you're not going to serve your customers, right? For me, that's the two big things."
  },
  {
    "Title": "Unlocking Organisational Potential: The Transformative Power of a Great Consultant",
    "Description": "Explores how skilled consultants drive rapid, impactful organisational change by identifying core issues, bridging leadership gaps, and fostering agile transformation.",
    "ResourceId": "8vu-AXJwwYk",
    "Url": "https://www.youtube.com/watch?v=8vu-AXJwwYk",
    "Date": "2023-01-24T07:30:02Z",
    "Captions": "Foreign\n\nHow much of an impact can a great ideal consultant have? I think they can have a huge, huge impact because they're not an agile consultant. A consultant tends not to be interested in hanging around. That's the difference I feel between consulting and coaching. A coach is going to be there all the time, but a consultant can't be there all the time. Usually, one, because they're more expensive, right? So the company doesn't want them hanging around for too long. But really, the consultant is doing that deliberately, right? If the company wants you around full time, you're not expensive enough. Because you want to be coming in, helping them with very specific problems. They're the ones that are going to be fixing the problem. They're the ones that are going to be doing the work. You're giving them things to try or perhaps...\n\nOne of the things that I've done quite a lot with organisations is, I guess I call it the state of agile report, right? And what is the current state of the way things work inside of the organisation from the perspective of agile? And what are the things, like what are the top three things that the organisation should focus on improving? And so I'm not necessarily there to solve any of those problems, right? I maybe come in for a week or two weeks. I'm going to interview 20 or 30 people in the organisation at all different levels, ask them questions about how they work, how they figure things out. And you get a lot of answers that are contradictory in that story, right? Because you get the people actually doing the work saying, \"Yeah, we don't really write unit tests and we don't really have automated builds.\" But then you speak to leadership and they're like, \"Yeah, we've got continuous delivery and we've got all these unit tests coming out of our ears.\" And maybe we've got too many unit tests. And there's a fundamental disconnect there because leadership and organisations will often say, \"I've heard in my leadership grapevine that we should be doing unit tests.\" And then the teams feel under pressure to do unit tests, so they'll just tell them that they've done unit tests because maybe the product that they're working on is absolutely impossible to do unit tests. But it's not possible to have that conversation with leadership because there's not an open and transparent relationship going on there in the organisation.\n\nSo being able to find and identify those problems, figure out what it is that... Oh, and these are big things that need to change, not little things. They're not subtle things like coaches come in and fix subtle things and work on the bigger things over a longer period of time. But that often takes too long because you're going to put that out there. It takes too long. What you want to be able to do is go into an organisation, see a switch on the wall that at the bottom it says \"not continuous delivery,\" at the top it says \"continuous delivery,\" and you want to figure out how do I flip that switch? How do I just turn that on? How do I just fix this problem? And quite often, you're not always going to be right. And I always, when I go into organisations, I'm always explaining that, right? I'm saying, \"I'm going to give you things to try. They might not work for you. They maybe have worked in other places, but things to try.\" And they try them, and either it works for them or it doesn't, right? And then they can come back and say, \"Well, we tried this and it didn't work, but it worked a little bit, right? So what else can we do to figure this out?\" And that's that consulting moment that I think coaches do as well, right? But this is just taking that piece off and saying, \"Let's just do this piece.\" Because I feel that organisations and leaders in organisations, people and organisations need to own that problem themselves. They're the ones that's their organisation. They're in the crap that they're in. They need to deal with figuring out how to get out because if you get somebody in who's given accountability for changing that problem but isn't really part of the company or doesn't really understand the company, it can be very difficult for them to affect change. And that's why it takes longer because then they have to build all of those relationships before they can change.\n\nBut quite often, when you come in as a consultant, you're not worried about being fired, right? That's the first thing because you've got another gig next week and you're not coming back. You might not be coming back at all. So you can just be absolutely brutally honest in your reporting and say, \"This is what's going on in your organisation. This is why it's broken. These are the things you're going to need to fix. I recommend you go find a coach and help you fix this thing.\" But then they know that's what they need to fix. They have it in the front of their mind and they're potentially thinking they can see that switch in the wall and like, \"If we could just flip that switch,\" and they're figuring out more things to do. And I think that's why I think that great consultants can be more valuable than great coaches because their focus is on flipping that switch as quickly as possible.\n\nAnd flipping things quickly, like ripping the Band-Aid off, right? You don't want to peel it slowly because that's going to hurt more. You want to just rip it off, do something different, and deal with the fallout of that bigger change. And I'm going to say, \"Well, it depends,\" right? That's why you need a great consultant because the great consultant is going to be able to go, \"Yeah, you want to slow change that one and you want to fast change this one,\" right? Because if you slow change that one, it's going to be a problem. And if you fast change this one, it's going to be a problem. And that's... things that people feel are unique to their organisation, but they're really not.\n\nOne of the things that I always find really interesting is every single consulting customer I've ever worked with has said, \"We have these magical unique problems and we need your help with them.\" And I go in and their problems are not magical and they're not unique. They're the same problems that everybody else is having. There's little fine nuances of difference, right? But the big problem is the big problem that everybody's having. And part of that comes from a Taylorism to Volatism, right? So from a traditional hierarchical Industrial Revolution thinking focused on things changing to a democratized self-organisation, distributed thinking focused on people, right? So those are the one of the two big bridges that need to happen in organisations. But there's lots of other things that are small that they can do within those structures that will enable them to do better, right? But you've still got those big problems that are the same everywhere because everybody's trying to do this decentralized self-organising teams, but they're in a hierarchy with steering and leadership and control from the top. And they're just... but they're mutually exclusive, right? You can get a little bit of this inside of this, but you can't get all the way over here where people want to be, where they see the biggest benefit in what they're getting.\n\nSo I feel that's the value of a consultant, is being able to come in and quickly identify and point at things that need to change. And a lot of these things are really obvious when you come in from the outside, but they're not obvious at all when you're inside of that story. And having somebody come in and do it... I'll point out also quite often I come in and the sponsor for me coming in says, \"Here's the things we'd like you to tell leadership,\" right? Because they already know what the problem is, just nobody's listening to them. And they need somebody else to come in and say, \"Yes, this is indeed a problem that you've been told a whole bunch of times.\" And I'm only going to do that if those things are actually true, right? If I'm going to look and see. But it's really valuable to have somebody with knowledge and experience coming from the outside that's maybe recognised inside of the organisation in that traditional hierarchy to help make that start making those changes across to the other side of the wall."
  },
  {
    "Title": "Why does Agile focus on values and principles rather than a prescribed set of steps?",
    "Description": "Agile emphasises values and principles to guide teams through complex, uncertain work, enabling adaptation and improvement where fixed steps cannot guarantee success.",
    "ResourceId": "Yesn-VHhQ4k",
    "Url": "https://www.youtube.com/watch?v=Yesn-VHhQ4k",
    "Date": "2023-01-23T07:00:14Z",
    "Captions": "But why does agile focus on values and principles instead of a predefined set of steps? \n\nUm, because there's no predefined set of steps that will get the same outcome every time in an agile space. So that's where we start having that conversation about the difference between, and however people want to phrase it, right? Because there's different stories about how you would articulate this. But the way I articulate it is that you've got complicated work, right? So this is about the work that we're doing. We've got complicated work, and if we apply best practices or good practices, we can turn this into something simple, right? \n\nSo that's like, um, whenever you go, let's say you want to do some DIY in the house, uh, DIY, do it yourself in the house, uh, you want to do some home improvements, and you don't know how to safely remove the u-bend in the sink. You don't know how to do that. I guarantee you, you can go to YouTube and type in \"remove u-bend in sink,\" hit enter, and you'll find 20 YouTube videos. You'll watch three of them, and now it's a simple problem. It's not a complex, a complicated problem at all anymore, right? Because you know how to do it. You could probably even find a video that has the exact same fixings as you have on your sink, right, if you watched a few of those videos. \n\nThese are not hard tasks if you know how to do them. They're only hard because you don't know how to do them. You don't have the knowledge. You've got this complicated work that when you apply knowledge, it becomes simple, right? But then you've got this other type of work, which is any time you're building stuff that doesn't exist yet. \n\nRight? If you're building something that doesn't exist yet, there's no predefined set of rules yet. Somebody has to design the thing, and then we create a predefined set of rules. Like if you wanted to design a brand new car platform, um, you're not gonna, it's not complicated, it's complex because you don't know what the outcome is going to be. \n\nUm, but once you've built it, you can then create a production line and serve out lots of them. That's you turning that complex problem of designing the new product. Okay, now we've got the complicated problem of building the new product. We create the production line, and then we generate lots of lots of things off it. \n\nBut in the complex space, every single thing we do is complex. Every single thing we do is something that we've not done before. So if you're, um, writing code, right, you don't go write code that you've written before because there would be no point. It's been written before. So you would package it up in a little framework, and you would reuse that little framework on a constant basis. So then that's not complex work, but everything you're doing to wire up that thing is complex work. \n\nEverything we do in software is brand new. Anytime you're developing a product that doesn't exist yet, there are no best practices. There are only emergent practices. Like what's the right thing just now for what we understand just now? Tomorrow it might be different. In fact, in a couple of hours, it might be different, right? Because it's changing so much. \n\nAnd the thing that happens in this space, you can't make this complicated, right? You can't make it complicated. There's no change between that. And what happens in this space is we get lots of surprises, right? And some of them are positive surprises that we want to go grab and take advantage of, and some of them are negative surprises that we want to make sure that we don't get, you know, don't get messed up by that particular surprise. \n\nLoads of those types of things in the software world, but in almost any industry, when you're building brand new products, you're going to have surprises, right? Things aren't like you expect them to be for whatever reason, or something happens, the impacts on what it is that you're doing. \n\nSo the reason that agile focuses on those values and principles is that you and your team and your company need the tools to be able to adapt to any circumstance. Whereas as soon as you write down a way to do things, like here's a step-by-step guide on how to do it, and then the world changes, right? Your world of how it's going to work changes. It's actually harder to adapt to this because you're like, but I'm following this set of steps, right? I want to follow this, and this one's failing. Why is this failing now? \n\nWell, it's because the world's changed. And when we enshrine things in, here's a way of doing something, here's one way that you should do this, we suddenly hit that problem of we want to keep doing it that way, and it's harder to change. Whereas, so we focus on values and principles so we don't enshrine. If the word I normally use for these enshrined things is bureaucracy, right? The way we work, you don't enshrine them in the bureaucracy, and you keep yourself nimble and adaptable. \n\nAnd then hopefully what you'll learn is to document and create processes for the things that you can move into that complicated space, i.e., we've built something, we need a process for resetting users' passwords. We've built a system, here's the process to interact with the system. But if we're adding new things to this system, we don't need the bureaucracy in order to handle how we're doing that because we want to be dynamic and adaptable. \n\nBut then over here in using the thing, we can have the documentation, and we can have the processes and the rules on how to do that. \n\nSo that's why we focus on values and principles and not just a set of rules."
  },
  {
    "Title": "From Software Engineer to Scrum Trainer: How My Journey Shapes Effective DevOps Training",
    "Description": "Explores how hands-on software engineering and DevOps experience informs practical, relatable Scrum training, emphasising real-world lessons and continuous improvement.",
    "ResourceId": "N0Ci9PQQRLc",
    "Url": "https://www.youtube.com/watch?v=N0Ci9PQQRLc",
    "Date": "2023-01-20T07:00:08Z",
    "Captions": "How does my real world experience translate into my training style? Well, I think they're neat for that you to a little bit understand my experience, I guess. I was a software engineer for 10 years. I just got into software engineering the year before .net came along. So I was ASP for a year and then straight into .net and that's where I'd really been ever since. I mean, I do other things, but that's mainly where my sweet spot is, right? My comfort zone.\n\nAnd then I got recognised by Microsoft as doing some interesting things with Team Foundation Server. I was that was and I became a Microsoft MVP in 2008. And then what really happened was you got when you become an MVP, right? You kind of get access to a whole bunch of internal stuff. You get access to lots of free tools and lots of things, but the big thing is you go to the MVP Summit every year. The MVP Summit is three and a half thousand MVPs from all over the world, all the different countries, all the different technologies, all descend on Redmond in Washington State in the US.\n\nWe basically take over the whole of Redmond, all of the hotels for a week, and Microsoft puts on a whole bunch of sessions and events and all kinds of things. So you get you start to get these personal connections with all sorts of other people in the organisation. But my experience was my competence was TFS, kind of TFS DevOps, ALM was that space. There was between 80 and 90 MVPs in that category, and this was a really tight-knit group because DevOps was emerging at the time. It was definitely loads of people who were at the top of their game, right? Because they're into all these different things and technologies and coming into that world and writing a lot of content in that world and really understanding what it is that we're trying to do with DevOps. \n\nI leveraged a lot of their knowledge. Absorbing all of their ideas allowed me to then, I guess, impress some of the people there. I worked for a year remotely for an Australian company with Adam Cogan, and then I got hired by Steve Borg to go live in Seattle as a DevOps consultant. I spent three years, I think it was, ALM, right? Application Lifecycle Management, a bit DevOps consultant for three years in the US. I effectively had a different customer every week or a different customer every two weeks across the US, so I think I spent time in about 15 different states.\n\nI saw all the industries. There's no specific industry that DevOps is relevant for. It's any company that has software. So we did aerospace, we did military. I think I didn't work on that project, but the nuclear power plants, healthcare, finance. I did a gig for a finance company that does the finances for all of the stars in Hollywood, and so they have this huge building and they only have one floor at the top, and the rest of the building's empty. It was really interesting.\n\nBut that experience of seeing all these different organisations, seeing what they're doing, seeing how they're treating and engaging people means that I almost, I think I've never had a circumstance where I don't have a story for where there's somebody else that's more dysfunctional than whatever the person that's talking to me, the story that they have. So I think that's a huge power in the training world because you want the people that you're training to realise that there's light at the end of the tunnel. You want them to realise that they can get to somewhere else, and unfortunately, I think this is a very human thing. Knowing that somebody else is worse makes you feel better, right? And it makes you go, maybe I can be less worse, right? Maybe I can. \n\nSo then I'm listening more and engaging more. I think those stories help from that perspective, and also bringing the stories of how people have solved particular problems or even things that haven't worked, right? Oh, I've had a couple of customers that I've tried that this way, and it's just not worked for them at all. They just had to ditch it. I think that is one of the core characteristics of not just me as a PST, but most of the PSTs that I interact with are people that have worked in industry, that have worked with lots of customers, that have all of these stories. \n\nThere's nothing more interesting than a whole bunch of PSTs getting together to have a conversation about all these crazy things that have been happening in organisations because then you can share those stories and bring more things to the table when you're training. So I feel like that experience of being a software engineer, right? That's one thing that lends me credibility when I'm working with people in teams that build software because I have been the person building the software. I understand how that works. \n\nThe seven years as a DevOps consultant is that little bit level above all of the processes around how we build software, moving towards continuous delivery. Being able to categorically tell people there is no software on this planet that can't move towards continuous delivery, right? There's no pulling the wool over my eyes for capabilities in that space. \n\nAnd then moving into training and agile consulting means that all of that stuff is the foundation upon which I'm building the classes and the courseware and what I'm trying to do and what I'm hoping people will learn and engage with and find out more about what they can do."
  },
  {
    "Title": "What will you learn on the professional scrum master course?",
    "Description": "Gain practical skills and deep understanding of the scrum master role, scrum theory, empiricism, team dynamics, and delivering value in agile product development.",
    "ResourceId": "zqwHUwnw0hg",
    "Url": "https://www.youtube.com/watch?v=zqwHUwnw0hg",
    "Date": "2023-01-19T07:00:14Z",
    "Captions": "So what would you learn on the professional scrum Master class? Yeah, that's a great class as well. \n\nUm, so it there's a lot of theory in that class. Um, so the actual material for the class is very theory based, whereas the APS ditches some of the theory in order to have the practical experience. \n\nUh, the PSMF focuses very much on the theory and being a scrum master, so there's lots of exercises where you have these people who are W to be perspective or currently are scrum Masters in organisations, um, discussing and figuring out how things work and go together, um, and how they can interact with teams better. \n\nSo ultimately, I think what you learn is what are the ramifications of the scrum Master role, right? Um, so a lot of people have a vision of the scrum Master role that it is the scrum Master accountability, um, that it is just focused on a team, right? \n\nUm, and there's reasons why people kind of have that blinkered focus on the team, uh, but really there's three parts to the scrum Master role. There's the scrum Master service to the team, the scrum Master's service to the product owner, product management, right? \n\nAnd the scrum Master service to the organisation, and they need to be able to focus at all of those levels in order to be effective, 'cause all of those things affect the ability of the team to deliver value and deliver usable working product, right? \n\nThere's no point in the focusing just on the team and the team being awesome and fantastic at delivering. They're doing continuous delivery, but they're delivering nothing that's useful to the customers. \n\nSo the scrum Master, while not directly accountable for the value or directly accountable for the quality, is directly accountable for them being effective at what it is that they're doing. \n\nAnd that's what we try and get across in the PSM, um, along with foundations in empiricism and the ultimate value of usable working increments of work on a regular cadence. \n\nCU, if you don't have a usable working increment, then you're not able to get feedback, you're not able to mitigate risk, right? Those are things that are so important in that story. \n\nSo the PSM is really hitting on, um, from a theory perspective, all of the basic capabilities of what is the scrum Master, what they're supposed to be able to do on a day-to-day basis, um, how they're supposed to interact with the organisation, opening up the scope of their work, um, and figuring that out. \n\nBut I think there's really more to it than that, because each trainer brings their knowledge of working with organisations, of helping people who are scrum Masters deal with their problems in organisations. \n\nSo there's a piece of the course which is the courseware and the theory, um, and then there's also another piece of the course which is the trainers' experience, right? \n\nAll of our trainers are not just trainers; they are also people who are coaches, consultants, um, in DevOps, in agile, in whatever it is that they've been doing for years, and they're able to bring those experienced stories. \n\nAnd I actually feel like there's a third layer. There's a third layer in there that is the meta conversation about how the trainer is running the class, and those are skills that the scrum Masters can also take on board to help them run the events that they're doing in scrum, right? \n\nSo how do you run a daily standup effectively? How do you, um, have people organised together when you've got a larger group of people turn up? What happens if you get 70 people at the Sprint review, right? \n\nUm, how do you make sure that you get information from all of them? And all of our trainers, they use it in different levels based on their taste, right? \n\nSo everybody's different, um, but we have folks that use and talk about training from the back of the room, um, lots of liberating structures, right, in able to engage people. \n\nAnd while we're not explicitly teaching those things, we're using those things to facilitate and run the class, which enables the more advanced scrum Masters in the room, right, who maybe aren't the one-offs or maybe going to get the jobs, but the actual doing it just now to have an extra level of engagement, understanding, and learning that they can take from the class as well."
  },
  {
    "Title": "How does the APS course help people apply scrum effectively?",
    "Description": "Explains how the APS course uses practical exercises and simulations to help people understand, apply, and improve scrum practices in real-world organisational settings.",
    "ResourceId": "grJFd9-R5Pw",
    "Url": "https://www.youtube.com/watch?v=grJFd9-R5Pw",
    "Date": "2023-01-18T08:57:16Z",
    "Captions": "How does the APS course help people apply Scrum effectively? Well, it kind of helps in a number of ways. So because it's a practical class, they get experience during the class understanding what is Scrum, why it works, and how it would work for them. Right, so you've the people that are participating in the class by the end of, let's say, the second half have a firm grasp of Scrum and there's still two more Sprints after that. \n\nOne's a dysfunctional people attributes discovery session, and then the one after that's a kind of scaling session if we get to that. Don't always get to that. But the last part of the class that we do after we've done all of those things is we've kind of got two main exercises. One is a choice and the other one is we I kind of always do. The choice one is, is this a group of people who have been doing Scrum already? And if they've been doing Scrum already, then we do like a Scrum tune-up exercise where they're effectively doing a diffing exercise between the Scrum they just learned and the Scrum they're doing in their organisation. \n\nSo do a kind of diffing exercise, kind of what's different, how they feel about those changes, get that information down. We have a little exercise around that. The other option for that one is if they've not been doing Scrum, then we have a Scrum startup exercise. And in the Scrum startup exercise, they're, you know, who's going to be your product owner, who's going to be your Scrum master, and where are you going to store your backlog? How are you going to manage it? Just to get them started and thinking about how that's going to work in their organisation. \n\nSo those two things alone, it's one or the other. I don't do both. Is really good. But then the last one of the last exercises that I do with groups is creating an organisational change backlog because the people that know most about how organisations need to be different in doing Agile are the people that are actually doing the work that are struggling within the bounds of the processes that the organisations created. \n\nSo by asking them to create that organisational change backlog or add things to the organisational change backlog, they're thinking about all the things that affect them. Whereas when leadership adds things to the organisational change backlog, they're probably thinking about things that affect them, right? And they're proxying the things that affect other people, what they think is going to be a problem for other people. \n\nBut when you get the people that have just gone through this Scrum class and they realise what needs to be different, they start adding all sorts of things to the class. And sometimes it's, you know, they'll add we need more people trained in this so that more people understand what it is we're talking about. That's always good for me, right? But most of the time they're adding things like, well, we've got this policy in the organisation, this needs to change, or leadership's not engaged enough in the story that we're trying to create, this needs to change. \n\nAnd it's very enlightening for leadership if they're attending, and I do recommend that. The time when I've seen the APS be most effective, I did a class for a number of classes for a company in the US called Backcountry. There are clothing apparel, ski type place in Utah, and we trained everybody in the company from the CEO all the way down to the guy who drives the forklift in the warehouse. It was fantastic. \n\nAnd what was really interesting was the guy that drives a forklift in the warehouse, at the end of the first half day, we did two full days for the class, but at the end of the first half day, he went to his boss and said, \"By the way, why the hell am I here? I don't want to be here. What is this crap you're having me learn? I don't see why it's valuable for me. Can I just go back to driving my forklift in the warehouse?\" \n\nBut by the end of that day, he was the one standing at the board engaging with the team, asking them questions, \"Do we have this? Do we have that? How would this work?\" Because he started to realise how the work that these engineers were doing that he didn't have any connection with before, he started to understand how the work that they were doing affected his world. \n\nBecause he's driving the forklift in the warehouse, he's got an iPad attached to the forklift that's telling him where all the stuff is in the warehouse and what needs to go in the truck and what order he needs to get things out and pack it and all of those kind of things. And they're the ones that are writing that software. And he happened to have people at his table because we just self-select into teams that were responsible for some of the things that directly affected him. \n\nSo he understood why it was important that he'd be part of that process, why he needed to engage in that process, and it brought another dimension. He's the customer was in the class right inside of this company. But even the view that the people in the room had of the CEOs sitting there and the CEOs participating in the class and actually focusing for two full days on the class because he saw how important it was to that discussion. \n\nAnd then when you're having that discussion at the end, the organisational change backlog, what needs to change, who's in the room that can deal with it, the CEO is sitting right there and can hear the organisational change backlog. This is yours now, you need to do something with it. And that whole thing really helps. Now that's different in a public class, right? You're not going to get everybody in a company in the public class, but you get quite a lot of the things that I've talked about there all the way to that point. \n\nThere's maybe not the epiphany moment at the end when you're creating the organisational change backlog for the organisation as a whole, but it's still a great experience."
  },
  {
    "Title": "How is agile product development different to waterfall project management?",
    "Description": "Compares agile product development and waterfall project management, highlighting differences in decision-making, delivery, customer collaboration, and adaptability.",
    "ResourceId": "BE6E5tV8130",
    "Url": "https://www.youtube.com/watch?v=BE6E5tV8130",
    "Date": "2023-01-11T07:00:02Z",
    "Captions": "So the question was how is waterfall, how is agile product development different? \n\nYeah, that's actually quite... defining the difference between agile project management and waterfall is actually quite a difficult task because most agile teams that I encounter are really agile under a waterfall. If we take that idea of waterfall and say, well, it's... waterfall is just a symptom. What is the actual thing? You actually need to go back to the Industrial Revolution and the tayloristic practices that created that in the first place, right? A whole bunch of ways of working, of how business should operate and how we should manage people was developed during the Industrial Revolution to manage a largely uneducated workforce. So all of those practices were designed around that idea. \n\nAnd then we move into the modern world and most agile teams still operate in an organization which uses those practices. So while they can get benefit from the iterative nature of agile, right? So we take this big thing that we know we're going to develop and we break it down into smaller things, they are going to get benefit from that, right? Instead of everything happening at the end and huge amounts of risk, we're getting a little piece at a time, mitigating the risk of the product because we have usable working product every Sprint, right? So we're getting that iterative, but we don't get incremental because we're still building towards the same product that they asked for at the beginning. They asked for a thousand things; at the end of it, we're going to deliver a thousand things. And we can either deliver it once at the end or lots of times in between. \n\nBut true agility comes from that decentralisation and democratisation of the way the business operates so that they take advantage of their highly educated workforce that they didn't have before when the old practices were created. So everybody in your organization is working towards delivering value for your business, helping your customers, engaging with the market and reacting to the market rather than it just all coming from the top with steering and budgets and control, right? \n\nSo I feel like there's two answers to your question, right? Two answers to the question of what's the difference between waterfall and agile is in a traditional organisational structure, agile increases, agile reduces the risk of non-delivery. It reduces the risk that we're going to deliver the wrong thing. But until the organization adapts the decentralisation practices and does things like, let's allow the team to change whatever requirement is required to change, that didn't make any sense, but allow them to change the requirements based on what they learn, allow them to change their processes based on what they learn, we'll never get that leap into that true exponential power of agility, which is how delivering not only high quality but also delivering more of the right stuff and less of the wrong stuff. \n\nAlthough there's a great metric from, um, if it's the Standish Group in Boston, they're kind of a data analytics group. They analyse about 70,000 projects worldwide and put out our chaos report every year about how agile's doing. And one of the things that they found was that only 35% of the features that we build in products are actually used by our customers, right? And that is intrinsically because when we say to the customer, we want some stuff for us to do, we're going to build a product for you. \n\nLet me start that part again. When we say to the customer, we're going to build a product for you, right? What do you need? The customer goes, \"Oh, I don't know what I need.\" Okay, well, here's what I need. Now here's 300 things I need now. So they all end up on the product backlog. And then they say, \"Well, if you know, we've got some business decisions coming up.\" And I actually think about it like the Multiverse of Madness, right? You remember Loki in Marvel? You've got all those branching different decisions that happen in a business, and down every branch in the decision-making in our business, different features are required. Sometimes it's the same features; sometimes it's a subtle difference that we can handle, but sometimes it's quite a big difference. \n\nSo until the business actually makes that decision in the future, they need the 50 to 50 features from this route and they need the 50 features from that route. Until they actually make that decision, and how many decisions is it good like that? Is the business going to make over the next 12 months if we're doing a 12-month delivery? So they put all of those, you know, there's another thousand features that they find all across the business for all these different branching decisions, and they put that on the backlog. \n\nHow many of those do we actually need when we get to the end? How many of those are actually valuable when we get to the end? How many of the 200 or 300, I think I said 300 features they give us at the start are going to be no longer relevant in a year's time? How many of those branches did we take this route and now there's a whole tree of features down this route that are no longer valuable? That's why only 35% of the features that we build are actually used by our customers, and that's an industry average. Your company might be way worse, right? \n\nAnd I've worked with those companies that think that they know their customers better and think their customers use all of that, but until they actually add telemetry to their product and understand what percentage of their features in their product customers actually use, they don't realise how bad the situation is and how much money they're actually wasting."
  },
  {
    "Title": "Learn Scrum with Minecraft Education Edition",
    "Description": "Experience Scrum hands-on by collaborating in Minecraft Education Edition, simulating real-world product development complexity for all skill levels in a secure environment.",
    "ResourceId": "ZrzqNfV7P9o",
    "Url": "https://www.youtube.com/watch?v=ZrzqNfV7P9o",
    "Date": "2023-01-10T07:48:02Z",
    "Captions": "Um, so the question was why Minecraft makes it so awesome. I started teaching the apps with Minecraft 10 years ago, 12 years ago. Um, and 12 years ago, if you got a group of people together in a training room and asked them the default case study was an animal website, right? So build an animal website. We break everybody up into teams, they would pick an animal mascot and then they would have to create a website about that animal, and everybody got the same set of requirements. \n\nBut 12 years ago that was hard, right? You were probably in a room with limited internet access, right? If the students were all turning up in our particular office, if there was internet, it wasn't fast. And they had to actually go build something, right? They actually had to crack open Visual Studio or Eclipse or whatever their favourite tool was and go bring all of those things together to create a website. \n\nAnd that's not true anymore. It's just, it's just that's not what happens anymore. What happens when you ask people to create an animal website is they go create a Wix site and they're done in five minutes. They go create a Google site or whatever other platform is out there, and they're able to solve that what used to be an incredibly complex problem in a very short space of time. And then they're just adding new pages, and the only thing we really have to pick on is that the only thing we have to pick on is the teams' quality, right? So are there broken links? Are there half-finished pages? Is the text too small to read, right? \n\nWhich is a little bit, I don't know, it's just a little bit [___] though. It made the class go from this awesome experience where you had this hugely complex problem that you were solving because you had to do it in 30 minutes, right? So a website's not complex unless I make you do it in 30 minutes, then it's complex, right? And it just became simple. \n\nSo Minecraft brings in that complexity again. Um, it levels the playing field, and there's actually two massive benefits. One is that it levels the playing field for everybody in the room understands complexity. It simulates that a complex situation that they have to organise around to solve that complex problem within the bounds of Minecraft. So we're not teaching the whole class in Minecraft, right? It's just the case study, the sprints that we're doing in Minecraft. \n\nAnd when you come back from that, you can dive into the relationship problems, the way people approached the problem. You can dive into how they communicated with each other, all kinds of really interesting aspects. The additional thing is that everybody can now participate. \n\nSo what would tend to happen when we were during the sprints of the animal website, there would be a few of the participants who were the actual coders who were building the website, and the rest of the people on the team were either just helping them or doing their email, or helping them for five minutes and then doing their email, or collecting some information, emailing it to the developer, right? It goes into that black hole of the magic and magic black magic developer over there who's going to build the thing, and then they would have nothing to do in the Minecraft space. \n\nEvery single person can participate. Every single person can do something. It doesn't matter what skill level you have. When you come into it with Minecraft, in 30 minutes you can figure out how to provide some value, figure out how to add it. You're learning as well, so we can diagnose some of those learning techniques. It's just a fantastic experience for everybody."
  },
  {
    "Title": "Embrace the Chaos: Transforming Scrum Learning Through Experience and Minecraft",
    "Description": "Discover how hands-on Scrum training using Minecraft helps learners experience project chaos, apply agile principles, and gain practical insights into effective teamwork.",
    "ResourceId": "vI2LBfMkPuk",
    "Url": "https://www.youtube.com/watch?v=vI2LBfMkPuk",
    "Date": "2023-01-09T12:36:53Z",
    "Captions": "My favourite agile course to deliver is the applying professional scrum class and it's my favourite class to deliver because I think it generates some of the greatest epiphanies for students.\n\nSo in that class we actually practice scrum and that's different from all the other classes as well. \n\nWe do four sprints. I've been adopting Minecraft in these sprints. \n\nWe break everybody up into teams. We do a sprint straight off the bat. \n\nThe reason we do the first thing we do is a sprint is that people use the techniques they're used to in organising when they do the first sprint. \n\nSo there's this huge realisation at the end of the first sprint about how chaotic it was and how difficult the process was. There are people in the classroom that have never used or played a game before, let alone Minecraft. \n\nThat simulates that real-world experience of when you get onto a brand new product or a brand new project and you've got no idea what's next. \n\nYou get no idea what you need to do. You've got no idea who you need to speak to. You've got no idea who the customer is. I'm trying to figure that out. \n\nThat first sprint demonstrates the chaotic is not the right word. It just generates, I don't know, the cluster of that first moment when you start working on a product or project. \n\nIn the real world, that can last for an incredibly long time. \n\nRight, because there's who comes in and tells everybody how they're supposed to do stuff. At some point, maybe a project manager gets hired or a project manager is there and they manage to get around everybody, but it's generally chaos. \n\nSo then we go into teaching them scrum. \n\nWe have a kind of, I guess it's two half days. We're going to teach them scrum, but the first part of the first half day is the sprint and the second part of the second half day is another sprint. \n\nSo we teach some scrum in between and then they go into that second sprint with that knowledge of here's how we're going to organise all the stuff we do in order to try and control the chaos and figure out what it is we're going to do going forward. \n\nThey do planning, they have a conversation, they agree what they're going to do. \n\nThat doesn't always happen, but they have that agreement. They have those check-ins. They have that reflection at the end and they themselves, that's the second epiphany moment for the students, is they realise what it is that they're there for. \n\nThey realise what scrum is trying to achieve. They realise the benefit they could get from it in the real world."
  },
  {
    "Title": "In what circumstances is agile consulting appropriate?",
    "Description": "Explains when agile consulting is best used, highlighting its role in building internal leadership, rapid problem-solving, and sustainable organisational transformation.",
    "ResourceId": "rX258aqTf_w",
    "Url": "https://www.youtube.com/watch?v=rX258aqTf_w",
    "Date": "2023-01-06T04:52:40Z",
    "Captions": "and what circumstances is agile Consulting appropriate\n\nso I guess first we have to quantify what is agile Consulting right we probably have to quantify that first for for me agile Consulting is almost always what I do with customers\n\nI find that the only the only reason businesses think they need agile coaches is because of a systematic lack of leadership within the business they've lots of managers but not so many leaders\n\nso they need somebody to come in and fill that servant leadership Gap and they hire in external people but unfortunately that's a Core Business practice and you don't Outsource core business practices right because that's what makes your business successful\n\nso those those those contractors that you hire in to do to to to be long-term agile coaches actually end up hurting your business because as they change out as they leave you're upsetting the people that are in your business because they're not that that as permanent a fixture they're paid differently they're not included in the training right they're not included in lots of things that you would you would be doing as a team as a group\n\num so I I I feel that there's very well there's maybe a Kickstart value in agile coaches right but in reality in a long-term business the value is in creating agile coaches inside of your business finding the people inside of your organization who can help support your organization and make that move from management to leadership so that they can help fulfill your business desires right and internal Core Business need\n\num so I I feel like any organization that thinks they need an agile coach probably doesn't they probably need some Consulting agile Consulting to help them understand what they need to do in order to make their business more successful\n\nright and and that's that intrinsic difference is agile Consulting is not thinking I need to be here for for six to 12 months in order to to you know have my income for the year it's it's I'm I'm here for the next two weeks I'm here for a week I'm here for a month I'm gonna I'm gonna figure out how to solve solve your problems providing Solutions right like things to try they're not maybe the end solution but they're where do I start because because businesses have that question they have that question what do I do where do I start I don't understand this thing what where where should I go from where I am right now\n\nand and agile coaching doesn't often provide that answer because the agile coach is is looking at that systematic slow engaging with people type of model whereas Consulting is more the you know we want to figure out what switch to flip that's probably the best explanation is flipping switches\n\num so there's some really good um data out there talking about how um the traditional transformational model in organizations is actually it's it's not working it all it results in is lots of feeble implementations of agile fragile implementations of agile and um um The Continuous need to maintain that external help and support because we actually never changed our business right we didn't actually change anything\n\nso as soon as that crutch of that agile coaching is removed the whole thing collapses and falls back into a terroristic commanding control control mass and there are a whole bunch of new techniques uh uh there's open space agile\n\num open space beta talking about how do we enact change in our organization over a very short space of time change as flipping right you're going to flip a switch something will be just different right in the way we do things and how do you figure out what those switches are\n\nwell you can have Consultants come men and help you figure out what those switches are but the reality is the people in your organization already know what those switches are isn't I think that's the art of Consulting isn't it coming in and telling people what they already know right that's that's kind of the art of Consulting and the people in your organization already know what changes need to be made you just need to empower them\n\nand I think one of the core reasons organizations need Consultants rather than coaches is Consultants are going to help them understand what it is they just fundamentally need to change"
  },
  {
    "Title": "How does Naked Agility select associate Scrum Trainers?",
    "Description": "Naked Agility selects associate Scrum Trainers based on real-world agile experience, co-training, and proven ability to teach, coach, and solve complex team challenges.",
    "ResourceId": "uJaBPyixNlc",
    "Url": "https://www.youtube.com/watch?v=uJaBPyixNlc",
    "Date": "2023-01-04T14:35:57Z",
    "Captions": "So in order to be an associate trainer for naked agility ultimately you you you need to be able to co-teach with somebody who is already an associate trainer or myself who can vouch for you right.\n\nUm but what we tend to be looking for is not trainers we're actually our associate trainers are not are not just trainers. Our associate trainers are consultants and coaches and trainers because the reality is the thing that makes our training powerful is the stories that the trainers have of the circumstances that they've run into and things that companies have tried and why something that a purist would say this is how you should approach something why that might not work for you.\n\nRight here are circumstances where it's worked here's circumstances where it hasn't right and and how in different industries because because you get those questions in training you get people asking those questions of but in my specific circumstance that's not going to work and the trainer needs the competence and background knowledge and expertise to be able to bring that person around to understanding why that might be an organizational dysfunction rather than a you know they can't do it the way that they need to do it in order to get the benefit they want because of some organizational constraint that perhaps needs to change.\n\nAnd that can be really difficult for trainers that are just trainers and have never been a coach or a consultant. Um I myself spent 10 years as a software developer and then 10 years as a devops consultant right.\n\nUm helping organizations get better at delivering software so I tend to work with software teams. Um so I just just brought on um another trainer um Joanna from scrum.org. Um she has a PhD in robotics and has been coaching uh software teams um a bit of scrum Master for many years before she became a PST a professional scrum trainer.\n\nUm so that's the type of person that I like to work with. Um I work with Russell Miller who's also a PST but he has developed and built components for fighter aircraft in the US Military. Um he designed control surfaces for aircraft and project managed uh and developed products within the context of Lockheed Martin right.\n\nThese are organizations that are going to test your ability to figure out how to do Agile even within the most horrendous constraints which are the circumstances our students find themselves in right so you need to be able to have answers for those things you need to be able to have here's a place you can start that I have seen work.\n\nOh you're within an organization that says you can't do Agile because we don't do Agile here here are things you can do without using the word agile or using the word scrum that will enable you to get a little bit a little bit more benefit demonstrate that you can do something a little bit better make the metrics look better right and then they're more likely to listen to you.\n\nUm it it's it's yeah I think it's it's it's really important that all of the trainers that we have have the competence expertise and experience to be able to debate with the students on the merits of agility within their specific context."
  },
  {
    "Title": "Unlocking Scrum Success: A Comprehensive Guide to Values, Roles, Artifacts, and Events",
    "Description": "Explains Scrum’s core values, roles, artifacts, and events, highlighting how they support teamwork, transparency, and adaptability in managing complex projects.",
    "ResourceId": "Q2Fo3sM6BVo",
    "Url": "https://www.youtube.com/watch?v=Q2Fo3sM6BVo",
    "Date": "2022-10-18T16:13:02Z",
    "Captions": "Scrum is a lightweight framework that helps people, teams and organizations generate value through adaptive solutions for complex problems. The Scrum framework is made up of five values, three accountabilities, three artifacts and five events.\n\nIn this video I'll go through an overview of each one, explaining what they're for and why they are there. Focus will be on the process itself and will leave any complementary practices until later.\n\nMy name is Martin Henchewitz. I've been a professional Scrum trainer for 12 years, professional Kanban trainer for two years and a Microsoft MVP in DevOps for 14 years.\n\nScrum is based on empiricism, the three pillars of which are transparency, inspection and adaption. Empiricism is impossible without transparency and in order to get transparency we need trust. Without it, we'd be unable to see what's going on. Trust is not something that just happens; it needs considerable and deliberate effort to create and maintain.\n\nFive Scrum values help guide and inform the team decisions and help support trust and empathy. These values are courage, focus, respect, openness and commitment. Their purpose is to help build and support the trust needed to maintain the transparency required to get the most effective teams.\n\nThe three accountabilities, although you may see these same names used as job titles, this was not the intent of the Scrum framework and as the result of 25 years of accumulated misunderstandings. There are three accountabilities in Scrum which together form the Scrum team. The Scrum team is entrusted by the organization to create value for each Sprint. They operate as a decentralized, collaborative and autonomous team that is responsible for stakeholder collaboration, verification, maintenance, operations, experimentation, research, development and anything else that might be required to create a successful product.\n\nThe accountability of the Scrum team is to effectively create a usable working product of the highest possible value. Let's see how that breaks down.\n\nThe Product Owner is accountable for maximizing the value of the work done by the Scrum team. There are many activities that they might imply to help them maximize that value. For example, developing and explicitly communicating the product goal, creating and clearly communicating product backlog items, ordering product backlog items and ensuring that the product backlog is visible, transparent and understood.\n\nWhile the Product Owner remains accountable, there is no requirement for them to physically do this work themselves. Delegating some or all of these activities enables the Product Owner to scale and to focus on the strategies they need to be successful.\n\nScrum developers are accountable for creating a usable working product. The term developers here includes everyone involved in developing the product. Those folks may have skills in analysis, user experience, coding, testing, legal, architecture, DevOps or whatever other skills are required. The developers take accountability for planning, quality and each other.\n\nThe Scrum Master is accountable for the effectiveness of the Scrum team. They do this by providing services to the developers, the Product Owner and the organization as a lean agile practitioner. They have deep knowledge of the technology required by the Scrum team to be successful. These technologies might include processes, practices, tools and techniques relevant to the context of the product under development. They foster relationships between developers, the Product Owner and the stakeholders to create an environment within which they can all be successful.\n\nThe Scrum Master does not write or order backlog items, administer Jira or tell the developers what to do. In addition to these three accountabilities, there are stakeholders. Stakeholder is a general term given to anyone outside of the Scrum team that has an interest in their work. While stakeholders do not have specific accountability, they are expected to be involved in the process by providing feedback and collaborating with the Scrum team as often as needed.\n\nThere are three artifacts in Scrum. Without being able to see what is going on, we can't really make effective decisions and each of the artifacts exists to provide the transparency that is the foundation of any empirical system. To provide this transparency, there are three artifacts in Scrum.\n\nFirst is the product backlog, the purpose of which is to provide transparency over what we need to do next. That is, it provides transparency of the future. The product backlog is an ordered inventory of things that we need to be true for the product to be successful. It should not contain more items than the Product Owner can easily understand and articulate, but enough to foster understanding and the success for the product. Too many items create too many assumptions.\n\nThe commitment to the product backlog is the product goal. The product goal reflects the desired outcome for the next few Sprints and informs but does not control the contents of the product backlog. While the product goal provides focus, it does not preclude incorporating feedback, features of opportunity or other things as needed.\n\nNext is the Sprint backlog. The Sprint backlog contains three things: a Sprint goal, the work that the developers have selected for this Sprint and an implementation plan to help them get started. The purpose of the Sprint backlog is to provide transparency over what we are doing now, ergo transparency of the present. The commitment to the Sprint backlog is the Sprint goal, which informs but does not control the contents of the Sprint backlog.\n\nDuring the Sprint, the contents will dynamically adapt to the changing needs of the Scrum team in the business while maintaining the focus of the Sprint goal. The Sprint goal is collaboratively created and owned by the Scrum team and reflects the why of the Sprint. While the Sprint goal may only reflect part of the Sprint backlog, attention is also given to augmenting existing functionality, refactoring and updating the product, dealing with technical atrophy and creating automation.\n\nLastly, we have the product increment, representing the entire product. It provides transparency over what we have done, i.e. transparency of the past. Each consecutive increment is a concrete step towards the product goal and must be usable. Usable is a combination of backlog items themselves and the quality measures that represent completeness. The formal description of those quality measures is the definition of done. The definition of done is the commitment to the product increment. It represents the minimum product and technical qualities that are required to be able to deliver your product to customers. It should mirror shippable.\n\nThere are five Scrum events that serve empiricism. Sprint planning, daily Scrum, Sprint review and Sprint retrospective are all time-boxed events. This means that you should spend enough time fulfilling the purpose of each event but not more than the maximum specified in the time box. Wrapping the entire Scrum process is the Sprint itself. The Sprint is our fixed length iteration within which all the other activities are completed and represents the cadence of adaptation between the Scrum team and the stakeholders.\n\nWhile mentioned in the Scrum guide, product backlog refinement is not a specific event; it's a term that represents all of the work done by the Scrum team on items in the product backlog rather than those selected for the current Sprint. All of the work to understand, evaluate, document and size things that may end up in future Sprints is regarded as refinement and every member of the Scrum team participates as needed.\n\nIt's also important to note that Scrum is 25 years old and the technology available to us at the time necessitated a clear focus on people being physically together. Applying new technological advances to the context of Scrum allows teams to operate in both synchronous and asynchronous collaboration as needed while still fulfilling the intent of the Scrum values.\n\nThe first event in Scrum is Sprint planning. This event is where the Scrum team inspects the product backlog and adapts the Sprint backlog. Its purpose is to plan the Sprint. Focus for the upcoming Sprint is created with the Sprint goal that is formulated by the Scrum team. The developers then select items from the product backlog that best enable them to work towards this goal while considering the order of the product backlog and the needs of the product.\n\nThese choices may also trigger a change in the Sprint cup. Next, the developers create enough of an implementation plan to allow them to get started. Creating too much of an implementation plan would create excessive overhead for the Scrum team as new information is discovered. The output of Sprint planning is the Sprint backlog, which contains the Sprint goal, selected backlog items and enough implementation details to get started.\n\nNext is the daily Scrum. The daily Scrum is a daily event by and for the developers where they maintain the transparency of the Sprint backlog based on what's happened since the last one. The purpose of the daily Scrum is for the developers to plan what they are tactically doing next to achieve success in this Sprint. Based on the work that has been completed and new learnings uncovered since the last daily Scrum, we may need to adapt the contents of the Sprint backlog.\n\nWhile this tactical plan may change, the Sprint goal remains constant and only the Product Owner can choose to abandon the current Sprint goal and the Sprint itself. The Sprint review occurs near the end of the Sprint. This event includes both the Scrum team and stakeholders and is where the work for the Scrum team is offered for inspection. The purpose of the Sprint review is to plan what's next and maintain transparency of the product backlog.\n\nIn pursuit of this transparency of the future, we need to reconcile the impact of changes in the product, the business and the market since the last Sprint review on the product backlog and the product goal. This is a collaborative event where we physically update the product backlog to bring it in line with our current understanding of the future, maintaining its transparency.\n\nFinally, we have the Sprint retrospective. It occurs immediately after the Sprint review and allows the Scrum team to inspect themselves and adapt their processes, practices, tools and relationships. The purpose of the Sprint retrospective is for the Scrum team to plan how they are going to increase their effectiveness. Finding ways for the Scrum team to be as effective as possible within the bounds of the organizational constraints is the responsibility of the entire Scrum team. Pushing the bounds of those organizational constraints is the accountability of the Scrum Master.\n\nThese four events wrapped in the Sprint form a set of concentric feedback loops that create an empirical process control system and allow the Scrum team to iteratively and incrementally create the best possible product within the current constraints.\n\nSo the Scrum framework is made up of five values, three artifacts, three accountabilities and five events. Nothing more, nothing less. The Scrum framework is like the timber frame for your house. It does not control the use that you put to each room, its decorations or its content. It does however give structure and support where needed to maintain its structural integrity. If you want to change the timber frame of your house, you can, but due consideration must be given to the impact on that integrity.\n\nIf you found this video useful, please like and subscribe to our channel to encourage us to make more. If you need help getting started or just tuning up your existing Scrum, please use the QR code here or the link below to book a free consultation."
  },
  {
    "Title": "Unlocking Agile Success: How Empirical Models Transform Project Outcomes",
    "Description": "Explains how empirical Agile models improve project outcomes by increasing visibility, enabling change, reducing risk, and delivering value incrementally throughout development.",
    "ResourceId": "rnyJzSwU74Q",
    "Url": "https://www.youtube.com/watch?v=rnyJzSwU74Q",
    "Date": "2022-10-12T17:08:59Z",
    "Captions": "According to the chaos report from the Standish group small projects of under 50 participants are 30 percent more likely to be successful with agile practices and large projects of more than 50 people are over 200 percent more likely to be successful. \n\nHopefully this short video will help you identify the key differences that make this possible. \n\nMy name's Martin Henshawott I'm a professional scrum trainer with scrum.org professional kanban trainer with Pro kanban and I've been a Microsoft MVP in devops for 14 years. \n\nSo we have the traditional model the empirical model and we're going to look at that within the context of visibility right how much visibility do our stakeholders have we're going to talk about change operational risk and realized value. \n\nSo let's focus on visibility at the beginning of a product life cycle in a traditional model we're going to have high visibility we're creating that documentation we're showing the customer liaising with the customer and what it is we're going to create. \n\nAnd then at the end of the product cycle we also have high visibility right the customer's got a delivered usable working product that solves their business problem right that would be the expectation at the end of that time period but in between those two points we largely go dark right there might be touch points with the customer we're going to show you the documentation uh we have little demos that we might do of different parts of the product in isolation but they don't really get a holistic visibility about what's going on where we are. \n\nWe're just telling them so we tend to go fairly low visibility not to zero right but fairly low visibility and then at the end of the product cycle it jumps up as we deliver a usable working product. \n\nHowever for visibility in an empirical model we're actually going to start in exactly the same place and we're going to end in exactly the same place right we have high visibility at the end because they've got a usable working product we've got high visibility at the start because we've got documentation potentially right but at the end of every single iteration we're going to be providing the customer with a usable working product right that's how we mitigate risk it's the minimum bar for an empirical process a minimum bar for scrum is a usable working product at the end of every Sprint. \n\nSo in fact during each iteration we've got that low visibility but we jump back up on a regular cadence as we're delivering usable working product to the customer so they get these many touch points where they're able to make assertions change direction and have a different understanding of what's going on. \n\nNow let's look at our ability to change our ability to change I would quantify that as our the implications and our ability to accept change into the system right we're creating product so as we build more product we have less ability to change because each change has a bigger and bigger impact. \n\nAnd in a traditional model our ability to change is very high at the start and at the end it's very low right we have if we finish the product we've spent our 12 months working on it we've delivered the usable working product we've deployed it to production we know no longer and have an ability to to change it unless there's more funding more budget. \n\nBut very quickly as we get started building the documentation the more documentation we build the more impact change has right a small change could have a massive impact on all the documentation we've created. \n\nSo our ability to change drops very quickly and then we start actually building product and perhaps we build the entire database first or we build the database and then the mid tier right and then the uh uh interface that customers are going to interact with and we're building it constantly and we've kind of started everything so our ability to change drops again it never drops to zero right but throughout the life of the product it stays very low so it drops very quickly and then stays very low across the life of the product. \n\nOur ability to change in the empirical model again starts in the same place and finishes in the same place right we've got a time limited uh product cycle but what happens during that product cycle is our ability to change remains higher right higher it's still going to drop right because every time we deliver a usable working product the things that we've already built are harder to change than things we haven't built yet but because we're building in those vertical slices creating working usable product that the customer can deploy to production each of those vertical slices allows the other uh uh 90 right at the end of Sprint one the rest of the backlog the stuff we've not created yet can really can change anything they want with very little impact right because we haven't built copious amounts of documentation we haven't built copious amounts of product yet so they can change anything they want. \n\nSo the idea is that the ability to change is still going to drop Sprint on Sprint but it does remain much higher all the way through the life of the product and obviously ends in the same place. \n\nNow let's look at operational risk an operational risk in a traditional model we're going to start high operational risk right because we've not delivered anything and then when we deliver our usable working product at the end of our product cycle 12 months we're going to have a zero operational risk because we've deployed a working product for them. \n\nI know there's an assumption there but uh let's let's assume the best and then over the life of the product we've actually got very high operational risk if we're six months into our product cycle what operational risk for the customer have we alleviated zero right no operational risk so it needs to remain high during the life of the product and then right at the end we deliver that working usable version of the product right so we alleviate all of their operational risk in one big chunk. \n\nIn an empirical process for operational risk again we start high and again we finish low but every Sprint we're providing a usable working product so the operational risk gets a little bit less. \n\nAt the end of Sprint 2 it gets a little bit less again because we've delivered usable working product that solves their business problem and we end up with that straight line from top left to bottom right. \n\nRight every Sprint we're alleviating some of that operational risk now in reality we should alleviate it quicker if we as a team are focusing on delivering the most valuable things that that customer needs to know first. \n\nSo that operational risk might might be more of a curve but let's assume it's a it's a straight line let's take a pessimistic view that each Sprint we just alleviated that Sprint's operational risk. \n\nFinally let's talk about realized value the delivery of value to the customer. \n\nSo in a traditional model and we have zero value at the start of the product cycle we deliver a working product to production at the end so we have our our usable uh working product that perhaps we delivered our 300 features that the customer asked for and and how do we how do we get there well we're only delivering to production at the end right the customer can only use the product once it's in production it only adds value once it's in production so in fact we're not delivering anything during the life of the project and then right at the end they get their usable working product obviously it always works with their 300 features in it that are exactly what they asked for and uh they're they're happy because they got that realized value at the end. \n\nBut maybe there's a better way because what did we learn a little bit earlier in this discussion we learned that 35 of those features are used by the customer at the end of that product cycle only 35 percent right that's like 90 100 110 of those 300 items are actually used at the end of the product cycle that's not particularly great so what could we do instead. \n\nUsing an empirical process there's actually two ways to draw this graph one is that we're going to start at zero value just the same and we're going to end at those 300 features. \n\nSo this assumes that we're doing an empirical process inside of a traditional organization or working for a traditional customer the customer says here's these 300 features we've added them to the contract right and then that's what we're going to build and we're not going to very low variance of change right because we're going to put barriers in their way like change request boards and uh cost you know having to do a business case to make a change all of those things we're gonna we're gonna just deliver those 300 features. \n\nBut at the end of every Sprint we're actually able to deliver them some value right so at the end of each Sprint here is some value here's a product that you can deploy to production that solves some of your business problem right not all of it but some of your business problem. \n\nAnd every single old Sprint we're delivering a working usable product along that line right so the customer is able to get value from it sooner so if you think about the realization of value at the end of Sprint three they've got three Sprints worth of value. \n\nHow much of their business problem is alleviated already and we're not at the 12 month mark where one quarter of the way through the product cycle and we've alleviated one quarter of the business problem right they're adding value as we go along so they've had the value for longer is what I mean it's not sitting on a shelf because we're able to deploy to production. \n\nBut there's indeed a superpower there because only 35 percent of those 300 features are used so we actually don't want to build those those 300 features we want to build a different 300 features right even if we just get to that 300 mark. \n\nSo what happens is at the end of Sprint one we remove things from the backlog that we no longer need perhaps the customer has realized that they asked for stuff they don't need perhaps the market's changed and they no longer need that perhaps a business decision has been made right there's a branching decision this way was one set of 100 features this way was another set of 100 features so they added them all to the backlog but now they've made that decision and it's this one so we can delete these hundreds right so we delete those things and we don't build some of those things and we take it in a different direction right we add more value sooner in the product cycle as we go and perhaps we hit that mark of the same 35 percent of value much sooner perhaps we hit it in month five. \n\nRight we could stop there and have delivered the same value that we would have delivered in a traditional model but at 5 12 of the price my math's not good right 5 12 of the price. \n\nBut what often happens is in the product cycle we continue to build features different features based on the needs of the business based on collaborating with customers and stakeholders and we add way more value to the product. \n\nThat's if we're using an empirical process within an organization within a structure that is accepting of that level of change. \n\nAnd that is what we want to get from an agile process so even using an agile process inside of a traditional organization we get value we maximize visibility we maximize our ability to respond to the changing needs of the customer we minimise their operational risk and we continually deliver value that that customer can amortise over time right. \n\nThose are the superpowers of agile even within a traditional organization if we can change the organization as well we can get even more. \n\nWell thanks very much for listening if you're interested in uh uh reading a little bit more in depth into this story of agile um I really recommend the new new product development game it's a harvest business review article from 1986 it's available free online and I also recommend Stephen Dennings book the age of agile. \n\nIf you would like to get in touch with me please use this QR code right here uh to book a 30 minute free consultation with me and we can figure out how we can make your world a little bit better."
  },
  {
    "Title": "Navigating Complexity: Why Agile Practices Are Essential for Modern Product Development",
    "Description": "Explains how agile practices help teams manage complexity, adapt to change, and deliver value faster in modern product development, compared to traditional methods.",
    "ResourceId": "phv_2Bv2PrA",
    "Url": "https://www.youtube.com/watch?v=phv_2Bv2PrA",
    "Date": "2022-10-07T10:41:41Z",
    "Captions": "Agile is fundamentally about shortening the time it takes to deliver your products to users and to learn from it. Traditional management practices were developed during the Industrial Revolution to manage the work of largely uneducated workforce. While we can still be somewhat successful when using these traditional management practices, they no longer fit the type of work that we are doing in modern organizations.\n\nMy name is Martin Hincherwood. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in DevOps for the last 14 years.\n\nI want to create an understanding of the two different worlds that we're talking about here. So during the Industrial Revolution, with a largely uneducated workforce, we needed to make lots of goods really quickly. So we created a model in our organizations where we had the highly knowledgeable people at the top of the organization who were steering and giving direction to all of the rest of the people in the organization that were largely uneducated.\n\nBut the type of work that we were doing, the type of work we were physically doing was complicated. This complicated work had a particular characteristic. We could apply more knowledge to it and it became simple. This work became simple. So by applying more knowledge to this problem, we made it simple. We created standard operating procedures, built out common ways that things work, and optimised, identified the patterns and optimised for them. We pushed people into ability-based groups inside of our organization. So we ended up not only with the hierarchy of our organization but also the departmental model within our organization as well, where we had the CEO at the top giving direction. They had the absolute knowledge of the entire business and how everything functioned, and they gave direction to perhaps the sales team or the marketing team. They had a head who then farmed out that work to individual people down the totem.\n\nWork was done, and that works great in a world where the CEO can give instructions, give instructions, and we follow them, and things are successful. But the problem is the market is at the bottom. In our new world, the market is changing a lot more frequently than the CEO is taking a test on what's going on. So knowledge would have to flow back up this chain, and it's too slow. If your organization is unable to respond to change as quickly as your competitors, you're going to fail. Because the markets have changed, this complicated work no longer really exists. We can't turn it into simple, so every single thing we do becomes custom, which means that that flow of information is becoming heavier and heavier and heavier up and down the chain in order to get things done, and it's just not being successful. \n\nThat's because we're not operating in this complicated space anymore. Things have changed; things have become complex. No amount of standard operating procedures or processes or practices or ways of doing things can turn complicated work into simple. It never becomes simple. What complex work does do is it generates copious amounts of surprise. That's those markets changing. So we need to be able to adapt to it much more quickly than we were doing before. \n\nSo that's the different world. Traditional management and project management practices were developed to work in this space. You have things like PMI, Prince2. More recently, we have things like SAFe, the Scaled Agile Framework, and they are all developed to work in this space where the work is just merely complicated, and we can turn it simple by documenting a process. But in actual fact, most of the work we do today, most of the way our organizations need to operate today, is we operate in a complex world: complex markets, complex work, delivering all this complex creative things. Agile was a response to that difference.\n\nAgile's been around a very long time. The Agile Manifesto was signed in 2001, which is 22 years ago. Scrum was developed in this space and has been around for 25 years. 2019 was the first rendition of Scrum, but even before that, way back in the New New Product Development Game article, a Harvard Business Review article, I have a definition at the end, was 1986, I think. These ideas have been around for an incredibly long time. \n\nIf we exist in this complex space, we need processes and practices that were developed for this complex space, and we need something a little bit different. Because in our world of complexity, things are very unpredictable. There's a great lack of predictability in those species. Here I've categorised the types of things that we would do in product development into three key areas: requirements, technology, and people. \n\nIt's a very broad category, I do understand that. But let's think about the predictability of each of those items and where it would sit. Well, we're no longer taking orders. We're not having orders coming from above in the organization, and we just follow it. The customer might say, \"Yes, I want this,\" but the reality is that the chances of this being what they actually need are very different. In fact, there's some good data around that. The Standish Group in Boston created the Chaos Report, and they've added a few things. One of them is that 35 percent of our requirements change over the life of our product. Not only that, but 65 percent of the things that we build are used little, if ever. \n\nThink about the waste. For every dollar of investment that we have, we're losing 65 cents on the dollar just to building stuff that our customers don't actually use. So why do we build things that our customers don't actually use? Surely they asked for them, so they need them. But the reality is that they ask for things they don't need, and the reason they ask for things they don't need is because we ask them an unreasonable question. We say, \"What are you going to need in a year's time, in 12 months, when we've built your product for you? What do you need?\" The reality is they don't know. They don't know what business decisions are going to happen over the next 12 months. They don't know what market changes are going to happen over the next 12 months. They don't know what other unpredictable world events are going to happen over the next 12 months. \n\nSo their knowledge of what might maybe happen includes a whole bunch of things that they won't need once the decision has been made or if a particular event happens. We need these hundred features. If it doesn't happen, we need these other hundred features. If we're asking them up front, they're going to give us the full 200 features, so there's half of those things we don't need. \n\nSo requirements, while we like to think that our requirements, once we've signed off on them, are fairly high predictability, the reality is they're probably closer to that 30 percent predictable. So we need to figure out how do we adapt more quickly to be able to take that into account. \n\nThe next thing is technology. Technology could be our software technology; it could be a product technology; it could be processes, ways of doing things, technology. Probably Scrum sits in that space; Kanban sits in that space. These are technologies that were developed in order to help us do things. Traditional project management practices, PMI and Prince2, are technologies, ways of doing things. But the reality is that even during the life of a product, the technologies that we need are going to change. \n\nSome of those technologies might be, would you run a product in exactly the same way when you're building something new versus you're supporting something that exists versus something happened in the market that you need to adapt around? Making a change to what's going on? No, we're going to use different processes and practices. Even in the software technology, Windows and Visual Studio are on daily builds. These products, the products that we rely on, that we use as part of our process, are constantly changing. \n\nNow technology is probably a little bit more predictable than requirements. I'll put this in the 50; it might be a little bit higher, but it's still fairly low. And then our last predictability is people. I don't know about you, but I don't come into work every day and operate at exactly the same level. People are not machines. No matter how much we want to say that people should just come into work and be professional every day, that's not how human beings operate. People take vacation; people take sick days; people have kids; people have arguments; people have disagreements. If I have to work with somebody I don't like, I'm not going to perform as well as I would if I was working with somebody I did like. We're going to collaborate more.\n\nWhat is that impact on the world? I would suggest that people are probably the least predictable element here. If you average this across each of these different ideas, these different topics, we get a kind of picture of very low predictability, definitely less than 50 percent. \n\nNow imagine that you've created our project plan for the next 12 months. We've created our bunch of mitigating actions. We've got a bunch of risks that might happen. We've got maybe 200 risks that might happen over the life of the product, and we have a whole bunch of mitigating actions that we've created. If this happens, we'll do this. What if 60 percent of all of that is going to change over the life of the product and change constantly? What is that impact on the body of work that we've created and our look forward into the future? There's a lot of waste in there. Things that we couldn't protect, those surprises are going to happen, so we really want to tackle it in a different way.\n\nIn this agile space, we deal with this predictability, this lack of predictability. We deal with it by having working product on a regular cadence. So perhaps we have a regular cadence of once a month. We're going to deliver working usable product. Instead of just having that single delivery at the end in our traditional model, we have continuous delivery of new working product that our customer can use, can work with in production, can give us feedback on that, will help inform the next piece of work. This gives us a whole bunch of capabilities, and I'm going to talk about that in a moment, but this is the superpower. This is the thing that allows us to mitigate risk. \n\nIt's the only thing that allows us to mitigate risk in this complex world where everything's changing so much. We can't plan our way out of the risk like we would in a traditional model when the variance is very small. When the variance is high, we need to create these working usable products because then when something happens, let's say a market change happens, we can maybe do another release very quickly after. We can do more releases than we have here. Perhaps there's a world event that happens, and we need to do a bunch of small releases in order to get the competitors' new features into market very quickly. \n\nThese are the tools that we use to mitigate risk. So let's look at what that looks like. I'm going to go through this first quickly with a traditional mindset. In a traditional mindset, let's say we take that pure traditional mindset where we don't actually give the customer, we don't deploy to production until the end. You've got a 12-month project, let's say it's going to cost 12 million of whatever monies you like, dollars, euros, or pounds, and we're going to deliver on a monthly basis. \n\nIn a traditional model, we're going to deliver at the end of the 12 months. So what's the visibility during the life of the product? Well, visibility normally starts high, right? It's going to start high because we're writing the documentation, we're communicating what's going on. But then right at the end, we've got high visibility because we've delivered them working products. But in between, how much visibility does the customer actually have? What can they actually see? What can they use in the product? What do they really know apart from, you know, we tell them things are going great? \n\nWe're 80 there and all of those things. So while visibility is not zero, it is fairly low throughout the life of the project and goes low fairly quickly. Couple that because visibility is not high, our ability to change also over the life of the project drops fairly quickly. So our ability to change at the end is very low. We've built a bunch of stuff, right? So we have a low ability to change. It's more expensive to change things, but we drop very quickly after we start work in a traditional model because we start everything. \n\nWe're not creating those vertical slices. This is why things like Spiral came into existence to help with those stories. But this idea is that change drops off very quickly. We maintain it for some time, but it drops off fairly quickly. Our customers' operational risk always starts at 100 percent. What is the risk to the customer? What's the customer's risk? They're looking at us going, \"What's my risk on whether these folks will deliver what I think they're going to deliver?\" So it starts very high, and then it's obviously zero at the end because we deliver our working usable product at the end of every project. \n\nThat happens every project. But operational risk during the life of the project remains very high. It maybe drops a little bit as they see some of the things we've created. Maybe there's a little dip there at the end as we go into UAT, but the reality is we get to the end, and their risk drops to zero only once we've delivered a working usable product for them, once we've solved their business problem.\n\nIf we look at realised value, how much value does the customer have? Well, it starts at zero. They've got no value, and at the end of the product cycle, at the end of the 12 months, they have full value. But during, how often do you actually deliver value to the customer? I very specifically use realised value. UAT does not count as realised value. UAT does not actually solve the customer's problem. It's still a pending problem, so we don't have that value realised until the end of the product cycle.\n\nHopefully, you agree or mostly agree with the way I shape these lines. You may have little caveats, but I think it's not going to be that much different from what I've drawn. Let's take another look and look at agile. You might call it empirical; it doesn't really matter what word you use. Agile's been agile since 2001. Before that, it was just empiricism, an empirical process. \n\nWhat we're going to do is at least every month, at least every 30 days, we're going to have working product, and it's going to be in production. So where does visibility sit? Well, visibility sits fairly high throughout the life of the project. It starts high, and then every month we're going to have, I'm probably not going to put 12 of these little stars in there, but every month they're going to have that same level of visibility. Here are all the things we created over the last month. Please validate that it is what we've created. \n\nDuring those sessions, you're going to have these little dips where we're not doing anything. I guess I could make that, I guess that could go all the way down here, right? Maybe that kind of makes sense, you know, bring it in line with the idea of not being able to see anything. But we have all of these touchpoints. We have 12 touchpoints throughout the life of the product where the customer is given the ability to change potentially. \n\nAlso, our ability to change over the life of the product is very different as well. We're going to start with high ability to change. In both cases, we've built nothing, and in the end, we're going to potentially have a low ability to change. In both cases, we've built a product, right? So now it's difficult to change because a whole product exists—10, 12 months' worth of work versus no work. \n\nBut the model is very different because at the end, because we're working in usable working increments at the end of each month, when we ship the product, the customer has the option to change anything we've not started, and it has zero impact on our ability to deliver. It has zero impact on the product, and there's potentially zero waste. It's close to zero; it's never zero, right? But we have much lower waste when they maintain that ability to change anything we've not started. \n\nSo what you end up with is you're still going to drop because you're building product, but it's going to be on a different trajectory. We're reducing our ability to change as we go through the product, but everything we've not built yet still has the ability to change. We even have the ability to change existing stuff just like we did in our traditional process. \n\nBut we're adding that to the ability to change everything we've not started. If at the end of Sprint four, month four, the customer wants to delete our entire product backlog and build a new one, and that's what we work on, that's cool. We can do that because everything we have done so far is usable and works. It's production-ready. That's that superpower that we need in order to get there.\n\nHow does that look for operational risk? Well, we're going to start in the same place and end in the same place. That's that normal model. We're going to start in the same place and end in the same place. But in fact, at the end of the first month, we've alleviated some of the risk. They have some working product. Hopefully, we've solved the most valuable problem we can in the first 30 days. \n\nWhat could we do in 30 days? That's what I do with teams. I get them in a room and I say, \"Here's what the customer wants. What is the most valuable thing we could do in this space in the next 30 days? Let's build that.\" At the end of the 30 days, you've got that. You give it to the customer and say, \"Are we going in the right direction? Are we building something that's valuable? Do you want to change your mind?\" It gives them that visibility. \n\nThey can potentially, we can potentially ship it to production, and they can use it in production. There are all sorts of things we have to do to allow that to happen. But what you end up with is this direct trajectory from top left to bottom right. Every single time we create a usable working product, we alleviate the customer's operational risk. We also alleviate their fiscal risk. Their money is no longer at risk because they have a working product. \n\nYou might have sprints where something bad happens, and we have a little plateau. That's entirely possible. But mostly, you're hopefully going to be delivering at the end of every sprint a usable working product that shows progress. \n\nWe have two things we need to talk about for realised value. We need to talk about if we are in a traditional organisation, so a hierarchical departmental model, top-down organisation, and we're using agile practices in our team. What does that look like for the realisation of value? Realised value is value I have. So if you're creating value for me, I don't have something that you've documented. I don't have something that you've built but not tested. I don't have it yet. It's not value yet. It's potential value, right? That's correct, but it's not value for me yet as the customer. \n\nRight at the beginning, we start at the bottom, we go to the top, and then we have every month we're going to deliver usable working products. So every one of these notches is a delivery of value. It's a delivery of something that we can use, that we can get in front of our customer, that we can have them kick the tires on, that they can tell us that we were wrong or we were right, and they'll be able to use it.\n\nThat's one option if we're in that traditional organisation where we're handed, \"Here's 300 requirements that you want us to build, and we're going to build it.\" In both of these models, maybe a little bit less in the agile model, we're still under that constraint of, \"So here we asked for, we were asked for 300 things, and we delivered 300 things in both models.\" But remember we talked about the 65 percent that are used little, if ever. That's included in those 300 things. \n\nSo what could we do differently? Well, what would be great is if at the end of the first month, the customer gets the product, and they tell us about all of the things that have changed. They get to look at the product and decide they want something different. They get to tell us about the way their business has changed in the last 30 days. Perhaps there are a bunch of features up here that they don't need anymore. They made a business decision, and the world has changed, so they don't need those. \n\nInstead, they replace that with something else, and we build something else of value. That's probably too steep. Let's do something else of value. At the end of the next month, we build something else of value because they decide they don't need this piece, and then we build something else of value. \n\nPerhaps at this point, we're almost at that same value level as we created over here. They decide we're done. We were able to deliver early. We were able to finish the product. This is only possible if we're able to change the requirements, if the requirements are fluid. In fact, you don't want the full requirements up front, but we want those fluid requirements so we can make changes constantly. \n\nHopefully, we get somewhere up here where we have this much higher value product. If we continue to build it, it's much more in keeping with what it is that the customer wants, and we've minimised that 65 percent of features not used. We're still going to build stuff that's not used, and we end up in that space. \n\nAll of these things are predisposed on having a working usable product at the end of every iteration, including the first. That is not out with the bounds of every single organisation on the planet. It is something that, for example, the Windows team do on a weekly basis. They create a working usable product on a weekly basis with four and a half thousand software engineers working on a product that is just enormous. If they can do it, we can all do it. The only excuses we have are the existing state of our system, the existing expectation of quality and capability in our teams and in our organisations. \n\nWe need to work on those, and we can all get these capabilities, and we can all be a little bit more agile. \n\nThanks for listening to my little rant. If you are interested in having a further chat with me, please use that QR code in the top right there to book a free 30 minutes with me. If you want our free consultation, that's cool. If you want to just have a chat about some of the things I've talked about and how it might be applied in your organisation, others are waiting to book a coffee on there as well. Just book a coffee. \n\nTwo books that I really recommend that you read are one is The New New Product Development Game. That's the 1986 Harvard Business Review article, and also Stephen Denning's book, At the Age of Agile. Those are both great works. Thank you for listening."
  },
  {
    "Title": "Transform Your Team with Flipped Learning: Unlocking Agility at Naked Agility Limited",
    "Description": "Discover how flipped learning at Naked Agility Limited combines self-study and interactive workshops to build agile, people-first teams and support continuous improvement.",
    "ResourceId": "vY0hXTm-wgk",
    "Url": "https://www.youtube.com/watch?v=vY0hXTm-wgk",
    "Date": "2022-09-09T14:17:04Z",
    "Captions": "Naked Agility Limited is a professional company that offers training, coaching, mentoring and facilitation to help people and teams evolve, integrate and continuously improve. \n\nTo allow us to focus on reflecting and practicing in the classroom, our training courses leverage a flipped learning approach that delivers some or all of the theory as self-study. The course content is divided into Learning Blocks, each with presentations and lectures in the form of videos, reading material and writing activities that are provided for self-study, complemented by half-day virtual sessions delivered online using Microsoft Teams. \n\nIn Europe, these live interactive workshops create a dynamic and interactive environment where we dive into the core concepts through group activities, interactions and shared experiences, all with the guidance of an expert professional from Trainer Professional Kanban Trainer or Microsoft MVP. \n\nObtaining new knowledge through self-study materials and having an in-depth rich engagement in the class allows students to enjoy learning that sticks. Students will complete the course ready to take the globally recognised certification exam included in the course fee as part of our learning experience. \n\nFor every participant, we provide a 30-minute learning review, a 60-minute coaching session and access to future courses at a 30% discount. We recognise the positive impact that a happy and motivated workforce that has purpose has on kind experience. \n\nWe help change mindsets towards a people-first culture where everyone encourages others to learn and grow. The resulting divergent thinking leads to many ideas and opportunities for the organisation's success. \n\nAll participants gain complementary access to the premium Professional Scrum space in our public community, the League of Extraordinary Agile Practitioners. \n\nI hope to see you there. Click the link below to find out more."
  },
  {
    "Title": "Unlocking Success: How the Professional Scrum Product Owner Course Transforms Your Agile Journey",
    "Description": "Learn how the Professional Scrum Product Owner course builds agile skills, practical product management, and ongoing support for effective product ownership and team success.",
    "ResourceId": "6SSgETsq8IQ",
    "Url": "https://www.youtube.com/watch?v=6SSgETsq8IQ",
    "Date": "2022-08-23T17:22:20Z",
    "Captions": "The Professional Scrum Product Owner is a hands-on, activity-based course where students explore professional scrum and develop an understanding of the critical role that the product owner plays on a scrum team. Being a professional product owner encompasses more than writing requirements or managing a product backlog. Product owners need to have a concrete understanding of all product management aspects, including but not limited to product ownership that drives value for their products.\n\nBeing a product owner is a key position that sets the tone for product leadership and the definition of success in the organisation. As a product owner, modern product management practices and mindsets are expected to be put into practice daily. The product owner is accountable for and has the authority to maximise the value of the product and the effectiveness of the product backlog.\n\nOur training is delivered as an interactive, activity-based course over half-day sessions using Microsoft Teams and Mural. Throughout the class, students learn a number of product ownership practices that they can use once they leave the classroom, while also receiving an introduction to agile product management. Between sessions, we provide additional reading, writing, and watching activities to maximise the learning opportunity and complement the classroom experience.\n\nAfter the conclusion of the class, we provide access to a community of peers and continued access to the trainer through office hours, quarterly catch-ups, and constant engagement to maximise validated learning. All students are provided with a password to take the PSP01 assessment, and if they take it within 14 days and are unsuccessful, they will be granted a second attempt as part of our validated learning experience. We provide a 30-minute learning review, a one-hour coaching session, and access to future courses at a 30% discount."
  },
  {
    "Title": "Mastering the Art of Scaling Scrum: Insights from the Scaled Professional Scrum Course",
    "Description": "Learn practical strategies for overcoming common challenges in scaling Scrum, based on hands-on insights from the Scaled Professional Scrum course and the Nexus framework.",
    "ResourceId": "sBBKKlfwlrA",
    "Url": "https://www.youtube.com/watch?v=sBBKKlfwlrA",
    "Date": "2022-08-23T16:53:08Z",
    "Captions": "The scaled professional scrum is a hands-on activity-based course where students develop a collection of skills that can be applied to overcome challenges when scaling scrum. Even after achieving success with scrum, teams are still limited by the amount of work they can do and the value they can create. They need to expand or scale to groups of scrum teams working together on the same product.\n\nWith doing so, they encounter common challenges with cross-team dependencies, self-management, transparency, and accountability. When introducing heavyweight scaling methodologies, teams often find that the added overhead slows them down and distracts them from the essence and benefits of scrum. The scaled professional scrum with nexus class builds on the nexus framework by introducing complementary practices and techniques proven to help teams at scale.\n\nThe course also includes a free attempt at the globally recognized scaled professional scrum certification exam. Our training is delivered as an interactive activity-based course over half-day sessions using Microsoft Teams and Mural. Students work together in a nexus to organise and simulate a scaled product development project.\n\nThroughout this case study-based class, common challenges in scaling are presented and more than 50 practices for overcoming them are revealed. Students will develop an understanding of how to launch, structure, organise, and manage a large agile project using scrum. They will leave the class with a toolbox of techniques for identifying and overcoming common scaling challenges.\n\nBetween each of the daily sessions, we provide additional reading, writing, and watching activities to maximise the learning opportunity and complement the classroom experience. After the conclusion of the class, we provide access to a community of peers and continued access to the trainer through office hours, quarterly catch-ups, and constant engagement to maximise validated learning.\n\nAll students are provided with a password to take the SPS assessment, and if they take it within 14 days and are unsuccessful, they will be granted a second attempt as part of our validated learning experience. We provide a 30-minute learning review, a one-hour coaching session, and access to future courses at a 30% discount."
  },
  {
    "Title": "Unlocking Your Potential: Transformative Training for Aspiring Scrum Masters",
    "Description": "Comprehensive Scrum Master training offering interactive workshops, practical activities, community support, and assessment to build Agile skills and foster continuous improvement.",
    "ResourceId": "5ZRMBfV9zpI",
    "Url": "https://www.youtube.com/watch?v=5ZRMBfV9zpI",
    "Date": "2022-07-27T18:45:17Z",
    "Captions": "[Music] \n\nThis workshop is for practitioners that are interested in starting a career as a Scrum Master, existing Scrum Masters, Agile coaches, and consultants trying to improve their use of Scrum. The Professional Scrum Master is an engaging, enjoyable learning experience where students gain a deep understanding of Scrum theory and principles, Scrum Master accountabilities, and why each element of the Scrum framework is important. \n\nOur training is delivered as an interactive, activity-based course over half-day sessions using Microsoft Teams and Mural. Between sessions, we provide additional reading, writing, and watching activities to maximize the learning opportunities and complement the classroom experience. \n\nAfter the conclusion of the class, we provide access to a community of peers and continued access to the trainer through office hours, quarterly catch-ups, and constant engagement. To maximize validated learning, all students are provided with a password to take the PSM I assessment, and if they take it within 14 days and are unsuccessful, they will be granted a second attempt. \n\n[Music]"
  },
  {
    "Title": "Unlocking Business Agility: Join Our Dynamic Monthly Discussions for Real-World Insights",
    "Description": "Join monthly interactive sessions to discuss real-world business agility challenges, share insights, and learn from diverse peers using a collaborative Lean Coffee format.",
    "ResourceId": "bvCU_N6iY_4",
    "Url": "https://www.youtube.com/watch?v=bvCU_N6iY_4",
    "Date": "2022-07-27T18:45:14Z",
    "Captions": "Join me monthly every fourth Wednesday for Business Agility Raw. Come and discuss what matters most to you today with our Lean Coffee format. Check out the session mural for this month's questions and add your own to the mix."
  },
  {
    "Title": "Free Workshop 04: Introduction to Sprint Reviews [Review & Retrospective]",
    "Description": "Covers key concepts of Sprint Reviews, interactive workshop delivery using Teams and Mural, technical challenges faced, participant feedback, and retrospective insights.",
    "ResourceId": "1-W64WdSbF4",
    "Url": "https://www.youtube.com/watch?v=1-W64WdSbF4",
    "Date": "2021-09-18T13:32:34Z",
    "Captions": "[Music]\n\nDo that.\n\nOkay.\n\nUm, I guess, uh, welcome to this. Is this the fifth? Fourth? Fifth?\n\nFifth.\n\nUm, live workshop that I've been doing. This one is introduction to the sprint review. So we're going to dive a little bit into how the sprint review works and maybe why it's not working for us because in some cases, I'm sure it's not working. \n\nUm, and how to do it a little bit better. Hopefully, this will be a good interactive experience and I'm going to try my best to do better with the timing because last week's, uh, not last week's, two weeks ago, the um, Kanban session, um, that was the main feedback was Martin's timings up. \n\nSo, um, I'm going to try and do better at that. Peter is a veteran of some of my sessions, so he knows that my timing quite often sucks. So, um, that's just the way it is sometimes when the participants have lots of awesome information to impart. Sometimes it's more interesting to listen to what people have to say. \n\nUh, so we have eight people in person just now. Um, I'm sure a few people will turn up as we go. Um, but I have, as usual, a little icebreaker for us with some questions about the, um, let me just unlock them for you. Unlock. \n\nUm, with some questions about the sprint review and I'd like you to drag, have a read of the different questions, um, and drag either a tick or a cross onto, um, onto the hexagon on whether you agree with that statement or not. \n\nI did these ones a while ago, so I don't actually remember how many trues and how many falsies I've got, so we'll need to take a look. \n\nOh, has anybody got things dropping behind? Nope? Awesome. Just making sure because that's sometimes a mural problem, a tool problem. \n\nUh, one perfect assistant for you. [Music] \n\nI'll put another four minutes on the timer for us to go through this and then at the end of, um, this exercise, I'm going to lock the meeting. \n\n[Music] \n\nWe had lots of disruption in the first session with people kind of hopping in and out of the meeting during the session. So, um, we lock it. It does mean if you do drop out accidentally, um, because of internet or whatever, you'll not be able to get back in and I apologise for that. \n\nUm, if you were, uh, if you're still waiting to participate, you can click the links and get into the meeting before it closes. \n\nIt interferes with my ability to quit breakout rooms when people are joining and leaving and joining and leaving and then ends up in a breakout room on his own when it's supposed to be a pair and he's like, \"What the heck's going on?\" \n\nYeah, I normally end up alone somewhere. \n\nIt's a time when I actually can do some work. \n\nOkay, well, let's not use that button. How do you do? \n\nI've got a new keyboard function lock. That's what I want. F11. There we go. \n\nUm, okay. \n\nWe have, well, there's some that are not ambiguous at all. Number five. This is the only event where stakeholders are regularly invited to participate. \n\nEverybody's on the same page for that one for sure. \n\nLet me grab a big tick. I agree with everybody on that one. \n\nDuring the sprint review, the product owner may share budgetary and likely release dates. \n\nI'm going to put another big tick. Oh, I'll grab the big tick because then it's already the right size. There we go. I'm going to put another big tick on that one. \n\nWe want to, we'd like to use the sprint review as one of the primary communication mechanisms where we've got everybody together. \n\nRight, so it's open, it's transparent. The stakeholders are there, the team is there, and perhaps leadership is there and the product owner is there and we can communicate things in an open and transparent manner. \n\nAnd it allows us to maybe have or not have or deal with some of those things that come up when somebody else thinks their stuff is more important than everybody else's stuff. \n\nMaybe they can openly and transparently say so and why and then find out they're wrong because everybody else has other ideas, right? \n\nThat's kind of the value in that, in this event. \n\nStakeholders and the scrum team collaborate on next things that could be done to optimize value. \n\nThat's another green tick there. \n\nAnd we want to, what's next, right? Something might have changed, so we need to figure that out. \n\nUh, then we get number three. I'm not doing them in any particular order, I guess new microlighter might have made more sense, but that's not the way I started. \n\nNumber three. During the sprint review, the product owner may present a forecast of progress towards the product goals. \n\nRight? \n\nProduct goals are pretty important in scrum. They help us focus the product backlog and gives us, ah, what's the best way to describe a product goal? \n\nSo, we're going to have some kind of vision or strategic goal for our product and then that might be too nebulous, too far out for the people doing the work to actually connect to that idea. \n\nSo a product goal is an intermediary strategic goal that is far enough out that it's a bunch of sprints but close enough that we as people doing the work can actually see how the work we're doing contributes towards that thing. \n\nBecause sometimes the vision is, you know, some solve some esoteric customer problem and it's difficult to see how we get there because that's two years away. \n\nUm, so how do we get something a little bit closer to connect to? \n\nUh, number one. The purpose of the sprint review is to assess if the product increment should be released to market. \n\nI would say yes, it is. If your stakeholders are sitting there saying we can get value from what is what you have done so far, why would you leave it sitting on a shelf? \n\nWhy wouldn't you ship it to customers? \n\nNow, you might not ship it to customers if the cost to ship to customers is too high, right? \n\nBut then I would want to have a conversation about why is the cost to ship to customers so high? \n\nHow can we fix that problem? \n\nShouldn't each increment go to the, you? \n\nIt should be released, but regardless, it shouldn't be part of the review to assess if it can be shipped. \n\nAh, so I think it's saying if it should be shipped. \n\nSo if we have a potentially releasable increment at the end of the sprint, we get together at the sprint review and one of the outcomes might be push the red button to actually release it. \n\nIt actually goes to production. \n\nUm, scrum, the scrum guide doesn't require or enforce in any way that you do ship to production at the end of every sprint. \n\nIt just requires that you have a potentially shippable increment, a usable increment. \n\nUm, I would add to the scrum guide and say yes, you should be shipping to production at the end of every sprint. \n\nAnd if you can't ship to production, I'd want to figure out why and how do we fix those things? \n\nThat statement just had two negatives and didn't catch both of them, the assess and should, because I thought assess if, yeah, I missed the should instead of, yep, that's probably my bad English of I know of Norwegian, so he obviously has better English than the rest of us for sure. \n\nNo, I'm just the two negatives caught me. \n\nOkay, yeah, that's my experience of being in Norway as I say stuff and people are like, \"Yeah, that's wrong.\" \n\nWe don't speak English in Scotland, do we, Peter? \n\nNo, no, no, I just, uh, yeah, I'm just saying the two negatives in that statement caught me off guard. \n\nYeah, what did I just, I missed this should, the assess and should release to production. \n\nOkay. \n\nUh, what we got left? Number two. \n\nBy the way, that's the reason why I'm the red dot. \n\nOkay, that's okay. You did not, you were not required to own up to that. \n\nUm, station two. This is a four-hour time box event for a one-month sprint. \n\nThat is what the scrum guide says. \n\nYou have up to four hours for a sprint review, right? \n\nAnd it's usually, it's proportionally less for shorter sprints. \n\nSo if you're doing a two-week sprint, you kind of have up to two hours, I would suggest. \n\nThat if you're not having enough conversations to fill that time, that for me would indicate a smell. \n\nI'm not going to say it's wrong, right? \n\nIf you do a 15-minute sprint review and everything is awesome, you're building the right thing, your stakeholders are happy, they understand what's going on, your team knows where you're going, um, and you can do that in 15 minutes. \n\nOh, awesome, right? \n\nBut in general, I would see it as a smell if you're not able to fill that time or at least fill a good proportion of that time. \n\nIt would mean to me that we're maybe not getting to the crux of the conversation, we're not communicating enough, maybe we're not getting enough feedback from our stakeholders, we're not engaging with our stakeholders. \n\nUm, for them to provide feedback because I don't know if you've noticed, right? \n\nBut if you have a meeting, whether it's Teams or Zoom or any platform, and you ask a question and there's 20 people there, you'll generally have tumbleweeds. \n\nYou won't have anybody saying anything. \n\nIf you do have people saying something, it will be the loud people who always talk or the hippo, right? \n\nYou heard that expression, that the highest hippo, highest paid individual in the room, that's the hippo, right? \n\nSo either people don't feel like they can talk, they don't feel like it's a forum within which they can voice their opinions, or they don't really feel invited, they feel like it's a platitude, right? \n\nSo there's a couple of techniques you can use in there. One is, um, I can't remember the name of the technique, but it's you make sure you get an affirmative or a negative from everybody in the room. \n\nEverybody has to say either yes or no, and we take them not saying anything as they totally disagree with what we say. \n\nSo are you happy with this product? I want to hear a yes from everybody. \n\nThat can be a technique you can use to get to that person that's going to say, \"Well, no, this is a problem,\" right? \n\nBut maybe they didn't want to say anything. \n\nAnd to encourage them to talk, the other way is do breakout rooms, do smaller exercises, leverage those liberating structures. \n\nI'll talk about some of the options that I have seen work. \n\nUm, I would also say that everything I say is what I've seen work in the contexts within which I've been working. \n\nUm, so Peter may have things that work for him but don't work for me, or may have things that work for him and don't work for me, and it's culture-specific as well. \n\nThe Brits can be fairly loud and obnoxious in meetings; the Norwegians could be fairly reserved and not boisterous at all, right? \n\nSo you need to take that into account, who is attending your meeting and what is their culture, even within different companies. \n\nUh, and then the last one, number four. I don't know why I ordered them in that weird way, but there we go. \n\nUh, sprint review has the highest number of participants, making it an expensive event. \n\nOkay, so this time, all of these statements are in fact true, and the sprint review is usually your most expensive event. \n\nRight? You've got two hours, you've got the scrum team, so the product owner, the developers, and the scrum master, and a whole bunch of stakeholders, business people, people who care about your product. \n\nThe most people at any time are in that event, therefore it is, by definition, the most expensive event you have. \n\nSo you want it to be valuable, right? If you're wasting people's time, you'll find that participation will decrease over time because people will stop coming back. \n\nIf you don't show people anything they care about, they're not going to come back next time, right? \n\nEven if you don't show them anything they care about, if they're not engaged and don't see anything they care about, they're definitely not coming back. \n\nSo we need to figure out how do we encourage people to participate in that event. \n\nDoes that sound reasonable for my answers? Reasonable? Anyone to disagree with anything? \n\nOh, I got a little heart pop up there. That's pretty good. \n\nUsing the tool. \n\nUsing the tools. \n\nUm, okay, so let's look at what a sprint review might look like. \n\nOkay, so I've got a couple of pieces that I want to talk about here, and then I've got some little exercises around it. \n\nSo the first piece to think about is what's the purpose of the sprint review in scrum? \n\nPeter, I know I'm putting you on the spot, but what do you think the purpose of the review is? \n\nFeedback. \n\nRight, it's part of our empirical process control system, which scrum is trying to implement. \n\nAnd empiricism just means feedback. It means look at what happened and figure out what to do differently next to make what happened better the next time around. \n\nLike that, those empirical feedback loops, inspect and adapt, all different ways of saying the same thing. \n\nSo the sprint review's outcome should be an understanding of what we are doing next. \n\nAnd in scrum, we store that information in an artifact to provide transparency called the product backlog. \n\nRight? That's where we're transparently reflecting what are we going to go do next, what's the next most important thing to do, what's coming up after that, right? \n\nThat's where we're reflecting that. \n\nSo we need to walk out of the sprint review with an updated product backlog. \n\nUh, yeah, I can put, uh, could you put the link for the mural in the chat? Just copy it from where you're talking. \n\nAnd you have one more question in the chat as well. \n\nI haven't had that. It says, can you like, what happens? So Carlos is asking what happens when the product owner is absent in the sprint review? Could you share your opinion on that, please? \n\nThat is a very good question. I am going to share it with a little story. I worked with an organization in Horton, which is about, I don't know, it's about two hours south of Oslo, I think it is. Two hours southern, one hour, two hours would train, one hour, yeah. \n\nI always went on the train, so it was two hours. \n\nUm, and I had, I worked with this team and they were very, I'm actually going to say depressed, right? They were not a happy team. \n\nUm, they had a very negative outlook on the work they were doing and what they were doing, and I was trying to figure out what the problem was. \n\nRight? So I go to the sprint, the events and see what's going on, and at the sprint review, I just asked them, I didn't see anybody new, so I was like, \"Who's the product owner?\" \n\n\"Oh, oh, that's Thor, right? He's not here.\" \n\nLike, is this, is he usually here? \n\n\"I don't know, he doesn't normally come to the sprint reviews.\" \n\nHow would you feel as a team if your product owner thought so little of the work that you were doing that they couldn't even be bothered to come and see what it was you did and how well it was done? \n\nHow would that make you feel? \n\nProbably make you feel like nobody values your work. \n\n[Music] \n\nRight? \n\nWhat are the three things that we need to feel like we can work well as from at Drive Dan Pink's book Drive? \n\nLet me remember what the three things were. \n\nIt was autonomy, mastery, and purpose. \n\nWith the three intrinsic motivations, once you get money off the table, when we're not worried about putting a roof over our head, autonomy, mastery, and purpose. \n\nWe want to feel like we're in control of the work we do, right? \n\nSo scrum facilitates that with our self-organising teams selecting the work at sprint planning. \n\nWe want to feel like we're good at our job, right? That we're learning more things, mastery of our profession, right? \n\nAnd that manifests both in professional scrum, right? We're doing that part well, but also engineering excellence. \n\nIf you're a software team, you know, are we doing DevOps practices? Are we getting value from our product? Are we continually shipping it to production? Are we always increasing quality? Are we learning from each other? \n\nThat's that mastery. \n\nAnd then purpose. Are we building stuff that matters? \n\nDo we feel like the stuff we build matters to other people? Because otherwise, why do I get out of bed in the morning if what I do doesn't matter? \n\nOkay, well, I won't do it then, and we'll have the same outcome. \n\nSo how do you create that purpose for people? \n\nAnd the product owner turning up to the sprint review is probably one of the first steps. \n\nIf you can't get the product owner in, you probably can't get the stakeholders in either. \n\nAnd isn't he supposed to get them in at least on the, that's one of his jobs as well, to get them together to showcase what's happening? \n\nAnd part of the problem I found for this team was that the product owner also wasn't doing the product backlog. \n\nTherefore, the team was building stuff that the product owner didn't care about because the product owner didn't care what they were working on enough to go update the product backlog and tell them what to work on. \n\nRight? \n\nSo it was one of those vicious cycles of spiralling down to mediocrity. \n\nAnd the question is, what was he actually doing to have the title product owner? \n\nSounds like he was not doing anything. \n\nSo, but this is where we get to that difference between do I have the job title of product owner or am I fulfilling the accountabilities of being a product owner? \n\nAnd I don't really care about the job title part. You can be called a delivery manager, you can be called a product manager, you can be called a project manager, right? \n\nI don't care what your job title is. \n\nBut somebody needs to take the accountabilities of the product owner, um, which is making sure that there's a clear, transparent product backlog that reflects transparency of the future that, um, everybody on the team and the stakeholders understand what those things are and then actively managing that going forward into the future. \n\nSo if those things aren't happening, that's where I would look. Who's supposed to be doing that? \n\nSo another question in the chat there. How do you get outcomes from the user? \n\nCould you recommend some tips? \n\nNow, I'm not sure I understand outcomes from the user, so maybe you need to explain a little bit better, but I think I might answer that question as we go through. \n\nOkay, how do we get feedback from the user maybe? \n\nUm, or maybe it could also be that you're asking how do we know what the outcome's supposed to be rather than just being given solutions, which quite often users try and give us solutions. \n\nSo I'm not sure what you mean there, Carlos. \n\nAndre is asking an interesting question as well. \n\nBut can the scrum master be asked to back up the product owner in their absence? \n\nRight? \n\nAnd I would ask the question, if a product owner is doing their job right, they are taking those accountabilities, then they should be knowing what's happening in the marketplace, what's happening inside of the business. \n\nUh, they have relationships and manage relationships with stakeholders, whether difficult stakeholders, negative stakeholders, they still need to manage those relationships. \n\nAnd they take all of that information of what the team wants to do, what the technical realities of the product is, what the business needs are, what the commercial realities are, and they funnel all of that information into here's what we're going to do next. \n\nI'm not sure that I have often seen scrum masters that have the knowledge and skills to do that, right? \n\nSo it's like in a different set of experiences. \n\nI'm not saying it can't happen, right? \n\nBut I would probably prefer a business analyst to be back up for the PO because they're going to have a better understanding of what the business needs than the scrum master might have. \n\nOr maybe the scrum master is your business analyst, in which case maybe yes, right? \n\nThere's no real rule around that. \n\nAh, so Carlos is asking how do we measure the outcomes? \n\nUm, let me kind of, let me put a pin in that and you ask that in a little bit, okay? \n\nUm, because I think we might get to that. \n\nUm, so what do you think we need going into a sprint review? \n\nWhat's, what's, I mentioned a couple of things as part of this funnel, right? \n\nOne of the things that the product owner needs to bring into that story in order to be able to review, discover, and rearrange the product backlog to reflect transparency in the future. \n\nWhat should we show? What should we have on here? \n\nYou have the sprint goal from the last sprint, so that's what you should be measuring yourself against. \n\nBecause maybe we're measuring our, yep, we are likely measuring ourselves against did we achieve the thing that we committed to? \n\nYeah. \n\nWhat else is important in this product strategy? \n\nGiving us the direction where we want to go so we can align flex strategy. \n\nYeah, absolutely. What's our overall strategy? \n\nI would suggest that might be a combination of the product vision and maybe the current product goal, right? \n\nBut maybe there's more information there, so I'm happy to put all of those things on the list. \n\nThere's probably useful information. \n\nWhat else? \n\nRemember, your product owner is spending the money. \n\nThey're deciding what we're going to go work on. \n\nSo what do we need to discuss in order to try and be as right as possible at this point in time in what we're building next? \n\nSo the value of the product backlog items. \n\nYeah. \n\nThe value contained within the product backlog. \n\nWhat about we just did this two weeks ago? \n\nLet's say we're doing two-week sprints. \n\nWe just, we're doing two-week sprints two weeks ago. \n\nUm, what's changed in the last two weeks? \n\nYou've discovered more. \n\nAce or later wants you to inspect the outcome in the chat. \n\nYeah, so the, the, I'm, what is the outcome? What's the result of all of our work? \n\nThe increment. \n\nYeah, we need to inspect the increment. \n\nThe product has changed in the last two weeks. \n\nMaybe that means some of the stuff that's on our backlog we don't need. \n\nMaybe that means that there's other stuff we do need because of whatever we built. \n\nRight? \n\nBut there's also changes in the business, right? \n\nWhat's happened in the business in the last two weeks? \n\nIs their needs and desires exactly the same as they were two weeks ago? \n\nIsn't that part of just having the backlog always ordered according to what's required or what's the changing tide in the business? \n\nSo this is the moment where we have all of those stakeholders as well as the team together. \n\nSo you mean more reordering the backlog based on what has changed, not because if there's a change for it, because otherwise I would expect that to be always present in order backlog. \n\nSo maybe there's a change that the product owner knows about, but maybe there's a change that they don't. \n\nYeah. \n\nWhat's happened in the business? \n\nAnd then perhaps market changes. \n\nIf you're building a commercial product, what's, what have competitors been doing? \n\nRight? \n\nMaybe that's going to impact how our priorities have changed, right? \n\nWhat do you think happened in the sprint first sprint review at the Microsoft Teams when lockdown happened? \n\nRight? \n\nWe need the world's changed. \n\nWe need to throw out this backlog and what do we need now? \n\nWhat's the most important thing we can do to help solve our users' problems now, which might be completely different from two weeks ago, right? \n\nI would argue that is a massive change that you don't want to wait for the sprint reviews. \n\nI would definitely agree. \n\nProbably it requires a special session and something bigger happen. \n\nYeah. \n\nI used a massive example, which definitely I would agree or would probably have some special things happening. \n\nUm, but what's happening in the market? \n\nWhat competitors are releasing? \n\nMaybe they've released a feature that means that users are starting to gravitate towards your competitors rather than your product. \n\nHow do you get ahead of that? \n\nHeaded off and do that. \n\nSo we're going to take all of that information, present it in some way, and bring it into everybody's consciousness, their frontal lobe, so we can noodle on it and have discussions about it. \n\nSo we don't just need stakeholders, but we need the right stakeholders for the conversations that we need to have. \n\nSo you're right, the product owner probably needs to have some understanding of what do I want to discuss walking into the sprint review so I can invite some of the right stakeholders. \n\nRight? \n\nSome stakeholders are going to come every sprint because you're building stuff they care about, so they want to provide you with feedback. \n\nSo stakeholders is kind of a catch-all word that they use in scrum, which just means anybody who cares about the outcomes that the team's working on. \n\nRight? \n\nSo they could be users, could be business people, could be purchasers, could be anybody. \n\nI worked with a company in the UK, and they ended up having to, they had one of those, um, like all hands meeting rooms in their company headquarters, and they would fill that for a sprint review. \n\nThey'd be hard pushed to fit the hundred people that turned up to see their sprint reviews. \n\nRight? \n\nBut it took them months of what do you really want? \n\nAnd once you start building things that people want, they'll want to come and provide you with feedback. \n\nRight? \n\nThey don't want to provide you feedback on stuff they don't care about. \n\nSo maybe share the goal, and then does everybody remember what the sprint goal was last sprint? \n\nPerhaps not, so we need to share that as well, and again that would be the product owner sharing that. \n\nAnd then maybe in some way we want to demonstrate the working software. \n\nWho's best placed to demonstrate the working software? \n\nWith the team, wouldn't it? \n\nThey're the ones who just built it. \n\nThey should be able to explain to the stakeholders what it is they've done and why it matters to the stakeholders. \n\nWe're building value after all, not features. \n\nRight? \n\nNobody really cares about user stories and features; they care about value. \n\nWhat do I get from what you've just added? Tell some stories. \n\nRight? \n\nThat's the way I, I, I, storytelling is the best way to do that. \n\nUm, so there's a number of techniques that I've seen work really well in demonstrating the software, um, depending on how many, if you've just got one team, right, doing a presentation, maybe they just present, \"Here's what we changed,\" right? \n\nIf you've got ten teams, that might take too much time. \n\nSo, uh, maybe you need something that looks more like, uh, have you seen in those American movies when the kids have their science fair at the school? \n\nAnd you've got a bunch of stations, each presenting a different thing, and people go to the things they care about? \n\nThat's the science fair model, and that can be implemented virtually as well with breakout rooms, and there's various techniques for that. \n\nUm, but doing that might be good. \n\nUh, doing some kind of shift and share if you've got a lot of stakeholders. \n\nShift and share is when you send people out to breakout rooms, and each breakout room is a particular feature or part of the product that one of the teams has been working on, and then you have the attendees move to the next room, the next room, the next room. \n\nUh, in order to facilitate that, I've done that one in Teams, um, and it works in Zoom as well. \n\nBut how many teams should a sprint review have? Shouldn't it be per team kind or rent review per product? \n\nSo if you have ten teams working on one product, you show one unified working increment to the stakeholders because you've only got one product. \n\nSo we're doing a review of the increment, and we have one increment. \n\nWe don't, ten teams working on the same product don't create ten different increments because then that's not integrated together. \n\nTherefore, it wouldn't meet a definition of done. \n\nAnd that sounds good. \n\nSo what a lot of teams do, or what a lot of product management does, is they create some kind of alignment in their product to minimize the number of people that are part of each of these stories. \n\nRight? \n\nSo if you look at the way, and the example I always use examples from the Azure DevOps team because I've been working with them for a long time, but they all over the part of the eight years of their transition towards agility was they shifted their product from one big ball of string, right, to almost like verticals of here's a, and it's now called Azure Boards, right? \n\nThe graphical representation of the work that you're doing. \n\nSo there's one product owner for one product, and then that product owner maybe has two or three teams working for them, and those two or three teams are contributing to that single unified product. \n\nSo you have one backlog, one product owner, one maybe one sprint planning or like a pre-planning and one sprint review. \n\nYeah, but would you do one sprint review for all five products in that? \n\nIf I had five products, different products, I would maybe have five different reviews. \n\nYes. \n\nYeah, but your Azure DevOps is now becoming a mixed sample or mixed example because now they're five different products, which each of them, so at the small scale, right, there is only one right answer: one product, one product backlog, one product owner. \n\nRight? \n\nBut once you scale up to larger interconnected systems, maybe some of those systems are their own products that can be shaped on their own. \n\nBut I would suggest if it ships together, it needs to be reviewed together. \n\nRight? \n\nSo if you have a product where you're breaking it up by component rather than by vertical value streams, then you probably need, you probably forced into the larger review where you've got one bigger product. \n\nAnd now when you do have a much larger review, something the Azure DevOps team did do was prior to their sprint review, every team would create a video to present the demo of what it was they created and send that out to everybody. \n\nSo it's been my experience for the big projects or big programmes to do one demo for the whole project product, however you want to describe it. \n\nUm, and at one level, you could say, \"Well, I was looking after data migration. Did I really care that much about the user experience at the other end of the data flow?\" \n\nBut it was still useful to hear someone say, \"What we want to see next sprint is we want to see the events.\" \n\nSo then that would actually inform me why people were then chasing me to migrate events from the database through the entire value chain. \n\nSo even though I normally didn't care, it actually provided me and my team with some useful feedback. \n\nUm, they, we can't load this data, whatever x, y, and z data, so we're not going to display in the UX for another couple of weeks. \n\nSo that would inform the guys at the other end of the flow, \"Well, let's not plan any work around trying to get that data in because the migration team aren't going to get it to us for a few sprints.\" \n\nSo it is useful for everyone to hear at least five or ten minutes what everyone else is trying to achieve. \n\nYeah, the other teams are also stakeholders to your input or output. \n\nMaybe some of those teams are providing output that is your input, right? \n\nAnd maybe you're providing output that is their input. They're blocked from delivering some features until you've got something there for them. \n\nRight? \n\nSo it's that whole context that is important in the demonstration. \n\nAnd so I do agree that there are scale issues, and you have to figure out what practices work. \n\nUh, the Nexus framework, which is scrum.org's scaling framework, encourages having a single sprint review, but it does talk about it being for up to nine to ten teams working together. \n\nIf you get more than that, you probably want to spread it into, I think they have a, I can't remember what the phrase is, but it's Nexus of Nexus. \n\nRight? You might have multiple nexi, uh, that roll up to a single product. \n\nIt's just more complicated, and the example that I think sits well with what you're talking about over is I think about the Office team, right? \n\nThe Office team, SharePoint is not really that dependent upon Word, but Word exists also as a separate app but also inside of SharePoint. \n\nSo maybe there is a lot of crossover, um, but they've got nine hundred people-ish working on that product. \n\nUm, so how might they organise that to be, to get the information to the people that need it, the feedback from the people that need to provide that feedback? \n\nUm, it's figuring out what works at scale. \n\nThere are no hard rules at scale; there's so many different options there. \n\nYeah, I'm just seeing some, you said it was up to four hours. \n\nYeah, I know it's just a number, but up to four hours for a one-month sprint, and you should be able to fill it. \n\nBut then if you are done, three teams, are you at twelve hours then? \n\nNo, it's still one sprint. \n\nSo what I've seen work, and actually what one of the teams that Peter was working with, um, they had a tight time box inside the sprint. \n\nMaybe each day, I think there were six teams, and maybe each team gets seven minutes to show their stuff, or maybe it was only five minutes to show their stuff. \n\nUh, I, I, so you're definitely bringing it down a little bit, but what I found valuable was once they got into our cadence of having those discussions about how do we fit all six teams inside of this sprint review, they started talking about telling a story rather than just showing, \"Here's I added this feature to the product.\" \n\nOkay, but why did we add that feature? How does that fit into the story of what these six teams are trying to build? \n\nAnd that started to then add more context, and so that it was even more targeted feedback on, \"Well, we've built this part of the story. Maybe we need to focus on this part of the story next because then we can have a holistic view of what's going on.\" \n\nIt's generally to elicit conversations. The more conversations you have, hopefully, the better the outcomes. \n\nBut that was demonstrating. Yes, it doesn't say if you are time boxed, then you can always say at the end, \"Now we covered off A, B, and C. If you want more information, you know where to find us.\" \n\nYeah, so if someone is particularly interested in, I don't know, you know, some example, then you should always have that as an open invitation. \n\nDid you find that that happened a lot? \n\nUh, yeah, but we're all on the same floor in one big building, so it wasn't difficult. People would actually come and get you immediately afterwards if you'd said something that their areas pricked up on. \n\nThey wouldn't dive deep into it then and there because they can be very expensive, but they will come and see you afterwards and say, \"You weren't going to shift this information. We actually only want a tiny amount. Could you actually prioritise that?\" \n\nThat's the sort of thing that people would say after that event. \n\nYou know, maybe even three or four scrum masters get together and try and work out exactly what we could deliver in terms of, you know, to the overall product if someone wanted to specific for some very, you know, high-value reason. \n\nSo that gets to that collecting feedback. \n\nHow are we going to collect feedback from people, especially when we're in the virtual space? \n\nBecause most of us are operating almost 100% in that virtual world, and it's even more difficult to get feedback from people. \n\nYou can't just look at the person who you know has some feedback or see it as easily on their face if they don't have their cameras on. \n\nUm, so the two types of exercises that I've done with teams are one, two, four, all right? \n\nSo have them build lists. One, two, four, all is about building lists, and it's one minute on their own creating a list, two minutes in pairs forming it in fours, and they merge those lists and then bring it back to the whole room. \n\nSo what are the ideas for what's next? \n\nUm, there's also another exercise which is made up of three parts that I've used called a what, so what, now what? \n\nRight? \n\nAnd that's quite an effective way to figure out what's next. \n\nSo I've got both of those added to the mural as suggestions to go research and look at and see if it will do. \n\nBoth of them are part of liberating structures, so you can go to the liberating structures website and see that there. \n\nUm, but, uh, what, so what, now what? I've had some really good experiences with it, not just in sprint reviews but in other areas as well. It's quite a useful technique. \n\nOh, so collecting feedback, and it's again, it's the team and the product owner who are kind of hosting that. \n\nAnd then maybe we need to review the business changes, right? \n\nMaybe this is where, uh, not only do we have the product owner and the team providing input, but we've now got to bring the stakeholders in as well. \n\nOh, well, they're providing from collecting feedback, but, um, they're talking. \n\nThey are bringing, you're saying to the stakeholders, \"What's changed in your part of the business that you think matters to what we're building?\" \n\nHas do is what you need changed? \n\nRight? \n\nBecause if you build stuff that people don't need, they're not going to provide you with feedback. \n\nThey're not going to care about what you're creating. \n\nWhat do those people need, right? \n\nAnd what do they need next? What's the most valuable thing we can do for them? \n\nAnd now what? \n\nSo what now? What can definitely work in that space as well? \n\nUm, and maybe those two activities you might roll into one, collecting feedback and business changes and having those discussions. \n\nUm, but I just wanted to be clear that we need to make sure we cover both of those topics. \n\nAnd then we need to actually review and update the product backlog. \n\nSo I would potentially crack open the product backlog, show everybody what's at the top of the product backlog, and are these still things we need? \n\nRight? \n\nSome of them might be technical needs because the team needs to do them in order for other things to happen, but we can have those conversations. \n\nI don't want a stakeholder going home fuming, \"Why am I not getting the thing I want? I thought it was more important than this other thing.\" \n\nBut actually, this other thing is a prerequisite of the thing they want. If they don't understand that, they're going to be pissed, right? \n\nBecause they're not getting their thing. \n\nI normally publish the draft, um, sprint backlog for the next sprint and maybe even do it prior to the meeting so it's actually circulated in advance. \n\nUh, that way people can turn up with a pre-prepared opinion. \n\nThat is definitely a good way to prepare people if you have that information. \n\nHave a draft of the goal. What do you think? What does your product owner think the goal is going to be for the next sprint? \n\nWhat are the things that they think in collaboration with the team are going to be part of that story? \n\nBecause they should have had those conversations during refinement. \n\nRight? \n\nOh yes, so Carlos, the one, two, four, all is you have one minute for people to write stuff down on their own, two minutes in pairs, and then you join two of the pairs together and they get four minutes in effectively two pairs and then bring it back to the whole room. \n\nAnd it's a way to get even the most introverted people part of the conversation and contributing to the story. \n\nDefinitely gets people out of their shell. You can find it on the liberating structures website. \n\nUm, but I run that, I use that judiciously in the live virtual classroom space for sure. It's a really good way to break that up and stop people feeling like meetings and events suck because it's just, you know, broadcast. \n\nIt's collaborating on what to do next. \n\nUm, and then the last thing I've got is perhaps reviewing timelines and budgets for the next release. \n\nRight? We're spending the customers' money. \n\nWe're spending the businesses' money. They kind of want to know how, how are we spending it? \n\nAnd I would rather do that in an open and transparent public space with all of the stakeholders that care about that stuff than the product owner having ten private conversations with a group of people having to justify themselves ten different times, maybe in ten different ways. \n\nRight? \n\nDon't let your product owner be browbeat, browbeaten, I think is the expression, by the stakeholders because they get them alone in a room. \n\nRight? \n\nHave these discussions open and transparent. \n\nLet's let the stakeholders browbeat each other rather than the product owner. That's the way I look at it. \n\nAnd at the end of the event, we've updated the product backlog. \n\nWe physically updated it. We've made changes to it. We've changed the order. We've added new things. We've deleted things. \n\nTo me, that sounds like quite a lot to happen in two hours. Sounds like I might struggle for time, right? \n\nSo maybe we can't cover everything every sprint review, but what's the important things to cover, especially if you've got big teams off, right? \n\nAnd that science fair model works really well where people just see the ones they care about. \n\nUh, it was a question. \n\nYeah. \n\nSo somebody's asking what happens if I don't get everything done for a piece of value? \n\nAnd I would say that piece of value is not done. \n\nAnd if you show stakeholders something that is half-finished or even 90% finished, they're not going to be happy. \n\nAnd if you try and claim that it's finished, like show them something as if it's finished, it's not really morally or ethically sound. \n\nI, we're basically saying we finished this. \n\nDon't tell them we haven't finished those four things that need to be done and we'll do them tomorrow because they might get forgotten or the world might have changed tomorrow and we need to do something different, right? \n\nAnd that thing never gets done. \n\nDon't get caught lying to your stakeholders. \n\nOpen and transparent is kind of the key there. \n\nAnd even if it's small, like, like, uh, in Magda's version, if even if it's just a little bit negative all the time, that can build up to that death of a thousand cuts for a team and end up in that spiral of negativity. \n\nUm, trying to bring it down to what's the smallest thing we can deliver. \n\nIf we feel like we're never meeting our sprint goals, we're probably taking on too much work, right? \n\nOr we've got the wrong sprint goals. Fix those things. \n\nCreate a virtuous cycle supporting the team and what it is they're trying to do, and hopefully we'll build more awesome stuff and less sucky stuff. \n\nThat's what we'd like to see. \n\nAre there any highlights? \n\nUh, maybe I want to, uh, ask about something in here. I mean, like, it's in my mind. It's, uh, like plus and minus persons because, uh, about the criticism. \n\nUh, what do you think about it? Like, uh, is the criticism is a kind of feedback through or is it just negative? \n\nSo there's constructive feedback that is negative about what it is we did. \n\nAnd then those, um, was that Carlos or Andre? \n\nAndre that was asking the question. \n\nAndre, um, that question sucks and I don't like the way you said it. \n\nOkay, that's not constructive feedback, right? \n\nRight, yeah. \n\nSo it's if you think of the scrum values, we want to be openness, right? And courage to say that things are wrong, but respectful. \n\nI don't know, we see it, and it's not respectful to have some hippo in the room saying to the team that you suck and everything you did sucks, and your products suck. \n\nYou know, that's not to create a positive response in anybody. \n\nSo part of the role of the scrum master is helping everybody interacting with the scrum team understand what interactions are helpful and what aren't as well. \n\nSo maybe if that person who's like that is going to be participating, maybe the scrum master needs to go maybe coach them and help them understand how do we create positive interactions, not negative interactions. \n\nAnd you can be critical, positive in a positive way, right? \n\nAnd it's about the way we speak to people, the language we use. It is really important, and it's culturally specific as well, right? \n\nSo what works in, when I'm teaching classes, what works in Saudi Arabia doesn't work in the UK, it doesn't work in Norway, right? \n\nSo you need to take that into account, who is attending your meeting and what is their culture, even within different companies. \n\nAnd then the last one, number four. I don't know why I ordered them in that weird way, but there we go. \n\nUh, sprint review has the highest number of participants, making it an expensive event. \n\nOkay, so this time, all of these statements are in fact true, and the sprint review is usually your most expensive event. \n\nRight? You've got two hours, you've got the scrum team, so the product owner, the developers, and the scrum master, and a whole bunch of stakeholders, business people, people who care about your product. \n\nThe most people at any time are in that event, therefore it is, by definition, the most expensive event you have. \n\nSo you want it to be valuable, right? If you're wasting people's time, you'll find that participation will decrease over time because people will stop coming back. \n\nIf you don't show people anything they care about, they're not going to come back next time, right? \n\nEven if you don't show them anything they care about, if they're not engaged and don't see anything they care about, they're definitely not coming back. \n\nSo we need to figure out how do we encourage people to participate in that event. \n\nDoes that sound reasonable for my answers? Reasonable? Anyone to disagree with anything? \n\nOh, I got a little heart pop up there. That's pretty good. \n\nUsing the tool. \n\nUsing the tools. \n\nUm, okay, so let's look at what a sprint review might look like. \n\nOkay, so I've got a couple of pieces that I want to talk about here, and then I've got some little exercises around it. \n\nSo the first piece to think about is what's the purpose of the sprint review in scrum? \n\nPeter, I know I'm putting you on the spot, but what do you think the purpose of the review is? \n\nFeedback. \n\nRight, it's part of our empirical process control system, which scrum is trying to implement. \n\nAnd empiricism just means feedback. It means look at what happened and figure out what to do differently next to make what happened better the next time around. \n\nLike that, those empirical feedback loops, inspect and adapt, all different ways of saying the same thing. \n\nSo the sprint review's outcome should be an understanding of what we are doing next. \n\nAnd in scrum, we store that information in an artifact to provide transparency called the product backlog. \n\nRight? That's where we're transparently reflecting what are we going to go do next, what's the next most important thing to do, what's coming up after that, right? \n\nThat's where we're reflecting that. \n\nSo we need to walk out of the sprint review with an updated product backlog. \n\nUh, yeah, I can put, uh, could you put the link for the mural in the chat? Just copy it from where you're talking. \n\nAnd you have one more question in the chat as well. \n\nI haven't had that. It says, can you like, what happens? So Carlos is asking what happens when the product owner is absent in the sprint review? Could you share your opinion on that, please? \n\nThat is a very good question. I am going to share it with a little story. I worked with an organization in Horton, which is about, I don't know, it's about two hours south of Oslo, I think it is. Two hours southern, one hour, two hours would train, one hour, yeah. \n\nI always went on the train, so it was two hours. \n\nUm, and I had, I worked with this team and they were very, I'm actually going to say depressed, right? They were not a happy team. \n\nUm, they had a very negative outlook on the work they were doing and what they were doing, and I was trying to figure out what the problem was. \n\nRight? So I go to the sprint, the events and see what's going on, and at the sprint review, I just asked them, I didn't see anybody new, so I was like, \"Who's the product owner?\" \n\n\"Oh, oh, that's Thor, right? He's not here.\" \n\nLike, is this, is he usually here? \n\n\"I don't know, he doesn't normally come to the sprint reviews.\" \n\nHow would you feel as a team if your product owner thought so little of the work that you were doing that they couldn't even be bothered to come and see what it was you did and how well it was done? \n\nHow would that make you feel? \n\nProbably make you feel like nobody values your work. \n\n[Music] \n\nRight? \n\nWhat are the three things that we need to feel like we can work well as from at Drive Dan Pink's book Drive? \n\nLet me remember what the three things were. \n\nIt was autonomy, mastery, and purpose. \n\nWith the three intrinsic motivations, once you get money off the table, when we're not worried about putting a roof over our head, autonomy, mastery, and purpose. \n\nWe want to feel like we're in control of the work we do, right? \n\nSo scrum facilitates that with our self-organising teams selecting the work at sprint planning. \n\nWe want to feel like we're good at our job, right? That we're learning more things, mastery of our profession, right? \n\nAnd that manifests both in professional scrum, right? We're doing that part well, but also engineering excellence. \n\nIf you're a software team, you know, are we doing DevOps practices? Are we getting value from our product? Are we continually shipping it to production? Are we always increasing quality? Are we learning from each other? \n\nThat's that mastery. \n\nAnd then purpose. Are we building stuff that matters? \n\nDo we feel like the stuff we build matters to other people? Because otherwise, why do I get out of bed in the morning if what I do doesn't matter? \n\nOkay, well, I won't do it then, and we'll have the same outcome. \n\nSo how do you create that purpose for people? \n\nAnd the product owner turning up to the sprint review is probably one of the first steps. \n\nIf you can't get the product owner in, you probably can't get the stakeholders in either. \n\nAnd isn't he supposed to get them in at least on the, that's one of his jobs as well, to get them together to showcase what's happening? \n\nAnd part of the problem I found for this team was that the product owner also wasn't doing the product backlog. \n\nTherefore, the team was building stuff that the product owner didn't care about because the product owner didn't care what they were working on enough to go update the product backlog and tell them what to work on. \n\nRight? \n\nSo it was one of those vicious cycles of spiralling down to mediocrity. \n\nAnd the question is, what was he actually doing to have the title product owner? \n\nSounds like he was not doing anything. \n\nSo, but this is where we get to that difference between do I have the job title of product owner or am I fulfilling the accountabilities of being a product owner? \n\nAnd I don't really care about the job title part. You can be called a delivery manager, you can be called a product manager, you can be called a project manager, right? \n\nI don't care what your job title is. \n\nBut somebody needs to take the accountabilities of the product owner, um, which is making sure that there's a clear, transparent product backlog that reflects transparency of the future that, um, everybody on the team and the stakeholders understand what those things are and then actively managing that going forward into the future. \n\nSo if those things aren't happening, that's where I would look. Who's supposed to be doing that? \n\nSo another question in the chat there. How do you get outcomes from the user? \n\nCould you recommend some tips? \n\nNow, I'm not sure I understand outcomes from the user, so maybe you need to explain a little bit better, but I think I might answer that question as we go through. \n\nOkay, how do we get feedback from the user maybe? \n\nUm, or maybe it could also be that you're asking how do we know what the outcome's supposed to be rather than just being given solutions, which quite often users try and give us solutions. \n\nSo I'm not sure what you mean there, Carlos. \n\nAndre is asking an interesting question as well. \n\nBut can the scrum master be asked to back up the product owner in their absence? \n\nRight? \n\nAnd I would ask the question, if a product owner is doing their job right, they are taking those accountabilities, then they should be knowing what's happening in the marketplace, what's happening inside of the business. \n\nUh, they have relationships and manage relationships with stakeholders, whether difficult stakeholders, negative stakeholders, they still need to manage those relationships. \n\nAnd they take all of that information of what the team wants to do, what the technical realities of the product is, what the business needs are, what the commercial realities are, and they funnel all of that information into here's what we're going to do next. \n\nI'm not sure that I have often seen scrum masters that have the knowledge and skills to do that, right? \n\nSo it's like in a different set of experiences. \n\nI'm not saying it can't happen, right? \n\nBut I would probably prefer a business analyst to be back up for the PO because they're going to have a better understanding of what the business needs than the scrum master might have. \n\nOr maybe the scrum master is your business analyst, in which case maybe yes, right? \n\nThere's no real rule around that. \n\nAh, so Carlos is asking how do we measure the outcomes? \n\nUm, let me kind of, let me put a pin in that and you ask that in a little bit, okay? \n\nUm, because I think we might get to that. \n\nUm, so what do you think we need going into a sprint review? \n\nWhat's, what's, I mentioned a couple of things as part of this funnel, right? \n\nOne of the things that the product owner needs to bring into that story in order to be able to review, discover, and rearrange the product backlog to reflect transparency in the future. \n\nWhat should we show? What should we have on here? \n\nYou have the sprint goal from the last sprint, so that's what you should be measuring yourself against. \n\nBecause maybe we're measuring our, yep, we are likely measuring ourselves against did we achieve the thing that we committed to? \n\nYeah. \n\nWhat else is important in this product strategy? \n\nGiving us the direction where we want to go so we can align flex strategy. \n\nYeah, absolutely. What's our overall strategy? \n\nI would suggest that might be a combination of the product vision and maybe the current product goal, right? \n\nBut maybe there's more information there, so I'm happy to put all of those things on the list. \n\nThere's probably useful information. \n\nWhat else? \n\nRemember, your product owner is spending the money. \n\nThey're deciding what we're going to go work on. \n\nSo what do we need to discuss in order to try and be as right as possible at this point in time in what we're building next? \n\nSo the value of the product backlog items. \n\nYeah. \n\nThe value contained within the product backlog. \n\nWhat about we just did this two weeks ago? \n\nLet's say we're doing two-week sprints. \n\nWe just, we're doing two-week sprints two weeks ago. \n\nUm, what's changed in the last two weeks? \n\nYou've discovered more. \n\nAce or later wants you to inspect the outcome in the chat. \n\nYeah, so the, the, I'm, what is the outcome? What's the result of all of our work? \n\nThe increment. \n\nYeah, we need to inspect the increment. \n\nThe product has changed in the last two weeks. \n\nMaybe that means some of the stuff that's on our backlog we don't need. \n\nMaybe that means that there's other stuff we do need because of whatever we built. \n\nRight? \n\nBut there's also changes in the business, right? \n\nWhat's happened in the business in the last two weeks? \n\nIs their needs and desires exactly the same as they were two weeks ago? \n\nIsn't that part of just having the backlog always ordered according to what's required or what's the changing tide in the business? \n\nSo this is the moment where we have all of those stakeholders as well as the team together. \n\nSo you mean more reordering the backlog based on what has changed, not because if there's a change for it, because otherwise I would expect that to be always present in order backlog. \n\nSo maybe there's a change that the product owner knows about, but maybe there's a change that they don't. \n\nYeah. \n\nWhat's happened in the business? \n\nAnd then perhaps market changes. \n\nIf you're building a commercial product, what's, what have competitors been doing? \n\nRight? \n\nMaybe that's going to impact how our priorities have changed, right? \n\nWhat do you think happened in the sprint first sprint review at the Microsoft Teams when lockdown happened? \n\nRight? \n\nWe need the world's changed. \n\nWe need to throw out this backlog and what do we need now? \n\nWhat's the most important thing we can do to help solve our users' problems now, which might be completely different from two weeks ago, right? \n\nI would argue that is a massive change that you don't want to wait for the sprint reviews. \n\nI would definitely agree. \n\nProbably it requires a special session and something bigger happen. \n\nYeah. \n\nI used a massive example, which definitely I would agree or would probably have some special things happening. \n\nUm, but what's happening in the market? \n\nWhat competitors are releasing? \n\nMaybe they've released a feature that means that users are starting to gravitate towards your competitors rather than your product. \n\nHow do you get ahead of that? \n\nHeaded off and do that. \n\nSo we're going to take all of that information, present it in some way, and bring it into everybody's consciousness, their frontal lobe, so we can noodle on it and have discussions about it. \n\nSo we don't just need stakeholders, but we need the right stakeholders for the conversations that we need to have. \n\nSo you're right, the product owner probably needs to have some understanding of what do I want to discuss walking into the sprint review so I can invite some of the right stakeholders. \n\nRight? \n\nSome stakeholders are going to come every sprint because you're building stuff they care about, so they want to provide you with feedback. \n\nSo stakeholders is kind of a catch-all word that they use in scrum, which just means anybody who cares about the outcomes that the team's working on. \n\nRight? \n\nSo they could be users, could be business people, could be purchasers, could be anybody. \n\nI worked with a company in the UK, and they ended up having to, they had one of those, um, like all hands meeting rooms in their company headquarters, and they would fill that for a sprint review. \n\nThey'd be hard pushed to fit the hundred people that turned up to see their sprint reviews. \n\nRight? \n\nBut it took them months of what do you really want? \n\nAnd once you start building things that people want, they'll want to come and provide you with feedback. \n\nRight? \n\nThey don't want to provide you feedback on stuff they don't care about. \n\nSo maybe share the goal, and then does everybody remember what the sprint goal was last sprint? \n\nPerhaps not, so we need to share that as well, and again that would be the product owner sharing that. \n\nAnd then maybe in some way we want to demonstrate the working software. \n\nWho's best placed to demonstrate the working software? \n\nWith the team, wouldn't it? \n\nThey're the ones who just built it. \n\nThey should be able to explain to the stakeholders what it is they've done and why it matters to the stakeholders. \n\nWe're building value after all, not features. \n\nRight? \n\nNobody really cares about user stories and features; they care about value. \n\nWhat do I get from what you've just added? Tell some stories. \n\nRight? \n\nThat's the way I, I, I, storytelling is the best way to do that. \n\nUm, so there's a number of techniques that I've seen work really well in demonstrating the software, um, depending on how many, if you've just got one team, right, doing a presentation, maybe they just present, \"Here's what we changed,\" right? \n\nIf you've got ten teams, that might take too much time. \n\nSo, uh, maybe you need something that looks more like, uh, have you seen in those American movies when the kids have their science fair at the school? \n\nAnd you've got a bunch of stations, each presenting a different thing, and people go to the things they care about? \n\nThat's the science fair model, and that can be implemented virtually as well with breakout rooms, and there's various techniques for that. \n\nUm, but doing that might be good. \n\nUh, doing some kind of shift and share if you've got a lot of stakeholders. \n\nShift and share is when you send people out to breakout rooms, and each breakout room is a particular feature or part of the product that one of the teams has been working on, and then you have the attendees move to the next room, the next room, the next room. \n\nUh, in order to facilitate that, I've done that one in Teams, um, and it works in Zoom as well. \n\nBut how many teams should a sprint review have? Shouldn't it be per team kind or rent review per product? \n\nSo if you have ten teams working on one product, you show one unified working increment to the stakeholders because you've only got one product. \n\nSo we're doing a review of the increment, and we have one increment. \n\nWe don't, ten teams working on the same product don't create ten different increments because then that's not integrated together. \n\nTherefore, it wouldn't meet a definition of done. \n\nAnd that sounds good. \n\nSo what a lot of teams do, or what a lot of product management does, is they create some kind of alignment in their product to minimize the number of people that are part of each of these stories. \n\nRight? \n\nSo if you look at the way, and the example I always use examples from the Azure DevOps team because I've been working with them for a long time, but they all over the part of the eight years of their transition towards agility was they shifted their product from one big ball of string, right, to almost like verticals of here's a, and it's now called Azure Boards, right? \n\nThe graphical representation of the work that you're doing. \n\nSo there's one product owner for one product, and then that product owner maybe has two or three teams working for them, and those two or three teams are contributing to that single unified product. \n\nSo you have one backlog, one product owner, one maybe one sprint planning or like a pre-planning and one sprint review. \n\nYeah, but would you do one sprint review for all five products in that? \n\nIf I had five products, different products, I would maybe have five different reviews. \n\nYes. \n\nYeah, but your Azure DevOps is now becoming a mixed sample or mixed example because now they're five different products, which each of them, so at the small scale, right, there is only one right answer: one product, one product backlog, one product owner. \n\nRight? \n\nBut once you scale up to larger interconnected systems, maybe some of those systems are their own products that can be shaped on their own. \n\nBut I would suggest if it ships together, it needs to be reviewed together. \n\nRight? \n\nSo if you have a product where you're breaking it up by component rather than by vertical value streams, then you probably need, you probably forced into the larger review where you've got one bigger product. \n\nAnd now when you do have a much larger review, something the Azure DevOps team did do was prior to their sprint review, every team would create a video to present the demo of what it was they created and send that out to everybody. \n\nSo it's been my experience for the big projects or big programmes to do one demo for the whole project product, however you want to describe it. \n\nUm, and at one level, you could say, \"Well, I was looking after data migration. Did I really care that much about the user experience at the other end of the data flow?\" \n\nBut it was still useful to hear someone say, \"What we want to see next sprint is we want to see the events.\" \n\nSo then that would actually inform me why people were then chasing me to migrate events from the database through the entire value chain. \n\nSo even though I normally didn't care, it actually provided me and my team with some useful feedback. \n\nUm, they, we can't load this data, whatever x, y, and z data, so we're not going to display in the UX for another couple of weeks. \n\nSo that would inform the guys at the other end of the flow, \"Well, let's not plan any work around trying to get that data in because the migration team aren't going to get it to us for a few sprints.\" \n\nSo it is useful for everyone to hear at least five or ten minutes what everyone else is trying to achieve. \n\nYeah, the other teams are also stakeholders to your input or output. \n\nMaybe some of those teams are providing output that is your input, right? \n\nAnd maybe you're providing output that is their input. They're blocked from delivering some features until you've got something there for them. \n\nRight? \n\nSo it's that whole context that is important in the demonstration. \n\nAnd so I do agree that there are scale issues, and you have to figure out what practices work. \n\nUh, the Nexus framework, which is scrum.org's scaling framework, encourages having a single sprint review, but it does talk about it being for up to nine to ten teams working together. \n\nIf you get more than that, you probably want to spread it into, I think they have a, I can't remember what the phrase is, but it's Nexus of Nexus. \n\nRight? You might have multiple nexi, uh, that roll up to a single product. \n\nIt's just more complicated, and the example that I think sits well with what you're talking about over is I think about the Office team, right? \n\nThe Office team, SharePoint is not really that dependent upon Word, but Word exists also as a separate app but also inside of SharePoint. \n\nSo maybe there is a lot of crossover, um, but they've got nine hundred people-ish working on that product. \n\nUm, so how might they organise that to be, to get the information to the people that need it, the feedback from the people that need to provide that feedback? \n\nUm, it's figuring out what works at scale. \n\nThere are no hard rules at scale; there's so many different options there. \n\nYeah, I'm just seeing some, you said it was up to four hours. \n\nYeah, I know it's just a number, but up to four hours for a one-month sprint, and you should be able to fill it. \n\nBut then if you are done, three teams, are you at twelve hours then? \n\nNo, it's still one sprint. \n\nSo what I've seen work, and actually what one of the teams that Peter was working with, um, they had a tight time box inside the sprint. \n\nMaybe each day, I think there were six teams, and maybe each team gets seven minutes to show their stuff, or maybe it was only five minutes to show their stuff. \n\nUh, I, I, so you're definitely bringing it down a little bit, but what I found valuable was once they got into our cadence of having those discussions about how do we fit all six teams inside of this sprint review, they started talking about telling a story rather than just showing, \"Here's I added this feature to the product.\" \n\nOkay, but why did we add that feature? How does that fit into the story of what these six teams are trying to build? \n\nAnd that started to then add more context, and so that it was even more targeted feedback on, \"Well, we've built this part of the story. Maybe we need to focus on this part of the story next because then we can have a holistic view of what's going on.\" \n\nIt's generally to elicit conversations. The more conversations you have, hopefully, the better the outcomes. \n\nBut that was demonstrating. Yes, it doesn't say if you are time boxed, then you can always say at the end, \"Now we covered off A, B, and C. If you want more information, you know where to find us.\" \n\nYeah, so if someone is particularly interested in, I don't know, you know, some example, then you should always have that as an open invitation. \n\nDid you find that that happened a lot? \n\nUh, yeah, but we're all on the same floor in one big building, so it wasn't difficult. People would actually come and get you immediately afterwards if you'd said something that their areas pricked up on. \n\nThey wouldn't dive deep into it then and there because they can be very expensive, but they will come and see you afterwards and say, \"You weren't going to shift this information. We actually only want a tiny amount. Could you actually prioritise that?\" \n\nThat's the sort of thing that people would say after that event. \n\nYou know, maybe even three or four scrum masters get together and try and work out exactly what we could deliver in terms of, you know, to the overall product if someone wanted to specific for some very, you know, high-value reason. \n\nSo that gets to that collecting feedback. \n\nHow are we going to collect feedback from people, especially when we're in the virtual space? \n\nBecause most of us are operating almost 100% in that virtual world, and it's even more difficult to get feedback from people. \n\nYou can't just look at the person who you know has some feedback or see it as easily on their face if they don't have their cameras on. \n\nUm, so the two types of exercises that I've done with teams are one, two, four, all right? \n\nSo have them build lists. One, two, four, all is about building lists, and it's one minute on their own creating a list, two minutes in pairs forming it in fours, and they merge those lists and then bring it back to the whole room. \n\nSo what are the ideas for what's next? \n\nUm, there's also another exercise which is made up of three parts that I've used called a what, so what, now what? \n\nRight? \n\nAnd that's quite an effective way to figure out what's next. \n\nSo I've got both of those added to the mural as suggestions to go research and look at and see if it will do. \n\nBoth of them are part of liberating structures, so you can go to the liberating structures website and see that there. \n\nUm, but, uh, what, so what, now what? I've had some really good experiences with it, not just in sprint reviews but in other areas as well. It's quite a useful technique. \n\nOh, so collecting feedback, and it's again, it's the team and the product owner who are kind of hosting that. \n\nAnd then maybe we need to review the business changes, right? \n\nMaybe this is where, uh, not only do we have the product owner and the team providing input, but we've now got to bring the stakeholders in as well. \n\nOh, well, they're providing from collecting feedback, but, um, they're talking. \n\nThey are bringing, you're saying to the stakeholders, \"What's changed in your part of the business that you think matters to what we're building?\" \n\nHas do is what you need changed? \n\nRight? \n\nBecause if you build stuff that people don't need, they're not going to provide you with feedback. \n\nThey're not going to care about what you're creating. \n\nWhat do those people need, right? \n\nAnd what do they need next? What's the most valuable thing we can do for them? \n\nAnd now what? \n\nSo what now? What can definitely work in that space as well? \n\nUm, and maybe those two activities you might roll into one, collecting feedback and business changes and having those discussions. \n\nUm, but I just wanted to be clear that we need to make sure we cover both of those topics. \n\nAnd then we need to actually review and update the product backlog. \n\nSo I would potentially crack open the product backlog, show everybody what's at the top of the product backlog, and are these still things we need? \n\nRight? \n\nSome of them might be technical needs because the team needs to do them in order for other things to happen, but we can have those conversations. \n\nI don't want a stakeholder going home fuming, \"Why am I not getting the thing I want? I thought it was more important than this other thing.\" \n\nBut actually, this other thing is a prerequisite of the thing they want. If they don't understand that, they're going to be pissed, right? \n\nBecause they're not getting their thing. \n\nI normally publish the draft, um, sprint backlog for the next sprint and maybe even do it prior to the meeting so it's actually circulated in advance. \n\nUh, that way people can turn up with a pre-prepared opinion. \n\nThat is definitely a good way to prepare people if you have that information. \n\nHave a draft of the goal. What do you think? What does your product owner think the goal is going to be for the next sprint? \n\nWhat are the things that they think in collaboration with the team are going to be part of that story? \n\nBecause they should have had those conversations during refinement. \n\nRight? \n\nOh yes, so Carlos, the one, two, four, all is you have one minute for people to write stuff down on their own, two minutes in pairs, and then you join two of the pairs together and they get four minutes in effectively two pairs and then bring it back to the whole room. \n\nAnd it's a way to get even the most introverted people part of the conversation and contributing to the story. \n\nDefinitely gets people out of their shell. You can find it on the liberating structures website. \n\nUm, but I run that, I use that judiciously in the live virtual classroom space for sure. It's a really good way to break that up and stop"
  },
  {
    "Title": "Embracing Change: Why Agile Evolution is the Key to Thriving in a Rapidly Shifting World",
    "Description": "Explores why continuous organisational evolution, not fixed transformations, is essential for adapting to rapid change, fostering agility, and enabling sustainable growth.",
    "ResourceId": "p9OhFJ5Ojy4",
    "Url": "https://www.youtube.com/watch?v=p9OhFJ5Ojy4",
    "Date": "2020-07-22T10:08:06Z",
    "Captions": "Oh hi, my name is Martin Hinchelwood. I'm the owner at Naked Agility. I'm a professional Scrum trainer with Scrum.org. I'm a Microsoft MVP and I've been delivering software for about 20 years and working in organizational change for more than 10 years.\n\nI'd like to thank Akaditi and Nana for the opportunity to talk to you about the inevitability of change. I speak often in Ghana. I love coming to Ghana and I have done a lot of training and consulting there with Akaditi. I was looking forward to being in Nigeria, but obviously that is not the case. But this is second best for sure, getting to meet all of you and interact at this level.\n\nSo please feel free to ask any questions in the chat and I'll hopefully have time to answer them all at the end. Hopefully Akaditi will moderate those for me. Failing that, you can ask me any questions on Twitter as well, and obviously LinkedIn. I have a whole bunch of webcasts over on NakedAgility.tv that I've recorded previously. I'm sure Akaditi are going to be publishing all of their recordings later and I'll be providing a link to the presentation in the presentation at the end. The final slide has a link and a QR code to get you access to the presentation.\n\nSomething that I've been considering for quite a while is that there's really no such thing as an agile transformation, a digital transformation, DevOps transformation, or any other transformation in business that you can think of or that you might have been sold. You can't buy agility and you certainly can't install it. There's no end states, no optimal outcome, and certainly no best practices, only adequate practices for the situation at hand.\n\nSo instead, you have to grow and nurture and prune agility as it grows inside your organization, and eventually you too will be able to take advantage of business opportunities as they arise in whatever changing marketplace that you're in. This is continuous change; it's an evolution, not a transformation.\n\nIt's easy to see if you think of the evolution, sorry, the transformation of a caterpillar that transforms into a butterfly. It has a beginning state and it has an end state, and in between it has a transformational state. It starts in one place and it finishes at the end. But evolution is a constant and continuous set of experiments. The successful experiments succeed and do well in a particular niche. The unsuccessful ones fail and die. The same is true with companies and organizations.\n\nIn the past, the ebb and flow of niches in the business world was very slow. Niches that we could take advantage of existed for a long period of time. Look at the length of time that the coal industry has been around or the oil industry, and there are many of those types of niches that were there for a long, long time, tens if not hundreds of years. We could grow our organization to fit into that niche slowly, and once we owned that niche, it was very hard for competitors to come in and disrupt our abilities; we owned that space.\n\nToday, however, niches grow and change much faster than ever before. My belief is that it's due to the new flow of information. The internet has made things a lot faster. We find out things quicker. We have a feeling that we need to do something with this information much more quickly. And as it gets faster, we need to react faster, and thus a virtuous cycle of increasing change perpetuates. However, for now, organizations only change when they are in danger. Fight or flight kicks in and they either adapt to the changing environment or maybe they die. That's the way it's kind of always been, but very, very slowly.\n\nAsk yourself if your organization or organizations you can think of that you interact with would have survived COVID-19 20 years ago. Think of the technology that we had 20 years ago. The average worldwide internet connection speed 20 years ago was 56 kilobits per second. You wouldn't have been able to do video conferencing. We wouldn't have been able to run this conference. What about 10 years ago? Was the technology even there 10 years ago to solve some of these problems and allow many organizations to continue with very little disruption?\n\nThe big tech organizations that were mentioned earlier, like Google and Microsoft, have had very little disruption. Any organization that has people sitting in an office doing work shouldn't need to be disrupted in the way they potentially were because they weren't relying or they didn't have the new technologies that have become available in the last 20 years. If you did have those technologies but you put them in maybe five, ten years ago, you probably relied on VPN. So suddenly, instead of having a few employees connecting into your network to then access everything, you had all of your employees trying to connect in and access everything, and most organizations' VPNs couldn't cope with that number of users. They expected a small number of users to be connected at any one time rather than everybody in the company connected all day.\n\nBut if you had already adopted many of those cloud technologies that are available, like the one we're using now at Microsoft Teams, it is all set up in the cloud. All of you are connecting not into Akaditi's offices but directly to Microsoft servers in the cloud in order to take advantage of all of your internet connections rather than be restricted by one single point of failure. And how many of those organizations made that change? So if you've been able to utilize the cloud, if you've already moved your services online, then there was very little disruption. Employees working from home probably got faster connections than the connections they got in the office because they're using their home connection that they own the whole bandwidth rather than the office bandwidth that they're sharing with all of their colleagues.\n\nIf you had changed, if you had adopted new things as they became available, I often hear the phrase, \"If it isn't broke, don't fix it.\" But I think that is a very outmoded and old phrase for today. Today, I would much prefer to hear, \"If it isn't broken, you're not pushing change fast enough. You're not trying new things. You're not experimenting.\" Evolution is about embracing failure and learning from it. It's okay to fail; we do it all the time. But if we learn from it, we pick ourselves back up and figure out how to do things a little bit better because success is the result of continuous experimentation at a sustainable pace that enables you to take advantage of whatever business opportunities occur as they arise. This is the inevitability of change.\n\nOur current way of working, the management practices that I and my colleagues see as prevalent in the world, I'm not going to say that everybody is using these management practices, but the vast majority of people are still using management practices that were developed 130 years ago during the industrial revolution. They were created in an environment of very low change. Things weren't moving fast at the time. We didn't have the communication levels that we have now, and those practices were able to support those systems of the time. But they're no longer able to keep up with the constant evolution of now.\n\nPrior to the industrial revolution, manufacturing took place at or near your home in small workshops. You might imagine a cobbler making shoes in a village. His compensation came through earned value that was based on how well he made the shoes and how well they fitted the needs of the customer. He understood who his customer was. \n\nSo again, please don't use the mute all button; otherwise, you will mute the speaker. If you look through the list of participants, you will see people flashing that are making a lot of noise, and you can click on them and mute them individually. \n\nWe didn't mute you; maybe she couldn't hear you, but we could hear you. Sorry, oh okay, perfect. Now I've forgotten where I was. We were talking about the cobbler in the village, weren't we? Because he understood who his customers were. He probably engaged with them a lot more often than we engage with our customers. He probably met with them for a drink in the pub. The local policeman, the farmer, they're going to drink, and they're going to have this person right next to them who made the shoes on their feet that they walk about in every day, and they can complain. They can say what they liked and what they didn't. It's a very powerful way to work, and there was purpose to his work. He could see and engage with his customer and get that purpose. \n\nAnd because he had that purpose, it also enabled mastery. Think about the master and apprentice system that operated at that time, and you would have the not the great wealth of knowledge that the long beard had created over many years of being a cobbler, and they would pass it on to the next person down the line. \n\nWhether that is just out of interest, I have a lot of background noise here. Is it okay for you? We can't hear it. Awesome, I'm using that crisper thing, so it's deleting. All I hear is a lawnmower outside my window. \n\nBut I'm glad you can't hear it. So that mastery, that master and apprentice system passing knowledge down through the generations, people chose to work hard and well in order to get better at what they did. So that getting better at what they did, becoming a master, either manifested itself as increased wealth or greater time to pursue other interests that they have, whether that be drinking in the pub or whatever other things they like doing.\n\nSo during the industrial revolution, a big change happened in the way we work and the way we do things. The industrial revolution changed the world forever. We've already had a show talking about it earlier. We needed to scale up really quickly, but the technology of the time couldn't build the quantity of goods required without human help. We needed to mechanise the workforce. We turned people's jobs into robotic jobs. Workers no longer had a purpose beyond the paycheck and neither understood the value of the customers and didn't have any mastery. People became replaceable cogs in a machine. \n\nThink about that modern, even today, management practice where it's okay. We don't need to help and support our workers because if somebody quits, there's 10 people waiting at the door that can go do that job. That's for unskilled labour. If you have somebody who's solving problems with their brain, then that's not good enough. You're losing a lot more than just an individual; you're losing a lot more than just a cog in the system.\n\nSo I would say, what's the difference between these two pictures? On the left, we have the master passing a wealth of knowledge on to the apprentice. They understand the whole context of the product they're building. They understand who their customer is and how they're using the product, what their job is, what they do day to day, and the customer has direct access to the people that are making the product. \n\nAnd on the right, we have a bunch of factory workers making something. I actually don't know what they're making. I'm pretty sure you would not be able to figure out what they're making. It's a round thing with some pins in it, and there's lots of people doing the same thing. Do they even know what it's for? Do they even care? Does that even matter? Maybe it doesn't. \n\nAnd the thing that happens when you're doing that kind of mind-numbing work, the example I always use is if you might have read a book called Charlie and the Chocolate Factory by Roald Dahl. In that book, Charlie's dad lost his job at a factory, and his job was screwing the top on toothpaste bottles. That was his job day in and day out, and he was replaced by a robot. He's just a replaceable cog; he's a machine waiting for robots to happen.\n\nSo because people were disengaging from the process, there's this idea, and they had a name for it at the time. It was called soldiering, which is not the soldiering that we know today, but it was this idea of somebody working more slowly than their capacity. They're deliberately working more slowly than their capacity. You might use the phrase to loaf, or that depends on your cultural background whether those words have meaning. But that's just to work more slowly than one's capacity, to lay about not doing much, try and avoid doing the work, going in hiding around the corner from where the supervisor is because you want to have a cheeky extra cigarette break.\n\nSo I want you to imagine that you are a management consultant around at the time of the 1890s. Now I have a link that I'm going to put in the chat, which might make this a little bit easier, so I'm going to put it in the chat. Can everybody see my slide? Oh yes, you can see my slides. One person was saying they can't see my slides. They are displaying, so it might be a computer network issue. I've put a link in the chat. It would be awesome if everybody could click that link.\n\nAnd they will go to a tool called Mural. This is a web-based stickies on a wall post-it system. I don't see anybody coming in yet. I can see when you're coming in because I'm going to give you an activity in a few minutes. You can use the link that's on screen, so that's nkd agility.net forward slash soldiering 1980, capital S, and that will take you into the mural. Has anybody been able to do that? \n\nNo, no, this includes you as well. It doesn't look like anybody's joining. Maybe we do it over the chat then instead. I'm just on it. Awesome. I will give you another few minutes to figure it out. I see one person in. I see Adi. He actually has an account for this system. It is just fine to join as a guest to click the visitor and come in that way. So I see there's two people in. We need more people. So I want everybody to click that link in the chat and open up at this lovely mural and go in there. I only have two. Come on, we need more. \n\nWe need you to, this is not just a presentation; we need you to engage in the process. We need to come up with some ideas because I've hired you. I'm the owner of a paper mill, and I've hired you to help me come up with some ideas to defeat this loafing and malingering workforce that I have. They're all laying about; they're trying to avoid doing work. They don't want to do anything, so we need to figure out how we're going to deal with this.\n\nSo I'd like you to use this mural, and if you double-click anywhere on the mural, it will create a post-it. I'm going to create one now for those that are in there already so they can see. Create a little post-it, and you can type in your idea. So what I would like you to do is create as many ideas as you can think of for dealing with these loafing and malingering employees. We're management consultants. You're management consultants, and you need to help me deal with this problem. What are your suggestions going to be?\n\nSo I'm going to put two minutes on the clock. So I'm going to give you two minutes from now. The timer has started to go and add as many ideas as you can. So all you do is double-click anywhere on the page. It will create a little post-it. Yes, you can create multiple different colours. Some people are overachieving and typing in that post-it your idea for solving this problem. And I want you to think like it's 1880. \n\nOkay, so it's not 2020; it's 1880. So you don't have to be politically correct. Think that like you're in the 1800s. Yes, thank you, Arthur. So anybody who is, you'll be able to see what's going on even if you don't want to participate by clicking the link, and you'll be able to see the mural and zoom in and zoom out. \n\nWe have a few suggestions already, not many, but it's doing good. So we've got dock their pay, sack them. You know, if they're not going fast enough, let's sack them. Cut their break times because they're not working fast enough. We're not getting enough widgets, therefore we're not making enough paper. So you're going to have to have shorter breaks; you're going to have to work longer time. We're going to have to do some overtime. If you don't look like you're performing, we're just going to sack you. \n\nWhat else are we going to do? Close the toilets. Adi, I don't think that's going to work. We're going to end up with a very smelly factory floor. Punish the slow ones. How might you punish the slow ones? Or how might you create incentives to have people work faster or harder? Food reduction. Oh, that's mean. That's mean. It's not going as mean as it has done in the past. \n\nWhat things happened in the 1800s? Chinese conscripts building the railroads in the US. I'm sure they didn't get paid well. What else was happening in the 1800s? Humiliate them, send them to Australia. Yeah, everything's trying to kill you in Australia. Sack them, punish them, make them join the army. \n\nOkay, so we've got a few suggestions. The time is up. Thank you very much for your participation. I will just quickly move this over to the other views so that everybody else can see and for the recording at what was created. These are our interesting ideas. So punishing the slow ones, cutting their breaks, making them work overtime, docking their pay, sacking them. They're not doing enough work. \n\nI have run this exercise with many, many people in the room, and just to give a little example of what sort of ideas have been created in the past, time off after deliveries, tapping into personal motivation, decreasing lunchtime, so we saw that already. Employee of the week, you know, some kind of bonus for being the best person this week. Discipline. \n\nWell, I don't know if you see on the right there, there's armed guards, enforcers, threat of imminent death, large amounts of screaming, those whips, and there's also free beer. So you can see there can be a lot of different ways that you might come up with to solve this problem. \n\nAnd really, there was no holds barred in the 1800s. There were very few things that were out of bounds for you as a company owner on what you were able to do to your employees. Very few rules. So kind of a little bit open. So what really happened? Well, the thought leaders at the time, the main thought leader was a gentleman called Frederick Winston Taylor, and he coined this particular phrase. I'm going to read it out because I think it's very important. \n\nHardly a competent worker can be found who does not devote a considerable amount of time studying just how slowly they can work and still convince their employer that they're going at a good pace. This for me has been the fundamental basis upon which most modern management practices have been built. We don't trust people; they're going to do a bad job. They're going to try and get out of doing the work, so we have to control them. That's the founding basis of these management practices, and it was true at the time. \n\nWe had disconnected workers who didn't care about the work, but if you want people to care about the work, maybe we need to do things a little bit differently. So this phrase became the foundation upon which traditional management practices have been built. And he created something called the scientific management method. \n\nAnd all of the, you put some of these ideas on the mural. I see some folks are still looking around on the other ideas that are in there. But let's develop some standard methods for performing each job, so we're going to train the workers in those standard methods. So that was on the list. And we might divide workers into appropriate ability-based groups. So the people that make widget A will put all of them together, and the people that make widget B, because then we can just control them separately. \n\nWe're going to create incentives for increased output. There were a number of incentives that you had on the list. Over time, I'll pay them badly. Let me flip back over to the ideas that you created. Make them work overtime, cut their breaks, dock their pay, sack, threaten, sack them, or just threaten them with sacking. Humiliate them, punish the slow ones. These are all things that are creating incentives. \n\nBut we need to plan their work. We don't want them to think. We want to plan all of the things that we're going to do. I'm sure in some of those statements you might see some of the things in your current management practices, maybe in your organization. Maybe some of these are things that you've been doing. That's entirely possible. These are practices that are ingrained in the way we work. They're part of our bureaucracies, and we're going to talk about why we need to change them in just a moment.\n\nAfter Taylor was another fellow called Henry Gantt. Yes, that Gantt. And he built on those Tayloristic ideas and used scientific analysis to improve the efficiency in the industry. Remember, we're mechanising people. People are just robots; they're just widgets. It's unskilled labour. We can train anybody to do these jobs in the factory. \n\nSo they created the task and bonus system. They created a basic wage based on expected low performance, and then you get a bonus for exceeding the expectations. And maybe we should bonus the managers for motivating their staff to exceed that proficiency. So let's find all the bullies, make the managers. \n\nAt the time, today there are many types of managers around. I've worked with some awesome managers that have to work within this system of traditional management practices, and they do things a little bit differently and use it to their advantage. I'm not saying I'm not painting every manager with the same evil stick, but there are certainly many evil managers out there. The system allows that to happen.\n\nI would like you to also think about the traditional classroom in schools. Create a picture in your head of maybe the classroom you grew up with. But the traditional classroom view that you see in schools, everybody sits in rows. Everybody has to do the same thing at the same time. No talking, rewards for fulfilled tasks, and incentive-based learning. That sounds like a factory floor to me. \n\nThe school system, the modern school system, was designed to train people with just the information they need to work in factories. Now it's changed over the years, and there are good teachers and there are bad teachers, but that's the fundamental basis upon which the system has been built. So traditional management practices focus on output, not outcomes. \n\nTraditional management theory comes from these turn-of-the-century manufacturing ideas that came about during the industrial revolution that had that emphasis on output. It was what they needed at the time; they needed output. And in that system, you measure efficiency by how many outputs you get by given input. That's the only measure that really matters.\n\nSo these ideas were formulated by an organization called Harvard Graduate School, and this is their first-ever graduating MBA class in 1908. That's a very long time ago, and these were, it was Harvard, so these were the wealthy leaders or the children of the wealthy leaders of the time, and they flocked to organizations around the world. \n\nThese Tayloristic practices, these traditional management practices, spread all over the world. That's kind of where we ended up. And then in the 1950s, a new way of this new way of working emerged where we're going to divide the workforce into specific skills, create things sequentially, so in a particular order, tell them how to do their work, encourage them to specialize in just one thing, and then reward them based on individual output. That sounds a little bit familiar. \n\nIt's just the next phase of that idea. This was the birth of sequential working, where you complete your stage and then pass it on to the next department. Marketing markets the deal, sales clinches the deal, contracts codifies the deal, business analysts document the deal, the makers, maybe coders, build the deal, could be manufacturing, could be anything. Testers test the deal, and then operations deploys and runs the deal, whatever those things are. \n\nThey don't need to understand anything outside of their little box of operations or marketing or sales or contracts or whatever those things are. The US military complex came along, and they became the largest purchaser of services and goods in the world. For those that don't know, the US military today has a budget of 850 billion dollars every year and has 2.8 million employees. So that's not including contractors; it's not including consultants, all of those things, all of their vendors. \n\nAnd they became this largest purchaser because of that focus of trying to defeat communism after the Second World War. The US turned towards the Russians, and they created a bunch of processes based on these ideas, Taylor and Gantt, and rewarded their suppliers and contractors based on the incentives model. So it just became part of their procurement process, and because it became part of their procurement process, they demanded that all their suppliers work the same way sequentially. \n\nThat's where these ideas came from, this sequential way of working. It spread across the world because it was so effective when applied to the most common type of work at the time, which was simple work, widgets in factories. However, in the 1980s, things began to change. It was really changing before then, but this is when things really started picking up speed. Communication got easier, data began to be processed, and the internet was born. \n\nThis sealed sequential working's fate, even if it would take many years for it to even realise that it was doomed. Today, the world is moving faster than ever before, and how many of the old guards are still left? The best analogy I have, and I don't know culturally how this translates, but the best analogy I have is this thing called orienteering, which apparently is some weird sport in Europe. But it came, it has military origins because if you're a soldier and you need to get from one place to another, you have to use a map; you have to be able to read a map. \n\nOrienteering was a technique for practicing map reading, but it's become a sport. But in orienteering, you have a goal, a place you have to get to, or potentially a set of checkpoints that you have to get to along the way. Here is one of the participants in the sport checking in at one of the checkpoints. They usually have a little way of identifying themselves, so they have to get to every checkpoint along the way. \n\nBut the caveat I have for how it doesn't quite relate to orienteering is though checkpoints are changing all the time rather than being in a fixed place like they would if you were all in a sport together. But you, as a business leader, probably have a vision that describes the intended outcome that you want to have from any change. Effectively, what your currently envisaged end state will look like. That end state will evolve over time, but for now, you've got this idea of this is where I want to go. \n\nYou have a goal, and we can get behind that goal. You, not some external coach and consultant, need to decide not only what the initial end state will look like but what your first steps are going to be along the way and how you're going to measure the outcomes. Once you have that, you need to make that first step and see where you get to. \n\nWhile there are some well-known checkpoints along the way, like having an adaptive backlog of tactical changes or self-organising teams, mostly it's an open field. That's why there's so little guidance when you speak to agile coaches and folks in the agile industry. You say, \"What should I do next?\" It's like, \"Well, I don't know; you need to decide what you want to do.\" \n\nLet me explain the problem you're trying to solve. You've come up with the ideas. You, as leaders, need to understand why you are taking a particular direction and what you expect the outcome for your organization to be. While you may need help, you are accountable for the changes ahead, and only you, if you're the leaders in the organization, are accountable for those changes. \n\nAs you take each step along your journey, you may realise that you were wrong, that this direction leads not to your intended outcome but somewhere else. You then need to decide if that somewhere else is actually a better place than you thought of at the start and then figure out what's my next step, where do I need to go next. You need to be free to experiment, accept that any processes and practices you create would be imperfectly defined, and adapt to what you discover along the way. \n\nYou will use orienteering to stop periodically, reassess both your goal and the direction you need to go, and then take the next step towards your intended outcomes. Experimentation is key to this process. You will not know what will work until you try it. You'll also not know what will not work. Think back to how you might have built your company in the first place. \n\nIt was likely a short iterative process where you continuously tried different things, figuring out what was a good way to do things and keeping the things that worked and ditching the things that didn't. This entrepreneurial spirit is what we're trying to retrieve and create a system within which we can maintain it indefinitely over time. We need to remove bureaucracy and get back the creativity that was smothered by that bureaucracy of these traditional practices. \n\nI want to be clear that this new state of agility, in this new state of agility, everything will change. Every business process you currently have was built on the bureaucracy that you have in your organization. It was created slowly over time. These bureaucratic processes will have to be dismantled as they are no longer valid for the new speed of the world. That takes time, focus, and commitment. \n\nThis type of change is not something you can buy in from the outside, and it must be organically and iteratively grown inside your organization. You may hire many consultants, coaches, and trainers along the way, but it is you who must be driving that vision and setting that direction. Don't get trapped into a transformation of one bureaucratic process for another. Instead, evolve your organization out from under it and innovate your way to success. This is the inevitability of change. \n\nThank you very much. So there's a link there. This link here will take you to a copy of the presentation. It has my notes in it as well, but a copy of the presentation. And if you have a camera, you can just take a picture of the QR code and get to exactly the same location. Please also head off to my YouTube channel; I have lots of videos on there. \n\nIs there any questions? Thank you very much, Martin. Please, is there any questions for Martin? You can put in the chat or raise your hands, and then we will let him answer it for you. Any questions for Martin? I see a question that says, \"Could that be Frederick?\" I'm not sure what the question is. Maybe it's, I think you made a comment on management and Frederick Winston Taylor. He's the source of all our problems today. \n\nHe's not really; he was doing the right thing at the time. If you are currently managing a factory, you're probably going to use the ideas that he came up with. But as your factory moves towards replacing the people with automation, with robot automation, mechanical automation, the people that then run your factory are going to be creative people who are solving problems on a day-to-day basis, and you'll need these new. \n\nSo any questions? The question will take about three to four minutes. At five minutes, we'll take some few. Any questions, please? Any questions for Martin? Wow, so I think, Martin, your presentation was quite clear, and I think people have..."
  },
  {
    "Title": "Beyond the Agile Illusion: Embracing True Agility in a World of Taylorism",
    "Description": "Explores the difference between true agility and superficial agile practices, highlighting the impact of Taylorism and offering steps to foster genuine agile culture.",
    "ResourceId": "Sa7uw3CX_yE",
    "Url": "https://www.youtube.com/watch?v=Sa7uw3CX_yE",
    "Date": "2020-07-21T18:00:53Z",
    "Captions": "until I hit the button it's continued are you sure you understand or anyway yes oh cool I just started its life that's awesome I usually - right now I don't believe that they can hear us oh yeah well because the bit that's live with the red box is what they can see in here that is the that is that is your day yeah and they can hear us but they can only see the screen they can't hear us we can positive hear us and I'm gonna make a start well you mean you make your face fake yeah I don't know what you mean by big but yes and then I will hand over to you all right oh that's good oh that's me that looks like me Wow well um welcome everyone that was Martin and I doing a little bit of gonna figure out exactly what was going on so thanks for joining us this evening in the last of our mates closing eight what has been an excellent month over June in really cool and actually this evening as you have noticed for doing a little experiment and we are trying something slightly different just because Martin likes teams and he prefers it to zoom but here I have this to be all the time so yeah warm welcome T if this is your first time thanks for joining us hope you'll have a great evening we do to probably use him as a say but we're trying something different tonight this is a live event easy teams so I'm kind of forgetting my way around the UI as well so Martin and I have been on fun with this evening as you know for those you've joined us before we do over call the conduct in short we ask that you are respectful to one another you want everybody to have a harassment the experience we will do the usual community show types at the end in terms of the Q&A we have a slightly different facility to zoom but there is a nice little option in the top layer which is the show Q&A which is your facility to put questions to our speaker tonight so please do use that to get your questions and then I will relay them back to to Martin as I've already know keep them coming in maybe we can pause a couple of points and ask the questions but it'll be great and yet so welcome to Martin Martin is well-known to many of us I have known it for some years he's very experienced and established scrum the org trainer amongst other things is also consultant is all stuff an agile on DevOps space and he's also makes MVP I've trained with him twice and had a totally good experience on both occasions I've also seen him speak on a few occasions and yeah we all really good debate some videos are job related topics this evening he is going to share with us his amazing talk on telling me a little and I Joe be spotting out your BS which I need seen the floor show it's an awesome talk and I'm sure you will enjoy it Martin welcome back to see thank you very much it's a foul I just sum up for for for staff a little bit of gistic s-- logistics I can't even speak and this is not our normal teams meeting is this is something called a team's live event I think it used to be called Skype broadcast and it's been rolled into teams and we have kind of a weird producer set up here going on where we control what you can see which is different from zooms or just a normal team's meeting where whoever's talking is the one that gets center stage in this tool we get to control it so if they were you're not looking at the right thing then it's either my fault or Satpal probably mine because I'm kind of the one in control and we're just trying trying this out I took this opportunity to try and it looks like a lot of fun so sat knows and if you look at the Q&A I can Thank You Craig Craig's just said that I'm a little bit jumpy I'm hoping that we'll iron out a little bit as we go my views not jumpy but I can see that the live view is getting a little bit and jumpy let me those there's a stats but I can see maybe our megabits thing I don't know let's let's see how it and we will look at the Sapphire if you look at the QA you'll see that there's new comments there's published comments and there's dismissed comments so jargon just said good evening nobody else can see that Jurgen said good evening until it is published I just hit the publish button and now everybody else can see it and we can reply to the questions does that make sense at oh you're on mute sir you can't speak when you're on mute telly - yeah I think I got you you - I'll figure it out it's the school with I'm pretty comfortable we're awesome so let me do this which should send the slides to you and then if I do this and this and this then you should see both me and the slides there we go this should be an option somewhere for folks dialing in to add subtitles as well I don't know how that works but I think I set it up with Dutch Welsh and Spanish subtitles I think but you guys can let me know whether that is what you what you expect or is even working so um thanks for the awesome introduction Seth and as he said my name is Martin hi - whit I obviously I'm Scottish although maybe not those that are Scottish on the call will think I am not Scottish because I sound a little bit American I lived in Seattle for three years as a consultant so that's why I sound a little bit weird but for those that are not Scottish there will be no doubt in your mind that I am Scottish it's one of those weird things when you're from a place people think your accents weird my grandmother has lived in Scotland all her life and nobody in Scotland would think her anything but English however she goes down to England and people think she's Scottish that's the fun of accents but I want to talk about - really it's two things but I think they're related and I kind of try and tie them together one is the tyranny of Taylorism I know there's a lot of an agile folks that come in at to this event so you'll know what I'm talking about by Taylorism but I will explain it for everybody else and then talk a little bit about how to detach detect when people are telling lies there was a recent paper published by a very large organization it was published in 2018 that talks about the things that have to be true the minimum things that have to be true in order for an organization a group a team to say that they're agile I like this list not everybody will agree with it but I think it's I think it's an awesome list so I wanted to share it with you and there's a link in the slides for you to access the the lie the the actual document but you can google for it and find it as well so let me the first thing and that I just want to caveat the situation the reason that this document exists and it's from a very unlikely source I'm deliberately being obscure with that but that's that 80 81 percent of all development shops worldwide say that they're agile this is from Forrester Research so even back in 2017 eighty-one percent say that I do I would like to assert that almost eighty one percent of them are lying that's what I would like to accept I think they're trying to serve us a nice little turd pie for our consumption and they're just making it up and the reason that I think apart from long experience working with companies I'm sure a lot of you are the same one of the reasons is that only 22% of those eighty-one percent that were surveyed are doing short iterations and by short means shorter than four weeks four weeks are shorter so obviously from our perspective or depending on your your thoughts on this that doesn't sound very very agile it sounds a little bit long what about the only 16% of them have an ordered backlog that does not sound like I like something that that that we want for our agile teams or even at only 13 only sick I went the wrong way only 13% do retrospectives if you're not doing retrospectives I think retrospectives are a fundamental part of agility you can't really be doing say that you're agile unless you're doing some form of inspect and adapt unless you have some sort of feedback loops this is the source data of that you can go find it online I just highlighted the bits that I thought were important and actually while researching for this this late date the first time I was presenting it the-the-the I happened upon this post I have no idea who Brian wine is but he had a very astute thing to say and it's really just the reality most organizations while even if they look awesome from the outside or not a lot of fun on the insight I worked for intelligent finance back in the day if enemy remembers intelligent finance out in Livingston yes staff pal is doing a face I I worked for them for three that was it five weeks I think it was five weeks I quit after four weeks and and I was the shortest employee ever and it was just appalling the the the level of just what was going on inside I just could just beggar belief and that was early in my career when I didn't actually know better so we we've seen that it's hard to change that it's difficult for organizations to make make this difference but I think it's worth investigating a little bit on why a lot of people attribute it to waterfall but unfortunately that's only the tip of the iceberg Waterfall is just the start of our problems it's not the source or it's just a bit we can see at the top and and we all have seen something that looks like this requirement Center design and implementation verification and maintenance and this is not just something that's applied to software it's something that's applied in many other different system many traditional manufacturing processes traditional organizational processes having departments where you hand things off between those departments the analogy I use for the non software world is is contracts signing the contract that then results in work you have a salesperson who convinces the customer that this is what they want to buy and then they're done they hand off that information to the contracts team who then negotiate the contract and they're completely separate they're measured completely differently and don't care about the sales box they also don't care about the other people don't align their only concern is protecting using a contract and then they hand that off to the next group of people that may be involved in in that process so that but at still departments it's still pushing things along so it's worth asking ourselves why do we work that way where did this way come from what we kind of need to go back in time we need to go back in time about a hundred and thirty years to the 1880s so that's got a little time travel there we're now in the 1880s and just before the 1880s the the world was a very different place especially for building products we weren't building products at scale for sure so there was definitely that difference but also we tended to build our products and work very close to where we lived and and if we had a problem we were the only ones there to solve it or we got somebody in to solve it and for example if you were the cobbler making shoes you had a mastery of what you were working on so you not only were building the whole shoe but you understood the purpose of that shoe and not just of a shoe because I'm sure we can all a certain purpose of a shoe but what about the specific individual for which you're buying that I'm Pike building making that shoe if you're making a shoe for a farmer or making a shoe for the local police officer or you're making a shoe for a storekeeper there's going to be a different set of requirements and if you as the cobbler nor that person you have a much bigger greater degree of a connection and affinity to those things so you can build a better shoe because you care you care about the person you understand their needs you understand how their needs differ from others which is very powerful but then the Industrial Revolution came along and and a lot of money was made that's you know a lot of people get jobs a lot of money was made people's living standards changed for many people that meant increasing their living standards and albeit that my great grandmother started work in a cotton mill at the age of 8 however living standards did go up even if some of the principles did not but if you look at these pictures and ask yourself what what does the person at each individual station understand about the product what it is how it's going to be used who's using it do they even need that understanding the system here in a factory floor is set up in such a way that you do not need that level of understanding in order to to build your product you're effectively Charlie from Charlie and the Chocolate Factory is dad you're screwing the top on toothpaste bottles for a living and that that's it there's no more there's no less than that and so the the difference between these two is very stark on the Left we have our craftsmen taking pride in their work who understands their customer works with them constantly it's probably not the first issue the first of that same product they've built for the same customer therefore they have a greater degree of understanding and whereas the people on the right just they they don't care they have no connection to the customer they've got no connection to the work apart from I get paid at the end of the day and because of that only connection being I get paid at the end of the day there's a disconnect that happens we disengage from the process just don't care anymore that's a human thing if we don't understand why and we don't understand the context we don't really care about the work so much so this mechanization of the workplace because we didn't have the technology to have robots back then this mechanization of the workplace we have to use people instead of robots resulted in something called soldiering which is a different use of a word that were maybe more familiar with but it really just means to work more slowly than one's capacity and or to loaf or malinger I don't know how to translate I don't know that the words for that in Dutch or German is basically people not one thing tip to do the work you just don't care I'm gonna figure out how to work less so I've got a little exercise for everybody luckily there's a lovely URL which I will see if I can just copy if I can figure out how to get to my slide deck while I'm looking at this is the other screen and I will copy the URL I'm sure some of you will be able to type it quicker than I can copy it but we will put it in the chat let's make an announcement you are out far [Applause] there we go I just pasted a link into the Q&A if you use that link it will open in a browser and in that browser you will have this thing called mural you may or may not have used it before your up there's a few people in already I can see folks coming in and you just fine - clicking go in and anima Slee you'll see viewers and other people's nice Mouse mousies mice floating around all over the place and you can zoom in and zoom out uh and try not move everything around let me let me just quickly lock that I must have left it unlocked ah look there we go that we can't drag about the thing now and I'm gonna give you a little exercise we're going to and pretend that we are have been hired by a paper mill owner to improve product productivity and it lost due to people disengaging from the work with the soldiery to work more slowly than one's capacity I'm going to put two minutes on the clock and I'm going to ask you to create post-its for as many ideas as you can now if you're wondering how you create a post-it you just double-click anywhere on the screen and it will create a lovely post-it that you can type in my first idea what idea there we go well part of my can't spell but that's a separate problem what I like to do I'm going to put two minutes on the clock Oh being two minutes are on their way and and I'd like you to create as many ideas as you can on that em posters for how you could you as a management consultant defeat soldiering and remember this is the 1800s right there we don't have politically correct we don't have be nice to our employees because that's a good thing or you'll get you'll get em out heed on Twitter and we have do whatever you want in order to facilitate you getting the results that you need so I'm hoping for as many ingenious ideas as possible are you adding some soft pal rushing from my own you know I I am busy facilitating this event doing otherwise I will not partake in your exercise oh that's sad I will leave our lovely attendees to do that and then yeah share that amazing ideas with you there is about a minute left I'm going to open another browser window but the minutes will stop counting down and oh I like this so we've got gamification no toilet breaks yeah that's uh that's uh that's a good one uh or just just record toilet breaks you have to record the toilet breaks and then have some sort of punishment for people that take too many that toilet breaks paper unit by time far the slowest ten percent it's definitely something that can be done bonus for hitting targets no recreation area yeah people will tend to find the recreation area if you don't if you don't provide one but yeah shout at them to work harder these are all fantastic ideas is about five seconds left and then I'll pull that pull that up over here cool let me pull that up over here there we go so we got a lot of crazy ideas here but really are they that crazy I somebody I know used to work in a call center and this is five or six years ago and they had their toilet breaks monitored and they got called in for a meeting if they spent too much time on toilet breaks it's a pretty common in the call center industry to do that what have we got pay by product bonus for hitting targets breaking down work into a series of steps that sounds pretty good we need to plan all the the steps give them a beating if they're malingering I think that's that's definitely a good idea sack them and hire new ones yeah I mean are all of our workers our cogs in a machine yeah they're they're not high skilled labor we can train anybody to do this work so if somebody's not doing the work well there's 100 people waiting at the door for for a job these are all really good ideas ah yes from I like that one Seth promote bastards to be supervisors that is definitely something that you would you would see and in fact some of these ideas that you've come up with are are fairly and fairly hit on the nose let me let me jump into something here there's a gentleman called Frederick Winston Taylor he was the thought leader at the time he was our and Craig Cockburn of the time and he said his his hypothesis was that hardly a competent worker can be found who does not devote a considerable amount of time to studying just how slowly they can work and still convinced their employer that they're going in a good pace that I think if you think about it that is the fundamental basis for traditional management practices your workers are being nefarious they are not intent and working and we need to figure out a carrot and the stick how do we make them work so he came up with this thing called the scientific management method and all of the ideas that you wrote down were kinda part of his thinking he developed standard methods for each job break it down into a set of steps plan all the work divide workers into appropriate ability based groups is collecting all the marketing people together all the contracts people together all the legal people together and they're just going to do that work train everybody in just the standard method so we're gonna plan everything that they do remove thinking cuz we don't want people coming up with new ideas managers are smarter we're gonna tell you how to do your work and then have wage incentives for increased output and if that wasn't bad enough he had a disciple called Henry Gantt yes that Gantt who came along and he created the task and bonus system so we're still talking 1800s tasks and bonus system basic wage based on expected low performance and bonuses for exceeding excess expected proficiency and give bonuses to managers for motivating their staff to exceed proficiency promoting bastards that's exactly the outcome that's going to happen there and I work for an organization in Glasgow called a Greco they're over in the East End of Glasgow they are actually if they're a very good company but they did have golden handcuffs they have a 40% bonus system they pay about 15% below the average for that job in the industry and then they payout up to a 40 percent bonus system at the end of the year so you want to hang around for for that bonus and you want things to do well and something else that drew my attention is that we have this thing called the modern school system and don't be confused by the word modern I'm using modern school system as an own even though I kind of forgot to capitalize it the toward modern here but it's unknown it's this idea that rewards for fulfilled tasks everybody sits in rows everybody does the same thing at the same time and incentive based learning and I would ask what's the difference between these two pictures and how you motivate people the modern school system that most of us on the call today and my parents the school system that we grew up in was designed to Train factory workers to train people to work in factories okay these systems were optimized for output not outcome but it didn't stop there in 1908 Harvard started why I guess it was before 1908 but 1908 was the first graduation class of MBAs and you can see there's a definitely a lot of white males there but that's the MBA graduating class of the time and they were taught these practices taught these are the the fundamentals from which you need to build your business you need to build your employee structure and manage people so we ended up with hierarchical organizations in the 1950s they started really heavily into this idea of analysis design implementation testing and maintenance and you can see on the right that those has new ways of saying the same thing that was said in the 1800s but this is in the 1950s and then the largest purchaser in the world took on this concept which is the u.s. the US military the US military industrial complex is enormous you would not believe how big it is I have some stats in a little bit and it's just enormous they took on this new way of working they enshrined it in the way they do things and it just became part of their procurement processes just became part of their procurement processes and it became part of many other organizations procurement processes at the time you can see the folks they are building clocks once it was enshrined and part of the procurement processes it's just the way we do things then we kind of tried to apply it to software development and things did not go very well we were trying to apply management practices that were designed for the predictive world to this new empirical world where the only way we figure out if something can be done is by doing it we can't plan everybody's work upfront so hopefully most of you are already familiar with these ideas moving from predictive management practices over to empirical management practices I don't want to go into them all but that idea of autonomy mastery and purpose once you take money off the table for people at carrot in the stick no longer works and in fact has a negative impact so if you as an individual have your extrinsic motivations or your your your you have a roof over your head you have food you have a roof over your head and you have those things sorted then you're not so worried and you're not worried about money like where's my next meal going to come from then carrot and the stick no longer has a positive impact if you read Dan Pink's book Drive or just watch the 15 minute YouTube video if you're not a reader is that is that you serve your reader he's nodding cool he's a reader read the book it has all of the background if you just don't care watch the video and just assume that everything is true but if you want the detail you can go read the book so obviously this has put everybody in that position of these hierarchical organizations which we're all familiar with departments silos and and procurement practices that force us towards that world and having big budgets up front and these big projects so who would be the least likely person to understand how messed up the world has become because of these things I'm going to give you a hint they have a seven hundred and thirty eight billion dollar budget and 2.8 million employees that's direct employees that doesn't count consultants contractors and all those third party people it is in fact the US Department of Defense who didn't start this mess but they definitely enshrined it in all the ways that we worked we made it much more popular than maybe it needed to be but they are trying to clear up their mess what they found was that as they moved towards agile practices they realised that agile just becomes a buzzword of software development and therefore all software projects suddenly declared themselves to be agile so they released this guide called the div guide detecting agile BS it was shipped out in 2018 to all of their procurement officers anybody in the the US military the Department of Defense who was responsible for who had purchasing power in order for them to understand what it looks like to be agile so that they have our litmus test to negate doing the contract with somebody so I have one two three four five six I have six questions okay and I usually ask folks to stand up if I'm doing this as a big room event but obviously you can you can't do that so what we are going to do is I am going to just ask those questions what I'd like you to do is imagine you're standing up in your mind and I want you to sit down in your mind friend and I see something that is not true for your team I'm hoping there'll be a lot more folks standing up at the end of this session that I would normally get and I software development conference or in a private organization okay so the first question I have is are your teams delivering working software to at least some subset of real users every iteration including the first and gathering feedback so I'm gonna caveat that a little bit I'm gonna define what they mean by real users cuz it's defined in the document real users is production real users are people who will be using your product and using it in anger yeah you eighty does not count as real use real users pre-production does not count as real users some subset of your users have to be used again in production for this to be true I wonder how many people sat down in their head because if you don't have this then it's not agile it's agile bs back in question is there a product charter that lays out the strategic goals do all members of the team understand and are they able to see how their work contributes to that overall success because if not it's not agile people who are doing the work need to understand the whole context so that they can make better decisions okay our team is empowered to change their processes based on what they learn I'm hoping everybody who's attending here would be able to say yes to that one but if it's no it's agile bs it's not agility is feedback from users turned into concrete work items for sprint team teams on timeline shorter than one month if not it's not agile and our teams empowered to change their requirements based on feedback you've got to get those that feedback integrated into your system otherwise you're still not going to build the right thing so if not unfortunately it's not agile and then the one that I find even if I have folks still standing up at this point in a conference is the full ecosystem of your project agile agile programming teams followed by linear bureaucratic deployments is a failure it's not agile you need to have an end-to-end process in order to see that you're you're doing agility now while this is from the Department of Defense I would stand behind all of those statements and say if you are a team working in the agile space and the answer to all of those questions is not an absolute yes a resounding yes then your unfortunately kidding yourself kidding yourself on and it's not as agile as you would like it to be this is the diagram that is in the document you can go download the detecting agile BS if you just google detecting agile BS you will get that information I think it's awesome ah so funnily enough I used to get people coming up to me and saying our jewels only for small projects it doesn't work for big projects that's what I used to get probably five ten years ago now I get people coming up and saying exactly the opposite I'll add jewels only for large projects it's not for small projects this data here is from the Standish group in Boston who analyzed about 70,000 projects worldwide as they do a chaos' report every year and something they found it was the agile practices on small projects are 32% more likely to succeed I'm gonna define small for you because their definition of small is not the same as mine their definition of small is 50 people or less so for me that that that tends to be big but that you know 50 people or less is small but large projects get 600 percent more likely to be successful and that's due to the extra levels of complexity as you add more people over 50 so if you're moving towards your journey of agility is it a good idea to go look at what everybody else is doing to get ideas on how you might make changes and the next thing you might do absolutely you should be doing that you should be looking at all the different practices and experiences that everybody's having your colleagues come to two sessions at the future of work Scotland and learn ideas and then try them and see if they work for you however you can't use somebody else's process you can only be inspired by it if you are just taking somebody else's process and I know newer versions of safe are a little bit more flexible than they have been at the past but safe was designed and built by demophoon well in one company and then used as a blueprint in other companies that is inherently not agility it was for the first company but then for each subsequent company after that it's not many companies come to me see how we're doing the Spotify model and I'm kind of like what's the Spotify model there is no such thing as the Spotify model there was a white paper written by the folks from Spotify that talked about their point in time on their journey towards agility their agile evolution their continuing evolution here's a what we're doing right now Spotify are not doing anything like what's in their white paper anymore and haven't done for a very long time it's just a point in time they are on their journey and they were just trying to give people ideas so if you're just installing somebody else's process you are not being agile and and I find I found something really interesting online I found this memo this is this is the result of the memos like a clarifying slide but it talks about I actually have a copy of the memo but it's not really that interesting this has the interesting stuff in it this is from the the chief of a current chief of software operations or the person who runs IT for the US Air Force and and he said they highly discourage discourage their folks from using rigid prescriptive frameworks such as safe they point out that safe might be potentially useful for teams who don't have DevOps but it will inhibit teams using DevOps they will inhibit their ability to move towards high degrees of agility and they point out that safe isn't used by any successful software commercial organizations if you can think of one please let me know I would like to make sure I Kathy this with the correct thing we go let's and smart people here at future of work Scotland that have lots of experience I have never seen a large successful software commercial organization using safe nor the Spotify framework well apart from Spotify obviously by doing something different now I think that's a very telling piece of information DevOps an agile are not magic magic bullets they're not the thing that is going to save the day for you I thought I just put the windows flag on the cat just for you because I know you're always commenting on my comments on on Microsoft II stuff we can use some of these capabilities that we find in agility to help improve our processes and practices and make things a little bit better but something is really important and my good friend Russell Miller mentioned it why buy a counterfeit when you can afford the genuine article why would you go install somebody else's framework that was built for their culture for their organizational context for their business processes build your own every large successful organization that has moved towards agility has done so by creating their own process based on their their individual needs and how do you get there one step at a time just find the first step you can take and take that step to get there so thank you very much I actually forgot to update that link at SAC sorry about that but you will get the presentation from that link if you want to copy the slides are there any questions that hey that do come through Lauren I'm just oh I okay so if it's what percent of all team doing DSR Jared it's about energy have the US military limited the engagement to nineteen percent but that is a really good question yeah so I didn't say the US military we're doing it well mmm this was their they're trying to educate folks inside of the organization so they can see when they're making good decisions and when they're making bad decisions I'm sure there are circumstances where they're between a rock and a hard place and I can either choose that doesn't meet the agile requirements or that doesn't meet the agile requirements and I have to pick one so they are working closely with their vendors with their their providers to help improve agility with them but those practices are currently required by the Department of Defense's procurement rules so technically if a vendor is not agile not doing continuous delivery is not providing them with a usable increment even of a missile system on a regular cadence on timeline shorter than one month then they are breaking the contract that they signed so maybe they're not a limiting their engagement but they can certainly sue the crap out of them for not not meeting the the requirements so that's an interesting one yes yes I usually did wanna make spark a little bit of thought I'm sure within the loop for yourself so each new system of working solves the problems that went before and what are the problems are agile cancel so we can see what might come next other than maybe just doing our job properly I like that thanks Chris I do I like that Craig Craig always has very very good insight and I think that it's is a valid it's a valid statement to me I I don't know if we can answer that question because we don't know what we don't know I guess um but I I maybe I'm wrong and I'm perfectly happy for for a creek to correct me maybe I'm wrong but my my understanding of agility is it's moving from a model where things are rigid because we have a defined world yeah our manufacturing production line or our building 300 houses or making clocks on our on our factory floor and we're moving from that world towards a world where we need an empirical process control system we need to be able to adapt our reality our reality our way of doing things to the realities that are happening for us as a business as an organization an agility for me just means moving towards that model so that we can accept change so isn't agility the vehicle through which we can adapt and come up with new ideas for whatever's coming down in the pipeline so I'm not I'm not sure that we maybe need anything else maybe doing agility properly is something we should be doing but again I disagree with the word properly I don't know about anybody else but I don't think there's one way I think saying doing agility properly is kind of like what we all do say for we all do this one thing I think it's different for every organizational context and everybody has to make up their own way which means incrementally and iteratively moving towards the outcome that you want I think it's like lips release its point say yeah yeah justjust just well you're kind of covering that bill so let's have a question well then get your question of sorts and the problem isn't the Dreamworks a lot of a speaking of ugly with Arnold safety sebastian right and you and i want that conversation many times but it's the Mackenzies and the b CGS and the being spitting the work the work the frameworks in because that's what the management wants to buy right so it's it's these things positioned and sold and nothing nuts I've been part of that right I totally agree and and it it's there's not really a light at the end of there's not a light at the end of that tunnel they're not going to magically get it as as long as executive in or executives in organizations don't care enough to understand the problem they will always just want to buy either way into a solution and that's just the reality I firmly believe that those companies will not go anywhere yeah III think of it as it's like Darwin Darwinism animals grow into the niches that are available that they can optimize for and companies do the same companies fill a niche and if that niche changes enough then the company has to change if the company can't change they go out of business so those organizations that adopt change adopt models that allow them to adapt to those changing circumstances will survive and I think the world today changes much more quickly than it ever did before so they need to change true one step at a time yeah I've got one for you here which might clean nicely to your your your scrum and Kanban training for sure can you can you share what you qualify as the for splint so I want to get an astronaut discussion but what what could you allow you to take place before Sprint one eg new team deciding wellness research experiments understanding the customer flaw new offering team coming together to understand the problem and look dito eagle in the floor is yours that's a really good one I like that one so I don't know what what I would normally say it if you're at the point where you have a team because you're contemplating sprint one I'm going to make a little bit a bit a bit of an assumption and I'm going to say you've had to create you've had to do enough to convince somebody to give you some money okay so you have an idea about what niche you're trying to fill with this new product this new thing that you want to do and I would suggest just get the team if you have the team together with the product owner and decide what's the first thing that you could do what's the first thing that you could test what's your hypothesis if we make this product this is the behavior change that we would see this is the the measure that we're going to use whether we're successful what's the smallest thing that we can create that will meet that measure and you're trying to find something that's small enough that you can do it in two weeks there uh if you've got a team of five or six people there are very few things you can't have some basic concept of in two weeks yes you're gonna spend a lot of time in infrastructure building architecture building servers but if you're using I I work when I eat one of the classes that I teach is the professional scrum foundations class in the professional scrum foundations class I break everybody up into teams and I give them a backlog for it's an animal website right so they have to build an animal website so they have stories like have you been through this one Seth no so they have we have stories like you know it has to be generally attractive it has to have a home page it has to have these types of information and have stuff pictures and an image gallery and all these kind of things so a backlog of information and we just give the team's the backlog and we don't give them any instructions about how to go turn that into a working product we give them 30 minutes prints so 30 minutes of Engineering inside of the sprint and I have almost never had a team not be able to create something by the end of the Sprint and that's a 30-minute sprint and I'm gonna caveat now I had one team which I was loved to work on this team I had one team of five people that by the end of the 30 minute the first 30-minute sprint having never seen the requirements before and just picked their animal mascot for the team okay they managed to create using they were using visual studio they created their website in visual studio they had it stored in a git repository they had an automated build system created to pick up those pcs from the Builder from the from the git repository build it into a cohesive product and deploy it to production in Azure in 30 minutes team of five people what could that group of people do in two weeks I think I think its last about what can we create but what can we create in two weeks give them the first thing and let them let them play for two weeks do you know what that gives the product owner it gives the product owner two weeks to go come up with the next most important thing just get started I think is my suggestion absolutely a really good one for you I love this o if you are stuck in on Jovie is what steps might you start take the model to get out of it and enjoy SBS one love it depends which of the BS is your in I guess but so so the thing I see is the the biggest BSE is an agile apart from and I'm talking about a team there's a whole bunch of product owner product value be a sees that that organizations seem incapable of understanding value but I'm meticulous and if we're inside of a team if that team is not able to create a usable increment so what what the minimum bar for scrum is transparency we need transparency that's part of our to have an empirical process control system we need transparency the increment at the end of the Sprint are usable increment that is production-ready might not be defied production but it's production ready is the minimum bar for doing scrum if you don't have that you're not doing scrum yet you don't have transparency you've got the the product backlog which gives you transparency of the future you get the the Sprint backlog which gives you transparency of the present and you've got the increment which gives you transparency of the past that is the whole purpose of scrum we have those transparency so we can see what's going on so I think the first one I would focus on is getting understanding what our definition of done should be versus what it is and every single sprint every single retrospective look at that death here's where we should be in order to create a potentially releasable shippable product here's what we can do hey what's the next thing we can do to close that cause that gap that's that's what I that's what I would start that's where I would start but then my background is engineering so I would start there yeah so in your experience for aspects of senior leadership stroke management or for tuned to these efforts I don't know really again and which are supporting them so I think that last bit screams the ignorant ones are thwarting us and the enlightened ones are enabling us it's really that simple there are there are a bunch of folks and organizations that don't don't understand why Fredrik Winston Taylor's thinking thinking's are a bad idea they don't understand that because that's all they've ever known so there looking at what you're suggesting to them from a position of ignorance and they're looking at that and they're thinking I can't operate in this world because I don't understand it therefore I will lose my job therefore I need to get in your way that that's that's really what's happening and the thing that the changes that is education same as sorting ignorant anywhere whether it's government ignorant or people ignorant you need education that that's so sad pal that was definitely a lead-in I have a mmm professional agile leadership class you do I do just coming up on the oh well actually I think that dates wrong it's on my website I think I think is it the 29th it was good to see you hope that day strong right because that's London yeah it's not that one haha it's after that I moved it I moved it that's what it was so it's not that date it's the week after maybe I think it's the week after anyway it's on my website so you will see it there so just naked agility if you google makes agility you'll not find anybody else although you find some scooters there's naked scooters I don't get it but there we go and but if you find that class we're doing it over for days 8:00 a.m. till 11:30 so that managers can attend so that those people in leadership positions who won't turn up to a two-day class can actually turn up because you know they're finished by 11:30 every day and I have two people signed up from Singapore so I'm with forward I'm looking forward to that class I just thought I'd throw that in that wasn't that's just a that's the sales part animal it's it's all good you were happy to do that also happy to shoot in the link to your well you revamped your website right not still no you did it for me but I did it because of the new normal I want a couple things yeah what we're doing virtual training now so instead of focusing on location we're focusing on time zone yeah so if I less I I did the first thing I thought of when the folks from Singapore signed up was our is that inside of their time zone and it's a two to thirty till 5:00 p.m. for them so it makes perfect sense so so definitely take take regardless of what do you want to take it with me I the professional agile leadership is a great class not just for leadership but for us to help understand what leadership should be doing if we have to go explain to them what they should be doing so we talked a lot about delegation with which which class did you go through a pal sir no no yeah you did our PSK come on yeah so yeah it I have a lot of fun teaching classes but we're doing all of them virtual at the moment obviously and I'm feeling like I like the virtual way of delivering a scrum that arc has found that there's a six percent higher pass rate for the assessments with folks taking the virtual classes we're not sure yet why that's the case but I would assert if you've seen my LinkedIn posts I've been posting some of the awesome murals that my groups have been creating in the scrum classes and oh the ability to create all of those things having those big wall exercises without having to fight to get access and see the wall is is unbelievably powerful and we PDF them at the end of the class everybody gets a copy I think that's why there's a greater degree of learning in the virtual classes even though you've got kids running about in the background and all kinds of things going on that's it's it's it's all good it's all part of the fun and I think that it's the new normal I think we're going to be doing virtual deliveries and working from home a lot more than we ever did before so so I had to change my website come on give it up second before lockdown I was doing a hundred and forty flights a year 300 days a year and doing about 16 different countries a year 34 countries in the last ten years hmm so I would prefer not to travel so much so a couple of and then yeah so can you talk a little bit about agile for calling each other's work yes right and perhaps the small steps are invisible to people looking obviously from the apes they didn't and people really say the ORAC you've obviously what's most the freezin butts off and relate to that to shift your give move things forward a little bit closer to where they want to get right but there is a lot of that what's your perspective on what I think I think it's I we do a lot of work to slowly move organizations I've been working with a company called slumber J and I worked with them for four years to organize one team it was 600 people but one one product into some semblance of having the same source control system having the same work item tracking system just having some standards across their organization it took them four years to get there that that sometimes things just take a long time cultural change is hard but I think what is it it's the Cotter model that says the the biggest danger is declaring victory early if we call what we're doing agile and it's not we're declaring victory early while we've not finished the fight people get complacent and stop trying because all we've won so we don't have to do any more work I think we need to stop talking about transformation and start talking about evolution where are we on our agile evolution we might not be it we are there are are not agility yet or what what up what's some the this list that I have is just one organizations definition of what agility is don't don't take it and look at your own stuff and go while I'm not agile then you need to decide where you are on your journey towards agility your evolution and it's a continuous path that never ends so there will always be changes always be improvements I just like I personally like this litmus test of can this organization see that they're agile or not am I looking at that on their declaring victory no it's not true I'm gonna buy us off I'm gonna give you a bunch of money to build me a product and you're telling me you're agile how can I tell if you're lying why should I have to know why should I have to expect that you would be lying but that's what happening for organizations how many how many am I what's the the term consulting organizations like the Accenture 's the sultan's so those sorts of organizations how many of them would you consider to actually be agile or just effectively taking the piss from their customers and saying whatever they need their cost their customer needs to hear in order to win that contract I mean that that's really where this focus is if you're working inside of an organization and you have a team and you're providing services this is not your litmus test this is a litmus test for an organization spending eight hundred more than eight hundred billion dollars on buying stuff yeah they need to make sure that they're they're spending the money effectively and their folks don't know whether those organizations are telling them the truth that's why this litmus test exists so don't don't definitely don't use the same measure as as safe for the Spotify model don't don't just take this as route and make your own assessment this is just one example I don't know if that answered the question I tried my best yeah I could just say I'm not pooping all over your attempts to make your organization more agile I'm just maybe pooping over saying it's agile if it's not that's maybe what I'm saying did you consider the space p6 as an agile company they would feel the the sex question test quite like that so yeah yeah yeah I do programming teams followed by linear bureaucratic deployments as a failure because their their deploy so yeah I'm not I'm not gonna hold them to the same if you are working within on an organizational context which SpaceX is one such an organizational context where it's not a possibility to to be you know you you don't have your rocket in space every 30 days but maybe they'll get there isn't that isn't that their plan like a continuous delivery of they're going to be launching on a regular cadence they're increasing that cadence I don't know maybe you could say they're they're still on their evolution they're not at this measure of agility but they're doing super super well at everything else so I wouldn't poop all over them for not booting one of these requirements if they are doing so awesome anyway if that makes sense you you have to look at the value deliver delivery in your organization it's it's agility is not the goal I think that's something that that folks often miss or misinterpret but the goal is not to be agile the book all this time an awesome business that does well and your customers customers needs meet your customers needs yeah I meet them well you want delighted customers I don't know the SpaceX have delighted customers if they do they're doing awesome I don't care what measure you use against them they're doing awesome if they don't have delighted customers then maybe they're doing something wrong I don't think it's as easy as that no no so okay we'll take a couple more than all other good ones coming so if you were to give one piece of advice to the individual whose company execs is not they are agile but everywhere in the globe news that's not the case oh gee say to them I would say email that executive the detecting agile BS document just email to print it out leave it next to the executive bathrooms I don't know that that person that executive needs educated yeah they're there they have they're ignorant on that topic and I think this document makes people think it's its title is deliberately you know pushing that and that's why I used it in hey I want to make people think don't just assume you're agile think about it and I think that one piece of advice is send them a link to this presentation if it's too if it's too long maybe I could do a shorter one for you yeah but sending them a link to the document has a lot more in it honestly I'd really recommend perusing this document it has lots of useful things in it it talks about DevOps it talks about continuous delivery it talks about feature flags it talks about controlled exposure to production it talks about a lot of things that are part of our new modern software engineering practices that we really should be encouraging moving towards blah blah blah so yeah I would definitely print off a copy leave it in the executive bathrooms that's that's that's definitely my recommendation and subtle yeah sometimes it's not subtle but put it on his desk when he's not there he comes back what's this thing Oh detecting ID you'll be a so maybe that oh oh [Â __Â ] well that that is I was okay well maybe maybe I need to make some changes maybe I need to do stuff it a lot of the time it's cuz shareholders are measuring organizations based on some of these ideas as well cuz shareholders don't understand they just want their money so well we know we'll get more money if this an agile organization so you should be agile so the CEO goes okay we're agile now that's the declaring declaring it I don't know answer but it was an answer this one of this one approach and I like a John's comment thank you most of my time has been adding transparency that's that's what we're always doing in organizations that's really the only thing that matters creating transparency if things are transparent if problems are transparent people will do something about them I like to think of em sometimes my job is just to shine a torch in the dark the thing that we need to go fix and keep shining it even when people think it's fixed already or don't want to deal with it that's shine a light in the dark I'm gonna make this the last one I don't are you familiar with is it true like who likes loss of leadership I am NOT I know that somebody has mentioned them I will go google it so this is my this is my favorite thing about these events every week I learn something you how good is that so cruel acts laws of leadership I genuinely never I've never heard of them I just put it on the screen true like slow ship states that the future of an organization is in the hands of the privates in the field not the generals back home are quickly developing world supporting or River tails your leaders need to nurture yeah I I totally agree so I didn't know what it was but I totally agree with it and as laws would you follow so that are obviously a number of them so yeah that definitely requires a little bit more digging I agree with what I just read that way you're nuts open this up to something year's evening so you can go research and read and maybe it maybe I'll incorporate it into my agile leadership class yeah yeah States yeah okay we're gonna change minutes okay you feel that many questions even as you always do and it's been excellent and and and we learnt something new so that's really cool so just to say thanks it's great to have you along again always great talk I've seen it before and it's like different twist on it so that was pretty awesome I felt was slightly shorter so did you know there was more slice I don't like slides anymore how was that one days I'm trying to do less slides and more discussions and content and stuff I've been teaching I've always been a slight monkey for teaching my strong classes and I just taught professionals from foundations class this week with no slides at all I think I did cheat I copied some slides into a mural and but maybe only six or seven things I copied I copied across I have the slide deck has something like three hundred slides in it but I did everything as interactive exercises from end to end and discussion so yeah that's a lot of fun okay well Toby along thanks for being with us because I can't see anybody else I'll give me a little round of applause it's just very different you guys did what were used to which is cool but ya know I would be interested in folks at feedback on the excuse me because this looks like a great tool it actually it actually supports up to 20,000 participants 20,000 attendees which is a little bit more than zoom but maybe it's not as interactive because we don't have the ability for other people to mute yeah but then maybe it's better because you get to pick and choose the questions I don't know I would be interested in feedback pros and cons of it see bruising come exactly exactly no but no thank you everyone for joining we did try this little experiment so as martin says the team and i'd be really keen to get your you know your thoughts and your feedback will always have to try things will be back to zoom next week you'll be competed so thanks for joining us keep the feedback coming and yeah that's us bringing Giunta cause I'm really excited about July we have five sessions for you as it credible there are five Wednesdays and like you believe them on so we have five events for you and we start off next week with 10-day Ricky who joins us to talk about innovation transformation this talks about intrapreneurs can drive transformation it's really cool he's just released a new book pilots in the Navy I mean cycle interesting Chuck so do tune in for that lots of interest to you and we have a whole host of other ones I'm Artemis cunningly presenting his content I was publishing one of our outstanding events for our joy which is with Steven Wendell will be joining us from the States he's also got a new book out on really cool behavioral stuff and research he doesn't really again a really insightful mass and really really good content I'm an interesting ideas support really work so yeah hope you'll join us for that community shout outs our friends that Scott this I've got their next meetup on Tuesday I believe it isn't xxx Tendo will join us on Wednesday and then our friends at Lena Joanne brought out their next event on the forests II think that's about a joke each our universe of interest sign up for that and yeah thanks again for joining us moving enjoy acoustic Martin again we'll see you again and yeah thanks and enjoy the nice Tod thank you thank you for listening everybody thank you this durian this end big red in button suck is that the one is it I can hear you know"
  },
  {
    "Title": "Unlocking Agile Leadership: Transform Your Skills with Scrum.org's Essentials Workshop",
    "Description": "Learn practical agile leadership skills, foster team alignment, and drive cultural change with Scrum.org’s workshop to support agile transformation and organisational success.",
    "ResourceId": "gEJhbET3nqs",
    "Url": "https://www.youtube.com/watch?v=gEJhbET3nqs",
    "Date": "2020-07-07T20:10:33Z",
    "Captions": "Hi, my name is Martin Intuit. I'm the owner at Naked Agility and I'm a professional Scrum trainer and Microsoft MVP. I'd like to talk to you about professional agile leadership training from Scrum de-torque.\n\nProfessional Agile Leadership Essentials is a two-day hands-on workshop that uses a combination of instruction and hands-on exercises to help managers and other leaders who work directly with agile teams understand how best to support, guide and coach their teams to improve their agile capabilities. The workshop provides a foundation for the role that leaders play in creating the conditions for a successful agile evolution. Leaders and managers are critical enablers in helping their organizations be successful.\n\nYet the role of leaders and managers in an agile organization can be quite different from what they are used to. Now, this workshop uses a combination of instruction and team-based exercises to help participants learn how to form and support agile teams to achieve better results and how to lead the cultural and behavioral changes that organizations must make to reap the benefits of an agile product delivery approach.\n\nBecoming an agile organization is a profound evolution that requires senior leaders, middle managers and agile team members to change the way they organize their work, manage their work and measure the results of their work. Agile teams cannot do this on their own; they need help from the entire organization. The changes for all involved are profound, but so are the results when everyone's goal and way of working are aligned.\n\nTo succeed in a changing world, organizations need to become more agile, more responsive to customer needs and market changes. This workshop will equip leaders and managers to help their organizations change by providing participants with an understanding of how agility can help you improve your organization's performance, an understanding of how you as a manager or leader can help your organization achieve the benefits of agility, an understanding of how culture and values influence your organization's ability to reap the benefits of agility, practical skills for helping to guide and coach agile teams and to help them remove impediments, and an understanding of how to measure the benefits and impacts of agility in your organization.\n\nBy the end of this class, you will understand where and how agility can help your organization improve by addressing challenges you can solve in no other way. You will also understand how agile teams work and what you as a manager or leader can do to help them improve. You will also be able to qualify the benefits of improving the agility of your organization through concrete measures.\n\nThis class can be delivered on-site or as a live virtual classroom in a specific organization to help its leaders understand their important role in evolving their organization or in a public class setting."
  },
  {
    "Title": "Challenging the Tyranny of Taylorism: Embracing True Agility in the Workplace",
    "Description": "Explores how outdated Taylorist management limits creativity and true agility, offering ways to spot and overcome ineffective agile practices for better teamwork and innovation.",
    "ResourceId": "56nUC8jR2v8",
    "Url": "https://www.youtube.com/watch?v=56nUC8jR2v8",
    "Date": "2020-06-24T17:48:17Z",
    "Captions": "Hey everybody! Join me in about 15 minutes at 7 p.m. British Summer Time in the Future of Scotland meetup group for our session on the tyranny of Taylorism and detecting agile BS. You can check out the website; you can sign up, there is still time, and you will get our URL to join the class. Check in the comments here for the URL direct to the session. I hope to see you there!"
  },
  {
    "Title": "Transforming Enterprises: How DevOps Drives Collaboration and Continuous Improvement",
    "Description": "Explores how DevOps enhances enterprise collaboration, continuous improvement, automation, and customer focus to drive cultural and operational transformation.",
    "ResourceId": "kOgKt8w_hWY",
    "Url": "https://www.youtube.com/watch?v=kOgKt8w_hWY",
    "Date": "2020-06-16T12:16:52Z",
    "Captions": "Using DevOps I'm going to talk about an enterprise transformation that shows that you can - and I will be live on Stack Kampf online and I've added a helpful short URL here for you to be able to find it quickly but you will find it online they have lots of talks over the next three days and I will be live at 2:15 p.m. British summer time 3:15 p.m. European summer time I will hope."
  },
  {
    "Title": "Mastering Scrum: Key Insights on Definition of Done, Spikes, and Managing Ad Hoc Work",
    "Description": "Explains key Scrum concepts: distinguishing Definition of Done from acceptance criteria, using spikes vs. refinement, and strategies for managing ad hoc work in sprints.",
    "ResourceId": "gc8Pq_5CepY",
    "Url": "https://www.youtube.com/watch?v=gc8Pq_5CepY",
    "Date": "2020-06-04T05:33:42Z",
    "Captions": "hello welcome to my office hours 23rd of June\n\nokay so I do this event every Wednesday at 6 p.m. I collect as many interesting questions as I hear during the week the week in between so from Wednesday to Wednesday and then I try and do my best to answer those questions at this event as well as answering it for folks directly as well when they ask me and I have three questions today that I'm going to go over but I want to let you know that you can ask me anything so you can either we are at live on Facebook YouTube Twitter and LinkedIn well I'm hoping we're live on LinkedIn LinkedIn it's been a bit funny I did a session earlier and it's just a black screen so everything else is working apart from LinkedIn so maybe they're having a problem or maybe my systems having a problem but we'll figure it out ah the best place to interact is on YouTube it has the best experience and it's the least delay for you watching if you have a question please ask in the chat for this video you can ask it on any platform I can see theoretically the chat from all the platforms I can't respond to LinkedIn but I can obviously verily I just can't reply we have again at YouTube is the best place if you want to ask a question anonymously you can use the link here it's just our form of the text box and you can ask anything you want about DevOps scrum Kanban agile organizational change metrics whatever you want and I will do my best to answer it I don't guarantee I'll have all the answers but if I do not have an answer to a question I will go off in between now and next Wednesday find out an answer and try and get you something for next week if I don't have one yet so just a recap for what I've been up to on Monday Tuesday I did my fourth third no fourth fourth professional scrum foundations class live online for 20 odd people and I've done two in Dublin timezone and two in PST so at California timezone and this was a California so I am tired I am waning now it's 6 p.m. in the UK and that was just when I was starting the class Monday Tuesday so it's it's been very tiring but we had a great time during that class I'm just thinking I might show you the mural that we created as part of that class as long as I can type and talk at the same time I didn't have to type in my password that was pretty good the part of the mural that I thought might be interesting for you let me put that up there and then I'll zoom zoom out is we had our discussion where's my magic button there it is well let me let me disappear myself we had a really interesting discussion for I was probably about an hour and a half to build this part of the mural but a really interesting discussion on the roles artifacts and events around scrum and how they all go together and we talked about the ideas that Satya Nadella has been talking about a lot recently which is the M it's better to trade off features for productivity productivity of your team's productivity of your people doing the work is actually more important than actually adding features because in the long run you're gonna get way more features by focusing on productivity let the engineers figure that out a good example of that is the azure DevOps team who eight years ago were delivering 25 features to production each year and today after a massive transition towards agility there are delivering nearly 300 features to production each year if you're a product owner that's worth the massive multi-year investment in productivity and setup and so building this was a lot of fun especially with the group of folk that I had we had three teams two teams of six and one team of seven in our group well I think that's how it broke down there was 20 people and Russell Miller and myself were facilitating that so it was just a lot of fun and we had only two not scrums scrum master accountable for progress and scrum master assigning work or just assigning work to people in general so we had a lot of fun Russell and I and we got some really interesting ideas out of this team so and as part of not just that training but the other questions that have come up folks that have got in touch with me since last week and I get three things that I kind of want to talk about one is the idea that a lot of folks have that conflicts definition of done with acceptance criteria and so I just want to define both of those things to make it make it more more transparent I want to talk about spikes versus refinement that seems to be a common question that comes up that's always a good one and then what do we do about ad hoc work in the sprint that was one of the conversations that came up during the training on Monday and Tuesday and there's maybe the belief that scrum can't handle ad hoc work however that is not the case so let let's I'll maybe leave this up I'll put myself back on there we go and I might I might use a little bit of space there to draw stuff if I feel like it but I'll leave that up just now so the first one is Inc definition of done with acceptance criteria I see that a lot not just from new people to agility but also with people that have long experience in agility a definition of done an acceptance criteria are not the same thing they are only loosely related to each other so our definition of done is our measure of quality if you were to get everybody in a in a room who's responsible for shipping your product to production or authorizing your product to ship to production or signing off on your your your product being shipped to production if you had software engineers you had testers you had analysts and you had operations you had security legal maybe and product management if you had all of those folk in a room and you asked them to make a list of all of the things that have to be true regardless of what we're working on but regardless of that so nothing to do with the acceptance criteria or what it is we're going to deliver what's a list of things that have to be true in order for us to ship to production do we need documentation how much what needs to be in it do we need to do testing what type of testing how much testing is okay for us to be happy to ship to production make a list of all of those things that have to be true that's effectively your definition of done do we need to support 10,000 simultaneous users if we need to support 10,000 simultaneous users then the performance testing for 10,000 simultaneous users has to have passed and there's all kinds of things like that that can go in there and we might want to think about code quality we might want to think about refactoring we might want to think about readability unit tests code reviews these are all things that go to the quality of our product so we're not talking about scope or features just the quality and that's what the engineering team the the scrum team the development team is accountable for the development team is accountable for quality not quantity of work okay and whereas the acceptance criteria are the if you think of a piece of work a product backlog item which might be of any type you like your product backlog item you're going to have some conversations with the product owner and with stakeholders and your acceptance criteria are your measures by which the folks that accept that your items have been completed to the the level that they desire and are met so I acceptance criteria might be about features it's going to be about behaviors you might have a behavior based list of acceptance criteria these are all customer centric business centric ideas both the the story the backlog item and the acceptance criteria is around making sure we understand what we're going to go bill definition of done is around the minimum level of quality required for the how we go build it I hope that kind of separates those two things a little bit and makes it easier to define those two we need a definition of done having acceptance criteria is not good enough to also be our definition of done at the same time we need that extra piece ah okay so that was the first question about conflating definition of done with acceptance criteria it's pretty common for for that to be something that happens the second question was around spike versus refinement should we have a spike or should it just be part of refinement I get that question a lot how do we handle our something we don't understand we have a piece of work that we need to do we don't understand it yet we've identified that we need to do some learning or we need to do some experimentation around that piece of work how do we represent that work there's one school of thought that we should create a product backlog item that would be cut we would call a spike which is a time boxed amount of learning that goes into our sprint and we it has story points and we get credit for for doing that work and I disagree with spikes I don't believe spikes are necessary and I believe that spikes reduce transparency for the amount of work we can get done it makes it seem like we can deliver more work than we can because we did a bunch of story points that were just investigation work rather than actual work that we didn't deliver any value directly to the customer you using a spiked spikes our informational output rather than value output or learnings output rather than value output which I'm not saying that learnings aren't valuable they are and but they're not what the customer is paying for the customer is paying for value all the stakeholders are paying for value so in scrum there already is a mechanism for a time for the development team to look at things on your product backlog that are coming up in future sprints and gain more understanding of what those items are we call that refinement it doesn't have a specific event or time box the scrum guide defines it as maybe you shouldn't spend more than 10% of your time in refinement but the reality is if you're and if you really understand the stuff on your product backlog you probably spend less than 10% of your time in refinement but if you find something on your product backlog that's super-complicated that we really don't understand that we're going to have to work together work with a bunch of other folks you know get some technology experts in do some investigation talk to the customer discuss trade offs maybe for some things we spend more than 10% of our time during the sprint in refinement we'd like to keep it to the minimum we need but maybe we need a little bit more than we usually do and that refinement is just work that we have to do for things coming up it could be part of our UX work it could be part of our analysis it could be part of a skiing the customer questions it could be implementation things that we need we have to order servers we have to whatever those things are and that for me is just refinement I don't want it represented on my backlog because there's an amount of time that we have in the sprint our capacity for the sprint based on the people that we've got and any vacations and things they have and some time is just taken away for other things and that's okay that's kind of the reality of working in an organization there's not just one product there's many other product I as a software engineer may have other responsibilities than just showing progress on a particular product and I might have some support work I have to do I might have some training that I have to go do I might have some some business as usual stuff I need to do some checks in the morning when I come in this is all time there is not product work and if it's not product work I prefer not to have it represented on the product backlog because it's not to do with the product it's not providing us with value everything on the product backlog should be things that are valuable to our customer defined in a way that they can understand our customer our user our stakeholder whatever you want to call it and I think that idea kind of bleeds in to our ad hoc work how do we deal with ad hoc work in the sprint and so what I the way I normally try and explain this is with a little bit of our a diagram okay so let's say we have we figured out what our capacity for our sprint is and it's about it's about this big okay I'll move that a little bit to the left there we go it's about this big this is our capacity for the sprint and that includes all the people whatever whatever we're going to do that's just the box that we can fill and we're going to have some things that we know we're going to have to do so for example and I might take 10% of my time for refinement okay I've got a little bit of work doing refinement and that's that's work that's already allocated I'm gonna make sure that you know I know only have 90 percent left to go do that and then I I find out that um we've got some BAU business as usual there's some checks that have to be run in the morning there's some data that has to be analyzed and has to be done every day or every second day or every week or whatever that is and we look at that work across our whole team and it takes about 20% of our time we just take a look at that and that's that's what we feel it takes so this is 20% for what b8 for BAU I'm just gonna call that BAU business as usual so I'm gonna stick that in there okay okay well we've get 70% of our time left but we need to hold some of our capacity we you know we're not our quality level is not where we would like it to be and we need to spend some amount of time working on things that are wrong in production so either productions down there's a bug there's a customer support request whatever those things are they're just things that are not working properly oh my creator posted let's take that away so we're gonna spend 20% of our time on support slash live issues you can call that whatever you want but that's effectively effectively what it is support slash live issues okay so we have 50% of our space left 50% has taken by by other things that's that's that's okay so let's say we have all of the rest of that time is for our oh no no no we've got we've got another thing we need to look at let's say 10% or at bunks you know those little things that happen during the sprint or things that get left over that we didn't really spot that are too small to fit in a hole sprint goal and but not big enough sorry not big enough to justify our whole sprint goal and but too small even if you you know you don't want to have a sprint that's a bug-fix sprint that's gonna be a major problem so we're gonna have that ten percent so now we have forty percent of our time which is our work let's call it our goal our sprint goal and we have forty percent of our time to allocate to our sprint goal is this okay does the scrum guide say this is okay it it does the scrum guide doesn't say how much of your time during the sprint has to be towards the Sprint goal it just implies that as much as possible this might be what's possible we might only be able to spend 30% of our sprint focused on our sprint goal so that's the focus for the team if you think of the scrum values we want focus and we've we've got some focus but then we've got some leftover bugs I've got those little little things that we need to fix we'll get some support incidents because some businesses usually got some refinement okay however everything I'm trying to think how I'm going to represent this I'm just gonna do align all of this piece here bugs ah let's see bugs and live life site incidents and be a you are and opportunities for automation that's the way I like to describe it okay all except I can't spell opportunities but you get the idea and we have and okay I'm gonna get another word for that let's see if it would let me do that technical debt anything that's not automated is technical debt so if it can be automated and it's not automated then its technical debt so maybe our quality level isn't good enough that's why we're getting 10% of our time spent on bugs what can we do let's have a discussion during our retrospective how can we make that 10 percent smaller how can we change our application change our deployment change the way we do things in order to have less bugs in production that's that's one thing we can do why do we have support LifeSite issues is there something we've not automated in an admin system that means we have to go do it is there some downtime a good example as the azure devops team ran into an issue where for example if the profile service for Azure DevOps failed then the entire system stopped working does it make sense for you as a software engineer not to be able to commit code because it can't go pull your profile picture and your friendly display name it doesn't make any sense it should be able to continue without those things so they had to go and add some work to their backlog they had to do work to change their architecture to support the circuit breaker pattern and that circuit breaker patent allowed them to remove that support time remove that support work and actually allowed them to get rid of some of their bug time as well maybe some of their BAU too because it's all wrapped up in that things are going wrong in production and we have to go sort Atty we've got to go monitor these things because we're having this problem so there's some time that we can save there the idea is how can we make the goal bigger and these other things smaller okay that would be one of the things that I want the team to bring up at the retrospective so to answer the question how do we deal with ad-hoc work um it just takes time away from the goal we reserve some time for our ad hoc work we're open and transparent about how much time we're reserving I might I might like to see something like this diagram for my team and I want to be able to focus on bring it up the retrospective and focus on what can we do to reduce those things so that was really the three questions that I had today there was conflating definition of done an acceptance criteria they are not the same thing they are separate things definition of done is about the minimum level of quality for delivering how acceptance criteria is about adding more detail to the what I talked a little bit about spikes versus refinement you can have a spike on your product backlog but I think the the a better way is really to focus on refinement as the activity for figuring some of that stuff out so you get out of Ament and and then as part of that story because refinement just takes ten percent of your time up to ten percent of your time or not not on average more than ten percent of your time and I also talked a little bit of a ad hoc work and how that fit into our goal for scrum there sees other things that we have to work on and how do we balance that as a team as long as we're open and transparent that's what counts okay so I'm going to leave it there like I said I was up very late I was teaching till 1:00 a.m. last night in PST time zone from GMT so I am tired and I've answered all of the questions that we have I would definitely ask if you've got any questions that you don't want anybody to know that you're asking uh you could use this link here to ask that question anonymously if you are if you don't mind you can just ask in any of the chats and I will hopefully get to it and please let me know if the LinkedIn video worked I don't know why there's a problem there but for now I will see you next Wednesday unless I see you before okay thank you"
  },
  {
    "Title": "Mastering Site Reliability: Insights from Azure DevOps on Building a Resilient Live Site Culture",
    "Description": "Explore proven strategies from Azure DevOps for building resilient, reliable software systems—covering transparency, automation, telemetry, incident response, and team culture.",
    "ResourceId": "5bgcpPqcGlw",
    "Url": "https://www.youtube.com/watch?v=5bgcpPqcGlw",
    "Date": "2020-06-04T02:05:28Z",
    "Captions": "Hello and welcome to Nikhil Agility with Martin Intuit. I'm Martin Intuit and I'm going to be talking about the live site culture and site reliability in the Azure DevOps team at Microsoft.\n\nOkay, hey, I'm welcome. Today I want to talk a little bit about site reliability engineering. It's something that I spend a lot of time thinking about because I have many customers who also have operational needs as well as having the typical engineering needs that they have. I think it's important to find that balance between engineering and operations, and the Azure DevOps team have an interesting story about how they've managed to create that balance and create a culture inside of their organisation supporting live site and doing it with engineering teams.\n\nSo we're going to cover quite a few different topics, and I have a lot of information here about how the Azure DevOps team do their work as well as how they interact with us, the customers. But just to give you an overview, we're going to talk about transparency and how they manage to build trust with their customers. We're going to talk about the amount of telemetry that they collect and how they organise that. So how open and transparent actually are they with customers and how much telemetry do they write? And then how do they organise themselves around responding to things that happen? \n\nSo there's going to be plenty of things that happen. They do scrum; they have three-week sprints. How do they make sure that they're still able to deliver value while also being able to get other things done as well? Get their operational work done. What if the site goes down? What if there are other pieces of work that would make the site more efficient and less likely to go down? How do they prioritise that work? \n\nAnd then we can have a little bit of discussion about automation. Automation is very important for an agile story. We talk about it all the time in scrum that your definition of done at the end of every sprint, your application should be potentially shippable with no further work required by the engineering team to make that happen. So if your business decides, \"Let's ship to production,\" there's not anything else for the engineering team to do. Ultimately, your product owner can just push a button and ship to production, and that should be as much as is necessary.\n\nAnd then there's a little bit of a discussion around investigation and getting to the root cause and how to continually improve in your environment. I think that's important as well. We talked a lot about in complex systems; it can be impossible to get to a root cause. If that were true, we would never visit the doctor because there would be no point. There are certain causes that we can identify. We may not get everything, but we can certainly do our due diligence and figure out how to get there.\n\nBut first, I have a little short story about an organisation that you may or may not be familiar with. It's the story of how a company with nearly 400 million dollars in assets went bankrupt in 45 minutes because of a field deployment. This was a company called the Knight Capital Group. They were listed on the New York Stock Exchange, and they were implementing effectively a new order handling system that allowed them to create child orders. This allowed them to do something they hadn't done before, but it required that they replaced the old code with new code and be able to integrate from there. \n\nIt was really nine years of application building that had gone into this system. So you can imagine if you have nine years of code in there, there's going to be maybe a lot of spaghetti. There's going to be a lot of difficult areas, lots of leftover things that people have just built and ignored for many years. So they did decide to repurpose an existing flag in the system in order to activate the new code. That was one of the things that they did, which potentially could have a negative result or negative impact. \n\nAt deployment time, their engineer, their technician, during the deployment only copied the new code to seven of the eight firemen. Then they flipped the switch, turned on that flag, and they went live. Because they had that fault in the number of servers that were active with the new code, the system was not performing correctly. It was doing strange things; it wasn't able to process the orders at all that were coming through, and they started losing at just under two hundred thousand dollars per minute.\n\nBecause the system wasn't working as expected, they then obviously were going to try and fix it. So they dropped everything; everybody's here on fire. They came running, trying to figure it out, and they just couldn't figure out what the problem was. For that whole day, they spent a whole day with the system down, and they couldn't figure out what the problem was. They didn't understand that it was just one server that was acting up. Everything looked like it was normal. You go test a server; things are good. Why is this not working? Couldn't figure it out. \n\nAt the end of that day, they were losing, they lost four hundred and sixty million dollars, and they filed for bankruptcy protection. An interesting question you may ask yourself is, what would be the impact in your organisation of a key or critical platform that you create for your customers being down for that length of time? What can you do to prevent it? \n\nIt's interesting; we know a lot about what happened to the Knight Capital Group because they were a publicly listed company, and you can see their SEC filing and see what happened. But they had no automation, and they had no procedures for back-out plans, no anything. So it was a massive risk for the organisation. Really, we need to think about how do you get better at doing something like that? \n\nOne of the things that I see a lot of organisations doing is thinking that they can create a back-up plan, that they can reverse the thing that they failed to do forwards and be successful at it. If you can't be successful at deploying your product, the chances of you being able to reverse that deployment are a lot lower than your ability to deploy in the first place. \n\nSo I think it's really a losing proposition. One of the things that I see most engineering organisations that move towards continuous delivery, move towards DevOps, move towards delivering faster is that they observe a roll-forwards mentality rather than enabling things like rollback, which are just really not viable anymore. \n\nMicrosoft has made a lot of changes over the last few years. Ten years ago, Microsoft was a waterfall organisation. No matter how much you saw tools for maybe doing agile things, they were a waterfall organisation. They were deploying Visual Studio and TFS every two years. That's the particular department that I'm going to talk about today instead of Microsoft. Times have changed. They were deploying every two years; they were in a service pack halfway, and that's no longer viable. It's no longer okay to respond to feedback from your customers on those types of timeframes. \n\nA big example of that has been Windows with their Windows 8, a massive failure of understanding the customers' needs. There was a big disconnect and a multi-billion dollar loss therefore, basically not having tighter feedback loops. So it is important; it is something that you will need to do with your customers. Shorten those feedback loops, understand their needs a little bit better, and get things out the door. \n\nEven the Windows team, who deploy to nearly a billion machines worldwide and have four and a half thousand software engineers working on their product, are now doing continuous delivery to production. We get it; you get it as the general public. Every 30 days, it used to be Patch Tuesday. Now it's a whole new version of Windows Tuesday and has new features, new capabilities on that continuous cadence so they can get feedback. \n\nThey do have short releases as well; they're not just deploying once a month. I have two machines here that are on the Windows Insider group, which I get weekly deployments as long as everything looks good. If you're inside of Microsoft and on a corporate build machine, which the CEO is, then you get daily builds from the dev branch of Windows. \n\nSo it's important; quality is important. They've actually gone from maybe deploying once or twice a year across even all of their products, going to production once or twice a year, to something that looks a little bit more staggering and over a hundred and sixty-three thousand deployments per day. That's to any environment, but that's an incredible figure across the organisation, and that's with ninety-six thousand engineers. So there's more than one deployment per day per engineer inside of Microsoft now. \n\nTwo million git commits per month, five hundred million text executions per day. This is a lot of data, a lot of things going on. In order to support that, the team that builds the product, Microsoft uses a product called Azure DevOps, which used to be called TFS. It's also been called Visual Studio Online; it's also been called TFS services. What else has had a bit of an identity crisis over the years? \n\nBut the Azure DevOps platform has been Microsoft's platform of choice. It was built in order to support their transition towards this new way of working, and almost everybody inside of Microsoft is now using it to manage their work and deploy. Some of them have moved over onto GitHub for source control, but for work item tracking, for automated builds, the majority of folks inside of Microsoft, my understanding is they're using Azure DevOps. \n\nSo it was built with that in mind, with scale in mind, with things that large in mind. This latest from Donovan Brown's presentation has fairly big numbers. In order to support this, creating the platform that Microsoft and many other people around the world use to manage their engineering efforts, the Azure DevOps team had to create this live site culture inside of their organisation. \n\nOne of the things that they really focus on is, \"You code it, you build it, you deploy it, you run it.\" If you're going to be the one that writes the code, you should be the one that gets up at three o'clock in the morning because the thing that you've written is not working properly. There are some caveats to that; we'll talk about as we go through. But ultimately, the software engineers, the people writing the code, need to feel the pain of any sort of problems with either deployment or supporting the product or managing it online, or security, or all of the things that would be a problem. \n\nSo they don't necessarily have other departments that manage these things. No, this is one of the big transitions between other big... yeah, transitions, the right word, but the big flip for organisations is that change from being a predominantly departmental-based organisation towards being cross-functional delivery teams who are able to take an idea and get it all the way to production without needing to be dependent upon external teams. \n\nThat's really important for that transition towards a greater degree of agility because as soon as you're dependent upon somebody else outside of your organisation that has different motivations, different priorities, then you're not going to be able to get things done very quickly because at some point you're going to have to wait for them. We have to remove those wait times, so we bring rather than how we're going out to an external department, we bring that department into the team. \n\nSo there's representation on the team of security, of legal, of obviously coding, engineering, test, operations, and all of those ideas, those hats, those roles are represented inside of the team. You need to automate; you need to learn and share with each other all the time. We need to be getting better at what we do constantly, and we need a lot of data to help us figure out what's going on. \n\nAnybody that manages our live site will know that live comes first. No matter what you're doing, if production is down, you're going to have to drop everything you're doing and go figure that out. So how do we make sure that we support that in a way of organising people? This is about how the Azure DevOps team have managed to do that. \n\nThis is an example, a story of a way that you can do that. Don't just hate the way they're doing things; implement it yourself. You want to see what works for you in your organisation, within your organisational constraints, within your application and platform constraints as well. This particular team is building our web application, but there are other teams inside of Microsoft that use a similar process in order to manage desktop as well as Windows and other types of application models. \n\nSo you need to create a culture within which this works. Live site is about bringing the right people together from both app and platforms so that we can continue and keep our system up to have the lovely things that we as users of the system really want. But why is it so important to keep everything up? \n\nThere are great examples of how those things have been difficult for organisations in the past. Visual Studio Online, which was one of the names for Azure DevOps, has had outages. It's not possible for a system not to have outages; it's about how you deal with them when they happen. Visual Studio Online has been down; Amazon has been down. There's a start-up with 25 million in funding in crisis because an employee deleted the wrong files. These things happen. \n\nWe want to do our best to prevent those things from happening. We want to do our best to respond to those things when they do happen, and we want to do our best to make sure that things that do happen don't continue to happen. That's how we build trust with our customers because really, we've got to be able to deploy new features. \n\nThat's the ultimate battle between engineering and operations, that idea of engineering is measured by the number of fantastic features they get into production, but operations is measured by uptime. Generally, those things are antagonistic. If you want to keep it up, you don't deploy new features. If you want to deploy new features, you're not going to be able to keep it up. \n\nSo there's a fight there, but when we bring those two groups together, they can have a real conversation about how they can do both of those things and still be able to delight their customers, have high levels of uptime, have fantastic features, and be able to move forward. That's really what I want to talk about as we go through this today. \n\nSo first thing I want to talk about is transparency. How does this team build transparency with their customers? I'm going to kind of split trying to split between good practices, complementary practices that you can use with your scrum team or your Kanban team as part of your agile practices, as well as what this team specifically has done. \n\nIt's why I'm going to show some of the details and governance of the work that they've done around that. We need transparency to build trust with our customers. We need to be understanding of things when they happen, as well as doing our best to understand how and why they happened so that we can figure out what to do about it. \n\nCustomers are not happy if you just tell them the system was down, we rebooted the server, and now it's back up again. Why was it down? Is it going to go down again? We no longer have a level of confidence in your ability to maintain that system if you don't even know why there's a problem or why it's going down. \n\nSo we need to understand that and build transparency to build trust with our customers. This is an example of some of the output you will get from the Azure DevOps team. You'll be able to go find on the Visual Studio... well, this is from the Visual Studio Team Services blog. It's the same blog; it's just been moved around a little bit. But it's the Azure DevOps blog, and they do a full post-mortem, and they publish all of the data. \n\nThey publish it to show, and here, if you maybe... I can... well, that's not what I wanted to do. I wanted to zoom in. There was my magnifying glass. There we go. They show the data when things went bad, what they've investigated in order to understand what went bad, how they've managed or tried to mitigate it, the actions they took, and the timeline that that went through. \n\nSo it's a really powerful story there, and they also publish an idea of what they're going to go do to fix it as well. So if I zoom it... there we go. They're going to make a bunch of commitments to their customers to improve the service to make sure that that type of problem, those outages, don't happen again. For every outage of Azure DevOps, big and small, you will find these types of posts and this type of data. \n\nThe smaller the outage, the less impact the outage, obviously, the less effort you want to spend in some of these areas. But when the whole system's down, you're going to see a post, and that looks like this with a bunch of data in it. The leadership of the Azure DevOps team is adamant that they want to create that transparency. \n\nThis is a post from a reply that Brian Harry, who was the product unit manager for that department, really instigated those ideas of moving to the cloud and empowered that part of the organisation to make the changes that resulted in them becoming an agile organisation, delivering to production at least every three weeks. You can see the type of transparency that he's trying to create. He's saying, \"You know, we're not going to be successful 100% of the time. That's just reality. We have to accept reality. There's no such thing as a hundred percent uptime; it's just not possible, no matter what folks say. You have to have downtime for maintenance. \n\nWe have to have a little bit of wiggle room; you can't be 100 percent up. But how do we make sure that we minimise the amount of downtime that we have? Well, there's lots of things that we can do. The first is to communicate, letting people know that there's some sort of problem, that there's an issue. This is an application that the Azure DevOps team have created. In 2013, it was just a spreadsheet, and it was 45 minutes was their time to notify their customers. \n\nIn 2017, that's down to 15 minutes. Within 15 minutes of that red button getting pushed, understanding that there's a problem, there's something up on the status page, there's something up on the blog. For the internal Microsoft customers and the key stakeholders, there are emails going out to the people that need to know. I have a couple of customers who are in the top 20 largest customers on Azure DevOps, and they get notifications almost before they know that there's a problem, which is really powerful for them as well to then be able to have the real discussions they need inside of their organisation. \n\nYes, we're aware of the problem; Microsoft's working to fix it. Those things build trust. If we know, we understand, we're aware, then we can do that. In order to preempt this, you've got the... I remember one of my good friends at Microsoft, when they first moved to the cloud, said one of the reasons that he made his first got onto Twitter first was when they moved to the cloud because he found out from people on Twitter that the system was down before his engineering team knew that the system was down. \n\nAs software engineers, being that the customers are software engineers as well, we are particularly a whiny and complaining group of people. We are happy to point the finger when something's not working properly, and he found out first there. So how do you create an environment within which you know first, not your customers? You don't want your customers to know before you do that there's a problem with the system. For that, we need telemetry; we need data, and we need to understand that data in order to create the right alerts to know what we're supposed to do and when that problem arises. \n\nIs that a problem we need to care about? Is that a problem that might go away? Do we just need to saunter up to that problem, or do we need to run up to that problem with everybody that we need? Figuring out what we can do to prevent incidents by looking at the data and seeing when things might be... you know, \"Okay, that was a bit... that data did not look good. If we'd had more users on the system at that point in time, we would have had a problem.\" What can we do to make sure that next time, whatever that data is that spikes or drops in the way that it did, how do we make sure that we get that moving? \n\nIncident prevention and continuous improvement: how do we continually go around those loops identifying the root causes and figuring it out? The Azure DevOps team have created their own telemetry pipeline so that they can understand that data and do something with it. They have implemented it in a lot of the work since their servers are deployed to Azure. They can take advantage of some of that Azure infrastructure that's there for everybody anyway. They don't have any special powers in Azure; Azure treats them like customers as well, albeit pretty big customers and somebody internal that has everybody's email address and can go look them up, but that's a different matter. \n\nHaving monitoring agents installed on all of your servers and having a set of metrics that can help you understand what that looks like and then feed that all into a big data platform. They have built something called Cosmos, where they feed all of that data in, and then they're able to use a query platform that they built, Koku Store, that allows them to analyse that data and look for trends, look for things that are worrying. \n\nYou can have monitors, and you can have alerts; that's reactive. The alert triggers, you had a notification, you're going to go do something about it. But also, is there trends that you can look for in the data analysis to see when something's going to happen, even maybe before it does? They have access to Azure Diagnostics; they use Application Insights, which is built on top of Azure, and it allows you to, on any platform, and they have APIs for all the platforms. It's just a set of services that collect and analyse metrics, and then they feed all of that data into an Azure data lake. \n\nA lot of these systems, the features were built out as part of a lot of teams at Microsoft moving towards this model. A very powerful platform; I use it myself on my tools as well. Something that they really realised was that they have to gather everything. There's no data that is unimportant. Are you going to gather data about your SLAs? You've got to gather data about alerts, your DevOps pipelines, your experiments that are going on. You're going to collect data about your network performance, your platform, all of the things that are going on, even then to trace telemetry power flux. Everything is going to be collected in that way. \n\nAt the moment, or at least at the point in time where I got access to an understanding of the volume of data they were collecting, about seven terabytes of data per day on average, with people using the system and getting an understanding of all of that data: KPIs, job history, pair of characters, trace activity logs, platform and network capabilities. In order to do that, you really have to understand the customer experience telemetry. \n\nSo a user accesses the system; it goes through a bunch of tiers. It potentially accesses the database and then serves as a result back to the customer. All of your interactivity with many of these systems is user-activated, and when it's user-activated, you really have to understand the flow. One of the things that the Azure DevOps team do is they have an IDE that is generated for every call into the system that they pass all the way through down to SQL Server, and they collect performance and trace across the board. \n\nThere's actually a front-end flag that you can turn on, and I'll maybe try and look it up or speak to one of the teams to see where you turn that on again. I can never remember. Oh, underscore diagnostics on. Let's see if I can figure it out. \n\nLet me just switch to... I have a lot of Azure DevOps that I have access to, a lot of different platforms and systems, so I'm just going to bring that up. It is just taking its time to load, so maybe I stick it over here and do it. Will you? That once it's loaded? Oh no, I have to hit switch at the bottom. Then you'll love it when you've got a tall screen and the button's way at the bottom. That's a user experience. \n\nSo they're able to collect that telemetry, that pair of telemetry across their entire organisation. So let me go into my migration tools setup. Let's see if I can remember how to do this. I'm pretty sure it's underscore... oh, is it underscore diagnostics? It is. That's what happens when you've been working with the team for too long. \n\nSo if I turn on diagnostics and perf bar, and you can do this on any of your accounts as well, I just want to show you what it is, the kind of capabilities that they're collecting. You can see at the bottom of the screen, it's very small. Can I pop a mic? Can I pop a magnifying glass? There we go. \n\nThey are collecting the trace and time and things that have happened throughout the entire system, all the way through every web service down to every database call, every plugin, so that you can go analyse that. If you're one of the developers on this team, you want as much data as possible to go figure that out. You can see at the bottom there's actually a little smiley face there. I don't know if you can see that all the way down there. A little smiley face means it met the KPI for how long pages are supposed to load. If you have a smiley face, if you have a sad face, things are not going so well, and it says all is good; all the checks are working out. \n\nThat's one of the ways that the team are able to leverage that. For some reason, I have lost all of the buttons on my office, so let me just close that and reopen it so I can get back showing you. There we go; I've got a pack. Don't you love it when you find where we were about there? \n\nIt's like, \"Ah!\" So they have this ability to correlate everything across the board, end to end, and have that set up and working. We can see all the dependencies; they can get all of the telemetry data and set all of that up. It means that they can check, have metrics and trend analysis to see what's going on. When something goes below the trend that they want, they can dive in and see exactly when things happen, what the problem was, how many people were affected, and be able to take to get that pair of access to that extra information that they have. \n\nI'm getting that extended down all the way to their dependencies. If they are dependent upon the SQL Server and the SQL services, then they're able to get all of that as well and see the dependency activities. The amount of data that they collect is unbelievable because they need to keep a system up with all of the software engineers that are users of this system, checking in code. Think about that; if Azure DevOps goes down, all of the millions of people that use it and all of the companies that have their software engineers reliant upon it, they're all down; they're all unavailable. It's not a good place to be. \n\nYou need to be able to go deep on the telemetry and really understand what's going on at every level. They do have activity logs schema. I'm just going to go through this very quickly. I am happy to provide the slides out to anybody who wants to give me a shout; I will do that. But they collect all of their telemetry across the board, really understand, and that tool that I just showed... oh, there we go; there's the URL. I did not even know it was in here, but they surfaced that data to the developers so that they can see it and get access to it. \n\nThey also aggregate it across the entire service, so they get an insight as to what's going on holistically, but also per customer as well. If you've got everybody at a particular customer that's down, then we need to go deal with that. It's not okay to say we have 5,000 customers and one customer is down, so that's not so bad. But one customer is down; everybody at that one customer cannot do the job that they do on the service. \n\nYou need to make sure that you can see that as well and see it in real-time so that you can do something about it and get a true understanding of what's going on. I think that's super-duper important. \n\nOkay, and that idea that customers are a bag of sand, I love that one. Every grain of sand is a customer, and every grain is important. If somebody is having a problem, they're going to tell ten of their friends that they have a problem. You can see here they're doing an impact threshold to understand when do we need to have a bigger conversation when we're in breach of SLA so that we can go do something about it. \n\nBut also, the team, I know that they go back over this data to see even the smaller blips when people had problems or performance problems. Let's go talk to the customer, figure out what the problem was, and what can we do to go and fix that up. You've got to find a balance between the amount of noise, the amount of data you get, and having the alerts to the developers. You've got to be able to push new features at the same time. \n\nIf everybody's interrupted all the time, so trying to minimise those alerts so that they're only the things that are important. You'll know if you get an email that is... you get a hundred emails from one service, you're going to either turn that service off, turn the emails off, or create a rule and shove them in a folder somewhere where nobody will ever see them. \n\nSo that's really important, balancing that noise to signal. Then you also need to be able to respond as quickly as possible to the problems that come up. You can't have the development team chucking that code over the wall, over the fence, to the software engineer, the operations team, because what they offer up, what's going to happen is the operations team are going to just bolt on some type of monitoring that they can do. \n\nWhereas if engineering, the dev team, is building out the monitoring, they are able to add deep holistic monitoring into their application and have a much better experience for the engineers out trying to figure out the problem. Operations who are trying to support and maintain it. So they built around this idea of SRE, bringing DevOps and SRE together. \n\nThey used to have developers, coders, testers, and operations as completely separate teams. Now they've got a combined engineering team, which has feature team engineers, which are your traditional coders and testers. That's bringing that group together, and that's your feature team engineers. But also, on the same team, they have live site engineers. \n\nThey have two pieces of that story. I've got it here in blue and purple. They have a feature team live site engineer, which is a rotating role for the feature team engineers. So at least one of the, if not two, of the feature team engineers for a sprint will be designated as a feature team live site engineer. That live site engineer is not going to be looking at value work, i.e., your traditional sprint backlog. They are solely going to be looking at work to help improve the stability of the platform, maintain and manage that. \n\nThey also have access to site reliability engineers who are dedicated site reliability engineering folks and that have deep expertise in platform and monitoring to leverage. They're all part of the same team. You have a combined engineering team that includes the rotating roles as well as the dedicated live site SRE. Site reliability engineering is an important concept to create a world in which we can get very quick delivery to a platform that's up as much as possible. \n\nWe want to automate as much as possible, but there are always going to be things that we have to do. You might have some kind of compliance, security; those are all things that we have to do. This is the pyramid of things we must do, up to the most valuable things at the top. Product contributions are at the top, and a live site engineer, that feature site live site engineer and site reliability engineer are going to be working together and doing stuff at the bottom of this pyramid. \n\nThen flowing, as those things are complete, up to the top of the pyramid. The last thing they do is product contributions when everything else is complete. That's a powerful story because they have to be able to respond to allowance. Those are the folks they assign feature live site engineers. They are the ones that get woken up at 3 o'clock in the morning to go deal with that problem. \n\nThe Azure DevOps team have built, and I don't know what you call it, an alerting system and auto-routing system with different ways those alerts can be triggered. Social, human, that's a support call alerting and customer support, and it goes into a rules engine and then allocates that to the combined engineering team that is accountable for that part of the system, that part of the code. \n\nThen they will do an impact assessment and decide what they want to do, how they're going to respond to this problem. Are they going to do a generic business errors investigation? They'll put it on the backlog; we'll get to it in the morning when everybody wakes up. Or are we going to have to wake a bunch of people up and do the 24/7 live incident? \n\nWhen the live incident happens, they're going to create a bridge, an incident bridge, with all the people on it that they need to go figure that out. The feature team live site engineer is on there; they're the allocated person on the engineering team, as well as the SREs. But maybe they need to bring in additional partners. If SQL Server is operating slow, then maybe they have to bring in somebody from Azure. Executive leadership might be brought in; there may be an incident manager. There are all sorts of things that are triggered in order to make those things happen, get everybody together, and get a resolution to the problem. \n\nThat idea of having those live site teams inside of a software engineering team, they have slightly bigger teams than you would traditionally see for scrum teams. Scrum teams are traditionally between three and nine. They do between ten and twelve people. They have two people on the team that is the live site team, so they have a feature team which are looking at the sprint backlog and dealing with those issues, and then the live site team only deals with live site issues and interruptions. \n\nSo they're shielding the team from those potential disruptions while still working on things that would add value to the product but from the perspective of live site issues. So mitigating things for future live site issues. That group has a rotating group; it will be a different group each sprint. \n\nSo again, they have priorities. If there's a live site incident, that's their highest priority. If there is no live site incident, then they're going to be looking at past live site mitigation tasks. So that could be things that enable us to get better at live site, or it could be things that we've identified as being a problem that really end up in that category of technical debt. Things that are not automated, things that are not quite in a way they need to be, and do that. \n\nThen they're going to look at improvements in monitoring, telemetry, and alerts way before they look at adding any new features. That is their focus. The team that works on this, they do three-week sprints. During sprint, for example, during sprint 1:24, the deployment is ongoing for sprint 123. It takes a long time to do a deployment on a large system like this. It takes more than a few days; it takes more than a week, to be honest, to get that deployed. \n\nThe live site engineers are working alongside the feature team, but they're kind of working at loggerheads there. They also need to be able to manage things at scale, and the only way to do that is to automate. We need to automate everything; we need to automate as much as possible. People make mistakes; that's one of the reasons to automate. People need to go to sleep, and people forget things. \n\nThink about that engineering team at the start for the Knight Capital Group that neglected to deploy to one of the servers. People forget things; people make mistakes. Automated processes can tell us when they fail, when they don't get everything done. So being able to troubleshoot those ideas, if we're automating, we can have alerts that find things much quicker and realise that something's wrong. \n\nOnce you start mitigating your problems, you might have some manual mitigations that you have to do. That would be the first thing that might happen. But if something like that happens often and you have the same mitigation task, you can get it to be automating the mitigation as well. Have the automated engine let that switch and then notify the engineers that there's a problem they need to go fix. \n\nBut you've already mitigated the problem. That doesn't mean we don't have work to do. Because we're monitoring the health all the time, we're understanding when those mitigating tasks have been activated and how do we get better at not having those problems in the first place? That's really important. \n\nGetting to the root cause is important. Doing some kind of post-mortem to really understand what can be done to make our product better, to improve quality so that we don't have those issues in the future. Each team, each feature team, has their own goals and measures and repair times that they can monitor and see what's happening and be able to respond to change more quickly. \n\nHow do we know when the team is being good at responding to change? They should be repairing problems that come up quickly; they should be having less problems over time. These are indications that we can look at to see. \n\nSo kind of in conclusion, we need quality and transparency to build customer trust. We need to have full transparency so the customers see everything that's going on. We taught them about the problems; we helped figure out how to make them better, and we make sure everybody's involved. We collect as much telemetry as possible so that we can have better insights into what's going on. \n\nWe need to organise around responding more quickly. So that's with alerts, with coal chains, with understanding who do we have to go deal with, who do we have to go wake up. The SREs and engineering team, live site team inside of the engineering team is what allows for that for this group. Automate everything, as far as I'm concerned. If it's not automated, it's technical debt. That's something you need to go work on. You shouldn't have anything that is not automated. \n\nThen you have to get as close to the root cause as possible in order to continuously improve and try and figure out what those things are. Just to... and there are some good... well, I'll make myself smaller. There we go. There are some good articles, videos there on SRE at Microsoft, how the different teams do it and what they mean by that. \n\nIf I... how do I make myself disappear? Hey, what? I'll move over here. There we go. So you get a picture of that and go to that URL, and you will be able to download this presentation. Please feel free to get in touch with me anytime you want to. I am on Microsoft Teams on that URL. I'm on Twitter, and you can WhatsApp me and find more information on my blog. I'm happy to share presentations; all you have to do is ask. \n\nOkay, thank you very much for listening, and I hope you're able to come to one of our scrum classes. We deliver a number of scrum data classes, and we are delivering all of our courses and material as live virtual classrooms at the moment. So please go take a look at nkdagility.com. \n\nOkay, thank you very much. Like and subscribe."
  },
  {
    "Title": "Unlocking Agile Success: Your Guide to the Professional Scrum Foundations Class and PSM I Assessment",
    "Description": "Learn what to expect from the Professional Scrum Foundations class, key Scrum concepts, hands-on learning, and tips to prepare for the PSM I assessment.",
    "ResourceId": "pP8AnHBZEXc",
    "Url": "https://www.youtube.com/watch?v=pP8AnHBZEXc",
    "Date": "2020-05-28T05:34:33Z",
    "Captions": "Hello my name's Martin Intuit and today I'm going to be talking a little bit around the professional scrum foundations class and the PSM 1 assessment. Naked agility is available for DevOps and agile training and consulting. Contact us for a free consultation.\n\nOk so I have some things I want to cover. The two main things that I wanted to talk about unless we get some additional questions are the PSF class, how it works, what it's all about and why you would want, why we want to do one, and the PSM 1 assessment which is the result of the PSF class. That is the assessment that you get at the end of that class.\n\nSo first off the professional scrum foundations class I think is one of my favorite classes to teach and we work together in teams. So I just finished a PSF with my good friend Russell and we taught at 20 people at one customer. So it was a private class and we broke those 20 people down into three teams. So with three teams working on the same backlog, so they all get given the same topic, the same backlog, but they pick a team mascot and that makes each of the things that they're doing a little bit different. But they're effectively all working from the same backlog and they actually build software in the class. \n\nAnd I guess the crazy thing about the PSF is they actually build software in the class and I love that they do that. I've taught this class in Ghana for the Ghana police service, sorry, look on the police force and I had police officers, lighting police officers building software in the class that had never built software before. We do something super simple and we don't take technology and we help people out if they're struggling. But the idea is you're being creative, you're building something new and interesting. \n\nI think if I was teaching the police officers again I would probably use something like the scrum tail board game, something of that like where the activity, the creative activity that people are doing is to create a murder mystery novel and they do it in an iterative fashion. So I think that would be really interesting. But for this class I tend to always default to building software. My background is software engineering and it's, I guess I maybe I'm a bit of a masochist. My favorite part of the course is when folks find out they've got to build software in the class and they have 30 minutes for their sprint length to build the software. \n\nThe sprints actually, the working part is 30 minutes. They have a 10 minute planning, 15 minute review which is split between the teams because there's one review for all the teams and then 10 minute retrospective. You're supposed to do four sprints and when I teach this in person I have managed to get through four sprints. But I think the most that I've ever done in the virtual setting is two sprints and I'm planning to do something iteratively, getting making the class better in the next sprint. \n\nI'm gonna work with Russell next sprint, next class which is Monday Tuesday in Pacific time zone which is gonna be fun because I'm gonna be up late. At least Russell won't be up early and I'm going to deliberately focus on just doing two sprints and see how I can change the dynamic in the class with that. We do a lot of really awesome exercises in the class apart from actually building software and we work a lot. \n\nI actually have one of the PCs, one of the exercises that we do here. Let me, can I make myself a little, or just disappear, make myself disappear. There we go. This is the result of one of the longer exercises that we do and where we build out the students work together as a big group and in teams to come up with all of this information that's on the board here. \n\nSo we talked about the three roles in scrum and their core accountabilities. What we're trying to get to in this class is let's make sure everybody has the basic solid, everybody knows what our product owner is supposed to be, what the intent of the product owner role is. So then when they go back to their organization they can look at what somebody is doing in that role and say, well that's not enough, that's not going to give us the benefit that we're trying to achieve from this idea. \n\nSo we go through the three roles and our accountabilities and we also go through the three artifacts which is the pink things here and their transparency. So something that I've been using a lot is a transparent past, present and future for the artifacts so that you have complete transparency across the life of your project and that seems to, our product, that seems to work pretty well and has a good explanation for folks. \n\nAnd then we go into the empirical nature of each of the events and the thing that I think folks find super surprising about this class is the number of things that they find out that they were doing or that they were told as part of scrum but is not actually part of scrum. And it's something that people do and that's okay. I'm absolutely fine with complementary practices that make things better for groups but don't feel that you're forced to do those things. \n\nScrum doesn't talk about user stories, it doesn't talk about burndowns, it doesn't talk about velocity and it doesn't talk about any of those things. It doesn't talk about standing up during the daily scrum. These are all complimentary practices that organizations and teams may choose to use as part of their endeavour and it may work for them or they may want to choose something different in those practices. \n\nSo for example, what's a good one in, you know when I ask myself these questions I really should have an answer prepared but this is office hours rather than the presentation. So I just wanted to show you some of these things that were working on. But having complementary practices like standing up, there's a good one that some teams use. I have heard of teams in Norway that their daily plank instead of daily stand up and it might work for them. It doesn't work for everybody. You don't have to stand up. The purpose of the daily scrum is an inspect and adapt on the work you've done in the last 24 hours to plan or create an implementation plan for the next 24 hours. \n\nThat's what it is. How you figure out how to do that inside of that 15 minute event, that's up to you. We can make suggestions as coaches and trainers. We often make suggestions on how to fulfil that. You might in your daily scrum use the three questions: what did you do yesterday, what are you doing today and what are you, what's blocking you? If you were focused on the individual you might focus on the sprint goal. What did you do yesterday that helped the team progress towards the sprint goal? You might ask that or you might use a practice where you're looking at a board, a visualisation of the work that's going on and you look at the piece of work and have a conversation about how that work is progressing and who's been working on it and what's been happening and telling that story that way. \n\nSo you can focus on the people, you can focus on the work, you can focus on the data. If you're using the professional scrum with Kanban guide and adding those Kanban metrics, you're probably going to be looking at work item aging during the daily scrum. You want to be looking at is something getting close to our service level expectation? You know we have an expectation that anything we take on, any piece of work we take on will flow through our process within a particular time period. If it's starting to reach one of those boundaries then we want to have a deeper conversation about it. We want to talk about those things. \n\nOther things maybe we don't have to talk about, they're just progressing fine. So this was a very useful exercise that we do. It takes quite a considerable amount of time but it allows us to focus on what the events are, walk that floor and answer the questions that people have. What I usually do is I give, we had three teams, so I gave each team a team, got the accountabilities, a team got the transparencies and a team got the empiricism. And somebody from the team had to say what the thing was, what's supposed to happen in it and then we may be modified that a little bit or we added more to it. \n\nAnd then as we added more to it people started asking questions. And because they're asking questions there, then you know, doesn't this, isn't the scrum master the interface between the development team and the product owner? We can have a discussion about that and figure out that no way they're not at the interface between the development team and the scrum master. So that was a very useful exercise and it's part of a wider set of exercises that we use in the PSF and we had a lot of fun working through everything and figuring out what was going on. \n\nSo let me switch back. I would like you to feel free to ask any questions you would like. This is office hours, ask me anything. So I'm going to talk for a little while. I'm gonna hang out here if there were questions asked between the last office hours which was last Wednesday at 6:00 and this one this Wednesday at 6:00. And then feel free, are there not? Sorry, then I will be answering chat, anything, attempting to answer those questions and feel free to ask me any questions just now. I can see the chat or maybe I can see the chat for each of the platforms that I'm streaming to. \n\nAnd obviously if you want to have, if you want to ask me a question but not have anybody know that you've asked me that question, there's always this link here. If you go to Nicola doula T net forward slash ask and that is an anonymous question ask. You will just get a text box. Whatever you put in the text box is in danger of me reading out. So put in there what you want me to read out and then I will attempt to answer that question as much as I can. \n\nAs I said in my tweets about an hour ago, I'm happy to answer questions on any of the things that I deal with. I'm a professional scrum trainer with scrum dot org but I'm also a Microsoft MVP in DevOps. So I have both technical background. I was a software developer for ten years, I was a DevOps consultant for ten years and I've been a scrum trainer for ten years as well. So that experience of working with customers both in the US, I spent three years living in Seattle consulting there and in Europe where I've spent the last, whoa, seven years since 2013, who moved back from Seattle working across here as well. \n\nSo back to the PSF, I will, I just had a question that I had issues attempting to install the latest II do migrator. Do you mean the Azure DevOps migration tool? That unfortunately, I built, not unfortunately, it's a pretty good tool. Yes, I can probably help you with that. I would not be able to get into the technical details in here but if you tweet me at Mr. Hench, I'll happily help you out. And I haven't heard of anybody else having any problems. That doesn't mean there isn't problems and I would need to check that out. \n\nSomebody's having a problem installing another, installing the Azure DevOps migration tools which I did build. So I can certainly help you out with that. Again here, tweet me and I will directly help you out. On my website there's also a chat button and that will get directly to me and you can use your email. \n\nOkay Jerry, no problem. Where was I? Yes, PSF. So I really enjoy that whole aspect to the PSF of level setting. Every, the class that I just finished teaching Monday Tuesday was the third set of twenty people in the same company and we have three more classes scheduled now. So we're going to have a total of a hundred and twenty people going through this exercise, build up that level of knowledge inside of the organization and try and get to a little bit of a tipping point. If enough people understand the way things could be, and I'm saying could be rather than supposed to be, but could be, that they could get some benefit by jumping in there, then we can get to enough people, we can make that change in, maybe try and get it to stick inside the organization. \n\nSo training and training everybody is really important. The organizations where I've seen they've had the best and biggest impact from this type of thing have trained a very large majority of the people in the organization. I did training in Utah for a company and we trained everybody in the organization from the CEO all the way down to the software engineers and the guy driving the forklift in the warehouse. And that really helped set that idea of how people should expect to interact with software, how they should expect to interact in that software development world. \n\nAnd even the guy who drives a forklift in the warehouse had an iPad attached to his forklift and he had to interface with the software. So one of the things he learned going through the class was how to engage with the software team, how to understand why they might not be doing everything you want them to do because they have other priorities, why you don't want to be interrupting them all the time and changing what they work on. But also that he now felt empowered to give feedback. It's expected that you give feedback and we as a software engineering team want your feedback. And that was a very powerful story for them. \n\nSo the PSF again is a very powerful class. It's really the 101 and I want to start up doing scrum as one reason to use it. And another one that I've done quite often with organizations is the, we already know scrum, we've been doing it for a little while, we've picked up some bad habits and maybe we need to level set again. So I've actually taught the PSF more than once for the same group of people but with a large time span in between, maybe a couple of years. And that level set really helped solidify some of those ideas for that team. \n\nCool, so I have completed that class. I have a catch up with that team in two weeks and one of the reasons that I schedule a catch up with that group of people and after two weeks I call it a reify event. It's just an error but it gives them a chance to ask me any questions that they come up with and have an actual moment when they can do that, when they can get on our live call with me and do that. I'm quite happy always and if you were in one of my classes, I'm quite happy always to engage with those times. I'm always happy to answer questions, that's why I do this session as well. \n\nBut the PSM 1 assessment is what comes out of taking the PSF. That's the basic scrum knowledge assessment from scrum dot org and it's included in the PSM, what PSF class as well as the PSM class. And one of the things that scrum dot org has found is that if you, if people that go through the class take the assessment, they're more likely, statistically more likely to pass if they take it within 14 days. So they want to encourage people to take it within 14 days. \n\nSo even though you know the token you get to take the assessment has an unlimited timeframe, if you take the assessment within 14 days and unfortunately fail, if you don't meet the grade, then you will get automatically sent a second token to take the assessment but only if you take it within 14 days. So that encourages people to just take it, you know, even if you don't think you're ready, take it within that 14-day time period because then you get a second attempt anyway and you learn something by taking that assessment. \n\nThe first thing you learn is about your knowledge level. The assessment has a number of different sections and each of them are scored independently and you will see in your response at which areas you did well in and which areas you didn't do so well in and it will provide links and not only to content but the learning path that there is for scrum masters as well for the PSM 1. So that's a pretty handy tool for you as students. Just take the assessment, it's really that simple. Just take it and take it within 14 days so you get a second attempt in case you could just, oh I missed one question or I misread it. \n\nThat could have been your failing percentage, that's not really fair. Whereas if you get a second attempt, maybe that will help you out and solve that little problem which is pretty good. And so if you're prepping for the PSM 1 assessment and I send out some data to students at the end of the class, it's something that I try and send out the same day of the class. So if you've been through a class for me, you should have it already. But I send out a link to the scrum master learning path which is a website provided by scrum dot org and it has a number of different areas that you can dive into. \n\nSo for example, one of my favourites, done understanding and applying done. You can see that there's a number of different blog posts available. So these ones are our blog posts, you can get additional content. Obviously reading the scrum guide, go look at the scrum framework. I'm pretty sure that will pop open the poster or at least let you download it, massive. You can get in print that out, massive. And additional things that can get you going. \n\nAnd if you're logged in to the website, which I am, you can go tick things off and it will remember things that you've done, things that you've read so that you can get a better understanding of those things. And that's a pretty handy tool and I like that one and it works well enough. I'm not saying it's amazing yet but scrum dot org are iterating on that learning path, adding more content as it becomes available and potentially asking trainers to write additional content. \n\nSo that's working pretty well. And then there's some links I send around for days, I, Joel, the agile manifesto, a list of the agile principles, while your privacy's, that kind of thing. But fundamentally reading the scrum guide is probably the most important thing to go read and having a good understanding of empiricism. Scrum is really just an empirical process control system. So if you understand what is trying to be achieved with an empirical process control system, you can better understand scrum and then better understand implementing it and better understand how to engage with people inside of your organization to help them understand as well. \n\nThere's also a scrum open assessment. I'm pretty sure, let me, ah, there are open assessments for a number of the different classes. There's a scrum open, product owner open, development open, Kanban, nexus, leadership and measurement open. That actually might be a cool thing to do in a live session would be answer some of those questions. That would be certainly a little bit interesting. \n\nBut those things, looking at the mindsets and practices of scrum, the learning path, reading the scrum guide, going through the material, I PDF the slides that we used as well as all of the mural content that tool that you saw with the diagram that we built was built in mural with the students. I PDF all of that and provide it to the students at the end of the class so that they can review that as well. \n\nYeah, that's really that PSF and PSM 1 in a nutshell. So the next class I'm doing is the PSF on Monday which again is another private class but I also have scheduled a couple of public classes as well. They're in the GMT, at GMT, they're in the UTC plus one British summer time at time zone. You'll find them on my website. You can either click class schedule and but you can see they're rotating around here anyway. \n\nAnd I've actually done something that I would be good to know from you if it is useful but I've put the UTC plus one in the title so that when it goes round these rotations or it appears in Google, you should be able to see which time zone the classes are. And now we've all moved to virtual, it's a little bit more difficult to see how that works. \n\nSo I've put up, let me pop over here at two classes and I put up my, they're both professional agile leadership classes. I'm running them in the Edinburgh timezone if that helps as well. The one on the fourth of June is going to be a standard today class and however the one on the 29th of June I'm going to experiment with a four-day class. It will be four half days that might be better for some folks in the leadership role and we're actually gonna start early. So it's gonna be eight till 11:30 I think, so you're done before lunch. You can even, you know, start checking your emails before lunch and you've got the whole afternoon to get everything else organised. \n\nI would also be interested in feedback on that as well. So hopefully that will be useful this session and I usually do, depending on the amount of content in questions that I've got, I might do an hour or I might do half an hour. We're coming up on the half hour and I have answered the only question that I've had there and we've talked about the PSF. So I'm wondering if there's not going to be any other questions. \n\nI can hear myself somewhere, hold on, I've got technical difficulties. Oh, I'm a bit of a silly. I opened up YouTube and I started playing this video live watching it. It was just a little bit behind. Nevermind, there is that. And I also have on my YouTube channel, you should be able to see I have, I was going to be talking at an event. I was going to be talking at the Tech Arama event in Belgium. That's in, was in two weeks. \n\nWhich I guess is the tenth. I think it's the tenth or maybe it's the sixth. No, oh, third, third next Wednesday. Ahaha, so next Wednesday what I'm going to do is I'm going to do the session live that I was going to do anyway at the conference, being that the conference has been cancelled. They're not doing the sessions online, they're just doing a bunch of workshops. \n\nSo I would encourage you to go look at the Tech Arama website and see what workshops they're running there. Could be something super interesting in there. Do they have a number of workshops? But I'm going to be talking about live site culture and site reliability engineering from the Azure DevOps team at Microsoft and I'm going to talk about that next Wednesday during the day about 2:00 p.m. British summer time. \n\nSo if that is everything, I am super glad that you managed to view some of this and I got a question answered. So I hope that this was useful and if you have any additional questions please make sure you ask anonymously here and or put it in the comments for any of the streaming platforms and I will be notified. I'll get a question and I will answer it next Wednesday at 6 p.m. UTC plus one. \n\nOkay, so thank you very much. Naked agility is available for DevOps and agile training and consulting. Contact us for a free consultation."
  },
  {
    "Title": "Unlocking Agile Success: Embrace Continuous Forecasting and Transform Your Training Experience",
    "Description": "Explore practical strategies for Agile training, including virtual class setups, continuous forecasting, and using metrics to improve planning, learning, and team outcomes.",
    "ResourceId": "HjyUeuf1IEw",
    "Url": "https://www.youtube.com/watch?v=HjyUeuf1IEw",
    "Date": "2020-05-21T05:26:17Z",
    "Captions": "okay looks like we are online today in my office hours I'm going to talk a little bit about a new program that I have for training as well as something that I talked with Daniel Vacanti with it the professional scrum with Kanban class that we just had on Monday Tuesday called continuous forecasting that can help our software engineering team during their daily scrum and part of sprint planning to figure out more about what's going on to you in a minute\n\nnaked agility is available for DevOps and agile training and consultant contact us for a free consultation\n\nokay so um the things that I want to talk about first off I'm here to answer questions every Wednesday I'm at 6 p.m. BST British summer time I'm going to be trying to keep to that schedule at 6 o'clock on Wednesdays we'll see how well that goes I shared it deliberately so that it didn't fit on top of any classes that I was doing but hopefully it will be ok\n\nif you have any questions please put them if you're talking if you're here life watching life please add them to the chat stream I should be able to see chats as you add them they might be a little bit of a delay but I should be able to see them if you want me to answer a question um next week Wednesday 6 p.m. then please ask the question anyway and I'll get to it in whatever the next weekly second is I keep are a bunch of stickies here with the the questions that I've been asked and what what we're going to talk about and if you have a question that you don't want anybody to know that you've asked so you want to do an anonymous question then you can use this link right here and fill out a form just one text box it doesn't ask for any identification and off you go\n\nso that will be awesome remember as well the easiest way to get to the schedule for this is to use YouTube so you go to my channel on YouTube which you will find by just searching for Nick agility on YouTube no problem at all\n\nyou might be wondering why I look a little bit weird you might see my lovely covert cut and which isn't even even I think I've not even got it even this was my first attempt at a haircut for myself I was looking more and more like Lemony Snicket from a series of unfortunate events so I decided that there there needed to be some cottage unfortunately the cut was not super successful so you can have a nice laugh in fact if I do a little spin is just as bad at the back and oh my goodness me I just saw the back for the first time and yeah okey-dokey\n\nso my wife will hopefully be fixing that at some point so the things that I want to talk about and I've been teaching all of my classes virtually we've done two PSFS professional scrum foundations so far professional agile leadership and professional scrum master which I did for a program at wiggling in Oslo as well as a professional scrum with Kanban that I taught on Monday Tuesday there so and we're kind of getting spun up on the ideas around how do we deliver classes virtually and I've got my set up everybody seems to have their own set up which is fine if whatever works for each individual trainer and their students I've been using Microsoft teams to manage that and it's been working really well because you know teams doesn't just have you know you're on a call and then you have breakout rooms it has persistence and it has files it has permissions it has a way for me to share and interact with students on a long-term basis and what I've been doing and when you add a event to team everybody in the team is invited if you're added to the team later you get invited so it's really handy for me as a trainer I can just add people and to the team and then they get all of the the things they need to figure out how to join the class I had to get in so what I've been doing is kind of the week before the class I doing a tech check so that's been sent out and we've gone over how to connect two teams correctly because there is more than one way to connect two teams if you just click a meeting link and you're probably coming in as an unauthenticated user which means you have very restricted permissions you can participate in the meeting but you can't access any of the other assets in the organization which makes perfect sense and however when I'm running the class we use multiple channels for breakout rooms we upload files we have applications and tabs that give the students some extra information or some extra interactivity so we need students to come in as an authenticated user and depending on how they're doing that it depends on how much of a struggle that is and usually it's perfectly fine if you're somebody who gives me to add the email address that is your corporate identity same as you would log in to office 365 in your company then and you will just have a completely seamless experience using you use your corporate login and I don't have to have any login details at all just your email address you accept the invitation and then you're able to come in so that works works really well you effectively just log in in the same way that you would if you were if you were coming in from AK to one of your own corporate systems so that works great the other option is people use a Microsoft account so they already have an outlook.com or xbox comm or a hot meal and address that they've had for many years they can give me that they log in with their credentials and I don't need to store any credential still they'll log in with them and that's fine and then the third one is and you still need a Microsoft account to actually try to get onto our Google and the Google meet at the other day and you have to provide Google credentials so I have an email address that's enabled for Google even though it's not a Google email address and you can do the same thing with Microsoft so you can take any email address that's not a corporate identity and not currently a Microsoft identity so it could be you know your your gmail account or Yahoo or AOL or whatever that is and if I add that email address you when you go to log in and claim the the identity will be asked to follow some steps to enable that it's usually pretty straightforward but it sometimes just takes a little bit of explaining and so we do a tech check the week before and it's probably 30 minutes depending on the level of knowledge that users already have with teams but I've not had any problems so far teaching all the classes\n\nthe other thing that we go through is mural and we use a tool called mural which is a digital whiteboarding tool and it works pretty well it has its own idiosyncrasies just like any tool out there and there's mural as well as mural and there's a couple of other tools out there that folks women using whatever works and as long as I like to be able to provide the output so that the students can continue to go and view the work that was done on those services and so I download the files upload them to the team and then students can continue to get access which is pretty good\n\nthe other thing that I've been doing as well as the tech check before is something that I'm kind of calling reification where we're going to work together to solidify some of the ideas and so I've only built it as an error at the moment two weeks after the class and ultimately ultimately effectively when you when you takes class from scrum de-torque through myself you get two attempts whatever assessments you get at the end assessments while not being valuable to identify somebody else's skill level it might be useful in understanding your own skill level and what are the areas where you might want to go read up and figure out so the idea is that students get two weeks to take the assessment and if they fail they get another attempt but only if they take it within two weeks so the idea is my reification session which is just let's let's discuss the things you don't know or that you've tried to do some things in your organization what what are the problems that you've hit and just spend an hour hitting on whatever questions that folks from that particular class have so that's a new experiment that I'm running to see if we can't add value there and I think that would be sounds like I just think it's gonna be a lot of fun it's a very easy value add and in the circumstance of we're all at home anyway and I've been booking in over lunchtime UK time so I would do you know be conscious of other people's time zones so if I'm teaching in PST at Pacific time then I'm not going to book it at lunch side my time because you'd still be in bed but I'm going to do that so I might experiment with some additional engagements with students after the class and but hopefully this will work out and then we'll be able to add a bunch more\n\nso that comes to and the thing that I was going to talk about which is continuous or casting um so that's the only thing on my list today it was something that came up during the professional scrum with Kanban and it's the idea that in in the scrum guide there is nothing which says you have to plan your whole sprint it says that you have to have enough of a plan coming out of your and sprint planning to get started that's all you need you need enough of a plan to get started remember the team is going to inspect their progress towards their sprint goal every 24 hours at the daily scrum and they're going to adapt that plan as the goal so maybe we don't need to plan the whole sprint and figure out what all the tasks are maybe we just need to start with a smaller plan something you know the next couple of days worth of work and then we're going to build on that as we go I would maybe take the current day plus two more same as we use with planning the in the product backlog and that will allow you to to dynamically understand what you can do and and maybe pull extra things into your backlog maybe push some things out depending on how things are going and do that dynamically\n\nnow one of the tools to help with that and it's my belief and that professional scrum teams use the the the metrics from the Kanban guide for scrum teams so they're going to be using throughput they're going to be using cycle time they're going to be using work and process and they're going to be using and work item aging those are the four metrics that every professional scrum team should be collecting and if you're collecting that data you would be able very easily to do a for example Monte Carlo simulation I think I have just an example and I'm slight with a picture of a Monte Carlo simulation from Daniels two-way did that work yes it did oh let me just put you\n\nthat you want to add to this section I am happy to take any questions and I see that there at least I can't see and any questions coming in on the channels let me see if there's anything in the anonymous there is not anything new in the anonymous feedback either and I think this will pick up once I get on a regular schedule but hopefully you find this useful to talk about continuous forecasting and the ideas around having a reification and a tech check for my training so if you are looking for training you can go to naked agility comm that's where I list all of my training classes and all the classes I'm running at the moment are at scrum dot-org accredited classes and so the the official classes from scrammed and org with assessments so please go there and have a look if you want a private class obviously we're not doing on-site classes just now we can't really go anywhere but we are doing at live virtual classrooms I'm teaching a PSK not PSK professional scrum foundations class m in dublin next week and then in Pleasanton California the week after so if you want private classes we can deliver private classes pretty much anywhere in the world in any timezone and we just may need some preparation if it's a crazy time zone I have one coming up in New Zealand so that's going to be a very tiring maybe experience or at least it's gonna feel like I've get jet lag for a couple of days as we figure that out so please get in touch and obviously if you want to ask your question anonymously you can use this link here on the screen and please subscribe to our channel so that you know when we go live and when we're talking about things okay thank you very much\n\nnaked agility is available for DevOps and agile training and consultant contact us for a free consultation"
  },
  {
    "Title": "Rethinking Agile: Why Story Points, Team Sizes, and Emergent Architecture Need a Fresh Perspective",
    "Description": "Explores the limitations of story points, optimal team sizes, and the benefits of emergent architecture for improving agile practices and team performance.",
    "ResourceId": "jCqRHt8LLgw",
    "Url": "https://www.youtube.com/watch?v=jCqRHt8LLgw",
    "Date": "2020-05-13T05:03:57Z",
    "Captions": "Hey\n\nOkay, welcome.\n\nMakes agility. I name national scrum trainer.\n\nBut once naked agility is available for DevOps and agile training and consulting, contact us for a free consultation.\n\nOh, so I am wanting to have a little ad event a few things. This is my mmm office hours. Office hours is where I answer any questions that I'd asked. Baris is going to be moving from Tuesdays to Wednesdays as of next week, but you can effectively ask me. I think I have a link here to go to a forum where you can ask anything.\n\nThis is somewhere where nobody knows who you are and what you said, so don't put anything in the content that we don't. But I have a few questions that have come up over the last couple of weeks, and I just finished a professional scrum master class for a programme who to cling in. Are we a regular class that I and check for questions? We are going to talk about story point evolution.\n\nI had a conversation on Twitter with somebody who asked whether what I thought of story points. I was buying to Daniel the counties. Thanks that story points have damaged our industry over the last 20 years, as put it back amount. But I replied and said I agree with Daniel. I used to think that story points were awesome, and I don't. So we'll chat about that.\n\nI talked about team size because I think the traditional six plus or minus three is as we get or our complex at building software. I had a question in my class around how to sell emergent architecture decoders. If you do want to ask a question and you are on either LinkedIn, Facebook, Periscope, or Gup-a, please feel free to ask the question in the comments. I should be able to, as they come in, maybe a delay, but be able to see as they connect platforms. You can also go ask questions form, and I will ask.\n\nSo I have just a quick update on the classes that will be running. The Oslo class has just finished. They only have one more class on my schedule. I'm going to update my shape liked more.\n\nBut I have a professional scrum unban cool annual Vacanti. Aims on currently have a couple of students registered, and we are hoping to have a lot of fun in that class as we use a new technique to deliver a virtual classroom and to eight experience Daniel. I found eita analytics or flow better and bring that in part of this.\n\nOh, first up is story point evolution. Story points are they've had an interesting life, been around for quite a long time, and I think I agree with Daniel. Daniel Candy said that they've damaged our... Let me see if I can find that tweet.\n\nSo the reason that I don't like story points is they don't actually provide value. I'm sure Daniel would do a much better job of describing the additional value that you get than different measures. Story points are something that we've been trying to use in the agile community for a long as they are relative estimation. They don't have a value outside of the team because they are reflective of how the team effort. They are not something that we prepare across teams because each team comes up with different values. They are not something that we can measure that team by, but they are traditionally used by the development team to understand based on their history of point delivery, like city based on that and how many things they might be able to bring into their sprint.\n\nAlso, at the product owner looking at what's the progression that acting with the backlog problem. The story points is that their standard deviation of what you think you're going to get, what you get, and maybe that worst case, the best case. That standard deviation is so wide or than 30%. The starvation is so wide, the ability to predict so 30% sprint own sprint a huge difference getting stuff and not getting stuff.\n\nSo what can we do? Well, as part of the PSK class, you can go download and read the Kanban guide for scrum team. We talk instead about throughput. It doesn't care about size, whereas velocity at story points cares about the size of the item. So you're going to sum up the story points backlog all right in the spin backlog. Paucity, sorry, Rupert, and only cares about the number of items per unit of time. So that unit of time could be print. Some how many things that I deliver. One of the advantages of that is if the team want to game that, i.e. they want to make the numbers bigger to look better, they need to reduce the size of the items. Size of the items is good. Get smaller batches and actually process a lot more quickly.\n\nBut it also allows us to look and instead if we collect throughput. So we calculate very... We know our throughput. We go our cycle time from when we decided the work has started to when we played ends at collect our working process. How many items currently have between by unions and we'd work start even when it finished, no matter how many columns. An idea of how long things have in light are those. Even you can have it bonds as well. You can break it out that way, but really if we can model that, we can use Little's law, get an understanding of if we reduce our work in process that we could potentially increase our cycle time. And if we want to deliver more things, we need actually smaller. We can't tell any of that just from story points because they're not just size dependent but an objective measure rather than a subjective measure.\n\nSo I started off at liking story points, and I then moved towards thinking 30 points make sense for immature teams because they're easy to understand, easy to pick up quickly. I get started with, but that the limitations of story points I think cause more damage at a time. And I would rather a team started as possible being at their throughput, liked in their cycle time, broke item aging and process. If they start that sooner rather than later, they get used to it a lot more quickly. They're able to look at the data and maybe make better optimisations, make better decisions from events as legal.\n\nBut that was my thought process, my journey towards that story points are a bad idea. And maybe not as against them as Daniel is, but I definitely think there are a thing of the past.\n\nSo the second one, second question was around team size, and we talked a lot in scrum about team size. We have our particular questions in the... But particular questions in the scrum training around can a team be smaller than B? Yes, it can. The scrum guide recommends it at team at 3:00 and 9:00, but it doesn't say they have to be. The other question is usually a... Oh yeah, first they can t be better than 19. Teams can be way better than 9. Is that going to be optimal? Are they going to be able to dictate and understand what everybody's working on and work together effectively? That might be a different question in that space though.\n\nWhat I would like to discuss is I work with a lot of teams. I worked for a long time as a Microsoft MVP. Yes, used to be a fast, and I was EV UPS. I've been working with those along with the other for a long time, and their teams are bigger ballet than at night. They have teams in 12, and the reason they have teams between 10 and 12 is because they're doing a lot more things inside of the sprint or that they're able both having high quality working software in production.\n\nSomething that they use is a state reliability techniques, but they have engineers inside of the sprint. And I think if my understanding is correct, it might have changed since the last time that I spoke to, but they have two people at pair sprint allocated to the website reliability. In each team, there are two people dealing with that. So anytime they have an outage, they are the first responders that outage, not interrupting the team working on adding value to the product. They may have to bring in other people that are currently adding value to figure that out there, but they are your hopefully not going to have an outage. If there is an outage, the root cause analysis this and the time they're there, they're dedicating up, up spending that time to pause analysis, figure out all of the things that might need to change in order to make the product better. Some of them may be small things, some of them may be big architectural change. Get those things onto product backlog, and then as their day-to-day job when they're not dealing Energon, their job is to work only those site reliability tasks, making your application more stable, efficient, less buggy and our architecture.\n\nAnd I would use an option that rule site reliability engineering is rotated through the team so that you don't have somebody just through time as a specialist in that role. We need to get it running. Now, they also give responsibility to their team function. Obviously, they've got SR Easton, so teams that build a feature are responsible for buying a feature and doing and maintaining it in production. So they have to cite what telemetry they're going to capture. They have to look at that telemetry. Everything's good. Partly there was that there was SR ease, but it does leave the rest of the team be the focus adding value and be interrupted. That means that the team needs to be that little bit bigger - bigger than you from team.\n\nWell, but maybe 10 to 12 is an extra person still than the name we generally look at. And the reason that they have that extra person is that they're doing more stuff during print in a traditional project market product cycle. And especially the old TFS product cycle from the door, they would have shipped to production once a week, Bruce, and had a service pack. Every year here, they have a service pack. Then I respect I'm in that model. A lot of work got left end cycle. You have a code freeze, and they have to go and stabilise the code and that's our Ollie and be my technical debt fixing bugs, that kind of thing. But there's also work to secure the product, to run security checks, to run performance benchmarks, to do all of that work.\n\nAnd now in modern techniques that they are using, they run all of those things inside of the team. So they're not running them in our secondary age. I do the tea by a different department gives them feedback. Veltman tea elves making sure but good purity, the automation around the security that I knew done. And even the rest he could write exercises to get the additional stuff the theme. So their teams are a little bit bigger, and I think that is an indication of things to come from any team. That may be the traditional thing that people about 5 to 6 from team not going to be enough as we bring and not only have we got quarters and testers, also bring in security experts and operations and functions metrics as we're bringing those things that are national Lilly understand quality of the work that the Bing and the act half on production and on and what ad looks like.\n\nI am a trade to know what broken something or whether the varmints or whether are actually using the feet. I did be all our tea bigger, and so I want to see bigger than elf. That's that for me is quite a big team, but I think it's within the context of the organisation. Some organisations will be all of those things talking about and still have small teams. Other organisations will have to add.\n\nSo that was the second one. We talked about story points and moving towards the more and style metrics talked about.\n\nSo the other one that I had was emergent architecture. I think I'm going to be interested if I can have a decent answer, but this one, the question was around how do you sell marriage in architecture to be cold? That idea that we're not going to know up front. It's not possible for us to know up front, and there may be things that we would have added to architecture in a waterfall or terrific project management model where we would have made a bunch of decisions or features that we actually build.\n\nI would be a yeast and to have our architecture in urge over time. Maybe in the first sprint wheel and fit I'm adding value. That's the time we're working with architecture.\n\nTime to do it. I'll have at slack. Arge amounts of new phone. But selling imagine architecture to stakeholders the organisation, I think this is something that's just a change in a organisations. Organised in order to facilitate adjuvant practices. I'm not talking about just agile within buffer engineering team, rest of the organisation in order to take advantage but speed both we're team. And really that I mean, let's go back a bit because that's not the point. The hope, the whole point is that a business needs to be able to take advantage of opportunity as they arise in the market, to be able to see an opportunity, go, let's build something around that, take advantage of that, whether that's getting a new product into the market, whether that's adding new features into the market, whatever that is.\n\nIf you look at the current at covent crisis and the number of the shift that organisations have made in the fever's or delivering, especially in the space of virtual pain. So all the video conferencing applications ramped up not only their infrastructure but potentially certain features. Microsoft have already started rolling out 3 by 3 instead of 2 by 2 windows. They've already started rolling out at hand raised as an infant part of the product and other things. End call was one of them. The zoom add to pivot from adding new features towards adding security and actually adding the incorruption said was in the product, actually doing things very different other than before the crisis happened.\n\nAnd even things like I use our platform called Lord order to pour game is remotely. And by four months ago, they were lucky if they hit 5,000. You even be accessing their system. Now they're having 5,000, having to ramp up Orman's scale their server, skill their instances like everybody else. But these pivots of both what features were going to build when we're going to miss them as well as scaling up are things that organisations that have been able to have it like that word but change what they're doing to be prioritised.\n\nThe organisations I've been able to that more quickly are the ones that have been able to take advantage of this opportunity or them to our market share to visibility across the board. So it's important to be able to sell the ideas behind architecture idea in our ability to change a longer time.\n\nAnd I don't know that I did a good job of bringing that, but you will probably let me know in the comments. And I don't see any comments coming in, so let me just check my list of things. And I did have our conversation with a couple of folks after the class around how do you get executive buy-in? Who do you get people and God executive and leadership who are not yet on process the ideas? The ability of changing the week, not just level but about the organisation too. Ditch the idea of the tip hierarchies, our mental model, move towards stick Dylan.\n\nA shallower hierarchies. I didn't have a good answer at how do we change. I mostly worked with organisations I've already decided to change. Bring me in to help them with training, help them coach, and they're there already on a path when I have the first conversation with. Yeah, I didn't have an answer for that. If you have an answer to that, please let me know.\n\nWe could get you on. I know at out that topic. So if you're interested in talking about executive buy-in.\n\nWell, I think that's all of the content that I had just now. I don't see any questions coming in. Now let me just check the booth. Oh, there's only two answers though.\n\nPlease ask questions. I have our link to ask questions anonymously. You can also put them in the chat law here, and I will happily answer them.\n\nSo if you... It would be really helpful for me if you would subscribe to YouTube. Rubber option button is, and hopefully I will either see you in class soon, hopefully 9 o'clock or so empty, or in another class that we should do. Oh, and if you're in Atlanta, I am cool. I'm helping facilitate professional from product with Russel Miller. Anta find it on the scrubland org website.\n\nPretty awesome class, so I think our YouTube up for that if you're anywhere.\n\nOkay, thank you very much. Naked agility is available for DevOps and agile training and consulting. Contact us for a free consultation."
  },
  {
    "Title": "Maximise Your Virtual Classroom Experience: Essential Tech Tips for Scrum Training",
    "Description": "Practical tech tips for using Microsoft Teams and Mural to improve collaboration, engagement, and learning in live virtual Scrum training sessions.",
    "ResourceId": "_bjNHN4PI9s",
    "Url": "https://www.youtube.com/watch?v=_bjNHN4PI9s",
    "Date": "2020-05-02T16:34:05Z",
    "Captions": "Hey, welcome to running a live virtual classroom. My name is Martin Nature Wood. I'm a professional Scrum trainer with Rhonda Dark, and I run our company called Naked Agility out of Scotland. Naked Agility is available for DevOps and Agile training.\n\nOkay, so I've been running a number of live virtual classes. I've run two so far, and I have noticed that when students first come into the class, it can be a little bit difficult and daunting, not just maybe learning Scrum for the first time, but also learning new technologies for the first time. So I wanted to cover the two technologies that I will be using in my trainings. One is Microsoft Teams, as I'm using that for video conferencing and for some communication channels, and I'm also using a product called Mural for digital whiteboarding to get some of that feel of an in-person class.\n\nSo first off, Microsoft Teams. Microsoft Teams is a tool from Microsoft that allows us to create calls. One of the first hurdles to get over is connecting to Microsoft Teams. We do recommend that you download and install the app rather than use the web version. It gives a much better experience during the class. The web version is good if you're just joining a meeting for a short period of time, but we're doing two full days of classroom activities, and really having the thick client is important.\n\nWhen you connect, open up Microsoft Teams. It'll ask you to log in. You should log in with the email address that I invited you to the class with, and hopefully that will be the same as your corporate credentials, or it might be your Active Directory credentials from your corporation, or it might be a Microsoft account, like the same thing you log into Xbox or Skype. If it's not one of those email addresses, it might be your Gmail or whatever. You will be asked to enable that as a Microsoft account. Just like Google does this as well, you're able to enable any email address, regardless of what platform it's from, as an account you can use to log into Microsoft services. So it's just a case of setting that up.\n\nIf you're coming on under an MSA, I do recommend that you use your corporate credentials if you can. If you need to change your email address because your corporation might block your ability to log into Teams as a guest, then please ping me, and I will change your email to something else, and you may come in under an MSA.\n\nSo let's take a look at Teams. Teams is not the simplest application in the world. It does come with a lot of features, and we're only going to be using a small subset of those features. But it's useful to get just at some of the nuances of how you connect in. Now, you might have joined Teams using a meeting invite, and when you join using a meeting invite, you're coming in not as an authenticated guest, which means that you don't have access to some of the tools that we're going to be using.\n\nWhat you want to do when you come into Teams is, on the top right-hand side of Teams, next to your profile picture, there will be a little drop-down list, and it should say your company name if you normally log into Teams with your company. You should change that drop-down list so that it says Naked Agility Limited. That's my company. Once you've done that, you'll see...\n\nSo just reordering that. Here I've got a live virtual PSF on the 1st of January 2015 for my demo account here, and what I've done is created a single meeting that everybody in that team will have access to. So what will happen is I will add you to the team. I'll invite you to the team. You'll get an invitation request via email. Click the link, follow the instructions, and then you'll be able to come in here as a fully fledged guest in my Teams account.\n\nNow, once you're in here, if you click on any of the items that have this little symbol here, you'll be able to go in and open the meeting, and in the top right-hand side, you'll have a join button. So even if nobody else is in there, you will have a join button to be able to get in. If you click join, because you're already authenticated, it will just allow you to have access right away.\n\nSo I'm going to turn my video off so we don't get confused by what's coming up here, and I'm going to join now. Okay, let me make myself a little bit smaller. There we go. So once you're connected to the team, you'll obviously see the carousel of people's videos. You should have both a short conversation and a sure participants enabled, and if you do not, you have not come in under an authenticated account. You've come in under an anonymous account, which can happen. But if you come in under an authenticated account, Naked Agility Limited, then these buttons will be enabled for you.\n\nOne of the things that we're going to do as part of the team is we're going to work in breakout rooms. This is the main channel that will be open all day. This is where, when we get together, we have our big room events with however many people are in the class, and everybody will be in this room. Most people will sit with mute on. When people start talking, at the moment, you can only have nine videos in a gallery, and whoever's talking will be one of those nine videos in the gallery. If you have a particular interest in an individual, you can right-click on their picture and pin it to the gallery so that they don't disappear.\n\nBut what I'm going to do is I'm actually going to go over here onto the left-hand side, and you'll see the Teams button again. If you come in not authenticated, you won't have this. You should open Teams, log in, and switch to Naked Agility. But if I click on Teams, I'll go back to the main view where we're looking at the team. The call will be in this little display here, so whoever's talking will have the picture, the one picture you can have there. Then you'll see down here that this team has two channels: General and Team X. The General channel has a little icon to see that there is currently a meeting underway in that channel. If you go in and click on that channel, you'll see here that you'll have a big join button because the meeting is currently underway, and the same option to click through into the calendar item and start it. But because it's already started, you can just join it and go straight in, which is really powerful.\n\nWhen you're instructed to, you have particular exercises that are done in Teams. Each team will have maybe Teams 1, 2, 3, 4. Maybe they'll have names. It depends on the type of class we're running, but each of those teams will be listed here. I'll be creating them during the class, and if I click on this team, you'll see it's currently empty. It was brand new; it has nothing in it. But we want to create a space for that group of people to be able to interact. If there's not one already, you can actually click Meet Now, and then it's actually helpful if you put in the name of the team and then whatever else you want after that, and you can just click on Meet Now.\n\nSo now I'm in our second team meeting. Oh, there we go. So there's my... let us turn the camera off again, otherwise somebody might freak out. You can see on the left-hand side here that the other main room has been put on hold. If I go back to Teams again, you'll see that there's two calls started, and I'm currently participating in Team X, and I have Main on hold. This means if I just leave these calls open, so I don't click hang up when I change between calls, I can actually just go here, click play, and now I'm in the main room. So if I open up full screen, now I'm in the main room, now I'm in Team X.\n\nNow I'm in the main room, so I can very easily and quickly switch between those rooms. We normally run with multiple facilitators, so there will be somebody to help with this. But once you get to grips with it, you went to the team room for a short period of time, you pop back out when we're doing the main exercises, and it flows pretty well. It's a very quick transition.\n\nNow, one of the things that I can do is you'll see you've got a little short conversation at Wendell here in the main room. If I want to send you some information while you're in that room, I'm actually able, without joining the room, to go in here and hit \"Time is up\" to let you know to come back to the main room. When I send that in your Team X meeting that you're having a discussion at, this short conversation will actually light up, and you'll see the \"Time's up\" in the meeting chat on the right-hand side. That's a very quick way for me to do that. You may not notice. If you don't notice, give you a moment, then I'll pop in and say, \"Oh, we need to come back to the main room,\" because I'll be able to switch between multiple teams as well. I typically run this class with between 10 and 20 people specifically for the PSF, and I always have at least one additional facilitator to help make sure you can switch between those rooms effectively.\n\nIn addition to that, so I went too high on those two calls. Now hang up those two calls; they're finished. At the end of the class, you'll be invited to join the Professional Scrum at Community team here. This is a team that everybody that has gone through one of my classes is a member of, and in here, there's some interesting chat, but there's also access to the course where you'll have a direct link in the email that I send at the end of the class. If you use Teams to access this files and data, for example, if I open up the PSF, you'll see a list of the course where that has been available, and I make the PDFs available for each version of the courseware that comes out. So I'm continuously updating this, so if you did take a previous class, you'll be able to go in and get a newer version of the courseware when it becomes available. There's some extra material in here available as well, and if you click on Class Media, you'll have a folder for your team, your class, that only you and the people in your class will be able to access. That will only be visible to those folks, and it will have additional things like if we took pictures during the class, and if we used Mural and PDFed them or other things, then they will end up in that folder there.\n\nIn addition to that, I have a folder with all of the presentations that I do at conferences. Sometimes I'll mention them in the class because it adds value to our discussion, but maybe not 100% relevant for everybody, so we don't do it in the class. Plus, we only have two days, so you can go and see some of these presentations that have been done previously, and those recordings online as well on my YouTube channel.\n\nSo that was a kind of walkthrough of how we'll be using Teams in the class. Hopefully, that was useful and will help you figure out how to get things going as quickly as possible. One of the things we do find is that the first half day can be a little bit lengthy when folks don't understand the technology or haven't used it before. So just this is just to give you a quick brief.\n\nI think we need to have a look at the second piece of technology, which is Mural. Okay, so Mural is a digital whiteboarding tool, and it's reasonably powerful. We've been using it quite extensively for classes. Both of the classes that I've run have used it, and many other Scrum trainers have used this class as well. Let me switch to Mural. Mural is available in the web. It has a number of pretty straightforward capabilities, as well as some advanced capabilities as well, and I'll be sharing a link directly to the individual mural with you, and you'll be able to go directly into that mural.\n\nSo this will just take a second to load. There we go. So this is the mural that I'll be using for my class on Monday. Well, this is the kind of demo make a mass version of it. In this, you'll see there's an outline on the right-hand side. If you don't have an outline, there's a button to toggle the outline up there. We'll start on preparation, where we'll do some introductions, and we'll figure out who everybody is, what we're doing here, and that kind of thing. We will also have slides in combination with this as well. Just to note that if you want to take notes or you're asked to add data to these pages, you can actually just double-click anywhere on any page, and it will put a post-it there. If you want to change your post-it colour, you can change it in here, and then you can add other post-its. If you do another post-it close to a post-it that you've changed, it will be the same as the one you just created. But if you do it next to other ones, that will be yellow, and that will be a purple circle.\n\nSo there's a number of tools to be able to do that: text, shapes, drawing, images. You can do anything you like on there and just move them around and do a bunch of things with them. What I'll be doing during the class as a facilitator, this is the facilitator's view that you're seeing now. I'll be able to go in here, and I'll be able to summon everybody to that point. So I'll be instructing all of the students in the class, might be 20 people, to all go to the same mural, and I'll see little icons down in the bottom for each of the students that are in here. When I summon everybody, they'll come and see the same thing as me. They'll have follow enabled on me, so you can see that somebody who's left it open on their computer from the last class and has anonymous elephant, and our self aunt is now following me. So as I drag around, as I move around, they'll have their display moved as well, and they'll see exactly what I'm seeing. So we can talk about it; we can have discussions; we can talk about those capabilities.\n\nIn addition to that, this is just the main mural where all of us will be working. There's also a separate team-based mural just for teams and for teams to work in for each class. Again, it depends on the class which murals we use. This is for the Professional Scrum Foundations class, and what I'll hopefully be doing is I'll be setting timers when we have time boxes. So even if you're in your separate teams meeting, you'll be able to see the timer. I would point out that the timer is JavaScript-based, and if you switch away from the display and then back again, the timer does not keep the correct time. So if you have more than one mural open and you switch between them, the timer gets out of sync with the real world. It's a little bit of a bug in Mural, but I'm sure they'll fix it at some point. Ultimately, having a timer that you set on your phone for the time boxes that are described will help a great deal and help us make sure we keep on track and come back, and we don't have to chase everybody so much.\n\nQuite often, we extend the first exercise, the first time box. We have a kind of team-building exercise at the start, and we often extend it just because first use of the tool, people need a little bit of extra time. So I'm going to end that timer, and when the timer is up, it will actually pop up a little message on your screen that says \"Time's up.\" It's not super obvious, but it's not super hidden either. Then we will go back to the main room and maybe bring some of that discussion that we've had back to everyone in the organisation.\n\nIn addition to that, we might do some voting. Quite often, we maybe come up with five or six ideas for something, and then we want to have a vote on it. This is something that you can do in your team rooms as well. Actually, maybe you can't, but you may have edit rights, but you maybe can't do a voting session. That's a good point, so ignore me on that. But we might do voting sessions as a group, so I will create a voting session. I'll say how many votes everybody gets, and I'll start that voting session. You can see you can click a card to add a vote and shift-click to remove a vote, and your voting is anonymous. Nobody else sees your votes until the end, and so we can begin voting. I can add two votes to one card, one vote to another card, and I have no votes left. I can see how we're getting on, and maybe I don't know. It's a little bit anonymous who voted for what, but I can call out that there are three votes left from people. I'll give it a set amount of time, and then I will end the voting session. When I end the voting session, everybody will see what are the stickies, what are the posts, what are the items that everybody's voted on. This can be very useful for facilitating classes and Agile training.\n\nOkay, so Mural is fairly straightforward. This is the mural that I created just as a playground for students. I usually do a tech check before a class, and I take them through and live this type of exercise, which maybe helps them really understand what it is they need to do. So I would very much like to have that many of you in my class. I'm going to be sending this video out to prospective students as a short introduction, and commit 23 minutes to get started with both of those capabilities: logging into Teams, working out with Mural, and then coming back to the main group. All of the murals will be PDFed at the end of the class and available for all of the students to download. It's a very powerful tool.\n\nCool, so that was really everything I had for folks. That was Teams and Mural. I'm hoping that that will make it a little bit easier for you to get started in one of my classes or anybody else's classes or training where they're using Teams and Mural."
  },
  {
    "Title": "Transforming Management into Agile Leadership: The Power of Virtual Training",
    "Description": "Explores how virtual training supports the shift from traditional management to agile leadership, highlighting benefits like flexibility, engagement, and cultural diversity.",
    "ResourceId": "p3D5RjM5grA",
    "Url": "https://www.youtube.com/watch?v=p3D5RjM5grA",
    "Date": "2020-04-25T02:29:57Z",
    "Captions": "Naked agility is available for DevOps and agile training and consultant. Contact us for a free consultation.\n\nHello, welcome to my stream. This is episode six and I'm here with a gentleman called Russell Miller who I have known for an incredibly much longer than you would think, a long time. Russell, wouldn't you introduce yourself?\n\nHi, I'm Russell Miller. I live in Atlanta, Georgia, USA. I'm a product development specialist and scrum dad or a professional trainer. Cool, and we spent a little bit of time working together this week. We facilitated a virtual live virtual classroom on Monday and Tuesday of the professional agile leadership. Is there anything you want to say about the course itself?\n\nOf course, it's geared toward those who want to see agility grow and thrive in their organisations and want to know how leaders can positively or sometimes negatively influence that.\n\nYeah, for me, the courses are trying to move people from the ideas of management of people to leading people. So you're no longer really managing people anymore, you're creating environments within which people can thrive.\n\nYes, and we're also disciplines that those things aren't needed once you move to more agile ways of working because they are very much needed. They are very much needed. Organisations have definitely functioning without somebody if we're focused on delivering value in a product. It's difficult to spend the time that you need on making changes to the way we deliver that product, the way we interact with people, and you need somebody with that dedicated focus.\n\nYes, oh, so we had a good time. We had six students, so we broke them into two teams. The course is very exercise-driven, so we kind of went back and forth. What do you think kind of worked well in the class?\n\nI think that the students had the ability to communicate their own experiences, especially in their group, but also in the larger group. It's good to be able to express some of your thoughts because that's actually a bit of a learning exercise. You know, when you express your thoughts, you have to formulate them and it helps you really more with a greater focus, examine your own experiences, and then you can get feedback on those experiences. So that was good for the students.\n\nWhen we do have a smaller class size of six, you can get a lot of your specific questions answered. So that was a big positive for this. I mean, we'd love to have, you know, 20 people or 15 and, you know, give our agile goodness to as many people as possible, but for the students who attended with a smaller class size, that was really beneficial for them. I thought it was super great.\n\nSince we're relatively new in the world of live virtual training, it's good for the students to be able to join quickly from the comfort of their own home or office. Those are a highlight of some of the pieces.\n\nYes, there's a little bit of a delay. That's why I was waiting there. I was waiting for your voice to finish. So we spent quite a lot of time working together in the class as well as having, since we were working in two teams, we had two trainers. So a trainer could go with each team and make sure that they didn't feel left out and alone. I think that is the difficulty with live virtual classrooms. The students don't feel the love from the trainer and have difficulty getting attention.\n\nOn the upside to that, because of the electronic means, students can summon the trainer to their breakout area regardless of which tool you're using. All the tools have the ability, most of the tools that we're using, I'm sorry, all the tools that we're using have the ability to summon the instructor or one of the instructors to the small group. So that's a bit of a positive because in a larger classroom setting, the students may be inhibited to, you know, to ask for help. They may look up and see the instructor talking to somebody else, but through the electronic means, since there's only one way to summon the instructor, I think people are less inhibited when they want some attention to ask for it. So it works both ways, and both in the negative end, I see it more as a positive. We just tell people if you need help, here's the way you can help and don't be bashful.\n\nSo it's quite a lot of delay in the audio. That was my wait there. For some reason, the video is in sync, but the audio wasn't, which seems a little bit weird to me. Usually, it's the other way around, but that's the way the cookie crumbles sometimes. I really enjoyed that aspect of making sure that the students had somebody to talk to.\n\nIt's difficult with facilitating the exercises, and I think that one of the things that was very difficult for me was getting attention back from the breakout rooms from the exercises. Did you find that as well?\n\nThat was the challenge. We have a blinker that says come back, but herding the cats isn't always as easy as in a live in-person classroom.\n\nYes, exactly. I think it's a bit of a neat five-second delay, something like that. It's super fun. So I'm just working around it as we are in need to do. I think definitely having the two facilitators for the exercises is going to be much better. I'm actually teaching private PSF for 20 people with four teams on Monday, which is going to be interesting. I've managed to organise a couple of extra trainers, but we'll see how that goes with two people in the room.\n\nSomething that I think did work well was we were using Microsoft Teams as our technical environment for running the event, and we were able to very easily create team-based breakout and have a call continuously running in that breakout room and then easily switch between those two things.\n\nI was shocked. I expected it to be a hurdle, and it wasn't. Yep, I thought Teams worked very well with that, better than I was expecting. Being able to switch between things, I know that I had a lot of problems with Zoom, and I think you didn't. You had everything was super snappy and fast.\n\nYeah, zero problems. What I did find after some significant Googling after the event was that I have a Surface Book One, and Surface Book One has a performance problem if you attach a second monitor. There is also 60 Hertz, so I've actually moved my 60 Hertz monitor off to another machine, and I'm using a much cheaper, not very good monitor, but that I can set to 50 Hertz, and I'm not having the same performance problems on my machine that I was having with that. I'm going to try and upgrade my machine at some point, but it's difficult to do in lockdown because there's nothing left. The whole world is buying electronics.\n\nYes, and I found that my webcams are impossible to get. I managed to get my microphone upgrade. I got a TX microphone, which was fine, and I got a stream deck for manipulating the interwebs, but ya know, webcams can be difficult to get some of the other PCs, and I think even my microphones I can't get. I wouldn't be able to get another one if I wanted in my life. It pays to be prepared.\n\nAt least we have sound and a consistent internet connection this time. Last time we did this, we tried to do it on Tuesday, or was it Wednesday? It was Tuesday, and it was a complete cluster with internet not being very good. I think we left it a little bit late, and we had Netflix traffic in Europe, but it was still the problem. I need to work on why my Skype over here, which the system is not particularly taxed, 60% usage, which is not too bad, but we'll need to see over time if I can fix that and repair it for these types of chats.\n\nAre there any other things? Feel free to talk for a little bit longer because we have a seven or eight-second delay anyway, so may as well talk about that longer, and then I can just wait.\n\nWhat saw any other things that you felt you wanted to add to the experience during this? \n\nWell, a couple of things that I think people should bear in mind if they're thinking about either delivering live virtual training because we have a lot of the world that we live in and the product development space, especially software product development space, requires some specialised skills and specialised training. There are a lot of trainers in the world that are trying to learn how to deliver their great training content virtually, and then there are students who are trying to up their skills, especially those who have been economically impacted by the worldwide economic impact. Those people are, you know, some of those find themselves suddenly furloughed or laid off or downsized, and people are trying to up their skills, and they're looking at their backlog of training.\n\nA couple of things I think are worthy of consideration that after having delivered several of these are more at the forefront of my mind than ever. Students that travel to my in-person classes, if they travel from outside the city in which I'm delivering, those people incur often airfare costs, lodging costs, or their employers, and meal costs, and those are zero for live virtual training. I think that's a big deal. I've had people travel, as I view, I mean, on multiple occasions, I mean, a lot of vacations. People travel internationally even to attend courses that I'm delivering, and not only do you not expend the resources, the financial resources to make the travel trip, but you don't have the long time that you have to. It's not really a waste because you're getting training at the end of it, but you would like to be able to have a transporter and just go from wherever you are to the training locale and not spend 4, 6, 8, 10, 12 hours travel, maybe even, you know, one-way sometimes. So that's a huge advantage, and you don't spend that travel time away from your loved ones or family or exercise routine or favourite pastime. So these are not insignificant advantages.\n\nSome of the training that we're doing live now, and we don't know what the future holds, but it may not be the same. Some ways may be better, but some of the training that's now offered virtually, once we go back to the old way of working, you might not be able to get it virtually. So you might consider it's much, you know, if you need some training and have the resources and the time, then you might want to get, I'm serious, you might want to get some of it now because you don't have to incur the expense and effort to travel to a location.\n\nI totally agree, and I have, it's sometimes a little bit different training in the US than it is training in some other parts of the world just because I think I trained in 32 different countries over the last 10 years. I'm usually about 12 countries a year on average, and that means 12 different languages, 12 different cultures. Although I know the culture, for example, between Atlanta, where you are, and Seattle is very different as well, but at least there's less of a language barrier. Everybody's supposed to speak English, and usually, it's bad English, but okay, that's generally an American thing.\n\nBut I found that when you're dealing with radically different cultures, like I could be teaching one week in Saudi Arabia, another week in the Netherlands, another week in Norway, and people's attitude and outlook and the way they react to things can be very different as well. Even things are an interesting one, and I've mentioned information in my class. Sometimes when I'm in Norway, we have an expression in English where you might say you don't want to look like you've got egg on your face, and I think that translates to American as well. That's a common phrase, but that doesn't necessarily translate to Norway, to Denmark, to Sweden, to Saudi Arabia. While Saudi Arabians, they're British anyway, that was a British colony, it seems to have. But that's saying, but for example, in Norway, it's you don't want to look like you've caught your beard in the mailbox, which, so who knew? And another one is everybody's on the same page, which is a common English expression. In the Netherlands, it's everybody's noses are pointed in the same direction. So you kind of have to learn a lot of different idioms, I think that might be the right word.\n\nYes, they're different videos that people talk about things in different countries and what it means because words can make a big difference to how you interpret the material that we're presenting. Even though a lot of the work that happens inside of the class is interactions between the students rather than just interactions between the, like a one-way communication between the trainer and the students, I think there's still a lot of things that we need to take care of in that setting.\n\nI guess my question for you would be how you, we had in our class, we had two Germans, one from Slovakia, I think, no, we're split. Well, it's not Slovakia. I've got my countries mixed up, as I am apt to do, and my brain has died. But we had two from Eastern Europe, two from Germany, one from Leeds in the UK, which is kind of middle England, and one from London, but who wasn't from anywhere near London, just worked there. How did you find that different group of people?\n\nI found that that particular mix of students worked well, and you touched on or circled around something I think is a bit of an advantage to the training, whether it be live or sorry, live and in person or live and virtual, is that you get to expand a little bit of your cultural horizons. I don't mean just for the entertainment value. I mean it causes you to reconsider some of your outlook and the way you approach situations. If you're constantly around people from your own culture, then you don't really have the same reason to examine your own stance and your own perspective. But when I find fun, I find that I'm around people from other cultures, I'm more conscious of what I'm thinking. I'm more conscious of my idioms, and I'm more conscious of the way that I look at the person. You know, artists or those who have art training realise that you might have a still life, but there are multiple perspectives from which you can draw or sketch or paint that still life. I find that when students or people, professionals are immersed in their own culture, they don't have the same reason to take a different perspective.\n\nThat's one of the things that when I teach people about the scrum master role, if I could segue just a moment, is that one of the things that I try to get students to understand about the scrum master role is that it's not only about the specific accountabilities of the scrum master role, but we need someone that has a different perspective. Like you suggested that the people doing the work need the perspective of someone in a different position in the organisation looking down, not down, but up at the work from a different point of view. That's one of the powers of the scrum master role because that person often has different daily activities than some of the people that are on the development team creating the increment. That difference of perspective provides a lot of valuable information that often scrum teams don't appreciate. They don't understand why, oh, well, you need the scrum master to do this or this or this. Well, yeah, he or she does, but he or she also needs to have a perspective that's different, focusing on different things in their minds. I think that's a powerful thing that students who attend class with multiple cultures represent get a little bit of a benefit from.\n\nI totally agree, and that I taught classes in Africa, in the Middle East, in Eastern Europe, the UK, and the US as well. I even taught, I might as well teach a class in Canada. You can't get better than that. That was good.\n\nI think that it's going to be difficult to put the training genie, online training genie, back in the bottle. The feedback from many of the students is that while they might prefer an in-person experience, students that have gone through both an in-person class and an online class, because of the quality that is required by Scrum.org and the pursuit of that quality by the trainers, the students are not seeing a discernible quality decrease from the interactions. But again, absolutely, we were worried that the quality of training that you could deliver remotely would be substantially less. But I think the ideas behind that are behind that notion that it would be sustained.\n\nAlas, I come from maybe five or more years ago where some of the technologies that are available to us, like Mural, which we were using in the class, was not as mature, not as able to provide that experience for students. The video conferencing technology necessarily wasn't. I mean, it was there, but it potentially wasn't as good as it is now. I mean, in most cases, apart from obviously our problem with Skype here and delay, it's generally flawless. You made the comment that during the class you felt like some of the students were in the same room as you because of the quality of the video that they were able to push.\n\nYou bring up a good point, Martin. Students are not only learning about Scrum and agile leadership in our professional scrum master courses and product ownership and using Scrum and user experience design approaches, but they're also learning about some very modern technologies for remote work. For people who work two days a week or three days a week from home, these technologies that we're using, so it's a bit of a, I'm going to go off and get some leadership training, but I'm also going to go off and for a bonus, I'm going to get some experience and training using electronic recording tools and learning how to break a larger team out into multiple groups. So you're getting, I always want to look at the value that we're delivering to students, and that's a value that, again, before I began delivering this training, I wasn't really perceiving that as a value. I was more focused on trying to maintain the quality of the experience, and now I'm realising that there's some bonuses that students are getting that I had originally thought about.\n\nI'm still trying to fix that delay, but I will see if I can get it. I think to go, but yes, I agree, and I think I also agree with what you said before about this is a good time for people to think about live virtual training. I know that the number of people now unemployed in the US is incredibly high. Part of that is the system within which your economy operates, and in the UK, there are more people who are on furlough than made unemployed. Part of the furlough rules in the UK are that you can receive training while you're on furlough, and your company can pay for it. That's the one thing that you're allowed to do. So it's even a government recommendation that you do or put people on training that are furloughed to just keep people doing stuff, keep people learning, and figuring out what's next. I think things like agile leadership are good for that cater of middle management that maybe feel like they have difficulty in justifying their existence, maybe more so at this time when the teams are all off doing something separately, and you just end up in meetings all day.\n\nI think that there's this space for people to learn a lot more during this time, not that they have to.\n\nYeah, you bring up a good point, Martin. One of the powers of the agile leadership training, the major upside to that agile leadership training is you've got two or three things going on in organisations that are moving to more agile ways of solution or product or service development. One of the things that the teams are beginning to get a taste of what we call self-organisation. In other words, getting to use more of their influence because they're closer to the work. When teams begin to get a taste of that, then they have some newfound needs, some needs that they didn't have before. Teaching leaders what those needs are and a little bit about how to meet those needs is powerful. But in addition, the teams themselves sometimes fail to appreciate, if I can be blunt, the contribution that managers at various levels sometimes crowd appreciate, the contribution that managers at different levels in the organisation have to offer or the contribution they have to make. We want to teach both of those things. We want to say, look, you have to, a leader, a person in a management level in the organisation, you have some new responsibilities. There's some care and feeding that these teams and individuals need that's different, but also there's an opportunity there to also try to communicate back to the larger organisation not only their needs but also the upside of, okay, great, they have these needs, and we want to meet those needs, but what is the goodness and the upside? What's coming out of these teams, like the identification of organisational impediments, for example, and the view now that scrum masters have across the organisation of, I say, some synergies and also some impediments, and how do we get that goodness out? You know, that information, that rich flow of information that we, the teams are getting now that maybe they didn't have before. How do we read that across the organisation? So we talk about communities of practice for engineering practitioners and designers and scrum masters and product owners, but we really, we really, the same concept of sharing of information needs to happen at the middle management layers, and so that's an opportunity as well.\n\nAgreed, and I think that, and it's also the, nope, I was practicing active listening, and the thing that I thought I was going to say is now gone. There are a lot of teams in organisations now that are being forced to work remotely when they would have preferred to work co-located. I think that word co-located is very important here because it's really just a metaphor for people working closely together. It's trying to say that if you're in the same building but on different floors, then that's not good for you being able to work together effectively. I think online technology, modern technology can kind of allow us to have a level of co-location as long as everybody in the team that's communicating digitally is in the same time zone. We may be able to practice some of those co-location skills from this perspective because there are a lot of people who work from home as well. There are a lot of people who don't want to live in the big city, don't want to commute into work. I don't know what it's like in cities in the US, but London commutes can be three hours plus to get from your home to wherever your office is, and people do that because they have to, not because they should be doing that.\n\nYes, and people don't have to be in the same exact time zone, but I think it's when you have, you know, a six-hour time shift or greater, or maybe five, that you begin running into the challenge, especially if you have an even larger time shift. So I'm liking the idea of having a select number of people in a video team meeting when working remotely. Maybe they're on mute, maybe they're sometimes on mute, but having a small group or even with some of the technologies, you can have an even larger group. What research has found is that a lack of line of sight is a barrier for communication. So in some ways, depending on how you set your groups up, you can actually have improved line of sight over in-person work.\n\nYeah, I think Microsoft did a study that with the judicious use of modern technology, you can get higher levels of communication and co-location bonuses for teams that are working together. They were using ridiculous levels of technology because they can and they have lots of money to figure it out and do that. But for most of us, there's the tools like Skype and Zoom, when they get the security problems fixed, and Teams and I don't know, WebEx and whatever else you want to use. There's a plethora of choices out there that can help us get closer together while we're far away.\n\nOne that I'd noticed, the families are using something called Houseparty, which allows you to see when people mark themselves at home, i.e. I'm open for a chat, and you can just have a room with many people having a chat, talking about stuff, and it handles the multiple people talking at once problem very well, whereas other tools are not so concerned with that because you want one person talking at once. They handle that a room as a party, and you can kind of drop in and out of different channels and groups very quickly.\n\nI actually, I have, because I used to live in the US, I lived in Seattle for three years. I started using Amazon for books and audible books and stuff super, super early on at that time because I couldn't take all of my physical media across the ocean with me. So I've ended up with all of my accounts or US-based, which poses some problems. For example, I have to buy my Xbox in the living room, runs off our proxy, effectively a proxy, so that it thinks it's in the US. So I, in order to buy US stuff, you have to have a US credit card, which I have. You have to have a US address, which I have. So it's perfectly legitimate. I just can't get access to that content because I travel so much.\n\nActually, if you think about it, apart from now, I was spending 300 days a year travelling, regardless of where I physically lived. My time was spent in hotel rooms. I think that the thing that I noticed was I have some channels on Amazon that have advertising, and it's all American advertising, which is something laughable. You can't have the funniest thing. My wife and I talk about it all the time when the adverts come on is American drug adverts. When they talk about all of the crap at the end that is going to basically kill you or deform you in some way, we're sitting there thinking there's no way we would ever take any drug advertised in the news. There are now a lot of adverts about social distancing, about companies providing services and new, either new companies or existing companies providing services around that. The ability to take advantage of opportunities when they arise is kind of the whole purpose of this thing we're trying to do in the first place.\n\nAnother thing that, if I could just segue a bit to suggest, is that there are some downsides, not downsides, some things students should know if they're considering online training. The camera in your laptop will work. If you have a better camera, by all means, use it. It's not required to have a better camera than the one in your laptop. If you have a second monitor and do intend to take some live virtual training, then by all means, have the second monitor hooked up because it does add a lot to the experience. If you don't have a second monitor, it's not an insurmountable barrier by any means. There is technology that will allow you to use your tablet or iPad or Android tablet as a second display. So if you aren't already using that and don't have a second display otherwise, then look into that.\n\nBut prior to taking some virtual training, your earbuds with the mic will likely work adequately for a live virtual training. If you have a headset, then that's likely better because headsets oftentimes have, not always, but oftentimes have a little bit of features that help with cancelling out external noise. These are some things for those who are considering laboratory training that you might want to think about, especially think about a little bit before your training because if there's some things you decide you want to purchase, then you can't get them quite as easily now. You might want to make the purchase now, even if you're considering some of these things are quite reasonably priced. These headsets are not expensive. If you buy a small display, small monitor, you can get those at not an exorbitant cost, and those are readily available. The larger ones are a little bit more in demand, but some of these things you might consider putting on your ordering backlog. But it's just proof or thumb, and hopefully for most folks, their company will be helping them out with some of these purchases.\n\nCertainly, I had trouble getting a second webcam just because there are none available anymore because everybody's bought that, and the ships were coming from China anyway with the stock, and there was a shutdown for about three months in China. So there's going to be an undue procurement delay there.\n\nThat is more unusual, but for example, I have our video camera. I have a doorknob EP, it's a Canon. Yes, I have our Canon video camera that I bought many years ago, and that has an HDMI out. Then I bought a dongle, which was available, to be able to plug it into my computer to use that as a second camera, and that's the one that I'm on just now. It is significantly better quality than the one that's built into my laptop, and that type of thing is definitely well worth it. I would agree on a second monitor so that you can have the video, the pictures of people up all the time and then do work on the other screen. I think that would be important.\n\nCool, so it's giving you enough time to interject there. I don't know how bad that is. I think the delay is pretty short for me to you because you react to things that I say very close to what I'm saying. It's just the reverse that is not true, and I will need to figure out how to fix that for future sessions. Was there anything else that we wanted to add to our list of things today?\n\nA bit of encouragement to those who are reviewing in two ways and two aspects, I should say. The training at participating in the training is usually a very stimulating and invigorating activity. So for those who find themselves suddenly remote, that's an upside. But the encouragement I want to give to those who are watching who are suddenly remote is to take advantage of meetup groups in your local area. Often those meetup groups are now having virtual meetups, so use this as an opportunity to network with your peers or groups of people that you haven't taken advantage of in the past. I say that because personally, in the Atlanta area, there are a lot of meetups that I've had interest in but not the time to travel to them. Now that we're, everyone in Atlanta is suddenly, well, not everyone, everyone except essential services are suddenly remote, then I'm getting to spend some time learning about communities that I couldn't learn about in the past, meeting people I couldn't meet in the past because I didn't have the time to physically go. But now that those people are meeting virtually, I've made several very enriching professional connections just in the last few weeks via meetups that have a live virtual component.\n\nMost of the meetups in Scotland that I actually found definitely getting to as well because I'm in Glasgow, and many of the meetups are in Edinburgh. It's not the easiest thing in the world to get between the two, especially at the moment, but they've gone all online. I spoke at one of the meetups, and I did it as a live stream for them, which they have now continued to do live streaming the event, which I think is good as well. They've found that they're actually getting more people coming because it's a live-streamed event, and they're getting more people from much further away. They're getting people from other countries dialing in because they just think the topic's interesting. You know, my local meetup has topic A, and this one, no, that is much more interesting than the one that I was thinking of going to, and you're getting that higher levels of diversity, which I think is super, super good.\n\nI think we're pretty close to time. I don't want to ramble on too long. We can always do this again sometime. We've got some more classes that Russell and I have planned to do together, and I know I have a public PSM in Oslo. Obviously, I'll be doing it remotely, a public PSM Oslo, a public PSK that I'm teaching with Daniel Vacanti from the UK time zone. I think I have our PAL E in Mexico City, which will be interesting between my private classes. Do you have anything coming up, Russell, that you want to add?\n\nI have some public classes here in the Eastern time zone in the US, both professional scrum master and professional scrum product owners. So those who live in the Atlanta area or select other cities in the Southeast United States, I'd be happy to have you reach out. My LinkedIn connect is Russell A. Miller, so you can message me through LinkedIn. That's a good way to contact me, or you can also find me on the Scrum.org website. Those are two methods people can use to reach out.\n\nOh, absolutely. I think that we both are going to be working together over the next few months, and hopefully, we'll have even more learnings. The next ones that we're working together on are going to be our professional scrum foundations, but not the next one I'm doing, which is on Monday and Tuesday because you're busy. Hopefully, that will all work out well, and we'll both know a little bit more about how to do this crazy thing, a live virtual classroom when we get there.\n\nOkay, thanks very much, Russell, for coming on.\n\nMartin, it was a pleasure to help you facilitate that professional agile leadership course. That was great to do that, and I'm looking forward to our upcoming collaborations.\n\nAwesome, so I will speak to you."
  },
  {
    "Title": "Navigating Agile Transformation: Empowering Teams for Success in a Rapidly Changing Landscape",
    "Description": "Explores effective Agile transformation by empowering teams, improving collaboration, focusing on value delivery, and fostering continuous improvement in fast-changing environments.",
    "ResourceId": "r_Af7X25IDk",
    "Url": "https://www.youtube.com/watch?v=r_Af7X25IDk",
    "Date": "2020-04-17T18:57:11Z",
    "Captions": "hey welcome to naked agility I'm gonna be doing my episode 5 leading agile change webcast any questions you have please send them on to me I don't promise I'll answer them during this session because I'm going to be busy focusing on this but I have a Q&A session on Tuesday where I will answer any of those questions that I can I want to do a little call out to my professional agile leadership class that is running on Monday this is a virtual live virtual classroom we currently have six people and we're going to be talking about the movement for management from that management traditional management style over to leadership and what that means today I'm going to talk about a few things in this leadership presentation so I want to talk about what the problem is and where it comes from I want to talk about that the who the what and the how and how we can organize some of those things and get them let's get started\n\nnaked agility is available for DevOps and agile training and consulting contact us for a free consultation\n\nokay so the first thing to talk about a little bit is um what the problem is and really it's around that idea that things have changed and not just because of the current situation with kovat at 19 this is something that has been happening over the last 15 years the world has been changing very quickly and firms companies have been really struggling to keep up with that floor some of that floor has come from and that idea of the expectation from users if you're in the commercial world of delivering value to them a little bit more quickly and some of that has come from those users then being in organizations and expecting more from their employer whether that be they want to bring their own device rather than use the corporate device so they want more freedom on the network more freedom to do things inside of the organization to have ideas and move forward that's that's really what that difference is companies today need to be able to take advantage of things that change in the market market opportunities or difficulties like the current situation and in months or weeks instead of years and I think that's something that you're seeing a lot of companies struggling with now that move to home working where maybe before they were we're not going to do any sort of home working and then struggling to really get that in working times have changed effectively and they've changed very much in the last few weeks at so I'm going to talk more than from kovat perspective this is a presentation that I did at M agile in Africa in 2017 for my good friend Nana and I thought it would be a useful presentation in these in these dire circumstances that we're in so I'm gonna be focusing on product and I'd like you to think about this let's say we've got two two groups that are building a product one group a group a has a business plan they are well established in the market they're well funded and they hire the best people okay that's that's one group the second group B people are going to be working for free we're not gonna pay the people that are doing the work they're gonna do it in their spare time for the goodness of their heart just because they want to so which of these do you think would be more likely to be successful\n\nif you're an additional mindset you're gonna be gravitating very hard eh and but II was in fact a large product called in Carta Microsoft Encarta which some of you may remember um and Group B was Wikipedia and the thing that I find that kind of funny is the Wikipedia entry for Microsoft Encarta at Mike's of Encarta was a digital multimedia encyclopedia they just couldn't keep up with the change they deployed their application on a disk physical disk that was sent out to your many physical disks as it were and it was just impossible to keep up with the change in the world and Wikipedia and Wikipedia one because they had the most up-to-date data but people give up their time for free I'm wondering if you can think of any other companies that have really struggled and maybe completely gone out of business I was thinking maybe of Bob Buster that's a very common one it was funny the blockbuster was represented in the and what was the the the movie the Captain Marvel movie you saw Helen didn't have blockbuster at the start and that's that's it's just it doesn't exist anymore I think I seem to remember an article where the blockbuster CEO said he didn't believe that anybody would want to stream movies and that was a couple of years before Netflix came on the scene I was also at Kodak for those that don't know Kodak is still around and they aren't doing really photography and stuff anymore they're doing blockchain because if you can't figure out what to do and you got to reinvent your business look Jane apparently but Kodak the Kodak invented the digital camera more than 50 years ago they decided that they would bury that technology in order to protect their film business which was the most profitable part of the business so they buried a new innovation but the problem is once something's discovered it doesn't go away somebody else is going to discover it again they're going to go down the same routes and maybe come up with a better product if you don't get to market with the ideas that you've got even if they're going to disrupt your existing business then you you're going to run into problems that annoying also really we have this challenge we have a number of a number of challenges that I'm going to talk about and in the what the WHO and the how but we have somebody with an idea who creates who creates an idea I've got something I want to go build something problem I want to go solve and we go off when we create a product and release it to customers and then the either like it or they hate it a good example of customers not liking the thing that was delivered was Windows 8 Windows 8 was released and people there was a massive expectations gap between the product and what people perceived that they wanted so max I've had to roll back a lot of the changes that they made in Windows 8 and in the UI in order to appease some very unhappy customers and to get higher levels of adoption and that's unfortunate it was a good product it just had a mismatch between what people want eaten and what they got so they got a lot of negative feedback from customers but you might also get positive feedback so we have a number of variables they want to look at in the what WHO and the how and the first one until the cat is the the challenges in the what space\n\nthe idea that we have to decide what we're going to build in detail up front is definitely an old tailor istic practice you should go read my are sorry watch my video on how to detect a duel and the tyranny of Taylorism but in the what challenges fifty sorry fifty sixty five percent of functionality that you build it will not be used by your customers this is data is based on a report from the Standish group in Boston they collect data on 70 odd thousand projects around the world and the the averages are 65% you might be better than that you might be a lot worse than that but that lack of focus on the the strategy of the product and is what's causing that rather than building things that are strategically going to achieve pieces of value for your customers a lot of organizations are just building a bunch of stuff without really understanding that relationship between that because we're used to those long detailed elaborate product backlogs where you you I go into organizations all the time and this I say can you show me your product backlog and they pop up in the product backlog and those 5,000 things in the product backlog there's no way that a product owner that somebody's setting strategy and direction can even remotely understand what's in there which means they then have to have an army of minions to spelunk all of that data and figure out what might be important but those people looking at the the minions are going to be surfacing all the things they think is important which they might not have as much information and as the the product owner or as the the person who is setting that strategic goal so ultimately because we have these big backlogs or a lot of organizations have these big backlogs 35% of your requirements are going to change over the life of your project and that's just reality 35% is going to change so if 65% is not used 35% is going to change that's not a really good picture and some of that comes from not really having a good description or definition around the responsibilities of product management what are they actually supposed to do and also whether you have somebody who is has the role of product owner or you have that term in your organization or not you have people in your organization who are fully fiscally accountable for delivering value based on the money spent those folks I would call product owners and but often that accountability is delegated to people who are weak or not authorized to be able to make the decisions that they need to make in order to live for your organization to get a significant amount of value from that and ultimately we have this focus on project rather than product I'm not saying that you can't have a project you absolutely can but the overall strategic focus should be on delivering value in a product projects are time limited very definition of project and if you are as an individual or accountable for delivering something in a time limited fashion you're interested in getting that thing done but there might be choices that are made during the life of that project that are detrimental to the overall product and it's very common for large projects that are going to result in an ongoing product or be added to an existing product to result in significant additional levels of technical debt and additional levels of complexity and really things that don't need to be there part of that 65% of the functionality not used we delivered that functionality 65% of it wasn't used so did we look back round figure out which 65% is not used and take those things out and leaving stuff in your product means you've got to support it maintain it it's care and feeding you want to get them out if you can and that idea of those long long cycles many organizations still deliver less than once a year organizations can be 2 or 3 years between releases still for some large organizations but large products but many organizations are moving to quicker delivery quickly delivery does not necessarily mean once a quarter quicker delivery in the the agile space is 30 days or less you should be delivering your product into production at least every 30 days in order to solve some of those problems but that's not common in the industry yet we're going to talk about that so then we have some problems around who is doing the work or the the people problems who is going to be doing the work and so having an effective change transition management ie we've got a bunch of things we're doing things change things are different than we expect how is that communicated across the organization how do you make sure that and when the the engineers are actually doing the work can they find out things are a little bit different than they expected to be that's filtered back to through the layers that you've got in your organization to your customer\n\nthen and also the resultant information is then transitioned back the other way organizations on average lose 50% of their time for ineffective collaboration and basically the the handoffs being being very inefficient ineffective this idea of servant leadership and I think servant leadership is often misunderstood and it's not about just getting getting the coffee or doing things for your team it's about creating an environment within which your team can be as effective and efficient as possible\n\nand that is often very lacking in organizations that's why an effective servant leadership there might be servant leadership but is it actually effective and then having a misalignment of objectives are we going at all going in the same direction and are we focused on delivering the value that our customers need in our product in order to increase our market share in order to deliver that value and that will give us the thing we need and contributing to that 50% of an effective communication and is unimpaired scrum masters can they can't they maybe know what they should be doing but they can't do it those of the organizational bureaucracy that is there maybe they're ineffective in the first place and a lot of complexity around who makes the decisions how those decisions are made how many stakeholders have their finger in the pie is that where to get things done so that's a big who challenge losing 50% of our time for for that kind of collaboration problem\n\nthe other other big area is how I'm really the biggest issue in the whole world is this thing that we call technical debt technical debt isn't always the best name to use it depends who you're talking to and their understanding of the world and of finances I've worked with a number of CFO's who have told me that technical debt it's not the best thing you can call it because ultimately technical debt is not what sorry that is not all bad we have mortgages we have loans for cars you might take a loan out to get your sofa and paid off over a couple of years those are not necessarily bad debts however all technical debt is bad you'd be better at thinking of it as an unhedged fund for those that are technically monday minded you've got an uninsured risk effectively in your product you have risk in know no mitigation and this can technical debt can take lots of different forms and I usually sum it up by saying anything that is difficult or anything that is manual are all of that is technical debt but if you have any manual processes between your your software coder committing code to your repository to getting that item into production then you have technical debt that could be manual testing that could be manual environment provision provisioning manual deployments manual anything anything manual anything that's difficult if you're wondering why it takes so long for your engineers get things done when maybe when your product was was new and green it was very easy to get things done it's because there hasn't been enough care taken about how things are written how things look and how repeatable things are can I go back and edit and understand this part of the system easily have I made changes to the system to allow that to be easy easy easy to read easy to understand easy to change and the software will call that refactoring refactoring is something that should be going on all the time it should not be an optional thing that somebody decides to do or not it should just be how we work just like if you were going to release our press release you were going to some big announcement for your organization that was maybe a little bit controversial or could be a little bit controversial I'm are you just going to write those things down are you going to write that press release and Shepherd Act you just gonna email it to everybody I would hope not you're probably going to reread that thing make some changes to make it make more sense you're maybe going to loop in one of your colleagues and say is this on message is this the thing I'm trying to get across quit this be misunderstood and then you're gonna go through some more iterations and then maybe you'll look pen at somebody else in your organization look then somebody from marketing loop in somebody from engineering look and somebody from contracts from legal from sale all of those departments make sure it looks like it says exactly what we want as an organization to present and then we'll release the press release so there was a lot of refactoring there going back over the things that we had done to make them make them better make them easier to read easier to understand same applies to everything we do\n\nso we talked about a lot of problems and this results in a lot of loss so what what does that look like if you crunch the numbers a little bit\n\nso I again I lasted this presentation in Ghana in Africa and I have Canadian cities as my currency there but you can think of any you can put any currency in in that space and the numbers meet the same so if I have 500 cities pounds dollars at whatever it is and I'm going to invest that in my product I'm gonna get my engineers to build something what does that what does that look like well if I lose thirty five percent for building the right features yeah so I sixty five percent of my features used little effort by my customers and then thirty five percent are the right features so we've spent a hundred and seventy five cities pounds dollars on delivering actual value if we lose fifty percent for effective communication and collaboration what does what does that look like well 50% of our 175 that we had at left is eighty seven and a half so we get eighty seven and a half pound cities or dollars and then we spend thirty percent of our time on average building new features there see struggling with technical debt so that's the complexities of the thing that we've written the the difficulty in understanding the thing that we've written of the manual error-prone process is that we've got results and we are only able to spend about 30 percent of our time adding value to our product certainly percent every time cause just struggling with complexity that's all we're left with twenty six and a quarter but 26 and a quarter and out of our 500 so what does that look like on $50,000 that looks like two thousand six hundred and twenty-five dollars and I'm not sure that's I've violated return on investment and anybody's eyes hopefully in your business it's not and this is why the business is concerned about the amount of value that they get for their investment in the software world and why the software world is often considered a cost center rather than a profit Center which it should be we need to address some of these things we need to change these numbers in our favor and that can be super difficult so I've got some suggestions that are pretty hopefully there they make sense for you the first suggestion is around or suggestions are around the what the value that we delivered the first one is to try and focus a little bit on product rather than project so while you can have a bunch of projects going on inside our product and make sure that decisions are made based on the outcomes and changes in behavior you want your customers to have rather than on delivering on a set of items delivering on a set of items does not necessarily provide value to your customer focus on the value and hopefully you can make some shift shift those percentages so we spend more time delivering the things that we really needed last time working on things that we our customers aren't going to actually use\n\nhave a product owner have somebody with full fiscal accountability or delivering value in your product at the to be accountable for maximizing value there should be solely responsible for the backlog so don't second-guess them you might not like some of the decisions that they make that's sometimes just the way it is there they're thinking about they're taking a bunch of information in from market competitors what the board wants what stakeholders want they have a lot of information and they're making a decision holistically for the best result in the product based on that so ultimately you can get an inadequate return on investment maybe you want to stop funding that project if you're not getting the return on investment that you're expecting maybe the pro toner needs more teams to work against the product you need a new product owner but they need to be empowered to make decisions about the product and nobody else should be able to tell the development team what to do effectively a product owner hires the development team the development team hires the scrum master and that's that's the the chain of hierarchy within the agile world and specifically in scrum now caveat everything I say with it has to work within the context of your organizational constraints you're going to have you have a unique organization that you work in you're going to have to decide how you want this to work depending on that organizational constraint might be some things you can't change but maybe there are things that are inhibiting your team and your organization's ability to adopt some of these practices and those are maybe things you want to address maybe you need to bring HR into a discussion around what what do we need to do differently maybe you want to bring sales and maybe you want to bring contracts in make sure everybody's involved in looking the outcomes you're trying to achieve so don't think of agility as thing you're trying to achieve this is you want to get specific strategic outcomes for your business and how are you going to work towards those strategic outcomes and maybe these tools are going to going to help you with that because ultimately we do still have to do planning and it it's important for the business to understand where we are where we're going how long we think we're going to take to get there and that needs to be okay\n\nthose are answers that we need to be able to provide for the for the for the business its how business gets done so we have to be able to provide them but we want to change the way we look at those things this is from a complimentary practice from the way Microsoft is currently doing they're at long-term vision and planning you can use bits of this you could use all of it you could use something else that's okay this is just an example so here they've got three week Sprint's this is for a particular team there's your dev ops team like Microsoft they do three week Sprint's and then they plan over three three Sprint's so that's nine weeks planning they understand more or less what it is they're going to be doing over those nine weeks beyond that they're not so sure but inside of those nine weeks they have a reasonable understanding and then they have this seasoned model so six months seasoned model you'll hear Microsoft talking about the the fall and spring updates from any of their products that's based on this seasoned model so they have a six month what are we trying to achieve in those six months and then they have a 12 to 18 month strategy here are the high level objectives that we're trying to get to\n\nthen they'll reassess those on a 12 to 18 month basis reassess the features they're going to deliver towards those strategic objectives in a six month cycle Andrea saw assess the individual things they're going to add to the product the implementation plan on that three Sprint's three weeks basis so ultimately in their world the team is responsible for the detail so the the scrum team which includes the product owner for that for that team and are responsible for the Sprint the plan and a good way into the season what are we actually going to do what are we going to implement in the product and what are the the things we're going to go build but leadership is responsible for setting strategic direction to make sure that we're all going in the same direction they need to set that and decide what what are we what are we investing in where are we spending our money holistically ultimately we need to shorten as much of our feedback loops as possible and the quicker we know we're building the wrong thing the quicker we can stop building the wrong thing and build the right thing the worker we can find out that something that we are going to build is right or wrong or needs to go in a different direction the better so we want to be able to get into that loop of delivering as quickly as possible and this particular group this team delivers to production every three weeks so every single sprint goes to production so they're able to get the output of the work they just did in the current three weeks in front of the customer during those three weeks they actually do continuous delivery and and then get feedback from them right away as soon as users are able to use that so we want to shorten those feedback loops by shortening the time to market in order to really understand how those things are happening you want to be able to get an understanding of what's going on in these four areas the specific metrics that you measure are going to be up to you but you want to make sure that you're looking and at what's your organizational capability and how do we improve that so the first part is time to market obviously how quickly we're getting our product out to our users and we might have a bunch of metrics that we're going to monitor those metrics are going to change over time as we get better some metrics become less meaningful if we're in continuous delivery how quickly we delivered the customers maybe become such a small number that it doesn't matter anymore we also want to look at our ability to innovate and in our ability to innovate we're looking at are struggling with complexity there sees new features in production our ability to add stuff to our product baracy struggling with complexity sets our organizational capability and then we also want to look at the the market we want to look at the current value that we're delivering how do we know that the things that we're creating are providing value to our customers how do we assess that value and increase work to increase that value that's one thing\n\nAbaddon's you've also got unrealized value that's effectively opportunities you either weren't able to go after or or didn't didn't know about didn't know about one's a little bit difficult to measure but the unrealized value is important to balance out at that picture of what's happening in the future\n\nso increasing value and in the what space is all about product not project although projects may be going on and one decision-maker called the product owner you can call them whatever you want the rule is the product owner regular planning and realignment so instead of having a long term plan have much shorter plans usually three to nine weeks and have them cycle through I am most the most common cadence I've seen for that realignment of planning is two weeks sprint of two weeks is this is the normal now it used to be 30 days a month us what the scrum guy talks about part of that is because technology has changed over the last 20 years that scrum has been around 20 years ago it was really hard to ship your product to production on a continuous basis today it's easy to ship your product to production on a continuous basis and I teach a class called the professional scrum foundations class in the professional scrum foundations class and the team's this class is designed for for everybody in your organization but you need at least one software engineer per team per team of five so one in five people in the class is a software engineer you can do it and and we build software in the class and I have had a team do a 30-minute sprint and at the end of that sprint they've set up source control they've set up a continuous delivery automated build they've got that automated build feed into a deployment pipeline and they've got the deployment pipeline deploy the application out to a production place where anybody can access it and and they did that in 30 minutes as well as creating product and that was a team of five think what that team could do in two weeks if they could do that in 30 minutes\n\nso being able to get as early feedback from customers as possible and and measure the value rather than activity so don't measure how long people spend per day doing the particular tasks it is completely meaningless it's about the value that you get for your users a good example of that is that same team that I've been talking about and this is features delivered per year with the azure DevOps team which was the TFS team at Microsoft and in 2012 they were delivering 22 features to production each year they spent a lot of time reorganizing themselves paying back 10 technical debt moving to a three-week cadence for the dalish to production every three weeks and over the next what's that in the in the graph six years there they're still going in that model bits from 2012 to 2017 they ended up moving from 22 features to production each year to 260 plus features to production each year most of that paying back technical debt lack increase collaboration so we remove that 50% and spend time working on the right features rather than the wrong features you can get these optimizations as well if you're willing to change your organization change the way you do things in order to get there so what about the the who the culture in the organization we need to change a lot of other things to make it work and really it's that flipping it on its head that you you you hear about a lot rather than customers being at the bottom and the CEO being at the top and you customers are around the outside and you have delivery teams delivering value to those customers on a continuous basis and with CEO online of business leaders setting strategic direction at that level as the modern digital organization is based around that idea of we have a cross-functional delivery teams across our organization continuously delivering value to our users and we're getting feedback and adapting that idea one thing to note is that is that culture eats your strategy for breakfast whatever whatever that strategy is it is your people and that will both make it happen and get in the way of making it happen so we have to bring bring them along we have to make sure that we cater for the needs of people they are not resources that's traditional terroristic thinking where most modern management practices were designed around managing factory workers Industrial Revolution and factory workers is a whole different ballgame from knowledge workers so there's a really good book by a gentleman called Dan pink called drive and it's about moving away from the carrot and the stick towards something a little bit more modern so carrot and the stick really only talks about extrinsic motivations motivations from the outside so if you as an individual do not have enough money to feed your family you're struggling to feed your family put a roof over your head the only thing that matters to you is solving those problems and that's going to be more money however once and I hope all of your knowledge workers are in this category and once you're not struggling to put food on the table motivation changes to intrinsic motivations and those intrinsic motivations are autonomy mastery and purpose and autonomy is being in charge of your own destiny you decide what you work on when and how mastery is about being good at what you do most people in knowledge working space want to learn more do more be more capable and better over time and have a purpose so they want to feel like the things that they do actually matter but we have to have a balance there and you got a balance autonomy an alignment if you have too much alignment you're going to stifle the innovation of these smart people that you've hired to go do the work if you have too much bureaucracy in your organization then they can't go solve problems and interesting and innovative ways that will get you to market quicker but if we have too much autonomy then you end up with a bunch of people going in different directions so you need to find that balance inside your organization you need to figure out maybe where you are right now where you would like to be take one step in the direction you would like to go see where you get to and inspect and adapt those changes to your organization as well make a change see if it worked getting those changes in front of people they don't have to be perfect you just have to try stuff see if it works and we need to try and shift shift the needle from management over to leadership rather than talking about deadlines and timelines and project plans we should be talking about a flow of value getting to our customers because the deadlines don't really matter you might have deadlines that do matter you might be in a regulated industry you might have to meet legal requirements those are constraints that are out with the bounds of this conversation I can't help you fix those they were just things that happen you might have FDA regulations you might have whatever but within the bounds of your organizational constraints how far can you go towards folks on product owners on floor and on value how far can you go you want to get as close to that as you can and instead of having providing people with answers again a tailor istic management practice because people don't need to think if they're doing monotonous factory work we want to enable our self-organization with our scrum teams so they get that autonomy they feel like they're in charge of their own destiny so these are some changes that we want to move away from towards those from management towards leadership and in order to do that it's important to establish Scott strong scrum mastery inside your organization there is I feel that there's a very tight relationship between a scrum master and a leader inside your organization they have some of the same roles and accountabilities they're just maybe operating at different levels inside the organization\n\nso a scrum master can the role of scrum master again it's not the up title the role of scrum master can operate at any level they can be a change agent for your organization they can be a coach to individuals and they it can be a new management role but it should never be a servant or moderator for teams that's not the role of the scrum master you're hiring smart clever resourceful people take advantage of that\n\nthat's this that's really where you want to get to in order to achieve that scrum masters Cana and we talk about in the agile community this is from the agile coaching competency framework that they had your floating Institute and the many stances of a scrum master and so if you're a lean agile practitioner you understand the foundations of agile you understand the foundations of lean and you figure out how best to use some of those techniques in your organization and you're going to need certain skills depending on which level you're focusing at depending on the size your organization as well may be constrained but you need some level of technical mastery so that you can help teams be able to do do this thing this DevOps thing do a continuous delivery do feature flags hiders how do those things work and how do we encourage our teams towards those models how do we encourage them towards doing TDD and having code reviews and doing all the things they need to do we need your masters need some level of business mastery how are they possibly going to be able to help the the product to owner become a better product owner if they don't have some level of business mastery so you'll find that many agile leaders have that business mastery already what about organizational transformational mastery if we're going to make changes to our organization we're gonna try and get better at delivering remove bureaucracy in order to actually get things done and how do we do that how do we make those changes at the organizational level these are these are all important questions there's no right answers I would recommend looking at the agile coaching Institute's classes and courses and seeing what you can do there you can also take the professional scrum master class where we talk about and introduce some of these things or the advanced master class from scrambler dark where we talk about liberating structures and how we can organize people around getting the best most is the wrong word getting getting the most effective outcomes from groups of people facilitating that a much higher level and it's a very powerful powerful class\n\nso professionalism the how what are we going to talk about here so um there's an interesting misunderstanding that and everybody on a scrum team has to be cross-functional that's where this well this is where I believe this magic unicorn of the full stack developer that came from and these people that are cross cross functional but they seem to be a suicide me knife they are actually very rare many people will say they're a full stack developer and they're they're not they're actually just a generalist they might have deep specialism in one two maybe three areas but they're a generalist my background and expertise I was a software developer for ten years then I moved into the DevOps space with TFS and as your DevOps and I helped customers optimize their their processes for many years and I moved very quickly towards that process agile scrum lean Kanban all of those things as well that's my expertise my expertise is not in testing however I have taught testis I have a general enough knowledge in testing on what tests mastery should look like in order to go help and coach a group of people around getting better at testing they are going to be the experts I'm definitely not going to be an expert in that but I can help them move towards getting them also fit so I can be a generalist I can do testing I just am NOT an expert I can do DevOps I am an expert I can do documentation writing oh maybe I'm okay at document writing we all have lots of different skills if you look at a Harvard Business Review article from 1986 called the new new product development game it talks about all of the research that was done to figure out that a team of generalists will almost always outperform individual specialists because that now my dear that somebody smart comes up with yes debunked by somebody else you have somebody to bounce your ideas off you know that thing where you have a problem you can't figure it out you go talk to somebody who maybe has no idea what your problem is but in talking it through you figure it out they helped you figure it out if you have a bunch of smart people together you can surf ideas you can figure out the nuances of those things bring those different backgrounds together Microsoft I think has done white paper on how much diversity is important and the outcome that I understand is that the more diverse a team the better and that was race religion culture background everything technology the more diverse the people in a team the more are the better the outcomes that the team has so in that vein the old way was that and again this is the tailor istic practice from factory workers we're gonna have a management team we're gonna have a development team and we're gonna have test team and we're gonna make sure that they don't talk to each other and that the the you know just send bugs back and forth or instructions that really doesn't work\n\nso these your DevOps team at Microsoft move very quickly at the start they made a lot of mistakes in this process don't get me wrong but they got a lot of learnings as well because by making mistakes we learn things and they move to a single engineering in fact they also pulled in other roles as well like service delivery UX UE all of those things coming into at one place and then they created teams our own server or I have delivery teams around people from engineering paired with somebody from program management so that you get that holistic strategic direction plus smart ideas for for doing and delivering on the work so bring them together but you still when you move away from that idea of having M core I'm just looking at test and you move towards having a cross-functional team and you maybe start to lose some of that expertise that testers can share with each other when they're sitting together in the same department now there are on lots of different teams so the way we tend to handle that is with communities of practice and it's kind of like a user group you know if you want to meet up you'll find it by user groups you can go to the Knitting user group how do you make sure that you share knowledge inside your organization run internal user groups on whatever topics make sense I would expect communities of practice around architecture in order to make sure that the the teams are understand why architecture is important rather than telling them how to do their architecture educate them on what good architecture looks like same for security same for tests same for coding that same for any of the practices that need to happen inside and around the team so they can share share that knowledge so for this particular team at Microsoft you might be asking well what changed with just the things that I talked about things that changed or did more things change well really everything changed for this team they moved from delivering software they were actually on a two-year cadence with a service pack halfway for many many years and that built up a lot of technical debt because you generally didn't go back and change the same thing over and over again on an iterative basis as you learned more from the customer it was more fire-and-forget and lots of bugs I think at one point they had tens of thousands of reported bugs in the system and it got too much they were struggling under the same complexities that everybody else struggles under even though their main business seems like its building software Microsoft's main business is not building software they do what everybody else does they build software to support their main business productivity tools whatever whatever that that is so in order to move forward you need to create professional teams they need to be empowered delivery teams that are able to take ideas that people have turn them interval into increments of usable software things that people can actually use shorten those feedback loops and reduce the technical debt maintain communities of practice and measure the outcomes don't just assume that the features you build are going to be useful to your customers make sure they're going to be useful to your customers so if I was to have some takeaways have product owners with clear ownership that maximize value to your customers and create professional teams that embody technical excellence and I can't stress at technical excellence more and is really really important and have strong scrum masters that are empowered to be organizational change agents that are not going to accept the status quo that are always going to be pushing on those things that maybe we can't change right now but we should be changing in the future how do we bring HR into that story how do we how do we do that so I talked about three well really four areas I I described the problem that we have where we're losing a lot of time where we're losing a lot of resource where we lose hemorrhaging money all over the place in engineering and software development at the moment and we talked about where those problems are coming from at the who the what and the how and I'm in each of those areas we talked about some of the things you can do to try and reduce the level of waste in those areas and improve the situation even small improvements even if you made a 1% improvement think of the budget in your organization and what does 1% mean to your business even 1% can be important so don't think about I need to change everything think about what's the first thing that you need to do to try and improve things do that see how you get on okay so let me see if there are any questions if there wasn't I don't see any questions that doesn't mean there wasn't any questions I know that there was some questions to my Q&A last time that didn't pop into my thing uh but please feel free to contact me if you need anything um I'm available on my website\n\nnikki agility comm and KD agility comm there's my email my phone number and my twitter you can contact me anywhere you would like cool so there we go but the one I want no that's the one I want so hopefully that was useful and I hope to see some of you at the Q&A on Tuesdays okay thank you very much naked agility is available for DevOps and agile training and consultant contact us for a free consultation"
  },
  {
    "Title": "Navigating the Agile Landscape: Understanding the Key Differences Between Product Owners and Project Managers",
    "Description": "Explains the key differences between Product Owners and Project Managers in Scrum, and how agile roles, team structures, and metrics impact organisational effectiveness.",
    "ResourceId": "ZPRvjlp9i0A",
    "Url": "https://www.youtube.com/watch?v=ZPRvjlp9i0A",
    "Date": "2020-04-14T19:09:07Z",
    "Captions": "Nikita jollity is available for DevOps and agile training and consultant. Contact us for a free consultation.\n\nHey, this is Martin Intuit. I'm a professional scrum trainer with scrum dark and I Microsoft MVP. I own my own consulting company in Scotland and I travel around the world doing consulting and training. But at the moment, obviously not travelling around the world. If you're watching this video at another time, we are all on lockdown at the moment or COVID-19. So I have taken two and helping some folks out over the internet, getting some questions coming in and then just getting online and answering them.\n\nMy good friend Debbie, who we often disagree about things, was online earlier and I stole the idea for office hours kind of from her. But it's something that I had in mind anyway, but I definitely have to give her some props for that. So ultimately, this is an ask me anything session. I have a few questions that I have collected since last week. I'm interested in any questions you have. You can ask questions in the chat, which I have, and I can see all of the chats that might be available. But also, I have a way for you to ask questions if you are not happy about being publicly acknowledged as having asked that question. \n\nSo on the side of the screen here, there is a link to a forum where you can anonymously ask a question in a box and I will read out those questions and then do my best to answer them.\n\nSo there's a couple of things that I did want to mention first. I noticed on the Scrambler Dawg website there were a couple of things that I thought were super awesome and I really enjoyed. The first was an article by Simon, one of our trainers from Canada, about learning scrum using Minecraft Education Edition. So I think this was a really good article. I would recommend you read it and maybe take a look at Minecraft Education to help facilitate some things that you might want to do.\n\nThe second one is from Christian, probably needs no introduction from his Mythbusters series, and he's talking about the myth that you can't do projects with scrum, which is indeed a myth. There's nothing in scrum that says you can't do projects or focus on projects or do anything of the kind. You can do whatever you want. So that's a good article and he's got quite a few comments and it really tackles some of the, and I think Christian's been very good at tackling some of the, I don't know what you would call it, the evangelical side of scrum. Evangelic or maybe the, I guess I would say bible-bashing, but it's maybe not politically correct, that side of scrum where people are saying you can't do things or scrum is this way or scrum is that way.\n\nI think there's a place for focusing on the rules of scrum, which is in training, and then there's a place for focusing on the value that you're trying to get, which is in the real world. So training is not the real world. It's a safe to fail small space. Once you get out into the real world, you're going to have to make compromises and that's just reality. \n\nI spend a lot of time going around organisations all over the world talking to them about those compromises and how they can maybe have less compromises. That is also important, getting as few compromises as possible, but the compromises are still going to exist. So I find those two articles super interesting. I think there's a podcast behind this one and it's pretty awesome.\n\nSo let me go back to me. There we go. So I have three questions. I don't know how long it's going to take us to answer them. It will take as long as it takes, but I have three questions so far. The first one is, I would summarise it as product owner versus project manager. I think the question was, what's the difference between a product owner and a product manager or a project manager? I guess a PM versus PO. \n\nI think that there's an interesting piece there because they're really not the same thing. If you look at the scrum guide, which went, it's good to mention in the scrum guide, it talks about the product owner as a role. All of the roles in scrum are roles. They're not job titles. They're just a thing that somebody does. So the product owner is accountable for value delivery in scrum. If they're accountable for value delivery, they have to be looking after the list of work that people are going to work on. They need to understand what all of those things are in that list of work. They need to present that list of work to other people in the organisation to make sure everybody has the same understanding of what those things are. \n\nThat idea and that they need to own that and really understand that is fundamental to them being able to do a good job of providing value in the organisation. I often talk about, and I think a lot of the other trainers do, that product owners should be fully fiscally accountable. They should be the one, here's your budget, you have your budget and you're spending it on this product. But they're not always the case, but that is definitely a good idea.\n\nSo they care a lot about the market. They care a lot about how the product is going to be used in production. They care about what the competitors are doing. They care about what features users need. Those are all things that a typical project manager doesn't necessarily care about. I'm not saying that all project managers are like this, just like not all product owners are awesome. \n\nBut the traditional project manager is focused on delivering on a small subset of items and their focus from beginning to end is on time with the features that were asked for and at the cost that was indicated. So on cost, on time, on features is the traditional measure of success for a project manager and that kind of narrows the focus a little bit to getting the thing done. You could maybe ignore the idea of value delivery. You could maybe not deliver as much value as you could because there's that focus on, here's the piece of work, let's just get this done. \n\nThat can be super awesome. That's the traditional training for a project manager and there are many people out there who have the role of project manager but also have the role of product owner. Even if their organisation is not doing scrum, they're not called a product owner, they might have that hat to wear anyway. I think that's really the distinction. A project manager is looking at a short time limited endeavour of work that's on time, on budget, on scope, whereas a product owner is looking holistically and strategically across an entire product and understanding and ordering and expressing the vision, ordering the backlog based on that body of information.\n\nSo while there are project managers who are also product owners and product owners who are also project managers, I think you can see that there's a very distinct difference between those two roles. I think there's a place for product owner in an empirical process control system, but inside of an empirical process control system, there's not necessarily a place for a project manager. I'm not saying that project managers are not useful. I am definitely not saying that, but inside that world of empirical process control that we know less at the beginning than we discover as we go, the traditional ideas around project management of having that scope up front, having that big budget up front, and having those resources available is a little bit antagonistic to that idea of emergent architecture, emergent backlog, emergent budget potentially.\n\nIt comes from a good place. It comes from those Tayloristic ideas. If you go watch one of my previous sessions, I talked about the tyranny of Taylorism and why that has had a knock-on impact for the last hundred years on the way we work and the way we do things. I think that that led towards that project manager ideal. We are, as we're switching over as an industry, as everyone's kind of focusing on that shift over to product owner, project managers still are useful, still have a place in that world, but it's just the right approach for the right type of work, which is good.\n\nSo that question was, what's the difference between a product owner and a project manager? If you have any questions, please feel free to put them in the comments. If you don't want to ask a question publicly, which obviously putting in the comments is going to put your fingerprints all over that, then please use the link here and I will get an anonymous question to answer around scrum, DevOps, technology questions, whatever you want, technology, scrum process, practice, these people, tools, whatever. I will happily have a discussion around anything.\n\nSo that brings us to the second question. The second question maybe has a knock-on effect from the first one. I was asked a few days ago, apart from the scrum team, who else does scrum affect? Why does anybody else in the organisation even care? I think that comes back to some of those ideas that I just talked about. When you have a defined approach and you know a bunch of things upfront, you can make all of these concrete plans around how things are going to happen. When you can do that, you would organise around a different model. \n\nAgain, that comes from the Tayloristic approach that was designed to manage factory workers, where you have a hierarchy of organisation because you have a bunch of people doing the work. Those people doing the work aren't, and the phrase I'm looking for, it's not that they aren't smart enough, that's not correct. It's they just don't care about the work because it's boring, monotonous work. If you think of screwing the top on toothpaste bottles, so a hundred years ago, that's how the top got on your toothpaste bottle. \n\nThat disengagement from the work meant that you wanted to have a foreman around all the time. Since the work that we're doing is not cognitive, we can have somebody else plan our work. So you have the manager plans everybody's work and they just follow the plan and end of story, we're done. Then you might need, if you've got a lot of people, you might have a lot of managers. If you have a lot of managers, you might need a lot of managers to manage the managers that you're managing. That's where those hierarchies came from, that idea of organising around factory workers. \n\nWe're not in this work where you have a lot of employees who are disengaging from the process, but the modern look at things is having small autonomous cross-functional teams who can tackle different types of work. You might hear people talking about that every team can tackle every type of work. I think that's a fallacy. It's not a reality of the different sorts of work. You might have a team that is slightly marketing heavy, but they're also going to have representatives from other parts of the organisation. \n\nThe lockdown that we're in at the moment of silos with a marketing department, a sales department, a contracts department, a security department, whatever your departments are called, is a holdover from those Tayloristic practices, best practices that came out of the Industrial Revolution, which were right for that type of work, just don't work so well for the type of work that we do now, which is mostly cognitive. \n\nSo if you've got all those smart people who are organising themselves around solving the problem, then you don't need that manager managing the people. You need somebody who would maybe be described as a leader, setting direction for those teams to organise towards and potentially getting, you know, let's find some problems and get them out of the way of people doing the work. \n\nSo you transition from that idea of management to leadership. Because you're making that transition from management to leadership, almost everything in your organisation changes. How you're going to budget your teams, your projects, your things that are going on is going to change. You're probably no longer thinking about, here's a budget for a project that's going to last for two years and then it's going to be delivered. You're thinking about, I have a flow of value that I want to deliver in various categories over the next few years. \n\nIn that flow of delivery, things might shift and change. I might need more people over here, I might need more people over there, and I might not do this anymore. I might change direction. The market might change, competitors might do stuff. I want to be able to adapt to that flow. I've still got a finite amount of money. I have a budget, but my budget really translates to how many teams can I have. \n\nBased on how many teams can I have, I will make a strategic decision how many teams are allocated to each of the value streams that I have in my organisation. Those teams are then going to do work against our product backlog. You may have one team doing work in a value stream or you might have multiple teams in a single value stream. At some point, you might have to move a team from one value stream to another value stream because we're doing okay in this value stream, we're meeting what our competitor market is looking at, but in this other value stream, we're not doing so well. \n\nSo maybe we have to pull a team of skilled people off one value stream and move them on to another value stream. That can be difficult for that team. They may be short on skills, they may not understand a technology, it might be a different type of work that they're doing. But ultimately, that's something they can learn. You hired smart people. If you have a team of software engineers that have been doing Java for two years and give them a .NET project, they're going to be able to do it. They might not be happy about it, but the technology is immaterial. You've hired smart people, so that applies across your organisation as well. \n\nWhatever different products you're building, whatever different situations you're in, if you create teams that are able to deliver value for your organisation and work together effectively, they should be able to move between different valued domains, your value streams and the domains within those streams, and be able to deliver in different contexts. \n\nThat's so the way you build your teams will be different. The way you organise your people will be different. The way you fund will be different. The way you manage them will be different. The way they are going to interact with the rest of the organisation is going to be different. That really all boils down to everything is different in your organisation. \n\nIf you look at maybe a company like Netflix, who run as a holacracy, that's maybe one really far end of the spectrum towards self-organisation. Most organisations are not going to get anywhere near that any time soon, but that's there is something there that they get value from. All the way to the other end of the spectrum, where most governments sit, where you have very tight controlled hierarchy and bureaucracy. \n\nHopefully, you're somewhere between those two and moving in the direction towards holacracy. I'm not saying you're going to get to holacracy or even if holacracy is your goal, but that's kind of the general direction we want to move to, more self-organising teams and a greater degree of team ownership and individual accountability and moving that flow along.\n\nSo that question was, apart from the scrum team, who else in my organisation does scrum affect? You can ask any questions you like in the comments, no problem. This is streamed out to, I think, four different platforms, so I'm happy for you to ask the comment, ask the question as the comment. I am losing the ability to speak English, but ask in the comments of any of the platforms that you like and I will get that question. \n\nOr if you don't want to see that you're publicly being asked the question, then please use this link here, nkd agility net forward slash ask, which will take you to a form with one text box and a little warning that says I'll read out whatever you put in the text box. \n\nSo that brings me to my final question that actually came up during one of my classes. It was, I'm on sprint 22. Should I be using story points with my team? Should we still be doing planning poker? Should we be doing all of those things? I have a very, no, it's not controversial, but I have very strong feelings about this. I'm super happy for teams that are just getting started, that need to just roll forward with an idea, that need to pack up process, that pick a practice that's super simple and straightforward to pick story points, planning poker. Let's use velocity. Let's do all of those things. \n\nI would be super happy for a team to start there, but I'm going to be really unhappy if they're on sprint 22 and they're still doing kind of stuff and it's story points. While easy to use, easy to understand, that's what happens when you click buttons inappropriately. The teams are, what was I talking about? I was talking about story points. Yes, if they're still doing story points, then I would consider them still a very immature team. \n\nStory points don't have a lot of value beyond the team and the product owner. It's difficult to use them in any other context. It's difficult to gain an understanding of how things are going in the team in any other context. For the team themselves, there's limited use within what the team are doing. The different events in scrum, for example, when they can use that data and figure it out is super, super limited, but it is super simple and easy to understand.\n\nSo if you've got a team that's just started out, they're just starting to do scrum, story points, velocity, awesome. That will probably work for them. However, I consider story points an amateur team technique. This team are still amateurs. Once they move towards being a more professional team, once your team is able to deliver a usable increment, working software at the end of every single sprint, and by working software, a usable increment, I mean something that you can put into production, that you could choose to, that the business could choose to, is technically there. \n\nOnce your team has got there, I would expect them to start wanting to optimise what they're doing, how they're doing it a little bit better, make more process and technique changes. I'd be able to do that. One of the things I would encourage them to look at is look at their flow and bring in some of the flow techniques that you would see any Kanban team doing. \n\nSo I would expect, I would want them to ditch burn downs, ditch velocity graphs, story points. I would kind of get rid of all of that and focus instead on a flow. The Kanban guide for scrum teams, I wish was developed, co-authored by Daniel Vacanti, who was on one of my sessions last week, but he had bad audio. Daniel and I are teaching a professional scrum with Kanban class in the Edinburgh British summer time, times on a virtual online class very soon, summertime in a few weeks. \n\nSo we'll be teaching it online. That is where we're going to talk about a lot of those techniques that we expect professional teams to do. You can download the Kanban guide for scrum teams and that's all open source. Get all the information for free. So what I would be wanting teams to be doing is they want to be looking at controlling their work in process, having a fixed number of items that they have in total in progress at any one time. \n\nThat's reducing the batch size of that and they want to be looking at work item aging, how long things take to get across that board, how long they sit there for, and looking at their throughput, how many items are they delivering per unit of time. So rather than looking at story points delivered per unit of time, looking at items delivered per unit of time means that in order to game the system, the team has to reduce the size of the items and that's awesome. I want them to game the system in that way. \n\nSo we're putting our set of metrics in place that allow us to positively spin the data, but in a way that is actually providing value for the organisation. So we can reduce the batch size of different items, including story size, make them smaller. They're going to flow through our system better because we need to do less work for each item. So if things are flowing through our system better, we're actually going to get more things delivered. \n\nSo rather than focusing on getting more story points, we're just focused on getting more things delivered. So if the team are continuously taking on big-ass chunky backlog items, then their flow is going to suck. If they want to have better flow, write those things down, make it, make me bat the game, and that works really well. \n\nSo bringing those Kanban metrics into a professional team will allow that team to get better at delivering software. Scrum is not the be-all and end-all methodology that you're going to use forever. It's a framework that allows you to build your custom, most optimised for your people and your business and your domain process around that idea. \n\nSo you're not meant to be just focusing on, we're just going to do scrum. It's scrum and what else are you going to do to help optimise that process? I've seen many teams that are doing what looks like pretty good scrum, but they still suck at delivering working software at the end of every sprint. It's just difficult for them because they start a whole bunch of work. They didn't really understand the work before they started it. They're not doing enough refinement. They don't understand the things. They've not broken it down. It can be a real mess.\n\nSo if you're on sprint 22 and you're still doing story points, I would be looking to the scrum master to encourage the team to get a start upping their game, getting more advanced ideas in there. I would consider a team on sprint 22 to be looking at new delivery. I would want to see a completely automated deployment pipeline end to end. That sure, you're a lean manufacturing floor in the software world is your DevOps pipeline from the time the engineer commits code till it gets into production. What does your pipeline look like and how ultimately should it be completely automated? \n\nThen things like, so I put upping the engineering game, looking at feature flags instead of branching, so moving to a single branching model, feature flags. That's on the engineering side. Then on the process side, starting to bring in some of those Kanban measures, monitoring your flow, optimising your flow over time while still maintaining that planning cadence that scrum offers for your business. \n\nSo every two weeks, you can get together to shift and control strategic direction, but your process is continuously delivering our software and value into production, potentially on a continuous basis. You can be planning tactical direction on a two-week sprint while delivering and testing and validating your software and ideas in production 20 times a day. That's going to work just fine and that's going to be even more awesome than delivering it just once every two weeks. \n\nIf you look at the scrum guide, to bring it up again, you'll see that it says at least once per sprint you should be done. It doesn't say you can't be done 20 times a sprint. That's where you want to get to and that's a difficult progression. \n\nSo that was the three questions that I had. So I answered, it was the difference between a product owner and a project manager, or at least I talked about it for a little while. If you had another follow-up question, please ask me. Apart from the scrum team, what else is affected in the organisation? You should go take a look. I did a presentation for Agile by Example conference that was recorded. It should be in my channel. I think it's right at the start of the conference. I spoke at, at least, and in that, when I talk about what Microsoft had to change as they moved towards their agile evolution. \n\nSome teams inside Microsoft spent the last eight years moving from traditional waterfall, like everybody was doing, all the way through to being nimble agile teams of about 650 people working on one product. That has progressed through the rest of Microsoft. I did a presentation on the changes inside of Microsoft, which is super funny. I mean, they're now the poster child of some of those success stories on being able to make those changes that quickly. \n\nI talked about if you're on sprint 22, so that's 44 weeks into your scrum story, should you still be using story points with your team? I said no, you should be looking at the Kanban guide for scrum teams and bringing in the flow metrics that you need to monitor your work. \n\nCool, so if you're interested, next Monday, which is the 20th of, you know, with the lockdown, I'm forgetting what day it is, let alone what month it is. On the 20th of April, so on Monday, I will be teaching a professional agile leadership class in the Edinburgh time zone again, which is British Summer Time or GMT +1. I would love for anybody that wants to come along and it should be on my website, it should be on LinkedIn, and should be in various places. \n\nI would love to see you there. Please ask any questions, use this link to ask anonymously, ask in the comments, and I will answer them at the next office hours. Okay, thank you very much. \n\nNikita jollity is available for DevOps and agile training and consultant. Contact us for a free consultation."
  },
  {
    "Title": "Mastering Agile in a Distributed World: Tools and Strategies for Effective Team Management",
    "Description": "Explore practical tools and strategies for managing Agile teams in distributed environments, including communication tips, tool comparisons, and adaptation best practices.",
    "ResourceId": "isdope3qkx4",
    "Url": "https://www.youtube.com/watch?v=isdope3qkx4",
    "Date": "2020-04-10T18:35:30Z",
    "Captions": "Naked agility is available for DevOps and agile training and consultant contact us for a free consultation.\n\nHello my name is Martin Thank You wit. I'm a professional scrum trainer with scrum da dark and also Microsoft MVP in your DevOps and I had I've been doing some live videos over the past couple of weeks. I noticed that many people are and I've been inspecting adapting on the things that other folks are doing and I think um this is going to become a regular session. I haven't settled on the timing yet but I'd like to be able to answer a bunch of questions that folks ask. There's been an interesting couple of weeks and in that regard and I've had a few people on Jim a few days ago and Daniel Vacanti last week to have a little chat. Um I've since upgraded some of my technology with Daniel we had some audio issues so I now have a monitor in my ear and I got a new microphone so I think these things will help a little bit.\n\nThe thing that I wanted to um chat a little bit about today is I got our question from somebody they asked on LinkedIn not everybody wants to ask publicly so I've added a link down here that you can go to and ask me a question if you don't want to ask it publicly. You can always ask it publicly as well. I think one of my things are not working check you can always ask it publicly and seems to be online it's just pretending it's not okay.\n\nYep I think I've got a problem with that one let me just delete it and we had it um not that one that's the one I want. One of my streaming services was not connecting properly I think these things happen they're sent to try us so as I get set up with these things I'm going to figure it out so that's me adding it back in again.\n\nIt says sending data but it hasn't popped up and said it's online yet so we will see I guess I'm going to have to go figure that out afterwards never mind. So I'm going to be doing a few of these I wanted to make sure that everybody was able to ask questions even if they didn't feel that they would be able to see they didn't want to know some everybody to know who they were that kind of thing so I set that up that was one of my colleagues who does some officers suggested that and I think that makes a lot of sense.\n\nSo the question that that I got and that I thought was a little bit interesting and was what are folks going to do with their teams now they're they're not effectively a distributed team what are they going to do with their boards how are they going to manage that information. So I want to talk about um three different platforms that I've used. They all have their pros and cons they all have their specific areas of interest and I think there's a little bit of progression there. I don't talk about that but I also want to speak a little bit about um what it says in the scrum guide around co-located teams. It doesn't it doesn't really mention co-located teams it says it's better if people are able to work together same as it does in the agile manifesto and people work best if they're in the same same location like having a team room having our stuff on the walls and having everybody together.\n\nBut the realities of the current situation mean that that's not always going to be possible and while it does mention those things in both the scrum guide and I do manifesto it doesn't say that they're mandated it's okay to have a distributed team there's nothing wrong with that. You're going to maybe lose some communication effectiveness but that's the cost of doing it that way that's just the way it is. There's nothing that says you can't do that so I want to make you feel like or I want you to have the expectation that you can still be doing scrum you can still be doing Kanban you can still be doing your agile practices even when you're not in the same room that's okay that's no mandate for that.\n\nThe mandate for colocation or not the mandate for colocation the recommendation of colocation is really around maximizing those communication channels and we can do that maximization even when we're not face to face. So there are tools we can use to store our backlogs priorities and boards on the internet so everybody can get access to them and in a way that it's not just sitting in an excel sheet that everybody's editing because that does not do well for for multiple and edits.\n\nAnd so what I want to do is show you these three tools that I've looked at I've used all of these tools in anger. They have their pros and cons some of them are easier than others. The first that I wanted to show was GitHub so if I go to github.com GitHub does have the ability to have issues. I have our project here in GitHub repository and GitHub the onus is on the repository and then everything else hangs off that repository so I can go in and I can do issues which are pretty straightforward they're not great for agile management it's just our list of issues and but any of these issues can be added to a project.\n\nSo here I've added this issue to a particular project and it's been added to the to-do column so I'll get to do in progress and done and I can click the little cog and I can add it to as many different projects as I want and it will basically create an item on that project that is related to this item here. They're not I think under the covers they're probably separate items but from our perspective they're kind of the same thing but it will show us some cross data between them.\n\nSo if I go over into projects and I can create as many sub projects to this repository remember repository is the main item and then projects are inside of that and where and I've not done a whole lot with this but I can add additional columns and I can edit the column I can edit the name I can add things I can copy a link directly to that column and I can drag things around inside of that world. So there's an item that I added directly to the board and here's that item that is linked that is when I click it it's going to open the data from the other item rather than having another thing going on there.\n\nThis is a good tool if you are running an open source project as many are this is one of my open source projects and it has its limitations. All of the data is stored in the US if you are an enterprise company or any European or non-US entity that has to have private data then I would not recommend storing it in GitHub privately at the moment. If it's a public project like it's our open source doesn't matter I have all of my stuff in GitHub as well but if it was a private project you might want to store it somewhere where you can control the sovereignty of the data and that's that's a big deal for many European organizations.\n\nBut there is also private repos if you're a US company and GitHub as well and you get some of those features there so it's a pretty straightforward tool lots people already understand how to use GitHub they like the features of GitHub and they can add that capabilities there. The second tool that I went to look at is actually a little bit of a step back from development and that's plat tasks office.com and Microsoft planner is a small tool built into the office 365 suite and there is an app that works on your mobile phone that allows you to create boards and move items between those boards.\n\nSo at the moment they just call them buckets so if I do in progress done to create the same idea as we had in GitHub and then I just add a task I can add a task on there and then I can drag it between the boards. I can add additional information if I want like attachments and priorities and start dates and end dates and all of those kind of things and whether it's started in progress or completed. So regardless of the the columns a little bit weird maybe but I can also add a little tag so I can make this one green I don't know what that did did that do anything do I have to click it or is that just changing the label is a receive button okay I don't know how that part of that works but I'm sure you can figure it out.\n\nI saw a simple board it has really good mobile access which GitHub has good mobile access just for issues and wikis and source code it doesn't have good mobile access for the planner. They are projects yet that's okay I'm sure I'm sure they'll get around to it at some point but this can be a useful tool and this can you can have tasks on here that link into your outlook tasks you can have stuff you just add to the board you can create charts and schedules and plan around this with notes. This is a good medium solution especially if you're interacting or doing non-engineering work and you can add your plan to your calendar so you can see all of the things you're supposed to be working on and you can add as many people as you want into the project.\n\nYou can see here I've got a bunch of guests in there there's only two people in my Azure active directory that are like members of the item directory everybody else's are is a guest this is part of my one of my projects. The other one that I want to talk about is actually might want my favorite one to use and and that's Devdas your comm Azure DevOps is tool that is not always free. So GitHub are free for public projects office tasks the office comm Microsoft planner is free for or free as the bad word is included in your office 365 subscription.\n\nSo we'll just I'll be there which is okay but there is also the tools in Azure DevOps to look at as well. So if I sign in to Azure DevOps it's going to sign in to one of my organizations so my nkd agility my company's organization and here I have all of my projects listed. So in Azure DevOps project is at the top and then you can create multiple you can have one or more repos inside of your project so if you just have a small product that you're working on you can have project and repo just being the same thing you one-to-one relationship which is actually what I've got here or you can create multiple repos inside of our project and by adding repos to that that like we just like you add projects to GitHub.\n\nSo if I go into my Azure DevOps process tools you can see that I have some wiki it's very a little bit like GitHub in that regard it doesn't have all the same features there's a little bit of disparity between them but I have at boards and on boards I have straight work items this is the work item tracking systems this is just a list of the work items so I can see my active work items I can see work items I follow I've recently updated and I can add new work items of various types so it's not just issues or just tasks like in the other two tools that I showed you have various different things.\n\nI'm using a process here called the scrum process so I have put a backlog item which rolls up to feature resource up to epoch it has bugs it has test cases it has tasks that's a bunch of different things but I have these entries so this would be an individual work item this one is a backlog item and this backlog item has a bunch of data associated with it just like in the other tools so description discussion and various things I've got a follow link but I also have additional things I can link to it and so I can link to development items so here there's a pull request and this is a merged PR so that's a commit and a pull request associated with it.\n\nOk I also link to existing other types of work items so either related parent-child I can actually link it to a GitHub issue by pasting in the GitHub URL I can relate all of these things together which is kind of kind of nice I kind of like that this is my tool of choice for these kind of things and so then if I go back into here and I go into boards on boards I'm going to have my cab on board so the default camera on board and has the same States as the work items so my work items here my product backlog items and bugs go from new to approved to forecast it to done that's the the minimum you can have on the board is what you've got set up in the in the process but then each individual team that's working in here and this tool in particular supports having multiple boards and multiple teams inside the same project.\n\nSo I could have and I do have customers that have 70 or 80 teams in a single project so single source code 70 to 80 teams working on one product they each have their own boards backlog sprints but they have some commonality and they can share things between the hidden link between each other's stuff as well social dependencies and that kind of thing. So here I'm just looking at a board so this items in forecast state and I can drag it around and you'll see that the state changes from new to approve the forecast it and once they get on to all the way to the end to done they should be locked off and finished that's the idea.\n\nSo I can view it as a board a Kanban board I can control this and I can do I'd have some features telling me to control it. The first is what fields do I want to show on each item that's pretty basic and then some colour coding rules I can set up so I can set it up that things glow if they've been changed recently or if they've been tagged by a certain tag that's that's always you can do that and set up annotations for items that are in GitHub tasks or tests you saw that I could link from that work item to other things if it's tasks GitHub issues or tests they're actually going to show up on this dashboard if you take that that box and tests have a special some extra features this is for manual testing not for automated testing.\n\nSo this is when you're transitioning into being an agile team and you still have a lot of manual tests and you want to bring them on board and that's all supported in here. I don't expect a Joule teams to use a lot of this and then you can set up and control the columns so remember I said that the minimum set of columns are the columns from your work item so what what set as the states but I could take approved and I could break it into two I'm just seeing if I can move that up I can although I managed to click and do that.\n\nSo if I want to break approved up into two columns and I can insert to the right so this one I'm going to call it and [Music] refinement and then once we agree refinement is complete this one is going to be oh Teddy ready. Ok so refinement you can see the state mappings as the state that is on the work items and is the approved state will be in refinement and the ready state sorry the refinement column will have items from the approved state and the ready column will also have items from the approved state and the system will default them to one of the columns because we just split a column where there might be items in it and then you can move things between it and that allows us to each team even within the same project and can set up their own set of columns.\n\nSo you can say here's the standard that our organization is going to follow and which is new approved forecast done that's our standard everybody working on the one product has to have the work items floor that so we can understand what's going on we can see a holistic view of everything in our product everything in our work that's going on but then each team can go and set up and configure their boards however they like in order to facilitate them owning that managing that following their own individual processes because every team's work might be a little bit different they work on different things they have different types of work that are going on inside that project that's okay they can they can do that how they like and you can set up additional swimlanes.\n\nSo by default there's only one horizontal swimlane but you could set up a swim lane for a particular stream of work and I in the same understanding as Daniel Vacanti in having different classes of work or classes of service is probably a bad idea it's going to interrupt your ability to flow on your other work and you're better just improving your overall flow so I would just leave it as default but if a team did want to experiment with an expedite except I can't spell there we go and expedite lane then they can do that as well and then you can choose how cards are ordered.\n\nSo do you drag them in between if you have only a few things you might want to have a set up this way if you have hundreds of things on your backlog because you're not that agile a team yet you know you've got 300 things in your sprint that can be a little bit much you can set it so the order doesn't change when you're dragging them around because that can be a little bit difficult and you can also display or hide two different levels of backlog so many teams especially scrum teams working with either just scrum or scrum and Kanban are going to look just at backlog items they don't really care about anything else but if you've got much bigger teams where you have more than two teams working on one product you might want to enable features and epics as needed and then you can set up the workdays and whether my bugs are treated as backlog items or not that's why I made a few changes there.\n\nSo I'm going to save and close that and you'll see the changes in the UI it's gonna refresh and you'll see that I now have expedite lanes so if I create a new product backlog item I'm just gonna call it test because I'm lazy I can drag that in to expedite and then I can have I might I and my team might have agreed different rules for expedite than for the default lane and I can have things flow through the system like that so that that works pretty well on boards just setting up and managing Kanban boards it has whip limits it doesn't force you to adhere to them this tool doesn't really force you to do a lot and it kind of leaves it open for you to figure that out which is kind of the way I like it that's how an agile team should function because each team should be able to choose to do things differently if they want to break their web them it's that's okay well they can monitor their data and see how that goes.\n\nSo I can do some analysis on here so this is I don't have iteration set up so it's not going to show velocity but it would show a cumulative flow I have one average work-in-progress because I don't have a lot of work flowing across and this team hasn't been worked on in a little while so you can set up some analysis these ones are the defaults and then there's a feature timeline so you might have some kind of dates or expectations that you have to meet maybe there's a big event coming up that you want to work towards or maybe have some features and they are available for and in order to do that oh I get new features in progress in the timeline so it's not going to show me the features but I can create I have a feature timeline that shows that I can create an epoch roadmap which I also don't have any epics so it's probably yeah I don't have any epics assigned so it's probably not going to show that either that's ok.\n\nI'll go back to boards so this is my backlog items board and all of those things well at least a board and analytics and are available at the backlog level and if I went in and enabled to do logs if I enabled features and epics I could also change to features and I would have our board which you'll see it has only the default columns for features which is new in progress done that's the default and I can break that out if I want that level but analytics is based on the features and then feature timeline is always features an epic word map is always epics because the expectation is features are something the way a lot of decisions has been made in this product is around as the way a lot of teams inside of Microsoft work because it's a Microsoft tool and Microsoft use it extensively internally.\n\nSo backlog items are just backlog items features are looked at as something that you're going to deliver and so while you might deploy a backlog item out to production it's not a tangible finished thing that you might want to see a timeline of when are those things going to be finished what's currently in progress at the moment for that feature. So if you think about it the development team and the product owner at the implementation level cared a lot about the backlog items at the feature level you're looking at holistic units of things that go together backlog items obviously are broken down into smaller items and then epics are things that appear on your road back maybe a longer lived it's gonna take many many Sprint's to get them get them get them finished many releases to get them finished that's the way that looks.\n\nSo that's at boards in here it also has backlogs backlogs are super handy and I find to be very underused with teams so in here I just have a list of the items that on my backlog and I can drag and drop them to order them I can also go and stick them in sprints and I can configure and control the sprints and set them up so that will let me set up my backlogs and again it has analytics and access the feature type line and the epic roadmap there's they're the same. So what can view that as a board or I came for so if I go to oh wrong button views a board it takes me back here views a backlog it flips to that other view so backlog is the view board is also a view and it's the same data it's the same data so I can use this across multiple teams the boards even have auto updating so if you're looking at it on multiple screens it will automatically update as you go through which is kinda nice.\n\nSo I've already talked about those features but now I'm in a backlog view I'm not sure that's gonna configure the team settings so it's just gonna have that yep and so the current sprint plus whatever other ones you have currently figured configured are going to be listed in there. There's lots of different ways to set up and configure Sprint's I have a number of blog posts on how to do that for one team and how to do that for hundreds of teams working on one product and and also how to do lots of different products inside of the one project as well which many organizations do for various reasons and so I have a lot of blog posts on those topics you can go look at those.\n\nYou can also if you are a scrum team and not just a Kanban team or you're a scrum and Kanban team or a Kanban with a little bit of scrum team or just a Kanban team or just a scrum team all of these features work well you would just ignore that sprints tap because you wouldn't need it but if you are using that you'll see you can have your PBIS that have brought into the sprint pin to the left and you can have break that down into tasks that then flow across the board.\n\nI recommend working as a team using the Kanban guide for scrum teams I think it's really important to have good metric cross-cutting metrics that you can rely on and user stories story points and velocity it does not give you that it might give you that for one team early on in their maturity level but if you want to mature scrum team they need to start looking at the Kanban guide for scrum teams and bringing in some of those more advanced metrics to look at but in here and I've got my task board I can see that's so that's my scrum board you might call it but it's just a list of tasks relating to the things on your backlog and I can look at the breakdown of my backlog.\n\nSo let's see and might a sport and I break this item into task 1 task 2 there we go and I can go to the backlog and I'll see that this has been broken down so they're actually related and if I open that task 2 you'll see as a link up to the pbi product backlog item that I have there it's pretty straight for kind of like you would expect it to have um.\n\nSo there are some other tools there are some teams out there that like to look at their capacity and plan towards that so this is not meant as a project management tool it does not have the features that you would expect in a project management tool however if I'm a team and I just want to get an idea of what my capacity is for this sprint as opposed to the previous sprint or I have people who take on different sets of tasks I can add some of those things in I tend not to use those features in capacity I just ignore that to be honest I now tend to ignore the task board as well but if I have an immature team I might have to look at one of those things I might need some of that data and then hopefully as we scale up the team as we scale up the project and the people around we can start ditching some of those things as well.\n\nSo I can view this either from our backlog basis or I should be able to change that - so it's filtering and where is view options there we go so instead of looking at it from a backlog items on the left and tasks I could flip to people on the left and what tasks are saying to them flowing across and I can also have work details and planning so I can move things to other sprints and do those things all in the UI and I can create queries if I just want to go find a bunch of work items or I want to load them out into Excel or for don't do it but if you need to load them into MS Project you could do that as well but don't tell anybody you can just create a query build a query in here for finding work items in your system emailing them around all of those kind of things.\n\nThere's also a tool called plans which is about how do you plan work for multiple teams working together and it allows you to create plans add teams and their backlogs to the plan and see what's going on across our much larger team. So if you had an access and you were using the nexxus framework you could set it up and it would also support things like safe they would support more non agile methods like say for waterfall or other things you can you can do that in here.\n\nAnd if you're following more agile techniques so you're looking at DevOps you're looking it at scrum you're looking at time and you're looking at any of the reducing cycle time figure it out as you go along ideas then you will be able to use some of these features in that way as well. Again it's going to have features that you're not gonna need if you're in either category or features you're not gonna like to use if you're in either category but it's because there are lots of teams doing lots of different things.\n\nUm I've also added a couple of plugins to this I have a tool from Daniel Vacanti actionable agile I just have the demo and looks like my free trials expired but this allows you to do some really powerful analysis of the data and as a tool from Vacanti from his companies or Google look up at actionable agile analytics. I also have dependency tracker in there which one of the MVPs built I think I don't know what this will load might not be pretty because I haven't used it in a while no there's no dependencies based on my criteria but it's all tools to play around with.\n\nSo those were the three tools and that I've used reasonably extensively I've also looked at and used Trello on occasion and I've also looked at other tools that are out there as well but not in any great great depth these are the tools that I've used in anger with teams figuring out how things go together how to organize that. So I'm going to take a quick look and see if there are any questions I think we're not streaming on YouTube because it wasn't working properly and but everything else is maybe no it's maybe not I'm not going to percent sure I would need to go if there are any questions I can answer them.\n\nI can also take questions on this URL that I will answer in the next session I'm quite happy to take that in the next session and if you come back to our YouTube channel which is I don't have it up there but it's nkd agility net /tv you will get to our YouTube channel where everything streams on there except for this one because I think it's not actually working so I will have to look at that after this and figure that out.\n\nSo if there are no questions then I will will have to figure out why YouTube's not working never mind. So hopefully um you got something useful out of this I'm going to share Jul this I'm not a hundred percent sure what that schedules going to be yet but I'm going to come up with a schedule for the office hours where it's just you know come and ask me some questions and I'm also going to come up with schedule for the webcast that I've been doing a live webcast where I have some talk about some stuff I do some presentations get some people in to talk about things.\n\nOkay well hopefully this was useful for some folks and anybody who comes back later please use the ask and see if we can't find some other awesome questions to answer. Okay thanks very much. Naked agility is available for DevOps and agile training and consultant contact us for a free consultation."
  },
  {
    "Title": "Mastering Remote Work: Key Insights for Agile Teams to Thrive in a Digital World",
    "Description": "Practical strategies for remote Agile teams, covering communication, tool selection, value delivery, team dynamics, gamification, and integrating UX into software development.",
    "ResourceId": "A8URbBCljnQ",
    "Url": "https://www.youtube.com/watch?v=A8URbBCljnQ",
    "Date": "2020-04-10T18:30:42Z",
    "Captions": "Hello, my name is Martin Henchy Wood. I'm the owner at Naked Agility in Glasgow, Scotland, and I've had a couple of questions come in from a few folks, and I wanted to cover a few of those things. So first off, I'm going to be doing this as often as I can. I think it's important to help people in this time. It can be very difficult to figure out what's going on and get things done, so we're going to look at this.\n\nThe first thing that I want to talk about a little bit was remote working. A lot of us are in that, if I probably most of us are in that space of having to work remotely. We're going to be working distributed from our teams, and while we talk about in Scrum and Agile in general, we talk about co-located teams, the reality is when these types of circumstances arise, and even just based on your organisational context, you might work in an organisation that doesn't have everybody in the same place, and it can make things very difficult.\n\nSo while one of the values of Scrum is focus and openness, we are trying to have a group of people who can work together effectively regardless of the context. We need to think about the values we want to have people working together as closely as possible, and obviously in the current context, that closely as possible is over webcam and using video conferencing technology. So we just have to figure that out.\n\nBut don't forget to continuously, and even though we are separated by space and only doing video conferencing, we still need to be able to figure out what the best way to use the tools that we've got is. So don't get stuck on a tool that is not working for you. Make sure you continuously adapt, try new things, figure it out. I did a web conference on Wednesday using Microsoft Teams, and I found that it wasn't particularly awesome for that setup, just in the way that I wanted to do it. It wasn't quite working. I'm going to try some other technologies, but I used Teams a lot for other things.\n\nSo I think it's important when you're remote working to think about how you interact with other people. Are you interacting with your teammates enough? Do they know what you're working on? Do you know what they are working on? Make sure we have that focus and context to understand what's going on and what we're doing. We talked about this a lot in the Professional Scrum Master class. I'm hoping to do some remote PSM once the Scrum community figures out how best to achieve that. We're going to try some stuff and see if it works. I have a class coming up that I'm going to move to remote, and we'll see what happens.\n\nSo I think it's also important to think about taking some time, that idea of \"poo-poo the chain\" while we're in this remote state, and we maybe don't have such laser focus on delivering value than we had when we were in person, high bandwidth in person. We can still focus on some of the things that need our help. So in the Scrum world, particularly in all of product development, the work we're doing is really complex, and it's not really suited to that production line mentality. But our DevOps pipeline is suited to that production line mentality.\n\nIf we want to take an idea from our product owner and turn it into working software, we've got that bit that we can't understand how long it's going to take because it's the creative endeavour of solving that cognitive problem. So we're going to solve that problem, but then we make a change to the software, we commit that to our repository, and then somehow it goes off and ends up in production. How quickly does that happen? And how that is your production line? That's the bit that we want to shorten and figure out and how to make as fast as possible.\n\nI usually use an example from Brian Harry, who was the product unit manager for Azure DevOps, and he talked about zero build. I think he called it a zero build, an awesome phrase. But he talked about it as if he does our build of the product. So the team creates a version of Visual Studio and TFS at the time, and then they ship it to production. It has to go through a whole bunch of checks. So there was legal, there was validation, there were all kinds of steps along that way. He would look at not how long it took to get through that process because there may be things just now while we're not so good that would fail, so that's going to go back into the feedback loop.\n\nSo you're not looking at how long it takes to get your software out the door because there's some stuff engineering-wise we need to fix in there, and that's good to disrupt our data. But once we've got that version of the product in production, if we do another brand new build from exactly the same version of code that passed all the checks and see how long it takes that to go through the process, that's your zero build. Zero changes in the code, zero changes in the platform. How long does it take you to get that into production? And that's your zero build time. That's what you want to focus on as a production line. We need to make this as short as possible. We need to reduce the process, and in order to do that, you need to get feedback from every stage along the way.\n\nI just found this diagram on the internet that is enough stages that I think was valid. So you need to focus on engineering excellence. You need to focus on improving your definition of done, but also focus on team building. You want your team to care that these things are important. It's important to get into production as quickly as possible because without feedback, we may not be building the right thing. I need to figure out how to do that, and that means to focus on people.\n\nSomething I've been looking at recently is how to use extreme gamification to help people understand how to work together a little bit better. Some of those things that I'm trying to get people to look at is through board games. There's a board game that I had in mind called Pandemic, which is a cooperative game of saving humanity from a pandemic, so it's kind of apt. But one of the things that you see when a group of people play that game is that it's very prone to one person telling everybody else what to do, which is kind of analogous with software development.\n\nSo if you can get a team together for 45 minutes to an hour to play the game and do a diagnosis at the end, get the team to play the game together and then talk about who you're observing, potentially as a Scrum Master, and then have a discussion about the different interactions that you saw during the game. You can have that kind of safe environment where you can run a little experiment with your team. It's fun for them, so they get into it, and they forget that you're running an experiment because they're getting into the game and solving the puzzle that they're trying to solve. But you can have two observations, and usually, you'll find that there's one or two people that are very loud. Everybody else follows along. How do you make sure you get everybody's opinion? Hear the people that are very loud to understand that they're maybe being overbearing in that conversation.\n\nSo that's part of that focus on people and how people work together. I think cooperative and fun games are definitely a way to help make some of those ideas a little bit more real. I also got a question from one of my old friends, Ian Frame. He was talking about UX in the context of larger organisations and how do you make sure that UX is not just an afterthought?\n\nNow, I've worked with the author of Lean UX, Jeff, on this. We have a class from Scrum that is called the Professional Scrum with UX, which he describes as an olive branch to the UX community. The UX community is off doing their own thing because they're getting pushed away by engineering teams, but really the thing that they're doing is one of the most important parts of product delivery. Understanding what your product is, what you're going to do to solve the business need, how you're going to do that, and how those interactions and behaviours of users that you're going to change. I think that's so unbelievably important to a product owner and building the right thing story that it's going to be detrimental to any organisation that is leaving it behind.\n\nYou need to get your UX skills available on the Scrum teams with the people that are doing the work because they are doing work as well. I do think there's some confusion and difficulty around what happens with long-running work. You might have a bunch of stuff that takes longer than a sprint to complete. So how do we deal with that? The reality is we have that built into Scrum. In Scrum, we have something called refinement, which is that work that the team does on things that are coming up in future sprints to create the most awesome ordered backlog possible, and so that everybody on the team fully understands what is in the backlog that you're planning on bringing into the sprint by the time you get to the sprint planning session.\n\nIn order to do that, you have to spend a bunch of time refining that product backlog, probably looking out into the future. The recommendation is to start with about a current sprint plus two more, whatever that means to you. That might be your effective planning horizon, but really you need to plan as far out as you need to action the things that you find. So if you find you need some extra information or you need to do some paper prototyping or you need to get something in front of users in order to understand better what the need is, you need to know far enough in advance for you to deal with those things.\n\nSo how do you do that in this refinement? There's a lot of UX work working with the product owner and the development team in refinement, just like there's a lot of security work there. There's a lot of architecture work, there's a lot of testing work. All of the skills are required in the Scrum team. So there's this terminology that I hear used a lot called dual track, dual track Agile, dual track Scrum, dual track UX, whatever you want to call it. People are using lots of different terminology, but the idea behind dual track is not that there's two separate streams of work. It's that there's one development team that moves through different modes for a particular backlog item.\n\nSo you get something on your backlog, PBI, product backlog item. It might be a user story, it might be a requirement, whatever you call it. There's something on your backlog, and it probably starts a little bit vague. So we maybe need to do some amount of discovery work to understand what that item is to get the team up to speed to really focus on and how to bring all of that together. Then that will move into maybe a combination of discovery and delivery. Maybe we're going to figure out what's the smallest possible thing that we can build that will help us understand whether to continue to invest in that or that we need to build something else.\n\nThat's that discovery versus delivery work, and then maybe your entire engineering team dives into delivery for the period of a sprint. So we deliver a bunch of things, and then we shoot back up into discovery again, where we're going to analyse the data that we're collecting for that. We're going to look at what our hypothesis was and whether the features that we've built have managed to change user behaviour in the way that we expect, create the outcomes that we expect, and then we come up with what are we going to go do next to solve that problem. So that will bring us back down into delivery again. So we keep going through that cycle for a particular idea, and that result might result in many PBIs that are delivered over multiple sprints as we flip between discovery and delivery and somewhere in between.\n\nSo the reality is that things on your backlog are not just UX work. They're not just engineering work, just like they're not just coding work, not just testing work, not just architecture or security work. Each product backlog item should represent a unit of value, and that unit of value should include coding, testing, security, architecture, as well as UX. So what are the UX ideas you need to do in there? Deciding how much time you want to spend on UX for a particular backlog item will depend on how unsure you are of whether that thing will provide value. Sometimes if it's just a small, simple, low-risk thing, I would just go build it and see if it's useful. If it's a high-risk, big thing, then maybe I want to do some paper prototyping. Maybe I want to do some additional investigation work as a development team around that.\n\nSo it's important that the entire development team is involved in that process. In the Professional Scrum with UX, we focus very heavily on team accountability for UX, but there are many things in UX that you need a significant amount of expertise to be able to deliver on. You need experience, training, understanding within the UX world of many years. So everybody can't learn all of that, just like everybody can't be deep security experts or deep testing experts or deep coding experts. You're going to have deep UX experts, but there is a certain amount of work that makes sense for everybody to help out with.\n\nOne of the things we focus on, I have one on the wall behind me, is the Lean UX Canvas. This is from Jeff's website. This is the second version. The Lean UX Canvas is v5, but it says v2 on it. The Lean UX Canvas helps the engineering team understand the value and context within the work, which they're making decisions every day on how to build parts of the product. This is a really important tool that I think anybody on an engineering team can learn how to use and utilise, but you still need that deep UX expertise to tackle some of those harder core things that you might do.\n\nSo something you should have is all of the things in your backlog should include some amount of UX work, depending on the context. We also talked about emergent design, just like we talked about emergent architecture. A product backlog supports emergent architecture, and that idea is that in sprint one, when you're working towards your first unit of usable increment, your first piece of working software, at the end of sprint one, you're going to probably spend quite a lot of time on UX, just as you're going to spend quite a lot of time on architecture and quite a lot of time on infrastructure. So the amount of value that you deliver in early sprints is probably going to be quite small.\n\nMaybe during the sprint, you spend during your first two weeks sprint, you and the whole team spend four days working on UX. How are we going to build this? What value are we going to get? What user behaviours are we trying to change? That sets you up for the next couple of sprints, where you spend most of your time in that delivery with a little bit of discovery before you need to jump back to food. You're spending a lot more time on discovery.\n\nSo that idea of team accountability, we're all working together. We are all as a team accountable for users getting the best experience they can, and I think that's really important. Focus on those behaviours that you want to change in users, and it will help you focus your product backlog as well, working with your product owner. While the product owner is accountable for value delivery, the entire Scrum team is responsible, and we are all in it together. If the product owner is not successful, we're just as much out of a job as they are.\n\nSo I think that it's important that we all work together to solve those problems. Hopefully, that was a useful, quick dive into those three things. I talked a little bit about remote working and about taking some time for engineering excellence, team building, doing some things around that. I talked a little bit about integrating UX into your overall strategy. I hope you found this useful. Remember the values and principles of Scrum, those ideas of transparency, so we can get those feedback loops built upon trust. In order to get trust, the Scrum community feels the commitment, courage, focus, respect, and openness are of utmost importance.\n\nSo if you're trying to make a decision about how you're going to do something, especially during this crisis, think about how and how will the way we've decided to do something support those values? Do those values kick those values to the curb, or are they going to add to those values and help us create more trust, build transparency, and create feedback loops?\n\nIf you want to get in touch with me, you have any additional questions, please do. There's my email address, my WhatsApp, and my Twitter. You can get in touch with me on all of those places. I've done two presentations recently that I wanted to call out. One is an enterprise evolution that shows that you can - which is from the Microsoft story, the story of how the Azure DevOps team of the TFS team went from delivering every two years in a waterfall manner towards delivering to production every three weeks and the improvements that they made. They started back in 2012, delivering only 22 features to production each year, and now they're delivering over 270 features to production each year. So it's a big change with the same number of people, and it's about paying back your technical debt, getting better at working together, improving communication lines, and getting all of that sorted.\n\nLast week, I also did a presentation on detecting Agile BS, which is from the Department of Defense article of the same name, the white paper. I would definitely recommend going and reading Detecting Agile BS and seeing what's going on there. It's a fairly awesome article.\n\nWell, thank you very much. I hope you found that useful. If anybody's got any questions, then please let me know. I don't see any questions coming in yet. That doesn't mean they're not there; it just means my tool might not have been very good at pulling them out. I'm just going to check, and then if there's no questions, that's folks want answered. I might well... I don't see any questions, so thank you very much for having listened to me, and I hope you have a good day and a good weekend. Okay, thank you very much."
  },
  {
    "Title": "Empowering Development Teams: Cultivating an Agile Mindset for Lasting Quality",
    "Description": "Explores how leaders can foster an agile mindset in development teams by promoting autonomy, mastery, purpose, and a culture of quality and continuous improvement.",
    "ResourceId": "iCDEX6oHy7A",
    "Url": "https://www.youtube.com/watch?v=iCDEX6oHy7A",
    "Date": "2020-04-07T20:33:45Z",
    "Captions": "oh my name's Martin Intuit I'm a professional scum trainer with scrum the dark as well as a Microsoft MVP I'm here in Scotland and my good friend Jim is over in where are you Jim I'm in the United States in the Midwest Midwest Ohio Ohio okay so that's if there's a delay or there's a problem that might be because of the internet isn't this about that well this is kind of just after lunch in the US yeah it's three o'clock my time here everybody's know Netflix yet probably within the hour or so so I am interested in the question that you had for me the other day could you give me that you remember what it was yeah so I got a call from a colleague of mine who is on the agile journey let's say and his current struggle is from a technical perspective so he has a number of development teams and his his developers just don't they're not thinking in an agile manner they are not validating and getting good feedback from customers and frankly to be honest the biggest thing is they just don't seem to really care about bad quality going out the door or not meeting the customers needs and these are internal customers and a corporation but you know he was asking me how would you train development team members on agile and scrum and that was really where I reached out to you because my expertise is more around product ownership and scrum mastery than it is working you know in teaching development skills yeah I don't think this is an evolved no problem but I'm curious to hear what you think yeah I was I was literally just thinking that I was thinking that it doesn't sound like a development skill problem I find that in engineers tend to be reasonably smart people um and the reason you might have a problem is because they're they're disengaged from work so just like you would expect a product owner or scrum master to step up and um maybe being a little bit I don't know what the word is blunt maybe step up and do their job I also suspect an engineering team to step up and do theirs but if they're disengaged with the work that tends to be a cultural problem yeah and that's really where my comments to him when is you know we can do technical practices we can teach TDD we can do pair programming and mob programming sessions and we can talk about you know iterative design and emergent design and all that but really it seems like how do you get people to care and how do you get them to care about quality and have some pride in workmanship pride and craftsmanship and the interesting thing about that is their business is very manufacturing focused so they are used to delivering end products like tangible goods to customers so I think there's some interesting analogies there around caring about quality and customer feedback and you know kind of that that aspect of software craftsmanship is definitely a difficult one because if you do have people the are technically competent it's it's always possible that you don't but if you do have people that are technically come and then it comes down to the the X the intrinsic motivations rather than extrinsic motivations and you'll be familiar with Dan Pink's book drive and talking about autonomy mastery and purpose and that's usually where I would start for an engineering team is um look at what are they lacking in those three things right yeah that's good I could I've spent quite a bit at a time with some of these teams so I think I could take a few guesses but I mean it would be presumptuous of me to know at the individual level but I think at the high level their autonomy is probably not great in their per their sense of purpose is probably a pretty low the thing I don't know the dimension I don't know is their mastery because I know you know here the the feeling of I need a two pair program with experience out and developers to teach them skills so I think there's two aspects to it I think there's a technical concern that they're not great developers and then I think mindset can people to care how do you teach people do think soles and Keith doesn't mind their work yeah exactly you were breaking up a little bit there it wasn't too bad I think it was an internet issue that's just the world we live in yeah and I'm sure I'm sure it'll be in fine as we go ya know I've noticed a few things have happened recently and that's that I decided I wanted another webcam because I have I have another monitor over here and when I'm looking at this monitor it looks like I'm not looking at you yeah and I went to by having to buy a webcam yeah and there aren't any left no no hair clippers either oh yeah this is terrible this is the worst mine has been in years yeah my wife's been complaining quite a lot but we just don't have Clippers she's got a pair of scissors but I don't know if I want to let her have a goal with a pair of scissors yeah interesting stop yeah you know who's still got Clippers in stock I bet two pet stores nice stores stores yeah that's a good point I was at a pet store over the weekend and then they had a whole shelf load of Clippers so yeah it is interesting I read an interesting article which I guess is part meant for the type of work that we do in floor as to why there's so many shortages and the article was talking about the the the flow of goods has more than one channel so for example for toilet paper which is currently substantially missing from shelves and lots of there are companies that make commercial grade toilet paper and those don't make it onto the supermarket shelves and we're no longer using commercial grade those distribution channels are empty you know they've got all the toilet paper but nobody to use them and the the EM was it the opposite of commercial the public consumer consumer is looking for thank you the consumer chains are getting overloaded because of just that switch so there everybody's making the same amount of toilet paper we're just using it differently yeah I think this is akin to like the nineteen forties where new markets are gonna pop up so things that were used to dispose of we're now gonna be like what can we use this for and then so there's gonna be this use of byproducts and it'll be really interesting to see if we kind of kick off this second self-sustaining generation this of you know being self-sufficient and eating what you grow and and using the most of everything and this could be an amazing shift away from rampant consumerism but it's funny I did a consumer products company last year and I feel that right now there is the data science experiment going on in every retail store in the world which is two things it's buying patterns it's so what are people buying first in times of hysteria I am more intrigued by the products that are left on the shelves so what is the last bag of pretzels bought what is the last jar of peanut butter what is the last type of toilet paper to be grabbed and what would influence those decisions and do companies and retailers care or what a date of scientists and I'm not a data scientist say you know you can't make any decisions during a time like this because it's unprecedented and it's not significant from a data perspective because of the hysteria an impulse nature of things I don't know but to me it's always shocking to be like look at all the ketchups why is that one ketchup left and all the other ones are gone like what does that tell that producers in a few images from people taking pictures in supermarkets of the vegan aisle in the supermarket and everything's still there I did think that was I noticed it in my local supermarket as well and that all of the the meat replacement goods were where all the shelves were fully stocked and it's funny I did have some recently and it's pretty tasty it's just not the go-to that people think of when we when we go shopping yeah yeah yeah I think again and I don't want to get to like Phyllis it if you think about which of your principles will be the last to go and which ones are the first to go so I I have a friend who's a vegan or was a vegan and it's like I don't care I'm eating meat right now because I need protein and there there are amassing meat so they quickly let that principle go out of for many reasons fear Asteria impulse etcetera but it just is it's very telling in my opinion I agree and it depends how how long this goes on for both of those things you know what's the last what's your last principle to go as well as and whether the data science is going to have an impact whether changes significant changes need to be made to the the distribution pipeline and I think there are some people I've been reading some articles people talking about everything changing and that it will just be different from from now on but then it hasn't been that different in Asia where they've been through something like this before they still have rampant consumerism they still have and they probably just wears masks you see that uh a lot and even just people wear them anyway when they're out and I think it is it's going to be interesting how how long this goes on for what's going to change because um we've got an expectation in the UK from our our what was he called the the health person in chief the chief scientist behind some of the decisions they're making and he says is six to twelve months yeah we're going to be in some kind of restricted set up they've already said that the schools here I don't know what it's been like for you guys but the schools here aren't going back till after the summer holidays so that's August before the schools go back at the earliest and I guess they'll reassess then and see what's going on but homeschooling is something that seems to be happening a lot in some places have have their act together for schools doing some kind of distance learning and other places they're just emailing some homework and hoping people do it yeah you know I I had a conversation the other day with a family member and she was like you know man wouldn't this be I've been great when we were kids and I said no because we'd be bored like when I hear kids today just want to smack a website there you have no board in 2020 but would be different back than like how would even if I was in maybe working through the drive-through homework assignments and bring them home redeliver them but available now that and exist five one year so yeah it's it's unprecedented so to bring it back to what you and I do for a safety yeah say if we talk about principles what principles do you think are even more important now and that team should focus on and and really spend a lot of time working to strengthen given this new I'm calling it our new Wow our way of working so give it our new Wow what's more important than ever before I would I would think I'm coming back to to some of the the scrum values probably makes sense for for me and I think it's gonna be really hard to get and teams to have the same level of commitment to each other that they can have in person when you can poke the other person you know that other person is there when you can't see somebody you've you've said you'll do something for is the same level of commitment going to going to be going to be a parent and how do we create that same level of commitment I'm just hoping teams are not thinking that they only need to talk during the daily scrum yeah somebody a scrum master or asked me the other day hey does it feel that you like we have more meetings now and I got thinking it does and it is as I look at my calendar and I have a number of quick 1520's let's say discuss this technical problem or discuss this plan or do this where those conversations would have happened organically in the off and a drive-by you know like walking up to goal having a what if we had to go third-person we just now you see I'm gonna schedule time to make sure you're in the WebEx camera and able to you know miss so it does feel like there's more of a schedule nature to work it's interesting though you talk about like I think what I heard you talking about was follow-up like committing like delivery commitments to each other a lot of times lately where I have forgotten owed somebody something pretty small because I just get destroyed I don't I'm not as focused as I was before in the office and I didn't have all my tools and trappings available to keep me focused on the work at hand so I find it easier for little things to slip through but and the flip side of that is more attitude now and I'm like yeah I think I can you know give me two minutes I'm gonna run to the to the kitchen fine I'll be right back and I can do that you know at work me being distracted Thanks yeah I I agree and I think especially with everybody off everybody are the schools being off and people's kids being at home there can't be the same expectation of commitment from folks anyway yeah I think it's going to be very difficult to find to find that level of commitment yeah do the metrics change at all or do you think that the metrics that leadership and the organization cares about is gonna change if this persists for months and months it depends if if leadership are focused on yeah I'm gonna use a bad phrase I don't like using it the metrics they should be rather the metrics they shouldn't then I don't think the the shoot change we should be looking at fart for engineering teams or any teams building some kind of product or some kind of output then we should be looking at value delivery are we getting the most valuable thing it doesn't really matter whether people spend 12 hours a day or 2 hours a day if we're getting enough value that we as an organization and our customers are happy with the output that we're getting then then or sorry the output I used the wrong word again the outcomes that we're getting then it's irrelevant how much people actually work right but I think and again I'm making some leaps here is an organization that has a really good track record of measuring outcomes and value could easily say hey we're getting the same or greater value delivered than we used to but think about a company or organization who had what their value was and they were only measuring output in activities like hours billed or lines of code written my fear is they are going to over index even more so and over focus on getting every drop of orange juice out of that out of that fruit and say I have to squeeze harder and how to and say well hey you're getting what you've always gotten you know so you should be happy with you know we have lower costs probably and we're getting the same but just to say that we have to know what the same was yeah so a company that didn't do the hard work early to figure out how to measure and track value delivery doesn't have a baseline yeah I totally get that and I think that it's gonna be very difficult for those those companies to figure out what what they're going to do and I have I have a slight inkling that those companies will just die I I've got a feeling that and as they realize that from their perspective they're not getting their return on investment because they investment is based on quantity of work not quality of work so they feel that they are not getting the return on investment they divest themselves of employees in order to how many how many employees in the last how many people signed on in the that's British expression what's it called when you register for as unemployed in the US there's a name for it I can remember the USA's we called signing on here fire file if I oh yeah I'll file for yeah yeah um Ted over 10 million people have filed in the last two weeks in the US and it's it's not in as high a percentage of that as that here in the UK mainly because the government is paying eighty percent of people's salaries you know for companies to stay in business and not not go out of business but I think companies that are focused solely on the bottom line solely on profit so Leon's that squeezed squeezing more juice out I think I think they're gonna go they're gonna go bust they're gonna they're gonna break yeah and III I think there are exceptions but I think that's what will happen there's two really interesting things I that I see one is people are being extra sensitive to expecting less like I see people expecting less so it'll be interesting to see if this how far this goes if that correlates to people's take on the workplace and measuring and caring about the right things but the other thing and completely different is if I think about some of the really good people that I work with over the years and I'm like why are you still here you know you seem to hate your job you don't seem to like this company no yeah but I'm comfortable you know I've been coming to this building every day for twelve years and I've been working with the same people but imagine if you take all of that comfort away and everybody starts working remotely even most to the time well then changing your employer is just as simple as changing which VPN you log into and what your email address is in your workplace the people you interact with the building your commute none of that matters so what you might see is a higher propensity for people to switch employers to ones that value the right things or seem to value them more because it's the barrier to switches is greatly diminish that time limit it's as people either switched to employers who actually care rather than pretend to care um or start their own businesses to fill a gap in the market and care and hire people who care maybe maybe this could be a big push for the purely capitalistic focused organizations who are going to struggle if they're though there was a big push and towards a lean but in the wrong way you know III ever I have a horrible story about how lean was implemented Lean Six Sigma if you're familiar with the term Lean Six Sigma was implemented in an organization that I worked with and where the IT support department did you know Six Sigma training they got a six sigma consultant turn they spent three months doing this figuring out what they were going to do and then they implemented it and what the implemented was shadow masks on their workstations where their coffee cup goes at the end of the day where their keyboard goes at the end of the day where their mouse goes at the end of the day and my first question was yeah that see that face you've got that's the exact face I had when they were presenting presenting their awesomeness that they'd managed to do in this Six Sigma world and and for me they just completely missed the point they missed the point so they were they were focusing on you know that that part of lean where you would maybe optimize your workspace and because maybe the consultant came out of a manufacturing world and they're talking around it in a manufacturing world it was in fact a manufacturing company so it there's a little bit of synergy there that would be that that level of expertise and but somebody on in IT the physical world is not their world and my first question was can I find files on the file server quicker no that can I create a support ticket quicker can I find out what's going on quicker and I think that missing missing the point is happening quite a lot in our industry it's why people talk about all agile is dead or scrum is dead it's not that it's dead people have just used the terms and features incorrectly I know that's I'm trying not to be religious about it it's it's it might work just fine but they're they've messed with the name or implemented it in a way that doesn't necessarily provide them with the value that they were looking for and then they complain that the thing doesn't work when in fact it's the implementation that doesn't work and then backing off and not inspecting and adapting is the complete untag Anette antagonistic opposite of agility yeah yeah that's a lot to impact but something tells me that that company read or attended some work by Poul acres with two second lean which is a great room box is a great YouTube channel and a great company and a lot of those little kind of workspace hacks come from his world what end to second lien is what can you do in your day to save two seconds like how can you optimize you them so if you create two little Mark's in your lunchroom and this is where the salt shaker goes and this is where the pepper shaker goes that might save two seconds but then when we encourage people to say how can you say two seconds they end up saying well I found this thing that can save 30 minutes or I found this thing that can save five hours so it's really about getting people thinking about waste and seeing the value in the 5s is one of which is you know sorting and standardize this works there's value in that as far as building habits I think some of the philosophy is if we help people get good at organizing and see organizing as a way to reduce waste they will figure out how to store files on a file server more efficiently yep but I think so many times people stop at the easy stuff and they don't do the hard work to say okay great you figured out where my keyboard could set on my desk but what are we doing about that big giant problem in you know the IT world or that big database problem that we have over there and it's making that leap from the mindset of agility to the hard work and practice of agility I agree and that's the the thing that I see time and again in organizations and it doesn't matter whether you call it lean whether you call it a jewel or scrum or Kanban or DevOps it doesn't matter what you call it the same fundamental goal is there and is often often missed no I know you don't come from our DevOps background you're correct yeah well yes and now my background before I got into the world of advil was all infrastructure so client-server cloud network all that so I touch with DevOps a little bit so I have a systems background not a development background but I'd say more kind of my background was always in building high-performing teams and knowing that my special power - skill wasn't in always doing the work but it was motivating inspiring and helping others do their best work and that's kind of the world I live in the most cool so what what what does it be you're working on just I'm so right now I'm an agile coach and scrum master and trainer for insight so I do a lot of different things but I am primarily a working scrum master an agile coach on a product line at a large company here in the United States so I'm working with development teams and other scrum masters who get really really important work done tech very technical work and it's really stretched my skills it's taught me a lot that this engagement has taught me a lot about myself about what I'm good at what I'm not good at it and how it's really helped me figure out how to help build high-performing teams have you run any of the scrum to dark classes remotely yet so I am leading our very first one in the company in April we're gonna do a PSM live virtual it is April vapor later this month the the tic-tock tic-tock trust me I feel a little bit of stress and anxiety there but I'm very excited to though and then I'm going to be copilot on more than likely on the PSF live virtual and a poly I might be leading a poly live virtual so I I have a pally in two weeks so I'm doing a poly in the Edinburgh timezone yeah public poly I have to to normal people and one PST coming so normally I don't know how difficult that will be for my first live virtual classroom escapade so it's going to be interesting I attended a workshop last week and was Todd's workshop and and he did it was me as a PST and a bunch of normal people we were from his some of his classes who were just exploring things and they went through a workshop so some good learnings there in figuring out not only how to run the workshop but how to maintain the engagement levels that was that was really good I really enjoyed that but I've got the I'm jumping in I've literally got I've got next week free and then I jump into Polly Monday Tuesday then the next Monday Tuesday PSF next Monday Tuesday PSF next Monday choose the PSM so it's gonna be a little bit full-on at least I don't have them all in the same week luckily the to private PSFS that I'm doing and luckily the customer said um you know we we want to do we want to do it private which is good and we want to do it Monday Tuesday's because they have deployments on a Saturday there there that's quite every Saturday so they want they wanted to front-load the week rather than back load the week so that that helped me out a little bit as well it meant they didn't want to in the same week which was a good idea yeah give me some time to prep in between and optimize things a little bit but yeah I'm looking forward to that as well you'll have to fill me in after after the first one because we're experimenting with for half-day sessions go guys I just feel like it's gonna be exhausting for both the instructors and the students to do phase and and I have never been successful in keeping someone's attention electronically for more than three to four hours yep but I also know that there's pros and cons to that approach the other thing I'm curious are you gonna have a facilitator or somebody who's supporting you from a logistic standpoint so you can focus on teaching so right now no I don't have anybody who's gonna be helping me out so I'm gonna be doing it all which is where I'm thinking about the tools that I'm going to use obviously well obviously for us maybe but that mural has been seems to be a useful useful - yeah I had in the workshop last week it worked really well I've seen bits and pieces over before and I think everybody all the other trainers have been using it to facilitate their workshops so much so that I thinks Kramden are going to be bringing out some templates I think there's already templates available for the PSM PSM and PSN - I believe have templates so I think that that will that will help a lot even if it's just giving everybody a jump start and then some stuffs pre-prepared and we can just implement those templates but also the the the video conferencing tool and they were going to be using I think is important as well I had planned to use zoom and the reason I plan to use zoom is it's good breakout rooms but the museum has some significant issues right now not everybody's happy using zoom based on the security concerns that have come out in the last little while well it's all we the case once when you're when you're a little player nobody cares and you become a big player and everybody everybody cares and I think the yeah I'm not particularly bothered about leakage personally if that makes sense like if if some part of my video goes out and people get a hold of it CAA okay whatever that's that's okay but I think it's more the concern of students in the class so I'm definitely running the PSFS in Microsoft teams which is secure or at least doesn't have any known biggest holes in it but it does then require everybody to authenticate um but also that's the thing that makes it more difficult to set up and manage initially but it is the thing that negates the problem that people have with the that you can just jump in yeah you know we're doing a lot of tool reviews as well and it's funny because right is this thing hit I had done a presentation around the relationship of tools with agility and it was very you know there is a certain amount of premonition there because I said tools do not make you agile but they can absolutely enhance your daily and getting good at tools and the application of tools will should be something you focus on in value but then even even more interesting I think and I'm curious if you agree with this as as we go as we develop more and more mature skills our tooling has to change so I thought back to there's two analogies I use one is when I just started a golf when I was a kid my I just used a pair of hand-me-down golf clubs and they were okay and but then when my skills got to a certain point the tools became a limiting factor so then I went and I bought a nice set of off-the-shelf golf yelps and my game progressed and then some point I needed custom lights because I was growing I was a teenager and so our tools had to evolve with our skill set and then also I'm kind of an amateur woodworker and if you walk into a master woodworkers shop who's been doing it for 10,000 hours or more they might have a single hand plane that's a $300 hand plane that serves one very special purpose that they pull out twice a year but it is the perfect tool to deliver a very high quality product and there's no there's no better replacement tool but then there's a certain amount of vanity in that tool and you could say well could you get the same outcome with a cheap tool from one of the big-box retailers and you might be able to but I just find it so funny with lately the focus on tools in the last few weeks not funny is in you know negative but just interesting in how tooling is becoming an amplifier for agility I agree and I'm gonna have to turn this light on because this light just automatically went off because nobody walked around for 20 minutes so give me one sec sure there we go that feels a little better I can actually everybody can see me now as well and I can see yeah yeah and see what I have i I've set up a studio in here so I have a camcorder linked in to do the whiteboard so if I need to draw something on the whiteboard when I'm doing calls and stuff I have to light boxes up here cuz lights important especially on video I think it's difficult to see what's going on yeah no I agree I my my wife thought I was crazy about a year ago when I made sure that all the light bulbs that I bought in my home office for the same temperature which is not where I am right now but because I didn't want to have color correction issues you can have all that stuff so I had a pretty obsessive around the lighting and make sure I got all the same brand all the same temperature so that I I had a better quality lighting setup yeah and I've been I've been playing around with it like last week I had Daniel Vacanti on to have a discussion and we had air core problems from Daniel because I wasn't now I've got headphones inspect and adapt you just got to figure it out this is new to me as well I've been learning how to use new tools like will be s studio for streaming and setting up the different thing that I can even do like if we have a problem we can go on please stand by while I go fix something or whatever yeah it's been it's been fun and how to how to get scape which you're on into here that was craziness there's lots of bender lbs so Skype is the only video conferencing tool that I found that has a special feature called NDI a so Skype is actually if I go to my desktop picture I'm in the middle and you can see you're on skype there that's my two skype windows so that lack of focus one and the this one and but that's not what's happening and in here okay so Skype is dreaming all of the different feed video feeds that it's got locally so that means that I'm hooking in to this n di stream and putting your display here but I can if two or three people were calling in and I can bring them all in and move them around and it was very complicated to set up I'm quite happy that I managed to get it I think it was complicated for me maybe I don't know it was it's it's been a lot of work trying to figure out these things get it get it good and I think it's a is it's part of the fun it's something else to focus on and that's the thing that I found in our what do you call it whoa you new world while I'm working you we have work here and isn't it n well new way of working okay yeah there we go you know in our new way of working all of all of all of the work and conferences that I had just disappeared not quite overnight over there over the period of a week or so so then we had to reevaluate and figure out what to do and the I think the stream for where we that are would you call it funnel for where we get work in the new model is substantially different it's it's maybe different people who would see and come to online training then would come to in-person training although there's probably a lot of overlap as well but there are some people who just I don't care if it's not in person um and I think doing doing these recording videos getting content out there and there is in this format that people would use if they were coming to engage with you and I think is is part of that that new model we are we're inspecting and adapting already yeah well one thing I've been thinking about is how does this change the training landscape because think about if you're a remote learner and you're in Omaha Nebraska here in the United States in the Midwest and you don't have any local you know quote-unquote experts or very few so you're looking at well where am I going to travel to and it's like now you don't have trouble anywhere you can go get trained and come on by Daniel come to you you could go get trained in Azure DevOps from our natural would I mean so you you now have are a worldwide consumer and I feel that the trainer expertise and the quality of the training becomes paramount now because we've minimized and eliminated the barriers to immediacy and location you know so to me that's provided to me it's great because I think I put on a very good high quality learning session but I think that you know for many and I'm not saying I'm like somehow I'm elite trainer because trust me I'm not but I like to think that there or like I want that class because that's a gym class instead of well that's just that I'm just going to gym class because he happens to be in the same city or state that I'm in which that'll always be a part of it but I want to build a reputation for my classes being of such a high quality that they're sobbed out and I think I think that that's actually one of the problems that I've been having and doing classes in Scotland and and that's that I am much more known outside of Scotland than inside of Scotland having you know I I worked for three years from 2010 to 2013 in Seattle doing DevOps and agile consulting across I don't know I think I did sixty different states which is quite a lot and many of my customers were in San Diego in the surrounding area and as eight hour time difference from here and I do a lot of training in in Oslo so in in the UK I up until recently have never really gotten much work mainly cuz folks that just didn't know I was here didn't didn't see my content didn't didn't loop in that circle I guess but and it's interesting because one of the other PS T's in the UK had been training over in Edinburgh as well and um it's it's when people come to my class many of the people that come to my class were flying in come to my class I got very few people who were were Eddie robeast well maybe very few probably one of one of those Scottish phrases for you know about half and about half of the people that were coming to my class were flying in and I think that's that's just due to me going to other places around the world and doing conferences they are like I didn't do a lot of conferences in the UK I did conferences in the you in Europe my customers were US and Europe check n yeah but now with Bertrand you should care so the the poly that I'm doing in a couple of weeks I just had to two folks from Germany sign up and I did a poly in Germany in fact I did a poly in Germany the weekend before they closed that hole of lights so luckily it wasn't later than that and I think that um you know there were people who maybe wanted to come that couldn't so then they booked into the Edinburgh one yeah that's good hey you just said something that I have to ask about you said folks folks I struggle yes as a trainer I get my hand slapped occasionally and I do it to myself for six you guys I use you guys it's just a collective it's the group is folks your preferred nomenclature for so last that long no to be honest guys is my preferred Norma culture that's what I default to that's what I I me nights three years of training consulting around the us guys is they go to and just like it interesting act I prefer to focus on intent then on the actual works so when I say guys I'm being all inclusive but I am being very conscious of that and I've switched to folks but it is very I'm getting better at folks and telling guys but I'm doing folks or everyone or something else just to be to be more conscious of it because I think while it doesn't matter to some people it does matter to others so I think it's an important thing to take note off and but it's just like I are we the one that always got me were and people saying oh shoot or dagnabbit or I don't know some curse words although we would say swear word in the UK but some curse word and that they've made up in order to not say a real curse word yeah and from my perspective the intent is still there if I stub my toe and say die ignite I'm still swearing because that was my intent even though I used words that aren't normal swear words and so I read for me it's the same with guys and folks if I say folks but I mean guys then I'm being disingenuous and that's the bit you should get slapped down for but if I say guys and mean mean folks then III wouldn't like to get slapped down for that but yeah you know words words matter and if you've read the scrum guide yeah well no words matter or it matter a lot I think it's definitely something I've tried to focus on yeah I have to my grandmother famously has a replacement word for every swear word and I'm like why do you do that we I know what you mean it's just like what you said so I'm curious because there might be somebody out there who says wait what the heck word Jim and Martin's supposed to be talking about today did did you what were we supposed to be talking about he said it is riffing on the list and I had fashioned ilysm and I had conflicting priorities that were the two things that are analysts and we we should spend about 20 minutes talking about professionalism and then we tangent T how many minutes I'm unprofessional and my two priorities are chocolate and puzzles and board games lit so that's three well Jess can I did a puzzle a thousand-piece puzzle that was kind of fun and we collaborated on that and we've been playing some board I have a I have a group um the the meets on Sunday and we've been meeting on discord and I played games for nine hours on Sunday that's awesome yeah I've been aware of discord for years but I would tell you that for years I was probably one of a hundred people in my circle that knew about it and now I have people like have you checked out on a discord channel have you checked your channel and it's like it overnight it went mainstream it seems like I've got like twenty discord channels that I'm a member of knows yeah getting ridiculous it's almost getting overwhelming so I do have a couple thoughts about professionalism and competing priorities the interesting thing about priorities and I'm curious what you think is there is no such thing as the plural of priorities he you only can have one priority and I this is now went into my teaching especially around product ownership is you know what is your priority oh I have five priorities no you have one and you know anyone who has ever why I have two priorities you know I want to go to the gym and and workout tonight and I also want to go binge that new show on Netflix well whichever one you do first that's what you prioritize you might do both things but whichever one you did first is actually what you prioritize okay so this is an interesting one because I bring it up in my classes quite a lot okay and I have the same feeling as you however the majority of the time when I'm teaching scrum classes I'm teaching non-native English speakers and in most that I've found so far other languages it is plural it just means a dirt bike priorities just means ordered for for them so you know I sometimes I have a it's interesting for me the things that are different across those cultures and languages yeah yeah I I think firm it and that's how I use it in my in my teaching is the difference between priority and order and I say we might do things in a specific order that is out a priority so in that example I might go to the gym first and then go home and watch Netflix because that's the most logical order maybe the gym is on my way home from the office and it would be dumb of me to go home watch a television show and then drive back to the gym that that might be dumb it's a good thought exercise to understand the difference between priority and order and how those things relate especially when we're like delivering value and building features I mean and again I hate to come back to zoom but if did you know and I guess this is not fact but this is opinion but the opinion I've heard is that zooms number one delight er from a feature perspective was their virtual backgrounds that the the number one thing that customers really touted as why they choose yeah your average person the number one reason that the the feature they loved in the zoom platform was the fun virtual backgrounds so guess what you see every other company prioritizing now they're they're pushing out virtual backgrounds and virtual green screens it wasn't the stability or security the platform yeah obviously it wasn't the breakout rooms you know your average just you know a user didn't care about recovery rooms now we as trainers did yeah we care about the rooms yeah but but think about it if you look at a prioritization model of like des lighters and parity and which which features a user cares about sometimes it's surprising I totally agree in its it's the struggle of a product owner to make a decision between Ling and long-term sustainable value and sometimes you might have to prioritize the bling because you know we need to compete with em other platforms and if that's what users value then we have to deliver what users value and but we also have to look at not spending all of our time just delivering things that users value otherwise I so I've got I got a just a little story around that the and you've probably heard me - you've probably heard me tell before and but it's the the azure DevOps team at Microsoft ten years ago were significantly behind the curve and behind the curve is an expression that I think M actually makes a lot makes a lot of sense it's one of those odd ones that actually makes a lot of sense because they they were building features at for users which means users were asking them for stuff and then they were building it in next release it just so happened that they had the two-year lag time so that really ends up being a four year lag time and in the enterprise world that was fine cuz Enterprise didn't really give a crap yeah for year like okay whatever that same is all of our software we can adopt things that quickly I get a customer that took nearly four years to move from server based source control to distribute or controller but and that that am unable to deliver quickly and building stuff for users that were that they were asking for it meant that you're a follower you were following what people want to do and one of the things that the the phoned was that they had the ended up building up too much technical debt because they were purely following leading because technical debt doesn't matter if you're a follower it really doesn't matter yeah and if you're making a lot of money off following you can just build up technical debt and we'll just whatever but the they spend concerted effort they their goal of their their product unit manager which was Brian Harry at the time was to get ahead of the curve how we need to build stuff for the early adopters so that by the time the majority of people come along we already have that feature in the product we are the ones leading the industry not following and they invested a lifetime in working and I yeah okay can I react to that a little bit because you just you're touching on is that that are just hitting home for me I left the company that I had that I was out for a number of years because they refused to try and get ahead of the curve that I used to joke that their product backlog was to send me links to our competitors websites and say we want what they have i it just rocked me to my core just bothered me that that is what they considered innovation was well this is what our competitors are succeeding with yep so that's what we need to build and I'm like yeah they have that idea a year and a half ago it's gonna take us a year to do it and then in a year-and-a-half they'll be that far to be onto something else yeah and I hate it when my the owners my company would go to conferences because I knew I hated it I look at their counter I'm like oh my god they're going to Vegas I can't wait to see what's gonna happen in my backlog of work when they get back sure enough come back from Vegas I get a calendar invite that says highly important and they'd be like okay this is what we just heard about this is what everybody's doing this what we have to do I'm like I've known about that I've been other people in telling you and for a year ago and you know so that's one reaction as I lived that nightmare for six years and then Nigel Thoreau I think just wrote an article one of our fellow PS T's in a very amazing thought leader about you know disruptive innovators and innovators and these different companies you know that sometimes can find themselves with different products or services and different quadrants so some of their some of their work is is even truly innovative other work is achieving parity with competition and then and again I'm sure I'm preaching to the choir here but you know in my training I talk a lot about features and features that became that went from the lighters to now just maintaining the status quo like would anybody butter an automobile without a backup camera no the interesting thing about features is as soon as you build one in and it becomes ubiquitous meaning it's it's everywhere and just becomes you know a part of the standard package you can never take it away it's very very hard to take it away but it's you have to be very careful with what you build because every feature you build is a feature you have to maintain and extend and worry about from a stability and security standpoint and you know there's a quote out there and I forget who to attribute it to but he said that a product is not done when you can't Jam one more feature into it a product is done when you can't take anything away from it and still have it be desired and wanted by customers yeah and I love that idea and because that's agile principle number 10 simplicity you know so I I talked about and especially my in my training on both sides both the product owner site and on the the product side lean inventory control you want to have as few things in your backlog as possible but it still be a backlog I know you want as few things in your product as possible and it still be a product yeah so they and I'm in your school of thought on this but there is how we're kind of on topic cuz we're talking about competing priorities there's another coach in the same organization I'm in that feels that the product owners backlog should be as big as possible yeah like her dream back or a thousand items oh that's a small backlog and I'm like no no absolutely not how did you have folks how can you rationalize and prioritize an order 4,000 items and even 400 like I don't know if it's if there's not a perfect number but something tells me it's not you know what I thought of right there when you said how do I manage 4,000 items same way you manage 4,000 people hierarchy need more higher alright you need more layers you need more more distance between the ideas and the realities for everybody else I'm being so cut out right now there is an idea of a funnel like let's dump as many things into that funnel as possible so let's consider many things but to me the most important thing a product owner can do is take something new look at it rationalize it and then say no we're not going to do that but if you just say well I'm gonna we might do that someday and I'm gonna put it in the corner over there you you just enhanced your anxiety around stuff yep you have a packrat mentality a hoarder mentality so I preach a more minimal and I hate the word preach there sorry I'm trying to break myself of that habit but I suggest a more minimal approach kind of like a Marie Kondo approach to tidying up our things so that we can focus on less know but know them deeper and hopefully that leads to more value being delivered I just don't think you can find that Neal and the haystack of 4,000 items but if you have put the time in to get good at rationalizing things and only have a you know a much smaller number to review you might be able to have a grasp on your product and your market and your customers better yeah and I totally agree with that I I got a I got a workshop from um David Starr who's a very good friend I didn't Seattle I don't know you know David David's awesome and he he wrote a workshop that he provide uh he had a family emergency and I had to take over a gig of heads I think I was pretty much just the first PST he met and after he found out the bad news that he had to deal with and so I took took on this this gig so he provided some workshops and things around it but the workshop was a requirements gathering workshop and effectively it's got some stuff around it but effectively what you do is you take a bunch of people who are going to be working on backlog and you take some screen from the application that they've already worked on before and you get them to create user stories based on you know their their hindsight of knowledge that they've got knowing everything that's going on yeah and so the III talk about user stories and I talk about scenarios so given the way in thence walk through all of that with them show them what good ones look like and then get them to work on breaking this down it usually takes like an hour and a half for them to do that but then at the end of that they have a very intricate set of backlog and behaviors that represent the work that the new had to go in to building that thing that make sense yeah so then we put that put that to the site take something out of your back look some item in your backlog something usually with a UI because it's just easier for people to understand and interact with and put that put that user story on the board now do the same thing and they've they've now realized the amount of detail that they had to go into to describe the thing they've done in the past and I had I did it with a group where we had engineers architects bees we had business folks we had the the the entire PMO office there and we did that exercise and halfway through the second exercise the the head of product management stopped the whole workshop and and he said that this does we fundamentally are not ready to go into this level to even understand what these things are and that to me was a was a shocking realization for a company to realize that they didn't have the fundamental understanding nor ability to create an order backlog and that was with with 20 people in the room focused on doing just that task yeah I don't know if I where I stole this idea from or heard about it or or if I just came up with it but I have had teams in the past kind of do what I call retroactive refinement so go back and refine an estimate something you've already done like what you just described and with now with the benefit of hindsight what would we know and they're like oh well we would do this and we would ask us to made it like this and we would use that exercise to create anchor stories so that we would post on the wall in our team space and say you know what remember when we were refine this retro actively we all said this is what a five looks like and this is the level of to the tasks that it spawned and it's fun and then we have a new item off our backlog that everybody says we don't understand this very well we're like oh okay but which of those things does it look like like oh well it's a lot like that thing okay that's probably a good starting point to think about what what did we need to think about to do that thing we probably need to think about the same things to do this new thing so I love that workshop the other thing that when you were talking it kind of made me think about was this idea of like a backlog snake which was an exercise that I've done at a number of clients where I took their backlog and I printed it out you know sometimes hundreds of items and I arranged a conference room in such a way that all these tables form like kind of like this snake shape and I put my designated I had this kind of fun stuffed animal at one end of the of the table and it was the snake's head and then I had the tail of the snake at the other end and I said okay now take everything and it the most important thing goes at the head and the least important thing goes at the tail and they were able to order and prioritize hundreds and hundreds of items by just laying them all out on on these tables so the things at the end became the most important the things at the end at the other hand became the least important and then what the product owner was able to do is like they were able to go about midway through and be like from this point on all these things just throw away we don't even need them we'll never get to him let's just focus on these hundred things and we we drastically trimmed the product backlog in mass as a team as it actually is a whole group of teams and was it it wasn't perfect and there was price and things we tossed away that we had two that came back but that's another one of the things that I I teach is if something is really important it'll come back yeah you're not gonna forget about that amazing that you want to build but if it never comes back have you heard of a tool called email amnesty no so they have it was a plugin for for Outlook or people that have ridiculous numbers of unread items in their inbox I know people that have 25,000 plus unread items and their their their inbox and what you know amnesty did was it scammed through your entire inbox and for each unread email that you had or each person that you had an unread email from it created an email to them attached all of the unread emails and said in the body I'm declaring an email amnesty I have too much crap in my inbox and please send back to me things that you think are still important and then it sends it out and it China I don't know how much of a tool it did for for for collecting responses but it meant that you know probably more than 50 percent of your emails are gonna bounce yeah and then you have a bunch of emails that somebody gets 10 things and they go well these two things are still important the rest I don't care about anymore so suddenly I paired down that list and I've encouraged organizations to do that with their backlog items you know declare our backlog amnesty you've get 25,000 things in your backlog you can't get to 25,000 things said send them back and see what comes your way yeah yeah that's I launched a in activity at a client that was kind of a mixture of that it wasn't really amnesty but it was this massive Kaizen event around getting our backlog under control and I started to dub it a mixture of the Marie Kondo method and the debt snowball method from Dave Ramsey I don't know are you familiar with either of those two names Marie Kondo with Marie Kondo she says you should only have five board games is that what she says it's probably zero you joy and I'm like well all these bring them joy no in a nutshell really what it is is is we took this giant backlog and we dispatched of a whole bunch of it right away just because it was old and the product owner could easily go through and know what was valuable and what could just be deleted so we did that then with what was left we met when and met with all the stakeholders and we said you know what is the value of this we're going through it and this was kind of the organization step of the backlog but the Marie Kondo method you know of tidying up our backlog and we explained I got on my soapbox like 25 times gave the same little mini speech to this different stakeholders 25 times and said here's why it's important for you to let go of some things because if you want this you've got to let go of this because this is the crushing weight of the backlog warrants why we're not getting anything done so we were able to get the a lot of stakeholders say you know what you're right we don't need that anymore the windows past for that etc focus on these two or three things we did that 15 20 25 times then we apply Dave Ramsey's model of the debt snowball which is sometimes kind of productive and you got to be careful with it but it's doing small things first so we were able to get a whole bunch of small things done which then allowed us to do less contact switching more focus on the bigger things so we might have done some less valuable work early but it was it paid us back in less context switching in time and focus and that's kind of this this snowball thing of paying off your small bills so that you can then put big lumps of sum and big payments down on your really big bills and the organization loved it but but it took a while to get it done but man it just led to all types of phenomenal conversations about that you and priorities and competing priorities and all these things that we talk about every day it's super difficult III find that product owners really struggle to have any kind of reasonable priority or good understanding of the product backlog or even to be able to be empowered to do that and I think that's that's that's an organizational issue it comes from the the hierarchical tailor istic practices that we're used to and backing off from those ideas is is really difficult have you have you seen the the I I do M I did our session a little while ago I guess what did I call it the tyranny of Taylorism and how to spot agile bs yes that one I did and I'm seeing your content yeah yeah so the the that that piece at the start where I talk about where Taylorism came from is something that I I do in almost all of my classes maybe not a PSF but a poly and a PSM I always cover that because I I think that too many too many folks dismiss this waterfall thing that they've heard of yeah they talk about it as waterfall which is where those big backlogs that are difficult to prioritize come from because we have to have a list of everything before we start and we have to spend six months in analysis before we do anything that that that's maybe an exaggeration but depends on the organization that you're working with and and bringing that down to you know I just need to two weeks work for the team I need a big team busy for a couple of weeks and then that will give me a couple of weeks to come up with more stuff to keep that team busy and getting that yeah that that balance is really important I'm glad you enjoyed that that I'm session that I did I did I really liked it I love this thought of or not the thought but the understanding the history of Taylorism and how it influences modern-day thinking and the relationship with Gant and other contemporaries about you know how work used to get done in this idea of there being one best way to do something well that does something better that this is something we fight against every day yeah no such thing as best practice on y'all have to quit practices for the situation at hand that's right only a generally useful practice that works in some context exactly exactly so we know we have been we have been rambling for an hour and 20 minutes so I think it's probably good idea to to wrap it up sure so if you could just do you have anything you're working on next you have any public classes anything you want so yeah I do have some public classes couple will be out on the scrum ador'd site their home cities are Columbus and st. Louis right now please go take a look at those I am about to launch a website called no boring no boring retros dot-com and even though no boring retros is the the title because that's something I'm very very passionate about it's just gonna kind of serve as a portal for all of my content so my podcast appearances things like this just my random thoughts but there will be kind of a big section of the site dedicated of retrospectives and all that because I am a big believer in the power of retrospectives so yeah look for that and then I also love for people to connect with me on LinkedIn I mean that's kind of how I stay in touch with my colleagues and my students right or wrong I'm not a great social media maven so LinkedIn is kind of the the preferred way to get in touch with me well I managed to get LinkedIn streaming-enabled on my account so this was going out live on LinkedIn so you'll be able to go tag that that I don't know how you do that and even write bit I don't think you can figure it out yeah that the LinkedIn streaming is super new so it's a little bit difficult to find stuff after the fact the other platforms are a little bit easier because they're more mature but that's awesome we'll definitely look forward to to that and I think in in in that vein and if anybody has any feedback review of how we organize this how we set it up maybe just the audio or it could be how much of a plan we had for the this sprint which was not very much we had a very loose plan how much we got off topic maybe you like that maybe you didn't um it would be really useful to get to get feedback on that and hopefully Jim and I will have maybe a retro and maybe we we do this again at some point laughs - cool well love our chats thanks for coming coming on Jim yeah thanks for having me cool well hopefully see you next time"
  },
  {
    "Title": "Navigating Agile Learning: Embrace Change and Community in Uncertain Times",
    "Description": "Explores adapting agile learning to remote environments, emphasising flexibility, flow, gamification, and community support during uncertain times.",
    "ResourceId": "xaLNCbr9o3Y",
    "Url": "https://www.youtube.com/watch?v=xaLNCbr9o3Y",
    "Date": "2020-04-01T16:26:05Z",
    "Captions": "you\n\nhello my name is Martin hen chouet I'm here with Daniel Vacanti who was one of the original contributors on the Kanban method in the quarry creator of the Kanban guide for scrum teams and the professional scrum with Kanban class how you doing Daniel I'm doing great thanks great to see you're marking great to be here\n\ncool and I had a UH obviously we're all stuck in our homes for the foreseeable future at the moment I don't think there's anywhere now that's just you can just go run around and I hear you're a lover of tennis a little a little birdie called Scott let me know and he was wondering how you were coping without tennis not pretty well I think the harder thing is that there's no stennis to wash you know there's big postponed the whole tennis season until at least June in this and the decision about Wimbledon was supposed to come out today I didn't see did that put that could publish it I have to I have to go check but but as we were chatting before there's there's actual I've got some neighborhoods coherent as long as I'm allowed out once a day to go it was exercise and I was I practice proper social distancing then I'm actually coping not too bad probably better than even many people so thanks for asking I don't know what what about you and Vasco I mean it's told mr. aney so you probably own it be inside anymore it's actually in it's not been too bad it's been um six or seven degrees so we've been out sunbathing in the front garden it's actually it's actually been okay it's been a bit cloudy the last couple of days but there's been some sunshine so we've been running out to sit in the garden when it's sunny cuz it's nice and warm in the Sun but then the Sun goes away in it temperature drops quite significantly but yeah we're able to go out for for walks as long as we're there's not too many people in one place so it's been pretty good but we've we've been getting kind of daily notifications of what's going on I'm sure the same as yourself although your briefings are a little bit more interesting than ours but yeah so um we you and I will be co-teaching a Kanban class and we're going to teach our professional scrum with Kanban as a live virtual classroom on the 18th of 18th and 19th of May and Edinburgh and can you tell us a little bit about the class you think it'd be ready with the stock answer for that right but it's it's really about for those you know those those people have been practicing scrum for a while and for whatever reason I haven't gotten everything that we went to out of scrum or maybe just want to take their you know comes from skills to the next level or whatever it's really about introducing the concept of flow to solve some of those problems that you may or may not seem as Francis you know things like we're know hey we're we're terrible at estimating and we can never first know how much stuff gets done in this broth no can't ever tell their products under when something is going to be done at the end of this prints there's always a smash - who says we've taken on too much work or we can never get it done you know so you know how how does flow how does management the flow just help to solve some of those common problems that you see you know it's in several scrum teams cool so how does that and how does that differ from the Kanban method it differs it doesn't it doesn't matter for quite a bit in several respects probably the biggest biggest things the biggest difference is the beauty of scrum stolen supplies and entirety hire T so easy easy pile on a professional professional scrub this concept because difficulty take a look at the professionals come for example it's less than right inherited they're able to keep it as fat as we come you know as a foundation as our base so if you go depending on which other combine guide you you look at necessarily get into that too much but you know there's there's a there's a combine you know a condensed combine guide that is ninety some pages or one hundred some pages or whatever which doesn't sound too it's convinced to me or whatever old I said sounds like it's very big yes I think that's that's the big the biggest difference is we have scrum as our foundation we embrace everything that scrum does we're not we're not changing anything in scrum we're not throwing anything out we're not doing any of that you know take your existing scrum implementation just kind of bolt on or overlay some of these practices on top and you're good to go\n\ncool so there's a couple people hearings a little bit of feedback I've ordered a set of headphones from upstairs I hear they might be on their way but what I'll do is at the moment I'll mute myself when you're speaking down and then maybe that will will help where do we get that mute button for real life how do i how do I do that\n\nthere there is no mute button for me personally my wife has tried and but it doesn't work usually a few men's I'm just throwing the remote control at me for sure yeah so I'm wondering if any of the folks that are listening online have any questions as well let's let me have a look\n\nI got a different headphones than I was expecting\n\nthat's okay so I guess have you have you thought about um the the tools that we want to use while we're teaching this class no longer is I've been conversations past that's kind of Baseball America no we have we tend to use the same we have the same expression intricate as well proper sport I don't yeah anyway we you know we've been forced to adapt really look really look like and because it is you know fortunately or unfortunately science itself is designed to do you know very interactive very hands-on best way to learn about this sterility sleeves and do it yeah so at a point I mean how do we how do we bring in some some tools to leverage the online experience so it's may be now may not be as good you know it's it's hard to say but we do have an online combat simulation that we can do so there's that but the rest of it who knows we'll just just kind of see I'm kind of excited to see how this plays out interested to get feedback from people who have taken to escape virtually that works and what doesn't work\n\nyeah I've been thinking of doing some free sessions with folks for different parts of the exercises and to see if I can figure out how best to do that I've been toying around with a couple of tools obviously zoom for the video conferencing it seems to be the one that has the\n\nI prefer teams when I'm doing stuff but it doesn't have breakout rooms it doesn't have that kind of interact ability you could do it but it would be a pain in the ass so not gonna go there so zoom for that mural have you played with mural yet because that seems to be the to go to kind of whiteboard collaborative space choice so yeah I'm sure we'll do some of that we'll see\n\nyep so I'm being shouted at for having a an echo while you're talking I do have headphones now and I've plugged them in but it's not outputting the audio to the headphones so I'm just switching that over I don't even know how to do that it's supposed to just do that when you plug in your headphones nope I think they just don't work I will have to mute you while you're talk what mute myself while you're talking is what I need to do so I've been I've been playing with our tool you know that I'm into board games a little bit and there's an online tool called table topia which is uh basically as a board game simulator so it doesn't do any of anything clever apart from have the PCs on the table and you can has tools for flipping cards and drawing cards from a deck and rolling dice and that kind of thing and I was thinking about I've been chopping up the v-2 of the get Kanban game to load into this tool and see if it's usable as a tool to still use the the get Kanban game and I haven't seen another online version of - that's why your honor\n\nI thought I should this link with you but but we we have it's not exactly get Kanban but it is a compound simulation it's called it's called twig twig stands for the whip game and there's an online version of that that we will be using as as part of a class so in fact I've actually I don't I don't know if I should be saying this out loud or not but I don't use get comp on in my PS Ches anymore I used this this online simulation because I think in general I think it's a little bit better learning experience for for lots of reasons so that'll be that'll be something that we'll get a chance to see probably we'll send out a link to the game beforehand so people might might get a chance to play around with it before the class I'm not I'm not sure about that we're we're kind of going back and forth whether that's a good idea or not I agree I think it's um having having something a little bit different might be maybe better I'd like to hear about the simulator that you you have maybe I can integrate that into into what it is that we're we're doing I I'm just playing around with table topia because I'm using it anyway to get my fix from board games Scott just said get can ban on fortnight and shoot Carlos I think a lot of the folks that are on the the chat have have played get combat before probably have copies of get Kanban and although somebody's putting a little question mark going what were they talking about you don't know until you've played the game and it's a surprise that should not be spoiled for you and but it's part of that little little story and actually I really like to get combined game because of that that story and people and when they're playing the game tend to interact very heavily with it and they understand the rules a lot more quickly because it's a gamification and have you seen those are there's a tool and that's just come up to a board game from called scrum tail in Poland that has just come out and there is em they've created our board game for for a group of eight people working together to instead of building software which you'll know we do in the PSF which is a little bit fun because you sometimes teach classes with people who don't know software and in this tool that you build a murder-mystery you build a novel yeah III got a demo of it at one of the conferences that I went to and it was it was really really powerful\n\nso that's scrum tail which I really enjoyed interacting with and it was good for that when you've got a big class of people who don't have any scrum knowledge and similar to get Kanban it doesn't it's not really a software specific thing cool\n\nso yes Darren you got Table Talk er spelt correctly if you google for it you'll find lots of stuff around that as well and so the the class that will be teaching is um on Monday the 18th of May um it'll be I think we're we're currently thinking it's going to be up to day a two-day class roughly the same timing as an in-person class and I guess in subsequent teaches we may change that but I think for for a one-off it's going to be like that Daniel it's gonna be a bit of a difficult time zone for you I make it work long as we finish we can certainly finish with whisky you can drink whisky I'll drink to rum so it usually runs from 9:00 until 5:00\n\nI don't know what what's 9 a.m. in here\n\nyeah we did although nobody noticed because we were all in asleep it's pretty early you maybe need a whiskey to start when you're doing some of the exercises I did work on a scrum team in Sydney Australia from Glasgow with a 12 hour time difference that was not a lot of fun it was a good demonstration of how remote work cannot work if you're in different time zones well I should I had four people on my team from Beijing as well accent yeah well I'll think we'll maybe wrap it up there is there any other questions that you had Daniel\n\nlikes to experiment with or special experimentation for all so I think Martin and I are willing to learn as all of you so yeah please please just just drop us a line just you know whatever ideas you've got do you have to hear cool yeah yeah we are we're planning on running the the class we'd like to get as many people I I don't know what what are you thinking the limit is going to be maybe 12 or 13 people something like that for our first class\n\nand just figure out how to how to push around facilitating facilitating that for us yeah cool\n\nwell thanks very much Daniel for for making the time I know you had to move something around to get with us at five o'clock and if anybody has any questions they can message me or Daniel directly it's on Twitter\n\neverywhere same as myself and we'll figure out how to do the best part oh I would note that for the kanban class and I do or we do for this class we do a discount for people that are unemployed which might be a lot of people at the moment we also do discounts for people that are self funding the class as well so if your company's paying companies don't get a discount just people real people get discounts companies do not I think that's kind of the best way to go with that very Scottish I agree cool well thank you very much for for for joining us and apologies for the audio West you I'll try and figure it out for the next one of these that we do okay thanks everybody for joining thanks for the invitation my cringe is great chat no hnt as well Daniel\n\nyou"
  },
  {
    "Title": "Mastering Agility: Balancing Engineering Excellence and Effective Processes in a Rapidly Changing Business Landscape",
    "Description": "Explores how to balance engineering excellence and effective Agile processes, highlighting the need for technical skills, continuous improvement, and outcome-focused metrics.",
    "ResourceId": "i_DglXgaePM",
    "Url": "https://www.youtube.com/watch?v=i_DglXgaePM",
    "Date": "2020-03-25T21:07:01Z",
    "Captions": "I'm gonna meet a lock off I've got caught by a quarantine yourself pass me hide knock off to be the fancy intro music as ISO News pain simply the based on Twitter says girly yeah I don't know it work through my head sensor I do have some fancy intro music I just can't push it through through teams teams is not zoom zoom yes it's it was a ranger RPS but just nobody use them I'm happy I can't\n\n[Music]\n\nBefore singing sunshine only their banana flies ah did you not see that Donald it was just a nice idea I guess they were just emulating what was going on in Italy today mm-hmm to be brutally honest it's not like it's not like you have anybody never to go to see him by the way at seven o'clock so anybody please\n\nWhat's the door probably going mutes go get mark throw that from his end control you and thank you let's can record it yes it is going out live on LinkedIn Facebook YouTube Twitter eagerly push but I've started the live feed okay but just excellent it's on it's coming soon\n\nNice I think well I will give out a few minutes why not raro buttes you are you gonna host an intro then SAS yes what's that you've shared you know posted in their digit Donald\n\nI've got about four hours with the content is that okay guys you've got there you go I know Ellen you've always got loads of content loads and loads we could do another one later in the year hopefully hopefully our face-to-face a nicer they knew that be them pizzas you know you're being well is that I think you're ever hopeful they're sad 2020 stuff there's always there's always there's always room for optimism yeah I reckon I actually I actually don't know if the stream can hear you as well probably just visiting and you and me can change facial expressions I'll be me me talking to myself I think is what everybody can hear right Phil enough yeah I've got a unexpressive face that's the chat as well people saying everybody can get okay oh here comes go yes we can hear both of you Bob thank you for that\n\n[Music]\n\nAnd see you if that's supple really great right there it's good okay all right a couple more minutes shall we gents and they'll kick off no worries\n\n[Music]\n\nA mask off anything for attention is there any community and in Spencer instill sooner lines I'm gonna do the end mr. Coburn I work what you not know I'll do that yet the posted was a falling off conclusion the time of the pod right he thinks he's got planned but he hasn't done our web conference with me before distant future and I think I'll make a start right it's ok I think we should start thanks money to class yeah that's given a revealer chance to jump back on right welcome everyone thanks for joining us let's say second event future work in Scotland available a year this one obviously we'd originally planted to do APA well then you have used before but the circumstances obviously speak it remotes got there no thanks for being with us this one has a little bit of other significance actually because it's doing it in collaboration with the VCS agile methods group that's a phosphor date not without she done as amethyst because because our klieg and I both a part of the BCS agile methods committee and this is a foster this is Nigel methods event we've done in Scotland so are the significance for some of us so that's happened all cold air will do more over the year over the rest of the year time to come hopefully some place to face was late in the year but to Martin thinks I'm being optimistic we do have a code of conduct and those of you who have attended some other events familiar with it we do have one so please do familiarize yourself with it it's available on the hive in short things and they will do will do some community showcase for some other father they start coming up over the coming weeks as well all confined to our homes Q&A so just quickly we will do a Q&A at the end once Martin's fellows presentations so I think we have a chat facility right here so if he can start you know putting any questions that come up as Marcus doing his presentation and Donnell denial can sit through them and we'll reel him back to Martin's week and he can answer the questions that come up at the end so hopefully that's a decent format for everyone and with that I think just introduce our speaker so tomorrow and I for a few years now in fact I did Martin's a scrum divorce a professional scrum cleaning a few years ago now in fact I think it may have been one of the first ones in Scotland so Martin does what's come to or training or what consultancy Joe and DevOps and yeah I'm really looking forward to is presentation tonight giving one of its personal experiences doing an agility in the enterprise so with that I'll hand over to Martin Martin folks hopefully this is going to going to go well it's it is kind of being recorded it's streaming live on lots of different platforms\n\nI'm not sure how good the the Sundays or whether anybody could hear SAS that format but yeah we're all here anyways so it doesn't it doesn't matter I'm both the professional scrum trainer likes that said but also our Microsoft MVP as well in DevOps and I kind of kind of split that difference a little bit between the technical skills required to deliver deliver software it's skill as well as the the the process ideas of you know keeping it simple like we all try and do so I create this presentation a little while ago it had various names sling the dragons and how to successfully descale that skill is just the most recent one I think it was unicorns last year taming the unicorns but the idea is the same that we really need to China talked about various things that are not just a problem at scale but things that we know work pretty well that you can try so nothing here I'm going to say is you must do it this way absolutely not you need to figure out what works best with in your organizational context and that can be that can be difficult depending on on what it is you're doing so let's start off and if anybody wants to get in touch with me later please do any way you like I'm pretty much everywhere I'm in Glasgow that's where I'm based and that's where I am currently confined like everybody else so if you do do need something I'm here and in the in the time zone and I did see there's a few folks I know from other countries logged on and I saw Anna an organ did were logged on so it was a few few people from further afield European time zones\n\nThe thing that's behind what I'm talking about is that that idea you've probably seen this before firms today experience a much high velocity of business change business is changing a lot more quickly and we need to keep up and it's not just about process it's a balance between process and engineering without good engineering skills we might build a lot of the right thing but it will not be very good or not meet the need and without the process skills were maybe not build the thing we're supposed to build so I've got a little story first and that I've used a couple of times before I I find it quite well it's kind of amusing cannon art but it's the story of how our company with nearly 400 million dollars in the bank went bankrupt in about 45 minutes because of a field deployment some of you might have heard this story it's from the knight Capital Group and in in the US and there are fortune 500 or not fortune 500 was a Gulf New York Stock Exchange company and I need a new feature they were deploying to production it was some kind of new order handling feature that changed the way that worked and and while they were replacing all old stuff with knew they had Cain Anna am a big legacy and you know what it's like in in in your teams today there's usually anything that's been around for a while there's a lot of technical debt in the system a lot of spaghetti code that ends up sitting around for ages on last year teams continuously refactor and focus on engineering excellence so this idea is they hadn't can a nine year old unused code and they decided to repurpose a flag in the system you know there's this flag sitting there it's not doing much let's just use that in order to turn this new code on and and when they did a deployment they were doing manual deployments and the technician only deployed to seven of the eight servers so you can imagine when soon as they turned the flag on something weird started happening and it actually took it took it took the whole system then it wasn't operating correctly so they weren't getting the the orders through they were expecting and because the system was down and they were losing about a hundred and seventy thousand dollars per minute and as you can imagine that set off a lot of alarm bells and they go - ever trying fix it but when they try and fix it the the they can't figure out what the problem is because it's the amount of code they deployed is too much the flag had unintended consequences and the the deployment to seven of eight the eight servers even the technician that did the work didn't really understand that that's what they've done so there was no visibility or transparency into that because it was a manual deployment a step or a couple of steps or something was skipped and not noticed and I'm the ended the day four hundred and sixty million dollars down and had to file for bankruptcy and I think the important question there is what would be the impact in your organization of a critical system that folks write code for or that deployed being being down for for a day for two days some big examples recently where some airlines that was British Airways went down American Airlines went down for three days because of a mainframe fault that you can't get any more technical debt the mainframe sitting there and in this particular case because it was a public company because it's on the stock exchange they have to do an SEC filing for bankruptcy and you know that's how we know so much about it you can go and look up this filing and see exactly what the what the problems were and 2013 is not really that long ago they really should have known better and even around that in fact later than the 2013 timeframe I worked with an organization in the Netherlands around 2014-2015 and they were an international bank and they are real time banking transaction system the servers five servers around the world that govern this weren't there so their code was not under source control and the team they organized it believed that source control would slow them down and so in order to make changes to this real-time banking transaction system for an international bank they would log on to one of the servers open up their IDE make changes to the code and compile it on the production server I did ask how do you share that code across all five servers and the response was that's why this five of us so each of the servers are owned by one of the engineers the engineer goes on to that individual server that's their server and they write and maintain the code on that server so they've got five servers all doing the same thing that all have different code and different setup and for me that was a huge business risk but for the business the bigger risk or at least for management of that group the bigger risk was that this team was the only team that understood what to do so they get to write the rules and that can often be the kids little fiefdom at cropping up as well so how do we not have this happen and we need to get need to get better at it you need to practice do it often do it all the time that's kind of the moral of that story automate everything you should have any manual practices in your in your process your delivery from developer committing code all the way through to being in production should be totally automated you might have approvals along the way but the approval should be you know clicking a button ticking a box and not actually following any technical steps so can you can you think of any other at really big crazy failures like multibillion-dollar failures because I can think of two the first one was a failure of quality so this was a massive product that instead of taking three years to deliver to production ended up taking six and they cut 80% of the features they were trying to deliver and their problem was technical debt and that was Windows Vista and anybody that used it when it first came out will have felt some of that pain so that was a quality issue and Microsoft worked very hard to build up an engineering excellence after that but the problem was that they still didn't and they still were building the right thing so they ended up with a mismatch - customer desires which was indeed Windows 8 which was a massive mismatch to that idea so it was after Windows 8 and that they started focusing both on the engineering excellence and on the getting the right features into production which means you have to get tighter feedback loops which is where Windows 10 was born and Windows 10 effectively from our perspective Windows 10 ships to production every 30 days but from the team that writes on it four and a half thousand engineers and they ship to production daily the code that an engineer writes today is running on the CEOs laptop tomorrow everybody inside of Microsoft gets the internal build and they can choose to install their own machine and then not get the built in case anybody's on here that Microsoft and knows there is a there is an escape hatch if you don't like that but firfer for the majority of people there they're taking that at faster build and for those of you in the know a machine I'm on just now is in the Windows 10 insider preview so I get weekly dev builds from the Windows boot from the dev branch to the windows team that that is there's a 17 million people that do that so it's a lot of people catching the tires and I think that's the important thing is getting stuff into production as quickly as possible and so I think this idea of learning is something that you're all familiar with and I want to just posit some kind of kind of problems and challenges that I think and many people seem to have had and I particularly like this one because you do a front release and then you either get a smiley face back or some strange characters but usually well that this being Scotland it would just be swear words but in most of the world it'd probably just be swear words anyway and what is this pile of crap that you've I should I so the the three things that I think posed this problem and for for agility is what how and who and if we break that down a little bit the what challenges some of you will be familiar with this data is from the Standish Group and Boston that do the chaos report and so no focus on on product strategy and an effective prioritization and I believe very few organizations that say they're doing agile actually have a prioritized backlog so if you don't require this backlog the engineers are just gonna make up whatever it is that they they want to do to work on it um those 65% of the functionality that we build is not used by our customers that's average you could be worse or better most people that think they're better usually end up and worse when they look at the data and 35% of your requirements were change I'm sure you're familiar with that figure as well and but weak product owners poorly defined runs responsibilities and product management are key parts of that challenge so they focus instead of focusing on a product and making the right decisions for a product they focus on time limited short-term goals called projects and those projects may or may not provide benefit to the overall product as the person running the project is not measured generally by the overall success of the product the measured by the short-term success of the project and in those worlds you tend to have a long time to market can a long cycle times I I would personally say anything longer than 30 days time to market is too long and there's another organization that agrees with me I did a presentation recently on detecting agile [Â __Â ] which is a Department of Defense article you finding that did that last last week people find that as well where I talk about some of those issues I've got a slide from it further on in the presentation for you guys and the who challenges who's doing the work and apparently this is where we lose a lot we lose 50 percent for ineffective collaboration now I know many of you work with teams that are trying their best to be effective collaborators and you're probably your number is probably better than 50% an average across all something like 70,000 IT projects worldwide but that idea and you might be not far off that 50% depending on the way your organization is is managed an effective servant leadership that that idea of people being managers instead of leaders inside the organization is kind of key there and is a big struggle and not having good objectives you know that misalignment of where we're going with people's understanding of what it is is is fairly fairly common and then we end up with these hierarchies of organizational structure that are based on a hundred and thirty year old terroristic practices that are really out more deep for the modern modern workplace subs the who there is also the how in the how and we're really seeing that growth of technical debt it's it's systemic in our in our industry and even big companies like like Microsoft and who whose job it is to build software and end up with significant amounts of technical debt I like to use data I'm not sure if I have that data in here I can get it for anybody who asks for it and but I have data around and how many features the azure DevOps team in Microsoft was shipping to production eight years ago when they were still a waterfall team and how many features they're shipping to production now when they were a waterfall team mounting technical debt only deploying once every two years they were shipping about twenty five features to production each year that's with six hundred and fifty people and with the same number of people now having spent eight years paying back their technical debt so moving that needle from fighting the technical debt struggling with complexity towards adding new features they now add more than two hundred and seventy features to production each year so that just shows if they were spending 90% of their time struggling with complexity pay back that technical debt and you get a lot more done because your teams aren't struggling with that so much and that's a that's a common growth of technical debt is one of the the biggest blockers to that so you really need to focus on that from an engineering perspective but also I mentioned anything that's automated sorry anything that's manual you want to automate everything so manual testing manual environment provisioning manual building integration manual deployment manual anything is a problem I did work with a team in Athens that was using a product called starting to do their stars control don't get me started we've moved them off star team but and one of the features of star team is branching and merging as you would expect from our source control system but the team didn't know they knew about branching but they didn't know about marriage so there was a 30-30 i between 30 and 60 people in this organization that when they wanted to bring changes from a branch across to the main line they were manually copying and pasting those changes across there are still teams out there who don't understand some of these fundamental concepts and need to start focusing on anything this manual is a bad idea if we take all of that that data that we saw there for the different different challenges the thing I like is this little graph here if your input was a hundred euros what would your output be based on 35 percent of your time spent building the right features so then we've only got 35 percent left so I'd have a hundred that's 35 euros and if we lose 50 percent for collaboration we're down to 17 and a half euros out of 100 and if we spend 30 percent of our time building new features and 70 percent of our time struggling with complexity we end up spending 5 euros 25 on adding new features and out of a hundred that that's that's a horrendous ROI and but it's the reality for many organizations out there but just to put that in perspective for a million pounds spend a million pounds on a project that's fifty two thousand five hundred pounds of value that's that's just not not good enough and that's not just engineering that's business processes that's know focus on collaboration these are these are super super common industry-wide I know some of your teams might be better than that but you also work inside of wider organizations that may still have some of those problem so we want to be collaborative to be more effective and that's why you know that's why this little document exists the idea of the agile manifesto was to try and focus on the right things rather than the wrong things that organizations have been focusing on but it's still taking time to get there and one of the things that I see I know this is the way we do things around here is the common thing was it the cup culture eats agility for breakfast our culture meets changed for breakfast or culture just eats everything for breakfast that's part of that that problem and so does this journey that organizations undertake companies talk about an agile transformation I don't really like that phrase because transformation implies some kind of completion which i think is just fundamentally not not true and I usually think about it more as an agile evolution as an organization you're going to be constantly changing towards an effectively an unknown goal and that you can have an idea of where you would like to go next where would you like to go in the next few steps but ultimately where you end up is going to be somewhere different and I usually use this kind of diagram I know the Snyder model is not I'm not selling you on the Snyder model for sure and it's just for illustrative purposes that if we have break our organization up into into these kind of kind of sectors where would you plot your company would your company be in the more at controlling space or in cultivating people space is it based on competence or collaboration what what percentage of each of these would it be based on there's no 100% anything but if your organization was in a particular place and you say you want to go somewhere else it's not actually a straight path like that it's more of our wibbly-wobbly Road and I like to think of it as orienteering you go off in a particular direction you hit an obstacle you figure out how to get round it and then you figure out what's how do we reorient take back to that important direction that we're trying to get to and see where we get to so it might not quite be the same place you thought you were going to get to hopefully it would be a better a better place and so one of the things that I think is really important is you you can't I think I've said a lot of important things and every organization is is is unique you start from a unique spot even if you use Schneider you start from a new unique spot you end up in the unique spot and however you want to do that everybody is unique so the idea that you can take a methodology that somebody else has built and apply it to your organization is really a fallacy as its it's not going to work what works for you might not work for another organization for what works for them might not work for somebody else an experimentation and iterating towards these ideas is really important but that iteration towards ideas that acceptance that our current processes are imperfectly defined is fundamentally it fundamentally means that we can't just use somebody else's process I have two processes that I'm thinking of I'm sure you're familiar with both of these and one is safe skill agile framework I know the newer versions of safe my picture is v4 of safe remember what they're on now there may be as high as V but the ideas original idea of safe was Dean didn't living well implemented in an organization how to do everything and then documented it and published it as a framework that folks could folks could use and it quite often failed in in fact mostly it failed in organizations that it was implemented afterwards it might have worked in the first organization because that was custom-built for them but then failed in future organizations same with the Spotify model and the Spotify model is not really a Spotify model I mean the folks at Spotify would kind of laugh if you said you implemented the Spotify model because what is written in that white paper is not what those teams do today and the white paper and the presentations that the Spotify team did where a point-in-time presentation a point in time understanding of what what they were doing at that point in time they've moved on since then they've changed their practices to suit what worked and what didn't some of the practices that are described in that white paper lasted a couple of months some of them lasted a couple of years some of them lasted five minutes it just depends what what things make sense and I think that's the important thing because really is something I like to say there's no such thing as best practices only adequate practices for the situation at hand and there's there's no guarantees everything's going to be different and I really enjoyed I don't know if anybody saw if anybody's read and the the Department of Defense how to detect agile BS but it's an article that was written a white paper sent out to all of the procurement officers within the Department of Defense to help them figure out whether their vendors are actually telling them the truth about being agile or they're just saying they're agile because you know that's the thing you have to say now in order to get the contract and something happened recently those that know and might have seen this already but I have a little US Air Force I have the original memorandum that came with this this was a clarification of that that memo and I'm the the CSO I can't remember what CSO stands for chief something officer I can't remember anyway the the senior officer in charge of IT and for the US Air Force is quite a progressive thinker and and he likens safe to waterfowl it's a large bloated prescriptive framework that tells you how to go do something and you won't find any large successful commercial organizations doing anything that looks like safe they've all built their own custom process based on the way they do things now I'm not saying that safe doesn't have value I think it does have value in certain circumstances and if you see the like the fifth bullet point down safe might be potentially might  be used a useful framework for teams who do not use DevOps but a key principle of DevOps is to decouple work in teams and only synchronization required about donors bhagavad I mean that's not quite right but know what I mean and that idea of having that monolithic process I think really really works and that said lots of organizations that are not yet ready for DevOps not yet ready for true agility um get a little way of the way there but I think there's definitely uh what's it called when you you think you're you're there but you're not there there's a false sense of security maybe mmm I'm not sure what the word is and but you have this false sense they you're doing something agile when you're using safe when safe is in fact the complete antagonistic opposite of agility it's a prescriptive framework and I know that new versions of safe are less prescriptive but that's its source that's its routes and you may as well be doing PMI prints two versions of agility and provide the same benefit I think start from something that works a little bit a little bit better so hopefully everybody's read there's this idea of five dysfunctions of a team it's an awesome awesome book and I have that presentation on detecting agile BS that was into a little bit of that but the thing that we tend to do in organizations is we we we have this complex world and I think however however you-you-you understand it I think this is the idea of software development being product development rather than product delivery you know a car production line is product delivery Toyota developed the the lean Toyota Production system in order to deliver cars not design cars the design team for Toyota don't use the name Toyota Production system because it's a different sort of work in the software world which I am that's my background our production line is our DevOps pipeline that's our from the time a developer commits codes to the repository till it gets into production that's our production light or everything before that the writing of the code the merging everything together those are those are creative endeavors that sit in this complex world of more is unpredictable than predictable with emergent answers and many competing ideas I'm sure you've you've seen these before I know I've talked to Satpal about these quite often but organizations tend to use a different management style the leaders job they tend to use is best practice you know I hear that all the time in organizations this idea of best practices and establishing patterns and optimizing to them and you wouldn't believe the number of organizations that still have a command and control at hierarchical outlook to the world it's it's very difficult to get to get em organizations to treat complex work like complex work so in a complex environment you're supposed to create a bounded environment for action so we want to have some boundaries so everybody's going in the same direction but inside of those boundaries we don't really know how to solve the problem and so we need folks to kind of get there themselves and obviously we want to increase communication because we're talking to each other more we come up with better ideas so generating those ideas servant leadership obviously to get things out of the way for those people to be able to do the work and do it effectively create an environment for that to work and so we need to start somewhere and where we need to start and is probably some kind of loose framework and my background is a scrum I'm not opposed to replacing every time I mentioned the word scrum with Kanban I'm just using this for illustrative purposes again and I like scrum I like scrum with Kanban I teach the professional scrum with Kanban class from scrum dark I'm co-teaching with Daniel Vacanti we're gonna do an online class Ferb well it was supposed to be an in-person class in Edinburgh but obviously it's going to be virtual but I'm going to be teaching with Daniel Vacanti in a couple of months and we're going to dive into how do we take those and complimentary Kanban ideas the core practices of Kanban and apply them into the the scrum world and so I don't think I mentioned that in this presentation but it's pretty good you can go and get the cat the Kanban guide for scrum teams which is a free website so we have this idea of potentially using some kind of framework I'm using the scrum framework for a product inside an organization so we maybe have one team working against this product and and instead of being part of the hierarchy they kind of exist within a separate bubble I've seen this done in organizations where they've actually created a separate company for the engineering teams to work in so they can work in a different way I with the hierarchy of the rest of the organization and I've seen this done in KLM where they created a studio for that work to happen and move the software and so for teams into that and it used services from the rest of the organization so those shared services might be infrastructure QA might be HR might be any of those those things outside of that and so you basically get a small pocket of scrum inside your organization a lot of organizations try to do a massive transformation they maybe do a small pilot project and a massive transformation and generally those fail usually they end up at something using something like safe because they need to figure out how to do everything all at once and that just tells you that so this scrum framework is just a - I mean the the scrum is just a tool to help us create an empirical process control system within which we can inspect and adapt towards creating a more optimal system that's really what is designed for some famous Kanban except a little bit more make sense so do scrum well or do cab Manuel is your first step am i I do it well I mean that people are really not good it even doing scrum at all or doing Kanban at all I got two teams all the time who say they're doing Kanban and then you know they've just got bored with stickies that move across it that's not Kanban where your whip limits where your your concrete processes where are they not decided any of those things so some interesting data here which is actually from Forrester Research and is only 22% of organizations that say they've adopted agile and are actually doing short iterations if you're not doing short iterations you're not very agile only 13% do retrospectives if you're not inspecting and adapting what what are you doing and only 16% of prioritized backlogs though these are appalling numbers that are that are only only getting worse as more organizations move towards agility and more snake oil salesmen and charlatans convinced them to do the wrong thing and I actually worked with some some folks in organizations and the their organization is sold unsafe so they create something that they can sell is safe but it's actually much more agile than say if it's a custom process for them so some organizations that say they're doing safe actually aren't they're doing their own thing and that's okay I'm okay with that just some extra data if we fix these problems we can improve a lot of things in our organization and try not have just skin deep I like that expression skin deep agile I think Ken and Jeff call it flaccid agile I like that one as well I usually call it mechanical I call it mechanical scrum we're just mechanically following it we're not actually doing the things those are pretty effective so step two is you need to enhance it you need to do those things like create empirical systems have our engineering practices coding guidelines user experience emergent architecture all of those things and and once we've got good engineering practices for me that's the engineering practices parts you get mechanical scrum engineering practices and then introduce the values behind the processes how do you build a system within which you can have transparency that you see the truth and these are trying to trying to create that and so whatever your you're doing you need to focus on all of those things to get to this idea of doing something professionally rather than just doing something and I think that's that's the fault are in many organizations is they don't focus on professional scrum because we don't have time to do testing let's just get stuff done or we don't have time whatever the things we don't have time for to focus on that professionalism and then we end up with with some kind of small loose framework around which we can build our own custom processes that's the idea I'm looking at so we can then add multiple teams into this bubble and that all work by different rules use these shared services and we've upskilled the individual teams because the reality is that skilled teams are 224 percent more likely to be successful than unskilled teams that seems like it makes common sense but it doesn't necessarily make common sense and a lot of organizations they believe that scrum or Kanban is just this unicorn that's able to solve all of their problems and but it ends up being you've heard the term scrum er fall or many waterfalls and everything ends up being a bit of a car crash that's our very common thing I actually do have the the Kanban stuff in here they're mate and so one thing that I always get teams to do once they get to that professional scrum level is they need to start looking at their floor and optimizing for it folks on the call who are agile practitioners who work in these big organizations you'll know what I'm talking about if you take a bunch of amateur teams and try and get them to look at their floor it's an even bigger car crash you have to get professional teams first get them all all going in the same direction delivering a working increment every iteration once you can get there start introducing flow start optimizing for smaller batches and focus on that idea and I mentioned the professional scrum Kanban the command guide for scrum teams and it talks about the five core practices visualize limiting work-in-progress actively manage items make polls explicit and it proved collaboratively and those are the core varieties from camera and so I'm not talking about the Kanban method which is from lku I'm just talking about those those core Kanban practices and something that can said recently was the only foundation to scale is professional teams you need to get the professional teams first before you can scale and I'm sure you've seen a bunch of unprofessional teams shoved together and trying to build some software it's always an amusing car crash and but Steve Porter who was one of the co-creators of the Kanban guide for scrum teams added that manage flow the only foundation for skill is professional teams that manage flow because the reality is of scaling is expensive it's hard it's wasteful ultimately don't scale scaling it is an anti-pattern of software development you need to avoid it at all costs because scaling doesn't go linearly it has this very quick tail off as you add more people and then at some point you add enough people that it gets too complicated and you end up with something that is just not a lot of fun this is I think this is our P I planning yeah this is the last P I plus the video from the last pipelining that I saw so you can scale continuously as long as you do certain things and but you need to do them all the time you need to identify and remove impediments i--sorry dependencies dependencies are going to be your killer so anytime you can create vertical slices so feature teams rather than horizontal teams obviously and but integrating work all the time across all levels one of the downfalls of office at 2012 was that they weren't integrating every iteration they had most of their stuff integrated but not everything so then they ended up nine months later with a big problem and then create and inspect those increments regularly obviously make sure your teams have the tools and skills necessary to do things at scale it's going to take more tools it's going to take that more time it's going to be harder to beat to get get on board with that and obviously keep keep inspecting and adapting frequency frequently scrum dark noticed that this scaling thing was a problem they were very late to the scaling framework party and the reason for that was they wanted to take their time and make sure that they had something the in keeping with scrum is the absolute minimum you need to make sure you maintain the levels of communication that you need to create an empirical process control system so they came up with something called the the nexus framework which is a lot smaller than a lot of the other frameworks that are out there um I'm thinking of a scrum at scale I'm thinking of safe I'm thinking of other frameworks because it's not going to tell you how to go solve your problems it's just going to deal with those communication issues between teams and I've seen Nexus and I've seen Nexus implemented quite a few times with organizations and it's very easy and quick for people to understand because it's only a little bit more than scrum and it doesn't add a huge amount of complexity or overhead you've effectively got this idea of um you know you're gonna have to do refinement now whereas if you get one scrum team with three people you maybe don't have to refine but if you've got nine scrum teams of 10 people working together men and you're gonna have to make sure you have all of your backlogs in a good state and then you need little teams of teams to get together to make sure that you have good communication so you can see the Nexus sprint planning has a little Nexus that gets together it's a team of teams it's the right people opens our open space rules and from the scrum teams that get together to figure out some dependencies to figure out how we're going to move forward for the next sprint and take it back to the rest of the scrum teams which may or may not be in the same time zone it's okay to have multiple as long as the individual members of your team are on the same team on in the same time zone in the same cool ok they don't have to be co-located but it's more optimal then more optimal is having those teams together and then multiple teams in multiple locations or in the world can work together so I asked Nexus sprint planning might run over 24 hours because you've got that time lag we just need to deal with that problem we need to figure out how to do that obviously the closer people are the better but there's the realities of business and and then we need a view on all of our work so the Nexus sprint backlog with a way to view individual teams backlogs we only have one review because we've got one product I think that's important but even on a daily basis we maybe have that team of teams get together to discuss dependencies and issues and then at the at the whole Nexus level and then take that back to the team's daily scrums again just a 15-minute before everybody else's daily scrum representatives that make sense from the other teams get together figure it out take that information back same in the retrospective you're going to have but you're gonna have kind of you're gonna have to one of the beginning one at the end because you might have a bunch of things that need to be input into the team's retrospectives and then the teams might come up with all sorts of clever ideas to go solve those things so that team of teams gets together to bring all that information back that's the idea from Nexus it's just meant to be the minimum I'm not saying it's the right framework for you but it can be a useful a useful tool that has those very simple added extras to help you get that increment at the end I didn't mention the Nexus integration team because it tends to be a very poorly understood the integration team is not your DevOps team it's not your build team it's a team of teams it's a group of people who get together to solve whatever problem is inhabiting the team's ability to get a working increment there's no point in the scrum masters getting together if the problem is merging code they're not going to know how to solve that problem you need the right people so effectively a nexus integration team is just representative some various teams the right people maybe they're scrum masters maybe they're engineers it just depends on what the problem is they're trying to solve it's not a permanent team they're gonna go back and the teams the individual scrum teams inside the Nexus to the do the work that's the idea behind Nexus and having these breaking teams so then we can bring in a much larger product into our story and you've got lots of little small products use no service overseas and then we bring in a larger product into that into that world so as more than three teams working together I don't know where that animation came from never mind so that that essence of scaling is we need to anticipate problems by focusing on minimizing dependencies that's your your your almost most expensive concern is minimize dependencies and then make working software you're still a team of people working together to make a single product so if you don't have a working increment at the end of every iteration we're not there yet we need to get that working integration so just inspecting and adapting towards that world and you're probably talking about more engineering practices for absolute focus on minimizing technical debt automated testing continuous build and delivery very very very important some examples of teams that are using Nexus Capital One has delivered some products with Nexus and I like the comment they are to less than an hour to explain access to teams that are already familiar with scrum it's not much more than scrum so Capital One Kathy Pacific Airlines and also use Nexus as well and that that really helps so while I'm I think this is a very miss Atwell I think this is a misleading quote but small teams of 32% relate to succeed large projects are 600% and that's because large projects are such a big mass that they can get 600 percent improvement and they probably both get a similar improvement is just much more obvious in a large project and I think small project here is 50 people or less large project is more than 50 people Gail's reports that but what that is and so we we came up with this kind of bubble just back to my bubble of scrum in my case or bubble of Kanban or even you could have one team doing can add another one doing scrum it doesn't matter you know these shared services there's bubble in which people work differently and and potentially you need to at some point you're gonna have enough going on in there that you need to start focusing on that leadership ideas and and that's where you start to look at how do we get the CEO CIO involved in that and provide agile functions of leadership like HR finance and admin there are things that the whole team can use in an agile fashion rather than just using the shared services from other projects um how do you build this new type of organization that is flatter structure or not based on hierarchy and inside of that and then this idea of bringing in more products you might have some bigger products that have multiple Nexus again the windows team has four and a half thousand people working on it and the office I think has 300 scrum teams 300 scrum teams now they've come up with their own way to solve that problem that's okay too this is just a framework that you could use to help you get started but it's it's interesting to note the the characteristics that I'm showing here are things that these big organizations that are doing agile well whatever they call those things or how they implement them they have something that kind of fits this bill and and the next thing we need to understand is how do we know it's all working so something that I think is very important is understanding whether you're making improvements the organization organizations spend a lot of money with us agile practitioners to come in and help them get better at delivering software how do we know we're making things better well we need some kind of metrics to monitor scrum that arc has some example metrics and I'm really stressing that super a heavily example metrics in particular categories but I think the categories are the thing that's important we've got to look forward to towards the future with market value let's you get the current value you've delivered in your product and how you monitor and measure that so you're gonna need some metrics around current value how do we understand that and then we've got unrealized value value we don't know that we need to have yet how do you look at the market how do you look at market trends and analysis and figure that out build that into ability to innovate how quickly can we innovate how much time will we spend innovating in our product so we need some metrics of own around our innovation so I might be capex darzee's our pecs is a super simple one but I think it gets cloudy you're gonna need some other measures in there and then time to market how quickly can we actually get our product in front of users and I'll use the example of the windows team again which gets their software every thirty days in front of 600 I think it's is it not a billion machines now yeah it was used to be six hundred million machines it's closer to a billion machines now worldwide that's pretty impressive engineering practices to get there I don't know why that animations coming in I have some example measures in the deck I'm not going to go through them all and I'll just flick across but you've got to figure out leading and lagging indicators some of them are more important than others and these are just examples they might not work for your organization I don't know why there's animation again and it's doing it on all of them but unrealized value time to market so even um cycle time release frequency leak time these are a lagging indicators there are there are leading indicators frequency of build success might be a leading indicator make sure you've got understand your measures effectively and this time EBM metrics evidence based management EVM is something that actually comes out of the medical profession about a hundred years ago or actually a hundred and twenty ish years ago the medical profession decided that it would be a good idea to makes decisions on your health based on you know data like your blood pressure and you know collecting some data and figuring out how to solve your problem rather than just making up an idea and hoping it works so this evidence-based management is for managers and organizational leaders to look at actual data make changes see how those changes impact the data are we taking the organization in right direction like project cost per iteration time to market innovation rate how much time do we spend innovating there see struggling with complexity satisfaction of our customers and employees is that trending up or is it trending down product revenue and costs these are all things that are measures of organizational and product performance and and we want to be optimizing those things we want to making those numbers look a bit a little bit better and we can tell whether we're making headway if we have balance across all of those things that's why I had four different categories of metrics because we could have asked awesome time to market but we're delivering a bunch of crap to our customers so we need to make sure and that we balance all of that out yeah just keep things simple and while my diagram might look super complicated now you saw it's literally just it's just scrum are we to scale scrum very simply and then a way to to measure it and that's really the idea the SDK in there is just and let's share some data so it's probably a community of practice across all of our teams to help share some of those good ideas and maybe create a starter pack for any new team starting up where should they start within the context of this organization so every company will build something different and frameworks are just a starting point and it's okay for them to start with Kanban start with scrum and start with and whatever whatever makes sense for them I had just some final suggestions where is it there yep and make sure you measure and focus on value and outcomes rather than output and progress and we can output a lot of crap and not get to the outcomes that our organization needs to get to celebrate success improve the results get create a holistic view of what you're doing and try and improve those measures come up with a hypothesis measures move figure out if you're doing the right thing maximize learning and really just do the best you can I think Scott had a good comment is sometimes you'll try something and you'll just be wrong and that's okay we need to do the best we can with the information we have and see where we get to that was kind of what I wanted to cover and so just say I covered a bunch of stuff around scrum engineering excellence with the Kanban guide next is framework so don't scale pretty much is my advice and really I've already at all costs if you can and then evidence-based management actually make sure you look at data and you can get a copy of the slides from that link at the bottom and that's already been published for you and I guess we move over to questions yeah we'll take questions I've got a type was I talking to him about any country no no no we don't any come with chat so yeah if there are questions you have we've got Tim to take some yeah no II really enjoyed it it's a really good insight I think just on the nexus stuff because as you know I've kind of been delving into the yes grommets kill stuff lately yes in the year and connect we enjoying the same sort of ideas Nexus where you know you want a really good kind of well-oiled well so function and scrum team that's doing it really well and then you're kind of stealing it Oh Tiffin I take the view that scrum at skill kind of is similar to Nexus in that you know it doesn't really add much more than just you just got lots of scrum teams then you've got some additional teams are just supporting you as you scale up so you start on the scrums and then some of the government's teams but Nexus those scenes are even more simpler than that do you see any in Challenge have you ever so implemented Nexus somebody coming in and Nexus is a framework I think you think Nexus lacks so yeah there are tons of things that Nexus lakks it's supposed to like them it's it is just a framework just like scrum lacks what is your definition of done yeah if you don't have a good definition of done you're scrums not going to be very good if you you don't know where your backlog comes from and how to get that and create a backlog scrum doesn't tell you how to do that and Nexus is the same it's trying to be um it's trying not to be prescriptive on your business practices because the the the reality is that the way sorry I've said that quite a lot the reality is I'll strain stop doing that and every organization is unique the success or failure of an organization is in that uniqueness so the idea that and i know i'm i was pooping unsafe a lot but the idea that you can have every organization use the same blueprint and be just as successful is is why Nexus and scrum at scale and scrum are very compact and the minimum to solve the the empirical problem you want to create empirical process control system so you can expect and adapt to the best possible outcome or at least the most relevant okay bad idea and I think ken and Jeff almost totally agree between Nexus and scrum at scale and there's just the some differences in the terminology but definitely there's a little bit more in scrum at scale that can just didn't want to be prescriptive about and I think that's that's okay I think there's room for all of the frameworks and I will say if if you're using a scrum at scale and you're going to have exactly the same outcomes as you might have if you use Nexus as long as you see it as a starting point and a foundation and not here's what we're gonna do does that make sense yeah I think so I think as you see the best Fremont's are probably ones that it's exactly in the definition of a framework right it kind of give some shape but it doesn't try to be too prescriptive and it shouldn't be because then it's good yes it's dictating too much to unit it's going to be restrictive right and constrain you and every as you say every organization is unique so you need to have but room to maneuver to a little needs and then that's a good thing yeah it did any questions come in I'm gonna get good ones here yeah I like this first one so Mark Martin is asking because I often have this conversation myself so Mars is interested in soft product owner opinions so if we pull them from they always just don't some other ones have common one say if we pull them from the business you know people gets appointed you know into the rule and they tend to be economics bag is there any ways of any good ways of can I help and get them into shape in your experience cuz you know what the different types of deals right they come in different flavors what are your thoughts on helping app you get to the place you might want them to so that it affected yeah I miss equation I'm definitely I'm definitely going to punt the professional scrum product owner and so you know I don't teach that one so I'm putting somebody else these things but I think that that many product owners when when they first start and even if they've been approached or for quite a long time they have a very narrow view of what a product owners job is very narrow and if you think about a product owner as being fully fiscally accountable what they choose to spend money on then that idea of accountability inside of scrum which comes with that product owner rule accountability for value is is is key to that so if they don't understand that accountability or they don't enact that accountability so they need to be looking at the market market trends they need to be looking at and how users are actually using the product and a lot of or quite a lot of UX comes under the product owner world because that's how users interact with their ideas these are all business problems to go solve the technical part actually hit that tends to not be the biggest problem it's getting those product owners up to speed and I do have a company I worked with in Australia a consulting company and and they they themselves would pay for the potential product owners from their customers to go on the professional scrum product owner class so that they knew what was expected of them and they found that that I guess 2000 Australian dollars that two thousand dollar investment made a massive difference to the success or failure of their projects with those customers because they really understood the scope of that product product owner role leti that comes with it I'll tell you something I've been through the part-owner class and and I figured out that I wouldn't ever want to be a product owner and I've done it I've done the PSP you and I think you're right I think if you're really doing it there's a lot for one person to be accountable for and just you know the different dimensions to the role yeah you know that there are so alongside you to piece in some ways you and a bit like they were you know we talked about the the Nexus mchugh the product yeah exactly so the scrum at scale you know if you're the chief product owner you might likely actually be the chief exec and you're cleaning that room some organizations in it's like that so yeah it's so I would say just as a final product owner thing is your product owner is the one that's accountable to the business for value delivery not the development team so if your development team are have good engineering practices and are delivering high-quality working increments every iteration but they're building the wrong thing the buck should stop at the product owner not at the development team because they don't decide what they go work on having some of those ideas engrained into that role and will help if people feel that they're they're responsible for spending money they'll up their game misuk anyone yeah not sure they get that's an excellent put got another one for you here oh yeah just about something so cake leagues I guess it's coming back to what you were talking about earlier by we talked about three more simple prescriptive they are so if we avoid being prescriptive do we risk never being able to set a direction of travel ie doing scrum badly as they accept it norm I think that is an interesting point so the question is if we're being less prescriptive are we in danger of off doing doing scrum badly as just attempting that yeah um I I would say no because what what are what are the transparencies in scrum give you three transparencies in scrum oK you've got transparency of the future in the product backlog do we know where we're going and how we might start to get there that's the part of the owners I came to so if you don't have an ordered backlog if everybody in the organization that needs to it doesn't understand what's in that backlog and why it's there you've got a problem you're not doing scrum yeah that rule of product owner is not doing its job and you've got the the Sprint backlog which provides transparency for the present what you're doing now that has its own things but not aware that just no and then you get transparency of the past which is the usable increment so in this in software terms you need to have working software that can be deployed to production at the end of every iteration including the first iteration does your team have that if not they're doing scrum badly they're doing agile badly yeah you need to get that minimum bar I and I think it's often overlooked the minimum bar for scrum is a usable increment you have to have working software at the end of your sprint otherwise that wasn't a sprint is then you have no transparency you can't inspect and adapt you don't have an empirical process control system I think in in this group we can have this conversation but when you're talking with customers you have to be a little bit more pragmatic and say well okay you're doing scrum because you tried really hard to get a working increment and but I wouldn't expect a team to be on Sprint 30 and still unable to get a usable increment every single sprint that should be a no-brainer by then yeah there's your DevOps team at Microsoft which was 40 teams working together on one product took about 15 15 was a 15 maybe less or maybe 10 10 to 15 Sprint's together craft together but that was six hundred and fifty people working together on one product but since then every sprint of the last hundred and fifty odd Sprint's eight years of sprinting has been deployed to production that's pretty impressive that's that's like your minimum bar so so Craig I I think that's the difference between mechanical scrum actually doing it focus on the the values and principles building trust the transparencies and good scrum will come out of that and but it is difficult it's a long journey and you need to uplift the skills on your team and your product owner along the way to get there and I would definitely create look at the Kanban guide for scrum teams that's the bat size and flow optimization that you might be looking for to take your not so good looking scrum to the next level that's a question but I guess you know but you know this whole idea kind of starting somewhere right we get it right you know please you do I was gonna say you look you know not feel the good place I yeah yeah you might be building the rain I don't but you're in a fairly good Wow comes by thought you said LA you wanna add value to the customer all right well not many other questions coming through so I'm just conscious entertain some minute um do you want to see a couple of stuff you've got coming up I've got coffee some things you've got the paper in and all you're gonna have to move to virtual and you've probably done a bit of work to do on that front but you want to just if we're we're scramble here yeah we're scrambling around a little bit trying to figure out how to do this not just from you know flip that switch and make it virtual but how do we can actually deliver classes virtually um yeah so I've got a bunch of classes that I had a pre set up for Edinburgh and I think in two weeks I have a PSM and a provincial scrum master and a professional scrum with UX class and they'll both be moving to virtual but they're pretty near nobody signed up for them yet mainly because of all the things that are going on and so if anybody's interested please let me know about that and then Daniel Vacanti who was one of the original Kanban method founders a Corbis and who co-founded the LGU with David Anderson it is going to be teaching professional scrum with Kanban with me meant to be an Edinburgh class again but we'll be doing it online and I think after that we have our Apple II professional agile leadership essentials which focuses that that middle management layer in an organization that doesn't work directly with on a scrum team that works with scrum teams how do they move their game from management towards leadership that's the idea so we've got some stuff coming up you can find it on my website you can find it on the scrum that org site as well my website is nkd agility calm and if anybody has any questions Martin and KD agility comm also mr. hench on Twitter and wherever else you can find me if you google for me you'll find tons of stuff excellent brilliant fried tomorrow that's great right just talk so just a couple of committee announcements [Music] what's gonna be hopefully these vervain so next week Thursday the 26th our friends at the heart of agile we talked I've got an amazing event actually they've got a nice soft cuny for charleen we aren't gonna be hosting Jeff Watts I'm sure many of you here have his books and how it's gonna be that's gonna be awesome I'm signed up for that one there's me really good it's a beast I'm on the way yes yeah are you know I was in there fast so yeah eighty folks lined up for a starts gonna be brilliant and then our next event is in me know for that 57th that'll be the right to left if any of you've read that so that's by our friend Mike Barroso he's gonna be doing a remote event talk about some of the key ideas and not so that's one for your diary if you're interested not you'll find all these on Meetup so yeah sorry not before they fill up and I think that's it really if there's any others yeah we can start elected on to the LinkedIn group if anybody's interested in joining laughs you know Kieran keep talking a favor socially didn't swing you know it's it's not be distant keep the conversations going and thanks for joining us evening and yeah stay safe look after yourselves and your loved ones billion thank you thanks guys okay everyone south and it slowly thank you BCS is"
  },
  {
    "Title": "Scaling Agility: Navigating the Dragons of Change in the Future of Work",
    "Description": "Explores practical strategies for scaling agile practices, key metrics, virtual training adaptations, and global insights to navigate change in the evolving future of work.",
    "ResourceId": "OCJuDfc-gnc",
    "Url": "https://www.youtube.com/watch?v=OCJuDfc-gnc",
    "Date": "2020-03-25T16:17:15Z",
    "Captions": "okay this is Martin ho8 from Naked agility I come a few things that I wanted to mention tonight I'm going to be doing meetup for the future of work in conjunction with the British Computer Society at 7 p.m. UK time tonight \n\nI'm going to be talking about scaling dragons the the things that are going to be beneficial or destroyers as we move towards scaling agility and things that we need to consider and figure out so I think that will be good fun we're going to be I'm going to be talking about I'm going to be talking about scrum initially and then I'm going to be diving a little bit into Nexus but more from the perspective of the practices that really matter for a large-scale scrum team talk about them for a little bit and then maybe we'll touch a little bit on metrics and getting an understanding of some of the key at least starter metrics you might not be the metrics I'm going to talk about might not be valid for your organization but you can use them as a starter point as hints as a lead through towards understanding metrics that might be viable for your organization that's so that's scaling dragons tonight at 7 p.m. gmt with the future of work meetup in conjunction with the British Computer Society \n\nit's also going to stream live on YouTube LinkedIn and Facebook so if you can't get into those events you can certainly get into get into that but ultimately if you want to be in an interactive session then definitely head over to the Meetup and join in the folks that are organizing the meet are awesome and we're gonna have a good fun again that's future of work in conjunction with British Computer Society at 7:00 p.m. tonight \n\nI also wanted to mention that I'm working obviously there's no in-person events going on so any time that I've got a conference event we're going to be doing it online if the conference event is cancelled then I will record or do a live event anyway at the same time or separately off of that talk and so that people can join in and I'm also going to be moving some of my training classes to be live virtual classes this is a very complicated thing all of the scrum the dark classes that I teach are really designed to be high bandwidth impersonal classes so what I want to do is for the classes that make sense we're going to run some virtual classes we'll probably run them as kind of like a 2-day event and see what makes sense whether it makes sense to continue to run it as a two-day event or to balance that with like a you know dude over 40 is four half days or do two full days what what makes sense for for that training so I've been looking at the the professional scrum master and the professional scrum with you acts are ones that I think I'm going to run first in the next couple of weeks I have classes scheduled in Edinburgh for that so I want to convert them to live events \n\nit's going to be really interesting how we manage to run those Edinburgh classes with that number of people how do we run that virtually so I've been looking at the technologies involved I've been practicing with the technologies involved and hopefully we'll be able to come up experiment and inspect and adapt towards some super awesome classes and the other classes I think that are going to be pretty good online is the the professional agile leadership which I have a class coming up this month we moved to virtual and as coming up in the the GMT time zone and I have a agile leadership in the Mexico City as well gonna move that to virtual we'll see how that works I've got a colleague that I'm working with to deliver that in both English and Spanish so hopefully that work out \n\nI'm also the professional scrum of Kanban with Daniel Vacanti then I'm running in month or so we'll also be moved to virtual and Daniel and I will be running that as a co-teach over two days and we'll see if that works out and I've been in touch with the folks during during the professor scrum at a man we actually use the get Kanban game from get Kanban calm and which I have physical copies of but obviously that won't work for a virtual class so how are we going to run that I've been in touch with the folks that get Kanban to see if they'd be willing to implement a version of that of their game on table topia table topia is a virtualization platform for board games I've been using that with some of my my friends to play some be awesome board games that we play \n\nI'm really figuring out how to run these classes luck from the dog community and has been banding together we've been talking about and exploring different options for how to do virtual class he's how we break them up how we organize that so I just want to make sure that the reason we're that there is a session tonight a future of work session with British Computer Society I'm going to be talking about scaling scrum to the enterprise and hopefully be able to join us at 7:00 p.m. GMT tonight and it's been a stream live on Facebook and LinkedIn and YouTube so you should be able to test that ah feel free to follow me on Twitter get in touch if you have any questions I'm super happy to do sessions with anybody who needs it on both agility and DevOps if you want to talk about DevOps practices if you want to talk about maturity of a scrum team principles and values if you want to talk about and just as your DevOps DevOps in general whatever you want to talk about ping me on Twitter we can get on a call we can chat maybe you just have a question that you want an answer maybe I can just give you an answer and let's let's figure out how to use this time that we've all got enclosed in our forms to the best benefit of everybody else \n\nnormally I'd be off at traveling the world consulting in person which is obviously my preferred way to work but at the moment it's not possible so let me know if you need any help if you just want to chat I'm not talking about charging you for that I'm talking about just having a chat if we can spend half hour on a call and figure something out or I can do a webcast on a particular topic that helps solve a problem for you I'm super happy to do that if you're looking to get two days of time with me then we can figure that out as we go but I'm really looking forward to the different form are experimenting inspecting and adapting with the different forms of interaction that we can have over the next months as we are stuck where we are and luckily as I consulted travel worldwide obviously I'm happy to speak to and hear from anybody anywhere in the world \n\nI've been training in Saudi Arabia which was super fun very different than I expected and I trained in Ghana in Africa which is one of my favorite places to be and I've also been out to Azerbaijan as well so I'm happy to work anywhere in the world you're mopping okay thanks very much for for listening and and I hope you you get in touch and follow me on Twitter to find out what's going on okay"
  },
  {
    "Title": "Unmasking Agile: How to Spot Genuine Practices Amidst the Myths",
    "Description": "Learn how to identify authentic agile practices, spot common myths, and understand cultural barriers that hinder true agility in modern software development teams.",
    "ResourceId": "FZeT8O5Ucwg",
    "Url": "https://www.youtube.com/watch?v=FZeT8O5Ucwg",
    "Date": "2020-03-18T13:56:05Z",
    "Captions": "you\n\noh my name is Martin Henchy wit special scrum trainer with scrum dark I want little chat today I'm\n\nsome of this information comes from some well-known sources I'm going to elaborate on those saucy\n\nparty\n\nyou\n\n80% 81% all development shops see they're agile that's based on Forrester Research that of that 81% around 80% and 82% I think and our say that they're doing however the reality that almost 81% of them are lying that's the thing that we find anybody out there who is a trainer a coach a scrum master at will know that these things are almost never so how can we tell the real thing from what might be considered I do have some very concrete measures we can use they are not mine they come from another organization which I will describe I just find them interesting enough\n\nyou\n\nonly 22% of organizations and short iterations that's iterations of six weeks or less the manifesto does say that we should have\n\nsix weeks or less or get stuff in front of our customers six weeks or less the scrum guy you would see at 30 days our last one\n\nbut if you don't have short iterations and are the only ones that do then the likelihood of you being\n\nand only 16% have an order backlog this is one I do not understand if an organization is going to spend honey getting there having a team of software engineers working through a body of work why would you not want to make working on the most\n\nsixteen percent have an ordered backlog you'll probably find that we have something they would call a backlog at all\n\nonly 13% do retrospectives closing that feedback loop it's super important and how do we make sure that don't do the same thing wrong all the time tight act or not just what we just did but how we did it\n\nit better store so this data that I'm using here and comes from Forrester Research I have a slide which with the original data for that I found it pretty interesting\n\nfeel free to and have 50 yourself because really the reality today with organizations is that while it looks\n\nhey they're doing the right thing it's secret is we're all a mess in sight I don't know any service orientated organization I'm actually I'm thinking of\n\nthank where I've heard of our consultant developer going in and really liking what\n\nbehind-the-scenes things tend to be a little bit interesting\n\nyou\n\nlet me check at the the I can do something about the sound\n\nyou\n\nso I'm not sure if I managed to actually fix the sound or do something about it hopefully that's ah\n\none comment on why it's so hard to change it's it's a cultural thing we like to as humans we like to do really the same thing we get stuck in our way of doing something and unless we feel that we're empowered to make changes through that process then um it's it's very very difficult I just googled why has changed so hard and Dilbert and I had a plethora of choices for em but what constitutes\n\nso there's something that we all know and love this is the the tyranny of terrorism and being very specific here I'm trying to avoid the term waterfall for for very specific reason\n\nlook at them as I go through but ultimately you'll see this process reflected in many organizing fireman's through to designing through to implement the verification and maintenance you might even see in organization that they have HR department they have our sales department they have our IT department they have an apartment as completely separate entities and there's a very good reason why we ended up in that position it's not necessarily good now but for the time when those ideas came about it was the right way to approve but times have changed we have more understanding of how humans interact with work we have more understanding about the complexities of a lot of the world and most people know do a cognitive work so let's have look why do we work that way so we need to kind of go back in time a little bit go back to three at nineteen eighteen ninety before eighteen ninety people generally lived pretty close to where they work they whenever they had a problem they just rallied around and figured out how to solve it supportive innovation I need to work very very close to their family and and if you were doing a job you did the whole job not just part of the job so you can see there the the cobbler on the right the apprentice learning how to make the shoe and the reality is that that cobbler probably knew the person who they were making the shoe for the knew what their job was how they were going to use the shoe that product and the cobbler can make that shoe with that person in mind they probably made that person's previous and they know that that person can come back in and whenever they've got a problem with the shoe so they get old they can they'll know all the experience that that user that person has had with that work and that's a very powerful way to build products that have a very high Happiness ratio with theirs but how do we scale that it can be very difficult so in just after the 1890s the Industrial Revolution kicked off into food and it was a time of lots of money was made but you can see in those pictures that there are people doing very individual tasks I would struggle to even understand what these folks were making something around for sure with boats in it it could be clocks it could be parts for cars it could be um washing machines it could be any sort of device we don't really know and it doesn't really matter for the individual sitting at their workstation they only need to do the one thing I usually use the example of Charlie and the Chocolate Factory\n\nand Charlie's dad's had a job before he lost his job to a robot and his job was screwing the top on toothpaste bottles like a very\n\nask and when we do menial tasks our brains disengage from the work so what's what's that's the difference here is that on the Left we have the cobbler making the custom shoe for the individual person that they know that they interact with they understand the whole process whereas on the right we have the factory floor where the individual users don't really don't really even care don't even need to know what the thing is that they are creating they probably have some idea it's probably difficult to work in a factory and not know output is but do they really understand how their piece of the puzzle contributes to the overall thing they're just doing exactly what they're told\n\nso there were two really big thought leaders at the time the first was a gentleman called Frederick Winston Taylor and he has a comment that I think you'll find very in keeping with our understanding of how current management practices like that think of this is the foundation of current management practices hardly a competent worker can be found Tudor does not devote a considerable amount of time to studying just how slowly they can work and still convince their employer that they are yes\n\nif you think about that position of distrust that people are trying not to work and that's a very common mental practice for management for project managers for the way people manage their people in the world today\n\nother are not saying as everybody there are lots of progressive people out there but is a very common mindset and they're starting to change but it's changing very slowly\n\nthey were invented something called the scientific management method\n\nand it was based on the knowledge at the time so what they did was they developed standard methods for performing each job best practices they divided workers into appropriate ability based groups for each job so and you know they're going to have the steelworkers\n\nthe for one of a better expression the project managers the coders the testers the operations having them all as separate ability based groups they understand that so they should all work together on that one task you saw in the pictures of the factory floor and the they have everybody that does that one task together so they can deliver those standards they train the workers in those standard methods because there's no no thought we need to remove thinking and we're just going to plan their work so they do it the way we tell them to do it and and we're going to create a bunch of wage incentives to\n\nyou'll see some of these things in maybe the current management practices of your organization\n\nhopefully you work in a more progressive organization but Taylor had somebody who came after him kind of a disciple somebody who looked up to his work and that was a gentleman called Henry Gantt\n\nand Henry Gantt and came up with some things we know and love today apart from the Gantt chart but he created the tasks and bonus system of which payment he created our basic wage based on expected low performance so if we think from a position of distrust of our employees they're gonna try and work less so let's pay them like we expect them to work so pay them last for their work and then we'll give them bonuses if they manage to meet the expected professions that we we sent a vice by default and also if we're going to have all of these folks that need told what to do because we're removing thinking then we need managers to manage them\n\nthe Pyke's t of the work you might need more managers and you might need managers to manage the managers but the manager should be motivated based on getting bonuses on the outcomes of their staffs so if you think of well I worked in Merrill Lynch I had to fill out a bunch of status reports at the end of each week which I would give to my dev leet who elected them together for all of their direct reports and passed it on up the chain everybody had a head count they were accountable for that head count and the amount that was delivered they also henry gantt and came up with this thing is is unknown i like to call the modern school system and you may hear folks refer to the modern school system even today and when they refer to it they're referring to this something little bit like this picture here let's that was like my class in school\n\nalthough this was a lot further ago and but everybody in a modern school everybody sits in rows people do the same thing at the same time there's no talking you gotta put your hand up and incentive based learning and reward for fulfilled tasks these are techniques designed a factory workers the modern school system was designed to do that was thank decree remove thinking and just do it you're told\n\njust follow the set of tasks you've been given it doesn't matter if you don't understand it\n\nso many of us grew up in the system many of our kids are in more of a hybrid system where teachers are trying to push away from this idea of rules but they you know they're they're struggling against a system like we are that defaults to the old way you go to those places in the Netherlands where they have changed the school system to be or in keeping with what we expect\n\ngroup Isis learning together presenting the stuff that happened in the modern workplace so really there's no difference between the modern school system and that management scientific management\n\nnostril revolution in the factory floor these two folks optimized for output and not outcome you're our coach or a trainer at following this you'll know that's already and but I find that knowing why something is a certain way help us combat some of the the eight years and in 1908 and this was the first Harvard Business School I think this might be the graduating class of Harvard Business School and and loads of the the leaders of the time the the people who would be managers at the time or who are going to be managers at the time and flocked to these and\n\nschools doing MBAs so this was the first MBA and we know those ideas have lasted for a long time in the 50s this this new way of working started to emerge and become more prevalent across the board not just as part of option align process\n\nso dividing people into specialist skills marketing sales contracts development testing and all of our separate things\n\nand and create things sequentially in hand things between the different sections that doesn't think you know the complexity of the work\n\nthen round about the 1950s the US military complex who is I think still the largest buyer in the world it's it's they have a lot of employees a lot of people that work with them a lot of consultants and because they wear such a large buyer and their their power to push vendors and consulting companies towards this model that they wanted to use was immense and most people couldn't escape it and if you work with any large consulting company they probably work with the Department of Defense especially at the time and if you work with the varmint event you must do this this new staged process so we adopt it and eventually it just becomes part of their procurement Sassy's that's also the Chairman processes that we know and love\n\nand that I struggle with when I'm working with customers I even had an engagement with a with a customer and because it was uh I think it was I remember the the big consulting company I was working with and I was doing a short engagement like a day's worth of work and they couldn't figure out how to pay me their procurement processes so I basically handed me a stack of cash because they just couldn't figure out it wasn't worth the effort of going through the process I didn't get training engagement at Royal Bank of Scotland in Edinburgh because they couldn't get the procurement process done in time it was just not possible yes that seems to be the way things are and a lot of our larger organisations with a little bureaucracy bureaucracy comes with these different departments and separating people into that work so if we fast forward again to the current modern times and this stuff was applied to software development and it didn't work out so well\n\nexpediency is that off but I've got an interesting article so um the largest organization in the world with the most employees in the world as realized they made a mistake this particular organization and as 2.8 million employees largest employer and a 739 billion dollar budget they are in fact the Department of Defense in the US and they have realized that they've created this monster that is the sequential working process and it's gone through all companies are in the world so in\n\n2010 they brought in a bunch of agile folks so I believe I believe Jeff Sutherland was there Kent Beck was there a few other folks I don't know what everybody that was involved and they got together to rewrite how can we change our procurement rules to take advantage of these new thinking and new ways so they pulled it all together and and the new procurement rules which mandated short iterative cycles of delivered value to to the customer which is on the defense at went live in 2013 but as you can imagine and now that the procurement rules have been changed\n\nagile then becomes a buzzword of software development and therefore all projects now declare themselves to be agile and so the department events created this document called detecting add ups that is for their procurement officers to really understand what it what it is they're looking for in a vendor when a vendor says they're agile how do you know they're telling the truth how\n\nyou know\n\nI so I have here and some questions for you this is a small number of questions and I usually do this in a large auditorium so I usually get everybody to stand up I'm gonna stick to questions and after each question if your answer is no then you should sit down obviously you do it metaphorically so the first question our team's delivering working software to at least some subset of real users every iteration including the first and gathering feedback I'm gonna clarify real users real users does not mean you a t-bill users does not mean attack\n\nusers means people using your software in a production environment real users means\n\nif you aren't doing that and you're not you're not agile and that's step one are you doing this\n\ngetting real feedback and otherwise there's no agility there second question is there a product charter that lays out the strategic goals of your project and do all members of the team understand what they are and how\n\nhow the work they do contrary\n\nand if not then you're not doing agile I would recommend a book called turn this ship around by David Marquette talks about pushing responsibility down the organization helping everybody understand at what the goals directives are so that they can make better decisions and stop telling people what to do\n\nthat's this next one our team's empowered to change their process based on what they learn and they can they change their iteration pace can they change what they do their review perspectives can they choose to do scrum can they choose to do a Kanban can they choose to do something else and all of those things need to be true otherwise and agile again oh three more questions that was number three is feedback from users turned into concrete work items for Sprint teams on timelines shorter than a month\n\nI need to get feedback from those users that in the first one we delivered our real software - and we get feedback from them and we update the product backlog we bring that information our planning of the of the future on timescales shorter than one mark if not then unfortunately we're still not doing agile our team is empowered to change requirements based on user feedback this can be a real problem in bureaucratic organizations that have a separation or still have a separation between contracts sales and engineer\n\nshouldn't be that separation to this type of thing you have are a concrete thing signed off by somebody who doesn't really understand the interest in actually building stuff you go to build stuff you get in front of users user needs a change wants something different what you're working on is not quite right we need to be able to make those changes and if not then yep you guessed it we're not doing edge and the last one I think is or is that the second M is the full ecosystem of your project agile agile programming teams followed by linear bureaucratic deployments\n\nealier ultimately there should be no human interaction between a developer committing a line of code and getting into production if you're going to have human interaction it should be limited to the clicking of an approval button or some kind of sign-off process it should not be any script any deployments any reading server setting up that none of those things\n\nand if you can't say yes to all of those questions then you're probably not it\n\nand Ross that line into the world and those are those are hard lines to cross and this example is from the Department of Defense in the u.s. they apply this now for both hardware and software so if you're building a new guided missile for the Department of Defense\n\nall of these things need to be true order for you\n\nwhen that procurement and I think that's that's hard I don't think they're definitely not there yet that's why they're doing this\n\nthis article in order to encourage people to move a little bit faster and do those things but ultimately by improving our processes and practices by getting quicker at delivering by using those feedback loops and large projects can get up to 600 percent more more success and more likely to be successful not numbers smaller for small projects because the risk is less they're usually closer to the customer is easier to have a discussion and change what you're doing in a small project but in large projects that can be incredibly difficult there's a lot of legacy code a lot of legacy ideas legacy procedures and practices and that that can be difficult now I would encourage you to look at other folks processes and see the way they do it\n\nI like the largest company I know of to have actually made a successful agile transformation our agile evolution or start their agile evolution is Microsoft they've made a lot of changes in the last eight years they moved to continuous delivery and are doing all of those things but don't just look at somebody else's process and try and rubber stamp it onto your own and there are many practices out there they're safe the Spotify model I always find the Spotify model I'm using because of the article was a point in time\n\ndon't do this here's what we're doing now and the Spotify is not doing what it describes in that article anymore\n\nthey've moved on from there and these are maybe our starting point a place to glean some ideas but make sure you have the ability to create dynamic\n\ncreate and manage your process and and I'll leave you with a lovely mammal or a statement from the US Air Force this is a clarifying statement about a mammal and it says if you read the top underlined and highly discuss\n\ndiscouraged from using rigid prescriptive frameworks such as scaled agile framework and safe framework and in an effort to move towards a DevOps and a more dev cell cops whatever you want to call it DevOps and agility and things like safe and any prescriptive model is potentially harmful to your ability to innovate potentially harmful to your ability to change and it's not used by successful software commercial organizations should be an indicator as I would say that the art of simplicity is a puzzle of complexity we have to try and make things as simple as possible\n\ndo that over time well thanks for watching hopefully you enjoyed beam I'm hoping the silent problem was a little limited to a particular time frame and if not I will have to look at and I managed that\n\nvery much"
  },
  {
    "Title": "Mastering Azure DevOps Migration Tools: Your Ultimate Guide to Seamless Migrations",
    "Description": "Learn how to use Azure DevOps Migration Tools for efficient, large-scale migrations, including setup, configuration, best practices, and community support for troubleshooting.",
    "ResourceId": "RCJsST0xBCE",
    "Url": "https://www.youtube.com/watch?v=RCJsST0xBCE",
    "Date": "2019-10-17T19:16:03Z",
    "Captions": "my name is Martin Henshaw wit and I created the azure DevOps migration tools you can find them on the visual studio marketplace if you search under Azure DevOps you will find the tools we're actually up to about 50,000 migrations just over 50,000 migrations migration sessions per month this in the last 30 days we've migrated 340 thousand work items with 2.6 million revisions using the tool so that's that's pretty pretty huge I do want to stress the warning that you can see here on the page the tool is not designed for novices it is developed by and far as your DevOps consultants who have helped lots of folks do migrations around the world and you're welcome to have a have a go this video is going to try and explain how to get started with the tool we've updated it a lot in the last year in fact two years since the last video we've merged a lot of the different tools together as well as enabled syncing for for work item migrations so if you do a migration and then somebody happens to have changed a bunch of work items in the old system between you starting the migration and finishing you can have it go and pull those additional changes across as well so it's kind of pseudo syncing it's not syncing between two systems but syncing from one system to the other system I get a lot of questions around what versions of azure DevOps does it support and everything that the object model API does so that's TFS 2013 plus it does mostly work against older versions of TF but the official support is TFS 2013 and onwards all the way up as your DevOps and yes you can go from Azure DevOps to as your DevOps as your DevOps to TFS TFS to your DevOps pretty much whatever you want and so let me pop over there's a documentation available on github and it has a lot more detail on how the Tool Works so if you click through to the documentation and you will go to this page and I know and here you'll see detailed documentation about what the processors that are available are and the processors are the thing that does the work so the node structures migration processor will move your areas and iterations across the work item migration context will migrate your work items links revisions attachments and hopefully if we can get it organized it's not working right now the HTML field embedded images as well and it will also fix the git commits as a number of other and tools that are available at work item delete this is deliberately crippled so that you don't accidentally delete a whole bunch of stuff you will meet the code to be able to run this one but you can delete any number of work items and an update ur so instead of migration from one system to another if you just want to run a bunch of changes against an existing project then you can do that so for example you might have an added a new field and you want to migrate data from one field to another field or you might want to split data from one field into two fields that's so that work item update will allow you to run against an existing project work item query migrator well obviously migrate your queries across so it will take them just need to make sure that it will skip any queries where the fields don't match up so you need to be aware of that the fields in the new location need to match and the fields in the old location otherwise it with error right there is also a a migrator for the teams I think it's actually not on this list yet but it will migrate the create teams and migrate all of the settings for those teams across or as much as possible at the moment there are a bunch of tools around migrating at test cases and so sweets and plans you have to migrate the variables first then the configurations and then you run our plans and sweets at migration which will pull that across so you do not migrate test cases using this tool you have to use the work item migration context to migrate the test cases but do not migrate the test plans and test Suites work items across at the same time otherwise you'll end up with a bunch of duplicate items that's about it for the general processors we have a number of field Maps I did mention that if you're either working against a single team project your migration for one to another you may want to use some field maps and this is good if your source and target projects have different processes you may want to use this or if you're updating changing the process and an existing project and you want to map data from one field to another and so there's just a field to field map and field to field multi map so it's a list if you've got a field or a list in it it'll map data from one to another field marriage and put two fields together in a particular format blanket so you don't want to migrate a particular field that field to tag that's you can convert any number of fields from your source system to tags in your target system that's good for a bunch of fields that are not available in a target system you don't want to add them to the target system and for example if you're simplifying a process you can run the field tag to save some of that data while not adding to the Lord of a number of fields field value map so that's just a value mapper and then we've filled value to tag so if there's a set of values you can have them two tags a reg X field mapper so that's pretty useful for example I got this for a customer who had their version format in 2016 - in a text field and they wanted to set it in a drop-down list one with 16 in the other one with the two and so the reg X field map will let you do that and then for many organizations that have been in TFS for a long time they have a problem where all of their area paths their area tree hierarchy is reflective of their product or organizational hierarchy rather than the team's hierarchy which is how the new system prefers things to work you don't have to do that would prefer things to work so if you want to map all of that tree into tags so we'll take each node and build a tag and attach it to the work items and you can do that so it'll map area paths to tags so if you had an idea path that was seven deep you would end up with seven tags one for each of the things just allows your way to categorize that and save that work I note that we don't migrate any code using this tool there are no good options for TFB C team foundation version control the original TFS version control system and there is the TFS integration tools which is not supported there's a number of other tools out there as well and I would recommend doing the using git TFS a tool to migrate your TF BC code into M git repos that's what I would recommend get out of TF BC moving to get get is really easy to migrate you just clone the repo from the source location and push it to the target location that it just works out of the box and we do I did mention earlier that those are while we are processing work items if the git repo has been moved across first then the tool will it fix up the the git commit links on the fly so in as your DevOps and TFS you can link from I get commit to a work item by tagging it so hash 1:21 will link work quite work item 1:21 and and you can link to pull requests so your pull request links will disappear because we can't migrate pull requests but your git commit links will be fixed on the work item site so it will not be fixed in the comment of the commit because it's it's a totally different exercise to go to go do that but when the work item is created and the links are added and it will go and see if it can find the git repo in the new location if it can find the get repo in the new location it will fix your link so that it points to the right commit and I note that there is a way in the tool to map and your get repos if you've renamed them and if they're the same name then that's super easy you don't need to do any any mapping and it will just find it and you can run this and after using the fixed commit a fixed git commit obsolete processor so you can run it on its own and but it's better to run it as part of the whole thing builds and releases don't get migrated automatically and you will need to export and import each of your builds each of your releases and and then all of the secrets that are part of that will need to be read and that's just an exercise in going through them all and doing that there's not a good way to do that I if you are open to working on that you could very easily build a processor that could do that we just haven't had the occasion to do that yet I know aren't contributing we are happy to take any contributions that you have as long as they're relevant for everybody rather than just for your organization and there is no official support for the azure DevOps migration tools apart from community support because this is an open source project and I am happy to help folks out if they're having trouble and if you have significant trouble and then that may be something that's more related to a consulting engagement rather than just at me pointing out where where where the configuration needs to be customized and ultimately if it's gonna take me an hour to solve the problem then I'm good maybe help you right and if it's going to take three days to solve the problem then we might like to have a conversation and there are other contributors to the project who are also happy to help there are many conf users we've had over 40 contributors go look up any contributor you want have them help you out we're going to add some more recommendations here so that you've got somewhere to start and I'm definitely got two more folks that are going to end up on that list very very quickly so let me jump into how you use and interact for the tool the first thing I recommend and I do a lot of migrations between Azure DevOps and Azure DevOps and that's mainly for customers that have sold part of their organization or and they want to merge many team projects into one project or they want to split a project into more than one project that's that works as well so the easiest way to do that is to run the tool on a machine that has access to both environments you want to migrate to so I don't generally recommend running it on your local machine mainly because your local machine gets turned off at the end of the day and you want to go home and migrations might take a lot longer than that so I recommend and especially if all of your target and source environments are in Azure that you create in Azure and a dev test lab and the reason I suggest the dev test lab is because it can automatically turn the machines off and on as needed so I'm just gonna create a new dev test lab so create that so I'm going to leave auto shutdown enabled you want to use the location and of your both hopefully both your source on the target are in the same location and if not I recommend creating this in the same data center as your target environment because we're going to be doing a lot more communicating with the target environment than we are with the source environment because we just load all the work items and then run against the target and so in order to see where that is if you open up your organization go to organization settings and you will see on the overview page the region and this one is in West Europe so I'm going to create that in West Europe which is my default because that's where I am right now I'm gonna create that okay okay once your azure DevOps that lab has been created you need to create a machine inside that a virtual machine I'm going to add a virtual machine and I've had a lot of trouble with the Windows 10 versions of if so if I type in I've had a lot of problems with the the on Windows 10 at once they basically had not been starting I don't know if that's fixed so I'm not gonna do that just now so I'm just gonna pick Visual Studio to a nineteen enterprise on Windows Server 2019 so I migration I'm just gonna put in a password well I can do that have to look for that later so let me copy that into notepad so I don't have to show you all of my passwords there we go you are quite welcome to steal back because I woke up deleted this machine at the end of the video I'm not gonna use the standard e3 because it is tiny I'm gonna map that too and I want at least four processors there's four processors 16 Giga RAM so a d4 sp3 I'm generally I have the auto off set true so that at the end of every every day like maybe 7 o'clock every day the machine turns off and shuts down when I do the actual migration I'll turn that off and then I'll go turn it back on again and after the migration is completed so I'm gonna use premium SSDs as well so this would be an expensive machine if it was running for a long period of time and I'm not gonna setup any of this because sometimes it doesn't work so well and I'm going to create that machine okay so once your machine has been created and it's running we just need to log into it so let me do that there's my password that we set up yes okay so now that we are into the machine and I will still give it a few seconds before I try and start clicking stuff for it to get organized no we do not want it to be discoverable thank you very much it will start a bunch of default stuff that I'm not really that interested in let me get rid of that there we go okay so I have visual studio I have all the bits I need installed unfortunately I have to use IE because it is server so the first thing I want to do is I need to install the tool from chocolaty whatever's so first thing I'm going to do is install chocolaty this is very easy to do copy the script open PowerShell in admin mode oh well that's paste in my password there we go yes although access now I've got it and that will install chocolaty on my machine chocolate is a package manager so it's basically going to handle the install and uninstall of the tools so that's it all set up so if I validate that it's working there we go so working okay so now if I go back to the first page so in order to install our tools there's your DevOps migration tools we just need to type yes yes always all artists into the clan line and that will go and download the bits needed to install it including any dependencies which there shouldn't actually be any dependencies which is pretty good because we're running on a machine with fields to do installed there we go it's all been installed so now you will find in your C Drive there's a tools folder in that tools folder there's a VST s sync migration folder so if I go in there you'll see there's loads of files but the main one is the migration dot exe so we're gonna call migration DXE in order to set this all up so let me kill ye because we don't need to IE anymore let me show you what's going on and then we'll move some stuff to a folder that makes it easier for us to see so tools migration and does a lot of a lot of stuff in there the first thing we need to do is create a template at migration file so if you run there we go oh let's go one back migration exe and we type in it it will create a simple work item tracking based file so if I go up here I may need to refresh configuration here so let me let's open a new folder and pop that just onto the temporary storage there we go you there we go so we have our JSON file there now this file is just work items so if I just do top work films here we go and we can take a look at the conflict file and see what is what so this is the first time visual studio has been started on this machine so it may take a minute or so I guess while we're waiting I can open a notepad and we can take a look while it's loading so what I've done is I've created our default file I'm gonna go through some of the options in the files so that you can um see what is in here now maybe later you like the dark theme okay that's the first thing is it has a version this matches the version of the to at least the first two digits of the version and its purpose is to make sure we don't accidentally run a car an old con fake against the new version of the tool and see if there's a new version of the tool and it changes a major version check for any different season maybe update this the two will not run if you're using an older version of the config file but it might just be a case of changing not three four four and then everything's good ah telemetry trace is by default set to false really don't don't turn this on this can be used for some debug scenarios and it will push all of the telemetry out to application insights so you don't want to do that by default and the the base set of metrics are sent to a pin sites so we'll say how many work items have been processed how long they're taking exceptions those kind of things are passed to up insights if you enable the trace then every thing that you see going past on the command line screen will also be sent to a pin site so you don't want to do that unless you you're working with one of the consultants who has access to app insights and you want to UM have a have a discussion around some of the telemetry or try something push some things out ah this was a workaround for the azure DevOps team breaking the api's should by default we set to false we just haven't removed it yet and then the two really important things are the source and the target so source and target both are the same format and you've got the collection so what is the URL of the collection that you're connecting to so that could be the TFS connection URL or the azure DevOps connection URL or the name of the project inside of that it goes under name and the reflected work item ID field name is the name of the field that you've added to that project into the process where we're going to store the reflective work item ID now if it's TFS you get to set the whole thing if it says your dev ops when you create a new field you only get to set this bit on the end and it used to be if you've added this to an older process it will be processed name dot and but if you go add one just now to Azure DevOps it will be custom don't um I don't know why they changed it or how that's meant to be documented but it just is you can use there is a tool to export processes that you can use even the the inherited processes you can export that and then go look at what the fields been called but generally it's one of those two things it's either whatever you've said it as if you're in TFS if you have an XML process in your DevOps then it will be the same and if you have an inherited process and it's an old process then it might be called my process name dot reflected work item ID if not it's if it's newer it's just custom oh so you may just need there's only three possibilities so you could just do trial and error and the tool will check to make sure that what you've typed in there is valid so that's pretty good the field maps is empty you don't need to add any field maps by default the tool will map same field name to same field name or same field ref to same field ref if you want to change any of the data on the fly on the way across then you would need to setup field maps but this is just the easy setup and work item type definition now does not need to contain anything it can be empty but if you have for example in the source if you're using user story and in the target you're using for a backlog item then you would fill those differences out in here otherwise it will just process and all the existing ones and I mentioned before the the git repo mapping so if you need to map get people names from old name to new name a new location then that would be in here as well again in this case it is null so then we come to the processors there are two processors oh let's go to the color coded version now we get to the processors and there are two processors set up here for us to see the first one is the node structure migration config this will migrate your areas and iteration paths across you can set base paths if you want to filter that but please note that if you try and save a work item when you're doing the work item migration to an idiopathic not exist there will be an error generated and the thing will bomb out the area paths need to exist so what I normally do is just set this to empty you don't need to have any base paths at all and it will just migrate all of your work items if there are no bats all of your area and iteration passes there are no base paths present there is one feature on here and actually needs to be consistent across all of the processors that you run if you're going to use it and that's prefix project two nodes which means that it is going to if you had a team project one and you were migrating it into team project to and you wanted team project two to have an area path of team project one with all of the team project one area paths underneath it then it would do that this is a feature for if you're merging team projects so if I have team project one two three and four that are all merging into team project five team project five will have root area paths of team project one two three and four under that of the work items all the data and so that you're not just merging it together into a big mess and you can take some action afterwards to clean it up and figure out what are those dupes and all that kind of thing generally you want their set to OFF unless you're doing a team project marriage and even then you need to make that choice all right so this one needs nord structures needs to be run first in order to have that work you've then got a work item migration config the work item migration config that sets up the migration for the work items processors are set to false by default so nothing will happen if you run it I generally run them one at a time to make sure everything's good so you can set that enabled to true and and then there's a number of things that you might want to have so first off you've got the prefix project two nodes again set to false it must be consistent across the project you've got so got the update created date and they created by in most cases this should be set to true which is why that's the default and if you're having a problem because you are a particular version of TFS that does not allow you to edit the created date or created by you can turn these to false update source reflected ID it should be set to false it's set to true or a little fix that the default should be false this will actually also go and edit the source work item with the reflected work item ID of the new location we're doing away with this feature because there's no point in editing the the source if there's another way to do it and I figured out another way to do it if you're replaying revisions you do not need build field table so if you're just doing a tip migration then you want to set this to true and it will build a field of all build a table of all the existing fields in the source work item and save it into the comments of the new york item so that you can at least go and search for any old data that might not have been migrated across into fields and then there's a signature which you can set to or false we'll probably get rid of this but it's set to false just now so that brings us to the replay revisions replay revisions will either replay each of the changes made to a work item if it's set to true or it will just take the latest tip of the work item if set to false if you're doing a sync ie there's been changes made since the last revision change and it actually filters the list based on and the exact date time of the save so you'll have maybe ten revisions and the first thing as it does is it looks at the target work item and takes out all of the identical updated dates and times out of the the list and then picks the top one if we play revisions are set to false and we plays them if it's set to true so that's just that's how that part works and the way it knows which work items the Lord is you have a query bit and generally you can't have more than 20,000 work items as the result of a query so you may need to stage this if you have more than 20,000 work items and you never want to migrate test Suites and plants there may be other work item types that you don't want to migrate so you can add them to that not enlist and what I generally do is I focus the initial migration on the open work items so the ones where closed date is not set to anything and then I will rerun it again with the opposite being true with cause date populated to fill out all the the closed items that way people can move over and start working in the new system and everything's hunky-dory and there's the order bit from the query I usually do change date and so that it goes from latest change date to oldest so the most recently touched work items are updated first and then it gets into the past where it's less likely to cause a problem and then while it's migrating each work item there are a number of features that one is the link migrator but by default should be true and this will attempt to add all of the existing links so it's going to add all of the different link types apart from pull request links because we can't migrate pull requests and this will migrate all of the attachments you can you will need to pass it a temporary folder for the working path where it's going to download and upload the attachments the default should suffice on 99% of systems it will clean up itself afterwards there may be some things left over when it can't delete folders because files are still in use but it will generally clean up after itself and then the fix HTML attachment that links is for in HTML fields you can paste an image that image has an absolute path to the file and that will not work in the new system when the old system was offline unfortunately that's not working just now we have some authentication issues with that but what it's supposed to do is pool basically download each of the attachments add it as an attachment to the work items you'll have extra attachments and then insert the the replace they let fix the links for you again it doesn't doesn't work just now we've got authentication issues with that communication we'll get it fixed at some point there's a number of people who are who are looking at that you occasionally get errors just communicating towards your DevOps and if you're migrating 30,000 work items with a hundred revisions each and a bunch of attachments and links you're going to be hitting the usurer DevOps API is pretty heavily you're probably going to get slowed down and occasionally that system will glitch it's on the Internet it could be for any reason between your environments and so there's a reach automatic retry and it will wait if it gets our 503 which is a server unavailable exception it will wait for one second then retry then wait for two seconds and retry all the way up to 5 seconds and then retry and if it fills out the fifth attempt it the tool will stop cool so that's what it is i don't recommend making that number that much higher but if you said 215 the last one will be waiting 15 seconds and then we trying as well this is a really important one filter work items that already exist in the target there is a mutually exclusive nature here that I need to mention so what it will do is it using the same query bit okay it's going to load the source work items load the target work items and remove any target work items from the source list that already exists and so if you're trying to sync things that have been changed that are newer that will not work because it will filter them all out because they already exist by default you want this set to true because if you're migrating 30,000 work items and it got cheese after 5,000 you don't want to skip or have to Lord and skip over each of those 5,000 work items so that will filter those out and so I recommend getting a full run with this enabled and then using a date based query so see if your close date and I would do a full migration and then do cheat me spell it right change date and have that set to greater than date of migration so let's say it was 2019 1016 because we start the migration yesterday it's finished and now I want to rerun anything that was changed after we started the migration and you would need to start with the date of the migration because you can't put tines in there and that that will work super awesome and then it will just go and pull the 300 work items that were changed yesterday and today and Rioch date them and but you would need to change this to false so that you can migrate and it will skip anything that doesn't need any changes but it will need to do a bunch of stuff around that which is why you want this generally set true okay that was a brief overview of the azure DevOps migration tools let me know if you have any issues on github create an issue on github and somebody will help you"
  },
  {
    "Title": "Mastering VSTS Sync Migration Tools: Your Ultimate Guide to Seamless TFS to VSTS Transitions",
    "Description": "Learn how to use VSTS sync migration tools for flexible, selective TFS to VSTS migrations, including setup, configuration, field mapping, and community support.",
    "ResourceId": "ZxDktQae10M",
    "Url": "https://www.youtube.com/watch?v=ZxDktQae10M",
    "Date": "2017-12-30T18:57:40Z",
    "Captions": "My name is Martin. I work for a company called Naked Agility in Scotland doing digital transformations, DevOps, agile with lots of customers. I want to talk a little bit about the VSTS sync migration tools, but the first thing I want to mention is that there are more than one option for migrating from TFS to VSTS. If you want to take your entire collection, so you want to migrate your entire organization from TFS to VSTS, then the primary option you should be considering is the VSTS migration services from Microsoft.\n\nThis tool is a full fidelity service. If you go to the URL at the bottom of the screen, you will be able to see the caveats for what they do, but they basically take your entire database, your collection, and import it into VSTS. This means that you will have a little bit of downtime depending on the size of your collection. I've done small collections from, I don't know, 50 gig, 58 collection that took a couple of hours to do the migration, and I've also done a two terabyte, two and a half terabyte collections which took 40 odd hours to do the migration. The bigger the data, the more complicated it is moving that amount of data around because you have to get it up onto Azure, and then Microsoft have to pull from that location into their service which then processes your data into VSTS. But it is as close to full fidelity as you will get, and Microsoft are working to make that full fidelity migration as powerful as possible. So if you have an option, take the VSTS migration services option. That is your primary go-to.\n\nIf, however, you have a different scenario, maybe you don't want to move your entire collection just now. You only want to move a few team projects up to VSTS, or you have five projects in TFS and you want to end up with one team project in VSTS, or you have one project in TFS and you want to end up with five in VSTS, then the VSTS migration service from Microsoft is not going to be able to fill that need. That's one of the reasons that I created the VSTS sync migration tools. It's scoped by query, so basically if you can query it, there are certain things that are the bounds of the team project. We'll talk about those as we go through, but it's generally scoped by query, and it is not even close to full fidelity.\n\nI've written a bunch of processors. I've had help from many contributors to the project to add additional processors that are importing data from one TFS/VSTS location to another. Because the tools don't really care where your data is and where it's going to, you can do TFS to VSTS, TFS to VSTS, VSTS to TFS, you can split team projects, you can merge team projects, you can pull a subset of the data out of one and push it into another. You can do bulk updates; you can do all sorts of things. I have done bulk updates where the customer wanted to migrate from the agile template in TFS to the scrum template in TFS. So one of the tools that I used to do that was this one with the bulk update. I have a bulk update processor in there, and you can give it a bunch of field mappings, and it allows you to process the data from one format into another format in place on your TFS server. So you can basically migrate process templates; you can do all sorts of things. It's a pretty versatile toolset.\n\nUnfortunately, with a versatile toolset comes a lot of complexity, hence there's been a lot of asks from users of the system for maybe a little bit of an intro walkthrough to figure out how to move this through. So just a word on support for these tools: who supports them? Well, ultimately I do mostly, but there are a bunch of Microsoft MVPs that are part of the community. Some other TFS/VSTS consultants out there have been contributing, and then just people who are interesting, people who have that problem to solve. If you're in a company and you've been told to go figure out how to move this data from one place to another, you might end up with my tool, and you're going to figure out how to use it.\n\nWe are currently on, we've had 133 releases of our product, so we are on a continuous delivery pipeline. So basically that might be five releases in a week, or it might be five releases in a month, or it might be no releases in a month. It depends on what changes people are making, what pull requests they're submitting. The source code is all in VSTS, so we build the product in VSTS. So source code, build, release, all of those things are there. However, we mirror that code to GitHub in an automated process, so we accept pull requests from both locations. If you're a trusted contributor, we might give you the keys to the VSTS team project, and that's a smaller number of contributors in there, but we've had 54 pull requests inside of VSTS. We also take general public non-trustee contributions, and if you make a number of submissions on GitHub and we like your code, maybe we'll make you a contributor in VSTS. But at the moment, we have 12 people who have contributed reasonably regularly to the project, and you can find all of that information on GitHub apart from the VSTS specific stuff. But we publish all of our releases to GitHub and to Chocolatey, so I'll show you how that works.\n\nSo I'm going to do a quick run-through. I want to show you how to find the tools, how to install the tools, just a quick overview of how to run the tools and how to get some kind of meaningful execution. \n\nOkay, so first, how do we find the tools? Well, the first thing you're going to do is you're going to search for VSTS migration, and your first result is always going to be the Microsoft full fidelity migration. That's the one you want to use if you can. But if I put tools on the end, you'll see that VSTS migration tools pulls up the VSTS sync migration tool on the Visual Studio Marketplace. So you can go in there and you can get some basic information about the tool. There's links to some documentation, some external review information, links into the GitHub repo, and what version we're currently on.\n\nSo there's some pretty useful things there, and to get started at the top there, it will actually take you through to the Git repo which actually has some of the same information. But if you want to get the tools, the recommended installation is from Chocolatey. \n\nOkay, so there's been over 3,000 downloads on Chocolatey. This is by far the most common way to install it, and we push out the bits automatically here, and so you can dynamically update your install pretty quickly when new releases go out. \n\nSo let me first... okay, so once you have a PowerShell window up, you want to go to the home page of chocolatey.org, and you can click the Install Now button, and you'll see there are a number of different ways to install it. We're going to install it with PowerShell, so we need to run this little command here. \n\nSo I'm just going to copy it, right-click, and run that command. Now what that's going to do is it's going to go and get the Chocolatey bits and install Chocolatey on your machine. Chocolatey is just a tool for installing packages, so it's kind of like a package management system built around PowerShell. So it allows you to install any of the things that are on Chocolatey with a simple command line. This is just a simple tool that allows us to do that.\n\nOkay, so I'm going to close that window. I'm going to go back to our sync migrator. There we go, we've got our sync migrator. So in order to install, never get Chocolatey installed, I'm going to open our PowerShell window, and this time I'm going to run choco install VSTS sync migrator. \n\nOkay, so now that it's installed on your C drive, you'll have a tools folder, and inside the tools folder, you'll have a VSTS sync migration folder that has all of the bits and bobs, mostly their TFS DLLs for allowing us to call into the TFS system. You can see there's a single executable in there called VSTS sync migrator. That's what we're going to be calling to do all of our bits and bobs.\n\nOkay, now that we have the tools installed, I'm going to open a command prompt, and we're going to navigate to the VSTS migration folder. When we run the tool, you can see it pumps out a little bit of info. You've got the version of the product. Essentials is going to check and make sure that you have the latest version with our telemetry. Via telemetry is enabled, your session ID. So this session ID is super useful if you're submitting a problem with the tool. If you give me the session ID, I'm able to look up some of the telemetry and find the exceptions and maybe figure out what the problem was. \n\nAnd there you can see the full version number of the product as well, branch it came from, the hash, everything's all there. And since we ran this with no very selected, so no init execute or anything, then it just output the default output. So what you can do is you can run init, and what that has done is it has created the default JSON file that you'll see in the documentation. \n\nSo if I go back to that folder, there it is, the VSTS bulk editor JSON. I'm going to open the JSON file, and you'll find it's all in one line. Luckily, I'm using Visual Studio Code, so if you hold down shift and alt and press F, it will format it into a nicely formatted loop. There we go. So this is the config file that you're going to feed the tool in the execute command that will tell it all of the things that it's supposed to do. \n\nNow this is the default JSON. You don't want to run the default JSON. This has all of the options for all of the features that are in here, and you want to pick and choose which features make the most sense. So let's go through a couple of the things. Some of the processors just need a source, and some of them need both the source and the target. So this is the where's my stuff, the collection and team project name, collection and team project name. So obviously they should be different. If you just need the source, then it doesn't matter, but if you need both, then that makes sense. \n\nYou've also got this reflected work item ID field name. This is something that we inherited from the old migration tools that the Rangers supported. One of the reasons we use it is it allows us to, if that field exists in your target team project in the process template, we will update that with the location. So the full URL project and ID of the work item from the old server. This allows us to parse off when we're running through other processors and figure out where things came from, and then we can do additional work on that. \n\nYou can also have an update the source work item with where that work item went, but that slows down the system. It makes sense if you've got hundreds of thousands of work items and you want to skip over ones you've already done because even just the act of skipping over, because all we found it, it takes too long. So that's the purpose of that. \n\nAnd then we have a number of field maps. So there's a number of different field mapping tools. There's one instance of each of the field maps in here, but you can actually have multiple instances with multiple configurations. So basically you've been an object type. So this is the multi-value conditional map at config. So you have what work item types applies to. You can just put star and that place them all, and then the source field one and field two, and in the target fields, each of them have different capabilities. They're all listed on the documentation. \n\nRoughly it takes a little bit to get used to what options we've got. Each of them have been built to solve a particular problem, so it might, the one that you want, a problem you want to solve might not be one that we've solved before. These tools are built ad hoc to solve those particular problems. \n\nSo field, we'll make a field empty, so you put in the field ref name that you want to blank, and it will empty that field of data as it goes through processing items, and we'll talk about how that happens afterwards. \n\nWe've got the field value map, so you basically have a source field and a target field. So for example, if you're moving from state in the old work item to state in the new work item, you might have a mapping from this looks like a mapping from scrum to agile. So approved converts to new, new approves, new committed moves to active, in progress gets mapped to active, those kind of things as you go through. \n\nThere's a field to field mapping, so I just want to push the data from backlog priority into stack rank. Super straightforward, and you can do that with as many fields as you like. You can run these as many times as you like. A field to tag map, and so if you're not going to have a field from the old work item in the new work item type, maybe you want to convert it to a state, and it supports regular, well, kind of regular expression, a format expression to map that detail. \n\nSo this is going to take whatever the state is, and if you place this mapper before the state field value map, it will take the old value, make it our tag, scrum state call on state name, and then you can easily find things that were in the old state, make sure everything's mapped up. Maybe you have some queries that you don't know how to do in a new system, and you can map it to the old one.\n\nOkay, our field merit map. So this takes two fields, field one and field two, and maps them together. So for example, in the agile template, you don't have acceptance criteria, but in the scrum template, you have description and acceptance criteria. So maybe we want to take the target field being description, and we're going to map her in with description and then acceptance criteria. So zero and one, we're going to map and enter the same field. \n\nSounds pretty cool. And then you've got the RegEx field maps, or we're going to look at the source field. So there's release, this particular reason I created this was the release was a bunch of numbers, so a version number of a product, but in the new template, they had a major and minor as separate fields. So this looks for a pattern and then replaces the value. You can run that as many times as you want to pull out different values. \n\nSo yes, you're running the RegEx multiple times, but it's a way to do that. Field value to tag map, I think that's field to tag map, field value to tag map. So you can see stars field blocked if the pattern is yes. So if blocked is marked as yes, then put blocked in the resultant field, the target field. \n\nTree to tag map, so if you're in your old team project, if you have a really horrible idea path hierarchy because it's been a free-for-all in there, maybe you want to maintain some of that information. So this will actually convert each of the nodes in the tree to a tag, and it'll say which one, how many to skip. So maybe you skipped the first three because you're going to keep the first three in the next system, and then everything else becomes a tag. \n\nSo there are the instances of the types of field maps that we have in there, so you can configure them any way you like, you know, as many as you like. The order does matter; they're executed in the order they're listed in the file, so have at that. \n\nWe then have a little work item type definition. This allows you to decide what work items map to other work items. So here we've just got bug to bug and product backlog item to product backlog item, but maybe you have product backlog item to user story, and the system knows to create a new user story when you have a product backlog item in the source and user story in the target, and that allows you to do a live migration. I prefer in-place migration, so I actually quite rarely use that capability.\n\nSo there's two types of processing. You can go into the data in place or as you're moving from one system to another, and that brings us to the processors. There's quite a number of processors. I'm not going to go through them all. I'm just going to go through the rough types. We're going to talk about the individual processors in a little bit, but here you've got this is the work item migration config. It has a number of options. For example, if I want to prefix the project to the nodes, so let's say I'm merging two team projects, team project one and team project two, and I'm putting them into team project three. If I prefix project to nodes, the new area paths will have the team project in the name. That kind of makes sense, so it will be project three slash project one slash whatever the old layout was.\n\nNow there's a little bit of our, these things have an order that they have to be run in, which is super important. If you just run it as is, this is going to fail. That's kind of a good thing because if you don't know what you're doing, it's probably going to make things worse. But prefix project, update creating date and update created by. If your source has not been modified since, and you like by yourself, then maybe you want to update the created date and created by, fill that into the new fields, and then update the source reflected ID. Do you want to back update the source system with the new reflected ID of the work items? So you can do that, and then you can also filter this query. By default, it filters quite a lot. You can modify this query to support whatever you want. At the moment, it's filtering only work items that are open and only work items that have not got the reflected work item ID already filled out, and then they're in these work item types: shared steps, shared parameters, test cases, requirements, tasks, user stories, bugs. \n\nIt's super important that you do not migrate test plans and test suites. Do not migrate them. It's not worth it. They're completely worthless items. You cannot map them up again later. Do a full fidelity migration with Microsoft's service if you want everything the same way. This has specific ramifications, and this migrates work items without history, with history. So a revision replay, it replays it to the revisions. It's not really the same history; it's just each work item with each revision, so the timing doesn't always match up. \n\nAnd then a work item update allows you to update work items in place, so it doesn't use the target; it just uses the source and lets you update a bunch of work items in place. Okay, they're the main processors. They're the main things going on. I'm going to mention all the other ones and how they work. They each have their own quirks. Not all of them were built by the same people, but you take this config and we go back to our command line and we run execute, and execute with -config, and we put our C tools, the VSTS sync migration, the VSTS bulk editor JSON. We run that, and it will run the configuration that we've got. Do not run the default configuration first off; it will fail. That's a good thing, and you need to go through it and figure out what it is that you're doing.\n\nCool. \n\nOkay, so we talked about how to find the tools, install the tools, running the tools, and a kind of overview of the execution and the execution flow in there. \n\nOkay, so there are processors for work items. The order is important here. You have to run the node structures migration context first. That will create all of your areas and iteration paths, and that appending the team project name needs to be the same between node structures and the work item migration. If they're not the same, it's going to fail because when you do the work item migration, the area and iteration paths are not going to exist, and you can't save a work item to area and iteration paths that don't exist. It's just the way VSTS and TFS work. \n\nSo run the node structures first; it will create them, then run at one of the migration contexts. So there's work item migration, and there's work item revision. There's also the work item update, which only takes the source, but migration will move it without history. Revision replay will obviously replay the revisions as it goes through. The reason those two is somebody else added it, and they did it as a second context. We need to do some work to pull them together, so there's only one, but it works pretty well. Both of them work pretty well; we just have to remember if we get a bug in one, we have to fix it in both. \n\nAt the moment, that's the only bit that sucks there. After that, you can either run those two. They have to be run before you run the link migration context. Obviously, your work items have to exist to reapply the links in there. That would be super useful. So if you run a link migration context, it will go and add all of the links, the relationships to the work items in again. \n\nAnd then there's two ones for doing the attachments, the export and the import. You export all of the attachments to a folder; you then import them into the work items, and this works great. It takes some time to run depending on the number of attachments you've got, but it has some good filters in it to try to improve performance. \n\nAnd then the last one, which I think Richard Fennell created, which is awesome, which is the work item query migration context, allows you to migrate your queries across, and it does some of the work to make sure that they work in the new location. I've not actually run that one myself; it was added after the last time I ran the migration, but yeah, super good.\n\nOkay, so then once you've done all of the work items, which will bring the test cases across. Okay, so you have to do the work item migration to bring the test cases across. Leave out the test plans and suites. Then you can run the processors for the test cases. So the first one you run is the test variable migration, which creates the variables, then the configurations, which creates the same configurations that you have on both sites. They have to be in place first before you create the plans and suites. \n\nNow you're going to create new plans and suites because plans and suites are made up of two parts inside of VSTS and TFS. They have the work item, and then they have a bunch of other data that is inside of TFS. The other data is the bit that test management looks at. The work items are just some metadata. You can't push them back together afterwards, which is why we don't migrate plans and suites the first time around. We create new plans and suites, but we might wire it up to the existing test cases, so it will run through and do that. \n\nThere are some caveats, like queries don't migrate well and some other things, but it's its best case. And then we've got our very beta. I don't think it works just now for test runs. We're trying to figure out how to get test runs across as well, but that will allow you to migrate your test cases. \n\nWe then have some processors for other things. Some of these are pretty cool. We have export profile picture from Active Directory. So you can, if your corporate Active Directory has the pictures of all your employees in there, it will do an export of all of the pictures to a username, a folder with a username, with the picture name. The picture name is a username, and then you can import them all into TFS. This does not work with VSTS. VSTS is authenticated differently. Only the user can update their own profile picture, but it works well with TFS. \n\nDone that before, you may have messed up your migration. Therefore, you want some way to delete all of the work items. The work item delete takes a query. Warning: this is super dangerous and will permanently delete all of the work items that end up in scope for it. Make sure you use that in a very clever manner.\n\nWe've got the fix git commit links. If you're also migrating git, as long as you keep the same name of the repo from the old git repo to the new git repo, so in the new team project location, you can run this processor, and it will go and remap all of the links so that the links in the work items point to the new git repo, not the old git repo in the old location. \n\nAnd so that will go run through and fix all of that. You've got to create team folders. That's far. If you're, let's say you have many teams inside of your team project, and you want to create a folder for each team so that you can put queries and queries or query folders, it will go and build out that list for you so you don't have to do it manually. If you've got 50 teams, it can be quite time-consuming to go build that. Run the processor; it will go do that.\n\nExport team list literally just exports a list of all the teams for you. These are all the processors and tools. You can go get the source code on GitHub. You can look at how they work. You can build your own. You can submit pull requests if it doesn't work the way you want. We might mention the field map again. \n\nThere's three processors that these work with: work item migration, work item revision migration, and the work item update. So those three will use these. The first two, migration and revision, both move from source to target. Update only operates on source, so it's an in-place bulk update. \n\nSo again, you get the field map, field marriage map, field blank map, field to tag, field value map, field value to tag, RegEx field map, and tree to tag map. Those are a bunch in there that are super useful. And again, the JSON file is more accurate than the documentation because the JSON file is the actual options, but it pulled out of each of the configuration of each of the code. \n\nSo while the documentation gets out of date, the JSON file that you get from the init command is always up to date. Well, there we go. We've gone through all of the options in the VSTS sync migration tools. Hopefully, that will give you some ability to get started with them and start migrating some of your work items. \n\nSo if you have any problems, head us up on GitHub, submit your issues. We have a very vibrant community, lots of people asking questions and getting answers, but it is ad-hoc support. It's just us giving up our free time and had to support it, but you can ask."
  },
  {
    "Title": "Unlocking Human Potential: How Health and Perspective Fuel Innovation in Tech",
    "Description": "Explores how health, mindset, and diverse perspectives drive innovation and effective leadership in tech, highlighting the link between well-being and creative problem-solving.",
    "ResourceId": "DWL0PLkFazs",
    "Url": "https://www.youtube.com/watch?v=DWL0PLkFazs",
    "Date": "2017-07-28T12:40:03Z",
    "Captions": "My name is Kathryn Maddox and I am astonishingly healthy. I what advice - compared to training because I've linked them from the first time with books high energy pragmatics and really interesting and really glad we did because even the worst skeptics in the crowd were won over and not shopped. \n\nYeah, I'm not suggesting and I'm the CTO and calm. So after a lot evaluation of differences from creating options, we selected Martin because I think he brings a unique perspective. They very close to what I call the beakers engineer. The dragons are makers and he gains a great perspective that's close to the makers to the skunk reading session, which is what is thought about how about you know everything else is hard making sure the details of the builders are successfully doing their best work. \n\nAnd I think Martin does a great job in connecting with them."
  },
  {
    "Title": "Transforming Chaos into Collaboration: How a Common Framework Can Revolutionise Your Team's Dynamics",
    "Description": "Explores how adopting a shared framework and structured communication can turn team chaos into collaboration, boosting trust, engagement, and continuous improvement.",
    "ResourceId": "XMLdLH6f4N8",
    "Url": "https://www.youtube.com/watch?v=XMLdLH6f4N8",
    "Date": "2017-07-28T11:55:30Z",
    "Captions": "My name is Catherine Medics and I am a Christian. \n\nWe did healthy. I like the foundation class that it is giving our engineering order us towards a common vision for how work will be done, which means not had before. \n\nIt gave them hope to our developers that they can get solutions to some of the biggest problems that they're forced to deal with every day. \n\nI even, as a remastered, really got out of the nuances refreshers in some cases that were brand new to me, so it's definitely upped my game. \n\nThis immediately has had a big impact on health grades. We have a common set of framework for talking about problems that we're solving, problems that we're working together. \n\nWe were a little on the chaotic terms, of course, and it's gotten people really excited about other than risk limited feature enough energy. \n\nThe organisational change backlog is really exciting for two reasons. One, it reduces people on the ground doing work voice code, what's holding them back. \n\nIt's had to lose that communication channel before, and now we are building them up, marking the structured, she picked those off and to build that team back up. \n\nSo we're not only picking out the impetus, so we're building confidence across the order set. We really do care about whistling the mapping that we want to fix. \n\nTwo huge things have come from the creation of the backlog. One is that we have greater insights with little tighter services, meaning contagious that we now have a backlog to fix. \n\nThe second rather unexpected to me benefit was that we have struggled with the two communication cycles. What those problems were, people have annoyed felt listened to. \n\nNow, without Merton, we have an unstructured system for hearing those impediments, picking them up and making things better across the board. \n\nEach evening is incredibly helpful and hopeful. \n\nI wanted Martin's compared attorney because I'd like them to the first time with books high-energy, pragmatic and really interesting. \n\nI'm really glad we did because even the worst skeptics in the crowd were won over."
  },
  {
    "Title": "Embracing Process Improvement: How Understanding Scrum Transformed a Developer's Mindset",
    "Description": "Explores how learning Scrum and process improvement can shift developer mindsets, boost collaboration, and enhance software delivery in Agile teams.",
    "ResourceId": "F8a6gtXxLe0",
    "Url": "https://www.youtube.com/watch?v=F8a6gtXxLe0",
    "Date": "2017-07-27T19:14:11Z",
    "Captions": "My name is Dave Fresh. I'm a developer with Health Grades. I was vehemently opposed to the course initially because I didn't understand the value in spending at least a couple of days away from development in order to understand the process that we set myself. We were already using what is focusing on the foundations of Scrum, understanding how to use Scrum in a professional manner, and really focusing on refinements. Is that something that we have been missing previously? So the course changed your mind very quickly.\n\nThis is going to help Health Grades because we are going to be delivering valuable, deliverable software or products every sprint, as opposed to throwing things against a wall, which was our sprint previously. Too often, people, especially individuals from the business, will come over and say, \"Hey, I need this now,\" without understanding that there's an order of systems in a process that needs to happen in order for what they believe to be an emergency to be implemented.\n\nAbsolutely, I think it's important for everybody to understand the process that needs to be applied here, whether or not they are a full-time member of the squad. They need to be aware of how to operate."
  },
  {
    "Title": "Transforming Scrum Training: How Real-World Insights Empower Agile Teams at Great Calm",
    "Description": "Explores how practical, real-world Scrum training at Great Calm improved team collaboration, alignment, and continuous improvement across the organisation.",
    "ResourceId": "Fm24oKNN--w",
    "Url": "https://www.youtube.com/watch?v=Fm24oKNN--w",
    "Date": "2017-07-27T18:16:30Z",
    "Captions": "Yeah, I don't see you're saying I'm the CTO at Great Calm. So after the Lord evaluation of differences from training options, we selected Martin because I think he'd bring daily perspective. They very close to what I call the weaker engineer, the dragon troublemakers, and he brings a great perspective that's close to the makers. Scrum training session, which is what I thought about a lot, you know, everything else about making sure the great days of the builders are successful in doing their best work, and I think Martin does a great job in connecting with them.\n\nSo we decided to train everybody because it is critical to baseline understanding of Scrum in the organisation. What I expected every shop is that you start with following the standard framework and use one, and you create a variation. Facts, we should create a normal and expecting. It's just that in an organisation where you have a lot of new people joining, everybody brings their own flavour and understanding of what's come and agile means, and it creates more dissonance. So we come to create by the feedback that they received for training from all the lab students and then maybe process and so that I think it resonates in everybody that Martin is very close to the makers in the village, and that shows in how he teaches a class, and that's pretty consistent feedback.\n\nThe ICMS value in the organisational change backlog that comes out of the training is the team getting us what we need to change in relationship. Reorganisation and big initiative makes my mother to bots to expectation. After the training, my expectation is the organisation should change its senior levels, which is what the organisation macron is about. And the other is that individual teams should be sure are talking to different that are one, that is one individual folder.\n\nMy belief is that this training in the air hoist that father would help us improve our on to true coat and crumbs off both just delivery, i.e., getting the shipment out of the door gate laces. How the world is only not more feature from strategy for customers, but also to put in turns off the needle of the business metric. That reason, the only thing I reading, but you know, when I first took the password margin a few years ago at my previous game, I personally took the class and I was very impressed because, again, I think I am still an engineer at hide and connected me. So that whole cut God in the name of modern among the candidate Cheney, and I'm glad that the feedback I've gotten so far is very consistent from the team. Great job, but Monahan, great job from our team left naked Martin to come here."
  }
]
