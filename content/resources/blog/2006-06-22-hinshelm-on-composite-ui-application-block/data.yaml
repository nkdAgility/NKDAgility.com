post:
  title: >-
    Adding ToolStripPanel UI Adapter support to the Composite UI Application
    Block
  link: https://nkdagility.com/blog/hinshelm-on-composite-ui-application-block/
  pubDate: Thu, 22 Jun 2006 06:30:00 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2006/06/22/hinshelmoncompositeuiapplicationblock.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "I was very supprised to find that CAB did not support a higher level the the ToolStrip in its basic implementation. I resolved to solve this and I have added an adapter and factory for the ToolStripPanel initialy, but I have been having trouble with the ToolStripContainer. So, as my first post, here is the ToolStripPanel code.\n\nThere are two parts to this. And two ways to do it. The first is to edit the existing ToolStrip UI factory to include the new code. But I do not like to do this as I may update CAB in the future and do not want to rely on havign to implement the adaptions again.\n\nThe second is to inherit from the current classes\_in you own assembly and to adapt the class to support both. That way you are extending, not replacing.\n\nHere is the code for the new ToolStripUIAdapterFactory\_factory:\n\n<pre class=\"csharpcode\"> <span class=\"kwrd\">Public</span> <span class=\"kwrd\">Class</span> ToolStripPanelUIAdapter : <span class=\"kwrd\">Inherits</span> UIElementAdapter(Of ToolStrip)\n        <span class=\"kwrd\">Private</span> innerToolStripPanel <span class=\"kwrd\">As</span> ToolStripPanel\n        <span class=\"kwrd\">Public</span> <span class=\"kwrd\">Sub</span> <span class=\"kwrd\">New</span>(<span class=\"kwrd\">ByVal</span> objToolStripPanel <span class=\"kwrd\">As</span> ToolStripPanel)\n            Guard.ArgumentNotNull(objToolStripPanel, <span class=\"str\">\"objToolStripPanel\"</span>)\n            <span class=\"kwrd\">Me</span>.innerToolStripPanel = objToolStripPanel\n        <span class=\"kwrd\">End</span> <span class=\"kwrd\">Sub</span>\n        <span class=\"kwrd\">Protected</span> <span class=\"kwrd\">Overrides</span> <span class=\"kwrd\">Function</span> Add(<span class=\"kwrd\">ByVal</span> uiElement <span class=\"kwrd\">As</span> ToolStrip) <span class=\"kwrd\">As</span> ToolStrip\n            <span class=\"kwrd\">If</span> <span class=\"kwrd\">Me</span>.innerToolStripPanel <span class=\"kwrd\">Is</span> <span class=\"kwrd\">Nothing</span> <span class=\"kwrd\">Then</span>\n                <span class=\"kwrd\">Throw</span> <span class=\"kwrd\">New</span> InvalidOperationException()\n            <span class=\"kwrd\">End</span> <span class=\"kwrd\">If</span>\n            <span class=\"kwrd\">Me</span>.innerToolStripPanel.Join(uiElement, 3)\n            <span class=\"kwrd\">Return</span> uiElement\n        <span class=\"kwrd\">End</span> <span class=\"kwrd\">Function</span>\n        <span class=\"kwrd\">Protected</span> <span class=\"kwrd\">Overrides</span> <span class=\"kwrd\">Sub</span> Remove(<span class=\"kwrd\">ByVal</span> uiElement <span class=\"kwrd\">As</span> ToolStrip)\n            <span class=\"kwrd\">If</span> <span class=\"kwrd\">Me</span>.innerToolStripPanel.Controls.Contains(uiElement) <span class=\"kwrd\">Then</span>\n                <span class=\"kwrd\">Me</span>.innerToolStripPanel.Controls.Remove(uiElement)\n            <span class=\"kwrd\">End</span> <span class=\"kwrd\">If</span>\n        <span class=\"kwrd\">End</span> <span class=\"kwrd\">Sub</span>\n    <span class=\"kwrd\">End</span> Class</pre>\n\nAs you can see it inherits from the CAB class of the same name and overrides the same methods that it does and adds the support for the new Adapter for the ToolStripPanel.\n\nYou can now add the factory to the UI Element Adapter Factory Catalog in the AfterShellCreated part of the main shell application:\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">Dim</span> catalog <span class=\"kwrd\">As</span> IUIElementAdapterFactoryCatalog = RootWorkItem.Services.<span class=\"kwrd\">Get</span>(Of IUIElementAdapterFactoryCatalog)()\n        catalog.RegisterFactory(<span class=\"kwrd\">New</span> UIElements.ToolStripUIAdapterFactory())</pre>\n\nThe CAB framework will now handle ToolStripPanel's as UI Extention Sites with the appropriet factory. Now all we need is the adapter...\n\nHere is the code for the ToolStripPanel Adapter:\n\n<div class=\"csharpcode\">\n<pre class=\"alt\"><span class=\"lnum\">   1:  </span>    <span class=\"kwrd\">Public</span> <span class=\"kwrd\">Class</span> ToolStripPanelUIAdapter : <span class=\"kwrd\">Inherits</span> UIElementAdapter(Of ToolStrip)</pre>\n<pre><span class=\"lnum\">   2:  </span></pre>\n<pre class=\"alt\"><span class=\"lnum\">   3:  </span>        <span class=\"kwrd\">Private</span> innerToolStripPanel <span class=\"kwrd\">As</span> ToolStripPanel</pre>\n<pre><span class=\"lnum\">   4:  </span>        <span class=\"kwrd\">Private</span> <span class=\"kwrd\">Shared</span> NumberOfAddedControls <span class=\"kwrd\">As</span> <span class=\"kwrd\">Integer</span> = 0</pre>\n<pre class=\"alt\"><span class=\"lnum\">   5:  </span></pre>\n<pre><span class=\"lnum\">   6:  </span>        <span class=\"kwrd\">Public</span> <span class=\"kwrd\">Sub</span> <span class=\"kwrd\">New</span>(<span class=\"kwrd\">ByVal</span> objToolStripPanel <span class=\"kwrd\">As</span> ToolStripPanel)</pre>\n<pre class=\"alt\"><span class=\"lnum\">   7:  </span>            Guard.ArgumentNotNull(objToolStripPanel, <span class=\"str\">\"objToolStripPanel\"</span>)</pre>\n<pre><span class=\"lnum\">   8:  </span>            <span class=\"kwrd\">Me</span>.innerToolStripPanel = objToolStripPanel</pre>\n<pre class=\"alt\"><span class=\"lnum\">   9:  </span>        <span class=\"kwrd\">End</span> <span class=\"kwrd\">Sub</span></pre>\n<pre><span class=\"lnum\">  10:  </span></pre>\n<pre class=\"alt\"><span class=\"lnum\">  11:  </span></pre>\n<pre><span class=\"lnum\">  12:  </span>        <span class=\"kwrd\">Protected</span> <span class=\"kwrd\">Overrides</span> <span class=\"kwrd\">Function</span> Add(<span class=\"kwrd\">ByVal</span> uiElement <span class=\"kwrd\">As</span> ToolStrip) <span class=\"kwrd\">As</span> ToolStrip</pre>\n<pre class=\"alt\"><span class=\"lnum\">  13:  </span>            <span class=\"kwrd\">If</span> <span class=\"kwrd\">Me</span>.innerToolStripPanel <span class=\"kwrd\">Is</span> <span class=\"kwrd\">Nothing</span> <span class=\"kwrd\">Then</span></pre>\n<pre><span class=\"lnum\">  14:  </span>                <span class=\"kwrd\">Throw</span> <span class=\"kwrd\">New</span> InvalidOperationException()</pre>\n<pre class=\"alt\"><span class=\"lnum\">  15:  </span>            <span class=\"kwrd\">End</span> <span class=\"kwrd\">If</span></pre>\n<pre><span class=\"lnum\">  16:  </span>            <span class=\"kwrd\">Dim</span> Row <span class=\"kwrd\">As</span> <span class=\"kwrd\">Integer</span> = 2</pre>\n<pre class=\"alt\"><span class=\"lnum\">  17:  </span>            <span class=\"rem\">'TODO: work out how to specify row!</span></pre>\n<pre><span class=\"lnum\">  18:  </span>            <span class=\"kwrd\">Me</span>.innerToolStripPanel.Join(uiElement, 0)</pre>\n<pre class=\"alt\"><span class=\"lnum\">  19:  </span>            <span class=\"kwrd\">Me</span>.innerToolStripPanel.Controls.SetChildIndex(uiElement, NumberOfAddedControls + 1)</pre>\n<pre><span class=\"lnum\">  20:  </span>            NumberOfAddedControls += 1</pre>\n<pre class=\"alt\"><span class=\"lnum\">  21:  </span>            <span class=\"kwrd\">Return</span> uiElement</pre>\n<pre><span class=\"lnum\">  22:  </span>        <span class=\"kwrd\">End</span> <span class=\"kwrd\">Function</span></pre>\n<pre class=\"alt\"><span class=\"lnum\">  23:  </span></pre>\n<pre><span class=\"lnum\">  24:  </span>        <span class=\"kwrd\">Protected</span> <span class=\"kwrd\">Overrides</span> <span class=\"kwrd\">Sub</span> Remove(<span class=\"kwrd\">ByVal</span> uiElement <span class=\"kwrd\">As</span> ToolStrip)</pre>\n<pre class=\"alt\"><span class=\"lnum\">  25:  </span>            <span class=\"kwrd\">If</span> <span class=\"kwrd\">Me</span>.innerToolStripPanel.Controls.Contains(uiElement) <span class=\"kwrd\">Then</span></pre>\n<pre><span class=\"lnum\">  26:  </span>                <span class=\"kwrd\">Me</span>.innerToolStripPanel.Controls.Remove(uiElement)</pre>\n<pre class=\"alt\"><span class=\"lnum\">  27:  </span>            <span class=\"kwrd\">End</span> <span class=\"kwrd\">If</span></pre>\n<pre><span class=\"lnum\">  28:  </span>        <span class=\"kwrd\">End</span> <span class=\"kwrd\">Sub</span></pre>\n<pre class=\"alt\"><span class=\"lnum\">  29:  </span></pre>\n<pre><span class=\"lnum\">  30:  </span>    <span class=\"kwrd\">End</span> Class</pre>\n</div>\n\nThis code registers the Top panel, but you can register another or all of them, but only on seperate sites. Once you have register the site you can create and add ToolStrips to it:\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">Dim</span> objToolStip <span class=\"kwrd\">As</span> <span class=\"kwrd\">New</span> System.Windows.Forms.ToolStrip\nLocalWorkItem.UIExtensionSites(<span class=\"str\">\"MainToolStripPanelSiteName\"</span>).Add(objToolStip)\nLocalWorkItem.UIExtensionSites.RegisterSite(<span class=\"str\">\"MyCustomToolStripSitename\"</span>, objToolStip)</pre>\n\nDon't forget the second registration that allows you to add a\_button to the ToolStrip.\n\nAll done... You should now be able to create dynamic tool strips and populate them. If you want to customise command, you will need to create a command adapter for the ToolStripPanel and add it to CAB."
  - ''
  post_id: '467'
  post_date: '2006-06-22 06:30:00'
  post_date_gmt: '2006-06-22 06:30:00'
  post_modified: '2021-09-19 13:40:05'
  post_modified_gmt: '2021-09-19 13:40:05'
  comment_status: open
  ping_status: open
  post_name: hinshelm-on-composite-ui-application-block
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '323131460'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: robotsmeta
    meta_value: index,follow
  - meta_key: _views
    meta_value: '1'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1gwrrv3
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1460342557;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:377;}i:1;a:1:{s:2:"id";i:95;}i:2;a:1:{s:2:"id";i:5112;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2006-06-22-hinshelm-on-composite-ui-application-block.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.11.4
  - meta_key: _last_editor_used_jetpack
    meta_value: block-editor
  - meta_key: _wpv_contains_gutenberg_views
    meta_value: ''
  - meta_key: _wpcom_is_markdown
    meta_value: '1'
  - meta_key: hefo_before
    meta_value: '0'
  - meta_key: hefo_after
    meta_value: '0'
  - meta_key: kamy_acc_user_role
    meta_value: a:0:{}
  - meta_key: kamy_acc_group_child
    meta_value: '[]'
  - meta_key: kamy_acc_group_default_filed
    meta_value: '[]'
  - meta_key: _yoast_wpseo_content_score
    meta_value: '30'
  - meta_key: _yoast_wpseo_focuskeywords
    meta_value: '[]'
  - meta_key: _yoast_wpseo_keywordsynonyms
    meta_value: '[""]'
  - meta_key: _yoast_wpseo_estimated-reading-time-minutes
    meta_value: '3'
  - meta_key: ekit_post_views_count
    meta_value: '434'
