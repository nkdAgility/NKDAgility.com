post:
  title: Wpf Scale Transform Behaviour
  link: https://nkdagility.com/blog/wpf-scale-transform-behaviour/
  pubDate: Mon, 31 Aug 2009 08:48:19 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2009/08/31/wpf-scale-transform-behaviour.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p>Although this post is called Scale Transform Behaviour you could use any transform / animation in its place. The purpose is to have a slider control in a menu be able to alter the scale of any number of controls within <a href=\"http://joshsmithonwpf.wordpress.com/2008/12/01/the-philosophies-of-mvvm/\" target=\"_blank\">MVVM</a> views.</p>  <p><img style=\"border-right-width: 0px;margin: 10px auto;float: none;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfScaleTransformBehaviour_7143-image_7b0c0350-7e54-4e04-8473-2a22be3f2b81.png\" width=\"281\" height=\"329\" /> </p>  <p>This behaviour allows you to add any Framework Elements to a list of attached controls by adding an attached property of GlobalScaleTransformBehaviour.IsScaled to your controls. </p>  <pre>Public Class GlobalScaleTransformBehaviour\n\n    Private Shared sm_AttachedControls As List(Of FrameworkElement)\n    Public Shared ReadOnly IsScaledProperty As DependencyProperty = DependencyProperty.RegisterAttached(\"IsScaled\", GetType(Boolean), GetType(GlobalScaleTransformBehaviour), New UIPropertyMetadata(False, New PropertyChangedCallback(AddressOf GlobalScaleTransformBehaviour.IsScaledChanged)))\n    Private Shared sm_CurrentScale As Double = 1\n\n    Shared Sub New()\n        sm_AttachedControls = New List(Of FrameworkElement)\n    End Sub\n\n    Public Shared Function GetIsScaled(ByVal element As DependencyObject) As Boolean\n        If element Is Nothing Then\n            Throw New ArgumentNullException(\"element\")\n        End If\n\n        Return element.GetValue(IsScaledProperty)\n    End Function\n\n    Public Shared Sub SetIsScaled(ByVal element As DependencyObject, ByVal value As Boolean)\n        If element Is Nothing Then\n            Throw New ArgumentNullException(\"element\")\n        End If\n        element.SetValue(IsScaledProperty, value)\n    End Sub\n\n    Private Shared Sub IsScaledChanged(ByVal obj As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)\n        Dim itemToResize As FrameworkElement = TryCast(obj, FrameworkElement)\n        If (Not itemToResize Is Nothing) Then\n            If Object.Equals(e.NewValue, True) Then\n                sm_AttachedControls.Add(itemToResize)\n                itemToResize.LayoutTransform = New ScaleTransform(sm_CurrentScale, sm_CurrentScale)\n            Else\n                sm_AttachedControls.Remove(itemToResize)\n                itemToResize.LayoutTransform = New ScaleTransform(1, 1)\n            End If\n        End If\n    End Sub\n\nEnd Class</pre>\n\n<p>\_</p>\n\n<p>As you can see, there is an attached dependency Boolean property defined with a PropertyChangedCallback. When the PropertyChangedCallback method is called we test to see if it is a True or False value and either add the control to a static list and set the current Transform, or remove the control from the list and reset the transform to 1.</p>\n\n<p>This works grate and you can manipulate the list of controls at runtime by changing the dependency property.</p>\n\n<pre>&lt;igWindows:TabItemEx \n    xmlns:igDP=\"http://infragistics.com/DataPresenter\"     \n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:local=\"clr-namespace:Hinshlabs.WpfHeatItsmDashboard\"\n    xmlns:igWindows=\"http://infragistics.com/Windows\"\n    xmlns:igDock=\"http://infragistics.com/DockManager\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n    xmlns:diag=\"clr-namespace:System.Diagnostics;assembly=WindowsBase\"\n    mc:Ignorable=\"d\" \n    xmlns:igEditors=\"http://infragistics.com/Editors\"\n    xmlns:i=\"clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\" \n    xmlns:ic=\"clr-namespace:Microsoft.Expression.Interactivity.Core;assembly=Microsoft.Expression.Interactions\" \n    x:Class=\"CallsView\" x:Name=\"CallsView\" MinWidth=\"30\" MinHeight=\"50\"&gt;\n    &lt;igWindows:TabItemEx.Resources&gt;\n        &lt;local:NinjectDataProvider  \n        x:Key=\"ViewModel\" \n        d:IsDataSource=\"True\" ObjectType=\"{x:Type local:CallsViewModel}\"  \n        /&gt;\n       &lt;local:DateTimeSecondsToBooleanConverter x:Key=\"DateTimeSecondsToBooleanConverter\" /&gt;\n    &lt;/igWindows:TabItemEx.Resources&gt;\n    &lt;igWindows:TabItemEx.Triggers&gt;\n        &lt;EventTrigger RoutedEvent=\"FrameworkElement.Loaded\"/&gt;\n    &lt;/igWindows:TabItemEx.Triggers&gt;\n    &lt;igWindows:TabItemEx.Header&gt;\n        &lt;igEditors:XamTextEditor Text=\"{Binding Source={StaticResource ViewModel},Path=Header, diag:PresentationTraceSources.TraceLevel=High}\" /&gt;\n    &lt;/igWindows:TabItemEx.Header&gt;\n\n    &lt;DockPanel local:GlobalScaleTransformBehaviour.IsScaled=\"True\" DataContext=\"{Binding Source={StaticResource ViewModel}}\"&gt;\n        &lt;Border DockPanel.Dock=\"Top\" Background=\"LightGray\" MinHeight=\"20\"&gt;\n        &lt;Border.Style&gt;\n            &lt;Style&gt;\n                &lt;Style.Triggers&gt;\n                  &lt;DataTrigger Binding=\"{Binding Source={StaticResource ViewModel},Path=IsLoading, diag:PresentationTraceSources.TraceLevel=High}\" Value=\"False\"&gt;\n                           &lt;Setter Property=\"Border.Visibility\" Value=\"Collapsed\" /&gt;\n                  &lt;/DataTrigger&gt;\n                    &lt;/Style.Triggers&gt;\n            &lt;/Style&gt;\n        &lt;/Border.Style&gt;\n            &lt;Label Content=\"Loading data...\" /&gt;\n        &lt;/Border&gt;\n        &lt;Border DockPanel.Dock=\"Top\" Background=\"LightGray\" MinHeight=\"20\"&gt;\n            &lt;Border.Style&gt;\n                &lt;Style&gt;\n                    &lt;Style.Triggers&gt;\n                        &lt;DataTrigger Binding=\"{Binding Source={StaticResource ViewModel},Path=IsSyncing, diag:PresentationTraceSources.TraceLevel=High}\" Value=\"False\"&gt;\n                            &lt;Setter Property=\"Border.Visibility\" Value=\"Collapsed\" /&gt;\n                        &lt;/DataTrigger&gt;\n                    &lt;/Style.Triggers&gt;\n                &lt;/Style&gt;\n            &lt;/Border.Style&gt;\n            &lt;Label Content=\"Syncing data...\" /&gt;\n        &lt;/Border&gt;\n        &lt;igDP:XamDataGrid DataSource=\"{Binding Calls}\" Theme=\"Office2k7Blue\"&gt;\n            &lt;igDP:XamDataGrid.Resources&gt;\n                &lt;Style x:Key=\"{x:Type igDP:DataRecordCellArea}\" TargetType=\"{x:Type igDP:DataRecordCellArea}\"&gt;\n                &lt;Style.Triggers&gt;\n                    &lt;DataTrigger Binding=\"{Binding DataItem.TypeOfCall, Converter={StaticResource DateTimeSecondsToBooleanConverter}, ConverterParameter=1}\" Value=\"True\"&gt;\n                            &lt;Setter Property=\"Background\"&gt;\n                                &lt;Setter.Value&gt;\n                                    &lt;LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"0,1\"&gt;\n                                        &lt;LinearGradientBrush.GradientStops&gt;\n                                            &lt;GradientStopCollection&gt;\n                                                &lt;GradientStop Offset=\"0\" Color=\"Red\"/&gt;\n                                                &lt;GradientStop Offset=\"1\" Color=\"Green\"/&gt;\n                                            &lt;/GradientStopCollection&gt;\n                                        &lt;/LinearGradientBrush.GradientStops&gt;\n                                    &lt;/LinearGradientBrush&gt;\n                                &lt;/Setter.Value&gt;\n                            &lt;/Setter&gt;\n                        &lt;/DataTrigger&gt;\n                &lt;/Style.Triggers&gt;\n            &lt;/Style&gt;\n                &lt;/igDP:XamDataGrid.Resources&gt;\n            &lt;igDP:XamDataGrid.FieldSettings&gt;\n                &lt;igDP:FieldSettings AllowRecordFiltering=\"true\" FilterEvaluationTrigger=\"OnCellValueChange\"  AllowSummaries=\"True\" FilterOperatorDropDownItems=\"All\" /&gt;\n            &lt;/igDP:XamDataGrid.FieldSettings&gt;\n            &lt;igDP:XamDataGrid.FieldLayoutSettings&gt;\n                &lt;igDP:FieldLayoutSettings AutoGenerateFields=\"true\" FilterUIType=\"LabelIcons\" /&gt;\n            &lt;/igDP:XamDataGrid.FieldLayoutSettings&gt;\n        &lt;/igDP:XamDataGrid&gt;\n        &lt;/DockPanel&gt;\n&lt;/igWindows:TabItemEx&gt;</pre>\n\n<p>There is quite a lot of Wpf here, so I have highlighted the DockPanel to which the dependency has been applied. All we now need to do is provide a way to manipulate this value. We need to add a ScaleValue attached dependency property to our Behaviour that we can bind to our single or set of control controls.</p>\n\n<pre>Public Class GlobalScaleTransformBehaviour\n\n    Private Shared sm_AttachedControls As List(Of FrameworkElement)\n    Public Shared ReadOnly IsScaledProperty As DependencyProperty = DependencyProperty.RegisterAttached(\"IsScaled\", GetType(Boolean), GetType(GlobalScaleTransformBehaviour), New UIPropertyMetadata(False, New PropertyChangedCallback(AddressOf GlobalScaleTransformBehaviour.IsScaledChanged)))\n    Public Shared ReadOnly ScaleValueProperty As DependencyProperty = DependencyProperty.RegisterAttached(\"ScaleValue\", GetType(Double), GetType(GlobalScaleTransformBehaviour), New UIPropertyMetadata(CType(1, Double), New PropertyChangedCallback(AddressOf GlobalScaleTransformBehaviour.ScaleValueChanged)))\n    Private Shared sm_CurrentScale As Double = 1\n\n    Shared Sub New()\n        sm_AttachedControls = New List(Of FrameworkElement)\n    End Sub\n\n    Public Shared Function GetIsScaled(ByVal element As DependencyObject) As Boolean\n        If element Is Nothing Then\n            Throw New ArgumentNullException(\"element\")\n        End If\n\n        Return element.GetValue(IsScaledProperty)\n    End Function\n\n    Public Shared Sub SetIsScaled(ByVal element As DependencyObject, ByVal value As Boolean)\n        If element Is Nothing Then\n            Throw New ArgumentNullException(\"element\")\n        End If\n        element.SetValue(IsScaledProperty, value)\n    End Sub\n\n    Private Shared Sub IsScaledChanged(ByVal obj As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)\n        Dim itemToResize As FrameworkElement = TryCast(obj, FrameworkElement)\n        If (Not itemToResize Is Nothing) Then\n            If Object.Equals(e.NewValue, True) Then\n                sm_AttachedControls.Add(itemToResize)\n                itemToResize.LayoutTransform = New ScaleTransform(sm_CurrentScale, sm_CurrentScale)\n            Else\n                sm_AttachedControls.Remove(itemToResize)\n                itemToResize.LayoutTransform = New ScaleTransform(1, 1)\n            End If\n        End If\n    End Sub\n\n    Public Shared Function GetScaleValue(ByVal element As DependencyObject) As Double\n        If element Is Nothing Then\n            Throw New ArgumentNullException(\"element\")\n        End If\n\n        Return element.GetValue(ScaleValueProperty)\n    End Function\n\n    Public Shared Sub SetScaleValue(ByVal element As DependencyObject, ByVal value As Double)\n        If element Is Nothing Then\n            Throw New ArgumentNullException(\"element\")\n        End If\n        element.SetValue(ScaleValueProperty, value)\n    End Sub\n\n    Private Shared Sub ScaleValueChanged(ByVal obj As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)\n        If Not Application.Current.Dispatcher.CheckAccess Then\n            Exit Sub\n        End If\n        sm_CurrentScale = e.NewValue\n        SyncLock sm_AttachedControls\n            For Each itemToResize In sm_AttachedControls.ToList\n                ' Apply Tensform\n                itemToResize.LayoutTransform = New ScaleTransform(sm_CurrentScale, sm_CurrentScale)\n            Next\n        End SyncLock\n    End Sub\n\nEnd Class</pre>\n\n<p>This value is stored so we can set new controls, and then applied to all of the currently attached controls. I have chosen to bind to a slider, but any way of passing in the required values is just fine.</p>\n\n<pre>&lt;igRibbon:XamRibbonWindow x:Class=\"MainWindowView\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:igRibbon=\"http://infragistics.com/Ribbon\"\n    xmlns:igEditors=\"http://infragistics.com/Editors\"\n    xmlns:igWindows=\"http://infragistics.com/Windows\"\n    xmlns:igDock=\"http://infragistics.com/DockManager\"\n    xmlns:local=\"clr-namespace:Hinshlabs.WpfHeatItsmDashboard\"\n    Title=\"Heat Itsm Dashboard\" MinHeight=\"600\" MinWidth=\"800\" Icon=\"/Hinshlabs.WpfHeatItsmDashboard;component/HeatItsm.ico\"&gt;\n    &lt;igRibbon:XamRibbonWindow.Resources&gt;\n        &lt;local:NinjectDataProvider \n        x:Key=\"ViewModel\" \n        ObjectType=\"{x:Type local:MainWindowViewModel}\" \n        /&gt;\n    &lt;/igRibbon:XamRibbonWindow.Resources&gt;\n    &lt;igRibbon:RibbonWindowContentHost DataContext=\"{StaticResource ViewModel}\"&gt;\n        &lt;igRibbon:RibbonWindowContentHost.Ribbon&gt;\n            &lt;igRibbon:XamRibbon local:XamRibbonBehaviour.IsEntryPoint=\"True\" DockPanel.Dock=\"Top\" AutoHideEnabled=\"True\" Theme=\"Office2k7Blue\" &gt;\n            &lt;igRibbon:XamRibbon.ApplicationMenu&gt;\n                    &lt;igRibbon:ApplicationMenu RecentItemsHeader=\"{Binding Resources.RecentItemsHeader}\" Image=\"/Hinshlabs.WpfHeatItsmDashboard;component/Images/heat.gif\"&gt;\n                        &lt;igRibbon:ButtonTool Caption=\"Update\" /&gt;\n                    &lt;igRibbon:ApplicationMenu.FooterToolbar&gt;\n                        &lt;igRibbon:ApplicationMenuFooterToolbar&gt;\n                            &lt;igRibbon:ButtonTool Command=\"{Binding ExitCommand}\" Caption=\"{Binding Resources.ExitButtonCaption}\"/&gt;\n                        &lt;/igRibbon:ApplicationMenuFooterToolbar&gt;\n                    &lt;/igRibbon:ApplicationMenu.FooterToolbar&gt;\n                        &lt;/igRibbon:ApplicationMenu&gt;\n                &lt;/igRibbon:XamRibbon.ApplicationMenu&gt;\n                &lt;igRibbon:XamRibbon.Tabs&gt;\n                    &lt;igRibbon:RibbonTabItem Header=\"{Binding Resources.Ribbon_HomeTab_Header}\"&gt;\n                        &lt;igRibbon:RibbonGroup Caption=\"{Binding Resources.Ribbon_HomeTab_ViewsGroup_Caption}\"&gt;\n                            &lt;igRibbon:ToolHorizontalWrapPanel&gt;\n                                &lt;igRibbon:ButtonTool Caption=\"{Binding Resources.Ribbon_HomeTab_ViewsGroup_CallsViewButtonCaption}\" Command=\"{Binding AddCallsViewCommand}\" /&gt;\n                            &lt;/igRibbon:ToolHorizontalWrapPanel&gt;\n                        &lt;/igRibbon:RibbonGroup&gt;\n                        &lt;igRibbon:RibbonGroup Caption=\"{Binding Resources.Ribbon_HomeTab_OptionsGroup_Caption}\"&gt;\n                                    &lt;igRibbon:ToolHorizontalWrapPanel&gt;\n                                    &lt;igRibbon:ButtonGroup&gt;\n                                        &lt;igRibbon:ToggleButtonTool IsChecked=\"{Binding FickEnabled, Mode=TwoWay}\" Content=\"{Binding Resources.Ribbon_HomeTab_OptionsGroup_Flick_ToggleButton_Caption}\"/&gt;\n                                &lt;/igRibbon:ButtonGroup&gt;\n                                    &lt;/igRibbon:ToolHorizontalWrapPanel&gt;\n                            &lt;igRibbon:ToolHorizontalWrapPanel&gt;\n                                &lt;igRibbon:ButtonGroup&gt;\n                                    &lt;Label Content=\"Scale\" /&gt;\n                                    &lt;Slider Minimum=\"0.5\" Maximum=\"3\" Width=\"200\" local:GlobalScaleTransformBehaviour.ScaleValue=\"1\" LargeChange=\".5\" SmallChange=\".1\"  Value=\"{Binding Path=(local:GlobalScaleTransformBehaviour.ScaleValue),RelativeSource={RelativeSource Self}, Mode=TwoWay}\"&gt;\n                                    &lt;/Slider&gt;\n                                &lt;/igRibbon:ButtonGroup&gt;\n                            &lt;/igRibbon:ToolHorizontalWrapPanel&gt;\n                        &lt;/igRibbon:RibbonGroup&gt;\n                    &lt;/igRibbon:RibbonTabItem&gt;\n                &lt;/igRibbon:XamRibbon.Tabs&gt;\n            &lt;/igRibbon:XamRibbon&gt;\n    &lt;/igRibbon:RibbonWindowContentHost.Ribbon&gt;\n        &lt;AdornerDecorator&gt;\n        &lt;DockPanel&gt;\n            &lt;local:UpdateView DockPanel.Dock=\"Top\" /&gt;\n            &lt;igWindows:XamTabControl TabItemCloseButtonVisibility=\"Visible\" TabStripPlacement=\"Top\" ItemsSource=\"{Binding CallsViews}\" SelectedItem=\"{Binding SelectedCallsView}\" local:TabControlTimedBehaviour.IsTimedCycle=\"{Binding FickEnabled}\" Theme=\"Office2k7Blue\"&gt;\n            &lt;/igWindows:XamTabControl&gt;\n        &lt;/DockPanel&gt;\n        &lt;/AdornerDecorator&gt;\n    &lt;/igRibbon:RibbonWindowContentHost&gt;\n&lt;/igRibbon:XamRibbonWindow&gt;</pre>\n<img style=\"border-right-width: 0px;margin: 10px auto;float: none;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfScaleTransformBehaviour_7143-image_fe341cc8-ae7f-41ce-b7e8-f9d35ee92679.png\" width=\"600\" height=\"450\" /> \n\n<p>As you can see I am heavily utilizing the Infragistics controls, but that would not affect this procedure. The result is the ability to smoothly scale your controls based on a global scale setting.</p>\n<img style=\"border-right-width: 0px;margin: 10px auto;float: none;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfScaleTransformBehaviour_7143-image_f01cf9b5-31a2-435a-b190-97a985fbe245.png\" width=\"600\" height=\"450\" /> \n\n<p>\_</p>\n\n<p>\_</p>\n\n\n\n<p>\_</p>\n\n<p>krsu46zvpt</p><div style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\" class=\"wlWriterEditableSmartContent\">Technorati Tags: <a href=\"http://technorati.com/tags/.NET\" rel=\"tag\">.NET</a>\_<a href=\"http://technorati.com/tags/WPF\" rel=\"tag\">WPF</a>\_<a href=\"http://technorati.com/tags/CodeProject\" rel=\"tag\">CodeProject</a>\_<a href=\"http://technorati.com/tags/MVVM\" rel=\"tag\">MVVM</a>\_</div>"
  - ''
  post_id: '87'
  post_date: '2009-08-31 08:48:19'
  post_date_gmt: '2009-08-31 08:48:19'
  post_modified: '2009-08-31 08:48:19'
  post_modified_gmt: '2009-08-31 08:48:19'
  comment_status: open
  ping_status: open
  post_name: wpf-scale-transform-behaviour
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '314198861'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBNQ82
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1473116309;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:13;}i:1;a:1:{s:2:"id";i:123;}i:2;a:1:{s:2:"id";i:65;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2009-08-31-wpf-scale-transform-behaviour.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '614'
