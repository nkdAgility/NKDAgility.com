post:
  title: Anatomy of an Automation for the Tfs Automation Platform
  link: >-
    https://nkdagility.com/blog/anatomy-of-an-automation-for-the-tfs-automation-platform/
  pubDate: Wed, 01 Jun 2011 13:25:46 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=3361
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/Turk-Automaton1.gif"><img
    style="background-image: none; border-right-width: 0px; margin: 0px 20px
    20px 0px; padding-left: 0px; padding-right: 0px; display: inline; float:
    left; border-top-width: 0px; border-bottom-width: 0px; border-left-width:
    0px; padding-top: 0px" title="Turk-Automaton" border="0"
    alt="Turk-Automaton" align="left"
    src="http://blog.hinshelwood.com/files/2011/06/Turk-Automaton_thumb1.gif"
    width="100" height="112" /></a>If you can’t wait for the Tfs Automation
    Platform, but you still want to eventually deploy your extensions using it,
    what can you do?</p>  <p>We would really like for you to still be able to
    build out automations without the Automation Platform, but you would not
    have the delivery and management aspects. Hopefully this post will guide you
    on how you can integrate your work with the Tfs Automation Platform
    later.</p>  <br clear="all" />  <h2>Updates (<font color="#9b00d3">in
    purple</font>)</h2>  <ul>   <li><strong>2011-06-09 - <a
    href="http://mskold.blogspot.com/">Mattias Sköld</a></strong> – Mattias had
    a bunch of questions, and I want to provide answers. You will find the
    questions and answers inline at the relevant sections. </li>   
    <li><strong>2011-06-10 - <a href="http://mikefourie.wordpress.com/">Michael
    Ockie Fourie</a></strong> – Mike had some very good questions and we are
    starting to get into specifics and implementation details. This is good as
    we need to get moving. </li> </ul>  <p><font color="#ff0000"><em>note: This
    product is still under development and this document is subject to change.
    There is also the strong possibility that these are just rambling fantasies
    of a mad programmer with an architect complex.</em></font></p>  <hr /> 
    <p>Well, we will be integrating integrating with many of the TFS elements as
    proxies so that we can leverage existing code without having to rewrite
    things. For a rough understanding of the architecture and where you can
    start building things now lets look at the generic scenario:</p>  <ol>  
    <li>     <p><strong>Installation</strong></p>      <p>Assemblies and other
    supporting files are dropped into the correct Plugins folder on the
    server</p>   </li>    <li>     <p><strong>Configuration</strong></p>     
    <p>There is some settings stored somewhere that will control how the process
    runs</p>   </li>    <li>     <p><strong>Action          <br /></strong>There
    are three types of action:</p>      <ol>       <li>         <p>User Action -
    The user deliberately setts a process running</p>       </li>       
    <li>         <p>Event – An event is raised on the server (e.g.
    WorkItemChangedEvent)</p>       </li>        <li>         <p>Schedule – A
    particular time is reached</p>       </li>     </ol>      <blockquote>      
    <p>Will User actions trigger events or simply queue an TFS job directly ?
    Will the automations framework handle Events and simply queue TFS jobs
    ?          <br /><strong>-Mattias Sköld</strong></p>     </blockquote>     
    <p><font color="#9b00d3">User Actions and Events will simply trigger a TFS
    job :)</font></p>   </li>    <li>    
    <p><strong>Processing</strong></p>      <p>Some amount of work is done</p>  
    </li> </ol>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/image11.png"><img
    style="background-image: none; border-right-width: 0px; margin: 0px;
    padding-left: 0px; padding-right: 0px; display: inline; border-top-width:
    0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="image" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/image_thumb11.png"
    width="604" height="568" /></a>     <br /><strong>Figure: Simple diagram
    showing how an automation gets to run from source</strong></p> 
    <h2>Installation</h2>  <p>There are a number of places that you need to put
    files on the TFS Server to have them loaded effectively:</p>  <ul>  
    <li>Event Handlers (ISubscribers) – C:Program FilesMicrosoft Team Foundation
    Server 2010Application TierWeb ServicesbinPlugins </li>    <li>TFS Jobs
    (ITeamFoundationJobExtension) - C:Program FilesMicrosoft Team Foundation
    Server 2010Application TierTFSJobAgentplugins* </li> </ul>  <blockquote>  
    <p>Are the two listed above all of them? What about loaded at all? Any
    specific requirements or is it just basic .net loading?      <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">This is not all of them, bit this is
    the main places that we will be using for Release 1. For example if you want
    TFS to load an Event Handler you need to place a .NET 4.0 Assembly into the
    “~Application TierWeb ServicesbinPlugins” folder above with one or more
    classes that implement the ISubscribers interface. Something to beware of is
    that TFS will unload any plugins that produce errors, so everything needs to
    be handled properly.</font></p>  <p>Our installation will be two fold. First
    is the download of the &quot;.zip” archive containing all of the require
    files and unpacking them, probably to:</p>  <blockquote>   <p>c:Program
    FilesTeam Foundation Server Automation
    PlatformAutomations[Automationname]</p> </blockquote>  <p><strong>Figure:
    Example location of an Automation</strong></p>  <blockquote>  
    <p>Manually?      <br />- <a href="http://mikefourie.wordpress.com/">Michael
    Ockie Fourie</a></p> </blockquote>  <p><font color="#9b00d3">I would expect
    that you would select an “Automation” from a provided list and you would
    click an “Install” button that would automatically download and unpack the
    .zip file for you. The user would not be required to do this manually and no
    access to the server would be required.</font></p>  <blockquote>   <p>What
    if two people create the same automation name? any issues? I assume the
    folder name means nothing and is just a container?      <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">This is one of the reasons that we
    really need a central store or repository that serves up the automations. It
    would be responsible for telling a user that they have a duplicate name and
    need to choose another. I would expect the file to download from </font><a
    href="http://downloads.tfsautomationplatform.com/automations/[automationname].zip"><font
    color="#9b00d3">http://downloads.tfsautomationplatform.com/automations/[automationname].zip</font></a><font
    color="#9b00d3"> so it would need to be unique.</font></p>  <blockquote>  
    <ul>     <li>Anything to consider for x86 vs x64 platforms? Will TFS just
    load plugins build to anycpu ok or do we need specific bits? I’m thinking
    anycpu will be ok </li>      <li>We will have to drop the Microsoft in the
    path ie, just c:Program Files Team Foundation Server Automation
    PlatformAutomations[Automationname] </li>      <li>What will actually create
    that path? Sounds like we will also deliver an installer to lay some
    groundwork?] </li>   </ul>    <p>- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">I think you are right that x86 vs
    x64 will not be a problem and I have always used “anycpu”. The “Microsoft”
    in the title was a copy-o (as in copy paste error) and I agree should not be
    there…</font></p>  <p><font color="#9b00d3">Yes, We will have an installer
    that installs the base hooks we need to get onto the system including
    whatever add in we need to add an extra Tab to Team Web Access and maybe the
    “Admin Console”. We may want to separate out the “Server Admin” from the
    “User Admin”.</font></p>  <p><strike>The second stage will occur when an
    administrator “activates” the plugin for your server. This will look for a
    manifest file in the Automation folder that will tell it what components are
    part of the Automation. The installer will know where on the server the
    files need to go and deploy them to that location.</strike></p> 
    <blockquote>   <p>How? With what? What installer? Would this be something
    installed by the installer that lays the groundwork? By location do you mean
    one of the plugins folders you mention above?      <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">I think I confused Mike. It all
    makes sense in my head… honestly. Let me try again…</font></p>  <p><font
    color="#9b00d3">The Administrator will be able to “Activate” any of the
    Automations that have been “Installed” in the previous step by opening the
    Administration UI and selecting to “Activate” an Automation. The Activation
    process consists of the system automatically deploying, according to a
    manifest or other method, each of the relevant Assemblies and other files to
    the location it needs to be in to run. It may be that we can “proxy” some of
    the loads so we do not have to physically move the file, but I am not
    relaying on that in my architecture. We may need to physically copy
    Assemblies into a specific folder for TFS to load it correctly. This process
    would be conducted on the TFS server by something that we have installed
    there. I am being deliberately vague as we have no POC yet to know what that
    might be.</font></p>  <h2>Configuration</h2>  <p>For configuration we are
    probably going to have a class that holds the settings that is serialised
    and stored in TFS as Property's. This will allow us to have both static and
    instance config, but I would not worry about were these are currently stored
    as you will probably need to have your own storage mechanism for now. <font
    color="#9b00d3">There are really two sorts of automations. Ones that can
    only have one instance, and those that can be configured multiple times with
    multiple settings. If an automation is if the multiple flavour then there
    will likely me more than once instance of the configuration.</font>&#160; If
    you are curious on the current thinking:</p>  <table border="0"
    cellspacing="0" cellpadding="2" width="654"><tbody>     <tr>       <td
    valign="top" width="241"><strong>Category</strong></td>        <td
    valign="top" width="159"><strong>Name</strong></td>        <td valign="top"
    width="252"><strong>Value</strong></td>     </tr>      <tr>       <td
    valign="top" width="241">Tfs<font color="#9b00d3">Automation</font>Platform
    </td>        <td valign="top" width="159">Generic</td>        <td
    valign="top" width="252">Generic <font color="#9b00d3">Automation</font>
    Platform settings and configuration</td>     </tr>      <tr>       <td
    valign="top" width="241">Tfs<font color="#9b00d3">Automation</font>Platform
    </td>        <td valign="top" width="159">Plugins</td>        <td
    valign="top" width="252">List of installed plugins and their current
    status</td>     </tr>      <tr>       <td valign="top" width="241">Tfs<font
    color="#9b00d3">Automation</font>Platform </td>        <td valign="top"
    width="159">Mappings</td>        <td valign="top" width="252">List of TFS
    objects and which plugins are mapped to each one</td>     </tr>     
    <tr>       <td valign="top" width="241">Tfs<font
    color="#9b00d3">Automation</font>Platform -[Automation]</td>        <td
    valign="top" width="159">Default</td>        <td valign="top"
    width="252">Default and single instance settings</td>     </tr>     
    <tr>       <td valign="top" width="241">Tfs<font
    color="#9b00d3">Automation</font>Platform -[Automation]</td>        <td
    valign="top" width="159">[Instance]</td>        <td valign="top"
    width="252">Settings that pertain to an individual configured instance of an
    automation</td>     </tr>      <tr>       <td valign="top"
    width="241">&#160;</td>        <td valign="top"
    width="159">&#160;</td>        <td valign="top" width="252">&#160;</td>    
    </tr>   </tbody></table>  <p><strong>Figure: Where will the data be
    stored</strong></p>  <blockquote>   <p>So help me clarify, does an
    administrator install these automations at the TFS instance level or
    Collection level or Project Level? If we are targeting Project level
    granularity, then we need to be able to isolate different versions of
    automations as some Projects may require a diff version. Also, some projects
    may not want the automation to even be available.. Also, we should discover
    automations in a bubble down manner. So if we have n instance with 1000s
    projects, we can install once at the instance level and all TPCs / projects
    get it. Then a selective few can get different version / other automations.
    Am I making sense?      <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">Kind of… All Automations are
    installed and activated at the Server level. this would then make them
    “available”. Some Automations would require some “Admin” configuration to be
    set while others would not. Now that we have an automation installed and any
    high level configuration set (like “domain” or “server URL”, or some other
    thing that does not vary) we can consider where we would like to have it
    running.</font></p>  <p><font color="#9b00d3">Automations should be able to
    target Server, Collections, Team Projects, Areas, Iterations, Branches or
    some combination. The mapping data above, stored in “Mappings” was likely to
    store a list of “targets” (TPC, TP, Branch), the Automation and the
    “instance”. This should give us enough information to configure and run in
    any of your combinations above. </font></p>  <p><font color="#9b00d3">As
    Automations can be set at any level they need to be evaluated from the top
    down and can only be configures by someone with permission at that level. I
    had planned to query the TFS servers own security to work out who has
    permission.</font></p>  <p><font color="#9b00d3">With the scaling issue
    above we will probably need to come up with a seriously efficient way of
    managing that data. I am not opposed to having a database “Tfs_Automation”
    like the Integration Platform does if it makes more sense.</font></p> 
    <p>Any UI required to edit the plugin data will need to be included in the
    package and we have not yet decided how this should happen. With .NET it is
    a little more difficult to inject UI and it will probably end up being
    Silverlight.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/05/image_thumb51.png"><img
    style="background-image: none; border-right-width: 0px; margin: 0px;
    padding-left: 0px; padding-right: 0px; display: inline; border-top-width:
    0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="image_thumb5" border="0" alt="image_thumb5"
    src="http://blog.hinshelwood.com/files/2011/05/image_thumb5_thumb.png"
    width="483" height="307" /></a>     <br /><strong>Figure: Injecting UI in
    Silverlight is easy</strong></p>  <blockquote>   <p>Sounds like you have
    some thoughts on this already ? Will the UI download Action specific UI to
    inject ?      <br /><strong>-Mattias Sköld</strong></p> </blockquote> 
    <p>That is the idea. Probably need to look at what plugin options are
    available for Silverlight as that is currently the most likely Admin
    delivery medium.</p>  <blockquote>   <p>oh wow, so we need to deliver a
    generic UI engine too? Is that easy? Not tried it.      <br />Yeah, invest
    in the future ;-). Seriously though, not a WPF form? Found this: <a
    href="http://www.tanguay.info/web/index.php?pg=codeExamples&amp;id=186">http://www.tanguay.info/web/index.php?pg=codeExamples&amp;id=186</a>]      
    <br />- <a href="http://mikefourie.wordpress.com/">Michael Ockie
    Fourie</a></p> </blockquote>  <p><font color="#9b00d3">In fact I had though
    of it not being “generic”, but more like providing a “Panel” that is a
    template location for the user to inject their own UI. We would provide the
    static UI for all plugins and then they can have us load whatever they set.
    I have done this a little before and while a little fiddly to setup and
    interact with it beats trying to recreate the WIT forms!</font></p> 
    <blockquote>   <p>ok cool I’ll take your word for it. I never thought much
    of UI’s for this project. Hope they don’t complicate things      <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">Did you expect user to have to edit
    XML to apply settings?</font></p>  <h2>Action </h2>  <p>Although there are a
    number of types of action, the goal is the same; to add a Job to the Job
    Queue in TFS that will do the processing. The action can be triggered either
    by the user or when an event is fired in TFS.</p>  <h3>Server Side
    Actions</h3>  <p>If it is a user interaction that caused the action then
    there was probably a Silverlight UI assembly or package stored within the
    installable Automation Package. When it was unpacked the new UI became
    available.</p>  <p>It it was a server event driven action then an assembly
    with a class that implements ISubscriber was installed to the Plugins folder
    of the website where it was loaded into the pipeline for events.</p>  <p>The
    result is that configuration will be added to
    “TfsIntegrationPlatform-[Automation]” that will be loaded by the TFS Job
    next time it is run.</p>  <p><strong><em>NOTE: If you build normal server
    side event handlers then we will try to allow you to wrap them later with
    minimal code changes</em></strong></p>  <h3>Client Side Actions</h3>  <p>If
    the action was based on a Check-In Event on the client or server then the
    assembly that contained the Check-In Policy was loaded into the correct
    place and the correct registry entries added. There was previously some
    progress in this direction with the Power Tools, but it was difficult to
    implement and little known.</p>  <blockquote>   <p>huh? Are these events
    raised on client and server?      <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></p>
    </blockquote>  <p><font color="#9b00d3">While Check-In Policy integration is
    WAY out of scope for Release 1, we do need a client install to inject some
    menu options into Visual Studio at the appropriate place. This also lays the
    groundwork for getting onto the client.</font></p>  <p><font
    style="background-color:
    #ffff00"><strong><em></em></strong></font><strong><em>NOTE: If you build
    normal CheckIn Policies we will try to allow you to wrap them later and
    deploy as part of an Automation package without having to change the
    code.</em></strong></p>  <p><strong><em></em></strong><font
    style="background-color: #ffff00"><strong><em></em></strong></font></p> 
    <h2>Processing</h2>  <p>The processing is where the magic happens and in
    order to provided some level of robustness this should be run on the&#160;
    TFS Job Agent (ITeamFoundationJobExtension) that can be restarted when the
    server is rebooted. Once the “Action” has updated the correct settings for
    the Automation the Job will queued. When the Job runs it will load its
    settings from at “TfsIntegrationPlatform-[Automation]” and run through each
    configured instance as needed.</p>  <p>The only communication between the
    outside world and the Job is through the settings stored as TFS
    Properties.</p>  <blockquote>   <p><em>V1?        <br />- <a
    href="http://mikefourie.wordpress.com/">Michael Ockie Fourie</a></em></p>
    </blockquote>  <p><font color="#9b00d3">Indeed it would be a v1 feature as
    we need somewhere to run the processing. Think of it like some triggers and
    then an engine. The trigger just makes sure that the engine is run so all
    our Tfs Event or User Event gas to do is add a job to the job queue.
    Scheduling can also be taken care of by the Job Queue.</font></p> 
    <p><strong><em>NOTE: If you build a ITeamFoundationJobExtension then we will
    try to allow you to wrap it later with minimal code
    changes</em></strong></p>  <h2>Conclusion</h2>  <p>It should be possible for
    you to create iSubscribers, ITeamFoundationJobExtension and PolicyBase
    classes that perform your needs and we will allow you to package them
    separately or together with space for a UI and other functionality
    later.</p>  <p>There is no reason not to extend TFS now and once the TFS
    Automation Platform releases there will be no need to ever install another
    extension again <img style="border-bottom-style: none; border-left-style:
    none; border-top-style: none; border-right-style: none" class="wlEmoticon
    wlEmoticon-smile" alt="Smile"
    src="http://blog.hinshelwood.com/files/2011/05/wlEmoticon-smile2.png" />
    apart from the TFS Automation Platform itself…</p>
  - ''
  post_id: '3361'
  post_date: '2011-06-01 06:25:46'
  post_date_gmt: '2011-06-01 13:25:46'
  post_modified: '2011-06-01 06:25:46'
  post_modified_gmt: '2011-06-01 13:25:46'
  comment_status: open
  ping_status: open
  post_name: anatomy-of-an-automation-for-the-tfs-automation-platform
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: robotsmeta
    meta_value: index,follow
  - meta_key: dsq_thread_id
    meta_value: '319190036'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBPma6
  - meta_key: _pl_karma
    meta_value: '0'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1473689598;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3373;}i:1;a:1:{s:2:"id";i:9229;}i:2;a:1:{s:2:"id";i:3383;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2011-06-01-anatomy-of-an-automation-for-the-tfs-automation-platform.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '626'
  comment:
  - comment_id: '993'
    comment_author: 'TOC: TFS Integration Tools - Willy&#039;s Cave - Site Home - MSDN Blogs'
    comment_author_email: ''
    comment_author_url: >-
      http://blogs.msdn.com/b/willy-peter_schaub/archive/2011/06/06/toc-tfs-integration-tools.aspx
    comment_author_IP: 65.52.96.176
    comment_date: '2011-06-06 14:10:25'
    comment_date_gmt: '2011-06-06 21:10:25'
    comment_content: '[...] Anatomy of an Automation for the Tfs Automation Platform [...]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:15:"1307394840.1381";s:7:"message";s:46:"MrHinsh
        changed the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '994'
    comment_author: >-
      TOC: TFS Iteration Automation Blog Posts and Reference Sites -
      Willy&#039;s Cave - Site Home - MSDN Blogs
    comment_author_email: ''
    comment_author_url: >-
      http://blogs.msdn.com/b/willy-peter_schaub/archive/2011/06/07/toc-tfs-iteration-automation-blog-posts-and-reference-sites.aspx
    comment_author_IP: 65.55.57.17
    comment_date: '2011-06-07 12:29:05'
    comment_date_gmt: '2011-06-07 19:29:05'
    comment_content: >-
      [...] Part 4: Anatomy of an Automation for the TFS Automation Platform
      [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:15:"1307483254.9593";s:7:"message";s:46:"MrHinsh
        changed the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '995'
    comment_author: Taavi Kõosaar
    comment_author_email: ''
    comment_author_url: http://twitter.com/melborp
    comment_author_IP: ''
    comment_date: '2011-07-17 23:05:00'
    comment_date_gmt: '2011-07-17 23:05:00'
    comment_content: >-
      As a framework for UI, you could consider something like caliburn -
      http://caliburn.codeplex.com/
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '255593091'
  - comment_id: '996'
    comment_author: July 29, 2011 &ndash; Learn TFS Daily | Learn TFS
    comment_author_email: ''
    comment_author_url: http://learntfs.com/2011/07/29/july-29-2011-learn-tfs-daily/
    comment_author_IP: 173.201.196.94
    comment_date: '2011-07-29 06:41:32'
    comment_date_gmt: '2011-07-29 13:41:32'
    comment_content: >-
      [...] Anatomy of an Automation for the TFS Automation Platform from Martin
      Hinshelwood The Visual Studio ALM Rangers are hard at work on a project to
      assist with automating activities via a TFS Automation Platform. In the
      meantime, you may need to create automation solutions but may see a future
      where your solution is integrated with the TFS Automation Platform. This
      post provides some guidance to help you prepare for what’s coming.   This
      post authored by Trent Nix Read more from Blog         Click here to
      cancel reply. [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:15:"1311966316.5342";s:7:"message";s:46:"MrHinsh
        changed the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '997'
    comment_author: >-
      TOC: TFS Integration Tools Blog Posts and Reference Sites - Willy&#039;s
      Cave - Site Home - MSDN Blogs
    comment_author_email: ''
    comment_author_url: >-
      http://blogs.msdn.com/b/willy-peter_schaub/archive/2011/06/06/toc-tfs-integration-tools-blog-posts-and-reference-sites.aspx
    comment_author_IP: 65.55.59.10
    comment_date: '2012-03-19 10:37:37'
    comment_date_gmt: '2012-03-19 17:37:37'
    comment_content: '[...] Anatomy of an Automation for the Tfs Automation Platform [...]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1332271210.51";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '998'
    comment_author: >-
      TOC: TFS Integration Tools Blog Posts and Reference Sites - Willy&#039;s
      Reflections - Site Home - MSDN Blogs
    comment_author_email: ''
    comment_author_url: >-
      http://blogs.msdn.com/b/willy-peter_schaub/archive/2012/03/20/toc-tfs-integration-tools-blog-posts-and-reference-sites.aspx
    comment_author_IP: 65.55.57.70
    comment_date: '2012-10-31 09:08:36'
    comment_date_gmt: '2012-10-31 16:08:36'
    comment_content: '[...] Anatomy of an Automation for the Tfs Automation Platform [...]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1351712725.14";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
