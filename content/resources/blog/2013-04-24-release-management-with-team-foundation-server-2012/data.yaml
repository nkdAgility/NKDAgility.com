post:
  title: Release Management with Team Foundation Server 2012
  link: >-
    https://nkdagility.com/blog/release-management-with-team-foundation-server-2012/
  pubDate: Wed, 24 Apr 2013 17:38:24 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=9468
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">Northwest Cadence has been working hard with customers to
    improve their release management in Team Foundation Server 2012. While on
    the surface it looks like TFS 2012 has little in the way of support for
    release management, you would be wrong. There are many features in Team
    Foundation Server, many of them added in TFS 2010 that can aid you in
    creating a release management strategy.</p>

    <blockquote><p><em>A professional Development Team is supposed to create
    potentially shippable quality output that has no further work required for
    delivery.</em></p>

    </blockquote>

    <p>There are many facets to release management and contrary to popular
    belief not a single one of them revolves around branching or code. There, I
    said it, its not about the code. Its about what you deploy. You may have a
    passing resemblance between code branching and your release process but they
    are two independent and only occasionally related processes. Intertwining
    them is where many organisations start to see friction, it is however
    avoidable.</p>

    <p><img title="Workflow and relationships in Team Foundation Server 2012"
    style="border-left-width: 0px; border-right-width: 0px; background-image:
    none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-top-width: 0px" border="0"
    alt="Workflow and relationships in Team Foundation Server 2012"
    src="http://blog.hinshelwood.com/files/2013/04/image24.png" width="800"
    height="467"/><br /><strong>Figure: Workflow and relationships in Team
    Foundation Server 2012</strong></p>

    <p>Above I have a rough workflow for working with Team Foundation Server
    2012. In this model you would create a ‘build’ from source control and the
    output would be ‘dropped’ to a well known location. I have builds that just
    output binaries to network shares and I have builds that create Chocolatey
    packages. I even have builds that continuously deliver the output to
    production…</p>

    <p><img title="Automated Build in Team Foundation Server 2012"
    style="border-top: 0px; border-right: 0px; background-image: none;
    border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px;
    display: inline; padding-right: 0px" border="0" alt="Automated Build in Team
    Foundation Server 2012"
    src="http://blog.hinshelwood.com/files/2013/04/image25.png" width="800"
    height="114"/><br /><strong>Figure: Automated Build in Team Foundation
    Server 2012</strong></p>

    <p>So now that I have a uniquely identifiable “build” I now need some way to
    repeatedly and consistently promote it through my environments. This is
    about deployment and we need to make sure that we deploy the same artefacts,
    hence the unique build, through the same process. Why, well so that we can
    be sure that not only does our application work, but that our deployment
    does as well. </p>

    <p>In the case of most customers a hap hazard mish mash of technologies is
    then used by an overworked and under manned Configuration Management team,
    or worse Operations is just left of their own, to deploy that application to
    a variety of environments through to production.</p>

    <p><em><strong>Not only is this unnecessary for modern teams delivering
    modern software it is wholly unprofessional!</strong></em></p>

    <p>If you have people doing repetitive and mundane manual tasks then you not
    only doing them a disservice, but you are injecting unnecessary risk into
    the process. Automate everything and use your knowledge workers
    effectively!</p>

    <p>The first thing that we need to consider for release management is some
    sort of delivery interface.</p>

    <p>You, or your configuration management team, are not going to be able to
    really understand all of the tens and maybe thousands of applications that
    you will be asked to deploy. And nor should they; Microsoft does not ask us
    to understand the complexities of Office, they have an auto installer. </p>

    <p>We need some rules around which our teams can create a concrete interface
    that shields teams beyond the development organisation from the complexities
    of delivery. We have Engineering, Configuration Management, DevOps and
    likely Operations that all need to consume this interface. We could come up
    with our own, but there are well defined interfaces out there that were
    specifically designed around solving some of these, or similar,
    problems.</p>

    <p>Creating ‘installers’ has been the tool of choice from yesteryear but
    they are wildly clunky and unwieldy in modern software development. I for
    one have always hated them…</p>

    <p>So what to use instead?</p>

    <p>You may have been using a little technology called <a
    href="http://nuget.org/" target="_blank">NuGet</a> recently. As of Visual
    Studio 2012 it ships out of the box and is a packaging and deployment
    technology for adding references to projects within Visual Studio. It has
    many satellite implementations that are based on that technology, Chocolatey
    for one, and you can implement it however you like. What is it? Well, it is
    fundamentally a Zip file with a Manifest, a Script and some files. It also
    takes care of dependency management.</p>

    <p>There is a learning curve… its not all sweetness and light and there is
    no silver bullet. You still need to get the development teams to create and
    maintain the package and to fix it when things go wrong. But make no
    mistake… this <strong>is</strong> the responsibility of a processional
    development team. </p>

    <p><strong>A professional Development Team is supposed to create potentially
    shippable quality output that has no further work required for
    delivery.</strong></p>

    <p>So lets assume that we have some quality output and that output includes
    the scripts necessary for deployment, ideally contained within a NuGet
    package. Even in that happy state we need to take that output and get it to
    an environment, deploy it and potentially tests it.</p>

    <h2>Lab Management for Release Management</h2>

    <p>For delivery to environments owned by your engineering teams you can use
    Lab Management to deploy to almost any sort of environment that you want.
    Remembering that just because I say ‘engineering teams’ does not mean that
    there are not representatives from operations on those teams, because there
    should be.</p>

    <p><img title="Release Management with Lab Management for Feedback"
    style="border-top: 0px; border-right: 0px; background-image: none;
    border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px;
    display: inline; padding-right: 0px" border="0" alt="Release Management with
    Lab Management for Feedback"
    src="http://blog.hinshelwood.com/files/2013/04/image26.png" width="800"
    height="257"/><br /><strong>Figure: Release Management with Lab Management
    for Feedback</strong></p>

    <p><small><em><span class="label label-info">Note</span> This can be used to
    deploy all the way to production but it tends not to be. Operations frown
    upon installing development tools in production for some unknown
    reason.</em></small></p>

    <p>You can <a
    href="http://blog.hinshelwood.com/standard-environments-for-automated-deployment-and-testing/"
    target="_blank">create Standard Environments</a> or use System Centre
    Virtual Machine Manager (SCVMM) dynamic environments that are constructed
    from one or multiple machines into a single identifiable thing that we can
    deploy to.</p>

    <p><img title="Environments in Lab Centre for Release Management"
    style="border-left-width: 0px; border-right-width: 0px; background-image:
    none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-top-width: 0px" border="0"
    alt="Environments in Lab Centre for Release ManagementEnvironments in Lab
    Centre for Release Management"
    src="http://blog.hinshelwood.com/files/2013/04/image27.png" width="800"
    height="480"/><br /><strong>Figure: Environments in Lab Centre for Release
    Management</strong></p>

    <p>Lab Management leverages Team Foundation Build (TFB) and allows you to
    not only see each of the machines within an environment but also to deploy a
    pre-compiled build to that environment and orchestrate running of your
    integration tests against it. This is fantastically powerful as with no
    customisation we can have a scheduled and automatic deployment of our
    software to an environment and then have a chosen set of automated tests run
    against it.</p>

    <p><small><em><span class="label label-info">Note</span> Team Foundation
    Build (TFB) is not just for compile and test. It is built around Windows
    Workflow and can do pretty much anything your want across one or many
    machines.</em></small></p>

    <p>In addition if we are able to spring for a System Centre Virtual Machine
    Manager (SCVMM) environment you can have your environments automatically
    spun-up from template environments and snapshots created prior to the
    deployment and test. And all that is still out of the box functionality. You
    could add some capabilities with some simple customisation of the build
    workflow to for example; deploy and verify an environment for each of our 20
    testers. The capabilities are endless…</p>

    <p><small><em><span class="label label-info">Note</span> You do not need
    Hyper-V or SCVMM to take advantage of Standard Environments. You can use
    VMWare or even bare metal.</em></small></p>

    <p>So if we are building, deploying, verifying and testing within our
    engineering teams then we would gain the most capabilities from using Lab
    Management. Lab Management is likely part of your existing licensing (you
    just need > [Test Professional | Premium | Ultimate] ) and can be used at no
    additional cost. You can setup and configure ‘standard environments’ in
    minutes to start taking advantage of this now… </p>

    <h2>Octopus for Release Management</h2>

    <p>Remember I mentioned earlier that your operations teams would be…
    uncooperative… if you wanted to use Lab Management deploy to production?
    While I have some customers that are perfectly happy to have a Build Agent
    or Test Agent installed on their servers it does feel a little… dirty. We
    really want a clean orchestration engine that is much less invasive and our
    operations will accept.</p>

    <p>At this stage we already have a ‘package’, probably a NuGet package, that
    has been deployed and promoted by the engineering teams through their
    verification paths and they have marked certain ‘builds’ as ‘done’. Those
    ‘done’ builds have likely, if they are NuGet packages, been deployed to a
    repository that we can easily call for our operational deployments.</p>

    <p><img title="Release Management with Octopus for Production"
    style="border-top: 0px; border-right: 0px; background-image: none;
    border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px;
    display: inline; padding-right: 0px" border="0" alt="Release Management with
    Octopus for Production"
    src="http://blog.hinshelwood.com/files/2013/04/image28.png" width="800"
    height="175"/><br /><strong>Figure: Release Management with Octopus for
    Production</strong></p>

    <p>The reason that I am again mentioning NuGet again is that there is an
    application called Octopus that has been specifically designed to deploy
    NuGet packages with ease. Make no mistake, this is an operations tool that
    has been designed from the ground up to support deploying the output from
    professional Development Teams to production.</p>

    <p><img title="Octopus for Operations" style="border-left-width: 0px;
    border-right-width: 0px; background-image: none; border-bottom-width: 0px;
    padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px;
    border-top-width: 0px" border="0" alt="Octopus for Operations"
    src="http://blog.hinshelwood.com/files/2013/04/image29.png" width="800"
    height="480"/><br /><strong>Figure: Octopus for Operations</strong></p>

    <p>You create Environments and then Releases and you can have those releases
    promoted through those Environments. You can control permissions on who can
    promote releases through which environments and generally get and idea of
    what is deployed where.</p>

    <p>If you are using NuGet packages you will even know what is deployed.</p>

    <h2>Conclusion</h2>

    <p>There are lost of options for the automation of your application
    deployment. I can’t say this enough but:</p>

    <blockquote><p><em><strong>A professional Development Team is supposed to
    create potentially shippable quality output that has no further work
    required for delivery.</strong></em></p>

    </blockquote>

    <p>If we fail any sort of stage gate that occurs after the engineering team
    has said that it is ‘done’ then we need to seriously look at why that
    happened and what we can put in place to make sure that it never happens
    again. That sort of attitude will improve the quality of your software and
    reduce the risk of delivery vastly.</p>

    <p><img title="Release Management Workflow in Team Foundation Server 2012"
    style="border-top: 0px; border-right: 0px; background-image: none;
    border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px;
    display: inline; padding-right: 0px" border="0" alt="Release Management
    Workflow in Team Foundation Server 2012"
    src="http://blog.hinshelwood.com/files/2013/04/image30.png" width="800"
    height="466"/><br /><strong>Figure: Release Management Workflow in Team
    Foundation Server 2012</strong></p>

    <p>This flow of building once and then repeated validation will help weed
    out those last quality issues so that you don’t get many, if any, issues in
    production. Teams that follow models like this, when combined with good
    engineering practices, spend less time fighting fires and more time
    delivering real customer value. The goal would be to get from Check-In to
    your Production Environment at least every 30 days. That means that you need
    to be using the very best Processes, Practices and Tools to make it as slick
    as possible.</p>

    <p><strong>How long is your release process? </strong></p>

    <p><strong>How sure are you of your quality?</strong></p>
  - >-
    <p class="lead">Northwest Cadence has been working hard with customers to
    improve their release management in Team Foundation Server 2012. While on
    the surface it looks like TFS 2012 has little in the way of support for
    release management, you would be wrong. There are many features in Team
    Foundation Server, many of them added in TFS 2010 that can aid you in
    creating a release management strategy.</p>
  post_id: '9468'
  post_date: '2013-04-24 10:38:24'
  post_date_gmt: '2013-04-24 17:38:24'
  post_modified: '2013-04-24 10:38:24'
  post_modified_gmt: '2013-04-24 17:38:24'
  comment_status: open
  ping_status: open
  post_name: release-management-with-team-foundation-server-2012
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '94'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _syn_old_sitegroups
    meta_value: a:0:{}
  - meta_key: _syn_selected_sitegroups
    meta_value: ''
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:7:"default";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _yoast_wpseo_focuskw
    meta_value: release management
  - meta_key: _yoast_wpseo_title
    meta_value: Release Management with Team Foundation Server 2012
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      Northwest Cadence has been working hard with customers to improve their
      release management in Team Foundation Server 2012. Learn how to get the
      most out of...
  - meta_key: _syn_slave_post_states
    meta_value: a:0:{}
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: wp-to-buffer-log
    meta_value: >-
      O:8:"stdClass":5:{s:7:"updates";a:3:{i:0;O:8:"stdClass":17:{s:3:"_id";s:24:"5178189b758b71e90a00000e";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1366825115;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1366876680;s:8:"due_time";s:7:"8:58
      am";s:2:"id";s:24:"5178189b758b71e90a00000e";s:10:"profile_id";s:24:"507a4e20d9320dd125000018";s:15:"profile_service";s:7:"twitter";s:10:"shared_now";b:0;s:6:"status";s:6:"buffer";s:4:"text";s:90:"New
      Post: Release Management with Team Foundation Server 2012
      http://buff.ly/Zrthph #vsalm";s:14:"text_formatted";s:304:"New Post:
      Release Management with Team Foundation Server 2012 <a class="url"
      href="http://buff.ly/Zrthph" rel="external nofollow"
      target="_blank">http://buff.ly/Zrthph</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1366825115;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}i:1;O:8:"stdClass":18:{s:3:"_id";s:24:"5178189b758b71e90a00000f";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1366825115;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1366909260;s:8:"due_time";s:8:"11:01
      am";s:2:"id";s:24:"5178189b758b71e90a00000f";s:5:"media";O:8:"stdClass":5:{s:8:"original";s:80:"http://blog.hinshelwood.com/release-management-with-team-foundation-server-2012/";s:11:"description";s:158:"Northwest
      Cadence has been working hard with customers to improve their release
      management in Team Foundation Server 2012. Learn how to get the most out
      of...";s:5:"title";s:51:"Release Management with Team Foundation Server
      2012";s:4:"link";s:80:"http://blog.hinshelwood.com/release-management-with-team-foundation-server-2012/";s:7:"preview";s:73:"http://blog.hinshelwood.com/files/2012/02/metro-visualstudio-128-link.png";}s:10:"profile_id";s:24:"5088ae7ed9320d615a00000a";s:15:"profile_service";s:8:"facebook";s:10:"shared_now";b:0;s:6:"status";s:6:"buffer";s:4:"text";s:90:"New
      Post: Release Management with Team Foundation Server 2012
      http://buff.ly/Zrtk4k #vsalm";s:14:"text_formatted";s:304:"New Post:
      Release Management with Team Foundation Server 2012 <a class="url"
      href="http://buff.ly/Zrtk4k" rel="external nofollow"
      target="_blank">http://buff.ly/Zrtk4k</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1366825115;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}i:2;O:8:"stdClass":18:{s:3:"_id";s:24:"5178189c758b71e90a000010";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1366825116;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1366883340;s:8:"due_time";s:8:"10:49
      am";s:2:"id";s:24:"5178189c758b71e90a000010";s:5:"media";O:8:"stdClass":5:{s:8:"original";s:80:"http://blog.hinshelwood.com/release-management-with-team-foundation-server-2012/";s:11:"description";s:158:"Northwest
      Cadence has been working hard with customers to improve their release
      management in Team Foundation Server 2012. Learn how to get the most out
      of...";s:5:"title";s:51:"Release Management with Team Foundation Server
      2012";s:4:"link";s:80:"http://blog.hinshelwood.com/release-management-with-team-foundation-server-2012/";s:7:"preview";s:73:"http://blog.hinshelwood.com/files/2012/02/metro-visualstudio-128-link.png";}s:10:"profile_id";s:24:"5088ae96d9320d3a5a00000a";s:15:"profile_service";s:8:"linkedin";s:10:"shared_now";b:0;s:6:"status";s:6:"buffer";s:4:"text";s:90:"New
      Post: Release Management with Team Foundation Server 2012
      http://buff.ly/ZrthFF #vsalm";s:14:"text_formatted";s:304:"New Post:
      Release Management with Team Foundation Server 2012 <a class="url"
      href="http://buff.ly/ZrthFF" rel="external nofollow"
      target="_blank">http://buff.ly/ZrthFF</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1366825116;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}}s:17:"buffer_percentage";i:10;s:12:"buffer_count";i:1;s:7:"success";b:1;s:7:"message";s:48:"One
      more post in your Buffer. Keep it topped up!";}
  - meta_key: dsq_thread_id
    meta_value: '1233482929'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/18V2JSv
  - meta_key: _pl_karma
    meta_value: '0'
  - meta_key: _thumbnail_id
    meta_value: '11141'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474919439;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:7149;}i:1;a:1:{s:2:"id";i:10479;}i:2;a:1:{s:2:"id";i:18;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2013-04-24-release-management-with-team-foundation-server-2012.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '1172'
  comment:
  - comment_id: '1652'
    comment_author: Release Management with Team Foundation Server ...
    comment_author_email: ''
    comment_author_url: >-
      http://www.scoop.it/t/visual-studio-alm/p/4000610850/release-management-with-team-foundation-server-2012
    comment_author_IP: 89.30.105.121
    comment_date: '2013-04-26 10:43:22'
    comment_date_gmt: '2013-04-26 09:43:22'
    comment_content: >-
      [...] Northwest Cadence has been working hard with customers to improve
      their release management in Team Foundation Server 2012. Learn how to get
      the most out of...&nbsp; [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1366969402.507527;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1367006299.453006;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1653'
    comment_author: Release Management - Build, Deploy, Test, and Continuous Improvement
    comment_author_email: ''
    comment_author_url: >-
      http://blog.nwcadence.com/release-management-build-deploy-test-and-continuous-improvement/
    comment_author_IP: 66.175.212.70
    comment_date: '2013-04-30 00:06:58'
    comment_date_gmt: '2013-04-29 23:06:58'
    comment_content: "[...] co-worker Martin Hinshelwood has also written a blog post covering\_ Release Management with Team Foundation Server 2012, which covers the process and the tools (AND is simply a good read  [...]"
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1367276818.578841;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1367422659.536847;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1654'
    comment_author: 24x7 Server Management
    comment_author_email: 24x7servermanagement2013@gmail.com
    comment_author_url: http://www.24x7servermanagement.com/
    comment_author_IP: 115.112.36.86
    comment_date: '2013-05-09 11:46:00'
    comment_date_gmt: '2013-05-09 10:46:00'
    comment_content: |-
      Hey people!! Brilliant site! 

      http://www.24x7servermanagement.com/
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '890749120'
  - comment_id: '1655'
    comment_author: ZephanS
    comment_author_email: Zephan@msn.com
    comment_author_url: ''
    comment_author_IP: 67.137.149.122
    comment_date: '2013-05-30 01:10:00'
    comment_date_gmt: '2013-05-30 00:10:00'
    comment_content: >-
      Another excellent topic Martin. Thanks for taking time to describe and
      eloquently illustrate this critical but often overlooked portion of
      deployment maturity.

      FYI: Props to whomever named their Octopus server http ://kraken (per your
      screenshot). :-D.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '913307380'
  - comment_id: '1656'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 50.95.181.54
    comment_date: '2013-05-30 02:08:00'
    comment_date_gmt: '2013-05-30 01:08:00'
    comment_content: >-
      In fact that's my server and was named Kraken before I ever knew about
      Octopus :)
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1655'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '913307380'
    - meta_key: dsq_post_id
      meta_value: '913373469'
  - comment_id: '11617'
    comment_author: cuong hoang
    comment_author_email: cuong.k.hoang@gmail.com
    comment_author_url: ''
    comment_author_IP: 34.254.119.221
    comment_date: '2015-03-25 20:24:00'
    comment_date_gmt: '2015-03-25 20:24:00'
    comment_content: >-
      Following are my questions:



      1.  How do you address the system configuration tasks that a tradition
      Windows Installer package (.msi) is currently handling if Nuget is
      expected to only deliver executables?  Can a Nuget package be scripted to
      perform system configurations such as enabling IIS, e.t.c?



      2.  How can Release Management tool address deploying software to external
      customers?  Is this then only useful as internal deployment tool and
      traditional installer are still the way to go for deploying to external
      sites?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1928000763'
  - comment_id: '11620'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@nakedalm.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 82.12.112.139
    comment_date: '2015-03-26 10:52:00'
    comment_date_gmt: '2015-03-26 10:52:00'
    comment_content: >-
      This post was for 2012 that does not have out-of-the-box release
      management tooling. This was introduced in TFS 2013 and can be found here
      http://nkdagility.com/blog/create-release-management-pipeline-professional-developers/


      1) Octopus can handle MSI as well as Nuget, and a Nuget Package contains a
      PowerShell script that is executed. You can use that to do MSI with Nuget.



      2) You can do it onw of two ways. You can push, which requires a hole in
      the customers firewall. Or you can pull which requires infrastructure
      onsite. Pull can be done by installing the agent for the Release
      Management tooling on the customers server, and it polls for new versions
      and actions the install when there is.



      This can be done much more easily with VSO and Release Management Online
      that is provided with it.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '11617'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1928000763'
    - meta_key: dsq_post_id
      meta_value: '1928899243'
