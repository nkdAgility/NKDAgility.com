post:
  title: >-
    TFS Event Handler in .NET 3.5 Part 2 - Handling Team Foundation Server
    Events
  link: >-
    https://nkdagility.com/blog/tfs-event-handler-in-net-3-5-part-2-handling-team-foundation-server-events/
  pubDate: Fri, 07 Sep 2007 08:08:57 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=3469
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "I have decided to have a little go at creating a Team Foundation Server Event Handler in .NET 3.5 that is resilient and scaleable. I will be using as many of the features of\_Team Suit as I can, but bear with me as there are a few things that are new to me.\n\n<strong><a title=\"Team Foundation Server\" href=\"http://msdn2.microsoft.com/en-us/teamsystem/aa718934.aspx\" target=\"_blank\">TFS</a> Event Handler in .NET 3.5 Articles</strong>\n<ol>\n\t<li><a rel=\"tag\" href=\"http://www.multidimensionalfreethinking.co.uk/archive/2007/08/21/TFS-Event-Handler-in-NET-3-5-Part-1-The-Architecture.aspx\" target=\"_blank\">TFS Event Handler in .NET 3.5 Part 1 - The Architecture</a><a rel=\"tag\" href=\"http://www.multidimensionalfreethinking.co.uk/archive/2007/08/21/TFS-Event-Handler-in-NET-3-5-Part-1-The-Architecture.aspx\" target=\"_blank\"> </a></li>\n\t<li><a rel=\"tag\" href=\"http://www.multidimensionalfreethinking.co.uk/archive/2007/09/07/TFS-Event-Handler-in-NET-3-5-Part-2-Handling-Team-Foundation-Server-Events.aspx\" target=\"_blank\">TFS Event Handler in .NET 3.5 Part\_2 - Handling Team Foundation Server Events</a></li>\n\t<li>TFS Event Handler in .NET 3.5 Part\_3 -\_Passing the events over a Windows Communication Foundation MSMQ (Coming soon)</li>\n\t<li>TFS Event Handler in .NET 3.5 Part\_4 -\_Workflow (Coming soon)</li>\n</ol>\n<h1>Handling Team Foundation Server Events</h1>\nBecause of the lack of support for <a title=\"Windows Communication Foundation\" href=\"http://wcf.netfx3.com\" target=\"_blank\">Windows Communication Foundation</a> in the Team Edition for Architects I will be replacing all of the auto-generated services with <a title=\"Windows Communication Foundation\" href=\"http://wcf.netfx3.com\" target=\"_blank\">Windows Communication Foundation</a> services. But as it turns out this messes up everything, so I have started from scratch and I will post all of the code for doing this without the Architect bit.\n\nThe first thing that you need is the Contract for Team Foundation Server event handling. This is very specific and only works if used accurately:\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">Imports</span> System.ServiceModel\n<span style=\"color: #0000ff;\">Imports</span> System.Runtime.Serialization\n<span style=\"color: #0000ff;\">Imports</span> Microsoft.TeamFoundation.Server\n\n    <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;summary&gt;\n</span>    <span style=\"color: #008000;\">''' This is the service contract for integrating with the Team Foundation Server notification events.\n</span>    <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;/summary&gt;\n</span>    <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;remarks&gt;&lt;/remarks&gt;\n</span>    &lt;ServiceContract(Namespace:=<span style=\"color: #a31515;\">\"http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Notification/03\"</span>)&gt; _\n    <span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Interface</span> INotification\n\n        <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;summary&gt;\n</span>        <span style=\"color: #008000;\">''' The Notify method if fired whenever a subscribed event arrives.\n</span>        <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;/summary&gt;\n</span>        <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;param name=\"eventXml\"&gt;</span><span style=\"color: #008000;\">This XML defines the data that was changed on the event.</span><span style=\"color: #808080;\">&lt;/param&gt;\n</span>        <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;param name=\"tfsIdentityXml\"&gt;</span><span style=\"color: #008000;\">This XML identifies the Team Foundation Server the event came from.</span><span style=\"color: #808080;\">&lt;/param&gt;\n</span>        <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;param name=\"SubscriptionInfo\"&gt;</span><span style=\"color: #008000;\">Information about the subscriber</span><span style=\"color: #808080;\">&lt;/param&gt;\n</span>        <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;remarks&gt;&lt;/remarks&gt;\n</span>        &lt;OperationContract( _\n                        Action:=<span style=\"color: #a31515;\">\"http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Notification/03/Notify\"</span>, _\n                        ReplyAction:=<span style=\"color: #a31515;\">\"*\"</span> _\n                        )&gt; _\n        &lt;XmlSerializerFormat( _\n                        Style:=OperationFormatStyle.Document _\n                        )&gt; _\n        <span style=\"color: #0000ff;\">Sub</span> Notify(<span style=\"color: #0000ff;\">ByVal</span> eventXml <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span>, <span style=\"color: #0000ff;\">ByVal</span> tfsIdentityXml <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span>, <span style=\"color: #0000ff;\">ByVal</span> SubscriptionInfo <span style=\"color: #0000ff;\">As</span> SubscriptionInfo)\n\n    <span style=\"color: #0000ff;\">End</span> <span style=\"color: #0000ff;\">Interface</span></pre>\n</blockquote>\nThis code allows you to capture TFS events and we will be using by reference only. If you have been having trouble handling the events then look know further than here for <a title=\"Windows Communication Foundation\" href=\"http://wcf.netfx3.com\" target=\"_blank\">Windows Communication Foundation</a> as this has been tried and tested.\n\nThe real trick for handling TFS events in <a title=\"Windows Communication Foundation\" href=\"http://wcf.netfx3.com\" target=\"_blank\">Windows Communication Foundation</a> is that all the events come into the same routine. It would be nice if SubscriptionInfo listed what event it was, but alas it does not. So you may be thinking that you need to parse the XML and find out what type of event it is. Well you can if you want, but I find it easer to have more than one endpoint for the same service. You can then parse the URL for the event type, which is way easier than the XML as the events are all different.\n\nThe first thing you need to do is create a project to hold the code. In the spirit of expedition, I have created a \"<a title=\"Windows Communication Foundation\" href=\"http://wcf.netfx3.com\" target=\"_blank\">Windows Communication Foundation</a> Service Application\" to hold all of the Notification service code. But in the real world you would keep the Contract and\_Implementation classes in different assemblies.\n\n<a href=\"http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFS.5Part2HandlingTeamFoundationServerEv_1464E-image.png\"><img style=\"border-width: 0px;\" src=\"http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFS.5Part2HandlingTeamFoundationServerEv_1464E-image_thumb.png\" border=\"0\" alt=\"image\" width=\"632\" height=\"380\" /></a>\n\nNow we have the project, you can add the INotification class and the Notification service. I like to keep all of my services in a \"v1.0\" so that I can add other services in new versions without affecting the current version.\n\n<a href=\"http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFS.5Part2HandlingTeamFoundationServerEv_1464E-image_1.png\"><img style=\"border-width: 0px;\" src=\"http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFS.5Part2HandlingTeamFoundationServerEv_1464E-image_thumb_1.png\" border=\"0\" alt=\"image\" width=\"369\" height=\"291\" /></a>\n\nOnce you have your INotification class looking like the code extract above we will add a default implementation and test the service. The default implementation should look like:\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">Imports</span> Microsoft.TeamFoundation.Server\n\n<span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Class</span> Notification\n    <span style=\"color: #0000ff;\">Implements</span> INotification\n\n    <span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Sub</span> Notify(<span style=\"color: #0000ff;\">ByVal</span> eventXml <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span>, <span style=\"color: #0000ff;\">ByVal</span> tfsIdentityXml <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span>, <span style=\"color: #0000ff;\">ByVal</span> SubscriptionInfo <span style=\"color: #0000ff;\">As</span> SubscriptionInfo) <span style=\"color: #0000ff;\">Implements</span> INotification.Notify\n\n    <span style=\"color: #0000ff;\">End</span> <span style=\"color: #0000ff;\">Sub\n\nEnd</span> <span style=\"color: #0000ff;\">Class\n</span></pre>\n</blockquote>\n<a href=\"http://11011.net/software/vspaste\"></a>\n\nThis class just implements the INotification contract (interface) and has an empty Sub for the notify method that will be called when an event is fired in TFS.\n\n<a href=\"http://11011.net/software/vspaste\"></a>\n\nThe config file will contain a definition of the service as well as two endpoints for the same interface. The services and behaviours occur within the <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">system.serviceModel</span><span style=\"color: #0000ff;\">&gt;</span> tags.\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">system.serviceModel</span><span style=\"color: #0000ff;\">&gt;\n  &lt;</span><span style=\"color: #a31515;\">services</span><span style=\"color: #0000ff;\">&gt;\n</span>   ...\n<span style=\"color: #0000ff;\">  &lt;/</span><span style=\"color: #a31515;\">services</span><span style=\"color: #0000ff;\">&gt;\n  &lt;</span><span style=\"color: #a31515;\">behaviors</span><span style=\"color: #0000ff;\">&gt;\n</span>   ...\n<span style=\"color: #0000ff;\">  &lt;/</span><span style=\"color: #a31515;\">behaviors</span><span style=\"color: #0000ff;\">&gt;\n&lt;/</span><span style=\"color: #a31515;\">system.serviceModel</span><span style=\"color: #0000ff;\">&gt;</span></pre>\n</blockquote>\n<a href=\"http://11011.net/software/vspaste\"></a><a href=\"http://11011.net/software/vspaste\"></a><a href=\"http://11011.net/software/vspaste\"></a><a href=\"http://11011.net/software/vspaste\"></a>\n\nThis is the really important part of getting the service working, and goes between the\_<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">services</span><span style=\"color: #0000ff;\">&gt;</span> tags. The first part of the service\_configuration contains the service definition. Here we define the name of the service, which should be the same as full namespace and class name of out implementation, the behavior configuration name (we will look at this is a bit) and the endpoints.\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">service</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">behaviorConfiguration</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">NotificationServiceBehavior</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\"><a title=\"RDdotNet - Reality Dysfunction .NET\" href=\"http://www.rddotnet.com\" target=\"_blank\">RDdotNet</a>.TFSEventHandler.NotificationHost.Notification</span>\"<span style=\"color: #0000ff;\">&gt;\n    &lt;</span><span style=\"color: #a31515;\">endpoint</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">address</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">WorkItemChangedEvent</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">binding</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">wsHttpBinding</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">contract</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\"><a title=\"RDdotNet - Reality Dysfunction .NET\" href=\"http://www.rddotnet.com\" target=\"_blank\">RDdotNet</a>.TFSEventHandler.NotificationHost.INotification</span>\"<span style=\"color: #0000ff;\">/&gt;\n    &lt;</span><span style=\"color: #a31515;\">endpoint</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">address</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">CheckInEvent</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">binding</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">wsHttpBinding</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">contract</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\"><a title=\"RDdotNet - Reality Dysfunction .NET\" href=\"http://www.rddotnet.com\" target=\"_blank\">RDdotNet</a>.TFSEventHandler.NotificationHost.INotification</span>\"<span style=\"color: #0000ff;\">/&gt;\n    &lt;</span><span style=\"color: #a31515;\">endpoint</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">address</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">mex</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">binding</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">mexHttpBinding</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">contract</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">IMetadataExchange</span>\"<span style=\"color: #0000ff;\">/&gt;\n&lt;/</span><span style=\"color: #a31515;\">service</span><span style=\"color: #0000ff;\">&gt;</span></pre>\n<a href=\"http://11011.net/software/vspaste\"></a></blockquote>\nIn a service hosted within IIS there is no need to set a base address as the location of the .svc file sets this for us. In this case it is <a href=\"http://localhost:[port]/v1.0/Notification.svc\">http://localhost:[port]/v1.0/Notification.svc</a>. The \"mex\" endpoint allows other application to discover the capabilities of the service.\n\nThe other two endpoint point at the same contract and are in fact implemented by the same method in the service implementation. These two endpoints have different addressed so that we can tell team server to send events to different URL's but use the same code to process the events. You could add any of the TFS events in to this list of end points, but it is best to keep the names the same as the event being fired as we will detect it later. We are using the wsHttpBinding as the most advanced that TFS will support.\n\n<a href=\"http://11011.net/software/vspaste\"></a>\n\nYou only need to set two options on the service behavior, the <span style=\"color: #ff0000;\">httpGetEnabled </span>needs to be set to true for the WSDL and the meta data to work. This allows the discoverability of you services. The\_<span style=\"color: #ff0000;\">includeExceptionDetailInFaults</span> option allows the diagnosis of faults when we test the service.\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">serviceBehaviors</span><span style=\"color: #0000ff;\">&gt;\n    &lt;</span><span style=\"color: #a31515;\">behavior</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">NotificationServiceBehavior</span>\"<span style=\"color: #0000ff;\">&gt;\n        &lt;</span><span style=\"color: #a31515;\">serviceMetadata</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">httpGetEnabled</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">true</span>\"<span style=\"color: #0000ff;\">/&gt;\n        &lt;</span><span style=\"color: #a31515;\">serviceDebug</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">includeExceptionDetailInFaults</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">true</span>\"<span style=\"color: #0000ff;\">/&gt;\n    &lt;/</span><span style=\"color: #a31515;\">behavior</span><span style=\"color: #0000ff;\">&gt;\n&lt;/</span><span style=\"color: #a31515;\">serviceBehaviors</span><span style=\"color: #0000ff;\">&gt;</span></pre>\n</blockquote>\nThe service behaviors go between the\_<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">behaviors</span><span style=\"color: #0000ff;\">&gt;</span> tags and are named the same as the services\_<span style=\"color: #ff0000;\">behaviorConfiguration</span> attribute.\n\nWe now have a working service and can test it by starting a new instance of the web application and\_going to the URL of the .svc file. You will see a page like:\n\n<a href=\"http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFS.5Part2HandlingTeamFoundationServerEv_1464E-image_2.png\"><img style=\"border-width: 0px;\" src=\"http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFS.5Part2HandlingTeamFoundationServerEv_1464E-image_thumb_2.png\" border=\"0\" alt=\"image\" width=\"526\" height=\"480\" /></a>\n\nThis shows you how you can connect to the service, but as this will only be connected to by TFS it is not a requirement for just now. What is important is to see the URL's for the two endpoints that we have created. If you click the WSDL URL (\"<a href=\"http://localhost:65469/v1.0/Notification.svc?wsdl\">http://localhost:65469/v1.0/Notification.svc?wsdl</a>\") you will see the generated meta data for the service.\n\nI am not going to display the full WSDL here as it is huge, but here is the important section for what we need to look at:\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #a31515;\">wsdl:service</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">Notification</span>\"<span style=\"color: #0000ff;\">&gt;\n  &lt;</span><span style=\"color: #a31515;\">wsdl:port</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">WSHttpBinding_INotification</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">binding</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">tns:WSHttpBinding_INotification</span>\"<span style=\"color: #0000ff;\">&gt;\n    &lt;</span><span style=\"color: #a31515;\">soap12:address</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">location</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">http://localhost:65469/v1.0/Notification.svc/WorkItemChangedEvent</span>\"<span style=\"color: #0000ff;\">/&gt;\n    &lt;</span><span style=\"color: #a31515;\">wsa10:EndpointReference</span><span style=\"color: #0000ff;\">&gt;\n      &lt;</span><span style=\"color: #a31515;\">wsa10:Address</span><span style=\"color: #0000ff;\">&gt;</span>http://localhost:65469/v1.0/Notification.svc/WorkItemChanged<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #a31515;\">wsa10:Address</span><span style=\"color: #0000ff;\">&gt;\n      &lt;</span><span style=\"color: #a31515;\">Identity</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">xmlns</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">http://schemas.xmlsoap.org/ws/2006/02/addressingidentity</span>\"<span style=\"color: #0000ff;\">&gt;\n        &lt;</span><span style=\"color: #a31515;\">Upn</span><span style=\"color: #0000ff;\">&gt;</span>comuter1user1<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #a31515;\">Upn</span><span style=\"color: #0000ff;\">&gt;\n      &lt;/</span><span style=\"color: #a31515;\">Identity</span><span style=\"color: #0000ff;\">&gt;\n    &lt;/</span><span style=\"color: #a31515;\">wsa10:EndpointReference</span><span style=\"color: #0000ff;\">&gt;\n  &lt;/</span><span style=\"color: #a31515;\">wsdl:port</span><span style=\"color: #0000ff;\">&gt;\n  &lt;</span><span style=\"color: #a31515;\">wsdl:port</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">WSHttpBinding_INotification1</span>\"<span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">binding</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">tns:WSHttpBinding_INotification</span>\"<span style=\"color: #0000ff;\">&gt;\n    &lt;</span><span style=\"color: #a31515;\">soap12:address</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">location</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">http://localhost:65469/v1.0/Notification.svc/CheckInEvent</span>\"<span style=\"color: #0000ff;\">/&gt;\n    &lt;</span><span style=\"color: #a31515;\">wsa10:EndpointReference</span><span style=\"color: #0000ff;\">&gt;\n      &lt;</span><span style=\"color: #a31515;\">wsa10:Address</span><span style=\"color: #0000ff;\">&gt;</span>http://localhost:65469/v1.0/Notification.svc/CheckIn<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #a31515;\">wsa10:Address</span><span style=\"color: #0000ff;\">&gt;\n      &lt;</span><span style=\"color: #a31515;\">Identity</span><span style=\"color: #0000ff;\"> </span><span style=\"color: #ff0000;\">xmlns</span><span style=\"color: #0000ff;\">=</span>\"<span style=\"color: #0000ff;\">http://schemas.xmlsoap.org/ws/2006/02/addressingidentity</span>\"<span style=\"color: #0000ff;\">&gt;\n        &lt;</span><span style=\"color: #a31515;\">Upn</span><span style=\"color: #0000ff;\">&gt;</span>computer1user1<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #a31515;\">Upn</span><span style=\"color: #0000ff;\">&gt;\n      &lt;/</span><span style=\"color: #a31515;\">Identity</span><span style=\"color: #0000ff;\">&gt;\n    &lt;/</span><span style=\"color: #a31515;\">wsa10:EndpointReference</span><span style=\"color: #0000ff;\">&gt;\n  &lt;/</span><span style=\"color: #a31515;\">wsdl:port</span><span style=\"color: #0000ff;\">&gt;\n&lt;/</span><span style=\"color: #a31515;\">wsdl:service</span><span style=\"color: #0000ff;\">&gt;</span></pre>\n</blockquote>\nThis section of the WSDL highlights the service definition and the two endpoints that exist. We are now able to get TFS to send events to this service. To do this you need to add the URL's of the end points to the notification system within TFS. This is done by using a\_command line utility on the server, or by calling parts of the TFS API. For ease we will call the command line, but a future version should probably have a user interface to allow the administration of which TFS servers you want to handle events for.\n\nTo subscribe to the events you will need to use the BisSubscribe utility which you can find out how to use <a href=\"http://olausson.net/blog/PermaLink,guid,d9948138-262e-4db0-94f1-4f0a033b0fb0.aspx\" target=\"_blank\">here</a>, or you can use the API and provide an interface to add and remove subscriptions.\n\nIf you call:\n<blockquote>BisSubscribe.exe /userId\_<strong>TFSEventHandler</strong> /eventType <strong>WorkItemChangedEvent</strong> /deliveryType <strong>Soap</strong> /address http://localhost:65469/v1.0/Notification.svc/WorkItemChanged</blockquote>\nUsing the untility you will subscribe to events using SOAP, or if you call:\n<blockquote>\n<pre class=\"code\">SubscribeEvent(tfsServer, <span style=\"color: #a31515;\">\"TFSEventHandler\"</span>, \"<span style=\"color: #a31515;\">http://localhost:65469/v1.0/Notification.svc/WorkItemChangedEvent\"</span>, DeliveryType.Soap, Schedule.Imediate, EventType.WorkItemChangedEvent)</pre>\n<a href=\"http://11011.net/software/vspaste\"></a></blockquote>\nUsing a API helper class similar to the one below:\n<blockquote>\n<pre class=\"code\">    <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;summary&gt;\n</span>    <span style=\"color: #008000;\">''' Helper methods for subscribing to and from events\n</span>    <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;/summary&gt;\n</span>    <span style=\"color: #008000;\">''' </span><span style=\"color: #808080;\">&lt;remarks&gt;&lt;/remarks&gt;\n</span>    <span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Class</span> SubscriptionHelper\n\n        <span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Shared</span> <span style=\"color: #0000ff;\">Function</span> SubscribeEvent(<span style=\"color: #0000ff;\">ByRef</span> tfs <span style=\"color: #0000ff;\">As</span> TeamFoundationServer, <span style=\"color: #0000ff;\">ByVal</span> userName <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span>, <span style=\"color: #0000ff;\">ByVal</span> deliveryAddress <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span>, <span style=\"color: #0000ff;\">ByVal</span> Type <span style=\"color: #0000ff;\">As</span> Microsoft.TeamFoundation.Server.DeliveryType, <span style=\"color: #0000ff;\">ByVal</span> Schedule <span style=\"color: #0000ff;\">As</span> Microsoft.TeamFoundation.Server.DeliverySchedule, <span style=\"color: #0000ff;\">ByVal</span> EventType <span style=\"color: #0000ff;\">As</span> EventTypes, <span style=\"color: #0000ff;\">Optional</span> <span style=\"color: #0000ff;\">ByVal</span> Filter <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span> = <span style=\"color: #a31515;\">\"\"</span>) <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">Integer\n</span>            <span style=\"color: #0000ff;\">Dim</span> eventService <span style=\"color: #0000ff;\">As</span> IEventService = <span style=\"color: #0000ff;\">CType</span>(tfs.GetService(<span style=\"color: #0000ff;\">GetType</span>(IEventService)), IEventService)\n            <span style=\"color: #0000ff;\">Dim</span> delivery <span style=\"color: #0000ff;\">As</span> DeliveryPreference = <span style=\"color: #0000ff;\">New</span> DeliveryPreference()\n            delivery.Type = Type\n            delivery.Schedule = Schedule\n            delivery.Address = deliveryAddress\n            <span style=\"color: #0000ff;\">Return</span> eventService.SubscribeEvent(userName, EventType.ToString, Filter, delivery)\n        <span style=\"color: #0000ff;\">End</span> <span style=\"color: #0000ff;\">Function\n\n</span>        <span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Shared</span> <span style=\"color: #0000ff;\">Sub</span> UnSubscribeEvent(<span style=\"color: #0000ff;\">ByRef</span> tfs <span style=\"color: #0000ff;\">As</span> TeamFoundationServer, <span style=\"color: #0000ff;\">ByVal</span> subscriptionId <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">Integer</span>)\n            <span style=\"color: #0000ff;\">Dim</span> eventService <span style=\"color: #0000ff;\">As</span> IEventService = <span style=\"color: #0000ff;\">CType</span>(tfs.GetService(<span style=\"color: #0000ff;\">GetType</span>(IEventService)), IEventService)\n            eventService.UnsubscribeEvent(subscriptionId)\n        <span style=\"color: #0000ff;\">End</span> <span style=\"color: #0000ff;\">Sub\n\n</span>    <span style=\"color: #0000ff;\">End</span> <span style=\"color: #0000ff;\">Class</span></pre>\n</blockquote>\nI may write an article in the future on this, but all the code is part of the current <a href=\"http://tfseventhandler.codeplex.multidimensionalfreethinking.co.uk\" target=\"_blank\">TFSEventHandler</a> application.\n\nWe now want to determine what sort of event has been raised in the Service implementation. To do this we need to parse the URL of the endpoint that has been raised and retrieve the event type.\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">Dim</span> UriString <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span> = OperationContext.Current.EndpointDispatcher.EndpointAddress.Uri.AbsoluteUri\n<span style=\"color: #0000ff;\">Dim</span> SlashIndex <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">Integer</span> = UriString.LastIndexOf(<span style=\"color: #a31515;\">\"/\"</span>)\n<span style=\"color: #0000ff;\">Dim</span> EndieBit <span style=\"color: #0000ff;\">As</span> <span style=\"color: #0000ff;\">String</span> = UriString.Substring(SlashIndex, (UriString.Length - (UriString.Length - SlashIndex)))\n<span style=\"color: #0000ff;\">Dim</span> EventType <span style=\"color: #0000ff;\">As</span> EventTypes = <span style=\"color: #0000ff;\">CType</span>([Enum].Parse(<span style=\"color: #0000ff;\">GetType</span>(EventTypes), EndieBit), EventTypes)</pre>\n<a href=\"http://11011.net/software/vspaste\"></a></blockquote>\nAs you can see it is just a case of parsing the URL to get the last bit after the final \"/\" and then converting it to an enumerator.\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">Public</span> <span style=\"color: #0000ff;\">Enum</span> EventTypes\n    Unknown = 0\n    AclChangedEvent\n    Branchmovedevent\n    BuildCompletionEvent\n    BuildStatusChangeEvent\n    CommonStructureChangedEvent\n    DataChangedEvent\n    IdentityChangedEvent\n    IdentityCreatedEvent\n    IdentityDeletedEvent\n    MembershipChangedEvent\n    WorkItemChangedEvent\n    CheckinEvent\n<span style=\"color: #0000ff;\">End</span> <span style=\"color: #0000ff;\">Enum</span></pre>\n</blockquote>\n<a href=\"http://11011.net/software/vspaste\"></a>The enumerator lists all of the events that are possible in TFS, but be warned that not all of the events fire effectively. Once you have the event it can be converted into an object. I use code from <a title=\"Howard van Rooijen's TFS Project Template\" rel=\"tag\" href=\"http://blogs.conchango.com/howardvanrooijen/archive/2006/04/29/3894.aspx\" target=\"_blank\">Howard van Rooijen's TFS Project Template</a> for the event objects and <a href=\"http://www.codeproject.com/useritems/CustomXmlSerializer.asp\" target=\"_blank\">Larry Steinle's CustomXmlSerializer</a> code to convert the XML to Howard's objects resulting in the following code:\n<blockquote>\n<pre class=\"code\"><span style=\"color: #0000ff;\">Dim</span> IdentityObject <span style=\"color: #0000ff;\">As</span> TFSIdentity = EndpointBase.CreateInstance(<span style=\"color: #0000ff;\">Of</span> TFSIdentity)(tfsIdentityXml)\n<span style=\"color: #0000ff;\">Dim</span> EventObject <span style=\"color: #0000ff;\">As</span> WorkItemChangedEvent = EndpointBase.CreateInstance(<span style=\"color: #0000ff;\">Of</span> WorkItemChangedEvent)(eventXml)</pre>\n<a href=\"http://11011.net/software/vspaste\"></a></blockquote>\nAll of the objects are now ready to pass over MSMQ to the TFS Event Processor, which will be the subject of the next article in this series...\n<div id=\"0767317B-992E-4b12-91E0-4F059A8CECA8:f9103aef-5139-4e5b-8bcb-55e675afbdc8\" class=\"wlWriterSmartContent\" style=\"display: inline; margin: 0px; padding: 0px;\">Technorati Tags: <a rel=\"tag\" href=\"http://technorati.com/tags/Visual%20Studio%20Team%20System\">Visual Studio Team System</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/Visual%20Studio%202008\">Visual Studio 2008</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/Team%20Edition%20for%20Architects\">Team Edition for Architects</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/TFSEventHandler\">TFSEventHandler</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/Microsoft%20.NET%20Framework\">Microsoft .NET Framework</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/Software%20Industrial%20Revolution\">Software Industrial Revolution</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/WCF\">WCF</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/TFS%20Event%20Handler\">TFS Event Handler</a></div>"
  - ''
  post_id: '3469'
  post_date: '2007-09-06 18:08:57'
  post_date_gmt: '2007-09-07 08:08:57'
  post_modified: '2007-09-06 18:08:57'
  post_modified_gmt: '2007-09-07 08:08:57'
  comment_status: open
  ping_status: open
  post_name: tfs-event-handler-in-net-3-5-part-2-handling-team-foundation-server-events
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: robotsmeta
    meta_value: index,follow
  - meta_key: dsq_thread_id
    meta_value: '323112198'
  - meta_key: _thumbnail_id
    meta_value: '8621'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/19Ajn8l
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474917071;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:316;}i:1;a:1:{s:2:"id";i:325;}i:2;a:1:{s:2:"id";i:3487;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2007-09-06-tfs-event-handler-in-net-3-5-part-2-handling-team-foundation-server-events.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1
  - meta_key: ekit_post_views_count
    meta_value: '683'
