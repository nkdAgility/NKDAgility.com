post:
  title: Migrating data from FogBugz to TFS 2012 using the TFS Integration Platform
  link: >-
    https://nkdagility.com/blog/migrating-data-from-fogbugz-to-tfs-2012-using-the-tfs-integration-platform/
  pubDate: Tue, 17 Jul 2012 00:54:29 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=6202
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p>As part of my current engagement I will be moving data from FogBugz via a
    custom CSV Tip Adapter for the TFS Integration Platform. This an adapter I
    wrote a while ago to facilitate moving data from Excel to TFS and I just ant
    to reuse it. The first thing I need is a development environment as I may
    need to tweak this ancient code.</p>

    <div class="SeriesListing">

    <p>This post is part of a series of posts that document a Upgrade of TFS
    2010 to TFS 2012 with a VSS Migration, Process Template consolidation, Team
    Project consolidation and a FogBugz migration:</p>

    <ol>

    <li><strong>Part 1: </strong><a
    href="http://blog.hinshelwood.com/upgrading-tfs-2010-to-tfs-2012-with-vss-migration-and-process-template-consolidation/"
    target="_blank"><strong>Upgrading TFS 2010 to TFS 2012 with VSS Migration
    and Process Template consolidation</strong></a>

    <ol>

    <li><a
    href="http://blog.hinshelwood.com/vss-converter-issue-tf60014-tf60087-failed-to-initialise-user-mapper/"
    target="_blank">VSS Converter – Issue: TF60014 &amp; TF60087: Failed to
    initialise user mapper</a></li>

    <li><a
    href="http://blog.hinshelwood.com/vss-converter-issue-tf54000-cannot-update-the-data-because-the-server-clock-may-have-been-set-incorrectly/"
    target="_blank">VSS Converter – Issue: TF54000: Cannot update the data
    because the server clock may have been set incorrectly</a></li>

    </ol>

    </li>

    <li><strong>Part 2: </strong><a
    href="http://blog.hinshelwood.com/one-team-project-collection-to-rule-them-allconsolidating-team-projects/"
    target="_blank"><strong>One Team Project Collection to rule them
    all–Consolidating Team Projects</strong></a>

    <ol>

    <li><a
    href="http://blog.hinshelwood.com/tfs-integration-platform-issue-access-denied-to-program-files/"
    target="_blank">TFS Integration Tools – Issue: Access denied to Program
    Files</a></li>

    <li><a
    href="http://blog.hinshelwood.com/tfs-integration-tools-issue-error-occurred-during-the-code-review-of-change-group/"
    target="_blank">TFS Integration Tools – Issue: Error occurred during the
    code review of change group</a></li>

    <li><a
    href="http://blog.nwcadence.com/tfs-integration-tools-issue-unable-to-find-a-unique-local-path/"
    target="_blank">TFS Integration Tools – Issue: “unable to find a unique
    local path”</a></li>

    <li><a
    href="http://blog.nwcadence.com/tfs-2012-issue-get-workspace-already-exists-connecting-with-vs-2008-or-vs-2010/"
    target="_blank">TFS 2012 Issue: Get Workspace already exists connecting with
    VS 2008 or VS 2010</a></li>

    </ol>

    </li>

    <li><strong><a
    href="http://blog.hinshelwood.com/migrating-data-from-fogbugz-to-tfs-2012-using-the-tfs-integration-platform/">Part
    3: Migrating data from FogBugz to TFS 2012 using the TFS Integration
    Platform</a></strong>

    <ol>

    <li><a
    href="http://blog.hinshelwood.com/tfs-integration-toolsissue-analysisprovider-not-found/"
    target="_blank">TFS Integration Tools–Issue: AnalysisProvider not
    found</a></li>

    <li><a
    href="http://blog.hinshelwood.com/tfs-integration-tools-tf237165-the-team-foundation-server-could-not-update-the-work-item/"
    target="_blank">TFS Integration Tools: TF237165: The Team Foundation Server
    could not update the work item</a></li>

    </ol>

    </li>

    </ol>

    </div>

    <p><img src="http://blog.hinshelwood.com/files/2012/07/image_thumb.png"
    alt="" /><br /><strong>Figure: Finishing up the data
    consolidation</strong></p>

    <p>We completed the <a
    href="http://blog.hinshelwood.com/upgrading-tfs-2010-to-tfs-2012-with-vss-migration-and-process-template-consolidation/"
    target="_blank">upgrade to TFS 2012 and consolidated Process Templates</a>
    and then consolidated all of the <a
    href="http://blog.hinshelwood.com/one-team-project-collection-to-rule-them-allconsolidating-team-projects/"
    target="_blank">Team Projects to a single collection</a> and now the last
    part of this marathon of fun is to get all of the existing FogBugz data into
    TFS. We could conceivably use a simple Excel import, but this leaves us open
    for a nightmare of a time getting all of the state transitions through.</p>

    <h3 class="icon-task">Setting up a development environment for a custom
    adapter to the TFS Integration Platform</h3>

    <p>Do not use the ranger guidance for this. That way lies pain and suffering
    as it assumes that you need to be able to compile the entire TFS Integration
    Platform. I just set up the bits I need, so what do we need. Well, first we
    need to install a couple of things:</p>

    <ul>

    <li>Windows Sever 2012</li>

    <li>SQL Server 2012</li>

    <li>Visual Studio 2012 Team Foundation Server</li>

    <li>Visual Studio 2012 Ultimate</li>

    <li>TFS Integration Platform</li>

    </ul>

    <p><a
    href="http://blog.hinshelwood.com/files/2012/07/SNAGHTML3073bc7.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; display:
    inline; padding-right: 0px; border-width: 0px;" title="SNAGHTML3073bc7"
    src="http://blog.hinshelwood.com/files/2012/07/SNAGHTML3073bc7_thumb.png"
    alt="SNAGHTML3073bc7" width="640" height="353" border="0" /></a><br
    /><strong>Figure: Make sure that you snapshot</strong></p>

    <p>As I always use a VM for development I get to use the power of Snapshots
    to keep my environments clean and working <img class="wlEmoticon
    wlEmoticon-smile" style="border-style: none;"
    src="http://blog.hinshelwood.com/files/2012/07/wlEmoticon-smile4.png"
    alt="Smile" /></p>

    <p>Next you need to create a Solution and Project to hold your custom
    adapter. Use whatever layout that you want, but make sure that your Project
    has the following references:</p>

    <ul>

    <li>Microsoft.TeamFoundation.Migration.EntityModel.dll</li>

    <li>Microsoft.TeamFoundation.Migration.Toolkit.dll</li>

    </ul>

    <p>Both of which you will find in “C:Program Files (x86)Microsoft Team
    Foundation Server Integration Tools”. But in order to go through a debug
    cycle (the TFS Integration Platform has no Unit Tests) you need to provide a
    little magic.</p>

    <ol>

    <li><strong>Select "Right Click Project | Compile | Build Events"</strong>

    <p><a href="http://blog.hinshelwood.com/files/2012/07/image24.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/07/image_thumb24.png"
    alt="image" width="640" height="360" border="0" /></a><br /><strong>Figure:
    Open the project properties</strong></p>

    </li>

    <li><strong>Then in the post build events enter some xcopy
    statements</strong>

    <p><a href="http://blog.hinshelwood.com/files/2012/07/image25.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/07/image_thumb25.png"
    alt="image" width="640" height="360" border="0" /></a><br /><strong>Figure:
    Edit the build events</strong></p>

    <pre class="brush: ps; ruler: true;">xcopy "$(TargetDir)$(TargetName)*"
    "$(SolutionDir)..BinariesMyAdapterPlugins*" /y

    xcopy "$(ProjectDir)Configuration*"
    "$(SolutionDir)..BinariesMyAdapterConfigurations*" /y /s

    xcopy "$(SolutionDir)..BinariesMyAdapter*" "%ProgramFiles(x86)%Microsoft
    Team Foundation Server Integration Tools*" /y /s

    </pre>

    <p><strong>Figure: Add some xcopy statements</strong>&nbsp;</p>

    </li>

    <li>Select the Debug Tab

    <p><a href="http://blog.hinshelwood.com/files/2012/07/image26.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/07/image_thumb26.png"
    alt="image" width="640" height="360" border="0" /></a><br />Figure:</p>

    </li>

    <li><strong>Select “Start external Program” and enter the path to the
    Migration Console</strong>

    <pre class="brush: ps; ruler: true;">C:Program Files (x86)Microsoft Team
    Foundation Server Integration ToolsMigrationConsole.exe

    </pre>

    <p>&nbsp;</p>

    </li>

    <li><strong>Add a command line argument of the xml config file to
    run</strong></li>

    <li><strong>Add a working directory</strong>

    <pre class="brush: ps; ruler: true;">C:Program Files (x86)Microsoft Team
    Foundation Server Integration Tools

    </pre>

    </li>

    </ol>

    <p>Now when you debug your Class Library it will open MigrationConsole.exe
    with the correct test configuration and attach to the process allowing you
    to step through your code.</p>

    <h3 class="icon-task">Configuring your customer adapter to run</h3>

    <p>If you have configured the above steps correctly then all you need is to
    select the correct configuration file form the UI and it will pre-populate
    all of the values for you.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/07/image27.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/07/image_thumb27.png"
    alt="image" width="640" height="360" border="0" /></a><br /><strong>Figure:
    Select the configuration file for your adapter</strong></p>

    <p>There is some interesting code in the Configuration file to achieve this,
    and a way of setting the defaults.</p>

    <pre class="brush: xml; ruler: true; collapse: true;">< ?xml version="1.0"
    encoding="utf-8" standalone="yes" ?>

      
        
        
      
      
        
        
          
            
              
            
            
              
              
              
              
              
              
            
          
          <!--  TFS WIT migration source   -->
          
            
              
              
              
            
          
        
        
          
            

            
              
                
                  
                    
                    
                    
                    
                    
                    
                  
                  
                    
                      
                        
                        
                        
                        
                        
                        
                        
                        
                        <!--                                     
                        <MappedField LeftName="EstHours" RightName="" MapFromSide="Left" valueMap="" />
                        <mappedfield LeftName="LeftHours" RightName="" MapFromSide="Left" valueMap="" />
                        <mappedfield LeftName="SpentHours" RightName="" MapFromSide="Left" valueMap="" />
                        -->
                      
                      
                        
                          
                          
                        
                        
                          
                          
                        
                      
                    
                    
                      
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        <!--
                        <MappedField LeftName="EstHours" RightName="" MapFromSide="Left" valueMap="" />
                        <mappedfield LeftName="LeftHours" RightName="" MapFromSide="Left" valueMap="" />
                        <mappedfield LeftName="SpentHours" RightName="" MapFromSide="Left" valueMap="" />
                        -->
                      
                      
                        
                          
                          
                        
                        
                          
                          
                        
                      
                    
                    
                      
                        
                        
                        
                        
                        
                        
                        
                        <!--                                     
                        <MappedField LeftName="EstHours" RightName="" MapFromSide="Left" valueMap="" />
                        <mappedfield LeftName="LeftHours" RightName="" MapFromSide="Left" valueMap="" />
                        <mappedfield LeftName="SpentHours" RightName="" MapFromSide="Left" valueMap="" />
                        -->
                      
                      
                        
                          
                          
                        
                        
                          
                          
                        
                      
                    
                  
                  
                    
                      
                      
                    
                    
                      
                      
                    
                    
                      
                      
                    
                    
                      
                      
                      
                      
                      
                    
                    
                      
                      
                      
                      
                      
                    
                    
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                    

                    
                      
                      
                      
                      
                    

                    
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                    
                    
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                    

                    
                      
                      
                      
                      
                      
                      
                      
                      
                      
                    
                    
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                      
                        
                      
                    

                  
                
              
            
            
              
                
                
              
            
          
        
        
          
          
        
      

    </pre>

    <p><strong>Figure: Configuration files can be very detailed</strong></p>

    <p>This file represents the data that needs to be mapped. All the CSV
    Adapter does is get the data into the TFS Integration Platform and the
    Configuration file does all of the hard work of mapping the data into TFS.
    If you noticed our crazy EOL and Delimiter you should also note that we have
    large amounts of history and description that may contain the usual
    delimiters so we needed something that would be unlikely to be used.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/07/image28.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/07/image_thumb28.png"
    alt="image" width="640" height="360" border="0" /></a><br /><strong>Figure:
    It will now list your adapter on the left hand side</strong></p>

    <p>Now that you can select the adapter we are ready to rock…</p>

    <h4>Building a configuration: Mapping States</h4>

    <p>The real advantage of this over Excel is that we can bypass the API rules
    and write data directly into TFS. This allows us to write data directly into
    a particular state even if that state does not exist. While not good is most
    circumstances this is invaluable when migrating data, otherwise we need to
    walk the work item through its states to get it to “Done” or “Closed”.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/07/image29.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/07/image_thumb29.png"
    alt="image" width="640" height="360" border="0" /></a><br /><strong>Figure:
    Some data may need to be updated to enable saving</strong></p>

    <p>To help with this I have created a mapping file, but it is really not
    that easy. We need to think about a number of things as part of the mapping.
    What are the old States, when are the new ones and how much do they match
    up.</p>

    <pre class="brush: xml; ruler: true;">&nbsp;</pre>

    <p><strong>Figure: Mapping from State to State</strong></p>

    <p>The state mappings are the easiest to mess up so take you time with
    these. I like to have all of my work items in a working state, but some
    customers either don’t care, or cant decide what the mapping should be.
    Don’t get confused into adding lots of redundant states into TFS…. why you
    might ask?</p>

    <p>Well, if you change the states or the workflow for the states you are
    taking on a little more than just updating the states. What bout the
    Reporting Services reports that rely on them, or the Excel reports, or even
    the queries. There is a lot dependant on the states and in changing them you
    take on all of that maintenance…</p>

    <p>I am not saying that you should not change the states (when actually I am
    ) but you need to consider all of the ramifications.</p>

    <p>When importing data from another system I always have data that I would
    want as part of Areas &amp; Iterations, but getting a decision on the format
    and mapping at the time would be pretty hard so I tend to prefix all Areas
    and Iterations with the name of the system that I am pulling the data from.
    The customer can then move and rearrange after the fact.</p>

    <pre class="brush: xml; ruler: true;">&nbsp;</pre>

    <p><strong>Figure: Aggregate fields</strong></p>

    <p>To achieve this you can use the Aggregate fields function and merge one
    or more fields. They even support mappings as well so that you can do some
    clean-up or manipulation as you go through.</p>

    <h3 class="icon-task">Exporting FogBugz data to CSV</h3>

    <p>This turned out to be a case of SQL Jujitzu and even better, I did not
    have to do it. My client provided me with a complete CSV file with a custom
    delimiter so that I could import it into TFS.</p>

    <p>I did have to do a bunch of changes to my CSV adapter as I had not really
    got it working before. Now that it is working it will work for any tabular
    delimited data to import. Remembering that it is a Tip adapter and does not
    directly import history however it is aware of changes. If you write an
    updated file where the “DeltaDateColumn” field has been modified the data
    for that Work Item will be reapplied over the top of the old one (yes it
    will overwrite any changes), but this does allow for a staged migration.</p>

    <p>Something that we have been doing is some data transformation as part of
    the output. We have effectively created a temporary table to hold the data
    and loaded and manipulated the data into that format for export to CSV, but
    you can just do a data dump depending on your requirements…</p>

    <p><strong>Importing Hierarchy</strong></p>

    <p>The CSV Adapter by default does not support hierarchy. It could, but I
    have not investigated that part of the TFS Integration Platform so I just
    wrote a small command line utility to do the import from a CSV.</p>

    <pre class="brush: csharp; ruler:
    true;">Console.WriteLine(string.Format("Connecting to {0}", args[0]));

    TfsTeamProjectCollection tfs = new TfsTeamProjectCollection(new
    Uri(args[0]));


    Console.WriteLine(string.Format("Loading {0}", @"c:tempParentChild.csv"));

    StreamReader SR = new StreamReader(@"c:tempParentChild.csv");

    Dictionary> relates = new Dictionary>();

    while (!SR.EndOfStream)

    {
        string rowstring = SR.ReadLine();
        string[] row = rowstring.Split(',');
        if (!relates.ContainsKey(int.Parse(row[1])))
        {
            relates.Add(int.Parse(row[1]), new List());
        }
        relates[int.Parse(row[1])].Add(int.Parse(row[0]));
    }


    WorkItemStore store = tfs.GetService();

    WorkItemCollection wic = store.Query(@"SELECT [System.Id] FROM WorkItems
    WHERE [System.AreaPath] UNDER 'TestProject2FogBugz' ORDER BY [System.Id]");

    foreach (WorkItem sourcew in wic)

    {
        // TASKS
        if (sourcew.Type.Name == "Task")
        {
            decimal parent = decimal.Parse((string)sourcew.Fields["TfsMigrationTool.ReflectedWorkItemId"].Value);
            parent = decimal.Negate(parent);

            WorkItem parentw = store.Query(string.Format(@"SELECT [System.Id] FROM WorkItems WHERE [TfsMigrationTool.ReflectedWorkItemId] = '{0}' ORDER BY [System.Id]", parent))[0];
            parentw.Open();

            WorkItemLinkTypeEnd linkTypeEnd = store.WorkItemLinkTypes.LinkTypeEnds["Child"];
            parentw.Links.Add(new RelatedLink(linkTypeEnd, sourcew.Id));
            parentw.Save();

            Console.WriteLine(parent);
        }
        else
        {
            int parentIsMe = int.Parse((string)sourcew.Fields["TfsMigrationTool.ReflectedWorkItemId"].Value);
            sourcew.Open();
            Console.WriteLine(string.Format("Processing Parent {0}", parentIsMe));
            if (relates.ContainsKey(parentIsMe))
            {
                foreach (int child in relates[parentIsMe])
                {
                    WorkItem childw = store.Query(string.Format(@"SELECT [System.Id] FROM WorkItems WHERE [TfsMigrationTool.ReflectedWorkItemId] = '{0}' ORDER BY [System.Id]", child))[0];
                    childw.Open();

                    WorkItemLinkTypeEnd linkTypeEnd = store.WorkItemLinkTypes.LinkTypeEnds["Child"];
                    sourcew.Links.Add(new RelatedLink(linkTypeEnd, childw.Id));
                    sourcew.Save();
                    Console.WriteLine(string.Format("Adding child if {0} to {1}", childw.Id, parentIsMe));
                }
            }
        }
    }

    Console.ReadKey();</pre>

    <p><strong>Figure: Crude but effective</strong></p>

    <p>For the most part you don’t even need to know the project name as its all
    in the ID’s.</p>

    <h3 class="icon-task">Importing the ForgBugz data into TFS</h3>

    <p>This is the easiest part now that we have our data format and our
    configuration but we still had a nightmare getting the TFS Integration
    Platform to recognise the new Adapter. You need to make sure that you
    restart the “Windows Service” if you have it running but other than that
    everything went smoothly.</p>

    <p>Practice makes perfect <img class="wlEmoticon wlEmoticon-smile"
    style="border-style: none;"
    src="http://blog.hinshelwood.com/files/2012/07/wlEmoticon-smile4.png"
    alt="Smile" /></p>
  - ''
  post_id: '6202'
  post_date: '2012-07-16 17:54:29'
  post_date_gmt: '2012-07-17 00:54:29'
  post_modified: '2012-07-16 17:54:29'
  post_modified_gmt: '2012-07-17 00:54:29'
  comment_status: open
  ping_status: open
  post_name: migrating-data-from-fogbugz-to-tfs-2012-using-the-tfs-integration-platform
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: dsq_thread_id
    meta_value: '768276120'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBIE44
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474625763;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5702;}i:1;a:1:{s:2:"id";i:6109;}i:2;a:1:{s:2:"id";i:7149;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2012-07-16-migrating-data-from-fogbugz-to-tfs-2012-using-the-tfs-integration-platform.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '1023'
  comment:
  - comment_id: '1320'
    comment_author: >-
      Upgrading TFS 2010 to TFS 2012 with VSS Migration and Process Template
      consolidation
    comment_author_email: ''
    comment_author_url: >-
      http://blog.hinshelwood.com/upgrading-tfs-2010-to-tfs-2012-with-vss-migration-and-process-template-consolidation/
    comment_author_IP: 96.126.104.162
    comment_date: '2012-10-25 15:44:52'
    comment_date_gmt: '2012-10-25 22:44:52'
    comment_content: >-
      [...] Part 3: Migrating data from FogBugz to TFS 2012 using the TFS
      Integration Platform [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1351205092.96";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1351205474.21";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1321'
    comment_author: >-
      One Team Project Collection to rule them all - Consolidating Team Projects
      - Visual Studio ALM
    comment_author_email: ''
    comment_author_url: >-
      http://blog.hinshelwood.com/one-team-project-collection-to-rule-them-allconsolidating-team-projects/
    comment_author_IP: 96.126.104.162
    comment_date: '2013-04-06 12:52:50'
    comment_date_gmt: '2013-04-06 19:52:50'
    comment_content: >-
      [...] Part 3: Migrating data from FogBugz to TFS 2012 using the TFS
      Integration Platform [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1365277970.669525;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1365382840.517141;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '2036'
    comment_author: Steven A.
    comment_author_email: stevenao@gmail.com
    comment_author_url: ''
    comment_author_IP: 209.139.229.245
    comment_date: '2013-12-06 22:06:00'
    comment_date_gmt: '2013-12-06 22:06:00'
    comment_content: >-
      Nice Article! I ended up accessing the C# TFS API and reading the Fogbugz
      database directly. I have full control in my importer. I even ended up
      importing "closed" cases with all the history and attachments. It is worth
      it. I guess I can offer my service to people who don't want the hassle to
      go through all the reverse engineering stuff. Tweet me!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1153424249'
