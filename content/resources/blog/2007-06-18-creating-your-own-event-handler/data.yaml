post:
  title: Creating your own Event Handler
  link: https://nkdagility.com/blog/creating-your-own-event-handler/
  pubDate: Mon, 18 Jun 2007 23:12:26 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2007/06/18/creating-your-own-event-handler.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p>Creating an event handler with the <a target="_blank"
    href="http://www.codeplex.com/TFSEventHandler/">Team Foundation Server Event
    Handlers</a> is very easy. You will need to inherit from the AEventHandler
    class which is part of <a title="RDdotNet - Reality Dysfunction .NET"
    target="_blank"
    href="http://www.rddotnet.com">RDdotNet</a>.TeamFoundation.dll located in
    the install directory (I will make an SDK later).</p>

    <p><a atomicselection="true"
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-CreatingyourownEventHandler_DC01-image.png"><img
    width="571" height="307" alt="image" border="0" style="border-width: 0px;"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-CreatingyourownEventHandler_DC01-image_thumb.png"
    /></a></p>

    <pre class="code"><span style="color: rgb(0, 0, 255);">Imports</span>
    Microsoft.TeamFoundation.Client


    <span style="color: rgb(0, 0, 255);">Public</span> <span style="color:
    rgb(0, 0, 255);">MustInherit</span> <span style="color: rgb(0, 0,
    255);">Class</span> AEventHandler(<span style="color: rgb(0, 0,
    255);">Of</span> TEvent)

        <span style="color: rgb(0, 0, 255);">Public</span> <span style="color: rgb(0, 0, 255);">MustOverride</span> <span style="color: rgb(0, 0, 255);">Sub</span> Run(<span style="color: rgb(0, 0, 255);">ByVal</span> EventHandlerItem <span style="color: rgb(0, 0, 255);">As</span> EventHandlerItem(<span style="color: rgb(0, 0, 255);">Of</span> TEvent), _ <br />                                <span style="color: rgb(0, 0, 255);">ByVal</span> ServiceHost <span style="color: rgb(0, 0, 255);">As</span> ServiceHostItem, _<br />                                <span style="color: rgb(0, 0, 255);">ByVal</span> TeamServer <span style="color: rgb(0, 0, 255);">As</span> TeamServerItem, _<br />                                <span style="color: rgb(0, 0, 255);">ByVal</span> e <span style="color: rgb(0, 0, 255);">As</span> NotifyEventArgs(<span style="color: rgb(0, 0, 255);">Of</span> TEvent))<br />
        <span style="color: rgb(0, 0, 255);">Public</span> <span style="color: rgb(0, 0, 255);">MustOverride</span> <span style="color: rgb(0, 0, 255);">Function</span> IsValid(<span style="color: rgb(0, 0, 255);">ByVal</span> EventHandlerItem <span style="color: rgb(0, 0, 255);">As</span> EventHandlerItem(<span style="color: rgb(0, 0, 255);">Of</span> TEvent), _<br />                                         <span style="color: rgb(0, 0, 255);">ByVal</span> ServiceHost <span style="color: rgb(0, 0, 255);">As</span> ServiceHostItem, _<br />                                         <span style="color: rgb(0, 0, 255);">ByVal</span> TeamServer <span style="color: rgb(0, 0, 255);">As</span> TeamServerItem, _<br />                                         <span style="color: rgb(0, 0, 255);">ByVal</span> e <span style="color: rgb(0, 0, 255);">As</span> NotifyEventArgs(<span style="color: rgb(0, 0, 255);">Of</span> TEvent)) <span style="color: rgb(0, 0, 255);">As</span> <span style="color: rgb(0, 0, 255);">Boolean  End</span> <span style="color: rgb(0, 0, 255);">Class </span></pre>
    <p>&nbsp;</p>

    <p>Both of the methods that the AEventHandler exposes have the same
    signature. Hear is what it all means...</p>

    <table width="666" border="1" cellspacing="0" cellpadding="2"
    unselectable="on">
        <tbody>
            <tr>
                <td width="139" valign="top"><strong>Name</strong></td>
                <td width="196" valign="top"><strong>Type</strong></td>
                <td width="329" valign="top"><strong>Description</strong></td>
            </tr>
            <tr>
                <td width="139" valign="top">EventHandlerItem</td>
                <td width="193" valign="top">EventHandlerItem(<span style="color: rgb(0, 0, 255);">Of</span> TEvent)</td>
                <td width="334" valign="top">The event handler item contains information about the handler. This includes an instance of the config data, the handler its self and a status property. The TEvent generic makes sure that everything is strongly types for the event that you are dealing with.</td>
            </tr>
            <tr>
                <td width="139" valign="top">ServiceHost</td>
                <td width="190" valign="top">ServiceHostItem</td>
                <td width="337" valign="top">Base Address of the service, Event Type, Host Config data and a link to the service host object.</td>
            </tr>
            <tr>
                <td width="139" valign="top">TeamServer</td>
                <td width="188" valign="top">TeamServerItem</td>
                <td width="339" valign="top">Config data for the team server as well as an instance of the Microsoft.TeamFoundation.TeamFoundationServer object</td>
            </tr>
            <tr>
                <td width="138" valign="top">e</td>
                <td width="187" valign="top">NotifyEventArgs(<span style="color: rgb(0, 0, 255);">Of</span> TEvent)</td>
                <td width="342" valign="top">This object allows access to all of the event specific data including the event object, the event type, the <a title="Team Foundation Server" target="_blank" href="http://msdn2.microsoft.com/en-us/teamsystem/aa718934.aspx">TFS</a> Identity object and the TFS Subscription object.</td>
            </tr>
        </tbody>
    </table>

    <p>&nbsp;</p>

    <p>Lets look at the implementation that comes with the <a target="_blank"
    href="http://www.codeplex.com/TFSEventHandler/">TFS Event Handler</a>, the
    &quot;AssignedToHandler&quot;. The IsValid method denotes wither the handler
    will acrualy run at all:</p>

    <pre class="code">
        <span style="color: rgb(0, 0, 255);">Public</span> <span style="color: rgb(0, 0, 255);">Overrides</span> <span style="color: rgb(0, 0, 255);">Function</span> IsValid(<span style="color: rgb(0, 0, 255);">ByVal</span> EventHandlerItem <span style="color: rgb(0, 0, 255);">As</span> EventHandlerItem(<span style="color: rgb(0, 0, 255);">Of</span> WorkItemChangedEvent), _<br />                                      <span style="color: rgb(0, 0, 255);">ByVal</span> ServiceHost <span style="color: rgb(0, 0, 255);">As</span> ServiceHostItem, _<br />                                      <span style="color: rgb(0, 0, 255);">ByVal</span> TeamServer <span style="color: rgb(0, 0, 255);">As</span> TeamServerItem, _<br />                                      <span style="color: rgb(0, 0, 255);">ByVal</span> e <span style="color: rgb(0, 0, 255);">As</span> NotifyEventArgs(<span style="color: rgb(0, 0, 255);">Of</span> WorkItemChangedEvent)) <span style="color: rgb(0, 0, 255);">As</span> <span style="color: rgb(0, 0, 255);">Boolean </span>        <span style="color: rgb(0, 0, 255);">If</span> e.Event <span style="color: rgb(0, 0, 255);">Is</span> <span style="color: rgb(0, 0, 255);">Nothing</span> <span style="color: rgb(0, 0, 255);">Then </span>            <span style="color: rgb(0, 0, 255);">Return</span> <span style="color: rgb(0, 0, 255);">False </span>        <span style="color: rgb(0, 0, 255);">End</span> <span style="color: rgb(0, 0, 255);">If </span>        <span style="color: rgb(0, 0, 255);">Dim</span> assignedName <span style="color: rgb(0, 0, 255);">As</span> <span style="color: rgb(0, 0, 255);">String</span> = WorkItemEventQuerys.GetAssignedToName(e.Event)
            <span style="color: rgb(0, 0, 255);">If</span> <span style="color: rgb(0, 0, 255);">String</span>.IsNullOrEmpty(assignedName) <span style="color: rgb(0, 0, 255);">Then </span>            <span style="color: rgb(0, 0, 255);">Return</span> <span style="color: rgb(0, 0, 255);">False </span>        <span style="color: rgb(0, 0, 255);">Else </span>            <span style="color: rgb(0, 0, 255);">Return</span> <span style="color: rgb(0, 0, 255);">Not</span> assignedName = WorkItemEventQuerys.GetChangedByName(e.Event)
            <span style="color: rgb(0, 0, 255);">End</span> <span style="color: rgb(0, 0, 255);">If </span>    <span style="color: rgb(0, 0, 255);">End</span> <span style="color: rgb(0, 0, 255);">Function </span></pre>
    <p>&nbsp;</p>

    <p>This method initially checks to see if the event exists and then queries
    the assigned name from the event using a work item event query which
    consists of:</p>

    <pre class="code"><span style="color: rgb(0, 0, 255);">Return
    </span>eventData.CoreFields.StringFields.Find(<span style="color: rgb(0, 0,
    255);">New</span> Predicate(<span style="color: rgb(0, 0, 255);">Of</span>
    StringField)(<span style="color: rgb(0, 0, 255);">AddressOf</span>
    FindAssignedTo)).NewValue</pre>

    <p>&nbsp;</p>

    <p>All this does is search the String fields associated with the core work
    item bits to find the &quot;System.AssignedTo&quot; value. You could so this
    manually, but I have a number of queries there and you can add any number
    you wish.</p>

    <p>The logic: If Event exists and assigned name is not empty then check that
    the assigned name is not the changed name.</p>

    <p>So in English with all of the crap split out: Did the user assign the
    work item to himself? If not then send them an email!</p>

    <p>The rest, as they say, is just logic. The &quot;Run&quot; method calls
    the &quot;IsValid&quot; and then sends an email if it is in fact valid,
    hardly rocket science.</p>

    <p>&nbsp;</p>

    <p>Hopefully with this knowledge you will be able to make many many event
    handlers!</p>

    <p><em>For the delayed CTP 1 of the <a target="_blank"
    href="http://www.codeplex.com/TFSEventHandler/">TFS Event Handler</a> I have
    changed the logic quite a lot but the same IsValid and Run methods exist.
    The parameters are, however slightly different. I have taken into account
    security and you will have to make your own connection to the TFS server
    using your own username and password. I have changed this to protect the
    security of the application as I want developers to be able to upload event
    handler assemblies and WF workflow without having to get access to the
    server. I ahve also changed it so the service that captures the events is
    not the same one that runs the handlers. This allows me to send the events
    between these services using MSMQ, thus giving the service some much needed
    redundancy.</em></p>
  - ''
  post_id: '378'
  post_date: '2007-06-18 09:12:26'
  post_date_gmt: '2007-06-18 23:12:26'
  post_modified: '2007-06-18 09:12:26'
  post_modified_gmt: '2007-06-18 23:12:26'
  comment_status: open
  ping_status: open
  post_name: creating-your-own-event-handler
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '320028652'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: robotsmeta
    meta_value: index,follow
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1dL7WLP
  - meta_key: _wpghs_github_path
    meta_value: _posts/2007-06-18-creating-your-own-event-handler.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1
  - meta_key: ekit_post_views_count
    meta_value: '396'
