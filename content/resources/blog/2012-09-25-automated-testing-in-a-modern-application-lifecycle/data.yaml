post:
  title: Automated Testing in a modern application lifecycle
  link: >-
    https://nkdagility.com/blog/automated-testing-in-a-modern-application-lifecycle/
  pubDate: Tue, 25 Sep 2012 04:33:30 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=8868
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">If we are building software in a modern application
    lifecycle there is no way that we would be able to deliver modern
    applications without some form of automated testing. Automated testing is
    the one thing that makes sure that we are able to deliver working software
    that meets the quality bar while still keeping the cycle time at an
    acceptable level.</p>

    <p>While we spend a disproportionate amount of time in manual testing we
    also spend an obscene amount of time maintaining and supporting any code
    automation that we create. These automated tests can represent at least the
    same amount of code that is required for our application but is often
    dismissed as an overhead to the solution.</p>

    <p><a
    href="http://blog.hinshelwood.com/files/2012/09/image_thumb5_thumb1_thumb.png"><img
    title="Automated Testing in a modern application lifecycle "
    style="border-left-width: 0px; border-right-width: 0px; background-image:
    none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-top-width: 0px" border="0"
    alt="Automated Testing in a modern application lifecycle "
    src="http://blog.hinshelwood.com/files/2012/09/image_thumb5_thumb1_thumb_thumb.png"
    width="640" height="369"/></a><br /><strong>Figure: Automated Testing in a
    modern application lifecycle</strong> </p>

    <p>If we have fear of changing our code because of the impact to our testing
    infrastructure we will always fail to deliver quality software.</p>

    <h3 class="icon-problem">The Problem that automated testing solves</h3>

    <p>We often have more tests than we can hope to run in a single iteration
    once we get passed the first initial pass and it is no longer acceptable for
    software to spend weeks or months in testing before being released. In a
    modern application lifecycle we tend to have small teams that create more
    and more tests cumulatively iteration on iteration. To still be able to
    deliver high quality value to our customers while maintaining the same level
    of coverage for our application requires automation, ideally we have
    automation for every test that is now passing. While initially hard,
    especially if we have an existing application, we need to bite the bullet
    and accept that it is no longer optional to refrain from contributing to our
    technical debt and start making bigger repayments.</p>

    <blockquote><p>Software is an organizational asset and decisions to cut
    quality must be made by executive management and reflected in the financial
    statements.</p>

    <p><small>Ken Schwaber in <cite title="Professional Scrum Master
    Training">Professional Scrum Master Training</cite></small></p>

    </blockquote>

    <p>While we need that automation to be a success, we also need to make sure
    that it is the right sort of automation for the goal. A sure indication that
    something is not quite right is that you spend too much time maintaining
    your automation. This usually means that you have not yet surmounted your
    technical debt gremlins.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/09/image45.png"><img
    title="How automated testing fits into a modern application lifecycle"
    style="border-left-width: 0px; border-right-width: 0px; background-image:
    none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-top-width: 0px" border="0"
    alt="How automated testing fits into a modern application lifecycle"
    src="http://blog.hinshelwood.com/files/2012/09/image_thumb43.png"
    width="640" height="360"/></a><br /><strong>Figure: How automated testing
    fits into a modern application lifecycle</strong></p>

    <p>You can find many classifications of automated tests from all over the
    internet and this is just a simple grouping classification rather than a
    definitive list:</p>

    <ul>

    <li><strong>Unit Tests</strong> – Discreet developer tests that exercise a
    single thing in isolation  </li>

    <li><strong>Integration Tests</strong> – Discreet developer tests that
    exercise more than one thing working with other things  </li>

    <li><strong>UI Testing</strong> – Indiscreet functional tests that exercise
    the User Interface directly</li>

    </ul>

    <p>The rest are mainly manual or based on highly complex tooling that is run
    against your software to determine things that can be done better and not on
    a constant basis.</p>

    <h3 class="icon-integration">The integration of automated testing</h3>

    <p>The integration with Visual Studio and Team Foundation Server is achieved
    simply by implementing a Test Adapter to allow your tests to be catalogued
    and executed from within the Visual Studio Test Runner.</p>

    <p>While this looks like a small thing initially, and especially as the code
    necessary to achieve it is fairly simple, it opens the door for a whole
    bunch of interactions. First is the ability to surface the pass/fail state
    of the tests in the Visual Studio Test Runner. This then enables one to have
    those tests executed either as the result of a user action, or as part of an
    automated build in Team Foundation Build.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/09/image46.png"><img
    title="Axe from Odin Tech showing how it is done" style="border-left-width:
    0px; border-right-width: 0px; background-image: none; border-bottom-width:
    0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right:
    0px; border-top-width: 0px" border="0" alt="Axe from Odin Tech showing how
    it is done"
    src="http://blog.hinshelwood.com/files/2012/09/image_thumb44.png"
    width="640" height="452"/></a><br /><strong>Figure: Axe from Odin Tech
    showing how it is done</strong></p>

    <p>This on its own would be awesome, but then you add the ability to
    associate <del>any automated test that Visual Studio understands</del> any
    MS Test Unit Test with a Test Case in Team Foundation Server and you are
    suddenly able to push those test results into Team Foundation Server and
    surface them in reporting.</p>

    <p>Now we know what tests we have, what the last result was and against
    which build…</p>

    <h3 class="icon-solution">The solutions for automated testing</h3>

    <p>There are many way in which to create automated tests and just about as
    many solutions. You should look for something that is easy to maintain, but
    don’t be afraid to make changes to your software to allow that to happen.
    </p>

    <p>The value of automated testing is to reduce the effort required by your
    Development Teams to produce a fully tested version of your software every
    iteration. As our Development Team is delivering value we need to make sure
    that we are meeting the criteria by which the customer will accept that the
    product is complete as well as the engineering assurance that the technical
    details are correct.</p>

    <h4 class="icon-solution">Unit Testing</h4>

    <p>The value in unit testing is to have built in validation that your
    developer not only created the correct functionality, but that any
    refactoring work did not impact that existing functionality. Think of it as
    a safety belt for engineers.</p>

    <ul>

    <li><a href="http://www.microsoft.com/visualstudio"
    target="_blank"><strong>Unit Testing</strong></a> from Microsoft – Create
    unit tests in almost any framework and use a unifies test runner to manage
    and run them all  </li>

    <li><a href="http://www.speclog.net/"
    target="_blank"><strong>SpecLog</strong></a> from Techtalk – Turn your
    acceptance criteria in TFS into executable specifications that are still
    legible to the business and synced with TFS.</li>

    </ul>

    <p>However you do Unit Testing it is the choice of the engineers as
    professionals to implement it and not an organisations decision. You cant
    consider yourself a modern software engineering professional with out having
    what amounts to executable specification of what the software was supposed
    to do and thus proving that it does indeed do it with passing Unit
    Tests.</p>

    <h4 class="icon-solution">UI Testing</h4>

    <p>Just as the modern professional engineer does Unit Testing the modern
    Test Engineer requires to automate all of the testing that they do. While
    optional in yesteryear there is no way to build modern applications without
    the kind of UI automation that is readily available. These UI Automation
    technics either takes the form of generating code from manual tests, or from
    recording of automation directly against an application and often involves
    both.</p>

    <ul>

    <li><a href="http://www.microsoft.com/visualstudio"
    target="_blank"><strong>Coded UI</strong></a> from Microsoft - Coded UI
    takes Action Recordings from a manual tester and allows an engineer to
    generate the code required to test and assert that the UI works  </li>

    <li><a href="http://experitest.com/"
    target="_blank"><strong>Experitest</strong></a> - Records tests from mobile
    devices including Android, iOS, Windows Mobile and Blackberry  </li>

    <li><a href="http://www.axetest.com/"
    target="_blank"><strong>Axe</strong></a> from Odin Software – Stores test
    steps in Excel, generates automation and connects those automations to Test
    Cases in TFS  </li>

    <li><a href="http://www.soasta.com/products/cloudtest-lite/"
    target="_blank"><strong>CloudTest</strong></a> from Soasta – Delivers
    functional test automation capabilities for multi-touch, gesture-based
    applications.  </li>

    <li><a href="http://www.testarchitect.com/"
    target="_blank"><strong>TestArchitect</strong></a> from LogiGear – Create
    reusable keyword-based automations that allow testers to build tests like a
    jigsaw.  </li>

    <li><a href="http://www.froglogic.com/squish/"
    target="_blank"><strong>Squish</strong></a> from FrogLogic&nbsp; - Create
    cross platform user interface testing for Java, Windows, iOS, Mac and
    web.</li>

    </ul>

    <p>&nbsp;</p>

    <h3 class="icon-conclusion">Conclusion</h3>

    <p>Automated Testing is something that is no longer the purview of the
    larger development shops but part of the basic needs of any organisation
    building modern software. There is also no one tool to fit all of your
    scenarios and you may find yourself working with many of the products and
    solutions listed above. However all of these solutions integrate with both
    the Visual Studio IDE or Team Foundation Server to give you a consistency of
    design, execution and reporting that can’t be surpassed by any other
    product. If you have created your own tools for automated testing for your
    software then they can be easily incorporated by crating a simple Test
    Adapter.</p>
  - ''
  post_id: '8868'
  post_date: '2012-09-24 21:33:30'
  post_date_gmt: '2012-09-25 04:33:30'
  post_modified: '2012-09-24 21:33:30'
  post_modified_gmt: '2012-09-25 04:33:30'
  comment_status: open
  ping_status: open
  post_name: automated-testing-in-a-modern-application-lifecycle
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '97'
  - meta_key: _thumbnail_id
    meta_value: '8869'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_focuskw
    meta_value: automated testing
  - meta_key: _yoast_wpseo_title
    meta_value: Automated Testing in a modern application lifecycle
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      You can't build modern applications without some form of automated testing
      that is integrated with your application lifecycle.
  - meta_key: dsq_thread_id
    meta_value: '868307256'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:7:"default";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1dLq5cg
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474334418;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:8829;}i:1;a:1:{s:2:"id";i:9487;}i:2;a:1:{s:2:"id";i:9469;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2012-09-24-automated-testing-in-a-modern-application-lifecycle.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '1069'
  comment:
  - comment_id: '1416'
    comment_author: >-
      Automated Testing in a modern application lifecycle | Visual Studio ALM |
      Scoop.it
    comment_author_email: ''
    comment_author_url: >-
      http://www.scoop.it/t/visual-studio-alm/p/2866380064/automated-testing-in-a-modern-application-lifecycle
    comment_author_IP: 89.30.105.121
    comment_date: '2012-10-03 06:26:35'
    comment_date_gmt: '2012-10-03 13:26:35'
    comment_content: >-
      [...] If we are building software in a modern application lifecycle there
      is no way that we would be able to deliver modern applications without
      some form of automated testing. Automated testing is the one thing that
      makes sure that we are able to deliver working software that meets the
      quality bar while still keeping the cycle time at an acceptable
      level.&nbsp; [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1349270795.54";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:12:"1349284002.2";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1417'
    comment_author: Brian Baker
    comment_author_email: brian@holisticdeveloper.com
    comment_author_url: ''
    comment_author_IP: 66.192.178.58
    comment_date: '2013-04-18 12:08:00'
    comment_date_gmt: '2013-04-18 19:08:00'
    comment_content: >-
      Martin, are you sure it is the case that you can "associate any automated
      test that Visual Studio understands with a Test Case in Team Foundation
      Server?" The following suggestion on User Voice and forum posting at MSDN
      imply that only MS Test is supported.


      http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2956423-allow-all-unit-test-types-to-be-associated-to-a-wo


      http://social.msdn.microsoft.com/Forums/en-US/vstest/thread/62a705ef-07b3-4153-84f2-e3c0377f62f1/
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '867312384'
  - comment_id: '1418'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 184.78.139.42
    comment_date: '2013-04-18 13:08:00'
    comment_date_gmt: '2013-04-18 20:08:00'
    comment_content: >-
      I am fairly sure that only MS Test tests are supported by MTM at the
      moment. I would expect this to be better in dev12 but I don't know for
      sure...


      You can wrap another test in an MS Test... nasty work around I know... but
      you should be able to generate that code if need be...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1417'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '867312384'
    - meta_key: dsq_post_id
      meta_value: '867362530'
  - comment_id: '1419'
    comment_author: cpiock
    comment_author_email: cpiock@outlook.com
    comment_author_url: ''
    comment_author_IP: 79.50.104.192
    comment_date: '2013-07-29 16:20:00'
    comment_date_gmt: '2013-07-29 15:20:00'
    comment_content: >-
      Hi Martin. Take a look at www.ranorex.com. I have done a little evaluation
      between coded ui and ranorex and i personally think that ranorex is much
      more easier to use :-). Do you know that tool? Any experience from others?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '980243724'
  - comment_id: '1420'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 65.102.165.25
    comment_date: '2013-07-29 17:33:00'
    comment_date_gmt: '2013-07-29 16:33:00'
    comment_content: >-
      If you would link to your evaluation instead of just the marketing page
      that would be great. Do you have integration between TFSMTM and your
      tools?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1419'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '980243724'
    - meta_key: dsq_post_id
      meta_value: '980333886'
  - comment_id: '1421'
    comment_author: cpiock
    comment_author_email: cpiock@outlook.com
    comment_author_url: ''
    comment_author_IP: 62.101.0.30
    comment_date: '2013-07-30 14:04:00'
    comment_date_gmt: '2013-07-30 13:04:00'
    comment_content: >-
      The intention was not marketing and i'am not a member of the Ranorex team
      :-). I was only curious if you know that tool and if you have any
      experience about. I have seen the following pros in my evaluation

      - Testing of no .net application (Java, Powerbuilder ...)

      - Easier to use even from no code gurus

      - More control properties are supported then in Coded UI Test

      - Integration with MTM over Coded Ui Tests (a little bit tricky)

      - Easier then the LabManagement with his agents and controllers

      - Screen compare if the property compare doesn't work
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1420'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '980333886'
    - meta_key: dsq_post_id
      meta_value: '981305588'
  - comment_id: '1422'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 65.102.165.25
    comment_date: '2013-07-30 16:10:00'
    comment_date_gmt: '2013-07-30 15:10:00'
    comment_content: >-
      The problem is not necessarily features. There are many tools like Axe and
      Squish that provide integration into your ALM platform. Without that and
      without the reporting and data that you gain it almost does not matter
      what the tools capabilities are. Without transparency of metrics and
      visibility to my organisation of these results and implication in context
      with the rest of my ALM initiatives I am spinning in the dark. I would
      stick with software that integrates even if it is not as feature fully...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1421'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '981305588'
    - meta_key: dsq_post_id
      meta_value: '981433597'
