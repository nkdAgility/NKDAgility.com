- id: 221BbTUqw7Q
  title: What are 3 key takeaways for a scrum team after attending an APS immersive learning experience course?
  description: Discover 3 essential takeaways for scrum teams from the APS immersive learning course, enhancing their adoption and improvement of professional Scrum.
  captions: |-
    Ah, so three. What are the three key takeaways to attending the APS class, especially the immersive APS class? 

    Um, so I think the first one is that fundamental understanding of the underlying principles of scrum and the practices that make it up, right? That's kind of key. But I guess at a double advantage to that of the immersive class is that you can augment that story with how you're actually implementing it within your organization, right? So you can, although Martin's going to say this is how a product owner works, that's in a box. Here's the definition of product owner from scrum. 

    Um, you're then perhaps going to go try some of those things inside of your organization and you're going to be like, "Oh, well this bit sucks and that bit sucks and we can't do this bit," and the organization says we're not allowed to do that. And then you can come back and we can tweak it, right? There's not one way to do scrum; you can tweak it to figure out how it is that it can be most effective within the context of your organization. So that's really the first one: that empirical understanding of the underlying principles of scrum and how they work. 

    Um, the second one is probably that bit at the end, the getting started right. The, um, you know, the getting rid of the Klingons that have come into your process or, um, uh, you know, scraping the Klingons off the starboard bow, if anybody remembers that. 

    Um, I may be too old; that's what it is. I'm going to be too old. But, uh, the also the getting started right. Lots of teams really struggle. We understand this scrum thing now. 

    Like, what do I do? What's next? Um, and the advantage to the immersive classes is that's happening continuously throughout the class, right? Rather than you having a two-filled day or here's a week of training and then Monday we're doing something different and we don't know where to start, you get introduced to a little piece at a time. Try it within your organization a little piece at a time. Try to try it little piece, little piece, little piece. 

    Um, so that's probably the second key takeaway. Man, what's the third? Third one? 

    Um, probably learning what is not scrum, right? That, that I mentioned, like the Klingons, the things that are built up in our process. But there's also not just institutional knowledge within our organization, um, but institutional knowledge within our industry of what people think scrum is. So you'll have people who have done scrum in other organizations that also bring their Klingons and barnacles, right, to the story. 

    Um, and when you mush that all together, you end up with something that perhaps doesn't look like scrum at all, doesn't have any empiricism, doesn't close any feedback loops, doesn't have working products at the end of every iteration. And that's fairly common, right? So being able to clearly understand what is and is not scrum so that you can choose the not, even if you're doing the core right. 

    Um, and I think that's a huge key takeaway for the APS class. 

    Thanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 2A2OCRXZ20I
  title: Free Workshop 09 - How to run a Daily Scrum
  description: Join our free interactive workshop to master the Daily Scrum! Learn its purpose and how to run it effectively. Don't miss out!
  captions: ""
- id: 2AJ2JHdMRCc
  title: Why is DevOps such a Critical Element of Software Engineering?
  description: 'Discover why DevOps is essential in software engineering! Join Martin Hinshelwood as he unravels its critical role in delivering client solutions. #DevOps #shorts'
  captions: So DevOps is the union of processes, practices and tools to enable the continuous delivery of value to our customers. It's absolutely critical to our ability to successfully build great products because it is the glue, the ideas that enable that to happen. Where do we come up with the strategies to be able to get our product in front of our customers quickly and get that feedback?
- id: 2ASLFX2i9_g
  title: '7 deadly sins of Agile: Gluttony'
  description: "Discover the pitfalls of gluttony in Agile! \U0001F354 Learn how bloated backlogs and overloaded sprints waste effort and hinder success. Watch now! \U0001F4CAâœ¨"
  captions: |-
    One of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated. Bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team, you're working with a team, and you go to look at their product backlog and there's, let's say, six or seven people working on this team and they have 5,000 things in their product backlog, they're doing it wrong. Right there, that's greedy. They've eaten all those backlog items; they're sitting in their belly and they can't walk around, they can't move. They're not going to be nimble, right? They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.

    Another way gluttony manifests is during Sprint planning, right? Shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint, and that continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it. Taking on too much and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, maybe not every Sprint is probably okay, right? You're not going to be successful in everything you do, but if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, are we taking on too much work? Are we doing too much? Are we taking on too much work?

    So that's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. This Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide, and they found that only 35% of the features that we build are used by our customers. Sixty-five percent, I think the phrase was "used little if ever." So hopefully, we can stop building them in the first place, right? That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long would your build take if you removed 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams would be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things.

    So the way to... ah, man, loads of teams just need a gastric bypass for that, right? How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog, right? It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, right? Features that aren't used by your customer because I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap and that they knew their customers way, way better than anybody else, and there's no way they were wasting 65%. It was a lot less, that's what they said.

    So we said to them, "What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?" Like, "This one, this one's the best." So we got in amongst the code, we added application insights. Application insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box, it does a bunch of stuff. But then if you add this as a feature, you can say, "How many times do users click that button of our body of users? How many of them have clicked that button?" You can get all of that data.

    We analysed their product end to end. We collected data for three months, and then we went back to them and said, "Here's the 7.5% of features that your customers use. All the rest was waste." Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers.

    So, no, don't eat the whole thing, right? You've got to figure out how do I pick and choose what I'm going to eat? Don't eat the whole feature at once, right? You don't know if you like haggis yet, so don't order a whole plate full. Get like a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more, right? But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 2cSsuEzGkvU
  title: ' shorts 7 Virtues of agile. Humility'
  description: 'Discover the power of humility in Agile! Join us as we explore one of the 7 virtues that drive successful teams. #Agile #Shorts #NakedAgility'
  captions: Bringing modesty and respect for others into the conversation in agility is going to help you build trust. Right? Build those empathetic relationships both within the team, within the organisation and leadership, and outwardly towards customers. Don't make assumptions. Right? That's the key risk here is making assumptions. Um, and also cognitive bias, although that's more difficult to detect in yourself. Usually, you need somebody else to look in on it to point it out. Um, but then do you listen to those people? Do you realise that perhaps other people's perceptions are important to our decision making?
- id: 2Cy9MxXiiOo
  title: What is a sprint goal?
  description: 'Discover the importance of a sprint goal in Scrum! Join Martin Hinshelwood as he shares tips on crafting effective goals for your team. #Agile #Scrum #Shorts'
  captions: |-
    So the question is, what is a Sprint goal? 

    Where a vision is strategic, a product goal is intermediate strategic. The Sprint goal is really tactical. It's what are we doing just now to make progress towards our product goal, towards our product vision. 

    It has to be really something that the stakeholders can take at the Sprint review and provide you with actual feedback. We like this because, or we hate this because of this other thing. It's a tactical goal that your team is working on right now.
- id: 2I3S32Sk8-c
  title: What would you advise a scrum team to do in their first 4 weeks?
  description: Kickstart your scrum journey! Join Martin Hinshelwood as he shares actionable goals for new scrum teams in their first 4 weeks. Embrace agile success!
  captions: |-
    So how, what should a Scrum team do within their first four weeks? That's a really interesting question because if their intent as a team is to try Scrum, then what I suggest they do within their first four weeks is try Scrum right. There are all sorts of great reasons why we shouldn't do some of the things in Scrum. There's reasons why we shouldn't have as much focus as we would like on the topic, right? Because we get multiple things that we have to show progress on. There's lots of good reasons why we can't have a single product owner; it has to be multiple people. There's lots of good reasons why we can't have a single unified backlog because we're working on too much stuff. And there's a reason why we can't have a product goal because, you know, we can't decide what it is we're working on.

    I think all of those are just excuses for not being able to find focus, you know, commitment, right? To dare to change the way we do things in order to try something different and see if it works for us. So my advice for teams just starting out in Scrum is do that, right? Just do Scrum. A great set of exercises that I do with teams, I have a Scrum startup exercise that I do. Happy to share it with anybody that's interested. What I basically do is I teach Scrum and then provide the startup exercise. They see what Scrum is supposed to look like. Again, the EPS is great for that, right?

    And then have the people that are doing the work that now understand Scrum create an organisational change backlog. That's something you can do in the first four weeks. If we're going to try and do Scrum, do it and write down every reason you can't. Write down every friction that you hit. Write down everything that needs to change in your organisation in order to be able to do this thing and make that list open and transparent to leadership so that they can see what's getting in your way. Because quite often they can't; it's very opaque to them. Make it transparent, right? That's the very essence of Scrum, increasing transparency so we can see what's going on and perhaps do something about it. Stop moving my advice.
- id: 2IuL2Qvvbfk
  title: Biggest contribution from a Product Owner that you know of
  description: Discover the impactful role of a product owner in agile teams as Martin Hinshelwood shares a remarkable contribution that inspires product vision.
  captions: |-
    Question is, what's the biggest contribution from a product owner that you know of? I think there are a lot of great product owners out there, great product managers, but the one that I always think of when I think about great product management is kind of two people in the same organisation, both kind of product owners in the same product, which is confusing because then there's two product owners, right? But I'll try and explain.

    That's effectively Brian Harry, who was the product unit manager for Team Foundation Server for the entire developer division at Microsoft back in the day. When I was getting into all of this stuff, he was the man. He realised, as the single responsible person for about 650 people working on this product, that a two-yearly release cadence kind of sucks, right? So his was the first team in Microsoft to start really en masse moving towards a greater degree of agility.

    The way they came up with, within the context of Microsoft, for doing that stuff is almost the model that was replicated across the organisation. It's never going to be identical, right? But that's when, if you hear Microsoft talking about their season-based model, which they do talk about, they have the spring release and the fall release, right? This kind of cadence of bigger things that they're working on, of product goals maybe, right? That's really what they're talking about, is this season-based model where they have that urban flow of work and ideas.

    Brian Harry worked on that, very much supported by my other favourite gentleman, Aaron Bjork, who was, in effect, if you're not familiar with TFS, and it's now called Azure DevOps, right? That's effectively what it is. Back in the day, Microsoft was doing two-year releases of Team Foundation Server and Visual Studio, right? They found that the cadence for closing the feedback loop was actually four to six years because they were in a two-yearly cadence. It's two to three times whatever your delivery cadence of usable working product is. That's ultimately your feedback cadence because what they found was that they would do a beta halfway through to get feedback from people, but as soon as you've shipped that beta, you're now working on this stuff that you need to do for launch, and the feedback you get on the beta you can't actually fit in here because you don't have any time left. You're all booked, right? You've booked out that time for the stuff you need to do to get it to production.

    So then you start thinking about, well, maybe we can fit it into the next yearly release, and they were able to fit some stuff in there. But what they also often realised was the closer they get to that production release, by the time they finish the beta, they're planning for the next two-yearly release, right? So they've already booked out this time as the feedback comes in on this product. The earliest you can possibly get that feedback from the beta into the actual working product is two years down the line, right? Or two and a half, up to two and a half years down the line. But in actual fact, some stuff might not make it into that time box, so it's the next time box, which is another, which is four years, four to four and a half years down the line, which is just too long, right? It's just too long.

    So what, in realising that, this leadership group in this organisation, in this part of the organisation, they realised that they had to do something different, and he led the way in his organisation in making those changes, largely leveraging the respect for his choices, his wisdom within the organisation. The respect and the rest of the organisation for his wisdom allowed him to maybe do things that other people weren't able to do or hadn't been able to do in the past. He is relentless. This guy, he'll work 20-hour days, no problem at all. He's just one of those folks that has that outlook.

    Him, along with Aaron Bjork, effectively changed the way Microsoft do business, changed the way Microsoft approached building products, and changed the whole ethos. I mean, not without support, right? Somebody else has to come along and water those ideas and help them grow, and that was Satya, who was able to come along into Microsoft and then start encouraging a lot of these ideas. But the kernel for these ideas was pre-Satya. It was the Azure DevOps team, and they moved to a three-week continuous cadence.

    So, in fact, the product owner, that's how I see the product unit manager, right? Fully fiscally accountable person in your product structure. They're the ones that are actually best placed to enable changes in your organisation anyway. They're the ones with the money. They're the ones with, well, if I'm going to spend your money building this product, I need to be able to control this and this and this in order to be most effective at building this product. They're the ones who need to have that argument. It's not your agile coaches or your consultants or any of these people. Like, what the hell do they know about your business, right? That's the attitude internally.

    But one of the core purposes of that agile coach and consultant is to help that person who can make that change, who does have that respect inside of the organisation, who does have that fiscal accountability, make those changes. And that was the huge, I just think it's such a huge contribution that Brian Harry and Aaron Bjork made to this idea of building products inside of Microsoft, right? But building products in general, because the whole ethos of Azure DevOps is about DevOps, right? It's about shortening those feedback loops. What tools do we need to support that idea? And yeah, that for me is the most powerful story.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 2k1726k9zvg
  title: What is the difference between a newbie scrum master and a professional scrum master?
  description: "Uncover the true essence of a Scrum Master! Explore key differences between newbies and pros, and enhance your leadership skills in Scrum. \U0001F31F"
  captions: |-
    Oh, I kind of like that question. What's the difference between a newbie Scrum Master and a professional Scrum Master? I feel like neither of those things exist, right? I think that's where I would go initially, and I would say that there's no such thing as a newbie Scrum Master. You become a Scrum Master because you've demonstrated that competence in your team to be able to help them be more effective, right? So you're not really a newbie; you're just picking up that accountability of the Scrum Master. You are an experienced, effective professional at that point when you pick up the accountability of the Scrum Master. 

    So I feel like that newbie is a bit of a thing, and really there's no such thing as a professional Scrum Master. That's just a Scrum Master, right? Just as there's no such thing as a newbie Scrum Master, a professional Scrum Master is Scrum.org's brand of how they explain things. But if you look at the Scrum Guide, it doesn't talk about professional Scrum Master or true Scrum Master or certified Scrum Master, right? It doesn't talk about any of those things because there is just the Scrum Master.

    And I think if we were to look at professional Scrum Master and see, well, what is it? It's trying to create that idea around we need to approach the role of a Scrum Master from a professional's perspective. It's not just, we're not just playing the Scrum Master; we're not just decking around as the Scrum Master. It's a professional role that provides value to the organisation. It provides value to the team. It's picking up accountabilities that perhaps if everybody on the team picked them up, because maybe everybody on your team is capable of picking up the accountabilities of the Scrum Master, the team would have a hard time getting anything done if everybody's picking that up. 

    So that's one person who the team respects, says, "Well, I'll pick up some of these things and go sort them out so that you can all focus on delivering valuable product and being as effective as you can at delivering valuable product." And here's some things that I'm going to pick up and help with and help enable you as a team to do the stuff that we need to do, right? And I think that's that idea that Scrum.org is trying to sell of the professional Scrum Master. 

    Of professional Scrum is that we're doing the thing rather than going, "Well, you know, we, you know, I'm going to be the Scrum Master," but in actual fact, it's Sprint planning. I'm going to, you know, tell the team, "Right, you're not taking on enough work this Sprint. I'm sure you can fit some more work in there." Oh, Bob, have you, you don't have enough stuff assigned to you? I think some more stuff, you can take on some more stuff this Sprint, right? And that idea of, well, that's not Scrum Master, right? That's, that's, well, I guess I might say that's a project manager. But even if you were a project manager and you were doing that, you kind of suck at project management too. 

    So that's just somebody who sucks. That's not a professional. When you're a professional, you figure out what are the things I can do to help my team be more effective, right? Help the group of people that I'm working with or that I'm managing, right? It doesn't matter what terminology you use. How do you help that group be more effective? Stop doing things that are less effective or try and change things in your organisation that are less effective and increase their effectiveness. That's really all we're talking about from a professional Scrum Master perspective is do the thing. Don't just mess about the edges of the thing; actually do it.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 2KovKxNpZpg
  title: Pet Peeve in Scrum
  description: 'Join Martin Hinshelwood, Scrum expert, as he shares his biggest pet peeve in Scrum consulting. Discover insights to enhance your Agile journey! #Scrum #Agile #Shorts'
  captions: "So something that really annoys me in Scrum is this focus on the mechanics of Scrum and less focus on the principles of Scrum. People and organisations that will tell you that you're not doing Scrum if you're not standing up, it's just ridiculous. It's not even a conversation we should be having. We should be focusing on the principles: empiricism, transparency, and just getting stuff done."
- id: 2QojN_k3JZ4
  title: ' shorts 7 Virtues of agile. Diligence'
  description: 'Discover the power of diligence in Agile! Join us as we explore one of the 7 virtues that drive high-performing teams. #Agile #Scrum #Shorts'
  captions: And that is the diligence that your organisation expects. The reason organisations and businesses don't really talk about the definition of done from a leadership perspective is because it's just expected that we'll have a level of quality that they're able to use. That's just the default. But unfortunately, it's not the default in many teams.
- id: 2r7B8JAxC_o
  title: Microsoft Teams Issues
  description: Explore common Microsoft Teams issues and discover effective solutions to enhance your collaboration experience. Troubleshoot with ease!
  captions: ""
- id: 2Sal3OneFfo
  title: Azure DevOps Migration services. Part 1
  description: Discover Azure DevOps Migration Services with NKD Agility in this insightful video. Transform your project management and product development today!
  captions: |-
    There's a number of migration services that we offer. They're kind of related as two sets of tools. There's Martin as your DevOps migration tools, which is on GitHub and available for people to use, but we help people use it. We do it for customers when they don't want to learn it themselves. So that's the more targeted migration tool. 

    I want to move, I want to stuff, I want to merge stuff. So that's the actual moving individual work items around. That's what I want to do. Then that's one of our services. The other one is a kind of managed import into Azure DevOps. Microsoft have a tool called the Azure DevOps data migration tool, and that data migration tool takes the whole thing.
- id: 2tlzlsgovy0
  title: 6 things you didn't know about Agile Product Management but really should Part 2
  description: "Unlock your team's potential! Discover 6 crucial insights on Agile Product Management to align vision and strategy for maximum impact. \U0001F3AF\U0001F4C8"
  captions: |-
    Is there a product vision that lays out the strategic goals? Do all members of the team understand both, and are they able to see how the work that they do every day contributes to your goals and strategic objectives? If you don't have that story, if you speak to the team and you ask them what the vision is, what the strategic goals are, and they need to go look something up, then they don't fundamentally understand them. They don't understand how their work contributes, which means that we're probably not being very agile. 

    We need to push responsibility down the organisation. We need the people that are making the tight technical decisions every day to have the most context so they can make the best decisions possible to maximise the value that you get in your product.
- id: 3-LDBJppxvo
  title: The Importance of Delivering Working Software Every Iteration
  description: 'Discover 6 surprising insights about Agile Product Management that can transform your approach! Watch now for essential tips. #agile #productmanagement'
  captions: Our team's delivering working software to at least some subset of real users every iteration, including the first, and gathering feedback. If you're not doing that, you're probably not very agile. The purpose of agile is to close those feedback loops and get tight interaction with our customer. Everything that we do before we actually get our product in front of our customer is an assumption, and we need to validate those assumptions by getting work in front of real users as quickly as possible so that we can ensure that, as much as possible, we're going in the right direction and not the wrong direction. Maximise the amount of work not done. Maximise the value that you get to your stakeholders.

