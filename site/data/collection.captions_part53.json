[
  {
    "id": "Tz784ysJX7Q",
    "title": "Balancing Speed and Stability in Delivery",
    "description": "Discover how to prioritise quality over speed in software delivery. Learn the true costs of rushing and why stability builds trust.",
    "captions": "So one of the questions I often get is how do we potentially, as delivery managers, balance the difference between speed and stability? Right, when you're under pressure for tight deadlines. And I'd assert that there's a fundamental problem with the question, and that's that we're under tight deadlines. Why are we under tight deadlines? We tend to be, because let's be honest, most deadlines exist because people don't believe you can meet them. That's why a deadline—this is the ridiculous thing about deadlines.\n\nSo there are some deadlines which are not even real deadlines that are coming, the external deadlines. Right, so let's say you've got a business, you're something within the context of, let's say, a regulated thing. Something's regulated by the government. The government brings in a new rule, and your software does not currently comply with that rule. And the government says, \"By this date, if you don't have compliance, we're going to start finding you x amount of money for every day that you're not compliant.\" Right? That, for many businesses, they would decide that that's just an absolute deadline. But the reality is that's not even an absolute deadline either. We can pay the fine, right? We can pay the fine. How much is it going to cost to build a feature? How long is it going to take? And what are the implications of trying to push for that feature to come out faster than we are able to deliver that feature? Right?\n\nPeople are going to start tripping over their feet if we start pushing them too hard. They're going to fall on their face, and if they fall on their face, the software is going to fall in its vase. What's the impact of that on our brand and our business? And is it worth the fine? Normally, the fine's a lot smaller than the cost implications of going too fast. So long-term, you're probably not wanting to pay all those fines, right? But short-term, you need to build the feature in the right way, with the right capabilities, with the right level of quality. Otherwise, you're going to start eroding your customers' confidence in your product. You're going to start eroding the brand awareness of your company. This is not okay, right? It's not okay to ship poor quality, unstable product under almost any circumstances.\n\nThe only circumstance I can think of—even so, the circumstance I think about is our company will go out of business next week if we don't have this feature. I think that's totally arbitrary, but I've heard that one. But if we ship that feature and we have that feature, but it doesn't work properly and it's buggy, is that actually going to help us? Right? Is that actually going to help us stay in business? I would be dubious as to that. Maybe we can try and hide it. A good example of that being successful is Zoom during the pandemic, right? They succeeded. I actually don't understand why they didn't get more crap for it, but what they did was when the pandemic happened and everybody started working from home, their user base massively multiplied, right? Very, very quickly, massively multiplied. And what they found was that their systems could not support that number of users.\n\nBut if you start capping users, right, and saying to people, \"No, we can't have another user on the system,\" they're going to go somewhere else. They're going to go to your competitors. They're going to go to Teams. They're going to go to WebEx. They're going to go to somebody else. So you don't want to do that, right? Good business practice is—sorry, what good? That's one of those could be either way. Moral and ethical business practice would have you either cap the number of users until you can increase capacity and bring on more people, bring on more capability, right? But Zoom chose a different route. They decided that maintaining that user curve and supporting it was more important. So they started systematically building features more quickly at lower quality. They started ignoring security concerns because security is a lot of your cost, right, for building stuff, validating and checking. So let's cut all of that, and then we can build more stuff.\n\nAnd they deliberately turned off encryption. So one of Zoom's selling points was end-to-end encryption. But end-to-end encryption adds about 40% load. I'm just ballparking that. I'm sure there's all sorts of variations there, but 40% load. So they can immediately have 40% more users stable on the system by turning off encryption. But they didn't want to turn off encryption and tell their users they were turning off encryption because that was a huge selling point for the product, having encryption. And what would existing users do if they were told that it was encrypted? So there was a little green light in the corner of Zoom, and it was the encryption light, and it would go green when the communication was encrypted. They turned off the encryption, but they changed the code so the light continued to be green. Right? That's a reduction in quality. That's a massive, massive business risk, and they were caught. And that had a massive impact on their brand awareness and a massive impact on their business.\n\nThere are still companies today that have Zoom blocked as a product within their organisational network that they will not allow it to be used, and it's because of that moral and ethical decision that was made at senior levels of that organisation to reduce quality, reduce stability of features that users expected to work effectively. They did. They were even worse. They kind of lied. It's kind of like the Volkswagen scandal a little bit, right? Except I don't think anybody died. But don't reduce quality in order to ship features quicker. It has an impact, and it has—because we're building complex systems, it often has an impact you're not expecting. It often pushes you into a corner, and you're then left with those moral and ethical decisions, and you have to go a particular way. One's going to suck, and one's going to be nefarious. And quite often, we as humans pick the nefarious one because it's easier, cheaper, more manageable in order to do that.\n\nSo how do you strike a balance between speed and stability? Stability is more important than speed—much, much, much more important than speed. Stability and quality is much more important than speed. Pay the fine if you have to pay the fine, but do things well and do things properly."
  },
  {
    "id": "TzhiftXOJdw",
    "title": "What more needs to happen before traditional organisations consider Agile?",
    "description": "Discover why traditional organisations hesitate to adopt Agile in a complex world. Join Martin Hinshelwood for insights on evolving project management.",
    "captions": ""
  },
  {
    "id": "TZKvdhDPMjg",
    "title": "One thing a client can do to ensure a successful Agile consulting engagement",
    "description": "Discover the key action clients can take to empower their agile coaches for success in this insightful short video with Martin Hinshelwood. #Agile #Coaching",
    "captions": ""
  },
  {
    "id": "tzmbqdEULUY",
    "title": "DevOps Migration. Downtime",
    "description": "Discover strategies to minimise downtime during Azure DevOps migrations. Learn from real-world examples and expert tips for a seamless transition!",
    "captions": "When you're doing a migration of data, downtime isn't of always great concern for organisations. If you've got 5,000 software engineers in your collection, you don't want it to be down for an extended period of time and your engineers not able to work. I'm going to put that in air quotes because it's not really true; not able to work for that period of time. \n\nSo, there's a couple of things that you do need to kind of understand in this context. Even if TFS or Azure DevOps is down, like offline, your engineers can still work. It's just more difficult for them to collaborate together. So, if they're using Git as the source control system, which is the primary source control system in Azure DevOps and TFS, then they're able to even share code in a way that works within the context of the tool, even when they're offline. That's how Linux was created; there was no central source control system and they sent patches to each other over email. \n\nRight? So, Git fully supports that. Obviously, they wouldn't have access to the work items, so they would need to know what it is we're working on for the time that it's down. But I will point out that if you plan it right, downtime can be absolutely minimal. The largest migration we have done was 2.5 terabytes, a collection that we moved up from on-prem in Europe to Azure DevOps. \n\nWe took the system offline because it needs to be offline to do the final part of the migration. We're actually moving up to the cloud. We took it offline at 5:00 p.m. on Friday, and we were back online Sunday morning. The engineers came in over the weekend to validate that things looked good. They did their cursory checks; everything's in the right place, that that's working, this is working, that kind of thing. \n\nAnd they were back up and running Monday morning. So, that's probably one of the very few people out there that have collections that big. But if you plan it right—and that took, in order to do a 2.5 terabyte system in that time, we probably took 3 to 6 months of planning and dry runs and validations and making sure everything's good in the data. \n\nDry runs are really important for that. Sorry, that's practice runs, right? To get the data out of the data centre in a timely manner, get it up to the cloud in a timely manner, or get it processed, because that can be quite failure-prone. You want to have done a dry run so that you know that's going to work. \n\nAnd perhaps have Microsoft on hand to help out if there are any issues. So, that was minimal downtime. I think that was about 5,500 software engineers, and they really, really had no downtime. 5:00 p.m. on Friday, back up in the morning. But they were a global company, so there was some downtime for some engineers in some regions, right? Because that's just unavoidable. But we minimised it as much as possible."
  },
  {
    "id": "U0h7N5xpAfY",
    "title": "Understanding the True Role of a Scrum Master",
    "description": "Discover why training is vital for Scrum Masters in this insightful video by Martin Hinshelwood, highlighting the leadership role in fostering thriving teams.",
    "captions": "Most Scrum Masters don't realise what's entailed in being a Scrum Master. Usually, that's because they've just been handed the role by their organisation, and perhaps the role of Scrum Master within their organisation is very different from what I'm talking about with the accountability of the Scrum Master within the context of Scrum. Because, you know, 25 years ago when Scrum was created, Scrum Master was a brand new term that didn't have any baggage, whereas today it has just about as much baggage, if not more, than any other term out there. \n\nSo, as a Scrum Master, you do need to disambiguate the role that your organisation has, perhaps the job title right, and all of the different accountabilities that are included in that that might be nothing to do with Scrum as well. That's fine with the accountability for the Scrum Master within the context of Scrum. That accountability is for maximising the effectiveness of the team. That's really the whole thing in a nutshell. \n\nIn order to do that, there are loads of tools that you need in your toolbox. There are loads of practices and processes that can make sense in that space, complimentary practices to Scrum. So, there's lots of things outside of Scrum that a Scrum Master needs to understand in order to be as effective as possible. But if you have a brand new Scrum team that have never done Scrum before, they're just starting out. The first thing that a Scrum Master is accountable for is the knowledge that the team have, their understanding of Scrum, their understanding of empiricism, the Scrum values. Teaching those things is really important for a Scrum Master. \n\nAnd then, once your team gets beyond that, engaging with not just the team but the rest of the organisation as well. Remember, the Scrum Master not only has accountabilities for the Scrum team, but they have accountabilities to the Product Owner and accountabilities to the organisation as well. So, enabling a team to be as effective as it can has much wider implications across the organisation. \n\nBecause usually, once you've dealt with the knowledge, the knowledge that the team have about empiricism, about working product, and the value contained within that, it's organisational impediments that get in the way. It's things your organisation is doing which impedes the ability for the team to maximise its effectiveness. Getting focus on them, building relationships within the organisation, understanding the business processes, why they're there, and inevitably how to change them is a critical role for a critical area of understanding for the Scrum Master. \n\nSo, if you want to be a Scrum Master, you don't have to come to Scrum training, but the Professional Scrum Master, and more importantly, the Advanced Scrum Master Class can really help you broaden your understanding of what is the context of a Scrum Master and become the most effective Scrum Master that you can be. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "U18nA0YFgu0",
    "title": "7 deadly sins of Agile: Wrath",
    "description": "Explore the impact of wrath in agile teams! Discover how blame deflection and lack of accountability disrupt productivity. Watch now! 🚀📊",
    "captions": ""
  },
  {
    "id": "u56sOCe6G0A",
    "title": "3 core practices of Kanban. Actively managing work items in a workflow.",
    "description": "Unlock your team's potential with our guide to active workflow management in Kanban. Learn to optimise processes and prevent bottlenecks for seamless operations!",
    "captions": "Once you've defined and visualised your workflow, the next most important thing you can do in a Kanban strategy is to actively manage the work within your workflow. That means that you are not just a bystander to the process. The people that are participating in the process are not just sitting there looking at a piece of work going, \"Yeah, that's not working very well,\" and not doing anything about it. The core practice here is to actively manage that. \n\nThis means that if we're finding that we've got too many things going on in a particular area, perhaps we should reduce our work in process. If we've got lots of folks sitting about doing nothing in a particular area because we don't have enough work, perhaps we should increase the amount of work. Actively manage your WIP. You want to avoid work piling up anywhere in your system. \n\nSo if you're viewing your visualisation of your Kanban and you see lots of things piling up before another group, another team, another process, what are you going to do about it? You can't just sit there and watch it pile up. That's not going to help us maximise the flow and the amount of value that we deliver. We need to do something about it. We need to go and figure out what the problem is. We need to change our system in order to make it better. \n\nMaking sure we don't have stuff pile up and making sure something doesn't sit there for ages is part of actively managing your work. There are so many teams that I work with where we start looking at this data, and the first thing I'll say is, \"Why has this thing been active for 250 days?\" It's something that's either fallen through the cracks, or it's some kind of bucket piece of work that exists forever, or it's just something that's taken a really long time because it's got blocked, or we didn't understand it, or any of those things. \n\nWhy is it still sitting there? How can we make it go away? How can we move it towards completion? If we have a history of things taking a long time, then we need to do something about that. If items on your board are blocked, how are you visualising and indicating that they're blocked? That was the first practice, but what are you going to do about it? Are you just going to sit there and go, \"Yeah, we've got all this blocked stuff, let's move on and work on something else?\" No, you need to actively manage the blocked items. \n\nHow do we unblock them? How do we unstick them? How do we get them moving through the system again? It's kind of like having a pipe. If the pipe gets clogged with whatever it is that's clogging the pipe, it's difficult for other things to move around it because our attention is continuously pulled in different directions. So we want to actively work to get rid of those blockages. \n\nAnything that's blocked, anything that's slow moving and getting old sitting there, and anything that is piling up—something that's stuck—usually things pile up behind blocked stuff. All of those things are required for you to be actively managing your work in a Kanban strategy. If you're struggling to implement a Kanban strategy, we can help or help you find somebody who can. Click on the link below and get in touch."
  },
  {
    "id": "U69JMzIZXro",
    "title": "Installing TFS 2013 Standard",
    "description": "Learn how to effortlessly install TFS 2013 Standard with Martin! Discover the simplicity of setup, including SQL Server and Reporting Services.",
    "captions": ""
  },
  {
    "id": "U7wIQk1pus0",
    "title": "Install TFS 2013 Basic",
    "description": "Join me as I guide you through a straightforward TFS 2013 installation. Perfect for beginners! Apologies for the fan noise—new mic on the way!",
    "captions": ""
  },
  {
    "id": "uCFIW_lEFuc",
    "title": "Sloth! 7 deadly sins of Agile.",
    "description": "Explore the sin of Sloth in Agile! Martin reveals pitfalls and the need for honesty in practices. Avoid complacency and align with Agile values! 🚀🐌",
    "captions": ""
  },
  {
    "id": "ucTJ1fe1CvQ",
    "title": "Unlocking the Power of Assumptions in Product Development: Why the PPDV Course is a Game-Changer",
    "description": "Unlock the secrets to impactful product development! Join me as I explore the importance of addressing assumptions and creating user-centred solutions.",
    "captions": "Let's start with the why. Why was the PPD V course created? Based on our observations of how companies work and how teams work, it seems there is still a lot of attention when it comes to delivery. One may also think that, hey, if we have to put just one goal of every sprint, what is the most important thing that we have to achieve? It is creating a product increment. So, it seems this is an important topic, right? But this is not enough, and I believe we forget, although we emphasise this a lot, that we are solving complex problems. \n\nWhat does it mean? We, along this product development journey, will make a lot of assumptions. What is even worse is that some of those assumptions, in some cases, I would dare to say even the majority of them, might be made unconsciously. So, we make an assumption, we take the next step, but we miss a learning opportunity. This may lead us to the feature factory problem. Of course, we have a lot of memes and stories like, \"Hey, strong stakeholders, stakeholder-driven development,\" and here we go, we have the feature factory problem in place. \n\nBut if we think about it deeper, there might be a lot of factors affecting this problem. Maybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not the healthy collaboration. And maybe we have chosen the wrong metrics. We have a misalignment here. All those things may cause the problem that we call the feature factory problem. \n\nSo, what do we want to do with this course? We want to emphasise the topic of assumptions in the complex world. In the complex environment, we don't know many things. In fact, in many cases, we don't know what we don't know yet. So, that's why this path towards creating high value, towards creating valuable products and solutions for the customers, should be some kind of way how we navigate around assumptions. \n\nOur biggest question is: what works best for the user? To find the answer with the knowledge gained in that course, we will embrace that. In fact, a full end-to-end empirical cycle requires discovery, delivery, and validation. So, those three elements work together to help us navigate around those assumptions. \n\nOur new course is designed for product leaders, product owners, product managers, but also for product teams in general. We believe that everyone involved in the product development process will benefit from this class. This class is designed to be a one-day course, around 8 hours, which can also be split into two half days or smaller chunks. \n\nIn this class, we will use a case study that will help us navigate through different concepts throughout this whole story, how to better incorporate discovery and validation into the product development process. Thanks to that, we will get familiar with working with assumptions, experimentation, collecting evidence, and an important word for this class: learning. \n\nSo, it will be a conscious learning process on how to build better and better products."
  },
  {
    "id": "uCyHR_eU22A",
    "title": "How do you select the most valuable items for the sprint backlog?",
    "description": "Master the art of selecting valuable Sprint backlog items in Scrum! Join Martin as he uncovers strategic insights for effective Agile planning. 🎨📈",
    "captions": ""
  },
  {
    "id": "UeGdC6GRyq4",
    "title": "Under employed - 30% upfront, balance when you are employed",
    "description": "Struggling to find your dream job? Discover NKD Agility's unique pricing for the under employed—30% upfront, balance upon employment. Watch now!",
    "captions": ""
  },
  {
    "id": "UeisJt8U2_0",
    "title": "7 Harbingers of the Agile Apocalypse. Plague.",
    "description": "Explore the parallels between ancient myths and today's agile challenges as Martin tackles the plague of incompetent coaches. Join the journey! 🌬️🐒",
    "captions": ""
  },
  {
    "id": "uetzybp7bf4",
    "title": "Building a Culture of Continuous Improvement",
    "description": "Empower your teams with financial transparency! Discover how to enhance decision-making and ROI in product development for continuous improvement.",
    "captions": "If you want to maximize your return on investment for the time and effort that people put into the products that you're creating, you need to try and enable and foster a culture where the people that are working within the context of your products care about the products and your customers. They care about what it is that they're creating because they feel that they have ownership of it. People care about things they have ownership of.\n\nThere are a whole bunch of ways you can do that. You're effectively fostering a culture of continuous improvement. Kind of a little bit of buzzword bingo there, right? But the idea is that when we talk about hypothesis-driven practices, we're having an idea, we're trying a little bit of that idea, we're getting feedback from the customer, and then we're adapting that idea to be better. So it's double down, right? We're going to invest more in this because it looks like it's awesome.\n\nWe've got pivot, which is we change what we're doing based on what we learn, or we've got kill it, which is stop investing in it and do something else. Like, don't keep doing this. You see Google are doing this a lot. There are two websites: Microsoft graveyard and Google graveyard. It's products that Microsoft and Google have killed over the years. Some of them are very high profile, some of them are lesser known. The more high-profile it is, probably it's been invested more money in it, and more people liked it, but not enough people. It didn't make enough of an impact to continue to invest in it for the cost that it is.\n\nSo if we want the people that are doing the work to care about our product, to care about our customers, and to spend money, which is their time, right? That's their time. Every time they do something, they're spending your money. Every person in your organization is spending your money. If we want them to spend that money diligently, I don't like that word, with care, then they need to understand the context within which they make that decision about whether they do this thing or they do not do this thing, or they do it this way or they do it that way.\n\nIn order to do that, and this is something that I see lots of organisations doing, I consider it a little bit of a dysfunctional behaviour. I see lots of organisations doing, especially professional services organisations, but also product organisations as well. They shield the people doing the work from the finances of doing the work because it's all shifted off to a finance department. What that does is remove the context of money from the people doing the work.\n\nImagine you trying to run your business and make decisions about what you're going to invest in and what you're not going to invest in, but you had no information about budget, you had no information about money, you had no information about spend, you had no information about revenue. How good are you going to be at making successful decisions to make a successful business if you don't have access to any of that information? It's going to suck, right? You're going to make bad decisions because you don't have all the information. That's every member of every team in your organisation. They're right now potentially making bad decisions about what features they build, about how they build those features because they don't understand the ROI effectively of what it is that they're doing.\n\nThey might think it's going to provide value, but do they actually know? And do they know what it costs to make? I'd advocate for every team doing their own P&L. What value are you as a team bringing to the business? What do you cost? I want value to be higher than the cost. If you're a team and you're thinking about those things, you're going to make different decisions because you have additional context. You turn every member of every team into an entrepreneur trying to figure out how do we maximize what we're doing in this work within the context of this product? How do we maximize the value that we return? What should we be working on? Well, we should be working on this stuff over here because that's going to give us the biggest return, right? Biggest short-term return, biggest long-term return.\n\nWhen you're thinking, you as a business owner, you as a CTO or CEO, are thinking about how you invest in your company. You're thinking about short-term wins to generate revenue quickly. You're thinking about the long-term objective of the business and how you're going to make money in the long term and sustainable income. That's all part of the story. It needs to be for every member of every team. You can't, if you hide that information from them, if you obfuscate it and create a filter so they don't see any of that stuff, they're going to make bad decisions.\n\nSo don't shield them from that. Build that into the story of how a team operates. Do P&L with every team. Have that filter up through the organisation, and I guarantee you'll see higher return on investments and higher value being delivered."
  },
  {
    "id": "UFCwbq00CEQ",
    "title": " shorts 5 kinds of Agile bandits. 2nd kind",
    "description": "Discover the 2nd kind of Agile bandit with Martin Hinshelwood! Learn about 'say-do' metrics in this engaging #shorts video. #Agile #Scrum #NKDAgility",
    "captions": "If you are working in the agile space and you're focused on, say, do metrics like original estimate versus actuals, then you are an agile Bandit. You want to stop doing that. It reduces the psychological safety of your team. It creates a focus on estimation rather than actually delivering stuff, and it encourages teams to focus more on the output—more stuff being delivered—than the outcomes that they're trying to achieve. Don't be an agile Bandit and don't use S do metrics."
  }
]
