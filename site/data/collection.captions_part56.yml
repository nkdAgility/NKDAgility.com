- id: wLJAMvwR6qI
  title: PPDV learning outcomes with Dr Joanna Plaskonka
  description: Discover key learning outcomes from the PPDV course with Dr Joanna Plaskonka. Enhance your skills in product discovery and validation today!
  captions: |-
    In our new class, we will learn how to work with assumptions. So first, a very important point: we actually introduce assumption to our product development dictionary. One of the very important points we will learn is this moment of realisation: oh, we have made assumptions, and not one, not two, but many. 

    So what kind of assumptions are we making when developing products, when discussing potential product futures, when creating product backlog items? This is a very important aspect, but we are not only talking about this fact. Okay, the assumptions were made, but which of them need to be validated? Obviously, not every assumption requires validation. Some of them are more important, less important; there might be a crucial role in ordering our assumptions. So which should be validated first and why? We are going to cover that in this course.

    Okay, so first point: assumptions realisation, ordering, and choosing which one to start. The second one, when we work with assumptions, the next important topic is about hypothesis. So we will learn how to create hypotheses and how to test them. In this class, we will pay a lot, a lot of attention to using the right data that will help you verify your hypothesis. 

    In fact, we may realise that our product development is actually navigating around some kind of tree of different hypotheses to test. We will also discuss the topic of the importance of desired signal or evidence strength on our product development process. So when we test assumptions, when we talk about hypothesis-driven development, it's important to realise that there will never be 100% confidence. But what is your desired level of confidence? And based on that, how high do you want to be when it comes to confidence? 

    We will be talking about experiments that will help us test the hypothesis. So we will learn how to manage costs related to product development based on those experiments that we choose, and this will be aligned with desired signal strength and desired confidence level. 

    Another valuable outcome for us is learning how to analyse experiments, how to take what we got out of our experimentation journey, and how to use this data in the decision-making process. So we already talked that learning is important in this class. So think about it as a way of targeted learnings that will help in this decision-making and critical thinking. 

    Thanks to that, we want to avoid toxic love related to our ideas and to what customers told us. Instead, we will be equipped with a certain way of thinking. Maybe for some of us, it will be a new perspective on product development, and thanks to that perspective, we will be learning a lot about what to do, what not to do, and how to use those concepts to be effective in our product development.
- id: wNgfCTE7C6M
  title: How does the PSU course help teams make more effective product development decisions?
  description: Discover how the PSU course enhances collaboration between design and engineering, empowering teams to make smarter product development decisions!
  captions: ""
- id: WpsGLkTXalE
  title: 7 signs of the agile apocalypse. Silence
  description: 'Discover the 7 signs of the #Agile apocalypse! Silence can signal disaster in #Agile. Join Martin Hinshelwood to learn why stillness matters. #shorts'
  captions: ""
- id: WTd-8mOlFfQ
  title: 'Part 2: Common Mistakes that Scrum Masters Make'
  description: "Discover common pitfalls for newbie Scrum Masters in part 2 of Martin Hinshelwood's 60-second insights. Elevate your agile journey with Naked Agility! #scrum #agile"
  captions: ""
- id: Wvdh1lJfcLM
  title: 'Mastering the Migration: Seamlessly Transitioning from TFS to Azure DevOps'
  description: Master Azure DevOps migration with expert insights! Discover pitfalls, best practices, and strategies for a seamless transition. Perfect for IT and DevOps teams!
  captions: |-
    There's a number of migration services that we offer. They're kind of related as two sets of tools. There's Martin Azure DevOps migration tools, which is on GitHub and available for people to use, but we help people use it. We do it for customers when they don't want to learn it themselves. So that's the more targeted migration tool. I want to move stuff; I want to merge stuff. 

    So that's the actual moving individual work items around. That's what I want to do. Then, that's one of our services. The other one is a kind of managed import into Azure DevOps. Microsoft have a tool called the Azure DevOps data migration tool, and that data migration tool takes the whole thing. So you might have, if you're with TFS, I always call on-prem TFS and the server Azure DevOps just to avoid confusion. Right? I know they renamed the server to Azure DevOps, but it's just confusing. 

    TFS has multiple databases hanging off it, and those databases are the things that you take and put up to Azure DevOps. So if you have 500 projects in one database, you're taking the whole thing, but you can't just take it because there are things you could do to your TFS that are not allowed in Azure DevOps. There are things that could have happened over the years to your TFS that are not allowed in Azure DevOps. 

    I think I'm going to double down on things you could have changed in TFS that you're not allowed to do in Azure DevOps, like increasing the max attachment size, for example. There's loads of them. So Microsoft provide a bunch of tools to validate your environment to make sure it will work before you migrate it up, and it has to meet the validation before it will go to Azure DevOps. 

    But how do you do that? You have to get onto the latest version, then you have to run the tools, then you have to fix all of the stuff that it highlights, and then you've got to go. So we provide a managed service for moving your entire on-prem Azure DevOps TFS environment—code repos, builds, everything—up to Azure DevOps. 

    Or we also provide a service where you want to move pieces of things within that context around and consolidate and change process templates. You know, we want to move from Scrum to Agile, or our bespoke one to Agile, or our Scrum one to our bespoke one. All of those, if you want to do things piecemeal, we can help with that. If you want to do the whole thing, we help you manage that process up to the cloud.
- id: WVNiLx3QHLg
  title: Why I love heirarchies of competence
  description: 'Discover why Martin Hinshelwood champions hierarchies of competence over control, empowering teams to solve problems and drive success. #Agile #Scrum'
  captions: ""
- id: X2WJzWV_GiI
  title: Free Workshop 1 - Introduction to Agility and Building Awesome Teams
  description: Join our free workshop to explore agility, team building, and insights on Cynefin. Discover strategies for creating awesome teams and enhancing collaboration!
  captions: ""
- id: X4QzM00onL4
  title: Chaos - 7 Harbingers agile apocalypse. But shorter!
  description: Discover why chaos threatens agile success! Martin Hinshelwood reveals the pitfalls of chaos in software development. Watch now!
  captions: ""
- id: x6a_BuQq580
  title: DevOps Migration. Incomplete Migrations
  description: Master Azure DevOps migrations! Learn to tackle incomplete migrations and data loss fears with expert tips for a seamless transition to the cloud.
  captions: |-
    There's a little bit of a fear of incomplete migrations, that things won't be available when you move to the cloud. I've done hundreds of migrations using Microsoft's database import tool, and I have never had any data loss in any context whatsoever that wasn't known about beforehand. There are certain things that don't work in the cloud that you can do on-prem. You can increase the database attachment size on-prem, and that will unfortunately not be possible in the cloud, right? Because there are other people on the system; it's not just your company, so you're not the only ones taking the hit for performance issues for having attachments that are too big or build lists that are bigger than normal.

    So there are some things, but upfront when you're planning the migration, we need to call those things out. We need to cut them down; we need to figure out how to resolve those things. Microsoft provides tooling to help understand what those things are, what the impact is, and what we need to do in order to make our environment viable for moving up to Azure DevOps. 

    So there's not really any such thing as an incomplete migration within that context; it will just work. I've had migrations get stuck, and then we have to back off, restore, and turn back on. That's how you restore; you turn it back on, turn back on TFS locally, and then replan something because something's gone wrong or something needs to be done on Microsoft's end. But usually, especially if it's a bigger migration, you talk to Microsoft first, and they have a support team available who know you're doing a migration. You can email them, and they'll go kick the environment or figure out what the problem is at the time so that you can continue.

    So, incomplete migrations from that perspective are not a big deal. If you're doing an ad hoc PC email migration, like you're moving the bits and pieces that you want to move, like would you just want to move this team or this subset of this team or this project or just this data, then we will know upfront exactly what you can and cannot do within the context of that migration. But it's not something we can define at this point because it's wholly dependent upon your data, the format of your data, what you want to move, what you're okay with losing, and having conversations around that. So you'll know upfront. 

    So when it gets to migration time, there shouldn't be any surprises at all.
- id: Xa_e2EnLEV4
  title: 3 best ways to wreck Kanban. Sweep problems under the rug.
  description: Discover the top 3 pitfalls that sabotage Kanban adoption. Learn why ignoring problems can derail your team's success and how to confront them effectively!
  captions: |-
    One of the most common behaviours that will greatly impact on your ability to be successful, um, at any process, but specifically having a CAD strategy, is sweeping your problems under the rug. Um, so that's a most teams will not necessarily nefariously but hide or ignore their problems. That's why when we talk about retrospectives, we talk about, uh, H, um, reflection, we talk about Kaizen as a phrase, are we hiding or ignoring anything, right? That's something to actively look at. And it's because we, we as humans are really, really good at ignoring stuff that maybe we feel like it's too much effort. Maybe we feel like we can't do anything about it.

    I remember, um, a time, uh, living in a flat with my brother in the West End of Glasgow, and, um, we never cleaned the grill because nobody wanted to do it. We effectively swept that work under the rug and went, "I don't, I don't really know how to do that," right? I mean, that's, I've got to go figure out. This was before YouTube, right? I got to go figure out how to clean this. Perhaps I have to phone my mum and ask her, right? How do I, how do I do this? Um, what's the best way to approach it? What level of detail do I need in how to do that? So both of us ignored it completely, and we used it all the time. 

    So what do you think happened? Eventually, what do you think happened? Eventually, yeah, you're right, it caught fire. It caught fire, and we had a fire in the kitchen. We didn't have a fire extinguisher because we also swept that under the rug and didn't do that. At one point, my brother had grabbed a pan full of water and was about to throw it into the grill, and then he realised, "No, like, it's not a good idea to throw water on a fat fire," right? If you've ever seen those adverts on TV, it just explodes. You don't want to throw water on a fat fire. 

    Uh, so we stopped, called the fire brigade. The fire brigade arrived, they came up with a fire extinguisher and went, "Done," right? But we needed to clean the grill. That was our trigger to go do that and then to continue to do it regularly. I actually don't remember. We were teenagers. I don't remember if we actually continued to do it regularly or we just did it once and then maybe then wherever that cooker ended up, somebody else will need to do it. But you've got to do the things, otherwise this cruft builds up, right? 

    And that cruft could be dirt, it could be fat, it could be clogging up the system. It can be just getting in the way, making things a little bit more difficult. It could take the guise of bureaucratic processes in your organisation. It could take the guise of technical debt in your product. It could just be purely architected, purely designed stuff that you've created, and nobody goes back, uh, to resolve those things. Just sweeping problems under the rug and ignoring them. 

    You know that in every cartoon, they have that moment where they're cleaning up a kid's room and they just open the cupboard, shove everything in, and then close the cupboard really quickly. And then at some point, the cupboard door pops open and all the stuff falls out again. That's what we're trying to avoid. That's why we need discipline to not sweep things under the rug, to do something about it. We need courage when things might be a little bit more difficult to deal with. 

    A CAD strategy is not going to be effective if you or your team sweep things under the rug. Have the discipline and courage to implement a CAD strategy fully. If you're struggling to implement a CAD strategy, we can help or help you find somebody who can. Click on the link below to get in touch.
- id: xaIDtZcoVXE
  title: How Do You Know How Long It Takes to Deliver Value?
  description: 'Unlock the power of Evidence-Based Management! Discover 5 reasons why EBM is essential for enhancing your Time to Market and driving business success. #EBM #Shorts'
  captions: How do you know how long it takes you to deliver value? Evidence-based management has a key value area called time to market, where you would choose metrics that enable you to understand your organisational capability in this space. You might look at things like lead time, cycle time, time to pivot, time to learn, time to fix. These are all things that will help you understand how long it takes you to deliver value.
- id: xaLNCbr9o3Y
  title: Ep 003 - Daniel Vacanti on live online PSK in Edinburgh
  description: Join Daniel Vacanti for a live chat about the Professional Scrum with Kanban course in Edinburgh on 18th May 2020. Get insights and ask your questions!
  captions: ""
- id: XCwb2-h8pZg
  title: Kanban with Team Foundation Service
  description: Discover how to effectively implement Kanban using Team Foundation Service to enhance your team's workflow and boost productivity.
  captions: ""
- id: XdzGxK1Yzyc
  title: What is a product owner?    Why are they essential?
  description: Discover the vital role of a Product Owner in Agile and Scrum, from strategic leadership to market insights. Elevate your understanding today!
  captions: ""
- id: XEtys2DOkKU
  title: Considerations for your Azure DevOps migration. Excerpt 1
  description: 'Explore key compromises to consider for your Azure DevOps migration in this insightful excerpt. Watch the full video on our channel! #agile #devops'
  captions: |-
    Microsoft actually provide a tool that you run against your database that will tell you almost all of the things that are going to be wrong and how to fix them. So it's a case of just working through all of those stories. 

    Um, so there's some customizations that aren't going to work in the cloud. There's quite a few custom field setups or backend customizations that are not going to be able to work because you have no access to the back end. Those would need to be rewritten, but luckily they can be rewritten prior to the migration.
- id: XF-yQmPdUME
  title: "Product Ownership vs. Product Management: Busting the Myth That They're Separate Roles"
  description: "Unlock the secrets of the Product Owner's role in Scrum! Discover how they maximise value and drive Agile success. Watch now for key insights! \U0001F680"
  captions: |-
    So effective product ownership focuses on product management. There's a kind of misconception that we're in some way replacing product management with product ownership or that they're different things. Right? They're absolutely not; they're exactly the same thing. 

    This is where product ownership, within the context of Scrum, comes in. I definitely want to disambiguate between when I'm talking about the product owner. I'm talking about the product owner as defined within the context of Scrum and the Scrum guides, not the job title or role that your organisation has created and added other baggage that is nothing to do with those things. 

    You might have a product owner within your organisation, and it says in the job description, "also responsible for writing reports for management," "also responsible for managing the product," or "the project," right? Or other stuff that is not what I'm talking about. The product owner is an accountability within the context of Scrum. That's it. It defines that the product owner needs to be somebody that the organisation respects and that is accountable for the maximisation of value delivered from the work of the Scrum team. 

    That's the product owner. The product owner's job title is not "product owner." That's a made-up organisational misunderstanding of moving towards Scrum. There shouldn't be job titles in your organisation that are "product owner" or "Scrum Master." Those should not exist. 

    You're in product management. If we take product management as a big wrapper of all of the things that need to be done in order to manage a product, we're shifting the focus of that from a long-term, maybe we do a two-yearly delivery cycle, towards a very short delivery cycle. If we're doing Scrum, there are some accountabilities that Scrum brings for those people that are doing product management. 

    One could say that the product owner is an aspect of existing product management that probably should always have been there in the first place but maybe wasn't necessarily quantified enough to make it a viable thing. In the past, organisations have been able to skate by without having that clear vision, goal, and value focus. 

    Organisations were able to skate by; perhaps they had deep coffers built up from some product that didn't have any competitors that they made, and now we have lots of money, so we actually, you know, we don't need to maximise; we just need to get by. Or for other reasons, right? But as we move towards that shorter iterative cycle, it becomes more important to focus on value and less important to focus on more stuff. 

    We're not maximising productivity; we're not maximising the number of items we deliver per timeframe. We kind of are, but we're not trying to deliver more stuff; we're trying to deliver more valuable stuff. In order to deliver more valuable stuff rather than just more stuff, we need to understand what value is. To understand what value is, we need to understand what direction the organisation's going, and that's the foundation of product management. 

    Product ownership is an accountability in Scrum. I think I've said this before: Scrum is like a mirror. The mirror just reflects what you're doing and says, "Why can't you do this thing that we think you should need?" So the accountability of the product owner being maximising the value of the work done by the Scrum team—why can't you do that? What's inhibiting your ability to do that? That's why the product owner accountability exists. 

    It's not a job title; it's not a job role; it's an accountability that forces product management to reflect on why they can't manage the product in this new context. Because we're moving from those long-term deliveries towards shorter and shorter deliveries for all products across all industries. Part of the reason for that is we want to take advantage of opportunities in the market and deal with surprises that come from the market, right? Our environment or our business. 

    In order to take advantage of them, we need to do so more quickly than a competitor can come along and take advantage of them, or a new business can start up and take advantage of them. Otherwise, we're too late to the party. So in order to do that, we need to move faster. What is the amount of time that your business needs to go around that cycle of re-evaluating what we're doing? That's the cycle you need to be on. 

    How quickly does your market change? Most of us don't exist in static markets; we exist in volatile markets that are always changing. The niches that our organisation has grown to fit are growing and contracting on a regular basis. If they're growing and contracting on a regular basis and you're in one niche, you're going to feel that pain on that cycle. 

    That's something that sometimes my business suffers from, where you've got that cycle of organisations having their flesh with cash, so they're looking to train people and increase skills, so our training business goes up. Then you have an economic downturn, and our training business drops. That's the ebb and flow of any one business. 

    So how do you mitigate that? Well, as a product owner or product manager, you need to be thinking about how do we open out new markets? All of the ebbs and flows of those different markets operate on different cycles so that we maintain our ability to operate as a business without loss by divesting our interests into lots of different areas. 

    Product management at a big organisational level is thinking about how do we get into new markets? How do we get those new stories in? The product owner's accountability is just to maximise the value of the work done by the team. So if we're going to have a bunch of teams, we should maximise the value of the work that they're actually doing. 

    In doing that, maximising the value return on investment that we get from the work that we do, we should be able to adapt to those changing needs in the market, do the product management thing. Product management includes portfolio; that's part of it. Scrum is part of it because it's managing the work done by the Scrum team. 

    That's part of that story, creating little social technology that allows you to manage that, but it's within that wider context. The idea is that we have a holistic approach to product management, of which the product owner is just an accountability, a part of that story. We need to create a shared understanding with vision, goals, and value for the direction that we're going so that all of these self-organising teams can work together towards that common goal. 

    That's how we achieve that common goal. We're using shorter iterations, particularly Scrum in this context, if we're talking about the product owner, for frequent product validation through inspection and adaptation. Scrum is founded on empiricism. We need to have regular tests to validate our hypothesis that a feature is going to advance value. 

    That is why saying that product ownership—how does product ownership build on the foundation of agile product management—is kind of like the reverse of the story. It's actually how does product ownership enable product management to maximise the value that we're trying to create.
- id: XF95kabzSeY
  title: ' shorts 5 things you would teach a productowner apprentice. Part 2'
  description: 'Join Martin Hinshelwood in Part 2 as he shares 5 essential lessons for aspiring product owners. Elevate your skills in agile and scrum! #shorts'
  captions: ""
- id: XFN4iXYLE3U
  title: Why Limiting Work in Progress is Key to Success in Kanban
  description: Discover how limiting work in progress (WIP) can transform your Kanban approach, boost productivity, and enhance focus in this insightful video!
  captions: |-
    If you're doing Caman and you aren't limiting your work, guess what? You're not doing Caman. It is a crucial element to controlling your work in process, to understanding what's going on when in your system, and enabling you to see what's going on. Limiting work allows you to see when you have constraints in the system. 

    Um, it enables you to allow people to focus on what's necessary to deliver the value, and it's really, really important to delivering high-quality, usable products because you have to maintain that flow of work through the system that's working at a sustainable pace. Limiting work in process is absolutely crucial to having a Caman board.
- id: xGuuZ5l6fCo
  title: 'Empowering Agile Teams: The Critical Role of User Feedback in Requirement Changes'
  description: Unlock your team's potential! Discover how to empower agile responses to user feedback and enhance your organisation's adaptability in this insightful video.
  captions: ""
- id: XhPHa1RXrWo
  title: 'Agile is Not New: A Journey Back to the Basics'
  description: "Explore Agile's rich history and its evolution in this insightful video by Martin Hinshelwood, revealing how to reclaim its true value in modern business. \U0001F30D\U0001F4A1"
  captions: |-
    Agile is not a new thing by any means. One could absolutely argue that it is a very old thing. Prior to the Industrial Revolution, although it's not totally to do with that, things were done in small, Mom and Pop shops all over the world. Your local cobbler made your shoes, and your local cobbler understood fundamentally your needs as an individual because they knew who you were. They knew your life story, and they created goods just for you. As we scaled up, we lost that human connection between things, and a lot of people blame Frederick Winslow Taylor. He’s not strictly at fault; it wasn't his intent to dehumanise the work environment. It was just the outcome of the practices that he pushed and how they were interpreted.

    Agile is a thing that has always been true for most of human existence. The way you get stuff done is you figure it out. If you don't know how to do something, you go try some stuff and figure out what works best and what doesn't. Ultimately, it's an evolutionary story because the people in the world that were able to do things better perhaps survived, and those that were not able to do it did not. Those that adapted to farming and new farm equipment and were able to increase the yield of the crop prospered. Those that weren't able to do that or couldn't figure it out did not. That's fundamentally how evolutionary theory works and how humans interact with the world around us. If we're successful, we do well at something; if we don't do well, we're not.

    So, agile's not a new thing, but even as far back as the late 1900s, they were talking about harnessing the social aspects of work in order to maximise our ability to deliver value. If you want to look up some of the theory and stories around that, it's Maryanne Fetter you want to be looking up. She was a contemporary and perhaps a little bit in opposition to Frederick Winslow Taylor at the time, and her work was largely lost by the 1930s. However, there was really a resurgence of this idea. The thing with good ideas is they'll keep coming back even if we forget them.

    In the '90s, XP came along in the software world because it was very obvious that it wasn't working. We weren't able to successfully and repeatedly build high-quality, valuable products without copious amounts of waste. We had lots of unhappy people. I think Ken Schwaber talks about it as "hateful work." We hated the companies we worked for; we hated the work that we were doing. The managers hated the work that they were doing. Everybody just hated it because we were dealing with complexity, and everything would always go wrong. When you try to control chaos, much like a lion tamer, you might get eaten. In fact, the likelihood is that you're going to get eaten at some point if you keep trying to do it that way, and that happened in project after project.

    When I started out in the software industry, right when I graduated university, there was talk of this idea of a "death march." A death march project is a project that every single person on it already understands before we hardly started that it is dead on arrival. It's not going anywhere; it's not going to be successful. We're not going to be able to do this. It's not going to cost what they think it's going to cost; it's not going to be done in that time; it's not going to have the features that they think it's going to have. But we have to do it anyway because that's what we're paid to do, and somebody bean counter higher up in the organisation has made the decision.

    This resurgence culminated in the '90s with XP, which was really the start of the bigger resurgence, although it had been mulling around before that. Then Scrum eventually culminated in the Agile Manifesto in 2001. The manifesto really defined the principles for a new way of working, one that focused on dealing with complexity and the unknown with empathy and with connection to people, bringing that social aspect that Maryanne Fetter wrote about nearly 100 years before.

    However, it was predicated on competence. There was an assumption of the inherent craftsmanship and competence of the participants that we were going to build on. However, the demand, especially when I graduated university in 2000 and started my first job in 2001, for engineers, product managers, and leaders that had both the competence and understood this new way of working far outstripped the supply in the market. It still does. Part of the reason it still does is that we didn't focus on the competence of who we needed to do these things to make these changes and fundamentally support them from a leadership perspective, from an engineering perspective, and from our goals and discovery.

    Because we didn't focus on that level of competence, it's largely starting to fall apart. That realisation is not quite like the dot-com bubble bursting; that was a money thing. This is a competence thing. Of the hundreds of thousands of people that are currently in roles where they're expected to either participate in craft or oversee, the level of competence is a tiny percentage of people in that space. It's starting to show in organisations where they are looking for what they are getting for their money because we're paying perhaps a lot of high-price salaries for engineers, product managers, and leadership. We're not getting the return on investment that we're expecting, and we need to get the return on investment; otherwise, it's not worth spending that money. That's how business functions in our world.

    If we can't justify the cost, we're going to have to get rid of the thing that's costing us, and at the moment, it looks like it's not the engineers and not the product managers, but it's the leaders, the Scrum Masters, the coaches—those folks that just don't necessarily have the level of competence that's demanded to fulfil the role and be successful. They may have had enough to convince the people that were hiring them that didn't necessarily understand what they needed, but as it turns out, they couldn't do it.

    It's systemic at the moment, and that's what we're seeing in the industry. There's a wide-ranging general reset of our understanding of what these competencies are, and most people are coming up lacking. That's kind of what we intended to do when we were originally talking about agile back in 2001. The outcome has not been that; it's been a commercialised, watered-down lip service-based result, and that's where we're at right now.
- id: xJsuDbsFzlw
  title: What is the sprint planning workshop and how will it help organizations?
  description: 'Discover how Sprint Planning workshops from NKD Agility can empower your Scrum team for success and enhance project outcomes. #Agile #Scrum'
  captions: ""
- id: xk11NhTA_V8
  title: Judgement! 7 Harbingers agile apocalypse. But shorter!
  description: Discover how informed judgement shapes your agile journey! Join Martin Hinshelwood as he uncovers the pitfalls of poor decision-making.
  captions: ""

