[
  {
    "id": "UgFVn4Sp1rw",
    "title": "Measuring and Monitoring Costs for Continuous Improvement",
    "description": "Unlock the secrets of product costs and ROI in software development. Empower your team with financial insights for continuous improvement!",
    "captions": "So if you're building products, you really need to understand the cost of those products. There are a number of factors; it's really complicated because there's the actual cost you pay, which is normally due. In general, your two big costs at building software products are hardware—that's the smaller one—and people. Right? So if you have 50 people working on a product, that's probably going to be your biggest cost. If you deploy to the cloud, that's going to be your second biggest cost, right? So your infrastructure and people, those costs should be fairly consistent. You should understand your cost profile. I usually talk about it in terms of what's the cost per sprint, right? Why should we do another sprint? What's it going to cost? What do we get for it? And are we getting a clear return on investment for the cost that we're putting in, right?\n\nSo sprints are part of the Scrum framework, and they're a way of planning and managing work, right? They don't imply an engineering process; it's just about the management of the work part and planning for what's happening next. So if I was looking at a cost per sprint, let's say I'm doing a two-week sprint, what's my cost per two weeks of work? What are my teams working on for those two weeks, and is it valuable? It's also really important in that context for the people doing the work to understand the cost of doing the work because they'll make better choices, right? If you want to create an environment in which people are spending the money as if it's their money, and if they understand the cost of the sprint, they'll think about what it is that we're doing for this sprint, the cost of the sprint, and try and maximise your return on investment. That needs to be an evolution, an effort that every single person that's working on your product is involved in; otherwise, you're not going to have people working on the right thing, and you're not going to have people making the right decisions.\n\nSo one effective way to minimise your cost and maximise your value is to have every member of every team and everybody working on your product understand what the costs are within their context. I've actually spoken to some colleagues about this, and I've kind of come to the conclusion that every team should be running a P&L, right? Not just are we adding value in the product, because value is a little bit in the eye of the beholder; it can be a little bit difficult to actually measure its capability. But revenue, we can absolutely measure that, and what percentage of the revenue is attributed to a particular feature. This team owns that feature; therefore, that's the revenue they're making. This is the cost that they're having, and are we as a team making a profit working on what we're working on? If we're not making a profit working on what we're working on, should we be working on something else, right? \n\nThat dynamic and flow of the team within the context of product management and product leadership with deliberate choices on investment in long-term efforts, right? Just like an infrastructure build. If you were running a country and you decided to invest in roads, that's a big capital expenditure to invest, and that needs to be understood as a concept. We're investing a bunch of money just now, so it looks like we're making a loss in order to get a larger return in the future, and that's a deliberate thing that we're doing. But we're still looking at the P&L; we're still understanding what it is that we're doing.\n\nSo I think from a team, from a group, from a product perspective, we should be looking at all of that information, and every member of every team should understand it to the extent that they need to, right? Within their context. To do that, you kind of need to understand a little bit more about what your product is, where you intend your product to go, what market you're in, what's happening in the market, and how you're interacting with the market. This is where I tend to fall back a little bit on evidence-based management. So there's the evidence-based management guide from Scrum.org, and it does give example metrics, right? But it doesn't really talk about specific metrics in the context of the guide. It basically says there are four key value areas that we need to think about. There are four key questions we need to ask ourselves, and in order to answer those questions, we need to have metrics which help inform but not control those decisions.\n\nSo the four key value areas that we need to monitor, right, in order to understand our cost-to-value profile, I think that's probably a good way to say it, is we need to understand where we sit in the market for our product. That market could be an external B2C or B2B market, or it could be an internal market—whatever you want to call that. You're the people that are using your product internally in the organisation. That's why lots of organisations have internal cost structures as well. You know, I worked at Merrill Lynch, and if I wanted a server or to use a piece of software, even if it was an internally built piece of software, there was a cost attributed to it. Yes, it was a little bit of a fictitious internal cost, but it allowed them to do a little bit more P&L and understand what's going on with the product. They definitely went too far with bean counting, but it is important.\n\nSo we have to understand our market value, and that's made up of two areas. There's current market value—what we've got right now, what we're delivering right now. So that could be customer happiness; it could be employee happiness; it could be usage, right? Lots of information we can collect around our current value. And then we've got hypothetical value, future value, which should be represented in our product backlog, right? What's the future value of our product? Looking at what market opportunities we can open and how do we measure whether we're opening enough market opportunities? \n\nThink of the example of Netflix. Why do they choose to create a new show, the first season of a new show, rather than add a second season to an already successful show? That's because second seasons always have less users; less people care about a second season, whereas the first season of a new show, you can big it up and onboard new people that weren't customers before, right? So that's opening out new market opportunities rather than leveraging existing market opportunities, and that's what your product backlog is about, right? You need to measure and understand those things within that context, and those things are really, really hard to measure. That's one of the hardest parts, I think, to measure for most organisations. Are we solving customers' problems? Are there other problems that the customers have that we should be solving instead? All of those kinds of questions. \n\nBut that's your market value. And then the other thing that you need to understand and have metrics for—I'm deliberately not referring to specific metrics because it really depends on your context, your industry, what it is you're doing, how your product works—you need to find metrics in these areas that suit your particular product in your particular world. I do work with organisations to help them understand those things, but it's something that they need to understand, right? The people doing the work, the people in the organisation need to understand.\n\nSo that's the market value, and then you've also got your capability of your organisation. So the two pieces are time to market—how quickly do you get your product in front of real customers, right? Time to market is about how quickly can you realise an idea to data, right? So that's time to market. And then the other one is the ability to innovate. How much time do you spend opening those new markets versus maintaining and supporting existing stuff, right? This is where if you had high technical debt, you might spend more time on maintaining and supporting. If you have low product quality, you might have more time on supporting and maintaining. \n\nSo those are the types of things you might measure in that world, right? What's our technical debt? We might do so in our code analysis of our product or whatever else you're doing. How do we understand bug trends, live site incidents? We might be looking at all of those things within our ability to innovate context and our time to market. We're looking at cycle time and lead time, right? How quickly can we get stuff out the door? What are other things in your organisation that impact those ideas, right? What are the things that inhibit your organisation's ability to reduce its time to market? Measure those, right? To get faster at delivering your products, what are the things that are getting in your way? That's what you should measure. If you're struggling to innovate, what are the things that are getting in your way? Those are the things you'd measure, right?\n\nAnd once you've got a handle on those things, figure out what the next thing you measure is to get your next biggest bang for your buck. And that's a constant cycle. So the metrics are changing over time. Some of them will take longer than others to resolve, but measuring and monitoring the value that you're creating—revenue in P&L and the cost of delivering in your product—these are other metrics that help you get that holistic picture of what's going on. It is almost the most important thing for a CTO, for a business, to understand and disseminate through the organisation so that we can all, at every level, make the best decision we can."
  },
  {
    "id": "uGIhajIO3pQ",
    "title": "Agile Scotland 2023: Why does this matter to you and why should people come to the event?",
    "description": "Join Martin Hinshelwood as he highlights why Agile Scotland 2023 is a must-attend event for anyone in Scotland's agile community!",
    "captions": ""
  },
  {
    "id": "uJaBPyixNlc",
    "title": "How does Naked Agility select associate Scrum Trainers?",
    "description": "Discover how Naked Agility selects top Scrum trainers with rigorous standards to ensure expert guidance in mastering the Scrum framework.",
    "captions": ""
  },
  {
    "id": "UOzrABhafx0",
    "title": "Mastering Product Backlog Management: Insights from the New Scrum.org Course",
    "description": "Discover Scrum.org's new Product Backlog Management course with Martin Hinshelwood and learn to master backlog refinement for effective product goals!",
    "captions": "So the new product backlog management course from Scrum.org has been a long time coming. It's going to be awesome. It's one of their new skills-based style of classes, which are shorter classes. They're eight hours, rather than the usual 16 hours, and they focus laser focus on one particular skill, and in this case, it's product backlog management. \n\nIn product backlog management, we have a number of things that we cover in the class. We're going to cover where these backlog items come from. We're going to cover how to manage those backlog items, how we write those backlog items, how we break them down into smaller units of work that are maybe easier for the team to consume, easier for people to understand. \n\nIn that, how we maximize the transparency of that product backlog by enabling the understanding of everybody that needs to understand it to be able to understand it, right? And then how do we work through it? How do we order that backlog? How do we make it the best backlog it can possibly be within the context of what it is we're doing and what we know and what we can do within our organization? \n\nSo it's an awesome little class that helps us get to grips with some of the nuances of product backlog management. How do we make sure that we minimize the amount of things that are in that product backlog in order to maximize the value that we get from it? \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "uQ786VBz3Jw",
    "title": "What is your 1 tip for effective sprint planning?",
    "description": "Unlock effective sprint planning with Martin Hinshelwood's top tip! Focus on building value, not just productivity, for your #scrumteam. #agile #projectmanagement",
    "captions": ""
  },
  {
    "id": "uRqsRNq-XRY",
    "title": "7 signs of the agile apocalypse. Judgement",
    "description": "Discover the 7 signs of the #Agile apocalypse! Learn how poor judgement can lead to doom and the importance of continuous improvement. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "USrwyGHG_tc",
    "title": "Is a Scrum Master an Agile micromanager?",
    "description": "Join Martin Hinshelwood in this #shorts video as he tackles the question: Is a Scrum Master an Agile micromanager? Discover insights in just 60 seconds!",
    "captions": ""
  },
  {
    "id": "utI-1HVpeSU",
    "title": "Quotes: Dictatorship vs Democracy",
    "description": "Explore the debate: Is a dictator or democracy better for product development? Join Martin Hinshelwood's insights in this engaging short! #agile #scrum",
    "captions": ""
  },
  {
    "id": "uvU_ATou6QY",
    "title": "What does failure look like as a product owner?",
    "description": "Discover the signs of a failing product owner! Learn to distinguish perception from reality in product management. Don't miss this insightful video! 🎯🚫",
    "captions": ""
  },
  {
    "id": "uvZ9TGbMtnU",
    "title": " shorts 5 kinds of Agile bandits. 1st Kind",
    "description": "Discover the 1st kind of Agile bandit with Martin Hinshelwood! Join us for insights on Agile practices and team evolution. #Agile #Scrum #Shorts",
    "captions": "There are no special Sprints. There are no Sprint Zeros. There are no hardening Sprints. There are no bug fix Sprints. All of these things create safety nets, and safety nets generally get used. People take more risks because they know they have a safety net, and risks, when we're trying to create usable working product, are not a good thing. They are risks to the business, and we want to focus on usable working product at the end of the Sprint. So don't have any special Sprints. Don't be an Agile Bandit."
  },
  {
    "id": "UW26aDoBVbQ",
    "title": "5 October 2023 Product Ownership and Lean Product Development Webinar",
    "description": "Join Dr. Joanna Płaskonka and Martin Hinshelwood in this 18-minute webinar to explore Product Ownership and Lean Product Development insights! #shorts",
    "captions": ""
  },
  {
    "id": "uYm_wb1sHJE",
    "title": "What is the Sprint Review workshop and how will it help organisations?",
    "description": "Discover how NKD Agility's Sprint Review workshops empower scrum teams to excel in showcasing their work and enhancing stakeholder engagement.",
    "captions": ""
  },
  {
    "id": "v1sMbKpQndU",
    "title": "What are the top 3 things a Scrum Master needs to bear in mind when adopting the coaching stance?",
    "description": "Discover the top 2 essentials for Scrum Masters in coaching agile teams: the art of listening and the power of credibility. Elevate your coaching game! 🎧🤝",
    "captions": ""
  },
  {
    "id": "V44iUwv0Jcg",
    "title": "Continuous Improvement with Kanban",
    "description": "Discover how to enhance your processes with Kanban in this insightful video on continuous improvement. Join us for agile transformation! #kanban #agile",
    "captions": "We love taking Japanese words and using them not quite right for their meaning. But one of the key phrases that we use all the time in Kamban is Kaizen. Kaizen is really just about continuous improvement. It's keeping changing things, hopefully for the better, because you're observing improvements in the system or measuring improvements in the system. \n\nSo the idea of continuous improvement, continuous change, and continuous optimization of your process or your system is generally referred to in the Kamban community as Kaizen. Kaizen's not limited to Kamban; it can be used absolutely anywhere you like. We should always be continuously striving for anything that we do to be a little bit better every time we do it, and that continuous nature is what we mean by Kaizen."
  },
  {
    "id": "V88FjP9f7_0",
    "title": "Quotes: Less is More. True or False?",
    "description": "Explore the truth behind \"Less is More\" with Martin Hinshelwood's insights on #agile. Discover how simplicity can drive team success! #shorts #scrum",
    "captions": ""
  },
  {
    "id": "vbY6LUq81uY",
    "title": "Maximizing Value with Minimum Viable Products MVPs",
    "description": "Discover how to maximise ROI with MVPs! Join Martin Hinshelwood as he shares entrepreneurial insights for funding and developing successful products.",
    "captions": "Building products is always doing something that's never been done before. Anytime you've got a team writing code, they're doing something that's never been done before. If they weren't doing something that's never been done before, you wouldn't be writing code; you would be buying the product, right? You would be buying the framework; you'd be buying the thing. So, anytime we're building products, we're doing unknown things, right? That's why we have such a high degree of variance in software engineering.\n\nIn the business space, there is something that kind of equates to that, or an analogy within the business context, and that's entrepreneurship. If you've got an idea for a company that delivers some kind of value, regardless of how that value is achieved, then you need to go and find somebody to invest in that idea. That works almost the same within the context of an organisation as it does in the context of me. If I wanted to go start a new business, I would probably need to go speak to the bank. I might need to go find some venture capitalists. I need to convince them. I need to find people in my company; I need to convince them that it's a good idea that needs to be promoted up to a level of somebody with some spending power. That person with some spending power offers me the ability to go try this out, but I have to convince them.\n\nNew ideas, things that have never been done before, are not guaranteed. They're not guaranteed to work; they're not guaranteed to have the return on investment that you expect them to. If you're in business, you already understand this concept, right? I believe my numbers might be slightly off, but I believe that 70% of new businesses fail within the first year, and 30% of the leftovers fail within five years. I think I might be underestimating the second part, the five-year part; it might be more than that. So, there is a risk profile to everything you do when you're investing money in a possible outcome within your business or external to your business. \n\nYou need to figure out what your risk profile is for investment in things that have never been done before, and you need to gauge the return that you're expecting to get on the investment that you're putting in. This is exactly how products should be funded as well. If we're going to fund a product in that way, and I'm going to be the one funding that product, I want to see value and market fit as quickly as possible, right? \n\nSo, what we tend to do is run lots of very small experiments. I might come to you and say, \"I need some money.\" Sorry, I'm switching personality here. I'm going to come to you and say, \"I need some money. I want to try out this idea. Hi, I've got this idea for a database of movie stars,\" right? And you're like, \"How are you going to make me some money?\" Because you want to return on your investment. So, I'm thinking, \"Well, I really, I'm the geek, right? I want to have a database of all the movies with all of the actors.\" \n\nThen you can ask, \"Can we have the budget for the movie in there? Can we have how much each of the actors made?\" Suddenly, you've got an idea of who you could sell this product to, right? What its possibilities are going forward into the future with a little bit of ideation from that geek idea of having a movie database, and IMDb is born, right? Which is massive now. If you don't know, IMDb has two halves. It has the public free half, which is where we just go look up movies, but then it sells inside of the industry and can give directors, for example, who are looking for a leading man or a leading lady, data on who can make my movie the most money. \n\n\"Oh, it's The Rock. Well, I can't afford The Rock. Who's within my price range for the budget for my movie that I can get that's going to maximise the amount of money?\" They pay IMDb a lot of money for that story. That's not something that was within anybody's budget; it was a venture capitalist effort, right? \n\nSo, you want to be thinking within the context of your business. You want to be thinking more like entrepreneurs, thinking more like venture capitalists. What's your return on investment? If you put money into this product or project, what do you get? How much do you get? What's the longevity of what you get? What's the story for this? I want to see a business plan. I want to see a lean canvas on what this looks like. Have people thought about the different aspects of it before I'm going to let them spend some money? \n\nEven once they're spending money, I want to see a little thing. I want to see a proof of concept, right? Let's get something out there, see what it looks like, get it in front of some other people. Does it resonate with people? Does it seem like it's going to provide value? Okay, what's the next stage? What's the next bigger thing we can do? What's the next experiment that we can run? \n\nI talk about it as hypothesis-driven engineering practices. Lots of folks out there use the phrase MVP. They're mostly, I see MVP, minimum viable product, being kind of misused. Minimum viable product is a proof of concept that you throw away at the end before you build the real product. I know lots of people use it as a small experiment, so whatever context you use it within. But we want to be running lots and lots and lots of small experiments. We know lots of experiments are going to fail, but we're going to find the ones that work, and then we're going to invest more in those, invest less in the ones that don't work. \n\nThat's how you stay within budget: lots of little experiments that have a hypothesis. What are you going to do? What do you expect the world to be like afterwards? How are you going to measure whether you've been successful? We want to see the numbers, and we're going to cull anything that is not living up to its expectation unless we can be convinced otherwise, right? There's heart as well as data in building your products and staying within budget."
  },
  {
    "id": "vBz2aWiNvAQ",
    "title": "Free Workshop 4 - Introduction to the Sprint Review!",
    "description": "Join Martin Hinshelwood for a free 90m workshop on mastering Sprint Reviews! Learn how to gather feedback and plan your next steps effectively.",
    "captions": ""
  },
  {
    "id": "vftc6m70a0w",
    "title": "7 Virtues of agile. Chastity",
    "description": "Unlock Agile success! Discover the virtue of Chastity in our latest video and learn how thoughtful planning transforms your approach to business agility.",
    "captions": "So one of the seven virtues of agility is chastity. In our context, in the agile context, chastity is really about taking your time. Right? Don't jump into thinking that you've been successful doing agile and we're going to take all the things you want to think about, the impact and the effect within your organisation of the changes that you make. \n\nSo there are loads of implications of agile that go far beyond the actual mechanisms for your organisation. So things, for example, like the democratization of the workplace, involving more people in the decision-making is something that you need to take time over. You need to think about how you're going to change your organisation. You need to involve the people in your organisation in that story; otherwise, they're not going to be interested in what it is you're trying to achieve. \n\nNobody really cares about your goals; they care about their own goals. And the way you get them to care about your goals is you make their goals your goals. Right? They want to be part of that story. So taking your time and looking at... there are tools out there, like open space agile, that allows you to involve the whole of your organisation in your decision-making process as you move towards a greater degree of agility. \n\nAnd that time and thoughtfulness and inclusivity is going to be the thing that enables you to get the most out of your agile strategies. If you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need naked agility."
  },
  {
    "id": "vhBsAXev014",
    "title": "7 Harbingers of the Agile apocalypse. Chaos.",
    "description": "Master agile transformation! 🌟 Join Martin as he uncovers chaos pitfalls and the vital role of communication, direction, and alignment. 🚀",
    "captions": ""
  },
  {
    "id": "vHNwcfbNOR8",
    "title": "What is your feeling on creating Agile apprenticeships?",
    "description": "Explore the potential of agile apprenticeships with Martin Hinshelwood as he discusses their importance in empowering the next generation in product development.",
    "captions": ""
  },
  {
    "id": "vI_qQ7-1z2E",
    "title": "Is a PSM II certification validation of your skills, or does it develop your skill and capability as a Scrum Master?",
    "description": "Discover if the PSM II certification validates your skills or enhances your capabilities as a Scrum Master. Join Martin Hinshelwood for insights!",
    "captions": ""
  },
  {
    "id": "vI2LBfMkPuk",
    "title": "What is your favourite agile course to deliver and why?",
    "description": "Join Martin Hinshelwood as he shares his favourite agile course, revealing why it’s a transformative experience for both him and his delegates.",
    "captions": ""
  },
  {
    "id": "VjPslpF3fTc",
    "title": "How will the Immersive Learning experience change the game for people with a couple of years experience in the field?",
    "description": "Unlock your potential! Discover how immersive learning transforms skill enhancement for experienced professionals in our latest video. 🎓✨",
    "captions": ""
  },
  {
    "id": "VkhIXCsoSJw",
    "title": "Automate Everything - Boosting Engineering Excellence and Building Confidence",
    "description": "Discover how automation enhances engineering excellence, boosts confidence, and accelerates product development in this insightful video!",
    "captions": "When you are working on very complex products, one of the main steps developers and engineering groups can take is automating everything. I mean, that's probably, along with reducing the backat size, so making the things that you're delivering smaller, so that you can do more of them and you're iterating on them, right? \n\nOne of the key things that enable your engineering team to have the confidence that they can continuously deploy to production those small things is to automate everything. You should have automated testing, you should have automated deployment, you should have as much automated validation as you can. There are automated validations you can do, especially if you're collecting telemetry in your product. A great example of that was the Azure DevOps team when they first started deploying their cloud version of the product. They didn't have, you know, they'd been used to doing two yearly deliveries and suddenly they were doing three weekly deliveries. \n\nThey had technical debt, they had poor quality code, they had big gnarly chunks that were very difficult to edit, and they had automation that took a very long time to run. So, one of the two big focuses, big engineering pushes that they made in that team that I think had the biggest impacts on me observing their improvements, and the first one was that they reduced as much as possible that cycle time, right? They wanted to reduce that time to learn as much as possible. \n\nTime to learn is all the way from coming up with an idea for a feature, it gets all the way through being built, or some of it being built, being deployed to production, or some of it being deployed to production and collecting telemetry, and then feeding that back all the way around to the next loop. That's time to learn all the way around. So, figuring out what the biggest time suck is in that space and tackling that. \n\nFor the Azure DevOps team, they found a number of things. One of those things was their testing infrastructure. Their testing infrastructure was, for want of a better expression, terrible. It took, as I understand, about 48 hours to find out for developers if they made a code change whether it was successful. Their time to self-test, right? Their ability to test for themselves was incredibly long. That's 48 to 72 hours, and the time to run the regression suite was even longer than that. It was perhaps a week to get that done because they had long-running regression tests. \n\nOne of the biggest focuses, biggest pushes they had was on converting all of those long-running functional tests into short code tests, right? They were top-heavy on their largest number of tests, which were these long-running functional tests. Their smallest number of tests was unit tests, and they flipped that pyramid over. It took them four years because, remember, they'd been working on this product for six to eight years in a waterfall way, and they built this massive test infrastructure. \n\nSo, it took them four years of doing a little bit at a time, paying back that technical debt to get to the point where they'd flipped that pyramid over. In fact, they just removed whole layers of that pyramid, and they ended up with all of these fast-running unit tests. Instead of 80,000 long-running automated tests, they had 880,000 short tests. They moved that number from 48 hours to find out if a developer had done something wrong to three and a half minutes. They could run the whole test suite in three and a half minutes on their local machine. \n\nThey could stand up, via command line calls, any parts of the system that they needed in order to be able to do functional tests locally on their machine. That was one of the other changes that they made. How do we enable that so that developers can just run a command and it sets up the bits they need to test the stuff that they're working on locally? So that they can have a copy of the system running locally and walk through it. \n\nThey built all of that functionality. It took them a long time to get there, but that investment helped improve their confidence in their ability, not just as individuals but as a group, to be able to deploy and build features in the product and improve the confidence of their customers. Right? Their customers had greater confidence that this is a good product, it's a solid product. Yes, we've seen things go wrong, but when things go wrong, they own up to them, they fix them, they move forward, they don't make that mistake again. \n\nSo, that building, because it's okay to make mistakes, if you've got a customer that you make a mistake and they throw a tantrum and they throw their toys out of the pram, it's because they're used to working with vendors that they have low confidence in, and they have low confidence in you fixing it. So, they believe that they have to throw that tantrum in order for you to fix that thing. \n\nYou need to build their confidence in you and in your product, and then they'll stop doing that. They'll accept, \"Oh, something went wrong, you messed up,\" but we know you're going to fix it, we know you're going to do a good job, and we know that you're not going to do it again, right? Or it's unlikely that you'll do it again. That's confidence. \n\nWhen you're working in big complex systems like Azure DevOps or other types of systems that you have, you need that level of confidence, not just at the whole product level but at every individual team level. I, as a person working on a team, need to have confidence that if I'm using capabilities delivered by another team, that they're going to be solid, that they're going to work, that they're going to meet that quality bar that I need in order to do my work, and I'm not going to be your crutch to enable functionality. \n\nSo, this is really, really important to have that underlying attention to detail, attention to quality, shorten those feedback loops, build up that automation, automate everything. There should be no manual tests. One of my favourite examples of that is the Azure DevOps team. They had poor telemetry in their product when they first moved to this cloud environment, and they were deploying through regions. \n\nSo, they would deploy to a region and then they would check to see that everything was working properly. They would check to see whether they adversely affected users. They'd do this all manually, and then they would deploy to the next region. One of the developers, an intern, for fun, developed something they called the Twitter sentiment bot. \n\nSo, this was a little bot that trolled Twitter for negative comments about your product. What they would do is they would do a deployment to a particular region, and then the Twitter sentiment bot would monitor Twitter for a couple of hours to see whether the level of negativity about your product increased in any way. You're always going to have a baseline of people that are unhappy with stuff, right? So, if it increased in a certain way, then they would automatically stop the deployment and flag that there was something that needed to be looked at. \n\nThat's a crutch, right? That's a way to automate something that isn't automatable because of the way you built your system. They eventually didn't need that bot anymore because they had those full automations built into the system. But you need crutches while you get there to be able to push those boundaries and keep pushing for continuous delivery, keep pushing to do things faster, keep pushing to improve your code, improve your quality, and improve your engagement with your customers, and you'll get there eventually."
  }
]
