- id: isU2kPc5HFw
  title: 'The Evolution of My Journey with Azure DevOps: Lessons and Insights'
  description: Explore Azure DevOps through the eyes of a seasoned consultant. Gain insights on migration, tools, and real-world applications to enhance your team's productivity!
  captions: |-
    So I first encountered Azure DevOps back in 2006, so that's quite some time ago. It wasn't called Azure DevOps back then; it was Visual Studio Team Services back in the day. It's gone through many name changes since then, but effectively it's not the same service, but it's the same intent from the service. 

    Azure DevOps is something that I've been using since then, and I was a lowly software engineer, plugging away building some products. Azure DevOps was really my route into DevOps, into helping teams become better at what they do, increase their capabilities, and use tools to help them better their capabilities. Team Foundation Server was intending to be that tool. I think it largely struggled to do anything outside of the Microsoft space until they moved much further on to Azure DevOps, the cloud version. 

    That early product was actually how I got my Microsoft MVP as well, which was building plugins and playing around with the APIs for TFS. I worked with a number of teams, some teams at Merrill Lynch and then some teams at Agreco. In both circumstances, while also doing the work, I helped those teams understand how to do automated builds, how to use the work item tracking, and how to link all the things together. I built some visualisation tools against the APIs, so I've really been plugging away at the Azure DevOps APIs since 2006. 

    I know where a lot of the bodies are buried in the APIs, which is why when I think what happened, I got my MVP, I moved to the US, and I worked as a DevOps consultant almost exclusively in the Microsoft stack for three years. I was doing a lot of Azure DevOps work. We did a lot of API work; there were some migrations. There used to be this old tool that was totally crazy to work with. I'm trying to remember what it was called. Microsoft created it originally, but really it was just a big code base, and it allowed you to migrate data from TFS to other TFS. It had this kind of adapter model so that you could get from other systems into TFS; that was the idea. 

    I think I'm the only one—I would hedge; I’m certainly the only one that published creating their own adapter for it. I created a migrator for Test Track Pro into TFS back in the day when Test Track Pro was even a thing, and maybe it is still a thing; I've just not heard about it in 15 or 20 years. That experience of creating that adapter really led me, when I arrived in the UK, to start my own business. One of my first gigs was with a company called Slumber, and Slumber was consolidating. They needed a lot of DevOps help to make the most out of the tools that they had. They were using the tools really well; it was just a little bit convoluted. 

    They wanted to take—they're the sort of organisation where everybody does everything, right? So there's every tool you can think of, every engineering process; they have everything. They wanted to consolidate down into using at least a single source control tool with work item tracking, and the tool they picked was TFS, Team Foundation Server. I helped them migrate something, and they had a standard process template, so I helped them migrate something like four to five hundred teams from what they were doing before into this new model and then move them from server to server. 

    Originally, I built a bunch of PowerShell scripts. That's when you're prototyping; scripting languages are the best way to run your thought processes. You're effectively writing down your thought process and then running it and saying, "Yeah, that kind of works." If I select this bit, that kind of works, and if I do this, that kind of works. So it's a really good way to do some fast prototyping. It's incredibly error-prone and buggy as heck, but it's a good way to do those things. 

    I built a bunch of PowerShell tools that I had, I think at one point, four or five people else in the organisation running those PowerShells to start migrating data around, changing process templates, moving data around in fields, all of those things. Then I started looking at, "Well, really, this needs to be a little bit more solid; this needs to be a little bit more capable; it needs to be something that's a little bit more pluggable." I built the first version of the Azure DevOps migration tools. 

    There are kind of two ways to do migrations in Azure DevOps. One is really limited but really powerful; the other one is mine. The one that's really limited and really powerful is Microsoft's own migration tools. Obviously, they want as many people as possible to move into the cloud. They don't really want to be supporting and maintaining Team Foundation Server or Azure DevOps Server, the on-prem version of the product. 

    They want people to move up to the cloud, so they've built a tool that if you get onto almost the latest version of Azure DevOps on-prem, you can effectively package up your database, give it to them. There's a whole process for that, but package up your database. It's not as easy as it sounds. Package up your process, your database, give it to them, and they'll import it into Azure DevOps. 

    So if you're trying to get into Azure DevOps, the easiest, most high-fidelity, most productionised way to do that is to have Microsoft do it. They provide a bunch of tools. I've done this for a bunch of customers over the years, tons and tons of customers. The biggest one was the Slumber engagement, where I think it was 2.7 or 2.8 terabytes was the collection that we moved up to Azure DevOps. It was pretty ginormous. I think they became the third largest customer using Azure DevOps outside of Microsoft in the service. 

    That was a huge amount of work, but lots of smaller ones are much easier. I did one for a customer where we did it in about an hour. Their database was small enough; they were on the latest version; they had control of all the servers, the passwords, all the things. It was small enough package; we just sequenced it up, and then they looked at the result and went, "Yep, that's good; let's go with that," and we turned off the on-prem version. 

    I have personally done a whole bunch of migrations. I have a team that helps with that. We did one recently that was more complicated than it sounds. You're not just taking the Azure DevOps database and putting it in the cloud. Microsoft have to process it. You have to be on a version that's supported by that process, which is the absolute latest version and one service pack back. 

    This means that if you're sitting with a local Team Foundation Server and you're on TFS 2010, 2012, 2015, or whatever else was there, you have to upgrade it first, which means that you might need to upgrade SQL Server, you might need to upgrade the operating system, you might have to do all of those things. We did one recently for a customer that was TFS 2010, I think they were on 2010, all the way up to Azure DevOps. 

    There were three distinct migrations we had to do because you've got to upgrade from 2010 to 2015. Then you've got to go from 2015 to, I think you can get to the latest version from 2015 up to the latest version of TFS. Then you have to run and validate all the things that you need to do to go to the cloud. Then you can take your environment into the cloud, and that can go one of two ways. You can just take the database if it's small enough; if it's under 150 meg, you can just give them the database that pack, and it'll work. 

    Otherwise, you have to set up an Azure environment; you have to install the SQL Server, upload data, and then get Microsoft to do stuff with it. That is the easiest, simplest, and most productionised route, but it's not what a lot of people can or want to do. Lots of companies have lots of circumstances that are outwith the bounds of that. They've got 100 teams, and only five teams want to go to the cloud. They've got other teams that can't for whatever reason, and that then adds complexity to that mix. 

    They've got teams that want to go just now and other teams that want to go later. Those are the most common ones for that push up into Azure DevOps. But also, you've got companies that sell products. If you've got five products in your company and one of those products is being sold, it's probably inside of the same TFS or Azure DevOps, and you want to move that piece over to somewhere else because you're selling it to somebody, and they're going to take the history and all of the stuff that goes along with it. 

    Microsoft provide no support for any of those scenarios. If you've got 50 projects and you want one, you've got projects across five collections, and you want one collection at one count. Or I've got, I don't know, I created one big massive project, and I really should have created two projects. These are things that are just not fundamentally supported by the tool or in any productionised way by Microsoft. 

    What my tool that I created does is it allows you to migrate pieces of your whole thing to another location. We do our query-based, so it's predominantly focused on work items, although there's lots of other tools in there. It's like a Swiss Army knife, and people are adding new tools all the time. But the main tool that you use is work item migration because that's the thing that's just not out there. 

    You're basically saying, "Here's a query; I want these work items, and I want them recreated over here," and the tool goes and recreates them. There are lots of limitations, lots of caveats, lots of things around that, but that's effectively the idea. I quite often get asked to help customers in a variety of different ways. Sometimes they want to do the migration if they've got loads of migrations to do. 

    I've got people out there that have been using my tools for years, and it makes sense if you're going to use the tools. Big enterprise customers find quite often they need to move data from one place to another. They want to consolidate; they want to split, so they spin up a group of people, probably the administrators of Azure DevOps for their company, that they want to spin up on the tool and use the tool. 

    I provide them with a bunch of support. Sometimes it's just support calls; sometimes it's training. They want to train some people on using the tool. But more often than not, with lots of organisations, it's a one-off thing. We're going here; we want this to happen, and we just want it to happen. We don't want to have to—we don't need that skill in-house. If it's not your core business, you're not doing it all the time, and you don't need it to support your core business, then that's when you outsource. 

    I did a big migration recently of about 80,000 work items for a customer that wanted an audit trail. They've bought another company; they've not got their hands on all of that company's stuff yet. There's still all the legal stuff that has to happen in between, but they want a copy of all the work items and all the code so that their audit department can then go through all of that and validate and check and match things up. 

    Yes, this is the right thing, and all this is missing, and that's missing. I don't know what they're doing right, but they wanted that copy, so they don't want to mess around having their own people learn a tool and then do it, so we just did it for them. It probably took eight or nine days to migrate actual 24 hours running on it to migrate that number of work items because it's a lot. 

    But then after it's done, they have that copy in the new location, and they can do their own thing. Sometimes we do the migrations; sometimes we help support the migrations; sometimes we help train people, and sometimes we just consult. I quite often get calls from folks that just need some advice on how to do something in Azure DevOps. 

    These big infrastructure ideas that people have—the business decides they want to consolidate stuff, they want to split stuff, they want to move stuff around—like, what does that mean for us? What are our options? What are our capabilities? I quite often have discussions with customers on how that all goes together, and sometimes they use my services to help them, and sometimes they have enough information to go do it on their own, or it's easy enough that it's just following the docs from Microsoft. 

    So as both a user of Azure DevOps, which I have been for many years, although not so much anymore, I do a lot of my work in GitHub now. But as a user of Azure DevOps, I really appreciate the capabilities that it has. But then there are some gaps that you need somebody to fill, and sometimes you want to spin it up yourself, and sometimes you need to kind of get somebody in to help you out. So that's kind of my experience with Azure DevOps.
- id: iT7ZtgNJbT0
  title: What was your best day as an Agile consultant?
  description: Join Martin Hinshelwood as he shares his most impactful day as an agile consultant, highlighting the power of inspired teams in agile environments.
  captions: ""
- id: ItnQxg3Q4Fc
  title: Why Is It So Important that Senior Leadership Teams are Engaged During an Agile Consulting Engagement?
  description: Discover why senior leadership engagement is crucial for successful agile transformations. Join Martin Hinshelwood as he shares key insights!
  captions: ""
- id: ItvOiaC32Hs
  title: 7 signs of the agile apocalypse. Chaos
  description: "Discover the 7 signs of the #Agile apocalypse! Join Martin Hinshelwood as he explores why chaos can derail your team's success. #Agile #Scrum #Shorts"
  captions: ""
- id: IU_1dJw7xk4
  title: How long does it take to transition from project management to Kanban?
  description: Transform your project management approach! Discover how to seamlessly transition to Kanban, optimise workflows, and embrace agile methodologies.
  captions: |-
    So the question is if you're working in a traditional project management world. I know everybody has qualms about the word traditional, but what people have always done in a traditional project management world, and you're I guess daunted by this idea of agile and the changes that need to happen in order to get there, then probably a Kanban strategy is a way that you can gain benefits over a longer period of time.

    So what lots of teams and organisations get benefit from jumping to a Scrum process, right? It highlights where you've got problems. It very quickly identifies things in your organisation that inhibit the ability for you to move towards an agile process. But quite often, depending on the organisation, that can be too much too fast. You can end up with just bad Scrum. We're going to call everything with the agile terminology, use the Scrum terminology, but in actual fact, we're not actually going to make any changes to the way we do things.

    So maybe a better approach for those types of organisations that don't have the willingness to change—and by the way, the best time to change the way you do things in an organisation is when your organisation has completely and utterly failed to deliver or achieve something. That's when people are most open to change. So that's where you might bring in a radically different process like Scrum. 

    But the advantage of a Kanban strategy is you start from where you are right now. A Kanban strategy does not require you to change the way anybody works. I'll say that again: a Kanban strategy, applying a Kanban strategy, creating and applying a Kanban strategy does not require anybody in your organisation to change the way they work right now. 

    That's really important to understand. Kanban is not a way of doing things; it's not a process in itself. It's observational. It observes your existing process and gives you data and information about how effective it is being. That's the purpose of a Kanban strategy. So you don't need to change the way you work; you just need to document how you work right now. That's your definition of workflow. You write down how you work right now, and then you need to collect some metrics.

    Once you've collected those metrics, you're going to look at them and you're going to see if there are any patterns that allow you to identify things that need to change. That's it. So one person, you as the project manager in your organisation, can yourself implement parts of a Kanban strategy. You can at least collect the data, right? You can load it out of Jira or Azure DevOps into tools. You can pull it into a spreadsheet and figure this stuff out, right? 

    So you have the start date and the end date, the age of the work items. Because you get the start date and the end date, you get the cycle time, right? How long things take to go through the process. And then you can do some data analysis on that. You can start to plot it in a cycle time scatter plot and look for outliers. There's a number of graphs that you would definitely use within the context of Kanban, and each of those graphs are there to visualise the flow of work through your system.

    Once you visualise the flow of work through your existing system that you've not changed, how everybody works, you'll then see things that you want to have a conversation about. It's actually quite startling how easy it is once you point out, once you do the graph, and somebody like myself, who's been trained to read the graphs and have read graphs from lots of teams, points at some things and says, "What's this? Why is this group of things kind of like this?" And then you're like, "Oh yeah, I can see that too." 

    It's very easy to identify, at least initially, right? When we've not made any changes to the system, it's very easy to identify anomalies. It's going to be super obvious. You'll have things like lots of dots clumped together. You're like, "What's that?" Well, that was a release. Okay, well, is that the best way to do that? Or you've got all of these dots way up on your cycle time scatter plot because they took a really long time to complete. It's like, "Why did these all take a long time to complete?" 

    Well, we've got to get the Architectural Review Board to approve this thing, and they only sit once every six months. Oh right, so you can only get architectural stuff approved once every six months. What happens if you need a change in between? Sorry, I'm using this example because I worked in this environment. What happens if you need a change in between? Well, you need to stop work, put it into the Architectural Review Board, and they meet every six months, so you need to wait. 

    It could take years to deliver a product because you need to make changes to it. Those types of things you probably already know some of them, right? You already know that some of those things in your organisation are broken. You know it. A Kanban strategy will give you the data to prove it. And if you can prove it, you can put it in front of somebody who can do something about it and say, "Look at the data. I would like to run an experiment. Stuff's taking a really long time to complete. I think this is the problem. This data is telling me that this is the problem. I'd like to change this, and we can see if the data improves."

    You just change your system. You just optimise your system. Keep doing that and you'll get to the most optimal system for the type of work that you're doing, which will be different for every team, every group, everybody, right? But that's how you make that transition. You need to understand how the system works in order to be able to make the change.

    So how long would it take to transition from traditional project management to Kanban? As long as it takes, right? You optimise as much as you need at whatever speed you want, and that's up to you. If your current system of work is failing you, then you would benefit from creating and applying a Kanban strategy. Our professional Kanban trainers and consultants are ready to help. Don't wait. The sooner you start, the sooner you'll improve. Get in touch below.
- id: IXmOAB5e44w
  title: Referral program. 20% of the course fee credited to your account.
  description: Join our referral program and earn 20% of the course fee! Discover how you can benefit while helping others thrive in agile training.
  captions: ""
- id: Iy33x8E9JMQ
  title: Dogma versus Empiricism in a consulting engagement
  description: 'Explore the clash between dogma and empiricism in Agile consulting. Learn how to navigate challenges for a more effective team dynamic! #Agile #Scrum #Consulting'
  captions: ""
- id: IZ-FlBbGaSY
  title: Building a culture of Quality
  description: Unlock the true potential of CI/CD! Join Martin Hinshelwood as he reveals best practices for Continuous Integration and Delivery to enhance quality and speed.
  captions: |-
    If we want to improve the quality of our product and reduce risk, part of our automation story is going to be CI/CD pipelines. It's worth noting that most teams don't use CI/CD for CI/CD; they use it for an automated build. I see very few teams applying engineering excellence and doing CI/CD as it's intended to be done.

    Just to clarify a little bit, continuous integration is coupled with mainline branching. It's not integrated if it's not in the mainline with the rest of your code. So if you've got a CI, a continuous integration on a separate branch, that's not actually a CI; that's just a continuous build on your separate branch, which is great. Definitely have that, but we want continuous integration. We want to be continuously pulling things into the one true version so we have fewer and fewer integration problems. We have fewer and fewer other problems coming off that because we're having to support multiple versions of our product.

    If you've got test-live in branches, you're just fundamentally doing it wrong. You might have an older product; I definitely don't judge the decisions that led to that in the past. You might have made that choice 20 years ago in your product, but you shouldn't be making that choice today. Dev-test-live with branches? No product anywhere should be making that choice today. We should be doing continuous integration and continuous delivery. Continuous integration is where you have mainline branching and things are continuously integrating into that mainline branch. Everything, all the work of all the engineers that are working on your product, are continuously integrated every day.

    Google is notorious for this one. They have one source control repository for the whole company. Every product everywhere in the company is on that one main line. That's a little bit extreme; that's a mono repo. But at least for a product, you want to have that mainline branching model where you're continuously integrating every day. You should not—I would object to a branch that's around for longer than a day. I'd strenuously object to a branch that's around for more than a couple of days. I'm not saying that they wouldn't happen; it's possible, but I strenuously object.

    Where people are adding new things, adding new capability, branches shouldn't exist for very long. That's CI. Continuous integration, continuous delivery is when it hits the main line; it's going to production. Continuous delivery is not "I'm continuously delivering to my test environment"; it's "I'm continuously delivering to production to real users." Now, you might use a ring-based deployment model where you're protecting and limiting the blast radius of any problems behind an audience. Perhaps it could be audience-based rings that enable you to have your high-risk customers in a later ring, so you find the problems first with lower-risk customers.

    But continuous delivery—the delivery part in continuous delivery—is production. It should be real users really using your product. So if you're doing continuous delivery, you should be seeing every commit to the main repo or a particular branch. Let's call it a branch; it could be called main, could be called master, could be called HK, whatever it's going to be called, it ends up in production. That's where people continuously integrate. So you CI into that, and then you CD from there to production.

    Most teams and most organisations don't seem to do that. They say they're doing CI/CD, but they're just using the terminology and the tools that are part of it to do something else, which is just an automated build, which is also fine. You've got to have the right technology for the right thing. I recommend CI/CD; I recommend continuous integration, mainline branching, and continuous delivery into production.

    For example, on products that I use, that I build, I might not use true CD. I think I'm almost there; I'm not quite there. I think it's a little bit too much risk for me because of my ability to test. But I continuously integrate to main, and it ships to production. I have CD on main; it ships to production as a preview, so the smaller number of users are controlling the blast radius. When I feel like the preview has enough telemetry to tell me that it's good, that I don't have a larger number of errors, I don't have people not being able to do the stuff that they're supposed to be able to do in the tool, when I have enough data, then I push the button and it rolls out to the next ring, which is everybody.

    So I effectively have a two-ring system: a preview or CD system. Preview is a smaller subset of people that opt in to be using the preview version, and then everybody else. Sometimes, if somebody asks for a new thing, I'll get it into preview and I'll tell them it's in preview, and they can try it there and kick the tyres. I'll bring new stuff that's never been tried into preview; people will come and kick the tyres, and then it will only go to the rest of the world once it's been successful.

    That's generally how Windows works; that's generally how Microsoft Teams works. Office 365—most of Microsoft products are now on a ring-based, audience-based deployment model, and that seems to be the most effective for services that you deliver to your customers. I think websites are a little bit different for commercial websites, but again, these are all things that we can talk about and figure out what the most effective model is. CD might not be the most effective model for you; CI might not be the most effective model. We might just want some automated builds.

    Having the expertise to understand your product, understand its architecture, and understand what the business is trying to achieve with the product will help create that indication of how naked agility can support you in creating CI/CD or just some automation to enable you to be as effective as possible and increase your release frequency and reduce your cost of deployment.
- id: j-mPdGP7BiU
  title: 'Mastering Product Development: From Assumptions to Hypotheses'
  description: Unlock the power of assumptions in product development! Learn to identify, validate, and test assumptions for data-driven decisions. A must-watch for product teams!
  captions: |-
    In our new class, we will learn how to work with assumptions. So first, a very important point: we actually introduce assumption to our product development dictionary. One of the very important points we will learn is this moment of realisation: oh, we have made assumptions, and not one, not two, but many. 

    So what kind of assumptions are we making when developing products, when discussing potential product futures, when creating product backlog items? This is a very important aspect, but we are not only talking about this fact. Okay, the assumptions were made, but which of them need to be validated? Obviously, not every assumption requires validation. Some of them are more important, less important; there might be a crucial role in ordering our assumptions. So which should be validated first and why? We are going to cover that in this course.

    Okay, so first point: assumptions realisation, ordering, and choosing which one to start. The second one, when we work with assumptions, the next important topic is about hypothesis. So we will learn how to create hypotheses and how to test them. In this class, we will pay a lot, a lot of attention to using the right data that will help you verify your hypothesis. 

    In fact, we may realise that our product development is actually navigating around some kind of tree of different hypotheses to test. We will also discuss the topic of the importance of desired signal or evidence strength on our product development process. So when we test assumptions, when we talk about hypothesis-driven development, it's important to realise that there will never be 100% confidence. But what is your desired level of confidence? And based on that, how high do you want to be when it comes to confidence? 

    We will be talking about experiments that will help us test the hypothesis. So we will learn how to manage costs related to product development based on those experiments that we choose, and this will be aligned with desired signal strength and desired confidence level. 

    Another valuable outcome for us is learning how to analyse experiments, how to take what we got out of our experimentation journey, and how to use this data in the decision-making process. So we already talked that learning is important in this class. So think about it as a way of targeted learnings that will help in this decision-making and critical thinking. 

    Thanks to that, we want to avoid toxic love related to our ideas and to what customers told us. Instead, we will be equipped with a certain way of thinking. Maybe for some of us, it will be a new perspective on product development, and thanks to that perspective, we will be learning a lot about what to do, what not to do, and how to use those concepts to be effective in our product development.
- id: J3Z2xU5ditc
  title: Scrum is like communism. It doesn't work. Myth 4
  description: "Unravel the myth that Agile means no planning! Discover Scrum's true essence and Microsoft's innovative approach in this insightful video. \U0001F4C5\U0001F680"
  captions: ""
- id: J8J-5GycFsk
  title: nkdAgility waiting 2 small
  description: Join us as we explore the concept of 'nkdAgility' and its impact on efficiency. Discover how waiting can be minimised for optimal performance!
  captions: ""
- id: jCqRHt8LLgw
  title: 12th May 2020 - Office Hours \ Ask Me Anything
  description: Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!
  captions: ""

