[
  {
    "id": "GJFklM1U5Pc",
    "title": "The Competence Crisis in Scrum Master Roles: A Call for Excellence",
    "description": "Explore the competence crisis in Scrum Masters! Discover why many lack essential skills and how to elevate Agile practices in your organisation. ðŸš€",
    "captions": "The current state of Scrum Masters in the industry at the moment is pretty terrible. There is a massive systemic lack of competence in the Scrum Master role and the Scrum Master accountability across organisations. I think much of this comes from the boom that we've had, the cash cow that we've had in the agile world, where the demand for Scrum Masters to help teams, which really wasn't realised as much before the early noughties, has far outstripped supply. \n\nSo we want to have somebody with some kind of competence within this context on every team, in every group, in every department of every company. Whether you're called a Scrum Master or an Agile Coach or whatever, it's all the same skill set. Because there's been a massive demand but very small supply, the price has gone up. And because the price has gone up, all the folks who aren't even in it, aren't even in that world of the context of that team, are looking at these very lucrative jobs over here in this other space, and the grass is greener over there. \n\nSo let's go over there. We have lots and lots of people over the last 15, almost 20 years, that have moved into this space to be a Scrum Master or Agile Coach, who largely have no skills whatsoever within the context of the team. Maybe they've done a two-day Scrum Master class, which, FYI, does not make you a Scrum Master. Just like passing your driving test doesn't make you a Formula 1 driver. It just means that you're hopefully not a danger to everybody on the road. \n\nHopefully, that doesn't mean that that's not true. You've got a lifelong learning and experience. You can't just jump in a Formula 1 car; you can't just jump in any racing car on any track without some level of skills, training, knowledge, expertise. You can get a track day, but expect there to be limitations on what it is you can do because it takes experience and time to build that experience and understanding of the detail of the world within which you're coaching and helping teams. \n\nIf I was coaching, here's a great example of a lack of competence. I did a bunch of training, not coaching, but training for police officers in Ghana. They were going to be using Scrum as an organisational change mechanism, not to do their work. We were teaching them Scrum so that they could use Scrum to change as a change mechanism in their organisation. I have competence and can understand organisations and organisational structure through experience, and understand how Scrum can be used to incrementally and iteratively change your organisation and deal with that complexity. \n\nYou have a backlog of organisational changes and what cadence you are iterating on them, all those kinds of things. But I have absolutely zero understanding of police work beyond what I see on TV. I have no experience or skills. I can't say to a police officer, \"This is how you should do your job and it will make you more effective.\" I can't do that, and I wouldn't do that. \n\nWhen I was teaching the training, I had the head of CID in one of the classes. We did a bunch of classes. The head of CID is, if you're in the US, it would be the chief of detectives, maybe. I don't know. The head of detectives, lieutenant for detectives. CID in the UK and the British Empire world is the investigative division. I don't even know what it stands for. Anyway, he was the head of CID, and he started asking me a bunch of questions about how he could apply the things we were talking about to police work. \n\nI had to say, \"Look, I have no knowledge or understanding of what it is you do beyond the movies.\" I can imagine that you don't know how long it's going to take to solve a case. You have to do a bunch of work. There are some things you always have to do, and there'll be something different in every case, everything that you do. But you know perhaps what the definition of done is, what the list of things at the end is that you need to have. \n\nIt's great if you can figure out how to leverage some of these practices to help with that, but I can't help you with that because that's not my background and expertise. What we're seeing and have seen over the last 15 to 20 years is loads of people coming into IT. My background is IT; that's where this stuff kind of spawned from most recently, right? The Agile Manifesto for software development. \n\nThey have no background in software, no background in any sort of IT, and they've perhaps done a two-day Scrum Master course or perhaps done a coaching class. So they've learned to coach, professional coaching experience, and that's just not good enough to be able to fulfil the accountability of the Scrum Master. The Scrum Master has an accountability to help the team be as effective as possible, and they do that through three areas. \n\nThey have three sets of accountabilities, as it were. One is the accountability to the team itself. So what can they do to help the team be effective? In order to help a team be effective, you need to understand the context within which the team are working. Whatever that context is, for me, it's software engineering. If you're going to be helping a team of software engineers become more effective, you have to understand the practices, the principles of that work so that you can help them. \n\nIn the software engineering world, we have modern engineering practices, we have DevOps, we have things like release planning and scaling, and all of those things to do with the actual engineering practices. But you also have stuff you might gain through experience in other areas, like how to do organisational change. That's not something that maybe you need specific skills for, or conflict management. That's something that you might learn in your professional coaching. \n\nBut that doesn't remove the need to have that understanding of what the team is working on, what it is they're doing. For a Scrum Master within that context, within the context of a software team, there would be other things on my list if it was for a different type of work. But for a software team, I would expect them to understand DevOps principles, DevOps practices, understand what it takes to fulfil them, what it looks like when they're being successful, to understand modern engineering practices. \n\nIf the team's work is building software, you need to understand how to build software in order to help the team be effective at building software. They might not know. I've worked with lots of teams all over the world as a DevOps consultant, as an Agile consultant, that have huge gaps in their understanding. One of the biggest ones that I usually use as an example is using source control and understanding branching but not understanding merging. \n\nNot understanding that there are tools within your source control system that allow you to merge code in a mostly automated fashion, right? If there's no conflict in changes, and then dealing with conflicts. I worked with a team of 30 engineers in an organisation. They've been building software for many years. Those lead engineers, there were people who had been building software for many, many years, and they had no idea that there were tools inside of the source control system that allowed you to merge code. \n\nThey were doing it manually with Beyond Compare. They were just comparing files and copying across the bits that they wanted, hugely error-prone, huge number of bugs introduced by that kind of mechanism because they weren't using those tools. If I didn't know that those tools existed, if I didn't understand the workflow of source control, regardless of whether you've actually used source control or not, although I think if you're going to be working with software teams, you have to understand how source control works. \n\nYou have to understand how automated builds work. You have to understand how work items, the work that you're doing, can be linked to the code so that you can get more effective understanding of what's being changed and how it's being changed and how you're testing it. That doesn't require you to have been a software engineer. If you've been a tester or you've been an analyst on a team and you've done those things for many years, you're going to understand those things. \n\nIf you don't understand those things, you need to learn those things in order to be an effective Scrum Master for a software engineering team. But that's just one of the three things that a Scrum Master is accountable for. They're also accountable for services to the Product Owner, not just to the team, but specifically to the Product Owner. \n\nSo what does the Product Owner do? The Product Owner maximises the value delivered by the work from the team. One of the Scrum Master's jobs, roles, accountabilities, things they have to do is they have to be able to enable and help that Product Owner become more effective because that Product Owner might not understand the things that they have to do. They might not understand the processes and practices that are available to them. They might have outdated knowledge. \n\nThey might come from a traditional background where we're not doing fast iterations. While most of the practices can still be used, they need to be modified to allow it to work in the iterative and incremental world of continuous delivery and continuous learning. So how do you help them if you don't understand what they do? How do you know that they don't understand hypothesis-driven engineering practices? \n\nIf you don't understand hypothesis-driven engineering practices, how do you know that they should be able to look at the telemetry from the product and understand and use it to help inform the decisions that they're making? How do you know that they need to be building relationships with people inside of the business and how they build relationships with people inside of the business and how they understand the dynamic of those relationships? \n\nUnless you do, you can't help them do that. You can't help them do something that they don't know or don't understand how to do already. In my experience, at least in my experience, right, because remember my caveat with everything is I get called by people who need help. In general, Product Owners don't have the background knowledge, understanding, or experience to know how to maximise the value delivered in the product. \n\nThere are absolutely product managers and Product Owners out there who do understand that, absolutely. But they don't need to call me to come and help them. They don't come to my Product Owner classes. They don't come to my product management mentor programmes because they already know that stuff, so they can do it. But if you want to help those people who don't understand, you need to understand that thing to be able to help teach them, coach them, and mentor them. \n\nAnd we're not even done yet because there's a third thing. The third thing is the organisational, I guess, Lisa Atkins calls it organisational transformational mastery. I usually call it organisational evolutionary mastery because I feel like evolution doesn't have an end, whereas transformation might have an end. It's a continuous thing. How do you help the organisation change? \n\nIf you don't understand organisational topologies, if you don't understand how organisations function and go together, if you don't understand the options that have been known to be effective within that space for things to try and see whether it works within this particular organisation, if you don't have that standing, how do you know that something needs to change? How do you know that things can be different? \n\nYou've got that accountability to the organisation for helping them be effective. When you bring all of that together, you end up with an individual that is quite significantly skilled with lots of experience. They probably have a grey beard because they've been around for a while, or grey hair. They have been in the trenches with the team. They've worked as a team member. \n\nWhen I'm thinking about a Scrum Master, I'm thinking about somebody who's worked as a team member for many years, gained a bunch of experience, helped their team. Their team has realised that they're helping. They look to them as a leader in that space of effectiveness, and then that grows over time. Not just the team looking to them; the Product Owner looks at them, and the other people in the organisation start looking to them as somebody who can help them be more effective, deliver more value, change the way we do things because they have this understanding of how all of the... \n\nThey have a core understanding of the theory, the philosophies, and the principles to be able to apply them within multiple various contexts. But you get that through learning. You get that through experience, not just experience of doing it and trying it, but experience of learning and figuring it out and then seeing whether it works and closing those feedback loops and having that triple-loop learning and changing your worldview and how you can do things. \n\nThis is just not that common. There's a massive deficit at the moment in the level of competence. If you're interested in how big that deficit is, there's some data from an organisation called Scrum Match, who review Scrum Master skills. As part of their story, it's a little bit of a recruitment story, but they review Scrum Master skills. \n\nIt's not just people who are looking for jobs; it's to get a badge. \"I'm this level of Scrum Master.\" Some people look at it as a badging. What they found was that 61% of the people that they engaged with, reviewed who were Scrum Masters, already perhaps had been a Scrum Master for 10 years or more. So there were people in that list that were 10 years or more. \n\n61% of them shouldn't be Scrum Masters. 61% of them, I think it was 38%, I'm going to be a little bit off in the percentages but only by fractions, it was about 38%. I think had never read the Scrum Guide. There were Scrum Masters who had been enrolled for 10 years or more, never read the Scrum Guide. \n\nThe rest of that 61% had read the Scrum Guide but kind of, you know, didn't really understand Scrum that well. I understand Scrum, and I can rudimentarily apply it to organisations. None of those things are good enough to be a Scrum Master. None of those things are good enough to help a product team be more effective. \n\nSo it's absolutely no surprise that as we enter a period of fiscal uncertainty, a global fiscal uncertainty, organisations are looking to reduce their costs, and they're looking at the capability of the people that they currently have as Scrum Masters, and they're saying, \"This isn't good enough. These people are not competent.\" If you're not competent, you're incompetent. \n\nThe majority of Scrum Masters in a row today are incompetent. They should not be in that position. They should not be doing that role. The only way organisations have to demonstrate their lack of satisfaction with that is to start getting rid of Scrum Masters and Agile Coaches. That's the position we're in right now. We're seeing a massive industry correction. A competence bubble has popped, or an incompetence bubble has popped. \n\nThere are loads of good Scrum Masters that have been caught up in the nasty as organisations are divesting themselves. Almost all of these organisations are still hiring Scrum Masters; they're just being more discerning. I think we're moving from an era of wild west Agile towards more of an era of competent Agile."
  },
  {
    "id": "gjrvSJWE0Gk",
    "title": "Overview of 'applying metrics for predictability' Kanban course.",
    "description": "Unlock your team's potential! Discover how to enhance predictability in delivery using Kanban metrics in this insightful course overview. ðŸš€ðŸ“Š #Kanban #Agile",
    "captions": "So the applying metrics for predictability course from Pro Caman is really focused on a deep dive into how you can use the metrics coming from your Caman strategy to really focus on improving the predictability of your teams. Right, the predictability of our ability to deliver. \n\nSo we need to understand what the impact of the changes is, like how we want to change the metrics in order to improve predictability. How do we identify in the graphs what things might be the issue? Like how do we interpret the graphs in order to maximise those changes to predictability? \n\nAnd how do we make forecasts, right? Make accurate forecasts for single items, for multiple items, looking forward into the future to understand what we're going to do next. \n\nAnd really, lots of teams struggle with the two questions: when will it be done and how much work will I get? These are really important questions that the business has that most teams are unable to answer. And these metrics for predictability really bring that answer to the forefront. \n\nHow do you, what data do you collect? How do you interpret the graphs? How do you analyse that data in order to make good choices around increasing predictability? And how do you improve the flow of value into production? \n\nHow do you increase the flow of value to the business, which is what we're all here for? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. \n\nWe also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "GJSBFyoHk8E",
    "title": "How does a Scrum team create a sprint goal?",
    "description": "Discover how scrum teams create impactful sprint goals to enhance collaboration and deliver value in this insightful short video with Martin Hinshelwood!",
    "captions": ""
  },
  {
    "id": "GmLW6wNcI6k",
    "title": "What Does the Assessment Phase of a Consulting Engagement Look and Feel Like?",
    "description": "Discover the assessment phase of agile consulting with NKD Agility. Martin Hinshelwood shares insights on tackling challenges and enhancing team performance.",
    "captions": ""
  },
  {
    "id": "grJFd9-R5Pw",
    "title": "How does the APS course help people apply scrum effectively?",
    "description": "Discover how the APS course transforms Scrum learning into a hands-on experience, empowering teams to tackle complex challenges effectively.",
    "captions": ""
  },
  {
    "id": "gRnYXuxo9_w",
    "title": "Scrum Value, Openness, What does it mean and why does it matter?",
    "description": "Unlock the power of openness in Scrum! Discover how transparency and trust transform team dynamics for success. Watch now! ðŸŒŸðŸ”‘ #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "GS2If-vQ9ng",
    "title": "Agile Training versus Agile Consulting",
    "description": "Discover the key differences between agile training and coaching with Martin Hinshelwood. Elevate your team's performance with Naked Agility! #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "Gtp9wjkPFPA",
    "title": "How do DevOps and Agile integrate?",
    "description": "Discover how DevOps and Agile intertwine in this insightful short video with Martin Hinshelwood. Unlock the synergy for high-performing teams! #DevOps #Agile",
    "captions": ""
  },
  {
    "id": "GwrubbUKBSE",
    "title": "30th March 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Microsoft MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "gWTCvlUzSZo",
    "title": "5 tools that Scrum Masters love. Part 3",
    "description": "Discover why quality cameras are essential for Scrum Masters! Enhance engagement and decode body language for better team dynamics. ðŸŽ¥ #scrum #scrummaster",
    "captions": ""
  },
  {
    "id": "gy3SEB3Ygrs",
    "title": "naked Agility with Martin Hinshelwood Live Stream",
    "description": "Join Martin Hinshelwood in this live stream as he explores the principles of naked Agility, offering insights and practical tips for agile practices.",
    "captions": ""
  },
  {
    "id": "Gym5-p-mNtw",
    "title": "Agile Your Secret Weapon for Cost Control",
    "description": "Unlock the secrets of cost control in software development! Join Martin Hinshelwood as he reveals how agility and engineering excellence boost ROI.",
    "captions": "Most organisations don't realise the amount of waste that they have in their system, the amount of money that they're haemorrhaging because they don't have a focus on engineering excellence. This idea, within the context of agile, of business agility, of everything being continuous, right? So you've got continuous integration, continuous delivery, continuous feedback, continuous testing. That continuous nature, that things are happening dynamically, enables you to find problems quicker. So the problems are smaller; that eliminates some waste, but it also enables you to collect data and telemetry and understand what's going on a little bit more easily, which means that you can identify problem areas and do something about them before those costs spiral out of control.\n\nI work with so many customers that have so much waste. I've got some DORA metrics here. I think not all of them are DORA; most of them are DORA metrics. We use it to tell this exact point for agile leaders in our agile leadership classes, but we talk about a number of different metrics, right? And if we're talking about a $1, one Euro, one pound budget and how much of that, how much of that pound, dollar, Euro ends up as actual value delivered in your product, right? And what do you measure to understand your return on investment on that story?\n\nSo these are just four metrics that I'm going to use. There are many more metrics that you could be looking at that can impact on this. But one of the biggest ones is innovation rate. What percentage of your people's time do they spend innovating rather than augmenting existing functionality or support and maintenance, right? So it's net new capability within your product. This is really important because it's the reason why Netflix creates a new show rather than doing the second series of that show that you liked. It's because when you do a second series, right, you augment existing functionality. When you do a second series, your audience for the second series is going to be smaller than the first series unless there's some kind of information that leads differently. The default is that the second series is going to have less audience, right? So it's going to make less money than the first series.\n\nSo if your second series is going to cost just as much as a first series, wouldn't it be better to invest that money in a first series to get a higher potential audience? It's a bet, right? A higher potential audience return than it is to do a second series of an existing. If the existing series has enough of an audience and enough of a demand for a second series, then it's probably worth it, right? You'll get your return on investment. But otherwise, it's not worth it, which is why you see the rise of limited series, right? I think we'll see the rise of limited features and products. But innovation rate is around 39% on average. That was the last DORA metrics that I kind of looked at. So 29% of the budget goes on net new functionalityâ€”that's new customers, new markets opening out, new capabilities for your product. That's not a lot; that's 29 cents on the dollar, 29 cents on the Euro, 29 pence on the pound. That's terrible, right? And that's just one metric.\n\nSo now we only have 29 cents of big ROI in our product or big potential ROI in our product. What about our product index? That's what percentage of our engineers' time do they spend, or our people's time do they spend working on the product versus doing other stuff, right? The average is about 80% of their time they spend on the product, 20% on other stuff. So we would be down to 23 cents on the dollar. What about usage index? What percentage of the features that you build in your product are actually used by your customer, right? The industry average is about 35%. 35% of the features that you build are used by your customer. That means the rest is waste, right? It's not really all waste because sometimes you need to build features that people don't like to find out what they do like. So that wouldn't be waste; that would be learning, right? So some of it's learning. It's difficult to quantify the learning, but certainly a huge piece of it is waste. Lots of companies build lots of features that your users have absolutely zero interest in, right? You'd be surprised. Go ask your engineering teams what their usage index is, what percentage of the features that they've built are used and used often by their customers.\n\nSo Microsoft has a measure that they use, which is monthly active users for each feature in your product. What are the monthly active users? If you can't answer that question, you have no idea whatsoever whether your features are being used or not. So why are you building them? How do you know you should be adding new features to this piece of functionality, right? That augmenting existing? If we don't even know what our user base is, why are we adding? Why are we spending money on it, right? It's a blind bet, right? That's a bad bet; it's completely unhedged. But a 35% usage rate now brings us down to 8 cents on the dollar. So we went from a dollar to 28 cents on the dollar, 23 cents on the dollar, now 8 cents on the dollar, and we're not even finished yet. Because if we're building an application that people install, if you look at things like Windows, right, what percentage of the user base is on the latest version of the product? Now the industry average is about 70%, right? So 30% of users are on an older version of the product. I have lots of customers where that's not even remotely true, that it's a much smaller percentage on the latest version of your product. So that brings us down to 6 cents in the dollar.\n\nIf your return on investment for every dollar you spend, you get 6 cents, that's 0.06% return on investment. Is that a good investment? I think it's not a good investment. I think we need to do a whole bunch of work in understanding why that's so low and dealing with the reasons why it's so low. So in our example here, the biggest hit at the start was innovation rate, right? Do you even know your innovation rate? Percentage of time on innovation, percentage of time spent on augmenting existing functionality, support, and maintenance, right? What are those three percentages for your business? You should absolutely understand that for every product that you have. The next biggest thing is usage index, right? What percentage of the features are actually used by your customers? Do you understand that? Are you collecting the telemetry that you need to understand that so that you can make decisions on where you're investing your capital and not letting costs spiral out of control?\n\nAgility is part of this story. Agility and DevOps talk about how you can close the feedback loops, get faster at iterating, and reduce costs. No, you're not really reducing costs because you've got the same people doing the same amount of work, but your cost-to-value ratio should go up, right? You should be delivering more value for the money you're putting in, not the other way around."
  }
]
