[
  {
    "id": "JTYCRehkN5U",
    "title": "The Power of Technical Excellence in Agile Development",
    "description": "Unlock the secrets of Agile success! Discover how prioritising technical excellence over speed can transform your software development and deliver exceptional value.",
    "captions": "Technical excellence is one of the most important concepts when you're building products. Scrum talks about this in that you should always have a usable working product at the end of every iteration. Agile talks about this. The idea is that in order to mitigate risk, we need to create a usable working product.\n\nIn the more linear model, where we know lots of stuff up front, let's say we were going to build 300 houses on a construction site. We know a lot up front; we know exactly what designs of the houses we're going to have. We've probably had to get planning permission, right? So a lot of that is locked in for what it is we're going to do. We know how much materials, how much wood, how much plaster. We know when we're going to do certain things, or mostly when, right? There's some variant, but not a lot of variance. So when there's low variance, we mitigate risk by doing more planning. We plan up front, we create a bunch of documents around that planning. We create a list of risks that might happen. If this risk happens, here's the mitigating action we're going to have. Here's the percentage likelihood that that risk is going to happen. We'll maintain that data over time.\n\nWe create this whole body of material and planning and dates and things around that story, and that's great when variance is low. That allows us to mitigate the risk because if you're going to spend, I don't know, £20 million building this area of houses, then you need to plan for that. But even then, you're going to take a little bit of an agile approach, right? You're not going to build all the houses at once and then sell them all at once. You're going to build a few houses and sell them, and a few houses and sell them because you're testing the market and you're seeing. You might then even need to apply for different planning permission to change your mind. So there's still a lot of variance in that story.\n\nI do get that for those that are in that industry, but in general, old school, you're kind of making those decisions up front. But when we have high variance, which, as I just noted, can happen in the building industry as well, we can't mitigate risk by writing everything down and creating a story for every single thing that might maybe happen because every single thing that might maybe happen is going to change every day. Think of the multiverse, right? You've got all those decision points that happen, and every time you make a decision and go down a new path, a whole different set of decision points and problem points and issue points occur. So every time you make one of those decisions, every time you make one of those little changes, you would need to rebuild all of that body of asset, and it's just not reasonable to do that. It puts too much of an overhead on people, time, everything, and you end up with that story of the plan not being able to keep up with the reality of the world. Therefore, we then make bad decisions because we can't really see what's going on, and so we're not mitigating risk at all.\n\nBut in that high variance world, we mitigate risk by creating a usable working product on a regular cadence. That's how we mitigate the risk. We deliver something; we create that thing that the customer is looking for, and we offer it to them for inspection so they can look at it and see, \"Yeah, yeah, yeah, you're doing the right thing,\" or, \"Oh, I don't understand why you made those decisions.\" Great, that's a great conversation.\n\nIn order to be able to have a usable working product at the end of every iteration, I do want to point out this is not a pipe dream; this is not an ideal world thing. I want you to all go look up the US Department of Defense article on detecting agile. It was an article, a paper that was sent out to every procurement officer in the Air Force to let them know what they need to look for when they're working with vendors, right? When they're buying stuff from vendors so that they can make better purchasing decisions. This vendor is telling me that they're agile. How do I know that they're agile? I'm a layman; I don't necessarily understand agile. I don't necessarily understand that new world. How do I ensure that I'm buying the right thing? This article lays out a whole bunch of questions that enable that person to at least start getting some insight.\n\nOne of the key questions, and this is like the first one for leadership, was, \"Do you have a working version of your product every iteration, including the first, that gets into the hands of real users?\" Real users, not UAT, not fake users, not test environments, real users every iteration, including the first. So if you're doing two-week iterations, then at the end of the first two weeks, you should have a usable working product. That's how we mitigate risk in the agile and scrum space. That's how we ensure that when people give us money, we're actually delivering something that will be valuable for them.\n\nThat's really hard if our software, our product, the quality of our product is terrible. Can you imagine trying, even if you were building houses, right? And there are broken joists, there are things not attached properly, there are leaky pipes, there's flooding. We've not built the house properly, and we're trying to hand that house over to the customer and have the customer come in and look at it, and the customer's like, \"Well, this is terrible; I'm not going to buy this.\" That's where engineering excellence comes in; that's where technical excellence comes in. We want to build things that actually work. We want to deliver less stuff up front, right? In the fictional, you know, that old phrase, \"80% of the work takes 20% of the time, and the last 20% takes 80% of the time.\" That is because our quality was bad; that's because we didn't have technical excellence in what it was that we were doing.\n\nSo we got that 80% of the functionality we've done; it looks like it works, but actually, behind the scenes, it's a total mess, spaghetti, absolute garbage. The customer comes along and tries to use it, and they're like, \"Oh, we need to fix this; we need to fix that,\" and you end up patching, right? You're getting out the sticky tape and super glue and trying to figure out how do we patch this together. Then they're like, \"Oh, I don't like the way this works.\" You can't rebuild it because it's part of the fundamental architecture, so you have to add another layer of obfuscation on top to make it look like it works the way the customer wanted it to work. But actually, behind the scenes, it just works the way the developers originally built it to work, and now we've got extra complexity. We've got something that is more difficult to maintain, more difficult to understand, and you can imagine that over time that builds up on top, and you end up with massive amounts of layers that inhibit your ability to deliver value.\n\nThat's something that I would quantify with some data. I do a lot of presentations on how the Azure DevOps team, that's the team at Microsoft that built the Azure DevOps product, they, in 2012, were technically a waterfall team. They were delivering once every two years to production, and they moved almost overnight towards continuous delivery and three-week iterations, right? So they were delivering usable working product every three weeks. They were shipping to production every three weeks, and they've delivered every three weeks for the past, I don't know, 26 three-week sprints.\n\nBack in 2012, with 650 people, they were delivering around 24 features to production each year. Part of the reason that that number is quite low, 24 features, is that one, the features were really big, but also the difficulty in adding the features and interacting with the codebase in order to get the product to do the things that you wanted it to do was really difficult because you had all those little layers of things that had built on top. This doesn't quite work the way it was supposed to. I think Azure DevOps was originally Team Foundation Server, if you remember those days, and Team Foundation Server was originally a bunch of other products that were native inside of Microsoft. They had source control in-house, source control products; they had in-house work item tracking products; they had in-house other stuff, and that was kind of cobbled together in order to create the first version of Team Foundation Server.\n\nNow, I'm sure lots of stuff was rewritten, but you've got that fundamental architectural mindset, right? Even though you're rewriting something, you're taking something else. So actually, the genetics of that product is quite long, quite old. Then you get to that point where you're switching from needing two years to get a piece of functionality working to needing three weeks to get a piece of functionality working. So they moved to this new model, and in 2012, they were delivering about 24 features to production. They then focused absolutely the majority of their time—maybe going majority is probably too much; their primary focus was on paying back technical debt, building in technical excellence, solving those effectiveness problems of moving to that new model, both in their process and in the product as well. By 2018, they were delivering 280 features to production each year with the same number of people.\n\nSo from 24 features to production, 24 experiments, 24 new features to try and see if the customer likes to 280 new features, the customer experiments to try things that might work and might help the customer. Now, yes, those things were smaller, right? But they were also delivered faster. That focus on technical excellence enables us to do that. If we don't have technical excellence in the way we do things, then it just doesn't work.\n\nI did a recent interview with Dan Helm, who runs Azure Boards, the work item tracking part of the system. When he was quizzed on the definition of done and how that works, he didn't really have a solid answer, and that's because technical excellence is so baked into the way they do everything at that level. All the engineers know what it is they need to do, what level of quality is required. They know all of those things; they don't need to focus on it, right? It's just the way they do business. Technical excellence, engineering quality is just the norm; it's not an exception, which means that they can then focus on delivering value to the customer. They've reduced risk, and they can focus on delivering value. They can focus on those other things. That's what technical excellence brings for product management, for product leadership, is the ability for them to stop focusing on fighting fires, on fixing bugs, on struggling with complexity, on being frustrated that they can't get certain features done because it's just too hard to do within the architecture of the product. You start focusing on the art of the possible: what is it we can do? Where are we going? What are we trying to achieve? You can then let go of those things because you're no longer having to ride that quality.\n\nThat's a terrible analogy, but you're no longer having to hold on for dear life while this product bucks around. You're now in the groove; it's smooth. We're adding features, we're building capabilities, we're building an awesome product. That's part of that story of mitigating risk, building technical excellence. There's a myth as well; there's a huge myth in the software industry that it's okay to sacrifice some quality in order to go faster and meet the market need. There's a recent article, I think it was a Harvard Business Review article; it might not have been, but it might have been a Forbes article. There are some studies done around that idea of what happens when we cut quality in order to go faster, right? And what's the trade-offs involved in that? The ultimate outcome was that it's not a valid trade-off. The impact of that reduction in quality is much higher than the benefit you get from being able to go fast over the short term.\n\nSo that a cruel, let's call it two things: there's undone work, stuff that you need to do in order for your product to run in production that hasn't been done yet, right? That's that 80/20 thing; that's where that pit comes from. Then there's technical debt, which is shortcuts, deliberate shortcuts that we make in order to do things in a suboptimal way within the product. That's technical debt, right? Both of those things added together don't scale linearly; it's an exponential curve. That's where that Azure DevOps team was at the start. They were at the top of that exponential curve, only delivering 24 features to production each year. But in focusing almost religiously, zealot-like, on paying back that technical debt, getting rid of all of that undone work, and bringing that curve back down to a manageable level, right? And beyond, getting it towards zero. We want to have as high quality, effective a product as possible. They actually, in one year, nearly tripled the number of features delivered to production, even though their main focus was on, \"Let's do it right; let's pay back the technical debt.\" They actually delivered more stuff.\n\nSo that goes: reduced quality to go fast is a losing proposition. It always has been a losing proposition. Definitely, what you want to do is focus on technical excellence. If you don't have a definition of done, create one. If your organisation doesn't have a definition of done, which it should, your organisation should be thinking about, from a technical excellence perspective, what is the minimum level of quality we as a business require in order to have a product that is fit for purpose? Right? Protects our brand, our business as a whole. This product is representing our brand or however that works, representing your brand. Protecting the people that are using it and protecting the people, your employees and your developers, right? To make sure that everything's done right. You don't want, like, think about Boeing, right? The reduction in quality is just now seeping out. What else do you need in order to have a viable product in your market, in your situation, right? So different levels for different markets; that's the business's requirement for done.\n\nWe're not talking about features. There's a big conflation, I think, between features being feature complete and quality. Engineering excellence is about quality; it's not about having the features, right? So let's take that, put that aside. What we're building, we're going to take that aside, and we're going to focus on the how we're building it. Do we have the level of quality required to meet compliance? Do we have the level of quality required to meet the testing level that we want? Do we have the amount of telemetry in there to see what's going on? All of those things are part of that definition of done, which has nothing to do with the features. We're only focusing on the quality of the product, and that enshrines your engineering excellence.\n\nSo if the organisation doesn't have that standard, it's the developers, the scrum team, or the developers that are charged with creating one that is relevant for your product and significant enough that you're going to be able to create a usable working product every sprint. The reason you have a more usable working product is to mitigate that risk and build out your engineering excellence. So don't get left behind; don't get bogged down in the quagmire of engineering inferiority. Focus on engineering excellence. Build the best product you can and maximise the value to your customers."
  },
  {
    "id": "Juonckoiyx0",
    "title": "What should be top of mind when a Scrum team prepare for a Sprint review?",
    "description": "Unlock effective stakeholder engagement in Scrum Sprint reviews! Discover strategies to align your team’s efforts for better project outcomes. 📈🤝",
    "captions": ""
  },
  {
    "id": "JVZzJZ5q0Hw",
    "title": "What is a sprint goal?",
    "description": "Unlock the secrets of sprint planning! Discover common pitfalls in agility and learn to empower your team for swift market responses. 🚀📈",
    "captions": ""
  },
  {
    "id": "jXk1_Iiam_M",
    "title": "The Power of Immersive Learning: Elevating Scrum Mastery in Your Organization",
    "description": "Unlock your team's potential with immersive Scrum training! Discover practical insights and transform learning for effective team development. 🌟🚀",
    "captions": ""
  },
  {
    "id": "JzAbvkFxVzs",
    "title": "The Pitfalls of Routine Agile Questions: Avoiding the Ghosts of Agile Past",
    "description": "Explore the balance between pragmatism and dogmatism in Agile. Discover real stories that highlight the importance of flexibility for effective team management!",
    "captions": "One of the ghosts of agile past is dogma. We've all run into those dogmatic folks that try and pursue an idea irrelevant of the data and the experience of the people around them. We need to kick those folks to the curb. I usually, I can be— not dogmatic is the wrong word— almost 100% of the time when I'm working with teams, I'm pragmatic. But I can also be pedantic if I'm in a training situation. Whatever it is I'm training, if I'm teaching you that thing, I'm going to be specific about what things are called and what they mean based on what they're called, whether that's Scrum or continuous delivery or C or whatever it is. There are specific meanings for the nouns that have been defined within the context of the thing that we're learning, and we need to understand what they are, what the impact is, and how they engage with each other in the real world with teams.\n\nWe need to be pragmatic. We need to understand that people call things different things than we're expecting. They have different knowledge and skills; they've come from different places where they use things in different ways, and we need to work within the bounds of what it is we've got. So one of those ghosts of agile past is dogma. Oh, there's been some dogmatic things I've seen. The worst one was told to me by a good friend and my boss, Steven Borg, about a Scrum Master who had just been fired from their job in Washington State because they had been adamant that if the team weren't standing up during the daily standup, then they weren't doing Scrum, and you have to be standing up in order to do Scrum. But that team had specifically decided that they wanted to sit down because they had a disabled team member in a wheelchair, and they didn't want to be towering over that person. \n\nThat is the right thing. That is the very definition of a Scrum team, of being respectful to each other, of openness, respect, and courage to do the things that they think are valuable. And one of those was, \"Let's all sit down so that we can be at the same level and work together.\" This dogmatic Scrum Master got themselves fired for cause. I think anyone who is dogmatic— and dogmatic is where, see, dogma has this relationship to religion. It's really about believing something in spite of the evidence to the contrary. That's what I think about dogma, right? So that team was told that if they're not standing up, they're not agile, when in fact they were demonstrating agility and sitting down, and the other person was just following. \n\nAnd it's not even the letter of the law because there's no stand-up in Scrum, right? But the letter of their understanding of the law in order to just enforce that rather than working with people within the context and learning more. And that's where dogma differs from just being pedantic, right? Being pedantic is sometimes valuable within the context of training, but being pragmatic is the way most Scrum Masters and agile coaches should be. Don't be dogmatic; be pragmatic and try and get rid of one of those ghosts of agile past.\n\nIf you are being haunted by this ghost of agile past, we can help you exercise it or help you find a coach, consultant, or trainer who can. Don't let this phantom undermine the effectiveness of your value delivery, and the longer it lingers, the more it will damage your team's progress. So email me at martink@agility.com about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "JzUUQ4R9SCk",
    "title": "Free Workshop 2 - Introduction to Scrum & Empiricism",
    "description": "Join Martin Hinshelwood for an interactive workshop on Scrum & Empiricism. Discover Scrum essentials, values, and engage in discussions. Register now!",
    "captions": ""
  },
  {
    "id": "k4F9DSE99Ok",
    "title": "Famine! 7 Harbingers agile apocalypse. But shorter!",
    "description": "Discover how Famine, one of the 7 signs of the agile apocalypse, can hinder your team's success. Learn to avoid feedback starvation!",
    "captions": ""
  },
  {
    "id": "KAqCTOIB4hk",
    "title": "Unlocking the Power of Immersive Learning for Product Management",
    "description": "Unlock real change in product development! Discover how immersive learning and outcome-based assignments empower teams to apply knowledge effectively.",
    "captions": "So the new immersive learning program for that we apply to pretty much everything we do now is designed around this idea of not just imparting knowledge, right? Not just going through some content, but it's an immersive format where we have the content delivered over a much longer period of time. So we have a structured program over a much longer period of time, and it includes some learning. Right? We want to learn some new things, some new tools, some new techniques, some new philosophies, some new ideas. \n\nBut at the end of each of those learning sessions, even though we've done some exercises, perhaps practical exercises demonstrating how it might work within the context of the learning, right? We use liberating structures to help create smaller groups and have people figure out how to use the knowledge. But it's still within the context of that group of people, right? It's not out in your real organisation; it's not out with your real product and your real teams and your real customers. \n\nSo at the end of each kind of learning session where we learn something new, we have an assignment, and that is an outcome-based assignment. The idea is that for each assignment, we're trying to achieve something. So, for example, I just had the third session of the product management mentor program for a company in Sri Lanka and their product managers. We talked about value with the product managers. \n\nThe learning piece, the new information I was providing for them was, \"Here's how you can think about value. Here's how you can understand value. Here's how you can potentially measure value.\" So we talked about evidence-based management. We talked about the value pyramid, then we talked about evidence-based management, and we talked about other metrics and stories around that. \n\nEven people, because we were talking about metrics, they started to bring up other questions around, you know, answering that old question, \"When will it be done?\" So we talked a little bit about just a little bit about probabilistic forecasting and flow metrics as well, right? So they drove the learning content as well as me having a plan for what I would like them to understand. \n\nAnd then the outcome-based assignment, the assignment that they've got is to go apply that to their organisation. Like, what metrics go out into your organisation and figure out what metrics do you currently use in your organisation? How, what do you collect? How do you use them, and how does it impact on decision-making, right? That's the kind of core part of their assignment is to go understand what it is the company has and what the company's doing. \n\nBut then, in addition to that, perhaps they should start a conversation about, \"Do we have the right metrics? Is there a simpler way to collect the thing we're trying to achieve? Can we optimise this?\" and start having those conversations. \n\nSo the outcome from that that I'm trying to achieve is that they, as a group—so this was about 16 product managers for one company—they, as a group, either in small groups go off and have those conversations, as individuals have those conversations, or they can do it all together. I leave it up to them. But when they come back and we're doing our facilitated reflections, the idea that I'm trying to achieve is that they understand more about what it is that their product does and how does it work and what they're trying to achieve with it because they've looked at how they're measuring their success. \n\nThey've looked at how they're measuring their capability to deliver the product, and then they're thinking about whether those are the right things they should be looking at, right? Because a lot of the time in organisations, we're looking at the wrong things. We're looking at the wrong data. We perhaps have vanity metrics—metrics that look great, you know, like velocity or story points—but don't actually add any value to the conversation. \n\nYou know, we've managed to get our original estimate and our actuals within, you know, 10% of each other. We're awesome! Yeah, but what value does that PR provide to the organisation? Does it actually provide any greater degree of predictability? Does it actually help the organisation understand when things will be done? \n\nAnd the answer is no. But trying to figure out and have those conversations, so they're starting to have those conversations within the organisation, not just within themselves but with other people within the organisation. So they're starting that conversation generally in the organisation. \n\nAnd then when we come back for the next session, which is usually a week later, a week or two weeks later, depending on what it is we're doing, when we come back for that reflective session, they're explaining what it is they did, what they managed to learn, what they discovered in their organisation as they were doing those things. \n\nAnd really sharing with not just with each other, but I can help provide them with potential directions that they could take if things weren't working for them or if things were working well, what might be possible next steps that they could try. \n\nAnd hopefully, over time, they're able to figure out a lot of those things themselves, right? When you start from a position of not necessarily understanding something, not doing it, not knowing that you have to do it, and not knowing what you're trying to achieve with it, you need that kind of facilitated reflection to start thinking about what value it brings. \n\nAs you start understanding the value, the outcome that we're trying to achieve and the value it provides to you and your business, you start getting more engaged with that topic. You start poking at it and pulling at threads and trying to figure that out. \n\nSo this idea of immersive learning, right? Immersive, the immersive programme. So we apply it both to our training classes and to our mentorship programmes that you have. \n\nThese outcomes will hopefully enable changes within your organisation. So there's no guarantees for anything, right? Absolutely no guarantees for anything. Your organisation could completely ignore everything you're trying to do. But I find that this type of engagement has the best chance of impact because the participants are able to go start that conversation and then come back, and we can all share ideas on why did that not work? Why did people ignore you? Why did they dismiss what it was that you said? \n\nI've had product managers come back, and they've been told, \"Stay in your lane, right? This is above your pay grade. You know, you need to stay out of this,\" when in fact it's something that somebody who is a product manager should be heavily involved in and heavily engaged in. Where do the requirements come from, right? \n\nSo each of those assignments is designed to be a catalyst for change within the organisation through conversation and discussion within that organisation. And what we want to be able to do is enable the teams and people within the organisation to be able to become more effective, right? By having those conversations, discussing those things, hopefully, we'll even make small changes or at least plant the seeds for changes and then start them growing over multiple sessions, right? \n\nBecause we come back around on similar topics to reinforce them, and that should enable teams and people within the organisation to become more effective and be able to focus more effectively on the goals that they're trying to achieve and hopefully have better outcomes for their team, for the people, for the organisation, and for the business."
  },
  {
    "id": "kEywzkMhWl0",
    "title": "One critical skill for a Scrum Master and why?",
    "description": "Discover the one essential skill every Scrum Master must master for success in Agile! Join Martin Hinshelwood in this quick, insightful #shorts video.",
    "captions": ""
  },
  {
    "id": "KHcSWD2tV6M",
    "title": "Silence - 7 signs of the agile apocalypse. But shorter!",
    "description": "Discover the two types of silence in agile: one brings peace, the other signals impending disaster. Join Martin Hinshelwood in this insightful exploration!",
    "captions": ""
  },
  {
    "id": "KhKFVRcdbGo",
    "title": "NKD Agility. Your Partner in Cost Effective Software Development",
    "description": "Transform your organisation's value delivery with Naked Agility. Discover strategies for engineering excellence and cost-effective software development.",
    "captions": "Naked Agility helps organisations create a culture of engineering excellence. I struggle with the idea of creating culture; culture is just what is within the organisation. But what we can help you do is think of culture as the shadow on the wall. You need to change the shape of the thing in order to change the shadow on the wall, and Naked Agility can help you understand your current system of delivering value in order to measure the things that make an impact on where you want to go and what you want to achieve. \n\nIn order to create the highest value optimisation that we can have within your context, we do that by monitoring the system, identifying what your system is, and defining that system of delivering value. Then we create or help you create metrics and understanding and transparency of that system so that you can see what's going on and make better decisions that enable you to get to the outcomes that you're trying to achieve. \n\nThese outcomes could be reducing cost or maximising value. I would go for maximising value, to be honest. This idea of technical leadership and engineering excellence within the context of building software products is that overall ethos of understanding your system, measuring it so you can see what's going on, and then making substantive changes to that system to see whether you're able to optimise the goals and outcomes that you're trying to achieve. \n\nThose are all things that we can help you do. We can help you control your costs and achieve technical leadership with Naked Agility. Contact me today to get started on your journey."
  }
]
