- id: KXvd_oyLe3Q
  title: 'The Crucible of Learning: Transforming Organizational Effectiveness Through DevOps'
  description: Discover how DevOps consulting tackles technical debt and complex architectures, leading to improved efficiency and streamlined integration for clients.
  captions: |-
    So when customers engage with us, they're quite often in a place where they've identified a problem themselves. They don't call a DevOps consulting service randomly; they have some kind of problem that they've identified and they want help figuring it out and what's the next thing to do.

    Probably the biggest engagement I saw was with a really large organisation in the oil and gas world. They had a product that was, I think, $50,000 a licence for this product. It's a desktop product, and the main problem that they had was that what they thought their main problem was and what actually the main problem was might be different things. This is, I'm thinking from retrospection, right, because I've been through it. One of the main problems that they had was that they had 90 teams in 13 locations in nine different countries working on this product. Each of those teams had their own long-term branch that they worked on, so things would diverge. They could diverge for quite some time; it could be as much as a year. They were trying to mitigate that with an application of force. That's probably the way I would think about it. They tried to solve the problem with an application of force.

    So what they did was they spun up a DevOps team, right? A dedicated DevOps team. Here are our DevOps engineers; they're in this central area. Some of you have already spotted the problem. They can't change what all of these teams are doing, but they have to figure out how they solved the problem of wanting continuous delivery. They wanted to have a daily build of their product; that was their goal. So they ended up creating a bunch of infrastructure to allow them to do that and managing that infrastructure. They would manage it, right? The teams didn't have to do anything, and if the teams changed something, that was their problem to go fix.

    You had this team, I think it was eight or nine people, but I think it was eight or nine people on this team, and their whole job was building this product. In order to do that, they ended up building a system that facilitated about 11,000 build executions a day. That's 1.2 million build executions a year, and that was just to have a working product every day. They would have these temporary branches where they brought the code together and automated merging of code from all of these different branches. All of those different teams—these 90 teams—were all on different source control systems, different not only systems but platforms as well. They might have had 10 teams on Git, 10 teams on Team Foundation Version Control, another 10 teams on Subversion, and another 10 teams doing something else.

    So they all had different capabilities, different branching capabilities, different merging capabilities, and their build system, their build engine, had to go reach out to all of these systems and pull together a version of the code and then build it to be able to create this unified version of the product. It was insanely complicated, insanely complicated and super expensive. I think in order for a developer to work on the product on their workstation, in fact, to run it in production as well, you had to have like 100 cores. I can't remember exactly what, but it was 128 GB RAM, lots and lots and lots of cores—24-core machine type of thing. It was just obscene, the speed of the machine required because it was a massive complicated product, and you couldn't just build parts of it. You had to build the whole thing to make sure it worked—the whole platform and all the things that were built on top of it.

    It was just hugely unwieldy. So we did a DevOps assessment, a state of DevOps assessment for them. We identified those key areas: everybody's on different source control systems, everybody's doing everything differently. They had some limitations because I think there were 13 different funding routes for this product, so they didn't have full control of the whole thing. But what we were able to do was, over a number of years—because it's a really big product, a really big organisation—I think there were something like 600 to 700 people working on it in different locations, and they weren't in the same reporting structure. You can't just tell them to do stuff.

    It took four years to get everything aligned into a single source control system, right? So that we could do one build out of this source control system and result in one version of the product. Then how do we fold down the branches so that they don't have so many branches working towards that model? How do we work towards this idea of mainline development? It's these types of ideas, these types of outcomes that vastly simplify the problem that companies are trying to solve. People don't get into these positions from a nefarious intent.

    In this particular example, this product had been built and worked on for 25 years. They had bought anybody who tried to compete with them. So bring that piece into the puzzle, right, and you end up with a massive product with a very complicated architecture that's very difficult and time-consuming to work on. You need lots of people; it's very distributed because all of these different parts of the puzzle were brought in from different entities that now all work for the same company. They hadn't taken the time to pay back their technical debt. They'd accrued debt. You know, we use Git; we take on a company that uses Subversion, and instead of helping them migrate all of their stuff into Git and fix all of the stuff that we need to fix in order to bring it into our system, we're just going to leave them as is and plug into them and pull their stuff out and integrate it into our system.

    So rather than doing that work because it seemed insurmountable at the time, they didn't do that. They just pulled the stuff in. On top of that, perhaps things didn't exist 25 years ago, so they had a lot of teams that were on their own custom in-house built source control system. When they started working on this product, there were no large-scale source control systems. You were probably talking about Visual SourceSafe at the time, but Visual SourceSafe was developed at the time of small networks and had a max size of about 5 GB. This thing was ginormous, right? So how do you manage that? Well, you have to build your own systems. When you go to try and create an automated build, perhaps there isn't a commercial automated build system, so you build your own. Then once a commercial automated build system becomes available, you adapt into that, but you're actually just calling out to your existing thing because you've not taken the time to rewrite everything because that's an inordinate task. 

    So we integrate it rather than refactor, right? We're missing all of those refactors over time, and it just gets bigger and bigger and bigger and more unwieldy. Sometimes it's difficult—that's a terrible expression—but difficult to see the forest for the trees, right? All of these things, like what should we go fix? Where should we go look? Where should we start? What's our biggest bang for our buck that we can go fix and figure out? Perhaps lots of little things we need to fix around the edge.

    So what I would expect an organisation to get—what's like the outcome and improvement that our customers can expect? It's a more effective process, right? We're talking about taking what the organisation is doing right now, usually within the context of a product when you're talking about DevOps, but it could be holistically across an organisation and figuring out how do we eliminate waste? How do we ensure that we have automation, that that automation is effective? Because you can have ineffective automation, like that massive build system I was talking about. 

    How do we simplify, simplify, simplify? What I would expect the outcomes to be would be reduced cost to deliver new features, reduced time to deliver new features, improved happiness of the people that are building the product because they're spending less time struggling with the complexity that we've created over time and more time focusing on solving the business problem. These are multipliers for your capability to deliver. 

    A great example of those multipliers is actually the Azure DevOps team at Microsoft, right? They create a product called Azure DevOps; it used to be Team Foundation Server when it was local. Back in 2010, before they started doing much more frequent deliveries and all the automation and focusing on these things, before they brought DevOps into their story, they were delivering about 25 features to production each year, and that was with 600 people working on it. They were delivering about 25 new features, lots of bug fixes, lots of little tweaks, but 25 new features to production each year.

    Fast forward to five years later, they'd spent a huge amount of time investing in reducing the amount of time it takes them to build their product from, I think, three or four days—72 hours plus—to build their product down to three and a half minutes. Those types of capabilities enabled them to go from 25 features to production each year to nearly 300 features to production each year with the same number of people and the same people. It's not different people; it's the same people, right? 

    So what we're talking about is holistically scaling up all of the people that we have within our context so that everybody understands DevOps, everybody understands refactoring and clean code and what the impact is on all of these things so that we can make them more effective over time. You will be faster, you'll be slicker, and it will be cheaper, right? That's what we're talking about when we talk about bringing DevOps and the DevOps philosophy into an organisation. But it takes skill. We can't install DevOps in your organisation; you still have to do the work. If you can find a consultancy that says they will do all the work for you, your people are not going to learn anything. They're not going to have gone through the pain of actually fixing their problems. 

    It's like getting a cleaner in to clean your teenager's room, right? Has your teenager learned to clean up their room? No, they haven't. They're just going to do the same thing over and over and over again. When you do those big rewrites of your product and you take the same people and get them to rewrite your product, what do you think is going to be the outcome except a rewritten product that's in exactly the same state over time as your existing product? Because they've not gone through that crucible of learning the pain of actually cleaning up—the pain of pulling that mouldy plate out from under the bed and having to deal with this mouldy plate. Maybe next time I won't leave the plate because I don't want to deal with that mouldy plate, right? 

    That's what we're talking about with engineering practices. We're talking about upskilling, dealing with our own crap, right? Dealing with it ourselves so that we make less of that stuff in the future, that we do things in a better way that enables us to be slicker and more effective.
- id: KzNbrrBCmdE
  title: Compromises you need to think about for your azuredevops migration. Excerpt 2
  description: 'Explore key compromises to consider for your Azure DevOps migration in this insightful video excerpt. Watch now for expert guidance! #agile #devops'
  captions: |-
    The flexibility that you gain by being able to move things around ad hoc. I can move this one team from here to here. I can move this one project from here to here. I can merge projects. I can split projects. That overrides in most cases if you need it. The inflexibility on how the data is formed, right? That it's not quite as high fidelity as some folks would like, that they're able to do it when they before is enough. 

    So I think flexibility and inflexibility depend on what it is that you're trying to achieve. What's the outcome that you're doing? What's your goal? Figuring out which is the best method within that context and doing the best we can within that context.
- id: L2u9Qojrvb8
  title: 'Navigating DevOps: Crafting Unique Solutions for Unique Organizations'
  description: "Discover how to customise your DevOps consulting services for unique organisational needs, fostering continuous improvement and incremental growth. \U0001F680\U0001F4C8"
  captions: |-
    In order to meet the unique needs of all the different organizations that we work with, and we've worked with medical device organizations, military organizations, all the way through to internet startups and web organizations, whatever the organization, the intrinsic philosophies of DevOps are the same. 

    But how they're solved within the context of your organization is completely unique. It will always be unique in every organization. Although a lot of the stories sound the same, right? There's a lot of stories that you'll hear about DevOps and DevOps implementations that kind of sound the same. The devil's in the details, right? The way that it's solved, the tools that are used, the limitations those bring will be different in every organization. 

    The value of engaging with us is that we're generally going to be focused on that big picture, right? That state of DevOps: where are we right now, where do we want to go, and how do we maintain progress on that route? We do a lot more work at the start, and then there's a lot of work that has to be done by the people within the context that are doing it. 

    We can help keep progress in a particular direction. We can help engage with them over the longer term to coach them around some of these gnarly issues that they run into. Right? You want to solve a particular problem and you don't understand how to do it, but you need to try some things and then perhaps get some advice from somebody who's been doing it a long time. If you don't have those skills in your organization, sometimes you need to look outside of your organization for those additional skills. 

    Because every organization is unique, every solution is unique, and we can't tell you how to solve your problems, but we can tell you about how other people have solved similar problems to give you ideas for things to try. 

    Creating this philosophy inside of our organization, where we're able to take little pieces of what works for us within our context, sometimes we need to adapt our context but keep moving forward, keep adapting to the needs of the market, and continually increase our capability to deliver software within our organization is where we can help you understand that direction and how it sits within those DevOps philosophies.
- id: l3NhlbM2gKM
  title: Scrum is like communism, it doesn't work. Myth 2.
  description: "Uncover the truth about story points in Scrum! Join Martin as he debunks myths and reveals their true purpose as a tool for team conversation. \U0001F680\U0001F4CA"
  captions: ""
- id: L6opxb0FYcU
  title: Worst agile advice you've ever heard?
  description: 'Discover the worst agile advice ever! Join Martin Hinshelwood as he highlights the pitfalls of focusing on agile mechanics over core values. #agile #scrum #shorts'
  captions: ""
- id: L9KsDJ2Rebo
  title: What excites you most about the PSM immersive learning journey for delegates?
  description: Join Kanban Dan as he shares his excitement about the transformative 7-week immersive learning journey for aspiring scrum masters at NKD Agility!
  captions: ""
- id: LI6G1awAUyU
  title: What are the most common challenges you are contracted to solve in a DevOps consulting gig?
  description: Join Martin Hinshelwood as he uncovers common challenges faced in DevOps consulting, bridging the gap between Agile and effective product development.
  captions: ""
- id: LiKE3zHuOuY
  title: How Much of An Impact can Scrum Have in a DevOps Environment?
  description: Discover how scrum enhances DevOps for seamless software delivery in this insightful short with Martin Hinshelwood. Transform your team's performance!
  captions: ""
- id: LkphLIbmjkI
  title: Why Are a Scrum Team Better Served by an Agile Consultant than a Professional Coach?
  description: Discover why a scrum team benefits more from an agile consultant than a professional coach in this insightful video with Martin Hinshelwood.
  captions: ""
- id: LMmKDlcIvWs
  title: What is Kanban?
  description: Unlock the power of Kanban! Discover how to optimise workflows, visualise processes, and drive continuous improvement in this essential guide.
  captions: |-
    What is Caman? There are lots of different definitions of Caman, and there are lots of misunderstandings about what Cban is. At its core, Caman is a strategy, not an actual system of delivering stuff. That's one of the common misunderstandings of Cban: that it's a system of delivering stuff. It's not; it's a strategy to help you understand your existing system of delivering stuff and help you optimise that system of delivering stuff.

    Quite often, I'll sometimes describe it as a meta process. It's a process that lets you monitor a process, which just messes with people's heads. But effectively, Caman brings some rigor, some metrics, and some analysis of those metrics to allow you or your team or your organisation to look at any system and what's happening in that system and adapt it in a good way. You can see when we make a change to the system, how does that affect the data? How does that affect the flow of work through that system? If you've made a positive impact, you keep doing that thing, and if you've made a negative impact, you stop doing that thing. Go back to the old way.

    You could also say that Caman is a work-limited pool system, but that's a little bit... nobody understands that terminology. The easiest way to describe it is it's a way of looking at your existing system and helping you, as an individual, ask more interesting questions about how that system goes together in order to have a more optimal system to have work flow through your system more effectively.

    A Cban strategy can be applied to any system; it doesn't matter what the system is. If the stuff going through a system, whether that is a checkout at a supermarket—that's a system with stuff flowing through it—or your engineering team and you've got work flowing through it, or your creative team and you've got work flowing through it, it doesn't matter what your system is. Cban brings that Caman strategy that you apply, bringing a little bit of rigor to that system and some metrics that allow you to monitor that system.

    For example, one of the key things that happens at the beginning of any CAND discussion is that you create what Cbang calls a definition of workflow. All that means is you write down how you work. That's it; that's all the definition of workflow is. You've got your way of working for a particular thing that you do. It could be a team with work going through it, it could be a machine that processes something, or it could be a checkout at a supermarket. You write down the way everything works in that system because what a lot of people... even just the act of doing that can create optimisations in the system.

    If you've got five people working in a system and you've never written down how that system works, what do you think the chances are that everybody working in that system uses the same terminology, makes the same or similar decisions, applies the same rules to playing the game? Yeah, that's a great example, actually. I like that one as well. So if you went out and bought Monopoly—I'm not suggesting it, by the way; there are way better games than that—but if you did buy it because it's the most common thing, right? You can find it in every supermarket. If you went out and bought Monopoly and you immediately tore up the rule book and you just guessed how to play the game, and you had four people playing the game and everybody just guessed... Monopoly is a good one because everybody knows how Monopoly kind of works, right? 

    Would everybody be playing the same game? Would everybody be playing by the same rules? Would everybody have the same understanding of the mechanisms of the game and how it actually works? No, they wouldn't, right? They would each come up with their own way of doing it. If you've ever been at one of those family dues where you've got Monopoly out, you argue over how the rules work. You argue as a group, as a family, about how you should play the game because you've not agreed as a group how to play it. That's what the rule book that comes with a game is: here's the way you play the game.

    So where's the rule book for your team, for the way your team works? Where's the rule book? When a new team member comes in, do they also just make up how they work, and then you tell them when they're doing it wrong, and hopefully, they end up figuring out how to do it right? It doesn't make any sense. You write it down.

    What that typically looks like... we've all seen what a lot of people do: they draw a board on the wall or in JIRA or in Azure DevOps, and it has a bunch of columns, and they call that CAND. That's not a CAND strategy; that's just a board. Anybody can have a board and have work flow through the board. Part of the CAND is deciding and agreeing what that workflow is. Once you've agreed what that workflow is, you can then apply some metrics and monitor what's going on in that workflow.

    Once you're monitoring what's going on in that workflow, just looking at the data is not enough. Remember, you have to actively manage the work that's going through the system. You actively make choices about what is happening within the system in order to optimise the outcome. Then you're going to look at the data to improve the system. You look at the data, and then you actively make changes to the workflow. 

    So you've written down how you think you work right now. That's where you start. There's an expression they use in Caman: start from where you are. That's the expression. So where you are is what you do right now. Write down what you do right now; that's your current definition of workflow. You build the board, you visualise your work in process, your work that's going on, and then you start using it. You're like, "Oh crap, we didn't think about this. Oh, that doesn't quite work like that." So you start making changes so that it more accurately reflects your definition of workflow.

    Because you're visualising your work, you start noticing things. Humans are really good at visual seeing when things aren't quite right or the way you think they should be. Then you can go look at the data and say, "No, no, no, we should actually change this. We shouldn't have two columns; we should have one," or "We shouldn't have one column; we should have two." Then you make those decisions. You're changing your workflow, you're actively managing your work, and you're changing your workflow. 

    That's what creates this continuous improvement loop of optimising your process. Making a little change: did we make it better? Yes? Awesome! Let's see what's going on. Okay, we use it for a while. But this is still broken; this doesn't work right. Okay, well, let's fix it. Let's try something different. Okay, now does that work? Yeah, yeah, yeah, that works great.

    This application of... it's actually an application of Little's Law; you can go look that up later. This application of a CAND strategy to any system will help improve it. If your current system of work is failing you, then you would benefit from creating and applying a CAND strategy. Don't wait; the sooner you start, the sooner you'll improve. Get in touch below.
- id: LpiLOBG7WgI
  title: What should you do if your Sprint Review delivers harsh, scathing feedback?
  description: "Master Sprint reviews with confidence! Learn to turn harsh feedback into actionable insights and align with stakeholders for product success. \U0001F680"
  captions: ""
- id: lvg9gSLntqY
  title: Why does project management not work in complex environments?
  description: 'Discover why traditional project management fails in complex environments. Martin Hinshelwood explains the need for agile solutions. #agile #projectmanagement'
  captions: ""
- id: LWRAX3OyO28
  title: The Power of Continuous Delivery
  description: Discover the true power of Continuous Delivery with Martin Hinshelwood! Learn how to reduce risk, enhance reliability, and transform your software delivery.
  captions: |-
    If you're trying to unlock the power of continuous delivery, then you've probably considered the type of benefits that you get from it, and perhaps they're not the benefits you think. While it is true that continuous delivery can help you become faster, that's a lagging side effect of the work that you would do. The real benefit of continuous delivery is the requirement for automation within the context of DevOps, and the real value of automation within the context of DevOps is you've not got a person doing the deployment; you've got an automated tool during the deployment. So you gain consistency and reliability of what is happening, and that consistency and reliability reduces your risk.

    If you're interested in how much risk that is, there's one example that I always used to use, which was the Night Capital Group, a financially traded stock exchange organisation in the US. They did a deployment of their software; it failed due to various reasons, mostly to do with manual deployments. They ended up losing about $10,000 an hour or a minute or whatever it was, but at the end of the day, they had to file for bankruptcy, and at the beginning of the day, they had $450 million in the bank. 

    So that's the example I usually use. Probably today, I would say CrowdStrike. If you've got automation that checks that your system, that what it is you've created, your teams have created, is good and meets the minimum bar for the business, what's your risk level? That's the power of continuous delivery: consistency and limiting risk. You can ensure that within your continuous delivery process, you have the checks that you as a business require to protect your business. 

    So there's protecting your business, protecting your brand, protecting your employees, and protecting your customers. All of those things can mostly be automated. Almost all of those things that could possibly go wrong can be automated. You can't automate legal stuff, so you would still have to handle some things there. But from the context of not wanting my software to fail, not wanting it to send money to the wrong place, we use testing, we use automation, we use continuous delivery, continuous everything: continuous testing, continuous deployment, continuous delivery. 

    Those are the things that help you get faster feedback because if it's an automated process, you can go around that loop, and the developers can find out that it's broken or it's not doing the right thing much faster. A great example of that is the Azure DevOps team at Microsoft, which went from delivering 12 features to production per year for 600 people to delivering 280 features to production per year for 600 people. 

    So the number of people didn't change, but they massively increased the number of features delivered. Part of doing that was changing the feedback loop, making the feedback loop faster. They went from an automated build that would take days to get a response from to one that took minutes and seconds to get a response from. They used to have to run their full suite of tests in, I think it was four or five days, to actually get a response for a particular thing, and now it's three and a half minutes for the entire test suite. 

    That level of feedback makes feedback faster, costs less, reduces risk, and increases effectiveness. That shortened the feedback loop. If you're also deploying and getting your feature in front of customers, that continuous delivery piece means you're getting your product in front of real customers. You're moving to production on a continuous basis. 

    Even the Windows team, which is probably the biggest, most complicated product on the planet, is 24 hours or less doing continuous delivery from developer cutting code to being in the hands of real production users, albeit inside of Microsoft. It's 24 hours; it's a week. They've got it in front of real external users; it's a month. They've got it in front of 20 million external users, and then it's three months. They've got it in front of, I don't know, 850 million external users. 

    If CrowdStrike was doing what the Windows team does, they would not have caused the errors that they did. Continuous delivery, the practices within the context of DevOps that enable continuous delivery, are the things that reduce risk, increase effectiveness, and give you faster feedback.
- id: LxM_F_JJLeg
  title: Don’t put down to malevolence what can be explained by incompetence
  description: "Uncover how incompetence, not malevolence, often hinders agility in projects. Join Martin to transform your agile journey! \U0001F680 #agile #scrumtraining"
  captions: ""

