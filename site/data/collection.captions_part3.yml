- id: _FtFqnZHCjk
  title: The Evolution of Product Management in the Agile Era
  description: Explore the key differences between Agile and traditional product management. Learn how Agile's faster cycles and feedback loops enhance value delivery!
  captions: |-
    Agile product management differs from product management that has been done for many years in actually very subtle ways. So you could say it doesn't differ at all as well because all of the tools and techniques that you would use in product management and you have been using in product management for many years are the same tools that you would use in agile product management. But the way that you approach the context of the tools and which tools make more sense and which tools make less sense is the bit where it differs because we're changing the underlying principles of what it is we're trying to achieve.

    So in the traditional world, we're probably going quite a long time between actual releases, at least to get the first release. And then between releases, we're probably taking a long time. I'm thinking about the Azure DevOps team at Microsoft when it was Team Foundation Server and Visual Studio, right? That era around the 2010 era, they were on a two-year cycle, right? So they were delivering a new version of the product every two years. Halfway, they would do a service pack, and then halfway into, roughly about the same time, I guess it was roughly about the same time, they would have a beta of the next version of the product.

    What really happened was that when you're thinking about product management, you're thinking about how do we make a product that maximises the value for our business, right? That makes the most money. That's what we're talking about with product management. We have a product, we need to manage what we put into that product, what we take out of that product, how we ship that product, how we market that product in order to maximise the return on investment. That's ultimately what we're talking about.

    In that world of releasing long releases, right, long time between releases, they found that they really struggled to maximise that value for a number of reasons. It just took too long to advertise the value that they thought their customer wanted. So the first one is you have to build the whole thing, right? You have to, if a customer wants XYZ feature, you have to build XYZ feature because when you ship XYZ feature, you're not technically shipping again for two years. So if there's something wrong with XYZ feature or XYZ feature doesn't have some capability, right, then the customer is going to be frustrated and may go to another product, right? May go to your competitor because they do have that feature.

    So that idea of shipping once every two years actually means that you can't take feedback and get it in front of your customers for four years. Generally, there may be circumstances where you can change what you're working on, but then it becomes a big issue, right? Because you've planned all of this stuff over two years, and somebody makes a change to what it is they want to deliver. What is the impact across all of the things that you're working on? So that's why we have change requests, right? We make a complicated, convoluted change request policy system in order to reduce the change coming in because change coming in is high cost because we have to change all of the things that are going on in order to accommodate that change.

    So you've got this long cycle. I mentioned that it was twice the iteration length to incorporate feedback from your customer quite often. And the reason for that is that you get your product in front of your customer at this point, and then in two years, we're going to do another ship. But we've already had to plan what we're going to put into that two years, right? So when we get feedback on version one of our product, that's going to end up in version three of our product if it's small enough or important enough. It might end up in version two, but we'll have to kick something out that we were going to deliver. So that's risk, right? Because we're not delivering something that we think the market needs.

    We end up with that twice the cadence, right? Twice our cadence is the amount of time it generally takes to get new features and feedback that the market desires. So what's the cost of delay? What's the cost to our customer of not delivering a feature that they need in order to service their business? And we're not going to deliver it to them for up to four years, probably a little bit less, but up to four years. That is a massive impact on not only your customer's ability to innovate and do things differently or fulfil their needs, but on your team and the people doing the work's ability to see the value that they create being used by the customers because the delay is just too long. They're not working on that feature anymore by the time the customer gets it.

    So one of the fundamental premises that we talk about in agile product management, the agile piece versus the just product management piece, is that we're going to have much shorter cycles, much radically shorter cycles. For example, the Azure DevOps team went almost overnight, some false starts, but almost overnight from a two-year delivery cycle down to a three-week delivery cycle. So delivering to production every three weeks, delivering to real users out in the world every three weeks. And that enabled them to get closer to the customer, right? So even if we still had that same twice the iteration length, you're talking six weeks to get something new in front of your customer that they need or tell you that they need. And six weeks is much shorter than two years, four years, right? Up to four years.

    So up to six weeks instead of up to four years. And that fundamental change means that a lot of the practices that you might use in product management then become a little bit irrelevant, right? So I'm thinking practices that become irrelevant would be change requests, right? They pretty much become irrelevant because change requests were there to protect the plan and protect the investment in the plan. But since our plan is now only three weeks, we don't need to protect it so much because the risk of something derailing that plan is much smaller, right? Because we can correct much more often, so we don't need that change request system.

    We would look at portfolio investment, like how much time are we investing in different features, different parts of the product, or do we want to move people? And we can move people in a three-week cadence rather than on a two-yearly cadence. But then we're also, because we're delivering more frequently, we're able to then remove other things, right? That are going to get in the way of delivering more frequently. Can you imagine having to do UAT for your entire product every three weeks? Right? UAT doesn't make sense. User acceptance testing doesn't make sense.

    There's a famous quote from Brian Harry. I love that presentation of his that he did, and he had a picture of the slippers from the red glittery slippers from Wizard of Oz, and it was like there's no place like production. No matter how much testing you do, no matter how much validation you do, you're always going to find production issues. And that's where UAT came in, right? UAT was trying to protect production from issues introduced by the engineering teams. But if the engineering teams are delivering new versions of the product every three weeks, where's the time to do that UAT?

    So one of the things we need to fix, one of the agile practices we need to bring in, is much higher quality product, much higher quality code, much higher quality engineering in order to not have those issues in UAT. Your UAT should be a cost centre anyway. It should not be a value centre. If UAT finds something that shows a failure of quality in the engineering system, UAT should never ever find anything. So if you build up quality to the point where UAT is a cost centre, not a value centre, then the people that fund the UAT, that desire the UAT because they find stuff, will start to erode that because you're demonstrating the quality of your product. You're demonstrating that that UAT is unnecessary because it never finds a problem.

    So you have to apply that thinking to all of the practices that we have in product management. Do they make sense in agile product management versus the way we always used to do things, right? So can we do it quickly? Is it getting in the way of actually getting our product in front of users? Because that's how we validate that we've built something that's valuable. How do we enable that continuous delivery of high-quality, usable product into the hands of our users? And what of our practices that we use right now in product management make sense in that space and which don't make sense, right? And they maybe don't make sense because they become irrelevant or they don't make sense because they take too long. And what are we going to replace them with in order to effectively maximise the ROI of our product in the market?
- id: _ghSntAkoKI
  title: Live Virtual Professional Agile Leadership in 5 minutes!
  description: Discover Agile Leadership in just 5 minutes! Watch our timelapse overview of a comprehensive training course and explore free workshops on our channel.
  captions: ""
- id: _rJoehoYIVA
  title: 'Mastering Azure DevOps Migration: Navigating Challenges, Solutions, and Best Practices'
  description: Discover expert insights on Azure DevOps migration, addressing common challenges and benefits for IT managers, DevOps teams, and business owners.
  captions: |-
    There are lots of reasons why companies come to us to help them with an Azure DevOps migration. Mostly, it's knowledge. We've done a lot of migrations. I've done hundreds of migrations. I've done migrations up to Azure DevOps. I've done upgrades to servers over the years, beta servers included. I've written code to move data in a custom way from one environment to another environment, and I've written support code that allows you to standardise that process as well.

    So, the main reasons that companies come to us is we've got a department or a product that we've sold to somebody else, so we need to get it out of the rest of our stuff and move it over here. That's one. We created one big project. I think I coined the term many, many years ago: one project to rule them all. Right? So, they created one massive project, and they actually realised that they need to split it into two. So, take one thing and split it into two, or they created 20 projects and they realised that they're all interconnected and they should all be in one bucket. Those are probably the main ones.

    I've sold part of my company. I created too many things and I want less things. I've created not enough things and I want more things, so moving that data around. But also, we don't know what to do. Right? This is our current state of what we've got. We want this. How do we get from here to there? Because it is really complicated to do some of the migrations and upgrades that people want, really depending on their context.

    So, we do a lot of migrations where there are many, many steps to get all the way to Azure DevOps because the servers that their environments are on are crusty and old. And that's the best reason to do it. Right? If your servers and your environments are crusty and old, then your teams that support them are not able to support them. Right? So, you don't want to be running them yourself. You certainly don't want to be running all of your organisational asset, which is your code, in a crusty, falling apart, barely functions, doesn't get any support anymore. Right? Because the environments are old.

    So, if you can get it up to the cloud, get it into that fully supported, fully maintained environment where, in this case, Microsoft do all the updates, do all they take it forward, they engineer the product, they do the support and maintenance, and load and everything, disaster recovery, just everything, they take care of it. And it costs you, what, $4 per user per month to get that? It's a total no-brainer. 

    So, getting up to the cloud, doing those things. We've also done a lot of migrations from TFS to Git, from GitHub to TFS. I even did a migration once from Azure DevOps to TFS. I assume somebody in the organisation went without permission and took all the stuff up to Azure DevOps, and there's no way back from Microsoft's perspective. 

    So, yeah, there's loads of reasons why companies ask me to do migrations. Some of them are good reasons, some of them are not so good reasons, and sometimes we’ll push back quite heavily and say, "Look, this is not..." I get a lot of calls for backup. Right? You don't need to back up Azure DevOps. Microsoft back it up for you. They have disaster recovery, they have copies off the tape, they have all of that stuff for you, and they're all the ISO compliant for the level of recovery that you're paying for. 

    So, there's no need for you to do that. So, we push back really heavily on that. But we've also done it because the customer really insists that they want a backup, and sometimes you're going to do that. 

    So, there's lots of good reasons, lots of bad reasons to move data around in Azure DevOps. But it's irrelevant. People want stuff done the way they want it done, and sometimes you need to do that. And, yeah, we help them out doing that.
- id: _WplvWtaxtQ
  title: Why Every Scrum Master Needs an Immersive Training Experience
  description: Discover why the PSM immersive learning experience is perfect for aspiring Scrum Masters. Elevate your skills and thrive in accountability with NKD Agility!
  captions: |-
    So what we don't need is any more Scrum Masters that don't have the experience and understanding to be able to help the teams that they work with. We don't need any more Scrum Masters that actively inhibit the maximisation of value and the effectiveness of teams because of their lack of knowledge. 

    I think the Scrum Master immersive class is a perfect opportunity for people who are aspiring to be Scrum Masters to truly try and understand what it takes to be a Scrum Master. Now, don't get me wrong, if you're thinking of being a Scrum Master and you're not actually a Scrum Master yet, the immersive class is probably not going to work out very well for you. 

    Mainly because you, as an aspiring Scrum Master, are going to have difficulty in enacting and working through the assignments which are specifically designed for people who are already working as a Scrum Master, regardless of their knowledge level. Already working as a Scrum Master and focus on them becoming more effective at what they do, at helping their teams be more effective. 

    So really, if you're looking to be a Scrum Master, then probably the immersive class is not for you. But if you are already a Scrum Master, regardless of your skill level, then the immersive class is an absolute perfect fit to enable you to really deepen the knowledge that you need to perhaps become a great Scrum Master. 

    If you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you.
- id: -Mz9cH0uiTQ
  title: Does a client tell an agile consultant what they need or does it work the other way around?
  description: Discover whether clients guide agile consultants or vice versa. Martin Hinshelwood shares insights on navigating agile transitions effectively.
  captions: |-
    So the question was, does a client tell an agile consultant what they need, or does it work the other way around? I think it works the other way around, but I think it's more complicated than that because a lot of clients come with an agenda. So quite often, you come in under a particular agenda, but the mark of a great consultant is you are trying to deliver the maximum value to the customer, right? 

    So you have to figure out, regardless of what they've asked for, what is it that they need for them to be successful in whatever it is that they're trying to do? Or even, is the thing they're trying to do the right thing that they're trying to do? And then slowly convince them to do the right thing. So I guess it depends how long you're going to be engaged with the customer for what that really looks like. 

    I'm quite often engaged with customers for a short period of time. Most of my engagements with customers have either been over two or three weeks. That's generally when they want advice. They're like, "We want to understand how we do something," and I'm coming in, giving them advice, and then they're taking it forward. I'm not working with them to do it, but I've also done longer engagements, usually for professional services teams, where I'm working with lots of different teams inside of their organisation. 

    So it's like I'm internally consulting with lots of different teams, and I would come in and help observe, give them some feedback, usually working with their scrum master. So when they come, they want a particular thing, right? They want to, usually actually, they want to get better at this agile thing. But that's not necessarily like getting being awesome at agile. What value does that provide the company? What value does that provide their customers? It's not necessarily the right thing, but that's what they ask for because that's the trend, right? 

    So you quite often come in under that guise, but then you've got to figure out what is it that this organisation actually needs. Is it a leadership issue where you need to focus on that whole engagement pipeline that they're working through? I did an engagement recently with a professional services company, and they had built up this great business. 

    I have a weird name for it; I call it the death spiral of consulting. It's where you get a little bit too big, and you need to feed the monster, which is your business. So you have very aggressive sales tactics. You've built a great name in the industry, you're very aggressive with sales tactics, you bring in more, you have to hire more people to get the gigs done because you've got these aggressive sales tactics that bring in lots of gigs. 

    Then you need to do them now, and you get more gigs than people, so you have to hire more people. Because you have to hire them quickly, because you've told the customer you can do it, you're not waiting for the top-tier candidates; you're getting the people that are available. Then they're doing the gig, and then you need more gigs because you've now got a bigger headcount and more people, so you have more aggressive sales tactics, getting in more gigs. 

    Then, oh, all our people are busy; we need to hire more people. Even those level of people are not available at the next level down, and you end up in this death spiral of taking on too much work when what they really need is a whip limit, right? They need to control their sales pipeline. It's not a free-for-all; it's what can your business safely handle to deliver the level of quality that your customers are looking for. 

    I think this is true not just for professional services; this is true in any business. What is the level of quality and brand and visual that you're trying to get from your customers? And what's the maximum amount of business you can do while safely maintaining that? Then you want to grow slowly while maintaining that level of quality, so you're hiring the right people, you're engaging on the right engagements, right? You're not taking any engagement that comes along because probably any engagement sucks. You're picking and choosing which engagement at that level. 

    I think most customers don't know what they want. They think they want this agile thing or this DevOps thing, and can you come and install it for us? But you have to figure out what it is that is the actual difficulty, the thing that they need help with, and help them with that, even if it's kind of surreptitiously or kind of around a different way so that they feel like and really do get value from what you're doing. 

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: -pW6YDYEO20
  title: Worst trait in unskilled scrum masters?
  description: "Discover the worst trait in unskilled Scrum Masters! Martin Hinshelwood reveals why it's a critical no-go zone for effective Agile teams. #Scrum #Agile"
  captions: The worst trait in unskilled Scrum Masters is probably their thinking that they're the boss of everybody, thinking that they should be telling people what to do, thinking that they should be micromanaging, thinking that they should be setting up the Jira environment, thinking that they should be allocating the work, and all of that is just crap. It has nothing to do with being a Scrum Master. Being a Scrum Master is about helping teams be more effective, and all of those things—I can't think of an easier way to make a team ineffective. Focus on what helps the team stand on their own, be better at what they do, being visibly present. And yeah.
- id: -T1e8hjLt24
  title: ' shorts 5 things you would teach a produtowner apprentice. Part 5'
  description: 'Join Martin Hinshelwood in Part 5 as he shares essential lessons for aspiring product owners. Discover key insights to kickstart your journey! #shorts'
  captions: |-
    A blog post that I read years ago started with the phrase, "If you're reading this, you're already in the top 10%." That's because there's only a small number of people that actually focus on continuous learning, that actually try new things all the time, that are actually reading up on different techniques and different topics. They don't have to be new; they can just be new to you. They can be older things that you're going and figuring out. 

    "Crossing the Chasm" was written in the 80s, right? What are the things that you're reading? How do you enable yourself to be in the top 10%? Because that's how you maximise your chances of getting the best gigs, right? You need to be in the top 10%. If all you need to do to do that is read some blog posts every week, maybe a couple of books a month, that's not a high bar.
- id: -xMY9Heanjk
  title: What is the hardest part of working with a brand-new scrum team?
  description: Discover the toughest challenges of joining a new Scrum team and how to transition from novice to mastery in Agile practices with Martin Hinshelwood.
  captions: |-
    Imagine, what is the hardest part of working with a brand new Scrum team? I guess it depends on whether you're talking about a team member joining the team or like a Scrum Master, right? Your coach working with a brand new Scrum team, it's probably both pretty similar. It's what we think we know. I think it's the same is true when you work with any group of people new that you... it's... I always, this is one of my tests, right? I ask teams, people, companies, I ask them how they think they're doing. It's grammar, Agile or whatever. And if they say, "We're awesome at it," I know it's going to be a complete car crash. 

    And if they say, "Well, you know, we don't think we're doing that well. We really need some extra help. We're trying to do different things, but we're hitting stumbling blocks," you know, it's going to be absolutely awesome, right? Because they've got to that point where they realise what they don't know. And that's a big inflection point for teams. 

    So when you're working with teams, new teams, the biggest gap is what they think they know. They think that they have to do user stories. They think that they should be doing planning poker and story points. They think they should be doing estimation. They think they should be doing burn downs. They think they should be monitoring their velocity, and all of those things are nothing to do with Scrum, right? They're barely mentioned in the Scrum Guide. Burn downs are mentioned; I'm not sure velocity is, but burn downs are mentioned as a, "Here's a list of things you might do." 

    So they're not intrinsic to the process at all; they're strategic choices you might make, right? And trying to help them understand the difference between that and the fluff, right? So the core thing that we need to understand as individuals, as teams, as members of teams is that we're trying to create, we're trying to leverage empiricism, right? It's a scientific method. We're going to do something very small, we're going to get it to the people who are going to use it, and then we're going to analyse their usage. And maybe they're going to tell us feedback. We're going to analyse their usage, and then we're going to change what we do based on that. That loop, that's an empirical loop. 

    And that knowledge, that understanding seems to be fundamentally missing from most teams that are doing Scrum, right? They don't... they never learned or never understood the foundational elements, and they're just looking at the mechanisms in Scrum and just following mechanical Scrum. So trying to get them to understand that all of the mechanical parts are just... so the bollocks. You need to make sure you get the empiricism, feedback loops, shortening the time to market, getting that, closing that feedback loop, closing that time to learn, right? Those are the things that actually matter. 

    And whether you're focusing on Kanban or Scrum or kind of an Ann Scrum or Lean or whatever, it's all fundamentally the same thing that we're trying to achieve. Those underlying foundations, if we understand them, everything else is just, "Right, what would we like to do in the way we do it in order to be successful?" And bringing those foundations in when people have already built houses on top is much harder.
- id: -xrtaW5NlP0
  title: Why is Kanban such a popular approach for people in creative industries?
  description: Discover why Kanban thrives in creative industries, tackling complexity and enhancing visibility. Join Martin Hinshelwood for insights on this agile approach!
  captions: |-
    I think Kanban is hugely popular in all industries, not just creative industries, because it does model the behaviour of the existing system. Right? It doesn't require you to change how you're currently doing things. So effectively, when you're implementing a Kanban approach, you start from where you are. You model your existing system, right? And in modelling your existing system, you actually iron out some variability. Because if you've got 10 people in your organisation that are, let's say, our output is marketing videos, right? Marketing content for businesses that we're working with, then, and we've got 10 people working on that marketing content, how does each person choose what the next thing is they go work on? If every person picks differently, right? Makes choices differently, then we've got a high degree of variability in our system that we can iron out. Right? If all these 10 people just got together and agreed whatever thing is in our list of things to do that's been sitting there the longest, let's do that. Right? That way, the oldest thing is the quickest thing to get through the system because you're trying to reduce your overall cycle time, right, for your customers. Then you can use Kanban to model your system, right? You have that conversation: what is our working agreement? What is our definition of workflow for our system? You model it, decide when it starts, when it finishes, and then you've got the data to figure out when we make changes, is it improving the system or is it not improving the system?

    Actually, I had this conversation a couple of months ago with my dentist, right? So totally nothing to do with software, nothing to do with it, nothing to do with any of those industries. If you're a dentist, right, you have to book people in for appointments. How quickly can you book people in for appointments? So if I say to my dentist, I need an appointment, and it's three months out, right? That's a very long time, right? So their cycle time, their ability to get something into the system, I've asked for an appointment and be able to actually deliver it, is really, really long. Really long. What could they do to shorten that cycle time? Well, perhaps they need little gaps in their calendar to be able to have things that pop in. Perhaps they need to deal with cancellations better. Perhaps they can chase people to say, do you still need this appointment? All those kinds of things, right? But how do they know that that's effective? How do they know that it's valuable and it's changing the way they do business? Right? Because wouldn't it be great if you went to the dentist and said, I need an appointment, and they said, yeah, we've got one next Thursday for you, right? That would be great.

    So having a model for your system so you can monitor the flow of work through your system and look at your cycle times, look at your throughput, look at how long things are taking. Because the shorter the throughput, quite often, the shorter the cycle time, right? People getting into the system and getting through it quicker. And I'll tell you something: people are happier customers if they get their stuff faster. And that's what we're looking at. We're looking at that continuous flow, continuous delivery of stuff. Whatever stuff's in your system, we want to deliver it as quickly as possible.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.

