[
  {
    "id": "Cia3d_y9akQ",
    "title": "What are some of the most common misconceptions you encounter about the Scrum Master role?",
    "description": "Uncover the truth about the Scrum Master role! Join me as I debunk common misconceptions and highlight the importance of competence over mere practices. ðŸŒ±ðŸš€",
    "captions": "There are lots of misconceptions about what the accountability of the Scrum Master is supposed to entail. Focus on, um, most of this manifests because of the difference between an organisational role, which might include many accountabilities, including Scrum Master, even if it's called Scrum Master, um, and the actual accountability as what Scrum talks about and what it genuinely leads to. Because there's been so many people that have transitioned from whatever they did before into Scrum Master, so they might have been, um, project managers, they might have been managers, they might have been developers, right? And they transition into the role and they have limited understanding of the core principles and philosophies that underpin Scrum and underpin Agile. Um, they end up making some very common, um, mistakes. So common that you'll see, um, one of the most common responses when people say, \"Oh, Scrum's not working, we did this,\" and the most common response is, \"That's not Scrum.\" \n\nThe reason that's the most common response is because the thing that they describe, RBE, is not talked about in the Scrum Guide. It's not part of Scrum; it might not even be part of anything to do with Agile. Um, and people will say, \"Well, but in Scrum you have to...\" Great example: \"You have to have a user story.\" User stories are not a Scrum thing. \"You have to have a burndown; if you don't have a burndown, you're not doing Scrum.\" Burndowns aren't a Scrum thing. Burndowns come from before Scrum, and yes, they might have been encouraged, uh, for a while, but they're not in the Scrum Guide anymore for sure. Um, user stories were never in the, I don't think they were ever in the Scrum Guide. I would need to go look at the history of that thing, but, um, I'm pretty sure they don't. Planning poker? Not a Scrum thing. User story points? Not a Scrum thing. All of these things are mechanisms that people have chosen to use and might be quite common within the context of Scrum, but that doesn't mean there's something that you have to do. \n\nRight? If it's not working for you, stop doing it or pick something else, right? Um, so one of the most common, uh, dysfunctional behaviours that I see Scrum Masters time after time doing is focusing on mechanisms. And the reason this goes back to the confidence story that we have, the reason they're focusing on mechanisms is they have no skills and abilities and knowledge within the context of the philosophies, principles, and theories. If you don't understand the philosophies, principles, and theories, you can't apply them in new and interesting ways. You're going to look at what other people are doing and just copy that. So you end up copying planning poker. \"We're just going to do planning poker; we're going to do user stories; we're going to have a burndown.\" We're going to do those things that everybody else is doing because I don't understand why they're doing it. I don't understand the principles, philosophies, and theories that underpin the reason this thing isn't successful for this particular team or this particular company. \n\nCompetence, right? Move away from these mechanical practices that are a choice and move towards understanding the principles, theories, and philosophies. Another great, uh, most common, um, Scrum Master thing is actually the reason that Agile Coach exists, even though there's no such thing as an Agile Coach, is people think the Scrum Masters focus on the team. It's not; that's one-third of their focus. Scrum Masters should be focused on the team, the product owner, so the business side, and the organisational structure and capability. All three of those things in equal measure are the accountability of the Scrum Master. So focusing on the team means that you're perhaps creating suboptimal improvements within that team that then create an overall dysfunction in the organisation because you're not doing, you know, all of... If you're working in a team and it's within the context of an organisation and you're trying to help that team and you get them to do something that causes friction with the rest of the organisation, right? You probably got a suboptimal change. \n\nWhat you should be doing as a Scrum Master, instead of making that change in this team and making them unpopular within the organisation because they're not doing the things they need to do, is to work on changing the organisation. Or perhaps it's the right thing to do, right? Just change it, and they see it's being successful, and now we can do that. But that's a strategy. Are you using the correct or most effective strategy within the context of your understanding as a Scrum Master of the theories, principles, um, and philosophies that you're trying to fulfil, right? That will help you make those choices. \n\nUm, there's a whole bunch of, uh, stances. Uh, we talk about stances of the Scrum Master, um, and for me, the stances: coaching, mentoring, uh, teaching, right? These are stances of the Scrum Master, and the ones that we see time and time again, actually, I have... They're so common they're included in the advanced Scrum Master class because they're so common. Does the Scrum police, right? \"That's not Scrum,\" or \"If you're not doing user stories, you're not doing Scrum,\" or, um, \"Oh, you... The team shouldn't be talking to the customer,\" right? All this crap. \n\nUm, you've got the scribe of the team, so the Scrum Master writing things down for the team. The Scrum Master has no, in general, I'm using this to highlight a specific context. The Scrum Master has no need to have permission to... No, no, no specific need for that. I've helped loads of teams that use Jira, and I've never touched Jira. I've never been an admin of Jira. Um, those are not part of the Scrum Master's role. And that brings us to Jira admin, right? Um, being the chairman of the team, being the secretary of the team, being a hero on the team, all of these are very dysfunctional behaviours that are the result of a lack of competence within the context of Scrum Mastery, right? \n\nUm, so anytime a Scrum Master is making decisions, they're not being a Scrum Master, right? Any time they're, um, hiring and firing, although those are things they might do, right? It's absolutely possible for a Scrum Master to also be the manager of a team. Therefore, they might be accountable in the organisational context in addition to them being a Scrum Master for the team. They're also accountable for reports, for hiring and firing, for decision-making, right? For other things. But that's not the focus of the Scrum Master. And if those other things are conflicting with enabling the effectiveness of the team, then they become something that it's expected that Scrum Master to try and address, right? \n\nSo this idea of the Scrum Master, the reason they moved it from talking about it as a role to talking about it as accountabilities is because most people in organisations have multiple sets of accountabilities, right? And not all of them are Scrum-related. Scrum is not your whole world when you're a developer, when you're a product owner, when you're a Scrum Master. If you're a Scrum Master, you might also be a manager. You may be a delivery manager accountable for delivery, accountable for other things, right? You might be accountable for, um, uh, uh, reviews. You might be accountable for various things. If you're a product owner, you're probably a product manager. You're accountable for other things within the organisation. If you're a developer, although you're doing Scrum, you might also be accountable for other things in the organisation. You might support and maintain things that are different from what it is your main piece that you're working on. \n\nSo there are so many common misconceptions, and I feel like these misconceptions are so common that they become fact. They become true, like you must do story points, you must have user stories. Try and move away from those things. Try and look at... Do your research, right? Understand why those things exist, and perhaps they are the right thing for your organisation or your team, but also perhaps they're not."
  },
  {
    "id": "cIkodssozoE",
    "title": "Free Workshop 08 - Introduction to User Stories",
    "description": "Join our free 90-minute workshop to learn about user stories, including how to create and break them down effectively. Don't miss out!",
    "captions": ""
  },
  {
    "id": "COUE296XnWc",
    "title": "NKDA Webcast Agile Leadership Agile Transformation 20231005 130313 Meeting Recording 1",
    "description": "Join Dr. Joanna PÅ‚askonka & Martin Hinshelwood in this 18-min webcast to explore Agile Leadership & Transformation. Gain insights, strategies, and engage in Q&A!",
    "captions": ""
  },
  {
    "id": "CPRy008ZMTw",
    "title": "31 December 2021",
    "description": "Join us as we reflect on the highlights and memorable moments of 2021, capturing the essence of the year in a captivating visual journey.",
    "captions": ""
  },
  {
    "id": "CPYTApf0Ibs",
    "title": "Does Your Team Truly Understand Your Product Vision and Goals?",
    "description": "Unlock your team's potential! Discover how a shared product vision drives Agile success and empowers decision-making in this insightful video. ðŸš€",
    "captions": ""
  },
  {
    "id": "CQHxyhm4k8k",
    "title": "PSOP In 5m",
    "description": "Discover the essentials of PSOP in just 5 minutes! This quick guide breaks down key concepts for a clear understanding. Perfect for busy learners!",
    "captions": ""
  },
  {
    "id": "cR4D4qQe9ps",
    "title": "#1 tip for a new Scrum Master",
    "description": "Unlock your potential as a Scrum Master! Join Martin Hinshelwood for his top tip to thrive with your new Agile team. #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "cv5IIVUgack",
    "title": "How Hard is it to Transition from Being a Developer to a Scrum developer?",
    "description": "Join Martin Hinshelwood in this #shorts video as he explores the challenges of transitioning from a traditional developer to a scrum developer.",
    "captions": ""
  },
  {
    "id": "CWxkBJJduCE",
    "title": "Redefining test driven development",
    "description": "Explore innovative approaches to test-driven development in this insightful excerpt from our \"Quality Code\" series. Elevate your engineering excellence!",
    "captions": "Test-driven development is not about building better code; it's about having better architectures. We create better architectures because we only create what we need to support the things that we need it to do. Doing pair programming means that we've got more eyes on the code. It feels like it's going to be less productive, but productivity is not a moment in time for the engineering team. It needs to be looked at across the whole system. \n\nWe can take what seems like a hit on productivity to do pair programming because there are two people doing things. Why can't we have them both doing their own thing? But we have less problems that we need later, which are much more expensive than the pair programming is at the start."
  },
  {
    "id": "CXOrndz5lN4",
    "title": "Building a culture of engineering excellence",
    "description": "Discover how to foster a culture of engineering excellence in your team. Unlock the secrets to agile success in product and project management!",
    "captions": "We need to focus on building a culture of engineering excellence. The technical leadership must set that direction and go in that direction. We need to build within our organisation the knowledge and understanding of the theories behind the reasons things work the way they work, and how we can then apply our empirical learnings within our context. \n\nEvery organisation is different, and with the knowledge of those theories, we can then extrapolate what the next best decision is that we can make."
  },
  {
    "id": "d0mG3YakfFQ",
    "title": "How to Make a Mobile Paper Prototype YouTube",
    "description": "Learn to create a mobile paper prototype in this step-by-step YouTube tutorial, perfect for designers looking to visualise their app ideas quickly!",
    "captions": ""
  },
  {
    "id": "D1wz-J1jklQ",
    "title": "The Power of Frequent Deployments - Reducing Technical Debt and Delivering Better Products",
    "description": "Unlock the power of frequent deployments! Discover how smaller releases reduce technical debt, enhance product quality, and boost customer satisfaction.",
    "captions": "When we don't deploy very frequently, there are a number of dysfunctional behaviours that don't have to be there but tend to creep in when we're deploying bigger chunks of work. One of those things is that we tackle bigger chunks of work instead of taking a big thing and breaking it down into smaller things. We try and tackle that big thing, and because we tackled that big thing and then we deploy it maybe after a couple of months, maybe after a year, that is unlikely to be edited. We're not going back around and editing that code again and again and again. Maybe in five years' time, somebody will come back around and add something to that feature. \n\nBut if we're deploying more frequently, if we're deploying faster, then our deployment window is smaller than the features that we're delivering. So we're thinking about how do I take this big chunk of work and break it down into smaller things that have value? If I'm deploying that smaller thing that has value, I'm probably going to be thinking about, well, if customers are using it, I can look at the data of how customers are using it and perhaps change the way I build it. \n\nSo that's one advantage. But the main advantage from a technical debt perspective is that when I'm writing that code, I know that I'm going to have to go edit it tomorrow to add the next slice and perhaps edit it the day after that to add the slice after that. So I'm thinking more about how do I make sure that this code is maintainable, supportable, and adaptable because either I myself or one of my colleagues is going to be coming and editing it tomorrow. \n\nYou don't want to, I guess there's a little bit of peer pressure, right? You don't want to look bad in front of your colleagues. I shipped some really bad code, and now my colleague has to go clean up my mess. That's not polite, right? Because they've got to go edit it again. But even if I'm doing it myself, I'm editing it again tomorrow. \n\nI don't know if you've ever been in this position, but quite often when you find some nasty code, something that's written very badly, and you want to go look up the blame tool to find out who do I blame, usually it's yourself, right? You're the one who made the mess, and you don't remember. So even if you don't want to see yourself that way as writing that messy code, then we take a little bit more care. \n\nIt's also worth noting that if we're doing hypothesis-driven engineering practices, right, so that we can collect telemetry and data and then validate whether we're actually building the right thing, then we're perhaps only going to invest in the second slice if it's worth investing in it. If users are connecting to it, if they still desire to continue to invest in that feature. \n\nSo quite often, we actually want to do a quick job on the first slice. We're choosing to incur technical debt, knowing that we're going to be looking at the telemetry, looking at the outcome, and seeing whether it resonates with users and whether we continue to invest in it or we take that chunk back out. \n\nSo this frequent deployment can not only help developers tackle technical debt issues because it just makes it harder to incur technical debt. We make it easier to write good code because if you're deploying to production at the end of the day, it needs to be production-ready. Every time I edit the code, it needs to be production-ready. \n\nYou're potentially doing continuous delivery, right? Everything that makes it into main ends up in production. Every commit perhaps makes it into production. So reducing those gaps enables us to reduce technical debt because we know we have to do a better job. It enables us to understand our customers' needs better because we can see them interacting with the partial thing we have built in order to get telemetry and feedback. \n\nThese small changes help build confidence, not only with the customer but build confidence in the product itself, build confidence in our ability to deliver and continuously deliver those small changes. So when the systems that we're working on are big and complex and have lots of interactive parts, that's when we want to be delivering smaller and smaller changes so we can see immediately when things go wrong. \n\nObviously, we need telemetry and we need observability of our system to be able to do that, but this is one of the core practical steps that any engineering team, any developer can take: make the batch size smaller. This works in a lot of cases, but in this particular case, if you're delivering code to production, reduce the batch size, increase the frequency of delivery and deployment to production, and you will see an improvement in the code. You will see an improvement in the product, and hopefully, that will result in happier customers."
  },
  {
    "id": "DBa5_WhA68M",
    "title": "The Art of Negotiation for Product Owners: Essential Skills to Master",
    "description": "Unlock essential negotiation skills for product owners! Learn strategies from an FBI expert to enhance your influence and success. Watch now!",
    "captions": "One of the things to teach a product owner apprentice is negotiation. Negotiation is something that, as a product owner, really as any team member, but especially as a product owner, you're going to be using constantly. You're going to have to negotiate with the developers on your team, you're going to have to negotiate with your stakeholders, you're going to have to negotiate with leadership in your organization. If you, as a product owner, want to be able to influence the things in your organization that affect your ability to deliver value, even if you don't control them, you need to understand how to negotiate and engage with the people who can. \n\nSo, negotiation is really important. As a product owner apprentice, there's a great bookâ€”I'm trying to remember the authorâ€”but the title is \"Never Split the Difference.\" \"Never Split the Difference\" is about negotiation. It's written by the FBI's head hostage negotiator for the last 20 years, and he talks about it as whether you're negotiating bedtime for your kids or negotiating hostage release; it's the same tools and techniques that you use. He has a masterclass on masterclass.com. \n\nWhat you need to consider as a product owner, and if you're helping out an apprentice product owner, they need to understand the ramifications of the decisions that they're making and how to engage in communication that gets them to an effective result. Just because a stakeholder wants something, even if they're the CEO, doesn't mean it's a good idea to build it. It just doesn't mean it's a good idea to do it. But you might not be able to just say no to that person. \n\nWhat are the tools and techniques that you build as an individual to help you enable that other person to withdraw the request? That's the way I think about it. You don't want to say no; you want them to say no. If so, you might not start with saying no; you might start with asking them questions about what it is they expect to achieve from that thing. When they don't know the answers, that could be a good indication that it's not well thought through. \n\nPerhaps you sit with them and do a lean business canvas. What information do they need? For example, the CEOâ€”if you're an apprentice product owner, you're not going to be able to say no to the CEO. What do they need to understand themselves so that they say no? That's what you need to enable as a product owner. You need to enable their understanding so that they realise that that's not the outcome that they're trying to achieve. \n\nIf you want them to say yes to something, if you're the product owner asking for more money, or asking for new features, or asking for a different name for your product, or more budgetâ€”whatever those things areâ€”you don't want to start by just asking a question that has a yes or no response. \"Will you give me the money for this?\" No. You want to figure out how do you get to yes, and it's not always a straight line. That's what negotiation is all about. \n\nThese are fantastic skills that you need to learn, and we do cover some of them in the Professional Scrum Product Owner class. We don't dive that deeply, right? I mean, we've got a two-day class; you can't really dive too deeply into some of these topics. But what we do cover is what are the things that you need to understand and where can you find the additional information that you need to engage in longer-term learning about this topic or these stories. \n\nIf you're taking our immersive classes, right, they have a lot more assignments to go and do in your organisation, so you would be able to come back. We can talk about how you engage with people in your organisation and how you improve those techniques over time. That's the value of negotiation. \n\nAs a product owner apprentice, or as somebody who's getting started as a product owner, or even if you've been a product owner for a while and you're struggling to engage with people and get that influence that you need to maximise value, those are the techniques that you probably want to focus on: negotiation techniques. \n\nIf you find it hard to learn negotiation skills, my team at Naked Agility can help you find a product ownership course or coach who can help you, or we can find somebody who can. Don't let these sorts of issues undermine your ability to deliver value and get help with them as soon as you can. Use the links in the description to get in touch."
  },
  {
    "id": "DceVQ5JQaUw",
    "title": "Most destructive thing a client can do to an agile consultant?",
    "description": "Discover how traditional management practices can undermine agile consultants. Join Martin Hinshelwood as he reveals key pitfalls to avoid for success!",
    "captions": ""
  },
  {
    "id": "dg-Cq4mqj8E",
    "title": "Virtual F2F Running LVC In Microsoft Teams Take2",
    "description": "Join us for an engaging virtual face-to-face running session in Microsoft Teams! Discover tips and tricks to enhance your online collaboration experience.",
    "captions": ""
  },
  {
    "id": "DgIETaRjZWs",
    "title": "Lean example from The Founder YouTube",
    "description": "Explore the principles of Lean methodology through a captivating example from 'The Founder'. Discover efficiency and innovation in action!",
    "captions": ""
  },
  {
    "id": "DK3axj21R4U",
    "title": "fortnite",
    "description": "Join the battle in Fortnite! Discover epic gameplay, strategies, and thrilling moments as players compete to be the last one standing.",
    "captions": ""
  },
  {
    "id": "Dl5v4j1f-WE",
    "title": "How would you like to be remembered as a Professional Scrum Trainer? Â What 3 things matter most to you?",
    "description": "Discover how to leave a lasting legacy as a Professional Scrum Trainer and empower teams to thrive in agile environments. Join the journey!",
    "captions": ""
  },
  {
    "id": "DNCDdWjYis8",
    "title": "worst trait in unskilled scrum masters?",
    "description": "Uncover the truth about Scrum Masters! Join Martin as he dispels myths and shares strategies for effective team collaboration. ðŸš€ #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "DSIXtHZTirA",
    "title": "NKD Agility: Your partner in developing engineering excellence",
    "description": "Discover how performance engineering enhances user experience! Join Martin Hinshelwood as he shares strategies for optimising software in production.",
    "captions": "If you want to be able to ensure that your software performs well and creates a great user experience, you're going to have to put in a lot of effort in making that happen. It is not going to magically happen. You're not going to have awesome software with an awesome experience and fast and responsive without actually putting in the effort to figure out how to do that. Performance engineering has a huge impact on user satisfaction and the business goals you're trying to achieve. Without a focus on performance engineering, and this is also shifting left, right towards where the team is doing the work, without that, you're not going to be able to build a product that suits your customers. Customers are going to leave because it doesn't perform well, or customers are going to leave because it doesn't do what they need it to do, or customers are going to leave because it's buggy and you're not getting things there fast enough.\n\nPerformance engineering is where we're looking at how quickly users are able to do things. Some of that could be user experience based, taking steps out of the process, and some of it can be does the software actually function at speed? Does it function at load? While some of these things can be load and stress tested, I'm going to quote one of my favourite product managers, Brian Harry, who said, \"There's no place like production.\" No matter how much testing you do prior to production, you're going to have problems that only exist in production. You can't simulate real users; it's not possible. You can only synthetically simulate users. So no matter how much of that stuff you do, you're going to have problems when you hit production. They can be performance problems; they can be the way people use it problems, right? The order that people do things or the amount they do this particular thing is different from what we had in the simulation, and that's where you run into a lot of your major performance problems.\n\nMy philosophy is that we want to get into production as quickly as possible so that we can figure out the impact of the changes that we've made and analyse the load and stress test within the context of real usage, real users using it for real. This is the story of testing in production, which doesn't mean you're not testing before production. Holy moly, no! Don't ship stuff that's not tested to production; that's a bad idea. But we need to get into production as quickly as possible, which means we need to automate and create fast, sleek automated testing for all of the normal stuff that we need to test. Does the software actually function the way we expect it to? Then we want a ring-based or audience-based deployment model so that we can control the exposure of these new capabilities and features, and we do load and stress testing effectively in production.\n\nSo what that might look like, I'm going to use an example because I love the way that they've done this. I've worked a lot in the past with the Azure DevOps team at Microsoft. Seeing how they do things has been really enlightening because they've got quite a big product; it's quite a big scaling problem. They've got millions of users, and what they effectively do is they have some of the rings that you're deploying to are physical rings, like environments. But even once you've deployed a new capability to all of your production environments, let's say you have six areas around the world, you've deployed to them all. Those features that are deployed might not be accessible by people, right? So they're not impacting production in any way; their feature flag is off.\n\nBut then the team that owns that feature that's deploying that feature wants to ensure that that feature is load tested, stress tested, is the right thing, right? Is the right thing that resonates with customers, provides the right capability, but also works load tested, stress tested? We agreed, well, I agreed, that we can't do load testing and stress testing very well, not in production. So what we need to be able to do is we need to be able to limit the number of users that are accessing this new feature and then expand it over time. There are various ways to do that. What they would do is their first ring that they would create, and this is actually a ring for each feature. So they're creating an audience-based deployment model per feature if it's big enough, right? You might have features that you just ship; you might have changes that you just ship. You don't do this with everything; this is expensive, right?\n\nBut what they do is the team will go, \"Ah, we want to start getting real users into kicking the tyres on this feature.\" It's just us so far, just internal people. So what we're going to do is we're going to publish a blog post. They publish a blog post that says, \"We're working on this new feature; it's going to provide this capability. Here's what it currently looks like, and if you would like to help us kick the tyres, send an email to this email address, and we'll enable it for you.\" You give them the data of who you are, and then they enable it for you. You can then go in the tool; you would then have a little feature flag that you can turn on and off. When you choose to turn it off, you get asked for a comment, and it goes to the team, right? So they can find out why you don't like it, right? Why you're not using it. It's slow, it's this, it's that. Then they can go look at the telemetry.\n\nBut that's a very private preview, right? People have to actively opt in. Once they have enough data to say that they think this is a good feature, they think it performs well, at least with the small number of users, once we have enough telemetry, they then open it out. They'll turn it off for everybody that's using the service but with the feature flag enabled for everybody, so everybody can go turn it on. They'll do another blog post that says, \"We're now ready for more people to try this. You don't have to email us anymore; you can just go switch it on, go try it out, and tell us what you think.\" So that encourages a bunch of people to go turn it on, and then they get a bunch of telemetry for people using it. Either people then continue to use it, or they turn it off because they don't like it, right? Maybe it overrides the existing functionality, and they don't like the way it is because something's missing, so they got to turn it off. They're asked what the problem is; they type in, \"I don't like it because it's slow,\" \"I don't like it because there's features missing,\" \"I don't like it because I don't like my cheese being moved,\" whatever the reason is, right? \n\nAnd then they're collecting more telemetry. If they get enough data, they maybe go to the next stage, or maybe they need to do more iterations on the capabilities, improve the performance. Maybe they need to turn it off because it's not performing well, and then they need to do some performance improvements and then turn it back on again. Eventually, if they've got enough telemetry, they'll turn it on by default for everybody with the option for people to go in and turn it off. So everybody gets it forcibly turned on, and then we're collecting data and telemetry from the people that turn it off to find out why they don't like it. Why do they go turn it off? What do we need to do to get those folks on board? Once they have enough telemetry, they see there's not so many people turning it off. There are always going to be people that don't like what you're doing, right? So you can'tâ€”it's not a unanimous thing. They then have it on by default; you can't turn it off, right? They maybe disable the option to turn it off, see what complaints roll in for people that want to be able to turn it off, and then eventually they get rid of the feature flag, and it's on for everybody in production.\n\nThat's a modern software engineering implementation of continuous delivery to production and then an audience-based rollout and expansion and testing story to allow you to do load testing and performance testing and stress testing in production. That takes discipline; that takes effort. It definitely has a cost, right? There are a lot of things that had to happen there and things that had to be organised and things that had to be done. But Azure DevOps, using that capability that they built into the system, using that story, they created a massive following from their users. Their users expected excellence, expected new things, expected those new things to work. As those new things rolled out, because you have an expectation if you opt into a private preview that there might be some things that don't work quite as well or we don't know yet, right? \n\nSo you're not testing in production with users that haven't chosen to be part of that test story, right? You're soliciting for people to come in and help you, and because they want to help you, one, they're more forgiving, and they'll give more feedback, right? Because they're choosing to be there. And that's how you create a story of performance improvements and enhancing user experience in a progressive, modern engineering excellence manner. This is something that Naked Agility can help you build within your teams, build within your product. Don't expect it to be magically overnight; these things take effort. They take discipline. Sometimes mistakes are made, but with a focus on delivering high-quality, usable, working product continuously to our users, we can build some of the best products you've ever seen."
  },
  {
    "id": "dT1_zHfzto0",
    "title": "Quotes: \"I estimate that 75% of those organisations using Scrum will not succeed in getting the benefits that they hope for from it.\" - Ken Schwaber",
    "description": "Discover why 75% of organisations struggle with Scrum success, as Martin Hinshelwood unpacks Ken Schwaber's insights in this engaging short video! #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "dTE8-Z1ZgA4",
    "title": "Why do you trust Simon to deliver the APS course for NKD Agility",
    "description": "Discover why Martin Hinshelwood trusts Simon as a top Professional Scrum Trainer for the APS course at NKD Agility. #agile #scrum #training",
    "captions": ""
  }
]
