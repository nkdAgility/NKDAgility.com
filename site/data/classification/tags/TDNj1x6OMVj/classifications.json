{
  "Tool": {
    "resourceId": "Engineering Practices",
    "category": "Tool",
    "calculated_at": "2025-08-07T09:27:55",
    "ai_confidence": 24.9,
    "ai_mentions": 0.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.3,
    "ai_intent": 2.7,
    "ai_audience": 7.2,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content discusses general engineering practices foundational to Agile, such as clean code, automation, and test-first development, but it does not mention or discuss tools, tool selection, or tool-specific integration. There is only a vague indirect reference to tool-support via concepts like CI/CD pipelines—these are more practices and workflows than specific tools or tool-centric discussions. The focus is methodological, not on mechanisms, software, or implementations that directly map to the Tool category. The audience, topic, and purpose match the software engineering domain, but do not address the role of tools per the provided definition.",
    "reasoning_summary": "Content is focused on general practices and concepts, not tools. No direct mention or substantial discussion of tools, tool selection, or tool integration as per the category definition. Only a partial and indirect alignment.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "Engineering Practices",
    "category": "Accountability",
    "calculated_at": "2025-08-07T11:37:12",
    "ai_confidence": 18.15,
    "ai_mentions": 0.6,
    "ai_alignment": 2.2,
    "ai_depth": 1.9,
    "ai_intent": 3.0,
    "ai_audience": 3.9,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on engineering techniques such as clean code, automation, and test-first development. While these are important for Agile, the text does not directly discuss outcome ownership, explicit role accountabilities, or how accountability structurally shapes behavior in work systems. There is alignment to themes of team performance and responsibility, but the content lacks explicit mention or in-depth exploration of accountability as a mechanism. The primary audience appears to be practitioners interested in engineering quality, not specifically in organizational accountability constructs.",
    "reasoning_summary": "Content covers Agile engineering practices but does not address outcome ownership, explicit roles, or accountability structures. Partial thematic alignment to responsibility, but not to the core definition. Only a weak fit for the Accountability category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "Engineering Practices",
    "category": "Framework",
    "calculated_at": "2025-08-07T09:27:55",
    "ai_confidence": 24.827,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.6,
    "ai_intent": 2.1,
    "ai_audience": 1.5,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on foundational technical practices (clean code, automation, test-first development) supporting Agile, but it does not directly address or discuss structured frameworks like Scrum, Kanban, or SAFe. There are no explicit mentions or exploration of frameworks, comparisons, or adaptation principles. While it is relevant to the Agile context and technical teams, it only tangentially relates to how frameworks might support or incorporate these engineering practices, thus displaying weak alignment, depth, and intent with the Framework category definition.",
    "reasoning_summary": "Mainly discusses technical practices in Agile, not frameworks. No direct mention or substantive discussion of structured methodologies or their adaptation. Only minimal alignment with the Framework category: fit is weak and indirect.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "Engineering Practices",
    "category": "Tenet",
    "calculated_at": "2025-08-07T09:27:55",
    "ai_confidence": 62.3,
    "ai_mentions": 2.7,
    "ai_alignment": 7.5,
    "ai_depth": 6.6,
    "ai_intent": 7.2,
    "ai_audience": 7.8,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content discusses foundational engineering practices in Agile—clean code, automation, and test-first development—which are closely related to organisational tenets but stops short of explicitly naming them as 'tenets.' The emphasis is on actionable, prescriptive practices (aligned with tenet definition), such as embedding these techniques for continuous improvement and flow, fostering technical excellence, and aligning with business aims. There is strong conceptual alignment and moderate depth, but direct 'tenet' references are lacking, resulting in a low 'mentions' score. The audience is practitioners and strategists in Agile contexts, matching the target group for tenets. No penalties were needed, as there is no outdated content or contradictory framing.",
    "reasoning_summary": "Content describes core Agile engineering practices that function like tenets but never labels them as such. Strong alignment and relevance, but lacks explicit mention or direct tenet framing; fit is partial and mostly inferred.",
    "level": "Secondary"
  },
  "Method": {
    "resourceId": "Engineering Practices",
    "category": "Method",
    "calculated_at": "2025-08-07T07:10:12",
    "ai_confidence": 70.3,
    "ai_mentions": 5.6,
    "ai_alignment": 7.2,
    "ai_depth": 6.9,
    "ai_intent": 7.5,
    "ai_audience": 8.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 70.0,
    "reasoning": "The content discusses specific engineering practices like clean code, automation, and test-first development—these are procedural and methodical, but it refers more broadly to a set of practices than a singular structured method. There are moderate direct references to methodology, but the term 'method' itself is not used expressly, and the narrative focuses more on the benefits, culture, and high-level impact than on explicit step-by-step procedural explanation. There is solid conceptual alignment (articulating how these practices fit within Agile and support delivery) and clear intent to inform relevant audiences. Depth is moderate: practices are described, but not in exhaustive, procedural detail typical of a strict 'method'. Audience is well-aligned (practitioners, teams), and most of the content is on-topic. No outdated or contradictory elements found.",
    "reasoning_summary": "The content fits reasonably as 'Method' by outlining engineering practices as procedural approaches, but lacks detailed, explicit method structure. The fit is solid but not exhaustive; moderate confidence is warranted.",
    "level": "Secondary"
  },
  "Strategy": {
    "resourceId": "Engineering Practices",
    "category": "Strategy",
    "calculated_at": "2025-08-07T09:27:58",
    "ai_confidence": 49.87,
    "ai_mentions": 1.7,
    "ai_alignment": 5.2,
    "ai_depth": 5.6,
    "ai_intent": 4.2,
    "ai_audience": 6.6,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 50.0,
    "reasoning": "The content focuses primarily on technical and operational practices (clean code, automation, CI/CD), which are foundational and supportive of Agile but are only briefly associated with broader business objectives and agility. While mentions of 'aligning technical efforts with business objectives' and 'driving organisational agility' hint at strategy, the bulk of discussion remains at the practice and operational level, not on high-level strategic decision-making or planning. There is minimal explicit mention of strategy, and depth on strategic topics is shallow. The audience could include both technical leads and strategists, but content remains mostly technical. The fit to the 'Strategy' category is partial and largely tangential.",
    "reasoning_summary": "Mainly describes engineering practices and technical excellence, with only brief links to strategic alignment. Content partially fits 'Strategy' but is mainly operational, with limited depth or direct relevance to strategic decision-making.",
    "level": "Tertiary"
  },
  "Practice": {
    "resourceId": "Engineering Practices",
    "category": "Practice",
    "calculated_at": "2025-08-07T07:10:05",
    "ai_confidence": 90.4,
    "ai_mentions": 8.7,
    "ai_alignment": 9.3,
    "ai_depth": 9.1,
    "ai_intent": 9.2,
    "ai_audience": 8.5,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 90.0,
    "reasoning": "The content discusses actionable and repeatable techniques central to Agile engineering practices—namely clean code, automation, test-first development, and the role of CI/CD pipelines. It frames these not as abstract frameworks but core daily habits/practices that improve team performance, collaboration, and continuous improvement. The text consistently aligns with the Practice category by emphasizing how these techniques embed quality, collaboration, and adaptability. No penalties apply; there are no outdated references, and the tone is supportive and informative toward the intended practitioner audience.",
    "reasoning_summary": "This content strongly fits the Practice category, clearly describing actionable engineering habits like test-first development, automation, and clean code as repeatable team practices that drive continuous improvement and collaboration.",
    "level": "Primary"
  },
  "Philosophy": {
    "resourceId": "Engineering Practices",
    "category": "Philosophy",
    "calculated_at": "2025-08-07T11:37:12",
    "ai_confidence": 35.58,
    "ai_mentions": 1.2,
    "ai_alignment": 3.9,
    "ai_depth": 3.4,
    "ai_intent": 4.1,
    "ai_audience": 6.5,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content focuses on specific engineering practices like clean code, automation, and test-first development. While it references 'foundations' and touches on cultural aspects like technical excellence and continuous improvement, the main discussion centers around practical techniques rather than exploring the underlying philosophies, principles, or theories that shape Agile or related methodologies. Little explicit philosophical framing or direct mention exists, with most detail spent describing 'how' practices contribute to delivery, rather than 'why' in a theoretical sense.",
    "reasoning_summary": "The content discusses engineering practices in an Agile context, but it remains practical rather than philosophical. Only minor thematic overlap exists regarding culture and improvement. Fit for 'Philosophy' is partial and limited.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "Engineering Practices",
    "category": "Observability",
    "calculated_at": "2025-10-01T16:42:32",
    "ai_confidence": 25.234,
    "ai_mentions": 0.0,
    "ai_alignment": 2.4,
    "ai_depth": 1.8,
    "ai_intent": 2.0,
    "ai_audience": 5.2,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on engineering practices like clean code, automation, and test-first development in Agile, with mention of CI/CD. It does not reference or discuss observability explicitly or substantially, nor does it cover observability principles or key topics such as metrics, logs, traces, or related tooling. While the audience is somewhat aligned (technical, Agile practitioners), the themes and intent remain focused on software craftsmanship and quality rather than the measurement and understanding of internal system states. There's low conceptual and depth alignment with 'Observability.'",
    "reasoning_summary": "Content centers on software engineering and Agile quality practices, not observability. No direct mentions or substantive discussion of observability concepts, metrics, or tools. Poor fit for the category beyond superficial process alignment.",
    "level": "Ignored"
  },
  "Capability": {
    "resourceId": "Engineering Practices",
    "category": "Capability",
    "calculated_at": "2025-08-07T11:37:12",
    "ai_confidence": 83.25,
    "ai_mentions": 3.8,
    "ai_alignment": 9.2,
    "ai_depth": 8.5,
    "ai_intent": 8.2,
    "ai_audience": 8.8,
    "ai_signal": 8.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 83.0,
    "reasoning": "The content addresses foundational practices (clean code, automation, test-first) as embedded, enduring elements essential for sustaining Agile delivery and adaptability. It connects these practices with systemic effects: technical excellence, continuous improvement, and cultural embedding—central to the Capability category. Although the term 'capability' is not directly used, the conceptual alignment is strong: it discusses how these practices lead to sustainable, repeatable value delivery, cultivate learning, and support organisational agility. The depth covers how these practices foster systemic improvement and value alignment, not just one-off techniques. The intended audience (practitioners and leaders shaping team culture) matches the category. Most of the content is relevant and focused; very little is tangential. The main limitation is limited explicit reference to 'capabilities' as a term, and a moderate potential for some readers to see the practices as just techniques rather than systemic capabilities, slightly reducing the Mentions score.",
    "reasoning_summary": "Strong conceptual fit: discusses how core engineering practices become lasting team/organizational enablers, tying directly to Capability. Slightly lower on direct mentions, but intent, depth, and alignment are high. Not just transient tools or isolated techniques.",
    "level": "Primary"
  },
  "Model": {
    "resourceId": "Engineering Practices",
    "category": "Model",
    "calculated_at": "2025-09-17T23:12:51",
    "ai_confidence": 41.25,
    "ai_mentions": 0.6,
    "ai_alignment": 4.8,
    "ai_depth": 3.4,
    "ai_intent": 4.1,
    "ai_audience": 8.6,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content describes foundational Agile engineering practices such as clean code, automation, and test-first development. While these are essential to Agile delivery, the text neither defines nor discusses models or conceptual frameworks as per the strict category definition. No model (like Cynefin, Three Ways of DevOps, or other frameworks) is mentioned. The content focuses on technical methods rather than exploring their value as conceptual or decision-making models. Thus, alignment and depth scores are low. The audience overlaps with those interested in models, but the central topic is not models, frameworks, or conceptual representations—it is practice guidelines.",
    "reasoning_summary": "This content discusses technical practices rather than conceptual models or frameworks. Its core focus does not fit the category 'Model' except tangentially through systemic thinking references. Fit is weak and largely audience-driven.",
    "level": "Tertiary"
  },
  "Principle": {
    "resourceId": "Engineering Practices",
    "category": "Principle",
    "calculated_at": "2025-09-05T03:31:54",
    "ai_confidence": 72.8,
    "ai_mentions": 3.7,
    "ai_alignment": 8.5,
    "ai_depth": 7.9,
    "ai_intent": 7.0,
    "ai_audience": 8.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "The content focuses on actionable practices foundational to Agile, such as clean code, automation, and test-first development, describing how these contribute to quality, adaptability, and continuous improvement. While it discusses principles like continuous improvement and value delivery, the primary focus is engineering techniques rather than an explicit discussion of guiding principles themselves. There is minor conceptual overlap—technical excellence is an Agile principle—but most content elaborates on methods rather than the guiding beliefs behind them. Key scoring reflects strong alignment and discussion depth, but direct naming or extensive exploration of principles per se is limited.",
    "reasoning_summary": "The content discusses practices that enable Agile principles (like continuous improvement) but focuses mainly on methods. It is a partial fit for 'Principle' due to overlap with foundational Agile beliefs, not explicit principle discussion.",
    "level": "Secondary"
  },
  "Artifact": {
    "resourceId": "Engineering Practices",
    "category": "Artifact",
    "calculated_at": "2025-08-07T11:37:13",
    "ai_confidence": 11.8,
    "ai_mentions": 0.4,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.1,
    "ai_audience": 3.7,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content discusses foundational engineering methods in Agile like clean code, automation, and test-first development. However, it does not mention artifacts, their structure, or roles as formal work representations. Themes center on technical practices, not on artifacts’ transparency or empirical inspection. While the audience (Agile/technical practitioners) partially matches the artifact category, the topic, intent, and depth are unrelated. There are no direct or indirect links to artifacts as defined in the classification. No penalties were necessary: the content is modern and neutral in tone.",
    "reasoning_summary": "Content centers on engineering and technical practices in Agile, not on artifacts or their formal roles—thus, it poorly fits the 'Artifact' category. Audience overlap is partial, but the topic and intent do not align with the definition.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "Engineering Practices",
    "category": "Discipline",
    "calculated_at": "2025-08-07T07:10:10",
    "ai_confidence": 61.0,
    "ai_mentions": 2.3,
    "ai_alignment": 6.8,
    "ai_depth": 6.5,
    "ai_intent": 7.0,
    "ai_audience": 7.7,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content discusses systemic engineering practices foundational to Agile, emphasizing clean code, automation, technical excellence, and continuous improvement. It highlights their cultural and organizational impacts. However, the focus is more on methodologies and practices than explicitly framing 'Discipline' as a codified field or exploring governance, ethical structures, or the evolution of a discipline. While conceptually adjacent, it doesn't deeply analyze principles and maturation at the discipline level, hence moderate scores for alignment and depth.",
    "reasoning_summary": "The content describes Agile-related engineering practices and their organizational value but focuses more on technique than discipline maturation or governance; partial thematic fit to the 'Discipline' category.",
    "level": "Secondary"
  },
  "Scrum Values": {
    "resourceId": "Engineering Practices",
    "category": "Scrum Values",
    "calculated_at": "2025-05-06T11:35:31",
    "ai_confidence": 8.532,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.1,
    "ai_intent": 0.9,
    "ai_audience": 2.0,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses entirely on engineering practices and technical methodologies such as clean code, automation, test-first development, and CI/CD. There are no direct mentions of Scrum Values or explicit references to the five core values (Commitment, Courage, Focus, Openness, Respect) as outlined in the classification definition. \n\nAlthough terms like 'collaboration,' 'team motivation,' and 'continuous improvement' appear, these concepts are framed in the context of technical excellence and Agile engineering—not the normative, value-driven guidance specific to Scrum Values. Therefore, the alignment and depth scores remain very low, as the main themes are orthogonal to the category requirements. The intent is to inform about engineering best practices, not to explore or illustrate Scrum Values or guide practitioners in value-based decision making or team behavior. The audience is broadly Agile practitioners and software teams, but not specifically Scrum teams reflecting on values. The high signal-to-noise ratio reflects that the content is focused, but on the wrong topic for this category. No penalties were applied because there is no outdated information or evident negative framing. Overall, the content is only peripherally relevant at best: there is no direct relationship between 'Engineering Practices' and the 'Scrum Values' category as defined here.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "Engineering Practices",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-06T11:35:44",
    "ai_confidence": 48.92,
    "ai_mentions": 1.2,
    "ai_alignment": 5.4,
    "ai_depth": 4.8,
    "ai_intent": 6.6,
    "ai_audience": 6.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content focuses primarily on Agile engineering practices—namely clean code, automation, and test-first development. These are discussed in detail as foundational techniques for delivering high-quality software. There is explicit mention that these practices are embedded into the 'development lifecycle' and some indirect alignment with principles relevant to Application Lifecycle Management (ALM), such as maintainability, continuous improvement, deployment (CI/CD), and alignment with business objectives. However, direct references to ALM are missing, and the thematic core is technical excellence within software development practices in Agile, rather than lifecycle management as a governing discipline. \n\nThe **Direct Mentions** score is very low (1.2) since there are no explicit references to 'Application Lifecycle Management,' ALM frameworks, or related specific concepts. \n\n**Conceptual Alignment** is moderate (5.4): while certain ALM-relevant outcomes (reliability, maintainability, deployability, alignment with business objectives) are referenced, the content stops short of discussing lifecycle governance, compliance, or the full end-to-end scope (e.g., retirement, risk management).\n\n**Depth of Discussion** (4.8) is relatively shallow regarding ALM; while engineering practices are discussed in some depth, their direct tie to ALM as a managed process or as a holistic discipline is not deeply explored.\n\n**Intent / Purpose Fit** (6.6): The content clearly aims to inform and support the adoption of better software practices, which could be indirectly relevant to those interested in ALM, but it is more directly targeted towards technical practitioners rather than ALM strategists, and its primary purpose is not ALM-specific.\n\n**Audience Alignment** (6.1): The main audience seems to be technical teams (developers, testers) as opposed to ALM-focused managers or governance stakeholders, though there is some language about alignment with business goals.\n\n**Signal-to-Noise Ratio** (7.3): The content is focused and relevant within its scope, with minimal digression, but only tangentially intersects with the core ALM remit.\n\nNo penalty was applied, as the content is current, earnest, and not misleading or outdated. \n\nIn summary, the connection to Application Lifecycle Management is indirect and secondary—the content is best classified as tertiary for the ALM category, supporting related practices but not engaging with ALM's specific methodologies, governance, or lifecycle management focus.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "resourceId": "Engineering Practices",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-06T11:35:49",
    "ai_confidence": 37.233,
    "ai_mentions": 0.7,
    "ai_alignment": 3.4,
    "ai_depth": 3.9,
    "ai_intent": 4.1,
    "ai_audience": 5.3,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content centers on technical engineering practices such as clean code, automation, and test-first development in Agile contexts. It highlights their foundational and continuous improvement roles but does not directly discuss data, metrics, feedback loops, or evidence-based management. \n\nMentions (0.7): Nowhere are metrics or related terms mentioned directly; the closest related term is 'continuous improvement.' \n\nAlignment (3.4): There is some conceptual overlap, as the content describes practices that can enable learning and improvement cycles, but it does not directly address core metrics or quantitative feedback mechanisms. \n\nDepth (3.9): While the discussion of engineering practices is somewhat thorough, it does not delve into how metrics or data are used in these practices, only general statements about quality, improvement, and adaptability. \n\nIntent (4.1): The primary intent is the advocacy for excellence in engineering, not the measurement of progress or outcomes via metrics, though there is acknowledgement of fostering learning environments. \n\nAudience (5.3): The described audience overlaps somewhat, targeting Agile practitioners and technically-minded teams, but the category expects a sharper focus on performance measurement and iterative learning. \n\nSignal (5.5): The majority of the content is focused and relevant to continuous improvement, but only tangentially to metrics and learning as strictly defined.\n\nNo penalties were applied as the tone is consistent with Agile/DevOps philosophies, and nothing is obsolete or undermining. The final confidence score is proportionate, reflecting only tertiary relevance due to the absence of evidence-based, data-driven discussion.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "Engineering Practices",
    "category": "Value Stream Management",
    "calculated_at": "2025-10-01T17:12:20",
    "ai_confidence": 27.38,
    "ai_mentions": 0.3,
    "ai_alignment": 2.85,
    "ai_depth": 2.6,
    "ai_intent": 3.71,
    "ai_audience": 4.33,
    "ai_signal": 3.75,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on foundational Agile engineering practices—clean code, automation, test-first development, and CI/CD. While it references a 'flow of value to customers', it does not directly discuss Value Stream Management principles like mapping, metrics, or eliminating process waste. The relationship is indirect, as Engineering Practices can improve delivery flow but are not Value Stream Management in themselves. The audience (Agile practitioners, technical teams) can overlap, yet the themes and intent are more related to technical excellence than business agility or end-to-end value flow optimization.",
    "reasoning_summary": "While the content hints at value delivery, it centers on technical practices, not Value Stream Management. No direct discussion of value stream principles, mapping, or waste elimination. Fit is partial and indirect.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "Engineering Practices",
    "category": "Lean Principles",
    "calculated_at": "2025-05-06T11:35:53",
    "ai_confidence": 47.493,
    "ai_mentions": 0.7,
    "ai_alignment": 6.2,
    "ai_depth": 5.8,
    "ai_intent": 6.4,
    "ai_audience": 6.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content discusses foundational Agile engineering practices such as clean code, automation, and test-first development. While these themes are aligned with continuous improvement and the pursuit of high-quality output—concepts that can be traced to Lean thinking—they are not specifically or explicitly contextualized within Lean Principles. There is no direct mention of Lean, waste reduction (Muda), value stream mapping, 5S, Kaizen, or other core Lean tools. Some alignment exists conceptually, particularly in references to 'continuous improvement,' 'flow of value,' and 'minimising technical debt.' However, these references are framed in Agile/engineering terms rather than Lean-specific language.\n\nDepth is moderate: the article explains how these practices foster adaptable, high-quality software delivery, but does not tie them back to Lean frameworks or principles directly. Intent seems to be to inform software practitioners about technical proficiency in an Agile context, which overlaps with, but is not dedicated to, Lean audiences. The focus is mostly relevant (signal), but lacks references to Lean's cultural or systemic impact, major principles, or signature techniques. No penalties were applied, as the content is not outdated nor does it conflict with Lean philosophy.\n\nLevel is 'Tertiary' because the coverage is adjacent/indirect—engineering practices can be supportive of Lean, but the content is not primarily or secondarily about Lean itself.",
    "level": "Tertiary"
  },
  "Market Adaptability": {
    "resourceId": "Engineering Practices",
    "category": "Market Adaptability",
    "calculated_at": "2025-10-01T17:11:14",
    "ai_confidence": 72.1,
    "ai_mentions": 3.6,
    "ai_alignment": 7.9,
    "ai_depth": 7.3,
    "ai_intent": 7.4,
    "ai_audience": 7.9,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content describes engineering practices (clean code, automation, test-first) as foundational within Agile, supporting technical excellence, CI/CD, continuous improvement, and agility. While it does not directly reference 'market adaptability' or competitive response, it emphasizes adaptability, collaboration, and mechanisms (like CI/CD) that enable swifter responses to change—key components of market adaptability in Agile and DevOps contexts. The depth is decent, with specifics on outcomes (predictable value, responsiveness), but direct links to market forces or competition aren't explicit, limiting 'mentions' and the tightest alignment. Audience fit is good (engineering teams in Agile orgs), and the discussion is focused.",
    "reasoning_summary": "Content fits partially: it details Agile/DevOps engineering practices that enhance adaptability, but lacks explicit discussion of market shifts or competition. Intent and themes support responsiveness, aligning well but not perfectly with 'Market Adaptability.'",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "resourceId": "Engineering Practices",
    "category": "Evidence Based Management",
    "calculated_at": "2025-10-01T17:11:00",
    "ai_confidence": 26.9,
    "ai_mentions": 0.2,
    "ai_alignment": 2.4,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 8.3,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content discusses engineering disciplines like clean code, automation, and CI/CD, emphasizing quality and flow in Agile contexts. However, it never directly references Evidence-Based Management or any of its key metrics (Current Value, Time to Market, etc.). Conceptual overlap exists around value delivery and responsiveness, but there is no clear focus on empirical decision-making, outcome management, or data-driven strategic improvement. The main purpose is advocacy for technical practices rather than evidence-based management. Audience overlap exists (Agile practitioners, leaders), but the signal-to-noise is limited for EBM relevance. No outdated or contradictory content detected.",
    "reasoning_summary": "This content is about engineering practices in Agile, not Evidence-Based Management. While it emphasizes value delivery and agility, it lacks explicit discussion of empirical measurement, data-driven decisions, or EBM frameworks.",
    "level": "Ignored"
  },
  "One Engineering System": {
    "resourceId": "Engineering Practices",
    "category": "One Engineering System",
    "calculated_at": "2025-10-01T17:11:14",
    "ai_confidence": 28.91,
    "ai_mentions": 0.2,
    "ai_alignment": 2.8,
    "ai_depth": 3.0,
    "ai_intent": 2.7,
    "ai_audience": 6.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content broadly describes engineering practices within Agile, such as clean code, automation, and test-first development. However, it does not directly mention or focus on the One Engineering System framework, nor on standardization, integration across teams, or unified processes. The description is general and relevant for technical practitioners, but aligns only somewhat with 1ES's intent. The lack of direct reference, case studies, or discussions of unified tools/processes limits alignment and depth.",
    "reasoning_summary": "The content discusses general engineering practices in Agile but does not reference or align specifically with the One Engineering System category. It offers only partial conceptual overlap and lacks direct relevance to 1ES's focus on integration and standardization.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "Engineering Practices",
    "category": "Self Organisation",
    "calculated_at": "2025-10-01T17:12:25",
    "ai_confidence": 34.17,
    "ai_mentions": 1.5,
    "ai_alignment": 3.6,
    "ai_depth": 2.9,
    "ai_intent": 4.0,
    "ai_audience": 5.3,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on Agile engineering practices such as clean code, automation, and CI/CD, positioning them as foundational for Agile delivery. While it references team empowerment and value delivery, it does not directly discuss self-organisation, autonomy, team-centric ownership, or structures supporting empowered teams. The alignment is therefore partial: the described practices may support self-organisation indirectly (by enabling higher trust and technical excellence), but the content never explicitly addresses the principles or realities of self-organising teams, nor the leadership, structure, or cultural shifts required. Most discussion is about technical and workflow excellence, not about how teams organise themselves. There is clear Agile audience overlap, but no depth on the core self-organisation dimension.",
    "reasoning_summary": "While Agile engineering practices may enable self-organisation, this content doesn't discuss team autonomy or related principles. Coverage is indirect and technical, not on the self-organisation category. Fit is marginal and mostly tangential.",
    "level": "Ignored"
  },
  "Decision Making": {
    "resourceId": "Engineering Practices",
    "category": "Decision Making",
    "calculated_at": "2025-10-01T17:11:05",
    "ai_confidence": 21.7,
    "ai_mentions": 0.6,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.8,
    "ai_audience": 6.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content centers on foundational Agile engineering practices like clean code, automation, and CI/CD, which align with technical excellence and agility but do not directly address evidence-based decision making or empirical frameworks. There are no explicit mentions of decision making or references to key Decision Making methodologies, principles, or collaborative choice processes. While quality engineering can indirectly support better decisions through improved code and automation, the main themes focus on reliable delivery, adaptability, and technical outcomes, not the structured facilitation of informed decisions using data or evidence. The audience (Agile practitioners and technical teams) partially overlaps, but all other dimensions score low because the content does not fit the primary purpose or topics of the Decision Making category.",
    "reasoning_summary": "Content describes Agile engineering practices like clean code and automation but does not discuss decision making, evidence-based practices, or structured choices. Only a partial fit by audience; otherwise, not aligned to the category definition.",
    "level": "Ignored"
  },
  "Remote Working": {
    "resourceId": "Engineering Practices",
    "category": "Remote Working",
    "calculated_at": "2025-05-06T11:35:27",
    "ai_confidence": 10.128,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.5,
    "ai_intent": 0.8,
    "ai_audience": 3.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content thoroughly discusses engineering practices (clean code, automation, test-first development) in the context of Agile, focusing on high-quality software, technical excellence, and continuous improvement. However, it makes absolutely no mention—direct or implied—of remote working, distributed teams, or the unique practices, challenges, or tools for remote Agile collaboration. There are references to team collaboration and workflow, but these are general and not related to the remote/distributed context required by the category. \n\nScoring:\n- Mentions (0.2): Remote work and related terms are not mentioned; the content remains strictly about engineering practices in general agile teams.\n- Alignment (1.3): The core concepts do not align with the focus on remote Agile teams, though Agile methodology is relevant in a distant sense.\n- Depth (1.5): The depth is with regard to Agile engineering, not remote practices; nothing substantial on remote-specific issues is present.\n- Intent (0.8): The intent is to inform about engineering practices within Agile, not remote working; any relevance is tangential.\n- Audience (3.1): The content does target agile practitioners—an audience that could overlap with remote teams—but no clear remote or distributed focus is established.\n- Signal (2.0): The signal strength is reasonably high if assessing for Agile engineering practices, but the focus on remote working is nearly absent—hence the low score.\n- Level: Tertiary, as remote working is not central or secondary, but could be a distant, possible consideration in implementation.\n\nConfidence reflects the near-total lack of connection to remote working practices, with only a faint implication that some of these engineering practices could help remote teams (if one stretches for relevance).",
    "level": "Ignored"
  },
  "Product Management": {
    "resourceId": "Engineering Practices",
    "category": "Product Management",
    "calculated_at": "2025-05-06T11:35:26",
    "ai_confidence": 48.17,
    "ai_mentions": 1.7,
    "ai_alignment": 4.9,
    "ai_depth": 5.3,
    "ai_intent": 5.2,
    "ai_audience": 5.7,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content primarily discusses engineering and technical practices such as clean code, automation, and test-first development—all of which are foundational in Agile but are considered technical implementation details rather than key topics of Product Management as defined. There is a general linkage to business objectives and organizational agility, but this is secondary rather than a deep exploration of the strategic role of product management. The content does not directly mention 'Product Management,' nor does it explicitly address the methodologies, frameworks, or decision-making processes central to that role. The depth of discussion on PM is limited; mentions of aligning with business objectives are supportive but not primary. The audience seems mixed between technical practitioners (engineers, developers) and agile teams, with only indirect value for product management strategists. No penalties were applied as the content is not outdated or critical of product management—just tangential. Thus, confidence that this content fits well under the 'Product Management' category is low, with scoring reflecting some tangential conceptual alignment but lacking strong direct relevance.",
    "level": "Tertiary"
  },
  "Platform Engineering": {
    "resourceId": "Engineering Practices",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-06T11:35:28",
    "ai_confidence": 25.765,
    "ai_mentions": 0.5,
    "ai_alignment": 2.2,
    "ai_depth": 2.9,
    "ai_intent": 1.7,
    "ai_audience": 8.6,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content focuses exclusively on general engineering practices such as clean code, automation, and test-first development, predominantly within the context of Agile methodologies. There is no direct mention of platform engineering, Internal Developer Platforms (IDPs), self-service capabilities, or dedicated platform solutions. \n\n- Direct Mentions (0.500): The topic \"platform engineering\" is not mentioned at all—the closest overlap is the mention of automation and CI/CD, which can be indirect elements of platform engineering, but that connection is extremely tenuous in this context.\n- Conceptual Alignment (2.200): The broad concept of automation and CI/CD overlaps partially with platform engineering principles, but the content discusses them as generic engineering best practices, not tied to internal platforms or developer experience. No reference to standardized tooling, internal platforms, or self-service elements.\n- Depth of Discussion (2.900): The content discusses its own topics in some depth—for example, clean code, technical excellence, and embedding practices—but does not extend this depth into platform engineering or platforms for developers. \n- Intent / Purpose Fit (1.700): The main intent is to inform about foundational engineering practices in Agile, not platform engineering. Any overlap is purely incidental.\n- Audience Alignment (8.600): The intended audience is technical—likely software engineers or teams—which coincides with the typical audience for platform engineering but is not specifically targeting platform engineers or those building IDPs.\n- Signal-to-Noise Ratio (9.000): The content is highly focused and free of filler, staying strictly on its theme of engineering practices. However, that theme is not platform engineering.\n\nLevel: Tertiary. The relationship to platform engineering is indirect and minimal, coming from overlap with automation and CI/CD, not through any platform-centric lens. Final confidence score is low, as the evidence in the content does not directly support classification under the 'Platform Engineering' category.",
    "level": "Ignored"
  },
  "Scaling": {
    "resourceId": "Engineering Practices",
    "category": "Scaling",
    "calculated_at": "2025-05-06T11:35:32",
    "ai_confidence": 25.67,
    "ai_mentions": 0.5,
    "ai_alignment": 2.8,
    "ai_depth": 3.4,
    "ai_intent": 3.2,
    "ai_audience": 4.7,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content discusses Engineering Practices such as clean code, automation, and test-first development, which are foundational to quality Agile delivery. However, it does not mention or even allude directly to Scaling or to frameworks/methodologies specifically dedicated to scaling Agile practices (e.g., SAFe, LeSS, cross-team alignment, enterprise value delivery, large-scale coordination, or managing dependencies across teams). \n\nMentions (0.5): 'Scaling' and related frameworks are not mentioned at all; the closest is a passing reference to organizational agility in general terms, which doesn't fit the classification's direct scope. \n\nAlignment (2.8): While engineering practices are important for scalability, the focus here is on team-level technical excellence rather than enterprise-scale coordination; there is minor conceptual overlap only at the most abstract level (such as alignment with business objectives). \n\nDepth (3.4): The content offers moderate detail on engineering discipline, but not in the context of scaling or managing the complexity of multiple teams—rather, it's about quality and technical agility within teams or possibly team-of-teams in a generic sense. \n\nIntent (3.2): The purpose is informative and supportive of Agile and DevOps best practices, but not specifically about scaling them. Any contribution to scaling is indirect and not the main intent. \n\nAudience (4.7): The identified audience is likely practitioners and leads in Agile/DevOps teams (not exclusively those dealing with scaling), so there is only partial overlap with the intended audience of scaling content (which includes enterprise leaders and scaling strategists). \n\nSignal (3.8): The entirety of the content is relevant to engineering best practices, but the signal-to-noise for scaling-specific strategies is weak—the core category atop which scaling builds is present, but scaling is not substantively addressed.\n\nNo penalties applied, as content is current and tone is neutral. Overall, this content is very distantly related to the scaling category and would only be considered at a tertiary level.",
    "level": "Ignored"
  },
  "GitHub": {
    "resourceId": "Engineering Practices",
    "category": "GitHub",
    "calculated_at": "2025-05-06T11:35:31",
    "ai_confidence": 15.23,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 1.7,
    "ai_intent": 1.9,
    "ai_audience": 4.1,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content focuses broadly on engineering best practices such as clean code, automation, and test-first development in Agile environments. There is no direct mention of GitHub, nor does the content discuss any GitHub services, features, or methodologies. Its alignment with GitHub is only conceptual, insofar as GitHub could be a platform where such practices are enabled, but this is neither stated nor implied directly. The depth score is accordingly low, as no GitHub-specific implementation details, workflows, or examples are discussed. The intent is general, targeting Agile practitioners and engineers rather than GitHub users specifically. Though some generic CI/CD references exist, they are not tied to GitHub Actions or equivalent. The signal-to-noise ratio reflects that the material is focused but almost entirely off-category for GitHub. No penalties were necessary, as the content isn't outdated or contradictory—just out of scope. Therefore, confidence is very low, and this assignment is only at a Tertiary level of relevance.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "Engineering Practices",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-06T11:35:32",
    "ai_confidence": 54.358,
    "ai_mentions": 2.2,
    "ai_alignment": 6.7,
    "ai_depth": 6.8,
    "ai_intent": 5.9,
    "ai_audience": 6.1,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "Direct Mentions (2.2): The content refers to 'Agile' and 'agility' several times but never explicitly addresses 'Agile Product Management,' nor does it mention the Product Owner or product management roles directly. The focus is on engineering discipline rather than the management aspects of product value.\n\nConceptual Alignment (6.7): There is some thematic alignment through references to delivering value, fostering agility, and aligning technical practices with business objectives. However, core product management topics—such as backlog prioritization, product vision, or stakeholder engagement—are only implicitly referenced if at all.\n\nDepth of Discussion (6.8): The content gives a detailed overview of engineering practices in an Agile context (e.g., clean code, automation, CI/CD, test-first development) and links these to value delivery and team performance. It does not delve specifically into product management practices but hints at how engineering can support broader Agile initiatives.\n\nIntent/Purpose Fit (5.9): The main purpose is to emphasize technical practices within Agile frameworks, not specifically Agile Product Management. While the intent supports agile delivery, it is tangential to the explicit intent of product management within Agile philosophy.\n\nAudience Alignment (6.1): The discussion is likely relevant to Agile practitioners and perhaps Product Managers interested in engineering culture, but is more technical and developer-focused than targeted at typical Product Owners or product management leadership.\n\nSignal-to-Noise Ratio (6.0): The majority of the content focuses clearly on engineering practices as foundational for Agile environments, with minimal off-topic content. However, the direct relevance to Agile Product Management is diluted, as key product management concerns are not robustly explored.\n\nNo penalties applied, as the content is current and not contradictory to the category framing. Overall, this is a Tertiary fit: it is relevant to individuals interested in the technical foundation of Agile environments, and there is partial overlap, but its direct applicability to Agile Product Management is limited.",
    "level": "Tertiary"
  },
  "Social Technologies": {
    "resourceId": "Engineering Practices",
    "category": "Social Technologies",
    "calculated_at": "2025-05-06T11:35:35",
    "ai_confidence": 56.933,
    "ai_mentions": 1.7,
    "ai_alignment": 6.8,
    "ai_depth": 7.1,
    "ai_intent": 6.3,
    "ai_audience": 7.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content focuses primarily on technical practices within Agile contexts (clean code, automation, test-first development, CI/CD). There is a light secondary connection to Social Technologies in how these practices support collaboration, continuous improvement, and agility. \n\n- Mentions (1.7): The term 'Social Technologies' is not mentioned directly at all. There are some implicit references to collaboration and organisational agility, justifying a score above zero but still very low.\n- Conceptual Alignment (6.8): The content's emphasis is on technical excellence, quality, and sustainability in Agile, which adjacent but not central to Social Technologies as defined. Some alignment exists through references to collaboration, continuous improvement, and value delivery, supporting a moderate score.\n- Depth (7.1): The narrative dives deeper than surface level regarding engineering practices and their broader impact, but it doesn't cover social frameworks, self-organisation, or other foundational aspects of the Social Technologies category. It does, however, mention continuous improvement and organisational agility meaningfully.\n- Intent (6.3): The main intent is to showcase engineering practices that underpin Agile, which is related but not directly about social frameworks or methodologies. It is somewhat aligned but somewhat tangential.\n- Audience (7.2): The intended readers are agile teams and technical practitioners, which overlaps with the audience for Social Technologies but leans more technical than, say, a pure focus on organisational or social change agents.\n- Signal (7.6): The content is focused and on-topic for Agile audiences, with minimal filler. However, its core is technical rather than social, so it loses some relevance in this specific category.\n\nThere are no penalties, as the information is current and does not contradict or satirize the Social Technologies framing.\n\nOverall, while the content touches on concepts like collaboration and continuous improvement relevant to Social Technologies, it remains fundamentally about technical practices—placing it as a 'Secondary' fit for the category. The moderate (but not high) confidence score accurately reflects this.",
    "level": "Tertiary"
  },
  "Shift Left Strategy": {
    "resourceId": "Engineering Practices",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-05-06T11:35:27",
    "ai_confidence": 36.932,
    "ai_mentions": 0.417,
    "ai_alignment": 3.428,
    "ai_depth": 3.257,
    "ai_intent": 3.643,
    "ai_audience": 4.19,
    "ai_signal": 3.984,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "This content focuses broadly on engineering practices within Agile, such as clean code, automation, and test-first development. While it references concepts (test-first, automation, early quality focus) that are partially related to Shift-Left, it does not name or directly discuss the Shift-Left Strategy in terms of integrating testing, security, and compliance *explicitly earlier* in the SDLC. Key Shift-Left indicators like early security or compliance integration, concrete methodologies, tools, or metrics for measuring Shift-Left impact are absent. The intent is broader—championing technical excellence and CI/CD generally—rather than primarily about Shift-Left. The audience is technical, matching part of the Shift-Left target, but the content is not addressed to those specifically seeking Shift-Left strategies. The signal-to-noise ratio is moderate: the content stays focused on engineering and quality but never advances to the core Shift-Left strategy or its practical implementation. Thus, the content only weakly aligns with the Shift-Left Strategy and, per the scoring formula, this is reflected in the low tertiary confidence score.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "resourceId": "Engineering Practices",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-06T11:35:34",
    "ai_confidence": 18.16,
    "ai_mentions": 0.3,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.0,
    "ai_audience": 5.2,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content 'Engineering Practices' centers around foundational software development techniques in Agile, such as clean code, automation, and test-first development. \n\nMentions (0.3): The term 'Cell Structure Design' or related concepts ('cells', 'decentralisation', 'Beta Codex', etc.) are not mentioned explicitly or implicitly in the text, warranting a near-minimum score.\n\nAlignment (2.2): The main themes focus on technical practices for Agile software development, not on organisational design or network-based decentralisation as defined by Cell Structure Design. While technical excellence supports Agile value delivery, there's only a remote conceptual connection—such practices could theoretically support autonomous teams, but this link is not explored or implied.\n\nDepth (2.4): The content provides a moderate discussion of engineering practice principles, but none of its depth pertains to Cell Structure Design, its principles, or its organizational implications. It remains squarely within the context of software craftsmanship.\n\nIntent (2.0): The primary intent is to inform the audience about engineering best practices, not to discuss or support Cell Structure Design or any related decentralised organizational structures.\n\nAudience (5.2): The audience (Agile practitioners, software engineers, possibly team leads) could overlap with those interested in Cell Structure Design, but the focus is much more technical than structural or strategic, explaining the middling score.\n\nSignal (4.9): The text is focused and has a high signal-to-noise ratio for its own topic, but (from the Cell Structure Design perspective) almost all content is off-topic or only tangentially relevant.\n\nNo penalties were applied: The discussion is current/modern, and the tone is neutral and not critical. \n\nOverall, the content barely relates to Cell Structure Design, mostly by the virtue that sound engineering practices can serve as a foundation for high-performing teams, which might be a criterion within a Cell Structure organization—but this connection is not made or discussed. Appropriate classification level is 'Tertiary,' indicating only an extremely peripheral fit.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "Engineering Practices",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-06T11:35:39",
    "ai_confidence": 35.591,
    "ai_mentions": 2.8,
    "ai_alignment": 4.6,
    "ai_depth": 4.4,
    "ai_intent": 3.7,
    "ai_audience": 6.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content is fundamentally focused on 'Engineering Practices' such as clean code, automation, test-first development, and their benefits in Agile environments. There are only fleeting references to value for the customer, e.g., 'achieve a predictable and sustainable flow of value to customers,' 'ensuring that each release meets customer expectations.' However, there are no direct mentions of customer satisfaction, nor does the content explore measurement techniques, feedback mechanisms, or satisfaction improvement strategies as required by the category definition. The alignment score reflects a minor overlap—emphasizing software quality and reliability benefits customers, but the main thrust is technical implementation, not customer experience per se. Intent is technical/process-oriented, not focused on customer satisfaction. The audience is practitioners (Agile teams, engineers), which moderately aligns. The signal is fairly focused, but on engineering, not customer-satisfaction-centric. There are no outdated or contradictory positions, so no penalties. However, qualitative analysis confirms this content is at best tangential to 'Customer Satisfaction'—it could be cited as a supporting factor, but not as a primary discussion. This justifies a Tertiary level.",
    "level": "Ignored"
  },
  "Change Management": {
    "resourceId": "Engineering Practices",
    "category": "Change Management",
    "calculated_at": "2025-05-06T11:35:43",
    "ai_confidence": 41.412,
    "ai_mentions": 0.7,
    "ai_alignment": 3.1,
    "ai_depth": 3.4,
    "ai_intent": 4.2,
    "ai_audience": 7.8,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "Direct Mentions (0.7): The content never explicitly references 'Change Management' or uses associated terminology. The focus remains on 'Engineering Practices,' with only implicit connections to broader change initiatives in Agile environments.\n\nConceptual Alignment (3.1): There is some overlap with Change Management in the sense of supporting a culture of continuous improvement and agility. However, the central themes revolve around technical practices rather than strategies or processes intended to manage organisational change. Alignment is partial at best.\n\nDepth of Discussion (3.4): The depth regarding Engineering Practices is strong, but the exploration of change management principles, stakeholder engagement, leadership, or measuring change impact is absent. Any relevance to Change Management is superficial and inferred, not directly or substantially discussed.\n\nIntent / Purpose Fit (4.2): The intent is to educate or inform about Agile-aligned technical practices (clean code, automation, test-first development), not to guide or discuss organisational transition management. The relevance is tangential—the practices can facilitate sustainable change, but that is not the textual emphasis.\n\nAudience Alignment (7.8): The target audience (Agile practitioners, teams, technical leads) overlaps with the hypothetical Change Management audience—especially in Agile and DevOps contexts—but is more focused on engineers and less on change agents or organisational leaders.\n\nSignal-to-Noise Ratio (6.9): The content is well-written and directly relevant to its stated technical focus (engineering best practices in Agile), but little of that signal is about Change Management itself; thus, much is off-topic for this category.\n\nPenalty Assessment: No penalties applied, as the content is neither outdated nor contradicts the framing (no criticism or satire, tone is neutral/positive). All scores are distinct.\n\nLevel: Tertiary. Engineering Practices may indirectly support real Change Management, but this content's primary audience and purpose are technical process improvement rather than direct discussion or facilitation of organisational change.",
    "level": "Tertiary"
  },
  "Agile Frameworks": {
    "resourceId": "Engineering Practices",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-06T11:35:47",
    "ai_confidence": 55.23,
    "ai_mentions": 3.4,
    "ai_alignment": 6.9,
    "ai_depth": 6.4,
    "ai_intent": 6.1,
    "ai_audience": 6.7,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content focuses on core engineering practices such as clean code, automation, and test-first development in the context of Agile environments. However, there are only indirect references to Agile frameworks themselves—the text does not mention specific frameworks like Scrum, Kanban, or XP, nor does it compare or analyze frameworks, principles, or their direct application. The discussion aligns conceptually with Agile values (continuous improvement, collaboration, adaptability), but the emphasis is on technical practices rather than on frameworks as defined by the category. The depth is moderate: while benefits and outcomes are explained and connected to Agile, there is no explicit exploration of how these practices are mapped to, or differ among, Agile frameworks. The intent is to clarify and promote engineering excellence in Agile environments, which is relevant to Agile practitioners, but distinct from an intent to explore frameworks specifically. The audience is likely Agile practitioners or teams, matching the category's audience reasonably well. Signal-to-noise is strong; all content is relevant, but again, more technical than framework-oriented. No penalties are applied since the content is current and supportive. Overall, this resource is best considered 'Secondary' to the Agile Frameworks category: it provides essential context for implementing Agile, but does not directly engage with frameworks as core subjects.",
    "level": "Tertiary"
  },
  "Continuous Learning": {
    "resourceId": "Engineering Practices",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-06T11:35:51",
    "ai_confidence": 72.148,
    "ai_mentions": 4.3,
    "ai_alignment": 7.8,
    "ai_depth": 7.5,
    "ai_intent": 7.6,
    "ai_audience": 8.1,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content primarily discusses foundational Agile engineering practices—clean code, automation, and test-first development—and highlights their role in fostering technical excellence and continuous improvement. There is a clear, though somewhat indirect, emphasis on principles that facilitate ongoing learning and adaptation (e.g., 'cultivates an environment where learning and experimentation thrive'). \n\nMentions (4.3): While the term 'Continuous Learning' is not directly cited, the concept is indirectly referenced through phrases like 'continuous improvement,' 'learning and experimentation,' and 'adaptability.' There are a few implicit nods, but explicit, frequent naming is limited. \n\nAlignment (7.8): The content aligns well with the values of continuous learning as defined for this category: promoting improvement, adaptability, and a growth-friendly culture within Agile. However, the primary conceptual focus remains on technical practices rather than the learning frameworks themselves. \n\nDepth (7.5): There's substantive discussion on how engineering practices embed resilience and drive continuous improvement, but less detail is devoted to how teams specifically enact knowledge sharing or learn from failures/successes—the discussion lacks explicit depth in continuous learning mechanisms. \n\nIntent (7.6): The purpose is to inform Agile teams about best engineering practices, with a secondary focus on fostering a learning-oriented environment. The intent fits the category, but is not primarily about continuous learning per se. \n\nAudience (8.1): The content targets Agile practitioners—technical team members and leaders—which matches the intended audience for continuous learning in Agile/DevOps/Lean contexts. \n\nSignal (8.4): The entire piece is focused and relevant, almost no off-topic content; it maintains high signal-to-noise. \n\nNo penalties were applied, as the content is up-to-date, positive in tone, and does not contradict the category. The weighting of scores aligns the confidence rating as 'Secondary'—continuous learning is supported and referenced as a benefit of engineering practices, but it is not the central or stated purpose of the content.",
    "level": "Secondary",
    "reasoning_summary": "The content supports the continuous learning category by highlighting how Agile engineering practices encourage improvement, adaptability, and a growth mindset. While it doesn’t focus directly on learning frameworks, it does reference ongoing learning and experimentation as outcomes of these practices. The main emphasis is on technical excellence, making continuous learning a secondary, but still relevant, theme for Agile practitioners."
  },
  "Product Development": {
    "resourceId": "Engineering Practices",
    "category": "Product Development",
    "calculated_at": "2025-05-06T11:35:36",
    "ai_confidence": 84.66,
    "ai_mentions": 4.3,
    "ai_alignment": 9.1,
    "ai_depth": 8.8,
    "ai_intent": 8.6,
    "ai_audience": 9.2,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 85.0,
    "reasoning": "The content is primarily focused on engineering practices within an Agile environment, highlighting clean code, automation, test-first development, and continuous integration/delivery. While it references core practices vital to distributing value in product teams, the explicit and direct mentions of 'product development' as a category are limited (mentions: 4.3). The conceptual alignment (9.1) is strong—topics like continuous improvement, technical excellence, business alignment, customer value, and support for cross-functional teams link tightly to Product Development's definition. The depth (8.8) is considerable, discussing more than just tool usage by addressing the practices' impact throughout the lifecycle and organizational agility. The intent (8.6) is highly relevant: educating and advocating for best practices that enable agile, feedback-driven product creation. Audience fit (9.2) is high: the tone targets Agile teams, technical leaders, and practitioners—those actively engaged in product development. Signal-to-noise (9.0) is also strong—the content remains focused, without veering into technical minutiae unrelated to product concerns. No penalties are applied as the practices described are current and the tone is supportive. This content is classified as 'Secondary' because, while it robustly supports product development best practices, the direct focus is slightly more on foundational implementation (engineering) than on overarching product development strategy or process.",
    "level": "Primary",
    "reasoning_summary": "This content is best classified as 'Secondary' for Product Development. While it thoroughly covers engineering practices essential to Agile teams and product delivery, its main emphasis is on technical implementation rather than broader product development strategy. The material is highly relevant and valuable for those involved in product teams, but its direct focus is more on enabling practices than on product development itself."
  },
  "Empirical Process Control": {
    "resourceId": "Engineering Practices",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-06T11:35:40",
    "ai_confidence": 41.9,
    "ai_mentions": 0.3,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 5.7,
    "ai_audience": 7.5,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content 'Engineering Practices' focuses primarily on technical practices such as clean code, automation, and test-first development within Agile environments. While these are important for Agile success, the explicit concept of 'Empirical Process Control' is not directly mentioned, and key terms such as transparency, inspection, or adaptation do not appear. Direct mentions score is therefore very low (0.3) as the topic is absent by name and only faintly implied. Conceptual alignment is limited (4.7), as some principles like continuous improvement and adaptability are lightly referenced, but the primary focus is on technical excellence rather than empirical process control per se. Depth of discussion (4.9) is moderate regarding engineering practices but shallow for empirical process control specifically. The intent (5.7) is tangentially aligned; the content aims to support Agile best practices, which facilitates empirical processes, but this is indirect. The audience (7.5) appears to be Agile practitioners/teams, which aligns somewhat with the target category audience. Signal-to-noise (7.8) is relatively high as the content stays focused, though its relevance is more on engineering than on empirical process control. No penalties are applied as the content is neither outdated nor subversive. Ultimately, this resource is considered Tertiary: it supports the ecosystem of empirical process control but is not directly about it, nor does it elaborate on its core mechanisms.",
    "level": "Tertiary"
  },
  "Flow Efficiency": {
    "resourceId": "Engineering Practices",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-06T11:35:44",
    "ai_confidence": 51.62,
    "ai_mentions": 2.7,
    "ai_alignment": 5.6,
    "ai_depth": 5.2,
    "ai_intent": 6.5,
    "ai_audience": 8.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 52.0,
    "reasoning": "The content primarily focuses on foundational Agile engineering practices like clean code, automation, and test-first development. It notes how these practices facilitate a sustainable and predictable flow of value and mentions reduced lead times when discussing CI/CD. However, explicit references to 'Flow Efficiency' or its direct principles (such as bottleneck elimination, WIP limits, or Kanban) are absent. \n\n1. Mentions (2.7): There are no direct mentions of 'Flow Efficiency,' and flow-related terms are only generally referenced (e.g., 'flow of value', 'lead times') in the context of engineering practices. \n2. Alignment (5.6): While the themes are tangentially related—since good engineering practices enhance the ability to deliver quickly—they do not directly align with the core tenets of measuring or managing flow efficiency per Lean/Agile methods. The content focuses on quality, maintainability, and agility more than optimizing throughput or removing bottlenecks. \n3. Depth (5.2): The discussion is just beyond surface level, connecting engineering practices to system agility and lead time improvement, but it doesn’t deeply explore flow metrics, bottlenecks, or specific flow efficiency strategies. \n4. Intent (6.5): The intent is generally to inform on engineering best practices, and as a byproduct, they reference faster and more sustainable value delivery, which loosely fits the intent of flow efficiency but is not central. \n5. Audience (8.1): The intended audience seems to be Agile practitioners and technical leaders, aligning well with the typical flow efficiency audience. \n6. Signal (7.0): Most of the content is on-topic within an Agile/Lean context, but only a minority pertains to (or implies) flow efficiency. There is minimal off-topic or filler content, yet relevance to the category is partial. \n\nNo penalties are applied; the content is modern, constructive, and not satirical. Overall, flow is discussed as an outcome of engineering practices rather than as a process to be deliberately measured or optimized, making this content 'Secondary' in level for this category.",
    "level": "Tertiary"
  },
  "Agile Philosophy": {
    "resourceId": "Engineering Practices",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-06T11:36:01",
    "ai_confidence": 64.249,
    "ai_mentions": 2.2,
    "ai_alignment": 7.0,
    "ai_depth": 6.7,
    "ai_intent": 6.3,
    "ai_audience": 7.8,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 64.0,
    "reasoning": "The content focuses on technical practices (clean code, automation, test-first development) and their importance within Agile environments. Direct mentions of 'Agile' are present but limited, and there is no explicit reference to Agile philosophy, the Manifesto, or its 12 principles. The content aligns indirectly by linking engineering discipline to team adaptability, value delivery, and continuous improvement—key Agile tenets. Depth is moderate, exploring how engineering practices contribute to organizational agility, but lacks substantial engagement with Agile philosophy itself or the broader mindset/cultural shift. Intent is tangential: while it aims to describe foundational practices enabling Agile success, it remains centered on practices rather than the philosophical underpinnings. Audience is relevant for Agile practitioners and technical leaders, but may not speak directly to those interested solely in Agile philosophy. The content's focus and clarity are good but not strictly philosophical. No penalties are applied, as it is neither outdated, nor does it undermine the Agile frame. Thus, the content fits as a 'Secondary' level match—supportive, but not a core discussion of Agile philosophy.",
    "level": "Secondary"
  },
  "Collaboration Tools": {
    "resourceId": "Engineering Practices",
    "category": "Collaboration Tools",
    "calculated_at": "2025-05-06T11:35:50",
    "ai_confidence": 25.77,
    "ai_mentions": 1.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 5.2,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content focuses almost exclusively on core Agile engineering practices, such as clean code, automation, and test-first development. These are foundational to Agile environments but are distinct from 'Collaboration Tools' as defined in the classification. \n\n1. Direct Mentions (1.6): The text does not mention collaboration tools by name, nor are any examples like Slack, Jira, or Trello referenced. The phrase 'collaboration among cross-functional teams' appears once, but this is in reference to team dynamics rather than tools or specific platforms. \n\n2. Conceptual Alignment (2.8): The primary concepts are technical practices improving code quality and delivery. While fostering collaboration is briefly mentioned as a side-benefit of technical excellence, there is no explicit or in-depth linkage to collaboration tools or their role in Agile teamwork as required by the category. \n\n3. Depth of Discussion (2.7): There is some underlying relevance to teamwork and coordination (a secondary effect of good engineering practices), but the article does not explore any tools, features, or methodologies designed for collaboration, nor does it reference best practices for tool usage, integrations, or case studies typical of this category. \n\n4. Intent/Purpose Fit (3.1): The article’s intent is to educate on Engineering Practices, not on collaboration tools. While improving team culture and collaboration is a side effect of these practices, this is not the central or guiding purpose. \n\n5. Audience Alignment (5.2): The content is aimed at Agile practitioners, engineers, or technical leads—the same broad audience as Collaboration Tools—but the focus is on process and quality rather than tool usage. \n\n6. Signal-to-Noise Ratio (5.1): All of the content is relevant to Agile engineering and team excellence, but very little of it is relevant to 'Collaboration Tools' specifically. \n\nNo penalties were applied as the content is recent, earnest, and not contradictory or critical. Overall, this resource is only tangentially relevant to the 'Collaboration Tools' category (tertiary level) because of some minimal indirect references to teamwork and collaboration, but it does not discuss platforms, integrations, or best practices that the category definition requires.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "Engineering Practices",
    "category": "Test Driven Development",
    "calculated_at": "2025-10-01T17:12:30",
    "ai_confidence": 36.74,
    "ai_mentions": 2.1,
    "ai_alignment": 3.9,
    "ai_depth": 4.2,
    "ai_intent": 4.7,
    "ai_audience": 6.1,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content describes broad engineering practices in Agile, referencing test-first development—but not by the explicit term TDD. There is no in-depth exploration of the TDD cycle, its principles, or key practices. While 'test-first development' is mentioned, it is grouped with other practices and not elaborated on. The primary audience overlaps with TDD (technical Agile practitioners), but the content does not focus specifically on TDD enough to warrant a strong alignment; the discussion is more generic. There are no penalties for tone or outdated practices.",
    "reasoning_summary": "Mentions 'test-first development' but does not discuss TDD specifically or deeply. The focus is broad Agile engineering practices, so the alignment with Test Driven Development is partial and somewhat incidental.",
    "level": "Ignored"
  },
  "Transparency": {
    "resourceId": "Engineering Practices",
    "category": "Transparency",
    "calculated_at": "2025-05-06T11:35:31",
    "ai_confidence": 21.867,
    "ai_mentions": 0.5,
    "ai_alignment": 2.2,
    "ai_depth": 2.3,
    "ai_intent": 2.5,
    "ai_audience": 6.1,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on 'Engineering Practices' in Agile software development, emphasizing clean code, automation, test-first development, CI/CD, and technical excellence. While these practices can contribute to a transparent workflow (for example, via CI/CD pipelines making deployment visible), the content does not directly reference transparency nor discuss its specific importance to Agile processes as defined in the classification. There are no explicit mentions of openness, visibility of work, clear communication, or information radiators. The main intent is promoting quality and adaptability through engineering rigor, not transparency itself. Audience alignment is moderate, as Agile practitioners interested in engineering best practices might also care about transparency, but the content is not specifically tailored to that angle. The signal-to-noise ratio is relatively high, as the content is focused, but not on the target category. No penalties were applied, as the information is current and does not contradict the transparency framing. Overall, this content only tangentially relates to transparency and does not fulfill the core criteria for confident classification under this category.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "resourceId": "Engineering Practices",
    "category": "Continuous Improvement",
    "calculated_at": "2025-10-01T17:11:23",
    "ai_confidence": 77.5,
    "ai_mentions": 4.6,
    "ai_alignment": 8.4,
    "ai_depth": 7.7,
    "ai_intent": 7.5,
    "ai_audience": 8.2,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "The content directly references continuous improvement and describes how engineering practices like automation, clean code, and test-first development encourage technical excellence and a culture of learning—core to continuous improvement. It discusses how these techniques contribute to agility and adaptability, align with business objectives, and foster experimentation and team motivation. However, continuous improvement is not the central or sole focus; it's positioned as an outcome or cultural benefit of engineering practices rather than the main topic. The depth of discussion on continuous improvement is significant but not exhaustive, as the bulk emphasizes technical practices themselves.",
    "reasoning_summary": "The content aligns well with Continuous Improvement, showing how engineering practices foster this culture, but the main focus is on the practices themselves with continuous improvement as a benefit, not the primary subject. Fit is substantial but partial.",
    "level": "Secondary"
  },
  "Common Goals": {
    "resourceId": "Engineering Practices",
    "category": "Common Goals",
    "calculated_at": "2025-05-06T11:35:36",
    "ai_confidence": 46.295,
    "ai_mentions": 1.6,
    "ai_alignment": 3.0,
    "ai_depth": 2.9,
    "ai_intent": 3.1,
    "ai_audience": 8.2,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 46.0,
    "reasoning": "The content explicitly focuses on 'Engineering Practices' within Agile, such as clean code, automation, test-first development, and CI/CD, and discusses how these support quality software delivery and technical excellence. However, there is only one near-mention of aligning technical efforts with business objectives, which weakly gestures toward Common Goals but does not develop the concept as defined. Direct mentions (1.6): The content barely references alignment or objectives and never uses the term 'Common Goals' or frameworks like OKRs. Alignment (3.0): There is some connection to the idea of alignment with business objectives, but the core of the text is practice-driven rather than about shared goals guiding decision-making. Depth (2.9): While the engineering practices are discussed in some detail, the relationship to Common Goals is only briefly touched on. Intent (3.1): The main purpose is to promote best engineering practices, not to communicate the principle or mechanics of Common Goals in Agile/DevOps. Audience (8.2): The target audience (Agile/DevOps practitioners, software engineers) is adjacent to that of Common Goals discussions, resulting in a high but not perfect audience fit. Signal (8.8): The text is focused—no filler or digressions, but the signal is not about the Common Goals category itself, simply the general topic. No penalties apply: the content is current and does not contradict the category. Level: Tertiary, as the discussion of Common Goals is incidental to the main thrust of the resource. The moderate confidence score reflects weak conceptual and intent alignment, balanced by a focused writeup for a relevant audience.",
    "level": "Tertiary"
  },
  "Pragmatic Thinking": {
    "resourceId": "Engineering Practices",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-06T11:35:40",
    "ai_confidence": 74.1,
    "ai_mentions": 4.1,
    "ai_alignment": 8.6,
    "ai_depth": 7.8,
    "ai_intent": 8.0,
    "ai_audience": 8.3,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 74.0,
    "reasoning": "Direct Mentions (4.1): The content does not explicitly reference the phrase 'pragmatic thinking' or closely associated terminology, instead focusing on 'engineering practices,' 'clean code,' and 'Agile,' which relate partially to the category, but without direct naming. \n\nConceptual Alignment (8.6): The main ideas—embedding practical techniques (clean code, automation, test-first development) within Agile to deliver real results—strongly align with pragmatic thinking, emphasizing real-world application and adaptability. The content connects engineering practices to achieving business objectives and fostering continuous improvement, resonating with pragmatic values. \n\nDepth (7.8): The discussion extends beyond mere definitions, describing how these practices lead to sustainable flow, adaptability, collaboration, and technical excellence. However, it lacks detailed case studies, explicit examples, or discussion of navigating complexity and uncertainty directly, preventing a higher score. \n\nIntent (8.0): The clear intent is to inform and persuade practitioners of the merits of engineering practices in Agile—supportive of the pragmatic thinking category, though the focus is slightly more on technical practice than on high-level pragmatic problem solving or decision making. \n\nAudience (8.3): The content is aimed at Agile practitioners and technical teams—precisely the audience for the category. Although executives or strategists could benefit, the primary target is practitioners. \n\nSignal-to-Noise (7.6): The content is focused, with minimal filler or tangential material. However, it reiterates similar points in multiple ways, slightly lowering the overall ratio.\n\nNo penalties for outdated or contradictory information apply: the practices and tone are current and constructive. The 'Secondary' level is most appropriate because while strong alignment exists, 'Engineering Practices' is a subset of pragmatic thinking within Agile contexts and does not span the category's full thematic breadth.",
    "level": "Secondary",
    "reasoning_summary": "While the content doesn’t directly mention 'pragmatic thinking,' it strongly reflects its principles by focusing on practical engineering techniques within Agile. The discussion is aimed at practitioners, emphasising real-world application and continuous improvement—core to pragmatic thinking. However, since it centres on engineering practices rather than the broader concept, it fits best as a secondary example in this category."
  },
  "Technical Mastery": {
    "resourceId": "Engineering Practices",
    "category": "Technical Mastery",
    "calculated_at": "2025-10-01T17:11:10",
    "ai_confidence": 97.2,
    "ai_mentions": 8.8,
    "ai_alignment": 9.7,
    "ai_depth": 9.6,
    "ai_intent": 9.3,
    "ai_audience": 9.0,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 97.0,
    "reasoning": "The content explicitly covers technical engineering practices vital to software craftsmanship, including clean code, automation, test-first development, CI/CD, and technical debt. It addresses best practices and the intent aligns with educating or guiding engineering teams. The discussion is thorough and focused, using terminology and concepts central to Technical Mastery, with little to no off-topic material or outdated references. The audience is clearly technical, matching the category scope well.",
    "reasoning_summary": "Strong and focused coverage on technical excellence, clean code, automation, CI/CD, and technical debt—core Technical Mastery themes. Content intent, depth, and audience are a strong fit for the category and there are no notable misalignments.",
    "level": "Primary"
  },
  "Behaviour Driven Development": {
    "resourceId": "Engineering Practices",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-06T11:35:30",
    "ai_confidence": 24.057,
    "ai_mentions": 0.7,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 3.2,
    "ai_audience": 7.0,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content does not mention Behaviour Driven Development (BDD) directly or indirectly. There are no explicit references to BDD tools, practices, or the concept itself—direct mentions scored very low. Conceptual alignment is weak: while Agile, test-first development, clean code, and automation are adjacent to some BDD principles, the content remains general and never addresses any core topics unique to BDD (such as acceptance criteria, specification by example, or collaboration between technical and business stakeholders). Depth of discussion is limited to generic engineering practices and does not explore BDD or any material unique to it. The intent is tangential: the aim is to promote general engineering excellence in Agile, not specifically BDD practices, so the intent/purpose fit is low but not null. Audience alignment is relatively higher, as technical practitioners and Agile teams often overlap with the BDD audience, but the content isn't tailored for BDD practitioners specifically. Signal-to-noise ratio reflects that the piece remains mostly focused but is off-topic with regard to BDD, as it never ventures into unrelated content, just doesn't address BDD at all. No penalties were necessary: the content is neither outdated nor does it adopt a tone contrary to the category. Overall, this content is only distantly related to Behaviour Driven Development, justifying a tertiary level assignment and a low confidence score.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "Engineering Practices",
    "category": "Scrum Team",
    "calculated_at": "2025-10-01T17:11:18",
    "ai_confidence": 18.7,
    "ai_mentions": 0.7,
    "ai_alignment": 2.5,
    "ai_depth": 2.8,
    "ai_intent": 2.0,
    "ai_audience": 5.5,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on Agile engineering practices—clean code, automation, test-first development—but does not directly mention or discuss the Scrum Team as an accountability. While there is reference to collaboration in 'cross-functional teams,' it is generic and does not address the structure, responsibilities, or boundaries outlined in the Scrum Guide for the Scrum Team. The depth is moderate for engineering, not for Scrum Team accountability. The intended audience (technical practitioners) partially overlaps, but the content is not tailored to inform or support understanding of the Scrum Team's formal purpose or structure.",
    "reasoning_summary": "The content explains Agile engineering practices generically, not the Scrum Team as a Scrum accountability. It only superficially references teams and does not address the category’s definition, so alignment and confidence are very low.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "resourceId": "Engineering Practices",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-06T11:35:26",
    "ai_confidence": 8.68,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.3,
    "ai_intent": 0.2,
    "ai_audience": 2.2,
    "ai_signal": 0.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses exclusively on general engineering practices within Agile (such as clean code, automation, and test-first development) and does not mention the Daily Scrum explicitly or implicitly. \n\n- Mentions (0.1): There are no direct references to the Daily Scrum or any Scrum events; therefore, the score is near zero, allowing for a fractional placeholder to avoid identical scores across dimensions.\n- Conceptual Alignment (0.6): While it falls within the broader Agile context (which is a foundational environment for Scrum), it entirely lacks alignment to the Daily Scrum’s structure, purpose, or topics listed in the classification definition.\n- Depth (0.3): There is no substantive discussion of Daily Scrum processes, roles, or practices. The content remains at a general level about engineering practices.\n- Intent (0.2): The main purpose is to inform about Agile engineering practices, not to educate or discuss Scrum events specifically or the Daily Scrum.\n- Audience (2.2): While the target audience (Agile teams, developers) could overlap with Daily Scrum participants, the messaging is generic for any Agile practitioner, not tailored for Scrum practitioners or Daily Scrum facilitators.\n- Signal-to-Noise (0.1): Nearly all the content is off-topic for the Daily Scrum; it may be useful in the broader context of Agile but is not directly relevant to the category. \n\nNo penalties are applied. Overall, the confidence is extremely low (8.68/100) and this is classified as 'Tertiary' because any connection to the Daily Scrum is extremely indirect (if at all), coming only through a generic Agile audience.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "Engineering Practices",
    "category": "Product Backlog",
    "calculated_at": "2025-05-06T11:35:27",
    "ai_confidence": 24.817,
    "ai_mentions": 0.7,
    "ai_alignment": 2.4,
    "ai_depth": 2.5,
    "ai_intent": 1.9,
    "ai_audience": 6.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content titled 'Engineering Practices' does not directly mention Product Backlog or related terminology. It primarily focuses on technical practices (clean code, automation, test-first development, CI/CD) as foundational elements of Agile, with no explicit or implicit reference to backlog management, prioritisation, refinement, or related Agile process artefacts. \n\n1. Mentions (0.7): The Product Backlog is not mentioned, nor are related keywords (user stories, prioritisation, sprint planning), leading to a near-minimum score.\n2. Conceptual Alignment (2.4): While the content is rooted in the Agile domain, its themes are technical engineering activities rather than backlog practices or management. There's little overlap beyond broad alignment at the Agile philosophy level.\n3. Depth (2.5): The discussion is reasonably detailed—about clean code, automation, and quality within Agile—but none of this depth relates to the Product Backlog or its best practices.\n4. Intent (1.9): The intent is to highlight technical enablers for Agile, not to inform about product backlog processes, responsibilities, or artefacts.\n5. Audience (6.0): The audience (developers, technical teams) partially overlaps with that of Product Backlog (which can include Product Owners, Scrum Masters, developers), so the alignment is moderate, but not precise—it's more technical than process-oriented.\n6. Signal-to-Noise (7.2): The text is focused and non-rambling, but the 'signal' is about engineering practices, not backlog-related content, so while it is on-topic for Agile, it's off-topic for this strict category.\n\nNo penalties were applied as the article is not outdated or critical. Overall, the content is at best tertiary to the 'Product Backlog' category—there is no meaningful coverage or connection besides sharing the wide Agile umbrella. The low confidence reflects this marginal and indirect relation.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "Engineering Practices",
    "category": "Engineering Excellence",
    "calculated_at": "2025-05-06T11:35:28",
    "ai_confidence": 88.65,
    "ai_mentions": 7.9,
    "ai_alignment": 9.4,
    "ai_depth": 8.7,
    "ai_intent": 9.0,
    "ai_audience": 8.3,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 89.0,
    "reasoning": "The content explicitly and repeatedly references key aspects of Engineering Excellence, such as clean code principles, automation, test-first development, and CI/CD. These are directly covered in the category's definition and key topics. The alignment is very strong (9.4): the narrative frames high-quality engineering practices as essential for achieving and sustaining technical excellence. The coverage is substantial (8.7), going beyond surface definitions to discuss the downstream effects (technical debt minimization, reliable delivery, team culture). The main intent (9.0) is to inform and promote engineering excellence as foundational to Agile, which fits perfectly. The target audience (8.3) is technical (Agile practitioners, engineering teams), but there is slight generality towards broader organizational benefits. The content is focused and highly relevant (signal: 8.2), though a minor portion touches on organizational agility and motivation, which broadens the strict engineering scope but remains linked to engineering outcomes. No penalties were necessary as all practices are current and the tone is affirmative. Overall, this is a primary example of content for the 'Engineering Excellence' category.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the 'Engineering Excellence' category. It thoroughly discusses core engineering practices like clean code, automation, and CI/CD, directly aligning with the category’s focus. The discussion goes beyond basics, exploring impacts on delivery and team culture, and is clearly aimed at technical audiences. While it briefly mentions broader benefits, its main emphasis remains on engineering best practices."
  },
  "Engineering Practices": {
    "resourceId": "Engineering Practices",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-06T11:35:39",
    "ai_confidence": 96.05,
    "ai_mentions": 9.7,
    "ai_alignment": 9.6,
    "ai_depth": 9.4,
    "ai_intent": 9.4,
    "ai_audience": 9.1,
    "ai_signal": 9.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 96.0,
    "reasoning": "The content is directly titled 'Engineering Practices' and opens by clearly defining the term within an Agile context, warranting a high score for Direct Mentions (9.7). It explicitly discusses clean code, automation, test-first development, and CI/CD pipelines—all core to the Engineering Practices category—demonstrating strong Conceptual Alignment (9.6). The piece goes beyond mere mention to elaborate on the impact of these practices (e.g., improving collaboration, minimising technical debt, enabling adaptability), resulting in a high Depth of Discussion score (9.4). The Intent is focused on informing and advocating for these practices within Agile teams, matching the category (9.4). Audience Alignment is near-perfect, as the writing clearly targets Agile practitioners, software engineers, and technical team members (9.1). The Signal-to-Noise Ratio is very high due to concise, focused coverage with minimal filler or digression (9.8). No outdated techniques or negative/contradictory tone is present, so no penalties are applied. Overall, the content exemplifies the 'Primary' level, thoroughly and directly supporting the Engineering Practices category in accordance with the provided definition.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Engineering Practices category. It not only defines the term in an Agile context but also explores key practices like clean code, automation, and CI/CD. The discussion is thorough, relevant, and clearly aimed at Agile teams and engineers, making it highly informative and directly aligned with the category’s intent. The writing is focused and up-to-date, ensuring strong value for the intended audience."
  },
  "Technical Debt": {
    "resourceId": "Engineering Practices",
    "category": "Technical Debt",
    "calculated_at": "2025-05-06T11:35:42",
    "ai_confidence": 66.13,
    "ai_mentions": 2.7,
    "ai_alignment": 7.5,
    "ai_depth": 6.8,
    "ai_intent": 6.9,
    "ai_audience": 7.8,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 66.0,
    "reasoning": "The content 'Engineering Practices' focuses on foundational Agile principles such as clean code, automation, and test-first development. While these practices do relate to minimising technical debt (directly mentioned once: 'while minimising technical debt'), the explicit discussion of technical debt is limited. \n\n1. **Direct Mentions (2.7/10):** Technical debt is briefly mentioned as a benefit of following robust engineering practices, but not otherwise discussed or analysed, resulting in a low score. \n2. **Conceptual Alignment (7.5/10):** There is a strong conceptual connection: practices like clean code, automation, and test-first development are central to preventing and reducing technical debt. The reference to maintainability and adaptability also aligns with technical debt reduction, but the core focus remains on engineering best practices, not debt management per se. \n3. **Depth of Discussion (6.8/10):** The content explores the techniques deeply as they improve software quality, but it doesn't thoroughly address the mechanics or nuances of technical debt itself (e.g., types, measurement, prioritisation, or remediation strategies). \n4. **Intent/Purpose Fit (6.9/10):** The main intent is promoting engineering discipline for general quality and agility, not specifically for managing technical debt. However, minimising technical debt is positioned as a key benefit in service of long-term product health. \n5. **Audience Alignment (7.8/10):** The content appeals to Agile practitioners, technical leads, and possibly managers—closely matching the audience for technical debt discussions. \n6. **Signal-to-Noise Ratio (8.2/10):** Almost all the text is relevant to sustainable software and long-term quality, with little filler. The content remains focused on practices that inherently support technical debt reduction.\n\n**Level:** Secondary. Technical debt is present as an important but subordinate theme—clearly connected, but not the article’s primary focus.\n\nNo penalties applied: the content is current, non-contradictory, and positive in tone. \n\n**Conclusion:** The confidence score reflects solid secondary alignment, with direct mentions and depth pulling down the overall weighting. Technical debt is acknowledged and implicitly supported by the engineering practices discussed, but not deeply or overtly explored as a central topic.",
    "level": "Secondary"
  },
  "Organisational Agility": {
    "resourceId": "Engineering Practices",
    "category": "Organisational Agility",
    "calculated_at": "2025-05-06T11:35:47",
    "ai_confidence": 76.144,
    "ai_mentions": 5.5,
    "ai_alignment": 8.1,
    "ai_depth": 7.9,
    "ai_intent": 8.3,
    "ai_audience": 7.8,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 76.0,
    "reasoning": "The content describes key engineering practices such as clean code, automation, and test-first development specifically within the context of Agile environments. There are explicit references to Agile and multiple conceptual connections made to organisational agility, such as fostering adaptability, responsiveness, improving collaboration, and enabling continuous improvement. However, the content primarily focuses on technical excellence within Agile rather than the broader organisational strategies, leadership, or structural considerations outlined in the category definition. This limits the depth with respect to full organisational agility—hence a slightly reduced score for depth. The intent of the content is closely aligned with organisational agility as it highlights how these engineering practices drive adaptability at a team and, by extension, organisational level. The target audience seems technical, but there are clear links to business objectives and alignment, so the audience fit is strong but not at a leadership/strategic depth. The signal-to-noise ratio is high; nearly all content is relevant to the agile engineering context, with minimal tangential material. No penalties were applied because the tone is aligned, and the practices discussed are current and supportive of organisational agility. Overall, the content fits as a strong 'Secondary' discussion of organisational agility by exploring how foundational engineering practices contribute to it, though it does not cover the full breadth (e.g., leadership, organisational structure) required for a 'Primary' classification.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good fit for the organisational agility category, as it clearly links engineering practices like clean code and automation to Agile principles and organisational adaptability. However, it mainly addresses technical aspects rather than broader topics like leadership or structure, making it more of a supporting discussion than a comprehensive overview of organisational agility."
  },
  "Time to Market": {
    "resourceId": "Engineering Practices",
    "category": "Time to Market",
    "calculated_at": "2025-05-06T11:35:51",
    "ai_confidence": 56.203,
    "ai_mentions": 2.3,
    "ai_alignment": 6.7,
    "ai_depth": 5.8,
    "ai_intent": 6.9,
    "ai_audience": 8.1,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content addresses foundational Agile engineering practices (like clean code, automation, test-first development) and discusses their impact on reliability, flow, and technical excellence. It references Continuous Integration and Continuous Delivery (CI/CD), which have direct connections to Time to Market. However, explicit direct mentions of 'Time to Market' or its key metrics (lead time, cycle time, etc.) are missing. The focus remains more on technical excellence and process quality, rather than a deep exploration of reducing concept-to-customer delivery speed. Conceptual alignment is moderate, as the narrative connects good practices to greater agility and shorter lead times in a secondary fashion. The depth is improved by the mention of lead time and deployment speed, but these points are not deeply analyzed in Time to Market terms. Audience alignment is high; the content suits Agile practitioners and leaders—those interested in improving software delivery capability. Signal-to-noise is also good, staying on relevant Agile engineering topics, but some portions discuss culture and motivation rather than concrete Time to Market improvement. There are no outdated concepts or contradictory tones. Thus, the content fits secondarily in Time to Market, supporting it through engineering best practices but not making it the central focus.",
    "level": "Tertiary"
  },
  "Lean": {
    "resourceId": "Engineering Practices",
    "category": "Lean",
    "calculated_at": "2025-05-06T11:35:54",
    "ai_confidence": 24.894,
    "ai_mentions": 0.447,
    "ai_alignment": 2.894,
    "ai_depth": 3.228,
    "ai_intent": 2.134,
    "ai_audience": 2.766,
    "ai_signal": 2.302,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses primarily on engineering practices in Agile software development, particularly clean code, automation, test-first development, and CI/CD. There are no direct mentions of Lean, its principles, or its distinct methodologies such as value stream mapping, waste reduction, or Lean tools. \n\nConceptual alignment is low-medium (2.894), as the theme of continuous improvement and a sustainable flow of value is tangentially related to Lean principles, but lacks explicit discussion of value maximization versus waste elimination or Lean-specific practices. Depth (3.228) reflects a reasonably substantial treatment of software engineering practices but without connection to Lean concepts or frameworks. \n\nIntent (2.134) and audience (2.766) scores are moderate due to a focus on technical teams seeking agile and engineering quality—not specifically Lean practitioners. Signal (2.302) is low, as the vast majority of the content is focused on Agile-aligned engineering and does not contain relevant Lean discussion. \n\nNo penalties are applied; the content is up-to-date and neither satirical nor critical. Overall, the confidence score is low, as Lean is not mentioned or substantively discussed, making it at most tertiary to the main topic. This reinforces that only very indirect, conceptual aspects (continuous improvement, value delivery) resemble the Lean ethos, and these are not framed within Lean methods or terminology.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "Engineering Practices",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-06T11:35:30",
    "ai_confidence": 35.84,
    "ai_mentions": 0.6,
    "ai_alignment": 4.6,
    "ai_depth": 4.9,
    "ai_intent": 3.2,
    "ai_audience": 5.0,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "There is almost no direct mention of 'Systems Thinking' or related terminology; instead, the focus is on technical software engineering practices within Agile. The content lightly references systemic approaches and organisational agility, but this is not deeply aligned with the core principles, feedback loops, or holistic analysis central to Systems Thinking. Discussion of interdependencies is implied in phrases like 'systemic approach' and fostering collaboration, but there are no explicit explorations of feedback loops, loops diagrams, or system dynamics. Techniques, tools, and frameworks for Systems Thinking are absent, as are examples or case studies from a systems perspective. The main intent appears to be advocating effective technical practices rather than exploring organisational systems. The target audience (Agile practitioners, engineers) partially overlaps with those interested in Systems Thinking but is narrower in focus. Most of the content is on-topic for engineering best practices, not the holistic and interconnected systems analysis the category demands, although brief mentions of organisational impacts and adaptability prevent it from being entirely irrelevant. No penalties applied as the content is not outdated or contradictory in tone.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "resourceId": "Engineering Practices",
    "category": "Agentic Agility",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 32.18,
    "ai_mentions": 0.4,
    "ai_alignment": 2.5,
    "ai_depth": 2.2,
    "ai_intent": 3.1,
    "ai_audience": 7.6,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "Direct Mentions: The content does not mention 'agency' or 'agentic agility' explicitly, nor does it discuss intentionality or adaptive action outright, resulting in a low score (0.4).\n\nConceptual Alignment: While the content discusses practices that enable adaptability (such as automation, technical excellence, and continuous improvement), there is little direct connection to the concepts of agency or intentional, adaptive action. The focus is on technical practices, not on the agency or autonomy that empower teams within Agile frameworks (2.5).\n\nDepth of Discussion: The piece elaborates on the benefits and foundational aspects of engineering practices in Agile but does not meaningfully engage with the concept of agency, accountability, or agentic agility. The exploration remains at the level of enabling practices, not the agency they may confer (2.2).\n\nIntent/Purpose Fit: The intent is to promote technical excellence within Agile, somewhat adjacent to agentic agility but not purposefully aligning with it or with the enhancement of intentional adaptive actions driven by agency (3.1).\n\nAudience Alignment: The target audience (Agile practitioners, technical teams, possibly technical leads) overlaps with the intended audience for discussions of agentic agility (7.6).\n\nSignal-to-Noise Ratio: The content is focused, relevant to the topic of engineering excellence in Agile, and contains little filler, but does not dive into agency, so it is relevant but not fully aligned (7.7).\n\nPenalty Review: The content is current and maintains a neutral to positive tone; there are no outdated references or undermining of the agentic agility concept. Thus, no penalties are applied.\n\nOverall, the content supports enabling conditions for agility but barely addresses the core constructs of agency and adaptive intentionality foundational to agentic agility. It therefore earns a low, tertiary confidence rating for fitting this specific category.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "resourceId": "Engineering Practices",
    "category": "Agile Transformation",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 71.812,
    "ai_mentions": 3.2,
    "ai_alignment": 7.8,
    "ai_depth": 7.65,
    "ai_intent": 7.95,
    "ai_audience": 7.25,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content explicitly connects Engineering Practices (clean code, automation, and test-first development) to Agile environments, technical excellence, and organisational agility, suggesting strong conceptual alignment with Agile Transformation. The main themes—technical excellence, continuous improvement, enablement of adaptability, and cultural shifts—are all critical aspects within Agile Transformation initiatives, according to the definition. However, there are no direct mentions of 'Agile Transformation', frameworks, or change management practices, and the discussion centers almost exclusively on the technical practices themselves rather than strategies or organisational change at scale. The depth of discussion is solid concerning engineering practices, but it only tangentially addresses broader Agile transformational themes. The target audience appears to be practitioners and technical teams rather than executives or transformation strategists, though there is a nod to organisational agility alignment. The content is focused and relevant, with minimal filler (high signal-to-noise), but lacks explicit references to Agile transformation case studies, leadership roles, or metrics/KPIs. No penalty is applied as the content is current and not contradictory in tone. Overall, this content serves as a strong secondary resource for Agile Transformation, directly supporting key principles but not fully exploring transformation strategies, methodologies, or organisational-level change.",
    "level": "Secondary",
    "reasoning_summary": "This content aligns well with Agile Transformation by highlighting how engineering practices like clean code and automation underpin technical excellence and organisational agility. While it doesn’t delve into transformation strategies or frameworks, it effectively supports core Agile principles, making it a valuable resource for practitioners, though less so for those seeking guidance on large-scale organisational change."
  },
  "Service Level Expectation": {
    "resourceId": "Engineering Practices",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T11:35:40",
    "ai_confidence": 42.32,
    "ai_mentions": 0.5,
    "ai_alignment": 4.4,
    "ai_depth": 4.3,
    "ai_intent": 4.7,
    "ai_audience": 6.3,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content titled 'Engineering Practices' introduces several core Agile technical practices—clean code, automation, test-first development, CI/CD—and discusses their effect on software quality, adaptability, collaboration, and delivery. However, there is no direct mention or explicit referencing of 'Service Level Expectation' (SLE) as a concept or term; thus, the 'Direct Mentions' score is extremely low (0.5). For 'Conceptual Alignment', while there is indirect overlap—such as reliably delivering value, predictable and sustainable flow, reducing lead times, and meeting customer expectations—the content never links these practices directly to the formal idea of Service Level Expectation (e.g., measurable response or delivery timeframes). Therefore, the alignment is modest (4.4). Similarly, the 'Depth of Discussion' focuses on engineering excellence and agile outcomes, but the thorough exploration is not applied to SLE concepts (score: 4.3). The 'Intent' is to promote and explain engineering practices for Agile teams; it is tangentially supportive to SLE, since strong practices can support reliability and predictability, but SLE is not the principal focus (4.7). The 'Audience Alignment' is reasonably strong (6.3), as both engineering practices and SLE are relevant to tech practitioners, though this piece is for developers/engineering leads, not explicitly for those establishing/monitoring SLE. The 'Signal-to-Noise Ratio' is high (6.9) because the content is focused without filler, but again, little of it targets SLE. No penalties are applied; content is neither outdated nor critical/satirical. Overall, while the practices described can underpin the achievement of service level expectations in an organization, the lack of explicit connection and in-depth exploration makes this a tertiary resource for the category.",
    "level": "Tertiary"
  },
  "Team Performance": {
    "resourceId": "Engineering Practices",
    "category": "Team Performance",
    "calculated_at": "2025-05-06T11:35:45",
    "ai_confidence": 77.221,
    "ai_mentions": 6.7,
    "ai_alignment": 8.1,
    "ai_depth": 7.8,
    "ai_intent": 8.0,
    "ai_audience": 7.5,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 77.0,
    "reasoning": "The content focuses on foundational Agile engineering practices like clean code, automation, and test-first development, linking them directly to outcomes such as reliable delivery, sustainable flow of value, CI/CD, technical excellence, and adaptability. It discusses how these practices support team-level delivery capacity, frequently referencing 'teams' and systemic effects (e.g., enabling predictable flow, minimizing technical debt, and improving collaboration). However, 'team performance' as an explicit phrase appears only indirectly; the main focus is on engineering practices themselves as enablers for team performance, not as a direct discussion of delivery metrics, system-level performance measurement, or throughput trends—the key focus of the tagged category. \n\nFor Direct Mentions (6.7): The content occasionally references teams achieving outcomes ('teams can achieve...','empower teams...'), but doesn't often directly mention 'team performance' or use system-level delivery language frequently.\n\nFor Conceptual Alignment (8.1): The practices are closely tied to the concepts underlying team performance—sustainable delivery, minimizing debt, agility, but only implicitly connect to measurement or evaluation of team outcomes.\n\nFor Depth (7.8): While the content discusses the practices and their systemic effects in several dimensions (quality, agility, adaptability, collaboration), it doesn't delve into the details of performance metrics or analyse specific performance outcomes in depth.\n\nFor Intent (8.0): The intent is clearly supportive and closely aligned with enabling team performance, though it's not primarily a 'team performance analysis' but rather an endorsement of the enabling practices.\n\nFor Audience (7.5): The audience is technical, targeting Agile practitioners and teams, appropriate for the category, though general enough to include leadership as well.\n\nFor Signal (8.3): The content is focused and relevant with minimal filler, consistently relating engineering practices to team-level delivery benefits.\n\nOverall, this content is best classified as Secondary under 'Team Performance': It provides a strong supporting perspective on how engineering practices enable strong delivery but does not focus directly on evaluating, measuring, or dissecting team performance itself. No penalties applied since the content is current, constructive, and well-aligned in tone.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good fit as a secondary example for the 'Team Performance' category. It highlights how Agile engineering practices empower teams to deliver reliably and sustainably, but it doesn’t directly analyse or measure team performance. Instead, it explains how these practices create the conditions for strong delivery, making it relevant and supportive, though not a primary source for performance evaluation."
  },
  "Lean Startup": {
    "resourceId": "Engineering Practices",
    "category": "Lean Startup",
    "calculated_at": "2025-05-06T11:35:49",
    "ai_confidence": 18.34,
    "ai_mentions": 0.2,
    "ai_alignment": 2.05,
    "ai_depth": 2.0,
    "ai_intent": 2.1,
    "ai_audience": 7.95,
    "ai_signal": 6.72,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on engineering practices foundational to Agile software development, such as clean code, automation, test-first development, and CI/CD—all important within their domain. However, there are negligible, if any, direct mentions of Lean Startup terminology or its core methodology (no references to Minimum Viable Product, Build-Measure-Learn, validated learning, rapid experimentation or pivoting). \n\nAlignment is weak, as the ideas (continuous improvement, adaptability, experimentation) could tangentially connect to Lean Startup, but they are not framed in a Lean Startup context, nor do they discuss MVPs, customer feedback loops, or startup-specific challenges. Depth is also low with respect to Lean Startup: the content stays generic to Agile/engineering best practices, without explicit exploration of Lean principles applied to startups. \n\nIntent is focused on technical excellence and agility, not Lean Startup learning cycles; the audience overlaps (technical practitioners), but not specifically for Lean Startup frameworks. The signal is relatively high, as the content avoids fluff and remains technical and focused, but it is not focused on Lean Startup methodology.\n\nNo penalties were applied, as the content isn't outdated nor contradictory, but it is clearly only tangentially related to the Lean Startup category, making it appropriate for a 'tertiary' level relevance.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "Engineering Practices",
    "category": "Test First Development",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 45.75,
    "ai_mentions": 3.1,
    "ai_alignment": 4.2,
    "ai_depth": 3.5,
    "ai_intent": 5.4,
    "ai_audience": 6.3,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 46.0,
    "reasoning": "The content title ('Engineering Practices') and description list 'test-first development' among a set of broader Agile engineering approaches, but do not position it as the sole or primary focus. 'Test-first development' is mentioned in passing alongside clean code and automation—a sign of explicit yet fleeting reference (Mentions: 3.1). Conceptual alignment is minimal; while the success criteria, collaboration, and continuous integration (CI/CD) are referenced, there is no substantive linkage to core Test First Development principles, such as defining tests/criteria before coding or distinctions between manual and automated test-first approaches (Alignment: 4.2). Depth of discussion is shallow—the text only clusters Test First Development with other topics but offers no exploration of its principles or practices (Depth: 3.5). The intent seems more informative about Agile engineering in general, not specifically about Test First Development (Intent: 5.4). The intended audience matches practitioners familiar with Agile/software engineering, which partially aligns (Audience: 6.3). The signal is moderate as the text is relevant to engineering practices, but 'Test First Development' content is diluted by other topics (Signal: 5.5). No penalties were warranted, as the information is contemporary and the tone is neutral/positive. The low scores reflect that Test First Development is a secondary or tertiary theme at best.",
    "level": "Tertiary"
  },
  "Cycle Time": {
    "resourceId": "Engineering Practices",
    "category": "Cycle Time",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 22.421,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 5.2,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content predominantly focuses on general Agile engineering practices such as clean code, automation, and test-first development. There is no direct mention or discussion of Cycle Time, nor is it framed as a core theme or key metric. \n\n- Mentions: (0.6) The term 'Cycle Time' does not appear explicitly. There is a vague reference to reducing lead times and streamlining deployment, but this does not constitute a direct or meaningful mention of Cycle Time itself.\n- Alignment: (2.8) Some indirect conceptual overlap exists, as automation and CI/CD can, in practice, help reduce Cycle Time, but this connection is not made explicit or central to the content.\n- Depth: (2.7) The discussion remains broad, centering on general benefits and the principles of engineering practices, without exploring measurement, visualization, or actionable analysis of Cycle Time or how these practices affect it specifically.\n- Intent: (3.1) The content's intent is to promote engineering excellence in Agile, not to delve into Cycle Time measurement or improvement directly. Any benefit to Cycle Time is an incidental, not primary, focus.\n- Audience: (5.2) The intended audience (technical practitioners in Agile teams) overlaps with that for Cycle Time discussions, but the topic focus diverges.\n- Signal: (2.9) The majority of the content is on-topic for engineering practice but not for Cycle Time specifically, resulting in a low signal-to-noise ratio for this category.\n\nNo penalty points were applied as the content is not outdated and does not contradict the category. Overall, Cycle Time is a tertiary theme at most, and the low confidence score accurately represents the lack of direct relevance per the scoring formula.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "Engineering Practices",
    "category": "Coaching",
    "calculated_at": "2025-05-06T11:35:28",
    "ai_confidence": 10.35,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 3.4,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses exclusively on technical software engineering practices such as clean code, automation, and test-first development within Agile. There are no direct mentions or even indirect references to coaching, mentoring, facilitation, or any of the key concepts outlined in the Coaching definition. While the text does touch on cultural aspects like collaboration, learning, and experimentation, these are secondary and not framed in the context of coaching or facilitative guidance—they are described as outcomes of technical practices, not of coaching interventions. The intent is educational but strictly technical, targeting practitioners interested in software quality and Agile technical practices, not coaching methods or philosophies. Audience partially overlaps, as Agile teams can be both coached and taught engineering practices, but the absence of coaching-specific themes keeps the audience fit modest. There is no off-topic or noisy filler; the focus is maintained on engineering, but this does not increase the coaching relevance. As a result, scores are uniformly low across all dimensions, and there are no applicable penalties since the content is current, accurate, and not critical or dismissive of coaching. The 'Tertiary' level is appropriate because any relationship to coaching is at best indirect and not substantial.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "Engineering Practices",
    "category": "Miscellaneous",
    "calculated_at": "2025-05-06T11:35:28",
    "ai_confidence": 25.84,
    "ai_mentions": 1.3,
    "ai_alignment": 2.7,
    "ai_depth": 3.4,
    "ai_intent": 2.6,
    "ai_audience": 5.1,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "Direct Mentions (1.3): The content does not name or reference 'Miscellaneous' at all—its entire framing is on 'Engineering Practices,' which are clearly defined concepts within Agile and related frameworks. Conceptual Alignment (2.7): The main ideas are about foundational engineering disciplines (clean code, automation, test-first, CI/CD) in the context of Agile, Lean, and DevOps. This is not miscellaneous: it is directly aligned with core Agile and DevOps technical practices. Depth (3.4): The discussion has some substance, going slightly beyond glossing these ideas, but not into methodology specifics or actionable detail. This limits miscellaneous depth but adds some detail that pulls it *away* from 'Miscellaneous' by referencing mainstream Agile/DevOps precepts. Intent (2.6): The intent is to inform about best-practice engineering techniques tightly tied to Agile—not to serve as an off-topic, anecdotal, or catch-all discussion. Audience (5.1): The audience is technical practitioners in Agile/DevOps settings, which is a partial overlap; however, Miscellaneous may also include this audience, so the score is above midpoint. Signal (5.2): Content is focused and relevant, but too closely tied with established Agile and DevOps practices, so much of it is 'signal' for other, more specific categories rather than 'Miscellaneous.' No penalties were required, since the content is current, actionable, and does not use satire or contradict the intended framing. The final low confidence reflects strong evidence that this does *not* belong in 'Miscellaneous'—it unambiguously aligns with recognised theories (Agile, DevOps technical excellence).",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "Engineering Practices",
    "category": "Decision Theory",
    "calculated_at": "2025-05-06T11:35:30",
    "ai_confidence": 9.78,
    "ai_mentions": 0.0,
    "ai_alignment": 0.9,
    "ai_depth": 0.7,
    "ai_intent": 1.2,
    "ai_audience": 3.0,
    "ai_signal": 4.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "There are no direct mentions of Decision Theory or its core topics in the content (score: 0.0). The alignment score is extremely low (0.9) as the primary focus is technical excellence in Agile practices, not decision-making under uncertainty. The depth of discussion on decision-making concepts is nearly absent (0.7), with all content dedicated to clean code, automation, and CI/CD pipelines. Intent/purpose fit (1.2) is very weak because the article serves to inform teams about the benefits of technical practices, not to explore or improve decision-making theory. Audience alignment (3.0) is higher because both engineering and decision-theory content may target practitioners or strategists, though the overlap is indirect. Signal-to-noise (4.5) is strongest among all scores because the content stays on message about engineering practices, but that message is nearly irrelevant for the Decision Theory topic. No penalties were necessary because the content is neither outdated nor counter to the Decision Theory framing. The overall confidence score (9.78) is extremely low, accurately reflecting the tertiary relationship and scant relevance between 'Engineering Practices' and Decision Theory.",
    "level": "Ignored"
  },
  "DevOps": {
    "resourceId": "Engineering Practices",
    "category": "DevOps",
    "calculated_at": "2025-05-06T11:35:28",
    "ai_confidence": 67.25,
    "ai_mentions": 1.2,
    "ai_alignment": 7.7,
    "ai_depth": 7.4,
    "ai_intent": 7.6,
    "ai_audience": 7.9,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content focuses on foundational engineering practices that are central to both Agile and DevOps, such as automation, test-first development, and CI/CD pipelines. While the term 'DevOps' is never directly mentioned (reflected by the low 'mentions' score of 1.2), the main themes conceptually align with DevOps principles. The emphasis on continuous delivery, automation, cross-functional collaboration, technical excellence, and a culture of continuous improvement all overlap with DevOps core topics, resulting in a strong alignment score (7.7). The depth of discussion (7.4) covers both principle and implementation, especially regarding CI/CD, but remains somewhat at the practices level rather than deeply exploring DevOps as a distinct philosophy or transformation. The intent is clearly to inform and support audiences interested in Agile/DevOps-adjacent processes (intent 7.6), and the audience is well-aligned to practitioners and technical leads (audience 7.9). The signal-to-noise ratio is high at 8.1, as all content is focused and relevant with minimal filler. No penalties were applied as the content is current, neutral-to-positive in tone, and does not reference obsolete practices. Overall, while not a primary/exclusive DevOps discussion, the content is highly compatible as a secondary resource for DevOps, justifying a 'Secondary' level classification.",
    "level": "Secondary"
  },
  "Technical Leadership": {
    "resourceId": "Engineering Practices",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-06T11:35:29",
    "ai_confidence": 71.013,
    "ai_mentions": 2.7,
    "ai_alignment": 7.6,
    "ai_depth": 7.9,
    "ai_intent": 7.4,
    "ai_audience": 7.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content focuses on core Agile engineering practices—clean code, automation, test-first development—and describes their importance for product quality, delivery, and team collaboration. While these topics are critical for technical excellence and can form part of a technical leader's toolkit, the piece does not directly discuss the role or responsibilities of technical leadership itself. \n\nMentions (2.7): The phrase 'Agile environment' appears and the content references fostering collaboration and aligning technical efforts with business objectives, but 'technical leadership' is not explicitly mentioned nor thoroughly referenced.\n\nAlignment (7.6): The main themes—continuous improvement, technical debt minimization, collaboration, enabling learning—closely align with the core principles of technical leadership in Agile contexts, though they are not explored from a leadership angle.\n\nDepth (7.9): The discussion is fairly substantive concerning engineering practices and their systemic, organizational impacts. However, it rarely connects back to the techniques or frameworks specific to technical leaders guiding these transformations.\n\nIntent (7.4): The main aim is to describe the virtues and roles of engineering practices in Agile, which supports the needs of technical leaders, but the intent is not leadership-centric.\n\nAudience (7.0): Geared toward Agile practitioners and development teams, which overlaps with technical leaders but is not exclusive to them.\n\nSignal (7.1): Content is focused, concise, and largely on-point for technical leadership interests, though with a chiefly technical (rather than leadership) emphasis.\n\nNo penalties applied as the content is current, neutral-positive, and relevant. \n\nLevel: Secondary—Engineering practices are integral to technical leadership, but this content addresses them from an implementation/engineering perspective more than a leadership or guidance one.",
    "level": "Secondary",
    "reasoning_summary": "This content is highly relevant to Agile engineering practices and their organisational impact, which are important for technical leaders. However, it approaches these topics from an engineering and implementation perspective rather than focusing on leadership roles or responsibilities. While technical leaders will find value, the content is not specifically tailored to leadership, making it a secondary fit for that category."
  },
  "Operational Practices": {
    "resourceId": "Engineering Practices",
    "category": "Operational Practices",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 81.9,
    "ai_mentions": 3.2,
    "ai_alignment": 8.1,
    "ai_depth": 8.6,
    "ai_intent": 8.4,
    "ai_audience": 8.2,
    "ai_signal": 8.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content focuses on key engineering practices like clean code, automation, and test-first development, which are foundational in an Agile environment. These topics are closely related to operational efficiency, reflecting strong conceptual alignment (8.1), as they underpin streamlined processes and continuous improvement. The discussion is moderately deep (8.6), mentioning benefits such as maintainability, predictability, and the impact on team motivation/performance, and describes implementation within CI/CD pipelines (another operational practice). The intent is strongly aligned (8.4) as the purpose is to educate about practical improvement in delivery, not just theoretical considerations. Audience alignment (8.2) is high since the language and examples target practitioners and potentially technical leaders engaged in operational improvement. Signal-to-noise ratio is strong (8.5) with only very minor broad/general statements. \n\nHowever, explicit mentions (3.2) are much lower – the content does not name 'Operational Practices', nor many of the subtopics directly (e.g., Kanban, Lean process optimization, metrics/KPIs), but strongly implies them through descriptions. There is no outdated advice, off-framing, or critical tone, so no penalties apply. The category fit is 'Secondary' because the primary theme is engineering/technical practices, which are an important—but not exclusive—component of operational practices as defined. The final confidence score (81.9) reflects a robust substantive and thematic fit, with slightly limited direct labeling.",
    "level": "Primary",
    "reasoning_summary": "This content is a good fit for the category because it explores engineering practices that are essential to operational efficiency in Agile environments. While it doesn’t explicitly mention all operational practices or subtopics, it clearly addresses concepts like automation and CI/CD, which are core to streamlined operations. The discussion is practical and relevant for practitioners, making it a strong, though secondary, match for the category."
  },
  "Employee Engagement": {
    "resourceId": "Engineering Practices",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-06T11:35:31",
    "ai_confidence": 29.217,
    "ai_mentions": 0.3,
    "ai_alignment": 2.6,
    "ai_depth": 3.0,
    "ai_intent": 2.7,
    "ai_audience": 5.1,
    "ai_signal": 3.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content is centered on technical methodologies like clean code, automation, and test-first development within an Agile framework. There is minimal to no direct mention of Employee Engagement or its core concepts as articulated in the category definition. \n\nMentions (0.3): The term 'Employee Engagement' (or related core terms) is not explicitly referenced; only a vague mention of 'motivation and performance' at the end weakly links to the topic, but this is indirect. \n\nAlignment (2.6): The primary theme aligns with technical and process excellence, not with strategies or psychological practices that enhance motivation or commitment among employees. Any nods to motivation are incidental, occurring as a byproduct of technical practices, not as a focal point. \n\nDepth (3.0): There is no substantive discussion on theories, models, or strategies of Employee Engagement. The third paragraph briefly suggests that a culture of technical experimentation can 'lead to higher levels of team motivation and performance,' but this is not explored further. \n\nIntent (2.7): The intent is to inform about technical foundations for Agile and high-quality software, not to instruct or explore ways to enhance employee motivation or engagement directly.\n\nAudience (5.1): The audience is primarily technical practitioners (engineers, developers, Agile teams), with some mention of collaboration and team performance, which slightly overlaps with people-focused content, but is not the main target.\n\nSignal (3.4): Most of the content is about technical practices, with limited reference or relevance to the psychological or social aspects that drive engagement itself.\n\nNo penalties were applied since the content is not outdated and does not contradict Employee Engagement; it simply doesn't address it directly aside from minor incidental overlap.\n\nOverall, the confidence score reflects weak and tertiary-level relevance to Employee Engagement—almost all engagement references are indirect side effects rather than the content's core focus.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "Engineering Practices",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-06T11:35:29",
    "ai_confidence": 72.47,
    "ai_mentions": 3.2,
    "ai_alignment": 8.0,
    "ai_depth": 7.9,
    "ai_intent": 7.7,
    "ai_audience": 7.3,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content 'Engineering Practices' explicitly focuses on foundational Agile engineering aspects such as clean code, automation, and test-first development. While it does not directly reference 'Frequent Releases' by name or as its central topic (hence the modest score of 3.2 for Direct Mentions), it conceptually aligns well (score of 8.0) because the described practices (automation, CI/CD) are vital enablers of frequent software releases. The discussion's depth is solid at 7.9; it thoroughly explains why these practices matter but primarily as a means to overall software quality and agility, with only a subsection connecting them to continuous delivery/release frequency. The intent (7.7) is supportive and relevant, focusing on practices that directly impact the ability to release frequently, yet the central purpose is broader (engineering excellence in Agile, not strictly frequent releases). Audience alignment (7.3) is strong, targeting technical practitioners likely interested in frequent releases, though not exclusively. The signal-to-noise ratio is high (7.8) since most content is pertinent, with some attention on broader Agile quality and performance that’s only indirectly related to release cadence. No penalties are applied as the content is up-to-date, sound, and not critical of the category. Overall, this resource is secondarily relevant: it provides essential context and practical enablers for Frequent Releases, but would not serve as a primary source for those focused solely on release management mechanics.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good fit for the category because it covers key engineering practices—like automation and CI/CD—that are crucial for enabling frequent releases, even though frequent releases aren’t its main focus. It offers valuable context and practical advice for teams aiming to release more often, but those seeking in-depth guidance specifically on release management may find it only partially relevant."
  },
  "Agile Planning": {
    "resourceId": "Engineering Practices",
    "category": "Agile Planning",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 48.874,
    "ai_mentions": 1.6,
    "ai_alignment": 6.5,
    "ai_depth": 5.4,
    "ai_intent": 5.7,
    "ai_audience": 7.2,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content primarily explores engineering best practices (clean code, automation, test-first development) and their role in enabling high-quality, sustainable software delivery in agile contexts. However, direct mentions of Agile Planning are almost absent—while 'Agile environment' is referenced, there is no explicit discussion of planning ceremonies, frameworks like Scrum/Kanban, user stories, backlog management, or iterative planning cycles. The core content is conceptually adjacent, as it discusses practices that support agile project delivery, but does not delve into alignment strategies, feedback loops, or adaptation of plans, which are key topics per the classification definition. The depth of discussion around Agile Planning is limited—the article focuses on continuous integration, value delivery, and technical excellence, not planning mechanics. The intent is somewhat tangential; the purpose is to highlight how engineering practices facilitate agility, not directly about planning. The audience (Agile practitioners and technically-minded leads) overlaps with that of Agile Planning, but not exclusively. Signal-to-noise ratio is moderate, as the content is structured and purposeful but not especially focused on planning. No penalties are warranted, as the article supports agile principles and does not reference outdated or contradictory approaches. Overall, this content is tangentially related to Agile Planning—a lower, tertiary confidence fit.",
    "level": "Tertiary"
  },
  "Agile Values and Principles": {
    "resourceId": "Engineering Practices",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-06T11:35:36",
    "ai_confidence": 67.477,
    "ai_mentions": 3.6,
    "ai_alignment": 7.4,
    "ai_depth": 6.9,
    "ai_intent": 7.3,
    "ai_audience": 8.2,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content focuses on essential technical practices—clean code, automation, test-first development, CI/CD—but frames them as 'foundational' to Agile rather than directly discussing Agile Values and Principles themselves. \n\nMentions: There is only an indirect mention of 'Agile' in terms of 'Agile environment' and 'organisational agility'. There are no explicit references to the Agile Manifesto, its four values, or the twelve principles. Therefore, the direct mention score is moderate (3.6).\n\nAlignment: The content does partially align—the emphasis on adaptability, team collaboration, and continuous improvement coincides with Agile principles, but the focus is on technical practices, not philosophical frameworks or values. Thus, the alignment score is above average (7.4) but not perfect.\n\nDepth: While the article explains how engineering practices tie back to 'a culture of technical excellence and continuous improvement' and adaptability, it does not delve into the Agile Manifesto or reflect on the differences between values/principles and practices. Therefore, the depth is fair (6.9).\n\nIntent: The main intent is to inform about the role of engineering practices in Agile environments, but it's not directly about fostering understanding of Agile values and principles; it's a supportive angle, not a primary focus (7.3).\n\nAudience: The target audience appears to be practitioners in Agile teams—engineers, perhaps tech leads—matching the intended category audience well (8.2).\n\nSignal: Most content is relevant and on-point regarding technical practices in Agile contexts, with minimal filler or off-topic material (8.1).\n\nNo penalties were applied as there is no outdated, satirical, or undermining tone.\n\nLevel: Rated 'Secondary' because while the content supports the application of Agile values/principles through technical means, it does not primarily teach or discuss those values and principles in themselves.",
    "level": "Secondary"
  },
  "Continuous Integration": {
    "resourceId": "Engineering Practices",
    "category": "Continuous Integration",
    "calculated_at": "2025-05-06T11:35:42",
    "ai_confidence": 57.16,
    "ai_mentions": 3.3,
    "ai_alignment": 6.6,
    "ai_depth": 6.8,
    "ai_intent": 6.7,
    "ai_audience": 7.2,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content explicitly mentions Continuous Integration only once in the phrase 'support the implementation of Continuous Integration and Continuous Delivery (CI/CD) pipelines,' leading to a moderately low 'Direct Mentions' score (3.3). Conceptually, there is partial alignment with CI principles: the text discusses automation, test-first development, and support for CI/CD, but the main theme centers on broader 'Engineering Practices' rather than focusing on CI as a primary subject, so the 'Conceptual Alignment' score (6.6) reflects that these ideas are foundational to CI but not exclusive to it.\n\nThe 'Depth of Discussion' score (6.8) is also moderate, as the content does not delve into specific CI techniques, tools, or practices, but does discuss supporting principles and their impact. The 'Intent / Purpose Fit' score (6.7) recognizes that while the intent is to inform about engineering practices in Agile (which includes support for CI), it is not specifically to educate about CI itself. 'Audience Alignment' (7.2) and 'Signal-to-Noise Ratio' (7.4) are relatively higher, as the message is consistent with audiences interested in Agile software development and related practices with minimal filler or unrelated content.\n\nNo penalties are applied since the content is current, technically accurate, and does not undermine CI in any way. The overall confidence (57.16) places this content as 'Secondary' rather than 'Primary' due to its broader focus and limited direct reference to CI. The score distribution reflects its partial relevance: it supports understanding of CI as part of engineering practices, but does not provide a comprehensive or deeply focused exploration of the CI category as strictly defined.",
    "level": "Tertiary"
  },
  "Customer Retention": {
    "resourceId": "Engineering Practices",
    "category": "Customer Retention",
    "calculated_at": "2025-05-06T11:35:41",
    "ai_confidence": 39.041,
    "ai_mentions": 1.8,
    "ai_alignment": 4.6,
    "ai_depth": 5.1,
    "ai_intent": 4.0,
    "ai_audience": 7.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content on 'Engineering Practices' describes general Agile technical practices such as clean code, automation, and test-first development. With respect to Direct Mentions (1.8), the content does not mention 'Customer Retention' directly nor references explicit retention strategies, but does allude to customer-related outcomes (e.g., delivering value, meeting expectations), though these are generic. For Conceptual Alignment (4.6), there is some connection to the retention category, as improved engineering practices can underpin customer satisfaction by ensuring product quality and faster delivery, but the primary focus is technical excellence, not retention-specific strategies. Depth of Discussion (5.1) is rated slightly above midpoint due to the explanation of how these practices enable predictable value and foster technical excellence, but it never delves deeply into customer retention methods, metrics, or direct outcomes. Intent/Purpose Fit (4.0) is limited as the main goal is to educate about engineering quality and Agile technical underpinnings, not specifically how to retain customers. Audience Alignment (7.2) is higher, as the content appeals to practitioners and technical leaders who may be interested in retention as a business goal, even if only tangentially addressed. Signal-to-Noise Ratio (6.7) is positive because the content is focused and informative, without filler, but the relevance to customer retention is backgrounded rather than primary. No penalties were applied as the content is neither outdated nor critical of the core category. Ultimately, the content provides a tertiary connection to customer retention by outlining how engineering quality contributes to delivering customer value, but it does not cover any of the key customer retention topics specified in the classification definition.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "Engineering Practices",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-06T11:35:45",
    "ai_confidence": 44.76,
    "ai_mentions": 0.65,
    "ai_alignment": 4.1,
    "ai_depth": 4.25,
    "ai_intent": 6.3,
    "ai_audience": 6.6,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content primarily discusses foundational engineering practices within Agile software development—specifically clean code, automation, and test-first development. No direct mention is made of 'Lean Product Development' or explicit Lean principles, so the 'Direct Mentions' score is low (0.65). There is moderate conceptual alignment (4.10), as themes like continuous improvement and minimizing technical debt relate to Lean principles in an indirect manner (e.g., waste reduction via clean code, fostering learning through experimentation), but the emphasis is technical quality, not Lean itself. The depth of discussion (4.25) is fair regarding engineering practices but does not extend beyond general Agile benefits to Lean-specific tools, frameworks, or case studies. 'Intent' scores higher (6.30) since the content aims to support agility and value delivery—consistent with Lean, albeit from a technical rather than process optimization angle. The 'Audience Alignment' is moderate (6.60), targeting Agile practitioners/engineers—an overlapping but not identical audience to Lean product developers. Signal-to-noise is strong (7.80); the content is focused and relevant within its domain but largely unrelated to the unique concerns of Lean Product Development. No penalties are applied, as the information is neither outdated nor contradicts Lean values. Overall, the content falls into the 'Tertiary' level for this category: it is peripherally relevant, with some indirect ties to Lean philosophy (continuous improvement, waste reduction), but without addressing Lean Product Development core themes or terminology.",
    "level": "Tertiary"
  },
  "Value Stream Mapping": {
    "resourceId": "Engineering Practices",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-05-06T11:35:50",
    "ai_confidence": 13.15,
    "ai_mentions": 0.35,
    "ai_alignment": 1.0,
    "ai_depth": 1.1,
    "ai_intent": 1.2,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content titled 'Engineering Practices' makes no direct mention of Value Stream Mapping (VSM), nor does it reference Lean management terminology or the specific workflow visualization and optimization technique that the VSM category entails. \n\n- Mentions (0.35): VSM is never named or referenced explicitly or implicitly; the language centers entirely on engineering discipline, not process mapping.\n- Alignment (1.0): The main ideas—clean code, test-first, automation, Agile-focused software practice—do not conceptually align with VSM as defined, which is a workflow analysis and improvement technique. The only tangential alignment is the notion of improving value delivery, but it's at a generic level and does not invoke VSM methods.\n- Depth (1.1): There is no exploration of VSM at any depth. The coverage is comprehensive for engineering quality practices, not for mapping, analyzing, or optimizing flow as per VSM.\n- Intent (1.2): The purpose is to inform about Agile engineering best practices, not VSM. There is no suggestion that the aim is to discuss process improvement via mapping techniques.\n- Audience (5.2): The audience overlaps tangentially—both VSM and these engineering teachings can interest Agile practitioners or technical leaders—but VSM is more focused on process improvement roles; this content aims at developers and technical teams more broadly.\n- Signal (2.0): Most content is focused (on engineering), but none is on topic for VSM—so, the signal is moderately low for this specific category, but not wholly irrelevant to value flow discussions in Agile.\n\nNo penalties are applied as the content is current and not oppositional or critical. The tertiary level reflects that, at best, VSM is distantly related to the generic notions of improving value flow, but not actually engaged by this content.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "Engineering Practices",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-06T11:35:29",
    "ai_confidence": 48.564,
    "ai_mentions": 2.2,
    "ai_alignment": 5.5,
    "ai_depth": 4.9,
    "ai_intent": 5.7,
    "ai_audience": 8.1,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content focuses predominantly on foundational engineering techniques (clean code, automation, test-first development) within Agile environments. It explains how these practices underpin software quality, maintainability, and organisational agility, which are indirect enablers for innovation. The phrase 'empower teams to innovate confidently' and mentions of fostering experimentation and learning provide some direct overlap with the 'Ability to Innovate' category, but innovation is not the central theme.\n\nMentions (2.2): The term 'innovate' appears once in a supportive context, and there's reference to learning and experimentation, but 'Ability to Innovate' or related metrics are not central nor frequently named.\n\nConceptual Alignment (5.5): The content aligns peripherally—engineering practices enable an innovation-friendly environment, but the main thrust is technical excellence, not innovation per se. There is no explicit treatment of innovation process mechanics or its measurement.\n\nDepth (4.9): There is moderate discussion around how engineering practices support cultural and technical adaptability, yet specifics about fostering or measuring organisation-wide innovation are not covered.\n\nIntent (5.7): The intent is to communicate the value of engineering practices in Agile, with some general gestures toward innovation and experimentation. However, direct focus on cultivating or assessing innovation is lacking.\n\nAudience (8.1): The language, concepts, and emphasis are aligned with Agile practitioners, technical leads, and potentially executives interested in software quality—an audience relevant for innovation topics at a secondary level.\n\nSignal-to-Noise (7.9): The content is focused and relevant to engineering best practices in Agile, with minor off-topic drift (some conceptual tie-ins to innovation). No irrelevant or filler material.\n\nNo penalties required: No outdated references, nor is the tone critical or dismissive of innovation. \n\nOverall, the content is 'secondary' to 'Ability to Innovate': it supports innovation readiness, but does not itself deeply address innovation process, measurement, or strategies as required by the primary sense of the category.",
    "level": "Tertiary"
  },
  "Sprint Review": {
    "resourceId": "Engineering Practices",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T21:57:39",
    "ai_confidence": 2.3,
    "ai_mentions": 0.0,
    "ai_alignment": 1.5,
    "ai_depth": 2.1,
    "ai_intent": 1.8,
    "ai_audience": 4.0,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content entirely focuses on Engineering Practices in Agile, such as clean code, automation, and test-first development. There is no direct mention, discussion, or implication of Sprint Review, its purpose, process, or stakeholders. The conceptual alignment is very low as the main ideas don't touch on any core Sprint Review themes. Depth and intent are minimal, with only a general Agile focus. The audience may overlap, as Scrum teams care about engineering practices, but this is incidental. Most content is off-topic for Sprint Review.",
    "reasoning_summary": "This content is about core Agile engineering practices and does not address, mention, or explore Sprint Review in any way. There is no conceptual or thematic overlap with Sprint Review beyond both being part of Agile contexts.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "resourceId": "Engineering Practices",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-05-06T11:35:31",
    "ai_confidence": 24.36,
    "ai_mentions": 0.5,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.7,
    "ai_audience": 5.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses almost exclusively on technical Agile engineering practices such as clean code, automation, test-first development, and CI/CD. There is no explicit mention of evidence-based leadership, management, KPIs, or data-driven decision-making in a leadership context. Concepts such as 'team motivation and performance' are referenced, but only as outcomes of engineering practices rather than as subjects of empirical measurement, leadership intervention, or evidence-based improvement. \n\nScoring details:\n- Mentions (0.5): 'Evidence Based Leadership' is not named or referenced, even implicitly; the score reflects a faint indirect link to organizational improvement.\n- Alignment (2.8): The content aligns peripherally at best. It discusses general team and organizational benefits, but not in the context of leadership practice or evidence-based decision-making.\n- Depth (2.6): Exploration is limited to technical practices and their value. There is almost no discussion of the principles or methodologies of evidence-based leadership.\n- Intent (2.7): The primary intent is to promote technical excellence, not to inform leaders about evidence-based practices. Any leadership relevance is tangential.\n- Audience (5.1): The material speaks mainly to practitioners, engineers, and Agile teams—not specifically to leaders or decision-makers. However, slight mention of organizational agility edges the audience rating up.\n- Signal (6.3): The content is focused and relevant to its topic (engineering practice), with minimal off-topic material, but that topic is not evidence-based leadership.\n\nNo penalties were applied, as the content is not outdated, nor does it contradict the intended category frame.\n\nOverall, this content is tertiary to the Evidence Based Leadership category: it may be referenced in an incidental way within a broader leadership discussion, but should not be classified as a primary or even secondary resource for this category.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "Engineering Practices",
    "category": "Throughput",
    "calculated_at": "2025-05-06T11:35:45",
    "ai_confidence": 19.92,
    "ai_mentions": 0.7,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.7,
    "ai_audience": 5.2,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content is focused on foundational Agile engineering practices—clean code, automation, and test-first development—but does not explicitly mention 'throughput' nor directly address delivery metrics. While it discusses enabling predictable and sustainable flow of value, this is framed generically regarding code quality and team agility, not through the lens of throughput as a quantifiable metric (e.g., number of work items completed over time). The themes are conceptually adjacent to system performance and delivery, but lack alignment with the analytical or visualisation aspects of throughput required by the classification. Depth is limited as there is no substantive discussion on throughput data, calculation, or trends; intent is to advocate for engineering discipline, not throughput analysis. The audience (Agile practitioners/teams) overlaps with throughput’s target, slightly raising the audience and signal-to-noise scores. No exclusions or penalties apply as the content is neither obsolete nor critical of the metric framing. Overall, the fit is distant and indirect, so the level assigned is 'Tertiary' with a low confidence, justified by the absence of direct mentions and analytic content.",
    "level": "Ignored"
  },
  "Software Development": {
    "resourceId": "Engineering Practices",
    "category": "Software Development",
    "calculated_at": "2025-05-06T11:35:35",
    "ai_confidence": 92.3,
    "ai_mentions": 7.8,
    "ai_alignment": 9.6,
    "ai_depth": 9.0,
    "ai_intent": 9.4,
    "ai_audience": 8.7,
    "ai_signal": 9.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content is tightly focused on software engineering practices within Agile environments, specifically emphasizing methodologies and techniques (clean code principles, automation, test-first development) that fit squarely within the Software Development category. It makes clear conceptual linkages to the SDLC, includes direct references to continuous integration/delivery (CI/CD), addresses quality assurance focus, and discusses team processes, all of which are core topics. \n\n1. Mentions (7.8): While the term 'Software Development' is not explicitly stated, terms such as 'development lifecycle,' 'development,' and associated practices are directly referenced multiple times. There is high implied topical density, but the explicit category mention rate is moderate.\n2. Alignment (9.6): The themes (Agile, technical excellence, quality, CI/CD, test-first, automation) are core to the provided category definition. There is direct and strong conceptual match.\n3. Depth (9.0): The exposition goes beyond surface level, elaborating on how engineering practices impact quality, collaboration, and business agility. It explains functional impacts and benefits, though without granular process detail or frameworks.\n4. Intent (9.4): The piece serves as an instructive, supportive overview of best practices, closely aligned with the category's intent. It is not tangential, critical, or off-topic.\n5. Audience (8.7): The target audience appears to be practitioners or technical leaders interested in software engineering improvement—precisely the group targeted by this category, though the tone is generalized and non-technical jargon is used.\n6. Signal (9.2): The content is succinct, tightly focused, and does not include filler or extraneous commentary.\n\nNo penalty is applied since the content is up-to-date, fully aligned in tone, and references current, relevant practices. The confidence score (92.3) reflects very high category fit, just short of perfect due to the absence of explicit category naming and highly granular technical details.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Software Development category, as it delves into Agile methodologies, clean code, automation, and CI/CD—core software engineering topics. It targets practitioners and leaders, offering practical insights into improving quality and collaboration. While it doesn’t use the exact category name or deep technical jargon, its focus and relevance make it highly suitable."
  },
  "Install and Configuration": {
    "resourceId": "Engineering Practices",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 22.34,
    "ai_mentions": 0.4,
    "ai_alignment": 2.0,
    "ai_depth": 2.1,
    "ai_intent": 2.0,
    "ai_audience": 5.2,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on Agile engineering practices such as clean code, automation, and test-first development. While it briefly references the implementation of CI/CD pipelines and the integration of practices into workflows, it does not explicitly discuss or instruct on install and configuration processes. There are no direct mentions of installation, setup, configuration, or related actionable guides—scoring only 0.4 for mentions. The conceptual alignment (2.0) and depth (2.1) scores are low because the themes center on software quality and development methodology, not technical implementation tasks. The intent (2.0) is more about promoting technical excellence rather than providing installation or configuration support. The audience (5.2) gets a modest score because Agile and DevOps practitioners may overlap with the target category's audience, but the message is much broader. The signal-to-noise ratio (3.5) reflects some tangential references (e.g., continuous integration), but overall the content is high-level and not focused. No penalties were applied as nothing is outdated or contradictory in tone. The final confidence score (22.34) appropriately reflects the very loose, tertiary connection to 'Install and Configuration' given the almost entirely conceptual, rather than technical or procedural, treatment found in the content.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "Engineering Practices",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-06T11:35:52",
    "ai_confidence": 9.601,
    "ai_mentions": 0.4,
    "ai_alignment": 1.3,
    "ai_depth": 1.0,
    "ai_intent": 1.2,
    "ai_audience": 2.8,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content 'Engineering Practices' discusses agile foundations such as clean code, automation, and test-first development. There is no direct mention of asynchronous development (Mentions: 0.4). The conceptual alignment is extremely limited, as asynchronous development is not referenced in principles, tools, or impact; practices described (e.g., CI/CD, automation) are not discussed in the context of async team collaboration (Alignment: 1.3). Depth is superficial regarding the target category, since the entire discussion is generic about engineering best practices and does not touch on asynchronous workflows, distributed teams, or collaboration models (Depth: 1.0). The intent is to inform about standard agile technical fundamentals, not asynchronous development or teamwork (Intent: 1.2). Audience alignment is modest, as this content is relevant to software teams generally, but not specifically those interested in async collaboration practices (Audience: 2.8). Signal-to-noise ratio is quite low from the category perspective, as virtually all content is about traditional agile/engineering practices unrelated to async teamwork (Signal: 0.6). No penalties are applied as there is no outdated or contradictory tone. Overall, this content sits at the Tertiary level for 'Asynchronous Development'—tangential at best, with coincidental overlap (automation/CI could facilitate async work, but are not described with that intent).",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "resourceId": "Engineering Practices",
    "category": "Definition of Ready",
    "calculated_at": "2025-05-06T11:35:40",
    "ai_confidence": 11.35,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.6,
    "ai_intent": 1.3,
    "ai_audience": 3.1,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses exclusively on general Agile engineering practices such as clean code, automation, and test-first development. There is no direct mention—explicit or implicit—of the Definition of Ready (DoR) as a concept, nor are any of its criteria, checklists, or impacts on sprint planning discussed. \n\nDirect Mentions (0.2): The term 'Definition of Ready' is not used or referenced in any form. \n\nConceptual Alignment (0.8): While engineering practices contribute to the overall health of Agile delivery, they are not aligned with the specific criteria, checklists, or purpose of DoR, which is about ensuring user stories are ready for sprint work.\n\nDepth of Discussion (0.6): The depth is centered on engineering and technical excellence, not on readiness criteria or any DoR concepts; at best, these practices are tangentially related to creating conditions for good backlog items but this is not discussed.\n\nIntent/Purpose Fit (1.3): The content is informative and relevant for those interested in Agile mindset and software quality, but does not serve the intent of providing information/support on the Definition of Ready.\n\nAudience Alignment (3.1): The piece targets practitioners in Agile teams, which does include the audience interested in DoR, but the content misses the specific focus required.\n\nSignal-to-Noise Ratio (3.5): The writing is focused and relevant to Agile engineering, but almost all content is off-topic relative to the DoR category.\n\nNo penalties were applied, as the content is modern, earnest, and not critical or satirical. The overall score appropriately reflects a very low fit, just above the absolute minimum, acknowledging that high-functioning teams practicing engineering excellence may also care about DoR, but this connection is not addressed in the content.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "resourceId": "Engineering Practices",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-06T11:35:56",
    "ai_confidence": 34.515,
    "ai_mentions": 0.2,
    "ai_alignment": 3.9,
    "ai_depth": 3.7,
    "ai_intent": 3.8,
    "ai_audience": 7.1,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The provided content focuses heavily on software engineering practices within Agile environments, emphasizing clean code, automation, and test-first development. \n\n- **Direct Mentions (0.2):** There are no direct references to 'Organisational Physics', 'systems thinking', or any of the explicitly defined key topics (e.g., feedback loops, complexity, or organisational dynamics). \n\n- **Conceptual Alignment (3.9):** While the narrative touches on concepts such as fostering a culture of technical excellence and aligning technical efforts with business objectives (which can, at a stretch, relate to organisational behaviour and dynamics), it does not truly engage with systems thinking, feedback loops, or holistic organisational analysis. The language remains focused on the team and technical levels rather than organisation-wide system dynamics. \n\n- **Depth of Discussion (3.7):** The text presents somewhat surface-level discussion regarding how engineering practices foster agility or collaboration. However, it does not analyse structural, systemic, or emergent behaviours at the organisational level, nor does it engage with mapping or analysing broader organisational dynamics as defined in 'Organisational Physics.' \n\n- **Intent / Purpose Fit (3.8):** The intent is to promote the adoption and value of engineering practices in Agile software development. Its purpose is technical and process-focused, not aimed at exploring or advancing systems thinking or organisational dynamics as per the specified category. \n\n- **Audience Alignment (7.1):** The content targets practitioners and perhaps team leads in Agile software development, which can overlap slightly with those interested in organisational improvement, but is not specifically aimed at those seeking to understand organisational dynamics from a systems theory perspective.\n\n- **Signal-to-Noise Ratio (8.0):** The message is highly focused on its subject, with little extraneous content. However, its relevance to the 'Organisational Physics' category is marginal, as nearly all content is off-category.\n\nNo penalties were applied: The content is neither outdated nor critical/satirical; it just doesn't align tightly with Organisational Physics. Overall, this content would only provisionally fit the category at a tertiary level due to passing references to team culture and adaptability, but lacks the systems perspective that defines Organisational Physics. The confidence score reflects this peripheral and incidental overlap.",
    "level": "Ignored"
  },
  "Leadership": {
    "resourceId": "Engineering Practices",
    "category": "Leadership",
    "calculated_at": "2025-05-06T11:35:31",
    "ai_confidence": 22.475,
    "ai_mentions": 0.3,
    "ai_alignment": 2.1,
    "ai_depth": 2.6,
    "ai_intent": 1.8,
    "ai_audience": 2.5,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on foundational engineering practices such as clean code, automation, and test-first development within Agile environments. \n\n- Mentions (0.3): There are no explicit references to leadership or leaders. The content does not mention leadership, nor employ related terminology (e.g., leader, manager, leadership styles).\n- Conceptual Alignment (2.1): While the overall theme of fostering a culture of technical excellence and alignment with business objectives does lightly touch on broader organisational goals (which leaders might care about), it does not directly address leadership roles, responsibilities, or techniques. It is almost entirely angled at technical practice, not leadership behavior or strategy.\n- Depth (2.6): The discussion delves into the value of engineering practices for Agile success, but any connections to leadership are indirect and incidental (e.g., impact on team motivation, performance). There is no in-depth examination of leadership concepts, models, or actions.\n- Intent (1.8): The main purpose is to highlight key engineering techniques for Agile success. Motivational effects and cultural outcomes are secondary; the content’s intent is decidedly not leadership-focused.\n- Audience (2.5): The core audience appears to be technical practitioners (developers, engineers, teams) rather than leaders or executives. There is minimal crossover to leadership audiences except in broad references to organisational agility.\n- Signal (2.1): The focus is sustained and coherent about engineering practices, with only tangential mention of outcomes (e.g., team collaboration, culture), which might slightly touch on topics of interest to leaders but are not framed from a leadership perspective.\n\nNo penalties were applied because the content is current, not satirical or critical, and does not reference outdated practices. \n\nOverall, the fit to the 'Leadership' category is tertiary at best, as the content is centered on technical methods and their impact, not on leadership roles, models, or responsibilities.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "Engineering Practices",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-06T11:35:42",
    "ai_confidence": 30.75,
    "ai_mentions": 1.4,
    "ai_alignment": 3.3,
    "ai_depth": 3.5,
    "ai_intent": 2.2,
    "ai_audience": 6.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "This content centers on technical practices foundational to Agile (clean code, automation, test-first), but it lacks explicit or even implicit focus on leadership roles, responsibilities, or strategies. \n\n(Mentions) The term 'Agile' appears in context, but 'Agile Leadership' or discussion about leaders' roles is absent, warranting a low score. \n\n(Alignment) While improving team collaboration and alignment with business objectives is mentioned, the emphasis is on how engineering practices serve team and product outcomes, not how leaders foster or drive these aspects. \n\n(Depth) The discussion fully fleshes out engineering best practices and their effect on software delivery, but provides no insight into leadership behaviors, culture-setting, or change facilitation inside an Agile context. \n\n(Intent) The primary purpose is to inform readers about why engineering practices matter in Agile software delivery, not to educate or support leaders on their unique role. Thus, the fit is only tangential. \n\n(Audience) The writing targets Agile practitioners, developers, and potentially team facilitators, but not specifically Agile leaders or executives. Still, some overlap may exist where technical leaders read for context. \n\n(Signal) The content is highly focused on relevant Agile technical best practices, with minimal filler, but nearly all information stays within the technical implementation domain.\n\nNo penalty deductions are applied as there is no outdated information or contradiction of Agile leadership's framing. The evidence puts this content at the edge of relevance to Agile Leadership, perhaps as supporting (tertiary) material, but not direct or secondary.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "Engineering Practices",
    "category": "Project Management",
    "calculated_at": "2025-05-06T11:35:49",
    "ai_confidence": 41.2,
    "ai_mentions": 1.1,
    "ai_alignment": 3.5,
    "ai_depth": 4.2,
    "ai_intent": 3.7,
    "ai_audience": 5.2,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content primarily discusses software engineering practices such as clean code, automation, and test-first development in the context of Agile software development. There is no explicit mention of 'Project Management,' its methodologies, or key practices such as scope, risk, stakeholder management, or project phases. As such, the 'Direct Mentions' score is very low since project management is neither explicitly referenced nor its core concepts directly invoked.\n\nConceptual Alignment is limited: while there are indirect connections (e.g., 'aligns technical efforts with business objectives', 'enhances collaboration among cross-functional teams'), these are broad and not mapped to specific project management themes as defined. The main ideas are about engineering discipline and technical excellence, not about project planning, execution, or delivery practices from a PM perspective.\n\nDepth of Discussion is moderate—technical practices are explained in detail, but this depth is squarely in the engineering/DevOps realm, not project management. No specific lifecycle phases, PM tools, or roles are addressed except in the very broad organizational agility sense.\n\nIntent/Purpose Fit is correspondingly low; the primary intent is to advocate for engineering practices within agile development, not to inform about, train on, or support project management activities.\n\nAudience Alignment is moderate, as technical teams (developers, DevOps) are targeted rather than project managers or PMO stakeholders; potential secondary interest exists for PMs working in Agile contexts, reflected in the score being above midpoint.\n\nSignal-to-Noise Ratio is relatively high because the content is focused, on-topic—just not focused on project management, but on its own engineering scope.\n\nNo penalties were necessary as the content is not outdated and does not take a tone in opposition to project management. Tertiary level applies because PM concepts are at best a distant secondary implication, not a stated or core focus.\n\nThe final confidence score, using the detailed formula, appropriately reflects the marginal relationship to the project management category.",
    "level": "Tertiary"
  },
  "Psychological Safety": {
    "resourceId": "Engineering Practices",
    "category": "Psychological Safety",
    "calculated_at": "2025-05-06T11:35:38",
    "ai_confidence": 21.45,
    "ai_mentions": 0.4,
    "ai_alignment": 2.0,
    "ai_depth": 2.4,
    "ai_intent": 2.3,
    "ai_audience": 5.7,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content primarily discusses fundamental engineering practices within Agile environments, focusing on technical excellence, clean code, automation, and CI/CD. Direct mentions of psychological safety are entirely absent (mentions: 0.4), scoring only for possible indirect nods to positive culture. Conceptual alignment (2.0) is low because the narrative is about processes and technical outcomes, not the human/team safety aspects required for this category: nothing addresses risk-taking, expressing ideas freely, or emotional conditions necessary for psychological safety. The depth score (2.4) is similarly low, as psychological safety is neither explored nor discussed—only a generic reference to fostering motivation and innovation is present, but that is insufficient for this category. Intent/purpose (2.3) reflects that the article aims to inform about technical practices, not the trust/culture dimensions of psychological safety. Audience targeting (5.7) is moderately relevant: while the likely audience (Agile practitioners, technical leaders) overlaps with those interested in psychological safety, the content itself is not angled toward this topic. The signal-to-noise ratio (5.9) is above midpoint; the article is tightly focused, but the focus is not the requested category. No penalties were applied: the content is up-to-date, neutral-to-positive in tone, and not misleading regarding psychological safety. Overall, this is a tertiary fit at best, and the confidence score proportionately reflects the minimal and indirect relevance.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "Engineering Practices",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-06T11:35:42",
    "ai_confidence": 23.35,
    "ai_mentions": 0.1,
    "ai_alignment": 2.25,
    "ai_depth": 2.15,
    "ai_intent": 2.0,
    "ai_audience": 7.05,
    "ai_signal": 3.95,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses exclusively on technical engineering practices within Agile (such as clean code, automation, and test-first development) and does not reference or discuss Open Space Agile, Open Space Technology, or related principles such as psychological safety, co-creation, emergence, or participatory change. While some general Agile ideas are mentioned, there is no direct or indirect connection to Open Space Agile's collective, emergent transformation processes or its focus on organisational change and complexity. \n\n(1) Mentions (0.10): The term 'Open Space Agile' is never used, nor are its key terminology or adjacent concepts. (2) Alignment (2.25): The article is conceptually adjacent in a very broad, generic sense (relates to Agile), but has no specific alignment to Open Space Agile’s unique aspects. (3) Depth (2.15): The depth of discussion is limited entirely to technical practice, not organisational change via Open Space principles. (4) Intent (2.00): The intent is to inform about Agile technical foundations, not organisational transformation via Open Space or collaborative emergence. (5) Audience (7.05): The audience (practitioners focused on Agile engineering) partially overlaps with the general Agile audience, but misses leaders, facilitators, or transformation agents for Open Space Agile. (6) Signal (3.95): The content is focused and noise-free, but off-topic for the Open Space Agile category: high signal for engineering topics, low for this specific category.\n\nNo penalties were applied, as the content is current, neutral in tone, and does not contradict Open Space Agile principles explicitly or by implication. Overall, this is tertiary content for the category that might at best be cited as background but is not itself relevant to Open Space Agile as a topic.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "Engineering Practices",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-06T11:35:34",
    "ai_confidence": 52.7,
    "ai_mentions": 1.3,
    "ai_alignment": 6.7,
    "ai_depth": 7.0,
    "ai_intent": 6.9,
    "ai_audience": 6.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content, 'Engineering Practices,' focuses on foundational techniques like clean code, automation, and test-first development in agile environments. \n\nDirect Mentions (1.3): There are no explicit or implied references to 'Professional Scrum,' Scrum roles, or the specific ethos defined in the category. The language is generalized toward 'Agile' and engineering. \n\nConceptual Alignment (6.7): While the discussion around technical excellence (a core value in Professional Scrum) and continuous improvement is evident, the connection is generic—aligned in spirit but not in explicit practice (e.g., no discussion of empiricism, Scrum events, accountability). The focus on technical excellence and sustainable flow of value does reflect significant parallel themes. \n\nDepth of Discussion (7.0): The content provides substantial detail on the importance of technical practices for agility and sustainable delivery. However, it stops short of connecting those concepts directly to Scrum's disciplined approach, empiricism, or role accountability. \n\nIntent / Purpose Fit (6.9): The content seeks to inform and elevate engineering standards in Agile settings to achieve value delivery. While relevant to practitioners aiming for professionalism, the intent is not tightly coupled with Professional Scrum's philosophy. \n\nAudience Alignment (6.2): The target audience appears to be agile engineers, technical leads, and teams—overlapping partially with Professional Scrum practitioners, but potentially omitting Scrum Masters, Product Owners, and non-technical roles. \n\nSignal-to-Noise Ratio (7.1): The content is focused and relevant to the technical excellence aspect of Professional Scrum, with minimal filler or tangential material. All parts support a disciplined, value-driven approach but lack explicit Scrum framing.\n\nNo penalties applied: The content is current, neutral in tone, and not undermining Professional Scrum. However, it is best categorized as secondary—closely supporting Professional Scrum themes (especially technical excellence and value), but not directly about the ethos, roles, or empirical processes unique to Professional Scrum.",
    "level": "Tertiary"
  },
  "Product Owner": {
    "resourceId": "Engineering Practices",
    "category": "Product Owner",
    "calculated_at": "2025-05-06T11:35:38",
    "ai_confidence": 12.05,
    "ai_mentions": 0.4,
    "ai_alignment": 1.1,
    "ai_depth": 1.05,
    "ai_intent": 0.85,
    "ai_audience": 2.15,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content discusses general engineering practices within Agile, specifically clean code, automation, and test-first development. There is no direct mention of the Product Owner role or its core accountability—'Direct Mentions' is therefore very low (0.40). 'Conceptual Alignment' (1.10) is low because while software quality may contribute to product value, there is no focus on the Product Owner's responsibility, decision-making, or backlog management. 'Depth of Discussion' (1.05) reflects a surface-level reference to value delivery without exploring PO-specific strategic or accountability aspects. Regarding 'Intent,' the content is meant to inform about engineering practices themselves rather than the Product Owner role (0.85). The 'Audience' (2.15) is mostly technical practitioners and developers, not Product Owners; some minor PO relevance exists where business objectives are mentioned. 'Signal-to-Noise Ratio' (2.00) is slightly higher because the content stays on topic for engineering but is off-topic for the PO category. No penalties were applied as the content is current, neutral in tone, and not critical of Scrum or the PO accountability. Overall, the match is quite low—classified as 'Tertiary' relevance, meaning only a distant or indirect connection to the Product Owner category.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "Engineering Practices",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-06T11:35:42",
    "ai_confidence": 25.994,
    "ai_mentions": 0.3,
    "ai_alignment": 2.8,
    "ai_depth": 3.1,
    "ai_intent": 3.6,
    "ai_audience": 7.2,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content primarily discusses general Agile engineering practices such as clean code, automation, and test-first development. There are no explicit mentions of Site Reliability Engineering (SRE), nor of its defining principles (e.g., SLOs, SLIs, incident response, reliability in production, etc.). While topics such as automation and maintainability can be relevant to SRE in a broad sense, their presentation here is generic and not situated within the context of production system reliability or bridging development and operations. The alignment and depth scores are low because the discussion remains at an Agile/general development level and does not reference or explore the unique facets of SRE. Audience fit is somewhat higher because technical practitioners interested in SRE may find some practices relevant, but the signal-to-noise ratio reflects a lack of category-focus: most of the content centers on software quality and Agile, not reliability engineering. No penalties were applied as the tone and contemporaneity are appropriate. Overall, the content has only minor, tangential relevance to Site Reliability Engineering, meriting a tertiary classification with low confidence.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "Engineering Practices",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-06T11:35:45",
    "ai_confidence": 92.536,
    "ai_mentions": 8.6,
    "ai_alignment": 9.5,
    "ai_depth": 9.3,
    "ai_intent": 9.0,
    "ai_audience": 9.2,
    "ai_signal": 9.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content centers on 'Engineering Practices' in an Agile context, directly referencing the 'culture of technical excellence and continuous improvement.' It discusses foundational technical practices—clean code, automation, test-first development—that map closely to those outlined in the Technical Excellence classification. Conceptual alignment is very strong, as the main ideas (high-quality software, maintainability, technical debt reduction, adaptability, continuous improvement) are all key elements of Technical Excellence. The discussion goes deeper than surface-level mentions: the piece connects practices to outcomes (predictable value delivery, organisational agility, innovation), highlighting both rationale and impact. While 'Technical Excellence' is mentioned explicitly only once, it is clearly positioned as the organizing concept. The main intent is to inform and advocate for Technical Excellence within Agile teams, perfectly fitting the category's target purpose. The tone, depth, and vocabulary are suited for a technical/practitioner audience. The content is focused with minimal filler, and all major points support the main theme. There are no outdated references or contradictions; therefore, no penalties are applied. Minor variance in scoring reflects that while almost perfect, a few details (e.g., more diverse examples) could strengthen depth or audience targeting further. Overall, this is a primary example of content addressing Technical Excellence.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Technical Excellence category. It thoroughly explores core engineering practices within Agile, linking them to outcomes like quality and adaptability. The focus is clear, the depth is appropriate for practitioners, and the main theme is consistently reinforced, making it highly relevant for those seeking to understand or promote Technical Excellence."
  },
  "Product Validation": {
    "resourceId": "Engineering Practices",
    "category": "Product Validation",
    "calculated_at": "2025-05-06T11:35:49",
    "ai_confidence": 23.85,
    "ai_mentions": 0.5,
    "ai_alignment": 2.6,
    "ai_depth": 3.3,
    "ai_intent": 2.1,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is focused on foundational software engineering practices in Agile development, such as clean code, automation, and test-first development. There is minimal direct connection to 'Product Validation' as strictly defined—there are no direct mentions of product validation, user testing, market fit, prototyping, customer feedback loops, lean startup principles, A/B testing, or evidence-based validation strategies. \n\n- Mentions (0.5): 'Product Validation' is not mentioned at all, nor are any of its direct subtopics. The only arguable overlap is a tangential mention of 'customer expectations' and 'value to customers', which does not equate to explicit validation practices.\n- Alignment (2.6): The core of engineering practices in Agile (test-first, automation) is related to software quality, not to experiment-driven validation with real users or product-market fit.\n- Depth (3.3): The content explores engineering practices in a reasonable amount of detail, but these practices are not linked to iterative user feedback, product experimentation, or validation cycles. The only minor relevance is promoting a 'predictable and sustainable flow of value' and fostering 'learning and experimentation', which is not discussed in the context of validating product ideas.\n- Intent (2.1): The purpose is clearly educational around Agile engineering and technical excellence, not to help the audience understand or implement product validation techniques.\n- Audience (7.1): The audience is software practitioners, likely overlapping somewhat with those interested in product validation, but the focus is on engineering process, not on product management or validation roles.\n- Signal (6.8): The content is focused and clear, with few tangents; however, its relevance to the target category is weak, and almost none of it treats validation directly.\n\nNo penalties were required, as the information is up-to-date, neutral in tone, and not satirical or critical. This material is 'Tertiary' for 'Product Validation', as there is negligible direct applicability except for the foundational importance of technical excellence that indirectly supports rapid testing and iteration for validation in broader Agile contexts.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "Engineering Practices",
    "category": "Azure Repos",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 18.24,
    "ai_mentions": 0.6,
    "ai_alignment": 2.2,
    "ai_depth": 1.7,
    "ai_intent": 2.3,
    "ai_audience": 5.9,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content does not mention Azure Repos explicitly or implicitly; the Direct Mentions score (0.6) reflects the absence of direct reference. Its Conceptual Alignment with Azure Repos is weak (2.2), as it discusses general Agile practices—clean code, automation, test-first development—and only touches indirectly on topics like CI/CD, which could be associated with source control, but without any connection to Azure Repos. The Depth of Discussion (1.7) is low: the content remains on a general level, with no details about version control tools, branching, pull requests, or any technologies specific to Azure Repos. Intent/Purpose Fit (2.3) is similarly off-purpose; while the content is meant for technical or Agile practitioners, its objective is to advocate for broad engineering discipline, not to inform about or support practices with Azure Repos. The Audience Alignment (5.9) is somewhat higher, as both target software engineering practitioners, but the overlap is not category-specific. Signal-to-Noise (6.1) is moderate, as the content is free of filler but focused on broad engineering and Agile topics. No penalties are warranted since the content is contemporary, neutral in tone, and not misleading. The low overall confidence (18.24) is proportionate, as there is no substantive linkage to the Azure Repos category—the piece is best described as tertiary, relevant only to the extent that rigorous engineering supports practices that could (in turn) benefit from source control platforms like Azure Repos.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "resourceId": "Engineering Practices",
    "category": "Azure DevOps",
    "calculated_at": "2025-05-06T11:35:43",
    "ai_confidence": 26.34,
    "ai_mentions": 0.2,
    "ai_alignment": 2.0,
    "ai_depth": 2.3,
    "ai_intent": 2.7,
    "ai_audience": 8.2,
    "ai_signal": 5.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content discusses core engineering practices, including automation and CI/CD, which have conceptual alignment with Azure DevOps functionalities. However, there are no explicit or implicit mentions of Azure DevOps itself, or of any specific services like Boards, Repos, Pipelines, etc. The discussion is broad, focusing on Agile development and engineering best practices in general without zeroing in on Azure DevOps as a tool or platform. Thus, the Direct Mentions score is extremely low (0.2/10). The Conceptual Alignment is minimal (2.0/10), based only on indirect overlap with DevOps concerns and some phrasing about CI/CD. Depth is also quite shallow (2.3/10) as there is no exploration of Azure DevOps features, settings, or implementations. The Intent is primarily to inform about general Agile-related practices rather than specifically about Azure DevOps, so it's tangential (2.7/10). However, the Audience Alignment is relatively strong (8.2/10) given the technical and practitioner-oriented language, analogous to the Azure DevOps user base. Signal-to-Noise is moderate (5.6/10) since the content stays focused but not on the intended category. No penalties were applied as there is no outdated or contradictory material. Overall, as the content lacks category specificity but shares some peripheral alignment and is relevant to similar audiences, the final confidence is appropriately low at 26.34, and the category relevance is classified as 'Tertiary'.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "resourceId": "Engineering Practices",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 43.98,
    "ai_mentions": 2.1,
    "ai_alignment": 4.9,
    "ai_depth": 4.6,
    "ai_intent": 5.0,
    "ai_audience": 7.0,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content focuses broadly on foundational engineering practices in Agile such as clean code, automation, and test-first development. While it does reference CI/CD pipelines and streamlining the deployment process, mentions of 'deployment frequency' or direct optimization of deployment intervals are absent, leading to a low 'mentions' score (2.1). There is partial conceptual alignment (4.9), as practices like automation and CI/CD are enabling factors for improved deployment frequency, but the main theme is technical excellence and maintainability. Depth (4.6) reflects superficial linkage: the relationship between engineering practices and deployment improvements is implied and only touched on, not explored. The primary intent (5.0) is to advocate for engineering best practices rather than to focus on deployment frequency optimization. The audience is generally technical teams in Agile/DevOps contexts, reasonably well-aligned (7.0). The signal is moderate (7.3) since the content is focused and on-topic, but only a minority is tangentially relevant to deployment frequency. No penalties are applied, as the content is neither outdated nor hostile. Overall, deployment frequency is at best a tertiary theme, not central, resulting in a proportionally low confidence score.",
    "level": "Tertiary"
  },
  "Working Agreements": {
    "resourceId": "Engineering Practices",
    "category": "Working Agreements",
    "calculated_at": "2025-05-06T11:35:47",
    "ai_confidence": 20.07,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 3.15,
    "ai_intent": 2.12,
    "ai_audience": 6.2,
    "ai_signal": 4.32,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content exclusively discusses Engineering Practices such as clean code, automation, and test-first development in Agile environments. There are no direct mentions or references to 'Working Agreements' or core concepts from the category definition—no discussion of team norms, alignment, or collaborative agreements. The closest relevance is the slight nod to improved teamwork and collaboration by embedding good practices, but these are technical/process practices, not team working agreements. \n\nScores:\n- Mentions (0.200): No direct or indirect references to working agreements.\n- Alignment (2.300): Some secondary relation to collaboration and teamwork, but not to the norms/principles of working agreements as defined.\n- Depth (3.150): Reasonably thorough on engineering practices, but not on working agreements; any overlap is incidental and very superficial.\n- Intent (2.120): The main purpose is to define and advocate for engineering practices, not to discuss team agreements, thus misaligned with the category's core intent.\n- Audience (6.200): The content targets Agile practitioners/teams, which is similar to the working agreements' audience, albeit from a technical rather than norms/process perspective.\n- Signal (4.320): Nearly all content is on-topic for engineering practices, and thus off-topic or irrelevant from the working agreements perspective; minimal overlap.\n\nNo penalties are applied because there is no outdated or contradicting information. The final score is low, reflecting only weak, incidental connections to team collaboration, qualifying the match as tertiary and not a suitable fit for the category by the provided definition.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "resourceId": "Engineering Practices",
    "category": "Automated Testing",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 42.2,
    "ai_mentions": 2.7,
    "ai_alignment": 5.8,
    "ai_depth": 5.0,
    "ai_intent": 4.8,
    "ai_audience": 7.2,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content discusses foundational Agile engineering practices—specifically mentioning 'automation' and 'test-first development'—which are relevant to automated testing, but does not directly mention the term 'automated testing' or devote focused, substantial content to its key principles. \n\nMentions (2.7): The terms 'automation' and 'test-first development' are present, but there is no explicit mention of 'automated testing' or its specific types/tools. This warrants a low to moderate score for direct mentions.\n\nAlignment (5.8): Conceptually, there is moderate alignment, as the text addresses practices (automation, CI/CD, test-first development) that underpin and enable automated testing. However, the discussion is broader, encompassing engineering practices as a whole, not automated testing specifically. \n\nDepth (5.0): The content describes benefits, cultural impact, and high-level workflows (like CI/CD), but does not go into in-depth discussion about automated testing methods, tools, metrics, or best practices. The mention of 'automation' and 'test-first' implies an automated testing perspective, but the exploration is not deep or detailed for this category.\n\nIntent (4.8): The intent is informative, seeking to advocate for strong engineering practices in Agile. While automated testing is clearly implied as beneficial, it is not the main focus or purpose of the piece.\n\nAudience (7.2): The content targets a technical audience familiar with Agile methods—developers, engineering managers, Agile practitioners—well-aligned with the audience for automated testing content.\n\nSignal (5.3): Focus is moderately diluted, since the piece covers a range of engineering practices (including clean code, automation, test-first, and CI/CD), not zeroing in specifically on automated testing. Relevance exists, but is shared with neighboring topics.\n\nNo penalties are applied as there are no outdated references, nor does the tone undermine the category. Overall, the content qualifies as secondary for Automated Testing: relevant and contextually supportive, but not focused or sufficiently deep to be considered primary.",
    "level": "Tertiary"
  },
  "Complexity Thinking": {
    "resourceId": "Engineering Practices",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-06T11:35:50",
    "ai_confidence": 19.77,
    "ai_mentions": 0.55,
    "ai_alignment": 2.3,
    "ai_depth": 1.8,
    "ai_intent": 2.45,
    "ai_audience": 3.4,
    "ai_signal": 3.15,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content 'Engineering Practices' is focused on core Agile software engineering approaches, such as clean code, automation, and test-first development. \n\nDirect Mentions (0.55): There are no explicit mentions of 'Complexity Thinking', complexity science, Cynefin, non-linear dynamics, or emergent behavior. Any connection to complexity theory is highly indirect and implied at best.\n\nConceptual Alignment (2.30): While Agile can be associated with complexity thinking (due to its adaptability and focus on change), this content remains primarily grounded in technical software practices. It briefly mentions responsiveness to change and systemic approaches but doesn’t reference complexity principles or frameworks.\n\nDepth of Discussion (1.80): The discussion depth is on engineering practices, without exploring emergent behaviors, non-linearity, or complexity management. Complexity-related concepts—such as unpredictability or self-organization—are absent or only faintly implied in references to adaptation.\n\nIntent/Purpose Fit (2.45): The main intent is to promote technical excellence in Agile environments, not to explore or discuss complexity science. Complexity thinking is clearly not the primary purpose.\n\nAudience Alignment (3.40): The piece is written for Agile practitioners and technical leaders who might intersect with complexity topics, but does not actively target the complexity community or theorists.\n\nSignal-to-Noise Ratio (3.15): The content is tightly focused on its described theme (engineering practices in Agile), so the signal is high for its own topic, but low for 'Complexity Thinking', because much of the focus is off-category.\n\nNo penalties applied because the content is current, does not contradict complexity thinking, nor is it satirical or outdated. \n\nIn summary, any connections to 'Complexity Thinking' are secondary at best: while technical agility could play a role in enabling complex adaptive responses, the article neither names nor deeply engages with complexity science or its organizational theories. Confidence is appropriately low and the categorization, if needed at all, would be tertiary.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "resourceId": "Engineering Practices",
    "category": "Azure Pipelines",
    "calculated_at": "2025-05-06T11:35:35",
    "ai_confidence": 37.05,
    "ai_mentions": 0.8,
    "ai_alignment": 3.3,
    "ai_depth": 3.6,
    "ai_intent": 4.8,
    "ai_audience": 6.1,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "Direct Mentions (0.8): The content does not mention 'Azure Pipelines' by name nor references any Azure-specific services. The closest alignment is generic references to CI/CD pipelines. \n\nConceptual Alignment (3.3): While the content references CI/CD pipelines and automation—principles integral to Azure Pipelines—it does so in a general DevOps and Agile engineering context, without direct linkage to the Azure ecosystem or concrete features exclusive to Azure Pipelines. \n\nDepth of Discussion (3.6): The discussion is moderately detailed about engineering best practices but gives only a cursory nod to CI/CD pipelines. The focus is on clean code, test-first development, and automation broadly, without delving into the implementation or configuration within Azure Pipelines specifically. \n\nIntent/Purpose Fit (4.8): The main purpose is to inform about fundamental engineering methodologies that support Agile and DevOps, including CI/CD. However, the alignment is tangential since Azure Pipelines is not the foreground topic; the mention of pipelines supports, but does not drive, the content's intent. \n\nAudience Alignment (6.1): The content is oriented toward technical practitioners, a similar audience to Azure Pipelines documentation. Still, its broad approach points to anyone practicing Agile/DevOps, not specifically Azure Pipelines users. \n\nSignal-to-Noise Ratio (7.2): Most of the text is on technical software development practices. The mention of CI/CD pipelines is on-topic, but the majority content is tangential or foundational background not explicitly relevant to Azure Pipelines. \n\nOverall, the content is at best tangentially related to the Azure Pipelines category: it discusses practices and ideals that underpin CI/CD, but does not explicitly or substantively address Azure Pipelines itself. No penalty deductions were necessary, and the evidence supports a low, tertiary level of categorization confidence.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "Engineering Practices",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-05-06T11:35:33",
    "ai_confidence": 22.3,
    "ai_mentions": 0.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 3.8,
    "ai_audience": 6.5,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content titled 'Engineering Practices' discusses foundational software development concepts within the Agile framework, focusing on clean code, automation, test-first methods, and CI/CD. However, it does not directly mention Minimum Viable Product (MVP) or any explicitly related aspects (Score: 0.3), nor does it deeply align with the MVP concept or its typical considerations—such as market validation, feedback loops, or defining minimal feature sets (Score: 2.7 alignment). The depth dimension (2.9) reflects a thorough engagement with Agile engineering, but it doesn't extend this focus into the MVP domain; there's no substantive discussion of MVP-specific processes, case studies, or metrics. On intent, the content is tangential—its goal seems to be improving software quality and Agile proficiency, which is relevant to MVPs generally but not specifically focused on them (Score: 3.8). Audience alignment (6.5) and signal (7.1) are scored higher since Agile practitioners (a likely audience for MVP topics) are addressed, and the content is focused and clear without off-topic tangents. No penalty deductions were warranted, as tone, currency, and correctness are maintained. Overall, this content only peripherally relates to the MVP category, functioning as background context rather than directly advancing MVP-specific understanding.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "Engineering Practices",
    "category": "Beta Codex",
    "calculated_at": "2025-05-06T11:35:34",
    "ai_confidence": 23.318,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.6,
    "ai_intent": 3.2,
    "ai_audience": 7.3,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "1. Direct Mentions (0.200): The content makes no explicit reference to BetaCodex, its terminology, or unique principles. There are no direct or indirect mentions at all. \n2. Conceptual Alignment (2.300): While the content discusses aspects of agility, cross-functional collaboration, and empowerment, these are broad concepts that overlap with BetaCodex only superficially. The focus is technical (engineering, code quality) rather than organisational design, decentralisation, or BetaCodex-specific ideas. \n3. Depth of Discussion (2.600): The article offers moderate depth about engineering practices within an Agile context but does not meaningfully engage with BetaCodex principles, structures, or comparative frameworks. \n4. Intent/Purpose Fit (3.200): The intent is to inform readers about technical and process-focused practices to support Agile teams. Although it tangentially relates to agility and team collaboration—topics also present in BetaCodex discussions—it does not target organisational design, decentralisation, or transformation, which are signature to BetaCodex. \n5. Audience Alignment (7.300): The intended audience is likely Agile practitioners, engineers, and technical team leads. While BetaCodex can interest similar groups (especially change agents and team coaches), the content does not target leaders or strategists interested in organisational transformation and decentralisation—the core BetaCodex audience—so the fit is partial, not full. \n6. Signal-to-Noise Ratio (5.100): The content stays focused on engineering topics relevant to Agile delivery. There are no off-topic digressions, but the subject is largely outside BetaCodex’ specific focus, so the proportion of relevant signal is moderate at best. \nNo penalties were applied, as the content is current, neutral in tone, and not contradictory. Overall, while the article involves concepts tangentially adjacent to BetaCodex (agility, collaboration), it is not primarily, secondarily, or even deeply tertiarily a BetaCodex discussion. The confidence score is low and the mapping is at best Tertiary.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "resourceId": "Engineering Practices",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-06T11:35:34",
    "ai_confidence": 21.083,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 3.3,
    "ai_intent": 2.6,
    "ai_audience": 4.5,
    "ai_signal": 3.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses on engineering practices foundational to Agile development—namely, clean code, automation, and test-first development. While it mentions 'continuous improvement,' which aligns somewhat with Lean Thinking, there are no direct references to Lean or its principles (e.g., Value Stream, Waste, 5S, Kanban) and none of the Lean vocabulary (e.g., Muda, Kaizen) is present. \n\n- **Direct Mentions (0.800):** No explicit mention of Lean Thinking, lean principles, or associated terms. The content fully centers on Agile engineering practices.\n- **Conceptual Alignment (2.700):** Some thematic overlap exists—continuous improvement and predictable flow both resonate conceptually with Lean, but the content never connects these ideas to Lean Thinking nor discusses waste minimisation or value stream mapping.\n- **Depth of Discussion (3.300):** The discussion is reasonably substantial for Agile engineering practices, but depth with respect to Lean Thinking is very minimal—at best, the mindset of ongoing improvement.\n- **Intent / Purpose Fit (2.600):** The main intent is to inform about effective Agile technical practices, not Lean Thinking. Any Lean-related concepts are incidental, not central.\n- **Audience Alignment (4.500):** The target audience (technical practitioners in Agile) overlaps with one segment of Lean practitioners, but the content is not tailored for those explicitly seeking Lean Thinking insights.\n- **Signal-to-Noise Ratio (3.900):** The content is focused on its subject, but nearly all of it is off-topic for Lean Thinking under strict classification; very little of the content is relevant if Lean is the lens.\n\nNo penalties were necessary as there were no outdated practices or contradictions with Lean. The resulting confidence reflects that while there is marginal conceptual similarity, categorising this content as 'Lean Thinking' would be a stretch; it most appropriately sits at the 'Tertiary' level.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "resourceId": "Engineering Practices",
    "category": "Product Discovery",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 17.43,
    "ai_mentions": 1.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.3,
    "ai_intent": 2.8,
    "ai_audience": 3.0,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content is primarily focused on the technical aspects of software engineering practices fundamental to Agile development, such as clean code, automation, test-first development, and CI/CD. While it emphasizes the broader benefits to team collaboration, adaptability, and alignment with business objectives, it does not discuss the methodologies or activities central to Product Discovery, such as user research, customer need identification, feature prioritization, or MVP prototyping. There is a minor, implicit connection in references to responding to changing requirements and delivering value to customers, but these are framed from an engineering quality and delivery perspective rather than a discovery/process perspective. \n\n- Mentions (1.2): 'Product Discovery' is not explicitly mentioned at all, nor are related terms; the only connection is a vague mention of aligning with business objectives and delivering value.\n- Alignment (2.6): The concepts (continuous improvement, team collaboration) are generally Agile, but not product discovery-focused, missing any discussion of market validation, idea testing, or user feedback analysis.\n- Depth (2.3): The discussion is detailed regarding engineering execution but offers nothing about product discovery methodologies, frameworks, or research activities.\n- Intent (2.8): The main intent is to promote technical excellence, not to explore or guide the product discovery process.\n- Audience (3.0): The target audience is developers or technically-oriented Agile practitioners, not specifically those focused on product management or discovery. Some overlap exists for cross-functional teams.\n- Signal (2.4): The content is highly focused, but the 'signal' relative to product discovery is low, as nearly all discussion is off-topic for the category. \n\nNo penalties were applied as the content does not reference obsolete practices or exhibit a contradictory tone. Overall, the relevance to Product Discovery is incidental and weakly implied, leading to a tertiary level and low confidence.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "Engineering Practices",
    "category": "Deployment Strategies",
    "calculated_at": "2025-05-06T11:35:41",
    "ai_confidence": 39.082,
    "ai_mentions": 2.7,
    "ai_alignment": 4.9,
    "ai_depth": 4.5,
    "ai_intent": 4.6,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content 'Engineering Practices' focuses on methodologies like clean code, automation, and test-first development within Agile environments. While these are closely related to the quality and reliability required for successful deployments, the text does not directly mention or explore deployment strategies such as blue-green deployments, canary releases, or feature toggles. Direct mentions (2.7) are low, as 'deployment' is referenced only tangentially through mention of CI/CD pipelines. Conceptual alignment (4.9) is moderate since continuous delivery is part of deployment strategy, but it is presented as an outcome rather than a topic. Depth (4.5) and intent (4.6) reflect a surface-level, supportive relationship: the content supports practices that enable deployment but is not itself a discussion of deployment strategy. Audience alignment (7.1) is relatively strong because the technical audience overlaps; however, the focus is more on engineering than on deployment teams explicitly. Signal (6.3) reflects that while there is only some relevant content, most of it focuses on development quality rather than deployment methodology. No penalties are applied as the content is current and its tone is neutral and positive. Overall, this content fits best as 'tertiary' to the Deployment Strategies category, as it forms part of the supporting context but is not a strategic-level or detailed tactics discussion.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "resourceId": "Engineering Practices",
    "category": "Azure Boards",
    "calculated_at": "2025-05-06T11:35:34",
    "ai_confidence": 10.683,
    "ai_mentions": 0.1,
    "ai_alignment": 1.5,
    "ai_depth": 1.2,
    "ai_intent": 1.3,
    "ai_audience": 2.8,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content does not directly mention Azure Boards or any associated features (mentions: 0.1). Conceptually, it acknowledges Agile methodologies and engineering practices such as clean code and test-first development, which are tangentially relevant to the agility-focused work tracked within Azure Boards, but does not discuss any project management tooling or processes (alignment: 1.5). There is no discussion of Azure Boards, its functionalities, or integration with Agile practices; hence, the depth is very low (1.2). The intent is to describe general engineering best practices within Agile, not specific tools or platforms (intent: 1.3). The audience—technical/practitioner Agile teams—somewhat matches the audience for Azure Boards, but the lack of tooling focus diminishes the alignment (2.8). The content remains focused, avoiding off-topic discussions, but since it's not about Azure Boards, the signal is low (2.6). There were no outdated references or negative tone, so no penalties were applied. Overall, this content very loosely relates to Azure Boards and only at a tertiary level because it addresses high-level Agile practices without any reference to project management tools.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "Engineering Practices",
    "category": "Value Delivery",
    "calculated_at": "2025-05-06T11:35:35",
    "ai_confidence": 85.7,
    "ai_mentions": 7.9,
    "ai_alignment": 8.6,
    "ai_depth": 8.2,
    "ai_intent": 8.3,
    "ai_audience": 7.7,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 86.0,
    "reasoning": "Direct Mentions (7.9): The content directly references concepts crucial to value delivery (e.g., 'delivery of high-quality software', 'flow of value to customers', CI/CD), though it does not use the exact phrase 'Value Delivery' frequently. The language often situates the discussed practices within the context of delivering value but mainly via explanations rather than repeated explicit naming. \nConceptual Alignment (8.6): The entire piece strongly aligns with value delivery by describing how engineering practices—clean code, automation, test-first development—support continuous delivery, business agility, and customer satisfaction, consistent with the definition’s focus on methodologies for delivering value within Agile/DevOps. \nDepth (8.2): The discussion moves beyond surface-level mentions, addressing the impact of these practices on organizational agility, technical excellence, minimizing technical debt, and cross-functional collaboration. It also references enabling CI/CD pipelines and iterative improvement, hitting multiple key subtopics. However, it does not delve into value stream mapping or evidence-based management in detail, drawing the depth just below an expert treatise. \nIntent (8.3): The content is clearly intended to inform and support Agile practitioners regarding the 'how' and 'why' of engineering practices in delivering value. There is no tangential discussion; the focus remains on techniques’ contribution to value. \nAudience (7.7): The content appears targeted to practitioners (engineers, team leads, Agile coaches) in technical and business/agility roles. While not deeply technical, the examples and framing speak to the practitioner/leader audience likely seeking guidance on implementing such practices. \nSignal-to-Noise Ratio (7.9): The text is focused, avoids filler, and consistently references relevant concepts. There is minimal, if any, off-topic content. Only a slight deduction because a small portion restates baseline Agile ideology without direct value delivery linkage. \nNo penalties: The content is current, supportive, and does not contradict category framing. \nLevel: Primary—Explanation is highly relevant to the value delivery category, discussing both enabling technical practices and their direct connection to customer value.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the value delivery category. It clearly explains how engineering practices like clean code and automation drive continuous delivery and customer satisfaction, aligning with Agile and DevOps principles. The discussion is focused, relevant, and aimed at practitioners, offering practical insights into how these methods enhance value delivery, even if some advanced topics are only briefly touched upon."
  },
  "Revenue per Employee": {
    "resourceId": "Engineering Practices",
    "category": "Revenue per Employee",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 12.791,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.4,
    "ai_intent": 1.0,
    "ai_audience": 4.5,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "Direct Mentions (0.2): There are no explicit mentions or references to Revenue per Employee, nor to related financial observability metrics. The content is strictly about engineering practices in Agile.\nConceptual Alignment (1.1): The core focus is on technical practices, not on financial metrics or workforce efficiency as measured by Revenue per Employee. While there is some alignment in mentioning 'organisational agility' and 'business objectives', these are at a high level and not data- or metric-driven.\nDepth of Discussion (1.4): The discussion is thorough regarding engineering methodologies but does not go beyond surface-level or indirect references to organisational effectiveness. There is no financial metric analysis or empirical data mentioned or implied.\nIntent / Purpose Fit (1.0): The intent is to discuss best practices in software engineering, not to inspect, compare, or evaluate organisational effectiveness via Revenue per Employee or similar signals.\nAudience Alignment (4.5): The primary audience is practitioners and possibly engineering leadership, which is tangentially relevant to an audience interested in workforce efficiency, but it is not aimed at financial or performance measurement stakeholders.\nSignal-to-Noise Ratio (2.1): The content is focused and on-topic for engineering practices but not for Revenue per Employee. Nearly all signal relates to technical excellence, with little to no content on financial observability metrics.\nNo penalties are applied as the content is not outdated or oppositional to the Revenue per Employee framing, just misaligned in focus. The low overall confidence (12.791) accurately reflects the very weak fit. Level is classified as 'Tertiary' since the connection to the category is distant and indirect at best.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "resourceId": "Engineering Practices",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 20.73,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.4,
    "ai_intent": 2.1,
    "ai_audience": 6.7,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses exclusively on foundational Agile engineering techniques such as clean code, automation, and test-first development. It aims to explain the value of these practices in enhancing software quality, adaptability, and team performance. \n\nHowever, there are almost no explicit or implicit mentions of Agile Planning Tools, nor is there any discussion of tools for backlog management, sprint planning, or release planning. The description does not reference tools like Jira, Trello, or planning features, nor does it discuss planning techniques, metrics, or the integration of planning tools into Agile frameworks. \n\nThe content's intent and audience (Agile practitioners and teams) partially overlap with the likely readers of material about Agile Planning Tools, but the focus is firmly on software engineering quality practices—NOT on planning tools or processes. While the audience alignment and signal-to-noise are relatively high (as the content is focused and relevant to Agile practitioners), all other dimensions are low due to lack of topical fit. No penalties were necessary as the content is neither outdated nor off-tone. This yields a low overall confidence rating (20.73), and 'Tertiary' level, indicating minimal but not completely absent relevance to the 'Agile Planning Tools' category.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "resourceId": "Engineering Practices",
    "category": "Backlog Refinement",
    "calculated_at": "2025-05-06T11:35:45",
    "ai_confidence": 13.954,
    "ai_mentions": 0.4,
    "ai_alignment": 2.1,
    "ai_depth": 1.9,
    "ai_intent": 2.7,
    "ai_audience": 3.3,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content, 'Engineering Practices,' focuses exclusively on technical excellence in Agile development, emphasizing clean code, automation, and test-first development. There are no direct mentions or even implied references to backlog refinement, prioritization, or any of the listed key topics for the category. The conceptual alignment is very low, as backlog refinement is neither discussed explicitly nor thematically. The depth of discussion is entirely about engineering best practices (such as CI/CD, minimising technical debt, rapid response to change), without any exploration of processes to clarify, prioritize, or ready backlog items. The intent is to inform Agile teams (especially technical practitioners) about the foundational engineering pillars required for Agile success—not about backlog refinement or collaborative backlog discussions. The audience slightly overlaps (Agile practitioners), but the content is not tailored to those seeking specific backlog refinement guidance. The signal-to-noise ratio is low for the refinement category, as nearly all content addresses other Agile facets. No penalties are applied, as the content is neither outdated nor negative. In conclusion, 'Engineering Practices' sits at a distant tertiary relationship to backlog refinement, only relating via Agile as a broader context. The calculated confidence score (13.954) is proportional to the content’s lack of direct or indirect relevance.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "resourceId": "Engineering Practices",
    "category": "Company as a Product",
    "calculated_at": "2025-05-06T11:35:49",
    "ai_confidence": 48.277,
    "ai_mentions": 0.2,
    "ai_alignment": 4.1,
    "ai_depth": 4.3,
    "ai_intent": 4.5,
    "ai_audience": 6.2,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content focuses on software engineering best practices—clean code, automation, test-first development—in the context of Agile. While there are some adjacent themes, such as cross-functional collaboration and alignment with business objectives, these are not framed specifically in terms of the Company as a Product (CaaP) approach. There is no explicit mention or direct discussion of CaaP (hence the very low direct mentions score). Conceptually, the article aligns modestly: Engineering Practices can contribute to organisational agility and continuous improvement, which are elements of CaaP, but the main focus here is at the team/process level, not the holistic organisational level as per CaaP. The depth of discussion is limited to technical practices and their benefits—not the reimagining of the organisation as a product. The intent is to describe good engineering habits for Agile teams, not to advocate for or explain CaaP. The potential audience (technical practitioners, Agile teams) overlaps with the broader CaaP audience only partially, justifying a mid-range audience score. The content stays focused and clear with minimal off-topic material, resulting in a reasonable signal score. Overall, this is a tertiary fit: it supplies foundational practices that might support a CaaP initiative, but falls short of targeting or exemplifying the CaaP domain.",
    "level": "Tertiary"
  },
  "Definition of Done": {
    "resourceId": "Engineering Practices",
    "category": "Definition of Done",
    "calculated_at": "2025-05-06T11:35:35",
    "ai_confidence": 28.3,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.7,
    "ai_intent": 2.3,
    "ai_audience": 8.1,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content 'Engineering Practices' discusses concepts—such as clean code, automation, test-first development, CI/CD, and technical excellence—that are important in Agile contexts but does not explicitly mention or define the 'Definition of Done' (DoD). \n\n1. Direct Mentions (0.7): The phrase 'Definition of Done' is not mentioned at all. There are no explicit references, only some indirect overlap in thematic areas (quality, technical criteria). \n\n2. Conceptual Alignment (2.9): Some concepts (like high-quality code, reduced technical debt, and embedded quality practices) are loosely related to typical DoD criteria, but the overarching focus is on engineering practices as a standalone foundation, not on how these roll into team agreements on completeness (DoD).\n\n3. Depth of Discussion (2.7): There is some depth regarding the dimensions of engineering discipline, but nothing about DoD’s specific application, content, evolution, or formal use in Agile teams. The coverage fails to tie these practices to the process of defining 'done.'\n\n4. Intent / Purpose Fit (2.3): The primary intent is to advocate for (and explain) engineering excellence as a base for Agile success, not to inform, define, or specify DoD or its application. Any relevance to DoD is indirect or assumed.\n\n5. Audience Alignment (8.1): The target audience (technical Agile practitioners, software engineers) matches that of DoD discussions, although the thematic focus differs.\n\n6. Signal-to-Noise Ratio (8.4): The content is focused and on-topic regarding Agile practices; there is little filler or digression, but almost all of it is about its own specific topic rather than DoD.\n\nNo penalties were applied, as there is no outdated information or tone contradicting the DoD framing.\n\nLevel: 'Tertiary', because the relationship is indirect, with faint conceptual overlap but very little topical or practical connection to the Definition of Done.\n\nOverall, the confidence score appropriately reflects the poor direct fit (conceptual overlap, but the content fails to address DoD itself in any meaningful way), keeping the score quite low.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "resourceId": "Engineering Practices",
    "category": "Team Motivation",
    "calculated_at": "2025-05-06T11:35:35",
    "ai_confidence": 54.41,
    "ai_mentions": 2.1,
    "ai_alignment": 6.9,
    "ai_depth": 6.7,
    "ai_intent": 5.9,
    "ai_audience": 7.2,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content 'Engineering Practices' primarily discusses the value of technical practices such as clean code, automation, and test-first development within Agile teams. While the main focus is on technical excellence and delivery, the final paragraph does touch on motivational aspects, stating that these practices 'cultivate an environment where learning and experimentation thrive, ultimately leading to higher levels of team motivation and performance.' This connection is indirect rather than central. \n\n(1) Mentions: Direct references to 'team motivation' are minimal, appearing only incidentally rather than as a sustained topic—hence a low score (2.1). \n\n(2) Alignment: Some conceptual alignment exists, especially where engineering practices are linked to improved collaboration and team performance, but motivation is not the main thrust, leading to a moderate score (6.9). \n\n(3) Depth: The content provides depth about engineering practices but only lightly explores how these tie into motivation, so this is reflected in a middle-high score (6.7). \n\n(4) Intent: The main purpose is to inform about engineering practices, not team motivation specifically; the latter is a welcome side effect, not the focus, resulting in a below-mid score (5.9).\n\n(5) Audience: The audience appears to be Agile practitioners, which overlaps with those interested in team motivation, so this score is higher (7.2). \n\n(6) Signal: Most of the discussion is relevant to Agile teamwork and culture (not just dry technicalities), so the signal is mostly strong (7.5).\n\nNo penalties are applied, as the content is current and has an appreciative, not critical, tone. 'Secondary' level means team motivation is a significant but clearly not primary element in the piece.",
    "level": "Tertiary"
  },
  "Personal": {
    "resourceId": "Engineering Practices",
    "category": "Personal",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 20.05,
    "ai_mentions": 0.4,
    "ai_alignment": 2.9,
    "ai_depth": 2.6,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content focuses exclusively on general principles and technical practices foundational to Agile—such as clean code, automation, and test-first development—but does so in a descriptive, impersonal manner. \n\n1. Mentions (0.4): There are no direct references to the 'Personal' category or related personal themes, anecdotes, or individual perspectives. The focus is on practices rather than people or personal insights. \n2. Alignment (2.9): The content aligns only weakly with the 'Personal' classification, as it does not share personal experiences or individual reflections; instead, it broadly discusses technical best practices. \n3. Depth (2.6): The discussion provides moderate depth regarding what engineering practices entail but does not explore them from a subjective or personal angle, which is the requirement for this category.\n4. Intent (2.1): The main intent is informational and technical, aiming to outline engineering practices rather than support or inform a personal journey or share subjective experiences.\n5. Audience (7.2): The detail and tone suggest it is targeted at technical practitioners, which slightly overlaps with the 'Personal' audience, but it does not directly cater to those seeking personal stories or reflections.\n6. Signal (6.7): Most content is relevant to engineering practices in Agile (strong signal for technical themes), but almost none is focused on the personal dimension. No off-topic filler, but the core focus is technical, not personal.\n\nNo penalties were applied as the tone, content, and references are not dated, satirical, or contradictory to the category. However, because it is impersonal and technical in focus, it is rated as 'Tertiary' for the Personal category, and the final confidence score is low, reflecting the absence of personal content in alignment with the definition.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "Engineering Practices",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-06T11:35:36",
    "ai_confidence": 23.8,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.8,
    "ai_intent": 2.5,
    "ai_audience": 7.5,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses primarily on broad engineering practices such as clean code, automation, and test-first development within Agile environments. While it references Continuous Integration and Continuous Delivery (CI/CD), which often correlate with modern source control practices, the core topics of version control systems, branching strategies, code reviews, merging, and collaboration workflows are absent. \n\nScore justification:\n- Mentions (0.7): Direct mention of modern source control or any related system, terminology, or workflow is almost nonexistent, except the indirect reference to CI/CD.\n- Alignment (2.9): Some themes (e.g., automation, continuous delivery) conceptually overlap with the spirit of modern source control, but the bulk of the content concerns generic engineering discipline.\n- Depth (2.8): Discussions of CI/CD and automation are brief, with only tangential relevance to version control best practices; there is no exploration of source control concepts.\n- Intent (2.5): The main intent is to discuss foundational Agile engineering habits, not version control, making relevance to the category limited.\n- Audience (7.5): The audience—software engineers focused on Agile and technical improvement—overlaps with the likely audience for discussions of modern source control.\n- Signal (4.9): The content is focused and has little filler, but most of its substance is off-topic relative to modern source control.\n\nNo penalties are applied since there is no evidence of outdated practices or a contradictory tone. Overall, this piece provides at best a tertiary, highly tangential connection with 'Modern Source Control.'",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "Engineering Practices",
    "category": "Working Software",
    "calculated_at": "2025-05-06T11:35:44",
    "ai_confidence": 56.272,
    "ai_mentions": 1.8,
    "ai_alignment": 7.3,
    "ai_depth": 6.5,
    "ai_intent": 5.7,
    "ai_audience": 8.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content primarily focuses on 'Engineering Practices' such as clean code principles, automation, and test-first development within Agile. While these practices are critical enablers for delivering working software, the content does not directly or frequently mention 'working software' as an explicit output artifact, nor does it anchor the discussion around software increments or their delivery to customers—a key requirement of the classification. Direct mentions are minimal, as 'working software' is not named; instead, the focus is on the underlying processes and benefits that support high-quality outputs. Conceptual alignment is moderately strong, given the practices described directly impact the creation and sustainability of working software, but the main theme is about the practices themselves, not the artifact. Depth is present in describing how these practices support reliability, maintainability, adaptability, and business alignment, but not deeply about the lifecycle or measurement of working software itself. The content’s intent is to highlight foundational practices rather than to discuss the nature, tracking, or business value of working software directly, which results in a middling intent score. The audience (practitioners, engineering teams) is well aligned with those interested in working software, and the majority of content is focused, with little filler. No outdated or contradictory elements were found, so no penalties were applied. This content should be considered 'Secondary' level: it is closely related and supportive but not the primary category focus.",
    "level": "Tertiary"
  },
  "Organisational Culture": {
    "resourceId": "Engineering Practices",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-06T11:35:47",
    "ai_confidence": 56.32,
    "ai_mentions": 3.7,
    "ai_alignment": 6.4,
    "ai_depth": 6.7,
    "ai_intent": 7.1,
    "ai_audience": 6.5,
    "ai_signal": 5.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content primarily discusses engineering practices such as clean code, automation, and test-first development, positioning them as foundational for Agile environments. While it briefly references the ability of these practices to 'foster a culture of technical excellence and continuous improvement' and mentions team motivation and collaboration, the main focus is technical. \n\nMentions (3.7): The phrase 'culture' appears once and is coupled with 'technical excellence'; there is some cultural context but no direct, repeated references to organisational culture. \n\nAlignment (6.4): The content aligns partially, as it occasionally ties technical practices to cultural outcomes (continuous improvement, learning, team motivation). However, the primary lens is not culture itself.\n\nDepth (6.7): There is some detail on how engineering practices contribute to aspects of an agile culture (motivation, collaboration, learning), but it remains surface-level—it does not delve into cultural transformation, leadership's role, or methods for assessing and evolving culture.\n\nIntent (7.1): The intent is to advocate for engineering practices as a basis for agility and indirectly touches on cultural impact, such as fostering learning and continuous improvement.\n\nAudience (6.5): The audience skews towards practitioners (developers, technical leads), though the mention of business objectives and organisational agility suggests some secondary relevance to leaders or strategists caring about culture.\n\nSignal (5.6): The discussion is mostly on-topic for Agile and technical excellence, but cultural relevance is secondary and not sustained throughout. Some of the discussion on motivation and learning adds signal for culture, but most of the content is technical.\n\nNo penalties were applied, as the material is current and takes an informative, positive tone toward Agile values. \n\nThis is rated as 'Secondary' relevance—engineering practices do contribute to culture, and the text acknowledges this, but deeper exploration of organisational culture concepts is limited.",
    "level": "Tertiary"
  },
  "Kanban": {
    "resourceId": "Engineering Practices",
    "category": "Kanban",
    "calculated_at": "2025-05-06T11:35:52",
    "ai_confidence": 12.45,
    "ai_mentions": 0.1,
    "ai_alignment": 0.8,
    "ai_depth": 1.0,
    "ai_intent": 0.7,
    "ai_audience": 3.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content is an overview of engineering best practices within Agile—clean code, automation, test-first development, CI/CD, and technical agility. There is no mention of Kanban, nor any conceptual exploration of Kanban principles. The main ideas are technical excellence and Agile development, which are tangential to Kanban but not substantively aligned with it. Kanban practices such as visualization, WIP limits, or flow management are absent. The audience might overlap somewhat (Agile practitioners, development teams), and a minimal relevance is possible due to shared Agile context, but the discussion does not explore, refer to, or intend to inform about Kanban itself. The signal-to-noise ratio is low for Kanban classification, as nearly all content is focused on general engineering and Agile practices, not Kanban-specific approaches. Overall, only a faint tertiary connection to Kanban as a tool for supporting continuous improvement exists, but all essential dimensions for Kanban classification (direct mention, alignment, depth, intent) are nearly absent.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "Engineering Practices",
    "category": "Lead Time",
    "calculated_at": "2025-05-06T11:35:49",
    "ai_confidence": 44.15,
    "ai_mentions": 1.8,
    "ai_alignment": 4.4,
    "ai_depth": 4.6,
    "ai_intent": 4.2,
    "ai_audience": 8.0,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "Direct Mentions: The content refers to 'lead times' only once, and even then as part of a broader set of benefits from strong engineering practices and CI/CD. There is no explicit focus on Lead Time as a concept or metric. \n\nConceptual Alignment: The alignment with the lead time category is indirect. Engineering practices may reduce Lead Time, but the text does not explore Lead Time itself as an observability metric, its measurement, or its direct business impact. The main focus remains on Agile engineering practices and their benefits at a high level.\n\nDepth of Discussion: There is no substantive discussion of Lead Time. The only mention is in a list of benefits from CI/CD, and no further explanation, measurement, or optimization strategies related to Lead Time are discussed. Instead, depth is provided about how engineering practices support code quality, adaptability, and flow of value.\n\nIntent / Purpose Fit: The text aims to inform readers about the foundations of good software delivery and engineering culture, not about Lead Time as a primary topic. Any tie-in to Lead Time is clearly secondary and not the article’s purpose.\n\nAudience Alignment: The target audience consists of Agile practitioners, engineers, and possibly technical leaders – generally aligned with the kind of readers interested in Lead Time. However, the topic focus is broader than just Lead Time.\n\nSignal-to-Noise Ratio: The content is highly focused on its topic (engineering practices), has little off-topic filler, but Lead Time is a small, peripheral piece of the whole.\n\nPenalty: No penalties applied, as the content does not reference obsolete practices nor contradict the Lead Time framing.\n\nLevel: Tertiary — Lead Time is tangentially mentioned; the central topic is engineering practices, so it’s far removed from being the primary focus.",
    "level": "Tertiary"
  },
  "Troubleshooting": {
    "resourceId": "Engineering Practices",
    "category": "Troubleshooting",
    "calculated_at": "2025-05-06T11:35:36",
    "ai_confidence": 27.55,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 3.1,
    "ai_audience": 8.2,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content focuses on general engineering practices in Agile (clean code, automation, test-first development), emphasizing code quality, maintainability, and support for CI/CD pipelines. \n\n- Direct Mentions (0.7): 'Troubleshooting' is not directly referenced by name or synonyms. All mentions are highly implicit. \n- Conceptual Alignment (2.6): While practices like test-first development and clean code support defect prevention and can facilitate easier troubleshooting, the main ideas are about practices for quality—troubleshooting is tangential, not central. \n- Depth of Discussion (2.9): There is no detailed exploration of troubleshooting techniques, tools, resolution methodologies, or diagnostic strategies. The discussion instead reflects on the value of the practices for general excellence and adaptability, not specific problem-identification or resolution workflows.\n- Intent/Purpose Fit (3.1): The content is intended to promote the value of sound engineering practices in an Agile context, not to provide troubleshooting guidance.\n- Audience Alignment (8.2): The probable audience (engineers, Agile teams, technical practitioners) overlaps strongly with those who would benefit from troubleshooting guidance, though that's not the focal point here. \n- Signal-to-Noise Ratio (5.9): Most of the content is relevant to technical excellence, but little is focused specifically on troubleshooting or issue resolution workflows. There is general value for a technical audience, but troubleshooting is peripheral, not primary.\n\nThere are no penalties applied, as the content is contemporary and maintains a positive and informative tone. Overall, the content has a tertiary alignment: troubleshooting is an incidental benefit of practicing sound engineering habits, but it is not the main subject.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "resourceId": "Engineering Practices",
    "category": "Enterprise Agility",
    "calculated_at": "2025-05-06T11:35:55",
    "ai_confidence": 55.31,
    "ai_mentions": 2.8,
    "ai_alignment": 6.6,
    "ai_depth": 5.9,
    "ai_intent": 6.5,
    "ai_audience": 6.8,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content focuses on engineering practices such as clean code, automation, and test-first development — core to Agile at the technical/team level. There are conceptual references to 'organisational agility,' suggesting some recognition of enterprise-wide impact, and mentions of aligning technical efforts with business objectives. However, the primary emphasis is on team-level practices and their contribution to agility more generally, not specifically the structures, frameworks, or cultural shifts at the heart of Enterprise Agility. Direct mentions of 'organisational agility' and 'cross-functional teams' improve alignment but do not substantively discuss scaling agile, culture change, leadership, or transformation at the enterprise level. There is no exploration of frameworks for scaling agility (e.g., SAFe, LeSS), organisational change management, KPIs for enterprise agility, or leadership roles. The intended audience appears to be technical change agents and agile practitioners, with some allusion to broader value, but not targeted at enterprise leaders or strategists. The content remains highly on-topic for Agile engineering but secondary (even tertiary) for Enterprise Agility proper — thus, the confidence score is moderate and in line with content that is relevant yet not a clear or direct fit.",
    "level": "Tertiary"
  },
  "Agnostic Agile": {
    "resourceId": "Engineering Practices",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-06T11:35:36",
    "ai_confidence": 30.676,
    "ai_mentions": 0.7,
    "ai_alignment": 3.9,
    "ai_depth": 4.3,
    "ai_intent": 4.1,
    "ai_audience": 4.7,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content focuses on general engineering practices within Agile, highlighting clean code, automation, and test-first development. While these are relevant to agility in general—and could be elements within an Agnostic Agile approach—the content makes no reference to Agnostic Agile itself, nor does it discuss principles, ethics, critical thinking, or context-driven choices, nor does it promote adaptation across frameworks. The conceptual alignment is weak because, although fostering technical excellence is important in any agile context, the text does not explicitly or implicitly position these practices within the Agnostic Agile philosophy. Depth and intent are modest: the discussion covers why engineering practices are valuable for agility, but not in a way that addresses Agnostic Agile's emphasis on tailoring, context, or not adhering strictly to one methodology. Audience is slightly stronger, as practitioners of Agnostic Agile would care about quality engineering, but the tone and content would equally fit a broad Agile audience. There is some signal—but much of it is generic to Agile or software engineering excellence without tying back to Agnostic Agile's distinct stance. No penalties apply, as the content is not outdated or contradictory, but at best this content would be tangentially relevant (tertiary) in a discussion of Agnostic Agile, perhaps as an example of good practices that could be adopted in many frameworks, but without specific context or philosophical linkage.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "resourceId": "Engineering Practices",
    "category": "Sensemaking",
    "calculated_at": "2025-05-06T11:35:41",
    "ai_confidence": 23.26,
    "ai_mentions": 0.7,
    "ai_alignment": 2.1,
    "ai_depth": 2.15,
    "ai_intent": 2.05,
    "ai_audience": 7.9,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content titled 'Engineering Practices' focuses on foundational software development techniques—clean code, automation, test-first development—in the Agile context. \n\n1. **Direct Mentions (0.70):** There are no direct mentions of 'sensemaking', sensemaking frameworks, or related terminology. The phrasing focuses on engineering and Agile—not complexity interpretation or decision-making processes.\n2. **Conceptual Alignment (2.10):** While the text discusses adaptability and responding to change, its main thrust is technical excellence and delivery, not the interpretation of complex environments or collective meaning-making. References to responding to changing requirements are inherently Agile but do not cross into sensemaking's domain of understanding complexity and making decisions under uncertainty.\n3. **Depth of Discussion (2.15):** The discussion is thorough on engineering practices' technical benefits but lacks treatment of sensemaking principles, frameworks (e.g., Cynefin), or the role of these practices in organisational interpretation of complexity.\n4. **Intent / Purpose Fit (2.05):** The content's purpose is to advocate for engineering best practices within Agile, not to inform, support, or derive action from sensemaking in complex or uncertain contexts.\n5. **Audience Alignment (7.90):** The audience is aligned with Agile practitioners and could overlap with those interested in organisational learning, but not specifically with strategists or decision-makers looking for sensemaking.\n6. **Signal-to-Noise Ratio (7.80):** The content is tightly focused on Agile engineering practices with few tangents; however, almost none of the signal relates to sensemaking.\n\nNo penalties were applied, as there is no outdated information or contradictory tone. The score, strongly weighted by alignment, depth, and intent, is low, reflecting that sensemaking is not a primary, secondary, or even meaningful tertiary focus. The classification level is 'Tertiary'—if at all, sensemaking is only tangentially illuminated by concepts like adaptability, but not explored.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "resourceId": "Engineering Practices",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-05-06T11:35:39",
    "ai_confidence": 12.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 1.6,
    "ai_intent": 2.0,
    "ai_audience": 3.0,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content, 'Engineering Practices', provides a thoughtful overview of foundational software engineering and Agile techniques such as clean code, automation, test-first development, and Continuous Integration/Continuous Delivery (CI/CD). However, there is no direct mention or substantial exploration of Artificial Intelligence. \n\n- Mentions (0.2): The term 'Artificial Intelligence' is not referenced at all, neither explicitly nor implicitly. The closest overlap is the mention of automation, but not from an AI or machine learning perspective.\n- Alignment (1.5): The general theme of quality, automation, and agility aligns loosely with the outcomes enabled by AI, but the alignment is extremely weak due to lack of direct consideration of AI in Agile, DevOps, or software dev contexts.\n- Depth (1.6): The content goes into moderate depth about engineering practices in Agile but not in relation to AI or its application; thus, depth on the relevant category is minimal.\n- Intent (2.0): The intent is to inform about engineering best practices in Agile, with no focus on AI. At best, it is tangentially relevant because topics like automation may sometimes overlap with AI-driven solutions, but there is no hint of that linkage here.\n- Audience (3.0): The intended audience (Agile practitioners, software engineers, DevOps) overlaps with those interested in AI applications within these domains, but since AI is not discussed, this is weak alignment.\n- Signal (2.5): The signal-to-noise ratio is moderate; most information is relevant to Agile engineering but not to AI, making most of the content off-topic for the specified category.\n\nNo penalties were applied: the content is current and is not satirical or critical of the category in question. The level is 'Tertiary' because any connection to 'Artificial Intelligence' is at best indirect, with no meaningful substance for classification under the intended category.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "Engineering Practices",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-06T11:35:46",
    "ai_confidence": 1.6,
    "ai_mentions": 0.0,
    "ai_alignment": 0.2,
    "ai_depth": 0.1,
    "ai_intent": 0.5,
    "ai_audience": 0.5,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content does not make any direct or indirect reference to Liberating Structures or associated facilitation techniques. There are zero explicit mentions (mentions=0.0). The conceptual alignment is extremely low (alignment=0.2) because the main ideas focus exclusively on engineering practices within Agile—such as clean code, automation, test-first development, and CI/CD pipelines—none of which are related to Liberating Structures, which are facilitation techniques for enhancing collaboration and engagement. The depth of discussion (depth=0.1) regarding Liberating Structures is absent; all discussion is limited to engineering and development practices and does not touch on team facilitation, engagement strategies, or lightweight interaction methods. Intent (intent=0.5) is mainly about advocating technical best practices—not supporting, informing, or applying Liberating Structures. Audience alignment (audience=0.5) is modest, since while both topics may concern Agile practitioners, this piece is targeting software engineers and not facilitators, Scrum Masters, or Agile coaches seeking new engagement tools. The signal-to-noise ratio (signal=0.2) in regard to the Liberating Structures category is extremely poor, as the entirety of the content is off-topic. No penalties were warranted, since the content is not outdated or critical of the category; it simply does not overlap. Overall, the content is at best 'Tertiary'—it shares superficial context (Agile, teamwork) but has virtually no relevance to Liberating Structures. The final confidence score correctly reflects a strong exclusion from the 'Liberating Structures' category.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "Engineering Practices",
    "category": "Increment",
    "calculated_at": "2025-05-06T11:35:53",
    "ai_confidence": 36.082,
    "ai_mentions": 1.4,
    "ai_alignment": 4.9,
    "ai_depth": 4.8,
    "ai_intent": 4.8,
    "ai_audience": 8.1,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content primarily focuses on foundational Agile engineering practices such as clean code, automation, test-first development, and the cultural/technical benefits these bring to teams. \n\n1. Mentions (1.400): 'Increment' is never directly mentioned. The content discusses Agile and working software, but not the Scrum Increment directly or by explicit synonym.\n2. Alignment (4.900): While there is broad conceptual alignment in that good engineering practices enable the delivery of high-quality, valuable software (a prerequisite for useful Increments), the piece never centers the concept of delivering Increments or delineates their specific role in Scrum.\n3. Depth (4.800): Discussion is detailed regarding engineering culture, technical excellence, CI/CD, and value delivery, but does not deeply explore how these relate to creating or maximizing the value of particular Scrum Increments.\n4. Intent (4.800): The purpose is educational and supports Agile teams in improving quality—adjacent to, but not directly aligned with, the focus on Increment as a Scrum artifact. Its intent is to foster technical excellence, not to explain or analyze the Increment itself.\n5. Audience (8.100): The target audience (Agile practitioners, developers, tech leads) substantially overlaps with those interested in Increments in Scrum, hence the high alignment here.\n6. Signal (7.800): All discussion is on relevant Agile topics (no filler/off-topic material), but its direct relevance to Increment is lower than to technical practice.\n\nNo penalties are applied: The content does not reference outdated practices, nor does it undermine or satirize the category. \n\nIn summary, 'Engineering Practices' is supportive of what enables strong Increments, but the Increment concept itself is absent as a focal point—making this a tertiary fit (referenced only through general context and indirect value delivery framing, not through explicit, aligned discussion). Final confidence score (36.082) correctly reflects distant but non-zero relevance.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "resourceId": "Engineering Practices",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-06T11:35:41",
    "ai_confidence": 11.164,
    "ai_mentions": 0.6,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.3,
    "ai_audience": 2.0,
    "ai_signal": 1.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses solely on Agile engineering practices such as clean code, automation, and test-first development. While these are critical for Agile success, there are no explicit or implicit references to customer feedback loops, mechanisms for gathering or utilizing customer insights, or feedback-driven integration into product development. The alignment is extremely low; the main discussion centers on technical excellence and workflow improvements, with only a tangential note about 'meeting customer expectations'—not about establishing a feedback loop. There is zero mention of feedback mechanisms, analysis, or integration. The audience could overlap with those interested in feedback loops (technical Agile teams), so a slightly higher audience relevance is granted, as some practitioners may work with both engineering practices and customer feedback. Depth is minimal regarding the classification: discussions are strictly about delivery quality, not feedback processes. Signal is low but not zero, as the piece is focused, just not on the relevant topic. Hence, confidence is extremely low, with tertiary relevance and no grounds for penalty deductions.",
    "level": "Ignored"
  },
  "Market Share": {
    "resourceId": "Engineering Practices",
    "category": "Market Share",
    "calculated_at": "2025-05-06T11:35:39",
    "ai_confidence": 7.953,
    "ai_mentions": 0.2,
    "ai_alignment": 1.4,
    "ai_depth": 1.2,
    "ai_intent": 1.1,
    "ai_audience": 2.1,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses squarely on software engineering practices—clean code, automation, test-first development, and their roles in Agile environments. \n\n- **Direct Mentions (0.2):** There are no explicit references to 'market share', competitive positioning, or similar terms. The only remotely related mention is a single generic phrase 'business objectives', which is not market share specific.\n\n- **Conceptual Alignment (1.4):** The main themes are technical excellence, agile development, and continuous improvement—not strategies or methods to increase market share. There is an indirect possible benefit (e.g., better products could help competitive standing), but this is not discussed.\n\n- **Depth of Discussion (1.2):** There is no in-depth exploration or even a surface-level mention of market share strategy, metrics, or case studies related to gaining market presence. The entire discussion remains on technical practices.\n\n- **Intent / Purpose Fit (1.1):** The intention is educational/informative regarding engineering discipline, not market share expansion. Any relevance is highly tangential and not deliberate.\n\n- **Audience Alignment (2.1):** The primary audience is likely software engineering teams and Agile practitioners—not executives, marketers, or strategists focused on market share. Some overlap exists in organizations where these audiences collaborate, justifying a slightly higher score here.\n\n- **Signal-to-Noise Ratio (1.6):** The content is well-focused but entirely on engineering. There is essentially no coverage of the category, so the signal (relevance to market share) is extremely low, with 'noise' in this context being material off-topic for the classification.\n\n- **Level:** The connection to 'Market Share' is tertiary at best—a distant, theoretical link (better engineering can enhance products, which may help capture market share), but not discussed.\n\n- **Penalties:** No penalties applied as the content is current and the tone is neutral and factual.\n\n- **Final Score Calculation:**\n((0.2*1.5) + (1.4*2.5) + (1.2*2.5) + (1.1*1.5) + (2.1*1.0) + (1.6*1.0)) * 10 = 7.953",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "Engineering Practices",
    "category": "System Configuration",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 23.433,
    "ai_mentions": 0.9,
    "ai_alignment": 2.7,
    "ai_depth": 2.8,
    "ai_intent": 2.5,
    "ai_audience": 7.0,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses on general 'Engineering Practices' within Agile development, emphasizing clean code, automation, and test-first development. While 'automation' and CI/CD pipelines are mentioned, they are discussed in the context of improving Agile delivery and software quality, not specifically system configuration. Direct mentions of system configuration or related tools and methodologies are absent (score 0.9). Conceptual alignment is minimal (2.7), as the main ideas are about code quality and Agile process improvement rather than configuring systems. The depth is modest (2.8) since topics like automation and CI/CD are referenced but not explored as system configuration constructs; the rest is broader, emphasizing software team culture. The intent is tangential, aiming to inform about Agile engineering practices, not system configuration (2.5). The audience may include some technical staff but is broader, targeting engineers familiar with Agile (7.0). Signal-to-noise is limited (3.1) as most content is not relevant to system configuration. No penalties are applied, as the content is not outdated or satirical. Overall, the content provides only tertiary relevance to system configuration, mostly by surface mention of automation tools, not by focus or depth.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "resourceId": "Engineering Practices",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-05-06T11:35:37",
    "ai_confidence": 22.99,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.8,
    "ai_intent": 3.0,
    "ai_audience": 7.1,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content predominantly explains the foundational engineering practices (clean code, automation, test-first development) critical to Agile environments, but makes no direct mention of Hypothesis Driven Development or its specific core concepts. The description falls short of explicitly referencing hypothesis formulation, experimentation, or validated learning as defined by the classification. While it alludes to 'learning and experimentation,' these are presented in a very general sense and not as structured, empirical, or hypothesis-led activities. Discussion of CI/CD and Agile-related practices could support environments conducive to hypothesis-driven approaches, but this is only a secondary implication rather than a central theme. The content’s purpose is to promote best software engineering practices rather than to explore, explain, or advocate for Hypothesis Driven Development. Its audience (developers, engineers, technical teams) partially overlaps with the H.D.D. practitioner audience, justifying a moderately high audience alignment score. The signal-to-noise ratio is very good—almost all content is on-topic with respect to engineering practices, even if it's off-topic for hypothesis-driven development. In summary, this resource could provide incidental support for an H.D.D. initiative but does not directly address or deeply align with the category. No penalty deductions are warranted.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "resourceId": "Engineering Practices",
    "category": "Product Strategy",
    "calculated_at": "2025-05-06T11:35:40",
    "ai_confidence": 22.066,
    "ai_mentions": 0.905,
    "ai_alignment": 2.158,
    "ai_depth": 2.042,
    "ai_intent": 2.235,
    "ai_audience": 6.112,
    "ai_signal": 6.707,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content strongly focuses on technical practices foundational to Agile development such as clean code, automation, and test-first development. \n\nMentions: Direct references to 'product strategy' or any of its explicit key terms (roadmapping, vision formulation, strategic alignment) are entirely absent and the discussion remains firmly grounded in engineering rather than strategy (score: 0.905).\n\nAlignment: There is only marginal conceptual overlap: mentions of aligning technical efforts with business objectives and supporting organizational agility are related to product strategy in a very peripheral sense, but the content does not address core concepts like vision, roadmap, or market/customer centricity (score: 2.158).\n\nDepth: The discussion is detailed regarding technical practices, but not in ways that connect these practices to formulating or executing product strategy. The most relevant statement is about aligning technical efforts to business objectives, but this is not well developed (score: 2.042).\n\nIntent: The purpose is clearly to inform readers about engineering practices as the foundation of quality software in Agile environments, not to inform product strategists or those seeking to build a roadmap or market positioning (score: 2.235).\n\nAudience: The content targets technical and engineering audiences (practitioners, developers), and not the strategic or product leadership audience. There is little to no focus on managerial or visionary perspectives (score: 6.112).\n\nSignal-to-Noise: The piece is focused and relevant to its own theme (engineering practices), but that theme is only tangentially connected to product strategy (score: 6.707).\n\nNo penalties were applied since the content is not outdated and does not undermine or contradict the category; it simply does not fit it directly.\n\nOverall, the piece qualifies as 'Tertiary'—while high-quality, its fit with Product Strategy is very minimal, limited to peripheral references to aligning with business objectives and enabling agility.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "Engineering Practices",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-06T11:35:58",
    "ai_confidence": 63.33,
    "ai_mentions": 3.8,
    "ai_alignment": 6.3,
    "ai_depth": 6.1,
    "ai_intent": 5.6,
    "ai_audience": 7.2,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 63.0,
    "reasoning": "The content primarily discusses 'Engineering Practices' with a strong foundation in Agile methods, focusing on clean code, automation, and test-first development. There is a mention of supporting CI/CD pipelines and referencing Continuous Delivery in the third paragraph, where the role of engineering practices in streamlining deployment and reducing lead times is highlighted. \n\nHowever, 'Continuous Delivery' is not a central theme—while it's referenced and partially addressed through discussion of pipelines and deployment, most of the content centers on general software quality practices within Agile, not the principles, benefits, or specific processes of Continuous Delivery. \n\nDirect Mentions (3.8): 'Continuous Delivery' appears once in the context of 'CI/CD pipelines' but is not a recurring focus. \nConceptual Alignment (6.3): Practices such as automation and test-first development align with the foundations required for Continuous Delivery, but the broader Agile/engineering focus slightly dilutes the direct relevance. \nDepth (6.1): There is moderate depth around the enablers of Continuous Delivery (e.g., automation, technical excellence) but no deep dive into Continuous Delivery itself, its principles, or targeted case studies. \nIntent (5.6): The content’s primary purpose is to promote good engineering practices, only partially overlapping with Continuous Delivery. It's informative and supportive, but not specifically about Continuous Delivery. \nAudience (7.2): The target appears to be practitioners (such as developers and engineering teams) involved in Agile and continuous improvement—this overlaps well with the Continuous Delivery audience. \nSignal-to-Noise (8.1): While mainly focused, about 20% of the content directly references CI/CD or related concepts; otherwise, it’s broader. \nNo penalties apply because the content is current and respectful. The overall confidence remains in the mid-low 60s, which reflects some notable relevance, but not sufficient to recommend classification as a primary resource for 'Continuous Delivery'.",
    "level": "Secondary"
  },
  "Competence": {
    "resourceId": "Engineering Practices",
    "category": "Competence",
    "calculated_at": "2025-05-06T11:36:03",
    "ai_confidence": 76.53,
    "ai_mentions": 3.7,
    "ai_alignment": 8.4,
    "ai_depth": 7.7,
    "ai_intent": 8.1,
    "ai_audience": 8.8,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 77.0,
    "reasoning": "The content primarily discusses 'Engineering Practices,' focusing on clean code, automation, and test-first development—core technical aspects in Agile. Direct mentions of 'Competence' are absent; the term is never used, and explicit references to continuous skill improvement, mastery, or demonstrable capability are lacking. However, the conceptual alignment is strong: fostering a culture of technical excellence, continuous improvement, and embedding quality into workflow all align tightly with the essence of competence in Agile contexts. The discussion of CI/CD, adaptability, and sustained delivery further reinforce competence-related values.\n\nDepth is moderate-high: the piece details how engineering practices lead to quality, value flow, and organisational agility, but does not explicitly address strategies for building or assessing competence, nor does it distinguish between performative activity and true mastery. Intent is strongly relevant—it highlights the importance of sustained technical quality and learning, aligning with competence even though the primary aim is to discuss practices, not competence as such. The audience is likely practitioners, team leads, and those involved in technical execution within Agile or DevOps environments, matching the competence category well. The content is focused, with minimal off-topic discussion, though part of it leans into general Agile benefits rather than skill development per se, slightly lowering the signal score. No penalties apply; there are no outdated references or contrarian tones.\n\nOverall, while 'Engineering Practices' inherently imply high competence, the lack of explicit ties or direct strategies for skill development reserves this as a Secondary fit under the Competence category.",
    "level": "Secondary",
    "reasoning_summary": "This content aligns well with the Competence category by emphasising technical excellence, continuous improvement, and quality-focused engineering practices—key aspects of competence in Agile. However, it doesn’t directly address skill development or assessment, making its fit more indirect. The focus is on practices rather than explicit competence-building, so it’s best classified as a Secondary fit for this category."
  },
  "Scrum": {
    "resourceId": "Engineering Practices",
    "category": "Scrum",
    "calculated_at": "2025-05-06T11:35:46",
    "ai_confidence": 34.55,
    "ai_mentions": 0.25,
    "ai_alignment": 4.1,
    "ai_depth": 4.25,
    "ai_intent": 3.75,
    "ai_audience": 5.2,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The content focuses on engineering practices within Agile environments, specifically discussing clean code, automation, and test-first development. These topics indirectly support Agile and, by extension, Scrum, but there is virtually no direct mention or explicit reference to Scrum as a framework. \n\n- Direct Mentions (0.25): Scrum is never mentioned by name, nor are specific Scrum roles, events, or artifacts. All references are to 'Agile' in general, not to Scrum specifically.\n- Conceptual Alignment (4.1): The themes (continuous improvement, team collaboration, adaptation, quality, technical excellence) are generally aligned with Agile values, a foundational aspect of Scrum. However, the connection is implicit; there is no precise alignment with the elements or principles specific to Scrum.\n- Depth of Discussion (4.25): The discussion of engineering practices is substantive with examples, but it lacks any exploration of how these practices fit within, or are structured by, the Scrum framework (no discussion of Sprints, roles, or Scrum events).\n- Intent / Purpose Fit (3.75): The main purpose is to illuminate Agile engineering technical practices, not specifically to inform about Scrum or to support Scrum practitioners. Scrum compatibility is implied, not explicit.\n- Audience Alignment (5.2): The target audience (teams practicing Agile software development, developers, and technical leads) overlaps with typical Scrum audiences, but the coverage isn’t tailored for Scrum practitioners per se.\n- Signal-to-Noise Ratio (4.9): The content is focused and mostly relevant to Agile teams, but for a reader seeking Scrum-specific guidance, the relevance is moderate since Scrum is not concretely addressed.\n\nNo penalties were applied since the content is recent, neutral-to-positive in tone, and avoids referencing obsolete practices. The resulting confidence score accurately reflects that while these engineering practices are encouraged within Scrum teams, the content does not address Scrum specifically or substantially enough to be more than tertiary.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "resourceId": "Engineering Practices",
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-05-06T11:35:50",
    "ai_confidence": 46.0,
    "ai_mentions": 0.8,
    "ai_alignment": 4.4,
    "ai_depth": 4.2,
    "ai_intent": 4.6,
    "ai_audience": 6.2,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 46.0,
    "reasoning": "The content 'Engineering Practices' discusses Agile software engineering techniques such as clean code, automation, and test-first development. While these are foundational to Agile methodologies, the piece does not explicitly mention the Agile Product Operating Model (APOM) or its specific principles (mentions: 0.8/10). Conceptual alignment (4.4/10) is moderate because the practices discussed (e.g., CI/CD, technical excellence, value delivery) are relevant to enabling APOM but are framed generically for Agile rather than product operating models. Depth (4.2/10) is similar: the article provides a multi-paragraph exploration of engineering practices but makes no direct connection to the organizational, governance, or strategic aspects central to APOM. The intent (4.6/10) appears educational and supportive of Agile goals but lacks focus on transitioning to a product model or exploring APOM's broader operating characteristics. Audience alignment is relatively strong (6.2/10) as the language and focus fit practitioners and technical leaders, though it is not specifically tailored to organizational designers or strategists in APOM. Signal-to-noise ratio is decent (6.9/10) as all points are relevant to Agile, but not specifically to APOM. No penalties were applied since the content is neither outdated nor negative in tone. Overall, while the practices described are essential enabling capabilities for Agile Product Operating Models, the content falls into tertiary level relevance: it supports but does not explore or directly discuss APOM.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "resourceId": "Engineering Practices",
    "category": "Product Delivery",
    "calculated_at": "2025-05-06T11:36:10",
    "ai_confidence": 77.944,
    "ai_mentions": 4.3,
    "ai_alignment": 8.2,
    "ai_depth": 8.0,
    "ai_intent": 7.8,
    "ai_audience": 7.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "The content describes foundational Agile engineering practices such as clean code, automation, test-first development, and their benefits for software quality and value delivery. These topics are highly relevant to product delivery, particularly as they relate to continuous integration and delivery (CI/CD), team collaboration, and technical excellence—key aspects of effective product delivery. For Direct Mentions, the explicit phrase 'Product Delivery' or similar is not invoked directly, but the context and implications are clear, hence a modest score (4.3). For Conceptual Alignment, the content strongly matches the category definition—focusing on critical enabling practices for product delivery, so an 8.2 is given. The Depth of Discussion is robust: it covers not just what engineering practices are, but why they're important and how they fit into the entire delivery lifecycle (score: 8.0). Intent/Purpose Fit is strong—the aim is to inform and encourage effective delivery, but stops short of being wholly focused on product delivery (7.8). The Audience Alignment score reflects that the discussion targets practitioners interested in Agile and high-quality delivery, but may also appeal to those focused on engineering excellence more broadly (7.1). Signal-to-Noise remains high, as almost all content is relevant and purposeful, with minor digressions toward cultural benefits (7.6). No penalties were applied: there is no outdated or satirical material. Overall, the confidence reflects an indirect but meaningful, practical connection to Product Delivery, justifying a 'Secondary' level: the practices are enablers rather than the direct topic.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the Product Delivery category, as it explores essential Agile engineering practices that underpin effective delivery, such as clean code and automation. While it doesn’t mention 'Product Delivery' explicitly, its focus on enabling practices, their benefits, and their role in the delivery lifecycle makes it highly relevant for practitioners aiming to improve product outcomes."
  },
  "Current Value": {
    "resourceId": "Engineering Practices",
    "category": "Current Value",
    "calculated_at": "2025-05-06T11:35:45",
    "ai_confidence": 22.82,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.9,
    "ai_intent": 3.2,
    "ai_audience": 6.4,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is focused on Agile engineering practices such as clean code, automation, and test-first development. While these concepts are important for supporting software quality and Agile delivery, the discussion does not directly mention or explore 'Current Value' as defined in Evidence-Based Management. There is a brief, indirect connection: practices that improve software quality may help provide value to customers, suggested by references to reliability, maintainability, and flow of value. However, there are no direct references to Current Value, specific metrics (customer satisfaction, revenue impact), or evidence-based measurement techniques. The alignment is weak, as the main ideas focus on engineering techniques rather than real-time value assessment. Depth is also low since the relationship to customer value is general and not explored with measurement or feedback loops. The audience focus (software practitioners and teams) is moderately aligned, as these are often the audience for Evidence-Based Management frameworks, but the signal is relatively strong as the content avoids off-topic and filler material. No penalties were applied since the practices discussed are still current and the tone is neutral and informative. Overall, the content is only tangentially related to the Current Value category and would be classified as 'Tertiary' relevance.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "resourceId": "Engineering Practices",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-06T11:35:48",
    "ai_confidence": 37.38,
    "ai_mentions": 1.8,
    "ai_alignment": 3.6,
    "ai_depth": 3.3,
    "ai_intent": 4.2,
    "ai_audience": 5.0,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content 'Engineering Practices' explains foundational Agile software development concepts like clean code, automation, and test-first development. Its main focus is on the value and benefits of these practices in achieving software quality, adaptability, and continuous improvement. \n\n- Mentions (1.8): The content does not directly reference 'Trend Analysis' or related trend terminology. There is no explicit mention of identifying, analyzing, or acting on emerging patterns in Agile, DevOps, or business agility. A slight score bump is given due to reference to current best practices, but not in an analytical or trend-focused context.\n- Conceptual Alignment (3.6): While the content discusses elements (CI/CD, continuous improvement, adaptability) relevant in contemporary Agile environments, it does not analyze or trace the evolution of these practices, nor does it discuss shifts, patterns, or the strategic implications of trends. The content aligns peripherally—possible basis for trend discussion—but does not fulfill the category’s intended purpose.\n- Depth (3.3): The discussion is moderately thorough about engineering practices, their benefits, and their relationship to business agility, but lacks any depth specifically related to trend identification, analysis, or impact. No trend-specific tools, metrics, or case studies are presented.\n- Intent (4.2): The intent is to educate or inform about good engineering practices and their impact on Agile outcomes, not to analyze trends or shifts in those practices within the domain. It passes as very loosely relevant in informing organizational practice, but not from a trend analysis standpoint.\n- Audience (5.0): The target audience overlaps partially with trend analysis (teams, technical leads, Agile practitioners), but the message is more foundational than strategic. Practical focus, rather than on executives or strategists seeking to understand or respond to industry-wide trends.\n- Signal (4.7): Most of the content stays on-topic for engineering best practices in Agile frameworks, but not for trend analysis, thus reducing overall signal related to the specified category.\n\nNo penalties were applied since the content is current, not satirical, nor critical. Overall, though it is valuable in an Agile/DevOps context, the coverage of 'Trend Analysis' is very thin and indirect at best, qualifying it as tertiary for this classification. The confidence score reflects the clear misalignment with the trend analysis category as defined.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "Engineering Practices",
    "category": "Organisational Change",
    "calculated_at": "2025-05-06T11:36:21",
    "ai_confidence": 44.347,
    "ai_mentions": 2.623,
    "ai_alignment": 4.345,
    "ai_depth": 4.126,
    "ai_intent": 4.772,
    "ai_audience": 6.951,
    "ai_signal": 6.748,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content titled 'Engineering Practices' predominantly discusses technical foundations within Agile environments—specifically clean code, automation, test-first development, and CI/CD. It positions these practices as enablers of agility and alignment with business objectives, which makes a loose connection to organisational agility. However, direct references to organisational change, change management frameworks (e.g., ADKAR, Kotter), leadership roles in change, or resistance management are absent. \n\n1. Mentions (2.623): The text does not explicitly mention 'organisational change,' 'change management,' or related terms. 'Agile environment' and 'organisational agility' are referenced, but only as by-products of engineering practices rather than focal points.\n2. Alignment (4.345): There is partial conceptual overlap with the category’s intent—namely, fostering agility and adaptability. However, the primary focus is on technical software development practices, not on transformation strategies, frameworks, or organisational processes.\n3. Depth (4.126): The discussion is moderately substantive regarding engineering practices, but does not delve into the organisational processes, methodologies, or frameworks required by the classification definition. Depth is technical, not transformational.\n4. Intent (4.772): The content aims to inform on best practices for Agile teams, and only tangentially touches on broader organisational agility. The main intent is technical improvement, not organisational transformation.\n5. Audience (6.951): While the content may be of moderate interest to those engaged in or leading organisational change, its language and subject matter cater more to technical practitioners and Agile team members than executives or change strategists.\n6. Signal-to-Noise (6.748): The content is focused and relevant to engineering best practices in Agile, but is off-topic relative to the core of organisational change. The signal within the 'organisational change' frame is low, though the technical content is clear.\n\nNo penalties are applied, as the content is not outdated, nor is the tone critical or satirical. Overall, while there is acknowledgement of agility and business alignment, the fit with 'Organisational Change' as defined is modest and tertiary—the content is about technical enablers, not about change management itself.",
    "level": "Tertiary"
  },
  "Organisational Psychology": {
    "resourceId": "Engineering Practices",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-06T11:35:53",
    "ai_confidence": 15.263,
    "ai_mentions": 0.3,
    "ai_alignment": 1.0,
    "ai_depth": 1.2,
    "ai_intent": 0.8,
    "ai_audience": 2.1,
    "ai_signal": 1.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content focuses heavily on technical methodologies central to software engineering within Agile frameworks (clean code, automation, CI/CD, test-first development). While terms such as 'team motivation', 'collaboration', and 'culture' are present, they are referenced in a generic way and lack explicit psychological theory, models, or in-depth discussion about psychological mechanisms such as motivation theories, leadership, or organisational behaviour. \n\n- **Direct Mentions (0.3)**: 'Organisational Psychology' is not named or explicitly discussed at all; tangential references to culture or motivation do not constitute direct mention.\n- **Conceptual Alignment (1.0)**: The primary content focus is technical practice, not the psychological factors, though collaboration and motivation are briefly acknowledged.\n- **Depth of Discussion (1.2)**: Mention of culture, collaboration, and motivation is fleeting and not elaborated on. There is no exploration or analysis of psychological dynamics.\n- **Intent/Purpose Fit (0.8)**: The main intent is to discuss technical excellence and software delivery more than psychological principles. Psychological impacts are only side comments.\n- **Audience Alignment (2.1)**: The content is aimed at software engineers, IT teams, or technical leads, not directly at organisational psychologists or those studying organisational behaviour. There is a partial overlap for leaders interested in culture, but not enough to score highly.\n- **Signal-to-Noise (1.4)**: Almost all content remains within software engineering best practices, with minimal relevant signals for Organisational Psychology. The tangential comments about motivation and collaboration are insufficient to raise the score.\n\nNo penalties applied as there are no references to obsolete practices, nor is the tone antagonistic or satirical. The final confidence score is extremely low, properly indicating this content should not be classified under Organisational Psychology except perhaps as tertiary or incidental relevance.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "Engineering Practices",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-06T11:35:58",
    "ai_confidence": 46.75,
    "ai_mentions": 2.0,
    "ai_alignment": 5.6,
    "ai_depth": 4.7,
    "ai_intent": 5.5,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "Direct mentions score is low (2.0), as 'cross-functional teams' is only quickly referenced without being a focal topic, and the main content focuses on general engineering practices. Conceptual alignment (5.6) is moderate: while there are some references to collaboration among cross-functional teams and their alignment with business objectives, the content’s core focus is on engineering techniques themselves, not specifically on the structure, benefits, or dynamics of cross-functional teams. Depth (4.7) is somewhat shallow with regard to the category; discussion of cross-functional teams is peripheral and does not explore characteristic challenges, practices, or examples. Intent/purpose fit (5.5) is low-mid because the main goal is to promote engineering best practices, not specifically to discuss team structure or cross-functional collaboration. Audience alignment (7.1) is higher—both would likely appeal to technically-minded Agile practitioners, but the content is not tailored specifically to those interested in team formation or management. Signal-to-noise (6.3) is above neutral, as the content remains highly focused on engineering practices with only slightly tangential reference to cross-functional collaboration. There are no penalties applied as the content is current, and the tone is neither critical nor undermining. Overall, this piece would not fit well under the primary or even secondary level for the Cross Functional Teams category, as cross-functional aspects are only a tertiary consideration.",
    "level": "Tertiary"
  },
  "Business Agility": {
    "resourceId": "Engineering Practices",
    "category": "Business Agility",
    "calculated_at": "2025-05-06T20:56:59",
    "ai_confidence": 80.85,
    "ai_mentions": 3.6,
    "ai_alignment": 8.2,
    "ai_depth": 7.8,
    "ai_intent": 8.6,
    "ai_audience": 8.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content focuses on engineering practices vital to Agile software development, such as clean code, automation, and test-first development. There are indirect references to business agility concepts, including adaptability, organisational agility, and aligning technical practices to business objectives. However, the text never directly mentions 'business agility' by name (hence a low score for Direct Mentions), and the primary focus is on technical practices rather than comprehensive organisational transformation or measurement frameworks central to the category definition. Alignment and depth are high because the content discusses how these practices support adaptability and faster response to change, key outcomes of business agility. The intent is highly relevant, aiming to explain how technical excellence underpins agility at the business level. The target audience appears to be practitioners and leaders interested in Agile and organisational efficiency, matching the category's typical reader. Signal-to-noise is strong with little off-topic or filler content. No penalties were applied as the content is up to date and fully positive in tone.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores how technical practices like clean code and automation support business agility, even though it doesn’t use the term directly. It’s highly relevant for Agile practitioners and leaders, clearly linking technical excellence to organisational adaptability and efficiency, which are core aspects of business agility. The focus remains practical and on-topic throughout."
  },
  "Agile Strategy": {
    "resourceId": "Engineering Practices",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-06T20:57:08",
    "ai_confidence": 56.66,
    "ai_mentions": 1.9,
    "ai_alignment": 6.8,
    "ai_depth": 5.7,
    "ai_intent": 5.1,
    "ai_audience": 7.3,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content focuses primarily on foundational technical practices (clean code, automation, test-first development) within Agile environments. There is some higher-level discussion about aligning technical efforts with business objectives and fostering organizational agility, which connects loosely to Agile Strategy. However, the primary emphasis is on engineering techniques and their benefits, not on strategic alignment, vision, leadership, or organization-wide strategic planning with Agile principles. Direct mention of 'Agile Strategy' or synonymous terms is absent, and while organizational outcomes are referenced, they are rooted in technical contexts rather than strategic frameworks or decision-making processes. The intended audience appears to be both practitioners and those interested in technical excellence rather than business leaders or strategists. As a result, the content partially aligns with the audience and intent ideas but falls short on depth and direct discussion of Agile Strategy topics. No penalties were required as the content is current and supportive, but the moderate confidence reflects that it offers supporting context rather than a central focus on the category.",
    "level": "Tertiary"
  },
  "Digital Transformation": {
    "resourceId": "Engineering Practices",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-06T20:56:59",
    "ai_confidence": 57.25,
    "ai_mentions": 0.2,
    "ai_alignment": 6.8,
    "ai_depth": 6.5,
    "ai_intent": 6.7,
    "ai_audience": 7.3,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content primarily discusses foundational engineering practices within the context of Agile, such as clean code, automation, and test-first development. While it references organisational agility and the alignment of technical efforts with business objectives, it stops short of explicitly addressing Digital Transformation as defined. The term 'digital transformation' is not mentioned, and there is no direct discussion of strategic, organisation-wide adoption of digital technologies, nor are there references to broader topics like change management, digital frameworks, or business model innovation. The alignment, depth, and intent scores reflect that the content is adjacent but does not deeply explore digital transformation as a holistic, strategic initiative. Instead, the primary focus is at the team or engineering process level rather than organisation-wide transformation. Audience and signal scores are somewhat higher, as the technical and managerial readers of such content overlap with digital transformation stakeholders, and the content remains focused and relevant to potential transformation teams. No penalties were warranted as there are no outdated concepts or negative tone issues.",
    "level": "Tertiary"
  },
  "Windows": {
    "resourceId": "Engineering Practices",
    "category": "Windows",
    "calculated_at": "2025-05-06T20:56:59",
    "ai_confidence": 4.9,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.0,
    "ai_audience": 1.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content comprehensively discusses general software engineering practices in Agile—such as clean code, automation, test-first development, and CI/CD—but does not mention Windows or target the specific Windows environment. There are zero direct references or implicit alignment to Windows operating systems, their configuration, troubleshooting, or use. The main audience is generic Agile software teams, not Windows practitioners. While the discussion is in-depth for engineering best practices, all details are system-agnostic and not focused on Windows. Therefore, all scores are low, with zero in Direct Mentions and low partial marks for other dimensions reflecting only mild conceptual overlap (e.g., some Windows practitioners may use these practices, but that is true of any OS). No penalties applied as the content is current and not satirical or critical. The resulting weighted confidence score is correspondingly very low.",
    "level": "Ignored"
  },
  "Estimation": {
    "resourceId": "Engineering Practices",
    "category": "Estimation",
    "calculated_at": "2025-05-06T20:56:59",
    "ai_confidence": 6.8,
    "ai_mentions": 0.1,
    "ai_alignment": 0.3,
    "ai_depth": 0.2,
    "ai_intent": 0.3,
    "ai_audience": 1.5,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses exclusively on fundamental engineering techniques such as clean code, automation, and test-first development—all within the Agile context. There are no explicit or implicit references to any estimation practices, collaborative techniques for forecasting, empirical data usage, or uncertainty management in planning. Estimation is neither mentioned directly nor conceptually addressed, and there is no discussion of related Agile topics (e.g., velocity, Planning Poker, T-shirt sizing). The primary purpose is to advocate for technical excellence and maintainability, not estimation. The target audience (Agile practitioners and developers) matches the Estimation category somewhat but only in a broad sense, not specifically regarding estimation skills. The entire discussion is tightly focused, but none of it is relevant to the Estimation category, resulting in very low scores across all rubric dimensions. No penalties were required, as the content is current and neutral in framing.",
    "level": "Ignored"
  },
  "Test Automation": {
    "resourceId": "Engineering Practices",
    "category": "Test Automation",
    "calculated_at": "2025-05-06T20:57:02",
    "ai_confidence": 50.733,
    "ai_mentions": 2.7,
    "ai_alignment": 5.4,
    "ai_depth": 5.2,
    "ai_intent": 5.8,
    "ai_audience": 7.2,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 51.0,
    "reasoning": "The content explicitly mentions 'automation' and 'test-first development' within the context of Agile engineering practices, but does not directly elaborate on test automation principles, tools, frameworks, or measurement metrics. The closest explicit references relevant to the category are 'automation' and the support for CI/CD pipelines, which often leverages test automation, but these are presented as part of a broad set of engineering practices without substantive detail. There is no focused exploration of test automation, its tools, types, or best practices. The main intent is to describe the holistic value of sound engineering practices (including automation in general), not test automation specifically. Thus, conceptual alignment is moderate, but depth and mentions are relatively low. The audience appears to be technical Agile teams, which moderately matches the typical test automation audience. The content is generally on-topic for quality practices but lacks precision and specificity for 'Test Automation' itself, justifying a mid-range confidence score with no penalties.",
    "level": "Tertiary"
  },
  "Mentoring": {
    "resourceId": "Engineering Practices",
    "category": "Mentoring",
    "calculated_at": "2025-05-06T20:57:09",
    "ai_confidence": 18.54,
    "ai_mentions": 0.1,
    "ai_alignment": 2.5,
    "ai_depth": 2.4,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses almost exclusively on technical aspects of Agile, specifically engineering practices such as clean code, automation, and test-first development. There is no direct mention or explicit discussion of mentoring, coaching, guidance, or leadership development as described in the classification definition. The closest conceptual alignment is the emphasis on continuous improvement and learning, which could indirectly relate to a culture conducive to mentoring, but the discussion remains strictly within technical process improvement rather than people development or mentorship. The depth of discussion emphasizes engineering concepts in Agile, delving into their impact on quality and business alignment rather than the mentoring process. The audience is quite aligned with Agile practitioners, but not specifically those seeking guidance on mentoring. Most of the content is relevant to technical excellence rather than mentoring (signal-to-noise), and intent is product/process improvement instead of guidance/coaching. No outdated or satirical elements are present, so no penalties apply. Overall, the confidence score is low and proportionate, reflecting that the content does not fit well under 'Mentoring'.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "resourceId": "Engineering Practices",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-06T20:57:05",
    "ai_confidence": 23.14,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.4,
    "ai_intent": 2.1,
    "ai_audience": 8.5,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses exclusively on engineering practices within Agile methodologies, such as clean code, automation, test-first development, and continuous integration/delivery. While these topics relate to the improvement and value delivery within software teams, there are no direct mentions or substantive discussions of 'Unrealised Value' as defined by Evidence-Based Management. The alignment is minimal since the text centers on realised value through process excellence and technical best practices, rather than exploring untapped opportunities, innovation potential, or the identification of additional business value. The depth remains shallow for the target category, discussing the benefits of solid engineering but not the assessment, measurement, or strategic implication of unrealised value. The intent is supportive of continuous improvement but does not address the specific category goal of highlighting potential value yet to be captured. Audience fit and signal-to-noise ratio are high—it's focused and relevant for practitioners and technical leads, although for a different conceptual target. No penalties were applied, as the content is up-to-date and does not contradict the framing. The final confidence of 23.14 accurately reflects the peripheral, non-aligned nature of this content with the Unrealised Value category.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "resourceId": "Engineering Practices",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-05-06T20:56:59",
    "ai_confidence": 21.63,
    "ai_mentions": 0.3,
    "ai_alignment": 2.2,
    "ai_depth": 2.8,
    "ai_intent": 3.1,
    "ai_audience": 7.3,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses almost entirely on general engineering practices within Agile environments, such as clean code, automation, and test-first development. There is no direct mention of Internal Developer Platforms (IDPs), nor is there a substantial discussion of their architecture, benefits, or key concepts. While the mention of automation and CI/CD pipelines is peripherally relevant to some ideas that overlap with IDPs, the core intent and alignment concern general Agile software quality rather than platforms specifically designed to streamline development for engineering teams. The audience is likely to be technical practitioners, which partially aligns, and most of the content is focused with little off-topic filler. However, the overall conceptual fit with the IDP category is weak, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "Engineering Practices",
    "category": "Portfolio Management",
    "calculated_at": "2025-05-06T20:57:10",
    "ai_confidence": 13.68,
    "ai_mentions": 0.15,
    "ai_alignment": 1.6,
    "ai_depth": 1.7,
    "ai_intent": 1.8,
    "ai_audience": 5.2,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content does not directly reference Portfolio Management and focuses almost exclusively on team-level Agile engineering practices such as clean code, automation, and test-first development. There is a brief mention of aligning technical efforts with business objectives and driving organisational agility, which slightly overlaps conceptually with strategic alignment in Portfolio Management, but these connections are indirect and cursory. Depth of discussion is centered on engineering teams and the impact on software quality, not on managing portfolios of projects, prioritisation frameworks, or value delivery at the organisational level. The intent is to inform technical practitioners about best practices; there is no exploration of portfolio governance or methodologies. The audience is primarily developers and Agile teams rather than portfolio managers or business strategists. Signal-to-noise ratio is low from the portfolio perspective, as the majority of the content is off-topic given the strict definition. No penalties are applied as the content is current and not contradictory; the low confidence accurately reflects minimal alignment with 'Portfolio Management.'",
    "level": "Ignored"
  },
  "Release Management": {
    "resourceId": "Engineering Practices",
    "category": "Release Management",
    "calculated_at": "2025-05-06T20:57:04",
    "ai_confidence": 58.89,
    "ai_mentions": 1.2,
    "ai_alignment": 6.5,
    "ai_depth": 6.9,
    "ai_intent": 5.7,
    "ai_audience": 8.2,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 59.0,
    "reasoning": "The content discusses foundational Agile engineering practices such as clean code, automation, and test-first development. While these are highly supportive of software quality and delivery, the article does not directly mention or focus on the category 'Release Management.' Direct mentions are minimal with no explicit naming or exclusive focus on release processes, contributing to a low 'mentions' score. Conceptually, the alignment is moderate—CI/CD pipelines are referenced, and their relation to streamlined deployment and reduced lead times connects with release management, but most of the narrative centers on engineering quality and culture rather than coordinated release activities. The depth is reasonably strong regarding technical practices and their impact on deployment, though it doesn't explore release management frameworks, scheduling, or stakeholder coordination. The audience is clearly technical and relevant, and the content stays mostly on-topic with little extraneous material (high signal-to-noise). There are no outdated references or negative tone, so no penalties apply. Final confidence is moderate, weighted appropriately for incidental but not central relevance to Release Management.",
    "level": "Tertiary"
  },
  "Large Scale Agility": {
    "resourceId": "Engineering Practices",
    "category": "Large Scale Agility",
    "calculated_at": "2025-05-06T20:56:58",
    "ai_confidence": 40.35,
    "ai_mentions": 1.35,
    "ai_alignment": 4.2,
    "ai_depth": 4.5,
    "ai_intent": 4.05,
    "ai_audience": 5.9,
    "ai_signal": 5.95,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content focuses on foundational Agile engineering practices like clean code, automation, and test-first development, describing their importance for software quality, team collaboration, and value delivery. While it references concepts such as cross-functional teams and organisational agility, it never directly addresses scaling Agile across an entire organisation or discusses specific large-scale frameworks (e.g., SAFe, LeSS), enterprise-level transformation, or multi-team coordination. The depth is moderate, emphasizing benefits within a team context rather than enterprise-wide challenges or solutions. The audience can include both practitioners and those interested in organisational outcomes, but the technical focus skews toward team-level developers. Signal-to-noise ratio is moderate—content is relevant to Agile but only tangentially aligns with large-scale agility. There are no penalties since the content is not outdated nor critical in tone. The low direct mention score and thin alignment with true enterprise scaling calibrate the overall confidence to a below-average level.",
    "level": "Ignored"
  },
  "Experimentation": {
    "resourceId": "Engineering Practices",
    "category": "Experimentation",
    "calculated_at": "2025-05-06T20:57:10",
    "ai_confidence": 41.32,
    "ai_mentions": 2.3,
    "ai_alignment": 4.7,
    "ai_depth": 3.9,
    "ai_intent": 4.5,
    "ai_audience": 8.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses chiefly on Agile engineering practices, namely clean code, automation, test-first development, and the benefits of CI/CD, continuous improvement, and technical excellence. 'Experimentation' is referenced obliquely near the end ('cultivates an environment where learning and experimentation thrive'), but this is incidental and not the main theme. There is no direct mention or dedicated discussion about hypothesis-driven experimentation, formulation/testing of hypotheses, or any systematic method for experimenting within Agile workflows. The conceptual overlap exists only in that good engineering practices foster an environment where experimentation could occur, but the content's primary purpose, depth, and signal are directed elsewhere. The audience (Agile practitioners) aligns moderately well, and most discussion is relevant to them, but with only a fleeting, generic invocation of experimentation. No penalty for outdatedness or negative tone is needed. As a result, the confidence that this content should be classified under 'Experimentation' is low to moderate, predominantly because experimentation is not the explicit or central focus.",
    "level": "Tertiary"
  },
  "Sociotechnical Systems": {
    "resourceId": "Engineering Practices",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-06T20:57:04",
    "ai_confidence": 66.87,
    "ai_mentions": 2.4,
    "ai_alignment": 7.5,
    "ai_depth": 7.7,
    "ai_intent": 7.2,
    "ai_audience": 8.5,
    "ai_signal": 9.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content never directly mentions 'Sociotechnical Systems' or any explicit theoretical frameworks named in the category, leading to a low Direct Mentions score. However, the piece consistently discusses how engineering practices like clean code, automation, and test-first development affect not only technical outcomes but also team culture, cross-functional collaboration, and alignment with business objectives. These elements closely align with the sociotechnical perspective—emphasizing the intersection of social (team culture, collaboration, motivation) and technical (engineering practices, CI/CD, automation) aspects. The discussion is substantive but primarily focused on technical mastery as the enabler of these outcomes, not on organization-wide sociotechnical design, so depth is high but not perfect. The intent is largely educational and supportive of the integration of these practices for organisational agility, which fits the category, but there's a minor lean towards technical coaching. The target audience—Agile practitioners and those concerned with team effectiveness—closely matches the category, as does the focused, relevant content (high signal-to-noise). No content is outdated or oppositional, so no penalties apply. Final confidence reflects strong but not categorical fit: core sociotechnical concepts are present, but explicit linkage is implicit rather than directly argued.",
    "level": "Secondary"
  },
  "Scrum Master": {
    "resourceId": "Engineering Practices",
    "category": "Scrum Master",
    "calculated_at": "2025-05-06T20:56:58",
    "ai_confidence": 13.6,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 0.9,
    "ai_intent": 1.4,
    "ai_audience": 3.6,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is focused entirely on technical engineering practices within Agile environments, such as clean code, automation, and CI/CD. There is no direct mention of the Scrum Master accountability, nor is there any reference to Scrum roles, responsibilities, or the unique systemic impact of the Scrum Master. While themes of team collaboration and continuous improvement are present, they are discussed generically in relation to engineering and not from the perspective of Scrum Mastery or its unique accountability. The primary audience is developers and technical practitioners rather than Scrum Masters. Alignment, depth, and mention scores are kept minimal due to the absence of any category-relevant concepts or specificity, and signal-to-noise is low due to the primary focus being off-category. No penalties were necessary since the content is not outdated nor critical of the category; it is simply tangential.",
    "level": "Ignored"
  },
  "Forecasting": {
    "resourceId": "Engineering Practices",
    "category": "Forecasting",
    "calculated_at": "2025-05-06T20:56:58",
    "ai_confidence": 13.18,
    "ai_mentions": 0.3,
    "ai_alignment": 1.6,
    "ai_depth": 2.2,
    "ai_intent": 1.8,
    "ai_audience": 3.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content 'Engineering Practices' focuses on principles like clean code, automation, test-first development, and CI/CD in Agile environments. There is virtually no direct mention of forecasting or forecasting methodologies, resulting in a very low 'Direct Mentions' score. Conceptually, while engineering practices can indirectly enable more predictable value delivery (a tangential relation to forecasting), the content never discusses using empirical data, prediction of delivery timelines, risk management through forecasting, or specific forecasting metrics as required by the definition. The discussion mainly explores how best practices lead to higher quality and agility but does not address techniques, methods, or best practices for forecasting—in Agile or otherwise. The intent is to inform about engineering best practices rather than guiding, improving, or discussing forecasting. The audience does overlap somewhat with Agile practitioners, but the focus is on technical practices rather than those seeking forecasting insights, so audience alignment is partial. The content’s signal-to-noise ratio in relation to the 'Forecasting' category is low, as nearly all of it is off-topic from the requested classification. No penalties are applied since the content is not outdated nor contradicting the category’s framing. The overall confidence score reflects the extremely weak fit with the 'Forecasting' category.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "Engineering Practices",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-05-06T20:57:05",
    "ai_confidence": 17.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 1.7,
    "ai_intent": 1.9,
    "ai_audience": 5.2,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses primarily on broad engineering practices within Agile, emphasizing clean code, automation, and test-first development, but does not make any direct or indirect mention of Acceptance Test Driven Development (ATDD), acceptance criteria, or the collaborative elements specific to ATDD. The only slight overlap is the reference to 'test-first development,' which could be interpreted as a general nod toward test-driven approaches, but this is insufficient for meaningful conceptual alignment. The discussion remains high-level and does not explore ATDD principles, stakeholder collaboration, or acceptance testing. The intended audience (agile software professionals) is partially aligned, but the content's relevance to ATDD is minimal, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "Engineering Practices",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-06T20:57:02",
    "ai_confidence": 25.06,
    "ai_mentions": 0.15,
    "ai_alignment": 2.0,
    "ai_depth": 2.2,
    "ai_intent": 3.1,
    "ai_audience": 4.0,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on technical engineering practices such as clean code, automation, and test-first development within an Agile context. While it references innovation, value delivery, and business objectives, there is little to no explicit discussion around entrepreneurship, entrepreneurial mindset, risk-taking, or the creation and scaling of new ventures. The category 'Entrepreneurship' is not directly mentioned or referenced. Conceptually, the content is more aligned with software engineering and Agile methodologies than with the entrepreneurial process, although some overlap exists in the broader sense of innovation and value. The discussion is moderately thorough for its domain but does not delve into entrepreneurial topics. The audience is likely technical practitioners rather than entrepreneurs. The signal-to-noise ratio is moderate; content is focused but off-target for entrepreneurship as defined. Thus, the confidence score is low and proportional to the limited, indirect connection to the category.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "resourceId": "Engineering Practices",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-06T20:57:10",
    "ai_confidence": 39.36,
    "ai_mentions": 1.2,
    "ai_alignment": 3.7,
    "ai_depth": 3.8,
    "ai_intent": 4.4,
    "ai_audience": 6.1,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content predominantly discusses foundational Agile engineering practices such as clean code, automation, and test-first development, focusing on technical methods to improve software delivery. There are implicit links to broader business outcomes (e.g., alignment with business objectives and contribution to long-term success), but the discussion does not explicitly or deeply address strategic goals, long-term objectives, nor does it frame its intent in the context of defining or refining organisational strategy as described in the category definition. There are no direct or frequent mentions of 'strategic goals,' and the primary purpose is technical excellence and operational improvement rather than strategy. While the content does highlight the value of technical practices for business agility and adaptability, it does so from a technical implementer’s perspective rather than through frameworks or strategic alignment conversations. Therefore, conceptual alignment and depth receive mid-low scores, intent is only partially fitting, and the audience is somewhat aligned but skews technical rather than strategic. No penalties were required as the content is current, appropriate in tone, and does not reference obsolete practices. The overall confidence score accurately reflects the minimal overlap with the Strategic Goals category.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "resourceId": "Engineering Practices",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-06T20:57:06",
    "ai_confidence": 61.3,
    "ai_mentions": 2.1,
    "ai_alignment": 7.6,
    "ai_depth": 6.4,
    "ai_intent": 5.8,
    "ai_audience": 7.2,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content primarily focuses on foundational engineering practices—clean code, automation, test-first development—as key enablers for Agile teams, with some passing references to team collaboration (e.g., 'enhances collaboration among cross-functional teams'). However, the direct discussion of team collaboration techniques or dynamics is limited and not the core subject. In terms of conceptual alignment, there are linkages between engineering best practices and collaborative, cross-functional teams, but these are secondary to the main theme of technical excellence and workflow. The depth is moderate: collaboration is spoken about mostly as a benefit or byproduct of adopting strong engineering practices, not as the principal subject or focus. The intent is partially aligned—supporting team outcomes via technical practices—but the main focus is on technical methods rather than teamwork dynamics. The audience is likely Agile practitioners and technical team members, which aligns moderately well with the category. Signal-to-noise is moderate, as most content is about engineering, with team collaboration being a minor element. There are no out-of-date references or critical tones, so no penalties were warranted. The overall confidence score reflects that, while related, this content only partially fits the strict definition of 'Team Collaboration' as a main focus.",
    "level": "Secondary"
  },
  "Hybrid Agile": {
    "resourceId": "Engineering Practices",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-06T20:57:02",
    "ai_confidence": 16.53,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.6,
    "ai_audience": 6.2,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content offers a clear and thorough discussion of core engineering practices essential to Agile environments, such as clean code, automation, and test-first development. However, it makes no explicit or implicit reference to Hybrid Agile, its challenges, or the critical merger between traditional and Agile methodologies. The content is thematically focused on genuine Agile engineering practices, rather than the dysfunctions or consequences typically analyzed in Hybrid Agile contexts. No key Hybrid Agile topics (preservation of command-and-control structures, surface-level Agile adoption, misalignments between leadership and delivery, or case study failures) are mentioned or analyzed. The intended audience is likely Agile practitioners and teams seeking to improve their engineering effectiveness, aligning with practical delivery roles and not the strategic or critical audience of the Hybrid Agile category. The discussion is highly focused and relevant, with very little off-topic or filler content, leading to a high signal-to-noise rating, but this focus is not aligned with the Hybrid Agile category. No penalties are applied since the tone is neutral and content is not outdated. The final low confidence score appropriately reflects an almost complete lack of conceptual and explicit alignment with the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "Engineering Practices",
    "category": "Ethos",
    "calculated_at": "2025-05-13T21:57:37",
    "ai_confidence": 39.55,
    "ai_mentions": 0.3,
    "ai_alignment": 4.7,
    "ai_depth": 4.1,
    "ai_intent": 5.3,
    "ai_audience": 7.1,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content chiefly focuses on engineering practices (clean code, automation, test-first development) as foundational techniques in Agile. While it briefly refers to fostering a culture and aligns technical efforts with business objectives, it lacks explicit discussion about deep, underlying convictions, ethos-driven system behaviors, or the authentic, demonstrable values underpinning principles and evolution. The main intent is to describe technical practices and their benefits. There is minimal direct reference to ethos, and the discussion remains largely practical rather than exploring ethos as defined. Audience fit and signal are higher, given relevance to practitioners and technical leaders, but alignment and depth are moderate due to conceptual proximity, not direct engagement.",
    "reasoning_summary": "This content describes foundational Agile engineering practices and their positive effects but stops short of delving into the deeper ethos that shapes system behaviors. It's practical and relevant, yet doesn't directly address the underlying convictions that define authentic ethos in Agile or related systems.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "Engineering Practices",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T21:57:37",
    "ai_confidence": 38.084,
    "ai_mentions": 2.3,
    "ai_alignment": 4.2,
    "ai_depth": 4.6,
    "ai_intent": 3.9,
    "ai_audience": 5.2,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content discusses foundational engineering practices in Agile such as clean code, automation, and test-first development. While it mentions delivering value to customers and ensuring releases meet customer expectations, its focus is primarily on internal development quality and team practices, not on actively defining, measuring, or using customer outcomes to guide all product decisions. The customer focus is referenced more as a downstream effect rather than the explicit driver, and there is little detail on feedback loops, measurement of customer value, or continuous adjustment based on customers' actual needs. Audience is well aligned with practitioners, and signal is high, but conceptual and depth scores are limited by the indirect treatment of customer outcome alignment.",
    "reasoning_summary": "While the content links quality engineering practices to delivering value, it doesn't deeply explore or center on defining and measuring customer outcomes. Its primary strength is technical excellence, not a direct engagement with Customer Focus principles as defined by the category.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "Engineering Practices",
    "category": "First Principal",
    "calculated_at": "2025-05-13T21:57:36",
    "ai_confidence": 27.1,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.4,
    "ai_intent": 3.3,
    "ai_audience": 8.9,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content discusses foundational engineering practices like clean code, automation, and test-first development in Agile, labelling them as 'foundational.' However, it does not explicitly identify or analyze these as first principles, nor does it explore their irreducibility or non-negotiable nature per the definition. There are no direct references to first principles or their theorists; the focus is largely on best practices and benefits, not immutable constraints. The content is audience-aligned and high in signal-to-noise ratio, but lacks depth and conceptual alignment to the First Principal category.",
    "reasoning_summary": "While the article discusses important foundational practices in Agile, it does not tie them directly to first principles or treat them as immutable truths. Its focus is on best practices and benefits, not core system constraints, so confidence for the First Principal category is low.",
    "level": "Ignored"
  },
  "Definition of Workflow": {
    "resourceId": "Engineering Practices",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-23T22:06:47",
    "ai_confidence": 9.3,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.4,
    "ai_audience": 2.4,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content describes foundational agile engineering practices like clean code, automation, and test-first development, focusing on technical excellence and continuous improvement. However, it does not mention or directly discuss the Definition of Workflow, nor does it address workflow policies, entry/exit criteria, WIP limits, or transparency. Its main theme is technical practices, not workflow definition in Kanban/agile contexts, resulting in extremely low alignment across all dimensions.",
    "reasoning_summary": "The content centers on technical agile practices (clean code, automation, CI/CD), with no mention or discussion of workflow definition, policies, or Kanban principles, making it irrelevant to the 'Definition of Workflow' category.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "Engineering Practices",
    "category": "Objective Key Results",
    "calculated_at": "2025-07-23T12:07:38",
    "ai_confidence": 8.91,
    "ai_mentions": 0.2,
    "ai_alignment": 1.0,
    "ai_depth": 0.9,
    "ai_intent": 1.6,
    "ai_audience": 2.1,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses exclusively on foundational engineering practices in Agile contexts such as clean code, automation, and test-first development. There are no direct mentions or discussions of OKRs, their theoretical basis, implementation, or strategic role in goal-setting. Themes like business-technical alignment are touched upon but not through an OKR framework. There is no indication that the audience, intent, or discussion depth is tailored to OKRs—the discussion is general to engineering excellence and value delivery rather than outcome-based measurement or the OKR system.",
    "reasoning_summary": "This content exclusively explores engineering practices in Agile—such as clean code and automation—with no reference or conceptual connection to Objective Key Results. It does not discuss OKRs, their principles, or implementation and is therefore minimally relevant to the evaluated category.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "Engineering Practices",
    "category": "Product Developer",
    "calculated_at": "2025-07-23T12:09:52",
    "ai_confidence": 36.95,
    "ai_mentions": 0.2,
    "ai_alignment": 3.6,
    "ai_depth": 4.1,
    "ai_intent": 3.9,
    "ai_audience": 7.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses on broad engineering practices such as clean code, automation, and CI/CD as foundational for agile software development. While these topics are relevant for technical team members generally, they do not specifically reference or center on the Product Developer accountability, its unique purpose, or formal behavioral expectations. There is no mention of Product Developers as a role, their collective accountability, or distinctions in behaviors, nor are responsibilities or the mindset of Product Developers explored in detail. The audience is technical practitioners, and the content demonstrates technical depth, but it remains generic rather than tied directly to the responsibilities or structure of Product Developer as defined in modern product development frameworks. No penalties were warranted as there is no sign of outdated practices or negative tone.",
    "reasoning_summary": "The content is focused on general engineering practices and agile technical excellence, with no explicit or substantial coverage of the Product Developer role or its specific accountabilities. Relevance to Product Developer is indirect and limited.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "Engineering Practices",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:07:54",
    "ai_confidence": 49.75,
    "ai_mentions": 0.3,
    "ai_alignment": 5.3,
    "ai_depth": 5.6,
    "ai_intent": 5.4,
    "ai_audience": 5.0,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 50.0,
    "reasoning": "The content focuses on clean code, automation, and test-first development—practices that relate to engineering excellence and continuous improvement in Agile. While these ideas are adjacent to Agentic Engineering, the content does not mention or directly explore developer agency, ethical AI, decentralised decision-making, or feedback-driven adaptation as defined in the category. There is no focus on maximising the agency of humans or intelligent systems, nor discussion of observability or AI collaboration. The audience and purpose loosely overlap with foundations of agentic practices but remain more conventional and generic, centered on technical quality rather than the philosophical or systemic dimensions of agency.",
    "reasoning_summary": "This content broadly supports Agile engineering but stops short of addressing agency, autonomy, or AI integration. It aligns with technical excellence principles but does not delve into the intentional maximisation of human or system agency central to Agentic Engineering.",
    "level": "Tertiary"
  },
  "Collective Intelligence": {
    "resourceId": "Engineering Practices",
    "category": "Collective Intelligence",
    "calculated_at": "2025-07-23T12:08:32",
    "ai_confidence": 21.8,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.5,
    "ai_intent": 3.2,
    "ai_audience": 6.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content is focused on foundational engineering practices like clean code, automation, and test-first development in Agile teams. It discusses topics such as collaboration and organizational agility but solely in a human-team and technical context. There is no mention or discussion of human-AI collaboration, AI agents as team members, or the core themes of collective intelligence as defined. The audience is aligned to practitioners interested in technical excellence and Agile, but signal remains high because the content is consistently relevant to its stated focus. The lack of explicit or conceptual alignment with collective intelligence, as well as the absence of depth or references to human-AI partnership, explains the low confidence score.",
    "reasoning_summary": "This content centers on Agile engineering practices and team collaboration but does not address human-AI partnerships or collective intelligence. Its focus remains purely on human-driven technical excellence, making it weakly aligned to the intended category.",
    "level": "Ignored"
  },
  "Agentic Software Delivery": {
    "resourceId": "Engineering Practices",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T07:10:08",
    "ai_confidence": 27.875,
    "ai_mentions": 0.3,
    "ai_alignment": 3.2,
    "ai_depth": 2.9,
    "ai_intent": 3.5,
    "ai_audience": 5.2,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content discusses foundational Agile engineering practices like clean code, automation, CI/CD, and test-first development. While these are relevant prerequisites for agentic software delivery, there is no explicit mention or in-depth discussion of autonomous AI agents, agency, or integration with human expertise and organisational context as outlined in the Agentic Software Delivery category. The focus is on standard engineering and Agile principles without contextual intelligence, agent governance, or the synergy between agents and humans. Audience and signal scores are modestly higher due to general overlap with practitioner interests, but overall alignment and depth remain low.",
    "reasoning_summary": "Content focuses on Agile engineering best practices—such as CI/CD and automation—but lacks agentic elements (autonomous AI, agency, or intelligence integration) required for this category. Partial fit at best; core topic is outside category definition.",
    "level": "Ignored"
  }
}