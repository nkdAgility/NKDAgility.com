- id: 9lBvhLXW8xY
  title: Update Youtube Video Pages
  description: Enhance your YouTube experience! Discover the latest updates to video pages, featuring improved navigation and user-friendly design. Watch now!
  captions: |-
    Okay, so we're going to update a video. I have pre-prepared an issue on GitHub. What you do is you just click "New Issue" when you get here. Put the title in, add the copy as markdown. You can just paste from Word, and then you'll have to make it look like markdown. Here's one I prepared earlier. I've got the video ID because that's where we're going to find it. I've got the new title, I've got the old link, the current page. I just pasted that in, and then I added the copy in here as markdown. 

    So let me edit that. There's the copy. You can add links and stuff in there. You can do all of those things, and they'll copy across. What's more interesting, if you're internal linking to other posts that are the same, we need to have a conversation about that because there are ways to do that to make it work nicely. 

    But what I did, what I didly did, was I created a new workspace. I created a new branch. So over here, there was a button that said "New Branch." I clicked it. I just created it locally, and it said, "Do you want to open?" In fact, let's delete that branch just now. Delete. It's gone. 

    Okay, so here's my content. I'm going to create a new branch. It's going to create a default name for that branch, and I'm going to say "Open in Codespace." So I'm going to create the branch, and I think I'll need to copy that because I think it'll open in this window, and I still want a copy of this so I can go back to it. 

    So now it's opening. A Codespace, what it's doing is basically it's a virtual machine in the cloud. It's getting your code, the code for the site, getting it locally and building that environment. You just wait for it to open. You can see on the bottom left it says "Opening remote," and there it is. It's ready. So it's built. It's going to do some jiggy pokery behind the scenes while we're doing some other things, but it should be all working. 

    So what I need to do is I need to find where this video is. If you remember, I used this code for the pages. So all of the code for the site is under "site." All of the content for the site is under "content." So there's capabilities, company outcomes, resources. Okay, so that's all the content for the site. Don't worry about these ones; these are for... yeah, don't worry about those ones. 

    So I'm going to open up resources, and then I'm going to open up video, and then we have a folder called YouTube, which is where these are automatically added. You can see it's got all the YouTube IDs, so I need to find one, 1886. So if I just go down, 1806, there it is. And I can see it's got the data file, which is the stuff that got exported out of YouTube, and then it's got the built content file. 

    Okay, so this is it here. What we're going to do is we are going to do a couple of things, but let me walk you through this file. So this is the original title, and you'll notice you put a dot in the title on YouTube, so it pulled it in here, and it means that we've got this extra little dash on the end there to represent that dot. So that should all work. 

    I've already added this to the aliases in preparation for us setting this up. So there's a few changes we need to make here, and we need to update the copy. So let's get the copy first. I'm going to edit this. Here is our content. I'm going to copy that markdown, go over here. If you've got markdown in ChatGPT, it will output markdown, and you can just stick it in here or ask whatever tool you're using to create it as markdown. 

    So we're going to replace this content here. So I'm just going to do that, select it all, boom, there we go. I've updated the file with the new content. I keep this; this is the video link. That's what renders the video at the top. You could put it there; that could look good. The default is at the top right, so I'm just going to leave it there. 

    And then there's a couple of things we need to do in this content. If we leave it the way it is, we've not updated the title, we've not updated the URL, and this will get overwritten when we reprocess at midnight. Okay, so what you need to do in order to prevent that is we're going to take the title and we're going to add it to the title here. Okay, so that will be the new title. 

    Then we're going to remove the slug. So this manually set the title, like the URL, the bit at the end, to what this was. If you want, you can make a new slug that's the same as this and put it in here. I think it's unnecessary, so I'm just going to delete it. And what it will do is it will take whatever's in here, so if you change it later, you need to remember to do some stuff. It will take whatever's there, and it will turn it into the URL of the page. 

    So any special characters, anything like that, will get converted to dashes, and it will do that. Okay, I already added this, which is the old URL, so the redirect is already there. So you don't need to worry about that, but we do need to remove the canonical URL. That's what I search for when we're updating the content. If there's no canonical URL, it's not going to try and update this file. 

    And the last thing we need to do is change the priority from four, one below half, to six, one above half, so that Google and everything knows that we have updated this content. So there's a do not; don't change the date. There's a hidden value, which is when we save this, it will automatically take that the last time we edited it as the date in there, so that's fine. 

    And that's us. If I save that file and close it, we've now changed the file, but we need to publish it. So I need to go over here. You'll see it says one file pending changes. This is our source control. So if we go into source control, we've got our index, and I'm just going to grab this title, in fact, including the little hashy bit, the whole thing, and I'm going to say "Updated new copy for this." 

    Okay, so this will link everything up and make sure it's all connected properly. You don't have to put it, but you have to put some text in here. And then I'm going to commit it. Would you like to stage all your changes? Yes, you could say always. I'm just going to say yes. This effectively, you've got changes, stage changes, and then you commit the staged changes. That way, you can have changes that you don't commit. Like, you could make packages if you're doing lots of changes, but don't worry about it now. 

    We've saved it locally; we've published it locally, but we need to push it to the server. So I click this "Sync Changes." Okay, so now it's pushed that to the server. So if we go over here, go to pull requests, you'll see here's our copy. It's now published into source control in a branch. We need to get it onto... we need to start the process to get it published for reals. 

    So we create a pull request, and it will basically take exactly... I'm actually just going to fix that there. It always does that because it's just long. I'm going to do that draft. There we go. So now that's going to publish a canary version of our product. 

    Okay, so this is where we can see what are the changes that we've done, what do they look like, how are they used. So if I go along here, you can see it's got the action. So if we have to have a chat about it, we can do that in here. We've got the commits, so what are the number of changes we've made? Only made one, and we've got the files that we've changed, which is only one. 

    So if I click on "Preview Changes," it will actually show... it's kind of a weird view because it's in line. It will show all the changes that we've made. So minuses are rows that are deleted, pluses are rows that are added. So we kind of deleted the title and added a new title. We deleted the four and added the six, and then you'll see it's kind of doing it line by line. But we replaced with the new copy that's much longer. 

    Okay, so that all looks pretty good. What you would do... and we can probably set it up as an automatic... but you can ask... I can't ask myself for a review, but you'll have me in there, so you'll be able to just click on me and ask for a review. What we're waiting for is for it to all publish. 

    Right, so you can see there that it's done some stages already. It's done "Run Data." Yeah, it's building the site right now and building the APIs, and then it will publish the site once it's finished publishing the site. We'll get a little message in here to tell us it's been published. 

    Okay, so it's finished publishing the site. You can see all the checks have passed, so everything looks good. Now we can go check out the new page. So I'm using Control again to open this, and this is a special copy of the whole site, 146, just for you. So we're going to go in here. You can see it will say "Canary" at the top, and there's our pull request number. 

    And we're going to go into videos, and then we could probably just find it, but what I'm going to do is I'm going to nick the URL. We're in videos. I'm going to put that on the end. There we go. So now this page is "The Hidden Cost of Pro Quality Code and How to Turn It into a Super Power" is the new title. 

    So there you go. There's the new site published. So we can come back here. Somebody will approve it, and then we need to... it's ready for review, and then you submit for review. It's all good. We've checked it. Like, you can check this and then make a change. 

    Okay, so let's say we weren't happy with what it looked like, and we wanted to make a change. I would go back to my Codespace over here, and I would go edit this file again. So let's say, I don't know, let's say I did want this to be here. So I would make that change. I would go over here, put a copy, commit it locally, push it to the server. This would start again. A new post will get made because this will be refreshed with the new version, and everything will be good. 

    But we're not going to do that. I'm going to merge that pull request because we are, in fact, happy with it. So I'm going to merge it. It'll ask me how do you want to merge it? I just want to do this. Confirm. There we go. So that is all merged in. That branch that we were working on has been deleted. Therefore, the Codespace is still there, but I'm pretty sure that will vaporise in a little bit. 

    And we go back here, and we're done. That is heading to preview site. So if you want to know when it is done, you'll see this one here on Main is heading there and doing all the stuff. So this will publish it to preview, and then we need to manually publish it to live. But this is a good way to see that. So that'll end up on preview. There you go.
- id: 9PBpgfsojQI
  title: 2023 is predicted to be a very tough year. What do you think will be needed to win and improve?
  description: Discover key strategies for thriving in 2023's challenges as Martin Hinshelwood explores the essentials for successful Agile leadership and adaptation.
  captions: |-
    Foreign

    2023 is predicted to be a very tough year. What do you think will be needed to win and improve in 2023? 

    Businesses need to be more astute than they are now. I work with organisation after organisation that have no idea what their cohesive corporate strategy is. They have no idea what level of quality they really want in the products that they create, and they have no idea of what is really needed to understand what it is we need to build. Addressing those things is going to make the difference between being successful in 2023 and being unsuccessful in 2023. 

    There's quite often a fine line between businesses being profitable and businesses not being profitable, and it can be very small things that make that difference between profitability and not. If you're building products that are delivered in a market where there is lots of choice, then you have to be more attractive than your competitors to your customers. 

    If you're slow at delivering what customers are asking for, if you don't have all the features that they're looking for in that particular market, if you're losing your skilled employees because they're unhappy and taking their knowledge and skills elsewhere, perhaps to your competitors, then you're not going to be successful. 

    If the market is hard, right? If everybody's under hardship, those that are going to be successful are the ones that are investing in people and investing in their ways of working. If your ways of working are more effective than your competitors, you'll be successful. 

    I think that's really what it is. You need to be more effective than your competitors, and Scrum and Kanban are tools that you can use to highlight through data visualisation the current state of what's going on in some of those spaces so that you can look at it and know what you need to improve. 

    The big things to invest in: product ownership is hugely lacking in organisations. Most organisations have no idea what a product backlog should look like. They have no idea how to analyse the market that their business exists in, and they need people in their organisation that can do that. Those folks aren't going to magically be able to do it; they need training. They need training and they need practice. 

    That's one of the reasons that we offer an extra hour of coaching—60 minutes of one-on-one coaching for every student—because I know how difficult it is. You come and take our product owner class, and then three months later you've got all these questions and no way to get answers because your business won't fund a one-hour coaching session with the trainer you had three months ago. So we just include it in the process. 

    In fact, if people just wanted a chat, I've got a way on my website to book 30 minutes, book a coffee with Martin, and just have a chat about product ownership, about how to get more out of it. It's actually just product management, right? Product management and the product owner is the same thing. 

    How do you leverage those capabilities that Scrum can enable for your business, or Kanban as well can enable for your business to get better at delivering value? That's going to be the big difference: are we delivering value to our customers?
- id: 9TbjaO1_Nz8
  title: Would you recommend the PSPO course to an entrepreneur and why?
  description: Discover how the PSPO course empowers entrepreneurs to create value and grow products that delight customers. Join Martin Hinshelwood for insights!
  captions: |-
    I would definitely recommend the PSP Auto and entrepreneur. I invite the advanced PSPO as well, but that key focus on value from the PSPO and what add your product management looks like are all key things that an entrepreneur needs to bring into their way of doing things, their story of how things happen for them. Because usually, especially for entrepreneurs, their organisations are very small, especially at the start, and they're going to be fulfilling the role of product owner. They're going to set the tone for leadership and product management inside of their organisation. Even if later on they're handing that torch off to somebody else because they're being successful, they're making good decisions, and then they're getting a little bit bigger and they're able to hand that torch off, that torch needs to come with, "Here's what we're trying to achieve, here's where we're going." Yes, we have really thought about value, and I think it's even more important for an entrepreneur because you want to get past that startup phase.

    I don't know what percentage of organisations fail; I don't know the exact percentage of organisations, startups that fail, but it's most of them, right? Most startups are going to fail, and one of the reasons that they fail is that they don't have that tight focus on value. They don't understand what's value, what's value to their customers, and they haven't had those conversations, written it down, understood it, discussed it. We have loads of tools in the product owner class that you can use as part of that story. How do I figure out what those things are? How do I think about those things in order to bring everybody in my team along with me and help us understand what it is we're trying to achieve?

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 9ut4YZSkDg8
  title: PSPO In 40m
  description: Unlock the secrets of the PSPO exam in just 40 minutes! Join us for essential tips and strategies to ace your certification with confidence.
  captions: ""
- id: 9VHasQBlQc8
  title: The Importance of Patience and Trust in Building Agile Organizations
  description: "Unlock Agile success with patience! Discover how this vital virtue builds trust, navigates setbacks, and fosters a non-blame culture. Watch now! \U0001F31F"
  captions: |-
    In order to be successful, organisations need trust, and trust comes from the virtue of patience. Your organisation needs patience and tolerance with the people in the organisation who are doing the best they can within the context that they have and hopefully trying to create the best possible product. If they're trying to create the best possible product and something goes wrong, there's a failure. Things don't go like we expect, or we create something that doesn't look like we expect. Sometimes that's just a fact of life, right? Not everything's going to go the way you want it. Not all of the outcomes are going to be what you want.

    Everything that we create when we're building products is something that may or may not work out, may or may not be successful. We're taking a bet, right? We're saying we think this feature, this capability is going to be successful, or we think these practices are going to work for us as we're trying to do things in the organisation. We think this new tool is going to work, and we don't know any of those things are true until we actually get to the end of that process or at least some way through that process, and we have something usable that we can validate with our customers, with our users, within our world, to be able to create good outcomes.

    So, businesses need to be patient with teams. Leaders need to be patient with people. Product owners need to be patient with the product, right? With the people that are building stuff in the product, are we getting to where we need to go? If we get frustrated and create a blame culture within our organisation, we are not going to be successful because we're going to erode the trust that is the foundation to empiricism. One of the key things we need to build trust is patience.

    If you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility.
- id: 9z9BgSi2zeA
  title: 'Hiring an Agile Coach: What to Look For in Both Technical and Leadership Engagement'
  description: 'Discover 5 essential tips for hiring an #AgileCoach with Martin Hinshelwood in this insightful #shorts video. Make informed decisions for your team!'
  captions: |-
    If you're hiring an agile coach, not only do they need to be able to engage and gain credibility with the technical folks, they also need to be able to engage and gain credibility with management and leadership in your organisation. This means that they need deep technical understanding of business, particularly within your context. 

    So, if you're a financial organisation, you're going to want an agile coach who understands the financial ramifications in business of your organisation. If you're a tech company, then they need to understand the business of tech so that they can more effectively help leadership and management be more agile.
- id: 9zxymM9WMaU
  title: Crown Estate - Introduction to Scrum
  description: Discover the fundamentals of Scrum in this engaging introduction by Crown Estate, perfect for beginners looking to enhance their project management skills!
  captions: ""
- id: A0Y-zySHXyc
  title: What are the barriers that prevent developers from fully accepting a Product Owner as the final decision maker?
  description: Explore the barriers hindering developers from accepting product owners' decisions. Discover the importance of respect and accountability in agile teams!
  captions: |-
    What are the barriers that prevent developers from fully accepting a product owner as the final decision maker? Wow, there's a lot of barriers to that. I see that all the time at the moment. Other people not respecting other people who are perhaps more senior, not respecting the product owner is probably the biggest barrier, right? It's other people coming down and saying something different to the team from the product owner or going behind the product owner's back or agreeing with the product owner in person but then getting in a larger environment with more people and perhaps recording is on than disagreeing with them and seeing it different.

    I had an experience recently where a product owner was really, really frustrated because they'd been collaborating with somebody in the organisation to get the backlog all like this is what we need, this is what we're doing, and they've been collaborating with them quite heavily. They've had lots of private meetings with them where they collaborated and literally written the backlog items word for word like that key stakeholder, that's the way they wanted it, and collaborated heavily on that. And then they get into the Sprint planning and the stakeholders like, "No, that's not what I want." 

    And it's like, that is explicitly... there's a couple of things there, right? Apart from being a bit douchey, right? That's one piece. But because it's then in that group team forum, it undermines the ownership of the product by the product owner, right? That totally undermines it. And if the developers, the people doing the work, see that the product owner is being undermined, well, I can't really listen to the product owner. I still have to run it by Bob or I still need to speak to Janet or whoever it is that is doing the undermining. And as more and more of those things happen, the less the developers are able to feel that they are able to respect the product owner as the final decision maker, right?

    And if you look at the Scrum guide, who needs to respect the product owner as the final decision maker? Everybody in the organisation. Everybody. Not just the people below them, but also all of the people above them. If you're above a product owner and the product owner is consistently not making the right decisions, get rid of that product owner and get a new one. That's your call, right? You've hired somebody to do a job. If you don't think they're doing a good job, you don't undermine them. You get rid of them, right? And that maintains that respect of product management, that respect of product ownership, right? That the team sees that the person that's appointed is respected by management, even if management might not necessarily 100% agree with all of the decisions that are made. 

    But if most of the decisions are made result in value delivered to the business, because that is the true outcome, right? What you find... yeah, I'm going to add an additional bit because what you find is that that disrespect or undermining of authority of the product owner comes from a position of maybe one key stakeholder not wanting to give all the information, not wanting to take accountability for their decision, right? 

    And it just results in nobody having any capability. Leadership doesn't take the accountability, the product owner can't take the accountability because they're continuously undermined or the ideas are changed without their knowledge or understanding, and the developers... there's no credibility in that story. So then if I were to come back to the question and answer it in one word, what are the barriers? There's only one. What is the barrier that prevents developers from fully accepting a product owner as the final decision maker? And it's accountability. Or in three words, a lot.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: a2sXBMPHl2Y
  title: How can companies derive greater benefits from training by investing in a private training course?
  description: 'Discover how private training courses can enhance team effectiveness and drive success in your organisation. Unlock the power of tailored #Scrum training!'
  captions: |-
    A good question. So how can companies derive a greater benefit from training if they invest in a private course rather than just sending people piecemeal to public classes? I think it's an interesting question, and I think it's because ultimately, because you're able in the context of that class to air your dirty laundry a little bit more than if you go to a public class.

    I always try and create a safe space in public classes that people feel that they're able to talk about things that are happening in their company, and everybody else in the room's going to, you know, kind of pretend they didn't hear it afterwards, type of thing, so that we can talk about things. But you don't feel as comfortable as perhaps you can be within the boundaries of a single organisation.

    Quite often, and I've had this with certain private classes where I'm talking about professional Scrum, and I'm talking about continuous delivery to production, and I'm talking about unit testing, and I'm talking about just all of those things around DevOps and Agile. There are people in the room that will say we can't do that here because of XYZ. What's very interesting is you'll have somebody in the room that says, well, actually, on our team, we are able to do that. 

    And I say, okay, well, why can this team do that in your organisation, but these teams believe they can't? That can be an important discussion to have because if somebody can do it, you can pretty much all do it, right? 

    The dirty laundry, that realisation of the possible through talking to other people in your organisation, if everybody in the group is on the same team, it's also a little bit different. I've done Agile leadership classes with the whole leadership team for an organisation, and that brings up interesting conversations. Quite often, they're conversations that the participants believe they should have already had. 

    Why do I need to come to this training to have these conversations? But it's that they weren't provoked, right? It's comfortable to not have those conversations, to do the same thing that we've always done, you know, running on the treadmill, getting things done. But sometimes you need somebody to provoke you into thinking differently, provoke you into thinking about how you do things. 

    I think that's the same is true for consulting and training, but especially for private training. There's a lot of provoking and asking difficult questions, and maybe the questions they don't want to answer, right? Because in not one thing to answer it, they realise something about themselves as well. 

    So that, for me, is the added value to private classes, is that there's a lot more candour than maybe there might be in a public class. 

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.

