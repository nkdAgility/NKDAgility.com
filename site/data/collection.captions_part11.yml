- id: 3S0zghhDPwc
  title: 'The Overlooked Virtue of Agility: Diligence'
  description: Unlock the power of diligence in Agile! Discover how attention to detail can elevate your projects and drive success. Watch now for essential insights!
  captions: |-
    One of the key agile virtues that's often overlooked in organisations is diligence. Diligence is that attention to detail; it's doing the things that need to be done, having that level of focus that enables those things to happen. It's having a definition of done and following it, not just saying it's on the wiki, right? You actually follow it. Everybody on your team has the diligence to understand the definition of done, know the direction, and have the grit to follow it. You're not just paying lip service to this level of quality. Your definition of done is your compliance bar for what needs to happen in order for your product to be able to ship, and that is the diligence that your organisation expects.

    The reason organisations and businesses don't really talk about the definition of done from a leadership perspective is because it's just expected that we'll have a level of quality that they're able to use. That's just the default. But unfortunately, it's not the default in many teams. So, have the diligence to create a level of quality, meet it, follow it, and perhaps expand it. Increase your level of diligence, increase your level of quality in your product, in the way you approach the work, in the way you approach working with others, and make your organisation successful.

    If you are having difficulty getting the most out of the seven virtues of agility, then my team at NE Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need naked agility.
- id: 3XsOseKG57g
  title: What do people love most about the 4-day training format?
  description: Discover why learners love the immersive 4-day training format! Join Martin Hinshelwood as he shares insights on enhancing your Scrum journey.
  captions: |-
    So what do people love most about the four-day trading format? It's not two full days. I think that's what they love most, right? I don't have to sit in a meeting or in a room for eight hours. That just sucks. I feel like the four half days is quite a good intermediary format. I think there's a better format coming, which is either going to be four half days over two weeks or eight half days over eight weeks, right?

    But I think the four consecutive half days gives you enough time to absorb the content, do a bit of reading, right? Think about what it is that we've been working on and then come back the next day with more, better questions. I think that for me is the core value of the four half days over the two full days. I actually still do two full-day classes, and I really struggle in them to pay attention the whole day, right? Because that's a long day. But also, to really understand and rock the content, you kind of need that gap.

    So having that four hours and then you've got the full 24 hours gap and then another four hours does seem to add value to the class. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 3YBrq-cle_w
  title: How will a PSM II course challenge your assumptions the most?
  description: Discover how the PSM II course challenges your assumptions and elevates your Scrum mastery with insights from Martin Hinshelwood at Naked Agility.
  captions: |-
    How will a PSM-2 class challenge your sub-assumptions the most? I think fundamentally, people's assumptions about what they think a Scrum Master is, what they think a Scrum Master does, and how they think a Scrum Master guides the team. The number of times that we have to hit on those myths of what people think Scrum Masters are, right? I mean, are Scrum Masters or Jira admins? That's a good one. 

    So, realising they're not a Jira admin, they're not there to solve the team's problems. Right? Get impediments out of the way of the team is apparently the Scrum Master's problem. It's like, oh no, they're there to cause the removal of the impediments, right? Which means they probably don't do the work themselves; they're helping the team do the work themselves and effectively doing themselves out of a job, right? You want to be invisibly present. That's a great phrase that I love from the PSM-2: being invisibly present, right? 

    You're there, you provide value, you help shape and guide the way people are organising around the work. But then, if you're off for two weeks, the work still happens. If you're away for two weeks, the retrospective still happens, the daily Scrum still happens because the people on the team understand the value that it provides rather than just being told to do it by the Scrum Master and having to turn up and be told what to do, right? 

    That, for me, is the biggest transition from Scrum Master into the advanced Scrum Master world. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 4fHBoSvTrrM
  title: How will a PSM II course challenge your assumptions the most?
  description: Discover how the PSM II course can elevate your Scrum Master career. Join Martin Hinshelwood as he shares insights on advancing your Agile journey!
  captions: |-
    Oh, that's a good question. How will a PSM2 class help a Scrum Master progress in their career? I think the thing we tackle in the PSM2, or the advanced PSM, is the things. 

    Alright, how do I explain this? Craft is a great word for this. When you do things for long enough, craft builds up all the things that are holding you back, like the barnacles on a ship. They're making it slower, it's less effective, it's less sleek, and the PSM2 is about scraping those barnacles off so that you can go win the race, so you can be more effective. 

    We pick up all sorts of weird things that we... it's the way we work, right? Our ways of working get indoctrinated into the company's way of working, and sometimes we're forced at certain points in our career or in doing stuff to make compromises. Those compromises work great in that space, but then they become enshrined in the way we do things, our craft. We adopt some of that craft, and we need a little bit of a reset to figure out what is and isn't the ship and what is the bit we can get rid of. 

    If I'm back to the barnacle analogy, the PSM is about removing the barnacles from the ship. That's really what it's about. It's about identifying those things that you find that Scrum Masters get pushed towards in organisations because perhaps when they were starting out as a Scrum Master, they didn't have the confidence to say no or the confidence to correct leadership or the confidence to challenge leadership and say, "No, we need to do things a little bit different to be more effective." 

    Then that craft gets just added to our baggage. So it's really that differentiation of, again, what does a professional Scrum Master look like? Here are a bunch of things that we've learned how to do, and then bring it towards what we do want people to do as a Scrum Master. 

    I think there's lots of people who are Scrum Masters who perhaps have been Scrum Masters for quite some time and have had no formal training. They've not had any experience whatsoever of exposure to... maybe they might not even have ever read the Scrum Guide. That's quite... I have met those folks as well. 

    They've been doing it, but they've been doing the role. They've been picking up the accountability, they've been doing the things in the organisation, and they don't want to go do a Scrum Master class because they're like, "Well, I know how to be a Scrum Master." Right? They don't, but I don't know how to be a Scrum Master. 

    Perhaps the advanced Scrum Master is a good way to level set a lot of those myths, and that's something that we do at the beginning of the PSM2, the advanced Scrum Master classes. We kind of try and kick some of those common myths that you see people fulfilling as a Scrum Master and reset very quickly. 

    At the start of the class, there's a quick reset to here's what it should look like. Based on what it should look like, what are a whole bunch of skills, workshops, activities that you could run with your teams? I feel like that's what the advanced Scrum Master really teaches. It's got that short, sharp level set at the beginning, and then it goes into a teaching through experience, right? 

    Through participation, teaching different techniques. We teach a whole bunch of different liberating structures to help not, you know, make getting a bunch of people together suck less because it generally sucks in organisations. How do different things go look at, right? 

    So how do you help the team understand and improve their definition of done? Well, there's little workshops and things that people can take away and do that, which is why I think at the end of the class, there's like 20 to 30 posters, a big infographic that you can take away to maybe leverage with teams and help them become more effective Scrum Masters. 

    How do I, as a more effective Scrum Master, help my team be more effective as well? So there's kind of two sides to it. There's the craft that we've built up doing the role, even if we wear a professional Scrum Master. Right? We passed our PSM1 like five years ago or even 10 years ago or 13 years ago, like myself. 

    We've built up some crafts and barnacles that get stuck to the hull. We need to knock them off, or we never had any formal training at all, and we've been doing the accountability, trying to do the accountability of the Scrum Master. Perhaps we've learned from other people's... we've adopted other people's barnacles onto our way of doing things, and we need that level set. 

    Then what are the tools and techniques we need? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 4FTEJ4tDQqU
  title: Why did you embrace Agile over traditional project management as a developer?
  description: "Join Martin as he shares his transformative journey from traditional project management to Agile, highlighting the power of people in software development. \U0001F680✨"
  captions: |-
    Okay, so the question is why did I embrace Agile over traditional project management practices when I was a developer? I don't think I did while I was a developer. I think the reason I picked Agile and Agile practices was because, as a developer, I was always subjected to the traditional project management practices. 

    I'd worked at Merrill Lynch, I worked for a number of design agencies, and I worked for a generator manufacturer and rental company. In all of those cases, they approached the projects in quite a similar fashion. Probably the most progressive was the generator company, which is weird, but it's because the boss was awesome. 

    That damaged me, I think. I definitely felt like these people didn't know what they were talking about, didn't understand what we were actually doing. It didn't feel like they even gave a crap. And then, as I started to do more DevOps, I started to migrate from development into the DevOps space. So not even the Agile space; it's the other side of agility from the technical side. 

    I started to get more engaged in the idea that, yeah, DevOps is great, but a lot of DevOps is about tools. I know people might dispute that, but a lot of DevOps is about tools, and a lot of DevOps in the real world is about tools. I started to realise more and more that it's not the tools that solve the problem; it's the people that solve the problem. And it's not the tools that are the problem; it's often the people that are the problem, right? 

    Because time and time again, I was using—I did a lot of migrations to Azure DevOps for customers, so moving them from whatever they were doing before to Azure DevOps. They wanted to do the same stupid stuff that they did with their old tool with Azure DevOps, and I had to try and explain to them that the reason this tool is actually a problem is not because the tool is a problem; it's because of the way you're using the tool. 

    A lot of them did it deliberately, right? They're like, "Yeah, we've totally messed up this tool, and we really want a clean slate to go into this new thing." And then we don't have all the baggage. And I'm like, "Yeah, but you're bringing this baggage in, that baggage in, this other baggage." And that's where you start talking to people. You start convincing people to start thinking about working in different ways, to simplify their process, to reduce levels of bureaucracy, custom fields, and rules. Oh my goodness me! 

    If anybody's used Jira as your DevOps of old, custom fields and rules are the bane of your life. And trying to go back to defaults, right? Do you actually need that thing? Does it actually add value? Does it bring you joy? You know, only have those fields, those rules that you absolutely have to have to do business, and you don't really want anything else. 

    So my move was through that technical, going into the high-level technical, and then kind of sideways into agility. I actually went to Australia to do the PSD beta for the old PSD class from Richard Hunt Housing, and that was where I got introduced to Scrum. Because in order to be a PSD trainer, I had to take a Scrum class. 

    I just totally, totally made sense, right? It just made sense. It fit the ideas, solved the problems that I was—or enabled the problems to be solved that I'd been looking at my entire software engineering career. I wanted to help other people do those things better because I saw in all the customers that I'd had that this would start to solve their problems too. 

    But I still came in for the next probably five years with a DevOps focus. But as soon as you come in, remember you come in with one focus because the customer says, "We need some DevOps help." And then you're like, "Okay, you say you need some DevOps help, but actually, you need to fix this problem over here, which is about people in organisation and bureaucracy and how you organise your business in order to maximise the value they create." 

    The engineers can take care of this DevOps stuff over here. You get smart people, right? They're just constrained and aren't able to actually do things. I think that freeing nature of agility is what kind of drew me to it. 

    Thanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 4kqM1U7y1ZM
  title: What would you look to achieve with a new scrum team in the first 90 days?
  description: 'Discover what to achieve with a new scrum team in 90 days! Join Martin Hinshelwood from NKD Agility for insights on effective agile consulting. #Agile #Scrum'
  captions: |-
    Hmm, that's a good one. What would I hope to achieve with a new Scrum team in the first 90 days? Uh, 90 days should be enough for everything. That's my view. 

    It depends on where the team is and where their organisation is and what the organisational constraints are going to be, because I'm sure there's organisations I've gone in to help teams with where there is very limited support from the rest of the organisation, and then you're working within that bounded box, right? You can poke at it, but you get limited ability to do that. 

    But if you have an open, receptive organisation, an open, receptive leadership within the organisation, you should be able to take them from zero to a hundred in 90 days, right? They should be able to go from barely able to deliver a working product or not delivering a working product at the end of every Sprint to continuous delivery in that time. That should be where you want to get them at the end of that 90 days. 

    They are able to continuously deliver a usable working product to production, separating out the ideas of release, which is a business idea, and delivery, which is an engineering practice, and enable the Product Owner to better represent the value, right? The business now has an understanding of what value is for them, right? Because that's different for every organisation. 

    What value means to them so that you can then have rational conversations with them about what things are more important than other things and why, so that you have an ordered backlog, a direction, a goal, right? What is it we're trying to achieve together? And that then informs that release side, right? What are we actually going to ship? 

    You've got that engineering side with the continuous delivery of value to production, right? Continuously delivered to production, and then you mesh that together, then closing the feedback loop, right? With learning. So are you then able to collect telemetry and talk to users and figure out whether you're actually building the right thing or the business value idea is actually correct? 

    Have you validated them and then close that feedback loop all the way around to change what it is we're working on based on those things that we learned? That's kind of the minimum that I would expect to get to in 90 days. 

    And then hopefully within those 90 days, I found somebody within that organisation who is able to be the champion for this process, or everyone being the champion for this process, this new way of working going forward, so that at the end of 90 days, right, I can back off. 

    Let them get on with it, right? They've built their unique organisational structure, right, that fits them like a glove, that they're then able to take forward and use. And then perhaps be available to help tweak, coach, answer questions, and be available after that. But ultimately, it's their problem to solve; it's their work to do. 

    If we can get them to a certain place in the first 90 days that they understand it, then they should be able to take it from there. 

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 4mkwTMMtKls
  title: '7 deadly sins of Agile: Envy'
  description: "Explore the dangers of envy in Agile! Discover why copying others, like the Spotify model, can hinder your unique path to success. \U0001F6AB\U0001F4CB"
  captions: |-
    One of the seven deadly sins of Agile is envy, and for me, I think envy in Agile looks like just copying other people's stuff. That's one of the ways it manifests. We believe that if somebody else is getting success with something, then of course we will get success with something. The difficulty is that that's not necessarily true at all. 

    I'm going to rephrase that: it might be possible on a small scale. You're working with a team, and one of your colleagues, another Scrum Master or another Product Owner, is using a practice that they're like, "Oh, this is great! We do this and this, and we have this value stream, and we're able to get good stuff from that." You're like, "Okay, I'd like to try that." That's not really what I consider envy; that's just trying stuff. 

    Envy would be looking at a great example of envy, the Spotify model. The Spotify model is a fantastic example of envy. There is no such thing as the Spotify model. There was a presentation and a paper that a couple of folks who were leaders at Spotify did at a conference. I think they did a couple of conferences talking about what Spotify was doing, what their journey was, and where they currently were on their journey. That was them telling an example of how they did things, and everybody went, "Ooh, the Spotify model! Let's do that!" 

    They absorbed that into their organisation, but what folks don't realise is six weeks later, Spotify were doing it differently. They weren't doing what was defined in the Spotify model. A year later, they got rid of the idea of tribes and guilds and whatever else they were doing because it didn't work for them. They tried something, and it didn't work for them. 

    That envy of, "Oh, they're doing this awesome thing, so we need to be doing that awesome thing," I think results in a lot of FOMO, if you've heard that expression: fear of missing out. That's kind of part of envy. Other people are getting stuff, and you want the same stuff. That's where, at many levels, organisations fail. They fail at the process level because you look at a Spotify model, or you look at SAFe, or you look at any of those big models and say, "I want that! I want to install that in my organisation!" Then you pay lots of money to get it installed and then wonder why you're not getting the benefit. 

    There's the application level. I talked about this recently on a podcast. Installing an application that enshrines somebody else's business processes into your organisation is not necessarily going to be successful for you. The example I used before was SAP. SAP is a massive application tool, very common in our industry. If you adopt an SAP tool, it comes with a bunch of different capabilities. 

    Let's say it's invoice processing. SAP has a workflow for invoice processing that comes out of the box. It has certain ways that it does things, and you're giving up the way your organisation does things in order to adopt the way SAP does things. Does that kind of make sense? There are some things that you can adapt in SAP, but only within the bounds of what the developers that created it allow. 

    When you see some of your competitors perhaps installing SAP and building their whole procurement processes in SAP, you think, "Oh, we need to do that! If they're doing that, we need to do that!" Or if our competitors are adding these features to our product, we need to add those features to our product. That's following; that's envy. That's following, not building your own path. 

    Simon Sinek does a great video on this topic, and he talks about the "why." He talks about going to two conferences: one is a Microsoft conference under Ballmer, and one is an Apple conference. At the Microsoft conference, everybody wanted to know what their competitors were doing. What are their competitors doing? What are their competitors saying? What are they launching? What features do they have? 

    At the Apple conference, they didn't give a crap about what the competitors were doing. They were like, "This is the way we're going. We're doing this." It fits within our belief model: generosity, comfort, confidence, contentedness, friendliness, goodwill, kindness, benevolence, friendship. Those are the opposites of envy. 

    I think that if you can put aside what everybody else is doing and focus on what you need to do and what your customers need, you'll have a lot better time both in the process space, in the tool space, and in your organisational structure space. 

    Thanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 4nhKXAgutZw
  title: 'The Power of Kindness in Agile: A Core Virtue for Success'
  description: "Discover how kindness transforms Agile! Explore empathy's role in boosting customer satisfaction and employee engagement for organisational success. \U0001F31F"
  captions: |-
    One of the seven virtues of agility is kindness. Kindness could be compassion, it could be benevolence, it could be empathy, and it could be directed in a number of different places within our organisation. The two key things that I'm thinking about are, one, the customer. We have this relentless customer focus that we're trying to deliver something that adds value in the market. For that, we need to focus on the customer. We need to be compassionate about the customers' issues and their difficulties and what it is they're trying to achieve. That could be, you know, when dealing with bug reports, or it could be just with engaging with them and talking to them about the problems that they're encountering and trying to solve within our product domain. 

    We want to be benevolent; we want to be seen as providing them with something that helps enable them to do something else. If they see our product as a burden or they see our product as, I don't know, what's the cost version of burden? For me, burden's broad, and then there's a cost, like a cost centre. If they see your product as a cost centre, then they're not going to think of your product with kindness, and you're probably not thinking of them with kindness. 

    So that relentless customer focus, building empathy with your customers. Why do people queue up outside of an Apple store to buy the latest product? It's absolutely not because they have the best products; it's because there's an empathetic connection between the customers and the company and the products that they're trying to create and the vision and the outcome that the company has. Building those stories is really important. 

    You don't do that by doing something negative towards your customers. You don't do that by screwing them over. You do that by building, again, trust—building trust with the customers with kindness. The other side that I was thinking of was the developers. Are we, the people doing the work, building compassion and benevolence and empathy with them? How do our employees see our organisation? What do they think about our organisation? 

    I was listening to Richard Branson, and he did a talk where he was talking about that your employee happiness is a leading indicator of your customers' happiness. If your employees are unhappy but your customers are happy, it won't be long until your customers are also unhappy. If your employees are happy but your customers are unhappy, it won't be long until your customers are happy because people that are happy and engaged do the right thing. They do the thing that helps other people rather than, you know, kind of being dismissive and disgruntled. 

    You need people to think with kindness, and in order to do that, you need to demonstrate that compassion, that benevolence, that empathy within the context of your organisation to your employees, and they will then demonstrate that to the customers and build value in your brand, value in your organisation, and value in your market. 

    If you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility.
- id: 4p5xeJZXvcE
  title: ' shorts 7 Virtues of agile. Patience'
  description: 'Discover the first of the 7 Agile virtues: Patience. Learn how it fosters collaboration and enhances team performance in Agile environments. #Agile #Scrum'
  captions: So businesses need to be patient with teams. Leaders need to be patient with people. Product owners need to be patient with the product, right? With the people that are building stuff in the product, are we getting to where we need to go? If we get frustrated and create a blame culture within our organization, we are not going to be successful because we're going to erode the trust that is the foundation to empiricism. One of the key things we need to build trust is patience.

