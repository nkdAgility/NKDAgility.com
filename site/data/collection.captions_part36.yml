- id: Ig-HpUfQr3M
  title: Monitoring and Measuring for Success
  description: Discover how to shift from traditional budgeting to hypothesis-driven product development for maximum impact with Martin Hinshelwood from NKD Agility.
  captions: |-
    If you want to ensure that your products... I actually don't like the phrase "stay within budget." I know everybody uses it, but I don't think that way anymore. When I'm investing in things, I think about it as I have a pool of money, and I'm going to move that pool of money around where it's going to provide the most value. Right? So I need to be looking at... I need data, right? I need to understand what's going on.

    For example, I talk a lot about hypothesis-driven engineering practices. If we're building brand new products or even adding capabilities to existing products, I want to have a hypothesis-driven story. That means that we're going to have a... you know, it starts with an idea. What do we think we would like to add to our product? This could be applied to a thing on your backlog, this could be applied to the whole product, or it could be applied to a portfolio of products. Right? But what do you think you're trying to do?

    Then you would do some kind of analysis of that and figure out, well, what's the outcome I'm trying to achieve? Right? This is what I want at the outcome. This is the thing that I'm going to do that I think will help us move towards this outcome. What's the smallest experiment that I can run? And then I would look at how am I going to measure whether I've made progress towards that goal? And I'm going to regularly assess based on my progress towards that on whether I continue to invest in this thing or I don't. This can be at the small scale or it can be at the grandiose scale—any scale you like.

    So a good example is the Azure DevOps team at Microsoft. They were interested at one point in trying to answer a particular question. Right? So the head of the product, Microsoft called it the product unit manager, I think that's their technical term, has overall budgetary control. Right? So they have all the money. They know that that means people. Right? So they have exactly 600 people—it's not but exactly 600 people—and I need to allocate those people to the ideas that make sense in order to maximize my return on investment and keep my stakeholders happy, keep my customers happy, keep building products, and have an eye to the future on ideation and what is it that's coming next.

    So they're allocating people's time as the biggest expense. Right? So they had this idea brought to them that we'd like to help... this is the idea: we'd like to help customers discover and deal with their technical debt. Right? All they're building software that helps build software. So we're all building software, and we have technical debt. So it would be great if we could understand what technical debt we have and then have things we can do to help us—things that help us minimize that technical debt. So that's a grandiose idea; it's a big idea that goes across the entire product suite.

    You know, I'm going to allocate a bunch of time. So the idea is that I, as the product owner—the Uber product owner—there's lots of people in charge of different parts of the product, but the Uber product owner, product unit manager, decides we're going to try this thing. I'd like to see some experiments within the context of this story, and you folks figure out what it is you're going to do.

    So his lieutenants, who run the different parts of the product, come up with ideas on how to collaborate together. What are we going to do? What are the ideas we think we can have? They come up with some ideas, and they bring that, saying, "This is what we're thinking. This is what we want to try." Okay, cool, let's try this one. This looks pretty good, and they try it. This could involve 100 people spending some amount of time within a quarter, within a year, within a fixed time scale to try and create some features within this context. Right?

    So when we're spending time on this experiment, that's money not being spent on other things that we know are valuable. We're speculating on something that we think might be valuable in the future, right? That we might be able to do something with. So they spent a bunch of time on it. I think they spent about six months—four to six months on it, if I'm remembering rightly—and they come back and they're like, "We don't understand how to solve this problem." The things that they'd created, they'd managed to create some things, they'd got them in front of real customers—like myself, I'm their customer—got them in front of real customers, and they just didn't resonate. They just didn't provide value.

    They tried a whole bunch of different ideas. There were five or six different teams, different groups involved in it. They all had different ideas; they all collaborated together to create some of these ideas, and nothing resonated with the customers. So at some point, the product unit manager is like, "Right, let's not invest any more money in this because we're not... we've not got an idea that's good enough to move the needle or solve this problem."

    You could say that that amount of money—maybe they invested 10 million in this capability—was wasted money. You could say it was wasted money, but you could also say that there was a lot of learning involved. They learned not to go tackle that problem. They learned to save their money and spend it on something else. So in the traditional world, they would have spent years on that capability to find out that it was a bad idea. Right? Think of Windows 8. No, not Windows XP—Windows 8, sorry, my brain died there. The Windows 8 debacle, where Microsoft spent six years. They had 4,500 software engineers working on Windows. They had 15,000 other people involved in that story. So you're talking nearly 20,000 people working for six years. Imagine the cost in your budget for 20,000 people working for six years on a product, and the end outcome did not meet the expectations of the customer, did not meet the brand value, right? In fact, it detracted from the brand value, detracted from the customer experience, and you had a lot of unhappy customers that went to other products like Apple. Right? That was a big jump ship moment that people moved to other platforms.

    This fundamentally was the catalyst for Microsoft looking at themselves and kind of going, "Yeah, we're doing this wrong." This long cycle, long budgetary five-year plan, right? And not getting things very quickly in front of customers, very quickly testing and validating whether we're doing the right thing. That's what we need to be doing, and we need to be doing it on every product, everywhere in the business, at every scale possible—from the lowest teams working on products, hypothesis-driven engineering practices, to the board making decisions about which products and capabilities to fund and which products and capabilities to not. Hypothesis-driven engineering practices—you need to be doing it at every level of your business.
- id: il1GdfG7rWk
  title: 'Mastering Product Backlog Management: Essential Skills for Product Owners'
  description: Master product backlog management with our expert guide! Learn essential strategies for new product owners to deliver maximum value. Subscribe for insights!
  captions: |-
    One of the key things that new product owners need to learn is how to manage their product backlog. It's a key part of the story. Yeah, I will point out that you don't necessarily need to do it yourself, right? You can delegate it, but you remain accountable. You, as the product owner, are accountable for value delivery and for maximising the value delivery. If you have a terrible product backlog, regardless of whether you delegated or not, it's still going to be you that's held accountable, right? So you, at least, especially if you're a new product owner, you're going to want to learn how to manage a product backlog, how to order that backlog, how to write a good backlog so that you enable understanding with everybody who needs to be reading it.

    Um, so in order to do that, it does a lot of work involved in managing a product backlog. One of the key concepts that I think is often overlooked by product owners is that the purpose of the things in your backlog is they become ready, right? So the team can take them on based on everybody's understanding of it. You can't measure understanding, right? You just can't measure it. You can't say, "Here's a line in the sand," and at this point, everybody understands it. It's a lot more nebulous than that, a lot more fuzzy than that. So you, as a product owner, need to learn to read the room, to know what language you need to use in order to enable understanding, to know what sometimes people don't want to admit that they don't understand your thing, right? So you need to learn to be able to read when people are in that category and maybe do some more around it.

    But there are kind of four key vectors that you need to understand, you need to enable for your product backlog. The first one is risk. How risky are the things on your product backlog? And that could be fiscal risk, it could be operational risk, um, it could be lots of different types of risk. What's the risk involved? And if things are really high risk, those are the things you want to spend a little bit more time on upfront to understand them better, break them down, reduce the risk, right? That's key. That's part of refinement, right? Refining your product backlog is really important.

    You also need to understand the value. What are you going to get out of it? What do you think you're going to get out of it? Because remember, everything you think you're going to get out of it is an assumption until you actually get it in front of real users who are using it in production. Okay? So you need to figure out what we think the value is going to be and does the value we think we're going to get actually outweigh the risk, right? If the risk is too high for the value, perhaps we don't bother doing it. It's too dangerous, it's too risky for our product.

    Another thing to understand is the size of the items on your backlog. How big are those things? Um, that can... I'm not going to tell you how to determine what big is, but I generally have a conversation with teams, uh, the people who are going to do the work, right? They are one of your primary audiences. Do they feel that they understand it enough that they can deliver it in a single sprint? That might be a question to ask. If they do understand it enough to deliver it in a single sprint, you're probably good to go. If they don't understand it, it could be either because it's too big or because there's not enough information or they need more questions answered to be able to understand it a little bit more. And that's where refinement comes in.

    So we talked about risk, value, and size. And the last item is how we solve some of those problems is learning, right? Is there something that you need to learn, uh, by doing? Right? Remember Agile Manifesto: we learn more by doing. So maybe you can do, maybe you can try and build something small. Maybe you can, um, take on a little piece of that risk early on and try and do something in the product that hopefully alleviates that risk or at least you figure out more about that risk. That's product backlog management. You've got this overarching refinement. You need to refine this backlog to ready, and then everybody needs to understand it so that the team can deliver it and the stakeholders understand the value. Because if they don't understand the value, they're not going to turn up at the review, right?

    Um, so how are you able to do that? We have, uh, scrum.org have the new product backlog management course, which is specifically focused on this topic that takes you through a whole bunch of complimentary practices that can help you with that story. Uh, but there's also lots of different tools and techniques that we talk about in the product owner class, the advanced product owner class around that topic. Heck, even the professional scrum with user experience brings in that refinement story. And if you really want to get serious, then you probably want to bring flow mechanics into your story, as in have a Kanban strategy applied to whatever your process is for delivering, uh, your product and enable, um, the maximum throughput in your process while you're also focused on maximising the value. And that's an awesome combination, right? The ability to deliver and delivering the right thing. That's how you make awesome products.

    If you find it hard to manage your product backlog and maximise the value that you're returning, my team at Naked Agility can help, or we can help you find somebody who can. Don't let these sorts of issues undermine your ability to deliver value. Don't have a poor quality, not understood product backlog. Use the links in the description to get some help as soon as you can.
- id: IqWvURjrJVs
  title: Znaczenie znajomości terenu
  description: "Discover how understanding terrain enhances agility through Poland's unique mushroom foraging sport. Join us in exploring agile principles! \U0001F344✨"
  captions: ""
- id: Ir8QiX7eAHU
  title: 'The Key to a Kanban Strategy: Understanding WIP Limits'
  description: Discover how to optimise work flow with effective WIP limits! Learn critical factors for establishing them as a Kanban strategist. Watch now!
  captions: |-
    One of the key components of creating a Kanban strategy is WIP limits. If you don't have WIP limits, it's definitely not a Kanban strategy that you have. So when you visualise your work, when you do that workshop where you figure out what are the columns, the states, the activities that happen for any piece of work that flows through our system, and you create those columns, you're going to have to decide what your WIP limit is in each of those areas. Coming up with a WIP limit is a little bit of an art, right? It's like coming up with what's the Goldilocks zone for this particular activity.

    I actually found out that I really fundamentally thought that Goldilocks and the Three Bears was a completely ubiquitous story. But I was working recently with a group in Romania, and they don't have Goldilocks and the Three Bears as a bedtime story. It's not a thing. So kind of what we're talking about, and actually this was the bit that resonated the best for them, was think of what they describe as the Goldilocks zone in planetary physics. I know I'm sounding like a nutball here, right? But bear with me.

    In planets, when they talk about planets being in the Goldilocks zone, they mean it's between water freezing and water boiling, right? So you can have life when there's water, but you can't have life when it's steam. In general, that's where they—yes, I know that's possible—but let's say you've got that zone. If the water's frozen, it's probably very difficult to have life. If the water's steam, then it's very difficult to have life. So what is the zone within which it's just right? That's the Goldilocks zone. You can go look up the story, the fable, later.

    The idea is that we need to figure out not just our WIP limit for the whole system, but our WIP limit for individual stages in the system. The WIP limit for the individual stages, if we create individual stages, will probably inform the WIP limit for the overall system, right? Because you just add them up, and that's the WIP limit for the whole system. 

    So, the ideal WIP limit, right? There is an ideal WIP limit. If everything is perfect, the ideal WIP limit is one. The most optimal WIP limit in flow is one single piece flow, right? But that only works when our system is perfect, when it operates exactly like we expect, in the timing we expect, when all of those things are absolutely perfect. 

    The WIP limit is one. The thing I usually use to visualise that is I do a version of the coin game with teams. If you've not done the coin game, it's a great exercise where you give a group of people 20 coins. They flip them all to heads, and then it's a batch size exercise, right? So they flip them all to heads, and then they have to flip them all to tails, pass to the next person, and they have to flip them all to tails, pass them to the next person. So you've got this simulation of a production line, right? Something happens in this stage, the next stage happens, something happens there, next stage.

    In an ideal world, you just want one flip, the coin, move it on, flip the coin, move it on, flip the coin, move it on, and you'll have the maximum number of coins going in action at any point in time. Does that make sense? Right? If you've got a batch size of 20 and you've got 20 coins and you've got 10 people in a row, you've got one person working and nine people waiting all the time, the whole time. If you do a batch size of one, you've got 10 people working, and you'll get the fastest delivery of the first unit of work and the fastest delivery of all the units of work.

    Okay, but the world isn't made up of flipping coins, right? We're not—that's not what we're doing all day. We are writing code, we're solving problems, we're painting pictures, we're waiting on customers to reply. There's all sorts of things that make what we do a nonlinear thing, not a thing that just happens at once. So you're going to have to figure out for each of those columns what the most optimal WIP limit is based on your ability to keep things moving and the need to identify when there's problems.

    If we make the WIP limit 100 in every column, it's going to be difficult to identify problems because we'll maybe never hit it. We'll never hit the WIP limit. We deliberately want to constrain the work to slightly less than we can do so that we create slack in the system that enables us to see more of what's going on, ask more interesting questions, and figure out do we need to increase this or reduce this one. Those are the types of discussions that we want to have.

    Whenever we run workshops where we run simulations around this, that's the kind of conversations that people have in the groups. Who should we create the WIP limit bigger? Yeah, but if we create the WIP limit bigger, then there'll be more stuff in here, and there'll be more pressure on this part of the system. The people in the groups are then able to visualise those things and see the impact of those things, which is the whole point of a Kanban strategy—that everybody in the system understands the system that you've created better, and it allows them all to have more rational, more interesting conversations about how the system goes together and how we might change it in order to improve it or attempt to improve it, and then the impact of those improvements. You're able to monitor them.

    That is really picking WIP limits. Just make up some numbers at the start, pick stuff, and see what works. Increase them if they're too small, make them smaller if they're too big, and figure out where that optimal level is. If you're really searching for Martin, what would you recommend as our WIP limit? I would say in any stage, as a starting point, if you have to have a Martin says we should do it this way, if you have to have that, then pick one less than the number of people that you have performing an activity in that area. So if you have four people, pick three as your WIP limit and see how you go.

    If you're struggling to create WIP limits so that you can see what's going on in your system, then we can help you. We provide world-class Kanban training from Pro Kan, as well as consulting and coaching for teams trying to implement Kanban strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and also have Kanban classes from Scrum.org.
- id: iRrEjx1mOgk
  title: 5/7/2020 1 - 01 - 14 PM
  description: Discover the highlights of our latest event in this engaging video recap, showcasing key moments and insights from 5/7/2020. Don't miss it!
  captions: ""
- id: irSqFAJNJ9c
  title: What does a poor scrum team look, act and feel like?
  description: Discover the signs of a struggling Scrum team and learn how to harness the full potential of the Scrum framework for better productivity and success.
  captions: ""
- id: isdope3qkx4
  title: 11th April 2020 - Office Hours \ Ask Me Anything
  description: Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!
  captions: ""

