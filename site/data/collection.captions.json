[
  {
    "id": "_2ZH7vbKu7Y",
    "title": "Training: A Bridge to Knowledge and Growth",
    "description": "Unlock your team's potential! Discover 3 key strategies for agile leaders to uplift underperforming teams in this insightful video. 🌱🚀",
    "captions": "So the question is, what can a leader pragmatically do with a team that is identified as incompetent, right, but identified as deficient in some way? Before you resort to any kind of firing, there's plenty of things to do. You may want to bring in training. Training is a good way to broad pace some knowledge across a group of people. They might not remember everything that they learned, but I do find, although we might remember 20 to 25% of what we learned in a class, we learn that 25% is spread across all of the capabilities that you maybe learned. Maybe there's 30 topics, or let's say there's 25 topics, and you remember 1% of each of those topics. That 1% of the total course in each of those topics that you remember enables you to know where to go look, where to go find that additional information.\n\nAs long as the people that you've got have some kind of willingness to do things themselves, discover, right, then you can just broad paste some training. Perhaps applying professional Scrum for software developers, right? Get some broad paste of these modern engineering practices across the team. At least they're understanding them and thinking about them, and they can go do additional research on those topics. It shows commitment from the organisation on updating. \n\nBut if they're already in, I guess I would say, a dejected state, I worked at an organisation in the UK, another bank, and they had... I worked beside somebody who believed themselves to be unemployable because they hadn't done anything new in four years. That kind of depressive, dejected, they're already unhappy but don't know what to do about it state. You might find that over time they learn not to learn, right? They stop learning, they stop figuring stuff out because they're like, \"Why bother if I'm not going to be allowed to do anything?\" \n\nSo you need to build that back in slowly. You need to start encouraging them to learn new things. It might not be that you encourage them to learn; you might say, \"You need to learn this new thing so we can do this new capability.\" Have them learn the thing and then do the new capability. Have them learn the thing, do the new capability, suggest they learn the thing, drop in the new capability, right? So then they're expected to... it has them have that feeling of, \"If I learn it, I get value from it,\" rather than, \"If I learn it, I'll not get value from it because nobody's going to let me use it.\" \n\nSo you have to start building back in that capability into the team, into the whole organisation, right? Because people don't get that way out of the box. Most people that I have ever worked with, most teams, most people that I've ever worked with, are interested in learning more about their field unless the organisation has beaten it into them that they're not going to be able to use anything they learned. \n\nI spent my early career as a .NET developer, hopping between companies because I would go to a company because they were using .NET too, and then I would be working there for a couple of years. About halfway or three-quarters, you know, a year to 18 months in, .NET 3 would become available, and I'd be starting to learn that technology and then asking them, \"So when are you going to use this new technology?\" And they'd be like, \"Maybe in 3 or 4 years.\" And I'd be like, \"Okay, I'm job hunting then for somewhere that's pulling in .NET 3.\" \n\nThen I'm going to go work with that, not .NET 3. When .NET 4 comes out, I'm going to be learning that new technology, and then if my organisation isn't willing to change, then I'm going to change, right? Change your org or change your org. I think that continuous move into technology maintained my ability to be employable, my ability to learn and grow my knowledge and career. I personally wasn't afraid to switch between companies, but lots of people are, right? \n\nSo it can be beaten out of them very easily. That was through a number of organisations, investment banking as well as other stuff. But you need to create an environment within which people are rewarded. That doesn't mean financially, but rewarded for learning new things and figuring out new ways to do things. Do you give people the freedom to try stuff out? Do you give them the freedom to fail? \n\nDoing something about doing new stuff is... you might find things that don't work, right? Well, yes, we can do it this way. No? Okay, well, this bit doesn't work. We're down a dead end; we need to backtrack a bunch and then go down a different route. There's some waste in that, but the waste that you get from that is often overshadowed by the clever and interesting ways that you solve those problems and the capabilities that those ideas bring to the organisation. \n\nYou don't open out new markets, new capabilities, get new users by just staying in your lane. You have to be continually switching lanes and figuring out what the best way to solve a problem is. So if you have a team that you take over as a product owner or as a development manager or any way you come into contact in leadership with a team, if it feels like they don't feel they're allowed to learn, that they're allowed to use new things, that they're allowed to do stuff, you need to fix that problem in your organisation. Fix the system, and then you'll start seeing a difference in the teams. You'll start seeing a different vibe, a different capability, a different interest in solving problems in clever and interesting ways.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "_5daB0lJpdc",
    "title": "Introduction to Agility’s Ghosts: Shedding Dogma and Embracing Pragmatism",
    "description": "Uncover the truth about agile certifications! Join Martin as he challenges perceptions and reveals their impact on learning and growth in the agile world.",
    "captions": "One of the ghosts of Agile past is certification. We've been hearing a lot about it recently, with many folks being very dismissive or pooping on certifications a lot. I want to kind of add to that pile a little bit but also validate some of the value that we get from certifications.\n\nCertifications have had a significant impact on our industry because they get in the way. They kind of get in the way of learning a little bit. They really shouldn't get in the way of learning, but they do get in the way of learning. People get jobs because they have certifications, not because they are actually able to do stuff, and people chase certifications rather than the knowledge that is the thing that those certifications are supposed to assess.\n\nI'm going to say this now, absolutely categorically: there is no two-day course that any of you can go on and then pass a certification that will enable you to be the thing that the certification enabled you to pass. At the very most, I think of it like passing your driving test. Right at the moment when you are 17 or whatever age it is in your area that you passed your driving test, were you the most awesome driver out there? No, you were not. You were the minimum. You had the minimum information you need to not be a danger to those around you. Quite often, not even that. But mostly, the idea behind a driving test and the driving training that you get, which you don't have to do training for; you can just sit the test, is to ensure that you're not a danger to others.\n\nDoes getting your driving test mean you can also ride a motorbike? Probably not. Can you drive a ten-ton truck? Probably not. All of those things are additional licenses and certifications you need to get in order to do those other things, and usually, they come with additional limits and constraints as well.\n\nWhat I think the value of certifications is, well, the certification itself, if you just get given the certification, is not valuable. The value is in some kind of assessment at the end of your course, regardless of whose assessment that is. The value of it is whether you were paying attention to the core things that were expected to be paid attention to. Did the trainer manage to cover the core things that we expected to be in the class? Did I, as a student, understand the core things as they're intended to be in the class? Those are the minimum bars that we would like to meet, and sometimes things happen; sometimes we don't meet them. Having some kind of certification can help validate that knowledge a little bit.\n\nBut ultimately, if you're using certifications for job interviews or you're using them for some kind of professional acumen, or forbid this, if you've just passed a Scrum Master certification and now you've put Scrum Master on your LinkedIn profile or Agile Coach because you've passed an ICF certification, then get that off there as quickly as possible unless you've got the experience to back it up. You are not the thing. My first Scrum Master job is not the same as being a Scrum Master. So if you're selling yourself as a Scrum Master and you haven't even had your first Scrum Master class job, then that's probably not a good idea.\n\nMost of the best Scrum Masters that I've met did not go on a Scrum course and become a Scrum Master. They became a Scrum Master and then they went on a Scrum course. The way they became a Scrum Master was the team that they worked in selected them for that role because they were the most competent person on the team within the context of maximizing the effectiveness of that team. That's how the best people become Scrum Masters.\n\nSo if you want to be a Scrum Master, my advice would be to join a team that uses the skills that you already have and demonstrate to that team that you provide value, are effective, and are interested in their effectiveness, and can help them. They will select you to be their Scrum Master. It's not really a job title.\n\nThat's the certification ghost of Agile past. If you're being haunted by these ghosts of Agile past, we can help you exercise them or help you find a coach, consultant, or trainer who can. Don't let these phantoms undermine the effectiveness of your value delivery. The longer they linger, the more they'll haunt your team's progress or even destroy it.\n\nSend me an email to Martin at nkd agility dot com, and we will help you get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at naked agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "_bjNHN4PI9s",
    "title": "Ep 007 - Running a Live Virtual Classroom",
    "description": "Discover how to maximise your experience in live virtual classrooms using Microsoft Teams and Mural. Get tech-savvy for successful learning!",
    "captions": "Hey, welcome to running a live virtual classroom. My name is Martin Nature Wood. I'm a professional Scrum trainer with Rhonda Dark, and I run our company called Naked Agility out of Scotland. Naked Agility is available for DevOps and Agile training.\n\nOkay, so I've been running a number of live virtual classes. I've run two so far, and I have noticed that when students first come into the class, it can be a little bit difficult and daunting, not just maybe learning Scrum for the first time, but also learning new technologies for the first time. So I wanted to cover the two technologies that I will be using in my trainings. One is Microsoft Teams, as I'm using that for video conferencing and for some communication channels, and I'm also using a product called Mural for digital whiteboarding to get some of that feel of an in-person class.\n\nSo first off, Microsoft Teams. Microsoft Teams is a tool from Microsoft that allows us to create calls. One of the first hurdles to get over is connecting to Microsoft Teams. We do recommend that you download and install the app rather than use the web version. It gives a much better experience during the class. The web version is good if you're just joining a meeting for a short period of time, but we're doing two full days of classroom activities, and really having the thick client is important.\n\nWhen you connect, open up Microsoft Teams. It'll ask you to log in. You should log in with the email address that I invited you to the class with, and hopefully that will be the same as your corporate credentials, or it might be your Active Directory credentials from your corporation, or it might be a Microsoft account, like the same thing you log into Xbox or Skype. If it's not one of those email addresses, it might be your Gmail or whatever. You will be asked to enable that as a Microsoft account. Just like Google does this as well, you're able to enable any email address, regardless of what platform it's from, as an account you can use to log into Microsoft services. So it's just a case of setting that up.\n\nIf you're coming on under an MSA, I do recommend that you use your corporate credentials if you can. If you need to change your email address because your corporation might block your ability to log into Teams as a guest, then please ping me, and I will change your email to something else, and you may come in under an MSA.\n\nSo let's take a look at Teams. Teams is not the simplest application in the world. It does come with a lot of features, and we're only going to be using a small subset of those features. But it's useful to get just at some of the nuances of how you connect in. Now, you might have joined Teams using a meeting invite, and when you join using a meeting invite, you're coming in not as an authenticated guest, which means that you don't have access to some of the tools that we're going to be using.\n\nWhat you want to do when you come into Teams is, on the top right-hand side of Teams, next to your profile picture, there will be a little drop-down list, and it should say your company name if you normally log into Teams with your company. You should change that drop-down list so that it says Naked Agility Limited. That's my company. Once you've done that, you'll see...\n\nSo just reordering that. Here I've got a live virtual PSF on the 1st of January 2015 for my demo account here, and what I've done is created a single meeting that everybody in that team will have access to. So what will happen is I will add you to the team. I'll invite you to the team. You'll get an invitation request via email. Click the link, follow the instructions, and then you'll be able to come in here as a fully fledged guest in my Teams account.\n\nNow, once you're in here, if you click on any of the items that have this little symbol here, you'll be able to go in and open the meeting, and in the top right-hand side, you'll have a join button. So even if nobody else is in there, you will have a join button to be able to get in. If you click join, because you're already authenticated, it will just allow you to have access right away.\n\nSo I'm going to turn my video off so we don't get confused by what's coming up here, and I'm going to join now. Okay, let me make myself a little bit smaller. There we go. So once you're connected to the team, you'll obviously see the carousel of people's videos. You should have both a short conversation and a sure participants enabled, and if you do not, you have not come in under an authenticated account. You've come in under an anonymous account, which can happen. But if you come in under an authenticated account, Naked Agility Limited, then these buttons will be enabled for you.\n\nOne of the things that we're going to do as part of the team is we're going to work in breakout rooms. This is the main channel that will be open all day. This is where, when we get together, we have our big room events with however many people are in the class, and everybody will be in this room. Most people will sit with mute on. When people start talking, at the moment, you can only have nine videos in a gallery, and whoever's talking will be one of those nine videos in the gallery. If you have a particular interest in an individual, you can right-click on their picture and pin it to the gallery so that they don't disappear.\n\nBut what I'm going to do is I'm actually going to go over here onto the left-hand side, and you'll see the Teams button again. If you come in not authenticated, you won't have this. You should open Teams, log in, and switch to Naked Agility. But if I click on Teams, I'll go back to the main view where we're looking at the team. The call will be in this little display here, so whoever's talking will have the picture, the one picture you can have there. Then you'll see down here that this team has two channels: General and Team X. The General channel has a little icon to see that there is currently a meeting underway in that channel. If you go in and click on that channel, you'll see here that you'll have a big join button because the meeting is currently underway, and the same option to click through into the calendar item and start it. But because it's already started, you can just join it and go straight in, which is really powerful.\n\nWhen you're instructed to, you have particular exercises that are done in Teams. Each team will have maybe Teams 1, 2, 3, 4. Maybe they'll have names. It depends on the type of class we're running, but each of those teams will be listed here. I'll be creating them during the class, and if I click on this team, you'll see it's currently empty. It was brand new; it has nothing in it. But we want to create a space for that group of people to be able to interact. If there's not one already, you can actually click Meet Now, and then it's actually helpful if you put in the name of the team and then whatever else you want after that, and you can just click on Meet Now.\n\nSo now I'm in our second team meeting. Oh, there we go. So there's my... let us turn the camera off again, otherwise somebody might freak out. You can see on the left-hand side here that the other main room has been put on hold. If I go back to Teams again, you'll see that there's two calls started, and I'm currently participating in Team X, and I have Main on hold. This means if I just leave these calls open, so I don't click hang up when I change between calls, I can actually just go here, click play, and now I'm in the main room. So if I open up full screen, now I'm in the main room, now I'm in Team X.\n\nNow I'm in the main room, so I can very easily and quickly switch between those rooms. We normally run with multiple facilitators, so there will be somebody to help with this. But once you get to grips with it, you went to the team room for a short period of time, you pop back out when we're doing the main exercises, and it flows pretty well. It's a very quick transition.\n\nNow, one of the things that I can do is you'll see you've got a little short conversation at Wendell here in the main room. If I want to send you some information while you're in that room, I'm actually able, without joining the room, to go in here and hit \"Time is up\" to let you know to come back to the main room. When I send that in your Team X meeting that you're having a discussion at, this short conversation will actually light up, and you'll see the \"Time's up\" in the meeting chat on the right-hand side. That's a very quick way for me to do that. You may not notice. If you don't notice, give you a moment, then I'll pop in and say, \"Oh, we need to come back to the main room,\" because I'll be able to switch between multiple teams as well. I typically run this class with between 10 and 20 people specifically for the PSF, and I always have at least one additional facilitator to help make sure you can switch between those rooms effectively.\n\nIn addition to that, so I went too high on those two calls. Now hang up those two calls; they're finished. At the end of the class, you'll be invited to join the Professional Scrum at Community team here. This is a team that everybody that has gone through one of my classes is a member of, and in here, there's some interesting chat, but there's also access to the course where you'll have a direct link in the email that I send at the end of the class. If you use Teams to access this files and data, for example, if I open up the PSF, you'll see a list of the course where that has been available, and I make the PDFs available for each version of the courseware that comes out. So I'm continuously updating this, so if you did take a previous class, you'll be able to go in and get a newer version of the courseware when it becomes available. There's some extra material in here available as well, and if you click on Class Media, you'll have a folder for your team, your class, that only you and the people in your class will be able to access. That will only be visible to those folks, and it will have additional things like if we took pictures during the class, and if we used Mural and PDFed them or other things, then they will end up in that folder there.\n\nIn addition to that, I have a folder with all of the presentations that I do at conferences. Sometimes I'll mention them in the class because it adds value to our discussion, but maybe not 100% relevant for everybody, so we don't do it in the class. Plus, we only have two days, so you can go and see some of these presentations that have been done previously, and those recordings online as well on my YouTube channel.\n\nSo that was a kind of walkthrough of how we'll be using Teams in the class. Hopefully, that was useful and will help you figure out how to get things going as quickly as possible. One of the things we do find is that the first half day can be a little bit lengthy when folks don't understand the technology or haven't used it before. So just this is just to give you a quick brief.\n\nI think we need to have a look at the second piece of technology, which is Mural. Okay, so Mural is a digital whiteboarding tool, and it's reasonably powerful. We've been using it quite extensively for classes. Both of the classes that I've run have used it, and many other Scrum trainers have used this class as well. Let me switch to Mural. Mural is available in the web. It has a number of pretty straightforward capabilities, as well as some advanced capabilities as well, and I'll be sharing a link directly to the individual mural with you, and you'll be able to go directly into that mural.\n\nSo this will just take a second to load. There we go. So this is the mural that I'll be using for my class on Monday. Well, this is the kind of demo make a mass version of it. In this, you'll see there's an outline on the right-hand side. If you don't have an outline, there's a button to toggle the outline up there. We'll start on preparation, where we'll do some introductions, and we'll figure out who everybody is, what we're doing here, and that kind of thing. We will also have slides in combination with this as well. Just to note that if you want to take notes or you're asked to add data to these pages, you can actually just double-click anywhere on any page, and it will put a post-it there. If you want to change your post-it colour, you can change it in here, and then you can add other post-its. If you do another post-it close to a post-it that you've changed, it will be the same as the one you just created. But if you do it next to other ones, that will be yellow, and that will be a purple circle.\n\nSo there's a number of tools to be able to do that: text, shapes, drawing, images. You can do anything you like on there and just move them around and do a bunch of things with them. What I'll be doing during the class as a facilitator, this is the facilitator's view that you're seeing now. I'll be able to go in here, and I'll be able to summon everybody to that point. So I'll be instructing all of the students in the class, might be 20 people, to all go to the same mural, and I'll see little icons down in the bottom for each of the students that are in here. When I summon everybody, they'll come and see the same thing as me. They'll have follow enabled on me, so you can see that somebody who's left it open on their computer from the last class and has anonymous elephant, and our self aunt is now following me. So as I drag around, as I move around, they'll have their display moved as well, and they'll see exactly what I'm seeing. So we can talk about it; we can have discussions; we can talk about those capabilities.\n\nIn addition to that, this is just the main mural where all of us will be working. There's also a separate team-based mural just for teams and for teams to work in for each class. Again, it depends on the class which murals we use. This is for the Professional Scrum Foundations class, and what I'll hopefully be doing is I'll be setting timers when we have time boxes. So even if you're in your separate teams meeting, you'll be able to see the timer. I would point out that the timer is JavaScript-based, and if you switch away from the display and then back again, the timer does not keep the correct time. So if you have more than one mural open and you switch between them, the timer gets out of sync with the real world. It's a little bit of a bug in Mural, but I'm sure they'll fix it at some point. Ultimately, having a timer that you set on your phone for the time boxes that are described will help a great deal and help us make sure we keep on track and come back, and we don't have to chase everybody so much.\n\nQuite often, we extend the first exercise, the first time box. We have a kind of team-building exercise at the start, and we often extend it just because first use of the tool, people need a little bit of extra time. So I'm going to end that timer, and when the timer is up, it will actually pop up a little message on your screen that says \"Time's up.\" It's not super obvious, but it's not super hidden either. Then we will go back to the main room and maybe bring some of that discussion that we've had back to everyone in the organisation.\n\nIn addition to that, we might do some voting. Quite often, we maybe come up with five or six ideas for something, and then we want to have a vote on it. This is something that you can do in your team rooms as well. Actually, maybe you can't, but you may have edit rights, but you maybe can't do a voting session. That's a good point, so ignore me on that. But we might do voting sessions as a group, so I will create a voting session. I'll say how many votes everybody gets, and I'll start that voting session. You can see you can click a card to add a vote and shift-click to remove a vote, and your voting is anonymous. Nobody else sees your votes until the end, and so we can begin voting. I can add two votes to one card, one vote to another card, and I have no votes left. I can see how we're getting on, and maybe I don't know. It's a little bit anonymous who voted for what, but I can call out that there are three votes left from people. I'll give it a set amount of time, and then I will end the voting session. When I end the voting session, everybody will see what are the stickies, what are the posts, what are the items that everybody's voted on. This can be very useful for facilitating classes and Agile training.\n\nOkay, so Mural is fairly straightforward. This is the mural that I created just as a playground for students. I usually do a tech check before a class, and I take them through and live this type of exercise, which maybe helps them really understand what it is they need to do. So I would very much like to have that many of you in my class. I'm going to be sending this video out to prospective students as a short introduction, and commit 23 minutes to get started with both of those capabilities: logging into Teams, working out with Mural, and then coming back to the main group. All of the murals will be PDFed at the end of the class and available for all of the students to download. It's a very powerful tool.\n\nCool, so that was really everything I had for folks. That was Teams and Mural. I'm hoping that that will make it a little bit easier for you to get started in one of my classes or anybody else's classes or training where they're using Teams and Mural."
  },
  {
    "id": "_Eer3X3Z_LE",
    "title": "What is a product backlog?",
    "description": "Discover the essentials of a product backlog! Learn how it helps agile teams prioritise tasks for successful product development with Martin Hinshelwood. #shorts",
    "captions": "So a product backlog is really very misunderstood. A product backlog is just a list of things that we would like the product to do that it doesn't do yet. That's it. It can be super short. Here's one thing that I would like the product to do that it doesn't do yet; that's a product backlog. \n\nHere's 20 things that I'd like the product to do; that might be a product backlog. Here's something that's not a product backlog: here's 5,000 things I'd like the product to do. That is absolutely not a product backlog; that's just a dumping ground. That's a dump, right?\n\nOne of the key things that makes a product backlog a product backlog is that everybody—stakeholders, product owner, and team members—understand everything that's in there. And if they don't, it's not a product backlog."
  },
  {
    "id": "_fFs-0GL1CA",
    "title": "Why do you encourage people to follow a certification path in their career journey?",
    "description": "Discover why certification is essential for mastering Agile roles. Join Martin Hinshelwood as he guides you on the path to Scrum expertise!",
    "captions": "So the question was, why would I encourage people to follow a certification path in their career journey? I would say for the same reason that people go to university. The reason people do any course is it gets your foot in the door. Certifications themselves have no value. How many of you have ever had to pull out your university degree, right, ten years after you've graduated from university? You don't. Maybe your first couple of jobs you had to. I had to pull out my university degree when I applied for my H-1B to go work in the US. They actually didn't like it. I had to contribute two years of my professional experience to make up the year that the US degrees have more than my degree that I took. But it all worked out. That's why you have those things, right? Somebody wants to validate your knowledge. It doesn't mean you have skills. Skills and application of learning is different from just amassing knowledge. But kind of at a minimum, for certain roles, you should have knowledge, right? At the very least, if you're going to be working on a scrum team, you should probably have read the Scrum Guide.\n\nIf I was an employer, how do I validate that you've read the Scrum Guide? Well, I could sit and interview the thousand people that apply and ask them, \"Have you read the Scrum Guide?\" Or I could just put in the job spec PSM1. If you can pass the PSM1, you've read the Scrum Guide. It would be very difficult to pass the PSM1 if you've not read the Scrum Guide. So there's a minimum bar, there's a litmus test, there's a quick check that an employer can do to whittle down the thousand candidates to the 200 candidates that have actually read the Scrum Guide because we want somebody who can work on a scrum team. \n\nTaking that assessment, that's why it's valuable from a professional career perspective. External professional career perspective, like somebody looking at you, but internal professional career perspective, it's about validated learning. If I take a course and there's no assessment at the end, how do I know I understood what was the intent for me to understand from the course? Well, I don't. I just have to say, \"Well, I didn't pay attention for half of it and I forgot the other 60,\" and now I've done the course, so I should be able to go do the job. But that's not really how it works, right? Our memories don't work that way. Our understanding doesn't work that way. \n\nThat's why I really like the way that Scrum.org do the validated learning. You effectively get two attempts to take the assessment. At the end of the class, everybody gets a token to take the assessment, and if they take it within 14 days, you get a free second one if you fail. If you pass, well, you passed, right? But in both cases, you get your results broken down by category with a percentage, and you're able to look at that and say, \"Well, I didn't know I had a low score. I passed, but I had a low score in this area, so perhaps I should study this material.\" \n\nThe thing you get with the scores on it actually has a link to a bunch of material to study in that topic that Scrum.org have created. There's a Scrum Master learning path, there's a Product Owner learning path, there's various learning paths. That additional learning, even if I got a high score in it, I want to dive deeply into that topic because I liked it. How do you know where to start or where to look? Here's a place to start. \n\nThat validated learning for you and your career path, because the thing, once you get beyond getting in the door, right, the foot in the door, that gets you to the actual interview, is you still have to demonstrate in the interview that you actually understand stuff. There are so many posts on LinkedIn talking about how to validate that the person at the interview actually understands the thing that you're talking about, and all these trick questions. You just need to know your stuff. \n\nIn order to know your stuff, you have to have done the studying, absorbed the information, and understood it. You don't get that from not looking at anything, not reading the books, not watching the videos, not reading the blog posts, right? You have to invest some time and effort in figuring out what this thing is. Training courses are a great way to level set. \n\nWhat's next? I mean, the output of Scrum.org classes, I think all of them have at least ten books. \"Here you go, here's a bunch of books to read. Here's a bunch of additional content to read.\" Each trainer adds more content into that story as you go. If you take the time to check it out, learn how to do different things, you can improve your career trajectory so that you get further quicker, right? That's really what careers are about.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "_FtFqnZHCjk",
    "title": "The Evolution of Product Management in the Agile Era",
    "description": "Explore the key differences between Agile and traditional product management. Learn how Agile's faster cycles and feedback loops enhance value delivery!",
    "captions": "Agile product management differs from product management that has been done for many years in actually very subtle ways. So you could say it doesn't differ at all as well because all of the tools and techniques that you would use in product management and you have been using in product management for many years are the same tools that you would use in agile product management. But the way that you approach the context of the tools and which tools make more sense and which tools make less sense is the bit where it differs because we're changing the underlying principles of what it is we're trying to achieve.\n\nSo in the traditional world, we're probably going quite a long time between actual releases, at least to get the first release. And then between releases, we're probably taking a long time. I'm thinking about the Azure DevOps team at Microsoft when it was Team Foundation Server and Visual Studio, right? That era around the 2010 era, they were on a two-year cycle, right? So they were delivering a new version of the product every two years. Halfway, they would do a service pack, and then halfway into, roughly about the same time, I guess it was roughly about the same time, they would have a beta of the next version of the product.\n\nWhat really happened was that when you're thinking about product management, you're thinking about how do we make a product that maximises the value for our business, right? That makes the most money. That's what we're talking about with product management. We have a product, we need to manage what we put into that product, what we take out of that product, how we ship that product, how we market that product in order to maximise the return on investment. That's ultimately what we're talking about.\n\nIn that world of releasing long releases, right, long time between releases, they found that they really struggled to maximise that value for a number of reasons. It just took too long to advertise the value that they thought their customer wanted. So the first one is you have to build the whole thing, right? You have to, if a customer wants XYZ feature, you have to build XYZ feature because when you ship XYZ feature, you're not technically shipping again for two years. So if there's something wrong with XYZ feature or XYZ feature doesn't have some capability, right, then the customer is going to be frustrated and may go to another product, right? May go to your competitor because they do have that feature.\n\nSo that idea of shipping once every two years actually means that you can't take feedback and get it in front of your customers for four years. Generally, there may be circumstances where you can change what you're working on, but then it becomes a big issue, right? Because you've planned all of this stuff over two years, and somebody makes a change to what it is they want to deliver. What is the impact across all of the things that you're working on? So that's why we have change requests, right? We make a complicated, convoluted change request policy system in order to reduce the change coming in because change coming in is high cost because we have to change all of the things that are going on in order to accommodate that change.\n\nSo you've got this long cycle. I mentioned that it was twice the iteration length to incorporate feedback from your customer quite often. And the reason for that is that you get your product in front of your customer at this point, and then in two years, we're going to do another ship. But we've already had to plan what we're going to put into that two years, right? So when we get feedback on version one of our product, that's going to end up in version three of our product if it's small enough or important enough. It might end up in version two, but we'll have to kick something out that we were going to deliver. So that's risk, right? Because we're not delivering something that we think the market needs.\n\nWe end up with that twice the cadence, right? Twice our cadence is the amount of time it generally takes to get new features and feedback that the market desires. So what's the cost of delay? What's the cost to our customer of not delivering a feature that they need in order to service their business? And we're not going to deliver it to them for up to four years, probably a little bit less, but up to four years. That is a massive impact on not only your customer's ability to innovate and do things differently or fulfil their needs, but on your team and the people doing the work's ability to see the value that they create being used by the customers because the delay is just too long. They're not working on that feature anymore by the time the customer gets it.\n\nSo one of the fundamental premises that we talk about in agile product management, the agile piece versus the just product management piece, is that we're going to have much shorter cycles, much radically shorter cycles. For example, the Azure DevOps team went almost overnight, some false starts, but almost overnight from a two-year delivery cycle down to a three-week delivery cycle. So delivering to production every three weeks, delivering to real users out in the world every three weeks. And that enabled them to get closer to the customer, right? So even if we still had that same twice the iteration length, you're talking six weeks to get something new in front of your customer that they need or tell you that they need. And six weeks is much shorter than two years, four years, right? Up to four years.\n\nSo up to six weeks instead of up to four years. And that fundamental change means that a lot of the practices that you might use in product management then become a little bit irrelevant, right? So I'm thinking practices that become irrelevant would be change requests, right? They pretty much become irrelevant because change requests were there to protect the plan and protect the investment in the plan. But since our plan is now only three weeks, we don't need to protect it so much because the risk of something derailing that plan is much smaller, right? Because we can correct much more often, so we don't need that change request system.\n\nWe would look at portfolio investment, like how much time are we investing in different features, different parts of the product, or do we want to move people? And we can move people in a three-week cadence rather than on a two-yearly cadence. But then we're also, because we're delivering more frequently, we're able to then remove other things, right? That are going to get in the way of delivering more frequently. Can you imagine having to do UAT for your entire product every three weeks? Right? UAT doesn't make sense. User acceptance testing doesn't make sense.\n\nThere's a famous quote from Brian Harry. I love that presentation of his that he did, and he had a picture of the slippers from the red glittery slippers from Wizard of Oz, and it was like there's no place like production. No matter how much testing you do, no matter how much validation you do, you're always going to find production issues. And that's where UAT came in, right? UAT was trying to protect production from issues introduced by the engineering teams. But if the engineering teams are delivering new versions of the product every three weeks, where's the time to do that UAT?\n\nSo one of the things we need to fix, one of the agile practices we need to bring in, is much higher quality product, much higher quality code, much higher quality engineering in order to not have those issues in UAT. Your UAT should be a cost centre anyway. It should not be a value centre. If UAT finds something that shows a failure of quality in the engineering system, UAT should never ever find anything. So if you build up quality to the point where UAT is a cost centre, not a value centre, then the people that fund the UAT, that desire the UAT because they find stuff, will start to erode that because you're demonstrating the quality of your product. You're demonstrating that that UAT is unnecessary because it never finds a problem.\n\nSo you have to apply that thinking to all of the practices that we have in product management. Do they make sense in agile product management versus the way we always used to do things, right? So can we do it quickly? Is it getting in the way of actually getting our product in front of users? Because that's how we validate that we've built something that's valuable. How do we enable that continuous delivery of high-quality, usable product into the hands of our users? And what of our practices that we use right now in product management make sense in that space and which don't make sense, right? And they maybe don't make sense because they become irrelevant or they don't make sense because they take too long. And what are we going to replace them with in order to effectively maximise the ROI of our product in the market?"
  },
  {
    "id": "_ghSntAkoKI",
    "title": "Live Virtual Professional Agile Leadership in 5 minutes!",
    "description": "Discover Agile Leadership in just 5 minutes! Watch our timelapse overview of a comprehensive training course and explore free workshops on our channel.",
    "captions": ""
  },
  {
    "id": "_rJoehoYIVA",
    "title": "Mastering Azure DevOps Migration: Navigating Challenges, Solutions, and Best Practices",
    "description": "Discover expert insights on Azure DevOps migration, addressing common challenges and benefits for IT managers, DevOps teams, and business owners.",
    "captions": "There are lots of reasons why companies come to us to help them with an Azure DevOps migration. Mostly, it's knowledge. We've done a lot of migrations. I've done hundreds of migrations. I've done migrations up to Azure DevOps. I've done upgrades to servers over the years, beta servers included. I've written code to move data in a custom way from one environment to another environment, and I've written support code that allows you to standardise that process as well.\n\nSo, the main reasons that companies come to us is we've got a department or a product that we've sold to somebody else, so we need to get it out of the rest of our stuff and move it over here. That's one. We created one big project. I think I coined the term many, many years ago: one project to rule them all. Right? So, they created one massive project, and they actually realised that they need to split it into two. So, take one thing and split it into two, or they created 20 projects and they realised that they're all interconnected and they should all be in one bucket. Those are probably the main ones.\n\nI've sold part of my company. I created too many things and I want less things. I've created not enough things and I want more things, so moving that data around. But also, we don't know what to do. Right? This is our current state of what we've got. We want this. How do we get from here to there? Because it is really complicated to do some of the migrations and upgrades that people want, really depending on their context.\n\nSo, we do a lot of migrations where there are many, many steps to get all the way to Azure DevOps because the servers that their environments are on are crusty and old. And that's the best reason to do it. Right? If your servers and your environments are crusty and old, then your teams that support them are not able to support them. Right? So, you don't want to be running them yourself. You certainly don't want to be running all of your organisational asset, which is your code, in a crusty, falling apart, barely functions, doesn't get any support anymore. Right? Because the environments are old.\n\nSo, if you can get it up to the cloud, get it into that fully supported, fully maintained environment where, in this case, Microsoft do all the updates, do all they take it forward, they engineer the product, they do the support and maintenance, and load and everything, disaster recovery, just everything, they take care of it. And it costs you, what, $4 per user per month to get that? It's a total no-brainer. \n\nSo, getting up to the cloud, doing those things. We've also done a lot of migrations from TFS to Git, from GitHub to TFS. I even did a migration once from Azure DevOps to TFS. I assume somebody in the organisation went without permission and took all the stuff up to Azure DevOps, and there's no way back from Microsoft's perspective. \n\nSo, yeah, there's loads of reasons why companies ask me to do migrations. Some of them are good reasons, some of them are not so good reasons, and sometimes we’ll push back quite heavily and say, \"Look, this is not...\" I get a lot of calls for backup. Right? You don't need to back up Azure DevOps. Microsoft back it up for you. They have disaster recovery, they have copies off the tape, they have all of that stuff for you, and they're all the ISO compliant for the level of recovery that you're paying for. \n\nSo, there's no need for you to do that. So, we push back really heavily on that. But we've also done it because the customer really insists that they want a backup, and sometimes you're going to do that. \n\nSo, there's lots of good reasons, lots of bad reasons to move data around in Azure DevOps. But it's irrelevant. People want stuff done the way they want it done, and sometimes you need to do that. And, yeah, we help them out doing that."
  },
  {
    "id": "_WplvWtaxtQ",
    "title": "Why Every Scrum Master Needs an Immersive Training Experience",
    "description": "Discover why the PSM immersive learning experience is perfect for aspiring Scrum Masters. Elevate your skills and thrive in accountability with NKD Agility!",
    "captions": "So what we don't need is any more Scrum Masters that don't have the experience and understanding to be able to help the teams that they work with. We don't need any more Scrum Masters that actively inhibit the maximisation of value and the effectiveness of teams because of their lack of knowledge. \n\nI think the Scrum Master immersive class is a perfect opportunity for people who are aspiring to be Scrum Masters to truly try and understand what it takes to be a Scrum Master. Now, don't get me wrong, if you're thinking of being a Scrum Master and you're not actually a Scrum Master yet, the immersive class is probably not going to work out very well for you. \n\nMainly because you, as an aspiring Scrum Master, are going to have difficulty in enacting and working through the assignments which are specifically designed for people who are already working as a Scrum Master, regardless of their knowledge level. Already working as a Scrum Master and focus on them becoming more effective at what they do, at helping their teams be more effective. \n\nSo really, if you're looking to be a Scrum Master, then probably the immersive class is not for you. But if you are already a Scrum Master, regardless of your skill level, then the immersive class is an absolute perfect fit to enable you to really deepen the knowledge that you need to perhaps become a great Scrum Master. \n\nIf you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "id": "-Mz9cH0uiTQ",
    "title": "Does a client tell an agile consultant what they need or does it work the other way around?",
    "description": "Discover whether clients guide agile consultants or vice versa. Martin Hinshelwood shares insights on navigating agile transitions effectively.",
    "captions": "So the question was, does a client tell an agile consultant what they need, or does it work the other way around? I think it works the other way around, but I think it's more complicated than that because a lot of clients come with an agenda. So quite often, you come in under a particular agenda, but the mark of a great consultant is you are trying to deliver the maximum value to the customer, right? \n\nSo you have to figure out, regardless of what they've asked for, what is it that they need for them to be successful in whatever it is that they're trying to do? Or even, is the thing they're trying to do the right thing that they're trying to do? And then slowly convince them to do the right thing. So I guess it depends how long you're going to be engaged with the customer for what that really looks like. \n\nI'm quite often engaged with customers for a short period of time. Most of my engagements with customers have either been over two or three weeks. That's generally when they want advice. They're like, \"We want to understand how we do something,\" and I'm coming in, giving them advice, and then they're taking it forward. I'm not working with them to do it, but I've also done longer engagements, usually for professional services teams, where I'm working with lots of different teams inside of their organisation. \n\nSo it's like I'm internally consulting with lots of different teams, and I would come in and help observe, give them some feedback, usually working with their scrum master. So when they come, they want a particular thing, right? They want to, usually actually, they want to get better at this agile thing. But that's not necessarily like getting being awesome at agile. What value does that provide the company? What value does that provide their customers? It's not necessarily the right thing, but that's what they ask for because that's the trend, right? \n\nSo you quite often come in under that guise, but then you've got to figure out what is it that this organisation actually needs. Is it a leadership issue where you need to focus on that whole engagement pipeline that they're working through? I did an engagement recently with a professional services company, and they had built up this great business. \n\nI have a weird name for it; I call it the death spiral of consulting. It's where you get a little bit too big, and you need to feed the monster, which is your business. So you have very aggressive sales tactics. You've built a great name in the industry, you're very aggressive with sales tactics, you bring in more, you have to hire more people to get the gigs done because you've got these aggressive sales tactics that bring in lots of gigs. \n\nThen you need to do them now, and you get more gigs than people, so you have to hire more people. Because you have to hire them quickly, because you've told the customer you can do it, you're not waiting for the top-tier candidates; you're getting the people that are available. Then they're doing the gig, and then you need more gigs because you've now got a bigger headcount and more people, so you have more aggressive sales tactics, getting in more gigs. \n\nThen, oh, all our people are busy; we need to hire more people. Even those level of people are not available at the next level down, and you end up in this death spiral of taking on too much work when what they really need is a whip limit, right? They need to control their sales pipeline. It's not a free-for-all; it's what can your business safely handle to deliver the level of quality that your customers are looking for. \n\nI think this is true not just for professional services; this is true in any business. What is the level of quality and brand and visual that you're trying to get from your customers? And what's the maximum amount of business you can do while safely maintaining that? Then you want to grow slowly while maintaining that level of quality, so you're hiring the right people, you're engaging on the right engagements, right? You're not taking any engagement that comes along because probably any engagement sucks. You're picking and choosing which engagement at that level. \n\nI think most customers don't know what they want. They think they want this agile thing or this DevOps thing, and can you come and install it for us? But you have to figure out what it is that is the actual difficulty, the thing that they need help with, and help them with that, even if it's kind of surreptitiously or kind of around a different way so that they feel like and really do get value from what you're doing. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "-pW6YDYEO20",
    "title": "Worst trait in unskilled scrum masters?",
    "description": "Discover the worst trait in unskilled Scrum Masters! Martin Hinshelwood reveals why it's a critical no-go zone for effective Agile teams. #Scrum #Agile",
    "captions": "The worst trait in unskilled Scrum Masters is probably their thinking that they're the boss of everybody, thinking that they should be telling people what to do, thinking that they should be micromanaging, thinking that they should be setting up the Jira environment, thinking that they should be allocating the work, and all of that is just crap. It has nothing to do with being a Scrum Master. Being a Scrum Master is about helping teams be more effective, and all of those things—I can't think of an easier way to make a team ineffective. Focus on what helps the team stand on their own, be better at what they do, being visibly present. And yeah."
  },
  {
    "id": "-T1e8hjLt24",
    "title": " shorts 5 things you would teach a produtowner apprentice. Part 5",
    "description": "Join Martin Hinshelwood in Part 5 as he shares essential lessons for aspiring product owners. Discover key insights to kickstart your journey! #shorts",
    "captions": "A blog post that I read years ago started with the phrase, \"If you're reading this, you're already in the top 10%.\" That's because there's only a small number of people that actually focus on continuous learning, that actually try new things all the time, that are actually reading up on different techniques and different topics. They don't have to be new; they can just be new to you. They can be older things that you're going and figuring out. \n\n\"Crossing the Chasm\" was written in the 80s, right? What are the things that you're reading? How do you enable yourself to be in the top 10%? Because that's how you maximise your chances of getting the best gigs, right? You need to be in the top 10%. If all you need to do to do that is read some blog posts every week, maybe a couple of books a month, that's not a high bar."
  },
  {
    "id": "-xMY9Heanjk",
    "title": "What is the hardest part of working with a brand-new scrum team?",
    "description": "Discover the toughest challenges of joining a new Scrum team and how to transition from novice to mastery in Agile practices with Martin Hinshelwood.",
    "captions": "Imagine, what is the hardest part of working with a brand new Scrum team? I guess it depends on whether you're talking about a team member joining the team or like a Scrum Master, right? Your coach working with a brand new Scrum team, it's probably both pretty similar. It's what we think we know. I think it's the same is true when you work with any group of people new that you... it's... I always, this is one of my tests, right? I ask teams, people, companies, I ask them how they think they're doing. It's grammar, Agile or whatever. And if they say, \"We're awesome at it,\" I know it's going to be a complete car crash. \n\nAnd if they say, \"Well, you know, we don't think we're doing that well. We really need some extra help. We're trying to do different things, but we're hitting stumbling blocks,\" you know, it's going to be absolutely awesome, right? Because they've got to that point where they realise what they don't know. And that's a big inflection point for teams. \n\nSo when you're working with teams, new teams, the biggest gap is what they think they know. They think that they have to do user stories. They think that they should be doing planning poker and story points. They think they should be doing estimation. They think they should be doing burn downs. They think they should be monitoring their velocity, and all of those things are nothing to do with Scrum, right? They're barely mentioned in the Scrum Guide. Burn downs are mentioned; I'm not sure velocity is, but burn downs are mentioned as a, \"Here's a list of things you might do.\" \n\nSo they're not intrinsic to the process at all; they're strategic choices you might make, right? And trying to help them understand the difference between that and the fluff, right? So the core thing that we need to understand as individuals, as teams, as members of teams is that we're trying to create, we're trying to leverage empiricism, right? It's a scientific method. We're going to do something very small, we're going to get it to the people who are going to use it, and then we're going to analyse their usage. And maybe they're going to tell us feedback. We're going to analyse their usage, and then we're going to change what we do based on that. That loop, that's an empirical loop. \n\nAnd that knowledge, that understanding seems to be fundamentally missing from most teams that are doing Scrum, right? They don't... they never learned or never understood the foundational elements, and they're just looking at the mechanisms in Scrum and just following mechanical Scrum. So trying to get them to understand that all of the mechanical parts are just... so the bollocks. You need to make sure you get the empiricism, feedback loops, shortening the time to market, getting that, closing that feedback loop, closing that time to learn, right? Those are the things that actually matter. \n\nAnd whether you're focusing on Kanban or Scrum or kind of an Ann Scrum or Lean or whatever, it's all fundamentally the same thing that we're trying to achieve. Those underlying foundations, if we understand them, everything else is just, \"Right, what would we like to do in the way we do it in order to be successful?\" And bringing those foundations in when people have already built houses on top is much harder."
  },
  {
    "id": "-xrtaW5NlP0",
    "title": "Why is Kanban such a popular approach for people in creative industries?",
    "description": "Discover why Kanban thrives in creative industries, tackling complexity and enhancing visibility. Join Martin Hinshelwood for insights on this agile approach!",
    "captions": "I think Kanban is hugely popular in all industries, not just creative industries, because it does model the behaviour of the existing system. Right? It doesn't require you to change how you're currently doing things. So effectively, when you're implementing a Kanban approach, you start from where you are. You model your existing system, right? And in modelling your existing system, you actually iron out some variability. Because if you've got 10 people in your organisation that are, let's say, our output is marketing videos, right? Marketing content for businesses that we're working with, then, and we've got 10 people working on that marketing content, how does each person choose what the next thing is they go work on? If every person picks differently, right? Makes choices differently, then we've got a high degree of variability in our system that we can iron out. Right? If all these 10 people just got together and agreed whatever thing is in our list of things to do that's been sitting there the longest, let's do that. Right? That way, the oldest thing is the quickest thing to get through the system because you're trying to reduce your overall cycle time, right, for your customers. Then you can use Kanban to model your system, right? You have that conversation: what is our working agreement? What is our definition of workflow for our system? You model it, decide when it starts, when it finishes, and then you've got the data to figure out when we make changes, is it improving the system or is it not improving the system?\n\nActually, I had this conversation a couple of months ago with my dentist, right? So totally nothing to do with software, nothing to do with it, nothing to do with any of those industries. If you're a dentist, right, you have to book people in for appointments. How quickly can you book people in for appointments? So if I say to my dentist, I need an appointment, and it's three months out, right? That's a very long time, right? So their cycle time, their ability to get something into the system, I've asked for an appointment and be able to actually deliver it, is really, really long. Really long. What could they do to shorten that cycle time? Well, perhaps they need little gaps in their calendar to be able to have things that pop in. Perhaps they need to deal with cancellations better. Perhaps they can chase people to say, do you still need this appointment? All those kinds of things, right? But how do they know that that's effective? How do they know that it's valuable and it's changing the way they do business? Right? Because wouldn't it be great if you went to the dentist and said, I need an appointment, and they said, yeah, we've got one next Thursday for you, right? That would be great.\n\nSo having a model for your system so you can monitor the flow of work through your system and look at your cycle times, look at your throughput, look at how long things are taking. Because the shorter the throughput, quite often, the shorter the cycle time, right? People getting into the system and getting through it quicker. And I'll tell you something: people are happier customers if they get their stuff faster. And that's what we're looking at. We're looking at that continuous flow, continuous delivery of stuff. Whatever stuff's in your system, we want to deliver it as quickly as possible.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "00V7BJJtMT0",
    "title": "What is DevOps and how is it different to Agile?",
    "description": "Discover the key differences between DevOps and Agile in this insightful video with Martin Hinshelwood. Elevate your software delivery today!",
    "captions": "Um, so the question was, what is DevOps and how is it different to Agile? I would say fundamentally it's not. Right? Fundamentally, DevOps and Agile is really the same thing. We're solving the same problem, but we're just looking at it from different angles. \n\nSo you'll usually find the folks that are very process orientated are like, \"Oh yeah, Agile is the thing,\" and DevOps is, you know, part of that story. It's the automation piece in that story. But then you talk to the DevOps folks and they'll be like, \"Oh, DevOps is this big thing and Agile is the process piece in this story.\" \n\nUm, and I think that for me, having lived both worlds, indicates that it's all the same stuff. We're talking about the same thing. We're trying to solve the same problem. We're telling the same story; we're just coming at it from a different perspective. It's how would technical people solve this problem and how would non-technical people solve this problem? \n\nRight? Although there are non-technical people, a lot of technical people in the Agile space. So, I think of DevOps and Agile as two heads; they're the two sides of a coin, right? \n\nUm, come at it from whatever angle you want. It's the core practices; it's the principles that are behind it that are the thing that we should be focusing on. Everything else is just the [__] we have to do to make those things successful, right? \n\nUm, whether it's getting tools in the DevOps space, whether it's looking at shortening cycle times—it's a big focus in DevOps—or it's systems thinking. In the Agile space, it's more looking at how do we encourage people to take accountability? How do we encourage shared ownership? How do we, um, build an empirical, hypothesis-driven mindset? \n\nRight? Those two things, you can't have one without the other. They both go together. And if you want to be successful at delivering software products, then you need both Agile and DevOps in unison to be able to be successful. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "03gLr3LUq4o",
    "title": "Basic Work Item Migration",
    "description": "Learn to bulk edit and migrate work items in Azure DevOps with this guide. Discover powerful tools for seamless project transitions! 🎥✨",
    "captions": "We are going to take a look at how to do a migration with the Azure DevOps migration tools. I'm going to take a very straightforward simple migration and walk you through it. We're also going to take care of any exceptions or issues and all those little things that come up, at least the common ones that come up. So let me switch to my desktop. There we go. \n\nSo first thing I'm going to do is install the Azure DevOps tools. We need to get them first. If we go to GitHub, the tool repo, you'll find just down on the right-hand side a little list of all of the releases, and the latest release will be at the top. So you can use this release here. Whatever the latest one is, is the one you should be using. We only support the latest one. We have one going through the pipeline at the moment. But if you open up that release, if you're in an environment where you can't, you don't really have internet access, you don't have any of those things, then you can use this version of the file here. You just download that, and you will be able to unzip it to any location, any folder, and then run the migration from that folder. \n\nSo you can do that. I'm not going to do that today because if you check out the documentation, which if you scroll down a little bit, you will find a link here to documentation. In the documentation, it talks about how you install and configure the tools, and there's a little getting started link up here in the top left. It talks about the install. Now we deploy to Winget and Chocolatey. \n\nSo if you are on a Windows Server, you need to use Chocolatey. You can use Chocolatey anywhere, in fact, that you're running Windows. But we also have Winget as well for those of us that are on Windows 10 or Windows 11. \n\nSo let's put this in the other mode. I'll switch over here. There we go. So what I'm going to do is I'm going to open Command Prompt. One thing to note is that you want to use a non-admin Command Prompt. There's actually a bug in Winget that if you use an admin Command Prompt, it doesn't add the app folder to the path. You don't have to worry about what that means, but they don't add it to path, which means that you get a missing file. \n\nSo I'm just going to find the package. If you do Winget search, then I'm going to do Azure DevOps and pull up the list of tools that are available for Azure DevOps. I'm just going to copy that ID there, and I'm going to do Winget install that tool. You'll find that will shoot off and go do that. It'll take a minute or so. It's going in, downloading the package, verifying it, and then unpacking it and setting up some stuff. But again, it is just a portable setup. \n\nWhile that's running, you can go to... do I have the Chocolatey link in here? No, I maybe don't have the Chocolatey link anymore because we want to use the new stuff. So there we go, starting the install of the package, and it's set it up. So now if I switch to C:\\temp and do dir, you'll see that I've got a config file in there. I'm actually just going to overwrite it and create a new one by calling the tools. \n\nSo if I go CLS, right, so if I want to use the tools, I just call DevOps migration. That will initially show you, because you've not selected like what do you want it to do, it will say what the options are. There's init, and execute. Execute is for executing a migration, and init is for creating config files. \n\nSo if I do init and then help, you'll see it's got some helpful options there for what things are available. But we're just going to call init, and it will create... there we go, it's updated and created this config file in C:\\temp. So if I just pop that open and go to Temp, there we go, I have that configuration file here. I'm going to open it in Visual Studio, and there we go, I'm all set up. \n\nThis is the default out-of-the-box configuration file. We've got some changes to the default configuration file coming down the pipeline just now. They're not quite here yet, so there's a couple of fixes that I have to make. So if you have an older config file or you've generated one before, there's some fixes that you're going to want to make. \n\nThe first fix is going to be to remove all of the field maps here. Field maps are great for when you want to move from one process to another process, but they get in the way. Especially the default ones do get in the way. So we've changed that. \n\nSo when you create... although we're on 2.2.3, I think if you do 2.2.3, which has already been updated while the package is being deployed, then you will have these things already removed. So you need to remove that, and then down here, there's a skip to final revised work item type that should be false by default. It is currently set to true. \n\nThe other one is these node paths just get in the way. So the best way is just to delete them and replace it with null, and then they are gone. We don't have to worry about them. Those are the two things that you have to... that will be the default. What you see here will be the default by tomorrow. \n\nSo what we're going to do is we're going to set this up for us. So we have a source project, and we have a target project. Okay, now the source project, we're going to use prompt to connect to it, and we're going to connect to an Azure DevOps instance in preview. But not this project; that one doesn't exist. So I'm just going to open that and go to migration source. This is my default migration source project here. \n\nSomething to note here is that you will need both the URL of the collection and the URL of the project. So this one here is the project, and this here is the collection. So if I take... I'm just going to copy the project because I already have the collection in there, and you'll see here's the collection, and I'm going to update the project. \n\nNow for the source, you don't actually have to worry about reflected work item ID. It's not required for you to update this. It can be anything you like. It's not going to use it on here, and you can leave this as prompt because we're only going to read from the source. We never write to the source; we only read from it. So I'm just going to use prompt there because it's just easier just now. \n\nThen we need a target project. So what I'm going to do is I'm going to create a brand new target project, and I'm going to call it migration target three because I have lots of ingenuity on what to call things. So I'm going to use the same process. So the source is also this process, and I'm going to create that project here. \n\nSo while this goes off and creates the project, this is going to create an empty project. It is worth noting... there we go. So this has no work items. Work items, nothing here. Recently updated, nothing. Recently created, nothing. \n\nOkay, but it does have the process here, and if you're looking for the process, I just clicked the project settings on the bottom left, and then once you've got that open, you will see the process that's connected to your project in here. If you click on it, that will go into the definition of the process so you can take a look. Even if you can't edit this, you will be able to read it. But you will need to be able to edit it on the target environment for sure. \n\nOkay, because every work item type that's in scope needs a special field on it so that we can track which work items we've created and what they're related to in the source environment. For that, we actually add a field called reflected work item ID. So I'm just going to add a new one just to show you what it would look like for you. \n\nSo I'm going to create a new field ID. I'm just going to call it reflected work... let's call it three because I think I already created one called two. Reflect work item ID three. It's a single text line. It can go anywhere, no default value, and it can go anywhere. So I'm just going to stick it in details because I don't care. \n\nOkay, so there is added. If you go to edit again and go to options, you'll see what the name of that field is. Okay, so this is the ref name rather than the friendly name. This is the friendly name here, and then the under-the-covers name is the custom reflected work item ID three. If you've added or had already got a reflected work item ID in your system like I do, going to remove that one, which is this one. \n\nYou can go check in options what the ref name is, and you can see this was created quite some time ago, and Azure DevOps has changed the way this works. Yours will probably say custom if you're adding it recently. If you've added a long time ago, it will say the name of the process within which it was added. So that's NKD Scrum. \n\nSo I'm just going to copy that, go back in here, and now I can update the target element to NKD Scrum that reflected work item ID. The other thing that's worth noting is that in the target, if you're using Azure as your target, you will need to fill out a personal access token. There are certain capabilities in ADO that require us to do some weird patchy things that require a PAT token. \n\nSo all you do is on your environment, click on the little person cog, go to personal access tokens, and create a personal access token. You see I created one earlier, so I'm just going to regenerate that one. And there we go, I've got my personal access token. Now you'll notice I have it set up as full access. You can try other stuff, but we tend to use full access when creating these. \n\nSo now all I need to do is put in my personal access token in there. If you want to only use the PAT token and not use prompt, you can say access token in the authentication mode, and it will just use the token. So we can set that up here. So we're going to use prompt for the source and access token for the target. Prompt just pops up Azure Active Directory authentication, and that's easy peasy. \n\nYou don't need to worry about these language maps. You may need to worry about it in the source if you're migrating from, let's say, a German installation of TFS where the database is set up as a German collation. Then you'll need to fill out whatever the German is for area and whatever the German is for iteration. That's how the system stores it, and then that will make sure all the mappings work. \n\nSo you just fill out your language-specific terminology in here, but 90% of the time, you're not going to need to do that at all. So then everything else is kind of not needed for a simple migration. If you're changing the process or you want to move data from one field to another, I've done things like I had a customer who had the version number as year dot number. I think it was year do month in their source system, and in the target system, they wanted two fields, one with year and one with month. \n\nSo I just added a field map to regex those out into the individual fields. No problem at all. The documentation has a list. I jump to the docs. The docs have a list on the left-hand side under V1, under ref V1. You'll find a list of field maps here. So there's the regex field map, and all I did was set up a source field being my version, target field my version year only, pattern match the year out, and put it in the new field. \n\nRight, that's pretty straightforward. So you would just copy this, obviously change it to what you need, and put it into the field map. Okay, so it's just a list of field maps, and the field maps are run in the order that they're listed there. Right, so you can control the order a little bit. \n\nIf you have links from your work items to Git repos, then you will need to have those links fixed so that in the new system, they will match up. It's worth noting that we only fix the work item connection to the Git repo. We don't fix the Git repo connection to the work item. So in your Git commit text, you might have IDs for work items that no longer exist. They're not links; it's kind of invalid. It's just text. \n\nBut the link from the work item to the Git commit will be fixed with the tool. So if you've changed the name of the Git repo, you just create a name list of name-value mappings in here, similar to the language map, and have the original Git repo and the target Git repo under here. You only need it if you've changed the name of your Git repo during the migration. If it's the same name on both sides, it doesn't matter; you don't have to do anything in there. \n\nOkay, so then the main body in here is the processor. That's the bit that's got all the gobbins for actually doing the migration, and we're actually pretty close to being able to run a migration at the moment. So we've set up the connection, and then in here we have the migration. The important bits are what type of processor it is, and then you've got your work item query bit here. That's one of the most important sections here. \n\nWe're going to run into a few problems when we do our migration. We're going to fix them in here, so I can show you what that looks like. So what I'm going to do is just show you this query. In this query here, you can see it excludes certain work item types. These are work item types that we do not migrate at this point using this tool. \n\nThere are things you can do with shared steps and shared parameters, but that is definitely more advanced. Feedback requests, test plans, and test suites should never be migrated with the work item migration processor. There's a separate tool for doing that stuff. So in here, this is this bit at the front, and closed date equals nothing means that it will only migrate things that aren't closed. \n\nBut I can just delete that, and I will just not migrate those types of work items. Everything else will come across. That's basically everything. This is great if you have a really big migration. If you've got more than 10,000 things that come back from your query, you're going to get an error. What you're going to have to do is shape your query so you bring back chunks of smaller than 10,000 work items. \n\nSo you might do that with date ranges. You know, let's migrate everything that's been changed in the last 90 days. Migrate everything that's been changed between 90 and 120 days, and then keep making those chunks in order to migrate it across. \n\nAnd yeah, so that's it. We've set up our query, we've set up our connection, we should be good to go. So I'm going to run the migration. So I'm going to switch back to my code. There we go. And what we're going to do is we're going to do DevOps migration execute minus C for the config file, and it's C:\\temp, and it's... is it JSON? I actually can't remember. What is that configuration? JSON. There we go. \n\nSo I'm going to run that. There we go. So it's loaded the file, and it's done nothing. So this is the first thing that will happen when you try and run it because you have forgotten something in the config file. You'll notice that it has processor enabled equals false. We need to change that to true for it to do anything. This is so that you can actually set this up so that you can have multiple configs in there and then enable and disable them as needed. \n\nI tend to have multiple files just to make things less confusing. But now I'm going to go back and run it. So this... boom. Okay, so now you can see it's went quite quickly there, and I got an unhandled exception. I maybe messed something up, so I will need to check that. \n\nSo it connected here to the source, granted. Then it tried to connect to the target with access token, and then I got access granted. Oh, look what I did. See, there we go. What I did was I forgot to update the project name. Always something that Martin does that messes things up. There we go. Let's go back to... so it's migration target three was our empty project. There it is, migration target three. \n\nSo there we go. I forgot to update that. So C:\\temp, there we go. Let's run it again and see what happens. So connected to the source, connected to the target, and then it's doing a node migration. So it's creating the area and iteration nodes in the target. All of these little things here, and they have to match. \n\nWe use a thing called rules overrides. I can't remember what it's called, but rules bypass. We bypass the rules engine, which means that all of the areas and iterations that are on the work item must exist. So the first thing we do is we go through... if I make that smaller... there we go. We go through, and this is checking and validating all of the areas and iterations that are in the source and checking that they're in and valid in the target. \n\nBut what we also do is after we've loaded the work items, and you see there's 10 work items, we actually go through the full history of all of the work items, and we pull out all the area and iteration paths, and we check that they all exist. We check that they all exist because in the history, there are two things that might have happened. You might have an area or iteration path that's from a previous project if somebody has moved a work item from one project to another. \n\nIt only happens in Azure DevOps, but it's possible. The other issue is that you might have an area or iteration path that has subsequently been deleted, right? So then it doesn't exist anymore in the source. So when we create the main set, it doesn't exist. So what we're going to have to do is we're going to have to create a mapping for these. The system will stop and say the missing iteration... there’s one that is missing that we need to deal with. Actually, there's two, right? \n\nBecause what it's actually done here is it's created these two, which didn't exist before, so it's generated them on the fly. But we're still missing this one called Sky Point Cloud because it doesn't recognise what to do with it, right? It's from an older project. So if I open up work item 414 in here, so if I just go 414, it should let me just... oh, I might need to go to the source. \n\nSource 414, there it is. So here's 414, and you can see, well, it looks like it's got perfectly valid iterations. But if I go in here and all the way back to the past, you'll see that the team project that it was created in was Sky Point Cloud. That is not this project; this is migration source. So it's been moved from one project to another, but that data is still in the history. \n\nOkay, so it's had history, and then it's been changed and removed to this project. So we need to go deal with that in the config. So the config has been helpful and just said, \"Here's the missing thing you need to add.\" So I'm going to grab that because that's what we need to create and go into the config. \n\nSo down in the config under the processor, you've got area maps and iteration maps. I'm going to give you some secret information as well that you need to add. So effectively, we have an iteration map that we need to add for this text. We want to match this text and map it to something else. \n\nSo I'm going to give you some secret sauce. First is that in JSON, you need to escape slashes. That's why that's doing that weird underline. So if I put another slash in, we've escaped it. But because this left-hand side is a regular expression, we need to escape this. The escape slashes, so we need another two slashes to escape. \n\nSo when this goes through the JSON, it will turn into two slashes to go into the regex, and the regex will turn it into one slash for it matching. I know, madness, but there you go. What we want to do is we might have an iteration path that has Sky Point Cloud in it, like old project SL something/Sky Point Cloud/Sprint One, and that would match that. \n\nSo just to protect ourselves, it's better to put a hat at where you want the start of the string, i.e., this has to be at the beginning, Sky Point Cloud, and then you can put a dollar at the end to say that is the end of the string. Don't match anything after that. So it will only match this exact text, and then our target project is migration target three. \n\nSo where we want it to go is migration target three. We need to escape that slash, and then Sprint One maybe, I guess it could be Sprint One. Let's check. So migration target three, let's go project iterations. Oh, there's a Sprint, and there's an iteration. That's all messed up, but you know, that's what there is. \n\nSo we'll put it in Sprint One. And then just to give you a super secret thing, there's a bug at the moment where it doesn't list the root as a problem. If you remember from viewing the history, you'll note that the area path was also Sky Point Cloud. So we actually need to match just Sky Point Cloud on its own and map it to migration target three for the area maps. \n\nOkay, so just need to remember that at the moment, if you're doing a project-to-project map, sorry, a project rename or change, then you need to move these in. Okay, so now if I go back and run this migration, you'll see it will skip past. \n\nThere's loading the work items. It's getting a list. Just going to check it twice. There we go. Now it's migrating work items. So it's iterating through each of the work items, creating them. We iterate through each work item in turn. Let that smaller so it looks nicer. \n\nWe iterate through each work item in turn. So when you're doing work, if work item A links to work item B, we're going to process work item A first, and we're not going to be able to create the links. You'll see on the first work item it will actually usually say, \"Migrating link, skip, skip, skip.\" Right? That's absolutely fine because the other side, the target side, doesn't exist yet. The target work item has not been migrated yet. \n\nBut as it goes through, you'll see skips, and then as we go further down, we'll start to see creates. It's going to create them. So when it creates the other side of the link, it's going to link it back together. If I go down to the bottom, it's probably pretty close to finished. It is finished. \n\nSo we have just migrated all the work items and links for those work items, and we did it fairly quickly. It took 48 seconds. There we go. So let's take a look at what we created. So in our migration target, I'm going to load up work items. Migration target three, I'm pretty sure that's what I called it. \n\nSo let's have a look. There we go. They are there. It was just a caching issue. So if I go back, can I... there we go. So here are the work items that we just created. You can see there's the one that was moved from Sky Point Cloud, and in the history, all the way back in the source, it now just says migration three, right? Because we did that core mapping. \n\nSo we got all the work items. If I go to the backlog, close that, you'll be able to see that it's linking things in. If I change this to look at parents as well, you'll see there's the feature, the backlog item, and the tasks coming in as well. And we did have some other work items on there, right? We had PPIs, we have some tasks and stuff, so we're not particularly worried. \n\nAnd there's all the stuff there. So there you go. We just migrated our first set of work items. So this operated fairly quickly. It brought them all across. If you want to run it again, you can run it again. And what it will do is it will go check everything twice, thinking about how we might resolve that. \n\nBut it checks everything twice. So it's going to go through each of the... it's actually not going to check all of those work items again. It's just going to say that all work items were found. But what will happen is at some point, somebody will go to the source, and they'll go on the board and they'll drop that item from resolved to active, right? Because it regressed. \n\nSo now when we run this, we actually want it to migrate that extra change, but it will not because at the moment we've got a thing that will remove all found work items. So what you need to do is go in here, filter work items that already exist in target, false. Once you've turned that to false, let me do clear, rerun the migration, and what it will do is instead of just not trying to run all of those work items, it will run through each of the work items. \n\nIt will check the number of revisions, and it's found one work item that has one revision that needs to be updated. And there you go, it has moved that revision across. It's going to check the links as well and make sure they're all up to date, and it skips it because they're already existing. So it's checking every revision of every work item that exists, that it's correct, that all the links work. \n\nSo it will eventually find that work item. There we go, run the whole thing. And if I go back to... so that was the source. If we go to the target, go to the board, it should have moved across. There you go, it's now moved across. So we reran the migration. \n\nWow, that's... oh, there's a bug. Shouldn't do two of those, but that's the different migration run that we can turn that off in the config. But there's that additional change that came across. We changed state, and then it's adding this text, which it shouldn't do. But in here, migration comment B, it won't do that again. \n\nIt can be handy if you want to do it for the first run because in the actual work item, it creates a link back to the old work item. So you can quite easily just click it and go, \"Oh, what was the old work item again? Oh, it was this one. Does it match? Yes, it matches.\" \n\nRight? So people can find that. So there you go. That was a pretty straightforward migration between two Azure DevOps projects, moving the work items. Don't forget to check out the Git repo for any updates and changes."
  },
  {
    "id": "0fz91w-_6vE",
    "title": "What is your primary role in a DevOps consulting gig?",
    "description": "Join Martin Hinshelwood as he explores his key role in DevOps consulting, addressing common challenges across diverse industries. Discover insights for success!",
    "captions": "So the question is, what is my primary role in a DevOps consulting gig? I think that's a difficult question to answer without the context because I find it depends very heavily on where the customer is, what they're trying to do, what they hired you for, and what their problem is. \n\nBut if maybe quantifying that primary goal is to provoke the customer into thinking about how they manage and deliver the work that they do and how the system that they have in place delivers that work and can be disrupted for their benefit, right? \n\nSo DevOps is about optimising that flow of value from idea all the way through to the customers of that product and then closing that feedback loop, right? Getting that feedback back into the system. \n\nSo what is it that's getting in the way of that? Find the thing that's taking the longest in that process and go poke at it and pick at it. And that could be a technical focus, right? A tool issue. The builds are taking 24 hours to do all the testing. Well, that's too long, right? How do we go fix that? \n\nOr that could be a people problem. This approval needs to happen, but the person who does the approval only does it once every two weeks. So if you get the timing wrong, right, you're just waiting for that approval in order to be able to close that feedback loop. That's just waste. That's wasted time. \n\nSo how do you find those things? So I think that would be my focus. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "1-jUmFcyiI8",
    "title": "Accelerating Time to Market with a Tight Feedback Loop",
    "description": "Unlock faster market delivery! Discover how to optimise deployment frequency, eliminate bottlenecks, and enhance customer trust in this insightful video.",
    "captions": "Deployment frequency can serve as a leading indicator of your company's ability to reduce the time to market. I think there's a lot of metrics in that space that you probably want to look at because it's pretty difficult. You could deploy really frequently to a test environment, and that has no bearing on your ability to deploy to production. You're deploying stuff to a test environment that is breaking all the time, so that metric on its own is not going to tell you that you're going to be awesome. That's absolutely not true. \n\nThere are a number of things that you can look at, but your ability to deploy to an environment and the speed with which you can deploy to an environment—let's assume that that environment is stable—so measure that as well. The stability of that environment would be a reasonable indication. If we had a stable environment we're continuously delivering to, we should be able to get stuff into production and deliver it to the market much more quickly. \n\nBut then you need to look at what gets in the way. I have a little formula that I think works really well. I've seen it work in organisations. I know it's not my formula; I think it's a fairly logical thing. Look at your entire pipeline, from ideation—coming up with ideas to go into your product—all the way through to getting it in front of your customers and closing the feedback loop. You're collecting data and telemetry on how that feature is being used, how performant it is, those kinds of things, and then having it feedback. That whole loop is your time to learn, and that is your largest feedback loop. \n\nIf you look at your time to learn and figure out how long it takes, you can find the thing in that time to learn that is taking the longest amount of time and go tackle that. Go make it shorter, go fix it, and then once you've fixed that thing, you've collapsed it into something much faster, much sleeker. Look for what the next blocker is in getting your time to learn down to a manageable size. \n\nBut the question then begs: what is a manageable size of time to learn? As any quantity question, as much as you need and no more. Making those things faster than you need might have an additional cost. So maybe focus on how quickly you need to be able to get things into production. How quickly do you need that to maintain the existing customers? How fast do you need to be able to do that to get new customers? \n\nYour sales team is going to be promising things to customers, and then you have to come back around and build them. Because they've been promised, there's an expectation. Don't train your sales team not to promise stuff, but there might be an expectation. If there's an expectation of a feature, then you need to ship something within that context as quickly as possible to start building on that expectation, building trust. Otherwise, you start eroding trust because there's an expectation that's not fulfilled. \n\nThis is one of the quandaries of the delivery manager: how fast we need to go. There's definitely a school of thought that faster is better, even if your business doesn't need or isn't demanding to be able to change faster. If we, in engineering, in building the product, are able to shorten those feedback loops as much as possible, we can iterate on it. We can use that data, we can get little changes in front of real customers as quickly as possible, and then we can monitor the telemetry. We can see how we've impacted performance, we can see live error messages coming through, or live telemetry, live performance, live error messages, and then be able to do something about it and make little tweaks to get things right. \n\nI think that's the important thing when the outcomes that we're trying to achieve are so complex. Not only how we achieve the outcome, there's a lot of unknowns about what the outcome's going to be. There's a lot of unknowns in what we're going to discover along the way. If we get that loop as tight as possible, we can deal with surprises. When something goes wrong, we can deal with it. We can make a change, we can ship it, we can make a change, we can ship it. That didn't work; we can make another change and ship it. We can iterate on that. \n\nWhen the business comes along with an opportunity—which they invariably will—they're going to come along and say, \"This massive opportunity has come along.\" They're not going to say it like that; they're going to say, \"Oh my God, I need this feature. I need it right now. I need to ship it tomorrow.\" If you are shipping once every sprint, shipping once every two or three weeks, that's not an impossible task to add something and ship it within a few days. But it's going to be fraught with risk and danger because if you're doing something that you've not done before and you have to get it out quicker than you're used to doing it, there are lots of points of failure in that story. \n\nIf you, as an engineering team, if you're a delivery manager and you have a team or a bunch of teams, a product or a bunch of products, if they're able to continuously ship to production—so they're doing continuous delivery to real users—then this opportunity comes along. We add some capability, it ships. We add some capability, it ships. We build on that capability, it ships. We get that much tighter iterative cycle. \n\nIf that feature is this big, how much of this feature is required in order for sales or the business to start advertising that feature? Maybe you only need a very small amount. Maybe you can do a couple of days of work and ship it, and then that feature is there, and they can start marketing it, getting value from it, and then you're building on that as users start using it. You can focus on what it is you need as you go. \n\nThis confluence, I think, of product development and delivery of that product is absolutely critical in order for us to maximise the value that the business gets, that the business creates. In order to do that, there has to be extreme trust, not only between us and the business but between us and the customer. It's not the business and the customer; it's us and the customer because the customer knows that the business doesn't ship the product. They know that we ship the product. Engineering ships the product. \n\nSo when it's not the right thing, they're blaming the business. When it's poor quality, they're complaining to the business that we suck. If we can get rid of that problem, then the only problem is what are we going to go build? If we're in a position—engineering is in a position to help provide all of the data for the business to be able to make a determination on what it is they build and what they don't, that's our job. We need to help the business make those decisions and give them as much information as they need in order to make those decisions effectively. \n\nThat means collecting telemetry, that means being able to continuously ship to production, that means enabling the ability that when an opportunity for the business arises, we are able to deliver on that opportunity faster than our competitors."
  },
  {
    "id": "1-W64WdSbF4",
    "title": "Free Workshop 04: Introduction to Sprint Reviews [Review & Retrospective]",
    "description": "Join Martin Hinshelwood for a free 90-minute workshop on running effective Sprint Reviews. Learn to gather feedback and plan your next steps!",
    "captions": "[Music]\n\nDo that.\n\nOkay.\n\nUm, I guess, uh, welcome to this. Is this the fifth? Fourth? Fifth?\n\nFifth.\n\nUm, live workshop that I've been doing. This one is introduction to the sprint review. So we're going to dive a little bit into how the sprint review works and maybe why it's not working for us because in some cases, I'm sure it's not working. \n\nUm, and how to do it a little bit better. Hopefully, this will be a good interactive experience and I'm going to try my best to do better with the timing because last week's, uh, not last week's, two weeks ago, the um, Kanban session, um, that was the main feedback was Martin's timings up. \n\nSo, um, I'm going to try and do better at that. Peter is a veteran of some of my sessions, so he knows that my timing quite often sucks. So, um, that's just the way it is sometimes when the participants have lots of awesome information to impart. Sometimes it's more interesting to listen to what people have to say. \n\nUh, so we have eight people in person just now. Um, I'm sure a few people will turn up as we go. Um, but I have, as usual, a little icebreaker for us with some questions about the, um, let me just unlock them for you. Unlock. \n\nUm, with some questions about the sprint review and I'd like you to drag, have a read of the different questions, um, and drag either a tick or a cross onto, um, onto the hexagon on whether you agree with that statement or not. \n\nI did these ones a while ago, so I don't actually remember how many trues and how many falsies I've got, so we'll need to take a look. \n\nOh, has anybody got things dropping behind? Nope? Awesome. Just making sure because that's sometimes a mural problem, a tool problem. \n\nUh, one perfect assistant for you. [Music] \n\nI'll put another four minutes on the timer for us to go through this and then at the end of, um, this exercise, I'm going to lock the meeting. \n\n[Music] \n\nWe had lots of disruption in the first session with people kind of hopping in and out of the meeting during the session. So, um, we lock it. It does mean if you do drop out accidentally, um, because of internet or whatever, you'll not be able to get back in and I apologise for that. \n\nUm, if you were, uh, if you're still waiting to participate, you can click the links and get into the meeting before it closes. \n\nIt interferes with my ability to quit breakout rooms when people are joining and leaving and joining and leaving and then ends up in a breakout room on his own when it's supposed to be a pair and he's like, \"What the heck's going on?\" \n\nYeah, I normally end up alone somewhere. \n\nIt's a time when I actually can do some work. \n\nOkay, well, let's not use that button. How do you do? \n\nI've got a new keyboard function lock. That's what I want. F11. There we go. \n\nUm, okay. \n\nWe have, well, there's some that are not ambiguous at all. Number five. This is the only event where stakeholders are regularly invited to participate. \n\nEverybody's on the same page for that one for sure. \n\nLet me grab a big tick. I agree with everybody on that one. \n\nDuring the sprint review, the product owner may share budgetary and likely release dates. \n\nI'm going to put another big tick. Oh, I'll grab the big tick because then it's already the right size. There we go. I'm going to put another big tick on that one. \n\nWe want to, we'd like to use the sprint review as one of the primary communication mechanisms where we've got everybody together. \n\nRight, so it's open, it's transparent. The stakeholders are there, the team is there, and perhaps leadership is there and the product owner is there and we can communicate things in an open and transparent manner. \n\nAnd it allows us to maybe have or not have or deal with some of those things that come up when somebody else thinks their stuff is more important than everybody else's stuff. \n\nMaybe they can openly and transparently say so and why and then find out they're wrong because everybody else has other ideas, right? \n\nThat's kind of the value in that, in this event. \n\nStakeholders and the scrum team collaborate on next things that could be done to optimize value. \n\nThat's another green tick there. \n\nAnd we want to, what's next, right? Something might have changed, so we need to figure that out. \n\nUh, then we get number three. I'm not doing them in any particular order, I guess new microlighter might have made more sense, but that's not the way I started. \n\nNumber three. During the sprint review, the product owner may present a forecast of progress towards the product goals. \n\nRight? \n\nProduct goals are pretty important in scrum. They help us focus the product backlog and gives us, ah, what's the best way to describe a product goal? \n\nSo, we're going to have some kind of vision or strategic goal for our product and then that might be too nebulous, too far out for the people doing the work to actually connect to that idea. \n\nSo a product goal is an intermediary strategic goal that is far enough out that it's a bunch of sprints but close enough that we as people doing the work can actually see how the work we're doing contributes towards that thing. \n\nBecause sometimes the vision is, you know, some solve some esoteric customer problem and it's difficult to see how we get there because that's two years away. \n\nUm, so how do we get something a little bit closer to connect to? \n\nUh, number one. The purpose of the sprint review is to assess if the product increment should be released to market. \n\nI would say yes, it is. If your stakeholders are sitting there saying we can get value from what is what you have done so far, why would you leave it sitting on a shelf? \n\nWhy wouldn't you ship it to customers? \n\nNow, you might not ship it to customers if the cost to ship to customers is too high, right? \n\nBut then I would want to have a conversation about why is the cost to ship to customers so high? \n\nHow can we fix that problem? \n\nShouldn't each increment go to the, you? \n\nIt should be released, but regardless, it shouldn't be part of the review to assess if it can be shipped. \n\nAh, so I think it's saying if it should be shipped. \n\nSo if we have a potentially releasable increment at the end of the sprint, we get together at the sprint review and one of the outcomes might be push the red button to actually release it. \n\nIt actually goes to production. \n\nUm, scrum, the scrum guide doesn't require or enforce in any way that you do ship to production at the end of every sprint. \n\nIt just requires that you have a potentially shippable increment, a usable increment. \n\nUm, I would add to the scrum guide and say yes, you should be shipping to production at the end of every sprint. \n\nAnd if you can't ship to production, I'd want to figure out why and how do we fix those things? \n\nThat statement just had two negatives and didn't catch both of them, the assess and should, because I thought assess if, yeah, I missed the should instead of, yep, that's probably my bad English of I know of Norwegian, so he obviously has better English than the rest of us for sure. \n\nNo, I'm just the two negatives caught me. \n\nOkay, yeah, that's my experience of being in Norway as I say stuff and people are like, \"Yeah, that's wrong.\" \n\nWe don't speak English in Scotland, do we, Peter? \n\nNo, no, no, I just, uh, yeah, I'm just saying the two negatives in that statement caught me off guard. \n\nYeah, what did I just, I missed this should, the assess and should release to production. \n\nOkay. \n\nUh, what we got left? Number two. \n\nBy the way, that's the reason why I'm the red dot. \n\nOkay, that's okay. You did not, you were not required to own up to that. \n\nUm, station two. This is a four-hour time box event for a one-month sprint. \n\nThat is what the scrum guide says. \n\nYou have up to four hours for a sprint review, right? \n\nAnd it's usually, it's proportionally less for shorter sprints. \n\nSo if you're doing a two-week sprint, you kind of have up to two hours, I would suggest. \n\nThat if you're not having enough conversations to fill that time, that for me would indicate a smell. \n\nI'm not going to say it's wrong, right? \n\nIf you do a 15-minute sprint review and everything is awesome, you're building the right thing, your stakeholders are happy, they understand what's going on, your team knows where you're going, um, and you can do that in 15 minutes. \n\nOh, awesome, right? \n\nBut in general, I would see it as a smell if you're not able to fill that time or at least fill a good proportion of that time. \n\nIt would mean to me that we're maybe not getting to the crux of the conversation, we're not communicating enough, maybe we're not getting enough feedback from our stakeholders, we're not engaging with our stakeholders. \n\nUm, for them to provide feedback because I don't know if you've noticed, right? \n\nBut if you have a meeting, whether it's Teams or Zoom or any platform, and you ask a question and there's 20 people there, you'll generally have tumbleweeds. \n\nYou won't have anybody saying anything. \n\nIf you do have people saying something, it will be the loud people who always talk or the hippo, right? \n\nYou heard that expression, that the highest hippo, highest paid individual in the room, that's the hippo, right? \n\nSo either people don't feel like they can talk, they don't feel like it's a forum within which they can voice their opinions, or they don't really feel invited, they feel like it's a platitude, right? \n\nSo there's a couple of techniques you can use in there. One is, um, I can't remember the name of the technique, but it's you make sure you get an affirmative or a negative from everybody in the room. \n\nEverybody has to say either yes or no, and we take them not saying anything as they totally disagree with what we say. \n\nSo are you happy with this product? I want to hear a yes from everybody. \n\nThat can be a technique you can use to get to that person that's going to say, \"Well, no, this is a problem,\" right? \n\nBut maybe they didn't want to say anything. \n\nAnd to encourage them to talk, the other way is do breakout rooms, do smaller exercises, leverage those liberating structures. \n\nI'll talk about some of the options that I have seen work. \n\nUm, I would also say that everything I say is what I've seen work in the contexts within which I've been working. \n\nUm, so Peter may have things that work for him but don't work for me, or may have things that work for him and don't work for me, and it's culture-specific as well. \n\nThe Brits can be fairly loud and obnoxious in meetings; the Norwegians could be fairly reserved and not boisterous at all, right? \n\nSo you need to take that into account, who is attending your meeting and what is their culture, even within different companies. \n\nUh, and then the last one, number four. I don't know why I ordered them in that weird way, but there we go. \n\nUh, sprint review has the highest number of participants, making it an expensive event. \n\nOkay, so this time, all of these statements are in fact true, and the sprint review is usually your most expensive event. \n\nRight? You've got two hours, you've got the scrum team, so the product owner, the developers, and the scrum master, and a whole bunch of stakeholders, business people, people who care about your product. \n\nThe most people at any time are in that event, therefore it is, by definition, the most expensive event you have. \n\nSo you want it to be valuable, right? If you're wasting people's time, you'll find that participation will decrease over time because people will stop coming back. \n\nIf you don't show people anything they care about, they're not going to come back next time, right? \n\nEven if you don't show them anything they care about, if they're not engaged and don't see anything they care about, they're definitely not coming back. \n\nSo we need to figure out how do we encourage people to participate in that event. \n\nDoes that sound reasonable for my answers? Reasonable? Anyone to disagree with anything? \n\nOh, I got a little heart pop up there. That's pretty good. \n\nUsing the tool. \n\nUsing the tools. \n\nUm, okay, so let's look at what a sprint review might look like. \n\nOkay, so I've got a couple of pieces that I want to talk about here, and then I've got some little exercises around it. \n\nSo the first piece to think about is what's the purpose of the sprint review in scrum? \n\nPeter, I know I'm putting you on the spot, but what do you think the purpose of the review is? \n\nFeedback. \n\nRight, it's part of our empirical process control system, which scrum is trying to implement. \n\nAnd empiricism just means feedback. It means look at what happened and figure out what to do differently next to make what happened better the next time around. \n\nLike that, those empirical feedback loops, inspect and adapt, all different ways of saying the same thing. \n\nSo the sprint review's outcome should be an understanding of what we are doing next. \n\nAnd in scrum, we store that information in an artifact to provide transparency called the product backlog. \n\nRight? That's where we're transparently reflecting what are we going to go do next, what's the next most important thing to do, what's coming up after that, right? \n\nThat's where we're reflecting that. \n\nSo we need to walk out of the sprint review with an updated product backlog. \n\nUh, yeah, I can put, uh, could you put the link for the mural in the chat? Just copy it from where you're talking. \n\nAnd you have one more question in the chat as well. \n\nI haven't had that. It says, can you like, what happens? So Carlos is asking what happens when the product owner is absent in the sprint review? Could you share your opinion on that, please? \n\nThat is a very good question. I am going to share it with a little story. I worked with an organization in Horton, which is about, I don't know, it's about two hours south of Oslo, I think it is. Two hours southern, one hour, two hours would train, one hour, yeah. \n\nI always went on the train, so it was two hours. \n\nUm, and I had, I worked with this team and they were very, I'm actually going to say depressed, right? They were not a happy team. \n\nUm, they had a very negative outlook on the work they were doing and what they were doing, and I was trying to figure out what the problem was. \n\nRight? So I go to the sprint, the events and see what's going on, and at the sprint review, I just asked them, I didn't see anybody new, so I was like, \"Who's the product owner?\" \n\n\"Oh, oh, that's Thor, right? He's not here.\" \n\nLike, is this, is he usually here? \n\n\"I don't know, he doesn't normally come to the sprint reviews.\" \n\nHow would you feel as a team if your product owner thought so little of the work that you were doing that they couldn't even be bothered to come and see what it was you did and how well it was done? \n\nHow would that make you feel? \n\nProbably make you feel like nobody values your work. \n\n[Music] \n\nRight? \n\nWhat are the three things that we need to feel like we can work well as from at Drive Dan Pink's book Drive? \n\nLet me remember what the three things were. \n\nIt was autonomy, mastery, and purpose. \n\nWith the three intrinsic motivations, once you get money off the table, when we're not worried about putting a roof over our head, autonomy, mastery, and purpose. \n\nWe want to feel like we're in control of the work we do, right? \n\nSo scrum facilitates that with our self-organising teams selecting the work at sprint planning. \n\nWe want to feel like we're good at our job, right? That we're learning more things, mastery of our profession, right? \n\nAnd that manifests both in professional scrum, right? We're doing that part well, but also engineering excellence. \n\nIf you're a software team, you know, are we doing DevOps practices? Are we getting value from our product? Are we continually shipping it to production? Are we always increasing quality? Are we learning from each other? \n\nThat's that mastery. \n\nAnd then purpose. Are we building stuff that matters? \n\nDo we feel like the stuff we build matters to other people? Because otherwise, why do I get out of bed in the morning if what I do doesn't matter? \n\nOkay, well, I won't do it then, and we'll have the same outcome. \n\nSo how do you create that purpose for people? \n\nAnd the product owner turning up to the sprint review is probably one of the first steps. \n\nIf you can't get the product owner in, you probably can't get the stakeholders in either. \n\nAnd isn't he supposed to get them in at least on the, that's one of his jobs as well, to get them together to showcase what's happening? \n\nAnd part of the problem I found for this team was that the product owner also wasn't doing the product backlog. \n\nTherefore, the team was building stuff that the product owner didn't care about because the product owner didn't care what they were working on enough to go update the product backlog and tell them what to work on. \n\nRight? \n\nSo it was one of those vicious cycles of spiralling down to mediocrity. \n\nAnd the question is, what was he actually doing to have the title product owner? \n\nSounds like he was not doing anything. \n\nSo, but this is where we get to that difference between do I have the job title of product owner or am I fulfilling the accountabilities of being a product owner? \n\nAnd I don't really care about the job title part. You can be called a delivery manager, you can be called a product manager, you can be called a project manager, right? \n\nI don't care what your job title is. \n\nBut somebody needs to take the accountabilities of the product owner, um, which is making sure that there's a clear, transparent product backlog that reflects transparency of the future that, um, everybody on the team and the stakeholders understand what those things are and then actively managing that going forward into the future. \n\nSo if those things aren't happening, that's where I would look. Who's supposed to be doing that? \n\nSo another question in the chat there. How do you get outcomes from the user? \n\nCould you recommend some tips? \n\nNow, I'm not sure I understand outcomes from the user, so maybe you need to explain a little bit better, but I think I might answer that question as we go through. \n\nOkay, how do we get feedback from the user maybe? \n\nUm, or maybe it could also be that you're asking how do we know what the outcome's supposed to be rather than just being given solutions, which quite often users try and give us solutions. \n\nSo I'm not sure what you mean there, Carlos. \n\nAndre is asking an interesting question as well. \n\nBut can the scrum master be asked to back up the product owner in their absence? \n\nRight? \n\nAnd I would ask the question, if a product owner is doing their job right, they are taking those accountabilities, then they should be knowing what's happening in the marketplace, what's happening inside of the business. \n\nUh, they have relationships and manage relationships with stakeholders, whether difficult stakeholders, negative stakeholders, they still need to manage those relationships. \n\nAnd they take all of that information of what the team wants to do, what the technical realities of the product is, what the business needs are, what the commercial realities are, and they funnel all of that information into here's what we're going to do next. \n\nI'm not sure that I have often seen scrum masters that have the knowledge and skills to do that, right? \n\nSo it's like in a different set of experiences. \n\nI'm not saying it can't happen, right? \n\nBut I would probably prefer a business analyst to be back up for the PO because they're going to have a better understanding of what the business needs than the scrum master might have. \n\nOr maybe the scrum master is your business analyst, in which case maybe yes, right? \n\nThere's no real rule around that. \n\nAh, so Carlos is asking how do we measure the outcomes? \n\nUm, let me kind of, let me put a pin in that and you ask that in a little bit, okay? \n\nUm, because I think we might get to that. \n\nUm, so what do you think we need going into a sprint review? \n\nWhat's, what's, I mentioned a couple of things as part of this funnel, right? \n\nOne of the things that the product owner needs to bring into that story in order to be able to review, discover, and rearrange the product backlog to reflect transparency in the future. \n\nWhat should we show? What should we have on here? \n\nYou have the sprint goal from the last sprint, so that's what you should be measuring yourself against. \n\nBecause maybe we're measuring our, yep, we are likely measuring ourselves against did we achieve the thing that we committed to? \n\nYeah. \n\nWhat else is important in this product strategy? \n\nGiving us the direction where we want to go so we can align flex strategy. \n\nYeah, absolutely. What's our overall strategy? \n\nI would suggest that might be a combination of the product vision and maybe the current product goal, right? \n\nBut maybe there's more information there, so I'm happy to put all of those things on the list. \n\nThere's probably useful information. \n\nWhat else? \n\nRemember, your product owner is spending the money. \n\nThey're deciding what we're going to go work on. \n\nSo what do we need to discuss in order to try and be as right as possible at this point in time in what we're building next? \n\nSo the value of the product backlog items. \n\nYeah. \n\nThe value contained within the product backlog. \n\nWhat about we just did this two weeks ago? \n\nLet's say we're doing two-week sprints. \n\nWe just, we're doing two-week sprints two weeks ago. \n\nUm, what's changed in the last two weeks? \n\nYou've discovered more. \n\nAce or later wants you to inspect the outcome in the chat. \n\nYeah, so the, the, I'm, what is the outcome? What's the result of all of our work? \n\nThe increment. \n\nYeah, we need to inspect the increment. \n\nThe product has changed in the last two weeks. \n\nMaybe that means some of the stuff that's on our backlog we don't need. \n\nMaybe that means that there's other stuff we do need because of whatever we built. \n\nRight? \n\nBut there's also changes in the business, right? \n\nWhat's happened in the business in the last two weeks? \n\nIs their needs and desires exactly the same as they were two weeks ago? \n\nIsn't that part of just having the backlog always ordered according to what's required or what's the changing tide in the business? \n\nSo this is the moment where we have all of those stakeholders as well as the team together. \n\nSo you mean more reordering the backlog based on what has changed, not because if there's a change for it, because otherwise I would expect that to be always present in order backlog. \n\nSo maybe there's a change that the product owner knows about, but maybe there's a change that they don't. \n\nYeah. \n\nWhat's happened in the business? \n\nAnd then perhaps market changes. \n\nIf you're building a commercial product, what's, what have competitors been doing? \n\nRight? \n\nMaybe that's going to impact how our priorities have changed, right? \n\nWhat do you think happened in the sprint first sprint review at the Microsoft Teams when lockdown happened? \n\nRight? \n\nWe need the world's changed. \n\nWe need to throw out this backlog and what do we need now? \n\nWhat's the most important thing we can do to help solve our users' problems now, which might be completely different from two weeks ago, right? \n\nI would argue that is a massive change that you don't want to wait for the sprint reviews. \n\nI would definitely agree. \n\nProbably it requires a special session and something bigger happen. \n\nYeah. \n\nI used a massive example, which definitely I would agree or would probably have some special things happening. \n\nUm, but what's happening in the market? \n\nWhat competitors are releasing? \n\nMaybe they've released a feature that means that users are starting to gravitate towards your competitors rather than your product. \n\nHow do you get ahead of that? \n\nHeaded off and do that. \n\nSo we're going to take all of that information, present it in some way, and bring it into everybody's consciousness, their frontal lobe, so we can noodle on it and have discussions about it. \n\nSo we don't just need stakeholders, but we need the right stakeholders for the conversations that we need to have. \n\nSo you're right, the product owner probably needs to have some understanding of what do I want to discuss walking into the sprint review so I can invite some of the right stakeholders. \n\nRight? \n\nSome stakeholders are going to come every sprint because you're building stuff they care about, so they want to provide you with feedback. \n\nSo stakeholders is kind of a catch-all word that they use in scrum, which just means anybody who cares about the outcomes that the team's working on. \n\nRight? \n\nSo they could be users, could be business people, could be purchasers, could be anybody. \n\nI worked with a company in the UK, and they ended up having to, they had one of those, um, like all hands meeting rooms in their company headquarters, and they would fill that for a sprint review. \n\nThey'd be hard pushed to fit the hundred people that turned up to see their sprint reviews. \n\nRight? \n\nBut it took them months of what do you really want? \n\nAnd once you start building things that people want, they'll want to come and provide you with feedback. \n\nRight? \n\nThey don't want to provide you feedback on stuff they don't care about. \n\nSo maybe share the goal, and then does everybody remember what the sprint goal was last sprint? \n\nPerhaps not, so we need to share that as well, and again that would be the product owner sharing that. \n\nAnd then maybe in some way we want to demonstrate the working software. \n\nWho's best placed to demonstrate the working software? \n\nWith the team, wouldn't it? \n\nThey're the ones who just built it. \n\nThey should be able to explain to the stakeholders what it is they've done and why it matters to the stakeholders. \n\nWe're building value after all, not features. \n\nRight? \n\nNobody really cares about user stories and features; they care about value. \n\nWhat do I get from what you've just added? Tell some stories. \n\nRight? \n\nThat's the way I, I, I, storytelling is the best way to do that. \n\nUm, so there's a number of techniques that I've seen work really well in demonstrating the software, um, depending on how many, if you've just got one team, right, doing a presentation, maybe they just present, \"Here's what we changed,\" right? \n\nIf you've got ten teams, that might take too much time. \n\nSo, uh, maybe you need something that looks more like, uh, have you seen in those American movies when the kids have their science fair at the school? \n\nAnd you've got a bunch of stations, each presenting a different thing, and people go to the things they care about? \n\nThat's the science fair model, and that can be implemented virtually as well with breakout rooms, and there's various techniques for that. \n\nUm, but doing that might be good. \n\nUh, doing some kind of shift and share if you've got a lot of stakeholders. \n\nShift and share is when you send people out to breakout rooms, and each breakout room is a particular feature or part of the product that one of the teams has been working on, and then you have the attendees move to the next room, the next room, the next room. \n\nUh, in order to facilitate that, I've done that one in Teams, um, and it works in Zoom as well. \n\nBut how many teams should a sprint review have? Shouldn't it be per team kind or rent review per product? \n\nSo if you have ten teams working on one product, you show one unified working increment to the stakeholders because you've only got one product. \n\nSo we're doing a review of the increment, and we have one increment. \n\nWe don't, ten teams working on the same product don't create ten different increments because then that's not integrated together. \n\nTherefore, it wouldn't meet a definition of done. \n\nAnd that sounds good. \n\nSo what a lot of teams do, or what a lot of product management does, is they create some kind of alignment in their product to minimize the number of people that are part of each of these stories. \n\nRight? \n\nSo if you look at the way, and the example I always use examples from the Azure DevOps team because I've been working with them for a long time, but they all over the part of the eight years of their transition towards agility was they shifted their product from one big ball of string, right, to almost like verticals of here's a, and it's now called Azure Boards, right? \n\nThe graphical representation of the work that you're doing. \n\nSo there's one product owner for one product, and then that product owner maybe has two or three teams working for them, and those two or three teams are contributing to that single unified product. \n\nSo you have one backlog, one product owner, one maybe one sprint planning or like a pre-planning and one sprint review. \n\nYeah, but would you do one sprint review for all five products in that? \n\nIf I had five products, different products, I would maybe have five different reviews. \n\nYes. \n\nYeah, but your Azure DevOps is now becoming a mixed sample or mixed example because now they're five different products, which each of them, so at the small scale, right, there is only one right answer: one product, one product backlog, one product owner. \n\nRight? \n\nBut once you scale up to larger interconnected systems, maybe some of those systems are their own products that can be shaped on their own. \n\nBut I would suggest if it ships together, it needs to be reviewed together. \n\nRight? \n\nSo if you have a product where you're breaking it up by component rather than by vertical value streams, then you probably need, you probably forced into the larger review where you've got one bigger product. \n\nAnd now when you do have a much larger review, something the Azure DevOps team did do was prior to their sprint review, every team would create a video to present the demo of what it was they created and send that out to everybody. \n\nSo it's been my experience for the big projects or big programmes to do one demo for the whole project product, however you want to describe it. \n\nUm, and at one level, you could say, \"Well, I was looking after data migration. Did I really care that much about the user experience at the other end of the data flow?\" \n\nBut it was still useful to hear someone say, \"What we want to see next sprint is we want to see the events.\" \n\nSo then that would actually inform me why people were then chasing me to migrate events from the database through the entire value chain. \n\nSo even though I normally didn't care, it actually provided me and my team with some useful feedback. \n\nUm, they, we can't load this data, whatever x, y, and z data, so we're not going to display in the UX for another couple of weeks. \n\nSo that would inform the guys at the other end of the flow, \"Well, let's not plan any work around trying to get that data in because the migration team aren't going to get it to us for a few sprints.\" \n\nSo it is useful for everyone to hear at least five or ten minutes what everyone else is trying to achieve. \n\nYeah, the other teams are also stakeholders to your input or output. \n\nMaybe some of those teams are providing output that is your input, right? \n\nAnd maybe you're providing output that is their input. They're blocked from delivering some features until you've got something there for them. \n\nRight? \n\nSo it's that whole context that is important in the demonstration. \n\nAnd so I do agree that there are scale issues, and you have to figure out what practices work. \n\nUh, the Nexus framework, which is scrum.org's scaling framework, encourages having a single sprint review, but it does talk about it being for up to nine to ten teams working together. \n\nIf you get more than that, you probably want to spread it into, I think they have a, I can't remember what the phrase is, but it's Nexus of Nexus. \n\nRight? You might have multiple nexi, uh, that roll up to a single product. \n\nIt's just more complicated, and the example that I think sits well with what you're talking about over is I think about the Office team, right? \n\nThe Office team, SharePoint is not really that dependent upon Word, but Word exists also as a separate app but also inside of SharePoint. \n\nSo maybe there is a lot of crossover, um, but they've got nine hundred people-ish working on that product. \n\nUm, so how might they organise that to be, to get the information to the people that need it, the feedback from the people that need to provide that feedback? \n\nUm, it's figuring out what works at scale. \n\nThere are no hard rules at scale; there's so many different options there. \n\nYeah, I'm just seeing some, you said it was up to four hours. \n\nYeah, I know it's just a number, but up to four hours for a one-month sprint, and you should be able to fill it. \n\nBut then if you are done, three teams, are you at twelve hours then? \n\nNo, it's still one sprint. \n\nSo what I've seen work, and actually what one of the teams that Peter was working with, um, they had a tight time box inside the sprint. \n\nMaybe each day, I think there were six teams, and maybe each team gets seven minutes to show their stuff, or maybe it was only five minutes to show their stuff. \n\nUh, I, I, so you're definitely bringing it down a little bit, but what I found valuable was once they got into our cadence of having those discussions about how do we fit all six teams inside of this sprint review, they started talking about telling a story rather than just showing, \"Here's I added this feature to the product.\" \n\nOkay, but why did we add that feature? How does that fit into the story of what these six teams are trying to build? \n\nAnd that started to then add more context, and so that it was even more targeted feedback on, \"Well, we've built this part of the story. Maybe we need to focus on this part of the story next because then we can have a holistic view of what's going on.\" \n\nIt's generally to elicit conversations. The more conversations you have, hopefully, the better the outcomes. \n\nBut that was demonstrating. Yes, it doesn't say if you are time boxed, then you can always say at the end, \"Now we covered off A, B, and C. If you want more information, you know where to find us.\" \n\nYeah, so if someone is particularly interested in, I don't know, you know, some example, then you should always have that as an open invitation. \n\nDid you find that that happened a lot? \n\nUh, yeah, but we're all on the same floor in one big building, so it wasn't difficult. People would actually come and get you immediately afterwards if you'd said something that their areas pricked up on. \n\nThey wouldn't dive deep into it then and there because they can be very expensive, but they will come and see you afterwards and say, \"You weren't going to shift this information. We actually only want a tiny amount. Could you actually prioritise that?\" \n\nThat's the sort of thing that people would say after that event. \n\nYou know, maybe even three or four scrum masters get together and try and work out exactly what we could deliver in terms of, you know, to the overall product if someone wanted to specific for some very, you know, high-value reason. \n\nSo that gets to that collecting feedback. \n\nHow are we going to collect feedback from people, especially when we're in the virtual space? \n\nBecause most of us are operating almost 100% in that virtual world, and it's even more difficult to get feedback from people. \n\nYou can't just look at the person who you know has some feedback or see it as easily on their face if they don't have their cameras on. \n\nUm, so the two types of exercises that I've done with teams are one, two, four, all right? \n\nSo have them build lists. One, two, four, all is about building lists, and it's one minute on their own creating a list, two minutes in pairs forming it in fours, and they merge those lists and then bring it back to the whole room. \n\nSo what are the ideas for what's next? \n\nUm, there's also another exercise which is made up of three parts that I've used called a what, so what, now what? \n\nRight? \n\nAnd that's quite an effective way to figure out what's next. \n\nSo I've got both of those added to the mural as suggestions to go research and look at and see if it will do. \n\nBoth of them are part of liberating structures, so you can go to the liberating structures website and see that there. \n\nUm, but, uh, what, so what, now what? I've had some really good experiences with it, not just in sprint reviews but in other areas as well. It's quite a useful technique. \n\nOh, so collecting feedback, and it's again, it's the team and the product owner who are kind of hosting that. \n\nAnd then maybe we need to review the business changes, right? \n\nMaybe this is where, uh, not only do we have the product owner and the team providing input, but we've now got to bring the stakeholders in as well. \n\nOh, well, they're providing from collecting feedback, but, um, they're talking. \n\nThey are bringing, you're saying to the stakeholders, \"What's changed in your part of the business that you think matters to what we're building?\" \n\nHas do is what you need changed? \n\nRight? \n\nBecause if you build stuff that people don't need, they're not going to provide you with feedback. \n\nThey're not going to care about what you're creating. \n\nWhat do those people need, right? \n\nAnd what do they need next? What's the most valuable thing we can do for them? \n\nAnd now what? \n\nSo what now? What can definitely work in that space as well? \n\nUm, and maybe those two activities you might roll into one, collecting feedback and business changes and having those discussions. \n\nUm, but I just wanted to be clear that we need to make sure we cover both of those topics. \n\nAnd then we need to actually review and update the product backlog. \n\nSo I would potentially crack open the product backlog, show everybody what's at the top of the product backlog, and are these still things we need? \n\nRight? \n\nSome of them might be technical needs because the team needs to do them in order for other things to happen, but we can have those conversations. \n\nI don't want a stakeholder going home fuming, \"Why am I not getting the thing I want? I thought it was more important than this other thing.\" \n\nBut actually, this other thing is a prerequisite of the thing they want. If they don't understand that, they're going to be pissed, right? \n\nBecause they're not getting their thing. \n\nI normally publish the draft, um, sprint backlog for the next sprint and maybe even do it prior to the meeting so it's actually circulated in advance. \n\nUh, that way people can turn up with a pre-prepared opinion. \n\nThat is definitely a good way to prepare people if you have that information. \n\nHave a draft of the goal. What do you think? What does your product owner think the goal is going to be for the next sprint? \n\nWhat are the things that they think in collaboration with the team are going to be part of that story? \n\nBecause they should have had those conversations during refinement. \n\nRight? \n\nOh yes, so Carlos, the one, two, four, all is you have one minute for people to write stuff down on their own, two minutes in pairs, and then you join two of the pairs together and they get four minutes in effectively two pairs and then bring it back to the whole room. \n\nAnd it's a way to get even the most introverted people part of the conversation and contributing to the story. \n\nDefinitely gets people out of their shell. You can find it on the liberating structures website. \n\nUm, but I run that, I use that judiciously in the live virtual classroom space for sure. It's a really good way to break that up and stop people feeling like meetings and events suck because it's just, you know, broadcast. \n\nIt's collaborating on what to do next. \n\nUm, and then the last thing I've got is perhaps reviewing timelines and budgets for the next release. \n\nRight? We're spending the customers' money. \n\nWe're spending the businesses' money. They kind of want to know how, how are we spending it? \n\nAnd I would rather do that in an open and transparent public space with all of the stakeholders that care about that stuff than the product owner having ten private conversations with a group of people having to justify themselves ten different times, maybe in ten different ways. \n\nRight? \n\nDon't let your product owner be browbeat, browbeaten, I think is the expression, by the stakeholders because they get them alone in a room. \n\nRight? \n\nHave these discussions open and transparent. \n\nLet's let the stakeholders browbeat each other rather than the product owner. That's the way I look at it. \n\nAnd at the end of the event, we've updated the product backlog. \n\nWe physically updated it. We've made changes to it. We've changed the order. We've added new things. We've deleted things. \n\nTo me, that sounds like quite a lot to happen in two hours. Sounds like I might struggle for time, right? \n\nSo maybe we can't cover everything every sprint review, but what's the important things to cover, especially if you've got big teams off, right? \n\nAnd that science fair model works really well where people just see the ones they care about. \n\nUh, it was a question. \n\nYeah. \n\nSo somebody's asking what happens if I don't get everything done for a piece of value? \n\nAnd I would say that piece of value is not done. \n\nAnd if you show stakeholders something that is half-finished or even 90% finished, they're not going to be happy. \n\nAnd if you try and claim that it's finished, like show them something as if it's finished, it's not really morally or ethically sound. \n\nI, we're basically saying we finished this. \n\nDon't tell them we haven't finished those four things that need to be done and we'll do them tomorrow because they might get forgotten or the world might have changed tomorrow and we need to do something different, right? \n\nAnd that thing never gets done. \n\nDon't get caught lying to your stakeholders. \n\nOpen and transparent is kind of the key there. \n\nAnd even if it's small, like, like, uh, in Magda's version, if even if it's just a little bit negative all the time, that can build up to that death of a thousand cuts for a team and end up in that spiral of negativity. \n\nUm, trying to bring it down to what's the smallest thing we can deliver. \n\nIf we feel like we're never meeting our sprint goals, we're probably taking on too much work, right? \n\nOr we've got the wrong sprint goals. Fix those things. \n\nCreate a virtuous cycle supporting the team and what it is they're trying to do, and hopefully we'll build more awesome stuff and less sucky stuff. \n\nThat's what we'd like to see. \n\nAre there any highlights? \n\nUh, maybe I want to, uh, ask about something in here. I mean, like, it's in my mind. It's, uh, like plus and minus persons because, uh, about the criticism. \n\nUh, what do you think about it? Like, uh, is the criticism is a kind of feedback through or is it just negative? \n\nSo there's constructive feedback that is negative about what it is we did. \n\nAnd then those, um, was that Carlos or Andre? \n\nAndre that was asking the question. \n\nAndre, um, that question sucks and I don't like the way you said it. \n\nOkay, that's not constructive feedback, right? \n\nRight, yeah. \n\nSo it's if you think of the scrum values, we want to be openness, right? And courage to say that things are wrong, but respectful. \n\nI don't know, we see it, and it's not respectful to have some hippo in the room saying to the team that you suck and everything you did sucks, and your products suck. \n\nYou know, that's not to create a positive response in anybody. \n\nSo part of the role of the scrum master is helping everybody interacting with the scrum team understand what interactions are helpful and what aren't as well. \n\nSo maybe if that person who's like that is going to be participating, maybe the scrum master needs to go maybe coach them and help them understand how do we create positive interactions, not negative interactions. \n\nAnd you can be critical, positive in a positive way, right? \n\nAnd it's about the way we speak to people, the language we use. It is really important, and it's culturally specific as well, right? \n\nSo what works in, when I'm teaching classes, what works in Saudi Arabia doesn't work in the UK, it doesn't work in Norway, right? \n\nSo you need to take that into account, who is attending your meeting and what is their culture, even within different companies. \n\nAnd then the last one, number four. I don't know why I ordered them in that weird way, but there we go. \n\nUh, sprint review has the highest number of participants, making it an expensive event. \n\nOkay, so this time, all of these statements are in fact true, and the sprint review is usually your most expensive event. \n\nRight? You've got two hours, you've got the scrum team, so the product owner, the developers, and the scrum master, and a whole bunch of stakeholders, business people, people who care about your product. \n\nThe most people at any time are in that event, therefore it is, by definition, the most expensive event you have. \n\nSo you want it to be valuable, right? If you're wasting people's time, you'll find that participation will decrease over time because people will stop coming back. \n\nIf you don't show people anything they care about, they're not going to come back next time, right? \n\nEven if you don't show them anything they care about, if they're not engaged and don't see anything they care about, they're definitely not coming back. \n\nSo we need to figure out how do we encourage people to participate in that event. \n\nDoes that sound reasonable for my answers? Reasonable? Anyone to disagree with anything? \n\nOh, I got a little heart pop up there. That's pretty good. \n\nUsing the tool. \n\nUsing the tools. \n\nUm, okay, so let's look at what a sprint review might look like. \n\nOkay, so I've got a couple of pieces that I want to talk about here, and then I've got some little exercises around it. \n\nSo the first piece to think about is what's the purpose of the sprint review in scrum? \n\nPeter, I know I'm putting you on the spot, but what do you think the purpose of the review is? \n\nFeedback. \n\nRight, it's part of our empirical process control system, which scrum is trying to implement. \n\nAnd empiricism just means feedback. It means look at what happened and figure out what to do differently next to make what happened better the next time around. \n\nLike that, those empirical feedback loops, inspect and adapt, all different ways of saying the same thing. \n\nSo the sprint review's outcome should be an understanding of what we are doing next. \n\nAnd in scrum, we store that information in an artifact to provide transparency called the product backlog. \n\nRight? That's where we're transparently reflecting what are we going to go do next, what's the next most important thing to do, what's coming up after that, right? \n\nThat's where we're reflecting that. \n\nSo we need to walk out of the sprint review with an updated product backlog. \n\nUh, yeah, I can put, uh, could you put the link for the mural in the chat? Just copy it from where you're talking. \n\nAnd you have one more question in the chat as well. \n\nI haven't had that. It says, can you like, what happens? So Carlos is asking what happens when the product owner is absent in the sprint review? Could you share your opinion on that, please? \n\nThat is a very good question. I am going to share it with a little story. I worked with an organization in Horton, which is about, I don't know, it's about two hours south of Oslo, I think it is. Two hours southern, one hour, two hours would train, one hour, yeah. \n\nI always went on the train, so it was two hours. \n\nUm, and I had, I worked with this team and they were very, I'm actually going to say depressed, right? They were not a happy team. \n\nUm, they had a very negative outlook on the work they were doing and what they were doing, and I was trying to figure out what the problem was. \n\nRight? So I go to the sprint, the events and see what's going on, and at the sprint review, I just asked them, I didn't see anybody new, so I was like, \"Who's the product owner?\" \n\n\"Oh, oh, that's Thor, right? He's not here.\" \n\nLike, is this, is he usually here? \n\n\"I don't know, he doesn't normally come to the sprint reviews.\" \n\nHow would you feel as a team if your product owner thought so little of the work that you were doing that they couldn't even be bothered to come and see what it was you did and how well it was done? \n\nHow would that make you feel? \n\nProbably make you feel like nobody values your work. \n\n[Music] \n\nRight? \n\nWhat are the three things that we need to feel like we can work well as from at Drive Dan Pink's book Drive? \n\nLet me remember what the three things were. \n\nIt was autonomy, mastery, and purpose. \n\nWith the three intrinsic motivations, once you get money off the table, when we're not worried about putting a roof over our head, autonomy, mastery, and purpose. \n\nWe want to feel like we're in control of the work we do, right? \n\nSo scrum facilitates that with our self-organising teams selecting the work at sprint planning. \n\nWe want to feel like we're good at our job, right? That we're learning more things, mastery of our profession, right? \n\nAnd that manifests both in professional scrum, right? We're doing that part well, but also engineering excellence. \n\nIf you're a software team, you know, are we doing DevOps practices? Are we getting value from our product? Are we continually shipping it to production? Are we always increasing quality? Are we learning from each other? \n\nThat's that mastery. \n\nAnd then purpose. Are we building stuff that matters? \n\nDo we feel like the stuff we build matters to other people? Because otherwise, why do I get out of bed in the morning if what I do doesn't matter? \n\nOkay, well, I won't do it then, and we'll have the same outcome. \n\nSo how do you create that purpose for people? \n\nAnd the product owner turning up to the sprint review is probably one of the first steps. \n\nIf you can't get the product owner in, you probably can't get the stakeholders in either. \n\nAnd isn't he supposed to get them in at least on the, that's one of his jobs as well, to get them together to showcase what's happening? \n\nAnd part of the problem I found for this team was that the product owner also wasn't doing the product backlog. \n\nTherefore, the team was building stuff that the product owner didn't care about because the product owner didn't care what they were working on enough to go update the product backlog and tell them what to work on. \n\nRight? \n\nSo it was one of those vicious cycles of spiralling down to mediocrity. \n\nAnd the question is, what was he actually doing to have the title product owner? \n\nSounds like he was not doing anything. \n\nSo, but this is where we get to that difference between do I have the job title of product owner or am I fulfilling the accountabilities of being a product owner? \n\nAnd I don't really care about the job title part. You can be called a delivery manager, you can be called a product manager, you can be called a project manager, right? \n\nI don't care what your job title is. \n\nBut somebody needs to take the accountabilities of the product owner, um, which is making sure that there's a clear, transparent product backlog that reflects transparency of the future that, um, everybody on the team and the stakeholders understand what those things are and then actively managing that going forward into the future. \n\nSo if those things aren't happening, that's where I would look. Who's supposed to be doing that? \n\nSo another question in the chat there. How do you get outcomes from the user? \n\nCould you recommend some tips? \n\nNow, I'm not sure I understand outcomes from the user, so maybe you need to explain a little bit better, but I think I might answer that question as we go through. \n\nOkay, how do we get feedback from the user maybe? \n\nUm, or maybe it could also be that you're asking how do we know what the outcome's supposed to be rather than just being given solutions, which quite often users try and give us solutions. \n\nSo I'm not sure what you mean there, Carlos. \n\nAndre is asking an interesting question as well. \n\nBut can the scrum master be asked to back up the product owner in their absence? \n\nRight? \n\nAnd I would ask the question, if a product owner is doing their job right, they are taking those accountabilities, then they should be knowing what's happening in the marketplace, what's happening inside of the business. \n\nUh, they have relationships and manage relationships with stakeholders, whether difficult stakeholders, negative stakeholders, they still need to manage those relationships. \n\nAnd they take all of that information of what the team wants to do, what the technical realities of the product is, what the business needs are, what the commercial realities are, and they funnel all of that information into here's what we're going to do next. \n\nI'm not sure that I have often seen scrum masters that have the knowledge and skills to do that, right? \n\nSo it's like in a different set of experiences. \n\nI'm not saying it can't happen, right? \n\nBut I would probably prefer a business analyst to be back up for the PO because they're going to have a better understanding of what the business needs than the scrum master might have. \n\nOr maybe the scrum master is your business analyst, in which case maybe yes, right? \n\nThere's no real rule around that. \n\nAh, so Carlos is asking how do we measure the outcomes? \n\nUm, let me kind of, let me put a pin in that and you ask that in a little bit, okay? \n\nUm, because I think we might get to that. \n\nUm, so what do you think we need going into a sprint review? \n\nWhat's, what's, I mentioned a couple of things as part of this funnel, right? \n\nOne of the things that the product owner needs to bring into that story in order to be able to review, discover, and rearrange the product backlog to reflect transparency in the future. \n\nWhat should we show? What should we have on here? \n\nYou have the sprint goal from the last sprint, so that's what you should be measuring yourself against. \n\nBecause maybe we're measuring our, yep, we are likely measuring ourselves against did we achieve the thing that we committed to? \n\nYeah. \n\nWhat else is important in this product strategy? \n\nGiving us the direction where we want to go so we can align flex strategy. \n\nYeah, absolutely. What's our overall strategy? \n\nI would suggest that might be a combination of the product vision and maybe the current product goal, right? \n\nBut maybe there's more information there, so I'm happy to put all of those things on the list. \n\nThere's probably useful information. \n\nWhat else? \n\nRemember, your product owner is spending the money. \n\nThey're deciding what we're going to go work on. \n\nSo what do we need to discuss in order to try and be as right as possible at this point in time in what we're building next? \n\nSo the value of the product backlog items. \n\nYeah. \n\nThe value contained within the product backlog. \n\nWhat about we just did this two weeks ago? \n\nLet's say we're doing two-week sprints. \n\nWe just, we're doing two-week sprints two weeks ago. \n\nUm, what's changed in the last two weeks? \n\nYou've discovered more. \n\nAce or later wants you to inspect the outcome in the chat. \n\nYeah, so the, the, I'm, what is the outcome? What's the result of all of our work? \n\nThe increment. \n\nYeah, we need to inspect the increment. \n\nThe product has changed in the last two weeks. \n\nMaybe that means some of the stuff that's on our backlog we don't need. \n\nMaybe that means that there's other stuff we do need because of whatever we built. \n\nRight? \n\nBut there's also changes in the business, right? \n\nWhat's happened in the business in the last two weeks? \n\nIs their needs and desires exactly the same as they were two weeks ago? \n\nIsn't that part of just having the backlog always ordered according to what's required or what's the changing tide in the business? \n\nSo this is the moment where we have all of those stakeholders as well as the team together. \n\nSo you mean more reordering the backlog based on what has changed, not because if there's a change for it, because otherwise I would expect that to be always present in order backlog. \n\nSo maybe there's a change that the product owner knows about, but maybe there's a change that they don't. \n\nYeah. \n\nWhat's happened in the business? \n\nAnd then perhaps market changes. \n\nIf you're building a commercial product, what's, what have competitors been doing? \n\nRight? \n\nMaybe that's going to impact how our priorities have changed, right? \n\nWhat do you think happened in the sprint first sprint review at the Microsoft Teams when lockdown happened? \n\nRight? \n\nWe need the world's changed. \n\nWe need to throw out this backlog and what do we need now? \n\nWhat's the most important thing we can do to help solve our users' problems now, which might be completely different from two weeks ago, right? \n\nI would argue that is a massive change that you don't want to wait for the sprint reviews. \n\nI would definitely agree. \n\nProbably it requires a special session and something bigger happen. \n\nYeah. \n\nI used a massive example, which definitely I would agree or would probably have some special things happening. \n\nUm, but what's happening in the market? \n\nWhat competitors are releasing? \n\nMaybe they've released a feature that means that users are starting to gravitate towards your competitors rather than your product. \n\nHow do you get ahead of that? \n\nHeaded off and do that. \n\nSo we're going to take all of that information, present it in some way, and bring it into everybody's consciousness, their frontal lobe, so we can noodle on it and have discussions about it. \n\nSo we don't just need stakeholders, but we need the right stakeholders for the conversations that we need to have. \n\nSo you're right, the product owner probably needs to have some understanding of what do I want to discuss walking into the sprint review so I can invite some of the right stakeholders. \n\nRight? \n\nSome stakeholders are going to come every sprint because you're building stuff they care about, so they want to provide you with feedback. \n\nSo stakeholders is kind of a catch-all word that they use in scrum, which just means anybody who cares about the outcomes that the team's working on. \n\nRight? \n\nSo they could be users, could be business people, could be purchasers, could be anybody. \n\nI worked with a company in the UK, and they ended up having to, they had one of those, um, like all hands meeting rooms in their company headquarters, and they would fill that for a sprint review. \n\nThey'd be hard pushed to fit the hundred people that turned up to see their sprint reviews. \n\nRight? \n\nBut it took them months of what do you really want? \n\nAnd once you start building things that people want, they'll want to come and provide you with feedback. \n\nRight? \n\nThey don't want to provide you feedback on stuff they don't care about. \n\nSo maybe share the goal, and then does everybody remember what the sprint goal was last sprint? \n\nPerhaps not, so we need to share that as well, and again that would be the product owner sharing that. \n\nAnd then maybe in some way we want to demonstrate the working software. \n\nWho's best placed to demonstrate the working software? \n\nWith the team, wouldn't it? \n\nThey're the ones who just built it. \n\nThey should be able to explain to the stakeholders what it is they've done and why it matters to the stakeholders. \n\nWe're building value after all, not features. \n\nRight? \n\nNobody really cares about user stories and features; they care about value. \n\nWhat do I get from what you've just added? Tell some stories. \n\nRight? \n\nThat's the way I, I, I, storytelling is the best way to do that. \n\nUm, so there's a number of techniques that I've seen work really well in demonstrating the software, um, depending on how many, if you've just got one team, right, doing a presentation, maybe they just present, \"Here's what we changed,\" right? \n\nIf you've got ten teams, that might take too much time. \n\nSo, uh, maybe you need something that looks more like, uh, have you seen in those American movies when the kids have their science fair at the school? \n\nAnd you've got a bunch of stations, each presenting a different thing, and people go to the things they care about? \n\nThat's the science fair model, and that can be implemented virtually as well with breakout rooms, and there's various techniques for that. \n\nUm, but doing that might be good. \n\nUh, doing some kind of shift and share if you've got a lot of stakeholders. \n\nShift and share is when you send people out to breakout rooms, and each breakout room is a particular feature or part of the product that one of the teams has been working on, and then you have the attendees move to the next room, the next room, the next room. \n\nUh, in order to facilitate that, I've done that one in Teams, um, and it works in Zoom as well. \n\nBut how many teams should a sprint review have? Shouldn't it be per team kind or rent review per product? \n\nSo if you have ten teams working on one product, you show one unified working increment to the stakeholders because you've only got one product. \n\nSo we're doing a review of the increment, and we have one increment. \n\nWe don't, ten teams working on the same product don't create ten different increments because then that's not integrated together. \n\nTherefore, it wouldn't meet a definition of done. \n\nAnd that sounds good. \n\nSo what a lot of teams do, or what a lot of product management does, is they create some kind of alignment in their product to minimize the number of people that are part of each of these stories. \n\nRight? \n\nSo if you look at the way, and the example I always use examples from the Azure DevOps team because I've been working with them for a long time, but they all over the part of the eight years of their transition towards agility was they shifted their product from one big ball of string, right, to almost like verticals of here's a, and it's now called Azure Boards, right? \n\nThe graphical representation of the work that you're doing. \n\nSo there's one product owner for one product, and then that product owner maybe has two or three teams working for them, and those two or three teams are contributing to that single unified product. \n\nSo you have one backlog, one product owner, one maybe one sprint planning or like a pre-planning and one sprint review. \n\nYeah, but would you do one sprint review for all five products in that? \n\nIf I had five products, different products, I would maybe have five different reviews. \n\nYes. \n\nYeah, but your Azure DevOps is now becoming a mixed sample or mixed example because now they're five different products, which each of them, so at the small scale, right, there is only one right answer: one product, one product backlog, one product owner. \n\nRight? \n\nBut once you scale up to larger interconnected systems, maybe some of those systems are their own products that can be shaped on their own. \n\nBut I would suggest if it ships together, it needs to be reviewed together. \n\nRight? \n\nSo if you have a product where you're breaking it up by component rather than by vertical value streams, then you probably need, you probably forced into the larger review where you've got one bigger product. \n\nAnd now when you do have a much larger review, something the Azure DevOps team did do was prior to their sprint review, every team would create a video to present the demo of what it was they created and send that out to everybody. \n\nSo it's been my experience for the big projects or big programmes to do one demo for the whole project product, however you want to describe it. \n\nUm, and at one level, you could say, \"Well, I was looking after data migration. Did I really care that much about the user experience at the other end of the data flow?\" \n\nBut it was still useful to hear someone say, \"What we want to see next sprint is we want to see the events.\" \n\nSo then that would actually inform me why people were then chasing me to migrate events from the database through the entire value chain. \n\nSo even though I normally didn't care, it actually provided me and my team with some useful feedback. \n\nUm, they, we can't load this data, whatever x, y, and z data, so we're not going to display in the UX for another couple of weeks. \n\nSo that would inform the guys at the other end of the flow, \"Well, let's not plan any work around trying to get that data in because the migration team aren't going to get it to us for a few sprints.\" \n\nSo it is useful for everyone to hear at least five or ten minutes what everyone else is trying to achieve. \n\nYeah, the other teams are also stakeholders to your input or output. \n\nMaybe some of those teams are providing output that is your input, right? \n\nAnd maybe you're providing output that is their input. They're blocked from delivering some features until you've got something there for them. \n\nRight? \n\nSo it's that whole context that is important in the demonstration. \n\nAnd so I do agree that there are scale issues, and you have to figure out what practices work. \n\nUh, the Nexus framework, which is scrum.org's scaling framework, encourages having a single sprint review, but it does talk about it being for up to nine to ten teams working together. \n\nIf you get more than that, you probably want to spread it into, I think they have a, I can't remember what the phrase is, but it's Nexus of Nexus. \n\nRight? You might have multiple nexi, uh, that roll up to a single product. \n\nIt's just more complicated, and the example that I think sits well with what you're talking about over is I think about the Office team, right? \n\nThe Office team, SharePoint is not really that dependent upon Word, but Word exists also as a separate app but also inside of SharePoint. \n\nSo maybe there is a lot of crossover, um, but they've got nine hundred people-ish working on that product. \n\nUm, so how might they organise that to be, to get the information to the people that need it, the feedback from the people that need to provide that feedback? \n\nUm, it's figuring out what works at scale. \n\nThere are no hard rules at scale; there's so many different options there. \n\nYeah, I'm just seeing some, you said it was up to four hours. \n\nYeah, I know it's just a number, but up to four hours for a one-month sprint, and you should be able to fill it. \n\nBut then if you are done, three teams, are you at twelve hours then? \n\nNo, it's still one sprint. \n\nSo what I've seen work, and actually what one of the teams that Peter was working with, um, they had a tight time box inside the sprint. \n\nMaybe each day, I think there were six teams, and maybe each team gets seven minutes to show their stuff, or maybe it was only five minutes to show their stuff. \n\nUh, I, I, so you're definitely bringing it down a little bit, but what I found valuable was once they got into our cadence of having those discussions about how do we fit all six teams inside of this sprint review, they started talking about telling a story rather than just showing, \"Here's I added this feature to the product.\" \n\nOkay, but why did we add that feature? How does that fit into the story of what these six teams are trying to build? \n\nAnd that started to then add more context, and so that it was even more targeted feedback on, \"Well, we've built this part of the story. Maybe we need to focus on this part of the story next because then we can have a holistic view of what's going on.\" \n\nIt's generally to elicit conversations. The more conversations you have, hopefully, the better the outcomes. \n\nBut that was demonstrating. Yes, it doesn't say if you are time boxed, then you can always say at the end, \"Now we covered off A, B, and C. If you want more information, you know where to find us.\" \n\nYeah, so if someone is particularly interested in, I don't know, you know, some example, then you should always have that as an open invitation. \n\nDid you find that that happened a lot? \n\nUh, yeah, but we're all on the same floor in one big building, so it wasn't difficult. People would actually come and get you immediately afterwards if you'd said something that their areas pricked up on. \n\nThey wouldn't dive deep into it then and there because they can be very expensive, but they will come and see you afterwards and say, \"You weren't going to shift this information. We actually only want a tiny amount. Could you actually prioritise that?\" \n\nThat's the sort of thing that people would say after that event. \n\nYou know, maybe even three or four scrum masters get together and try and work out exactly what we could deliver in terms of, you know, to the overall product if someone wanted to specific for some very, you know, high-value reason. \n\nSo that gets to that collecting feedback. \n\nHow are we going to collect feedback from people, especially when we're in the virtual space? \n\nBecause most of us are operating almost 100% in that virtual world, and it's even more difficult to get feedback from people. \n\nYou can't just look at the person who you know has some feedback or see it as easily on their face if they don't have their cameras on. \n\nUm, so the two types of exercises that I've done with teams are one, two, four, all right? \n\nSo have them build lists. One, two, four, all is about building lists, and it's one minute on their own creating a list, two minutes in pairs forming it in fours, and they merge those lists and then bring it back to the whole room. \n\nSo what are the ideas for what's next? \n\nUm, there's also another exercise which is made up of three parts that I've used called a what, so what, now what? \n\nRight? \n\nAnd that's quite an effective way to figure out what's next. \n\nSo I've got both of those added to the mural as suggestions to go research and look at and see if it will do. \n\nBoth of them are part of liberating structures, so you can go to the liberating structures website and see that there. \n\nUm, but, uh, what, so what, now what? I've had some really good experiences with it, not just in sprint reviews but in other areas as well. It's quite a useful technique. \n\nOh, so collecting feedback, and it's again, it's the team and the product owner who are kind of hosting that. \n\nAnd then maybe we need to review the business changes, right? \n\nMaybe this is where, uh, not only do we have the product owner and the team providing input, but we've now got to bring the stakeholders in as well. \n\nOh, well, they're providing from collecting feedback, but, um, they're talking. \n\nThey are bringing, you're saying to the stakeholders, \"What's changed in your part of the business that you think matters to what we're building?\" \n\nHas do is what you need changed? \n\nRight? \n\nBecause if you build stuff that people don't need, they're not going to provide you with feedback. \n\nThey're not going to care about what you're creating. \n\nWhat do those people need, right? \n\nAnd what do they need next? What's the most valuable thing we can do for them? \n\nAnd now what? \n\nSo what now? What can definitely work in that space as well? \n\nUm, and maybe those two activities you might roll into one, collecting feedback and business changes and having those discussions. \n\nUm, but I just wanted to be clear that we need to make sure we cover both of those topics. \n\nAnd then we need to actually review and update the product backlog. \n\nSo I would potentially crack open the product backlog, show everybody what's at the top of the product backlog, and are these still things we need? \n\nRight? \n\nSome of them might be technical needs because the team needs to do them in order for other things to happen, but we can have those conversations. \n\nI don't want a stakeholder going home fuming, \"Why am I not getting the thing I want? I thought it was more important than this other thing.\" \n\nBut actually, this other thing is a prerequisite of the thing they want. If they don't understand that, they're going to be pissed, right? \n\nBecause they're not getting their thing. \n\nI normally publish the draft, um, sprint backlog for the next sprint and maybe even do it prior to the meeting so it's actually circulated in advance. \n\nUh, that way people can turn up with a pre-prepared opinion. \n\nThat is definitely a good way to prepare people if you have that information. \n\nHave a draft of the goal. What do you think? What does your product owner think the goal is going to be for the next sprint? \n\nWhat are the things that they think in collaboration with the team are going to be part of that story? \n\nBecause they should have had those conversations during refinement. \n\nRight? \n\nOh yes, so Carlos, the one, two, four, all is you have one minute for people to write stuff down on their own, two minutes in pairs, and then you join two of the pairs together and they get four minutes in effectively two pairs and then bring it back to the whole room. \n\nAnd it's a way to get even the most introverted people part of the conversation and contributing to the story. \n\nDefinitely gets people out of their shell. You can find it on the liberating structures website. \n\nUm, but I run that, I use that judiciously in the live virtual classroom space for sure. It's a really good way to break that up and stop"
  },
  {
    "id": "17qTGonSsbM",
    "title": "The Importance of Evaluating Direction: Are You Heading the Right Way?",
    "description": "Evaluate your project's direction! 🧭 Discover how to make informed choices and adapt in a changing world. Join us for insights and guidance! 💡",
    "captions": "So there's a quote from Lau which is, \"If you do not change direction, you may end up where you're heading.\" And I think that's absolutely a thing we have to be concerned with. We want to be continuously asking ourselves, are we going in the right direction? And that can be asked at many levels, right? I can be a developer building a product, and I'm writing code. Am I writing the right code? Am I taking this product in the right direction? Am I making the right architectural choices? Am I making the right security choices? Right? Because you don't want to head in that direction where you end up at the end of a product cycle, you're shipping your product to a bunch of users, and there's security flaws, and there's usability issues, and there's... because we've not been heading in the right direction.\n\nAnd that's also true at the product owner level, right? Are we building the right features in our product? Are we going in the right direction to maximise our ability to provide benefit in the market and thus have lots of people use our product? And it also works at the organisational level. Are we as a business focused on the right vision? Are we going in the right direction? And quite often, lots of organisations head off the cliff and don't change direction, right? They forget to look at the data. They forget that the world is ever-changing and ever-dynamic, and that where you thought you were going might not be the right place for you.\n\nThere's a great example. It's a product I use. It used to be called Zoom, nothing to do with the video conferencing tool, but it allowed you... it was basically an AI assistant that would help you with booking your meetings. So you could add them on Teams, you could add them on whatever chat platforms you've got, and I could just message it and say, \"Set me up a meeting with Satia at 3:00 on Thursday,\" right? And it would go off and it would email Satia and say, \"We've got this meeting to set up. How would you like it to be? You want to pick your valid options?\" And it would figure out from everybody's valid options what's a good time to host that meeting, and then it would just book it, right? It would book it straight into your calendar.\n\nBut they realised that that's not how people use their product. Most people that used their product just went to the website and booked through the website, right? They literally went, \"New meeting, here's who I want to attend, submit,\" and that would go off and do it. So they weren't going through the chatbot, so the chatbot was largely irrelevant to their business outcome. The thing that they were delivering that people were using was largely irrelevant. So they actually changed their whole business strategy in order to fit how people were using their product, right? They were taking advantage of an opportunity that arose. Instead of heading in the direction that they were heading, they pivoted. Maybe not far, right? But they pivoted over to a different direction, and they actually renamed their entire organisation. They reasserted all of their interfaces and stuff around this. This is the paradigm that people are actually using in our product.\n\nAnd that's something that lots of organisations don't do. What's a good example of things not happening that way? Oh, I'm not going to remember the dude's name, but the dude that was doing the high jump. Everybody at the time was doing the high jump one leg first, right? And he started doing it. He was the first person to start going backwards, doing the backflip over the high jump, and he was winning gold medals and totally outing all of the competition, like going far higher than everybody else for ten years before everybody else went, \"Oh, actually, maybe we should do it that way. Maybe that's better. He seems to be getting better results.\" Why does it take ten years? Because this is the way we've always done things. We're going in that direction, and we like to keep going in that direction. That's our comfortable, is to keep doing the thing that we've always been doing. And perhaps keeping doing the thing you've always been doing is going the wrong way.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "1AO6FFBlE4Y",
    "title": "The Hidden Costs of Poor Quality Code—and How to Turn It Into a Superpower",
    "description": "Discover the hidden costs of poor-quality code with Martin Hinshelwood. Learn how investing in quality boosts productivity and protects your brand.",
    "captions": "It's a lot more expensive than you think having poor quality code. There are lots of hidden impacts. The obvious stuff is the cost of fixing bugs, right? Because you've got poor quality and people find issues, and that cost gets exponentially more expensive the closer to production you get, right? More expensive to fix it with the customers. But you've also got the cost of customer support. That's obvious stuff. The things that people generally don't think of are things like brand reputation, right? What is the impact of poor quality on brand reputation? Not just poor quality in your product, but poor quality in the way you do things.\n\nThe most recent one is CrowdStrike, right? They had poor engineering practices that resulted in a massive global impact when something went wrong. All they did was what lots of companies do, which is push something to production and didn't really think about controlling the blast radius or any of the other modern engineering practices that they might have. So you've got loss to your brand. You've got productivity of your team, right? If everybody's got to run around trying to figure out what the problem is because it's too difficult to figure it out, then you're going to have a massive loss of productivity.\n\nNot just productivity. There are lots of engineering practices that people use that reduce quality, but they don't think it reduces quality. One of those is branching, right? Having a really large branching strategy. I worked with a company recently that had 96 teams, and they had 96 long-running branches, one for each team. Then each team created their own branches of that. The cost in lost productivity to maintain that, to ensure that you have a working product, is just enormous. Add to that if you're maintaining multiple versions of your product, right? This is a massive cost. \n\nIn general, you should not be maintaining multiple versions of your product. You should not be supporting multiple versions of your product. You should be supporting the latest version of your product and not anything else. In general, I can think of circumstances where I might have two versions of my product or maybe three at absolute tops. But if you have more than that, perhaps you have a version of your product per customer. That's a very common one. That's a massive cost, not just to support and maintenance, but in lost productivity.\n\nIf I'm a developer and I fixed a problem, I fixed a bug, right? Let's take that as an example. I fix a bug in the main version of our product, the latest version of our product, but we realise that it's in lots of customers' versions. Maybe there are 10 customer versions that have this bug. Can I fix it the same in all of those versions? Probably not, right? Because they diverge over time, and perhaps things that I used to fix the product as part of the fix in the main version aren't there in older versions, or it's slightly different, or it's not quite the same version. All kinds of that increases the cognitive load on the engineers. It increases the likelihood of something going wrong because you're increasing that cognitive load.\n\nAnd because you have to backport all of those fixes across all those different versions, what's the cost in missed opportunities? Because your team's having to mess around with lots of work that is avoidable. I'm going to put that in there. These are all avoidable losses in productivity. What are the missed opportunities for your business? What features are you not able to ship because it's harder for you to add features? A great, fantastic example is some data from the Azure DevOps team. The Azure DevOps team had a very long tail on figuring out whether they'd been successful in building the product, right? The engineers had been successful in the code that they write and having the test and validation of those things done, and it was taking 48 to 72 hours to figure that out.\n\nThey invested a bunch of time and energy in paying back poor choices they'd made in the past, some of them deliberate. That's okay, but poor choices they'd made in the past and things they didn't realise were poor choices in the past that they now realise were poor choices. Paying that back took them nearly four years of investment in that story to fully pay it back, right? You know, just like if you take out a loan, you pay it back over a longer period of time, a little piece at a time. So they were paying it back as they had time. They were prioritising it, so it was important to them. They were spending time on it, but they were also doing other things, so it's getting done over time.\n\nSo it took them four years to pay it back, but that, plus fixing that problem, refactoring that problem, re-architecting that part of the problem, so they went from 72 hours—that was the longest—to find out whether you'd broken stuff to three and a half minutes, right? So that's a massive shift. Shifting from long-running system tests to small discrete unit tests as their measure of validation massively impacted their productivity. They went from 25ish features to production each year with 650 people to over 800 features to production with the same 600 people. Not quite the same, right? Because it's four years' time, but more or less the same 600 people.\n\nEven in the first year, when they had a really big focus on paying that back, although there was a long tail, a really big focus on paying it back, they spent most of their time in the first year focusing on fixing a lot of these types of architectural problems. They weren't focused on features, and they still managed to go from 24 features to production to like 60-something features to production—almost three times the number of features were delivered to production at the end of the first year, and they weren't even focused on delivering features. They were focused on building up engineering excellence, fixing those older problems that had crept in over time.\n\nYou know, it's like 15 years working on this product, and it had this massive, massive boost to not just productivity, right? The productivity of the team, but brand reputation went up because you're delivering more features, more experiments, more things that your customers need. You're missing fewer opportunities, and you're having fewer security breaches because if we're iterating much more quickly, which is what you're trying to do, is reduce those feedback loops. You can't leave security to the end. One of the main reasons that companies get large-scale, high-cost security breaches is that they leave security as an afterthought. It's not baked into the process.\n\nIf security is an afterthought, you find a problem in the way you've architected your product. It's a lot of work to go back and fix that, so most people in teams don't because it may be hundreds, thousands of hours to go fix it. Or we could get out the sticky tape and super glue and stick over the top and create something over the top that prevents the hackers from getting into that flaw. But hackers spend copious amounts of time figuring out how to peel back the edges of those sticky things and get underneath and get access to the system.\n\nSo by paying back this technical debt of increasing the level of quality in your product, you have all kinds of exponential benefits to your ability to deliver product to your customer, the happiness of your customer, and you're able to not just reduce costs. Technical debt is not just a cost; it's a missed opportunity. Right? What money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "id": "1CCv95gd_oU",
    "title": "Agile in Nigeria 2020 - Emotional Intelligence & Team Performance with Louisa Mensah",
    "description": "Join Louisa Mensah as she explores the impact of emotional intelligence on team performance in Agile environments in Nigeria. Discover key insights and strategies!",
    "captions": ""
  },
  {
    "id": "1cZABFi7gdc",
    "title": "Hiring the Right Agile Coach: What You Need to Know",
    "description": "Discover key insights from Martin Hinshelwood on hiring an #agilecoach in part 4 of our series. Make informed decisions for your #agile journey!",
    "captions": "If you're hiring an agile coach, make sure you take a look at their track record. What have they done in the past? What organisations have they worked with? Is it within the same context that you're in? Is it the same scale that you're in? Do they have references? Is there somebody you can go speak to that they've worked with in the past that can tell you about how they do the things that they do? \n\nSo, in order to maximise your ability to move towards a greater degree of agility, you need a coach with experience."
  },
  {
    "id": "1ePkQeCVAlY",
    "title": "What is the difference between resource efficiency and flow efficiency?",
    "description": "Explore the vital differences between resource and flow efficiency in modern workplaces. Unlock strategies for a happier, more productive team!",
    "captions": "Oh, that's a great question. So, the question is what's the difference between resource efficiency and flow efficiency? And first off, I do want to say that most organizations and most teams focus on resource efficiency. That's where you worry more about your access to materials, with people being considered materials in this case. Right, people are resources, and we want to optimize the amount of time that they spend doing the thing as if they're machines in a factory that you're paying a rent for, right? You're paying maintenance for, and you want to maximize the output of that machine.\n\nUnfortunately, in our world of complexity, we're not doing the same thing over and over and over again like a machine does, so we can't optimize with patterns in that way. I mean, there are patterns we can optimize with, but not in the same way that we can with machines. So, when you focus on resource efficiency with a group of people, you end up with feature factories. You end up with unhappy people. You end up with high staff turnover, right? Because people don't really care about your company. They don't really care about what you're trying to do, and they feel like you're not rewarding them for the expertise and capabilities they're bringing to your organization. So, they'll be like, \"Well, I'll go somewhere else that's offering me more money,\" or \"I'll go somewhere else because I don't like you anymore,\" or \"My boss sucks,\" or whatever it is.\n\nWhereas in a flow efficiency environment, you're looking holistically at the flow of work through the system rather than optimizing any particular resource. A great example of that, I think, is in organizations that have sales teams. Quite often, they optimize sales for leads and more work coming into the system, but you don't actually have the capability to deliver that work in the system. So, sales is overselling, and then the engineering teams need to suffer because they have to try and deliver within the bounds of that world of, \"We're under high pressure. We can't actually solve the problems that we want to solve. We've just got to get stuff out the door, get it done, get it finished.\" And that doesn't breed happy people or, you know, it doesn't break the craftsmanship or craftsmanship. I don't know if that's a word, but that idea that I want to be good at what I do. I want there to be value in what I do. I want to understand what it is that I'm trying to achieve and why it matters, right? What's the work I'm doing, and how does it matter to the overall organization?\n\nSo, flow efficiency tries to look at holistically across the flow of work, right? Are we optimizing in the right areas? Are we able to see that when we increase the—what would you call it? If we optimize this one resource, what effect does it actually have on the rest of the system? Right? What effect does it have down the line? If we optimize for software engineering, the developers are churning out stuff, and we've got testers as a separate entity here. Are they then overburdened? And then it looks like they're the problem, and we're all blaming the testers for not getting stuff done.\n\nSo, flow efficiency is about looking holistically across the system, understanding the flow of work through that system, and how do we optimize to maximize the value that we're delivering through the system. Resource efficiency is looking at how do we deliver more stuff. We just need more stuff, right? Whether that's projects finished or it's widgets in a factory or whatever it is, that's resource efficiency versus flow efficiency."
  },
  {
    "id": "1M2_AVqoRbs",
    "title": "Technical debt costs you more than you think",
    "description": "Discover the hidden costs of technical debt and how it impacts your projects. Learn more at nkdagility.com! #agile #projectmanagement #technicaldebt",
    "captions": "Technical debt is not just a cost; it's a missed opportunity. How much money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having a high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "id": "1TaIjFL-0o8",
    "title": "What is the most common epiphany in a PSM II course?",
    "description": "Discover the key epiphanies from the PSM II course that transform Scrum Masters into advanced professionals. Elevate your agile skills today!",
    "captions": "So what is the most common Epiphany in the PSM2 course? I think there's more than one, and I think it depends on what level you're playing at when you come into the class, which Epiphany you get.\n\nSo probably the biggest Epiphany is the realisation that the Scrum Master is not just focused on the team. That's the big Epiphany for most folks because I think, even though it's very explicit in the Scrum Guide, it absolutely states here's the Scrum Master's accountability to the team, and here's the accountability of the Product Owner, and here's the accountability to the organisation. Most people seem to forget or kind of gloss over that bit for the accountability for the organisation. \n\nWhen we start kind of double-clicking on that and expanding it and figuring out what the implications are of those accountabilities for how the Scrum Master purports themselves within the organisation, I think it changes that dynamic. It expands those ideas, and they really have that realisation that they perhaps need to be doing more, that they need to be poking at some of those, asking difficult questions. Right? That's something that I find is very important as a Scrum Master. \n\nEven if all that difficult question is, is why? Right? Something happens a particular way in the organisation that is getting in the way of the team. Why? Right? Because you do find, depending on the organisation, that there can be rules in place that are ancient rules. \n\nI have been doing a little bit of digging recently on the Royal Bank of Scotland, and they have these rules in place for how their teams work. But there are 200-plus-year-old bank rules, right? There are rules in place because they were a great rule 100 years ago for whatever context they were created in. But are they still relevant today? That's kind of like your organisational package and your organisational craft, and who's going to take care of that? Who looks at that craft? \n\nSo I think that that's one of the big epiphanies at that level. Then there's the meta Epiphany in the PSM2 that I think is really important for those people in the room that are also facilitators. So they kind of get a double Epiphany, and that's how to engage with people and have more people participate in the discussions. \n\nLike, how to become a two-dimensional Scrum Master rather than that one-dimensional of just looking at Scrum. How do I start bringing in additional tools and practices in the way that they do things and demonstrate their own behaviour in order to facilitate change of the people and participation in the events?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "1VzbtRspOsM",
    "title": "How Immersive Learning Transforms Aspiring Agile Leaders",
    "description": "Discover why the PAL-E immersive learning experience is essential for aspiring agile leaders, blending scrum training with hands-on coaching for effective transition.",
    "captions": "I think it's very difficult for aspiring agile leaders to get the time and the space needed to have a lot of the conversations that really need to be had in the leadership space in their organisation. The P.E. is a fantastic class that enables that space to have those conversations but doesn't necessarily always result in space to actually do the things differently that you want to do or practice the things that you want to practice. \n\nThat's where taking the traditional P.A.L.I. class and exploding it into a six-week immersive class enables more time for people's thought processes, right? To adopt some of these new ideas, for people to try things in between the class. Specifically, the assignments would be something that they're definitely going to try. They might try other things that we talked about in the course, but the assignment is a specific thing: here, go try this, go figure out how this happens in your organisation. \n\nThen bring that back around into a group of their peers, whether it's a public class and there's leaders from lots of different aspiring leaders from lots of different organisations, or it's a private class where you've got the leadership for your organisation in that private class. That coming back around and debriefing those assignments, and also being able to, if you did try other things, being able to ask those questions at that point. \n\nThis is, I tried this, we looked at this idea and it didn't work. We tried to do this level of delegation. How do we do this differently so that we can get more buy-in from the people that are doing it? That collaborative experience is really the why the P.A.L. immersive class is such a great fit for people who are in management or leadership positions inside of their organisation and they want to adopt those agile ideas that they see organisations out there, people out there being able to do and getting so much value from. \n\nHow do we get the same value in our organisation from those conversations? How do we change the way we do things to enable the people in our organisations to take more accountability, to take more ownership of the things that they're working on, to be more invested and connected with the work that they're doing? \n\nThe P.A.L.E. class is an experience that allows you to understand how all of those things are connected together and perhaps reflect on the way your organisation currently does things and how that might inhibit the ability for teams to maximise the value that they deliver to stakeholders, your customers, your stakeholders, your leadership. \n\nIf you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "id": "2_CowcUpzAA",
    "title": "The Real Scope of a Product Owner: Beyond the Backlog",
    "description": "Discover why training is vital for product owners in Scrum. Martin Hinshelwood highlights the skills needed to excel and gain a competitive edge.",
    "captions": "[Music] Most product owners or people that have been given the role or accountability of product owner don't really comprehend the breadth of the product owner role, and it's generally sold to them or told to them as being focused on creating a product backlog and making the team work through it. That's a very small part of a product owner. A product owner is really an agile product manager, right? They're a product manager that has a bunch of additional skills and understandings that are encapsulated a little bit in the accountability of the product owner in Scrum. \n\nIt's really important that product owners understand the breadth of the possibilities of the product owner role, what it is they're supposed to be looking at. I find that quite often most people who come to a product owner class realise that they don't want to be product owners because it's a lot bigger role with more actual accountability than they really realised it was in the first place. \n\nA product owner is accountable for spending the money, right? A product owner is accountable for that. Even if as a product owner you only have control over ordering that product backlog, maybe you can't even delete stuff from the product backlog, maybe you can't add new stuff that you come up with yourself, but you're just ordering that product backlog, then you're controlling the budget. You're deciding when we deliver each piece of functionality, and that's really powerful. \n\nIf you can then gain the ability to remove and add things to the product backlog, you're then going to be hopefully more effectively spending that budget. For a product owner, that means a lot of things. What do you think a product owner needs to do in order to maximise the value of the work done? We're going to put stuff in the product backlog, the team's going to work through it, maximising the value of that work. \n\nWhat do we need to look at? What information do we need? What controls and levers do we need to be able to have those conversations? It's not just about focusing on the backlog and the team; it's not just about being a funnel for the requests from the organisation. It's about making decisions, placing bets, looking at probabilities of what's the most effective thing to work on, what's going to produce the most value now for the organisation or the most long-term value depending on your timelines and topics that you're thinking of delivering in the product. \n\nAs a product owner, you really need to be looking out into the future. You need to be looking at what's happening in the business, what's the trend in the market, how do I get to where I need to be in order that instead of me looking at my competitors and saying, \"Ooh, that's cool functionality, we should add that,\" they're looking at my features and they want to add and follow my trend that I'm setting for features and capabilities in the market. \n\nEffectively shifting your product from following the market to leading the market, and in order to do that, you need a clear picture of a lot of information. You need access to levers within the organisation to be able to change what you're working on based on those needs and that understanding. What's the next bet? What's the next hypothesis that you have for something that you think is going to provide value, and can you invest in it? \n\nThat takes a lot of building relationships, understanding the business and the market that lots of people don't understand as part of the product owner role. So if you want to be a product owner, just coming to a training class is not going to help you be the best product owner. \n\nOkay, but a training class is going to help broaden the scope of your understanding of what that role is and what are the different tools and techniques that you can at least start with to start investing in some of those areas that perhaps you're missing. The value of coming to a product owner class, if you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "2-AyrLPg-8Y",
    "title": "Why is training such a critical element in a manager or leader journey?",
    "description": "Discover why training is essential for managers transitioning to agile leadership. Join Martin in this insightful short! Watch now: https://youtu.be/W3cyrYFXDfg",
    "captions": "Evidence-based management class to help leaders gain additional skills on top of the awesome ones they already have to help them be as effective within the context of AG as possible."
  },
  {
    "id": "21k6OgxeKjo",
    "title": " shorts 5 kinds of Agile bandits. 5th kind",
    "description": "Discover the 5 Agile bandits with Martin Hinshelwood, featuring the toxic product owner. Learn how to tackle these challenges in your team! #Agile #Scrum",
    "captions": "Have you ever worked with a product owner who really, really should have been a project manager? Where they're focused on work breakdown and delivering to time and task with a Gantt chart? If you have, you've encountered an agile bandit product owner. It creates lots of negative impacts for the team. They don't care about the work; they're just interested in their tasks, and they are not a connected, engaged, empowered team. That way lies agile banditry. Stop it."
  },
  {
    "id": "220tyMrhSFE",
    "title": "Kanban principles",
    "description": "Discover the core principles of Kanban and enhance your Agile project management skills. Watch now! #agile #kanban #agileframework",
    "captions": "There are three core principles of Caman. To keep it really simple, there's defining and visualising your workflow. That's like creating your rule book as a team. How are you going to function? What does your system look like? \n\nSo, defining and visualising a workflow. The second core principle is to actively manage the items in the workflow. Now that you can see them, you can see what's going on. You have a visualisation, so you're going to actively take action. You're not just going to passively look at it; actively take action. \n\nThen, the third principle is improving your workflow. You want to make changes to the workflow in order to make things a little bit better, to make things flow better through your system."
  },
  {
    "id": "221BbTUqw7Q",
    "title": "What are 3 key takeaways for a scrum team after attending an APS immersive learning experience course?",
    "description": "Discover 3 essential takeaways for scrum teams from the APS immersive learning course, enhancing their adoption and improvement of professional Scrum.",
    "captions": "Ah, so three. What are the three key takeaways to attending the APS class, especially the immersive APS class? \n\nUm, so I think the first one is that fundamental understanding of the underlying principles of scrum and the practices that make it up, right? That's kind of key. But I guess at a double advantage to that of the immersive class is that you can augment that story with how you're actually implementing it within your organization, right? So you can, although Martin's going to say this is how a product owner works, that's in a box. Here's the definition of product owner from scrum. \n\nUm, you're then perhaps going to go try some of those things inside of your organization and you're going to be like, \"Oh, well this bit sucks and that bit sucks and we can't do this bit,\" and the organization says we're not allowed to do that. And then you can come back and we can tweak it, right? There's not one way to do scrum; you can tweak it to figure out how it is that it can be most effective within the context of your organization. So that's really the first one: that empirical understanding of the underlying principles of scrum and how they work. \n\nUm, the second one is probably that bit at the end, the getting started right. The, um, you know, the getting rid of the Klingons that have come into your process or, um, uh, you know, scraping the Klingons off the starboard bow, if anybody remembers that. \n\nUm, I may be too old; that's what it is. I'm going to be too old. But, uh, the also the getting started right. Lots of teams really struggle. We understand this scrum thing now. \n\nLike, what do I do? What's next? Um, and the advantage to the immersive classes is that's happening continuously throughout the class, right? Rather than you having a two-filled day or here's a week of training and then Monday we're doing something different and we don't know where to start, you get introduced to a little piece at a time. Try it within your organization a little piece at a time. Try to try it little piece, little piece, little piece. \n\nUm, so that's probably the second key takeaway. Man, what's the third? Third one? \n\nUm, probably learning what is not scrum, right? That, that I mentioned, like the Klingons, the things that are built up in our process. But there's also not just institutional knowledge within our organization, um, but institutional knowledge within our industry of what people think scrum is. So you'll have people who have done scrum in other organizations that also bring their Klingons and barnacles, right, to the story. \n\nUm, and when you mush that all together, you end up with something that perhaps doesn't look like scrum at all, doesn't have any empiricism, doesn't close any feedback loops, doesn't have working products at the end of every iteration. And that's fairly common, right? So being able to clearly understand what is and is not scrum so that you can choose the not, even if you're doing the core right. \n\nUm, and I think that's a huge key takeaway for the APS class. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "2A2OCRXZ20I",
    "title": "Free Workshop 09 - How to run a Daily Scrum",
    "description": "Join our free interactive workshop to master the Daily Scrum! Learn its purpose and how to run it effectively. Don't miss out!",
    "captions": ""
  },
  {
    "id": "2AJ2JHdMRCc",
    "title": "Why is DevOps such a Critical Element of Software Engineering?",
    "description": "Discover why DevOps is essential in software engineering! Join Martin Hinshelwood as he unravels its critical role in delivering client solutions. #DevOps #shorts",
    "captions": "So DevOps is the union of processes, practices and tools to enable the continuous delivery of value to our customers. It's absolutely critical to our ability to successfully build great products because it is the glue, the ideas that enable that to happen. Where do we come up with the strategies to be able to get our product in front of our customers quickly and get that feedback?"
  },
  {
    "id": "2ASLFX2i9_g",
    "title": "7 deadly sins of Agile: Gluttony",
    "description": "Discover the pitfalls of gluttony in Agile! 🍔 Learn how bloated backlogs and overloaded sprints waste effort and hinder success. Watch now! 📊✨",
    "captions": "One of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated. Bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team, you're working with a team, and you go to look at their product backlog and there's, let's say, six or seven people working on this team and they have 5,000 things in their product backlog, they're doing it wrong. Right there, that's greedy. They've eaten all those backlog items; they're sitting in their belly and they can't walk around, they can't move. They're not going to be nimble, right? They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.\n\nAnother way gluttony manifests is during Sprint planning, right? Shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint, and that continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it. Taking on too much and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, maybe not every Sprint is probably okay, right? You're not going to be successful in everything you do, but if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, are we taking on too much work? Are we doing too much? Are we taking on too much work?\n\nSo that's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. This Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide, and they found that only 35% of the features that we build are used by our customers. Sixty-five percent, I think the phrase was \"used little if ever.\" So hopefully, we can stop building them in the first place, right? That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long would your build take if you removed 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams would be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things.\n\nSo the way to... ah, man, loads of teams just need a gastric bypass for that, right? How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog, right? It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, right? Features that aren't used by your customer because I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap and that they knew their customers way, way better than anybody else, and there's no way they were wasting 65%. It was a lot less, that's what they said.\n\nSo we said to them, \"What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?\" Like, \"This one, this one's the best.\" So we got in amongst the code, we added application insights. Application insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box, it does a bunch of stuff. But then if you add this as a feature, you can say, \"How many times do users click that button of our body of users? How many of them have clicked that button?\" You can get all of that data.\n\nWe analysed their product end to end. We collected data for three months, and then we went back to them and said, \"Here's the 7.5% of features that your customers use. All the rest was waste.\" Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers.\n\nSo, no, don't eat the whole thing, right? You've got to figure out how do I pick and choose what I'm going to eat? Don't eat the whole feature at once, right? You don't know if you like haggis yet, so don't order a whole plate full. Get like a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more, right? But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "2cSsuEzGkvU",
    "title": " shorts 7 Virtues of agile. Humility",
    "description": "Discover the power of humility in Agile! Join us as we explore one of the 7 virtues that drive successful teams. #Agile #Shorts #NakedAgility",
    "captions": "Bringing modesty and respect for others into the conversation in agility is going to help you build trust. Right? Build those empathetic relationships both within the team, within the organisation and leadership, and outwardly towards customers. Don't make assumptions. Right? That's the key risk here is making assumptions. Um, and also cognitive bias, although that's more difficult to detect in yourself. Usually, you need somebody else to look in on it to point it out. Um, but then do you listen to those people? Do you realise that perhaps other people's perceptions are important to our decision making?"
  },
  {
    "id": "2Cy9MxXiiOo",
    "title": "What is a sprint goal?",
    "description": "Discover the importance of a sprint goal in Scrum! Join Martin Hinshelwood as he shares tips on crafting effective goals for your team. #Agile #Scrum #Shorts",
    "captions": "So the question is, what is a Sprint goal? \n\nWhere a vision is strategic, a product goal is intermediate strategic. The Sprint goal is really tactical. It's what are we doing just now to make progress towards our product goal, towards our product vision. \n\nIt has to be really something that the stakeholders can take at the Sprint review and provide you with actual feedback. We like this because, or we hate this because of this other thing. It's a tactical goal that your team is working on right now."
  },
  {
    "id": "2I3S32Sk8-c",
    "title": "What would you advise a scrum team to do in their first 4 weeks?",
    "description": "Kickstart your scrum journey! Join Martin Hinshelwood as he shares actionable goals for new scrum teams in their first 4 weeks. Embrace agile success!",
    "captions": "So how, what should a Scrum team do within their first four weeks? That's a really interesting question because if their intent as a team is to try Scrum, then what I suggest they do within their first four weeks is try Scrum right. There are all sorts of great reasons why we shouldn't do some of the things in Scrum. There's reasons why we shouldn't have as much focus as we would like on the topic, right? Because we get multiple things that we have to show progress on. There's lots of good reasons why we can't have a single product owner; it has to be multiple people. There's lots of good reasons why we can't have a single unified backlog because we're working on too much stuff. And there's a reason why we can't have a product goal because, you know, we can't decide what it is we're working on.\n\nI think all of those are just excuses for not being able to find focus, you know, commitment, right? To dare to change the way we do things in order to try something different and see if it works for us. So my advice for teams just starting out in Scrum is do that, right? Just do Scrum. A great set of exercises that I do with teams, I have a Scrum startup exercise that I do. Happy to share it with anybody that's interested. What I basically do is I teach Scrum and then provide the startup exercise. They see what Scrum is supposed to look like. Again, the EPS is great for that, right?\n\nAnd then have the people that are doing the work that now understand Scrum create an organisational change backlog. That's something you can do in the first four weeks. If we're going to try and do Scrum, do it and write down every reason you can't. Write down every friction that you hit. Write down everything that needs to change in your organisation in order to be able to do this thing and make that list open and transparent to leadership so that they can see what's getting in your way. Because quite often they can't; it's very opaque to them. Make it transparent, right? That's the very essence of Scrum, increasing transparency so we can see what's going on and perhaps do something about it. Stop moving my advice."
  },
  {
    "id": "2IuL2Qvvbfk",
    "title": "Biggest contribution from a Product Owner that you know of",
    "description": "Discover the impactful role of a product owner in agile teams as Martin Hinshelwood shares a remarkable contribution that inspires product vision.",
    "captions": "Question is, what's the biggest contribution from a product owner that you know of? I think there are a lot of great product owners out there, great product managers, but the one that I always think of when I think about great product management is kind of two people in the same organisation, both kind of product owners in the same product, which is confusing because then there's two product owners, right? But I'll try and explain.\n\nThat's effectively Brian Harry, who was the product unit manager for Team Foundation Server for the entire developer division at Microsoft back in the day. When I was getting into all of this stuff, he was the man. He realised, as the single responsible person for about 650 people working on this product, that a two-yearly release cadence kind of sucks, right? So his was the first team in Microsoft to start really en masse moving towards a greater degree of agility.\n\nThe way they came up with, within the context of Microsoft, for doing that stuff is almost the model that was replicated across the organisation. It's never going to be identical, right? But that's when, if you hear Microsoft talking about their season-based model, which they do talk about, they have the spring release and the fall release, right? This kind of cadence of bigger things that they're working on, of product goals maybe, right? That's really what they're talking about, is this season-based model where they have that urban flow of work and ideas.\n\nBrian Harry worked on that, very much supported by my other favourite gentleman, Aaron Bjork, who was, in effect, if you're not familiar with TFS, and it's now called Azure DevOps, right? That's effectively what it is. Back in the day, Microsoft was doing two-year releases of Team Foundation Server and Visual Studio, right? They found that the cadence for closing the feedback loop was actually four to six years because they were in a two-yearly cadence. It's two to three times whatever your delivery cadence of usable working product is. That's ultimately your feedback cadence because what they found was that they would do a beta halfway through to get feedback from people, but as soon as you've shipped that beta, you're now working on this stuff that you need to do for launch, and the feedback you get on the beta you can't actually fit in here because you don't have any time left. You're all booked, right? You've booked out that time for the stuff you need to do to get it to production.\n\nSo then you start thinking about, well, maybe we can fit it into the next yearly release, and they were able to fit some stuff in there. But what they also often realised was the closer they get to that production release, by the time they finish the beta, they're planning for the next two-yearly release, right? So they've already booked out this time as the feedback comes in on this product. The earliest you can possibly get that feedback from the beta into the actual working product is two years down the line, right? Or two and a half, up to two and a half years down the line. But in actual fact, some stuff might not make it into that time box, so it's the next time box, which is another, which is four years, four to four and a half years down the line, which is just too long, right? It's just too long.\n\nSo what, in realising that, this leadership group in this organisation, in this part of the organisation, they realised that they had to do something different, and he led the way in his organisation in making those changes, largely leveraging the respect for his choices, his wisdom within the organisation. The respect and the rest of the organisation for his wisdom allowed him to maybe do things that other people weren't able to do or hadn't been able to do in the past. He is relentless. This guy, he'll work 20-hour days, no problem at all. He's just one of those folks that has that outlook.\n\nHim, along with Aaron Bjork, effectively changed the way Microsoft do business, changed the way Microsoft approached building products, and changed the whole ethos. I mean, not without support, right? Somebody else has to come along and water those ideas and help them grow, and that was Satya, who was able to come along into Microsoft and then start encouraging a lot of these ideas. But the kernel for these ideas was pre-Satya. It was the Azure DevOps team, and they moved to a three-week continuous cadence.\n\nSo, in fact, the product owner, that's how I see the product unit manager, right? Fully fiscally accountable person in your product structure. They're the ones that are actually best placed to enable changes in your organisation anyway. They're the ones with the money. They're the ones with, well, if I'm going to spend your money building this product, I need to be able to control this and this and this in order to be most effective at building this product. They're the ones who need to have that argument. It's not your agile coaches or your consultants or any of these people. Like, what the hell do they know about your business, right? That's the attitude internally.\n\nBut one of the core purposes of that agile coach and consultant is to help that person who can make that change, who does have that respect inside of the organisation, who does have that fiscal accountability, make those changes. And that was the huge, I just think it's such a huge contribution that Brian Harry and Aaron Bjork made to this idea of building products inside of Microsoft, right? But building products in general, because the whole ethos of Azure DevOps is about DevOps, right? It's about shortening those feedback loops. What tools do we need to support that idea? And yeah, that for me is the most powerful story.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "2k1726k9zvg",
    "title": "What is the difference between a newbie scrum master and a professional scrum master?",
    "description": "Uncover the true essence of a Scrum Master! Explore key differences between newbies and pros, and enhance your leadership skills in Scrum. 🌟",
    "captions": "Oh, I kind of like that question. What's the difference between a newbie Scrum Master and a professional Scrum Master? I feel like neither of those things exist, right? I think that's where I would go initially, and I would say that there's no such thing as a newbie Scrum Master. You become a Scrum Master because you've demonstrated that competence in your team to be able to help them be more effective, right? So you're not really a newbie; you're just picking up that accountability of the Scrum Master. You are an experienced, effective professional at that point when you pick up the accountability of the Scrum Master. \n\nSo I feel like that newbie is a bit of a thing, and really there's no such thing as a professional Scrum Master. That's just a Scrum Master, right? Just as there's no such thing as a newbie Scrum Master, a professional Scrum Master is Scrum.org's brand of how they explain things. But if you look at the Scrum Guide, it doesn't talk about professional Scrum Master or true Scrum Master or certified Scrum Master, right? It doesn't talk about any of those things because there is just the Scrum Master.\n\nAnd I think if we were to look at professional Scrum Master and see, well, what is it? It's trying to create that idea around we need to approach the role of a Scrum Master from a professional's perspective. It's not just, we're not just playing the Scrum Master; we're not just decking around as the Scrum Master. It's a professional role that provides value to the organisation. It provides value to the team. It's picking up accountabilities that perhaps if everybody on the team picked them up, because maybe everybody on your team is capable of picking up the accountabilities of the Scrum Master, the team would have a hard time getting anything done if everybody's picking that up. \n\nSo that's one person who the team respects, says, \"Well, I'll pick up some of these things and go sort them out so that you can all focus on delivering valuable product and being as effective as you can at delivering valuable product.\" And here's some things that I'm going to pick up and help with and help enable you as a team to do the stuff that we need to do, right? And I think that's that idea that Scrum.org is trying to sell of the professional Scrum Master. \n\nOf professional Scrum is that we're doing the thing rather than going, \"Well, you know, we, you know, I'm going to be the Scrum Master,\" but in actual fact, it's Sprint planning. I'm going to, you know, tell the team, \"Right, you're not taking on enough work this Sprint. I'm sure you can fit some more work in there.\" Oh, Bob, have you, you don't have enough stuff assigned to you? I think some more stuff, you can take on some more stuff this Sprint, right? And that idea of, well, that's not Scrum Master, right? That's, that's, well, I guess I might say that's a project manager. But even if you were a project manager and you were doing that, you kind of suck at project management too. \n\nSo that's just somebody who sucks. That's not a professional. When you're a professional, you figure out what are the things I can do to help my team be more effective, right? Help the group of people that I'm working with or that I'm managing, right? It doesn't matter what terminology you use. How do you help that group be more effective? Stop doing things that are less effective or try and change things in your organisation that are less effective and increase their effectiveness. That's really all we're talking about from a professional Scrum Master perspective is do the thing. Don't just mess about the edges of the thing; actually do it.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "2KovKxNpZpg",
    "title": "Pet Peeve in Scrum",
    "description": "Join Martin Hinshelwood, Scrum expert, as he shares his biggest pet peeve in Scrum consulting. Discover insights to enhance your Agile journey! #Scrum #Agile #Shorts",
    "captions": "So something that really annoys me in Scrum is this focus on the mechanics of Scrum and less focus on the principles of Scrum. People and organisations that will tell you that you're not doing Scrum if you're not standing up, it's just ridiculous. It's not even a conversation we should be having. We should be focusing on the principles: empiricism, transparency, and just getting stuff done."
  },
  {
    "id": "2QojN_k3JZ4",
    "title": " shorts 7 Virtues of agile. Diligence",
    "description": "Discover the power of diligence in Agile! Join us as we explore one of the 7 virtues that drive high-performing teams. #Agile #Scrum #Shorts",
    "captions": "And that is the diligence that your organisation expects. The reason organisations and businesses don't really talk about the definition of done from a leadership perspective is because it's just expected that we'll have a level of quality that they're able to use. That's just the default. But unfortunately, it's not the default in many teams."
  },
  {
    "id": "2r7B8JAxC_o",
    "title": "Microsoft Teams Issues",
    "description": "Explore common Microsoft Teams issues and discover effective solutions to enhance your collaboration experience. Troubleshoot with ease!",
    "captions": ""
  },
  {
    "id": "2Sal3OneFfo",
    "title": "Azure DevOps Migration services. Part 1",
    "description": "Discover Azure DevOps Migration Services with NKD Agility in this insightful video. Transform your project management and product development today!",
    "captions": "There's a number of migration services that we offer. They're kind of related as two sets of tools. There's Martin as your DevOps migration tools, which is on GitHub and available for people to use, but we help people use it. We do it for customers when they don't want to learn it themselves. So that's the more targeted migration tool. \n\nI want to move, I want to stuff, I want to merge stuff. So that's the actual moving individual work items around. That's what I want to do. Then that's one of our services. The other one is a kind of managed import into Azure DevOps. Microsoft have a tool called the Azure DevOps data migration tool, and that data migration tool takes the whole thing."
  },
  {
    "id": "2tlzlsgovy0",
    "title": "6 things you didn't know about Agile Product Management but really should Part 2",
    "description": "Unlock your team's potential! Discover 6 crucial insights on Agile Product Management to align vision and strategy for maximum impact. 🎯📈",
    "captions": "Is there a product vision that lays out the strategic goals? Do all members of the team understand both, and are they able to see how the work that they do every day contributes to your goals and strategic objectives? If you don't have that story, if you speak to the team and you ask them what the vision is, what the strategic goals are, and they need to go look something up, then they don't fundamentally understand them. They don't understand how their work contributes, which means that we're probably not being very agile. \n\nWe need to push responsibility down the organisation. We need the people that are making the tight technical decisions every day to have the most context so they can make the best decisions possible to maximise the value that you get in your product."
  },
  {
    "id": "3-LDBJppxvo",
    "title": "The Importance of Delivering Working Software Every Iteration",
    "description": "Discover 6 surprising insights about Agile Product Management that can transform your approach! Watch now for essential tips. #agile #productmanagement",
    "captions": "Our team's delivering working software to at least some subset of real users every iteration, including the first, and gathering feedback. If you're not doing that, you're probably not very agile. The purpose of agile is to close those feedback loops and get tight interaction with our customer. Everything that we do before we actually get our product in front of our customer is an assumption, and we need to validate those assumptions by getting work in front of real users as quickly as possible so that we can ensure that, as much as possible, we're going in the right direction and not the wrong direction. Maximise the amount of work not done. Maximise the value that you get to your stakeholders."
  },
  {
    "id": "3AVlBmOATHA",
    "title": "How would you help organizations pitch the opportunity of agile internally?",
    "description": "Discover how to effectively pitch agile within your organisation and inspire teams to embrace its transformative potential for continuous improvement.",
    "captions": "Foreign. How do I help organisations pitch the idea of Agile internally? I guess it depends whether you're managing up or you're managing down, right? \n\nUm, so if you're managing up, i.e. you're working on a team or with a team or at some level where you're building products and you want to do Agile but your organisation is not yet there, yet is not yet understanding what the difference is or what the impact is, um, then having conversations with them in their language is the most important thing you can do. \n\nUm, you need to, like, there's no point in talking about Agile or Scrum up the organisation because they're words that then you then have to explain, right? The other person's like, \"Well, what the heck is this crap?\" Right? I need to, you need to tell me what it is then, and you end up having to stop all the time. So you need to use their language. \n\nSo if you're talking to people with, uh, um, like a business value focus, then talk about, um, delivering more of the right things, less of the wrong things. Um, talk about, uh, responding to the market more quickly. I'll talk about, um, how to, um, deliver happier, more engaged customers, right? That's probably what they're focused on; that's probably what their metrics push. \n\nBut find out what their metrics are, right? What are they measuring as success in the business? And go look at that. If you're, um, business, if you look at those metrics and your business is a totally fiscally focused, right? Apart from just being screwed, right? You also need, you need to look at, um, what are the benefits from a fiscal perspective that you can get from Agile. \n\nI feel like if your company's focused on just fiscal stuff, then that's not a good thing anyway, right? That's revenue extraction rather than value creation. But, um, that's, that's, you can only get to that conversation once you convince them. So you want to be talking about reducing fiscal risk. You want to be talking about, because quick, fast iterations of actual value they provide reduces operational risk, reduces fiscal risk. \n\nUm, it increases the value that you've delivered, and in most countries, there are tax benefits to write down capital expenditures, right? For example, here's a simple argument: I'm going to spend, uh, uh, 12 million dollars capital expenditure to build a product. Um, at the end of 12 months, I'm going to deliver that product into production, and at that point, and like, I can start writing down that capital expenditure, right? From a tax perspective, normally you can only start writing down so it depreciates over time, right? You can write that down and claim tax benefits for it. Most countries, I don't know about all countries, but UK, US definitely have these things in there. \n\nBut if you remember in school when you do that, uh, um, compound interest calculation, right? And you're always looking at how big the money grows, the opposite is true for, um, writing things down. So at the end of, if you're delivering monthly, right, to production, it's costing you a million dollars a month on a 12 million dollar yearly gig. At the end of the first month, you can just, you can start writing down that million dollars. \n\nAnd then at the end of the second month, you've already had a month of writing down a million dollars, and you start writing down the second million dollars. And then at the end of the third month, you've had two months of writing down the first million dollars, two, sorry, three months of writing down the first million dollars, two months of the second, and you're getting into the third, right? So you end up with this compound, right? \n\nI've never met a CFO, um, who you can't convince that Agile's a good idea if you use their language. What data are they looking at? How could being more Agile shift those metrics? And use their words to describe it. So that's managing up. \n\nUm, if you're in leadership in your organisation and you're looking down in your organisation and you're trying to figure out how do I, um, engage all of these people in this change activity in moving towards a different way of working, um, and the answer is get them involved in that process. You need to create an event whereby you're asking them what it is that we need to do differently, getting them to agree what the action steps are to move forward, getting them to choose the processes and practices that you're going to use. \n\nBecause only by them choosing it, them being involved, and them deciding will they care enough about the change to get behind it and support it and help, help, help make that change. Otherwise, they'll, they're not in, they don't care about your objectives, right? They care about their objectives. You have to make it their objective or help encourage it to be their objective. \n\nSo I use things like, um, open space Agile, and there's a concrete implementation called Open Space Beta, which helps with that as well. Um, so yeah, it just depends whether you're managing up or managing down."
  },
  {
    "id": "3CgKmunwiSQ",
    "title": "Understanding the Difference: Traditional Management vs. Evidence-Based Management",
    "description": "Explore the key differences between Traditional Management and Evidence-Based Management (EBM) in decision-making for better organisational success!",
    "captions": "So I get a lot of questions about the difference between traditional management versus evidence-based management. I'm not sure the term traditional applies. It's interesting; I had a book on evidence-based management practices that I gave to my father about 10 years ago when he was asking me what the heck it is that I do. I gave him this book, Radical Management, and he read the book and he said, \"Oh, that's what I've been doing for the last 40 years in my company.\" That's the type of things, trying to change the organization and move people in a particular direction and do all those things. \n\nSo maybe that's why traditional, like if people have been doing it 40 years ago, 80 years ago, then it's the common management, the normal way people approach things. Evidence-based management is hard. If we're talking about the differences between traditional, classic, the way most people do things, common cause, right? Evidence-based management is hard. Evidence-based management is we have to collect data, we have to read the data, and we have to make informed decisions. \n\nMost management decisions are made one of two ways: make it up. I'm just going to decide. I'm the manager, I'm the boss, I will decide, and I make a decision, right? Or I ask somebody more senior to me to make the decision, right? So escalation-based decision making. Both are bad. We shouldn't be making decisions on multi-million dollar things based on, or even smaller than that, right? But based on just making it up. We want to be asking, \"Why are we doing this thing? What do we hope the outcome's going to be? And how are we going to measure it?\" \n\nWe want evidence to know. That's why when we're in court, we don't make decisions based on how we feel today, right? We collect a bunch of evidence, we present that evidence to a group of people, and a group of people analyse that evidence, including, you know, not evidence parts as well, how they feel about it, how they think about it, and they put it together into something that is a coherent decision. And that's what we would like to see in management today. \n\nMost managers trying to do evidence-based decision making, unfortunately, the evidence that they choose to accept is generally whatever the easiest data is to collect. Most of that revolves around metrics, right? Original estimate, actuals, how far off course are we? People talk about scope creep. Well, you said you were going to do this and it's changed to this; therefore, the scope has changed. \n\nThat traditional look at data is very... what's a good way to describe it? Vanity metrics. That's the expression I've not used in a while. Vanity metrics are the biggest part of this. I want to create metrics. For me as a manager, I want to have metrics that make me look good. I want to keep my job. I want to perhaps get promoted. So I want to create metrics that make me look good. That would be nice. So that's the ones I'm going to focus on. That's the ones I'm going to judge my people that report to me by, is the metrics that I think make me look good. \n\nUnfortunately, metrics that make you look good are suboptimal metrics. We're looking at one part of the puzzle. Me, right? Me as a manager, I'm looking at one part of the puzzle and I'm trying to make a decision on how I measure things based on one part of the puzzle. But is my decision going to be good for the whole thing, for the whole organization, for the whole product or organization team, whatever it is? At whatever level you're playing at, is that going to be the right metric that's going to help progress the outcomes, the impacts, the goals that we're trying to have as an organization, the vision? Or is it just making me look good? \n\nThat's a suboptimal metric. We're not looking at the whole system, just part of the system. And that's really common. I see that with story points and velocity, right? Ridiculous metrics to look at outside of the context of internal to the team. Story points and velocity can be useful inside of a team. Actually, I would maybe disagree with my own statement there, but they might be useful within that context. But outside of the team, no use whatsoever. \n\nAny manager that makes a decision based on velocity, any product owner that makes a decision based on velocity, you know, sum of story points per sprint or sum of tasks, whatever it is, it's just mental. That's vanity metrics. We're trying to massage the metrics to make ourselves look good. And that's really the big difference between traditional management and evidence-based management. Evidence-based management is about the evidence. We're going to collect the evidence, we're going to try and validate that evidence, right? Is it good evidence or is it bad evidence? And then we're going to try and make decisions based on it rather than just making stuff up."
  },
  {
    "id": "3E_NKzHDvig",
    "title": "PAL In 5m",
    "description": "Discover the essentials of PAL in just 5 minutes! This quick guide breaks down key concepts for easy understanding. Perfect for beginners!",
    "captions": ""
  },
  {
    "id": "3jYFD-6_kZk",
    "title": "Navigating the Complex World of Azure DevOps Data Migration",
    "description": "Discover essential insights for Azure DevOps migration! Learn about common pitfalls, best practices, and expert tips to ensure a smooth transition.",
    "captions": "When you're migrating data around in Azure DevOps, there are a hundred thousand things that can go wrong. There are some really big things that people run into. If you're using the Azure DevOps data migration service that Microsoft provides to take your whole collection up, big things are we're on an older version of TFS that's not supported. I did one recently and discovered during the discovery that the customer still had Visual SourceSafe. So we had to do a Visual SourceSafe import first. Visual SourceSafe I think went end of life in 2005, maybe 2005, so it was stuff that had been around for a long time. We had to bring that in first because if you don't bring it in first and you try and upgrade your TFS first, the VSS import was only supported up to TFS 2015 because after that it's ten years after VSS was end of life. Microsoft stopped having that functionality in TFS, so if you don't bring it in before that, you can't bring it in, not with full history and all of the things. They discontinued those tools.\n\nOne of the most common issues that people run into when they're doing migrations is doing things in the wrong order. If you push up to Azure DevOps and you've done things in the wrong order, you might want to do process template changes. You want to do them on-prem before you push them up. You might want to bring in other source control stuff; you need to do that before you take it up. You might want to move from TFVC (Team Foundation Version Control) to Git; you probably want to do that before you move up, but you can probably get away with it. \n\nThe biggest one, and this is the one that there's absolutely no way back from, is account alignment. This is just mental. The way TFS does identity is TFS has an identity, and it wraps whatever the actual identity is. In the old days, this was either a workgroup account if you're familiar with Windows authentication, or it was an Active Directory account. The issue is that if you take a workgroup and then move it into a domain-joined environment and convert it to a domain-joined, but the accounts don't match up, TFS will automatically, when you move between environments, try and find the account that matches the one that already exists and just swap out the bit inside of the TFS identity. But if it can't find it and it's already added to the systems, it will create a new identity. \n\nSo you'll end up with two TFS identities. If you've got Bob in your company and Bob has the old TFS identity and the new TFS identity, when he logs into TFS and he searches for \"show me all work that's assigned to me,\" he won't find anything because it's assigned to old Bob, not new Bob. That's an order of operations issue, and it's really hard in Active Directory because quite often there are groups and things that add people into services before you want them to be added, and then you end up with this problem. \n\nAzure DevOps combats that a little bit when you move stuff around because even once you're in Azure DevOps, you can move from tenant A to tenant B. Your Microsoft intra-tenant identity management can be swapped out, and it does the same thing. But it's going to ask you, \"Here's a list of all the users that we couldn't match up; do you want to match them up?\" If you click that skip button at the bottom, which if you have somebody who doesn't know what they're doing, people are apt to do. I find so many times things go wrong because people click the skip button because they think they know what it says or they don't care what it says, or they just want to do it, or it's not their job, or whatever reason. \n\nThere is no way going back to the old way because now you've got both those identities existing, and there's no way to merge those identities. If you want everything to align through your upgrade process, then all of those things need to be taken into account. Probably the absolute worst case of that having to be managed was years ago when Microsoft sold a part of their business to another company. We had to get all of this work right—the TFS environment from inside of Microsoft to inside of this other company. \n\nAs you can imagine, with legal and compliance and all kinds of things, it wasn't that easy. When you work within a company, you take dependencies on lots of things that maybe your company owns, but then you sell this thing and you're not selling these things that you're taking a dependency on. So how do you get it out? I think we had seven migrations that we had to do with this single environment. There were three outgoing, one outside neither environment, and then three incoming into the new company. At each of those levels, there were different validations, different scripts, different things that had to be run against those environments to ensure that we don't lose anything and we don't get anything we're not supposed to. \n\nIt was an absolutely horrendous nightmare of convoluted legalese to get it all done. The biggest issue was maintaining those identities all the way through because the people were going as well, and they wanted all of the identities to match up on the other side. You have to ensure that you map all of the identities correctly all the way through so that when you get to the other side, people open it up and go, \"Oh, there's all my stuff,\" rather than, \"Oh, where's all my stuff gone?\" Then they have to go find it, and they have to go create custom queries and all kinds of stuff. It's just a pain in the butt.\n\nThose are some of the bad things that can happen with identity management. There's a lot of gotchas in there. Database size moving up to Azure DevOps, the size of the database and what's in there and how you clean it up—that's a bunch of gotchas in there. If your company, which you should know developers are apt to do, you might find that your TFS environment has been around for a really long time, and it didn't used to be run by your operations team with control. It maybe used to be run by the developers before it was handed off to operations. \n\nBefore they knew that in the old days, operations often thought that anything that developers did was non-production, even though all the code is an organisational asset and we're storing it in there. The build environments and build agents are all organisational assets because we can't deliver our product if we don't have it. They were all considered not production, so developers could have the keys to everything and do everything for so many companies like that. \n\nThe problem is that because they can do whatever they want, they go, \"Oh, there's the new beta version of TFS. Oh, it's supported by Microsoft, so we'll install that.\" But it's mostly supported by Microsoft. I've had environments where it's a major enterprise company, but in the midst of time of that environment, it's had a beta version of TFS deployed that was maybe supported way back ten years ago. It causes knock-on errors because there were a couple of things that weren't taken care of that mean it can function the way it is, but it ain't going to Azure DevOps without fixing all of those things.\n\nIf your server is old enough, there are all sorts of buggy things from TFS 2010 that they fixed in 2012. If your server's old enough to have been in 2010, there’s just a whole nightmare of stuff left over that you have to go fix before you can go to the cloud. You can have half-committed stuff because you had to do two commits back in the day to do a rename, but nobody told anybody, and there was no error message. \n\nIn Service Pack One, they brought in the error message, and then in 2012, they fixed it, but there's still a bunch of stuff in there that's messed up. If you imagine a product that's been around for 18 years—no, not quite 18 years, 16. Where are we? It was created in 2005, shipped in 2006. Man, that's a long time, right? Nearly 20—nearly two years off 20, 18 years. My math sucks. Eighteen years of engineering work has gone into this product. Eighteen years of different people working on it. Eighteen years of forgotten stuff. Eighteen years of bodies being buried underneath some of the classes and methods. \n\nThose are probably where the biggest difficulties are. The easy stuff, the stuff that can go right—man, I did mention the migration up to Azure DevOps. This was really early on in Azure DevOps. It took less than an hour. This was a government agency in the UK. It was a council, so not government government, but local government. We ran the tool against it; it said everything was good. The database was a couple of gig, tiny, so we just sequenced the D pack, did a dry run up into Azure DevOps. That took about 15 minutes, less than 15 minutes, and it was there. They looked at the dry run; they thought, \"Oh, this looks awesome. This is perfect. Everything's where it's supposed to be. We see all the stuff. We trust Microsoft.\" \n\nThey were just reasonable folks. We just went, \"Okay, do you want to just do the production one then, or do you want to wait and validate it some more?\" They were like, \"No, just run the production one.\" So we ran the production one, and we were done. Turn off TFS. That's one headache off their plate, one headache off their local admin's plate. \n\nHold on, we need to go back to what's the worst—the absolute most appalling issue with TFS or Azure DevOps Server. Running it on-prem, especially if your developers are running it, this will be done right. If your operations team is running it, I guarantee you it's wrong, and that's backup. Most operations teams want to use their standardised tools, so they just see a SQL Server and they want to plug their standard backup tool into Azure DevOps and suck out the data, store it off-site. If they're doing that, that does not guarantee a restore. \n\nThe problem with systems like TFS—it's not really a problem with TFS; it's a problem with having people that don't know what they're doing running it or that don't care running it. It's actually the same issue for SharePoint and a lot of other systems. You have multiple physical databases inside of the system. When it runs updates, you could have an update that straddles multiple databases. In TFS's case, you've got a configuration database and then you've got a bunch of collection databases. \n\nYou can have an identity update, for example, that will hit the collection and the configuration database. The configuration database is small, so that bit will be done really quickly, and then it needs to complete on the other one. They run it as a transaction. It's absolutely possible to hit the point in time of your backup that it's completed and committed on one database and not completed on the other one. So it will roll back because the transaction has crossed multiple databases, and this one's finished and it's moving on to this one. The transaction allows you to roll back the whole thing, but not if you restore a backup without that transaction being in existence mid-transaction. \n\nThere are things that you're supposed to do that are all documented by Microsoft to enable you to do marked transaction logs. You actually put a mark—you use the transaction system to put a mark across all of the databases, and then you back up. The transaction completes, all of the other transactions are completed, this transaction completes and has this mark, and it might be at different timestamps across the different databases. Then you back up that mark, and when you restore that mark, it's exactly the right point. \n\nBut most people don't do that, and they validate things by doing a trial restore. It's totally possible that that restore will work. Probably in most circumstances, that restore will work. But you know what Murphy says: what's the worst thing that could happen? It will happen at the worst possible time. So in an actual disaster, when you need to recover your database, that's the time when you'll hit that transaction log. If you hit that, you are not going to be able to restore your databases, and you're going to have to call up Microsoft, and they're going to have to have an engineer log into your servers and run scripts to fix the databases. \n\nThen, because they've run scripts to fix the databases, that's another thing that can end up being a future problem when you go to move to Azure DevOps, and something in the database is not quite right when they do the validation, and it fails the import. My advice is never, ever let an operations team run TFS. That's my advice. If you have to let an operations team run TFS, ensure that they must use the TFS documented backup procedures, not their own stuff. That won't work and might end up with you in the hole. \n\nYeah, so that's the big one. Ninety percent of the time, things go perfectly fine. Upgrading TFS is super easy. It used to be an absolute nightmare, but the Azure DevOps team did a bunch of work to validate everything, check everything, and that's part of their ethos. If you run it, it will tell you, \"Here's a problem; here's how you fix it.\" You fix it, it runs, and you can do the upgrade. Totally cool. They're super easy. But when something isn't right, that's when you need that expertise to go, \"What is the problem? How do I fix it? Where does it come from?\" \n\nThe documentation is awesome, but there are still those things that slip through the cracks. So that's really the thing. There are a lot of things that can go wrong and a lot of things that can go wrong that are really important, but 99.9% of the time, everything's going to be fine. You're going to be able to upgrade; you're going to be able to migrate, and everything's going to go great."
  },
  {
    "id": "3nSV-v2cK-w",
    "title": "If you could distil the PSM immersive learning experience into 3 major benefits. What would they be?",
    "description": "Discover the top 3 benefits of the immersive PSM experience compared to the 2-day course. Elevate your Scrum skills with insights from Kanban Dan!",
    "captions": ""
  },
  {
    "id": "3NtGxZfuBnU",
    "title": "Do you think we are on the slope of enlightenment in Gartner's Hype Cycle?",
    "description": "Explore Agile's journey from disillusionment to enlightenment with Martin as he uncovers truths, debunks myths, and sets realistic expectations. 🚀💡",
    "captions": "Do you think that we are in the slope of Enlightenment in Garner's hype cycle? I would maybe have to say not yet. I think that's going to be my answer. I think we're still in the trough of disillusionment, right? And I think the reason I think that is perhaps I'm wrong, right? But every time I turn on my LinkedIn, I'm reading the feeds, I'm seeing what's going on. Every time I look, it's, \"Scrum sucks, Scrum doesn't work, Safe sucks, Safe doesn't work, Agile 2.0 is the way forward, Agile 1.0 is dead, Agile is dead.\" Right? There's all these types of posts. There's still a significant, and I think majority of people are still in that trough of disillusionment.\n\nDoes that mean that lots of companies are not already in the slope of Enlightenment? I think they are. I think lots and lots of organisations out there, lots of people are in that slope of Enlightenment already. But there are lots of organisations out there who just haven't made it yet. There are people out there who are still disillusioned that they can't have twice the features in half the time. Jeff's book title didn't help with that, right? Because it sets a level of expectation. Lots of people don't even read the book, which is a little bit going on that's not really what it's about, right? But that belief of what Agile was supposed to deliver, most organisations have not really worked out the hard work that is involved in actually doing it and getting there. It's not a magic wand that's going to solve their problems.\n\nSo I think there's still a huge number of people in that trough of disillusionment. I love that phrase. But as I think, I think we're definitely on that upward turn of that slope. There's definitely more, certainly the early adopters and even, could I say, the late majority? Some of the early majority are already in that Enlightenment mode, that they realise that it's not all the hype that is important, but it's the fundamental change in the way we work and the way we understand how we do things. And that realisation that it's people that solve problems, not tools, right? It's people that solve problems, not bureaucracy.\n\nPutting truly, truly putting people first and being willing to dismantle whatever processes, practices, or tools, ways of doing things are getting in the way of people actually doing the work that they need to do and helping the business be successful, right? I think that's where we are right now. But we're certainly on the little up of that slope, I think.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "3S0zghhDPwc",
    "title": "The Overlooked Virtue of Agility: Diligence",
    "description": "Unlock the power of diligence in Agile! Discover how attention to detail can elevate your projects and drive success. Watch now for essential insights!",
    "captions": "One of the key agile virtues that's often overlooked in organisations is diligence. Diligence is that attention to detail; it's doing the things that need to be done, having that level of focus that enables those things to happen. It's having a definition of done and following it, not just saying it's on the wiki, right? You actually follow it. Everybody on your team has the diligence to understand the definition of done, know the direction, and have the grit to follow it. You're not just paying lip service to this level of quality. Your definition of done is your compliance bar for what needs to happen in order for your product to be able to ship, and that is the diligence that your organisation expects.\n\nThe reason organisations and businesses don't really talk about the definition of done from a leadership perspective is because it's just expected that we'll have a level of quality that they're able to use. That's just the default. But unfortunately, it's not the default in many teams. So, have the diligence to create a level of quality, meet it, follow it, and perhaps expand it. Increase your level of diligence, increase your level of quality in your product, in the way you approach the work, in the way you approach working with others, and make your organisation successful.\n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at NE Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need naked agility."
  },
  {
    "id": "3XsOseKG57g",
    "title": "What do people love most about the 4-day training format?",
    "description": "Discover why learners love the immersive 4-day training format! Join Martin Hinshelwood as he shares insights on enhancing your Scrum journey.",
    "captions": "So what do people love most about the four-day trading format? It's not two full days. I think that's what they love most, right? I don't have to sit in a meeting or in a room for eight hours. That just sucks. I feel like the four half days is quite a good intermediary format. I think there's a better format coming, which is either going to be four half days over two weeks or eight half days over eight weeks, right?\n\nBut I think the four consecutive half days gives you enough time to absorb the content, do a bit of reading, right? Think about what it is that we've been working on and then come back the next day with more, better questions. I think that for me is the core value of the four half days over the two full days. I actually still do two full-day classes, and I really struggle in them to pay attention the whole day, right? Because that's a long day. But also, to really understand and rock the content, you kind of need that gap.\n\nSo having that four hours and then you've got the full 24 hours gap and then another four hours does seem to add value to the class. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "3YBrq-cle_w",
    "title": "How will a PSM II course challenge your assumptions the most?",
    "description": "Discover how the PSM II course challenges your assumptions and elevates your Scrum mastery with insights from Martin Hinshelwood at Naked Agility.",
    "captions": "How will a PSM-2 class challenge your sub-assumptions the most? I think fundamentally, people's assumptions about what they think a Scrum Master is, what they think a Scrum Master does, and how they think a Scrum Master guides the team. The number of times that we have to hit on those myths of what people think Scrum Masters are, right? I mean, are Scrum Masters or Jira admins? That's a good one. \n\nSo, realising they're not a Jira admin, they're not there to solve the team's problems. Right? Get impediments out of the way of the team is apparently the Scrum Master's problem. It's like, oh no, they're there to cause the removal of the impediments, right? Which means they probably don't do the work themselves; they're helping the team do the work themselves and effectively doing themselves out of a job, right? You want to be invisibly present. That's a great phrase that I love from the PSM-2: being invisibly present, right? \n\nYou're there, you provide value, you help shape and guide the way people are organising around the work. But then, if you're off for two weeks, the work still happens. If you're away for two weeks, the retrospective still happens, the daily Scrum still happens because the people on the team understand the value that it provides rather than just being told to do it by the Scrum Master and having to turn up and be told what to do, right? \n\nThat, for me, is the biggest transition from Scrum Master into the advanced Scrum Master world. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "4fHBoSvTrrM",
    "title": "How will a PSM II course challenge your assumptions the most?",
    "description": "Discover how the PSM II course can elevate your Scrum Master career. Join Martin Hinshelwood as he shares insights on advancing your Agile journey!",
    "captions": "Oh, that's a good question. How will a PSM2 class help a Scrum Master progress in their career? I think the thing we tackle in the PSM2, or the advanced PSM, is the things. \n\nAlright, how do I explain this? Craft is a great word for this. When you do things for long enough, craft builds up all the things that are holding you back, like the barnacles on a ship. They're making it slower, it's less effective, it's less sleek, and the PSM2 is about scraping those barnacles off so that you can go win the race, so you can be more effective. \n\nWe pick up all sorts of weird things that we... it's the way we work, right? Our ways of working get indoctrinated into the company's way of working, and sometimes we're forced at certain points in our career or in doing stuff to make compromises. Those compromises work great in that space, but then they become enshrined in the way we do things, our craft. We adopt some of that craft, and we need a little bit of a reset to figure out what is and isn't the ship and what is the bit we can get rid of. \n\nIf I'm back to the barnacle analogy, the PSM is about removing the barnacles from the ship. That's really what it's about. It's about identifying those things that you find that Scrum Masters get pushed towards in organisations because perhaps when they were starting out as a Scrum Master, they didn't have the confidence to say no or the confidence to correct leadership or the confidence to challenge leadership and say, \"No, we need to do things a little bit different to be more effective.\" \n\nThen that craft gets just added to our baggage. So it's really that differentiation of, again, what does a professional Scrum Master look like? Here are a bunch of things that we've learned how to do, and then bring it towards what we do want people to do as a Scrum Master. \n\nI think there's lots of people who are Scrum Masters who perhaps have been Scrum Masters for quite some time and have had no formal training. They've not had any experience whatsoever of exposure to... maybe they might not even have ever read the Scrum Guide. That's quite... I have met those folks as well. \n\nThey've been doing it, but they've been doing the role. They've been picking up the accountability, they've been doing the things in the organisation, and they don't want to go do a Scrum Master class because they're like, \"Well, I know how to be a Scrum Master.\" Right? They don't, but I don't know how to be a Scrum Master. \n\nPerhaps the advanced Scrum Master is a good way to level set a lot of those myths, and that's something that we do at the beginning of the PSM2, the advanced Scrum Master classes. We kind of try and kick some of those common myths that you see people fulfilling as a Scrum Master and reset very quickly. \n\nAt the start of the class, there's a quick reset to here's what it should look like. Based on what it should look like, what are a whole bunch of skills, workshops, activities that you could run with your teams? I feel like that's what the advanced Scrum Master really teaches. It's got that short, sharp level set at the beginning, and then it goes into a teaching through experience, right? \n\nThrough participation, teaching different techniques. We teach a whole bunch of different liberating structures to help not, you know, make getting a bunch of people together suck less because it generally sucks in organisations. How do different things go look at, right? \n\nSo how do you help the team understand and improve their definition of done? Well, there's little workshops and things that people can take away and do that, which is why I think at the end of the class, there's like 20 to 30 posters, a big infographic that you can take away to maybe leverage with teams and help them become more effective Scrum Masters. \n\nHow do I, as a more effective Scrum Master, help my team be more effective as well? So there's kind of two sides to it. There's the craft that we've built up doing the role, even if we wear a professional Scrum Master. Right? We passed our PSM1 like five years ago or even 10 years ago or 13 years ago, like myself. \n\nWe've built up some crafts and barnacles that get stuck to the hull. We need to knock them off, or we never had any formal training at all, and we've been doing the accountability, trying to do the accountability of the Scrum Master. Perhaps we've learned from other people's... we've adopted other people's barnacles onto our way of doing things, and we need that level set. \n\nThen what are the tools and techniques we need? Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "4FTEJ4tDQqU",
    "title": "Why did you embrace Agile over traditional project management as a developer?",
    "description": "Join Martin as he shares his transformative journey from traditional project management to Agile, highlighting the power of people in software development. 🚀✨",
    "captions": "Okay, so the question is why did I embrace Agile over traditional project management practices when I was a developer? I don't think I did while I was a developer. I think the reason I picked Agile and Agile practices was because, as a developer, I was always subjected to the traditional project management practices. \n\nI'd worked at Merrill Lynch, I worked for a number of design agencies, and I worked for a generator manufacturer and rental company. In all of those cases, they approached the projects in quite a similar fashion. Probably the most progressive was the generator company, which is weird, but it's because the boss was awesome. \n\nThat damaged me, I think. I definitely felt like these people didn't know what they were talking about, didn't understand what we were actually doing. It didn't feel like they even gave a crap. And then, as I started to do more DevOps, I started to migrate from development into the DevOps space. So not even the Agile space; it's the other side of agility from the technical side. \n\nI started to get more engaged in the idea that, yeah, DevOps is great, but a lot of DevOps is about tools. I know people might dispute that, but a lot of DevOps is about tools, and a lot of DevOps in the real world is about tools. I started to realise more and more that it's not the tools that solve the problem; it's the people that solve the problem. And it's not the tools that are the problem; it's often the people that are the problem, right? \n\nBecause time and time again, I was using—I did a lot of migrations to Azure DevOps for customers, so moving them from whatever they were doing before to Azure DevOps. They wanted to do the same stupid stuff that they did with their old tool with Azure DevOps, and I had to try and explain to them that the reason this tool is actually a problem is not because the tool is a problem; it's because of the way you're using the tool. \n\nA lot of them did it deliberately, right? They're like, \"Yeah, we've totally messed up this tool, and we really want a clean slate to go into this new thing.\" And then we don't have all the baggage. And I'm like, \"Yeah, but you're bringing this baggage in, that baggage in, this other baggage.\" And that's where you start talking to people. You start convincing people to start thinking about working in different ways, to simplify their process, to reduce levels of bureaucracy, custom fields, and rules. Oh my goodness me! \n\nIf anybody's used Jira as your DevOps of old, custom fields and rules are the bane of your life. And trying to go back to defaults, right? Do you actually need that thing? Does it actually add value? Does it bring you joy? You know, only have those fields, those rules that you absolutely have to have to do business, and you don't really want anything else. \n\nSo my move was through that technical, going into the high-level technical, and then kind of sideways into agility. I actually went to Australia to do the PSD beta for the old PSD class from Richard Hunt Housing, and that was where I got introduced to Scrum. Because in order to be a PSD trainer, I had to take a Scrum class. \n\nI just totally, totally made sense, right? It just made sense. It fit the ideas, solved the problems that I was—or enabled the problems to be solved that I'd been looking at my entire software engineering career. I wanted to help other people do those things better because I saw in all the customers that I'd had that this would start to solve their problems too. \n\nBut I still came in for the next probably five years with a DevOps focus. But as soon as you come in, remember you come in with one focus because the customer says, \"We need some DevOps help.\" And then you're like, \"Okay, you say you need some DevOps help, but actually, you need to fix this problem over here, which is about people in organisation and bureaucracy and how you organise your business in order to maximise the value they create.\" \n\nThe engineers can take care of this DevOps stuff over here. You get smart people, right? They're just constrained and aren't able to actually do things. I think that freeing nature of agility is what kind of drew me to it. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "4kqM1U7y1ZM",
    "title": "What would you look to achieve with a new scrum team in the first 90 days?",
    "description": "Discover what to achieve with a new scrum team in 90 days! Join Martin Hinshelwood from NKD Agility for insights on effective agile consulting. #Agile #Scrum",
    "captions": "Hmm, that's a good one. What would I hope to achieve with a new Scrum team in the first 90 days? Uh, 90 days should be enough for everything. That's my view. \n\nIt depends on where the team is and where their organisation is and what the organisational constraints are going to be, because I'm sure there's organisations I've gone in to help teams with where there is very limited support from the rest of the organisation, and then you're working within that bounded box, right? You can poke at it, but you get limited ability to do that. \n\nBut if you have an open, receptive organisation, an open, receptive leadership within the organisation, you should be able to take them from zero to a hundred in 90 days, right? They should be able to go from barely able to deliver a working product or not delivering a working product at the end of every Sprint to continuous delivery in that time. That should be where you want to get them at the end of that 90 days. \n\nThey are able to continuously deliver a usable working product to production, separating out the ideas of release, which is a business idea, and delivery, which is an engineering practice, and enable the Product Owner to better represent the value, right? The business now has an understanding of what value is for them, right? Because that's different for every organisation. \n\nWhat value means to them so that you can then have rational conversations with them about what things are more important than other things and why, so that you have an ordered backlog, a direction, a goal, right? What is it we're trying to achieve together? And that then informs that release side, right? What are we actually going to ship? \n\nYou've got that engineering side with the continuous delivery of value to production, right? Continuously delivered to production, and then you mesh that together, then closing the feedback loop, right? With learning. So are you then able to collect telemetry and talk to users and figure out whether you're actually building the right thing or the business value idea is actually correct? \n\nHave you validated them and then close that feedback loop all the way around to change what it is we're working on based on those things that we learned? That's kind of the minimum that I would expect to get to in 90 days. \n\nAnd then hopefully within those 90 days, I found somebody within that organisation who is able to be the champion for this process, or everyone being the champion for this process, this new way of working going forward, so that at the end of 90 days, right, I can back off. \n\nLet them get on with it, right? They've built their unique organisational structure, right, that fits them like a glove, that they're then able to take forward and use. And then perhaps be available to help tweak, coach, answer questions, and be available after that. But ultimately, it's their problem to solve; it's their work to do. \n\nIf we can get them to a certain place in the first 90 days that they understand it, then they should be able to take it from there. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "4mkwTMMtKls",
    "title": "7 deadly sins of Agile: Envy",
    "description": "Explore the dangers of envy in Agile! Discover why copying others, like the Spotify model, can hinder your unique path to success. 🚫📋",
    "captions": "One of the seven deadly sins of Agile is envy, and for me, I think envy in Agile looks like just copying other people's stuff. That's one of the ways it manifests. We believe that if somebody else is getting success with something, then of course we will get success with something. The difficulty is that that's not necessarily true at all. \n\nI'm going to rephrase that: it might be possible on a small scale. You're working with a team, and one of your colleagues, another Scrum Master or another Product Owner, is using a practice that they're like, \"Oh, this is great! We do this and this, and we have this value stream, and we're able to get good stuff from that.\" You're like, \"Okay, I'd like to try that.\" That's not really what I consider envy; that's just trying stuff. \n\nEnvy would be looking at a great example of envy, the Spotify model. The Spotify model is a fantastic example of envy. There is no such thing as the Spotify model. There was a presentation and a paper that a couple of folks who were leaders at Spotify did at a conference. I think they did a couple of conferences talking about what Spotify was doing, what their journey was, and where they currently were on their journey. That was them telling an example of how they did things, and everybody went, \"Ooh, the Spotify model! Let's do that!\" \n\nThey absorbed that into their organisation, but what folks don't realise is six weeks later, Spotify were doing it differently. They weren't doing what was defined in the Spotify model. A year later, they got rid of the idea of tribes and guilds and whatever else they were doing because it didn't work for them. They tried something, and it didn't work for them. \n\nThat envy of, \"Oh, they're doing this awesome thing, so we need to be doing that awesome thing,\" I think results in a lot of FOMO, if you've heard that expression: fear of missing out. That's kind of part of envy. Other people are getting stuff, and you want the same stuff. That's where, at many levels, organisations fail. They fail at the process level because you look at a Spotify model, or you look at SAFe, or you look at any of those big models and say, \"I want that! I want to install that in my organisation!\" Then you pay lots of money to get it installed and then wonder why you're not getting the benefit. \n\nThere's the application level. I talked about this recently on a podcast. Installing an application that enshrines somebody else's business processes into your organisation is not necessarily going to be successful for you. The example I used before was SAP. SAP is a massive application tool, very common in our industry. If you adopt an SAP tool, it comes with a bunch of different capabilities. \n\nLet's say it's invoice processing. SAP has a workflow for invoice processing that comes out of the box. It has certain ways that it does things, and you're giving up the way your organisation does things in order to adopt the way SAP does things. Does that kind of make sense? There are some things that you can adapt in SAP, but only within the bounds of what the developers that created it allow. \n\nWhen you see some of your competitors perhaps installing SAP and building their whole procurement processes in SAP, you think, \"Oh, we need to do that! If they're doing that, we need to do that!\" Or if our competitors are adding these features to our product, we need to add those features to our product. That's following; that's envy. That's following, not building your own path. \n\nSimon Sinek does a great video on this topic, and he talks about the \"why.\" He talks about going to two conferences: one is a Microsoft conference under Ballmer, and one is an Apple conference. At the Microsoft conference, everybody wanted to know what their competitors were doing. What are their competitors doing? What are their competitors saying? What are they launching? What features do they have? \n\nAt the Apple conference, they didn't give a crap about what the competitors were doing. They were like, \"This is the way we're going. We're doing this.\" It fits within our belief model: generosity, comfort, confidence, contentedness, friendliness, goodwill, kindness, benevolence, friendship. Those are the opposites of envy. \n\nI think that if you can put aside what everybody else is doing and focus on what you need to do and what your customers need, you'll have a lot better time both in the process space, in the tool space, and in your organisational structure space. \n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "4nhKXAgutZw",
    "title": "The Power of Kindness in Agile: A Core Virtue for Success",
    "description": "Discover how kindness transforms Agile! Explore empathy's role in boosting customer satisfaction and employee engagement for organisational success. 🌟",
    "captions": "One of the seven virtues of agility is kindness. Kindness could be compassion, it could be benevolence, it could be empathy, and it could be directed in a number of different places within our organisation. The two key things that I'm thinking about are, one, the customer. We have this relentless customer focus that we're trying to deliver something that adds value in the market. For that, we need to focus on the customer. We need to be compassionate about the customers' issues and their difficulties and what it is they're trying to achieve. That could be, you know, when dealing with bug reports, or it could be just with engaging with them and talking to them about the problems that they're encountering and trying to solve within our product domain. \n\nWe want to be benevolent; we want to be seen as providing them with something that helps enable them to do something else. If they see our product as a burden or they see our product as, I don't know, what's the cost version of burden? For me, burden's broad, and then there's a cost, like a cost centre. If they see your product as a cost centre, then they're not going to think of your product with kindness, and you're probably not thinking of them with kindness. \n\nSo that relentless customer focus, building empathy with your customers. Why do people queue up outside of an Apple store to buy the latest product? It's absolutely not because they have the best products; it's because there's an empathetic connection between the customers and the company and the products that they're trying to create and the vision and the outcome that the company has. Building those stories is really important. \n\nYou don't do that by doing something negative towards your customers. You don't do that by screwing them over. You do that by building, again, trust—building trust with the customers with kindness. The other side that I was thinking of was the developers. Are we, the people doing the work, building compassion and benevolence and empathy with them? How do our employees see our organisation? What do they think about our organisation? \n\nI was listening to Richard Branson, and he did a talk where he was talking about that your employee happiness is a leading indicator of your customers' happiness. If your employees are unhappy but your customers are happy, it won't be long until your customers are also unhappy. If your employees are happy but your customers are unhappy, it won't be long until your customers are happy because people that are happy and engaged do the right thing. They do the thing that helps other people rather than, you know, kind of being dismissive and disgruntled. \n\nYou need people to think with kindness, and in order to do that, you need to demonstrate that compassion, that benevolence, that empathy within the context of your organisation to your employees, and they will then demonstrate that to the customers and build value in your brand, value in your organisation, and value in your market. \n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "id": "4p5xeJZXvcE",
    "title": " shorts 7 Virtues of agile. Patience",
    "description": "Discover the first of the 7 Agile virtues: Patience. Learn how it fosters collaboration and enhances team performance in Agile environments. #Agile #Scrum",
    "captions": "So businesses need to be patient with teams. Leaders need to be patient with people. Product owners need to be patient with the product, right? With the people that are building stuff in the product, are we getting to where we need to go? If we get frustrated and create a blame culture within our organization, we are not going to be successful because we're going to erode the trust that is the foundation to empiricism. One of the key things we need to build trust is patience."
  },
  {
    "id": "4scE4acfewk",
    "title": "The Power of Humility in Agile: A Core Virtue for Success",
    "description": "Discover how humility drives success in Agile! Uncover its role in collaboration, trust, and decision-making. Watch now for transformative insights! 🌟",
    "captions": "One of the seven virtues of Agile is humility. We need to realise, especially product owners and product managers, that the things we expect to be valuable, or the things that we think are valuable, are not always the things that are actually valuable. Just because it's our idea and our thinking doesn't mean that it's going to be successful. And that's true for the product owner thinking about ideas and the product. It's also true for developers, right? People doing the work thinking that their idea is the best. \n\nHow do you collaborate as a team? Do you collaborate with arrogance, thinking, \"I'm always right and you're always wrong,\" or do you collaborate with humility? \"Here's my idea, and maybe it's a good one; maybe it's not. Let's discuss.\" Bringing modesty and respect for others into the conversation in agility is going to help you build trust, right? Build those empathetic relationships both within the team, within the organisation, and leadership, and outwardly towards customers. \n\nDon't make assumptions, right? That's the key risk here: making assumptions. And also cognitive bias, although that's more difficult to detect in yourself. Usually, you need somebody else to look in on it to point it out. But then, do you listen to those people? Do you realise that perhaps other people's perceptions are important to our decision-making? I'm not saying blindly listen to what other people say, right? I'm saying we need to take that into consideration. \n\nSo, in order in the product world, in the product management world, to be humble, having humility, we need to be looking at how people see our ideas and see our product, how they see us. We need to be looking at the data, right? There are facts in this story, but you know we can interpret as lies, damn lies, and statistics, right? We can interpret facts differently, but having those facts to hand—how are people using the features in our product? How are they engaging? How do the people on our teams feel about the way that we engage in this product world? How are employees happy? What's their morale like? \n\nHaving that data to hand will help us make better decisions, and we need the humility to look at the results, to listen to what people say, and perhaps make a change to the way we do things because we're not always right. \n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "id": "4Tjc5uEtM7M",
    "title": "DevOps Migration. Lack of Expertise",
    "description": "Discover why expert help is crucial for a smooth Azure DevOps migration. Learn about complexities, data issues, and the benefits of professional guidance!",
    "captions": "One of the biggest issues with migrating Azure DevOps up to the cloud is probably that you're only going to do it once. Because you're only going to do it once, you're unlikely to have the skills already in existence in-house to be able to do that migration. It probably doesn't make sense to build and maintain those skills in-house because it's something you're probably only going to do once.\n\nFor Microsoft's database migration, depending on the size of your database, it can get quite complicated. It doesn't quite hit complex, but when you start running a lot of the validation tools against it to make sure that your environment is compliant for moving up to Azure DevOps, is when you get a lot of wacky stuff. There are rabbit holes you need to go into to understand a lot of that stuff because there are things that perhaps could have happened to your system. For example, in the past, somebody had a particular version installed, and Microsoft made a mess up. They released a patch, and between the install and the patch, somebody made the change that the patch is supposed to fix, but it didn't quite fix the actual data. Then you're left with data in a little bit of an inconsistent format.\n\nWhat you normally need to do is run some commands against the system, and understanding those commands and what they're actually doing can be quite a deep rabbit hole to get into. Ultimately, we've done hundreds of migrations. I've been working with Azure Ops since it was Visual Studio Team System, and it launched back in 2005 or 2006. I've been working with it for a long time, and I built the tools that Microsoft recommends to do the peace more peace bu migration. Like, I want to move one team, I want to merge projects, I want to split projects—those types of migrations require even deeper skills necessary to be able to run that tool.\n\nIt's really, really flexible, and when you have things that are really, really flexible, that increases the complexity and configurability of that thing. You need somebody to spend a lot of time figuring that out. We have that knowledge and expertise because we built the tool. If you're going to do one migration or a few migrations over a small period of time, you're probably better off just hiring somebody to do that work. If you're going to do a whole bunch of migrations over a long period of time, I do also work with customers where we train people within the organisation to use the tools, and then we help them run the tools on a continuous basis. \n\nWe help with support because you always run into crazy things that are specific to you as a customer. Those data shapes that I mentioned, perhaps in the midst of your TFS environment, your environment—the database was originally controlled under the control of the developers because it's a developer tool. Maybe operations didn't really own it, and the developers decided to install TFS 2013 Beta 1, which was supported by Microsoft but can cause lots of weird data things. Then it's on track; it's been handed over to operations, but there are some weird idiosyncrasies in there.\n\nSo, bringing in expertise for those types of things, whether it's for training the people that you have that you want to do long-term lots of different migrations, or if you just want somebody to take it off your hands and do it for you, that's ultimately what we're here for. You don't need the expertise in-house."
  },
  {
    "id": "4YixczaREUw",
    "title": "Many folks say Scrum is like communism; it does not work! Are they right?",
    "description": "Unpack the myths linking Scrum to communism! Discover 5 misconceptions that hinder Scrum adoption and learn how to embrace its true potential.",
    "captions": "Scrum is like communism; it doesn't work. This is a phrase I hear often from folks who have been unable to adapt their systems of work to incorporate the core philosophies, theories, and practices of Scrum. They sit and look at the signals coming from Scrum that things are broken and don't work like they're supposed to work and do nothing but say, \"Scrum is like communism; it doesn't work.\"\n\nHi, I'm Martin Henwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nIn this video, we'll explore five myths from Scrum that inhibit its adoption. From language definition inflation to cognitive bias, here are the top five myths that result in the idea that Scrum is like communism.\n\nThere's a myth in Scrum that you spend more time talking than doing. I see this quite a lot; people talking. Usually, people are using old school terminology. When you hear them talking about that, you hear them talking about ceremonies rather than events. One of the main reasons why Scrum doesn't call the activities ceremonies is because it's ceremonies. We get together and nothing happens; it's a ceremony. It's something we do that's perhaps the same every time, and there's no actual outcome to a ceremony apart from maybe people have some jollies and they feel good.\n\nThe reason Scrum calls them events and also not meetings is that something's supposed to happen there. Every single one of the Scrum events serves empiricism; that's their purpose. You're going to inspect something and adapt something. If you're not adapting, there's no point in being there, there's no point in having it, there's no point in doing it. Their purpose is to adapt.\n\nFor example, at your Sprint planning, you're inspecting your product backlog and your product goal, and you're adapting your Sprint backlog and your Sprint goal. That emerges through that conversation. But at the end of your Sprint planning, you should have a Sprint goal, you should have selected backlog items, and you should have some kind of a starter plan to complete them. If those three things don't exist at the end of Sprint planning, there was no point in having it. That's what it's there for, so that we understand what it is we're going to take into the next Sprint.\n\nSo that we can communicate that perhaps with other people. What's our goal for this Sprint? What are we trying to achieve? How do you get the stakeholders to actually turn up for the Sprint review? Well, you have to give them something that they're interested in coming in providing feedback on; that's your Sprint goal. And that's just one of the events in Scrum.\n\nEvery single daily Scrum is only 15 minutes. How does that add up to a boatload of meetings? At most, 15 minutes per day where the team gets together and plans the next 24 hours; that's its purpose. You're inspecting your existing Sprint backlog and you're adapting that Sprint backlog based on what you learned in the last 24 hours. You might have learned some stuff from actually working on the product, what can and cannot be done. You might have gained more information and insight from other stakeholders and collaborating with the business and doing analysis on what it is you're going to work on. That means that something you've got in the Sprint needs to be taken out because it's no longer viable, or something else needs to be brought in because it becomes part of that story of what it is you're trying to achieve that Sprint.\n\nThat's your daily Scrum. It's not an elaborate status event; it's not a time that you're wasting. It's where you're maintaining the transparency that is required to be able to inspect and adapt. You're serving empiricism, and all of the Scrum events serve empiricism.\n\nOne of the common myths in Scrum is kind of a proxy myth. This proxy myth is, \"Why do we spend so much time working on story points?\" When story points measure complexity and not time, and then we have to figure out how many story points fit in a Sprint. I 100% agree with that; that part is not a myth. The bit that's a myth is that story points are even a Scrum thing in the first place. They're not. Story points have nothing to do with Scrum; it never has, apart from as a practice, potentially a complimentary practice that teams choose to take on in order to get to an outcome.\n\nWhen you find complimentary practices are not adding value, you should be stopping doing them, not continuing with them. So if you're in that position where you find that story points are not adding value, great, stop doing them and choose something else. The guy that invented story points, or that is generally accredited with inventing story points, has a public apology online for creating them in the first place because of how they tend to be used within organisations as a pseudo proxy for time to beat developers around the head with. They were originally invented as a reasonable way for developers to sit and have a conversation and figure out what they don't know. That's the purpose of story points.\n\nWe can all get together; we maybe use another complimentary practice called planning poker. All that really is, is we keep our cards to ourselves. We're not going to tell each other what story point we're going to pick, how complex, t-shirt sizes, right? Whatever you pick, how complex this thing is. You've got one developer that says this is a small or a one, right? You've got four developers that say that this is a five or a medium, and then you've got one developer that says this is an extra large or a 21. The idea is, what do they know that we don't, or what do we know that they don't? That's the purpose of story points and complexity conversation.\n\nIt should be used almost solely during refinement in order to enable teams to right-size their backlog items and decide, do they fit in a Sprint? Do we understand them, or do we not? After that, delete the numbers; they're useless. Don't use them anymore. That's their purpose for that one context; don't bring them into the wider context.\n\nOne of the common myths in Scrum is that it is really a forum for micromanagement. There's a core test for this in your team. It is a myth, right? But it's a reality for many teams. So is it a myth or is it not a myth? That is a matter of perspective. However, I would point out that it's not Scrum. So it's a myth in the context of Scrum, but it's not a myth in the context of how lots of organisations and teams approach Scrum.\n\nMost organisations approach something like Scrum from their traditional top-down steering-based perspective, and they want to tell teams what they're going to deliver in a Sprint. So you walk into Sprint planning, and the product owner or the tech lead or the project manager, or whoever, the Scrum Master—the worst one—but the Scrum Master says, \"Here's a list of things we need you as a team to do this Sprint.\" As soon as that happens, not Scrum. We've gone out of the bounds of the Scrum guide. Who decides what we work on this Sprint? The developers. Who decides how we work on it? The developers. It's not anybody else because the developers—that's the core reason why they dislike that approach. It's the developers that understand the nuance and intricacies of the technical challenges of actually delivering on the work inside of the Sprint. Nobody else can understand that nuance because they're living it, right? They've got skills that I don't have as a manager or as a product owner. They've got an understanding of the product and the technologies that we're using to deliver that product, the tools and techniques that we're using. They're best placed to make that decision.\n\nNow, can the product owner say, \"Oh my goodness me, we're in a difficult place because we're not working through the work that we need to deliver as fast as we would like?\" Yeah, absolutely, they can have that conversation. And they can have a conversation with the developers about how the developers might choose to cut corners in order to accelerate work. But it must be done with their assent. If the developers say no, then we can't work any faster because we might be taking on too much technical debt. For most businesses, all technical debt is a risk to the business, and most businesses don't understand the context of technical debt enough to make an informed decision on whether they should accrue it and how they should pay it back. That's why we have hired these technical experts in order to deliver our product, and we should trust their understanding and view of the product in order to do that.\n\nSo I would say that it is a myth that anybody should be telling the developers what to work on and when to work on it. But I do understand that lots of organisations don't understand how to let go of that control and are not yet ready for Agile.\n\nOne of the common myths in Scrum is that since we're doing Agile, we don't need planning. That is just utter garbage. Scrum, for example, is all about planning. We have Sprint planning, we have refinement, which is a type of planning, we have daily Scrum, which is about planning the next 24 hours, we have a review where we review what happened based on the plan and adapt the plan going forward into the future. It's all about planning; it's all about getting things right. It's not about planning upfront; it's not about spending too much time upfront planning.\n\nBut there's a phrase which is often misinterpreted, which is we should do just enough planning. We should do just enough, right? If we do too much planning and we plan a bunch of stuff that we end up not doing because it gets taken out of the backlog, then that was waste. Maybe that was okay waste; maybe we needed to do that planning in order to find out other stuff and have that thing removed. Or maybe that was a little bit too much. Is there a way that we could have learned the same thing that we learned doing that planning, doing something a little bit less?\n\nThe converse of that is if you are building—I'm trying to think what you could be building that needs lots of—let's say you're working on Windows and you're one of two and a half thousand software engineers. How many teams is that? Metric assloads of teams, right? If you're that many teams working on one product, then you're going to need to plan, right? You're going to need to understand what's happening going out into the future. You're going to need to coordinate across hundreds of teams on direction and strategy. I mean, most of that in Scrum is done through communication, right? Vision, product goal, Sprint goal, right? You've got that communication chain. How do we all get behind the same thing?\n\nBut we're trying to have as light a plan up front as possible within our context. So even if I was working on the Windows team, I would probably have a roadmap. I'm probably going to have a roadmap for my current six months. If you're not familiar with how Microsoft product teams have created their own scaling framework around what they need in their business, it's often called the season-based model because they talk about the spring update and the fall update for their really big products. Many of their products do continuous delivery, but they're talking about a long-term view of what it is they're trying to achieve, and that's about six months. They look three seasons ahead, so they're looking 18 months out. They have an 18-month plan, and I'm using air quotes because it's probably pretty vague, right? If you're looking at that third season out, things are really big, right? You might have themes rather than individual things you're going to deliver. You might be looking at what are the investment opportunities, what's happening in the market, where do we need to get ahead of the competition going over the next 18 months? That generates these big themes, buckets of work that many hundreds of teams might work in to actually make progress towards those big themes.\n\nBut you're looking that far out; you're planning that far out. You probably know what your goal, your product goal—if they call it that, but whatever their theme for each of the seasons is. They probably know what they're going to be 18 months out for the season that we're in. We're probably going to have backlog items and actual things we're going to tactically deliver for the next three, four, maybe five Sprints. Maybe, and then in the next bucket, we might have, you know, here's some Sprint goals we might tackle, here's some product goals we might look at in that next seasonal bucket. And then the season after that, we don't have any of those details, just what's the big theme. You can see how they did that. They did one recently—I'm saying recently in the last five years, right? Recently—that was called the Creators Update. So when they were talking to us, the general public about the products, they talked about the Creators Update. We're going to invest in opportunities to make our systems and products and services better for creators. That was an organisation-wide theme that can spawn out of the Windows team. But think of all the things that impact. Not only does that impact on Windows, the operating system, right? But what about Office? It impacts most people who interact with the operating system through Office. So if you're talking about pen support, right? You've got the actual pen touching the screen on the Surface and the number of levels of capability that it has in that world. You've got, so that's hardware; that's the Surface hardware and perhaps third-party vendor hardware collaborating with. Then you've got the application that you're actually using that is interpreting those signals. So that could be Microsoft's applications; it could be Office; it could be third-party software. And then you've got the underlying operating system, which is providing support for, I think it used to be 256 levels of pressure, and now it's 1024 at least levels of pressure that you can put on the pen in order to get that, you know, I'm drawing on the page type of feel. And that requires collaboration, looking forward into the future. What do we need? What are we trying to achieve? All of those strategic things happening, we just probably don't store them in a Gantt chart.\n\nOne of the myths in Scrum is that we have no governance. This kind of leads on to the bigger myth that just because it's not in the Scrum guide doesn't mean you're not supposed to do it. Scrum does absolutely have governance; it has small amounts of governance baked in. But in general, you need governance to build your product. So it's kind of correct to say Scrum doesn't have a lot of governance. There's a very small amount of governance built in, but if you want to be successful at building products—if you're, for example, building products within the healthcare space—then you're going to have to worry about your ability to support HIPAA, to support the regulatory compliance that comes from the outside. That's governance imposed on your organisation from the outside that you have no control of. You're going to have things that your organisation does internally. Perhaps your organisation has usability guidelines; perhaps they have UX guidelines for how all our products' UX is going to function so that anybody interacting with our software already knows how it's going to work because it follows the same rules. Then that's internal governance that has been applied to your product.\n\nYou maybe have business rules; that's another form of governance. You might have particular ways in which you interact with the market as a business. That's one of your unique selling points, your unique engagement points with the market, and those ways of working have to be implemented in your systems in that way. That's internal governance. Just because Scrum talks about minimising that governance doesn't mean it's not there. You just have just enough governance to support the business need. It's when you have way too much governance that you start running into a problem. That's why in very large organisations, for example, banks, they really struggle to move towards Scrum and Agile practices because they're encumbered by the baggage that they can't put down. Royal Bank of Scotland in the UK was, I think, the first bank in the world; it's currently the fifth biggest bank in the world, and they've been going for over 200 years. Can you imagine the procedural and compliance baggage that organisation has? Many of it around for no other reason than nobody's revisited it in a long time. Nobody's challenged it in a really long time. How many policies and procedures do you have in your organisation that nobody knows where they came from or what they're for or who owns that policy or procedure or why, right? It's just the way we do things here. Those are the things that we want to challenge. We want to challenge anything that gets in the way of inhibiting our ability to deliver value. Those are the things we want to prevent. Those are the policies, practices, and procedures, the governance that we want to reduce to the absolute minimum."
  },
  {
    "id": "4zGsmQFWFpo",
    "title": "Focusing Beyond \"Agile\": Building True Capability in Organizations",
    "description": "Refocus your organisation! Discover how to build competence and value by improving hiring practices and fostering effective leadership. 🌱💼 #LifelongLearning",
    "captions": "We need to change the way we focus and what we focus on within the context of these organisational strategies, business strategies, technical strategies that we need to be able to adapt to complex work. Right? Did you see how much I try to avoid the word agile there? Don't think about it as agile; think about it as increasing our capability, maximising our value, and maximising our effectiveness to deliver that. The name, the moniker, is irrelevant because what we've ended up with by a focus on the mechanical elements is we've ended up with backlog barons and scrum stumblers. That's product owners and scrum masters that have no capability to do what they're being asked to do, and they're pushed into positions of just not knowing what they're doing.\n\nSo what we can do, what I've got a couple of previous videos on this topic on the detail of what went wrong, but a summary is that demand has outstripped supply of competent people, and businesses have reduced the bar in order to meet the open positions. So we've got a bunch of people who don't know what they're doing. There's not been a focus on continuous learning and hiring people for that mentality, especially for the specific positions like product owner and scrum master, and engineers and lead engineers, to be able to have the body of people within our organisation, the culture and outlook within our organisation that moves us in that direction.\n\nSo that's where we are now, and we need to look at where we're going to go next and how we're going to get there. The first thing we need to do is fix the hiring practices. We need to stop hiring people who have no competence for the thing that we're trying to do. It's absolutely okay to bring in interns and bring in people at the lower levels, but we want to be bringing people in at the lower levels in the work context. Right? So think of it as, I'm trying to think how to describe this. The way I think, if we want good leaders in our organisation who are able to lead products or lead people, right, I'm thinking of them as two separate things because product management is leading the product, and I don't know what the name of the other one is; leadership is leading the people.\n\nThen we need people who understand the context that we're working in to be those people leaders. So where do they come from? Well, usually they've done the job, right? They've done something within the context. I work with some great scrum masters. By the way, this is why I'm saying this. I'm not talking about being a software engineer; I'm not talking about writing code. I'm not expecting a scrum master to be able to write code. Right? I know scrum masters well. I might roll that back a smidge, but I know scrum masters who have never been coders, who have perhaps been a business analyst or perhaps been a tester, right? Or perhaps been some other context within a team, and they've demonstrated, they've worked hard, they've brought in and learned the philosophies around enabling a team to be effective. They've made suggestions that panned out within the context of their team. Their team has noticed that they quite often make suggestions that pan out and help them, and the team has promoted them to scrum master. That's the way I think about how you become a scrum master, right? You don't get hired into that position; the team hires you into that. The team enables you to pick up that accountability, however you want to describe it. The team get together and go, \"Yeah, Bob is really good at this stuff. Bob, can you help coach us to do more stuff, to do more capability?\" They've already gained the respect of the team by participating in the team, participating in the work that the team is doing. So the team knows they understand the work, and they're making suggestions on how we do our boards or different practices or different engineering things we can bring in to understand that.\n\nSo does somebody who's a scrum master need to be able to code? I would say no more than anyone needs to be able to code, which is yes. I don't know if you've looked at the international computer driver's licence, but at most of the levels, the coding's pretty basic. Being able to understand those logical constructs because then you can participate in conversations, you can participate in understandings like what architectures, what patterns and practices are valuable within the context of a particular product. If a product's big focus is engineering, a scrum master needs to understand the patterns and practices of engineering. If the focus of the doers is on accounting, right, then the scrum master needs to understand the patterns and practices of accounting so that they can help coach that group of people towards better accounting, better organisation of that work, better planning, better all of the just making things more effective.\n\nSo that's where we need to get to. So we've got where we are right now, which is lots of incompetent people doing the roles, and we've got where we want to get to, which is lots of competent people doing the roles. For me, it's fairly logical how we make that transition: we stop hiring people that can't do it and start hiring people that can. Primarily, try and promote from within our organisation into those roles and improve the overall capability and lead by example. So this is why we want scrum masters who are supposed to be leaders, right? A scrum master might be a delivery manager; they might be a defined role in your organisation. They might be a delivery manager; they might be a lead developer who picks up the accountability of scrum master. They could be something else, right? But they pick up that accountability, and they are somebody who has those lifelong learning genes. I don't know how better to describe it. They have that lifelong learning mindset, that lifelong learning philosophy, that I want to understand the world better, and they demonstrate that through leadership. So they lead the team, and they are demonstrating that this is how we want people in our organisation to behave.\n\nEvery time an organisation promotes somebody who's not capable, it tells every other capable person in the organisation that this organisation is not for them. That's what's been happening: promoting people through lack of competence and just not having the right people in the right place. There's a great book, The Ideal Team Player. It's a great book, and in that book, it talks about the types of behaviours that you want to see in people that you hire. We need to be hiring the right people. We need to be expanding the capability of the teams, of the parts of our organisation, of the product development effort within our organisation to be able to build better products that are more effective and add more value to our customers."
  },
  {
    "id": "54-Zw2A7zEM",
    "title": "Scrum Master versus seasoned Agile Coach?",
    "description": "Discover the key differences between a Scrum Master and a seasoned Agile Coach with Martin Hinshelwood in this insightful short! #Agile #Scrum #Shorts",
    "captions": "While our seasoned Agile coach will definitely include all of the knowledge that a Scrum Master has, it will be deeper with more experience. Effectively, more battle-hardened, they're usually somebody that has had long years of experience working in organisations, developing and implementing Agile practices within organisations and learning the deep technical expertise in Lean, Agile, Scrum, and Kanban that they need in order to be successful. Ultimately, they know where all the bodies are buried. They've seen the successes, they've seen the failures, they know what works and what doesn't. They are there to really help the organisation excel."
  },
  {
    "id": "56hWAHhbrvs",
    "title": "7 Harbingers of the Agile apocalypse. Organizational Structure.",
    "description": "Uncover the \"Antichrist of Agile\" as Martin Hinshelwood explores how traditional structures hinder agility and the path to self-organisation. 🔄🚫",
    "captions": "So the first in our series of harbingers of the agile apocalypse is really about the Antichrist. What is the Antichrist of agile? I think if you've been following me at all, you'll know exactly what my answer is going to be, and that's that Alpha organizational structure—the traditional management structure in organizations—that creates environments within which you have that steering from the top. \n\nSo you've got the market at the bottom, where we're interacting directly between the people in the company and the customers, and then you've got this hierarchy up the organization to somebody who's the decision maker or makes decisions or needs approval for something or whatever that is. That's one of the facets of the Alpha organization where that type of model inhibits the ability of the organization to move towards agility. \n\nYou can absolutely get little wins, right? You can make things a little bit better. You can improve your time to market. You can improve the ability of the teams to deliver. A team could be doing continuous delivery. You can do all of those things to make the team as effective as possible, but ultimately, within that traditional organizational structure, you're not going to be able to have a product owner who decides what it is we're working on, that looks at market, looks at budget, engages with customers, decides what and when to release, decides what we're going to build, where are we going to invest money in this product, where are we not going to invest money, what's our pricing strategy for our product. \n\nThose are all things that are often decided far higher up the organization. So as organizations flow from the Alpha model of top-down commanding control—I mean, it's not, it's commanding control oversimplifying it, right?—but that top-down steering-based style towards a more beta, democratized, self-organizing format, more of a sales-based structure that is able to interact directly with the market, as they move towards that, you'll start to see more and more benefits in the organization. \n\nBut what happens in most organizations is the Antichrist blocks it. This Alpha top-down organization where somebody says, \"No, I'm not going to approve that,\" or \"You need to get my approval for all of those things,\" or \"I don't know any of these things,\" that just get in the way and mean that the organization never crosses that line and starts its journey towards decentralization. They never start making that journey towards decentralization because we work this way; this is our hierarchy; this is how we do things. And that is the killer to agile in your organization. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, scrum, or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "id": "56nUC8jR2v8",
    "title": "The tyranny of Taylorism and how to spot agile lies",
    "description": "Explore the pitfalls of Taylorism and uncover the truths behind agile methodologies at the Future of Work event in Scotland! Join us now!",
    "captions": "Hey everybody! Join me in about 15 minutes at 7 p.m. British Summer Time in the Future of Scotland meetup group for our session on the tyranny of Taylorism and detecting agile BS. You can check out the website; you can sign up, there is still time, and you will get our URL to join the class. Check in the comments here for the URL direct to the session. I hope to see you there!"
  },
  {
    "id": "5bgcpPqcGlw",
    "title": "Agile Evolution - Live Site Culture & Site Reliability at Azure DevOps",
    "description": "Explore Azure DevOps' journey to a robust live site culture, balancing engineering responsibilities with transparency and reliability in a SaaS environment.",
    "captions": "Hello and welcome to Nikhil Agility with Martin Intuit. I'm Martin Intuit and I'm going to be talking about the live site culture and site reliability in the Azure DevOps team at Microsoft.\n\nOkay, hey, I'm welcome. Today I want to talk a little bit about site reliability engineering. It's something that I spend a lot of time thinking about because I have many customers who also have operational needs as well as having the typical engineering needs that they have. I think it's important to find that balance between engineering and operations, and the Azure DevOps team have an interesting story about how they've managed to create that balance and create a culture inside of their organisation supporting live site and doing it with engineering teams.\n\nSo we're going to cover quite a few different topics, and I have a lot of information here about how the Azure DevOps team do their work as well as how they interact with us, the customers. But just to give you an overview, we're going to talk about transparency and how they manage to build trust with their customers. We're going to talk about the amount of telemetry that they collect and how they organise that. So how open and transparent actually are they with customers and how much telemetry do they write? And then how do they organise themselves around responding to things that happen? \n\nSo there's going to be plenty of things that happen. They do scrum; they have three-week sprints. How do they make sure that they're still able to deliver value while also being able to get other things done as well? Get their operational work done. What if the site goes down? What if there are other pieces of work that would make the site more efficient and less likely to go down? How do they prioritise that work? \n\nAnd then we can have a little bit of discussion about automation. Automation is very important for an agile story. We talk about it all the time in scrum that your definition of done at the end of every sprint, your application should be potentially shippable with no further work required by the engineering team to make that happen. So if your business decides, \"Let's ship to production,\" there's not anything else for the engineering team to do. Ultimately, your product owner can just push a button and ship to production, and that should be as much as is necessary.\n\nAnd then there's a little bit of a discussion around investigation and getting to the root cause and how to continually improve in your environment. I think that's important as well. We talked a lot about in complex systems; it can be impossible to get to a root cause. If that were true, we would never visit the doctor because there would be no point. There are certain causes that we can identify. We may not get everything, but we can certainly do our due diligence and figure out how to get there.\n\nBut first, I have a little short story about an organisation that you may or may not be familiar with. It's the story of how a company with nearly 400 million dollars in assets went bankrupt in 45 minutes because of a field deployment. This was a company called the Knight Capital Group. They were listed on the New York Stock Exchange, and they were implementing effectively a new order handling system that allowed them to create child orders. This allowed them to do something they hadn't done before, but it required that they replaced the old code with new code and be able to integrate from there. \n\nIt was really nine years of application building that had gone into this system. So you can imagine if you have nine years of code in there, there's going to be maybe a lot of spaghetti. There's going to be a lot of difficult areas, lots of leftover things that people have just built and ignored for many years. So they did decide to repurpose an existing flag in the system in order to activate the new code. That was one of the things that they did, which potentially could have a negative result or negative impact. \n\nAt deployment time, their engineer, their technician, during the deployment only copied the new code to seven of the eight firemen. Then they flipped the switch, turned on that flag, and they went live. Because they had that fault in the number of servers that were active with the new code, the system was not performing correctly. It was doing strange things; it wasn't able to process the orders at all that were coming through, and they started losing at just under two hundred thousand dollars per minute.\n\nBecause the system wasn't working as expected, they then obviously were going to try and fix it. So they dropped everything; everybody's here on fire. They came running, trying to figure it out, and they just couldn't figure out what the problem was. For that whole day, they spent a whole day with the system down, and they couldn't figure out what the problem was. They didn't understand that it was just one server that was acting up. Everything looked like it was normal. You go test a server; things are good. Why is this not working? Couldn't figure it out. \n\nAt the end of that day, they were losing, they lost four hundred and sixty million dollars, and they filed for bankruptcy protection. An interesting question you may ask yourself is, what would be the impact in your organisation of a key or critical platform that you create for your customers being down for that length of time? What can you do to prevent it? \n\nIt's interesting; we know a lot about what happened to the Knight Capital Group because they were a publicly listed company, and you can see their SEC filing and see what happened. But they had no automation, and they had no procedures for back-out plans, no anything. So it was a massive risk for the organisation. Really, we need to think about how do you get better at doing something like that? \n\nOne of the things that I see a lot of organisations doing is thinking that they can create a back-up plan, that they can reverse the thing that they failed to do forwards and be successful at it. If you can't be successful at deploying your product, the chances of you being able to reverse that deployment are a lot lower than your ability to deploy in the first place. \n\nSo I think it's really a losing proposition. One of the things that I see most engineering organisations that move towards continuous delivery, move towards DevOps, move towards delivering faster is that they observe a roll-forwards mentality rather than enabling things like rollback, which are just really not viable anymore. \n\nMicrosoft has made a lot of changes over the last few years. Ten years ago, Microsoft was a waterfall organisation. No matter how much you saw tools for maybe doing agile things, they were a waterfall organisation. They were deploying Visual Studio and TFS every two years. That's the particular department that I'm going to talk about today instead of Microsoft. Times have changed. They were deploying every two years; they were in a service pack halfway, and that's no longer viable. It's no longer okay to respond to feedback from your customers on those types of timeframes. \n\nA big example of that has been Windows with their Windows 8, a massive failure of understanding the customers' needs. There was a big disconnect and a multi-billion dollar loss therefore, basically not having tighter feedback loops. So it is important; it is something that you will need to do with your customers. Shorten those feedback loops, understand their needs a little bit better, and get things out the door. \n\nEven the Windows team, who deploy to nearly a billion machines worldwide and have four and a half thousand software engineers working on their product, are now doing continuous delivery to production. We get it; you get it as the general public. Every 30 days, it used to be Patch Tuesday. Now it's a whole new version of Windows Tuesday and has new features, new capabilities on that continuous cadence so they can get feedback. \n\nThey do have short releases as well; they're not just deploying once a month. I have two machines here that are on the Windows Insider group, which I get weekly deployments as long as everything looks good. If you're inside of Microsoft and on a corporate build machine, which the CEO is, then you get daily builds from the dev branch of Windows. \n\nSo it's important; quality is important. They've actually gone from maybe deploying once or twice a year across even all of their products, going to production once or twice a year, to something that looks a little bit more staggering and over a hundred and sixty-three thousand deployments per day. That's to any environment, but that's an incredible figure across the organisation, and that's with ninety-six thousand engineers. So there's more than one deployment per day per engineer inside of Microsoft now. \n\nTwo million git commits per month, five hundred million text executions per day. This is a lot of data, a lot of things going on. In order to support that, the team that builds the product, Microsoft uses a product called Azure DevOps, which used to be called TFS. It's also been called Visual Studio Online; it's also been called TFS services. What else has had a bit of an identity crisis over the years? \n\nBut the Azure DevOps platform has been Microsoft's platform of choice. It was built in order to support their transition towards this new way of working, and almost everybody inside of Microsoft is now using it to manage their work and deploy. Some of them have moved over onto GitHub for source control, but for work item tracking, for automated builds, the majority of folks inside of Microsoft, my understanding is they're using Azure DevOps. \n\nSo it was built with that in mind, with scale in mind, with things that large in mind. This latest from Donovan Brown's presentation has fairly big numbers. In order to support this, creating the platform that Microsoft and many other people around the world use to manage their engineering efforts, the Azure DevOps team had to create this live site culture inside of their organisation. \n\nOne of the things that they really focus on is, \"You code it, you build it, you deploy it, you run it.\" If you're going to be the one that writes the code, you should be the one that gets up at three o'clock in the morning because the thing that you've written is not working properly. There are some caveats to that; we'll talk about as we go through. But ultimately, the software engineers, the people writing the code, need to feel the pain of any sort of problems with either deployment or supporting the product or managing it online, or security, or all of the things that would be a problem. \n\nSo they don't necessarily have other departments that manage these things. No, this is one of the big transitions between other big... yeah, transitions, the right word, but the big flip for organisations is that change from being a predominantly departmental-based organisation towards being cross-functional delivery teams who are able to take an idea and get it all the way to production without needing to be dependent upon external teams. \n\nThat's really important for that transition towards a greater degree of agility because as soon as you're dependent upon somebody else outside of your organisation that has different motivations, different priorities, then you're not going to be able to get things done very quickly because at some point you're going to have to wait for them. We have to remove those wait times, so we bring rather than how we're going out to an external department, we bring that department into the team. \n\nSo there's representation on the team of security, of legal, of obviously coding, engineering, test, operations, and all of those ideas, those hats, those roles are represented inside of the team. You need to automate; you need to learn and share with each other all the time. We need to be getting better at what we do constantly, and we need a lot of data to help us figure out what's going on. \n\nAnybody that manages our live site will know that live comes first. No matter what you're doing, if production is down, you're going to have to drop everything you're doing and go figure that out. So how do we make sure that we support that in a way of organising people? This is about how the Azure DevOps team have managed to do that. \n\nThis is an example, a story of a way that you can do that. Don't just hate the way they're doing things; implement it yourself. You want to see what works for you in your organisation, within your organisational constraints, within your application and platform constraints as well. This particular team is building our web application, but there are other teams inside of Microsoft that use a similar process in order to manage desktop as well as Windows and other types of application models. \n\nSo you need to create a culture within which this works. Live site is about bringing the right people together from both app and platforms so that we can continue and keep our system up to have the lovely things that we as users of the system really want. But why is it so important to keep everything up? \n\nThere are great examples of how those things have been difficult for organisations in the past. Visual Studio Online, which was one of the names for Azure DevOps, has had outages. It's not possible for a system not to have outages; it's about how you deal with them when they happen. Visual Studio Online has been down; Amazon has been down. There's a start-up with 25 million in funding in crisis because an employee deleted the wrong files. These things happen. \n\nWe want to do our best to prevent those things from happening. We want to do our best to respond to those things when they do happen, and we want to do our best to make sure that things that do happen don't continue to happen. That's how we build trust with our customers because really, we've got to be able to deploy new features. \n\nThat's the ultimate battle between engineering and operations, that idea of engineering is measured by the number of fantastic features they get into production, but operations is measured by uptime. Generally, those things are antagonistic. If you want to keep it up, you don't deploy new features. If you want to deploy new features, you're not going to be able to keep it up. \n\nSo there's a fight there, but when we bring those two groups together, they can have a real conversation about how they can do both of those things and still be able to delight their customers, have high levels of uptime, have fantastic features, and be able to move forward. That's really what I want to talk about as we go through this today. \n\nSo first thing I want to talk about is transparency. How does this team build transparency with their customers? I'm going to kind of split trying to split between good practices, complementary practices that you can use with your scrum team or your Kanban team as part of your agile practices, as well as what this team specifically has done. \n\nIt's why I'm going to show some of the details and governance of the work that they've done around that. We need transparency to build trust with our customers. We need to be understanding of things when they happen, as well as doing our best to understand how and why they happened so that we can figure out what to do about it. \n\nCustomers are not happy if you just tell them the system was down, we rebooted the server, and now it's back up again. Why was it down? Is it going to go down again? We no longer have a level of confidence in your ability to maintain that system if you don't even know why there's a problem or why it's going down. \n\nSo we need to understand that and build transparency to build trust with our customers. This is an example of some of the output you will get from the Azure DevOps team. You'll be able to go find on the Visual Studio... well, this is from the Visual Studio Team Services blog. It's the same blog; it's just been moved around a little bit. But it's the Azure DevOps blog, and they do a full post-mortem, and they publish all of the data. \n\nThey publish it to show, and here, if you maybe... I can... well, that's not what I wanted to do. I wanted to zoom in. There was my magnifying glass. There we go. They show the data when things went bad, what they've investigated in order to understand what went bad, how they've managed or tried to mitigate it, the actions they took, and the timeline that that went through. \n\nSo it's a really powerful story there, and they also publish an idea of what they're going to go do to fix it as well. So if I zoom it... there we go. They're going to make a bunch of commitments to their customers to improve the service to make sure that that type of problem, those outages, don't happen again. For every outage of Azure DevOps, big and small, you will find these types of posts and this type of data. \n\nThe smaller the outage, the less impact the outage, obviously, the less effort you want to spend in some of these areas. But when the whole system's down, you're going to see a post, and that looks like this with a bunch of data in it. The leadership of the Azure DevOps team is adamant that they want to create that transparency. \n\nThis is a post from a reply that Brian Harry, who was the product unit manager for that department, really instigated those ideas of moving to the cloud and empowered that part of the organisation to make the changes that resulted in them becoming an agile organisation, delivering to production at least every three weeks. You can see the type of transparency that he's trying to create. He's saying, \"You know, we're not going to be successful 100% of the time. That's just reality. We have to accept reality. There's no such thing as a hundred percent uptime; it's just not possible, no matter what folks say. You have to have downtime for maintenance. \n\nWe have to have a little bit of wiggle room; you can't be 100 percent up. But how do we make sure that we minimise the amount of downtime that we have? Well, there's lots of things that we can do. The first is to communicate, letting people know that there's some sort of problem, that there's an issue. This is an application that the Azure DevOps team have created. In 2013, it was just a spreadsheet, and it was 45 minutes was their time to notify their customers. \n\nIn 2017, that's down to 15 minutes. Within 15 minutes of that red button getting pushed, understanding that there's a problem, there's something up on the status page, there's something up on the blog. For the internal Microsoft customers and the key stakeholders, there are emails going out to the people that need to know. I have a couple of customers who are in the top 20 largest customers on Azure DevOps, and they get notifications almost before they know that there's a problem, which is really powerful for them as well to then be able to have the real discussions they need inside of their organisation. \n\nYes, we're aware of the problem; Microsoft's working to fix it. Those things build trust. If we know, we understand, we're aware, then we can do that. In order to preempt this, you've got the... I remember one of my good friends at Microsoft, when they first moved to the cloud, said one of the reasons that he made his first got onto Twitter first was when they moved to the cloud because he found out from people on Twitter that the system was down before his engineering team knew that the system was down. \n\nAs software engineers, being that the customers are software engineers as well, we are particularly a whiny and complaining group of people. We are happy to point the finger when something's not working properly, and he found out first there. So how do you create an environment within which you know first, not your customers? You don't want your customers to know before you do that there's a problem with the system. For that, we need telemetry; we need data, and we need to understand that data in order to create the right alerts to know what we're supposed to do and when that problem arises. \n\nIs that a problem we need to care about? Is that a problem that might go away? Do we just need to saunter up to that problem, or do we need to run up to that problem with everybody that we need? Figuring out what we can do to prevent incidents by looking at the data and seeing when things might be... you know, \"Okay, that was a bit... that data did not look good. If we'd had more users on the system at that point in time, we would have had a problem.\" What can we do to make sure that next time, whatever that data is that spikes or drops in the way that it did, how do we make sure that we get that moving? \n\nIncident prevention and continuous improvement: how do we continually go around those loops identifying the root causes and figuring it out? The Azure DevOps team have created their own telemetry pipeline so that they can understand that data and do something with it. They have implemented it in a lot of the work since their servers are deployed to Azure. They can take advantage of some of that Azure infrastructure that's there for everybody anyway. They don't have any special powers in Azure; Azure treats them like customers as well, albeit pretty big customers and somebody internal that has everybody's email address and can go look them up, but that's a different matter. \n\nHaving monitoring agents installed on all of your servers and having a set of metrics that can help you understand what that looks like and then feed that all into a big data platform. They have built something called Cosmos, where they feed all of that data in, and then they're able to use a query platform that they built, Koku Store, that allows them to analyse that data and look for trends, look for things that are worrying. \n\nYou can have monitors, and you can have alerts; that's reactive. The alert triggers, you had a notification, you're going to go do something about it. But also, is there trends that you can look for in the data analysis to see when something's going to happen, even maybe before it does? They have access to Azure Diagnostics; they use Application Insights, which is built on top of Azure, and it allows you to, on any platform, and they have APIs for all the platforms. It's just a set of services that collect and analyse metrics, and then they feed all of that data into an Azure data lake. \n\nA lot of these systems, the features were built out as part of a lot of teams at Microsoft moving towards this model. A very powerful platform; I use it myself on my tools as well. Something that they really realised was that they have to gather everything. There's no data that is unimportant. Are you going to gather data about your SLAs? You've got to gather data about alerts, your DevOps pipelines, your experiments that are going on. You're going to collect data about your network performance, your platform, all of the things that are going on, even then to trace telemetry power flux. Everything is going to be collected in that way. \n\nAt the moment, or at least at the point in time where I got access to an understanding of the volume of data they were collecting, about seven terabytes of data per day on average, with people using the system and getting an understanding of all of that data: KPIs, job history, pair of characters, trace activity logs, platform and network capabilities. In order to do that, you really have to understand the customer experience telemetry. \n\nSo a user accesses the system; it goes through a bunch of tiers. It potentially accesses the database and then serves as a result back to the customer. All of your interactivity with many of these systems is user-activated, and when it's user-activated, you really have to understand the flow. One of the things that the Azure DevOps team do is they have an IDE that is generated for every call into the system that they pass all the way through down to SQL Server, and they collect performance and trace across the board. \n\nThere's actually a front-end flag that you can turn on, and I'll maybe try and look it up or speak to one of the teams to see where you turn that on again. I can never remember. Oh, underscore diagnostics on. Let's see if I can figure it out. \n\nLet me just switch to... I have a lot of Azure DevOps that I have access to, a lot of different platforms and systems, so I'm just going to bring that up. It is just taking its time to load, so maybe I stick it over here and do it. Will you? That once it's loaded? Oh no, I have to hit switch at the bottom. Then you'll love it when you've got a tall screen and the button's way at the bottom. That's a user experience. \n\nSo they're able to collect that telemetry, that pair of telemetry across their entire organisation. So let me go into my migration tools setup. Let's see if I can remember how to do this. I'm pretty sure it's underscore... oh, is it underscore diagnostics? It is. That's what happens when you've been working with the team for too long. \n\nSo if I turn on diagnostics and perf bar, and you can do this on any of your accounts as well, I just want to show you what it is, the kind of capabilities that they're collecting. You can see at the bottom of the screen, it's very small. Can I pop a mic? Can I pop a magnifying glass? There we go. \n\nThey are collecting the trace and time and things that have happened throughout the entire system, all the way through every web service down to every database call, every plugin, so that you can go analyse that. If you're one of the developers on this team, you want as much data as possible to go figure that out. You can see at the bottom there's actually a little smiley face there. I don't know if you can see that all the way down there. A little smiley face means it met the KPI for how long pages are supposed to load. If you have a smiley face, if you have a sad face, things are not going so well, and it says all is good; all the checks are working out. \n\nThat's one of the ways that the team are able to leverage that. For some reason, I have lost all of the buttons on my office, so let me just close that and reopen it so I can get back showing you. There we go; I've got a pack. Don't you love it when you find where we were about there? \n\nIt's like, \"Ah!\" So they have this ability to correlate everything across the board, end to end, and have that set up and working. We can see all the dependencies; they can get all of the telemetry data and set all of that up. It means that they can check, have metrics and trend analysis to see what's going on. When something goes below the trend that they want, they can dive in and see exactly when things happen, what the problem was, how many people were affected, and be able to take to get that pair of access to that extra information that they have. \n\nI'm getting that extended down all the way to their dependencies. If they are dependent upon the SQL Server and the SQL services, then they're able to get all of that as well and see the dependency activities. The amount of data that they collect is unbelievable because they need to keep a system up with all of the software engineers that are users of this system, checking in code. Think about that; if Azure DevOps goes down, all of the millions of people that use it and all of the companies that have their software engineers reliant upon it, they're all down; they're all unavailable. It's not a good place to be. \n\nYou need to be able to go deep on the telemetry and really understand what's going on at every level. They do have activity logs schema. I'm just going to go through this very quickly. I am happy to provide the slides out to anybody who wants to give me a shout; I will do that. But they collect all of their telemetry across the board, really understand, and that tool that I just showed... oh, there we go; there's the URL. I did not even know it was in here, but they surfaced that data to the developers so that they can see it and get access to it. \n\nThey also aggregate it across the entire service, so they get an insight as to what's going on holistically, but also per customer as well. If you've got everybody at a particular customer that's down, then we need to go deal with that. It's not okay to say we have 5,000 customers and one customer is down, so that's not so bad. But one customer is down; everybody at that one customer cannot do the job that they do on the service. \n\nYou need to make sure that you can see that as well and see it in real-time so that you can do something about it and get a true understanding of what's going on. I think that's super-duper important. \n\nOkay, and that idea that customers are a bag of sand, I love that one. Every grain of sand is a customer, and every grain is important. If somebody is having a problem, they're going to tell ten of their friends that they have a problem. You can see here they're doing an impact threshold to understand when do we need to have a bigger conversation when we're in breach of SLA so that we can go do something about it. \n\nBut also, the team, I know that they go back over this data to see even the smaller blips when people had problems or performance problems. Let's go talk to the customer, figure out what the problem was, and what can we do to go and fix that up. You've got to find a balance between the amount of noise, the amount of data you get, and having the alerts to the developers. You've got to be able to push new features at the same time. \n\nIf everybody's interrupted all the time, so trying to minimise those alerts so that they're only the things that are important. You'll know if you get an email that is... you get a hundred emails from one service, you're going to either turn that service off, turn the emails off, or create a rule and shove them in a folder somewhere where nobody will ever see them. \n\nSo that's really important, balancing that noise to signal. Then you also need to be able to respond as quickly as possible to the problems that come up. You can't have the development team chucking that code over the wall, over the fence, to the software engineer, the operations team, because what they offer up, what's going to happen is the operations team are going to just bolt on some type of monitoring that they can do. \n\nWhereas if engineering, the dev team, is building out the monitoring, they are able to add deep holistic monitoring into their application and have a much better experience for the engineers out trying to figure out the problem. Operations who are trying to support and maintain it. So they built around this idea of SRE, bringing DevOps and SRE together. \n\nThey used to have developers, coders, testers, and operations as completely separate teams. Now they've got a combined engineering team, which has feature team engineers, which are your traditional coders and testers. That's bringing that group together, and that's your feature team engineers. But also, on the same team, they have live site engineers. \n\nThey have two pieces of that story. I've got it here in blue and purple. They have a feature team live site engineer, which is a rotating role for the feature team engineers. So at least one of the, if not two, of the feature team engineers for a sprint will be designated as a feature team live site engineer. That live site engineer is not going to be looking at value work, i.e., your traditional sprint backlog. They are solely going to be looking at work to help improve the stability of the platform, maintain and manage that. \n\nThey also have access to site reliability engineers who are dedicated site reliability engineering folks and that have deep expertise in platform and monitoring to leverage. They're all part of the same team. You have a combined engineering team that includes the rotating roles as well as the dedicated live site SRE. Site reliability engineering is an important concept to create a world in which we can get very quick delivery to a platform that's up as much as possible. \n\nWe want to automate as much as possible, but there are always going to be things that we have to do. You might have some kind of compliance, security; those are all things that we have to do. This is the pyramid of things we must do, up to the most valuable things at the top. Product contributions are at the top, and a live site engineer, that feature site live site engineer and site reliability engineer are going to be working together and doing stuff at the bottom of this pyramid. \n\nThen flowing, as those things are complete, up to the top of the pyramid. The last thing they do is product contributions when everything else is complete. That's a powerful story because they have to be able to respond to allowance. Those are the folks they assign feature live site engineers. They are the ones that get woken up at 3 o'clock in the morning to go deal with that problem. \n\nThe Azure DevOps team have built, and I don't know what you call it, an alerting system and auto-routing system with different ways those alerts can be triggered. Social, human, that's a support call alerting and customer support, and it goes into a rules engine and then allocates that to the combined engineering team that is accountable for that part of the system, that part of the code. \n\nThen they will do an impact assessment and decide what they want to do, how they're going to respond to this problem. Are they going to do a generic business errors investigation? They'll put it on the backlog; we'll get to it in the morning when everybody wakes up. Or are we going to have to wake a bunch of people up and do the 24/7 live incident? \n\nWhen the live incident happens, they're going to create a bridge, an incident bridge, with all the people on it that they need to go figure that out. The feature team live site engineer is on there; they're the allocated person on the engineering team, as well as the SREs. But maybe they need to bring in additional partners. If SQL Server is operating slow, then maybe they have to bring in somebody from Azure. Executive leadership might be brought in; there may be an incident manager. There are all sorts of things that are triggered in order to make those things happen, get everybody together, and get a resolution to the problem. \n\nThat idea of having those live site teams inside of a software engineering team, they have slightly bigger teams than you would traditionally see for scrum teams. Scrum teams are traditionally between three and nine. They do between ten and twelve people. They have two people on the team that is the live site team, so they have a feature team which are looking at the sprint backlog and dealing with those issues, and then the live site team only deals with live site issues and interruptions. \n\nSo they're shielding the team from those potential disruptions while still working on things that would add value to the product but from the perspective of live site issues. So mitigating things for future live site issues. That group has a rotating group; it will be a different group each sprint. \n\nSo again, they have priorities. If there's a live site incident, that's their highest priority. If there is no live site incident, then they're going to be looking at past live site mitigation tasks. So that could be things that enable us to get better at live site, or it could be things that we've identified as being a problem that really end up in that category of technical debt. Things that are not automated, things that are not quite in a way they need to be, and do that. \n\nThen they're going to look at improvements in monitoring, telemetry, and alerts way before they look at adding any new features. That is their focus. The team that works on this, they do three-week sprints. During sprint, for example, during sprint 1:24, the deployment is ongoing for sprint 123. It takes a long time to do a deployment on a large system like this. It takes more than a few days; it takes more than a week, to be honest, to get that deployed. \n\nThe live site engineers are working alongside the feature team, but they're kind of working at loggerheads there. They also need to be able to manage things at scale, and the only way to do that is to automate. We need to automate everything; we need to automate as much as possible. People make mistakes; that's one of the reasons to automate. People need to go to sleep, and people forget things. \n\nThink about that engineering team at the start for the Knight Capital Group that neglected to deploy to one of the servers. People forget things; people make mistakes. Automated processes can tell us when they fail, when they don't get everything done. So being able to troubleshoot those ideas, if we're automating, we can have alerts that find things much quicker and realise that something's wrong. \n\nOnce you start mitigating your problems, you might have some manual mitigations that you have to do. That would be the first thing that might happen. But if something like that happens often and you have the same mitigation task, you can get it to be automating the mitigation as well. Have the automated engine let that switch and then notify the engineers that there's a problem they need to go fix. \n\nBut you've already mitigated the problem. That doesn't mean we don't have work to do. Because we're monitoring the health all the time, we're understanding when those mitigating tasks have been activated and how do we get better at not having those problems in the first place? That's really important. \n\nGetting to the root cause is important. Doing some kind of post-mortem to really understand what can be done to make our product better, to improve quality so that we don't have those issues in the future. Each team, each feature team, has their own goals and measures and repair times that they can monitor and see what's happening and be able to respond to change more quickly. \n\nHow do we know when the team is being good at responding to change? They should be repairing problems that come up quickly; they should be having less problems over time. These are indications that we can look at to see. \n\nSo kind of in conclusion, we need quality and transparency to build customer trust. We need to have full transparency so the customers see everything that's going on. We taught them about the problems; we helped figure out how to make them better, and we make sure everybody's involved. We collect as much telemetry as possible so that we can have better insights into what's going on. \n\nWe need to organise around responding more quickly. So that's with alerts, with coal chains, with understanding who do we have to go deal with, who do we have to go wake up. The SREs and engineering team, live site team inside of the engineering team is what allows for that for this group. Automate everything, as far as I'm concerned. If it's not automated, it's technical debt. That's something you need to go work on. You shouldn't have anything that is not automated. \n\nThen you have to get as close to the root cause as possible in order to continuously improve and try and figure out what those things are. Just to... and there are some good... well, I'll make myself smaller. There we go. There are some good articles, videos there on SRE at Microsoft, how the different teams do it and what they mean by that. \n\nIf I... how do I make myself disappear? Hey, what? I'll move over here. There we go. So you get a picture of that and go to that URL, and you will be able to download this presentation. Please feel free to get in touch with me anytime you want to. I am on Microsoft Teams on that URL. I'm on Twitter, and you can WhatsApp me and find more information on my blog. I'm happy to share presentations; all you have to do is ask. \n\nOkay, thank you very much for listening, and I hope you're able to come to one of our scrum classes. We deliver a number of scrum data classes, and we are delivering all of our courses and material as live virtual classrooms at the moment. So please go take a look at nkdagility.com. \n\nOkay, thank you very much. Like and subscribe."
  },
  {
    "id": "5bgfme-Pspw",
    "title": "Momentum",
    "description": "Discover the power of momentum in product development and organisational culture with Martin Hinshelwood. Boost your agile team's performance today! #agile #scrum",
    "captions": "Momentum is movement. Right? You're moving in a particular direction, and you have enough stuff moving in that direction that it's difficult to stop. Right? That, for me, is momentum. Like a ship. When a ship puts on the brakes, it takes 10 miles to stop. Right? \n\nSo, momentum, especially in product delivery, does... does everybody who's working with you understand the direction that you're going? So that they're going in that direction, and they're going to pull other people along with them who don't necessarily understand as well as some people do. \n\nSo, if you've got enough people moving in that direction in order to pull in the rest of the people and folks that you need. And this is true for, I'm building a product or I'm changing an organisation or..."
  },
  {
    "id": "5EryGepZu8o",
    "title": "If you could teach just one thing about Scrum, what would it be?",
    "description": "Unlock Scrum's true potential! Discover how empiricism and complexity empower teams and drive success in this insightful video. #Scrum #Agile",
    "captions": "If you could teach just one thing about Scrum, what would it be? I think it wouldn't be Scrum at all; that would be the first principles. Right? It would be empiricism and complexity. That's what I would teach, and in fact, that's probably what I spend the majority of my time in the EPS. When I'm just talking to people, engaging with leadership, that's what I spend the majority of my time talking about: empiricism and complexity.\n\nIf you have those fundamental ideas of empiricism and complexity, the understanding, the realisation that no matter what way you choose to do stuff, it might not always work. It might have different outcomes depending on the current circumstances, the prevailing wind, right? Then you realise why people realise why things don't always work out for them. They realise why things are different. They realise why things are difficult. They realise why you don't always get a successful Sprint, no matter how hard you try. You realise why you can't normalise your number of story points delivered per Sprint. You realise why story points become ultimately ineffective.\n\nBeyond the team, you realise why for a lot of those things, people and teams can take those ideas and run with them themselves. I don't believe that Scrum should be forced upon teams. I think they should choose themselves how they work, and if they want to take and use principles of Scrum, then I'm here to help them. But if you want to use other stuff, I'll help them with that too. They should be making those choices with a clear and concise understanding of complexity and empiricism so that they can ultimately make more of the right choices and less of the wrong ones.\n\nI think that's hard, and I think that's missing in a lot of the—I don't know a better word than boilerplate—teachings of the mechanisms in Scrum. Doing mechanical Scrum is not useful at all. People have to understand why each of those things in Scrum is in place, why it provides them with value, why taking it away—what's the result of taking it away? What happens? What doesn't happen? And why we want to keep those things. I think that's so important.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "5gGBdfAPot0",
    "title": "PSOP In 10m",
    "description": "Discover the essentials of PSOP in just 10 minutes! This quick guide breaks down key concepts and insights for a clear understanding.",
    "captions": ""
  },
  {
    "id": "5H9rOGhTB88",
    "title": "Empowering Teams to Tailor Their Processes: A Path to True Agility",
    "description": "Empower your teams to adapt processes for greater value! Discover how to break down silos and foster innovation in this Agile reality check.",
    "captions": "Another key question to ask leadership about their way of working is if their teams are empowered to change their processes based on what they learn. This is one of those critical things that, in order for a group of people to work as effectively as possible, that doesn't mean they work like another team working on the same product or another team working on a different product. It means that every team, although we're going to perhaps follow some general guidelines about how we want to do business with our customer, perhaps that represents the cadence of delivery to our customer, we need teams to be empowered to change their process based on what they learn. \n\nBecause just because you've decided that something needs to be a certain way, doesn't mean that that adds value to this team. It might actually be waste for Team A while it is value for Team B. We need to recognize that we want to maximize the amount of value that teams are able to create, which means we need to minimize any waste. A great example of that is I used to work for an organization; I was an employee of Merl Lynch back in the day. Because they had a trading desk software within the body of their organization, there were certain processes that had to be in place for all software in the organization, even if it had nothing to do with this trading desk bit. \n\nSo the trading desk defined those processes, and everybody had to follow them. I was building a small CRM system for a group of about 20 sales folks who were making calls, calling people up selling the mortgages. What they wanted was a way to tapy interface, pop the call, running it on my desktop or my laptop, and I'm able to click, see the phone numbers, call them up, see notes, that kind of just a simple CRM system. In order to deliver that, I had a whole bunch of constraints that I had to work within. One was that I had to have the architecture signed off before I started, and any changes to the architecture needed to be signed off as well. \n\nSo if you think about it, as you're building the product, you can't go, \"Oh, actually that architecture I thought I was going to use is wrong; I need to do something different.\" It all has to go through an architectural change review board, right? Central environment, and it was very time-consuming. They didn't get back to you within a few days; they got back to you within a few weeks or a few months because they maybe only sat once over a period or they had a backlog of work. \n\nThat's one thing for a small system that doesn't have a lot of consequence or any consequence for the rest of the business and only affects a small number of people. That's a little bit of overkill. I also had to have all of the systems that I used, even though they weren't publicly facing, pent tested. So we had to pay an external company about $20,000 per pentest to pentest our system, even though it was internal and the data was of no consequence. It's not the trading desk system; it's a small data set for a small group of people. Yes, it has some PPI, but from a risk value factor, we probably could have done a lot less security overture and still provided on the compliance for the PPI external PPI compliance site. \n\nSo that was a bunch of waste that we couldn't change. When I had to deploy to an environment, I had to have three servers: front end, middle tier, back end. The database had to run on one server; I had to have a separate server for the middle tier, the API, so it had to have APIs that were available, and then the front end had to run on a separate machine. You had to have those three servers as part of that mix, so you had to pay for them. It worked out about $33,000 per month for those three. \n\nThen you had to have a dev environment, a test environment, a UAT environment, and a production environment. That was $3,000 per environment, and I had to have four environments for a little system that was just used by 20 people in a call centre. Total overkill, total waste for what it was. Those were processes that were imposed on us from the rest of the business. Even worse, we were doing continuous delivery, and in the organization, if you didn't submit a change request for a deployment of your product more than, I think it was, six weeks in advance, it was considered an emergency, and you got a black mark against your name. \n\nWe were doing daily continuous deliveries on a number of different products that we were creating, so we got a lot of black marks. In fact, we got the most black marks of any department. I think the combined black marks of every other department in the whole organization because we were doing continuous delivery, because we were starting to use modern engineering practices, we were punished within the organization because that's not the way we do things here. \n\nSo, are your teams empowered to change their processes based on what they learn so they can make everybody's lives better and maximize the value that you deliver to your customers? If your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then I probably wouldn't consider that you're already in the agile space. You're not already agile; you might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as \"yes, we do this; this is how things work here,\" then we're still lacking. \n\nWe're still trying; we're still working towards being agile. Now, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, \"Well, you guys suck; you're not agile because you're not doing this.\" That's not how we work towards success. \n\nBut I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organization. How many of these six questions are you able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being agile BS?"
  },
  {
    "id": "5IBKxYLA494",
    "title": "Scrum With Azure DevOps!",
    "description": "Transform your Scrum practices with Azure DevOps! Discover setup tips, myth-busting, and tools to boost your team's efficiency. Join the journey! 🌟🛠️",
    "captions": "As your DevOps was built for agile teams by agile teams, there are many ways you can use it to support your agile practices. Here I'll show you how to use Azure DevOps to support your Scrum process from the perspective of Scrum.org and the teams at Microsoft that created it. The focus will be on using the Scrum framework coupled with value-focused, hypothesis-driven, flow-based practices.\n\nHi, I'm Martin Henwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nWould it surprise you that there are no metrics in the Scrum Guide? Would it further surprise you if there were no user stories, story points, planning poker, or burndown charts that were part of Scrum? These are and always were optional practices that many people found value in their way of working, but that you don't have to have. Just because you use a tool or practice in a previous context doesn't mean that it will fit a future context. The practices that you use and how you use a tool to support your team's practices and behaviours will add or detract from achieving the outcome and impact that you're trying to achieve. Scrum is just a container for other practices, which can be helpful or unhelpful.\n\nI'm generally pedantic when teaching and pragmatic when implementing, so everything you see here would be guidance based on the common cause, not just rules to follow, with some pragmatism for Azure DevOps' own idioms. It's important to realise that everyone and every team will have dumb ideas that sound good at the start. The most effective teams are the ones that are able to let go of an idea when they find that the evidence does not support it.\n\nSo let's take a look at how we can use Azure DevOps within the context of professional Scrum for teams that build software products. In order to understand how I've got this set up in Azure DevOps, we're going to take a look at how Azure DevOps constructs what it is we're going to be looking at. In Azure DevOps, you have an organisation; you can see my list of organisations on the left-hand side here, and inside of each organisation, you have a set of projects. \n\nWhen you create a new project, you are able to select what process to use. Now I've got a bunch of custom processes here to select from. I've created one based on the Scrum Guide, which I'm going to show you a project that's created with that one. The way that's constructed, you will all be able to see this even if you can't edit it, but if you open the organisational settings on the bottom left and go to process, you'll then see all of the processes that are available. \n\nOut of the box, there are core processes of Basic, Agile, Scrum, and CMMI. Those ones are locked; you can't edit them, but you can create inherited processes. I've created a process based on it, and this one here I'm actually going to make the default. That should be set as the default process; it's my custom process that I've created based on the Scrum Guide. \n\nWhat I've done is I have disabled Epic and Feature. I don't want those things; I don't want any hierarchy in my backlog. A product backlog is a flat list of things to be done, and Epics and Features and User Stories are just states of a product backlog item. They're things that a product backlog item can be. \n\nIf you check on the backlog levels, I can't remove Epics and Features on the backlog levels. I'll show you how I've disabled them, but I've disabled the work items so they can't be created. On here, at the same backlog level, I've got backlog product backlog item, and I also have Bug, which I've put at that level as well. I know that you'll see there somewhere else you set that. I have tasks too if teams want to use tasks, but in general, it's whatever they want to do. \n\nEach of these backlog items, if I go back to the work items and I open up the actual work item, has a set of fields. I've added one custom field; you'll see that in a moment. I've added one custom state and removed an existing state. I don't want it to say committed; I don't think that reflects the new Scrum Guide. I know it used to say committed in it, and it's a little thing, but \"In Progress\" is a much better state. \n\nBecause I have Bugs and Product Backlog Items at the same level, I've also made exactly the same change for Bugs as well so that they're going to be the same at the same level. That's the custom process that I've created. I'm going to click on my Scrum demo and open up my project. \n\nWhat you will most likely be concerned about, if you're an engineer, is whether you're going to have access to all of these other things as well. But for most people that are not engineers, we're going to be talking about boards, so I'm just going to click on that and open boards. By default, it's just going to show me all the work items, and you can see when I click \"New Work Item,\" I have Bug, Impediment, Product Backlog Item, Risk, Task, and Test Case. Those are just the basic work items. I've removed Feature and Epic.\n\nIn Azure DevOps, there's a bunch of tools built on top of the basic work item tracking system. So what we're going to take a look at is how we can do some of the things that we would normally expect to do as a Scrum team within the context of Azure DevOps. \n\nFirst off, there are some logistics that we want to set up before we get started. This is where this is something that maybe your admin will do. I prefer that everybody on the team has permission to do the things that I'm going to show you, but in the context of the project, there are two things that you definitely want to configure: one's area path and one's iteration path. These are very confusing, brand new, possibly terminologies, but area path is the breakdown of teams and what that looks like, and iteration path is a time-based breakdown.\n\nI'm going to open project settings; just going to pop open there in the top right. So we're going to the project settings, and you can see the name of the process, remember Scrum 2020 there as well. On here, on the left-hand side, there's project configuration, so I'm going to go into project configuration first. You can see that my current Sprint setup, which may or may not be a good idea, but what I have is a season-based model set up here. \n\nI have two halves to the year; I have the first half and the second half of the year, and inside of that half, I've got the 11 Sprints that make up that half. I've just started adding a couple of Sprints in here, and you'll see that each of these Sprints has a start and an end date. That's a subset of this higher-level item. I've set it up like that; it might be a bad idea, but that's what I've done. \n\nI then have three teams; well, technically I have four teams. I have a Kanban team, which is the area path, and this is the team that it's assigned to. I'll show you where that happens in a second. So I've got Scrum Team 1 and Scrum Team 2 and Kanban Team 1, and then I've got Scrum demo, which is the top level of this setup. \n\nThat's my areas and iterations that I have set up. I then go to my team configuration just to validate that things are all in the right place. This is where you can see the Epics, Features, and Backlog Items. By default, when you create a team, it's Backlog Items and Features. I'm going to take that Features out, and now that will not be shown for this Scrum team at all. \n\nDown the bottom here, you can see how I'm going to work with Bugs. I always pick Bugs to be managed with requirements. I have a blog post called the \"Bug as a Task Anti-Pattern\" blog post that I'll put in the comments that you should go take a look at and make a decision. I've decided that I want Bugs managed with requirements. You can also choose Bugs to be managed with tasks, and you can also choose we're not going to manage Bugs on the backlog or boards at all; we're going to keep them separate. \n\nI don't recommend that either; Bugs are just backlog items that we need to work with and deliver and do stuff with. But in this context, you can see at the top here I've got the context of my team, and what I've got is I've got iterations that are assigned to this team. This is irrespective of the iterations that we've created; this is which ones are assigned to this team. \n\nI've gone ahead and assigned iterations 1 to 10 to this team, and you can see the dates don't overlap there. If I click on areas, you'll see I have one area assigned to this team; it's the default area, and it's for Scrum Team 2, which matches the team name. So that's very straightforward and very simple in there. \n\nIf I were to switch to the kind of parent team that is looking down across everything, I have the main area path, which is the same as the project name here, and I've got sub-areas included. This team will be able to see all of the sub-areas, and in the iterations, instead of adding the individual Sprints, because this is like the higher-level overview, I'm adding the seasons. \n\nIf we're planning the seasons, we go to this level; if we're planning the Sprints, we go to the lower level. Now you have an understanding of hopefully where to go look to find the configurations, where to set up some of the things that will manage the way your team looks. Each team has its own area inside of this project, and you can control what columns are available on your backlog, what columns are available on your boards, how things are laid out per team. \n\nThe states on the work items are the same across everybody, so if we were doing reporting across a bunch of Scrum teams, we would use the state-based transition. If we're doing reporting on one Scrum team, we would just use the column-based transition. \n\nI'm going to just go to the backlog first for this team, which team I am Scrum Team 2. Perfect, that's the one I want to be looking at. The first thing that we're probably going to look at is refinement. How do we do refinement in Azure DevOps? Well, refinement is all of the work that we do against the product backlog items as opposed to the in-Sprint work, which is against the product itself, right? That results in the increment. \n\nEverybody on the team, the product owner, the developers, perhaps other people involved in this story, are going to be doing both of those things all of the time. Some people will spend more time in refinement and less time in delivery; some teams will spend more time in delivery and less time in refinement, and perhaps it will change over time. That's just the way it is. \n\nDuring refinement, you're going to be looking at these backlog items; you're going to be understanding what's coming up next, right? How far into the future are you looking? You might do some long-term planning; you might do some dependency management around these items, and your main friend here is the tagging system. This is your main friend; we want to be able to manage this backlog by filtering the items. \n\nFiltering is hugely important because it allows us to group items that might not be together in importance but are together in another context, another type of slicing. For example, in here, I have a bunch of tags already added to these items, so I have a bunch of items that are associated with a particular product that we're integrating in. These are integration points. \n\nI have some different categorizations of work that might have more importance for certain groups of people in here as well, so they can filter by their slice. I have some work in here that is to do with a particular feature that we might be working on, and I have some external stakeholders to our team. We've got some external stakeholders to our team, and some of them are running projects that go across the entire organisation and a bunch of different products. Our product might have some work in it that we're doing to support them with our product, and they want to be able to see what's going on, ask us questions, and we want to collaborate on those items. \n\nSo I'm going to show you how I can do some of those things in here. Right now, this is my backlog. This is an ordered list; no two have the same order number, and I can drag and drop these around and put them in a different area. If I have a really big backlog, don't have one of those; practice lean inventory control. But I can select a bunch of items, and I can move to a particular position, like send to the top or send to somewhere where we're going to then do some fine-grained checking. \n\nDon't have that many items that need to do that. If you can't actually grab it and drag it and scroll, you probably have too many items in your backlog. That's probably a good litmus test there. So here I'm going to be filtering. Over on the right-hand side here, there's a filter button; you can see that highlighting. I'm going to click on filter, and I'm going to do refinement, and we want to filter by the thing that we're looking at. \n\nThe project manager who's running this cross-cutting project has been feeding some items into our backlog and is asking us, can we collaborate on some items? Can we figure out if we can, you know, they need to be different, break them down? Do we have the right thing? We want to have a conversation, so we're going to get in a room, do a little bit of refinement, and I'm going to click on tags, and I'm going to find Project A. There it is, and I'm going to filter by those items, and we're going to have a conversation about them. \n\nIt will show the actual order relative to right, so this is number 11 on the total backlog. Number one and two are not part of this project. If I turn the filter off, take the filter off, and take like, where's Project A? I'm going to put it way down here, and then I'm going to filter by Project A again. There we go; you'll see there's that 24, 10, and 24 because I just moved that item further down. \n\nSo now we can have a conversation about relative to the rest of the backlog where these things are. I can't drag and drop these things around anymore; it won't actually let me do that. I'll drop it, and nothing will happen, but I can have a conversation around these items. We can open them up; we can edit them; we can break one down into smaller ones; we can delete that other one. We can do anything we want at this. \n\nWe might do some forward planning; we might assign them to different Sprints, so it's quite easy to do that. On the right-hand side, I have a planning panel. If I click on more actions, view options, I can turn on and off planning down here. Planning is quite useful, so I might say that these two are in Sprint 7. These ones here I probably can't; oh, I can do that. There we go; they're going to be in Sprint 8, and these two are going to be in Sprint N. \n\nThat's through the conversation we've been working with the whole team. We've taken a guess at what these things are, so this is not, they're not actually going to be in that Sprint. The team still has to have a conversation during Sprint planning, but I might be looking out a little bit into the future, seeing what's going on, figuring out what's happening. \n\nNow my filtering is way more powerful than that. I'm going to take off Project A. What I might have is I might say, well, I want to see Feature A, and here's Feature A here, and I want to say, and Compliance Check, there it is. There's only one item in Feature A for Compliance Check, but if I take off it, you can see the rest of the Compliance Check items here. \n\nSo you can create multiple slices; you can do ORs or ANDs in how you view these slices in your backlog so that you can decide what it is you're doing, what you're opening up, what you're editing, and what you're doing in here. You can tag people and have conversations and track those things as you're going through. This is a really powerful tool for storing the result of your refinement. You still have to do the refinement.\n\nThe first event that you're going to do as a Scrum team is Sprint planning. When you're planning your Sprint, just as in refinement, you're going to need to look at the contents of your Sprint. You're going to need to have a conversation about what your Sprint goal is going to be. You're perhaps going to store your Sprint goal somewhere, and then you're going to have a conversation about what do we need to do to fulfil that Sprint goal and then what other sorts of work are we going to take into the Sprint. \n\nAzure DevOps is going to store the outcome of that conversation, but you still need to have that conversation, facilitate that conversation as a team. We might decide that in order to facilitate this next Sprint, the most important thing that we can be working on is the group of work that results in Feature A. We think we've got enough together to be able to create something viable value that we can ship in our product, and we think it fits quite snugly into our Sprint with lots of other room for other things that we're going to do. \n\nSo I'm going to filter to Feature A, and here are the items that we're going to do. We can see there's a couple of items that are left over from the previous Sprint. Sprint 6 was the last Sprint; our current Sprint that we're going to be working on is Sprint 7. What I actually want to do is move all of these items into Sprint 7, so I'm just going to drag and drop, and you can see that's updated that iteration path. \n\nSo you can see there's what, 1, 2, 3, 4, 5, 6, sixish items, but we have 11 items total in the Sprint. That's fine; these are the things that are going to be our Sprint goal. We're going to commit to our Sprint goal. If anything happens that's unto, we're going to focus on the Sprint goal, and other things drop away. This is our one most important thing that we're going to do. \n\nYou might have multiple things that you're going to do in a Sprint, but pick one as this is the one that we're going to prioritise over all other things. If we have to make choices, hopefully everything goes great and we don't have to make choices, but not everything always goes great, right? \n\nSo those have been moved into the Sprint. I can actually now click on Sprints on the left there, and it should default to Sprint 7, which is our current Sprint, and now I can see just the work that has been assigned to the Sprint. These things should be approved; I've not actually done that yet, so I'm just going to edit that state and move them to approved state. \n\nBecause why would you bring stuff that's not approved into the Sprint, right? That's data cleanliness problems creeping in, and you'll see that a few times as we go through. I'll always try and fix it as I go because the demo gods, right? So we do have a couple of items that were brought over from the previous Sprint. This is totally fine if you have a flow focus, and you're modelling the flow of work. \n\nSprint planning is the end of the Sprint; it's not like a hard deadline. You're going to have activities; you're going to have changes that are going to take multiple Sprints to be able to deliver. If you're three days before the end of a Sprint and there's the next most important thing that's the product owner, there we have a conversation. The next most important thing is a six-day task. Sure, we can start it, and that's totally fine, and it will just flow into the next Sprint. \n\nThat is predicated on us having awesome engineering practices where we can hide that behind feature flags so we can still continuously ship to production. We still have a usable working increment, at least for the Sprint review, while still continuing to do work. But maybe we take that cut of the usable working increment if that's how we're working. We take that cut prior to starting that work, and that's the version that we're going to show at the Sprint review, and then we're going to start some more work that is going to lead into the next point. \n\nThat's totally, totally fine; do it as you see fit as long as you have that usable working increment that's of value to somebody to show at the Sprint review. All of that is okay; it's okay to do that. \n\nSo here I have these items; we can reorder them inside of this Sprint backlog. That will affect the product backlog, so just be careful with that. We can maybe create some kind of plan to complete these items. If I add, I should be able to add tags on here. Tags. Oh joy, that's... I don't know why I did that. Joys of JavaScript. \n\nLovely. So we'll be able to see what features we've got. I should be able to filter these by tags, so there's the important stuff for Feature A, and then there's all of the stuff that we're going to be working on during this Sprint. Great, we're going to create a plan to complete those items. That could just be a whiteboard plan that we agree as a team, or if you do want, you can create subtasks for these items. \n\nYou can do that by clicking on the taskboard here, and in the taskboard, you'll see the items pinned to the left, and you're able to add tasks to this board. You don't have to do tasks; I generally don't recommend using this board apart from for planning purposes. It's quite useful for that. In general, I'm going to be focusing on the flow of value through the system. \n\nBut during Sprint planning, I might indeed use some of these ideas. The second event that you're going to hit, and you're going to hit it loads of times, is your daily Scrum. When you get into your daily Scrum, probably one of the better views is the board view. So you're going to be looking at this board and seeing what's happening with the flow of work, trying to identify if there are any issues in your board. \n\nYou can remember if I marked all those items as active and I've hit the WIP limit because I'm silly and I haven't built my board very well at the moment, but this is just the default board. If you remember the states on the work items: new, approved, in progress, done. If you're using flow metrics, then the flow metrics that come out of the box in Azure DevOps, if I do this, the flow metrics start at a particular time. \n\nYou've got cycle time and lead time. Now we all know that lead time is a special type of cycle time, and they're all cycle times. If I do into approved to leaving approved, that's a cycle time, but those words have been defined within the context of Azure DevOps for their reporting. If you put on a cycle time graph, the cycle time graph is between these two points. \n\nWhen it moves into in progress, the cycle time timer will start. When it moves out of in progress, the cycle time start timer will finish, and this line over here is the lead time. So as soon as it crosses into new, your timer is starting. That's not always ideal. I do recommend using a tool called Actionable Agile; I'll cover that in another video. \n\nBut it does allow you a lot more flexibility in how you want to report on this data and how it gives you more insights into what's going on. But for this video, I'm going to show you the out-of-the-box capabilities. So one of the things that we would expect to do as a team is have perhaps a more interesting board, a little bit more planning going on, a little bit more decision rather than just using the out-of-the-box states. \n\nThese are the minimum states that work goes through. I highly recommend not adding more states to the process but instead just columns to the board. If you have a state that has to be true across that every work item will go through that state and you want it to be applied to every team, then add a customisation. But don't do a customisation for blocked; that should be a tag. Don't do a customisation for on hold or any intermittent states that a piece of work might not enter. \n\nThe states on your board should be a card that should flow from left to right through all of the states ideally. This should be the common cause, and then we can deal with exceptions separately, preferably using tags. I'll show you that in a minute. But what I want to do for my daily, I'm going to be looking at the things that are in progress. \n\nYou'll remember that I had some stuff that's approved that we haven't started yet. If we've not augmented this board, I would probably move all of those items to in progress as soon as they hit the Sprint, but I don't want to do that. That seems to me a little bit basic. So what I want to do instead is I want to take this in progress column, and I want to split it into multiple columns. \n\nSo I'm going to do that now. If you go over to the little cog on the top right, this is for my daily. You're going to see lots of options. Now we can customise the fields that are available on the work item, so we can add additional fields. We can customise and add some style rules that can apply either to the colour of the card or titles. We can apply style rules based on field values on whatever it is we want. \n\nWe can add tag colours. My favourite one is I've always... oh, I don't have a block; I haven't added blocks to anything. But I'm going to add a blocked colour, make it like some really bright red. That's going to be my... that's going to highlight any blocked items on my board, give you a visual indicator. You have some annotations; subtasks can be added on here as well. I've got that added; I'll show you how that works for creating the plan or changing the plan. \n\nWhat we're going to do is we're going to add an additional column. So I want to take in progress, and I kind of want to split it. I want to... what am I going to do? Let's split it into options, I guess. So let's change this to options because we want things to be coming into our Sprint, and then we're going to pick from those options, and then we're going to replenish those options during Sprint planning, right? That's our general cycle. \n\nWe can replenish any time, but that's our general cycle. So this is going to be in the in progress state. There you can see the mapping of the states on the work item to the name of the column. So what I'm going to do is I'm going to add a new column. I'm going to insert right, and this new column is also going to be for in progress for both work items. But what are we going to call it? \n\nLet's call this develop. I can't spell; let's just call it develop. I definitely can't spell, so you'll see that as well throughout. Develop, and then we're going to put a new one to the right called validate. Develop is going to be split into doing and done columns, but validate isn't. Yeah, that's what I'm going to do. \n\nSo now, obviously, this would not be done arbitrarily; your team would get together and have an agreement on what this is. But now I have my options column, so what I'm going to do is I'm going to move all of those items that I wanted in this Sprint into the options column. Yeah, that's what I'm going to do for this one. I actually have an idea for how I would set this up, but again, that should come out in the wash. \n\nSo I'm going to move all of these states to in progress. This is me starting all the work at the beginning of the Sprint. Not always the best one for flow, but you can plan around that. So see everything's jumped over into options. Now we can say I'm going to pull this into doing for develop, and we're going to have a few items in there. \n\nI'm going to push a few items in here just so the board looks a bit nicer, just for fun. As things move across the board, I've got my options, which is my Sprint backlog. I'm going to pull things into develop, and I'm going to do something in there. Okay, and then as things move into develop, we think it's finished, and then at some point, we're going to pull things from done into validate, and somebody's going to do some validation. \n\nIt could be any member of the team. The basic validation that we do is we check against the definition of done. Let's double-check; let's double make sure that things meet the definition of done. If it does meet the definition of done, we then push it into done. I don't know if you saw that, but as soon as I pushed it into done, the states changed to done. \n\nSo the columns here, if I'm just going to take an item, I'm going to highlight it. Let's highlight it as blocked because I just want you to be able to see it. There we go; so I have this red, this is the red card, right? It's in approved in this column, and when I move it into options, it moves to in progress. \n\nAs soon as I move it into develop, the in progress doesn't change because these three columns are all in progress. Validate... oh, see, this is how... why you test stuff. I put that... let's move that back, fix that validate column. I did that wrong. Approved in... oh, in progress, yes, I know. Save that; there we go. \n\nNow I can take that column and put it in validate, and it ends up in progress. There we go, perfect. Now I can look at this board during my daily. I can see what's going on; I can see the work flowing across the board. The next event in Scrum is the Sprint review. \n\nThere are some data points that you might want to look at in the Sprint review. Most of those I would get actually from Actionable Agile again, but there are probably some things that I'm going to look at. I might jump over to my Sprint, and I'm going to say what of these items is done, and I'm going to cheat. I'm going to change the tag to that, not Project A, Feature A, and we're going to mark all of those things as done. \n\nThere we go, and then I'm going to... so during this Sprint, we managed to get all of the things for our Sprint goal completed, so they're all marked as done. We're all good to go. That's what we're going to show the stakeholders, and separately, we're going to do perhaps we're going to do a demo. \n\nWe're going to show what was created against what we've got in here, but then the next part of our Sprint review, which is arguably the most important part, is we need to figure out whether our product backlog still reflects transparency of the future, still reflects the work we have to do next. So we're going to have conversations with the stakeholders that come to our Sprint review with the team. \n\nWe're going to collaborate on what's happening in the business, what's happening in the market, what's happened in the product, what are the choices that we've made. We're going to put that all together in a big melting pot, and we're going to go update the product backlog, which it looks like I have. Oh, because it's got a filter on there; that's why. \n\nThere we go; we're going to go update the product backlog. So the product backlog is not going to include any of the items that are already done; it's going to include the items that are still to do. Since these are in progress, I might like to actually just stick them up the top. There we go, and now we're probably definitely going to do these things. They've already been started. \n\nI'll perhaps show you how to not have to have them started, and then I've got some work here that is coming up next. This has been approved; we need to go refine these items. We need to have this conversation during Sprint review where we talk about what needs to change here. \n\nI would like to see physical changes in the product backlog during that event because the next thing we do after a Sprint review is we're going to go into the retro, and then we're going to go into next Sprint planning. Who's going to update the product backlog between those items? Probably nobody. \n\nSo this is the last moment we have to get those changes in. I'd be opening these items; I'd be making changes. We'd be talking to the stakeholders about it. Does this still reflect what it is we need to do? Are there changes that we've learned? Maybe the stakeholders have gone and talked to additional people in the organisation, and they want to bring in some changes. \n\nThese are all... maybe there's a whole body of new work that needs to go in here. We can start creating it now so that we have the best possible product backlog for going into the next Sprint planning. If there's a bunch of stuff we really don't understand, perhaps they need to be able to go on a list of we're going to need to get together with these stakeholders and discuss and refine more things into the product backlog during the next Sprint because that's work that happens all the time. \n\nRefinement happens all the time, but what's the important stuff we need to update here to get straight into the next Sprint? Feedback or core changes, anything like that should be in there. The last event in Scrum is our Sprint retrospective. I'm probably not going to spend as much time in Azure DevOps during my retrospective. \n\nWe might have a conversation about things that happened during the Sprint, things that were left over, things that were difficult. We might need to go look at some items in the product backlog and discuss why they were so difficult, what did we not understand, and we might do some root cause analysis on that. But in general, we're probably going to be having separate conversations: people, processes, tools, relationships, all of those things are on the table for the Sprint retrospective. \n\nI wanted to show you a board that was done a little bit differently. So here I have a board where I have the backlog on the left-hand side. So I have a column for backlog, so that's the new state. If you remember, we had the approved state, and I've renamed the approved state to Discovery and set it as doing and done. \n\nSo I have that doing and done in here. I've colour-coded these items because they're too big, so I've got a field called item size, and it has unsized, right-sized, and oversized, with unsized being the default. So if it's oversized, then it's going to highlight that we need to do some refinement work, and that's where in this discovery column doing, I wouldn't expect to see anything with this orange title any further. \n\nThis needs to be broken down, refined a little bit more. This might split into multiple items before we start bringing it into that discovery done column. This is where we might do some usability analysis; we might do some user studies; we might do paper prototyping. \n\nAll of those things in this column, if you're doing a lot of those things, you might split it out into multiple columns for how you're going to process that work. Then it moves into analysis at the beginning of the Sprint. If you remember our timer starting for... oh, that's not the right one. That one, our timer for cycle time is between these two lines within this box. \n\nCycle time starts here at analysis, whereas lead time starts all the way over here, and that's for the built-in stats. Hopefully, this gave you some ideas about how you can use Azure DevOps to support your Scrum environment. If you're more interested in the board and the columns, I have a Kanban session that goes a lot more in-depth into that story as well. \n\nIf you do have any questions, put them in the comments below and get in touch if you need any help."
  },
  {
    "id": "5J8RLcOAE3E",
    "title": "Continuous Delivery Without Compromise - Why Best Practices Don’t Exist in Complex Systems",
    "description": "Discover why there are no best practices in complex systems. Learn adaptable strategies for continuous delivery that ensure quality and user trust.",
    "captions": "I often get asked about best practices that help teams do continuous delivery. How do, how one of the best practices? And I'm going to start right up front by saying there's no such thing as best practices when you work in the complex environment. There's no such thing as best practices. Best practices are for simple work in simple environments where you can have a procedure and you follow it continuously. It becomes the best practice, the best way to do it, and you get the same results every time. That's not the world that we live in.\n\nSo the phrase I quite often use, which is I guess a little bit passive-aggressive, is there's no best practices. There are only adequate practices for the situation at hand, and the situation might change. Right? That's fundamentally what we're talking about. But there are a bunch of practices that we see many organizations leveraging and getting success from, and we should try them and see if they work for us. That maybe makes more sense than best practices.\n\nSo the question usually is, and if I take out the word best, there, what practices enable cross-functional collaboration to support continuous delivery without compromising quality? One of those practices is some way to control what code ends up in production or not. That's a very powerful practice, or what code is enabled for people. That's probably a better way to just say it. Most organizations, most products have moved or are moving towards or are thinking of moving towards more of an audience-based deployment pattern or delivery pattern rather than an environment-based delivery pattern. Right? And so there are still environments within the context of this, depending on how it's set up.\n\nBut one of the core practices that supports this idea of continuous delivery, that supports this idea of continuous quality in production, is definitely moving towards an audience-based delivery strategy. So in the old, the old, in the ye olden days, the delivery strategy was Dev, test, staging, production. Right? Dev, test, staging, production kind of thing. And everything was done in Dev. The developers built all the stuff, and then it got pushed to test. Testers tested all the stuff, and then it got pushed to staging and something else, usually load testing there, and then it got pushed to production. Maybe if you're deploying to customers, they have in the way. Right? There was also a UAT environment. These are all costs. These are all at costs, and they're extreme costs, and they're not worth it costs. They not only have a cost to actually do at the time, they have massive, massive cost implications on our ability to build the right thing. They have massive cost implications on the cost of fixing stuff later, and they have massive cost implications because we're effectively testing quality in rather than building it in. Right? Testing quality in is the most expensive way to gain quality. Building quality in is how we should be doing that.\n\nSo this practice of audience-based delivery means we switch to a model, and I'm going to use the words, I'm going to use, make it sound like we're testing in production. And in fact, that's one of the terminologies that we do use in that context is testing in production. Right? And the reality of the world in which we live in, building these complex interconnected systems that we all build and work on, is that there is no place like production. There's no way to simulate production. There's no way to truly validate that what you've done works in production until you get to production. So wouldn't it be better if we can get a small change quickly into production for a small set of users and then be able to increase or decrease that user set on demand so that we can validate that the product works in real-world and real scenarios? And that's effectively what we talk about with this set of practices, this idea of shifting left and continuous delivery. And there's a lot of practices that help with that.\n\nSo audience-based deployment model is probably the main thing. And if you're thinking, \"Oh, our product is too big and too complicated to be able to do that,\" the Windows team moved to that. Windows is deployed on an audience-based model rather than a more traditional environment-based model. There's, because there's a physical product that's physically deployed to people, there's still a little bit of the old school environment in there for sure. So it's not a complete thing. Cloud products, you can go complete, but they go, their time from cutting code to it being in production with real users is only, I think for themselves, it's only a few hours. Like internal to the Windows team, but nightly, as I understand, at least nightly, they're deploying new versions of Windows out to all of the participants within Microsoft.\n\nSo if you're inside of Microsoft and you take a BG, that's their internal IT department BG build of Windows, like you're not self-managing BG build, then you're getting nightly builds of Windows. Or I think many people are. That means that what the developers wrote yesterday, you're testing today, and it's in production. Because you're, you know, you're a manager in Microsoft. You're doing your day job, which is managing people. You might be managing marketing people, right, inside of Microsoft, or managing consultants or managing whatever. And your machine has the latest version of Windows. You're using it in production. So that's getting into production as quickly as possible.\n\nAnd then what they're doing, the engineering team, is they're monitoring the telemetry. This is the audience-based deployment model. They're monitoring the telemetry and deciding whether they want to open that particular build out to more people. And when they open it out to more people, the next ring, I guess Microsoft calls them rings, ring-based deployment model, right? But it's really audience-based. Each ring has an audience of people, and they're all in production, and they're just opening it out to more and more people. That's a pretty simple version because it is a physical product that's deployed on your machine, right? Physical, which is your operating system.\n\nSo it's got to run on bare metal and in cloud, but it runs on metal. Right? But if you look at something like Microsoft Teams, Office 365, right? They have the ability to switch on and off features for specific users. So regardless of what build is shipped in Microsoft Teams, for example, and I have, I'm in the TAP program for Teams, basically their version of the insiders, and I get features before the general public. The, the, everybody gets features, and that can be specific to me as an individual user within my company or all users within my company. And that enables that choice. Right? So you, even as a customer in the TAP program, I can choose that I get the, oh my goodness me, the cutting edge latest and greatest, and somebody else in my business gets the reasonably stable. They're kicking the tires, ready for moving to a wider audience, more general public audience. And then general public have a way to opt into some extra features and things.\n\nSo we're all able to communicate with each other, right? We can all join the same call, and some people are using more different features from other people within the context of that call. Some of them have new capabilities, whole new code bases that are running their part of that story. And it's really interesting because I do calls with folks at Microsoft, and I've had folks at Microsoft who are on much earlier builds than me because they're choosing to help out that team or they work on that team. And yeah, occasionally their call drops, and they have to log back in, like, \"Oh, sorry, early build, I got a bug.\" And there's a risk-benefit analysis there. If you're working in a company and you want to take the earlier features so that you can pre-validate them for your company, understand what they are to help with training and whatnot of people in your company, understand what's coming down the pipeline, then you can choose to do that. But you're choosing to take a little bit of risk, right? Because it's going to be a little bit less stable.\n\nThis is this idea of testing in production. I'm not expecting a complete crash of everything and nothing works, right? But the occasional glitch, the occasional weirdness, I'm good with that. I teach training classes on Microsoft Teams. I teach all my classes on Microsoft Teams using Microsoft Teams breakout rooms, using all those things. I'm in the TAP program. I have an earlier capability. Occasionally, things go a little bit weird for me. That's just a teaching moment in the class because we're talking about how we deliver software and how we deliver products. And part of that is accepting that there are going to be some mistakes. There are going to be, if you're doing continuous delivery to production, there are going to be things that get past your automated gates, right? And end up in production. It's what you do with that information.\n\nThat's one of the best complimentary practices. I'm going to use the word best there. Is that philosophy and how you do it. In fact, it's not even a practice. It's a philosophy. You need to have a philosophy of find it and fix it. So if something does make it past into production and you're doing continuous delivery, you need to figure out how, why, how did this get past my automated checks? And how can I change my automated checks to be able to catch those things? That's it. If you find, \"Oh, it's not possible to change our automated checks because of the way we've architected the system,\" then this, you might be asked, I would expect a team to be asking themselves the question, \"Should we be changing our architecture so that these types of problems can't make it into production?\" And how long is that going to take?\n\nA great example, the Azure DevOps team had a bunch of incidents where one service that really shouldn't be mandatory took out the entire platform. Right? So they're running an online platform, and for example, the profile service, this was their first example. The profile service stops working. Does it matter that you're showing the ID of the user or the good of the user versus the friendly name of the user? Because the pro, you get that friendly name. I've got the good ID. I get the friendly name. But what if that profile service is down? Would you rather your entire system was down or it showed a good in place of a username in some cases? Right? Some small number of cases, I'd rather it showed the good and the system still worked because then my users can still do their job. My users can still use the system. They just see a small controlled glitch. Right? And then when that profile service comes back up or we fix it, that turns back on again.\n\nAnd there's a pattern, a coding pattern called the circuit breaker pattern. And it's exactly what you think it is. When one of the services stops working, it breaks the circuit. And then every so often, it tries the circuit to see if it's back up. And if it's not up, it just breaks the circuit again and then waits a little bit longer and then tries the circuit. If it still doesn't work, it breaks the circuit and waits a little bit longer. So this service on this site is not down because it can't connect to this service. And the Azure DevOps team had this problem that the profile service took out the entire system. So millions of developers all over the world were unable to look at their code, do their work items, do all these things because the friendly name couldn't be displayed. I mean, a bit factious with that, but the profile service was down. That's insane.\n\nSo one of the practices that you need to think about is one of the, let's call it philosophy. The philosophy you have to think about is, \"No, we need to change it. We need to look at the impact to our users and make decisions based on our ability to maintain our service, maintain high levels of quality, maintain the ability for people to continue to work within the context of our product even when the unavoidable happens, which is systems are going to break, systems are going to be down.\" How do you cope with that? That's probably, if I was to say there's a best practice, it's not a best practice. It's maybe a best philosophy, and that's to continuously seek to better your product, better its ability to support its users, and do that continuously and relentlessly."
  },
  {
    "id": "5myUBqzRiXk",
    "title": "PSM 1 Rock Music",
    "description": "Dive into the electrifying world of rock music with 'PSM 1 Rock Music'! Discover iconic riffs, legendary bands, and the genre's vibrant history.",
    "captions": ""
  },
  {
    "id": "5qtS7DYGi5Q",
    "title": "How Do You Know the Value Currently Delivered in Your Organization?",
    "description": "Unlock your organisation's potential with EBM! Discover 5 compelling reasons to embrace evidence-based management in your environment. #EBM #Shorts",
    "captions": "How do you know the value that is currently delivered in your organisation? Evidence-based management is a tool that will help you understand the current value in your organisation. You might use metrics, like customer satisfaction, employee satisfaction, or even revenue per employee or product cost ratio. You might be looking at telemetry for your customer usage index—how much of your product is actually used in your organisation. These are all things that will enable you to make better decisions."
  },
  {
    "id": "5RJpAeKMRzs",
    "title": "The 7 Deadly Sins of Agile!",
    "description": "Discover the 7 Deadly Sins of Agile and learn how to avoid common pitfalls in your agile journey. Transform your approach for lasting success!",
    "captions": "Agile is hard and it's designed for complex environments. So, as you would expect, there are many behaviours that I've found in organisations that are suboptimal, to say the least. Here are my seven deadly sins of Agile.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nOne of the seven deadly sins of Agile is lust. Loads of organisations are talking about Agile transformation, digital transformation, whatever transformation. They want something different because they've realised that the markets have changed. It's taken them a long time to realise the markets have changed. They changed years ago. In fact, the 1930s was when the market started to change. By the 1970s, they were totally changed, and it's taken until now for a lot of companies to actually realise, \"Oh, stuff's changed. What's going on? Why isn't our old processes and systems working?\" So now they're looking around for something new. They've got that, I was going to say, \"70-year itch,\" but it's the 70-year itch, and they're looking around for new processes and practices that they can use. They see this Agile thing doing really well, and they want it. They want it desperately, and they don't really want to do the work for it. They just want to buy it. I think there must be a USism for that, but I think I'll stay away from it. They just want to buy this thing; they don't want to actually spend the effort and the time and the energy to figure out what it means for them and their business. They just want somebody else to come in and install it. They just want to pay somebody to come in and do it for them. That's what they want to do.\n\nThat's why you see a lot of organisations bringing in the big four consulting companies. You see McKinsey, Accenture, and Boston Consulting Group coming in, giving advice. But the problem is they're giving advice based on all of these other big organisational transformations. There is no precedent within your organisation for Agile. You can't just look at what somebody else is doing and lust after it and bring it into your organisation. You need to build your own unique way of doing things over time and actually do the work to get there. That's why you can't just lust after this Agile thing; you need to do the work to bring it into your organisation.\n\nOne of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team you're working with and you look at their product backlog, and let's say there's six or seven people working on this team and they have 5,000 things in their product backlog, they're doing it wrong. That's greedy. They've eaten all those backlog items; they're sitting in their belly and they can't walk around. They can't move; they're not going to be nimble. They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.\n\nAnother way gluttony manifests is during Sprint planning, shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint. That continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it. Taking on too much and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, maybe not every Sprint is probably okay. You're not going to be successful in everything you do, but if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, \"Are we taking on too much work? Are we doing too much? Are we taking on too much work?\"\n\nThat's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. The Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide. They found that only 35% of the features that we build are used by our customers. 65%, I think the phrase was, \"Ed little if ever.\" So hopefully we can stop building them in the first place. That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long does your build take if you remove 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams will be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things.\n\nSo the way to... loads of teams just need a gastric bypass for that. How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog. It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, features that aren't used by your customer. I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap and they knew their customers way better than anybody else. There was no way they were wasting 65%. It was a lot less, that's what they said. So we said to them, \"What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?\" They said, \"This one, this one's the best.\" So we got in amongst the code, we added application insights. Application insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box it does a bunch of stuff. But then if you add this as a feature, you can say, \"How many times do users click that button of our body of users? How many of them have clicked that button?\" You can get all of that data.\n\nWe analysed their product end to end, so we collected data for three months, and then we went back to them and said, \"Here's the 7.5% of features that your customers use. All the rest was waste.\" Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers. So no, don't eat the whole thing. You've got to figure out how do I pick and choose what I'm going to eat. Don't eat the whole feature at once. You don't know if you like haggis yet, so don't order a whole plate full. Get a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more. But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.\n\nOne of the seven deadly sins of Agile is greed. This usually manifests in organisations by an overwhelming focus on resource utilisation. Let's get rid of the fact that we're calling everybody resources as if they're cogs in a machine rather than actual people. That focus on resource utilisation was a fantastic idea when we were running machines, and machines could churn out things on a regular cadence. The more your machine is running, the more value you're getting in return for the cost of the machine and the cost to run it. That's where that resource utilisation idea comes from. But when you start looking at people and how people do work, people need thinking time. People need to do things different ways. If we can automate stuff that we do the same all the time, but if we're going to do something different all the time, which in my world, background as a software engineer, everything we coded was something new. Otherwise, we would have used an existing framework. Anytime you're writing code, you're doing something new. Anytime you're building a product that doesn't exist yet, you're doing something new that's never been done before. When you're doing that, you need to give people the space to be able to do things well, to be able to think about things, to be able to learn things, to be able to try things. That means that people aren't always 100% focused on the work that they're doing. They're doing other things while thinking about that work.\n\nSome examples, maybe. Have you ever been working on something and got stuck? No matter how much time you spent on this thing, you were stuck. You're 100% utilised because you're working on this thing, but you're not making any progress. You're not delivering any value. But if you just go out for a walk or you sit with your wife and you explain the problem to your... I do this all the time. I explain some problem to my wife, and she doesn't necessarily understand the problem that I've got. I'm talking about code and architectures and things, and halfway through explaining it, I figured out what my problem was. I just didn't have a moment to look to the side. I don't know if that makes sense, like an out-of-body experience and look at that thing from the outside.\n\nThat resource utilisation is a fallacy when you're talking about people. There's no such thing as resource utilisation. You want to be looking at flow efficiency and value delivery. How much value are you delivering to your customer? I actually don't care if my team members are sitting around on their butts for 90% of the time as long as we're delivering the value to the customer. The value to the customer is the important thing. Is the customer happy? Are we getting an adequate return on investment for our product? Those are the ideas that make sense. I worked with somebody years ago who ran a little experiment with some teams that he worked with in a company in the US. He decided to, or got convinced leadership that per Sprint, he would remove an hour from each Sprint. You can imagine you've got a 40-hour week per week, per Sprint. You've got a 40-hour week. The next Sprint, he's going to do a 39-hour week with the team. The Sprint after that, he's going to do a 38-hour week with the team. The Sprint after that, he's going to do a 37-hour week with the team. I've got a question for you: at what point do you believe that value delivery suffered if the focus is on value delivery, delivering features? Now, that doesn't mean that for the other two hours people aren't actually working. If you think about it, a Scrum team, somebody who's focused on solving problems works 100% of the time. When I'm having a shower in the morning or when I'm... I actually do a lot of my best ideas at the gym. I go to the gym, I'm working out at the gym, and I go, \"Oh, that's a great idea,\" and I go on my phone and I message it to myself. The next idea pops in how to solve problems and figure these out is not something that you get from 100% utilisation. You need thinking time.\n\nCan you guess where he got to? He got to 16 hours per week before value delivery started to suffer because all the rest of the time is thinking time that the team needed. Thinking and noodling time. Very much stop being greedy. Stop trying to get people to maximise their utilisation and instead focus on maximising the flow of value delivery to your customers.\n\nOne of the seven deadly sins of Agile is sloth. This manifests in a number of different ways with teams, with organisations, with leadership all over the place. One of the most common elements is just not bothering to actually do the things that we say we're going to do. We say we're doing Agile, but we don't deliver working product at the end of the Sprint. We say we're doing Agile, but we have long convoluted deployment processes which are not in control of the developers. We say we're doing Agile, but we don't have an ordered backlog. All of these things are places where we say we're doing something, but really we're just kind of lazy and lying through our teeth in order not to have to do the work. Perhaps it's because somebody in leadership in the organisation has decided that thou shalt do Agile, and your product is not particularly suited to that model because it was built in a traditional... maybe it's got mainframe and all kinds of crazy stuff in there. Maybe there are other reasons why it's not viable within the confines, the structure of your organisation, the system that you're in. But I would much rather teams and people were honest and transparent with their companies and their organisations about what they can and cannot do, what is and is not Agile.\n\nI really like there's a great article called \"Detecting Agile BS\" from the US Department of Defense. If you search for it, you will find a great little workflow on it. It's one of my favourite things that I use in organisations. Here are six sloth things that organisations kind of say they do or pretend that they're Agile, but they don't actually do these things. I think these are great. The first one is: are teams delivering working software to real users every iteration, including the first, and gathering feedback? That's almost Agile in a nutshell. Are we coming up with ideas, getting those ideas in front of customers, and getting that feedback? If you're not doing that, sloth. You're not able to get things done.\n\nThe second one, and because this is the Department of Defense, is: is there a product charter laying down the mission, strategic goals, and do all members of the team understand how they contribute? That's absolutely key. How can we expect people within the context of our product, of our teams, of our organisation to make good decisions about what it is that they need to do if they don't have all the information they need? We're hiring smart, clever people, and then we're not empowering them to do the things that they need to do. We're just not empowering them. That's part of we need to communicate with them. If you don't communicate with them, sloth. If you don't actually do those things, you're being lazy. Just do it.\n\nThe third one is feedback from users turned into concrete work items on Sprint timelines shorter than one month. Are you getting things in front of your customers at least once per month? That shouldn't be that hard. It shouldn't be that hard to engage with your customers, get parts of your product in front of your customers, and then get them to tell you what they think of it. Gathering feedback from those users shouldn't be that hard, and if you're not doing it, sloth, because it's not that hard. You're just being lazy.\n\nOne I already mentioned a little bit is the full ecosystem of your project. Agile programming teams followed by linear bureaucratic deployments is a failure. Why do you have linear bureaucratic deployments after your Agile team have done the work? We might be able to make working product in two weeks, but how long does it take before that increment, that two weeks' worth of work, actually gets in front of real users so that you can close those feedback loops, break down those assumptions, validate what it is that you're creating, that it is actually value? If that's too long, that's not Agile. If you look at the Agile Manifesto, it says ideally a shorter time frame, but only a few months between having an idea and getting it into production.\n\nThe fifth one: are teams empowered to change their requirements based on feedback? The people doing the work should be able to change and adapt the requirements that they're creating in the system, the things that they're building. We want to build more of the right things and less of the wrong things. We want to maximise the amount of work not done. All of those things require the people doing the work to be able to delete, add, or change things from the backlog as needed based on those interactions that we've already talked about with the customer. If you're not doing that, sloth. Why are you not doing that? Why is somebody not addressing the problems of why you can't do that? If your organisation is saying we want to do Agile and we want to get all the benefits, but you can't change your requirements, you have to do everything that... here's the 300 things we need you to do. That's fundamentally not Agile. Welcome changing requirements, even late in development. These are just fundamental principles of agility.\n\nThe last one on the Department of Defense, not well known for being an Agile organisation, but the last one on their list is: are teams empowered to change their process based on what they learn? Not only changing the work that they're doing, but changing the way that they're doing the work. Why aren't your teams empowered to do that? Well, because people more senior can't be bothered with that. They just want to buy Agile from some vendor, install it, and then everybody just does it that way. That's not fundamentally how Agile works. Agile is about the emergent practices, the continuous change, emergence, and adaption of our processes, practices, and tools in order to be able to maximise the value delivered to the customer, the stakeholder, which may be the business themselves. Without those abilities, we can't do that. I feel like these six things absolutely embody sloth. If you're not able to do all of these things, you're not really that interested in moving towards agility. You're really not that interested in doing those things. It's lazy. It's inept. Get off your ass and fix it.\n\nOne of the seven deadly sins of Agile is wrath. Wrath occurs in many different forms in teams working in organisations. Most often, it's the inability for us to do things wrong. It's the inability for an organisation to accept that we're not going to do things right every time. This can kind of manifest in an example from recently. We need to work with an organisation; we need to create some procedures and practices around doing a deployment. We need to create procedures and practices, and the team that I've been working with wants to create, \"Here's what we think is going to work. Let's try that, and then as we figure out more, we can iterate on this policy and procedure and get it to be what we need it to be in order to be successfully in production.\" Then we can reuse that as we go for future applications, right? Future things that we're doing. But the other side didn't want to do that. They wanted to create your final draft, we'll take that, we'll run it around the 100 people that need to go see it, and we'll create a spreadsheet with all of the things wrong with it. Here are the things wrong with it that you have to go fix before we can approve it. That approval process is wrath. You can't be wrong; therefore, the end result needs to be approved before you can do it. Because if it's approved, it's now no longer your accountability, so we're not going to blame you. It's a blame culture technique. It's going to run up the chain, get approved, and then whoever's approved it at the top, it'll be beneath them to solve the problem anyway. If something goes wrong, oh, it's not the people down here's fault because it was approved. Go up. Who approved it? Oh, the CEO approved it. Well, okay then. Well, it was wrong, whatever. There's no accountability. A lack of accountability results in wrath going on in the organisation, and I think this manifests in lots of different ways. I think that's the core thing, but it manifests in lots of different ways.\n\nOne of them that I've seen happen with a team was during a Sprint review. The team was demonstrating their product and features to the stakeholders, and one of the stakeholders asked the team, \"Why did you build it that way?\" in a kind of accusatory tone, like, \"Why did you build it that way?\" What I would expect to happen would be that the product owner would take accountability for the value delivered in the team, and they would get out in front of that and say, \"Well, these are the decisions that we made. We can always go back and change them.\" Blah, blah, blah. That's taking accountability. But no, that's not what they did. Wrath. They passed the buck, and the product owner turned to the team and said, \"No, why did you build it that way?\" That's not taking accountability. I think wrath is a big reason I don't want it to be my fault. It needs to be somebody else's fault. Otherwise, something will land on me. I'll get covered in the poop from the mistake that happens. I think that lack of mistakes is a huge part of that story. So don't let your organisational culture of wrath create this environment where nobody will take accountability.\n\nOne of the seven deadly sins of Agile is envy. For me, I think envy in Agile looks like just copying other people's stuff. That's one of the ways it manifests. We believe that if somebody else is getting success with something, then of course we will get success with something. The difficulty is that that's not necessarily true at all. I'm going to rephrase that. It might be. It might be possible on the small scale. You're working with a team. One of your colleagues and another Scrum Master or another product owner is using a practice that they're like, \"Oh, this is great. We do this and this, and we have this value stream, and we're able to get good stuff from that.\" You're like, \"Okay, I'd like to try that.\" That's not really what I consider envy; that's just trying stuff. Envy would be looking at a great example of envy: the Spotify model. The Spotify model is a fantastic example of envy. There is no such thing as the Spotify model. \n\nThere was a presentation and paper that a couple of folks that were leaders at Spotify did at a conference. I think they did a couple of conferences talking about what Spotify was doing, what their journey was, and where they currently were on their journey. They were telling an example of how they did things, and everybody went, \"Ooh, the Spotify model! Let's do that!\" They absorbed that into their... \"I want this capability,\" and they go try and bring it into the organisation. But what folks don't realise is six weeks later, Spotify were doing it differently. They weren't doing what was defined in the Spotify model. A year later, they got rid of the idea of tribes and guilds and whatever else they were doing because it didn't work for them. They tried something, and it didn't work for them. That envy of, \"Oh, they're doing this awesome thing, so we need to be doing that awesome thing,\" results in a lot of... it results in a lot of FOMO, if you've heard that expression, \"fear of missing out.\" I think that's kind of part of envy. Other people are getting stuff, and you want the same stuff. That's where, at many levels, organisations fail. They fail at the process level because you look at a Spotify model or you look at SAFe or you look at any of those big models and say, \"I want that. I want to install that in my organisation.\" Then you pay lots of money to get it installed and then wonder why you're not getting the benefit.\n\nThere's the application level. I talked about this recently on a podcast. Installing an application that enshrines somebody else's business processes into your organisation is not necessarily going to be successful for you. The example I used before was SAP. SAP is a massive application tool, very common in our industry. If you adopt an SAP tool, SAP comes with a bunch of different capabilities. Let's say it's invoice processing. SAP has a workflow for invoice processing that comes out of the box. It has certain ways that it does things, and you're giving up the way your organisation does things in order to adopt the way SAP does things. Does that kind of make sense? There are some things that you can adapt in SAP, but only within the bounds of what the developers that created it allow. This means that when you see some of your competitors perhaps installing SAP and building their whole procurement processes in SAP, you think, \"Oh, we need to do that.\" If they're doing that, we need to do that. Or if our competitors are adding these features to our product, we need to add those features to our product. That's envy. That's following, not building your own path.\n\nSimon Sinek does a great video on this topic, and he talks about the why. He talks about going to two conferences: one is a Microsoft conference under Balmer, and one is an Apple conference. At the Microsoft conference, everybody wanted to know what their competitors were doing. What are their competitors doing? What are their competitors saying? What are they launching? What features do they have? At the Apple conference, they didn't give a crap about what the competitors were doing. They're like, \"This is the way we're going. We're doing this because it fits within our belief model.\"\n\nGenerosity, comfort, confidence, contentedness, friendliness, goodwill, kindness, benevolence, friendship. Those are the opposites of envy, and I think that if you can put aside what everybody else is doing and focus on what you need to do and what your customers need, you'll have a lot better time both in the process space, in the tool space, and in your organisational structure space.\n\nOne of the seven deadly sins of Agile is pride. Now, you do want to take pride in your work. We all want to do good things. We want to believe that the things that we create are valued. But I think the pride that's the sin part is blind pride. You're taking pride in something without actually measuring its outcome. We talk about this all the time for product owners. Don't just build stuff willy-nilly. You need to collect the data, the telemetry, the analysis. You have to do hypotheses. You have to create the hypothesis: \"I think this thing, if I build it, is going to add value.\" You create it, and you don't just assume that it's going to make the value that you think it is. That's pride talking. You need to analyse the data and figure out if that actually did provide the value you're expecting. You need to stop investing in something that isn't providing the return that you're expecting it to do.\n\nAnother good example of that is Satya writing down the cost of Windows Phone, writing off Nokia for $8 billion. Sometimes you have to swallow your pride and not sink more money into something that's not going to provide a return, and you just have to stop. I used to work at a bank in the UK near Edinburgh, and they created this massive piece of software that basically all it did was create forms for customers to fill out. But it was the most convoluted, unusable, unwieldy... I'm trying to think of more words to describe the ridiculousness of this software. It didn't provide the features that they actually needed, but they'd spent $2 million on building it, so they must use it. We must continue to use it. That's that sunk cost fallacy, which I think is very closely related to pride. While we've invested this much money, it must be awesome, so we must use it. Those are assumptions. I think pride is how come we assume stuff. We assume lots of things. The product owner assumes that the features, the ideas that they have are good ones. The market doesn't always agree. Developers building things in a way that entertains them rather than that actually focuses on the value delivered to the business. I've been guilty of that many times, working on features because they were fun, not because they provided any value to the customer. I've done that a ton. You need to be really careful that you don't become too prideful, making assumptions about the products and capabilities that you're building, the code that you're writing, the stories that you tell in such a way that it clouds your view of what's really going on. Because then all you're looking at is vanity metrics. You're missing out on what's really going on. So don't be so prideful that you miss out on what's really going on."
  },
  {
    "id": "5s9vi8PiFM4",
    "title": "1 thing you wish you knew at the start of your Scrum journey?",
    "description": "Discover the key insight Martin Hinshelwood wishes he had at the start of his Scrum journey. Elevate your Agile experience with Naked Agility! #Scrum #Agile",
    "captions": "The one thing I really wish that I knew, understood, or was exposed to at the beginning of my Scrum journey was also having a Lean journey, a Lean story as well. I didn't encounter Lean until about seven or eight years into my Scrum story, and it took me that long to really truly understand how it changed the dynamic. \n\nScrum is the social technology that helps us work together more effectively. Lean is the data and understanding of how we're doing that thing that enables us to be even more successful."
  },
  {
    "id": "5UG3FF0n0C8",
    "title": "10th April 2020 - Office Hours \\ Ask me Anything",
    "description": "Join Martin, a Scrum Trainer and Microsoft MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "5ZRMBfV9zpI",
    "title": "Professional Scrum Master (PSM) training class from naked Agility with Martin Hinshelwood [mktng]",
    "description": "Join Martin Hinshelwood for an interactive PSM training workshop, enhancing your Scrum Master skills and gaining valuable insights into Scrum principles!",
    "captions": "[Music] \n\nThis workshop is for practitioners that are interested in starting a career as a Scrum Master, existing Scrum Masters, Agile coaches, and consultants trying to improve their use of Scrum. The Professional Scrum Master is an engaging, enjoyable learning experience where students gain a deep understanding of Scrum theory and principles, Scrum Master accountabilities, and why each element of the Scrum framework is important. \n\nOur training is delivered as an interactive, activity-based course over half-day sessions using Microsoft Teams and Mural. Between sessions, we provide additional reading, writing, and watching activities to maximize the learning opportunities and complement the classroom experience. \n\nAfter the conclusion of the class, we provide access to a community of peers and continued access to the trainer through office hours, quarterly catch-ups, and constant engagement. To maximize validated learning, all students are provided with a password to take the PSM I assessment, and if they take it within 14 days and are unsuccessful, they will be granted a second attempt. \n\n[Music]"
  },
  {
    "id": "66NuAjzWreY",
    "title": "Mastering Evidence-Based Management in Agile: Inform, Don’t Control",
    "description": "Discover how Evidence-Based Management (EBM) empowers organisations to make informed, data-driven decisions that enhance outcomes and drive success.",
    "captions": "Evidence-based management is the application of evidence-based practices at the strategic and tactical levels in an organisation. It involves using data to inform but not control the actions and behaviours that have been shown to impact outcomes. So what that means is that we're going to collect a bunch of data within the organisation. The way we measure people informs the way they behave. So whenever you're working within an organisation and you find somebody's working against you or somebody's not being as involved as you think they should be involved, and you're wondering why, there's probably some organisational measure or metric something being levied against them that enables, ensures, encourages that behaviour in that person.\n\nSo the best way to figure out why somebody is doing something in a particular way that maybe you feel has a negative impact on the way your things need to happen is to figure out how they're measured. That can be difficult, but if you can glean that information, you can figure out why they're behaving the way they're behaving, why they're taking the actions that they're taking. We want to try and have more behaviours and actions that impact our outcomes positively. We want to deliver more value to our customers. \n\nWhat other outcomes might your business want? Well, they might want more revenue. They might want more value for their customers. They might want to save money. What else might be good impactful outcomes for our business? We might want to increase our capability within a particular market. It's difficult without a specific instance to have a specific outcome that you're trying to achieve. \n\nOnce you've figured out what your outcomes are, you need to figure out what metrics are going to help you measure progress towards those outcomes. These can be super tactical things that help you move towards those outcomes. It can be leading or lagging measures; there's all kinds of things that come into that. But evidence-based management is that application of practices within the context of that data to help you make decisions. \n\nOne of the reasons I very specifically said inform but not control is that the data is not always going to result in a specific action. For example, let's say I had a metric for my team or teams. I've got a group of teams I'm working with, and my metric is the number of live site incidents that last or exist for longer than two sprints—let's call it three sprints. We're running a live service; we're going to have outages and issues and things that happen in the live service. When those things happen, we're going to create live site incidents or live site incident mitigating actions—things we're going to change in the product in order to not have that type of live site incident happen again.\n\nSo we've done our analysis, we've come up with these ideas, and then we expect our metric to be that we expect teams to clear those off within three sprints. If I expect them to clear it off within three sprints, I maybe want to have a measure, a team dashboard, and I'm going to have a measure that says what is the number of live site incidents that have been existing for longer than three sprints and what is the trend of that number. Is it trending up or is it trending down? \n\nYou may see your list of teams, and you see the numbers, and they're all good apart from this one team that has these four outstanding live site issues that have been there for longer than, let's say, six or seven sprints. That doesn't mean there's something wrong in that team. These are indications, these are flags, pieces of evidence that you use to inform your decision-making. So you'll probably need to go ask them how it's going, and maybe there's a team that they're waiting on something else to happen. They can't fix their thing until some other third party that they don't control and we have limited influence over needs to do something. \n\nSo the team, that data looks bad, but the team's doing fine. They're chasing it on a regular basis; they're putting pressure on that other group on a continuous basis. It's just taking time to get resolved. That's why it informs but does not control. \n\nWe're making decisions based on the evidence. We're collecting a bunch of evidence; we're extrapolating what we don't know or don't understand. The evidence is going to have gaps in it, and then we're making an informed decision based on our understanding of the current situation. That's evidence-based management in a nutshell."
  },
  {
    "id": "6cczVAbOMao",
    "title": "How critical is a Product Owner in developing a great Product Backlog?",
    "description": "Unlock the secrets of a successful product backlog! Join Martin as he highlights the crucial role of the Product Owner in Scrum. 🚀🎯",
    "captions": "So the question is, how critical is a product owner in developing a great product backlog? If you look at the Scrum Guide, then it will be absolutely imperative. They are the one that decides, makes the final decision, the arbiter of the product backlog. They are responsible and accountable for ordering the product backlog. Although they can delegate it, they're responsible for the contents of the product backlog. Although they can delegate it, they are 100% responsible for expressing and communicating the vision and strategy that results in all of those other things.\n\nSo if you think about what you might put in a product backlog, you're not going to know what to put in there unless you know what direction you're going. Product backlogs can quite often become just this massive dumping ground of whatever crap anybody asks for at any point in time, and that's not what you want. You want your product backlog to be a short list, a lean inventory of the work that needs to be done to maximise the value that you're going to deliver to your customers. This means if you have 5,000 things in your product backlog, you probably don't have a product owner. You've probably got somebody who's just dumping stuff in there, and if a customer makes a request, they just put it in there. Perhaps that's not the right customer request. Perhaps we should say no to that customer request. Perhaps we should ask the customer to keep it in their back pocket because it's not to do with our current strategy.\n\nAnd those are really the core critical activities of the product owner that help us create this lean, directional product backlog that enables then the engineering team, the developers, to select the right things. Because it's all understood, it's transparent, we know what trade-offs we're making as developers. We know what trade-offs we're making when we choose this over that. Even though this is more important, we know we have to do this that first. And those are the types of conversations that we can only have if we have strong product leadership, a strong product owner on our product, who's able to communicate and express that strategy and direction effectively.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "6D6QTjSrJ14",
    "title": "What has the initial response been to the immersive learning experiences, how do you see that evolving?",
    "description": "Discover the buzz around our new immersive learning experiences for Scrum! Join Martin Hinshelwood as he shares initial feedback and future insights.",
    "captions": "So the initial response to the immersive learning has been incredibly positive. Almost every single pair, I can't think of anybody I've spoken to that have said, \"Well, that sounds like it sucks. I'd rather do a two-day class.\" Nobody said that. Everybody detests the full-time two-day workshop. I don't know why we kept doing it for so long. Actually, I do know why we kept doing it for so long. It's because we insisted on trainers going on site to do it, which means that you have to do it in a short period of time because the company that you work for doesn't want to pay for me in a hotel for six weeks and all the stuff that that entails in order to be able to deliver a six-week workshop, right?\n\nSo we need to compress it into a short period of time. Now, in the virtual space, we're free to experiment with different formats, different ways of engaging with students, and it's really resonating with the people that are thinking about taking the class or wanting to be part of it. We've already had customers express interest. We've had customers buy onto, especially the PSPO, which has been hugely popular because they're really interested in that continuous development, right? That conversation that you have over a longer period of time so that you're not just, \"Here's a bunch of content. Bye, that's it.\" That's a two-day class, right? This is more, \"Here's a little bit of content and here's something to try in your business. Go try it, come back next week, and let's have a chat about it. How did you get on? How did it work? What happened?\" \n\nThat piece, businesses, especially small to medium-sized businesses, really see that extra value that they get for it, for really not that much extra cost, right? It's spreading that out over a longer period of time, closing those feedback loops, getting people really embedding those ideas. Not, oh, my favourite expression that actually one of my good friends, Jim, mentioned is that a job as a trainer is to plant seeds, right? Seeds of ideas that are then going to grow into something. \n\nOne of the problems with the two-day format is you're planting a whole bunch of seeds and you don't know what's going to grow, and nobody's coming back to water those seeds or care for them, right? That's just self-service. You've seeds are on your own figuring out how to expand that, whereas this format is the gardener's coming back, tending all of the different plants, the different seeds. You know, if these plants in this area aren't getting enough water, they can spend more time on that, and that really gets those thought processes going. \n\nI'm really looking forward to these immersive classes. Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "6KQQ4MLMnj0",
    "title": "PSM1 9 with subs",
    "description": "Discover the essentials of PSM1 9 with subtitles, guiding you through key concepts and practical insights for mastering the subject. Perfect for learners!",
    "captions": ""
  },
  {
    "id": "6L2r8YrehWc",
    "title": "Why isn't a scrum master given any real power or authority in the scrum guide?",
    "description": "Unlock the true essence of Scrum leadership! Discover how respect and skill, not authority, drive team success. Join the journey to effective Scrum mastery! 🚀",
    "captions": ""
  },
  {
    "id": "6S9LGyxU2cQ",
    "title": "Is the APS immersive learning experience the equivalent of having a hands on scrum coach?",
    "description": "Discover how an immersive APS course can provide the hands-on scrum coaching your team needs to excel in agile practices.",
    "captions": "So the question is, is the EPS immersive learning experience the equivalent of having a hands-on Scrum coach? No, but almost. I think is probably the right answer to that. \n\nHaving somebody with your team on a continuous basis is really helpful, right? Somebody to even, even Sprints later, who you're able to get advice from and engage with is really powerful. But we kind of almost do that with our immersive class, right? So what we do is, each session includes a feedback loop, right? The assignment you get at the end of the session to try in your organisation is then debriefed before the next session, so you're closing that feedback loop. \n\nThat includes a little bit of coaching, right? Because you're not just doing it; you're getting the feedback from it and getting coaching from the trainer slash coach who's able to help you with that. But also, it's over 10 weeks, right? Typical Sprint length is two weeks, so you actually get five Sprints' worth of help, and you're only taking one half day per week per Sprint out. \n\nSo that's one day, ten percent of your Sprints, right? In our two-week Sprint, that's ten percent you're losing, right? That's you're losing it as productive time on the team building your product. But hopefully, what you gain back in overall effectiveness of your team over five Sprints, right? Continually coming back, closing those feedback loops, trying something new. \n\nHow many retrospectives do you have in those five Sprints? You have five retrospectives, right? So you can get together as a team and each two weeks, each two sessions, figure out how much the training has helped you and bring that information to the next session so that the trainer can then adapt and augment the training based on the needs of you and your organisation on a continuous basis, right? That's super awesome. \n\nAnd in addition, oh, if that wasn't enough, right? The We Always Nickel Agility always offers an hour of additional coaching per person that's in the class, right? So if you're doing a 10-week, 10 weeks with us, with let's say 12 people in the class, the immersive classes are a little bit smaller, right? So you get 12 people in the class, you get an additional 12 hours of coaching and help. \n\nSo maybe that trainer comes back for your next two or three retrospectives. Maybe they sit in on, or even during that time, right? They sit in on our Sprint review and a Sprint retrospective and your some of your dailies, and you can close some of the more of those feedback loops, get more help, get that coaching as part of the scenario. \n\nThat is being delivered. That part is up to you, right? You have to want it because you have to use it, and you have to figure out how to include it in your process. But the APS immersive class is ultimately a 10-week, five Sprints, five Sprint kickstart for your organisation and moving towards Scrum or Kanban or whatever it is you're trying to do. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "6SSgETsq8IQ",
    "title": "Professional Scrum Product Owner (PSPO) - Discover product management skills & practices",
    "description": "Unlock your potential as a Product Owner! Join our interactive PSPO course to master essential skills and drive product value in Agile teams.",
    "captions": "The Professional Scrum Product Owner is a hands-on, activity-based course where students explore professional scrum and develop an understanding of the critical role that the product owner plays on a scrum team. Being a professional product owner encompasses more than writing requirements or managing a product backlog. Product owners need to have a concrete understanding of all product management aspects, including but not limited to product ownership that drives value for their products.\n\nBeing a product owner is a key position that sets the tone for product leadership and the definition of success in the organisation. As a product owner, modern product management practices and mindsets are expected to be put into practice daily. The product owner is accountable for and has the authority to maximise the value of the product and the effectiveness of the product backlog.\n\nOur training is delivered as an interactive, activity-based course over half-day sessions using Microsoft Teams and Mural. Throughout the class, students learn a number of product ownership practices that they can use once they leave the classroom, while also receiving an introduction to agile product management. Between sessions, we provide additional reading, writing, and watching activities to maximise the learning opportunity and complement the classroom experience.\n\nAfter the conclusion of the class, we provide access to a community of peers and continued access to the trainer through office hours, quarterly catch-ups, and constant engagement to maximise validated learning. All students are provided with a password to take the PSP01 assessment, and if they take it within 14 days and are unsuccessful, they will be granted a second attempt as part of our validated learning experience. We provide a 30-minute learning review, a one-hour coaching session, and access to future courses at a 30% discount."
  },
  {
    "id": "71cqc2azM1g",
    "title": "NKDA Webcast Product Ownership Lean Product Development 20231005 090457 Meeting Recording",
    "description": "Join Dr. Joanna Płaskonka and Martin Hinshelwood in this 18-minute webcast as they explore Product Ownership and Lean Product Development insights!",
    "captions": ""
  },
  {
    "id": "76mGfF0KoD0",
    "title": "Would you recommend a team APS workshop or an agile consultant?",
    "description": "Discover whether an APS workshop or agile consultant is best for your team. Join Martin Hinshelwood as he shares insights on mastering Scrum for effective product development.",
    "captions": "Oh, so if a Scrum Master was battling with their team, would you recommend an APS workshop or an agile consultant? I may recommend a new Scrum Master, right? Because if the Scrum Master is battling with the team, that doesn't even make sense. They're there to help the team be effective; they're part of the team. If a whole team is battling with them, then that makes them the [ __ ]. Right? I think it does. I guess it would be circumstantial, but that's how I feel.\n\nWith an APS workshop or an agile consultant, be better. What I tend to do as an agile consultant is more of a coach, the coach, right? So I'm happy to be there, observe the team, maybe give the whole team advice if that's what's asked for. But I would tend to focus on observing and then coaching the Scrum Master. If the Scrum Master is battling the team, maybe that's not going to be effective, right?\n\nSo probably it depends on what the Scrum Master is battling the team over. So if the Scrum Master is battling the team, like the team, I, we, the team are objecting to doing things that could potentially benefit them, it's kind of let the team decide. It's meant to be a democratised process, not a dictatorship. So the Scrum Master can't dictate anything, but perhaps there's some value in helping the team understand more about what Scrum, for example, has to offer so that they have more ammunition to make a determination, and perhaps they'll make a different determination, right? Because if the team decides not to do Scrum, they probably shouldn't be doing Scrum, right? Because if you enforce it, they're not going to like it, they're going to push back against it, and you're not going to have a good time. It needs to be a chosen thing.\n\nSo what I might suggest is yes, an APS workshop, and treat it as a workshop, treat it as having fun, right, from their perspective. But also from my perspective, they're all going to bring the things, the reasons why Scrum can't work for them. So it's almost like a hybrid. That would, for me, be a hybrid situation where I'm going to run an APS, where I may run an APS workshop, but I'm going to treat it very much as a consulting gig that they do want some answers, right? They don't necessarily just want to understand APS; they want to understand EPS within the context of their company and their problems and their issues. Because there's no point in just teaching them Scrum if they're vehemently opposed to the idea of anything like that or anything being imposed upon them.\n\nSo probably approach it from that perspective, that we're going to use the APS curriculum as a way to shape the conversation and hit all of the things that we need to hit. But even at the end, at the end of the APS, I've mentioned this a couple of times because I just love this feature of the APS. After we've had those conversations, right, whether it's a standard APS where I've got a bunch of public students and we teach the class, they learn a bunch of stuff about Scrum, but we don't necessarily dive too much into their individual context, or if it's a private gig like the one that we're describing here, where we're able to spend as much time as we need on their stuff as well and understanding that link because it matters to everybody in the room.\n\nAt the end of the class, we have this session where we dive into what should you do, right? There's a number of little workshops that I can run with the group that's in the room that depends on what the group is. One of those is a kind of getting started with Scrum workshop. One of those is a tune-up, right? We're already doing Scrum, and we need to tune up our process. What should we look at? But we also first have a kind of set of questions to set them up, and one of those is should we use Scrum? One of the questions is what are the reasons we shouldn't use Scrum? What are the reasons we should? What will happen if we don't change what we're doing? Because those are important questions, not for me to answer, but for them to answer for themselves.\n\nDo they feel their current way of working is actually working? Is it actually providing value to the customer? If not, what are they going to do to change? We've just talked for four half days about a bunch of tools that they could use to help them change. Are they going to try some of those tools, or do they want to try something else? If you think those tools won't work, what needs to change in your organisation in order for that to be effective? And I think that's probably the way I would approach it, a kind of hybrid APS with some agile consulting in order to help the team make better decisions. And you know when to have a long chat with the Scrum Master if they're battling the team, right?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "79M9edUp_5c",
    "title": "5 tools that Scrum Masters love. Part 4",
    "description": "Discover the 4th must-have tool for Scrum Masters! Join us for insights from NKD Agility and elevate your agile journey. #Scrum #Agile #Shorts",
    "captions": "From Masters love asynchronous communication. Asynchronous communication is something that has become more popular since lockdown. Right, we're able to collaborate with people in a much more dynamic manner. We don't have to wait for people to reply. We don't have to all be in the same place at the same time all the time. We can have these back and forth, communicate with people, engage with them on a constant basis, and it provides a much more compelling way to facilitate communication without imposing too much on people's time. Because everybody's trying to get work done as well, and they can reply as needed. Asynchronous communication."
  },
  {
    "id": "7O-LmzmxUkE",
    "title": "Scrum is like communism, it doesn't work. Myth 1.",
    "description": "Uncover the truth behind Scrum myths! Join Martin as he reveals the real purpose of Scrum events and why they matter in agile. 🎥🚀 #Scrum #Agile",
    "captions": "There's a myth in Scrum that you spend more time talking than doing. I see this quite a lot. People talking, usually people are using old school terminology. When you hear them talking about that, you hear them talking about ceremonies, right, rather than events. One of the main reasons why Scrum doesn't call the activities ceremonies is because it's ceremonies. We get together and nothing happens. It's a ceremony; it's something we do that's perhaps the same every time, and there's no actual outcome to a ceremony apart from maybe people have some jollies and they feel good.\n\nThe reason Scrum calls them events and also not meetings is something's supposed to happen there. Every single one of the Scrum events serves empiricism; that's their purpose, right? You're going to inspect something and adapt something. If you're not adapting, there's no point in being there. There's no point in having it; there's no point in doing it. Their purpose is to adapt.\n\nSo, for example, at your Sprint planning, you're inspecting your product backlog and your product goal, and you're adapting your Sprint backlog and your Sprint goal. That emerges through that conversation, right? But at the end of your Sprint planning, you should have a Sprint goal. You should have selected backlog items. What do the developers think best serves working towards the product goal? You should have some kind of a starter plan to complete them. If those three things don't exist at the end of Sprint planning, there was no point in having it. That's what it's there for, so that we understand what it is we're going to take into the next Sprint, so that we can communicate that perhaps with other people. What's our goal for this Sprint? What are we trying to achieve?\n\nHow do you get the stakeholders to actually turn up for the Sprint review? Well, you have to give them something that they're interested in coming and providing feedback on. That's your Sprint goal, right? And that's just one of the events in Scrum. Every single daily Scrum, it's only 15 minutes. How does that add up to a boatload of meetings? At most, 15 minutes per day where the team gets together and plans the next 24 hours. That's its purpose. You're inspecting your existing Sprint backlog, and you're adapting that Sprint backlog based on what you learned in the last 24 hours. You might have learned some stuff from actually working on the product, what can and cannot be done. You might have gained more information and insight from other stakeholders and collaborating with the business and doing analysis on what it is you're going to work on. That means that something that you've got in the Sprint needs to be taken out because it's no longer viable, or something else needs to be brought in because it becomes part of that story of what it is you're trying to achieve that Sprint.\n\nThat's your daily Scrum, right? It's not an elaborate status event; it's not a time that you're wasting. It's where you're maintaining the transparency that is required to be able to inspect and adapt. You're serving empiricism, and all of the Scrum events serve empiricism.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "7R9_bYOswhk",
    "title": "Why is the Professional Agile Leadership - Essentials course a natural evolution for an experienced Scrum Master?",
    "description": "Discover why the Professional Agile Leadership Essentials course is the next step for Scrum Masters and Agile coaches in their leadership journey.",
    "captions": "The question is, why is the Professional Agile Leadership Essentials class a kind of core evolution for a Scrum Master? I think, again, there are two great reasons. The first one is that it enables a Scrum Master to hear the questions that leaders and managers have about Scrum, about the context that we're talking about, right? They get to hear some of the other ways that it's important to them or that we can solve problems for them.\n\nBut also, I think of the Scrum Master as being the first rung on the leadership track, right? This idea that I call them kind of gold shirts, right? Like the Star Trek idea. You get people that are on the leadership track, and you get people that aren't really interested in the leadership track. There are loads of people out there who are quite happy being software engineers, right? They're quite happy being Scotty, running these engineering departments. They don't want to be in charge of the ship at all.\n\nSo, we need to be able to cater for both of those groups, and the Scrum Master is a natural position of leadership. They're a leader who serves the team. Then the next level up is the leader who serves a bunch of teams, and the next level up is the leader who serves a part of the organisation or the leader who serves the actual organisation, right?\n\nSo, that gives you that kind of leadership track of the organisation. For the Scrum Master, learning the language, the lexicon, the problems that the leaders see at those levels will help them better serve people at those different levels in the organisation.\n\nThanks for watching the video! If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "7SdBfGWCG8Q",
    "title": "The Power of Building Relationships Through Immersive Learning in Scrum",
    "description": "Discover how immersive learning enhances your skills as a Scrum practitioner in Part 2 of our series. Elevate your Agile journey with NKD Agility!",
    "captions": "Another great thing that practitioners get from immersive learning is relationships. Relationships with the other people in the class who are bringing their knowledge, their experience, who effectively become your colleagues over a period of time. If you just spend a few half days with them over a week, you're probably never going to see or speak to them again. But if you spend 8 to 16 weeks with those folks, collaborating, talking about how you did things, that's where relationships are built."
  },
  {
    "id": "7UZsdsD23rs",
    "title": "What is empiricism and why is it so critical to great Agile?",
    "description": "Unlock lean-agile secrets with Martin! Enhance value delivery and team dynamics in fast-paced projects. Dive in for expert insights! 🚀 #Agile #Scrum",
    "captions": "What is empiricism and why is it so critical? \n\nYeah, I think in empiricism, so what is empiricism? That is a great question. So, empiricism is effectively inspecting and adapting. We hear that a lot in the agile space, and empiricism is we need to—something happens, we need to be able to see what happened, right? We will look at the data; that's the transparency piece, right? We can see what's going on—really what's going on, not vanity metrics, not all of that [ __ ], right? We can actually see what's going on.\n\nAnd then we're going to— we're actually going to look at it. So it's not good enough just to have the transparency; you have to go look, right? You have to go and analyse the data. You know, all those reports that you create that nobody ever looks at, they're all crap, right? You want to be actually—what data do you need in order to make different decisions? So we have the data, the transparency, right? Or what's going on—look at it, and then we change the way we do things. We change something, right? And that could be lots of different inspect and adapt loops. There's a bunch of inspecting and adapting loops, for example, baked into Scrum. That's why they call it an empirical process, right? It's implementing a number of different inspect and adapt loops.\n\nOne of those loops is the daily, right? You've got a Sprint backlog; your Sprint backlog represents your transparency of the present—what's going on just now. And then every day, you're adapting, inspecting and adapting that backlog, continually adapting that plan towards completion of the Sprints. \n\nYou've also got the Sprint review, right? Continually adapting the product backlog and the product goal towards whatever direction you're going. That way, you're able to kind of steer in different directions as you close those feedback loops. \n\nAnd then you get the Retro, which is the feedback loop for the process itself—our working agreement, right? Our definition of workflow. And every—at the end of every Sprint, we're going to get together and figure out what happened during the Sprint and how can we change this to make our lives in the next Sprint a little bit better, or my—our lives five Sprints down the line a little bit better.\n\nSo there's three inspect and adapt loops just in that part of the process, and the entire Sprint is another inspect and adapt loop. Your customer, right? The stakeholders are engaging in that inspect and adapt process at the end of every single Sprint. They can see what you've done and can decide whether they want to invest in another Sprint, right? Do I—am I getting enough value, or is there enough potential value that it's worth me spending money for another Sprint, or are we done? \n\nRight? Perhaps it was a bad idea, right? We're quite early in the process, and we had a cool idea, but it doesn't turn out it's very good. Or perhaps we're going in slightly the wrong direction and they need to twitch it over somewhere else—pivot, right? At the end of the Sprint, and figure out where we're going next. \n\nThat's the real power of inspect and adapt, and that's why organisations that have large hierarchies and the people that are making decisions are too far away from this actual work that's going on and aren't able to respond quickly enough to the market, right? Because either your market is either a commercial market, right? Your business is doing business with other people, or potentially for a product, your market is inside of the organisation, right? It's another part of the business that is delivering something. \n\nAnd as their needs change or the market needs change, you need to continually adapt the features that you're creating, the direction that you're going, what you're supporting in order to best meet those needs because they're serving some other market as well that's constantly changing. So that's why we need those feedback loops. That's why we need empiricism, because we actually don't know where we're going. We might know what we want to—what we think up front we want to create for this product, right? \n\nBut what about who we're providing that product for? Is their capability, business direction stagnant, or is it constantly changing? What about what those people are creating their outputs for? Is that stagnant or constantly changing? And how quickly can we close those feedback loops? That's really what agile is all about.\n\nThanks for watching the video. If you enjoyed it, please like, follow and subscribe. I always reply to comments, and if you want to have a chat about this or anything else—agile, Scrum or DevOps—then please book a coffee with me through Naked Agility."
  },
  {
    "id": "7VBtGTlkAdM",
    "title": "1 thing that sinks a consulting engagement before it starts gaining traction?",
    "description": "Discover the key factor that can derail your consulting engagement before it even begins. Join Martin Hinshelwood for essential insights! #agile #consulting #shorts",
    "captions": "The thing that will completely sink your consulting engagement before it gets started is the contract. If your contract states exactly what needs to be delivered, when, on what cadence, and how much it's going to cost, you're already screwed. That’s not the reality of the unpredictable nature of building products that don't exist yet. \n\nIf you sign up to those contracts, you're just gonna have a bad time. Make sure that you think about how you don't want anything in your contract that specifies exactly what you're going to deliver and when. You want to be talking about the outcome: what is it you're trying to achieve and what value are you going to deliver to the customer? Everything else is irrelevant."
  },
  {
    "id": "7x7lsuwkcAs",
    "title": "Bitrate for Joshua Partogi",
    "description": "Explore the intricacies of bitrate with Joshua Partogi as he breaks down its impact on video quality and streaming performance in this insightful video.",
    "captions": ""
  },
  {
    "id": "82_yTGt9pLM",
    "title": "Agile Consulting Services overview",
    "description": "Discover NKD Agility's Agile Consulting services in this video, where Martin Hinshelwood explains how we empower teams to thrive in agile environments.",
    "captions": "Foreign. Consulting, that is a very nebulous term that people often have difficulty articulating what the heck that thing is. I have my approach to Agile Consulting. I have, there's a number of different parts to it. Probably the main part again is talking to people, helping people understand that there are other options to the way they do things. People kind of get a lot, quite often people get locked into one framework like Scrum or Kanban, and they don't realise that there's not really anything making them do that one thing. There's actually lots of choices in that story. What are the strategies that you need in order to be successful at building products, at delivering whatever it is that you're delivering as an organisation?\n\nAnd there's often quite a loose connection. People focus on delivery and they forget about the business as well, right? So a lot of Agile Consulting is helping them understand that this is not a tool for delivering stuff. Agile's just an idea that is a different way of working for your whole organisation, and how they can start bringing in some of those ideas into their organisation. So it's kind of filling that gap between that ideal world that training talks about and the realities of the organisation and where does the organisation currently sit on those Agile scales, and how do we start moving that needle so that they gain more ability, right? They get more, faster at being able to deliver stuff, tighter feedback loops, talking to their customers more, delivering more value, and ultimately making more revenue, right? That's the ultimate goal of most companies is to maximise the revenue for the effort that they put in. So being able to increase that.\n\nSo having conversations at different levels in the organisations, whether I'm dealing with teams, right, and helping teams get better at building the product that they're building, or talking to people in middle or leadership teams who are orchestrating that across a much wider audience, either their whole organisation or in the professional services environment. So there's a lot of engaging in talking with people, running workshops, right? Helping them not just, there's almost two, there's two things that workshops are good for, right? Well-run workshops. One is that you get the outcome of the workshop, right? That's one, that's only one of the outcomes, but that's quite important. But the other outcome is, do the people that came to the workshop, did they learn anything that can make their work better, right? Did they learn how to run workshops better, how to engage with people better, how to converse with people better, and navigate that minefield that that's often called the grown zone, that battleground of people not agreeing, right? Which is very common. And how do you navigate that? So building up those skills in people that I work with, and that's a lot of Agile Consulting, is finding people in your organisation who are the people that need to be the ones that are doing the work, right? Because I can't do it. I'm outside of your company. I can't make changes to your company. That's not possible. It's not possible for a consultant to come and say, \"Here, here's how you should run your business. Go do it,\" right? That's not how it works. The people in your organisation need to be the ones that make the changes, that understand the ideas, and the job of the consultant is to come in and effectively provoke change, help people think differently so they see what it is they need to do next. That's the hard part, right?\n\nBut also, you know, a state of Agile reports, I've done those as well. Like, where's our organisation currently, right? Lots of organisations are quite large, and perhaps instead of just bringing somebody in to help them, they need to have a conversation first about what is the help we think we need, where are we right now, and where do we want to get to, right? That's an initial conversation. So I've done reports for organisations where I come in and I interview people at all levels in the organisation, create a report that talks about the current state of agility within your organisation, what are the opportunities for improvement, and what are the top three things that I see as the biggest problem.\n\nAnd then it's up to the organisation to have a conversation about whether they need more help or they think they can do all of that themselves, right? And quite often they do come back, but it can take a longer period of time, right? Because they go try things, they're trying to build momentum inside the organisation, and then a year later they come back around and say, \"Can you come and help us with additional stuff or provide some training in a particular context?\" Right?\n\nAnd telling those stories inside the organisation. So I think that's what I would quantify as Agile Consulting. You need lots of tools in your toolbox. I try and have as many tools as I can. I'm always learning and figuring out new tools and new ways of doing things, and then bringing that to the customer engagement, knowledge, experience, methods, theory, right, as well as tools and capability. What is it that what information is your organisation missing that I can provide you to help you move forward?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "83JsLlE4Up4",
    "title": "Ep 006 - Live Virtual Retrospective on PAL-e with Russell Miller",
    "description": "Join Russell Miller for a live retrospective on PAL-e! Ask Martin, a Scrum Trainer and Azure DevOps MVP, your burning questions on DevOps and Agility.",
    "captions": ""
  },
  {
    "id": "8aIUldVDtGw",
    "title": "Stop Starting and Start Finishing: The Key to Team Success",
    "description": "Unlock Agile success! Learn to \"stop starting and start finishing\" for enhanced productivity and team effectiveness. Watch now for valuable insights!",
    "captions": "There's a quote in Lean that says, \"Stop starting and start finishing.\" It's been around for quite some time, and it's something that I use all the time with Scrum teams. While it is predominantly a Lean thing, there's no reason why you can't have Lean stuff in empirical stuff. There's no reason why those two things can't go together, and I think it's really important for teams that are doing anything. Whatever type of work that we're doing, we need to focus on finishing stuff, not on starting more stuff.\n\nThe traditional idea is that the more work we have underway, the more that we're doing, which means that people and teams often juggle multiple things in what they do. When you're juggling multiple things, you tend to find that less stuff gets done because you spend a bunch of cognitive cycles context switching. If you think of the work that Gerald Weinberg did in his book \"Systems Thinking,\" you might recall a graph that shows the number of projects underway and the amount of time that we lose to context switching. It's about 20% per thing. So, if you're doing two things at once, you're going to lose 20% of your time, and it's gone to context switching and your cognitive load.\n\nYou're in the shower in the morning, and instead of the back of your brain solving the complex cognitive problems that will help your business be successful, the back of your brain is thinking about how to juggle these two or three projects. How do I keep these three projects' stakeholders happy? If the back of your brain is occupied with juggling those things, you're spending less time and focus on solving the actual problem that we're here to solve, which provides your business with value. There's no value to your business in juggling five things; all they care about is whether they are getting the value they expect.\n\nThere is a big push, especially from leadership, but I think there's a little bit of a fallacy there. I don't think leadership pushes it; I think middle management pushes it because they are under pressure to get more stuff done. If you're sitting on a team and you have multiple masters, with multiple people telling you what to do, then you're the one who has to juggle those multiple things. One of the things we talk about in Scrum is having a single product owner. That single product owner is the focus for what we are going to do next, what we are working on.\n\nDepending on how your organisation is structured, this is not ideal. If you have multiple voices in your organisation, then the product owner becomes the funnel that allows the team to work on a single stream. The product owner has to deal with all the different stakeholders. I'm not saying the team won't help; the rest of the developers will help with that. But the product owner becomes that final say, that point of knitting together all those different ideas and threads into a single cohesive story so that the team has focus and can maximise the value.\n\nLean talks about this as well, discussing having a definition of workflow. If you're thinking of a Kanban strategy, you're going to have that definition of your workflow. You decide what it's going to be, and you're effectively going to decide those things as well, like what things we work on. We're going to limit our work in process for sure, but then how do we decide which thing we pick? A lot of teams pick the oldest thing; whatever has been hanging around the longest is what we're going to pick. From the options, the stuff we haven't started yet, we might order that by whatever we decide as a team that maximises the value.\n\nYou might order it by age, but I'm not sure that's the best idea. Ordering it by value would be best; have the highest value stuff we’re going to pick next, and then we pull things based on that value and need. Lean focuses on the idea of the virtual product owner for creating that loom, whereas Scrum talks about it as an individual, a person who is going to do that. But the outcome is the same: you have a much tighter, cohesive story and focus for the team, which is really important.\n\nThat's why we need to stop starting work and start finishing work. Ultimately, the more work we have in progress, the longer it takes to deliver. You can see that if you've ever used a cumulative flow diagram. You can very clearly see when the lines of the amount of work you're starting and the amount of work you're finishing get further apart. The amount of things you have in progress is increasing. If you're getting further apart, then you're starting more work than you're finishing.\n\nIf the lines are getting further apart, then the horizontal line is also getting further apart, and the horizontal line is your approximate average cycle time. As you start more things and haven't finished them, all of the things in the system take longer to deliver, and that's not what we want. We want to have as short a time as possible that we're working on things because that increases the throughput, the stuff delivered for the business. If we're focused on valuable stuff, it hopefully maximises the value that we're delivering to the business.\n\nWe can go through that process really quickly, which means the business gets predictability because they know if they give us something important and we take it on immediately, they know roughly how long it's going to take to deliver it. It will be short because we're focusing on shortening that cycle time. I think that’s the idea behind stopping starting work and starting finishing work. It matters for Lean teams, it matters for Scrum teams, and it matters for all teams. Stop starting work and start finishing it.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "8F3SK4sPj3M",
    "title": "Why Validate Your Advanced Product Ownership Skills with a PSPO-A",
    "description": "Discover how the PSPO-A course empowers you to lead product ownership like a CEO. Elevate your skills and drive success in your organisation! #Agile #Scrum",
    "captions": "So the added value of the advanced product owner is that we really, we've already opened up the idea of the product owner and what they do in the product owner class. But the advanced product owner really pushes the bounds and brings in marketing and contracts and sales and finance and budgeting and all the other things that a true product owner, a true ideal leader, and a true mini CEO or entrepreneur is going to have to think about in order to be successful and have a successful product."
  },
  {
    "id": "8Fu6k2S1Iwo",
    "title": "Continuous Delivery",
    "description": "Join Martin and Simon as they explore Scrum and Continuous Delivery, sharing insights and practical tips to enhance your agile journey. 📘📈",
    "captions": "Welcome to another episode of Agile Actually. Today we're going to talk about tools creating more of a problem than they solve. What do you think, Simon? That looks like it triggers you already—tools complicating the problem.\n\nI love the quote from Grady Booch: \"A fool with a tool is still a fool.\" Just, and then you've got the corollary: \"But now they're a tooled-up fool.\" I think it's very easy to fall into the tool trap. I think this is a massive thing. How much do you include predefined packaged processes or practices in that word \"tool\" as well? Because I kind of do, right?\n\nIs Scrum a tool? Yeah, that's a good one. It depends, I guess. It depends on your perspective, right? Scrum could be a tool from one perspective; it could be like a collection of tools that are put together into a technology. I tend to think of Scrum as a technology rather than specifically as a tool, but there's some synonymous nature between those two terminologies, right? Words are fun, right?\n\nBut for story points, it's a tool. Yeah, well, yeah, so it's a device or implement used to carry out a particular function. So if we say that's what a tool is, I really like the fact that Ken and Jeff called it a framework. So it's a collection of aspects that help you achieve a particular purpose.\n\nI think it'd be useful for this not to get into a framework methodology discussion. Sure, I think that's just Elmo those, right? So our little red friend can just jump out there. I think the idea behind the topic is that quite often tools should be there to help enable us to do the thing that we need to do. But quite often, they get in the way of doing the thing that we need to do because of some particular reason, perhaps because everybody in the organization is told to use the same tool. That could be a reason for it to get in the way, right? But it's not really a generic framework, right? It's a specific tool, and it's for a specific outcome. People have to use it for everything, and therefore you start having it used for jobs that it shouldn't be used for.\n\nAnd then we also have the boilerplating of tools, where a tool is configured or locked down or over-controlled. I've seen far too many people trying to work in an agile way, and the custodians of the tool, their job is the tool, and they lock the tool down so you have very little permissions to change it. So your team wants to innovate or try something differently, but you have to use this tool. Even selecting another tool is considered heresy. Varying the way the tool is used for whatever reason is considered a breach, and it then becomes an attack on someone's status to suggest a different configuration of the tool.\n\nSomeone will go off and read a blog article or something and then just put another bit of formula in it and lock it down and make this a mandatory field. Next thing you know, you're looking at a 700%—like that's a number, by the way. It was proven. I did this with a client. The tool we wanted to use versus the tool we mandated to use was a 700% increase in admin to the mandated tool as opposed to the preferred tool. The reason we wanted to use a preferred tool was it wasn't locked down.\n\nI've got another concrete example that I can even name. I can even name and shame the organization, and it's Microsoft. They had on the Windows team, in the old days, they used to have the Windows team's process. Your DevOps used to be up on GitHub, so you could go take a look at it. On the bug work item, there were 170-plus required fields in order to submit a required bug. You could not save a bug unless you'd filled out all of these 170 required fields. There would be some nonsense saved in that, right? Because not only some nonsense saved in that role, but there's the old adage that if you make something even a little bit difficult, you vastly reduce the instance of action, right? \n\nThat's why we have locks on our front doors. There's not a lock that anybody has on their front door that somebody who really wants to get in can't get in, right? But if you deter people enough and make it difficult enough, then most people don't bother doing it. And that's the same with anything you put in the way. The configurations, the complexities in the tool that you're using—anything that you put in the way vastly reduces the instance of people actually doing the thing you want them to do.\n\nWhich, perhaps, you don't want them to raise bugs, right? Maybe that's exactly why that ties into transparency. There's proven evidence that creating a culture that is more comfortable raising bugs, talking about incidents and near misses creates a culture of quality, which results in performance improvement and enhancement. But what we're talking about is putting the minimal sufficient obstacle in the road so that it just becomes too big. The activation energy is too great, so people don't do it.\n\nTypically, the way this has worked around in a lot of the enterprises I've seen is they then end up putting default information in these mandatory fields to get around that hurdle to make people use it. They'll just default fill it anyway, which means that you end up with more noise than signal. This is why in Azure DevOps there's a template option. I don't know if you've noticed on a work item you can click on the ellipse and create a template from the work item that you're viewing, and it will pre-populate a whole bunch of fields. Then you can just apply that template when you open a new work item.\n\nBut then you've got noise. Then you get noise, right? If that data—it's the same reason that I always have strong words when people want to template their work items, right? I've got whenever I add this type of backlog item, I want these 10 tasks to appear under it. But it has to be a user story, Martin. It has to be in user story syntax. That too has to be with story points. That's why you get backlog items in somebody's backlog that says, \"As a product owner, I want,\" or \"As a systems integrator, I want.\" Those square pegs in round holes, right? You're trying to fit something into a format, use a tool for a task that it was not meant to be used for, and then it ends up inhibiting value, reducing transparency because people can't really see what's going on.\n\nA good example that I hit recently—same idea, that lack of reducing transparency. There's a little bit—I know this is a tools conversation, so it's a little bit Azure DevOps, but when you put a work item in, you know how you've got the different levels in Azure DevOps? You've got backlog, and then you've got the feature level, and then you've got the epic level. You can call them whatever you want, and you can have up to seven levels, but that's effectively it. Out of the box, when you have a Kanban board, the board's view—it's not called a Kanban board, but board's view—there are boards and then task boards, right? Those are the two views on the board view.\n\nIf you default the columns to all of the states that are physically on the work item, right? So if the work item is new, approved, in progress, done, that will be the default column. Then teams can break them down and make them more columns if they want. In a team that I'm working with at the moment, and this is across an entire group, so there's about 13 teams working in this project, somebody's created a dependency work item, which is okay. This is like an external to this group of people's dependency that we want to monitor and track, but they've added it to the backlog level, and it has eight states that are completely different from the backlog item state, which means the default when you go to look at the boards is eight states. No, there's eight plus the back, right? So 13, 15, and it just effectively shits it all out, right? \n\nThen if you try and move a backlog item into a column that isn't a state on that backlog item, it zops back to the start because it doesn't know what to do with it because that state doesn't exist on that backlog item. But this is the infu—that is a perfect example of a tool complicating already complex work. Yes, the tool is getting in the way, and there's two difficulties, right? There's somebody made a mistake; they didn't know it was a mistake, but somebody did something that reduced the effectiveness of the tool, made it harder to use the tool for the majority of people that are using it. They had good intentions, but they made it harder.\n\nAs soon as that is raised, it's a very easy physical fix, right? You just take that dependency and move it out of the backlog group, and you're done. It 100% fixes the problem instantly. But how do you get approval to do that? Well, this is an interesting thing that I'd like to call out a few aspects of that example. The first one is the whole lean approach of local optimization for a suboptimal whole, right? We're solving a very small problem in a big system, and we've just made it insurmountably worse for everyone else.\n\nThe second one is authorisation and the need for architecture, and this is something that is not discussed a lot. I know we talk about it in the PSD. My favourite course and my favourite version of it was the original version that you and I qualified under back in the day—five day one. We had a good at least day-long discussion about architecture and the \"ilities\" and the need for architecture and the fact that we start at a high level and we work down, and architecture is part of the planning process and how you do emergent architecture without ending up with that famous house, the Winchester House in America, right? \n\nBecause we've seen products like that—what you're describing as a Winchester House process. Just a quick pause here—anybody who hasn't heard of it, get on your favourite search engine and have a look at the Winchester House. A fascinating story, truly tragic. A wonderful collection of follies and architectural stupidities because there was no overall design or intent with it. And so with a tool, particularly enterprise tools, we need to have architecture in line with the organisational process. \n\nSo we have to have freedom at the team level, but it's done in such a way that one team changing something doesn't by default impact and roll out. It's trying to find that Goldilocks spot between some central body going, \"Everybody must do it exactly like this—no freedom, no flexibility,\" and each team coming up with some change that then ripples out and corrupts every other team. Yep, exactly. And I've worked in a lot of organisations where that's true—that there's some local optimisation, and sometimes it's founded in business need, right? \n\nThe example I'm thinking of is when I worked at Merrill Lynch. They have the people who make the real money for the business are the trading desk folks. Everybody else is supporting them. At some point, some tool that somebody wrote inside of the organisation got installed on a trading desk platform, and it disrupted the core trading desk software, right? Which is a big no-no because that's hundreds of millions every second it's not working. That thing's going to be a problem. \n\nSo they instituted a rule that every piece of software in the organisation has to be validated on that platform. But now you've created a bottleneck inside of the organisation. For example, I was building a small application that ran on call centre people's desktops that popped the calls for them. It connected to a database, listed all the customer data, allowed them to change and enter custom data, and then popped the tap interface to call that person so that they could do their sales stuff for selling, right? Completely different. But we had to go through that three-month process of getting our software validated on that environment. \n\nAll it needed was any software going on these machines needs to go through this process, right? Yes, to firew—I remember a similar discussion when I was a software engineer at Nationwide Building Society. I got pinged a message from the security team that I was messing around with certain bits and pieces of the computer, which made sense given I was doing BizTalk development. If you've ever done BizTalk development, you will be familiar with this thing called the GAC—the Global Assembly Cache—where you put assemblies that you wanted BizTalk to consume. \n\nIf you're doing local development, you had to do some food, right? You had to do some dance, and of course, this flagged up and hit security like, \"This guy's messing with some really fundamental.\" It's like, \"That was a monitored folder.\" It's like, \"Yeah, yeah, I'm just doing what you're paying me for.\" But this can happen. So is a process or tool, Martin? This is where we're sort of heading towards. Do processes become tool-like in their manifestation? \n\nI think processes become tool-like, and I'm going to say this in a bad way if they're used like tools, right? A tool is something like a hammer. I don't alter the hammer in order to use it effectively in different circumstances. It's a hammer, right? The shape of the hammer is the way that the manufacturer intended it to be. Me modifying that hammer is not something I can't imagine 99.9% of people out there modifying their hammer in order to have a different outcome or to use it in a different circumstance. \n\nThere might be the odd occasion where tools have multi-purpose, and somebody's figured out some weird thing that you can use a tool for that works pretty well. But in general, the intended use for the tool is the use that you're going to use it for. If you treat practices like that—whether it's story points or planning poker, right? That's a practice—how to get story points. The three questions, whichever three questions you like, whether it's the daily scrum three questions or the sprint retro three questions, right? \n\nIf you treat that as a tool, i.e. this is how you're going to do things, this is the only way to get to this outcome, this is the only way to use this thing, then it becomes a tool and potentially inhibits. If you're using it in the wrong circumstances, the way you're saying that, I'm noticing a very strong parallel towards the process management tools that we were talking about earlier. Whenever we become too constrained in how we apply the tool, yep, when it becomes too locked in, it increases the complexity of the problem.\n\nI think this is one of the reasons we're both fond of Scrum. We're fond of the principles of agility because if you lean into the lightness of it, where we allow our teams to riff within the context and the boundaries of the framework, if we know what the constraints are and they can use the framework and they're allowed to experiment and play with that to find what works for them, when we start locking things in and over-mandating it, we then start limiting the capacity and capability of the teams to deliver, right? \n\nSo it's at that point, be it a business process, be it a tool, physical, virtual, whatever, we're then making the problem complex. The interesting thing is when you increase the magnitude of complexity, it very soon tends toward the boundary of chaos. If we're thinking of the Kanban framework, right? Because it becomes very, very unpredictable, and the manner in which we behave becomes unpredictable as well, right? \n\nIt's sometimes easy to do the same thing over and over again, and quite often the processes get codified in the tools as well, right? A good example of that for me—again, I, your DevOps user, not a Jira user. My claim to fame is I've never actually touched a Jira instance ever in my life. I think that's a pretty good claim. But I do play with Azure DevOps, and there's a thing that I see teams doing in retros all the time. There's a plugin for Azure DevOps called the retrospectives plugin, and it has columns where you add cards for what went well, what didn't go well, what do you want to improve, what do you want to keep, right? \n\nSo there's those columns, and then it has a way for people to vote on those items to surface what items do we want to talk about, do we want to deal with, and then it has a \"What are you going to do about it?\" page. The idea of that is great, right? It sounds like it's something that you want to do, but if you've been using it for the past 20 sprints, suddenly perhaps it just becomes a mechanical thing. It becomes just a tool, and there's no emotion in a tool. There's no connection to the scrum values. \n\nYeah, that's what I was looking for. There's no connection to the scrum values, and scrum itself can become a tool for organisations. There's a reason it's called the Scrum Guide and not the Scrum Rule Book, right? It's not—there is an organisation out there that sells their Scrum study book, and I think they've managed to get the four pages up to 208 and every something. Yeah, yeah, yeah. A massive—here's the Scrum Rule Book, right? Scrum body of knowledge, there you go. You want Scrum in a project-managed way.\n\nSo how do we—so we're saying a—let me stumble around and find the question here. We're suggesting that overly constraining means that business practices, tools, whatever, become more tool-like when they become mechanical in operation. We want to maintain empiricism and the ability to live the scrum values when we're doing stuff. What advice or what steps could you think of to help somebody if they find their organisation is becoming overly mechanical, like in Azure DevOps? \n\nThey've locked it down too far; you can't get this out, or they're using—they weaponised retrospectives, or everybody has to complete mandatory this or that, or even the reporting on retrospective output. I find a topic of concern because you might shut down openness if you know that the grand poobah of division X is then going to have a look at your retro output. \n\nWell, I—I, yeah, and a good example is also totally outside of the core agile space is procurement as well, right? Where companies have processes in place and treat everybody the same when not necessarily is that true, right? You end up with—that's the reason I've fallen in love with lean agile procurement because it applies the values of lean and agile to the procurement process. \n\nIf we create a discussion space, we can get through a lot of which has become very structured and template. I think you and I have both completed bids for multinationals where it took you the better part of three working days to fill out a 700-page—that's a mild exaggeration, but not by much. \n\nOn my current engagement, I've probably spent a total of at least 10 days on admin stuff. We need admin, right? There is a need for it, but how do we create that space where we can focus on the value delivery and reduce the bureaucracy? This is where I feel like there's a word that's used a lot in the agile space that people misunderstand, and I feel like I used to misunderstand as well, and that's the word \"emergent.\" \n\nWe talk about the processes and practices that we need emerge over time, right? We talk about that in the case of Scrum. We talk about it for everything, whether it's procurement, whether it's anything—your processes in software development, your processes and practices, and the tools you need, the processes you need—all emerge over time. I always used to think many moons ago that emerge means \"boop, now it's here,\" right? \n\nBut emerge also means the continuous shifting of that thing over time, that a process or practice might emerge and then go away, and that's part of that emerging. What you need emerges over time, and that idea of the constant shifting of processes, practices, and tools—what you need goes against that idea of we just have one thing, one way to do it, right? That's that imposed one way to do it. \n\nSo whether that's we're all going to use user stories, right? Or we're all going to use story points, or we're all going to use a hammer, and every problem is a nail, right? Or procurement, right? Everybody's the same. So when I'm filling out the vendor form, I have to fill out a delivery address even though I'm delivering it virtually. How does that make sense? \n\nOr, you know, whatever. I mean, that's a little thing, right? But that's part of that process. So how do you create those processes that are more dynamic, that take into account of that emergent nature of what you might need over time? But businesses are designed to codify the way you do things and then enshrine them and lock them in, right? \n\nYou've tightened up all the bolts, and now it can't move anymore. I think there's multiple parts in the way I would reflect back what you've said. I think the way you're describing the process is becoming locked in is very Taylorist. It's that whole concept of best practice that once—oh, hang on, that's just Homer telling me what time it is. \n\nSo it's Taylorist in the fact that we will achieve best practice, and this is the older predictive way of doing things. Because project management is an adaptive thing. Now, if we lock ourselves into a space of best practice or known way of doing things without allowing or tolerating processes to ebb and flow, it means our organisations are more robust. \n\nThis is the difference between robust, resilient, and antifragile. A robust organisation will be able to withstand the buffets of a turbulent world, whereas if we build resilient or antifragile organisations, they're more organic, and they will be able to adapt and change, responding to various stimuli. This means that they will have a process for deprecating processes, right? \n\nAs part of their adaptation, they can bin stuff; they can bring in a different process. They will be able to respond more quickly. I love the quote that the whole point of agile is to turn on a dime. For a dime, to be able to pivot, to be able to respond—that ultimate essence. But because agile's 25 years old now, roughly, it's now mainstream. \n\nIt's only the late adopters that are coming around to it. You know, there's a few pockets of our organisation where it hasn't been. The early majority have already hopped on board with agile, and it's now getting into the late majority, right? \n\nBut how do we bring in this concept of resilience, the whole antifragility thing of that empiricism, living the values? In response to your question, how do we do that? I think it comes down to having clear principles. If we have a good business strategy and good principles, then we just let our people be awesome within the boundaries of business strategy and core principles—not rules, right? \n\nThat's principles, not policies. Anytime you have a policy, you're enshrining one way to do something. When you have a principle, you enable people to make choices within the bounds of those core principles. It's like if we're designing a well-engineered piece of software. Many moons ago, I was a software engineer, so I sort of lean back to that. \n\nThose principles of, for instance, SOLID—writing good code that aligned with the SOLID principles—allowed you the freedom to find the optimal solution within your context, within your constraints that aligned with those principles to make it more maintainable, durable, testable, etc. \n\nNow that we've moved out of that, some of the object-oriented space, we're moving on from—we're into the world of microservices and architecture like that and DevOps. The rise in DevOps means we need to lean into the principles of automation, of faster feedback loops, of zero touch, right? But its principles give you elbow room. \n\nThey give you room to experiment, to try different things, to see if a slightly different way is a better way to do something. For lots of organisations, I feel like it's that—and I do definitely agree with you—is that Taylorist view, that turn-of-the-century Industrial Revolution thinking where businesses existed in very sparse markets, right? \n\nSo they could afford to say, \"Here's the one way we're going to do things,\" and build a business around that one way we're going to do things. But today, the markets are so competitive and so shifting that—there's—I can't remember what it's called. There's a name for when you've got too many species in an ecosystem all competing for the same niche, right? \n\nSome of those species are going to die out because they're not going to be able to adapt to—somebody's going to be better at it. Same reason that modern humans out-evolved the Neanderthal, right? We probably killed them off because we were the more aggressive, maybe more thinky, solving problems. Well, evidence suggests we interbred with them, but sure. \n\nBut yeah, that whole emergence, that responsive—as you were talking, I just kept thinking of that buzz phrase that's been around for a while now of VUCA—volatility, uncertainty, complexity. It also reminds me of back in the olden days, like when you're talking about this, the days of sail when the Dutch, French, Spanish, and English were chasing each other around the world's oceans, colonising and pillaging and destroying the world. \n\nThe British quote for Friday was, \"A willing foe and sea room.\" It's interesting that that style of leadership, where once they were out, if they were out in their ship, they decided there was a lot of freedom and latitude, but there were some core principles that guided it. If we can think of creating a space of autonomy based upon a direction and principles within our teams and enabling some clear boundaries, I think this is the thing most organisations really struggle with. \n\nWhat are the constraints and boundaries of your tooling, of your process, of your communication, of your problem space? If we can nail that, then we can do it. Because according to the Scrum Guide, the team has flexibility to choose tools that help them the most. So they should have a mechanism to choose a different tool. But that sounds hard, Simon. \n\nI think it was Teddy Roosevelt who said that nothing worthwhile in life is going to be easy. It's hard to come up with principles because you're thinking about what is the core thing that I'm trying to achieve. Whereas it's much easier to just say, \"Here's a set of rules that you have to follow,\" not why you have to follow it or what you're trying to achieve as the outcome. \n\nIt's also much harder to check against principles. It becomes very nuanced. It means you actually have to talk to people. I am concerned about your compliance, or I'm concerned about how you're enacting this particular principle. I don't think you are. Let's discuss this. It means that our leadership style must become more collaborative. It must become more intent-based.\n\nBecause you and I could both enact a core principle—say we're talking about the principle of transparency. You and I could both enact it in slightly different ways, both honour it within terms of our context, but it would appear radically different. So it would require a conversation, right? Intent-based leadership—if anybody's confused by that term, have a read of a book called \"Turn This Ship Around\" by David Marquet. That would lead you in the right direction for what they mean. \n\nIf you can't be bothered reading the book because you're not a reader, there's also a 15-minute YouTube video that also—yeah, and also, yeah. There's a huge—like US military created some good things thinking in this space. General Stanley McChrystal, \"Team of Teams.\" Jocko Willink and Leif Babin with \"Extreme Ownership\" and followed that up with \"The Dichotomy of Leadership.\" \n\nDavid Marquet, \"Turn Your Ship Around.\" You know, there's some good thinking in this space. More recently, there's also a bunch of stuff around red team thinking as well, which I think brings into that space too. Yeah, it's a lot of it is principle-based and the need for adaptation. When you're in the middle of nowhere with no ability to get help from anybody, rules don't help, right? \n\nYou need the principles to have the freedom to make decisions within the bounds of those principles so that you can be the most effective you can at whatever your mission objectives are. Be clear upon your mission and be willing to adapt. I do always—I have a thing that I say. I'm actually looking for you to correct my saying. I was always asked people, \"When did they believe that the military stopped believing in command and control?\" \n\nMy usual answer is when Napoleon defeated the Prussian army. Napoleon was the first military leader who pushed responsibility down the organisation. Whereas in the Prussian army that he was fighting against, the soldier on the battlefield had to ask a sergeant, who had to send a runner to the lieutenant, who had to send a runner to the major, who had to send a runner to the general, and then all the way back down the chain to get the answer to what should we do next. \n\nI would suggest there are many, many instances of that still being the predominant way of thinking a lot of the time. The Special Forces definitely have more freedom, you know, the elite units. But you have a look at the history. We got a big danger of digressing here. Sure, that's the whole reason that World War I turned into such a meat grinder is that it was the people hiding in Berlin and London putting some stuff around the map and not enabling free thought. \n\nThe whole reason that the disaster of the Gallipoli landings and the failure of that was because a general decided halfway up the hill that the ANZAC could have taken the top of the hill, fortified, and then pushed through. But some clown decided it was time for a tea break halfway up, which gave time for the Turks to reinforce. You've got immensely capable servicemen on both sides, but then just basically dug in. \n\nAll I'm thinking about when you're saying that is Blackadder, Simon. That's all I'm thinking about—that arity of that going over the top in the trenches. Oh yes, you forgot your stick. Ah yes, I'd hate to face a German machine gun without my pointed stick. Thank you, Baldrick. Yes, exactly. \n\nLet's bring it back to the topic. Tools adding to the complexity. So basically what we're saying—and we went on a flight of fancy, as we tend to when we both start discussing. What we arrived at is it is possible to use a physical, virtual, or business process as a tool that increases the complexity, that boosts the amount of effort you and your team have to expend to be able to achieve sometimes even the most simple of tasks. \n\nBecause it's just unnecessary, unworldly, painful, etc. So people will either not use that process tool, and you'll then end up with stuff off the books. What we're saying from that is the more efficient and effective way of helping teams achieve greatness is by tapping into core principles. Much harder to do, but it enables more latitude and freedom within clear constraints. \n\nIf so, there's then—maybe this is a good segue into that idea of autonomy versus alignment, right? Generally, alignment is often fulfilled through tooling, right? People align through tools. If a practice is built, it becomes a tool, right? How do we tell the difference between alignment that might hinder the team a little bit at the lower level? \n\nThey've got something extra to do that is needed in order to be all going in the same direction versus the things that people come up with for us to do at that level that just hinder for little or no perceivable value or outcome, right? How do we tell the difference between those two things? \n\nI got to fall back to my natural Scrum Master stance and just ask the team, \"Is it helping?\" They don't make it harder than it has to be. This is what we're saying—don't overcomplicate an already messy and complex situation. Ask people if it's helping, and this is where alignment of a purpose is so important. \n\nYou know the apocryphal story of JFK visiting NASA, and he bumps into a chap mopping the floor, and he goes, \"What are you doing?\" And he goes, \"Me? I'm helping put a man on the moon.\" You know how many times have you worked with people in a team where they don't understand what the business strategy is? They don't know the guardrails of their technical strategy. \n\nTo quote Lewis Carroll, \"If you don't know where you're going, all roads will get you there.\" Yeah, or if you don't know where you're going, how will you ever get there? Well, yeah, and the thing is if we don't know where we're going, you've got different people. You've got explorers who just can't wait to get over the next hill. It doesn't matter whether it's in the right direction as long as it's a cool and interesting hill. \n\nThen you've got other people who will not do anything unless there's a clear direction, so they just set up camp and then dig in. So you end up with this—basically, you create a diaspora within your organisation where people are just going off doing random stuff because you haven't put that clear direction down. \n\nSo we need a purpose, we need a strategy, we need a direction, we need ruthlessness on value. This is where we should be using evidence-based management, good leadership principles to do the hard work and define and work with your people to say what the values of your organisation are, what your strategy is, and what principles you're going to use to get there. Because then people can find out whether they want to be in or out of the boat. \n\nWell, even not just the values of the organisation, but what does value mean to the organisation? What does it mean to the business? Yeah, I very rarely encounter an organisation that already—and we're probably jaded, Simon, in that companies that are doing awesome at this don't call us for help, right? \n\nWell, they've got it in spades, right? But the thing is that it's that great quote from Band of Brothers. They're going into Bastogne, the regular infantry going out, and the paratroopers going in. A chap coming out says, \"You're going to the Germans are coming from everywhere. You're going to be surrounded.\" He just looks at him and goes, \"Son, we're paratroopers. We're meant to be surrounded.\" \n\nIf you, as a consultant, as a coach, are not comfortable in going and helping a client who will need help, you've picked the wrong job. Yeah, absolutely right. So I know there's a lot of organisations out there that are smashing this. There's a lot of organisations out there that have really good principles that are making it easy for people to thrive. \n\nI'm reading \"A Year Without Pants,\" which is a story about WordPress. Great book, great read. WordPress were founded on this whole idea of just getting awesome people to be awesome, and virtually from the start, right? One of their core founding principles was open source—that everything they did, people could copy and fork and spike and do whatever they wanted with that. That fundamental ethos of community-based development flipping it into a business enabled really super smart people to solve a very tough problem in an innovative and creative way. \n\nSo yeah, great call, great shout-out, great reminder, Martin, that there are some wonderful examples of this out there. But you and I quite often only see the companies that are not doing so well at this because they're the ones that call us that need help. So our view is a little bit—if somebody asks us how many organisations do you see that are being successful, the answer is not many because the many that are are not the ones that need our help, right? \n\nWell, I've had some very short engagements where I've gone in and people have said, \"How are we doing?\" I go in and again, \"You're doing great. You don't need me.\" I always find if this was specifically a Scrum engagement many years ago, but if the customer says, \"We're doing awesome at Scrum. We don't know why we need your help,\" then you know it's going to be a total [___] show when you get there. \n\nBut if they say, \"Well, we're trying to do some stuff. We think we're doing okay. We're not really sure whether we're actually adding value. We need some extra help,\" then usually they're doing a lot better than they think they are because they've realised that they know less than they know. And yeah, there's a principle of learning that they're demonstrating, right? They're open to the understanding that they don't know everything. \n\nWhereas as soon as a company or people in the organisation are of the attitude, \"Why do we need to change? Why should we change?\" There's no interest in change because obviously the way we're doing it right now is the perfect way. And that's where the way we do things becomes a tool. So, \"Woody, woody,\" that's the way we've always done it. That's the way we've always done things, right? \n\nGet off my lawn is also a right—it's so easy to keep doing things the same way that we've always done things. It takes courage and openness and respect to do things in a different way where we might have friction, we might have difficulty. Things are not where we think they need to be in order for us to function at our best. But in doing that, in going through that journey, we discover a new way of doing things, a new way of working that can often be more valuable than what it was before. \n\nAnd I think you, on top of all the things you called out, it is going to require work. It's also going to require effort, and it's going to require some architectural thinking of where do you want to go and what are the boundaries that we need to emerge within together. \n\nSo we can apply the emerging principles of agility to our tooling, to our business processes, to the way we collaborate. But it's going to be a graft, right? Yeah, it's super hard. There's a lot of—it's a lot harder to do the right thing for the right reasons than to do the wrong thing for the wrong reasons, right? It's easy just to follow that, \"Well, this is the board we have. Everybody needs to use the same thing,\" or \"Everybody needs to do story points because then I can look at anybody's backlog and I know what it looks like.\" \n\nI know what it should look like. I know that pattern in my head. It should have, you know, as I want. So that—and as soon as it deviates from that, oh, my favourite one—my favourite one, Simon, this was from years ago. You'll like this one. This is Scrum becoming a tool or a thing becoming a tool. I worked with an organisation where the Scrum Master had just been fired when we got there. This was back when I was working in the US. \n\nWe went in, and we were trying to figure out what was going on. The Scrum Master had told the team that they're not doing Scrum, and he told them they weren't doing Scrum because they were not standing up during the daily. Let's put aside the fact that stand-up is not part of Scrum. Stand-up is an XP thing from 20 years before, right? But that's what the Scrum Master had said to this group. \n\nWhereas this group had decided as a group—the team had collaborated and decided that they didn't want to stand during the daily because they'd be towering over the disabled person in the wheelchair on their team, which makes perfect sense, right? And which, you know, is the very definition of self-organisation and fulfills the values of Scrum. But somebody coming in and thinking of Scrum as a tool, \"Thou shalt use it this way,\" cause that—and that's a really bad example, right? \n\nBut there's lots of smaller examples that have less overall impact, but it ends up being a death of a thousand cuts of making—we see these posts all the time at the moment, Simon—that \"I hate Scrum because...\" or \"Scrum is a cancer,\" because posts that you see around at the moment. Usually, there's a list of, \"Here's why I think this,\" and none of it is Scrum, right? None of it is Scrum, right? None of it fulfills the values of Scrum. None of it even fills basic rules of Scrum, right? \n\nIt's without—this is something I'm very fond of saying and shouting from the rooftops: \"Scrum without the values is a brutal tool of management and oppression.\" I would 100% agree with that, and that's the people hate mechanical Scrum for good reason. It's being weaponised and used to thump them with, whereas professional Scrum is founded in values, founded in empiricism. \n\nI think that's the point—that a tool used badly will wreak havoc, whereas a tool used well will help humans achieve greatness, right? If I use a chef's knife in the kitchen, there is a probability, depending on the day, that I might make a decent meal, right? It could be dodgy, just depending on what I'm fancying I'm following. But if I take that chef's knife away from the kitchen, it's very rare it'll find an appropriate use in the lounge room, right? \n\nYep, and it's that whole thing of using a knife as a screwdriver or, you know, a hammer to—yeah, yeah, yeah. You know, it does not usually end well. Knife, no. So you might have bent the tip of the knife, and it'll only let you use flathead screws, not Phillips head. Or you're not jamming it in hard enough. Oh, okay, so probably I should go and get a sharper knife at that point, right? \n\nYeah, exactly, exactly. I wonder why I cut my—how did you cut your hand? Well, you see, I put a screw in. What? Yeah, I think that's the overall essence of this topic, right? To tools—things that are tools and were designed as tools are often suited for a specific job in a specific circumstance. Using them out with that often has substandard or even negative results from using that tool, that capability. \n\nOften, we turn things that in other circumstances wouldn't be a tool into a tool by focusing only on the mechanics of the thing rather than focusing on the values and principles of the context within which we're working, right? So, yeah, that—to be agile, actually. See what I did there? Needs to be founded in values, and we need to really think about how we're living empiricism, being transparent, and inspecting and adapting. \n\nBecause there will be an edge case where we will take a tool of one context, apply it to another, and it'll be an innovation. Awesome, go! But also be willing to run it as a hypothesis and go, \"If we try this, this will happen.\" And if it doesn't, if we don't get the expected results, your hypothesis has been proven faulty. So just be it. So values, principles, mindful application, focus on value—let your paper flourish. \n\nYeah, that's absolutely—that's what folks should be doing. Cool. Well, I think we've done a nice little loop. I think there's a lot to think about in what we talked about. I think there's a lot to unpack for many folks. They might see tools in the practices that they're doing, but just think about the context. Bring in the context, bring in the values, bring in the principles, and see if it still suits the situation that you're using it in. And maybe you need to adjust the way you do things in order to be more effective. Be agile, actually."
  },
  {
    "id": "8gAWNn2RQgU",
    "title": "Why do you trust Joanna to deliver Scrum.Org classes for NKD Agility?",
    "description": "Discover why Martin Hinshelwood trusts Joanna as a top Scrum trainer for NKD Agility. Elevate your team's performance with expert guidance! #Scrum #Agile",
    "captions": "Joanna is one of the most competent trainers in the ScrumDog space I've ever worked with. I think part of it is her background; she has deep technical expertise, a PhD in robotics, which puts the rest of us to shame. \n\nBut she just has this way of communicating, and the way she cuts through the BS in classes is just amazing. She has this great way of communicating, and her knowledge and depth of understanding of agile leadership, user experience, and all of these tools and techniques that we talk about is just beyond compare."
  },
  {
    "id": "8nQ0VJ1CdqU",
    "title": "Why did so many of the early agile transformations fail?",
    "description": "Discover why many early agile transformations failed and learn how to achieve success in your organisation with insights from Martin Hinshelwood.",
    "captions": "So the question is, why did so many of the early agile transformations fail? I think a better question is just, without the early part on it, right? Why do so many agile transformations fail? Because the early ones failed for the same reason as they do now. \n\nThat's the people who are doing the implementation are not involved in the process of deciding what we're implementing. Right? That's why it fails. Because your leadership decides we're going to do it this way, and everybody else goes, \"Okay, but that's the wrong way.\" Suddenly, they're resistive and unhappy because they feel like it's imposed upon them. \n\nIf you know that old saying, \"If I'd been asked, I would have...\" right? They would have said to do something different. You get that through organisations, and it can be agile transformations, it can be digital transformations, it can be just changing something, right? \n\nThe top-down command and control triangle model in alpha organisations, right? Where you've got the people at the top making the decisions and the people at the bottom doing the work. All the decisions are made at the top, and we steer the rest of the organisation based on those decisions. You're always going to get into that situation where the people that you need to do the stuff don't want to do it because, in this context, they're smarter than you are. \n\nThey have more information, they have more understanding, and they perhaps have more skills in that space. So they're the ones that should be involved in driving it. I think there's been a lot of good work done by open space agile and specifically, as well, on top of that, open space beta to allow methods and systems to be created, a practice to be created that allows you to involve everybody in the organisation in making those decisions. \n\nIf you involve everybody in the organisation in making those decisions, then even though it might not be the decision that they would have made if they were sitting there on their own, right? Because they were involved in making that decision, they feel like their voice is heard. If they feel like their voice is heard, they're more likely to get behind whatever the ultimate decision was because it's a collective decision, right? \n\nDecentralisation and democratisation of the ideas, and then they'll be supporting and helping with the transition as you move forward rather than getting in the way and hindering because they just don't care, because you didn't ask me anyway. \n\nThat's what I think is why agile transformations fail, and I think it's just as true today as it was in the early days. It's just in the early days, there was a small number of high-profile agile transformations, and today, there are hundreds of thousands of actual transformations going on."
  },
  {
    "id": "8PViHnzs_-s",
    "title": "Free Workshop 07 - Commitment in Scrum, what do we commit to and why",
    "description": "Join Ana and Martin in an interactive workshop exploring commitment in Scrum. Discover what we commit to and why. Can you commit? Sign up now!",
    "captions": ""
  },
  {
    "id": "8uPjXXt5lo4",
    "title": "What is the most valuable thing you have learned through training people?",
    "description": "Discover the key insights Martin Hinshelwood gained as a scrum trainer, transforming training experiences in agile environments. Join the journey!",
    "captions": "So the question is what's the most valuable thing I've learned training people? I think it's that there's two things that are kind of related. One is no matter where you are in the world, everybody's got the same problems when they're implementing Agile, when they're trying to do Scrum, when they're trying to think about the implications of empiricism and a value focus on their organisation. Everybody runs into exactly the same walls. Everybody runs in Texas; they think their walls are unique, but everyone runs into the same walls.\n\nBut the value that I find for me is I love the engagement that I get in multicultural, multi-time zone, multi-country training events much more than I do from single country events because I feel like there's a little bit of echo chamber in a single country event that there aren't as many different ideas generated. I think it kind of demonstrates that value in globalisation, right? You're teaching a class and you've got, you know, even five people from the US, five people from the UK, and they're bouncing off each other. Then that one student that's from Eastern Europe will say, \"But what about this type of thing?\" Oh, never thought of that, right? Because it's not even within their sphere of experience.\n\nAnd those ideas coming in, I think, helped me appreciate the diversity of cultures, but it also results in a better training experience for the students because they get more conversation, more topics, more—disagreement's not the right word—but more ideas coming in there. And for me, that's the most valuable."
  },
  {
    "id": "8vu-AXJwwYk",
    "title": "How much of an impact can a great agile consultant have?",
    "description": "Discover how a skilled agile consultant can transform your team's approach to product development, navigating complexity and driving success in uncertain environments.",
    "captions": "Foreign\n\nHow much of an impact can a great ideal consultant have? I think they can have a huge, huge impact because they're not an agile consultant. A consultant tends not to be interested in hanging around. That's the difference I feel between consulting and coaching. A coach is going to be there all the time, but a consultant can't be there all the time. Usually, one, because they're more expensive, right? So the company doesn't want them hanging around for too long. But really, the consultant is doing that deliberately, right? If the company wants you around full time, you're not expensive enough. Because you want to be coming in, helping them with very specific problems. They're the ones that are going to be fixing the problem. They're the ones that are going to be doing the work. You're giving them things to try or perhaps...\n\nOne of the things that I've done quite a lot with organisations is, I guess I call it the state of agile report, right? And what is the current state of the way things work inside of the organisation from the perspective of agile? And what are the things, like what are the top three things that the organisation should focus on improving? And so I'm not necessarily there to solve any of those problems, right? I maybe come in for a week or two weeks. I'm going to interview 20 or 30 people in the organisation at all different levels, ask them questions about how they work, how they figure things out. And you get a lot of answers that are contradictory in that story, right? Because you get the people actually doing the work saying, \"Yeah, we don't really write unit tests and we don't really have automated builds.\" But then you speak to leadership and they're like, \"Yeah, we've got continuous delivery and we've got all these unit tests coming out of our ears.\" And maybe we've got too many unit tests. And there's a fundamental disconnect there because leadership and organisations will often say, \"I've heard in my leadership grapevine that we should be doing unit tests.\" And then the teams feel under pressure to do unit tests, so they'll just tell them that they've done unit tests because maybe the product that they're working on is absolutely impossible to do unit tests. But it's not possible to have that conversation with leadership because there's not an open and transparent relationship going on there in the organisation.\n\nSo being able to find and identify those problems, figure out what it is that... Oh, and these are big things that need to change, not little things. They're not subtle things like coaches come in and fix subtle things and work on the bigger things over a longer period of time. But that often takes too long because you're going to put that out there. It takes too long. What you want to be able to do is go into an organisation, see a switch on the wall that at the bottom it says \"not continuous delivery,\" at the top it says \"continuous delivery,\" and you want to figure out how do I flip that switch? How do I just turn that on? How do I just fix this problem? And quite often, you're not always going to be right. And I always, when I go into organisations, I'm always explaining that, right? I'm saying, \"I'm going to give you things to try. They might not work for you. They maybe have worked in other places, but things to try.\" And they try them, and either it works for them or it doesn't, right? And then they can come back and say, \"Well, we tried this and it didn't work, but it worked a little bit, right? So what else can we do to figure this out?\" And that's that consulting moment that I think coaches do as well, right? But this is just taking that piece off and saying, \"Let's just do this piece.\" Because I feel that organisations and leaders in organisations, people and organisations need to own that problem themselves. They're the ones that's their organisation. They're in the crap that they're in. They need to deal with figuring out how to get out because if you get somebody in who's given accountability for changing that problem but isn't really part of the company or doesn't really understand the company, it can be very difficult for them to affect change. And that's why it takes longer because then they have to build all of those relationships before they can change.\n\nBut quite often, when you come in as a consultant, you're not worried about being fired, right? That's the first thing because you've got another gig next week and you're not coming back. You might not be coming back at all. So you can just be absolutely brutally honest in your reporting and say, \"This is what's going on in your organisation. This is why it's broken. These are the things you're going to need to fix. I recommend you go find a coach and help you fix this thing.\" But then they know that's what they need to fix. They have it in the front of their mind and they're potentially thinking they can see that switch in the wall and like, \"If we could just flip that switch,\" and they're figuring out more things to do. And I think that's why I think that great consultants can be more valuable than great coaches because their focus is on flipping that switch as quickly as possible.\n\nAnd flipping things quickly, like ripping the Band-Aid off, right? You don't want to peel it slowly because that's going to hurt more. You want to just rip it off, do something different, and deal with the fallout of that bigger change. And I'm going to say, \"Well, it depends,\" right? That's why you need a great consultant because the great consultant is going to be able to go, \"Yeah, you want to slow change that one and you want to fast change this one,\" right? Because if you slow change that one, it's going to be a problem. And if you fast change this one, it's going to be a problem. And that's... things that people feel are unique to their organisation, but they're really not.\n\nOne of the things that I always find really interesting is every single consulting customer I've ever worked with has said, \"We have these magical unique problems and we need your help with them.\" And I go in and their problems are not magical and they're not unique. They're the same problems that everybody else is having. There's little fine nuances of difference, right? But the big problem is the big problem that everybody's having. And part of that comes from a Taylorism to Volatism, right? So from a traditional hierarchical Industrial Revolution thinking focused on things changing to a democratized self-organisation, distributed thinking focused on people, right? So those are the one of the two big bridges that need to happen in organisations. But there's lots of other things that are small that they can do within those structures that will enable them to do better, right? But you've still got those big problems that are the same everywhere because everybody's trying to do this decentralized self-organising teams, but they're in a hierarchy with steering and leadership and control from the top. And they're just... but they're mutually exclusive, right? You can get a little bit of this inside of this, but you can't get all the way over here where people want to be, where they see the biggest benefit in what they're getting.\n\nSo I feel that's the value of a consultant, is being able to come in and quickly identify and point at things that need to change. And a lot of these things are really obvious when you come in from the outside, but they're not obvious at all when you're inside of that story. And having somebody come in and do it... I'll point out also quite often I come in and the sponsor for me coming in says, \"Here's the things we'd like you to tell leadership,\" right? Because they already know what the problem is, just nobody's listening to them. And they need somebody else to come in and say, \"Yes, this is indeed a problem that you've been told a whole bunch of times.\" And I'm only going to do that if those things are actually true, right? If I'm going to look and see. But it's really valuable to have somebody with knowledge and experience coming from the outside that's maybe recognised inside of the organisation in that traditional hierarchy to help make that start making those changes across to the other side of the wall."
  },
  {
    "id": "96iDY11yOjc",
    "title": "How big is the gap between an average developer and a great Agile Developer?",
    "description": "Unlock the secrets to becoming a great agile developer! Discover the power of self-investment, practice, and continuous learning. 📚💡✨",
    "captions": "So the question is how big is the gap between an average developer and a great agile developer? I think there's two parts to that, but the main part that I think is really important is, um, I read a blog post years ago and I was sitting reading it, and the first sentence it started with was about this topic, right? What makes great developers? What's learning? All of these kind of things. And the first sentence was, \"If you're reading this, you're already in the top 10 percent.\" And that was what it said of the first sentence because so few people are really engaged and care about the work that they do, that they're willing to go invest and investigate and figure out and solve and try stuff and fail and pick themselves up and try again, right? \n\nAnd this is true regardless of whether we're talking about our skills with people, with process, right? So those are those agile group of skills or product management or whatever it is. But it also includes the technical, right? In the detail, in the weeds, and how you actually do the work that you do every day that is irrelevant to the system with which we're working. And I think that is the fundamental difference between somebody who is average at doing their work and somebody who is great at doing the work: the willingness to learn, willingness to adapt, willingness to try things, investing your own time and making yourself better, right? \n\nUm, one of my favourite folk in the world, David Starr, who originally created the APS Applying Professional Scrum class back in the day, had this thing that he always said: \"What do martial artists and musicians have in common?\" Right? What do martial artists and musicians have in common? And they're so different that people are usually like, \"Well, I don't know, what do they have in common?\" They practice. \n\nWhen do we get practice? When do we come off actually performing, right, at the concert, making the production code? And when do we get the time to practice? When we get things to try, different things to try, new things? That's actually, for me, I feel like one of the powers of training classes—not maybe the PowerPoint training classes where you basically fall asleep and your brain dribbles out your ears watching a PowerPoint presentation—but what I try and do is bring in some of the ideas of flipped learning, right? So I provide you with effectively, \"Here's the content I'm going to teach you in day one,\" right? Go read it. \n\nIf you read it, I don't need to tell you it; we can then talk about it and practice it in the live session where we are together because everybody reads at a different pace, everybody learns at a different pace. Perhaps you could spend some time reading that content and then we're going to answer the questions, we're going to dive into the nuance, we're going to figure out how that works, we're going to do some exercises so that we can maybe practice some things. That's the value of all being together, not in reading some content off of a slide. \n\nSo I think that that learning, interest in learning, is what makes it really powerful. And I do have a customer that leverages this, um, and they actually provide their developers, everybody in their company, with a budget of about five thousand Euros a year for training. And you spend it how you like. It's up to you what training classes you want to book, what you want to learn. Perhaps you just want to go do an NLP class because you aren't very good at that stuff and you want to understand it better. Perhaps you do some cognitive behavioural therapy classes because that's what you feel you're lacking. You can pretty much do anything you want with that budget. I'm sure they might frown if you wanted to go on a paper airplane making class, but the idea is that you, as an individual, know what you don't know, right? You kind of know what you don't understand, you know what you need to figure out, and the person best suited to direct the learning that you need is yourself. \n\nIt also has the huge benefit that it's opt-in, right? It's self-service. So the worst type of learning is mandated and forced learning. People generally don't pay attention, don't care as much, and don't participate. But if they pick it themselves, they're generally more eager, more engaged. And that's the difference between the average developer and the great agile developer: engagement, practice, focus. That's what it is. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "9CkvfRic8e0",
    "title": "Connecting Release Manageer to TFS 2013",
    "description": "Learn to connect Release Management Client for Visual Studio 2013 to your Team Foundation Collection. Discover more at nakedalm.com/blog!",
    "captions": "I'm going to configure release management to use a new Team Foundation server. So I'm going to go ahead and open the release management client. I'm going to head over to the administration tab, and on here I've got a manage TFS options. Let me go in there. \n\nSo you can see we already have the Faber cam fiber collection added. I'm going to add the Tail Spin Toys one. So if I click new, I can just put in the name of the server here, or I can put the full URL. You'll see that it kind of builds the URL down at the bottom; you can see at the top as well. I'm going to put the collection name in, which is Tail Spin Toys collection. \n\nAnd you'll see here I've got the default path and port number, and this is just all on the default setup, and it's local to this box, so I shouldn't have any communication issues. However, if I hit the verify button, you'll see I get a common error message box pops up, and this box gives you possible reasons for the communication problem. One is you filled it out correctly, or the TFS server is unavailable, and the other one is that the password is incorrect, which is the case here. \n\nI have no connect as account name and password in, so I need to go over here and I need to fill out my user. Let me just check name; there we go, and my password, and click verify. Now, if that still doesn't work and you don't get a green tick, you might want to check obvious things like the spelling of your server and collection name and whether you can access those things. \n\nThe easiest way to do that is to copy this URL, open it up in a browser, paste it in, and see if you can actually access it on that URL. Indeed, it can be much easier to get access to it than just copying it off, and I can make it easier. So now that we have that, I can hit save and close, and I now have two active TFS connections."
  },
  {
    "id": "9gVxeQg9Ksg",
    "title": "Discovery Martin Hinshelwood nkdAgility com Angelos Karastergios",
    "description": "Join Martin Hinshelwood and Angelos Karastergios as they explore the innovative world of nkdAgility, uncovering insights and strategies for agile success.",
    "captions": ""
  },
  {
    "id": "9HxMS_fg6Kw",
    "title": "What are some big red flags when hiring an agile consultant?",
    "description": "Discover key red flags to watch for when hiring an agile consultant to ensure a successful transformation from traditional project management.",
    "captions": "So what a question was: what are the red flags to look for when hiring an agile consultant? I think the biggest red flags for me are not engaging in the community, not being part of some group or community or effort where they're sharing their ideas with others, having ideas of others shared with them, and working in that kind of melting pot. There's nothing better than being part of an agile community, which I'm part of a few, and seeing something and you immediately get piled on for saying something so ridiculous that it's not really people aren't deliberately piling on you, right? Because they're agile, it's just, you know, you send them a message and all of them are writing a response at the same time because you've poked at something that maybe wasn't the best thing to pull at. \n\nAnd that gives you, I don't know what the right word is, is it humility? For you're not always going to say the right thing, you're not always going to be able to do the right thing, you're going to say stupid stuff. And you have to be able to take being called on saying stupid stuff. Sometimes it's okay to say stupid stuff because if you don't say what you're thinking, if you don't feel safe enough to say what you're thinking, how would you possibly be able to learn that there might be a different way of thinking? \n\nI think that's one of the key things because there are so many consultants who are not part of any agile community. They just have that echo chamber of their organisation or their consultancy, and there's not anything more information coming in from outside. Having discourse, right? Being able to articulate the core concepts in agile. So I'm thinking empiricism, I'm thinking lean. You need to be able to articulate them in a way that they are able to be understood by the other person within the context of that other person rather than just regurgitating something from the scrum guide that says, \"Well, XYZ,\" right? \n\nYou need to be able to say, \"Well, you know, the scrum guide says this because it's trying to achieve this idea. If you can achieve this idea in a different way inside of your organisation, then maybe that's okay.\" Being able to articulate those things, I think that's key. So that's just a fundamental lack of knowledge, right? That's really it. I think it's actually true in all consultancies, but I'm going to be very specific here because otherwise I'm going to piss off everybody, right? \n\nThere's a difference between a boutique consultancy which specialises in a particular topic, hires people who are experts, known experts in that particular topic, and encourages them to become better experts in that particular topic, and our \"butts in seats\" contracting consultancy who are really only interested in how much money they can make out of the customer. They get into this vicious cycle, right? This is the thing to watch out for in consultancies as you get into this vicious cycle of, in order to stay afloat, we need to win more business, right? \n\nWe're the consultants who say we need to win more business because we've got people that are in the company that need the work. Then you have experts and you have all of these high ideals with the customer, so lots of customers buy your stuff, and suddenly you don't have enough people on the bench to service the gigs that are coming in, right? The gigs in your pipeline. So then you have to go find people who can do those gigs, but we can't wait for those people; we need them now. \n\nSo we're taking the people that are available, not the people that are right for that gig. They're not bringing in people because of their knowledge and skills; they're bringing in people because of their availability. And then you get into that vicious cycle of, now we've got more people, and they roll off a gig onto the bench, and we need to sell more to get more stuff rather than... I mean, it's even worse for an agile consultancy not to do this, but having a lean outlook, right? You don't take on more work than you can handle. You limit your work in process so that you're playing the long game, not the short game of revenue extraction, but the long game of value creation and building relationships with your customers and not pissing them off. \n\nSo for me, those are the two big pieces: the actual individuals and the knowledge and capability that they have to understand agile, articulate it, explain it, and work with it, and work with other people in the agile space, and that bigger consultancy model of the... I call it the death spiral, right? Because there's no way out of that if all you're focused on is, \"I need bots in revenue extraction mode.\" Then you're not going to serve your customers, right? For me, that's the two big things."
  },
  {
    "id": "9kZicmokyZ4",
    "title": "The Importance of Evidence-Based Management in Agile Environments",
    "description": "Discover 5 compelling reasons to adopt Evidence-Based Management in your Agile environment. Transform your approach and drive measurable success! #EBM #Agile #Shorts",
    "captions": "You need evidence-based management in your environment so that you can understand and measure the impact of the changes that you make to your system on your overall ability to be successful. We're here to deliver value to the business in whatever shape or form that takes. We need to be able to measure it so that when we do make changes to the system, we can see whether we've been successful or not."
  },
  {
    "id": "9lBvhLXW8xY",
    "title": "Update Youtube Video Pages",
    "description": "Enhance your YouTube experience! Discover the latest updates to video pages, featuring improved navigation and user-friendly design. Watch now!",
    "captions": "Okay, so we're going to update a video. I have pre-prepared an issue on GitHub. What you do is you just click \"New Issue\" when you get here. Put the title in, add the copy as markdown. You can just paste from Word, and then you'll have to make it look like markdown. Here's one I prepared earlier. I've got the video ID because that's where we're going to find it. I've got the new title, I've got the old link, the current page. I just pasted that in, and then I added the copy in here as markdown. \n\nSo let me edit that. There's the copy. You can add links and stuff in there. You can do all of those things, and they'll copy across. What's more interesting, if you're internal linking to other posts that are the same, we need to have a conversation about that because there are ways to do that to make it work nicely. \n\nBut what I did, what I didly did, was I created a new workspace. I created a new branch. So over here, there was a button that said \"New Branch.\" I clicked it. I just created it locally, and it said, \"Do you want to open?\" In fact, let's delete that branch just now. Delete. It's gone. \n\nOkay, so here's my content. I'm going to create a new branch. It's going to create a default name for that branch, and I'm going to say \"Open in Codespace.\" So I'm going to create the branch, and I think I'll need to copy that because I think it'll open in this window, and I still want a copy of this so I can go back to it. \n\nSo now it's opening. A Codespace, what it's doing is basically it's a virtual machine in the cloud. It's getting your code, the code for the site, getting it locally and building that environment. You just wait for it to open. You can see on the bottom left it says \"Opening remote,\" and there it is. It's ready. So it's built. It's going to do some jiggy pokery behind the scenes while we're doing some other things, but it should be all working. \n\nSo what I need to do is I need to find where this video is. If you remember, I used this code for the pages. So all of the code for the site is under \"site.\" All of the content for the site is under \"content.\" So there's capabilities, company outcomes, resources. Okay, so that's all the content for the site. Don't worry about these ones; these are for... yeah, don't worry about those ones. \n\nSo I'm going to open up resources, and then I'm going to open up video, and then we have a folder called YouTube, which is where these are automatically added. You can see it's got all the YouTube IDs, so I need to find one, 1886. So if I just go down, 1806, there it is. And I can see it's got the data file, which is the stuff that got exported out of YouTube, and then it's got the built content file. \n\nOkay, so this is it here. What we're going to do is we are going to do a couple of things, but let me walk you through this file. So this is the original title, and you'll notice you put a dot in the title on YouTube, so it pulled it in here, and it means that we've got this extra little dash on the end there to represent that dot. So that should all work. \n\nI've already added this to the aliases in preparation for us setting this up. So there's a few changes we need to make here, and we need to update the copy. So let's get the copy first. I'm going to edit this. Here is our content. I'm going to copy that markdown, go over here. If you've got markdown in ChatGPT, it will output markdown, and you can just stick it in here or ask whatever tool you're using to create it as markdown. \n\nSo we're going to replace this content here. So I'm just going to do that, select it all, boom, there we go. I've updated the file with the new content. I keep this; this is the video link. That's what renders the video at the top. You could put it there; that could look good. The default is at the top right, so I'm just going to leave it there. \n\nAnd then there's a couple of things we need to do in this content. If we leave it the way it is, we've not updated the title, we've not updated the URL, and this will get overwritten when we reprocess at midnight. Okay, so what you need to do in order to prevent that is we're going to take the title and we're going to add it to the title here. Okay, so that will be the new title. \n\nThen we're going to remove the slug. So this manually set the title, like the URL, the bit at the end, to what this was. If you want, you can make a new slug that's the same as this and put it in here. I think it's unnecessary, so I'm just going to delete it. And what it will do is it will take whatever's in here, so if you change it later, you need to remember to do some stuff. It will take whatever's there, and it will turn it into the URL of the page. \n\nSo any special characters, anything like that, will get converted to dashes, and it will do that. Okay, I already added this, which is the old URL, so the redirect is already there. So you don't need to worry about that, but we do need to remove the canonical URL. That's what I search for when we're updating the content. If there's no canonical URL, it's not going to try and update this file. \n\nAnd the last thing we need to do is change the priority from four, one below half, to six, one above half, so that Google and everything knows that we have updated this content. So there's a do not; don't change the date. There's a hidden value, which is when we save this, it will automatically take that the last time we edited it as the date in there, so that's fine. \n\nAnd that's us. If I save that file and close it, we've now changed the file, but we need to publish it. So I need to go over here. You'll see it says one file pending changes. This is our source control. So if we go into source control, we've got our index, and I'm just going to grab this title, in fact, including the little hashy bit, the whole thing, and I'm going to say \"Updated new copy for this.\" \n\nOkay, so this will link everything up and make sure it's all connected properly. You don't have to put it, but you have to put some text in here. And then I'm going to commit it. Would you like to stage all your changes? Yes, you could say always. I'm just going to say yes. This effectively, you've got changes, stage changes, and then you commit the staged changes. That way, you can have changes that you don't commit. Like, you could make packages if you're doing lots of changes, but don't worry about it now. \n\nWe've saved it locally; we've published it locally, but we need to push it to the server. So I click this \"Sync Changes.\" Okay, so now it's pushed that to the server. So if we go over here, go to pull requests, you'll see here's our copy. It's now published into source control in a branch. We need to get it onto... we need to start the process to get it published for reals. \n\nSo we create a pull request, and it will basically take exactly... I'm actually just going to fix that there. It always does that because it's just long. I'm going to do that draft. There we go. So now that's going to publish a canary version of our product. \n\nOkay, so this is where we can see what are the changes that we've done, what do they look like, how are they used. So if I go along here, you can see it's got the action. So if we have to have a chat about it, we can do that in here. We've got the commits, so what are the number of changes we've made? Only made one, and we've got the files that we've changed, which is only one. \n\nSo if I click on \"Preview Changes,\" it will actually show... it's kind of a weird view because it's in line. It will show all the changes that we've made. So minuses are rows that are deleted, pluses are rows that are added. So we kind of deleted the title and added a new title. We deleted the four and added the six, and then you'll see it's kind of doing it line by line. But we replaced with the new copy that's much longer. \n\nOkay, so that all looks pretty good. What you would do... and we can probably set it up as an automatic... but you can ask... I can't ask myself for a review, but you'll have me in there, so you'll be able to just click on me and ask for a review. What we're waiting for is for it to all publish. \n\nRight, so you can see there that it's done some stages already. It's done \"Run Data.\" Yeah, it's building the site right now and building the APIs, and then it will publish the site once it's finished publishing the site. We'll get a little message in here to tell us it's been published. \n\nOkay, so it's finished publishing the site. You can see all the checks have passed, so everything looks good. Now we can go check out the new page. So I'm using Control again to open this, and this is a special copy of the whole site, 146, just for you. So we're going to go in here. You can see it will say \"Canary\" at the top, and there's our pull request number. \n\nAnd we're going to go into videos, and then we could probably just find it, but what I'm going to do is I'm going to nick the URL. We're in videos. I'm going to put that on the end. There we go. So now this page is \"The Hidden Cost of Pro Quality Code and How to Turn It into a Super Power\" is the new title. \n\nSo there you go. There's the new site published. So we can come back here. Somebody will approve it, and then we need to... it's ready for review, and then you submit for review. It's all good. We've checked it. Like, you can check this and then make a change. \n\nOkay, so let's say we weren't happy with what it looked like, and we wanted to make a change. I would go back to my Codespace over here, and I would go edit this file again. So let's say, I don't know, let's say I did want this to be here. So I would make that change. I would go over here, put a copy, commit it locally, push it to the server. This would start again. A new post will get made because this will be refreshed with the new version, and everything will be good. \n\nBut we're not going to do that. I'm going to merge that pull request because we are, in fact, happy with it. So I'm going to merge it. It'll ask me how do you want to merge it? I just want to do this. Confirm. There we go. So that is all merged in. That branch that we were working on has been deleted. Therefore, the Codespace is still there, but I'm pretty sure that will vaporise in a little bit. \n\nAnd we go back here, and we're done. That is heading to preview site. So if you want to know when it is done, you'll see this one here on Main is heading there and doing all the stuff. So this will publish it to preview, and then we need to manually publish it to live. But this is a good way to see that. So that'll end up on preview. There you go."
  },
  {
    "id": "9PBpgfsojQI",
    "title": "2023 is predicted to be a very tough year. What do you think will be needed to win and improve?",
    "description": "Discover key strategies for thriving in 2023's challenges as Martin Hinshelwood explores the essentials for successful Agile leadership and adaptation.",
    "captions": "Foreign\n\n2023 is predicted to be a very tough year. What do you think will be needed to win and improve in 2023? \n\nBusinesses need to be more astute than they are now. I work with organisation after organisation that have no idea what their cohesive corporate strategy is. They have no idea what level of quality they really want in the products that they create, and they have no idea of what is really needed to understand what it is we need to build. Addressing those things is going to make the difference between being successful in 2023 and being unsuccessful in 2023. \n\nThere's quite often a fine line between businesses being profitable and businesses not being profitable, and it can be very small things that make that difference between profitability and not. If you're building products that are delivered in a market where there is lots of choice, then you have to be more attractive than your competitors to your customers. \n\nIf you're slow at delivering what customers are asking for, if you don't have all the features that they're looking for in that particular market, if you're losing your skilled employees because they're unhappy and taking their knowledge and skills elsewhere, perhaps to your competitors, then you're not going to be successful. \n\nIf the market is hard, right? If everybody's under hardship, those that are going to be successful are the ones that are investing in people and investing in their ways of working. If your ways of working are more effective than your competitors, you'll be successful. \n\nI think that's really what it is. You need to be more effective than your competitors, and Scrum and Kanban are tools that you can use to highlight through data visualisation the current state of what's going on in some of those spaces so that you can look at it and know what you need to improve. \n\nThe big things to invest in: product ownership is hugely lacking in organisations. Most organisations have no idea what a product backlog should look like. They have no idea how to analyse the market that their business exists in, and they need people in their organisation that can do that. Those folks aren't going to magically be able to do it; they need training. They need training and they need practice. \n\nThat's one of the reasons that we offer an extra hour of coaching—60 minutes of one-on-one coaching for every student—because I know how difficult it is. You come and take our product owner class, and then three months later you've got all these questions and no way to get answers because your business won't fund a one-hour coaching session with the trainer you had three months ago. So we just include it in the process. \n\nIn fact, if people just wanted a chat, I've got a way on my website to book 30 minutes, book a coffee with Martin, and just have a chat about product ownership, about how to get more out of it. It's actually just product management, right? Product management and the product owner is the same thing. \n\nHow do you leverage those capabilities that Scrum can enable for your business, or Kanban as well can enable for your business to get better at delivering value? That's going to be the big difference: are we delivering value to our customers?"
  },
  {
    "id": "9TbjaO1_Nz8",
    "title": "Would you recommend the PSPO course to an entrepreneur and why?",
    "description": "Discover how the PSPO course empowers entrepreneurs to create value and grow products that delight customers. Join Martin Hinshelwood for insights!",
    "captions": "I would definitely recommend the PSP Auto and entrepreneur. I invite the advanced PSPO as well, but that key focus on value from the PSPO and what add your product management looks like are all key things that an entrepreneur needs to bring into their way of doing things, their story of how things happen for them. Because usually, especially for entrepreneurs, their organisations are very small, especially at the start, and they're going to be fulfilling the role of product owner. They're going to set the tone for leadership and product management inside of their organisation. Even if later on they're handing that torch off to somebody else because they're being successful, they're making good decisions, and then they're getting a little bit bigger and they're able to hand that torch off, that torch needs to come with, \"Here's what we're trying to achieve, here's where we're going.\" Yes, we have really thought about value, and I think it's even more important for an entrepreneur because you want to get past that startup phase.\n\nI don't know what percentage of organisations fail; I don't know the exact percentage of organisations, startups that fail, but it's most of them, right? Most startups are going to fail, and one of the reasons that they fail is that they don't have that tight focus on value. They don't understand what's value, what's value to their customers, and they haven't had those conversations, written it down, understood it, discussed it. We have loads of tools in the product owner class that you can use as part of that story. How do I figure out what those things are? How do I think about those things in order to bring everybody in my team along with me and help us understand what it is we're trying to achieve?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "9ut4YZSkDg8",
    "title": "PSPO In 40m",
    "description": "Unlock the secrets of the PSPO exam in just 40 minutes! Join us for essential tips and strategies to ace your certification with confidence.",
    "captions": ""
  },
  {
    "id": "9VHasQBlQc8",
    "title": "The Importance of Patience and Trust in Building Agile Organizations",
    "description": "Unlock Agile success with patience! Discover how this vital virtue builds trust, navigates setbacks, and fosters a non-blame culture. Watch now! 🌟",
    "captions": "In order to be successful, organisations need trust, and trust comes from the virtue of patience. Your organisation needs patience and tolerance with the people in the organisation who are doing the best they can within the context that they have and hopefully trying to create the best possible product. If they're trying to create the best possible product and something goes wrong, there's a failure. Things don't go like we expect, or we create something that doesn't look like we expect. Sometimes that's just a fact of life, right? Not everything's going to go the way you want it. Not all of the outcomes are going to be what you want.\n\nEverything that we create when we're building products is something that may or may not work out, may or may not be successful. We're taking a bet, right? We're saying we think this feature, this capability is going to be successful, or we think these practices are going to work for us as we're trying to do things in the organisation. We think this new tool is going to work, and we don't know any of those things are true until we actually get to the end of that process or at least some way through that process, and we have something usable that we can validate with our customers, with our users, within our world, to be able to create good outcomes.\n\nSo, businesses need to be patient with teams. Leaders need to be patient with people. Product owners need to be patient with the product, right? With the people that are building stuff in the product, are we getting to where we need to go? If we get frustrated and create a blame culture within our organisation, we are not going to be successful because we're going to erode the trust that is the foundation to empiricism. One of the key things we need to build trust is patience.\n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "id": "9z9BgSi2zeA",
    "title": "Hiring an Agile Coach: What to Look For in Both Technical and Leadership Engagement",
    "description": "Discover 5 essential tips for hiring an #AgileCoach with Martin Hinshelwood in this insightful #shorts video. Make informed decisions for your team!",
    "captions": "If you're hiring an agile coach, not only do they need to be able to engage and gain credibility with the technical folks, they also need to be able to engage and gain credibility with management and leadership in your organisation. This means that they need deep technical understanding of business, particularly within your context. \n\nSo, if you're a financial organisation, you're going to want an agile coach who understands the financial ramifications in business of your organisation. If you're a tech company, then they need to understand the business of tech so that they can more effectively help leadership and management be more agile."
  },
  {
    "id": "9zxymM9WMaU",
    "title": "Crown Estate - Introduction to Scrum",
    "description": "Discover the fundamentals of Scrum in this engaging introduction by Crown Estate, perfect for beginners looking to enhance their project management skills!",
    "captions": ""
  },
  {
    "id": "A0Y-zySHXyc",
    "title": "What are the barriers that prevent developers from fully accepting a Product Owner as the final decision maker?",
    "description": "Explore the barriers hindering developers from accepting product owners' decisions. Discover the importance of respect and accountability in agile teams!",
    "captions": "What are the barriers that prevent developers from fully accepting a product owner as the final decision maker? Wow, there's a lot of barriers to that. I see that all the time at the moment. Other people not respecting other people who are perhaps more senior, not respecting the product owner is probably the biggest barrier, right? It's other people coming down and saying something different to the team from the product owner or going behind the product owner's back or agreeing with the product owner in person but then getting in a larger environment with more people and perhaps recording is on than disagreeing with them and seeing it different.\n\nI had an experience recently where a product owner was really, really frustrated because they'd been collaborating with somebody in the organisation to get the backlog all like this is what we need, this is what we're doing, and they've been collaborating with them quite heavily. They've had lots of private meetings with them where they collaborated and literally written the backlog items word for word like that key stakeholder, that's the way they wanted it, and collaborated heavily on that. And then they get into the Sprint planning and the stakeholders like, \"No, that's not what I want.\" \n\nAnd it's like, that is explicitly... there's a couple of things there, right? Apart from being a bit douchey, right? That's one piece. But because it's then in that group team forum, it undermines the ownership of the product by the product owner, right? That totally undermines it. And if the developers, the people doing the work, see that the product owner is being undermined, well, I can't really listen to the product owner. I still have to run it by Bob or I still need to speak to Janet or whoever it is that is doing the undermining. And as more and more of those things happen, the less the developers are able to feel that they are able to respect the product owner as the final decision maker, right?\n\nAnd if you look at the Scrum guide, who needs to respect the product owner as the final decision maker? Everybody in the organisation. Everybody. Not just the people below them, but also all of the people above them. If you're above a product owner and the product owner is consistently not making the right decisions, get rid of that product owner and get a new one. That's your call, right? You've hired somebody to do a job. If you don't think they're doing a good job, you don't undermine them. You get rid of them, right? And that maintains that respect of product management, that respect of product ownership, right? That the team sees that the person that's appointed is respected by management, even if management might not necessarily 100% agree with all of the decisions that are made. \n\nBut if most of the decisions are made result in value delivered to the business, because that is the true outcome, right? What you find... yeah, I'm going to add an additional bit because what you find is that that disrespect or undermining of authority of the product owner comes from a position of maybe one key stakeholder not wanting to give all the information, not wanting to take accountability for their decision, right? \n\nAnd it just results in nobody having any capability. Leadership doesn't take the accountability, the product owner can't take the accountability because they're continuously undermined or the ideas are changed without their knowledge or understanding, and the developers... there's no credibility in that story. So then if I were to come back to the question and answer it in one word, what are the barriers? There's only one. What is the barrier that prevents developers from fully accepting a product owner as the final decision maker? And it's accountability. Or in three words, a lot.\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "a2sXBMPHl2Y",
    "title": "How can companies derive greater benefits from training by investing in a private training course?",
    "description": "Discover how private training courses can enhance team effectiveness and drive success in your organisation. Unlock the power of tailored #Scrum training!",
    "captions": "A good question. So how can companies derive a greater benefit from training if they invest in a private course rather than just sending people piecemeal to public classes? I think it's an interesting question, and I think it's because ultimately, because you're able in the context of that class to air your dirty laundry a little bit more than if you go to a public class.\n\nI always try and create a safe space in public classes that people feel that they're able to talk about things that are happening in their company, and everybody else in the room's going to, you know, kind of pretend they didn't hear it afterwards, type of thing, so that we can talk about things. But you don't feel as comfortable as perhaps you can be within the boundaries of a single organisation.\n\nQuite often, and I've had this with certain private classes where I'm talking about professional Scrum, and I'm talking about continuous delivery to production, and I'm talking about unit testing, and I'm talking about just all of those things around DevOps and Agile. There are people in the room that will say we can't do that here because of XYZ. What's very interesting is you'll have somebody in the room that says, well, actually, on our team, we are able to do that. \n\nAnd I say, okay, well, why can this team do that in your organisation, but these teams believe they can't? That can be an important discussion to have because if somebody can do it, you can pretty much all do it, right? \n\nThe dirty laundry, that realisation of the possible through talking to other people in your organisation, if everybody in the group is on the same team, it's also a little bit different. I've done Agile leadership classes with the whole leadership team for an organisation, and that brings up interesting conversations. Quite often, they're conversations that the participants believe they should have already had. \n\nWhy do I need to come to this training to have these conversations? But it's that they weren't provoked, right? It's comfortable to not have those conversations, to do the same thing that we've always done, you know, running on the treadmill, getting things done. But sometimes you need somebody to provoke you into thinking differently, provoke you into thinking about how you do things. \n\nI think that's the same is true for consulting and training, but especially for private training. There's a lot of provoking and asking difficult questions, and maybe the questions they don't want to answer, right? Because in not one thing to answer it, they realise something about themselves as well. \n\nSo that, for me, is the added value to private classes, is that there's a lot more candour than maybe there might be in a public class. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "a6aw7xmS2oc",
    "title": "What are the top 3 things a product owner needs to bear in mind when adopting an entrepreneur stance",
    "description": "Unlock the entrepreneurial mindset! Discover 3 key insights for product owners to connect teams to value and make evidence-based decisions. 🚀📊",
    "captions": "Uh, what are the top two things that a product owner needs to bear in mind when adopting the entrepreneur stance? I kind of think of the entrepreneur stance as like the visionary looking forward to the future. And that's where a lot of the stuff that ends up on your product backlog is going to be. This is just one part of being a product owner.\n\nI think the two most important things to focus on are, one, connecting the team to the value that you're creating. Does everybody on the team understand the connection between the work they're doing every day and what it is we're trying to achieve? Do they understand that connection? So that would be a lot around vision, communicating it, product goal, communicating it, sprint goals, right? Making that connection between the work that's happening every day. I think that's probably one of the most important things and the most common lacking things.\n\nThe other one is where the value comes from. One of the things that I find when I engage with product owners, the first thing I ask them is, how do you decide what's valuable and what isn't? Quite often, the answer is, I make it up as I go along, right? Which, while not necessarily 100% wrong, a lot of people have very good gut skills at reading the market, reading the information that they have. But really, we want to be taking a more evidence-based approach.\n\nSo from a product owner's perspective, are you making decisions based on information? Do you even have the information that you can get? There's going to be lots of hidden stuff, right? We're still taking bets, we're still taking risks. But do you have enough information to make more of the right decisions and less of the wrong decisions? For that, I usually look towards evidence-based management, right? Making sure that I understand my current value I have in the system, like our product, that's our current value, puts features already in there, and our unrealised value, what are the stuff that we need to have in our system that we haven't built yet? So kind of looking forward into the future.\n\nBut I also really consider our other more organisational capability-focused metrics, where I'm gathering data from both our ability to innovate, right? How much time do we spend on net new things versus existing things? That's the same reason that we all get upset that Netflix is cancelling our favourite show, right? Because they do a season and the numbers are good, but they're not amazing. And if they're not amazing, they know that the second season is going to be less amazing than the first season because it just always is. \n\nSo they would rather invest that same money they would invest in doing a second season of an existing show into doing a first season of a brand new show that might be more likely to get a higher return on investment for that first show, right? We get all upset because they cancel our favourite show with their favourite characters, right? But in reality, they're making commercial decisions based on the data and the analytics that they're collecting from who's watching all the shows and how they're doing it. You need to do that as a product owner, right? That's the product owner making those decisions based on the data.\n\nSo you've got your ability to innovate, and then you've also got your time to market, right? How quickly can you go from, same for Netflix as well, right? How quickly can you go from an idea to getting that thing in front of real users who are then able to give you feedback? Right? How quickly can you get stuff in front of them? And I think that's, if you think in the movie TV show space, that's why we're seeing so many limited series now.\n\nAnd that's because we are unhappy with that false sense of we're getting more later, right? We're getting a second season and we're hoping for a second season, and then we don't get it. Whereas if they market it to us as it's a limited series, we're only making one. If something happens, we might make that, but we're only making one. Then we don't have that sense of loss as users. And that's product ownership, right? They're managing our expectations, they're looking at where the next piece of value is coming from, how can we get different users, increase our market share into our product, and really understanding value and how it impacts on that. \n\nAnd the decisions that you make get the data in there as well. That was thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "A8URbBCljnQ",
    "title": "27th March 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Microsoft MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": "Hello, my name is Martin Henchy Wood. I'm the owner at Naked Agility in Glasgow, Scotland, and I've had a couple of questions come in from a few folks, and I wanted to cover a few of those things. So first off, I'm going to be doing this as often as I can. I think it's important to help people in this time. It can be very difficult to figure out what's going on and get things done, so we're going to look at this.\n\nThe first thing that I want to talk about a little bit was remote working. A lot of us are in that, if I probably most of us are in that space of having to work remotely. We're going to be working distributed from our teams, and while we talk about in Scrum and Agile in general, we talk about co-located teams, the reality is when these types of circumstances arise, and even just based on your organisational context, you might work in an organisation that doesn't have everybody in the same place, and it can make things very difficult.\n\nSo while one of the values of Scrum is focus and openness, we are trying to have a group of people who can work together effectively regardless of the context. We need to think about the values we want to have people working together as closely as possible, and obviously in the current context, that closely as possible is over webcam and using video conferencing technology. So we just have to figure that out.\n\nBut don't forget to continuously, and even though we are separated by space and only doing video conferencing, we still need to be able to figure out what the best way to use the tools that we've got is. So don't get stuck on a tool that is not working for you. Make sure you continuously adapt, try new things, figure it out. I did a web conference on Wednesday using Microsoft Teams, and I found that it wasn't particularly awesome for that setup, just in the way that I wanted to do it. It wasn't quite working. I'm going to try some other technologies, but I used Teams a lot for other things.\n\nSo I think it's important when you're remote working to think about how you interact with other people. Are you interacting with your teammates enough? Do they know what you're working on? Do you know what they are working on? Make sure we have that focus and context to understand what's going on and what we're doing. We talked about this a lot in the Professional Scrum Master class. I'm hoping to do some remote PSM once the Scrum community figures out how best to achieve that. We're going to try some stuff and see if it works. I have a class coming up that I'm going to move to remote, and we'll see what happens.\n\nSo I think it's also important to think about taking some time, that idea of \"poo-poo the chain\" while we're in this remote state, and we maybe don't have such laser focus on delivering value than we had when we were in person, high bandwidth in person. We can still focus on some of the things that need our help. So in the Scrum world, particularly in all of product development, the work we're doing is really complex, and it's not really suited to that production line mentality. But our DevOps pipeline is suited to that production line mentality.\n\nIf we want to take an idea from our product owner and turn it into working software, we've got that bit that we can't understand how long it's going to take because it's the creative endeavour of solving that cognitive problem. So we're going to solve that problem, but then we make a change to the software, we commit that to our repository, and then somehow it goes off and ends up in production. How quickly does that happen? And how that is your production line? That's the bit that we want to shorten and figure out and how to make as fast as possible.\n\nI usually use an example from Brian Harry, who was the product unit manager for Azure DevOps, and he talked about zero build. I think he called it a zero build, an awesome phrase. But he talked about it as if he does our build of the product. So the team creates a version of Visual Studio and TFS at the time, and then they ship it to production. It has to go through a whole bunch of checks. So there was legal, there was validation, there were all kinds of steps along that way. He would look at not how long it took to get through that process because there may be things just now while we're not so good that would fail, so that's going to go back into the feedback loop.\n\nSo you're not looking at how long it takes to get your software out the door because there's some stuff engineering-wise we need to fix in there, and that's good to disrupt our data. But once we've got that version of the product in production, if we do another brand new build from exactly the same version of code that passed all the checks and see how long it takes that to go through the process, that's your zero build. Zero changes in the code, zero changes in the platform. How long does it take you to get that into production? And that's your zero build time. That's what you want to focus on as a production line. We need to make this as short as possible. We need to reduce the process, and in order to do that, you need to get feedback from every stage along the way.\n\nI just found this diagram on the internet that is enough stages that I think was valid. So you need to focus on engineering excellence. You need to focus on improving your definition of done, but also focus on team building. You want your team to care that these things are important. It's important to get into production as quickly as possible because without feedback, we may not be building the right thing. I need to figure out how to do that, and that means to focus on people.\n\nSomething I've been looking at recently is how to use extreme gamification to help people understand how to work together a little bit better. Some of those things that I'm trying to get people to look at is through board games. There's a board game that I had in mind called Pandemic, which is a cooperative game of saving humanity from a pandemic, so it's kind of apt. But one of the things that you see when a group of people play that game is that it's very prone to one person telling everybody else what to do, which is kind of analogous with software development.\n\nSo if you can get a team together for 45 minutes to an hour to play the game and do a diagnosis at the end, get the team to play the game together and then talk about who you're observing, potentially as a Scrum Master, and then have a discussion about the different interactions that you saw during the game. You can have that kind of safe environment where you can run a little experiment with your team. It's fun for them, so they get into it, and they forget that you're running an experiment because they're getting into the game and solving the puzzle that they're trying to solve. But you can have two observations, and usually, you'll find that there's one or two people that are very loud. Everybody else follows along. How do you make sure you get everybody's opinion? Hear the people that are very loud to understand that they're maybe being overbearing in that conversation.\n\nSo that's part of that focus on people and how people work together. I think cooperative and fun games are definitely a way to help make some of those ideas a little bit more real. I also got a question from one of my old friends, Ian Frame. He was talking about UX in the context of larger organisations and how do you make sure that UX is not just an afterthought?\n\nNow, I've worked with the author of Lean UX, Jeff, on this. We have a class from Scrum that is called the Professional Scrum with UX, which he describes as an olive branch to the UX community. The UX community is off doing their own thing because they're getting pushed away by engineering teams, but really the thing that they're doing is one of the most important parts of product delivery. Understanding what your product is, what you're going to do to solve the business need, how you're going to do that, and how those interactions and behaviours of users that you're going to change. I think that's so unbelievably important to a product owner and building the right thing story that it's going to be detrimental to any organisation that is leaving it behind.\n\nYou need to get your UX skills available on the Scrum teams with the people that are doing the work because they are doing work as well. I do think there's some confusion and difficulty around what happens with long-running work. You might have a bunch of stuff that takes longer than a sprint to complete. So how do we deal with that? The reality is we have that built into Scrum. In Scrum, we have something called refinement, which is that work that the team does on things that are coming up in future sprints to create the most awesome ordered backlog possible, and so that everybody on the team fully understands what is in the backlog that you're planning on bringing into the sprint by the time you get to the sprint planning session.\n\nIn order to do that, you have to spend a bunch of time refining that product backlog, probably looking out into the future. The recommendation is to start with about a current sprint plus two more, whatever that means to you. That might be your effective planning horizon, but really you need to plan as far out as you need to action the things that you find. So if you find you need some extra information or you need to do some paper prototyping or you need to get something in front of users in order to understand better what the need is, you need to know far enough in advance for you to deal with those things.\n\nSo how do you do that in this refinement? There's a lot of UX work working with the product owner and the development team in refinement, just like there's a lot of security work there. There's a lot of architecture work, there's a lot of testing work. All of the skills are required in the Scrum team. So there's this terminology that I hear used a lot called dual track, dual track Agile, dual track Scrum, dual track UX, whatever you want to call it. People are using lots of different terminology, but the idea behind dual track is not that there's two separate streams of work. It's that there's one development team that moves through different modes for a particular backlog item.\n\nSo you get something on your backlog, PBI, product backlog item. It might be a user story, it might be a requirement, whatever you call it. There's something on your backlog, and it probably starts a little bit vague. So we maybe need to do some amount of discovery work to understand what that item is to get the team up to speed to really focus on and how to bring all of that together. Then that will move into maybe a combination of discovery and delivery. Maybe we're going to figure out what's the smallest possible thing that we can build that will help us understand whether to continue to invest in that or that we need to build something else.\n\nThat's that discovery versus delivery work, and then maybe your entire engineering team dives into delivery for the period of a sprint. So we deliver a bunch of things, and then we shoot back up into discovery again, where we're going to analyse the data that we're collecting for that. We're going to look at what our hypothesis was and whether the features that we've built have managed to change user behaviour in the way that we expect, create the outcomes that we expect, and then we come up with what are we going to go do next to solve that problem. So that will bring us back down into delivery again. So we keep going through that cycle for a particular idea, and that result might result in many PBIs that are delivered over multiple sprints as we flip between discovery and delivery and somewhere in between.\n\nSo the reality is that things on your backlog are not just UX work. They're not just engineering work, just like they're not just coding work, not just testing work, not just architecture or security work. Each product backlog item should represent a unit of value, and that unit of value should include coding, testing, security, architecture, as well as UX. So what are the UX ideas you need to do in there? Deciding how much time you want to spend on UX for a particular backlog item will depend on how unsure you are of whether that thing will provide value. Sometimes if it's just a small, simple, low-risk thing, I would just go build it and see if it's useful. If it's a high-risk, big thing, then maybe I want to do some paper prototyping. Maybe I want to do some additional investigation work as a development team around that.\n\nSo it's important that the entire development team is involved in that process. In the Professional Scrum with UX, we focus very heavily on team accountability for UX, but there are many things in UX that you need a significant amount of expertise to be able to deliver on. You need experience, training, understanding within the UX world of many years. So everybody can't learn all of that, just like everybody can't be deep security experts or deep testing experts or deep coding experts. You're going to have deep UX experts, but there is a certain amount of work that makes sense for everybody to help out with.\n\nOne of the things we focus on, I have one on the wall behind me, is the Lean UX Canvas. This is from Jeff's website. This is the second version. The Lean UX Canvas is v5, but it says v2 on it. The Lean UX Canvas helps the engineering team understand the value and context within the work, which they're making decisions every day on how to build parts of the product. This is a really important tool that I think anybody on an engineering team can learn how to use and utilise, but you still need that deep UX expertise to tackle some of those harder core things that you might do.\n\nSo something you should have is all of the things in your backlog should include some amount of UX work, depending on the context. We also talked about emergent design, just like we talked about emergent architecture. A product backlog supports emergent architecture, and that idea is that in sprint one, when you're working towards your first unit of usable increment, your first piece of working software, at the end of sprint one, you're going to probably spend quite a lot of time on UX, just as you're going to spend quite a lot of time on architecture and quite a lot of time on infrastructure. So the amount of value that you deliver in early sprints is probably going to be quite small.\n\nMaybe during the sprint, you spend during your first two weeks sprint, you and the whole team spend four days working on UX. How are we going to build this? What value are we going to get? What user behaviours are we trying to change? That sets you up for the next couple of sprints, where you spend most of your time in that delivery with a little bit of discovery before you need to jump back to food. You're spending a lot more time on discovery.\n\nSo that idea of team accountability, we're all working together. We are all as a team accountable for users getting the best experience they can, and I think that's really important. Focus on those behaviours that you want to change in users, and it will help you focus your product backlog as well, working with your product owner. While the product owner is accountable for value delivery, the entire Scrum team is responsible, and we are all in it together. If the product owner is not successful, we're just as much out of a job as they are.\n\nSo I think that it's important that we all work together to solve those problems. Hopefully, that was a useful, quick dive into those three things. I talked a little bit about remote working and about taking some time for engineering excellence, team building, doing some things around that. I talked a little bit about integrating UX into your overall strategy. I hope you found this useful. Remember the values and principles of Scrum, those ideas of transparency, so we can get those feedback loops built upon trust. In order to get trust, the Scrum community feels the commitment, courage, focus, respect, and openness are of utmost importance.\n\nSo if you're trying to make a decision about how you're going to do something, especially during this crisis, think about how and how will the way we've decided to do something support those values? Do those values kick those values to the curb, or are they going to add to those values and help us create more trust, build transparency, and create feedback loops?\n\nIf you want to get in touch with me, you have any additional questions, please do. There's my email address, my WhatsApp, and my Twitter. You can get in touch with me on all of those places. I've done two presentations recently that I wanted to call out. One is an enterprise evolution that shows that you can - which is from the Microsoft story, the story of how the Azure DevOps team of the TFS team went from delivering every two years in a waterfall manner towards delivering to production every three weeks and the improvements that they made. They started back in 2012, delivering only 22 features to production each year, and now they're delivering over 270 features to production each year. So it's a big change with the same number of people, and it's about paying back your technical debt, getting better at working together, improving communication lines, and getting all of that sorted.\n\nLast week, I also did a presentation on detecting Agile BS, which is from the Department of Defense article of the same name, the white paper. I would definitely recommend going and reading Detecting Agile BS and seeing what's going on there. It's a fairly awesome article.\n\nWell, thank you very much. I hope you found that useful. If anybody's got any questions, then please let me know. I don't see any questions coming in yet. That doesn't mean they're not there; it just means my tool might not have been very good at pulling them out. I'm just going to check, and then if there's no questions, that's folks want answered. I might well... I don't see any questions, so thank you very much for having listened to me, and I hope you have a good day and a good weekend. Okay, thank you very much."
  },
  {
    "id": "AaCM_pmZb4k",
    "title": "What are the hierarchies of competence vs control?  Why does this matter?",
    "description": "Explore the contrast between empowering coaching and micromanagement in hierarchies of competence vs control with Martin Hinshelwood.",
    "captions": "Well, that's a great question. What are hierarchies of competence versus hierarchies of control, and why does it matter? \n\nWell, let's define each one. A hierarchy of control is where everybody's told what to do, usually, obviously, in a hierarchy, right? Because it's hierarchies of control. But you've got the traditional organisational structure, the pyramid, right? You've got the small number of people at the top that are the thinkers, right? The deciders. And then you get the majority of people at the bottom who are the doers, and steering flows down, right? \n\nSo, in order for something to be decided, right, there needs to be some kind of trigger that a decision needs to be made. Sometimes that's just going to come from the top because the person at the top has an idea, and everybody shall follow it, right? Everybody shall do it. But sometimes it's a market trigger, right? And when it's a market trigger, this is hierarchies of control. In a market trigger, you've got the markets are actually at the bottom. The people talking directly to the markets are not the people at the top; they're the people at the bottom. They're talking to the shareholders, right? Which is a different sort of market, but who are talking to your actual market of your customers. \n\nSo, there's some kind of trigger, and it has to be important enough that this person who has no authority whatsoever and maybe doesn't give a crap, right? Because they're just doing what they're told, it has to be painful enough for this person that they filter that up to the next level, right? And then it needs to be painful enough for that person above, i.e. there's enough people below giving that feedback that they're like, \"Oh, I need to escalate this.\" And then it escalates, and it escalates. Escalation is the word to watch out for, right? So, we're managing by escalation. \n\nYou've got this item, this problem, escalated up the chain until it gets to somebody who, for want of a better expression, this is how my dad phrased it, you get to somebody who it's beneath them to deal with your problem, right? And they just say to somebody below them, \"Just fix it. I don't care,\" right? Just fix it. Or they just make a decision, and it doesn't matter whether it's the right or wrong decision; nobody cares. They just make one, right? Because at that level, they're not connected to the environment. \n\nAnd so, I worked at Merrill Lynch for a few years before it was bought over by Bank of America. So, Bank of America, Merrill Lynch now. But there were 16 people between me and the CEO. How long do you think it would take in that pyramidal structure for that trigger to get all the way to the top, a decision to be made, and then that to filter all the way down? And remember, it has to be the same message that filters down to the bottom, which is never the case because, you know, politics happens in here as well. \n\nSo, that's hierarchies of control. You're maximising the amount of time it takes for a signal, a message, to get to the person who needs to act on it, and then for the change to come all the way back down. And that was great when we were in the industrial revolution, right? Where these practices came from. Where, in fact, the mantra is \"slow and steady wins the race,\" right? Would be the watchword of the day because the customers aren't changing their mind all the time. The customers aren't exposed to a hundred different companies doing the same thing and then picking that you're making the product that they are buying. End of story, right? \n\nPerhaps really, really, really rich people could afford to import a product from somewhere else in the world, but otherwise, it's all kind of more local industry, right? If you want a ship and you're a shipping company, you go to your local shipyard in Glasgow if you're in Glasgow, or perhaps Southampton. But you're not going to buy a ship from a shipyard in China, right? That doesn't make any sense whatsoever. You wouldn't even know that shipyard existed, right? No marketing, no communications at that level. \n\nSo, that's hierarchies of control. Work great then, but today, with the speed of market change, right? Because there are no static markets anymore, you need this decision process to be much, much quicker. \n\nSo, hierarchies of competence are about kind of, I guess, kind of flipping on its head while still having a little bit of hierarchy because, kind of, I believe that there's definitely a human need for hierarchy, right? \n\nAny time you see a group of people who are challenged to complete some task, whether it's, \"Here's a pile of ropes and stuff across that river,\" right? They're going to have leaders that emerge based on their understanding or ability within that particular context, right? So, if you gave the same group of people another task, it might be a different leader that emerges based on the context that they're in. That would be a hierarchy created based on competence. \n\nI choose to secede some of my control over what it is we're doing to you so that we can all collaborate together to get to the outcome that we desire. And I'm deliberately choosing to secede that control to you because I believe you are the most competent person to do it. And you'll see in larger groups of people, there might be multiple different competing ideas for how to solve the problem. And perhaps you'll end up with two groups of people with two leaders that are both trying to solve it in different ways, and then you see which is the better outcome or the quicker outcome, more of the more optimal outcome, right? \n\nAnd that's just a natural thing that we do. So, the fundamental difference between hierarchies of control is, in hierarchies of control, you as an individual don't choose to follow; you are enforced to follow a specific person, even if you think they're the most incompetent idiot in the world. \n\nAnd in that model, there's an expression that you hear a lot, which is \"promoted to their level of incompetence.\" You heard that expression? That fits perfectly with that model because somebody is seen to be good at doing a job, and then they promote them to the next level up. And maybe the next level up is all about management and has nothing to do with actually doing the same job, and now they're not good at it. But you never demote people; you only promote people. So then they never get promoted again. So, they've been promoted to their level of incompetence. One level down, they're awesome; this level up, they suck, right? \n\nAnd so, you end up with these massive management structures and organisations because you've promoted this person to the level of incompetence, and oh crap, they're not actually doing their job. So, we need to find somebody else, so we promote this other person. I know they're actually good at it, so out of how many people at that level, how many people are actually useful? That's what hierarchies of control create, some of those structures. \n\nSo, in hierarchies of competence, you have no enforced structure in that manner. A good example might be Netflix. I think holocracy, they use some of those ideas where they have a board, which is kind of the enforced hierarchy part. They have a board who sets strategic direction, but everybody in the company's job is to figure out what can they do to best fulfil that overall strategy, right? \n\nSo, that could be, \"I'm going to go join this team over here because I like what they're doing,\" or \"I've got a cool idea, so I'm going to...\" What's it called when you attract people to your position? You know, you're going to be the leader and attract followers. That's the one! Attract followers and move in a certain direction. \n\nAnd that's all ad hoc and dynamic in that world. So, you can almost go, \"Well, that's all the way over here,\" and maybe your company's not ready for that. We're all the way over here in this top-down, terroristic waterfall model. You've got to figure out what's the first thing we can do to help move a little bit more in that direction to leverage the people that we have and get closer to the market and have a faster, shorter feedback loop, faster turnaround time between market triggers and actual things happening in our organisation. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "aathsp3IMfg",
    "title": "When is an APS course appropriate for a scrum team?",
    "description": "Join Martin Hinshelwood as he shares his vision of the perfect agile consulting week, highlighting the power of inspired teams in #agile and #scrum.",
    "captions": ""
  },
  {
    "id": "Af-wBYtyyRU",
    "title": "Mastering Evidence-Based Management (EBM) for Product Owners: Maximizing Value Delivery",
    "description": "Unlock product success with the PAL EBM course! Discover how evidence-based management empowers product owners to make informed decisions and maximise value.",
    "captions": "So the PBM course is a fantastic idea for product owners because ultimately product owners are the entrepreneur, the mini CEO of a product. If you want to be making good decisions about which bets to make on the success of your product, right, which features to build, you need to understand the holistic outcome of your product, the whole product. \n\nEBM, evidence-based management, can be used to look at a whole product and say these are the metrics that we've decided in each of the key value areas, right: unrealised value, current value, ability to innovate, and time to market. Once we've chosen those metrics, we can then monitor them over a long period of time and see that we're taking the product in the right direction. \n\nHow do you know when you're going off topic? When you're going on a tangent to what your organisation is trying to achieve? When you're off the beaten path? Maybe off the beaten path is the best place to be because you look at the data, you look at the metrics, and holy moly, this has been really successful, right? \n\nThen you need to have a conversation with your business about, well, we were going this way, but actually we think this way is a better way to go that's going to add more value. How do you know to have those conversations with the business? How do you make those determinations? We need to understand what's going on in the product, right? We need to understand our ability to innovate. We need to understand our time to market, how quickly we can get things through to maximise our capability. \n\nAs a product owner, you want to maximise your ability to deliver business value, right? That's your whole job: maximise our ability to deliver value, maximise the value that we deliver. So our capability of our teams that are delivering value, right? Are we maximising the throughput of our ability to deliver value? And then are we delivering the right value, our market value? Are we maximising that? \n\nAnd how do you know if you're not measuring? That's why product owners like the PAL EBM, the evidence-based management class is awesome to help you give you extra tools to help you figure out what that is, help you engage with the rest of your team and bring them along on that story, and perhaps help you turn some of your developers from developers to product developers. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. Have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "agPLmBdXdbk",
    "title": "Must have trait in an Agile Consultant",
    "description": "Discover the essential trait every agile consultant needs to excel in solving complex problems quickly. Join Martin Hinshelwood in this insightful short! #Agile #Consulting",
    "captions": ""
  },
  {
    "id": "AJ8-c0l7oRQ",
    "title": "Why is Lego a shit idea for a scrum trainer - Part 3",
    "description": "Martin Hinshelwood critiques the use of Lego in scrum training, arguing executives prefer valuable learning over play. Discover his insights in this short video!",
    "captions": ""
  },
  {
    "id": "AjUC6FPYCQM",
    "title": "Do teams really understand the power of applying scrum professionally?",
    "description": "Unlock the true potential of Scrum! Join Martin as he reveals insights to elevate your team's practices from basic to professional. 🚀 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "APZNdMokZVo",
    "title": "What is a definition of done? Why is it so important?",
    "description": "Unlock the essence of 'Definition of Done' in Scrum! Discover its vital role in ensuring product quality and risk mitigation in Agile frameworks. 🚀📈",
    "captions": ""
  },
  {
    "id": "ARhXjid0zSE",
    "title": "7 signs of the agile apocalypse. Famine",
    "description": "Discover the 7 signs of the #Agile apocalypse! In this short video, Martin Hinshelwood reveals how famine can signal impending doom for teams. #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "ArVDYRCKpOE",
    "title": "Quotes: Fake it until you make it",
    "description": "Explore the pros and cons of \"fake it until you make it\" in Agile with Martin Hinshelwood. Discover insights for inspired, high-performing teams! #agile #scrum",
    "captions": ""
  },
  {
    "id": "ARWK1wvXYGY",
    "title": "Ep 006 - Live Virtual Retrospective on PAL-e with Russell Miller",
    "description": "Join Russell Miller for a live retrospective on PAL-e! Ask Martin, a Scrum Trainer and Azure DevOps MVP, anything from DevOps to Agility.",
    "captions": ""
  },
  {
    "id": "aS9TRDoC62o",
    "title": "If a client hasn't considered DevOps consulting as part of their Agile Consulting needs, why should they?",
    "description": "Discover why integrating DevOps consulting into your Agile coaching can enhance team performance and streamline software delivery. Watch now!",
    "captions": ""
  },
  {
    "id": "atV8TIupSsg",
    "title": "Live Virtual PAL on 27 – 30 July , 2020 in CEST",
    "description": "Join our Professional Agile Leadership workshop from 27-30 July 2020! Enhance your skills in a live virtual format. Register now!",
    "captions": ""
  },
  {
    "id": "AwkxZ9RS_0g",
    "title": "How Does Your Consulting Experience Manifest in the Training Environment?",
    "description": "Discover how real-world consulting experience enhances training in Agile and Scrum. Join Martin Hinshelwood as he shares insights on effective teaching.",
    "captions": ""
  },
  {
    "id": "aWYoJtSgTDo",
    "title": "The importance of knowing the territory.",
    "description": "Discover how navigating new territories, like mushroom foraging, parallels agile leadership in seizing opportunities and making informed decisions.",
    "captions": ""
  },
  {
    "id": "AY35ys1uQOY",
    "title": "How do you know if you've got a great Sprint Goal?",
    "description": "Discover how to craft a valuable sprint goal in Scrum! Join Martin Hinshelwood for insights that align teams with strategic objectives. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "b-2TDkEew2k",
    "title": " shorts 7 Virtues of agile. Temperance",
    "description": "Discover the virtue of Temperance in Agile! Join us for insights on fostering balance and harmony in your teams. #Agile #Scrum #Shorts",
    "captions": "I have this picture in my head of Ken saying it to me many years ago: \"Just enough and no more.\" I believe, in fact, he actually—I think he said that no matter what quantity question I ask him, the answer is going to be \"just enough and no more.\" It doesn't matter what the quantity question is, right? \n\nSo how much backlog should we have? Just enough and no more. How many developers should we have? Just enough and no more. How much time should we spend on refinement? Just enough and no more. Same for planning upfront. \n\nThat mantra of being focused on what it is we're doing and minimising our effort. One of the principles in the Agile Manifesto is maximising the amount of work not done."
  },
  {
    "id": "B12n_52H48U",
    "title": "How do you decide whether to pivot or stay the course? (Nokia story)",
    "description": "Explore the pivotal choices in product management: when to pivot, persevere, or walk away. Join us for insights and real-world examples! 🚀",
    "captions": ""
  },
  {
    "id": "b3HFBlCcomk",
    "title": "The Fallacy of Equating Agility with Speed: What Agile Really Means",
    "description": "Discover why Agile isn't just about speed! This video reveals its true focus on value, adaptability, and delivering the right products. Embrace a strategic mindset!",
    "captions": "There's an idea out there: the agility equals speed. I think this is in the same category as agile project manager, right? It's an oxymoron; it doesn't exist. It's not a thing. That's not what agility is about. Agility is about spending your time well. That's probably a bit... I think that's a good way to describe it. Probably spending your time well. The time we do spend is on valuable endeavours. We spend less time doing the wrong thing and more time doing the right thing. That's the idea that we're trying to achieve. But in order to find the right thing, we've got to try ten things to find the three things that work, right? \n\nSo the idea that agility is about speed is a complete fallacy because we might have to do nine things before we find the one thing that works. So if each of those things took two weeks, that's twenty weeks. And we did one thing. Well, why don't we just decide what those ten things are up front, look at them, and go, \"Let's do that one. Let's do number five and just do that one thing, and then we're done. We've built a product.\" \n\nWell, is that the right product? Does it have market fit? Are people going to buy it? Is it even the right feature? Does it actually provide value to the customers? We don't know any of those things. We could have just built the wrong thing. Lots of organisations fail because of assumptions. They fail because they think they're building the thing that they want, but they're not. They're not building the thing that the customer wants. \n\nMy favourite example was... I use this one a lot. Sorry, that they've been bought, so now the product sucks. But I was an average user of a product called Zoom AI, right? So this was an awesome product, and what it allowed you to do was multiple things. It was basically a calendaring tool, right? One of those calendaring tools, but its unique focus was on a kind of bot-based calendaring tool. So you could have a bot. I use Teams, so I had a bot in Teams that I could just go message and say, \"I want to meet with Simon at four on Friday. Go organise that.\" \n\nAnd it would email Simon and say, \"Simon, Mar wants to meet at four Fridays. Does this work for you? Yes or no? Would you like to pick some times that you and Martin have available?\" Okay, pick some times, and then it comes back. And that was that story. So it was a bot-based interactive. It was maybe a bit early, right? Probably the versions coming now with AI are going to make this a lot more effective, but it worked. \n\nAnd almost all of the other customers found that they didn't really use it that way. What they used it was as a calendaring tool: send people a link. \"Here's how... here's my free time. Go book a slot,\" because it was just easier, right? You didn't even have to write a message to someone; you just sent them the link. \n\nSo while they were Zoom AI and this AI story, they actually very much ended up just changing the whole company ethos and focus from that to Calendar Hero. And they were just another calendaring tool, but a very good one. They've been bought by somebody else now, and everything has gone crap. But, you know, you're really good; somebody comes and buys you, and then they absorb you and eat you, and now you're no longer good. \n\nBut that idea of completely changing not only your business, your focus, your company name is around why is your market fit? And what a lot of big organisations fail to realise is that their market changes. It's not that they fail to realise it; it's that they don't understand how to take advantage of it because they build up rust, right, in all of the bureaucracy that builds up around the organisation. We shouldn't have a lot of bureaucracy. If you have a lot of bureaucracy in your organisation, you're doing it wrong, right? That's all. You're not able to respond to market changes quickly enough if you have a lot of bureaucracy. \n\nLocal optimisations, right? So this comes back to that idea of agility is not equal to speed. The purpose of agility is not to go faster. If you think you're going to do Agile to make you go faster, you're wrong. It's not going to work that way. If you have three hundred things to do, it's going to take three hundred things' worth of time to do, whether you do Agile, waterfall, whatever. You've got three hundred things to do. \n\nThe way Agile makes it seem like you're going faster is maybe you don't need three hundred things; maybe you only need one hundred things. That's how it might seem like it's faster because we do one hundred things, and we're done, right? Think of the Sentinel project, right? That's the big famous one. That was the US FBI records-keeping system. In 1995, a brand new system was delivered. It was green screen with terminals, right? We all had Windows 95 at that point, and they realised it was obsolete the moment they shipped it. \n\nSo they started working on the new version, Project Sentinel, right? And they had money from Congress—so $400 million. And I can't remember the company; it might have been Lockheed Martin that was building it. And they spent four years, $400 million, and at the end of that, they didn't have a working product. No working product. So they had to go to Congress, get more money—$300 million, five years spent, $300 million, another five years, no working product, right? Not very fast. \n\nGot to, I don't know, 2012. They'd been going for nearly ten years. This project had been going for nearly ten years, maybe 2005. Anyway, nearly ten years, and they decided to quit the whole thing. They took the best people out of the group that they had building it. They hired them. The FBI physically hired the people, set up scrum teams in the basement of the Hoover building. So they had about forty people, went from four hundred people to forty people, and they delivered to production within a year. \n\nSo you could say that they went faster, but they didn't go faster. They just didn't try and build the whole thing. They just built the first piece, right? They got to production within a year. That's the speed that we're talking about. We're not actually talking about delivering what you thought you were going to get faster. You're going to get a better product in the same amount of time. \n\nSo the best way to think about it is if we have a... let's say it costs $10,000 per sprint. We've got $100,000; we can do ten sprints. We can do five things per sprint. Do we just do these fifty things we decide up front, or do we figure out as we go which fifty things are the best fifty things to build? We've still spent exactly the same amount of time, but we have a better fifty things that we've delivered. We've got fifty of the right things than just the fifty things we thought we needed at the start. And that's why Agile is not about speed."
  },
  {
    "id": "BAwBXYtKj7o",
    "title": "Technical Debt Management for Long-Term Quality",
    "description": "Discover how automated testing transforms software engineering, reducing errors and speeding up feedback for high-quality, efficient delivery.",
    "captions": "Automated testing is extremely important to our ability to use modern software engineering to benefit our organization and increase our profit, increase our margins, increase our capability, and deliver better quality, higher value software to our customers. \n\nAutomated testing comes in lots of different flavours, and I'm definitely going to stretch the term automated testing maybe from your traditional concept. One of the things that automated testing does is it reduces human errors. You would think I used to teach a training class; I still have it on my list of things for manual testers to use as your DevOps test tools. We had labs in it. You would think that if there was one group of people that were awesome at following a set of steps and validating whether they worked or not, you would think that a group of testers would be that magical group of people that would be able to do that. \n\nIt's absolutely not the case. Most of the groups that were doing the labs failed to follow the steps and resulted in the lab not working. This lab doesn't work, right? And it's like, yeah, it does. Did you follow all the steps? Yes, yes, yes, we followed all the steps. Then you sit with them, and they walk through it, and I'm like, you missed step four. You didn't do step four, or you didn't do the second part of step four, or whatever it is, right? You didn't follow the instruction. \n\nThis is just a human thing; this is not an assassination attempt on testers. It's just how humans work, right? So you cannot expect somebody to follow a set of steps and do it the same every time. That's not how humans function. That's how computers function. So we want to take those things that make sense and convert them into automated tests. \n\nNow, we're not looking for a particular level of code coverage, although no code coverage is probably bad. Chasing code coverage is always a bad idea because you'll just have lots of people writing terrible tests that get you good code coverage but don't actually validate your product, right? So don't chase code coverage or test coverage, but it is a way for us to get faster feedback. \n\nWe want to have fast-running automated tests that we can validate the changes that we make on a continuous basis. TDD results in some of those, right? Some tests out of TDD are like that. Most tests out of TDD validate that at least the product does what the software engineer intended it to do and validates that we've got an architecture that probably is a little bit better. \n\nThat's hopefully part of that testing mode, but the value in automated testing is it happens the same every time. You do need to balance this idea of test infrastructure, right? Because when we write test automation, we have a body of tests, and whenever we make a change to our product, it's going to have an impact on those tests. \n\nThere used to be a great feature in Azure DevOps that had something called test impact analysis, and you could make a change in the code, and it would tell you exactly which code paths had changed and tell you which tests were impacted. I think there were a lot of false negatives, which is why it's not well thought of, but it was a great idea, right? A great idea. How do we know what tests we need to run? Well, let's look at what's changed and what the tests hit, and are we missing something, and which tests need to be rerun in order to reduce your test matrix? \n\nBut because that fundamentally doesn't work because of complexity, right? That's what got in the way: the complexity of software engineering. We need to run them all, which means they all need to be super fast. We need unit tests, not end-to-end tests, not integration tests. We need unit tests that run really, really quickly and thousands of them in milliseconds. \n\nThe Azure DevOps team moved from long-running end-to-end tests to fast-running unit tests and took their test strategy, their test infrastructure, from 72 hours down to 3 and a half minutes almost to run their entire test infrastructure. That's what you're looking to be able to do, and there's something like between 60,000 and 100,000 tests being run to validate that their product still works. \n\nThat's the story that you're looking for. You're looking for small, lean, discrete tests that don't have an impact across the entire platform so that when you make a change in this part of the system, you only need to change the tests in that part of the system. All the other tests should still pass because you've not broken what they're expecting in other parts of the system, and it gives you a good indication. \n\nSo having this tight test infrastructure, shifting left as much as you can, can and automating everything. The phrase I usually say is if it can be automated, it should be automated, and if it can't be automated, it should be refactored so that it can, right? Automate everything. You should not have any manual steps between developer cutting code and production. \n\nThe only thing that I'd say was a valid place where you put a human between those things is maybe an approval, but I would prefer for those approvals to be automated. Right? On what basis does this human decide whether we're a go or no-go for release? Well, they look at this data. Well, we can automate that. They look at the calendar, and they only do it on these days. Well, we can look at that. We can say we only release on Monday mornings, right, to give us maximum amount of time to deal with any problems. \n\nNever release on Friday; don't do that. CL strike did that; don't do that. We can do all of those things. We can automate everything so that we have that engineering excellence, modern software engineering excellence built into our entire story so that we can then spend the time that we would have spent doing all those things manually and fixing all those problems focusing on delivering the value that's going to generate the revenue that we need to grow and create more. \n\nThat's what we should be focusing on, and test automation is a huge part of that to reduce the number of problems that make it through to production, to reduce the amount of time it takes to detect that you've injected problems into the system. We can help you create those strategies, build that engineering excellence within your organization, and ultimately build better."
  },
  {
    "id": "BCWiKTm8hjg",
    "title": "The Power of Charity in Agile: How Helping Others Elevates Teams and Organizations",
    "description": "Discover how the virtue of charity can transform your Agile approach, fostering team success and community support. Watch now for powerful insights! 🌟",
    "captions": "One of the key agile virtues is charity, and that manifests in our world as things like being willing to help each other for no specific gain. Right? I want to help my colleagues on the team because it helps us all, not because I get something out of it. I want to be looking at making sure that my team is successful, that my product is successful, that my company is successful, and I'm not necessarily doing it because I get my bonus. I'm doing it because it helps the people around me, that we're all better because of it, and that we're able to create the best possible products for our customers. That leads back to Dan Pink's autonomy, mastery, and purpose, right? I want to feel like the work that I do matters, and charity is part of that.\n\nFor example, I'm a Microsoft MVP. I don't get that MVP for paid work; I get that MVP for spending time in the community providing help and support to others for free. I do that both in the technical space and in the agile space. If you want to have a chat, you can go to my website and book a coffee, and we can talk about agile. We can talk about the things that are happening in your organisation, and if in half an hour I can fix your problem, that's great! We've had a coffee, we've had a chat, and you get something to try that might result in success. Right? I don't do that for direct remuneration; I do that because I like helping people. I like other people being successful. I want organisations to be successful in agile because that helps all of us, all the employees of the company, the entire ecosystem, and that's charity.\n\nIf you are having difficulty getting the most out of the Seven Virtues of Agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "id": "BDFrmCV_c68",
    "title": "7 deadly sins of Agile: Pride",
    "description": "Explore the dual nature of pride in Agile! Learn to harness it wisely while avoiding costly pitfalls. Join Martin for insights on data-driven success. 📊🚫",
    "captions": ""
  },
  {
    "id": "BE6E5tV8130",
    "title": "How is agile product development different to waterfall project management?",
    "description": "Discover how agile product development contrasts with traditional waterfall project management in complex environments. Learn to adapt and thrive!",
    "captions": ""
  },
  {
    "id": "beR21RHTUvo",
    "title": "Story Points: A Ghost of Agile Past",
    "description": "Uncover the hidden challenges of story points in Agile! Join Martin as he explores their pitfalls and advocates for a value-driven approach. 👻🚀 #AgileChallenges",
    "captions": "There are a number of ghosts of Agile past that plague us and the first one that I want to talk about is story points. The person that originally created the idea of story points has publicly apologised for creating them. That should tell you something about story points. But ultimately, story points have been with us for a very long time. In the old, old, old days, people used to do a lot of absolute estimation. So things like hours, right? We used to figure out exactly how many hours this thing would take. This will take 5,000 hours. And then we would perhaps measure ourselves against how many hours it did take. And in order to kind of move away from that idea of hours and absolute estimation, a lot of teams started talking about relative estimation and relative estimation points in some way. And that could be t-shirt sizes I often hear, but the main one is story points. Story points have been with us probably for about, about 20 years. They've been plaguing, they've been haunting teams for about 20 years. \n\nAnd story points create a whole bunch of, wow, really difficult things with teams. So one of them is that you'll often see or hear teams having a conversation about how they claim points for the work that they've done so that they can push the rest of the work that they haven't done into the next sprint. That's pretty dysfunctional behaviour right? The point is not the points, the point is the value that we're delivering and that's what we should be focusing on, not some arbitrary set of points. \n\nWe also see teams being measured or compared across teams based on their story points. This team delivers 30 story points per sprint, this team delivers 20 story points per sprint, so this team must be better than this team and that is utter garbage. There is no way to compare story points across teams. There is no way, there is no normalisation algorithm that you can use to do that comparison or create it in some way. It's just one of those agile bullshit things that keeps sticking around we can't get rid of. \n\nSo the what was the other thing that story... Story... Oh! I recently engaged with a customer and they had a team that was struggling to deliver. It was actually five teams working on one product and they were struggling to deliver. And I was trying to figure out what the problem was and they kept going on about story points were the most important thing for them to progress and they had to get a specific number of story points. And this was a professional services organisation. And I found out that the contract that they had with the customer, obviously, somebody on the customer's side and somebody on their side had decided that it would be a great idea, because they've heard about these story point things, to put story points into the contract and they were contracted for an exact number of story points and if they were outwith a 15% deviation from the exact number of story points then there were fiscal penalties for the professional services organisation so you can imagine the raft of dysfunctional behaviours that resulted from that. \n\nI used to think story points were a good thing. I used to think they were a good thing. And now I'm a little bit more aligned with Daniel Vacanti on this. He's the Kanban, pro Kanban guy. Story points have set our industry back 20 years. Story points are one of the things that have restricted the ability for us to adapt to changing circumstances as we might have because there's that continuous focus on the numbers, continuous focus on the work that's done because story points reflect the work, not the value, right? Continuous focus on the work, the butts on the seats, rather than on the value that's created. \n\nSo I'm a firm believer in flow metrics moving towards, they're not the be all and end all, right? Because we can have awesome flow and we're delivering tons of crap into production, but at least flow is telling us what's really going on, right? We're looking at our cycle time, we're looking at our work item aging, we're looking at our throughput, right? Those metrics are just based on historical fact for what we're delivering. We can certainly manipulate them by reducing batch size, which usually has good outcomes. And I just find that they're all round a more useful way of looking at the data of, and potentially looking across multiple teams as well for a whole department, for a whole organisation. What is it we're able to deliver, what does that look like? But ultimately, moving towards more flow-based metrics and away from relative size estimation, I think is a good idea. \n\nAnd that's why I put story points in that list of ghosts of Agile past. And if you are being haunted by these ghosts of Agile past, we can help you exercise them or help you find a coach, consultant or trainer who can. Don't let these phantoms undermine the effectiveness of the value that you deliver. And the longer you wait, the more they're going to haunt your team's progress. So send me an email at martin at nkdagility.com and we will get you the help you need to get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website and we'd love to hear from you."
  },
  {
    "id": "BFDB04_JIhg",
    "title": "Understanding Kanban: A Tool for Transparency and Continuous Improvement",
    "description": "Unlock the true power of Kanban! Discover its benefits, key metrics, and how to transform your workflows into a secret weapon for process improvement.",
    "captions": "Caman is not a process itself. Caman is a tool that allows you to observe whatever process it is that you're doing. So it provides the metrics, the visualisation, the definition, creating the definition of workflow for whatever process it is you're using. Its primary goal is in creating that additional transparency. It allows you to see better what's going on, ask more interesting questions, and update and improve your system."
  },
  {
    "id": "BhGThHrOc8Y",
    "title": "People Drive Solutions, Tools Just Pave the Way! Agile and DevOps are about people, not tools.",
    "description": "Discover the true essence of DevOps! Join Martin as he explores the people-driven philosophy behind successful implementations, beyond just tools. 🚀💡",
    "captions": ""
  },
  {
    "id": "Bi4ToMME8Xs",
    "title": "Advanced PSM II Immersive Learning Classes",
    "description": "Unlock better outcomes with our Advanced PSM II immersive classes! Invest in your Scrum Master today. Discover more at nkdagility.com. #agile #scrum",
    "captions": ""
  },
  {
    "id": "Bjz6SwLDIY4",
    "title": "Continuous Adaptation: The Key to Success in a Dynamic Market",
    "description": "Discover how adapting to change drives business success in our fast-paced world. Join us to learn key strategies for thriving amidst constant evolution! 🌍✨",
    "captions": "In order to be successful, we need to constantly readjust to our surroundings. Right? Things happen. If you're going through life and you meet new people, people disappear. Things happen in the world, right? Medical things happen. Winning the lottery happens. All of those things happen, and we as humans are default behaviour is to adapt around those situations. \n\nThe same is true for businesses, right? It's basically an ecosystem. Your business exists within a specific niche that it developed into. Your business grew into one or maybe many niches, depending on the size of your organisation. In those niches, things aren't constant; things are continuously changing. \n\nSo, in the old days, the niches used to be there for a really long time. They used to change very slowly. Right? So if you were a carpet manufacturer in Islington, then your market was fairly stable. Your competition was fairly low. But today, that's not true for any organisation. There are organisations which don't have competitive markets, but they are incredibly rare. You're probably not one of them. \n\nIf you exist in those highly competitive, highly dynamic markets, you need to be constantly adapting to the needs of those markets in order to maximise the value that you deliver to your customers and maximise the revenue that you create and profit that you return for your organisation. That requires constant adaptation—constant adaptation to the market, constant adaptation to changing circumstances, constant adaptation to things that happen in the world that affect your business. \n\nI think that the great example of that is when COVID came along. If you were an organisation in March of 2020 that had already embraced the interwebs, right? You already had people working from home. You had already embraced modern security practices, so you weren't using VPN tunnels into a specific office location. Then you probably, if you were already in that modern camp, you probably had—and your business was largely either doing business, i.e. people working in an office—then you probably had very little impact to your business from the work-from-home rules. Right? Because people could just go work from home, and it was cool. \n\nYeah, we had to deal with, you know, we lost some productivity because the kids were at home as well. Right? We lost some productivity because I don't have an office in my house, and I had to work on the kitchen table. Right? And there's things going on around me. But we adapted. Right? We adapted to those circumstances. We adapted to what it was we had to do, and we made it work. \n\nThat's the genius of humans. That's the thing that we're really good at. So you don't want to get in the way of that inside of your organisation. The way we get in the way of that is by creating rules. \n\nSo companies, organisational controls or boundaries or organisational boundaries should be maintained using principles rather than rules. If you use principles in the way you do business, i.e. a guiding principle, then you're not constraining people to the way we currently do things. You're leaving it open for people to choose different ways to do things. \n\nYou might have policies and procedures and rules, right? You might work in a regulated industry, and here's a bunch of stuff we have to do. But how you interpret those things should be fluid based on the needs of the market while still complying with the rules. \n\nThat is probably one of the hardest things for organisations to adapt to, is that old thinking—the Industrial Revolution thinking—that we can just create a bunch of rules, a bunch of ways that we work, and have everybody follow it, and we're going to continue to be successful. Those days were gone in the 1920s. They're completely eradicated by the 1970s. \n\nAll successful organisations continuously adapt. If you continuously adapt to your market, why don't you continuously adapt to the work inside of your organisation? What's holding you back from making that change? \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "BJZdyEqHhXc",
    "title": "NKD Agility Consulting Approach",
    "description": "Discover the NKD Agility approach to effective Agile consulting and coaching with Martin Hinshelwood. Learn how to choose the right Agile partner!",
    "captions": "So there's no way for an external party to come in and give you a solution. Recipe is something that you can no. Recipe is the wrong word, but there's no way that somebody can come into your organization and just tell you how to do your stuff. It's the reason that the big consulting companies don't affect any change. It's the reason that the big frameworks for Agile or DevOps don't actually tend to change anything in the organization, apart from cost during your bank account. That's big consulting companies too. \n\nIt's the reason that most organizations struggle to incorporate the story that they're trying to work towards a new story, right? And the reason that they struggle is because they're trying to buy it in rather than adapt it. It's like if you wanted to be a gymnast and are you just going to hire somebody to do the gymnastics for you? But you wanted to be the gymnast. They're the gymnast; you're not the gymnast. \n\nSo there's a fallacy in consulting that a lot of consulting is just contracting, right? You're hiring somebody in to do the job. You've got a butt on a seat doing that job for you. And if that job inside of your organization is a business-critical job, which anything that's around the purpose of your organization, anything that's around how your business does business is critical to your organization, then you're outsourcing part of your organization. \n\nAnd now why would anybody in your organization learn how to do that thing? Because there's somebody else doing it who doesn't want to share it because they're a contractor. And if they keep that knowledge, they keep their job. If they share that knowledge, they lose their job. And that for me is the big difference between contracting and consulting, right? Although a lot of people sell consulting when actually they're doing contracting. \n\nAnd that's that. The purpose of a consultant is to provoke change. That's probably the most interesting way to say it. The purpose of a consultant is to provoke change. The consultant shouldn't be doing any of the work within your organization. If you hire a consultant, you're not hiring them as an Agile coach; that's a contractor. You're not hiring them as a development lead or a project manager; that's not a consultant; that's a contractor, right? There's somebody in your organization doing the work. \n\nWhat a consultant is, is an advisor who provokes change. They are somebody from the outside who maybe has additional deep knowledge and skills in that particular topic who doesn't come in to just tell you how to solve the problem. Even if they know how to solve the problem, right? They might give you advice, but they're not going to solve the problem for you. But they help enable you as the person inside the organization or group of people, if it's a team, to understand the theory so that you can make the decisions for the organization, so that you can make the changes in the organization. \n\nAnd because you understand the theory and the principles, you're able to then make the future decisions as well that are better than the previous decisions, if that makes sense. The whole idea of consulting is to help organizations change by provoking the people inside of the organization to do things differently."
  },
  {
    "id": "BmlTZwGAcMU",
    "title": "Immersive Learning in Scrum: Why Theory and Experience Must Go Hand in Hand",
    "description": "Discover how immersive learning enhances your skills as a Scrum practitioner in this engaging video. Unlock your potential with NKD Agility!",
    "captions": "One of my favourite quotes is from Denning: \"Without theory, experience has no meaning. Without theory, one has no questions to ask; hence, without theory, there is no learning.\" \n\nOne of the purposes of our immersive classes is that we're able to give you the tools that you need to ask the right questions, to figure out what you need to learn, what you don't understand, and that is the value of immersive learning."
  },
  {
    "id": "bpBhREVX85o",
    "title": "How does scrum help leadership teams pick the most valuable work to focus on?",
    "description": "Discover how Scrum empowers leadership teams to prioritise valuable work in complex environments, enhancing customer focus and organisational efficiency.",
    "captions": ""
  },
  {
    "id": "BR9vIRsQfGI",
    "title": " shorts 5 things you would teach a productowner apprentice. Part 1",
    "description": "Join Martin Hinshelwood in this #shorts video as he shares the top 5 essential lessons for aspiring product owners. Perfect for apprentices!",
    "captions": ""
  },
  {
    "id": "BRRQ1JWsHpQ",
    "title": "The tools you use to train are awesome How do people transfer their training experience with these?",
    "description": "Discover how digital tools enhance remote Scrum training, fostering collaboration and long-term learning in this insightful video with Martin Hinshelwood.",
    "captions": ""
  },
  {
    "id": "BtHASX2lgGo",
    "title": "5 kinds of Agile bandits. Planning Bandits",
    "description": "Unmask the burndown trap in Agile! Discover effective sprint planning strategies that prioritise value and adaptability. Watch now! 🚀✨",
    "captions": "A common thing that agile teams do is they use burndowns to figure out how things are going throughout the Sprint. I've got to say burndowns are agile banditry. The whole idea of burndowns, in order for a burndown to move from top left to bottom right in a reasonable linear fashion, you have to have planned the whole Sprint up front. Right? In order to have a project burned down or a product burn down moving from top left to bottom right, you have to have planned the whole product or project up front.\n\nHopefully, we can all be on the same page that if we're doing, if we're building products that don't exist yet, right? We're developing products that don't exist, then there's too much variance, too many surprises, too much complexity in what it is we're doing to really plan the next six months' worth of work. It's always going to change more than we would like. And if we look at data from like the Standish Group, that do the chaos report, for example, you'll find that 65% of things that we build change over the life of the product. And in fact, even worse than that, only 30% of the features that we do build are actually used by our customers. The rest are used little, if ever. Right? So that brings those two things together. We have a massive amount of unknowns in what we're doing. It's usually always more than 50%. So we know less than half of what we're going to have to figure out along the way. And that means that being able to plan up front, even the next 10-day Sprint, is just a ridiculous exercise in making stuff up. A ridiculous exercise in telling a fictional story.\n\nThe reality is you should walk out of Sprint planning with no more than is needed to get started. That's how big your plan should be. Getting started in the Sprint, how big should your plan be for your product? Enough to get started, right? Or enough to convince somebody to give you the money. That's also, you know, you might need more for that. But that ability to get started is all you need. So you maybe walk out of Sprint planning with 24 hours' worth of work. We've planned the next 24 hours because we're going to get together every 24 hours and plan the next 24 hours after that. So we don't really need more than the first 24 hours to get started. If we're going to build a product, we don't really need that much more than the first Sprint to get started. What of the backlog items we're going to do maybe during that Sprint? We can come up with, you know, how far out into the future we do want to look. But you want it to be minimal but sufficient. You want to have less stuff to manage, less stuff in these things. That's why burndowns are one of the reasons that you can't tell what's going on.\n\nThis is the banditry part of it. Being for bandits, it's that if I plan the whole Sprint, right? And I've got, let's say I've got five developers working on my product, and I've got five stories coming into the backlog, and each of those five stories has ten tasks that I'm going to write down as part of my plan. How many per person, right? How many tasks do I have at the end? I have lots and lots and lots and lots of tasks. What happens on day two of the Sprint when you figure out that your plan wasn't that great and 50% of it needs to change because you figured out something new? It gets out of date. And the reason it gets out of date is because none of your developers, they want to focus on delivering the stuff because we're under pressure to deliver the product, deliver the value. And yet they need to go and edit or manage these hundred things that are in the Sprint backlog. Right? Don't have them there. You don't need them. All you need is a just-in-time, just-enough plan either for the Sprint or a just-in-time, just-enough plan for your product in order to start getting started and get developing your product.\n\nSo don't get stuck in that rut of too much planning up front, which is what a burndown forces you to do. Stop being a bunch of agile bandits and focus instead on continuous flow of value through your system. If you are being ambushed by agile bandits in your organisation, then my team at Naked Agility can help. Or we can help you find a consultant or expert who can. You can set up a no-obligation consultation using the links below. And don't forget to like and subscribe if you enjoyed the video."
  },
  {
    "id": "bvCU_N6iY_4",
    "title": "Business Agility Raw! - Ask me Anything Lean Coffee with Martin Hinshelwood [mktng]",
    "description": "Join Martin Hinshelwood for Business Agility Raw! on 27th August. Engage in a Lean Coffee format and discuss your pressing questions on agility!",
    "captions": ""
  },
  {
    "id": "bXb00GxJiCY",
    "title": "The Power of Immersive Learning in Scrum Training",
    "description": "Discover the third reason why immersive learning transforms Scrum training for students! Dive into the experience with us. #immersivelearning #Scrum #shorts",
    "captions": "One of the great benefits of immersive learning is that there's generally less cognitive load. There's less fatigue and tiredness. That video conferencing fatigue that we get from having those 8-hour or multiple consecutive day four-hour sessions is just not there. People can engage for a shorter period of time; they feel more connected to the topics, more connected to the content, and they just don't feel so tired. So we get higher levels of energy, higher levels of excitement, and more engagement from people in the class. And if there's more engagement, there's more learning."
  },
  {
    "id": "c0ncdBixyfo",
    "title": "What is the one thing that no Agile team can survive?",
    "description": "Discover how contempt for leadership can cripple agile teams. Learn to foster a positive culture and boost productivity in this insightful video!",
    "captions": ""
  },
  {
    "id": "c6R8wo04LK4",
    "title": "Hardest Part of Adopting Scrum?",
    "description": "Discover the toughest challenge in adopting Scrum as Martin Hinshelwood shares insights in this engaging short video. #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "C8a_-zn1Wsc",
    "title": "Unlocking the Power of Immersive Learning in Agile: Overcoming Cognitive Bias",
    "description": "Discover 5 ways immersive learning enhances your skills as a Scrum practitioner. Elevate your practice with NKD Agility's expert insights! #Scrum #Agile",
    "captions": "One of the great things for immersive learning for practitioners is that it combats cognitive bias. We tend to think we know more than we do about a particular topic. You wouldn't believe the number of people that participate in training, uh, agile training, that have been doing agile and scrum for a very long time, and they haven't read the Agile Manifesto and they haven't read the Scrum Guide. The Dunning-Kruger effect; they think they know more, uh, than they do. So the power in immersive learning is we continuously whittle away. Um, they can't escape the idea that we know less than we discover by doing. Um, and in order to be doing more, we need that focus."
  },
  {
    "id": "C8LaupSojEA",
    "title": "The Crown Estate - Writing Better User Stories",
    "description": "Discover how to craft effective user stories with insights from The Crown Estate. Enhance your agile practices and drive better outcomes!",
    "captions": ""
  },
  {
    "id": "Ca_0rw9AUlg",
    "title": "There’s No Such Thing as an Agile Transformation: Why You Should Focus on the System, Not the Culture",
    "description": "Uncover the truth about Agile and culture transformation with Michael Sahota. Discover why changing culture is more complex than it seems!",
    "captions": "There's a quote: \"There's no such thing as an agile transformation; it's a cultural transformation.\" I agree with the part that says there's no such thing as an agile transformation. That's agile transformation, digital transformation, whatever transformation you want to call it. It's not really a thing. But I also disagree that it's a cultural transformation. \n\nCulture is not something you can change; it's not something you can affect directly. The culture is an outcome of the way you do things, the system, and the way the system engages people. People interact with the system, resulting in the behaviours that create the culture in your organisation. \n\nSo, the easiest way to think about it is: culture is just a shadow on the wall. Right? So if you want to change the shadow on the wall, do you try and change the shadow, or do you change you? You change your position, you change your shape, and then the shadow on the wall changes. \n\nIf you want to make changes to your organisation, if you want to change the way people act in your organisation, if you want to modify the culture of your organisation, you don't actually focus on those things. Those are not the things you change; those are the outcomes. You focus on the system that your organisation has. What are the rules? What are the procedures? What are the practices? What are the ways you measure people within your organisation? What are the principles upon which people make decisions in your organisation? \n\nWhen the rules don't fit, those are the things that changing will affect the way your organisation runs, the way it functions, and the way people act within your organisation, which is your organisational culture. \n\nSo, you can't really affect how people act. Well, there my dad's spinning on that one. But if you want to change the way people behave in your organisation, you're going to have to focus on the system. Change the system itself and tweak the system. Make changes; maybe it's small changes, maybe it needs large changes to the system. \n\nThen monitor the outcomes, which is the culture and the way people act and the behaviours that you see in your organisation. Then keep shifting the system to get the result that you want. So you need to focus on that system; you can't focus on the culture because you can't change culture. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "CawY8x3kGVk",
    "title": "Scrum is like communism, it doesn't work. Myth 3.",
    "description": "Uncover the truth behind Scrum myths! Join Martin as he debunks misconceptions about micromanagement and developer autonomy. 💡🏃 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "cb6JpfomYRU",
    "title": "How much of a competitive edge will the immersive PSM course deliver to delegates?",
    "description": "Discover how our immersive 7-week Professional Scrum Master course gives you a competitive edge over traditional workshops. Elevate your team's skills today!",
    "captions": ""
  },
  {
    "id": "CBFOWXacEAY",
    "title": "Nordstrom Innovation Lab Sunglass iPad App Case Study 720p",
    "description": "Explore the Nordstrom Innovation Lab's cutting-edge Sunglass iPad app in this insightful case study, showcasing design and technology in retail.",
    "captions": ""
  },
  {
    "id": "cbLd-wstv3o",
    "title": "How to Discover Unrealized Value in Your Product",
    "description": "Discover 5 compelling reasons to implement Evidence-Based Management (EBM) in your environment and unlock your product's unrealised potential! #EBM #Shorts",
    "captions": "How do you know what additional potential value you could be achieving with your product but that you haven't yet? How do you find those gaps? Evidence-based management has a key value area called unrealised value, where you would be expected to come up with some metrics to help you understand that dynamic. Now, evidence-based management does have some example metrics in there. You might look at the experience or satisfaction gap in your product. You might look at market share. You might look at other metrics that you can come up with for your product, but you need to understand what value's left on your table. That's where your product backlog comes from."
  },
  {
    "id": "CdYwLGrArZU",
    "title": "Most Common Thing You Hear in a PSPO Course?",
    "description": "Discover the most common insights from Martin Hinshelwood in a PSPO course! Join us for a quick dive into agile excellence. #PSPO #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "Ce5pFwG5IAY",
    "title": "5 tools that Scrum Masters love. Part 1",
    "description": "Discover the top 5 tools that Scrum Masters love in this engaging short! Boost your team's agility and performance with expert insights from NKD Agility. #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "cFVvgI3Girg",
    "title": "Why is the Professional Agile Leadership Essentials course a natural evolution for a product owner",
    "description": "Discover why the Professional Agile Leadership Essentials course is essential for product owners, enhancing their role in driving value and team success.",
    "captions": ""
  },
  {
    "id": "cGOa0rg_L-8",
    "title": "Is Your Project Ecosystem Truly Agile?",
    "description": "Unlock true agility in product management! Discover how to break down silos, embrace automation, and maximise stakeholder value in this insightful video.",
    "captions": "Is the full ecosystem of your project agile? If you've got agile programming teams followed by linear bureaucratic deployment, then that is absolutely a failure. You're probably not very agile. We need more automation to be able to ensure that we can go all the way from your team members creating content to them delivering it to the customers without having bureaucracy and blockages and time in between. We need to shorten those feedback loops and maximize the value that we get for your stakeholders."
  },
  {
    "id": "Cgy1ccX7e7Y",
    "title": "What would be an example of a great agile consulting outcome for a client?",
    "description": "Discover how agile consulting can transform complex challenges into valuable outcomes, enhancing business agility and driving success in your organisation.",
    "captions": ""
  },
  {
    "id": "Cia3d_y9akQ",
    "title": "What are some of the most common misconceptions you encounter about the Scrum Master role?",
    "description": "Uncover the truth about the Scrum Master role! Join me as I debunk common misconceptions and highlight the importance of competence over mere practices. 🌱🚀",
    "captions": "There are lots of misconceptions about what the accountability of the Scrum Master is supposed to entail. Focus on, um, most of this manifests because of the difference between an organisational role, which might include many accountabilities, including Scrum Master, even if it's called Scrum Master, um, and the actual accountability as what Scrum talks about and what it genuinely leads to. Because there's been so many people that have transitioned from whatever they did before into Scrum Master, so they might have been, um, project managers, they might have been managers, they might have been developers, right? And they transition into the role and they have limited understanding of the core principles and philosophies that underpin Scrum and underpin Agile. Um, they end up making some very common, um, mistakes. So common that you'll see, um, one of the most common responses when people say, \"Oh, Scrum's not working, we did this,\" and the most common response is, \"That's not Scrum.\" \n\nThe reason that's the most common response is because the thing that they describe, RBE, is not talked about in the Scrum Guide. It's not part of Scrum; it might not even be part of anything to do with Agile. Um, and people will say, \"Well, but in Scrum you have to...\" Great example: \"You have to have a user story.\" User stories are not a Scrum thing. \"You have to have a burndown; if you don't have a burndown, you're not doing Scrum.\" Burndowns aren't a Scrum thing. Burndowns come from before Scrum, and yes, they might have been encouraged, uh, for a while, but they're not in the Scrum Guide anymore for sure. Um, user stories were never in the, I don't think they were ever in the Scrum Guide. I would need to go look at the history of that thing, but, um, I'm pretty sure they don't. Planning poker? Not a Scrum thing. User story points? Not a Scrum thing. All of these things are mechanisms that people have chosen to use and might be quite common within the context of Scrum, but that doesn't mean there's something that you have to do. \n\nRight? If it's not working for you, stop doing it or pick something else, right? Um, so one of the most common, uh, dysfunctional behaviours that I see Scrum Masters time after time doing is focusing on mechanisms. And the reason this goes back to the confidence story that we have, the reason they're focusing on mechanisms is they have no skills and abilities and knowledge within the context of the philosophies, principles, and theories. If you don't understand the philosophies, principles, and theories, you can't apply them in new and interesting ways. You're going to look at what other people are doing and just copy that. So you end up copying planning poker. \"We're just going to do planning poker; we're going to do user stories; we're going to have a burndown.\" We're going to do those things that everybody else is doing because I don't understand why they're doing it. I don't understand the principles, philosophies, and theories that underpin the reason this thing isn't successful for this particular team or this particular company. \n\nCompetence, right? Move away from these mechanical practices that are a choice and move towards understanding the principles, theories, and philosophies. Another great, uh, most common, um, Scrum Master thing is actually the reason that Agile Coach exists, even though there's no such thing as an Agile Coach, is people think the Scrum Masters focus on the team. It's not; that's one-third of their focus. Scrum Masters should be focused on the team, the product owner, so the business side, and the organisational structure and capability. All three of those things in equal measure are the accountability of the Scrum Master. So focusing on the team means that you're perhaps creating suboptimal improvements within that team that then create an overall dysfunction in the organisation because you're not doing, you know, all of... If you're working in a team and it's within the context of an organisation and you're trying to help that team and you get them to do something that causes friction with the rest of the organisation, right? You probably got a suboptimal change. \n\nWhat you should be doing as a Scrum Master, instead of making that change in this team and making them unpopular within the organisation because they're not doing the things they need to do, is to work on changing the organisation. Or perhaps it's the right thing to do, right? Just change it, and they see it's being successful, and now we can do that. But that's a strategy. Are you using the correct or most effective strategy within the context of your understanding as a Scrum Master of the theories, principles, um, and philosophies that you're trying to fulfil, right? That will help you make those choices. \n\nUm, there's a whole bunch of, uh, stances. Uh, we talk about stances of the Scrum Master, um, and for me, the stances: coaching, mentoring, uh, teaching, right? These are stances of the Scrum Master, and the ones that we see time and time again, actually, I have... They're so common they're included in the advanced Scrum Master class because they're so common. Does the Scrum police, right? \"That's not Scrum,\" or \"If you're not doing user stories, you're not doing Scrum,\" or, um, \"Oh, you... The team shouldn't be talking to the customer,\" right? All this crap. \n\nUm, you've got the scribe of the team, so the Scrum Master writing things down for the team. The Scrum Master has no, in general, I'm using this to highlight a specific context. The Scrum Master has no need to have permission to... No, no, no specific need for that. I've helped loads of teams that use Jira, and I've never touched Jira. I've never been an admin of Jira. Um, those are not part of the Scrum Master's role. And that brings us to Jira admin, right? Um, being the chairman of the team, being the secretary of the team, being a hero on the team, all of these are very dysfunctional behaviours that are the result of a lack of competence within the context of Scrum Mastery, right? \n\nUm, so anytime a Scrum Master is making decisions, they're not being a Scrum Master, right? Any time they're, um, hiring and firing, although those are things they might do, right? It's absolutely possible for a Scrum Master to also be the manager of a team. Therefore, they might be accountable in the organisational context in addition to them being a Scrum Master for the team. They're also accountable for reports, for hiring and firing, for decision-making, right? For other things. But that's not the focus of the Scrum Master. And if those other things are conflicting with enabling the effectiveness of the team, then they become something that it's expected that Scrum Master to try and address, right? \n\nSo this idea of the Scrum Master, the reason they moved it from talking about it as a role to talking about it as accountabilities is because most people in organisations have multiple sets of accountabilities, right? And not all of them are Scrum-related. Scrum is not your whole world when you're a developer, when you're a product owner, when you're a Scrum Master. If you're a Scrum Master, you might also be a manager. You may be a delivery manager accountable for delivery, accountable for other things, right? You might be accountable for, um, uh, uh, reviews. You might be accountable for various things. If you're a product owner, you're probably a product manager. You're accountable for other things within the organisation. If you're a developer, although you're doing Scrum, you might also be accountable for other things in the organisation. You might support and maintain things that are different from what it is your main piece that you're working on. \n\nSo there are so many common misconceptions, and I feel like these misconceptions are so common that they become fact. They become true, like you must do story points, you must have user stories. Try and move away from those things. Try and look at... Do your research, right? Understand why those things exist, and perhaps they are the right thing for your organisation or your team, but also perhaps they're not."
  },
  {
    "id": "cIkodssozoE",
    "title": "Free Workshop 08 - Introduction to User Stories",
    "description": "Join our free 90-minute workshop to learn about user stories, including how to create and break them down effectively. Don't miss out!",
    "captions": ""
  },
  {
    "id": "COUE296XnWc",
    "title": "NKDA Webcast Agile Leadership Agile Transformation 20231005 130313 Meeting Recording 1",
    "description": "Join Dr. Joanna Płaskonka & Martin Hinshelwood in this 18-min webcast to explore Agile Leadership & Transformation. Gain insights, strategies, and engage in Q&A!",
    "captions": ""
  },
  {
    "id": "CPRy008ZMTw",
    "title": "31 December 2021",
    "description": "Join us as we reflect on the highlights and memorable moments of 2021, capturing the essence of the year in a captivating visual journey.",
    "captions": ""
  },
  {
    "id": "CPYTApf0Ibs",
    "title": "Does Your Team Truly Understand Your Product Vision and Goals?",
    "description": "Unlock your team's potential! Discover how a shared product vision drives Agile success and empowers decision-making in this insightful video. 🚀",
    "captions": ""
  },
  {
    "id": "CQHxyhm4k8k",
    "title": "PSOP In 5m",
    "description": "Discover the essentials of PSOP in just 5 minutes! This quick guide breaks down key concepts for a clear understanding. Perfect for busy learners!",
    "captions": ""
  },
  {
    "id": "cR4D4qQe9ps",
    "title": "#1 tip for a new Scrum Master",
    "description": "Unlock your potential as a Scrum Master! Join Martin Hinshelwood for his top tip to thrive with your new Agile team. #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "cv5IIVUgack",
    "title": "How Hard is it to Transition from Being a Developer to a Scrum developer?",
    "description": "Join Martin Hinshelwood in this #shorts video as he explores the challenges of transitioning from a traditional developer to a scrum developer.",
    "captions": ""
  },
  {
    "id": "CWxkBJJduCE",
    "title": "Redefining test driven development",
    "description": "Explore innovative approaches to test-driven development in this insightful excerpt from our \"Quality Code\" series. Elevate your engineering excellence!",
    "captions": "Test-driven development is not about building better code; it's about having better architectures. We create better architectures because we only create what we need to support the things that we need it to do. Doing pair programming means that we've got more eyes on the code. It feels like it's going to be less productive, but productivity is not a moment in time for the engineering team. It needs to be looked at across the whole system. \n\nWe can take what seems like a hit on productivity to do pair programming because there are two people doing things. Why can't we have them both doing their own thing? But we have less problems that we need later, which are much more expensive than the pair programming is at the start."
  },
  {
    "id": "CXOrndz5lN4",
    "title": "Building a culture of engineering excellence",
    "description": "Discover how to foster a culture of engineering excellence in your team. Unlock the secrets to agile success in product and project management!",
    "captions": "We need to focus on building a culture of engineering excellence. The technical leadership must set that direction and go in that direction. We need to build within our organisation the knowledge and understanding of the theories behind the reasons things work the way they work, and how we can then apply our empirical learnings within our context. \n\nEvery organisation is different, and with the knowledge of those theories, we can then extrapolate what the next best decision is that we can make."
  },
  {
    "id": "d0mG3YakfFQ",
    "title": "How to Make a Mobile Paper Prototype YouTube",
    "description": "Learn to create a mobile paper prototype in this step-by-step YouTube tutorial, perfect for designers looking to visualise their app ideas quickly!",
    "captions": ""
  },
  {
    "id": "D1wz-J1jklQ",
    "title": "The Power of Frequent Deployments - Reducing Technical Debt and Delivering Better Products",
    "description": "Unlock the power of frequent deployments! Discover how smaller releases reduce technical debt, enhance product quality, and boost customer satisfaction.",
    "captions": "When we don't deploy very frequently, there are a number of dysfunctional behaviours that don't have to be there but tend to creep in when we're deploying bigger chunks of work. One of those things is that we tackle bigger chunks of work instead of taking a big thing and breaking it down into smaller things. We try and tackle that big thing, and because we tackled that big thing and then we deploy it maybe after a couple of months, maybe after a year, that is unlikely to be edited. We're not going back around and editing that code again and again and again. Maybe in five years' time, somebody will come back around and add something to that feature. \n\nBut if we're deploying more frequently, if we're deploying faster, then our deployment window is smaller than the features that we're delivering. So we're thinking about how do I take this big chunk of work and break it down into smaller things that have value? If I'm deploying that smaller thing that has value, I'm probably going to be thinking about, well, if customers are using it, I can look at the data of how customers are using it and perhaps change the way I build it. \n\nSo that's one advantage. But the main advantage from a technical debt perspective is that when I'm writing that code, I know that I'm going to have to go edit it tomorrow to add the next slice and perhaps edit it the day after that to add the slice after that. So I'm thinking more about how do I make sure that this code is maintainable, supportable, and adaptable because either I myself or one of my colleagues is going to be coming and editing it tomorrow. \n\nYou don't want to, I guess there's a little bit of peer pressure, right? You don't want to look bad in front of your colleagues. I shipped some really bad code, and now my colleague has to go clean up my mess. That's not polite, right? Because they've got to go edit it again. But even if I'm doing it myself, I'm editing it again tomorrow. \n\nI don't know if you've ever been in this position, but quite often when you find some nasty code, something that's written very badly, and you want to go look up the blame tool to find out who do I blame, usually it's yourself, right? You're the one who made the mess, and you don't remember. So even if you don't want to see yourself that way as writing that messy code, then we take a little bit more care. \n\nIt's also worth noting that if we're doing hypothesis-driven engineering practices, right, so that we can collect telemetry and data and then validate whether we're actually building the right thing, then we're perhaps only going to invest in the second slice if it's worth investing in it. If users are connecting to it, if they still desire to continue to invest in that feature. \n\nSo quite often, we actually want to do a quick job on the first slice. We're choosing to incur technical debt, knowing that we're going to be looking at the telemetry, looking at the outcome, and seeing whether it resonates with users and whether we continue to invest in it or we take that chunk back out. \n\nSo this frequent deployment can not only help developers tackle technical debt issues because it just makes it harder to incur technical debt. We make it easier to write good code because if you're deploying to production at the end of the day, it needs to be production-ready. Every time I edit the code, it needs to be production-ready. \n\nYou're potentially doing continuous delivery, right? Everything that makes it into main ends up in production. Every commit perhaps makes it into production. So reducing those gaps enables us to reduce technical debt because we know we have to do a better job. It enables us to understand our customers' needs better because we can see them interacting with the partial thing we have built in order to get telemetry and feedback. \n\nThese small changes help build confidence, not only with the customer but build confidence in the product itself, build confidence in our ability to deliver and continuously deliver those small changes. So when the systems that we're working on are big and complex and have lots of interactive parts, that's when we want to be delivering smaller and smaller changes so we can see immediately when things go wrong. \n\nObviously, we need telemetry and we need observability of our system to be able to do that, but this is one of the core practical steps that any engineering team, any developer can take: make the batch size smaller. This works in a lot of cases, but in this particular case, if you're delivering code to production, reduce the batch size, increase the frequency of delivery and deployment to production, and you will see an improvement in the code. You will see an improvement in the product, and hopefully, that will result in happier customers."
  },
  {
    "id": "DBa5_WhA68M",
    "title": "The Art of Negotiation for Product Owners: Essential Skills to Master",
    "description": "Unlock essential negotiation skills for product owners! Learn strategies from an FBI expert to enhance your influence and success. Watch now!",
    "captions": "One of the things to teach a product owner apprentice is negotiation. Negotiation is something that, as a product owner, really as any team member, but especially as a product owner, you're going to be using constantly. You're going to have to negotiate with the developers on your team, you're going to have to negotiate with your stakeholders, you're going to have to negotiate with leadership in your organization. If you, as a product owner, want to be able to influence the things in your organization that affect your ability to deliver value, even if you don't control them, you need to understand how to negotiate and engage with the people who can. \n\nSo, negotiation is really important. As a product owner apprentice, there's a great book—I'm trying to remember the author—but the title is \"Never Split the Difference.\" \"Never Split the Difference\" is about negotiation. It's written by the FBI's head hostage negotiator for the last 20 years, and he talks about it as whether you're negotiating bedtime for your kids or negotiating hostage release; it's the same tools and techniques that you use. He has a masterclass on masterclass.com. \n\nWhat you need to consider as a product owner, and if you're helping out an apprentice product owner, they need to understand the ramifications of the decisions that they're making and how to engage in communication that gets them to an effective result. Just because a stakeholder wants something, even if they're the CEO, doesn't mean it's a good idea to build it. It just doesn't mean it's a good idea to do it. But you might not be able to just say no to that person. \n\nWhat are the tools and techniques that you build as an individual to help you enable that other person to withdraw the request? That's the way I think about it. You don't want to say no; you want them to say no. If so, you might not start with saying no; you might start with asking them questions about what it is they expect to achieve from that thing. When they don't know the answers, that could be a good indication that it's not well thought through. \n\nPerhaps you sit with them and do a lean business canvas. What information do they need? For example, the CEO—if you're an apprentice product owner, you're not going to be able to say no to the CEO. What do they need to understand themselves so that they say no? That's what you need to enable as a product owner. You need to enable their understanding so that they realise that that's not the outcome that they're trying to achieve. \n\nIf you want them to say yes to something, if you're the product owner asking for more money, or asking for new features, or asking for a different name for your product, or more budget—whatever those things are—you don't want to start by just asking a question that has a yes or no response. \"Will you give me the money for this?\" No. You want to figure out how do you get to yes, and it's not always a straight line. That's what negotiation is all about. \n\nThese are fantastic skills that you need to learn, and we do cover some of them in the Professional Scrum Product Owner class. We don't dive that deeply, right? I mean, we've got a two-day class; you can't really dive too deeply into some of these topics. But what we do cover is what are the things that you need to understand and where can you find the additional information that you need to engage in longer-term learning about this topic or these stories. \n\nIf you're taking our immersive classes, right, they have a lot more assignments to go and do in your organisation, so you would be able to come back. We can talk about how you engage with people in your organisation and how you improve those techniques over time. That's the value of negotiation. \n\nAs a product owner apprentice, or as somebody who's getting started as a product owner, or even if you've been a product owner for a while and you're struggling to engage with people and get that influence that you need to maximise value, those are the techniques that you probably want to focus on: negotiation techniques. \n\nIf you find it hard to learn negotiation skills, my team at Naked Agility can help you find a product ownership course or coach who can help you, or we can find somebody who can. Don't let these sorts of issues undermine your ability to deliver value and get help with them as soon as you can. Use the links in the description to get in touch."
  },
  {
    "id": "DceVQ5JQaUw",
    "title": "Most destructive thing a client can do to an agile consultant?",
    "description": "Discover how traditional management practices can undermine agile consultants. Join Martin Hinshelwood as he reveals key pitfalls to avoid for success!",
    "captions": ""
  },
  {
    "id": "dg-Cq4mqj8E",
    "title": "Virtual F2F Running LVC In Microsoft Teams Take2",
    "description": "Join us for an engaging virtual face-to-face running session in Microsoft Teams! Discover tips and tricks to enhance your online collaboration experience.",
    "captions": ""
  },
  {
    "id": "DgIETaRjZWs",
    "title": "Lean example from The Founder YouTube",
    "description": "Explore the principles of Lean methodology through a captivating example from 'The Founder'. Discover efficiency and innovation in action!",
    "captions": ""
  },
  {
    "id": "DK3axj21R4U",
    "title": "fortnite",
    "description": "Join the battle in Fortnite! Discover epic gameplay, strategies, and thrilling moments as players compete to be the last one standing.",
    "captions": ""
  },
  {
    "id": "Dl5v4j1f-WE",
    "title": "How would you like to be remembered as a Professional Scrum Trainer?  What 3 things matter most to you?",
    "description": "Discover how to leave a lasting legacy as a Professional Scrum Trainer and empower teams to thrive in agile environments. Join the journey!",
    "captions": ""
  },
  {
    "id": "DNCDdWjYis8",
    "title": "worst trait in unskilled scrum masters?",
    "description": "Uncover the truth about Scrum Masters! Join Martin as he dispels myths and shares strategies for effective team collaboration. 🚀 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "DSIXtHZTirA",
    "title": "NKD Agility: Your partner in developing engineering excellence",
    "description": "Discover how performance engineering enhances user experience! Join Martin Hinshelwood as he shares strategies for optimising software in production.",
    "captions": "If you want to be able to ensure that your software performs well and creates a great user experience, you're going to have to put in a lot of effort in making that happen. It is not going to magically happen. You're not going to have awesome software with an awesome experience and fast and responsive without actually putting in the effort to figure out how to do that. Performance engineering has a huge impact on user satisfaction and the business goals you're trying to achieve. Without a focus on performance engineering, and this is also shifting left, right towards where the team is doing the work, without that, you're not going to be able to build a product that suits your customers. Customers are going to leave because it doesn't perform well, or customers are going to leave because it doesn't do what they need it to do, or customers are going to leave because it's buggy and you're not getting things there fast enough.\n\nPerformance engineering is where we're looking at how quickly users are able to do things. Some of that could be user experience based, taking steps out of the process, and some of it can be does the software actually function at speed? Does it function at load? While some of these things can be load and stress tested, I'm going to quote one of my favourite product managers, Brian Harry, who said, \"There's no place like production.\" No matter how much testing you do prior to production, you're going to have problems that only exist in production. You can't simulate real users; it's not possible. You can only synthetically simulate users. So no matter how much of that stuff you do, you're going to have problems when you hit production. They can be performance problems; they can be the way people use it problems, right? The order that people do things or the amount they do this particular thing is different from what we had in the simulation, and that's where you run into a lot of your major performance problems.\n\nMy philosophy is that we want to get into production as quickly as possible so that we can figure out the impact of the changes that we've made and analyse the load and stress test within the context of real usage, real users using it for real. This is the story of testing in production, which doesn't mean you're not testing before production. Holy moly, no! Don't ship stuff that's not tested to production; that's a bad idea. But we need to get into production as quickly as possible, which means we need to automate and create fast, sleek automated testing for all of the normal stuff that we need to test. Does the software actually function the way we expect it to? Then we want a ring-based or audience-based deployment model so that we can control the exposure of these new capabilities and features, and we do load and stress testing effectively in production.\n\nSo what that might look like, I'm going to use an example because I love the way that they've done this. I've worked a lot in the past with the Azure DevOps team at Microsoft. Seeing how they do things has been really enlightening because they've got quite a big product; it's quite a big scaling problem. They've got millions of users, and what they effectively do is they have some of the rings that you're deploying to are physical rings, like environments. But even once you've deployed a new capability to all of your production environments, let's say you have six areas around the world, you've deployed to them all. Those features that are deployed might not be accessible by people, right? So they're not impacting production in any way; their feature flag is off.\n\nBut then the team that owns that feature that's deploying that feature wants to ensure that that feature is load tested, stress tested, is the right thing, right? Is the right thing that resonates with customers, provides the right capability, but also works load tested, stress tested? We agreed, well, I agreed, that we can't do load testing and stress testing very well, not in production. So what we need to be able to do is we need to be able to limit the number of users that are accessing this new feature and then expand it over time. There are various ways to do that. What they would do is their first ring that they would create, and this is actually a ring for each feature. So they're creating an audience-based deployment model per feature if it's big enough, right? You might have features that you just ship; you might have changes that you just ship. You don't do this with everything; this is expensive, right?\n\nBut what they do is the team will go, \"Ah, we want to start getting real users into kicking the tyres on this feature.\" It's just us so far, just internal people. So what we're going to do is we're going to publish a blog post. They publish a blog post that says, \"We're working on this new feature; it's going to provide this capability. Here's what it currently looks like, and if you would like to help us kick the tyres, send an email to this email address, and we'll enable it for you.\" You give them the data of who you are, and then they enable it for you. You can then go in the tool; you would then have a little feature flag that you can turn on and off. When you choose to turn it off, you get asked for a comment, and it goes to the team, right? So they can find out why you don't like it, right? Why you're not using it. It's slow, it's this, it's that. Then they can go look at the telemetry.\n\nBut that's a very private preview, right? People have to actively opt in. Once they have enough data to say that they think this is a good feature, they think it performs well, at least with the small number of users, once we have enough telemetry, they then open it out. They'll turn it off for everybody that's using the service but with the feature flag enabled for everybody, so everybody can go turn it on. They'll do another blog post that says, \"We're now ready for more people to try this. You don't have to email us anymore; you can just go switch it on, go try it out, and tell us what you think.\" So that encourages a bunch of people to go turn it on, and then they get a bunch of telemetry for people using it. Either people then continue to use it, or they turn it off because they don't like it, right? Maybe it overrides the existing functionality, and they don't like the way it is because something's missing, so they got to turn it off. They're asked what the problem is; they type in, \"I don't like it because it's slow,\" \"I don't like it because there's features missing,\" \"I don't like it because I don't like my cheese being moved,\" whatever the reason is, right? \n\nAnd then they're collecting more telemetry. If they get enough data, they maybe go to the next stage, or maybe they need to do more iterations on the capabilities, improve the performance. Maybe they need to turn it off because it's not performing well, and then they need to do some performance improvements and then turn it back on again. Eventually, if they've got enough telemetry, they'll turn it on by default for everybody with the option for people to go in and turn it off. So everybody gets it forcibly turned on, and then we're collecting data and telemetry from the people that turn it off to find out why they don't like it. Why do they go turn it off? What do we need to do to get those folks on board? Once they have enough telemetry, they see there's not so many people turning it off. There are always going to be people that don't like what you're doing, right? So you can't—it's not a unanimous thing. They then have it on by default; you can't turn it off, right? They maybe disable the option to turn it off, see what complaints roll in for people that want to be able to turn it off, and then eventually they get rid of the feature flag, and it's on for everybody in production.\n\nThat's a modern software engineering implementation of continuous delivery to production and then an audience-based rollout and expansion and testing story to allow you to do load testing and performance testing and stress testing in production. That takes discipline; that takes effort. It definitely has a cost, right? There are a lot of things that had to happen there and things that had to be organised and things that had to be done. But Azure DevOps, using that capability that they built into the system, using that story, they created a massive following from their users. Their users expected excellence, expected new things, expected those new things to work. As those new things rolled out, because you have an expectation if you opt into a private preview that there might be some things that don't work quite as well or we don't know yet, right? \n\nSo you're not testing in production with users that haven't chosen to be part of that test story, right? You're soliciting for people to come in and help you, and because they want to help you, one, they're more forgiving, and they'll give more feedback, right? Because they're choosing to be there. And that's how you create a story of performance improvements and enhancing user experience in a progressive, modern engineering excellence manner. This is something that Naked Agility can help you build within your teams, build within your product. Don't expect it to be magically overnight; these things take effort. They take discipline. Sometimes mistakes are made, but with a focus on delivering high-quality, usable, working product continuously to our users, we can build some of the best products you've ever seen."
  },
  {
    "id": "dT1_zHfzto0",
    "title": "Quotes: \"I estimate that 75% of those organisations using Scrum will not succeed in getting the benefits that they hope for from it.\" - Ken Schwaber",
    "description": "Discover why 75% of organisations struggle with Scrum success, as Martin Hinshelwood unpacks Ken Schwaber's insights in this engaging short video! #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "dTE8-Z1ZgA4",
    "title": "Why do you trust Simon to deliver the APS course for NKD Agility",
    "description": "Discover why Martin Hinshelwood trusts Simon as a top Professional Scrum Trainer for the APS course at NKD Agility. #agile #scrum #training",
    "captions": ""
  },
  {
    "id": "DvW-xwxufa0",
    "title": "The Limits of Self-Taught Learning: Why External Perspectives Matter",
    "description": "Discover the pitfalls of self-taught learning and the power of diverse insights in consulting. Embrace continuous learning for better solutions!",
    "captions": "When we're engaging with customers, especially new customers, one of the things we try and be 100% clear on is that we're not going to solve your problem. All of the messes, all of the issues are yours to fix. But what we can do is help you see the problems and keep a little bit of focus on those problems so that you can solve them. Right? We're bringing the torches so that we can see what's going on, shine a light in those dirty corners, under the rug where we've been sweeping the dust, and point at that and say, \"Look, we need to resolve this. This is causing you problems. This is slowing you down. This is costing you money.\" Right? \n\nWe help those organisations get better by helping them figure out what their options are. Quite often, I think it's really interesting how many organisations and engineers—I’m going to include engineers in this because I think it's true there too—we tend to not get a lot of training. Right? I don't see organisations sending their engineers on coding courses. I don't see them sending them on product courses. I don't see them sending them on API courses. I don't see them sending them on security courses. They don't do that. So almost every one of your engineers is self-taught. \n\nRight? And when you're self-taught, you learn something within the bounds of what you looked at, and we stop looking when we find an answer. Right? It's like when you're looking for your keys in your house. Right? If you've lost your keys and you're looking for them, you don't find your keys and then keep looking. Right? You don't find them and go, \"I think I'll look a little bit more in case I find more keys.\" No, I found them, so I'm going to stop looking. Right? So they're always in the last place you look, and that same is true for knowledge. When we find an answer, most of us stop looking and use that answer. But perhaps there are five better answers. Perhaps there are five progressively better answers that we could be finding. \n\nAnd that's the value of bringing in sometimes somebody from the outside to look at what it is you're doing and how you can be more effective at it. It's that experience, knowledge, and experience. I've been doing DevOps—probably the best way to describe it—doing DevOps before it was called DevOps. It was called application lifecycle management before then, and I've been looking at that for 20 years. I've been a software engineer for 20 years. I've been a scrum coach and consultant for 10 years, seeing what all of these organisations out there are doing and seeing the things that work for them and the things that don't. Because not every organisation does everything well. They might do some stuff well and other stuff not so much. Right? \n\nThat means that we can bring a whole bunch of ideas. Have you thought about this? Have you looked over here? Here's a tool that you could use to get you started in the space. Oh, if that tool doesn't work for you, here's the type of tool you're looking for. Right? And that provokes people to go look for alternatives, look for other ways to do things, look for solutions, and perhaps they'll find their own ones that are even better than the ones that we came up with. But that process is something that you and your people have to do. \n\nSo when you're engaging, as for DevOps, we're going to help you understand where you are right now, help work with you to understand what direction you want to go, and help you keep moving in that direction. But it's you and your people that have to do the work because it's you and your people that have to learn the things—institutionally, you know, that institutional knowledge that an organisation gets. When you bring in new people, although they come in with their own ideas, they learn that institutional knowledge. You want that institutional knowledge to be moving in that direction. Right? The weight of progress is in the direction that you want to go, which is not building up a whole bunch of refinement and work you've not done. It's doing those things and doing it properly and not actually doing things well. \n\nAnd we can help you keep progress in those directions."
  },
  {
    "id": "DWL0PLkFazs",
    "title": "Why did Healthgrades choose Martin Hinshelwood",
    "description": "Discover why Healthgrades selected Martin Hinshelwood as their trainer. Explore the importance of finding the perfect fit for your organisation!",
    "captions": ""
  },
  {
    "id": "DWOh_hRJ1uo",
    "title": "What is your best advice for becoming a Scrum Master outside software engineering?",
    "description": "Unlock the secrets to becoming a Scrum Master beyond software! Join Martin as he shares essential tips for leading teams in any field. 🌍🚀 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "E2aYkadJJok",
    "title": "Kanban Boards for Campaign Success - The Ultimate Guide to Visualizing Your Workflow",
    "description": "Unlock campaign success with Kanban! Learn to visualise your workflow, optimise processes, and boost collaboration in this ultimate guide.",
    "captions": "Really important part of visualising your work when you're doing Kanban is having some kind of Kanban board. Okay, you want to take the way your system currently operates. You want to think about the things that move across your board, things that will move through your system, and then decide what are the columns that need to move through.\n\nNow, the absolutely most optimal way to do that would be single piece flow: one item at a time to do, in progress, and done. But the reality is we don't all live in that perfect world; in fact, none of us do. So you're going to have to look at how your work flows through your system. What are the columns that you currently have on your board with the stages of the work? And come up with a board that represents that."
  },
  {
    "id": "E2OBcBqZGoA",
    "title": "05 October 2023 Agile Leadership Webinar",
    "description": "Join Martin Hinshelwood and Dr Joanna Plaskonka for insights on Agile Leadership in the 21st Century. Watch the presentation and Q&A now! #AgileLeadership #Shorts",
    "captions": ""
  },
  {
    "id": "e7L0NFYUFSw",
    "title": "Does scrum really allow you to do twice the work in half the time?",
    "description": "Explore if Scrum truly enables you to achieve twice the work in half the time, as Martin Hinshelwood unpacks its real value proposition. #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "EfogGslFkBQ",
    "title": "Avoiding Agile Banditry: Why Story Points and Velocity Are Misleading Metrics",
    "description": "Discover how to escape the story point trap in Agile! Join Martin as he reveals better metrics for success and transforms your team's value delivery. 🚀🌟",
    "captions": "If you are working on an agile team and you're focused on story points and velocity, then you're probably an agile bandit. Story points and velocity have a really negative impact on our ability to deliver. For many teams, I know there are going to be lots of people that, and you're welcome to comment, that story points and velocity work great for you. I'm sure there are teams out there; I have yet to meet a team that uses story points or velocity that got a positive benefit from it. That's from observing many, many, many teams. \n\nIt creates lots of little negative niggles, like wanting to put things in the Sprint to get the points right. \"Oh, we're going to put a bug in the Sprint; how many points is this worth?\" so that we can get our points at the end of this Sprint. The point becomes the points. We don't want the point to be the points; we want the point to be the value that we deliver for our customers. The points are irrelevant. The points are just a tool to help us as developers on a team have a conversation about what we know and what we don't, and our understanding, and to gain more understanding. \n\nThat's the point of any estimation for complex cognitive work where you're building a brand new product that doesn't exist yet. You want to be focused on the flow of work through your system and throughput and cycle time. Those are the metrics you're looking for. Story points and velocity are terrible metrics for teams to look at. There are lots of teams, especially brand new teams who have never done anything before, that definitely get encouraged to move down the story point route, and I just think it's a bad idea. Ditch the story points from the start; focus on flow metrics, cycle time, throughput. Go there. \n\nI did have a customer recently who made the biggest agile banditry mistake I have ever seen, and that was that story points were in the contract with the customer. They were mandated to do story point estimation upfront to provide that story point estimation to the customer, and the customer would measure the team based on the number of story points that they delivered. If you were out with a 15% standard deviation of the number of story points you normally deliver, then you were in trouble and potentially in breach of contract with penalties that come along with it. \n\nI can't think of a better way for everybody to just make up whatever they needed in order to complete the contract. You're not going to get transparency there; you're not going to be able to see what's going on. Those story points are not going to be the story points that you want them to be. Even if you could possibly get there, which I don't think you can, ditch story points. Don't have them in contracts. Don't ever talk about story points outside of the team. \n\nIf you want to do planning poker and sit with a team and do planning poker, fantastic. It's a great tool to help us as a team collaborate and figure out what we don't know. But at the end of that event, at the end of that meeting, delete all the data. It is of no value whatsoever beyond our understanding of the need to break things down. That's what estimation is about. It's not about story points, and it's not about velocity. Product owners should not be using velocity to monitor teams; that way lies agile banditry. \n\nSo you should avoid being agile bandits. Instead of focusing on story points and velocity, subjective metrics, focus more on objective metrics like throughput and cycle time. Don't be agile bandits. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you, or we can help you find a consultant or expert who can. You can set up a no-obligation consultation using the links below. Don't forget to like and subscribe if you enjoyed this video."
  },
  {
    "id": "eK8YscAACnE",
    "title": " shorts 5 kinds of Agile bandits. 3rd kind",
    "description": "Discover the 3rd kind of Agile bandit with Martin Hinshelwood! Uncover insights on story points and boost your team's agility. #Agile #Scrum #Shorts",
    "captions": "One of the most common forms of agile banditry is the use of story points and velocity. They're often used to beat the team around the head with them. They're used to ambush the team. They're used to ambush leadership as well. Story points and velocity are subjective. They are not useful out with the bounds of a conversation between team members. So please don't be an agile bandit. Don't use story points and velocity. Instead, look at cycle time and throughput and other objective measures."
  },
  {
    "id": "ekUL1oIMeAc",
    "title": "Worst Contribution from a Product Owner that You Know Of",
    "description": "Discover the worst product owner performance ever witnessed! Join Martin Hinshelwood as he shares valuable lessons from poor practices. #agile #scrum #shorts",
    "captions": ""
  },
  {
    "id": "El__Y7CTcrY",
    "title": "The Power of Immersive Learning in Scrum Training: Why Less Is More",
    "description": "Discover 5 reasons why Martin Hinshelwood loves immersive learning for students in Scrum. Join us for Part 1 of this insightful journey! #Agile #Scrum",
    "captions": "One of the reasons I love the immersive learning experience for students is the fact that they don't get indigestion. There are a lot of things that we talk about during the classes. Quite often, people talk about drinking from the fire hose. Um, but if you actually imagine a fire hose hitting somebody, they get knocked off their feet. And that's sometimes what it feels like with the amount of information in the very short space of time, um, that we have generally for the 2-day classes. \n\nSo what I love about the immersive classes is that there's less indigestion, there's more bite-sized pieces, and you get time to chew."
  },
  {
    "id": "eLkJ_YEhMB0",
    "title": "Overcoming the Ghost of Agile Certifications",
    "description": "Transform your Agile Scrum meetings from routine to value-driven! Discover strategies to boost productivity and avoid the ghosts of Agile past. 🌟",
    "captions": "One of the ghosts, it's actually two of the ghosts of Agile past, are the three questions you might have heard of: the three questions in relation to the Daily Scrum. What did I do yesterday? What am I doing today? And what's blocking me? Or you might be thinking of the retrospective: what went well, what didn't go well, what do we need to change, right? There's various renditions of the three questions. Three must be a good number, but the reality is that if you've got a Scrum team and you do the three questions once, maybe a couple of times, either at your daily or at your Sprint review, then that's probably okay, right? There's nothing fundamentally wrong with the three questions.\n\nBut what is dysfunctional? What is that ghost of Agile past? It's when the three questions become the purpose of the daily or the purpose of the retrospective. You'll see that on teams; they'll come into the Daily Scrum and they will go into autopilot. It becomes a rote procedure for them to follow that they each need to answer the three questions. You'll perhaps see the project manager, sorry, Scrum Master, writing down the answers to those three questions so they can go update their project plan. That is not the purpose of the daily, certainly not the purpose of the retro.\n\nWith the other three questions, you need to be focused on the value that we're delivering and is that value moving towards the outcome that we're trying to achieve? We're trying to be successful at delivering on the Sprint goal and potentially other stuff in the Sprint. Are we making progress towards that? Are we blocked with that as a group? \n\nSo what I tend to see as a more effective way to move forward is for teams to focus on the value in the Sprint. We don't need to hear from everybody, right? If Bob is working on the same task for three days in a row, it's boring to hear from Bob and really adds no value. There might be a good reason why Bob is stuck on that task for three days in a row, right? But that doesn't mean that's how we want to surface that during the Sprint, the Daily Scrum, because most people in the room don't really care, right? It's not part of their thought process.\n\nBut what you could do is focus on the value that's being delivered. What is the next most important piece of value that we need to deliver? How are we doing with it? Well, Bob and Brenda and Billy are all working together on this item, and Brenda provides an update for the team on how we're doing on that, right? As a group, how are we doing? That might be a better way to proceed. You've just one person spoken, one piece of value, and three people have been working together on that particular item.\n\nOr perhaps, focusing on the value, you might be thinking about which of these items on the board have not moved in a long time, right? What are we forgetting in our daily? That's something to look at. How old are these items? Is something getting too old on this board? You've maybe seen, if you Google \"banana peel daily work item aging,\" you'll see a board with stickies on it and actual real banana peels stuck to it. The more brown the banana peel gets, the more fruit flies there are flying around, and the older that item has been. Let's deal with it before the fruit flies come out.\n\nNow, that's just an arbitrary silly visual indication, but the reality is the longer things are stuck in your system, the longer things are stuck there, the longer they're going to take, right? I mean, the exponentially longer they're going to take the longer they're in there. And that's based on the data, right? You can go collect that data, look at that data, monitor the flow through your system, and you'll see that very much happening. Things that get stuck tend to get stuck.\n\nIf you don't have clear rules on, as a team, right, our team's way of working, if you don't have a clear consensus on what do we do about those things, quite often they just get left. Because they get left, you end up getting to the end of the Sprint and there's things you haven't done and things that haven't moved and things that get left behind because we're not focusing on maximising the value that we're delivering as a team. \n\nAnd that is a ghost of Agile past: the three questions creating dysfunctional behaviour where we're not focusing on value delivery. If you are being haunted by these ghosts of Agile past, we can help exercise them or help you find a consultant, coach, or trainer that can. Don't let these phantoms undermine the effectiveness of your value delivery, and the longer they linger, the more they will haunt your team's progress. \n\nSend me an email to martin@nkdagility.com and we'll help you get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "EMJyUOy2gP4",
    "title": "The Problem with Incompetent Scrum Masters: Why Lack of Skills in Team Context Results in Poor ROI",
    "description": "Discover the true ROI of hiring skilled Scrum Masters and learn how their competence impacts team performance, innovation, and value delivery.",
    "captions": "Having Scrum Masters that have a lack of competence within the context of the team's work, the product owner's work, and the organisational structure means that you're going to be getting less return on your investment. I mean, that's fundamentally what it is. The team is probably going to be delivering less stuff. It's probably going to be making fewer bets on new stuff, so you're probably going to spend less time on that new stuff, and they're probably going to have higher defect rates, right? Because they don't have the modern engineering excellence and DevOps practices that are needed to build awesome products in today's world.\n\nThere are absolutely teams out there that are doing this without Scrum Masters, right? I'm not disagreeing with that. I'm saying that if you have a Scrum Master with the capability to help a team maximise those capabilities, then you're going to be able to vastly increase your ROI for your team. But you need Scrum Masters with those competencies; otherwise, all you're going to get is teams that are happier with each other, not teams that are able to actually deliver more stuff. Both of those things are important, but delivering more stuff is where your ROI comes in.\n\nWhat I would want you to do is collect some metrics and use those metrics to measure the fundamental benefit that the Scrum Masters are bringing you, okay? Bang for their buck, right? Here are some examples. I'm going to use an example over here because I have some data around it. I would want to measure innovation rate, which is the percentage of time that your team spends working on net new functionality versus maintenance and support and augmenting existing functionality. \n\nIf you're Netflix, that's a new series versus a second season of an existing series, right? Or remastering some older series, right? So that's this measure. I want to measure my on-product index. I want to be measuring the percentage of time that my team members have to work on my product versus having to work on other things. What percentage of time are they actually working on my product? \n\nI want to be monitoring my usage index for my product, so I'm looking at the data around how my users interact with my product, right? That's a great metric. And then perhaps, if you have an app that is installed, I maintain and support one. You have the installed version index: what percentage of people running your tool are on the latest version of the tool, and what percentage are on older versions of the tool? Because that goes to engineering excellence and various things.\n\nLet's say you had those metrics. I'm going to tell you the industry standard for each of those metrics, and we're going to base it on a dollar. And yeah, I'm using US dollar, pound, Euro, whatever you want. For each dollar you spend on your product, what you lose by each of these metrics. The innovation rate is about 29%. That's the average innovation rate; that's from the DORA metrics. So for every dollar that you spend on your product, you're getting about 29 cents of net new value, right? For opening up new markets, for adding new capabilities to your products, 29 cents. \n\nSo you're 29 cents in the dollar, right off the bat. Most teams spend about 80% of their time working on the product and 20% of their time doing other stuff for the organisation. So that could be meetings, all hands, training stuff, right? It's about, I think that's about a day a week, isn't it? Something like that. Anyway, so now you're down to 23 cents in the dollar because you've lost 20%.\n\nWhat about usage index? What do you think the metric shows? The data that I've seen, some of it's from real customers. The happy metrics are from the Chaos Report from the Standish Group in Boston, and they found that only about 35% of the features that are built are actually used by your customers. Only about 35%, right? That's because we're not changing fast enough; we're not adapting fast enough. 35%. So now we're down to 8 cents on the dollar. \n\n8 cents on the dollar. Eight out of 100, right? 8 cents return on investment for a $1 input. What the heck? That is terrible. 8 cents on the dollar. And that metric is really optimistic. I did some work with a bank in the US who said that 35% usage index? That's crap. We know our customers way better than that. We understand they're using all of our features, or as much as, you know, they're, oh, we're 80%, right? \n\nSo we said, why don't we add some telemetry onto your product and let's see? They are cloud-based products; it was easy. So we added telemetry to the product, we gave it three months, and we looked at the data, and it was about 8% of the features in the product were actually used by their customers. And that was over a year-end. Luckily, we were just in the right time for that, so it was over a year-end. So that was a really good picture: 8%, not 35%. 8% of the features. \n\nSo that wouldn't be 8 cents in the dollar; that would be a lot less. And then let's say installed version index: let's say it's 70%. 70% of your users are on the latest version of your product. Now we're down to 6 cents on the dollar. Do you even know what your numbers look like? Just those metrics: innovation rate, on-product index, usage index, and installed version index. It's only four metrics. Go collect them and then measure your progress over time. \n\nIf you hire Scrum Masters, they should be able to change those numbers. Your Scrum Masters should be accountable for the effectiveness of the team, and you can measure the effectiveness of the team within the context of a product by some of these metrics. These are not the only metrics; I just picked four, right? Because I have some data around them. Pick some metrics that are product-based metrics, value-based metrics for you as a business, and expect those numbers to improve when you hire Scrum Masters. If they don't, you've got the wrong Scrum Masters."
  },
  {
    "id": "EoInrPvjBHo",
    "title": "How to Overcome Agile Banditry: A Product Owner’s Journey",
    "description": "Discover how to avoid rigid product ownership in Agile! Join Martin as he shares insights on fostering team engagement and achieving true Agile success. 🚀",
    "captions": "Have you ever encountered the product owner as an agile Bandit? I have. I worked with a product owner quite some years ago that believed that if every single person on the team just followed their detailed plan and Gantt chart with start times and end times for all of the tasks, if everybody just followed that, everything would work out perfectly. And the only reason it doesn't work out perfectly is because people don't follow his plan. \n\nThat is an agile Bandit. A product owner is not a project manager. They're not looking at task to time; they're focused on goals and outcomes and what is it we're trying to achieve. And we've hired these super smart people to be able to deliver these amazing products. A product owner should be focused on vision, value, and validation. Where is it we're going? What is it we get out of it? And have we managed to actually get there? \n\nIn order for a product owner to focus on those things, they perhaps need to let go of some of the things that they've used in the past and focus instead on enabling the team, the people around the product, to be an engaged, happy group of people. Have you ever met a sad, unhappy group of people that made amazing products or did amazing things as a team? I bet you haven't, because they don't exist. Happy, engaged people build great products. \n\nIf you've got a product owner who's focused, laser focused on task and work breakdown, you are not going to have a happy, engaged team that is connected to the story that we're trying to tell as a product. That person is an agile Bandit; they shouldn't be a product owner at all. It was just terrible. You should see the team. The team was just in a complete mess. They just didn't care. All they cared about was delivering stuff. \n\n\"I've got these things on my task list. I need to deliver these things or I'm going to be in trouble from the product owner.\" There was no team. So don't destroy your team with agile banditry as a product owner. Stop it. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you, or we can help you find somebody who can. You can set up a no-obligation consultation using the links below. Don't forget to like and subscribe if you enjoyed the video."
  },
  {
    "id": "EOs5kZv_7tg",
    "title": "Why is Johanna a great teacher for the Professional Agile Leadership - Essentials course?",
    "description": "Discover why Joanna Plaskonka is the ideal guide for the Professional Agile Leadership Essentials course, empowering leaders to embrace agile transformation!",
    "captions": ""
  },
  {
    "id": "eykcZoUdVO8",
    "title": "Part 2: Most influential people in Agile",
    "description": "Join Martin Hinshelwood as he shares his personal insights on the most influential figures in Agile. Discover the impact of Agile on teams! #agile #shorts",
    "captions": ""
  },
  {
    "id": "EyqLSLHk_Ik",
    "title": "Product Development Mentoring Program",
    "description": "Unlock product success with NKD Agility's mentoring! Join Martin Hinshelwood as he guides you through navigating uncertainty in product development.",
    "captions": "So the product development mentor program for software organizations is designed around helping people that actually build the products. So in Scrum, we would call those folks the developers, right? But that includes testers, coders, it includes analysts, it includes product owners, it includes cyber security operations. It includes all of the people involved in building and creating a product. \n\nAnd the product development mentor program is how do we build in excellence to the way we do things? How do we enable happy, creative people who are working together towards a common goal? Right? I don't know if you've noticed or I don't know if you've thought about this, but unhappy, sad people don't build amazing products. If the people that work on your product feel like they're unable to achieve the things that they're asked to achieve by the business, they're going to be unhappy. If they feel like the things that they're doing don't add value to the organization, they're going to be unhappy. If they feel like they know how to do something better than other people that are telling them how to do it in the organization, they're going to be unhappy. Unhappy, sad people don't build amazing products. \n\nSo how do we turn that around and enable the people in your organization to step up? We have to enable them to step up and be able to deliver the highest possible value, and that means they're going to have to be happy and engaged in what it is they're doing. We're going to have to look at things not just around the process, like your ways of work and how you manage that work, but how do you manage dependencies? How do you do DevOps and continuous delivery? How do you do testing? How do you integrate more feedback loops into your process for all of those different process control systems that you might have within your organization? \n\nAnd build a story and a culture of engineering excellence within your organization because that happy, motivated wants things to be successful, wants things to be valuable for their customers and for them and for your business is the mindset that we want in people that are all working together towards building this product. It's not just enough to have that direction, right? Although that's quite a lot of the story, they also need the knowledge and skills. They need to understand the theory behind why we're doing things a certain way so that they can take that story forward. \n\nIt's not them doing it a particular way because they've been told to; they understand the theories and principles behind the things that we're trying to do. They understand why they need to pay more attention to the quality of the product. They understand why they need to be trying to engage with the customers more. Every developer in your organization should be able to engage with customers. Almost every developer should be able to engage with customers and communicate with them effectively so that we can maximize the value. \n\nBecause ultimately, the people that are doing the work on the teams that are working on your product are the ones that are making the majority of the decisions. Even if you feel like that's not true, it is true. They're making the majority of the decisions every day. Every person on every team in your organization is making hundreds, if not thousands, of micro-decisions that will impact the future of the product, the future of how users use it, and they're not asking anybody because they don't believe that anybody else would understand the situation, right? \n\nSo the way I think about it is, if I was—my background is software engineering—so if I was making a decision on whether I use an array or a linked list, right? A linked list might be more efficient for the thing that I'm trying to do, but if I'm looking forward into the future, if I'm thinking about what it is we're trying to achieve, I'm collaborating heavily with the business. I understand the goals and objectives of what it is we're trying to achieve. I've been communicating with customers, and I understand their wants, needs, and desires. I might realize that a linked list is not the best solution for this particular problem, and I should use the less efficient array because it's going to provide us with more benefits going forward into the future. \n\nAnd that sort of choice, that's just one choice that might have taken me 20 seconds to make and a couple of hours of implementation in my system, but that could have an implication on what it is we're able to do tomorrow, what it is we're able to do next week. And it would take a bunch of rework to go back and make those changes later. Now we want to be able to go make those changes later, which is why good testing, good architectures, engineering excellence will mean we can. \n\nBut what if we could make more of the right decisions, and every single person on the team could make more of the right decisions as we flow towards the end of our product? Because the further we get down that line of building our product, the more of our product we've actually created, right? Our inventory of product is bigger, and making changes to that, rearranging the warehouse, right? If you've got 10 things in your warehouse, it's super easy to rearrange. If you've got 100,000 things in your warehouse, it's not very easy to rearrange, right? And the chances of something going wrong, something going missing, all of those things is pretty high. \n\nHow do we create an environment within which those things are just not true? We're not going to have—we're, in general, not going to have those mistakes because everybody is paying attention to what it is we're trying to do. We're working together towards that common goal. We're making decisions based on the best possible outcomes with the inbuilt knowledge of what's happening in the future. Intent-based leadership, right? How do we create that story at the team level so that we're all going in the same direction?"
  },
  {
    "id": "F0jOj6ql330",
    "title": "Most Rewarding Part of Being a Scrum Developer?",
    "description": "Discover the most rewarding aspect of being a Scrum developer with Martin Hinshelwood. Join us for insights on teamwork and agile success! #scrum #agile #shorts",
    "captions": ""
  },
  {
    "id": "f1cWND9Wsh0",
    "title": "Why is Lego a shit idea for a Scrum Trainer - Part 1",
    "description": "Discover why using LEGO in scrum training might not be the best idea. Join us for Part 1 of this insightful discussion! #scrum #agile #shorts",
    "captions": ""
  },
  {
    "id": "F8a6gtXxLe0",
    "title": "nkdAgility Healthgrades Interview Dave Frisch",
    "description": "Join Dave Frisch as he shares his journey from resistance to acceptance in training at Healthgrades, revealing insights from his unique dinner strategy!",
    "captions": ""
  },
  {
    "id": "f8q2fBkUez0",
    "title": "Should Companies Take Money Off The Table - with Martin , Michael , & Rijon",
    "description": "Join our panel as we explore if companies should prioritise intrinsic motivation over financial incentives, inspired by Dan Pink's *Drive*.",
    "captions": "Good now to you. Hello, good now. This is Riffing with Ryan. I am Ryan Ericson, surprise surprise. If you didn't want to see me this morning, too bad for you. But if you did, thank you and welcome to be here today for an episode that we have titled \"Should Companies Take Money Off the Table?\" Why, why, why, you ask, is this the topic? Because of the two gentlemen I'm going to invite out of the Penalty Box on stage. Had a little bit of a repartee about this a couple of weeks ago. We've been trying to arrange the session for a little bit. One of those gentlemen I'm going to bring on stage now is Martin Hinwood. \n\nHello, Martin. \n\nHello, how you doing? \n\nOh, I'm just fantastic, you know that, because I'm always fantastic. And the second gentleman to bring on to the stage for this conversation today is Mr Michael Cers. \n\nHello, Michael. \n\nHello, a frequent partner and friend on this particular show that we do here. I do, God, I keep calling it a we. Who is a we anyway? \n\nSo, money. I know, and I have a big huge deal with saying we, we, we. Like we are not a we until I agree that I am part of this we. You get it? And that's just me. But I would propose a couple of things here. One is that Martin, actually I'm going to do this one way. Michael, let's go first and say just ten words or so about who you are, what it is you do, and where. And we'll go to Martin, and then we'll come back to Michael again, and you can give your riff to start us off. \n\nSo, without further ado, Michael, give me ten words about your life. \n\nOh, ten words? Okay, that was too okay. So, I'm currently COO for one of the pretty important edge networking things. I have my background in everything IT, computers. Love to be full-stack developer. Been in agile organizational development, and I like to get into a lot of conversations, write a lot of stuff, and yeah, that's my life. \n\nThere you go. Alright, ten words from Martin. \n\nWell, I am a professional Scrum trainer, a professional Kanban trainer, and I've been a Microsoft MVP in DevOps for the past 15 years. I run my own business called Naked Agility, where I do agile DevOps consulting, coaching, helping people get better at building software and products. \n\nPerfect, nice. That's the ten words. Okay, Martin gets round one for using less words than you did, Michael, so sorry about that. \n\nSo, to set the stage for the conversation, again, we're talking about money. The post that you did a couple of weeks ago, Michael, had some themes around financial literacy. \n\nAgain, I'll leave it there. Financial literacy, is that enough to guide you into your point of view on that particular topic, Michael? \n\nThat's you. \n\nOh, that was my cue. Good. I didn't... So, I can bring the post up if you want, but it was, should companies take money off the table? That was... Alfie Kohn, Dan Pink says you take money off the table is beautiful. And then you came in with a not that. \n\nSo, exactly. So, there's one very interesting proverb I picked up in my student time, and that's everything worth doing is worth overdoing. So, that is basically where we get from. Of course, I know that the original intent of Dan Pink is to say that I don't want people to be worried about their livelihood because it distracts them from achieving the things that they're setting out to achieve. And that is not something that we would like to have in a company. But of course, I'm taking this one a bit further, and it's also based a lot on investigation, a lot of experience in organizational transformation, organizational change, observing also from the good old times of being a project manager or system architect that the financial conversation is usually very, very hard. \n\nA friend of mine recently also gave this example. So, you have this team of developers, they're working in their traditional way of working, and everybody's somehow happy. The salaries are paid, everybody has a stable job, nobody needs to worry about anything. And so they have this issue that they're doing three releases per year, which is not even once a quarter, but every three or four months, more like it. And of course, they're always doing work, but then when the release comes, first you come the release packaging, then comes release testing, the debugging, preparing the release, release coordination, all of those kind of things. \n\nAnd so does this team have a problem? Yes or no? And the team somehow starts to argue, \"Yeah, you know what? Nowadays, modern and CI/CD, and we should make the transition.\" And what do you think the manager understands? \"Oh, the nerds want a new toy.\" What does the manager say? \"No, we've got serious work to do.\" So what they're failing is the communication about how much does this process cost us. \n\nSo we're spending like 60 days for a whole team just on the release management, on the release process every quarter or every four months. That is 60 days cost. How much? Let's just say $1,000 per developer per day. So 60,000 per developer. You have a team of ten people. We're talking 600,000 three times a year. We're talking over $2 million for what? What do we get for that? What is the value we produce? And that is a kind of a different conversation. \n\nAnd yeah, we would like to introduce continuous delivery because it's a better process, because it's more modern, and it's kind of a conversation many people are not able to lead. And because they have never considered how much are we spending on what and what is the returns that we are getting because they do not have the literacy to even think in those terms. \n\nAnd what I just told you is really, really simple math. One developer, one day, $1,000. Ten developers is $10,000. Sixty days is $600,000. There's no magic to this. It's not like you need to have studied accounting or an MBA in order to do this kind of thing. But people struggle to have this conversation because, like I said, the money for ties has been taken off the table. They are happy. We get a fixed salary. Can we live from this salary? We can pay our rent. And where the money comes from or where the money goes, that's my manager's problem. But like that, they are bringing themselves into a situation where they are unable to make the impact that they need to make in order to do the best possible job. \n\nAlright, we let that sit for a moment. Thank you, Michael. Martin, you had a response to that in public. I'll hang you out there to when you go. \n\nYeah, so I mean, there's absolutely nothing wrong with what Michael said. I think he is correct that there is an epidemic of people in organizations that don't understand what their time and their group time costs to the business, costs to the customers. So they're making decisions and making, as you know, Ryan, Michael, but every developer, every person in your organization, all the way up the chain, makes lots of micro-decisions every day within the context of what they know, their knowledge and expertise, that they don't go ask anybody. But they make those decisions, and those decisions cost the business money. \n\nAnd are they making the right decisions, or are they making the wrong ones? And I fully agree that they should be making those decisions within the context of understanding what it costs to do business. I used to work on a Scrum team with an Australian company, and we knew that our Scrum team was charged to the customer. So this was a consulting company, so that includes margin as well, for $60,000 a Sprint. \n\nSo this was Australian dollars, right? So $60,000 for two weeks. So we were looking at every Sprint thinking about, well, if the customer is giving us $60,000 and we're doing this work, what are we providing for them? What are we doing next? What's the most valuable thing we can do to spend their $60,000? \n\nAnd that's absolutely key. But I think that is completely unrelated to the Dan Pink story. It might be anecdotally related, as in a manager that sucks or an organization that sucks, and I'm using \"sucks\" in a totally bad manner there, but that isn't very good. That doesn't understand these concepts might equate the two, and thus we end up with a difficult conflation that Michael's talking about. \n\nBut the idea of me as an employee and my personal outlook on my finances and having enough as an individual with my family has nothing to do with the business. The business that's running, that's a totally different story. That's a personal story to the business operating cost story. Although my personal story of how much I earn and how much is provided to me is a number on the accounting for that, right? \n\nBut for me, this is a personal story of if I'm sitting here, this is the Dan Pink idea. If I'm sitting here worried about being able to pay my rent, I'm not going to be focused on solving the business problems. I'm going to be focused on worrying to pay my rent. Me having enough so I'm not worried about the intrinsic versus extrinsic motivations and can focus on the intrinsic motivations of autonomy, mastery, and purpose does not preclude me understanding how much I and my team and the work that we're doing costs to the business or the customers. \n\nThey should definitely understand that stuff, but I think my belief is they're two unrelated and separate stories. However, the outcome of the personal story is a line item on the accounting on the other story, if that makes sense. That's the way I think about it. \n\nActually, in this one, and this may be my personal take here, I have a company too. How do you separate me as a person from the company I run? It's probably pretty difficult because I identify as this company, and this company exists because of me. If this company is in financial trouble, so am I, and the other way around. \n\nSo for me, as a business owner, it is absolutely natural that every financial decision, every product decision, every development decision I have to take from two angles. Even the question, do I go into the cloud? Do I rent the VM? Do I host this stuff by myself? Is made from a perspective of this one. Ultimately, it hits my pocket. \n\nSo I have a different way of making decisions than I would have as an employee who doesn't care where the bill gets sent and how big it is. And even you have this, I mean, I'm joking in this one because what we're talking about is five or ten dollars, but still the point stays that if you have financial responsibility for your own business because it affects you personally, you make different decisions than if it's completely detached. \n\nSure, but that's not an employee issue. That's a business owner issue, and there is only one or two or three of you in a particular business, maybe a little bit more depending on the scale of the business. And then there's hundreds of other people who are the people doing the work that actually don't care about that story explicitly because the success of that story for you as a business owner lines your pocket. It does nothing for the employees. \n\nBut if the business makes a hundred million more profit this year, I don't get any more as an employee in my paycheck, in most companies, unless there's profit share, right? But as a business owner, and as a business owner myself, I do separate those things. My success as a business owner means I earn more money, right? Because it's my business. \n\nBut I need to be conscious as a business owner that that's not how my employees think, and that's not how they're supposed to think. And even all of that doesn't preclude those employees taking care of the pennies and pounds. A great example of this is what they've done in Jaguar Land Rover recently. \n\nSo one of the things that they found, they were doing a bunch of analysis on why this disaster happened. The disaster that cost them something like $300 million. And the fundamental root cause of this problem was an aging machine that was creating slightly faulty parts. Like they were good enough, but not good enough long term, so they had to be replaced later, and that was much more expensive. \n\nAnd this machine was run by a person, and they asked that person, \"Why didn't you request a new machine?\" And they're like, \"I've requested a new machine every year for the past five years.\" But what happened in that story is that that request went up in the organization to somebody who it wasn't in their budget for this year because perhaps they were looking after the shareholders, right? And we want to have a certain amount, so we can't afford $5 million for a new machine, and they would deny that request. \n\nSo the change that they made in the organization was they now allow every single person in the organization to approve any amount of spend. And that sounds ridiculous. That sounds like people within the organization will just start spending money willy-nilly, and you know, you're then hemorrhaging cash. But they created this understanding of kind of spend it like it's your own money, right? Would you spend this money on this thing? \n\nAnd that's kind of, that's orthogonal but related to what it is we're talking about, right? That we want the people doing the work, regardless of whether they are owners in the business or not, if you're doing work, if you're making decisions, you want them making decisions with the understanding of the context, the operating context of the business, the costs that we're running, and things that are happening. \n\nAnd I absolutely, one thing I totally agree with you, Michael, I see time and again, especially in professional services organizations, where they seem to deliberately shield the people doing the work from the costs of the work. I was just working in an organization where I think we had the group that I was in that was about 150 people working with the customer, right? And this was mega ridiculous cost. You probably would talk about an operating cost per day of about $2,000, $2,500, maybe $3,000 to the customer, right? \n\nSo $3,000 a day per person, 150 people, that's more than a, that's holy crap, that's like more than $400,000. My math in my head sucks, Michael, sorry. It's more than $400,000 per day. It's a lot, a lot of money. And what were they getting for it? People were sitting doing make-work because they couldn't think of what to do. But they didn't fundamentally understand the cost of the business. They didn't understand what they were being charged to the business, to the customer. They didn't understand how much money they were burning just sitting there not doing anything for a day. \n\nSo they weren't making decisions with context, and it's that context that's important. And I very much agree that lots of businesses think that they have to shield their staff from the cost of actually doing business, and I think that's wrong. \n\nExactly, and that is the point where I said this is the point where I said that, look, really, and I was teasing with this post quoting Dan Pink, \"Take the money off the table,\" of course, because this is the point where it goes wrong when you run your business and say, \"I do not want for any reason, whatever, not picking out anything, my employees to know the financial impact of what they are doing.\" At that point, you're hurting your own business. You cannot run a successful business if you're surrounded by people who don't know the consequences of their actions from a financial perspective. \n\nI guess then I really don't understand why you put down on the table because they're completely unrelated things, right? So I know you're saying you're teasing, right? But even when you're teasing, if you're making an analogy between two things, they have to be the same thing. And I think they're fundamentally not the same thing, and that's what triggered me to reply, right? \n\nBecause I guess I got suckered. I'm easy to be triggered, right? I have, I definitely, I have an Asperger's coach and helps me very much on not poking at things. But for some, when they're ABS, the issue I have is not that when you're creating these two things that are radically different, even in kind of in G, right? It's not for the likes of us who are practitioners within this space who could potentially fully understand that, \"Oh yeah, Michael's just taking a rip at Dan Pink to try and get engagement and talk about the topic.\" \n\nBut pull it apart a little bit. But what about all of the people out there who stumble upon your post? And what they read, and if they read your post and they're not in that context of understanding these concepts, they're going to read, \"Dan Pink's ideas are crap. They're not what we want to be looking at, and we should disregard everything he's talking about.\" \n\nThat's what I feel that they would hear, which is why I quite often, Ryan will know this because we follow each other as well, I quite often reply to posts based on that context, right? I'm not actually replying to the person who made the post. I'm replying to all the other people who would read that post, and maybe at least I can save some percentage of them from getting the wrong end of the stick. \n\nThat's a British idiom. What's wrong end of the stick would be getting the wrong idea, right? Misinterpreting the joke as a reality. And I think it's very easy to make those conflations that result. What's the dual track agile? That's a really famous one, right? \n\nAre you familiar with dual track agile? \n\nYeah, so dual track agile is this idea, sorry, go means the ability to do the right thing at the right time. So dual track is, let's have the ability to sometimes do the right thing. Isn't that better than doing it all the time? \n\nYeah, so this is Joel's track agile. It's this paper talking about this idea that there are two types of work, right? You've got discovery work and you've got delivery work, and you need to do both. And the same people need to ebb and flow between that work depending on how, you know, if you don't know about something, you're going to spend more time on that discovery track. If you know a lot about it and you're just executing on it, you'll maybe spend a little bit more time on that delivery track. \n\nBut lots of people read that and then post about dual track agile being you need a delivery team and a discovery team, and they end up being two completely separate teams. And then we all have to spend a whole bunch of time and effort explaining to people that, \"No, that when people say that, that's not what it was talking about.\" You end up having to explain away those issues. \n\nAnd I just felt that there was a danger in the comment that you made of that similar idea happening, that disconnect between your intent and what we want to help people understand and what Dan Pink was trying to help people understand, which is that intrinsic-extrinsic motivation thing, which is separate from that business operating cost as part of the context that every employee should understand. \n\nInterestingly, I would say, yeah, I am not so sure that, how to say, and like you say, maybe business owners are a little bit different than the regular employees. And the question of should money be a motivating factor? But then I even come back to the concept, how can you promote entrepreneurship, not entrepreneurship, but entrepreneurship if your employees don't have this mindset? \n\nWhich mindset are we talking about? Because there's the mindset of they're happy and successful and feel like they can spend more time focusing on the work because we've taken money off the table at home versus the business focus of we need to understand the financial motivations within the context of business for business. And I don't think that piece is any different between an employee and a business owner, right? \n\nIt shouldn't be. If we can agree that it shouldn't be, I'm with you. The problem is, in practice, it too often is very, very different. \n\nWhy does that happen? \n\nI've got an idea on that. It's a very good question. Ultimately, I mean, you brought this up that the employee, they do not think like the business owner. So yes, I agree with you. So what's the... I do agree. I mean, I was thinking about this one from my own perspective. I used to be an employee for a long number of years, and when I transitioned into freelancing, into being a business owner, this shift, it took me, like I would say, like three or four years to start thinking differently. \n\nI mean, in part, it is, like you said, because as an employee, there are other people making this decision for me. I used to work for a company where I was out of the loop. I did not know the company's finances except for, \"Yeah, we don't have enough money for a raise.\" \n\nSo this... go ahead, go ahead. I think you're going to come back in there. \n\nYeah, I think I think there's a fundamental why here that's really important, which is why historically that thing that we're talking about has happened, that we've disconnected that businesses have systematically and deliberately disconnected their employees from the financial runnings of the business. And it's fundamentally so that they don't discover what their colleagues are being paid because they pay them differently. \n\nI had this exact circumstance. I used to work for a little company called Merrill Lynch. You might have... yeah, it was not fun, Ryan. It was not fun. I subprime mortgage as well, so it was even worse pre-2008. The... so I was having a conversation with one of my colleagues, and I offhandedly, not even thinking of the ramifications, offhandedly said, \"Oh, now I'm in the 40% tax bracket. That's going to kind of suck.\" \n\nAnd my colleague, who did exactly the same job as me, was incredibly pissed because they were nowhere near that 40% tax bracket. So they go to their boss, and I get into trouble rather than them getting into trouble for not paying them properly. I get into trouble for letting slip. \n\nFunnily enough, that was in 2007, and in 2008 in the UK, that became protected speech, right? Because in many places, I know it's... to... it... everybody should be talking. This is part of how we break this cycle, Michael, is that every employee should be talking to each other about the financial stories. How much do we earn should be open information within an organization. \n\nIt absolutely should, and I think in most states in the US, isn't it? It's protected speech as well, or is it federally protected? I think it might be federally protected. As an employer, you're not allowed to say to your employees, \"You can't tell each other about...\" If you don't want to, you're not forced to talk about it, right? \n\nYeah, I'd have to check into the legality of it, but that seems like it would be a more company-to-company kind of compliance issue. I'm not sure. \n\nRegulations protect it, and that's, again, this is completely BS as far as I'm concerned. I think, as far as you're concerned, what I was going to say is going to Michael's point and then coming back. When you become a contractor, when you have your own business, what are you? You're independent. Well, what does that mean? You are dependent on yourself for your financial awareness and your business acumen and those things. \n\nBut when you are employed by a company who has the financial information and controls the compensation about who they decide where you are ranked, what are you? You're dependent. It creates a dependency relationship. And then I think that was evidenced, Martin, by that situation. \n\nOh, well, we're dependent on this other person to give... well, hey, boss, you know, Martin's telling me this, and then seeking some other authority as opposed to having a conversation where the structure is set up for you to have that conversation. \n\nAnd I agree with you. I mean, Ryan and I both went on the same masterclass, so we know. The reality is in many organizations, though, that you do have that situation, even with the best intentions of leadership when it comes down to salaries and stuff. You normally... I'm not saying it's the right... I'm not saying it's good, but you normally end up in that hierarchy issue with line management and discussions of salary, perhaps with HR, right? \n\nAnd I think that the... that does fundamentally have to change. I think I don't fully understand what that would look like in an ideal world, and maybe there is no ideal, and it's company to company and that kind of thing. But I did see... who was the web guy from New York that used to be very active? I think he's retired now. He had a company, and he published all of his employees' salaries for all of his employees were published internally in the organization, and they had levels. \n\nBecause it wasn't... I can't remember the guy, but this was an engineering... they were a software development company. And it was just... it was very interesting. And he would open source that story, right? And say, \"Here's the story. Here's what I'm thinking.\" And actually publish it publicly and then say, \"What do you think? Is this going to work? What are the things that might not work?\" \n\nAnd I think that kind of open discussion... I actually... I don't understand where the closed salary discussion comes from, me personally. And this is a Martin thing. I'm quite happy to tell anybody what I earn, right? But I definitely feel like most people feel like it's secret information. \n\nYeah, I'm not sure where that comes from. There's also a lot... how to say, there's also a cultural element to this. I know that in Germany, there's this PR: you don't talk about money. You have it. But literally, that is part of the problem, that the people, the business owners who have access to the money, they don't talk about it. \n\nSo that other people don't know. And like you already mentioned, it creates a dependency. It creates a power slope. And even bringing this one back to the point of taking the money off the table, as a regular employee, will I ever know whether I am being paid enough to be silent or whether I am being paid as much as I am worth? \n\nHow do I find out? For that one, I need to understand what my contribution to the company is because if I understand this, I can argue, \"Look, because of me, you're making $50 million. How about my share is just two of that?\" It's an entirely different story of, \"I would like a raise.\" \n\nYeah, but financial situation is difficult. Well, perhaps employee-employer relationships have had their time, right? Perhaps it should be business owner to business owner relationship, and everybody we hire in our organization is... I always found it weird. Ryan won't get... maybe won't get this, and I'm not sure what happens in Germany. I found it weird, Ryan, that I had to do my tax returns when I went to the US. \n\nIn the UK, you don't do a tax return. A normal employee does not do a tax return. It's done for you by your company and the tax man. \n\nWhy? \n\nYeah, because that's how it's done here. Same reason we don't have sales tax, and it's all included in the price. You pay the price on the ticket is the price you pay, right? The salary I get is the salary I get, and I don't have to worry about how much tax I've paid. I don't have to... that's all taken care of by your employer. \n\nRight. How is that different? So this is very interesting. I had no idea how is that different in Germany, Michael. \n\nYeah, actually, it's very interesting. The tax system is probably... it's been a running gag for a long time that sometimes politicians like to advertise that one... it was like ten years ago they said that maybe we should simplify the tax system so that your tax form fits on a beer stamp. But this never happened. If I would show you the tax forms, and literally every single German has to do their tax form every year, and it's a science, literally. It takes you about a day just because of how complicated it is. \n\nAnd how to say, in Germany, you tell your employer your envisioned gross salary, but that doesn't mean that that is your net salary. So what is transferred to you on your bank account is about half of that, and depending on which tax bracket you are and whether you're single, married, have children or more, it could be a bit more than half or a bit less than half. \n\nThe problem is that this one already creates the first level where people feel treated very, very unfairly because in Germany, you have two levels of tax. One is the tax that you pay as an employee, and the other is the level of tax that the employer pays. \n\nAnd I like to say I run a business. I charge my customer €100. From those €100, I, as a private person, can spend about 30. The rest goes to the government in one form or another. So as an employer, I always see the €100 that I need to make in order to pay myself as an employee. There is €0 as an employee. \n\nAnd there was even one comedian in Germany who made this joke that it's a bit schizophrenic running a one-person company. As an employer, you say, \"My employees, they're asking too much money.\" And as an employee, you say, \"My employer is ripping me off.\" \n\nBut I think, I think, Michael, by default, if you're just an employee in Germany and you have no special circumstances, the company does your tax return. No, correct? \n\nNo, no, they file, of course, they legally have to do, but you still have to take care of your tax returns by yourself. The company's not involved in this process. \n\nOkay, that's not the information I have over here. It just says that you may want to file tax returns, but you don't have to. In the UK, I can file as an employee. I can file a tax return if I want to, but by default, unless if I'm only working for one company, Ryan, if I only have one employer, then they know everything about my incoming finances. \n\nSo unless I have any other things that I need to declare, I can just let the company file my tax returns on my behalf, and that's a legal obligation of theirs within the UK. So they pay the employees' tax. \n\nWhat's actually really interesting is companies shield from employees that other piece that Michael's talking about because you have the cost of the employee, right, from the perspective of the employee. Like I know I get paid X amount, and my tax is this amount, but what you don't see is the employer's liability tax, workers' compensation, and federal programs, and all that stuff that we have here. \n\nAnd even like we pay something called national insurance, which is like Social Security in the US, which used to be for a specific thing, and now it's just tax, right? And there's employer and employees' contributions, and the employer's contributions is higher. So staff don't normally see or even understand. Staff, employees, not business owners, just pure employees don't normally have any visibility on what they actually cost the business. \n\nExactly, and yeah, that's weird. Well, I think this comes down to a basic... so we're talking about individual incentivization, right? And I think this... and Michael, you brought Alfie Kohn into the conversation with that too. And Alfie, as you know, and Martin, I think you know this too from where we've been talking about in Beta Codex and all that stuff, is that incentives are individual incentives are demotivating. The punished by rewards kind of thing. \n\nAnd that employee of the month is one of my favourite ones. \n\nYeah, well, and I think we're coming down to this, okay, so my individual tax burden is this. What am I contributing to that? That all that conversation becomes null and void when a small group of employees in this area are managing a business in and of themselves with their own profit and loss statement. They're managing that again. It's a different relationship in terms of, oh, it doesn't necessarily matter what all of us... no, no one person creates value on their own. \n\nAnd I think that that is a big concept because I need both of you to create value in whatever I'm doing. And on the variable compensation is top of that. But if you raise... and then I'll leave there, but the baseline base compensation, if you pay people fairly and pay them well, then that quote... I think this is a Deming quote. I think that that is actually... I was trying to find it. My Deming... I'm not 100% sure, but I'm... \n\nYeah, I think so. I think it's really interesting, though, Ryan, that the... and suddenly we're starting to have a conversation just about capitalism, right? The big elephant in the room, right? In the system within which we operate, that we're all operating is fundamentally about a small group of people gathering large amounts of wealth, right? Because the wealth flows from the people who don't get paid very much, but we make a lot of profit on the people that are not. \n\nAnd rather than paying them better, the wealth flows up to that one person at the top, right? The CEO with the multi-million dollar salary for whatever reason. But they're taking a lot of risk. But are they really taking $100 million worth of risk? Personal risk? Not really, right? \n\nAnd I think that's... that idea that we were kind of the employer-employee relationship, if every person in the story would their own boss, right? You basically got a... they're a bunch of boutique individuals who are selling themselves for how much they think they're worth and doing their own taxes and doing their own thing and understanding that part of the business, like you're saying, Ryan, doing profit and loss for that part of the business. \n\nYeah, I think the reason we don't have that systemically is because those people would be absolutely aghast at the levels of profit that they generate. That's money that's going somewhere else that they don't get, right? \n\nExactly. Behind the business to hide that. It's not really hide; it's a virtual hide. Make it as... what's the...  01:00:00.000 --> 01:00:00.000"
  },
  {
    "id": "faoWuCkKC0U",
    "title": "Reasons to do a PSPO-A Course in 60 Seconds",
    "description": "Discover why the Advanced PSPO-A course is a game-changer for your career in just 60 seconds! Join Martin Hinshelwood for insights. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "fayDa6ihe0g",
    "title": "Live Virtual Professional Scrum Product Owner in 5 minutes!",
    "description": "Discover our Scrum Product Owner training in just 5 minutes! Watch a timelapse of four half-days and explore free workshops on our channel.",
    "captions": ""
  },
  {
    "id": "fcOSewXez3I",
    "title": "How is technology like AI changing the world we work in?",
    "description": "Discover how AI and technology are transforming our work environments and why embracing these changes is essential for future success.",
    "captions": ""
  },
  {
    "id": "FdQpGx-FW-0",
    "title": "7 harbingers of the Agile apocalypse. Judgement.",
    "description": "Unlock the essence of Agile! 🚀 Join Martin as he explores core principles, pitfalls of prescriptive methods, and what truly motivates today's workforce.",
    "captions": ""
  },
  {
    "id": "fErvo8yvVmo",
    "title": "PSPO S1 2m",
    "description": "Unlock the secrets of PSPO S1 in just 2 minutes! Dive into key insights and strategies to elevate your skills and knowledge. Don't miss out!",
    "captions": ""
  },
  {
    "id": "FFrTLuRhyVo",
    "title": "Missed opportunities, the hidden cost of technical debt",
    "description": "Discover how missed opportunities reveal the hidden costs of technical debt in product development. Learn more at nkdagility.com! #Agile #ProductManagement",
    "captions": "Technical debt is not just a cost; it's a missed opportunity. How much money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having a high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "id": "Fg90Nit7Q9Q",
    "title": "Can you align DevOps and Software Engineering Teams Through Scrum?",
    "description": "Discover how Scrum can bridge the gap between DevOps and Software Engineering teams for better collaboration and delivery in this insightful short video!",
    "captions": ""
  },
  {
    "id": "Fgla_Oox_sE",
    "title": "Mastering the Art of Product Ownership: The Power of Marketing Your Vision",
    "description": "Unlock product ownership success! Discover how to market your vision, engage stakeholders, and deliver value in our latest video. Subscribe for expert tips!",
    "captions": "One of the things that a new product owner needs to understand is that there's a lot of their job which is about marketing. You're going to be marketing the vision that you have in your product to the people doing the work, to the people consuming the work, and to the people paying for the work. They might be different people. They have to buy into your story. They have to engage with what it is you're trying to do, and ultimately they need to engage emotionally with that story. That's what marketing is all about: how do you enable people to engage emotionally with what it is you're trying to do so that they're following with anticipation what it is that you're trying to do? That's how you get people engaged in your story.\n\nOne of the key issues I see in organisations is the great difficulty that product owners, especially new product owners, find in getting your stakeholders to turn up for your Sprint reviews. Right? Often times it's hard, even if they do turn up, to get them to provide you with feedback. Right? You ask them for feedback and all you can hear is tumble weeds rolling through the desert. Right? You're trying to engage them and they're just not getting there. And that's, to me, a marketing issue. They don't understand the value of what you're showing them. They're not emotionally engaged in what you're showing them. If they were emotionally engaged, they'd be desperate to sneak into that discussion and provide that feedback, provide you with more information. And that is part of marketing. You need to figure that out: how do you get into that story?\n\nWe talk about it in the Professional Scrum Product Owner only a little bit. I talk about it more in the course, where does... So, I like this topic, but also we talk about it a little bit more in depth in the Advanced Product Owner because we start talking about the visionary and the collaborator and the different aspects of the product owner. And that's where it starts to matter a little bit more when you get a little bit more advanced. But marketing is that piece that enables you to sell your story and your conversation to the other people that are involved in your product and maximise the value that you're delivering.\n\nBecause all the people funneling, providing input to your funnel, that results in your product backlog, that results in the value that you're delivering as you release to customers. Everybody's following the same funnel rather than buffing against it with friction because they're all going in different directions. Is your leadership of your organisation, are your members of your team, are your customers all aligned in where you're going and what you're trying to achieve? That's your job as a product owner: to figure that out.\n\nIf you find it hard to enable this engagement with your stakeholders and get them into your Sprint reviews, my team at N Agility can help perfect your ability to do that, or we can find somebody who can help you. Don't let these sorts of issues inhibit your ability to deliver value. That lack of feedback at the review kind of sucks. Use the links in the description to get help as soon as you can."
  },
  {
    "id": "FJjiCodxyK4",
    "title": "Why do you prefer agile consulting over agile coaching?",
    "description": "Discover why Martin Hinshelwood prefers agile consulting over coaching in this insightful video, exploring the benefits of short-term engagements for agile teams.",
    "captions": ""
  },
  {
    "id": "Fm24oKNN--w",
    "title": "nkdAgility Healthgrades Interview CJSingh",
    "description": "Join Martin Hinshelwood as he transforms Healthgrades with Scrum training, uniting teams and igniting a journey towards enhanced business agility!",
    "captions": ""
  },
  {
    "id": "FNFV4mp-0pg",
    "title": "Is a scrum master an agile micromanager?",
    "description": "Join Martin Hinshelwood in this #YouTubeShort as he tackles the question: Is a Scrum Master an Agile micromanager? Discover insights in just 60 seconds!",
    "captions": ""
  },
  {
    "id": "Fo49oedF34g",
    "title": "Czym różni się zwinne przywództwo od tradycyjnego zarządzania",
    "description": "Discover the key differences between agile leadership and traditional management in this insightful video by Naked Agility. Transform your team's potential!",
    "captions": ""
  },
  {
    "id": "FquWl26Uc8Y",
    "title": "Bad code isn't technical debt. It's incompetence",
    "description": "Discover why bad code is a sign of incompetence, not just technical debt. Learn more in our insightful video! #Coding #SoftwareDevelopment",
    "captions": "I've written bad code and shipped it. That's not technical debt; that's incompetence. Right? So, within the context of a competent team, there's known technical debt and unknown technical debt. But there's another thing that we call technical debt, which is just shipping bad code, making poor choices, knowing that they're poor choices, and not doing anything about it. Right? Shipping bad code. Stop shipping bad code would be the way you pay that one back. \n\nBut for technical debt, you need to pay it back. You need to prioritise paying back that technical debt. Think of it more as an unhedged fund rather than a debt like a credit card. Most debt is secured against something, secured against an asset. If you stop paying your mortgage, then the bank comes and repossesses your house and gets their money back, right? And maybe you get some leftovers because you've paid some of your mortgage."
  },
  {
    "id": "Frqfd0EPj_4",
    "title": "The Future of Scrum Training: Immersive Learning for Lasting Change",
    "description": "Explore the future of Scrum training with immersive learning! Discover how it enhances understanding and implementation in complex environments.",
    "captions": "So I believe that immersive learning is the future of, I think, almost all of this type of learning. Whether it's Scrum or Kanban or anything where people are involved, you've got a high degree of complexity. This is different from tools training, right? Different from tools training. But anytime you're talking about processes and practices that people have to organise around, I think the immersive learning approach is much more the future of the way that learning should be happening.\n\nIt's very difficult for people to spend two days or four half days in a class and then be able to go back into their organisation and actually change something. It's very difficult because they'll go to try and change something in their organisation and they'll run into all of these roadblocks, all of these things that get in the way, and there's nobody there to help and support them because, you know, we did the training a couple of weeks ago and now we're doing this, and we run into those roadblocks.\n\nSo the immersive format allows people to keep coming back around and having those questions, having them answered, especially the longer immersive stories. So they last six to ten weeks, and collaborating around with that group of people, bringing those learnings back to the organisation. This is a total game changer for the learning experience that people get when they come to these types of classes.\n\nSo definitely, the future of Scrum training is immersive. If you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "id": "fUj1k47pDg8",
    "title": "PPDV course overview with Dr Joanna Plaskonka",
    "description": "Join Dr Joanna Plaskonka for a quick overview of the PPDV course and discover how to enhance your product discovery skills! Register now!",
    "captions": "Let's start with the why. Why was the PPD V course created? Based on our observations of how companies work and how teams work, it seems there is still a lot of attention when it comes to delivery. One may also think that, hey, if we have to put just one goal of every sprint, what is the most important thing that we have to achieve? It is creating a product increment. Done. Product increment. \n\nSo, it seems this is an important topic, right? But this is not enough, and I believe we forget, although we emphasise this a lot, that we are solving complex problems. What does it mean? We, along this product development journey, will make a lot of assumptions. What is even worse, some of those assumptions, in some cases, I would dare to say even the majority of them, might be made unconsciously. \n\nSo, we made an assumption, we take the next step, but we miss a learning opportunity. This may lead us to the feature factory problem. Of course, we have a lot of memes and stories like, \"Hey, strong stakeholders, stakeholder-driven development,\" and here we go, we have the feature factory problem in place. But if we think about it deeper, there might be a lot of factors affecting this problem. \n\nMaybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not the healthy collaboration. And maybe we have chosen the wrong metrics. We have a misalignment here. All those things may cause the problem that we call the feature factory problem. \n\nSo, what do we want to do with this course? We want to emphasise the topic of assumptions in the complex world. In the complex environment, we don't know many things. In fact, in many cases, we don't know what we don't know yet. So, that's why this path towards creating high value, towards creating valuable products and solutions for the customers, should be some kind of way how we navigate around assumptions. \n\nOur biggest question is: what works best for the user? To find the answer with the knowledge gained in that course, we will embrace that. In fact, a full end-to-end empirical cycle requires discovery, delivery, and validation. So, those three elements work together to help us navigate around those assumptions. \n\nOur new course is designed for product leaders, product owners, product managers, but also for product teams in general. We believe that everyone involved in the product development process will benefit from this class. This class is designed to be a one-day course, so around eight hours, which can also be split into two half days or smaller chunks. \n\nIn this class, we will use a case study that will help us navigate through different concepts throughout this whole story, how to better incorporate discovery and validation into the product development process. Thanks to that, we will get familiar with working with assumptions, experimentation, collecting evidence, and an important word for this class: learning. \n\nSo, it will be a conscious learning process on how to build better and better products."
  },
  {
    "id": "FZeT8O5Ucwg",
    "title": "The Tyranny of Taylorism & how to detect Agile BS!",
    "description": "Explore the roots of management practices in 'The Tyranny of Taylorism' and learn to spot Agile BS in today's workplaces. Change starts with understanding!",
    "captions": ""
  },
  {
    "id": "fZLGlqMdejA",
    "title": "7 Deadly Sins of Agile: Greed",
    "description": "Uncover the hidden dangers of greed in agile! 🚫📈 Join Martin Hinshelwood as he reveals how this sin can derail teams and hinder productivity.",
    "captions": ""
  },
  {
    "id": "G1BQG2tsbYg",
    "title": "How to Achieve Predictability in Business through Agile Principles",
    "description": "Unlock business predictability with Agile! Join Martin Hinshelwood as he explores strategies to overcome challenges and drive consistent success. 🌟",
    "captions": "Businesses want predictability. Predictability enables them to focus on achieving the outcomes that they desire in a consistent way. It reduces uncertainty and helps them achieve their business goals. But predictability is hard to achieve. There are all sorts of things that get in the way of us having predictability as a business. \n\nNow, the things that we can't avoid that get in the way of predictability are things like market volatility, the changes in the market, and the unpredictable nature of the world and the ecosystem in which we're in. These are things we cannot control, so we have to include that in our story. But there are a bunch of things where we get unpredictability that we can control, that we can do something about. \n\nHaving clear goals or unclear goals causes unpredictability. Operational inefficiencies create unpredictability. You don't know how long things are going to take because everything takes a different amount of time to go through the system. Really having an undefined system—if you don't have a description of how things go through each of your systems—you could have many systems in your organization. Then how do we know that each thing that goes through each system is going through it in a consistent way, which enables that predictability? \n\nAll of those unpredictabilities, those frictions to our ability to do stuff, and inconsistent frictions to our ability to do stuff will impact on the performance of our organization. It will impact on revenue growth, it will impact on profitability, and it will impact on our ability to be competitive in the market. \n\nThe role of agile in this story, the role of agile in enabling predictability, is in the application of the ideas. It's a lot about changing from rules to principles. Instead of having a bunch of rules that people mindlessly follow, have a bunch of principles under which the folks that you have within your organization can make decisions. Define the systems that you have and how you want them to work—not just as leadership telling people how to do it, but the people that are doing the work defining the systems. That's pushing responsibility down the organization to the people who are actually doing the work. \n\nAgile, or the mindset of agility, the agile philosophy, is about enabling people in our organization to improve the predictability of our business outcomes by improving the predictability of the things that they do. I think one of the difficulties is that most organizations, most people in organizations, are not looking at predictability metrics. They're not looking at the data that indicates instabilities in the system. Those are the things that you want to control, where you want to make changes. \n\nThis whole idea of increasing business predictability is not something that just randomly happens. It's not something that just installing agility in your organization is going to result in an increased level of business predictability. It's something that is systematic, that is deliberate, that requires effort and consistency of application over a longer period of time to start making the changes, moving the needles to increase the level of predictability within your business. \n\nThere's a myth that I see all the time in organizations at every level: that because we're doing agile, we can't plan or predict what's going to happen. We can't do estimates, we're not supposed to be looking forward too far into the future. All of that is kind of bunkum. The fundamental principle of agility is about minimizing the amount of work you do until it needs to be done. \n\nWe don't want to do documentation that is going to change frequently unless we need that documentation in order to understand what we need to change. We'd be better building some product, right? Build some product, test it in the market, and get into those tight feedback loops. That's one of the key things that I find that organizations really struggle with within the context of predictability: they don't close the feedback loops. \n\nSo if you're looking at what you're doing within the context of agility, this myth that you can't plan for the future is just that—a myth. The poster child for agility is Microsoft's transition in the last 10 to 12 years. They do planning looking forward over 18 months. The granularity is really high level, but they do plan over 18 months. They do a season-based model and they plan for 18-month seasons. There's nothing wrong with that; there's nothing anti-agile about that. \n\nBut it's the way that you do it. It's how you implement it. Is that 18-month plan something that is enshrined in \"this is what we're going to do\"? How changeable and malleable is that plan over time? How much effort do you spend on that plan versus doing the work that you need to do just now? Those are all things that belay this myth that you can't plan or predict because you're doing agile. You absolutely can; you just use different tools and techniques to achieve that. \n\nThere's a really famous quote: \"Plans are irrelevant; planning is everything.\" That's the key to success within the context of business predictability. If you want to increase the predictability of your business, you need to stop creating plans and start planning. What is it we're going to do next? Where do we want to go? What do we want to achieve? If we're answering those questions and then communicating it effectively within the business, we can enable a level of strategic alignment with everybody in our organization. \n\nIf you look up \"team\" in the dictionary, it says a group of people working together towards a common goal. How can we do that if we don't have that common goal? A goal is a single thing; it's not a whole bunch of things. So what is it that your business is trying to achieve that you want everybody and every product and every effort to align behind? For a particular product within the context of that business, what is the thing that you want everybody working together towards? The outcomes of that product should align behind the product's goal, the vision, the strategy. \n\nThese are things that are commonly missing in organizations, and that creates a fragmentation of effort. The effort that people put in is in a direction of their choosing—each individual on the team's effort of their choosing, each manager's effort of their choosing, each leader's effort of their choosing, each product owner's effort of their choosing. How do we enable us to be all working together towards that common goal? That requires planning to gain predictability. \n\nWe're not really talking about risk mitigation as a document; we're talking about risk mitigation as a holistic strategy for our organization. We're not talking about resource management at the individual level; we're talking about where our investment opportunities are as a business that fit inside of our strategic goals and strategy. \n\nThis whole idea of planning to gain predictability is to enable your business to have a competitive advantage in the market against other businesses in the same market. Naked agility can help you increase your business predictability by enabling you to do that. We can't come in and just provide you with increased business predictability. You need to do that; it's your business, it's your organization, it's your department, it's your team. \n\nThe only people that can help you increase that predictability are you. We can bring our knowledge and expertise of what has worked in other organizations. We can bring ways and tools for analysing the data—what's the current state of your system—helping you define your system so that you can then see where the problems are that are reducing your predictability so that you can fix them. \n\nOne of the big things we bring is visibility, so that you can see what's going on. If you can see what's going on, you can make tweaks to the way you do things. You can help the people that you work with make tweaks to the way they do things to hopefully increase that level of predictability within your business. \n\nNow, that can be data-driven. We can look at data for team morale and capability. We can look at data for knowledge and skills. We can look at profitability of the business and where we're spending the money. These are all data-driven approaches. We can then help bring frameworks and methodologies—ideologies, philosophies—what are things that are holistic to all businesses that can enable you to look at things in a different way to be able to see what's going on and make those changes. \n\nPerhaps Scrum is a good idea. Perhaps Kanban is a good idea. Perhaps lean thinking is a good idea. Perhaps Lean UX is a good idea. There are all sorts of tools, frameworks, and ideas available that have been shown to work in many different sorts of businesses that we can try and analyse to see if it works for your business in your context. \n\nWhat we're offering is a completely custom solution for your business that doesn't make you like somebody else's business. One of the things that I commonly see as a negative consequence of going and working with a large consulting organization that brings a standard methodology and practice and then applies it to your business is that you become like every other business that they've applied it to. \n\nOne of the things that made your business successful was its unique ability to take advantage of a niche that you've built in a market. Your business grew to take advantage of a niche, and if somebody comes along and applies their business practices or their system on top of it, then you're just like every other company that uses that same system. \n\nA great example is road hauling. If you're moving goods around, those businesses are fairly standard. But businesses that use the same tooling as every other business that does the same thing are just the same business with a different owner or a different manager. They're not different; there's no differentiation in the market. They're just filling that market. \n\nHow do they open new markets? How do they ingeniously solve problems in interesting ways that help them adapt their business towards a new niche or new capability or open up new markets? They can't because they're working within a structured system that doesn't allow them to explore other opportunities. \n\nWhat we want to do as a business is come up with our own way of moving from whatever it is we're doing now towards a greater degree of agility so that it's our business processes, it's our unique way of doing things to fill that unique niche. If you look at every single commercially successful organization that has adopted agile practices, especially agile practices at scale, you'll see that every single one of them has created their own system that fits the way they want to do business and is shaped by the way they want to do business. \n\nThey're not just installing somebody else's system. That's why Microsoft uses the season-based model, Spotify has their way of doing things, and Google has their way of doing things. Every single one of these organizations has a unique way that's bespoke to them of solving this problem of how do we increase our business predictability and our ability to serve the markets within which we're in. \n\nIt's pretty hard to describe what it looks like, sounds like, or feels like once you're on this journey and you've made some progress towards a greater degree of adaptability and a higher degree of predictability. It's going to impact everything in your organization. \n\nMicrosoft is often asked, \"What changed?\" When you made these changes and adaptations to your business, what changed? The answer is usually everything. Everything changed. The way they do financing changed, the way they do business changed, the way they find new customers changed, the way they manage customers changed, the way they build the products has changed, the way they engage with the people who build the products, and the way they engage with the outside world has changed. \n\nEvery part of their business processes has changed in their entire organization. Now, that's a little bit of an overestimation; not everything has changed. They still have their journey, and they've not addressed some things that they probably could address. But they've done a good job of tackling some of those big things. \n\nA great example you can go look up is the change in the way they measure bonuses for salespeople. It used to be that they were measured based on the amount of Azure time that they sell because Azure is the big selling feature. How much do you sell? But now it's on usage. If you measure how much time they sell, the salesperson gets the customer to clinch the deal. They're a closer, and that's who you want as a salesperson. \n\nThen the customer has paid the money, and the salesperson gets their bonus. But the problem with that is what happens at the end of the year when the customer hasn't used the thing they've paid for, and it expires? They bought a year’s worth of stuff, and they've used 10% of it. Now they're annoyed and angry that 90% of their funds have been wasted. \n\nIf you switch that around to usage, the sales folks get their bonus based on usage. They then need different skills; they're not a dual closer. This is an example of a little tweak in the way a business functions that has a massive impact. The perfect salesperson is no longer a closer; they're an enabler. They enable your company to help this customer use the service more and more. \n\nFor example, perhaps the closer brings in an expert to bamboozle the customer with all the cool things that you can do, and they close the deal, and they're done. But what the enabler does is bring in, perhaps out of their own budget, external consultants and helpers to help over a longer term enable that customer to use the services more. \n\nNow we're talking about what enables you to use your more agile transition. DevOps—all of these things mean that you need to consume things more quickly, and it benefits both parties. It benefits both Microsoft because they get to sell more Azure, and it benefits the customer because they're able to adapt to their market needs more quickly and more effectively. \n\nWhat does it look and feel like? It looks and feels like everybody working together towards a common goal. We're not working against our customers; we're working with our customers. We're not working against each other; we're working with each other. That is the superpower that brings this whole story together. \n\nIt changes the behaviours of people in your organization. It changes the organizational culture. It changes the experience that both employees and stakeholders have, and it changes the way that you measure success in your business. Everything will change if you embark on this journey. \n\nAt the end of that journey—it never ends, but once you've made some progress on that journey—you will have more predictability in your business and a higher ability to take advantage of market opportunities when they arise because you're then able to deal with surprises. You've got that level of predictability."
  },
  {
    "id": "g1GBes-dVzE",
    "title": "One thing an Agile Coach MUST do to be successful?",
    "description": "Discover the key to success for agile coaches! Martin Hinshelwood shares essential insights for thriving in agile consulting. #Agile #Coaching #Scrum",
    "captions": ""
  },
  {
    "id": "gc8Pq_5CepY",
    "title": "3rd June 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "gEJhbET3nqs",
    "title": "Professional Agile Leadership Essentials Overview",
    "description": "Unlock your organisation's potential with our Agile Leadership Essentials course. Learn to enhance agility, support teams, and measure success effectively.",
    "captions": ""
  },
  {
    "id": "GfB3nB_PMyY",
    "title": "The Power of Immersive Learning: Bridging Theory and Experience",
    "description": "Discover how immersive learning enhances your skills as a Scrum practitioner in this insightful video. Elevate your Agile journey with NKD Agility!",
    "captions": "One of the really powerful things about immersive learning is that because all of the trainers are experienced professionals who've been working in the industry that we're talking about, they bring not just their ability, their knowledge and skills on the theory and the ability to explain the topics, but they also bring a sway of experience of actually having done these things, of engaged with teams, tried things in organisations big and small. So you effectively get consulting as well as training, right? You get facilitated debrief consulting training. You get the whole package with immersive learning."
  },
  {
    "id": "GGtb7Yg8gHY",
    "title": "7 signs of the agile apocalypse. War",
    "description": "Discover the 7 signs of the #agile apocalypse in this short video. Learn why conflict signals disaster for your #agile transformation. #shorts",
    "captions": ""
  },
  {
    "id": "gImXmxjn_1g",
    "title": "What are 3 top tips for a new agile consultant?",
    "description": "Unlock your potential as an agile consultant! Discover three essential tips from Martin Hinshelwood to elevate your first consulting engagement.",
    "captions": ""
  },
  {
    "id": "GIq3LZUnWx4",
    "title": "What is the one thing a PSPO course forces you to focus on?",
    "description": "Discover the key focus of the PSPO course and how it empowers product owners to drive value and customer satisfaction in Scrum environments.",
    "captions": ""
  },
  {
    "id": "GJFklM1U5Pc",
    "title": "The Competence Crisis in Scrum Master Roles: A Call for Excellence",
    "description": "Explore the competence crisis in Scrum Masters! Discover why many lack essential skills and how to elevate Agile practices in your organisation. 🚀",
    "captions": "The current state of Scrum Masters in the industry at the moment is pretty terrible. There is a massive systemic lack of competence in the Scrum Master role and the Scrum Master accountability across organisations. I think much of this comes from the boom that we've had, the cash cow that we've had in the agile world, where the demand for Scrum Masters to help teams, which really wasn't realised as much before the early noughties, has far outstripped supply. \n\nSo we want to have somebody with some kind of competence within this context on every team, in every group, in every department of every company. Whether you're called a Scrum Master or an Agile Coach or whatever, it's all the same skill set. Because there's been a massive demand but very small supply, the price has gone up. And because the price has gone up, all the folks who aren't even in it, aren't even in that world of the context of that team, are looking at these very lucrative jobs over here in this other space, and the grass is greener over there. \n\nSo let's go over there. We have lots and lots of people over the last 15, almost 20 years, that have moved into this space to be a Scrum Master or Agile Coach, who largely have no skills whatsoever within the context of the team. Maybe they've done a two-day Scrum Master class, which, FYI, does not make you a Scrum Master. Just like passing your driving test doesn't make you a Formula 1 driver. It just means that you're hopefully not a danger to everybody on the road. \n\nHopefully, that doesn't mean that that's not true. You've got a lifelong learning and experience. You can't just jump in a Formula 1 car; you can't just jump in any racing car on any track without some level of skills, training, knowledge, expertise. You can get a track day, but expect there to be limitations on what it is you can do because it takes experience and time to build that experience and understanding of the detail of the world within which you're coaching and helping teams. \n\nIf I was coaching, here's a great example of a lack of competence. I did a bunch of training, not coaching, but training for police officers in Ghana. They were going to be using Scrum as an organisational change mechanism, not to do their work. We were teaching them Scrum so that they could use Scrum to change as a change mechanism in their organisation. I have competence and can understand organisations and organisational structure through experience, and understand how Scrum can be used to incrementally and iteratively change your organisation and deal with that complexity. \n\nYou have a backlog of organisational changes and what cadence you are iterating on them, all those kinds of things. But I have absolutely zero understanding of police work beyond what I see on TV. I have no experience or skills. I can't say to a police officer, \"This is how you should do your job and it will make you more effective.\" I can't do that, and I wouldn't do that. \n\nWhen I was teaching the training, I had the head of CID in one of the classes. We did a bunch of classes. The head of CID is, if you're in the US, it would be the chief of detectives, maybe. I don't know. The head of detectives, lieutenant for detectives. CID in the UK and the British Empire world is the investigative division. I don't even know what it stands for. Anyway, he was the head of CID, and he started asking me a bunch of questions about how he could apply the things we were talking about to police work. \n\nI had to say, \"Look, I have no knowledge or understanding of what it is you do beyond the movies.\" I can imagine that you don't know how long it's going to take to solve a case. You have to do a bunch of work. There are some things you always have to do, and there'll be something different in every case, everything that you do. But you know perhaps what the definition of done is, what the list of things at the end is that you need to have. \n\nIt's great if you can figure out how to leverage some of these practices to help with that, but I can't help you with that because that's not my background and expertise. What we're seeing and have seen over the last 15 to 20 years is loads of people coming into IT. My background is IT; that's where this stuff kind of spawned from most recently, right? The Agile Manifesto for software development. \n\nThey have no background in software, no background in any sort of IT, and they've perhaps done a two-day Scrum Master course or perhaps done a coaching class. So they've learned to coach, professional coaching experience, and that's just not good enough to be able to fulfil the accountability of the Scrum Master. The Scrum Master has an accountability to help the team be as effective as possible, and they do that through three areas. \n\nThey have three sets of accountabilities, as it were. One is the accountability to the team itself. So what can they do to help the team be effective? In order to help a team be effective, you need to understand the context within which the team are working. Whatever that context is, for me, it's software engineering. If you're going to be helping a team of software engineers become more effective, you have to understand the practices, the principles of that work so that you can help them. \n\nIn the software engineering world, we have modern engineering practices, we have DevOps, we have things like release planning and scaling, and all of those things to do with the actual engineering practices. But you also have stuff you might gain through experience in other areas, like how to do organisational change. That's not something that maybe you need specific skills for, or conflict management. That's something that you might learn in your professional coaching. \n\nBut that doesn't remove the need to have that understanding of what the team is working on, what it is they're doing. For a Scrum Master within that context, within the context of a software team, there would be other things on my list if it was for a different type of work. But for a software team, I would expect them to understand DevOps principles, DevOps practices, understand what it takes to fulfil them, what it looks like when they're being successful, to understand modern engineering practices. \n\nIf the team's work is building software, you need to understand how to build software in order to help the team be effective at building software. They might not know. I've worked with lots of teams all over the world as a DevOps consultant, as an Agile consultant, that have huge gaps in their understanding. One of the biggest ones that I usually use as an example is using source control and understanding branching but not understanding merging. \n\nNot understanding that there are tools within your source control system that allow you to merge code in a mostly automated fashion, right? If there's no conflict in changes, and then dealing with conflicts. I worked with a team of 30 engineers in an organisation. They've been building software for many years. Those lead engineers, there were people who had been building software for many, many years, and they had no idea that there were tools inside of the source control system that allowed you to merge code. \n\nThey were doing it manually with Beyond Compare. They were just comparing files and copying across the bits that they wanted, hugely error-prone, huge number of bugs introduced by that kind of mechanism because they weren't using those tools. If I didn't know that those tools existed, if I didn't understand the workflow of source control, regardless of whether you've actually used source control or not, although I think if you're going to be working with software teams, you have to understand how source control works. \n\nYou have to understand how automated builds work. You have to understand how work items, the work that you're doing, can be linked to the code so that you can get more effective understanding of what's being changed and how it's being changed and how you're testing it. That doesn't require you to have been a software engineer. If you've been a tester or you've been an analyst on a team and you've done those things for many years, you're going to understand those things. \n\nIf you don't understand those things, you need to learn those things in order to be an effective Scrum Master for a software engineering team. But that's just one of the three things that a Scrum Master is accountable for. They're also accountable for services to the Product Owner, not just to the team, but specifically to the Product Owner. \n\nSo what does the Product Owner do? The Product Owner maximises the value delivered by the work from the team. One of the Scrum Master's jobs, roles, accountabilities, things they have to do is they have to be able to enable and help that Product Owner become more effective because that Product Owner might not understand the things that they have to do. They might not understand the processes and practices that are available to them. They might have outdated knowledge. \n\nThey might come from a traditional background where we're not doing fast iterations. While most of the practices can still be used, they need to be modified to allow it to work in the iterative and incremental world of continuous delivery and continuous learning. So how do you help them if you don't understand what they do? How do you know that they don't understand hypothesis-driven engineering practices? \n\nIf you don't understand hypothesis-driven engineering practices, how do you know that they should be able to look at the telemetry from the product and understand and use it to help inform the decisions that they're making? How do you know that they need to be building relationships with people inside of the business and how they build relationships with people inside of the business and how they understand the dynamic of those relationships? \n\nUnless you do, you can't help them do that. You can't help them do something that they don't know or don't understand how to do already. In my experience, at least in my experience, right, because remember my caveat with everything is I get called by people who need help. In general, Product Owners don't have the background knowledge, understanding, or experience to know how to maximise the value delivered in the product. \n\nThere are absolutely product managers and Product Owners out there who do understand that, absolutely. But they don't need to call me to come and help them. They don't come to my Product Owner classes. They don't come to my product management mentor programmes because they already know that stuff, so they can do it. But if you want to help those people who don't understand, you need to understand that thing to be able to help teach them, coach them, and mentor them. \n\nAnd we're not even done yet because there's a third thing. The third thing is the organisational, I guess, Lisa Atkins calls it organisational transformational mastery. I usually call it organisational evolutionary mastery because I feel like evolution doesn't have an end, whereas transformation might have an end. It's a continuous thing. How do you help the organisation change? \n\nIf you don't understand organisational topologies, if you don't understand how organisations function and go together, if you don't understand the options that have been known to be effective within that space for things to try and see whether it works within this particular organisation, if you don't have that standing, how do you know that something needs to change? How do you know that things can be different? \n\nYou've got that accountability to the organisation for helping them be effective. When you bring all of that together, you end up with an individual that is quite significantly skilled with lots of experience. They probably have a grey beard because they've been around for a while, or grey hair. They have been in the trenches with the team. They've worked as a team member. \n\nWhen I'm thinking about a Scrum Master, I'm thinking about somebody who's worked as a team member for many years, gained a bunch of experience, helped their team. Their team has realised that they're helping. They look to them as a leader in that space of effectiveness, and then that grows over time. Not just the team looking to them; the Product Owner looks at them, and the other people in the organisation start looking to them as somebody who can help them be more effective, deliver more value, change the way we do things because they have this understanding of how all of the... \n\nThey have a core understanding of the theory, the philosophies, and the principles to be able to apply them within multiple various contexts. But you get that through learning. You get that through experience, not just experience of doing it and trying it, but experience of learning and figuring it out and then seeing whether it works and closing those feedback loops and having that triple-loop learning and changing your worldview and how you can do things. \n\nThis is just not that common. There's a massive deficit at the moment in the level of competence. If you're interested in how big that deficit is, there's some data from an organisation called Scrum Match, who review Scrum Master skills. As part of their story, it's a little bit of a recruitment story, but they review Scrum Master skills. \n\nIt's not just people who are looking for jobs; it's to get a badge. \"I'm this level of Scrum Master.\" Some people look at it as a badging. What they found was that 61% of the people that they engaged with, reviewed who were Scrum Masters, already perhaps had been a Scrum Master for 10 years or more. So there were people in that list that were 10 years or more. \n\n61% of them shouldn't be Scrum Masters. 61% of them, I think it was 38%, I'm going to be a little bit off in the percentages but only by fractions, it was about 38%. I think had never read the Scrum Guide. There were Scrum Masters who had been enrolled for 10 years or more, never read the Scrum Guide. \n\nThe rest of that 61% had read the Scrum Guide but kind of, you know, didn't really understand Scrum that well. I understand Scrum, and I can rudimentarily apply it to organisations. None of those things are good enough to be a Scrum Master. None of those things are good enough to help a product team be more effective. \n\nSo it's absolutely no surprise that as we enter a period of fiscal uncertainty, a global fiscal uncertainty, organisations are looking to reduce their costs, and they're looking at the capability of the people that they currently have as Scrum Masters, and they're saying, \"This isn't good enough. These people are not competent.\" If you're not competent, you're incompetent. \n\nThe majority of Scrum Masters in a row today are incompetent. They should not be in that position. They should not be doing that role. The only way organisations have to demonstrate their lack of satisfaction with that is to start getting rid of Scrum Masters and Agile Coaches. That's the position we're in right now. We're seeing a massive industry correction. A competence bubble has popped, or an incompetence bubble has popped. \n\nThere are loads of good Scrum Masters that have been caught up in the nasty as organisations are divesting themselves. Almost all of these organisations are still hiring Scrum Masters; they're just being more discerning. I think we're moving from an era of wild west Agile towards more of an era of competent Agile."
  },
  {
    "id": "gjrvSJWE0Gk",
    "title": "Overview of 'applying metrics for predictability' Kanban course.",
    "description": "Unlock your team's potential! Discover how to enhance predictability in delivery using Kanban metrics in this insightful course overview. 🚀📊 #Kanban #Agile",
    "captions": "So the applying metrics for predictability course from Pro Caman is really focused on a deep dive into how you can use the metrics coming from your Caman strategy to really focus on improving the predictability of your teams. Right, the predictability of our ability to deliver. \n\nSo we need to understand what the impact of the changes is, like how we want to change the metrics in order to improve predictability. How do we identify in the graphs what things might be the issue? Like how do we interpret the graphs in order to maximise those changes to predictability? \n\nAnd how do we make forecasts, right? Make accurate forecasts for single items, for multiple items, looking forward into the future to understand what we're going to do next. \n\nAnd really, lots of teams struggle with the two questions: when will it be done and how much work will I get? These are really important questions that the business has that most teams are unable to answer. And these metrics for predictability really bring that answer to the forefront. \n\nHow do you, what data do you collect? How do you interpret the graphs? How do you analyse that data in order to make good choices around increasing predictability? And how do you improve the flow of value into production? \n\nHow do you increase the flow of value to the business, which is what we're all here for? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. \n\nWe also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "GJSBFyoHk8E",
    "title": "How does a Scrum team create a sprint goal?",
    "description": "Discover how scrum teams create impactful sprint goals to enhance collaboration and deliver value in this insightful short video with Martin Hinshelwood!",
    "captions": ""
  },
  {
    "id": "GmLW6wNcI6k",
    "title": "What Does the Assessment Phase of a Consulting Engagement Look and Feel Like?",
    "description": "Discover the assessment phase of agile consulting with NKD Agility. Martin Hinshelwood shares insights on tackling challenges and enhancing team performance.",
    "captions": ""
  },
  {
    "id": "grJFd9-R5Pw",
    "title": "How does the APS course help people apply scrum effectively?",
    "description": "Discover how the APS course transforms Scrum learning into a hands-on experience, empowering teams to tackle complex challenges effectively.",
    "captions": ""
  },
  {
    "id": "gRnYXuxo9_w",
    "title": "Scrum Value, Openness, What does it mean and why does it matter?",
    "description": "Unlock the power of openness in Scrum! Discover how transparency and trust transform team dynamics for success. Watch now! 🌟🔑 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "GS2If-vQ9ng",
    "title": "Agile Training versus Agile Consulting",
    "description": "Discover the key differences between agile training and coaching with Martin Hinshelwood. Elevate your team's performance with Naked Agility! #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "Gtp9wjkPFPA",
    "title": "How do DevOps and Agile integrate?",
    "description": "Discover how DevOps and Agile intertwine in this insightful short video with Martin Hinshelwood. Unlock the synergy for high-performing teams! #DevOps #Agile",
    "captions": ""
  },
  {
    "id": "GwrubbUKBSE",
    "title": "30th March 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Microsoft MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "gWTCvlUzSZo",
    "title": "5 tools that Scrum Masters love. Part 3",
    "description": "Discover why quality cameras are essential for Scrum Masters! Enhance engagement and decode body language for better team dynamics. 🎥 #scrum #scrummaster",
    "captions": ""
  },
  {
    "id": "gy3SEB3Ygrs",
    "title": "naked Agility with Martin Hinshelwood Live Stream",
    "description": "Join Martin Hinshelwood in this live stream as he explores the principles of naked Agility, offering insights and practical tips for agile practices.",
    "captions": ""
  },
  {
    "id": "Gym5-p-mNtw",
    "title": "Agile Your Secret Weapon for Cost Control",
    "description": "Unlock the secrets of cost control in software development! Join Martin Hinshelwood as he reveals how agility and engineering excellence boost ROI.",
    "captions": "Most organisations don't realise the amount of waste that they have in their system, the amount of money that they're haemorrhaging because they don't have a focus on engineering excellence. This idea, within the context of agile, of business agility, of everything being continuous, right? So you've got continuous integration, continuous delivery, continuous feedback, continuous testing. That continuous nature, that things are happening dynamically, enables you to find problems quicker. So the problems are smaller; that eliminates some waste, but it also enables you to collect data and telemetry and understand what's going on a little bit more easily, which means that you can identify problem areas and do something about them before those costs spiral out of control.\n\nI work with so many customers that have so much waste. I've got some DORA metrics here. I think not all of them are DORA; most of them are DORA metrics. We use it to tell this exact point for agile leaders in our agile leadership classes, but we talk about a number of different metrics, right? And if we're talking about a $1, one Euro, one pound budget and how much of that, how much of that pound, dollar, Euro ends up as actual value delivered in your product, right? And what do you measure to understand your return on investment on that story?\n\nSo these are just four metrics that I'm going to use. There are many more metrics that you could be looking at that can impact on this. But one of the biggest ones is innovation rate. What percentage of your people's time do they spend innovating rather than augmenting existing functionality or support and maintenance, right? So it's net new capability within your product. This is really important because it's the reason why Netflix creates a new show rather than doing the second series of that show that you liked. It's because when you do a second series, right, you augment existing functionality. When you do a second series, your audience for the second series is going to be smaller than the first series unless there's some kind of information that leads differently. The default is that the second series is going to have less audience, right? So it's going to make less money than the first series.\n\nSo if your second series is going to cost just as much as a first series, wouldn't it be better to invest that money in a first series to get a higher potential audience? It's a bet, right? A higher potential audience return than it is to do a second series of an existing. If the existing series has enough of an audience and enough of a demand for a second series, then it's probably worth it, right? You'll get your return on investment. But otherwise, it's not worth it, which is why you see the rise of limited series, right? I think we'll see the rise of limited features and products. But innovation rate is around 39% on average. That was the last DORA metrics that I kind of looked at. So 29% of the budget goes on net new functionality—that's new customers, new markets opening out, new capabilities for your product. That's not a lot; that's 29 cents on the dollar, 29 cents on the Euro, 29 pence on the pound. That's terrible, right? And that's just one metric.\n\nSo now we only have 29 cents of big ROI in our product or big potential ROI in our product. What about our product index? That's what percentage of our engineers' time do they spend, or our people's time do they spend working on the product versus doing other stuff, right? The average is about 80% of their time they spend on the product, 20% on other stuff. So we would be down to 23 cents on the dollar. What about usage index? What percentage of the features that you build in your product are actually used by your customer, right? The industry average is about 35%. 35% of the features that you build are used by your customer. That means the rest is waste, right? It's not really all waste because sometimes you need to build features that people don't like to find out what they do like. So that wouldn't be waste; that would be learning, right? So some of it's learning. It's difficult to quantify the learning, but certainly a huge piece of it is waste. Lots of companies build lots of features that your users have absolutely zero interest in, right? You'd be surprised. Go ask your engineering teams what their usage index is, what percentage of the features that they've built are used and used often by their customers.\n\nSo Microsoft has a measure that they use, which is monthly active users for each feature in your product. What are the monthly active users? If you can't answer that question, you have no idea whatsoever whether your features are being used or not. So why are you building them? How do you know you should be adding new features to this piece of functionality, right? That augmenting existing? If we don't even know what our user base is, why are we adding? Why are we spending money on it, right? It's a blind bet, right? That's a bad bet; it's completely unhedged. But a 35% usage rate now brings us down to 8 cents on the dollar. So we went from a dollar to 28 cents on the dollar, 23 cents on the dollar, now 8 cents on the dollar, and we're not even finished yet. Because if we're building an application that people install, if you look at things like Windows, right, what percentage of the user base is on the latest version of the product? Now the industry average is about 70%, right? So 30% of users are on an older version of the product. I have lots of customers where that's not even remotely true, that it's a much smaller percentage on the latest version of your product. So that brings us down to 6 cents in the dollar.\n\nIf your return on investment for every dollar you spend, you get 6 cents, that's 0.06% return on investment. Is that a good investment? I think it's not a good investment. I think we need to do a whole bunch of work in understanding why that's so low and dealing with the reasons why it's so low. So in our example here, the biggest hit at the start was innovation rate, right? Do you even know your innovation rate? Percentage of time on innovation, percentage of time spent on augmenting existing functionality, support, and maintenance, right? What are those three percentages for your business? You should absolutely understand that for every product that you have. The next biggest thing is usage index, right? What percentage of the features are actually used by your customers? Do you understand that? Are you collecting the telemetry that you need to understand that so that you can make decisions on where you're investing your capital and not letting costs spiral out of control?\n\nAgility is part of this story. Agility and DevOps talk about how you can close the feedback loops, get faster at iterating, and reduce costs. No, you're not really reducing costs because you've got the same people doing the same amount of work, but your cost-to-value ratio should go up, right? You should be delivering more value for the money you're putting in, not the other way around."
  },
  {
    "id": "gYM5X2MnVBY",
    "title": "BROKEN- The 7 Deadly Sins of Agile!",
    "description": "Uncover the 7 Deadly Sins of Agile and learn how to avoid common pitfalls in your agile journey. Transform your approach for lasting success!",
    "captions": "Agile is hard and it's designed for complex environments. So, as you would expect, there are many behaviours that I've found in organisations that are suboptimal to say the least. Here are my seven deadly sins of Agile.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nOne of the seven deadly sins of Agile is lust. Loads of organisations are talking about Agile transformation, digital transformation, whatever transformation. They want something different because they've realised that the markets have changed. It's taken them a long time to realise the markets have changed. They changed years ago. In fact, the 1930s was when the market started to change. By the 1970s, they were totally changed, and it's taken until now for a lot of companies to actually realise, \"Oh, stuff's changed. What's going on? Why isn't our old processes and systems working?\" So now they're looking around for something new. They've got that, I was going to say, \"70-year itch,\" but it's the 70-year itch, and they're looking around for new processes and practices that they can use. They see this Agile thing doing really well, and they want it. They want it desperately, and they don't really want to do the work for it. They just want to buy it. I think there must be a USism for that, but I think I'll stay away from it. They just want to buy this thing. They don't want to actually spend the effort and the time and the energy to figure out what it means for them and their business. They just want somebody else to come in and install it. They just want to pay somebody to come in and do it for them. That's what they want to do, and that's why you see a lot of organisations bringing in the big four consulting companies. You see McKinsey and Accenture and Boston Consulting Group coming in, giving advice. But the problem is they're giving advice based on all of these other big organisational transformations. There is no precedent within your organisation for Agile. You can't just look at what somebody else is doing and lust after it and bring it into your organisation. You need to build your own unique way of doing things over time and actually do the work to get there. And that's why you can't just lust after this Agile thing. You need to do the work to bring it into your organisation.\n\nOne of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team, you're working with a team, and you go to look at their product backlog, and let's say there's six or seven people working on this team, and they have 5,000 things in their product backlog, they're doing it wrong. That's greedy. They've eaten all those backlog items. They're sitting in their belly, and they can't walk around. They can't move. They're not going to be nimble. They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.\n\nAnother way gluttony manifests is during Sprint planning, shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint. That continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it, taking on too much, and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, and maybe not every Sprint, it's probably okay. You're not going to be successful in everything you do. But if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, \"Are we taking on too much work? Are we doing too much? Are we taking on too much work?\" \n\nThat's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. The Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide. They found that only 35% of the features that we build are used by our customers. 65%, I think the phrase was \"little if ever.\" So hopefully we can stop building them in the first place. That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long does your build take if you remove 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams will be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things. \n\nSo the way to... loads of teams just need a gastric bypass for that. How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog. It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, features that aren't used by your customer. I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap, and they knew their customers way better than anybody else. There was no way they were wasting 65%. It was a lot less, that's what they said. So we said to them, \"What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?\" They said, \"This one, this one's the best.\" \n\nSo we got in amongst the code. We added Application Insights. Application Insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box, it does a bunch of stuff. But then if you add this as a feature, you can say, \"How many times do users click that button?\" Out of our body of users, how many of them have clicked that button? You can get all of that data. We analysed their product end to end. We collected data for three months, and then we went back to them and said, \"Here's the 7.5% of features that your customers use. All the rest was waste.\" Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers. \n\nSo don't eat the whole thing. You've got to figure out how do I pick and choose what I'm going to eat? Don't eat the whole feature at once. You don't know if you like haggis yet, so don't order a whole plate full. Get a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more. But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.\n\nOne of the seven deadly sins of Agile is greed. This usually manifests in organisations by an overwhelming focus on resource utilisation. Let's get rid of the fact that we're calling everybody resources as if they're cogs in a machine rather than actual people. That focus on resource utilisation was a fantastic idea when we were running machines, and machines could churn out things on a regular cadence. The more your machine is running, the more value you're getting in return for the cost of the machine and the cost to run it. That's where that resource utilisation idea comes from. But when you start looking at people and how people do work, people need thinking time. People need to do things different ways. If we can automate stuff that we do the same all the time, but if we're going to do something different all the time, which in my world, background as a software engineer, everything we coded was something new. Otherwise, we would have used an existing framework. \n\nSo anytime you're writing code, you're doing something new. Anytime you're building a product that doesn't exist yet, you're doing something new that's never been done before. When you're doing that, you need to give people the space to be able to do things well, to be able to think about things, to be able to learn things, to be able to try things. That means that people aren't always 100% focused on the work that they're doing. They're doing other things while thinking about that work. Some examples maybe: have you ever been working on something and got stuck? No matter how much time you spent on this thing, you were stuck. You're 100% utilised because you're working on this thing, but you're not making any progress. You're not delivering any value. But if you just go out for a walk or you sit with your wife and you explain the problem to your... I do this all the time. I explain some problem to my wife, and she doesn't necessarily understand the problem that I've got. I'm talking about code and architectures and things, and halfway through explaining it, I figured out what my problem was. \n\nThat resource utilisation is a fallacy when you're talking about people. There's no such thing as resource utilisation. You want to be looking at flow efficiency and value delivery. How much value are you delivering to your customer? I actually don't care if my team members are sitting around on their butts for 90% of the time as long as we're delivering the value to the customer. The value to the customer is the important thing. Is the customer happy? Are we getting an adequate return on investment for our product? Those are the ideas that make sense. \n\nI worked with somebody years ago who ran a little experiment with some teams that he worked with in a company in the US. He decided to or got convinced leadership that per Sprint, he would remove an hour from each Sprint. You can imagine you've got a 40-hour week per week. The next Sprint, he's going to do a 39-hour week with the team. The Sprint after that, he's going to do a 38-hour week with the team. The Sprint after that, he's going to do a 37-hour week with the team. I've got a question for you: at what point do you believe that value delivery suffered if the focus is on value delivery, delivering features? \n\nNow, that doesn't mean that for the other two hours people aren't... the hours that you remove, people aren't actually working. If you think about it, a Scrum team, somebody who's focused on solving problems works 100% of the time. When I'm having a shower in the morning or when I'm... I actually do a lot of my best ideas at the gym. I go to the gym, I'm working out at the gym, and I go, \"Oh, that's a great idea,\" and I go on my phone and I message it to myself. The next idea pops in how to solve problems and figure these out is not something that you get from 100% utilisation. You need thinking time. \n\nCan you guess where he got to? He got to 16 hours per week before value delivery started to suffer because all the rest of the time is thinking time that the team needed. Thinking and noodling time. \n\nSo very much stop being greedy. Stop trying to get people to maximise their utilisation and instead focus on maximising the flow of value delivery to your customers.\n\nOne of the seven deadly sins of Agile is sloth. This manifests in a number of different ways with teams, with organisations, with leadership all over the place. One of the most common elements is just not bothering to actually do the things that we say we're going to do. We say we're doing Agile, but we don't deliver working product at the end of the Sprint. We say we're doing Agile, but we have long convoluted deployment processes which are not in control of the developers. We say we're doing Agile, but we don't have an ordered backlog. All of these things are places where we say we're doing something, but really we're just kind of lazy and lying through our teeth in order not to have to do the work. \n\nPerhaps it's because somebody in leadership in the organisation has decided that thou shalt do Agile, and your product is not particularly suited to that model because it was built in a traditional... maybe it's got mainframe and all kinds of crazy stuff in there. Maybe there are other reasons why it's not viable within the confines, the structure of your organisation, the system that you're in. But I would much rather teams and people were honest and transparent with their companies and their organisations about what they can and cannot do, what is and is not Agile. \n\nI really like there's a great article called \"Detecting Agile BS\" from the US Department of Defence. If you search for it, you will find a great little workflow on it. It's one of my favourite things that I use in organisations. \n\nHere are six sloth things that organisations kind of say they do or pretend that they're Agile, but they don't actually do these things. I think these are great. \n\nSo first one is, are teams delivering working software to real users every iteration, including the first, and gathering feedback? That's like the first thing. That's almost Agile in a nutshell. Are we coming up with ideas, getting those ideas in front of customers, and getting that feedback? If you're not doing that, sloth. You're not able to get things done. \n\nThe second one, and because this is the Department of Defence, is there a product charter laying down the mission, strategic goals, and do all members of the team understand how they contribute? That's absolutely key. How can we expect people within the context of our product, of our teams, of our organisation to make good decisions about what it is that they need to do if they don't have all the information they need? We're hiring smart, clever people, and then we're not empowering them to do the things that they need to do. We're just not empowering them. That's part of we need to communicate with them. If you don't communicate with them, sloth. If you don't actually do those things, you're being lazy. Just do it. \n\nThe third one is feedback from users turned into concrete work items on Sprint timelines shorter than one month. Are you getting things in front of your customers at least once per month? That shouldn't be that hard. It shouldn't be that hard to engage with your customers, get parts of your product in front of your customers, and then get them to tell you what they think of it. Gathering feedback from those users shouldn't be that hard, and if you're not doing it, sloth, because it's not that hard, you're just being lazy. \n\nOne I already mentioned a little bit is the full ecosystem of your project. Agile, i.e. Agile programming teams followed by linear bureaucratic deployments is a failure. Why do you have linear bureaucratic deployments after your Agile team have done the work? We might be able to make working product in two weeks, but how long does it take before that increment, that two weeks' worth of work, actually gets in front of real users so that you can close those feedback loops, break down those assumptions, validate what it is that you're creating, that it is actually value? If that's too long, that's not Agile. If you look at the Agile Manifesto, it says ideally a shorter time frame, but only a few months between having an idea and getting it into production. \n\nThe fifth one: are teams empowered to change their requirements based on feedback? The people doing the work should be able to change and adapt the requirements that they're creating in the system, the things that they're building. We want to build more of the right"
  },
  {
    "id": "h3J11t10A0g",
    "title": "Escaping the Deadline Death Spiral",
    "description": "Join Martin Hinshelwood as he tackles missed deadlines and budget overruns in software projects, sharing Agile insights for better outcomes.",
    "captions": "Most organisations that I encounter really suffer from missed deadlines and budget overruns for their software projects. It's probably the most common issue that I see happening in organisations, and it can be really unpredictable. You can think that you've got this one in the bag, but the bag just melts, and it starts dropping out the bottom all over the street. \n\nThis is something that is a fundamental reality of the world of complexity, right? What we know is less than what we don't know; therefore, we have a high degree of unpredictability. The things we use to mitigate that are effectively technical leadership and engineering excellence. We need our engineers to be building products that are of a high enough quality that we can pivot as needed at any moment. \n\nWe need our leadership within our organisation, who have a controlling interest in the product delivery, to have enough of an understanding of the technical realities—not just of doing the work, but of ideation and futurism. What are the possibilities for this product to enable better decisions to be made within the context of the product? \n\nThis is super hard because we like to think that there's one right way to do something. There's a best practice, and that's a fallacy. We like to think that all of the awesome engineers we've hired just know how to solve the problem, and that can quite often be a fallacy as well. \n\nSo, we need tools and capabilities around that to help us be more effective. The principles and philosophies behind Agile and Scrum—those ideas of iterative development, continuous delivery, continuous feedback, continuous testing—pretty much anything with \"continuous\" in front of it in the modern software engineering space are those things that will enable us to be more effective, to make better decisions, to encourage technical leadership, and to encourage engineering excellence."
  },
  {
    "id": "h5TG3MbP0QY",
    "title": "Most Common Thing You Hear in a PSM 1 Course?",
    "description": "Discover the most common insights from delegates in a PSM 1 course with Martin Hinshelwood. Join us for a quick dive into Scrum training! #shorts #agile",
    "captions": ""
  },
  {
    "id": "h6yumCOP-aE",
    "title": "3 best ways to wreck Kanban. Don't have a working agreement.",
    "description": "Discover the top 3 pitfalls of Kanban adoption and learn why a working agreement is essential for team alignment and success in agile collaboration!",
    "captions": "One of the main ways to wreck your campaign strategy is not agreeing how you're going to work as a team. Right? Unless you've sat down with the people you're going to work with and decided on how we are going to approach things, we probably don't have agreement. Right? Most people, unless you sit down and agree, are probably not on the same page. We don't have all of our noses pointed in the same direction. Right? I might pick things based on their affinity to something I like; you might pick things based on their affinity to something you like. And suddenly, from the outside, it looks like we're randomly picking stuff to work on. Right?\n\nThat working agreement is so often missing from teams. For some reason, lots of people think that you can just throw ten people together and they'll magically figure out how to navigate the complex nature of delivering high-value complex products and be able to just figure it out. And they also think that you can just apply some framework, and if we all follow that, we'll also all be in agreement. So, for example, Scrum. Right? We have a campaign strategy. We're going to do Scrum as part of that. That's our working agreement. No, it's not. It's not your working agreement at all. Scrum is a framework; it's not a blow-by-blow how to do stuff. Are you going to use story points? Are you going to use planning poker? Those are not part of Scrum; they're optional things that you might pick. Have you decided to do those things? If you're not doing Scrum, you might just have ten people who all want to work a slightly different way, working together towards some outcome.\n\nSo I would say to you, if I took one of my lovely board games to my board game group, I'll be there tonight playing. If I took one and we got the pieces out, I don't know if you've seen these things, but they have like 300 pieces in the box. Right? We got all the pieces out of the box. I set it up the way I think it looks like it should be set up, so I'm not going to look at the rules; I'm just going to make some stuff up. And then every member that's playing, all four of us, make up our own rules for how to play the game. We don't read the official rules; we just do it our own way. Are we working together? Are we playing the same game? Right? You can't have a win; you can't have success unless you've agreed what the rules are for success. Right? Most of these games, it's the most points. Right? But have you agreed how you get points? Can I just move a piece to here and say now I have 300 points?\n\nThat's total disorder. That's total disarray. And most teams that I see and engage with operate in a state of total disarray because they've not agreed what their rules are. They've not agreed what game they're playing, what success looks like, how they get little successes within the context of the bigger successes that the organisation's trying to achieve. So sit down with your team and agree the way forward. Don't tell you need to agree, because if you tell me how to do the stuff that I do, I'm going to ignore you. I need to be in agreement with you. You need to collaborate on creating that definition of workflow. We need to collaborate on creating our working agreement. And it actually doesn't matter whether you have a CI. I don't care if you're doing a Kanban strategy, Kanban method, Scrum. It doesn't matter what it is. If you've got a bunch of people working together, you need to get together and agree how you're going to work. Otherwise, you have disarray. Everybody's making it up as they go along. Don't do that.\n\nIf you're struggling to implement a Kanban strategy, we can help or find you someone who can. Click the link below and get in touch today."
  },
  {
    "id": "hB8oQPpderI",
    "title": "One limitation of reading a book vs attending a course",
    "description": "Discover the key limitation of learning Scrum from books versus hands-on training in this insightful short with Martin Hinshelwood. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "hBw4ouNB1U0",
    "title": "The Kanban Key - How Continuous Improvement Transforms Your Workflow",
    "description": "Unlock your workflow's potential! Discover how Kanban's continuous improvement can boost efficiency and drive outstanding results in this insightful video.",
    "captions": "One of the key elements of Caman is improving, making improvements or changes to the system in order to see whether you've managed to improve things or not. \n\nSo we use metrics and visual tools to enable us as humans to see patterns and understand the data to increase transparency, so that we can make changes to the system. This allows us to ask more interesting questions of ourselves and others that participate in our system. \n\nImproving the workflow is absolutely critical. If you're not making changes to your workflow on a continuous basis, you're probably not doing Caman. If you are making changes, are you looking at the right data? Do you have the right visualisations to really be seeing what's going on?"
  },
  {
    "id": "HcoTwjPnLC0",
    "title": "Is a Product Owner an Agile Project Manager?",
    "description": "Discover why a product owner isn't an agile project manager! Join Martin Hinshelwood as he explores the essence of agile in product development. #shorts",
    "captions": ""
  },
  {
    "id": "HFFSrQx-wbQ",
    "title": "Plague - 7 Harbingers agile apocalypse. But shorter!",
    "description": "Uncover the truth behind the agile coaching crisis! Join Martin Hinshelwood as he tackles the challenges of unskilled coaches in the agile landscape.",
    "captions": ""
  },
  {
    "id": "hFjoIf3KPeI",
    "title": "How does a Scrum Master or Agile coach motivate a Scrum Team?",
    "description": "Unlock the secrets to motivating Scrum teams! Join us as we explore effective techniques for Scrum Masters and Agile Coaches to boost engagement and productivity. 🚀✨",
    "captions": ""
  },
  {
    "id": "hij5_aP_YN4",
    "title": "The Power of Community: Becoming an Awesome Agile Coach",
    "description": "Discover the fourth essential achievement for aspiring #AgileCoaches with Martin Hinshelwood. Elevate your skills and empower teams to thrive!",
    "captions": ""
  },
  {
    "id": "hiqdIfuxB0k",
    "title": "naked agility Professional Scrum Generic v1",
    "description": "Explore the essence of Agile with 'Naked Agility: Professional Scrum Generic v1'. Discover key principles and practices for effective Scrum implementation.",
    "captions": ""
  },
  {
    "id": "hj31XHbmWbA",
    "title": "Quotes: You can't connect the dots looking forward; you can only connect them looking backwards. Steve Jobs",
    "description": "Explore Steve Jobs' insight on connecting the dots in product development with Martin Hinshelwood. Discover the power of agile with Naked Agility! #shorts",
    "captions": ""
  },
  {
    "id": "HjumLIMTefA",
    "title": "The Power of Immersive Learning in Agile Training",
    "description": "Discover the top 5 reasons why immersive learning transforms Scrum training for students! Dive into the experience in this engaging short video. #Scrum #Agile",
    "captions": "One of the huge impacts of immersive learning is the impact that it has on the organization because the participants are going back to their organization and trying things and then getting feedback on it and perhaps trying slightly different again to try and make it work. That act of continuous learning and continuous change enables actual change to happen in the organization, which is the reason that we go to training in the first place, so that we can enact actual change. Immersive learning is the best chance for organizations to make actual change."
  },
  {
    "id": "HjyUeuf1IEw",
    "title": "20th May 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "HmAIUiR8QSo",
    "title": "Building a Culture of Quality",
    "description": "Join Martin Hinshelwood as he uncovers how to cultivate a culture of quality in engineering, drawing lessons from Boeing and Volkswagen.",
    "captions": "Building a culture of quality within your organization is absolutely not something that you can do on your own. It's not something that any individual can do. Each individual within the context of your organization needs to be able to demonstrate their own technical excellence, their technical leadership, their engineering capability. If they demonstrate their own, other people around them will see a way of behaving that hopefully they want to copy. The more people in your organization behave that way, the quicker other people in your organization will see that as the way to behave.\n\nI was trying to think of an example there of it being true, and I really keep coming back to the opposite being true. And that's the Boeing story. If you've been following the Boeing story really for many years, the Boeing story's been going on. When Boeing bought McDonnell Douglas, Boeing's focus was on engineering excellence, technical leadership, and they built that mantra of \"if it's not Boeing, I'm not going.\" Their planes were the best; they were the best build qualities; they were the least likely to fall out of the sky. They were the standard for quality in the entire aviation industry.\n\nThen they had that culture of engineering excellence and technical leadership, and then they moved. They bought McDonnell Douglas, and through some weird happenings, which I don't fully understand, McDonnell Douglas came out on top of being in charge. McDonnell Douglas's leadership and their focus was on revenue extraction. That was their focus. \"We're not here to build value; we're here to extract money for our shareholders and for ourselves.\" That's what we're here for.\n\nOver the next 20 years, I think it's been 20 years; I might be a little bit out there, 15 to 20 years, they've decimated that culture, that culture of quality inside of Boeing completely and utterly destroyed it. So much so that you might have seen videos of Boeing employees saying, \"Yes, I'd fly in this plane, but yeah, I've got a death wish.\" Right? That's not what you want if you're going to be flying in a plane. The culture you want within the context of the engineers that are building it, so why would you want it within the context of the software that you're purchasing, the software that you're using? \n\nHow much of the software that we use is actually life-critical or actually has a substantive impact on our quality of life, on the world around us? We want those products to be built within the context of a culture of quality, of delivering the right thing, of doing the right thing, and providing us with value—not \"let's cut all the corners we possibly can to deliver more revenue to our shareholders.\"\n\nIf you want to build amazing products rather than mediocre or even dangerous products, we need to focus on the things that really matter. Agile people talk about agile frameworks all the time and how agile frameworks were the solution, and agile frameworks are now the problem. None of those things are true. Agile frameworks are just tools that we use. It's the culture within our organization that leverages those tools in a positive or negative way. A hammer is just a tool, but you can use it to hit a nail, or you can use it to smack somebody around the head. Which one is going to add value, and which one's going to land you in jail?\n\nBuilding those cultures of quality can you—what world of culture of quality did a Volkswagen engineer write code that determined whether a car was in a test condition and faked the results? Right? They changed the way the engine operated in order to get the results they wanted, and the engine operated differently on the road. What world of quality does anybody in your organization make that sort of decision? No world of quality. If you have a culture of quality, you're not going to have people make that decision.\n\nThat's what we need to focus on. We need to focus on building a culture of engineering excellence, the technical leadership to set that direction and go in that direction. We need to build within our organization the knowledge and understanding of the theories behind the reasons things work the way they work and how we can then apply our empirical learnings within our context. Every organization is different, with the knowledge of those theories to then extrapolate what's the next best decision that we can make.\n\nThis is something that Naked Agility can help you and your organization do. We cannot do it for you, but we can be there to help you understand the theories and practices, how they apply within your context, and what are good engineering decisions and what are bad engineering decisions. So build engineering excellence and technical leadership within your organization."
  },
  {
    "id": "HMmCr5eMK3U",
    "title": "Free Workshop 6 - Introduction to the Definition of Done!",
    "description": "Join our free workshop to explore the Definition of Done! Learn how to create one with your team and enhance your project success. Don't miss out!",
    "captions": ""
  },
  {
    "id": "HO_XLWhJv1s",
    "title": "Professional Scrum Product Owner (PSPO) Overview to discover product management skills & practices",
    "description": "Unlock your potential as a Product Owner! Join our interactive PSPO course to master essential skills and drive product value in Agile teams.",
    "captions": ""
  },
  {
    "id": "HrJMsZZQl_g",
    "title": "When is an APS course appropriate for a scrum team?",
    "description": "Discover when the APS course is ideal for Scrum teams and how it tailors Scrum practices to your organisation's unique needs. 📚🚀",
    "captions": ""
  },
  {
    "id": "HTv3NkNJovk",
    "title": "Why is Satya Nadella a better example of agile leadership than Steve Jobs?",
    "description": "Discover why Satya Nadella exemplifies agile leadership better than Steve Jobs, as Martin Hinshelwood explores vision and teamwork in this insightful video.",
    "captions": ""
  },
  {
    "id": "hu80qqzaDx0",
    "title": "Introduction to Evidence Based Management Excerpt 1",
    "description": "Discover the fundamentals of Evidence-Based Management in this insightful excerpt, enhancing your agile leadership and project management skills. #EBM #Agile",
    "captions": "The way we measure people informs the way they behave. So whenever you're working within an organisation and you find somebody's working against you or somebody's not being as involved as you think they should be involved, and you're wondering why, there's probably some organisational measure or metric, something being levied against them, that enables that behaviour, that ensures or encourages that behaviour in that person. \n\nSo the best way to figure out why somebody is doing something in a particular way that maybe you feel has a negative impact on the way your things need to happen is to figure out how they're measured."
  },
  {
    "id": "hWyF6CbcbQ8",
    "title": "DevOps Migration. Data Integrity Issues",
    "description": "Explore data integrity in Azure DevOps migrations! Discover the trade-offs between full and selective data transfers for optimal results.",
    "captions": "Here's what you need to know about data integrity and your DevOps migrations. You can't have everything depending on what it is you want to do. So there's a balance to be had between the fidelity of the data that you're migrating and the flexibility that you want as part of your migration process.\n\nAs your DevOps on-prem was TFS, it has a database-based architecture. Right? So you have a whole database of data. If you're taking that whole database, the collection in TFS and Azure DevOps, if you're taking that up to Azure DevOps services in the cloud, as one thing, the whole thing, we're taking it together, then we have the highest fidelity possible. Right? We're effectively taking the entire database up with everything in it, in exactly the same format that it is just now.\n\nBut for many organisations, that's not what they want to do. They have a couple of teams that want to go, or they have some teams that are able to go and other teams that aren't. So part of that migration process, we've built a bunch of tools that allow you to selectively slice out the data that you want to take. But it does mean lower fidelity because we're effectively replaying the story of the data against the new environment. Right? So we're not importing the database; we're replaying what happened with the data, and that means that there is a little bit of data loss. Things don't always go perfectly.\n\nBut within that context of taking your choice of data, pick and mix from one place to another, it is the most flexible approach you can have."
  },
  {
    "id": "hXieCawt-XE",
    "title": "Mastering Kanban: Creating a Pull-Based System for Workflow Efficiency",
    "description": "Unlock your team's potential with Kanban! Discover how pull-based principles enhance workflow efficiency, reduce waste, and boost productivity in this insightful video.",
    "captions": "When you're implementing a Caman strategy, we're effectively creating a pool-based system of work. So, Caman kind of does this. There are three core practices to Caman: defining and visualizing your workflow, actively managing items in that workflow, and then improving that workflow. \n\nOur ability to define and visualize that workflow as part of creating that Caman system means we need to decide what is the system that we're going to use Caman, a Caman strategy, to monitor. Right? So we define generally, and you'll see this a lot with teams, as they'll define columns. If they just stop there, it's probably not a Caman system yet. Right? It's not a Caman strategy if they just define the columns and then we're done. There's a little bit more to it than that. \n\nSome of the minimum things that you kind of need at a minimum: you should have WIP limits. Right? At absolute minimum, you should have WIP limits. Those other things we should have, but definitely if you don't have WIP limits, definitely not a Caman system yet. \n\nWhat we're able to do is decide what of the stages that our work flows through, but we also want to think about what are our wait states. Wait states are places where work stops because the next thing that needs to happen, the next activity, the next stage in the process is full. Right? There's no capacity. \n\nIf you think about, I'm trying to think of a good example. A good example is if you go to the hospital and you go to the waiting room and there are no seats left. Quite often, there'll be another overflow waiting room where people can go and wait to get into that situation. Then the people running that department in the hospital are going to be looking at how many people end up in this overflow. They're all waiting longer than we expect because everybody's waiting longer than we expect, and we don't want too many things in the system. Perhaps we need to reduce the number of people that we book on a particular schedule, right, in order to minimize the amount of time people wait and maximize the amount of people we get through the system. \n\nThat's more difficult for hospitals because they have to take into account people that cancel, people that don't turn up, all of those kinds of things. So, yeah, that's fun. But this idea of the wait state is really important. \n\nSo quite often for a stage, let's use a really simple visualization where you've got some kind of analysis, discovery happens, then some sort of development or doing happens, and then some kind of validation or testing happens, and then things are finished. You want to be able to indicate on your board, in your visualization, in your system, visualizing your system when things are complete from the perspective of analysis. Right? \n\nBut we've not yet started development, doing work on it. So if the analysis team just put it into the development team's backlog, and I'm using teams badly here, but the people doing analysis put it into the backlog of the people doing development, they're committing to that work on that other group's behalf. Right? They're putting it in their system inside of their view without permission. They're just dropping it in there. Even if they ask, they're kind of pushing that system. That's a push system. \n\nIf we want to create a pull system, then the folks in the stage before, so in this case analysis, they want to kind of have an analysis doing and an analysis done indication. That analysis done is a wait state for the next stage to look at that list of things that are done from the previous stage and then pull them in. But it still counts as time in that previous stage. \n\nThat way we can visually see when work piles up and see when we need to do something about it, like the overflow in the waiting room at the hospital. We want to be able to take action. Right? We want to actively manage the items in the workflow, which means we're going to be looking for those wait states. We're going to be looking for work piling up. \n\nYou might find if we're limiting work in process, which we should be in a Caman system, then if the development activity has four things that they can take and the analysis activity has four things, then perhaps the analysis work stops because they have four things in done, and the development activity has more things in progress/done, and we can't take on any more. \n\nAnalysis can't take any more because their WIP is four, and they then stop working. They say to the system, \"We don't have anything left to do. We can't start new work because we don't have room in our system.\" Right? \n\nYou might think, \"Well, surely they can just take on something else.\" But what if they keep doing that and don't stop and put up the flag and alert that we've stopped work? What if they just keep going? So they keep pulling work and dropping it into their done column, and their done column just gets bigger and bigger and bigger and bigger. \n\nPerhaps the next stage can't pull from that list very quickly, and it means that the wait time, the amount of total time in the system for all of those things that are in that wait state is getting longer and longer and longer, and it's just waste. Wouldn't it be better if that group in analysis just put up the red flag and said, \"We've stopped because we've got no more room in our system. The next stage has not filtered more down. What should we do?\" \n\nRight? In reality, if you're an engineering team working together, perhaps they go help the next stage down the line. Right? Maybe they can help out and help make that faster. Or perhaps we need to bring this up as a bigger thing for leadership and say, \"We've got some kind of problem in the system, and we need to change the system in order to make it more effective so the things that we bring into the system flow through the system more quickly.\" \n\nBy creating a pull system, we actually create a system within which we can see, we can visually see when the system's not flowing properly, when the engine's not working properly. It will back up, and it will back up all the way to a point where we're like, \"Okay, everybody in this line of all, every single activity is effectively blocked.\" Right? \n\nIt's not a blocked thing, but everything is constrained. And then, \"Oh, this is where it's constrained because they're still working, and everybody after them has stopped.\" What's the problem? Do we not have enough people here to be able to process the amount of work that's going on? Are we taking on too much work into the system so it's flowing through too quickly for this? \n\nWhatever the constraint is in this area, we need to figure out what it is and go fix it. \n\nThis dynamic applies both for a Caman strategy. Right? You want to be looking for those stages and thinking about how do we visualize them. But it also applies in the Scrum world as well. Scrum has a wait state built in because the developers select work during Sprint planning. Right? \n\nSo that's their moment for pulling work into the system, and then the system runs, and we see what comes out the other end. So we can apply a Caman strategy on top of that as well, in addition to the work-limited pool system that's implemented by Scrum, and add additional work-limited pool systems so that inside of the system that Scrum creates, we can break it up into other activities that allow us to see what's going on in those activities and where within the system that's implemented by Scrum where the actual activities are blocked, are stuck, are constrained, that we need to take action and we need to fulfil that final part of a Caman strategy, which is improving the workflow. \n\nNot just actively managing it, but improving it. So we need to go take action and make a change. If you're struggling to create a pool-based system of work, then we can help you. We provide world-class Caman training from Pro Caman, as well as consulting and coaching for teams trying to implement a Caman strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complementary practice and have Cang classes from Scrum.org as well."
  },
  {
    "id": "HZxho4-wvHc",
    "title": "PAL In 2 minutes",
    "description": "Discover the essence of PAL in just 2 minutes! Uncover its key features and benefits in a quick, engaging overview. Perfect for a fast-paced understanding!",
    "captions": ""
  },
  {
    "id": "i_DglXgaePM",
    "title": "Slaying the dragons and how to successfully descale at scale with BCS & FoWS",
    "description": "Discover how successful organisations are overcoming the challenges of scaling agile. Learn the secrets to effective software delivery and transformation!",
    "captions": ""
  },
  {
    "id": "I5YoOAai-m4",
    "title": "Agile Coach Versus Professional Coach",
    "description": "Discover the key differences between an Agile coach and a professional coach with Martin Hinshelwood in this insightful short video! #Agile #Coaching",
    "captions": ""
  },
  {
    "id": "I9avUDYFw-E",
    "title": "The Importance of Competence in Organizations: Building a Culture of Learning and Growth",
    "description": "Discover why investing in team competence is vital for innovation. Happy, skilled people create great products. Let's foster growth and excellence! 🌱🚀",
    "captions": "It's critical that we start investing in the competence of the people that we have, of hiring the right people, of keeping the people that we have that are competent, in supporting them in experimentation and learning and figuring things out. Because without them, we're not going to be able to create the value that we need. We're not going to be able to create the products that are going to lead to us being successful.\n\nThe thing I always think about was an epiphany of mine many years ago, and that's that unhappy, sad people don't build great products; they build mediocre ones. Do you want to build mediocre products? If you want to build great products, you need to find great people. You need to find people that are happy. You need to create environments within which you encourage people to be happy. You encourage them to learn. You encourage them to care about what it is you're doing and the products that you're building.\n\nThe first part of caring is self-care, and self-caring within the context of the work environment means caring about your knowledge and your capability and your competence and doing something about it. Just like if you care about your health, you eat well and you go to the gym. If you care about your competence, you learn and you practice. That's why it's so important that we have this focus on competence within organizations and stop hiring for a lack of it."
  },
  {
    "id": "iCDEX6oHy7A",
    "title": "Ep 004 - Chat with Jim Sammons on professionalism and conflicting priorities",
    "description": "Join us for a chat with Jim Sammons on professionalism and managing conflicting priorities in Agile. Tune in on 7th April 2020 at 20:00!",
    "captions": ""
  },
  {
    "id": "IcmNR--u-kg",
    "title": "How will the immersive learning experience change the game in terms of entry level capabilities?",
    "description": "Explore how immersive learning revolutionises entry-level skills, enhancing practical application and problem-solving in workforce development. 🌟🚀",
    "captions": ""
  },
  {
    "id": "icX4XpolVLE",
    "title": "My Journey into DevOps! From Web Developer to Author, Speaker, & Thought Leader.",
    "description": "Join me on my DevOps journey from web developer to thought leader! Discover insights, challenges, and strategies for transforming software delivery. 🚀",
    "captions": "So I first encountered DevOps as a developer at Marl Lynch, but I experienced the frustration that created the need for DevOps in many jobs beforehand. I started my career back in the early 2000s, 2001, and I was working for what was then called New Media agencies, which are just web development companies these days building websites. We did all the things you shouldn't be doing. We deployed from our local machine, we edited in production. We did all of those crazy, nasty things because at the time, continuous integration wasn't really a thing. Oh, it was around right at that time in 2001. I think continuous integration had been around for about nine years, but most people hadn't really heard of it. Most people weren't really doing it around then. Your experience will absolutely vary. There'll be lots of people that were doing it, and I experienced the frustration of mistakes, of deployments that failed, of overwriting things you shouldn't be overwriting, all of those kind of things.\n\nWhen I moved to Marl Lynch, which is a big investment banking company, the tools were different. You didn't have access to production. Once it's production, you only had access to specific environments. You had to have specific deployment packages. You couldn't make changes to certain types of systems like SQL Server. You had to give them a patch to be able to apply. When you're in those restrictions and you try and do the same thing that you were doing before, because when I arrived at the part of Maryland that I was working at, they didn't have any automation. They didn't have any of these things. You experienced even worse frustration because you give somebody who doesn't care one jot about your product, some DBA in I don't know where they were. I know that Marl Lynch had five and a half thousand DBAs in the organization who you would give scripts to, and they would go run it against the databases, and nobody else was allowed to go near the databases. \n\nBut it meant that you would give them it. It would take them a half day to get to it, and they would tell you that the script didn't work, and then you would have to go tweak the script and give it to them, tweak the script and give it to them, and it would just be a nightmare. It would take ages to get anything deployed. So what we started doing was thinking about how we could do automation, how we could create a more slick process where at the very least we were able to get into production with less hiccups. There wasn't a lot of DevOps going on back then. It was called application life cycle management, and application life cycle management was both good ways of doing things and bad ways of doing things, but just under that guise of we're going to be actively managing these applications. \n\nIt's the term that then morphed into DevOps a little bit later on once DevOps was coined. So what we did was we introduced tools, we introduced ways of doing things, we introduced automation to our story, and I started using at the time Team Foundation Server as part of that integration automation. Everything linked together, traceability story for application life cycle management. We made it a little bit more professional. But while that was my kind of baptism into that very different environment where there were a lot of controls, we still didn't do it very well. It really wasn't until I started working more heavily in the Team Foundation Server community and I became a Microsoft MVP that I started engaging with other people who were in that category and really working towards making things more effective. \n\nWe started talking about how we could do the automation, how we could enable getting from code all the way to production without having people in the way, messing things up or other stories in the way, getting in, you know, other biases in the way, getting in the way of the thing you're trying to deploy. That was really my introduction into proper DevOps. It was as a Microsoft application life cycle management MVP, working with other ALM MVPs within that category to really focus on that story. I found that I seemed to have an affinity for that, an affinity for engaging with development teams and helping them get better at that continuous delivery, continuous integration tools. Tools are not all of DevOps. Tools support DevOps, but they're definitely a common route into towards DevOps because I really think of DevOps as the other side of the agile coin. \n\nI.e., agile was something that was created by some people who were definitely engineers. You think of the signatories of the Agile Manifesto, but they were also much higher-level engineers. They were managers, and they were working on big products and projects, so they weren't just software engineers building products. It was a much bigger thing, and they really thought of, came up with this idea of agile from that perspective. Some things seemed to be a little bit missing that were only implied in the Agile Manifesto but weren't actually explicitly stated. This is the thing you need to worry about, and that for me, this is how I feel about it. I think that's why DevOps was born. That's why application life cycle management became DevOps, is because we really wanted folks from the engineering perspective who were trying to get to the same thing that the folks from the Agile Manifesto perspective were trying to get to as well. \n\nThat engineering focus means that there's a lot more reliance, engagement, and support on tools, on processes, on systems because that's how core engineering folks kind of think. That story kind of culminated in me co-authoring a book for Rocks called one of the big red books, engineering books called Professional Application Life Cycle Management with Visual Studio 2013. That kind of solidified my progress towards supporting that story. I don't remember when it came about. It might have been around that time. It might have been a little bit later. A great DevOps person called Donovan Brown, who did eventually work for Microsoft, came up with a definition of DevOps that I think makes the most sense. It's a little bit tools-focused, but not as well. I quite like it. \n\nDevOps is the union of people, processes, and products to enable continuous delivery of value to our end users. So when you think about where DevOps came from, application life cycle management, the engineering side of delivering products, and that move towards realizing, and this was a big realization for me as well, is that tools—sorry, let me rephrase that—tools don't solve problems; people do. People, with folks like myself with an engineering focus, very much focus on the tools and the code and the engineering, and we sometimes forget that the people are part of the story as well. We need to bring the people and the processes and the products together to create our system that allows us to build effectively, build products, and continuously deliver products to our end users.\n\nThere are kind of three primary challenges in that story of DevOps, which is what I experienced as I moved through them myself. I think the best way to experience them is to move through them yourself. We learn by doing. The first one is that culture and collaboration shift. If you think of the Agile Manifesto, people and interactions are more valuable than processes and tools, and that's absolutely true even on the DevOps side. But DevOps, to a much greater degree, acknowledges that processes and tools support the people in doing the things that we need to do. I keep thinking of the Night Capital Group, right? That story about the investment firm listed on the New York Stock Exchange, $450 million cash in the bank to support their business. \n\nThey had a failed deployment because they were manually deploying. They had poor quality code. They had a poor quality deployment with just one person, and something went wrong that they couldn't figure out. They started hemorrhaging money the moment they did their deployment and ended up, by the end of the day, they managed to figure out what the problem was with their deployment and fixed production, but by then it was too late. They drained their capital reserves. They didn't have any cash flow anymore, and they had to file for bankruptcy. The reason we know so much about why they failed is because the bankruptcy filing has to list why they're going into bankruptcy, and it detailed the problems that they'd figured out they ran into. They'd been reusing code that they thought wasn't used for anything. They had not been focusing on their architectures and building up software quality, and they had one person doing the deployment with no backup or support to validate what it was that they were doing. \n\nThe person accidentally deployed to seven out of the eight servers that they were deploying to. That's roughly the story. So that cultural shift on the people side of getting people on board with this idea that while tools and processes don't solve your problems, they're there to serve the people's needs and enable them to make things that are really complicated and difficult, like deploying software, can often be really complicated and different. I build and maintain a product still, and I think there's 20 steps in building the product and maybe five or six steps in deploying the product, and they all have to be done correctly in order for the output to work. I don't want to have to walk through that list every time. Not only would it be time-consuming, but I'm likely to miss stuff. I'm likely to have my eyes go from step two to step four instead of one, two, three. \n\nThat happens all the time. I did training years ago for a bunch of testers, and I had made the assumption that if anybody in the world was able to follow a set of steps that they created to validate that a thing happens the correct way, it would be people who were trained as testers. But as it happens, that was not true. We had labs that they were doing in this training against a DevOps, and they would constantly go, \"Wow, this isn't working. I can't, this doesn't work. This is broken. Your lab's wrong,\" when in fact they missed a step. It's even professionals whose job it is to follow those steps when you're running things manually also miss those steps. It's just the way the human brain works. It's the way things happen. We're not going to be able to fix it by focusing on the people, but we can build automation to help support that cultural shift. \n\nBut people have to accept that the people that are part of your organization have to accept that automation is the key, that automation in defining those processes is the key to supporting that story. Lots of organizations still prevent us from being able to deploy directly to production using automation. What we ideally want to do is go from developer checks a line of code into source control. It ends up in our deployable branch, whatever that is. We want to go from there all the way to production and rolled out to everybody without any human intervention because that's our production line. The key shift here is from development to delivery. Think about the way car companies build cars. They've, and Toyota kind of pioneered this. \n\nToyota pioneered the ability to deliver cars. They're taking something that they've designed and created and that works and delivering lots of it into production. That's their production line. We can apply those ideas and mentalities to our DevOps production line, which is from we've created the thing and we validated that it works all the way through, and we can actually do the validation as part of that. But all the way through to getting it in the hands of real users. That's not only that culture shift but also the toolchain integration and automation that needs to happen in order for that to work. Once you've got that toolchain and automation in place, we're able to do this thing. We then need to figure out how to do it better. How do we optimize that production line to make it more effective? \n\nThe story I always think about is the Azure DevOps team, right? When they were the TFS team and they were moving towards continuous delivery from their waterfall mindset, the head of that group, Brian Harry at the time, decided to run a little test. They were creating a version of their product, and they had shipped their product all the way to production. It had gone through the gauntlet of lawyers and validation and signing and all of the gobbin that has to happen in between. It took them, I don't know, 10 weeks, 20 weeks, whatever it was, to get their product to a state where it would pass the entire gauntlet that it had to go through, and then they had a deployable version. \n\nHe called it a null build. There were no changes to the code base. We're just doing the same thing again. How long does it take to go through the process? You know upfront every one of those checks, so they had a concerted effort to look at their toolchain, to look at how they did the build and process, and what of these checks could they automate into the process so that they can then just give the artifacts and they sign them off? Or even if we have those artifacts and we pass these checks, will you automate that sign-off? Will you, as the person who has to sign off over here, just say, \"I'm happy if you followed this process. I'm happy it all worked. All I was doing before was checking that you'd followed the process manually. If you can automate that, I'm good to go.\" \n\nThey worked through that story inside of the organization of convincing all of those different people, and the build started to chunk down to a much smaller capability. I think they got it down that way to 48 hours was their automated pipeline. Then they started thinking about the advanced stuff. If your biggest problem is going from eight weeks to 48 hours, focus on that story. Getting all the approvals, getting all the engagement, bring it down. Now you're at this 48 hours. What's the next biggest thing we need to deal with? That's part of that cultural shift. Not only have we got the toolchain involved, but we've got that cultural shift of what's the biggest problem? What's the most length of time that our process is taking, and how can we make it shorter and engage in that story? \n\nThen you start thinking about more advanced stuff like our advanced automation and orchestration. The next thing that particular team focused on was why does it take 48 hours to run our tests? Well, we need the whole system up. We need to feed it with test data, and then we're orchestrating across the entire system to do those tests. Is there a different way? Perhaps we can convert all those long-running tests that need data loaded, and maybe we can convert as many of them to unit tests as possible. So they worked for another four years getting rid of flipping that pyramid, right? From having most of their tests being the long-running automation and a few unit tests, flipping that pyramid until, in fact, after four years, all of their tests were unit tests, and they got that 48 hours down to three and a half minutes. \n\nThat's three and a half minutes for a developer to validate that the product that they just made changes to still works the way it's intended to work. That's a total game-changer for organizations. Think about if you make a change and you don't know for 48 hours whether it was the right change or not, or it worked or not. Do you work on other stuff and perhaps introduce more breaking changes, or do you stop and wait for that result and then continue on? That delay is a huge amount of waste in the system. Again, lean product delivery, right? You're thinking about how you do that. Once you do get there and you're confident you can get things into production, what about monitoring, logging, and observability? \n\nAre you able to see what's going on in production? Are you able to head off and find and trace issues before they become customer problems? Are you able to go and find out what happened when something goes wrong? Do you have the transparency that you need in your product? That's a huge part of that toolchain and automation that it takes many, many months or years of effort to get your product to a state where you even have time to focus on that stuff. So monitoring and logging is really important. That's telemetry, right? How much telemetry do you get out of your system? I only know the stats from about five years ago, but about five years ago, Visual Studio, the big Visual Studio product, was sending 7 and 12 terabytes of telemetry to Microsoft every day. \n\nThat's telemetry on what features developers are using, how long the things that we're using take, how long it takes to load, what buttons we click, all of those things so that they can build a better product. Because then you start thinking about, well, if we've got our advanced orchestration, we've optimized our pipeline, we've also optimized, we can see what's going on because we've got telemetry and logging, and we can observe in almost real-time what's happening in the system, then we can start talking about optimizing for scalability and reliability. These are all part of that DevOps story. \n\nThen there's the third thing. So we had cultural shift and collaboration. We had toolchain integration and automation. The third thing is continuous learning and skill development. None of that stuff I just talked about comes along overnight, and none of that stuff everybody already knows in your organization. Even if you start hiring in people that have DevOps skills, what do they really know? What do they really understand? We need to build these skills inside of our organization. Don't think you can buy DevOps and install it, right? You can't just bring in a consulting organization, tell them to install DevOps in your organization, and expect that to be the outcome. \n\nThe people in your organization have to have gone through the journey and had the battle scars to understand why they do things differently. They're then incumbent in your organization, in your organization's culture, and they're able, as new people come in, to reduce the number of scars that the new people need inside of your organization in order to get on the same track. Does that make sense? It's kind of like why we train recruits going into military organizations. You train them so that they don't make the mistakes that people made in the past, things that we already understand aren't going to work out well. That's why we train them, so that having that incumbent knowledge in our organization and then having people come in and train and become part of that organization and that culture in our organization is really important to that story.\n\nThat's kind of where I got to over, I guess, six or seven years. From 2006 to 2013, 2013 is around when I did the application life cycle management book. That was my story to that point. But then, as you learn new stuff, sometimes we do things because we're told to do things, and we don't know why we're doing things. In order for true learning to happen, we have to understand the theory. That's actually why training theory is so important inside of organizations, right? Because in order for the people in your organization to have the knowledge and skills to be able to make the best decision in circumstances they've never encountered before, because we're doing complex cognitive work, we need to understand the theory of why those things are true.\n\nThings like Little's Law and the theory of constraints are part of that lean story. If we understand those underlying theory and concepts, we can start doing stuff and learning. We feed that learning loop through our theory, and it solidifies our understanding because the theory is the thing that helps tailor our way towards knowledge and understanding. The thing in DevOps, if you've not heard of it, is something called the three ways of DevOps. These are kind of the core tenets, I guess. They're probably not universally agreed, but these are the core tenets in the way I think about DevOps. This is that perspective shift to what's the theory that we generate, the body of theory we generate that we then build all this other stuff on top of because we've seen it working in organizations.\n\nSo then what are the commonalities? What are the theories that we can understand that will then work in everywhere else as well? Because everywhere else is different, so the theories are the bit that connects it all together. The first of the three ways of DevOps is systems thinking, amplifying feedback loops, and a culture of continual learning and experimentation. Systems thinking is really, really important. We can't think about systems in isolation. If you think about your software as the system, and that's what I'm working with, what about the people that are doing things around your system? What about the automations that are in place that build and deploy your system? The system is your entire organization and everything that impacts on your system. \n\nSo we have to look at all of those things. We have to take the blinkers off and raise that impact because if we don't look at systems thinking as a wider view as part of DevOps and Agile as well, right? If we're not thinking about systems and we think about just one small part, we might make optimizations for the part that don't, in fact, result in a better outcome for the entire system. We end up making incorrect choices that maybe inhibit the rest of the system. I'm not sure that I'm explaining that well. Let me think about how I can explain that better. There are definitely things that I've done where I've made a change to the way I do things on the small scale that means that the bigger scale of things is harder to do.\n\nAn example of not thinking of the big picture in the IT world is where organizations have a centralized security department. The security department, in order to optimize their world of security, decides that everybody has to use, for example, a virtual machine. In order to maximize our ability to be secure, and this makes perfect logical sense, we want to 100% secure all of our stuff. Okay, nobody's allowed to do work remotely. In order to interact with any of our systems, you have to be on our network, on our hardware. Therefore, we're going to prevent anybody from doing anything else. Or you could do what Microsoft does, for example. When you're working with Microsoft, you can buy your own physical hardware, join your own physical hardware to their domain. They then take control of that hardware and validate that it has all of the security requirements that they need. \n\nThey can remote wipe it, and suddenly you're able to work with any local machine on their systems and be able to interact with a local machine. You've got full low latency access to everything, moving stuff around, that kind of thing. That is more effective. That's a let's take security with a wider picture of everybody needs to be able to do the job that the business requires rather than focusing on security as a blinkered view of just that thing. That's an example of systems thinking. It's widening that view and looking at the wider scope of things. The second one is amplifying feedback loops. We need to be able to not only have feedback loops but how do we maximize the value in those feedback loops? \n\nHow do we increase our ability to do stuff with those feedback loops? A great example is when you're using telemetry. Do you have the right telemetry? Not just do we have telemetry from our product seeing how people are using it, but do we have the right telemetry with the right timings of the right things? How do we enable ourselves to get the right data to then make different choices on the way we build and deliver our applications to customers? Those feedback loops are hugely important. In Scrum, we have loads of feedback loops implementing that empirical process control system. \n\nThe third thing is that culture of continual experimentation and learning. How do we enable people to not get blamed for mistakes? We want to take accountability for our actions that we're going to be doing as much of the right thing as possible, but in order to push the boundaries, in order to experiment, not all experiments are successful, and that's normal. It's normal that not everything goes well. So how do we create an environment within which we're able to not just punish people for things going wrong but explore what was the root cause of things going wrong? How do we change the way our system works in order to enable less of those things that go wrong to happen? \n\nHow do we change the way we do things in order to minimize our recovery time and maximize our learning from the outcomes? These are the most important things in application life cycle management, which became DevOps, and that story of the other side of the coin from Agile. Agile coming from the business perspective, DevOps coming from the engineering perspective, both focused on trying to solve that same problem. At Naked Agility, we love DevOps. DevOps is how we engage with our customers. It's how we enable them to be more effective. It's how we get people working together, a combination of DevOps and Agile practices, which quite often are the same practices. \n\nIt enables us to help teams because there are well-known metrics that we can use in the DevOps space. If you look at the DORA report, you'll find a bunch of metrics that you can use to get an understanding of where we are as an organization. Are we focused on the right things? Are we looking at holistic systems, or are we looking at isolated things? Are we amplifying the feedback? Can people even amplify their feedback loops, or is everything restricted and locked down, enclosed, and there's no experimentation, no learning, no ability to change anything? No ability to do anything with those feedback loops, in which case people will stop using them. \n\nThose are the things which enable organizations to not only understand where they are right now, organizations and teams, to understand where they are right now, but what's the next most important thing they could be working on? Or what's the next thing on their backlog of increasing their capability to successfully and continuously deliver products of the highest possible value? What's the next thing they should be focused on to enable that to happen much, much quicker? If you're trying to integrate DevOps into your team or organization, then Naked Agility can help you focus on the three ways and enable you to get the value that you and your customers deserve. Get in touch below."
  },
  {
    "id": "IFX3SRUlunc",
    "title": "5 October 2023 Product Ownership and Lean Product Development Workshop with Martin and Joanna",
    "description": "Join experts Joanna Płaskonka and Martin Hinshelwood in this 18-minute workshop to explore Product Ownership and Lean Product Development! 🌟",
    "captions": ""
  },
  {
    "id": "Ig-HpUfQr3M",
    "title": "Monitoring and Measuring for Success",
    "description": "Discover how to shift from traditional budgeting to hypothesis-driven product development for maximum impact with Martin Hinshelwood from NKD Agility.",
    "captions": "If you want to ensure that your products... I actually don't like the phrase \"stay within budget.\" I know everybody uses it, but I don't think that way anymore. When I'm investing in things, I think about it as I have a pool of money, and I'm going to move that pool of money around where it's going to provide the most value. Right? So I need to be looking at... I need data, right? I need to understand what's going on.\n\nFor example, I talk a lot about hypothesis-driven engineering practices. If we're building brand new products or even adding capabilities to existing products, I want to have a hypothesis-driven story. That means that we're going to have a... you know, it starts with an idea. What do we think we would like to add to our product? This could be applied to a thing on your backlog, this could be applied to the whole product, or it could be applied to a portfolio of products. Right? But what do you think you're trying to do?\n\nThen you would do some kind of analysis of that and figure out, well, what's the outcome I'm trying to achieve? Right? This is what I want at the outcome. This is the thing that I'm going to do that I think will help us move towards this outcome. What's the smallest experiment that I can run? And then I would look at how am I going to measure whether I've made progress towards that goal? And I'm going to regularly assess based on my progress towards that on whether I continue to invest in this thing or I don't. This can be at the small scale or it can be at the grandiose scale—any scale you like.\n\nSo a good example is the Azure DevOps team at Microsoft. They were interested at one point in trying to answer a particular question. Right? So the head of the product, Microsoft called it the product unit manager, I think that's their technical term, has overall budgetary control. Right? So they have all the money. They know that that means people. Right? So they have exactly 600 people—it's not but exactly 600 people—and I need to allocate those people to the ideas that make sense in order to maximize my return on investment and keep my stakeholders happy, keep my customers happy, keep building products, and have an eye to the future on ideation and what is it that's coming next.\n\nSo they're allocating people's time as the biggest expense. Right? So they had this idea brought to them that we'd like to help... this is the idea: we'd like to help customers discover and deal with their technical debt. Right? All they're building software that helps build software. So we're all building software, and we have technical debt. So it would be great if we could understand what technical debt we have and then have things we can do to help us—things that help us minimize that technical debt. So that's a grandiose idea; it's a big idea that goes across the entire product suite.\n\nYou know, I'm going to allocate a bunch of time. So the idea is that I, as the product owner—the Uber product owner—there's lots of people in charge of different parts of the product, but the Uber product owner, product unit manager, decides we're going to try this thing. I'd like to see some experiments within the context of this story, and you folks figure out what it is you're going to do.\n\nSo his lieutenants, who run the different parts of the product, come up with ideas on how to collaborate together. What are we going to do? What are the ideas we think we can have? They come up with some ideas, and they bring that, saying, \"This is what we're thinking. This is what we want to try.\" Okay, cool, let's try this one. This looks pretty good, and they try it. This could involve 100 people spending some amount of time within a quarter, within a year, within a fixed time scale to try and create some features within this context. Right?\n\nSo when we're spending time on this experiment, that's money not being spent on other things that we know are valuable. We're speculating on something that we think might be valuable in the future, right? That we might be able to do something with. So they spent a bunch of time on it. I think they spent about six months—four to six months on it, if I'm remembering rightly—and they come back and they're like, \"We don't understand how to solve this problem.\" The things that they'd created, they'd managed to create some things, they'd got them in front of real customers—like myself, I'm their customer—got them in front of real customers, and they just didn't resonate. They just didn't provide value.\n\nThey tried a whole bunch of different ideas. There were five or six different teams, different groups involved in it. They all had different ideas; they all collaborated together to create some of these ideas, and nothing resonated with the customers. So at some point, the product unit manager is like, \"Right, let's not invest any more money in this because we're not... we've not got an idea that's good enough to move the needle or solve this problem.\"\n\nYou could say that that amount of money—maybe they invested 10 million in this capability—was wasted money. You could say it was wasted money, but you could also say that there was a lot of learning involved. They learned not to go tackle that problem. They learned to save their money and spend it on something else. So in the traditional world, they would have spent years on that capability to find out that it was a bad idea. Right? Think of Windows 8. No, not Windows XP—Windows 8, sorry, my brain died there. The Windows 8 debacle, where Microsoft spent six years. They had 4,500 software engineers working on Windows. They had 15,000 other people involved in that story. So you're talking nearly 20,000 people working for six years. Imagine the cost in your budget for 20,000 people working for six years on a product, and the end outcome did not meet the expectations of the customer, did not meet the brand value, right? In fact, it detracted from the brand value, detracted from the customer experience, and you had a lot of unhappy customers that went to other products like Apple. Right? That was a big jump ship moment that people moved to other platforms.\n\nThis fundamentally was the catalyst for Microsoft looking at themselves and kind of going, \"Yeah, we're doing this wrong.\" This long cycle, long budgetary five-year plan, right? And not getting things very quickly in front of customers, very quickly testing and validating whether we're doing the right thing. That's what we need to be doing, and we need to be doing it on every product, everywhere in the business, at every scale possible—from the lowest teams working on products, hypothesis-driven engineering practices, to the board making decisions about which products and capabilities to fund and which products and capabilities to not. Hypothesis-driven engineering practices—you need to be doing it at every level of your business."
  },
  {
    "id": "il1GdfG7rWk",
    "title": "Mastering Product Backlog Management: Essential Skills for Product Owners",
    "description": "Master product backlog management with our expert guide! Learn essential strategies for new product owners to deliver maximum value. Subscribe for insights!",
    "captions": "One of the key things that new product owners need to learn is how to manage their product backlog. It's a key part of the story. Yeah, I will point out that you don't necessarily need to do it yourself, right? You can delegate it, but you remain accountable. You, as the product owner, are accountable for value delivery and for maximising the value delivery. If you have a terrible product backlog, regardless of whether you delegated or not, it's still going to be you that's held accountable, right? So you, at least, especially if you're a new product owner, you're going to want to learn how to manage a product backlog, how to order that backlog, how to write a good backlog so that you enable understanding with everybody who needs to be reading it.\n\nUm, so in order to do that, it does a lot of work involved in managing a product backlog. One of the key concepts that I think is often overlooked by product owners is that the purpose of the things in your backlog is they become ready, right? So the team can take them on based on everybody's understanding of it. You can't measure understanding, right? You just can't measure it. You can't say, \"Here's a line in the sand,\" and at this point, everybody understands it. It's a lot more nebulous than that, a lot more fuzzy than that. So you, as a product owner, need to learn to read the room, to know what language you need to use in order to enable understanding, to know what sometimes people don't want to admit that they don't understand your thing, right? So you need to learn to be able to read when people are in that category and maybe do some more around it.\n\nBut there are kind of four key vectors that you need to understand, you need to enable for your product backlog. The first one is risk. How risky are the things on your product backlog? And that could be fiscal risk, it could be operational risk, um, it could be lots of different types of risk. What's the risk involved? And if things are really high risk, those are the things you want to spend a little bit more time on upfront to understand them better, break them down, reduce the risk, right? That's key. That's part of refinement, right? Refining your product backlog is really important.\n\nYou also need to understand the value. What are you going to get out of it? What do you think you're going to get out of it? Because remember, everything you think you're going to get out of it is an assumption until you actually get it in front of real users who are using it in production. Okay? So you need to figure out what we think the value is going to be and does the value we think we're going to get actually outweigh the risk, right? If the risk is too high for the value, perhaps we don't bother doing it. It's too dangerous, it's too risky for our product.\n\nAnother thing to understand is the size of the items on your backlog. How big are those things? Um, that can... I'm not going to tell you how to determine what big is, but I generally have a conversation with teams, uh, the people who are going to do the work, right? They are one of your primary audiences. Do they feel that they understand it enough that they can deliver it in a single sprint? That might be a question to ask. If they do understand it enough to deliver it in a single sprint, you're probably good to go. If they don't understand it, it could be either because it's too big or because there's not enough information or they need more questions answered to be able to understand it a little bit more. And that's where refinement comes in.\n\nSo we talked about risk, value, and size. And the last item is how we solve some of those problems is learning, right? Is there something that you need to learn, uh, by doing? Right? Remember Agile Manifesto: we learn more by doing. So maybe you can do, maybe you can try and build something small. Maybe you can, um, take on a little piece of that risk early on and try and do something in the product that hopefully alleviates that risk or at least you figure out more about that risk. That's product backlog management. You've got this overarching refinement. You need to refine this backlog to ready, and then everybody needs to understand it so that the team can deliver it and the stakeholders understand the value. Because if they don't understand the value, they're not going to turn up at the review, right?\n\nUm, so how are you able to do that? We have, uh, scrum.org have the new product backlog management course, which is specifically focused on this topic that takes you through a whole bunch of complimentary practices that can help you with that story. Uh, but there's also lots of different tools and techniques that we talk about in the product owner class, the advanced product owner class around that topic. Heck, even the professional scrum with user experience brings in that refinement story. And if you really want to get serious, then you probably want to bring flow mechanics into your story, as in have a Kanban strategy applied to whatever your process is for delivering, uh, your product and enable, um, the maximum throughput in your process while you're also focused on maximising the value. And that's an awesome combination, right? The ability to deliver and delivering the right thing. That's how you make awesome products.\n\nIf you find it hard to manage your product backlog and maximise the value that you're returning, my team at Naked Agility can help, or we can help you find somebody who can. Don't let these sorts of issues undermine your ability to deliver value. Don't have a poor quality, not understood product backlog. Use the links in the description to get some help as soon as you can."
  },
  {
    "id": "IqWvURjrJVs",
    "title": "Znaczenie znajomości terenu",
    "description": "Discover how understanding terrain enhances agility through Poland's unique mushroom foraging sport. Join us in exploring agile principles! 🍄✨",
    "captions": ""
  },
  {
    "id": "Ir8QiX7eAHU",
    "title": "The Key to a Kanban Strategy: Understanding WIP Limits",
    "description": "Discover how to optimise work flow with effective WIP limits! Learn critical factors for establishing them as a Kanban strategist. Watch now!",
    "captions": "One of the key components of creating a Kanban strategy is WIP limits. If you don't have WIP limits, it's definitely not a Kanban strategy that you have. So when you visualise your work, when you do that workshop where you figure out what are the columns, the states, the activities that happen for any piece of work that flows through our system, and you create those columns, you're going to have to decide what your WIP limit is in each of those areas. Coming up with a WIP limit is a little bit of an art, right? It's like coming up with what's the Goldilocks zone for this particular activity.\n\nI actually found out that I really fundamentally thought that Goldilocks and the Three Bears was a completely ubiquitous story. But I was working recently with a group in Romania, and they don't have Goldilocks and the Three Bears as a bedtime story. It's not a thing. So kind of what we're talking about, and actually this was the bit that resonated the best for them, was think of what they describe as the Goldilocks zone in planetary physics. I know I'm sounding like a nutball here, right? But bear with me.\n\nIn planets, when they talk about planets being in the Goldilocks zone, they mean it's between water freezing and water boiling, right? So you can have life when there's water, but you can't have life when it's steam. In general, that's where they—yes, I know that's possible—but let's say you've got that zone. If the water's frozen, it's probably very difficult to have life. If the water's steam, then it's very difficult to have life. So what is the zone within which it's just right? That's the Goldilocks zone. You can go look up the story, the fable, later.\n\nThe idea is that we need to figure out not just our WIP limit for the whole system, but our WIP limit for individual stages in the system. The WIP limit for the individual stages, if we create individual stages, will probably inform the WIP limit for the overall system, right? Because you just add them up, and that's the WIP limit for the whole system. \n\nSo, the ideal WIP limit, right? There is an ideal WIP limit. If everything is perfect, the ideal WIP limit is one. The most optimal WIP limit in flow is one single piece flow, right? But that only works when our system is perfect, when it operates exactly like we expect, in the timing we expect, when all of those things are absolutely perfect. \n\nThe WIP limit is one. The thing I usually use to visualise that is I do a version of the coin game with teams. If you've not done the coin game, it's a great exercise where you give a group of people 20 coins. They flip them all to heads, and then it's a batch size exercise, right? So they flip them all to heads, and then they have to flip them all to tails, pass to the next person, and they have to flip them all to tails, pass them to the next person. So you've got this simulation of a production line, right? Something happens in this stage, the next stage happens, something happens there, next stage.\n\nIn an ideal world, you just want one flip, the coin, move it on, flip the coin, move it on, flip the coin, move it on, and you'll have the maximum number of coins going in action at any point in time. Does that make sense? Right? If you've got a batch size of 20 and you've got 20 coins and you've got 10 people in a row, you've got one person working and nine people waiting all the time, the whole time. If you do a batch size of one, you've got 10 people working, and you'll get the fastest delivery of the first unit of work and the fastest delivery of all the units of work.\n\nOkay, but the world isn't made up of flipping coins, right? We're not—that's not what we're doing all day. We are writing code, we're solving problems, we're painting pictures, we're waiting on customers to reply. There's all sorts of things that make what we do a nonlinear thing, not a thing that just happens at once. So you're going to have to figure out for each of those columns what the most optimal WIP limit is based on your ability to keep things moving and the need to identify when there's problems.\n\nIf we make the WIP limit 100 in every column, it's going to be difficult to identify problems because we'll maybe never hit it. We'll never hit the WIP limit. We deliberately want to constrain the work to slightly less than we can do so that we create slack in the system that enables us to see more of what's going on, ask more interesting questions, and figure out do we need to increase this or reduce this one. Those are the types of discussions that we want to have.\n\nWhenever we run workshops where we run simulations around this, that's the kind of conversations that people have in the groups. Who should we create the WIP limit bigger? Yeah, but if we create the WIP limit bigger, then there'll be more stuff in here, and there'll be more pressure on this part of the system. The people in the groups are then able to visualise those things and see the impact of those things, which is the whole point of a Kanban strategy—that everybody in the system understands the system that you've created better, and it allows them all to have more rational, more interesting conversations about how the system goes together and how we might change it in order to improve it or attempt to improve it, and then the impact of those improvements. You're able to monitor them.\n\nThat is really picking WIP limits. Just make up some numbers at the start, pick stuff, and see what works. Increase them if they're too small, make them smaller if they're too big, and figure out where that optimal level is. If you're really searching for Martin, what would you recommend as our WIP limit? I would say in any stage, as a starting point, if you have to have a Martin says we should do it this way, if you have to have that, then pick one less than the number of people that you have performing an activity in that area. So if you have four people, pick three as your WIP limit and see how you go.\n\nIf you're struggling to create WIP limits so that you can see what's going on in your system, then we can help you. We provide world-class Kanban training from Pro Kan, as well as consulting and coaching for teams trying to implement Kanban strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and also have Kanban classes from Scrum.org."
  },
  {
    "id": "iRrEjx1mOgk",
    "title": "5/7/2020 1 - 01 - 14 PM",
    "description": "Discover the highlights of our latest event in this engaging video recap, showcasing key moments and insights from 5/7/2020. Don't miss it!",
    "captions": ""
  },
  {
    "id": "irSqFAJNJ9c",
    "title": "What does a poor scrum team look, act and feel like?",
    "description": "Discover the signs of a struggling Scrum team and learn how to harness the full potential of the Scrum framework for better productivity and success.",
    "captions": ""
  },
  {
    "id": "isdope3qkx4",
    "title": "11th April 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "isU2kPc5HFw",
    "title": "The Evolution of My Journey with Azure DevOps: Lessons and Insights",
    "description": "Explore Azure DevOps through the eyes of a seasoned consultant. Gain insights on migration, tools, and real-world applications to enhance your team's productivity!",
    "captions": "So I first encountered Azure DevOps back in 2006, so that's quite some time ago. It wasn't called Azure DevOps back then; it was Visual Studio Team Services back in the day. It's gone through many name changes since then, but effectively it's not the same service, but it's the same intent from the service. \n\nAzure DevOps is something that I've been using since then, and I was a lowly software engineer, plugging away building some products. Azure DevOps was really my route into DevOps, into helping teams become better at what they do, increase their capabilities, and use tools to help them better their capabilities. Team Foundation Server was intending to be that tool. I think it largely struggled to do anything outside of the Microsoft space until they moved much further on to Azure DevOps, the cloud version. \n\nThat early product was actually how I got my Microsoft MVP as well, which was building plugins and playing around with the APIs for TFS. I worked with a number of teams, some teams at Merrill Lynch and then some teams at Agreco. In both circumstances, while also doing the work, I helped those teams understand how to do automated builds, how to use the work item tracking, and how to link all the things together. I built some visualisation tools against the APIs, so I've really been plugging away at the Azure DevOps APIs since 2006. \n\nI know where a lot of the bodies are buried in the APIs, which is why when I think what happened, I got my MVP, I moved to the US, and I worked as a DevOps consultant almost exclusively in the Microsoft stack for three years. I was doing a lot of Azure DevOps work. We did a lot of API work; there were some migrations. There used to be this old tool that was totally crazy to work with. I'm trying to remember what it was called. Microsoft created it originally, but really it was just a big code base, and it allowed you to migrate data from TFS to other TFS. It had this kind of adapter model so that you could get from other systems into TFS; that was the idea. \n\nI think I'm the only one—I would hedge; I’m certainly the only one that published creating their own adapter for it. I created a migrator for Test Track Pro into TFS back in the day when Test Track Pro was even a thing, and maybe it is still a thing; I've just not heard about it in 15 or 20 years. That experience of creating that adapter really led me, when I arrived in the UK, to start my own business. One of my first gigs was with a company called Slumber, and Slumber was consolidating. They needed a lot of DevOps help to make the most out of the tools that they had. They were using the tools really well; it was just a little bit convoluted. \n\nThey wanted to take—they're the sort of organisation where everybody does everything, right? So there's every tool you can think of, every engineering process; they have everything. They wanted to consolidate down into using at least a single source control tool with work item tracking, and the tool they picked was TFS, Team Foundation Server. I helped them migrate something, and they had a standard process template, so I helped them migrate something like four to five hundred teams from what they were doing before into this new model and then move them from server to server. \n\nOriginally, I built a bunch of PowerShell scripts. That's when you're prototyping; scripting languages are the best way to run your thought processes. You're effectively writing down your thought process and then running it and saying, \"Yeah, that kind of works.\" If I select this bit, that kind of works, and if I do this, that kind of works. So it's a really good way to do some fast prototyping. It's incredibly error-prone and buggy as heck, but it's a good way to do those things. \n\nI built a bunch of PowerShell tools that I had, I think at one point, four or five people else in the organisation running those PowerShells to start migrating data around, changing process templates, moving data around in fields, all of those things. Then I started looking at, \"Well, really, this needs to be a little bit more solid; this needs to be a little bit more capable; it needs to be something that's a little bit more pluggable.\" I built the first version of the Azure DevOps migration tools. \n\nThere are kind of two ways to do migrations in Azure DevOps. One is really limited but really powerful; the other one is mine. The one that's really limited and really powerful is Microsoft's own migration tools. Obviously, they want as many people as possible to move into the cloud. They don't really want to be supporting and maintaining Team Foundation Server or Azure DevOps Server, the on-prem version of the product. \n\nThey want people to move up to the cloud, so they've built a tool that if you get onto almost the latest version of Azure DevOps on-prem, you can effectively package up your database, give it to them. There's a whole process for that, but package up your database. It's not as easy as it sounds. Package up your process, your database, give it to them, and they'll import it into Azure DevOps. \n\nSo if you're trying to get into Azure DevOps, the easiest, most high-fidelity, most productionised way to do that is to have Microsoft do it. They provide a bunch of tools. I've done this for a bunch of customers over the years, tons and tons of customers. The biggest one was the Slumber engagement, where I think it was 2.7 or 2.8 terabytes was the collection that we moved up to Azure DevOps. It was pretty ginormous. I think they became the third largest customer using Azure DevOps outside of Microsoft in the service. \n\nThat was a huge amount of work, but lots of smaller ones are much easier. I did one for a customer where we did it in about an hour. Their database was small enough; they were on the latest version; they had control of all the servers, the passwords, all the things. It was small enough package; we just sequenced it up, and then they looked at the result and went, \"Yep, that's good; let's go with that,\" and we turned off the on-prem version. \n\nI have personally done a whole bunch of migrations. I have a team that helps with that. We did one recently that was more complicated than it sounds. You're not just taking the Azure DevOps database and putting it in the cloud. Microsoft have to process it. You have to be on a version that's supported by that process, which is the absolute latest version and one service pack back. \n\nThis means that if you're sitting with a local Team Foundation Server and you're on TFS 2010, 2012, 2015, or whatever else was there, you have to upgrade it first, which means that you might need to upgrade SQL Server, you might need to upgrade the operating system, you might have to do all of those things. We did one recently for a customer that was TFS 2010, I think they were on 2010, all the way up to Azure DevOps. \n\nThere were three distinct migrations we had to do because you've got to upgrade from 2010 to 2015. Then you've got to go from 2015 to, I think you can get to the latest version from 2015 up to the latest version of TFS. Then you have to run and validate all the things that you need to do to go to the cloud. Then you can take your environment into the cloud, and that can go one of two ways. You can just take the database if it's small enough; if it's under 150 meg, you can just give them the database that pack, and it'll work. \n\nOtherwise, you have to set up an Azure environment; you have to install the SQL Server, upload data, and then get Microsoft to do stuff with it. That is the easiest, simplest, and most productionised route, but it's not what a lot of people can or want to do. Lots of companies have lots of circumstances that are outwith the bounds of that. They've got 100 teams, and only five teams want to go to the cloud. They've got other teams that can't for whatever reason, and that then adds complexity to that mix. \n\nThey've got teams that want to go just now and other teams that want to go later. Those are the most common ones for that push up into Azure DevOps. But also, you've got companies that sell products. If you've got five products in your company and one of those products is being sold, it's probably inside of the same TFS or Azure DevOps, and you want to move that piece over to somewhere else because you're selling it to somebody, and they're going to take the history and all of the stuff that goes along with it. \n\nMicrosoft provide no support for any of those scenarios. If you've got 50 projects and you want one, you've got projects across five collections, and you want one collection at one count. Or I've got, I don't know, I created one big massive project, and I really should have created two projects. These are things that are just not fundamentally supported by the tool or in any productionised way by Microsoft. \n\nWhat my tool that I created does is it allows you to migrate pieces of your whole thing to another location. We do our query-based, so it's predominantly focused on work items, although there's lots of other tools in there. It's like a Swiss Army knife, and people are adding new tools all the time. But the main tool that you use is work item migration because that's the thing that's just not out there. \n\nYou're basically saying, \"Here's a query; I want these work items, and I want them recreated over here,\" and the tool goes and recreates them. There are lots of limitations, lots of caveats, lots of things around that, but that's effectively the idea. I quite often get asked to help customers in a variety of different ways. Sometimes they want to do the migration if they've got loads of migrations to do. \n\nI've got people out there that have been using my tools for years, and it makes sense if you're going to use the tools. Big enterprise customers find quite often they need to move data from one place to another. They want to consolidate; they want to split, so they spin up a group of people, probably the administrators of Azure DevOps for their company, that they want to spin up on the tool and use the tool. \n\nI provide them with a bunch of support. Sometimes it's just support calls; sometimes it's training. They want to train some people on using the tool. But more often than not, with lots of organisations, it's a one-off thing. We're going here; we want this to happen, and we just want it to happen. We don't want to have to—we don't need that skill in-house. If it's not your core business, you're not doing it all the time, and you don't need it to support your core business, then that's when you outsource. \n\nI did a big migration recently of about 80,000 work items for a customer that wanted an audit trail. They've bought another company; they've not got their hands on all of that company's stuff yet. There's still all the legal stuff that has to happen in between, but they want a copy of all the work items and all the code so that their audit department can then go through all of that and validate and check and match things up. \n\nYes, this is the right thing, and all this is missing, and that's missing. I don't know what they're doing right, but they wanted that copy, so they don't want to mess around having their own people learn a tool and then do it, so we just did it for them. It probably took eight or nine days to migrate actual 24 hours running on it to migrate that number of work items because it's a lot. \n\nBut then after it's done, they have that copy in the new location, and they can do their own thing. Sometimes we do the migrations; sometimes we help support the migrations; sometimes we help train people, and sometimes we just consult. I quite often get calls from folks that just need some advice on how to do something in Azure DevOps. \n\nThese big infrastructure ideas that people have—the business decides they want to consolidate stuff, they want to split stuff, they want to move stuff around—like, what does that mean for us? What are our options? What are our capabilities? I quite often have discussions with customers on how that all goes together, and sometimes they use my services to help them, and sometimes they have enough information to go do it on their own, or it's easy enough that it's just following the docs from Microsoft. \n\nSo as both a user of Azure DevOps, which I have been for many years, although not so much anymore, I do a lot of my work in GitHub now. But as a user of Azure DevOps, I really appreciate the capabilities that it has. But then there are some gaps that you need somebody to fill, and sometimes you want to spin it up yourself, and sometimes you need to kind of get somebody in to help you out. So that's kind of my experience with Azure DevOps."
  },
  {
    "id": "iT7ZtgNJbT0",
    "title": "What was your best day as an Agile consultant?",
    "description": "Join Martin Hinshelwood as he shares his most impactful day as an agile consultant, highlighting the power of inspired teams in agile environments.",
    "captions": ""
  },
  {
    "id": "ItnQxg3Q4Fc",
    "title": "Why Is It So Important that Senior Leadership Teams are Engaged During an Agile Consulting Engagement?",
    "description": "Discover why senior leadership engagement is crucial for successful agile transformations. Join Martin Hinshelwood as he shares key insights!",
    "captions": ""
  },
  {
    "id": "ItvOiaC32Hs",
    "title": "7 signs of the agile apocalypse. Chaos",
    "description": "Discover the 7 signs of the #Agile apocalypse! Join Martin Hinshelwood as he explores why chaos can derail your team's success. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "IU_1dJw7xk4",
    "title": "How long does it take to transition from project management to Kanban?",
    "description": "Transform your project management approach! Discover how to seamlessly transition to Kanban, optimise workflows, and embrace agile methodologies.",
    "captions": "So the question is if you're working in a traditional project management world. I know everybody has qualms about the word traditional, but what people have always done in a traditional project management world, and you're I guess daunted by this idea of agile and the changes that need to happen in order to get there, then probably a Kanban strategy is a way that you can gain benefits over a longer period of time.\n\nSo what lots of teams and organisations get benefit from jumping to a Scrum process, right? It highlights where you've got problems. It very quickly identifies things in your organisation that inhibit the ability for you to move towards an agile process. But quite often, depending on the organisation, that can be too much too fast. You can end up with just bad Scrum. We're going to call everything with the agile terminology, use the Scrum terminology, but in actual fact, we're not actually going to make any changes to the way we do things.\n\nSo maybe a better approach for those types of organisations that don't have the willingness to change—and by the way, the best time to change the way you do things in an organisation is when your organisation has completely and utterly failed to deliver or achieve something. That's when people are most open to change. So that's where you might bring in a radically different process like Scrum. \n\nBut the advantage of a Kanban strategy is you start from where you are right now. A Kanban strategy does not require you to change the way anybody works. I'll say that again: a Kanban strategy, applying a Kanban strategy, creating and applying a Kanban strategy does not require anybody in your organisation to change the way they work right now. \n\nThat's really important to understand. Kanban is not a way of doing things; it's not a process in itself. It's observational. It observes your existing process and gives you data and information about how effective it is being. That's the purpose of a Kanban strategy. So you don't need to change the way you work; you just need to document how you work right now. That's your definition of workflow. You write down how you work right now, and then you need to collect some metrics.\n\nOnce you've collected those metrics, you're going to look at them and you're going to see if there are any patterns that allow you to identify things that need to change. That's it. So one person, you as the project manager in your organisation, can yourself implement parts of a Kanban strategy. You can at least collect the data, right? You can load it out of Jira or Azure DevOps into tools. You can pull it into a spreadsheet and figure this stuff out, right? \n\nSo you have the start date and the end date, the age of the work items. Because you get the start date and the end date, you get the cycle time, right? How long things take to go through the process. And then you can do some data analysis on that. You can start to plot it in a cycle time scatter plot and look for outliers. There's a number of graphs that you would definitely use within the context of Kanban, and each of those graphs are there to visualise the flow of work through your system.\n\nOnce you visualise the flow of work through your existing system that you've not changed, how everybody works, you'll then see things that you want to have a conversation about. It's actually quite startling how easy it is once you point out, once you do the graph, and somebody like myself, who's been trained to read the graphs and have read graphs from lots of teams, points at some things and says, \"What's this? Why is this group of things kind of like this?\" And then you're like, \"Oh yeah, I can see that too.\" \n\nIt's very easy to identify, at least initially, right? When we've not made any changes to the system, it's very easy to identify anomalies. It's going to be super obvious. You'll have things like lots of dots clumped together. You're like, \"What's that?\" Well, that was a release. Okay, well, is that the best way to do that? Or you've got all of these dots way up on your cycle time scatter plot because they took a really long time to complete. It's like, \"Why did these all take a long time to complete?\" \n\nWell, we've got to get the Architectural Review Board to approve this thing, and they only sit once every six months. Oh right, so you can only get architectural stuff approved once every six months. What happens if you need a change in between? Sorry, I'm using this example because I worked in this environment. What happens if you need a change in between? Well, you need to stop work, put it into the Architectural Review Board, and they meet every six months, so you need to wait. \n\nIt could take years to deliver a product because you need to make changes to it. Those types of things you probably already know some of them, right? You already know that some of those things in your organisation are broken. You know it. A Kanban strategy will give you the data to prove it. And if you can prove it, you can put it in front of somebody who can do something about it and say, \"Look at the data. I would like to run an experiment. Stuff's taking a really long time to complete. I think this is the problem. This data is telling me that this is the problem. I'd like to change this, and we can see if the data improves.\"\n\nYou just change your system. You just optimise your system. Keep doing that and you'll get to the most optimal system for the type of work that you're doing, which will be different for every team, every group, everybody, right? But that's how you make that transition. You need to understand how the system works in order to be able to make the change.\n\nSo how long would it take to transition from traditional project management to Kanban? As long as it takes, right? You optimise as much as you need at whatever speed you want, and that's up to you. If your current system of work is failing you, then you would benefit from creating and applying a Kanban strategy. Our professional Kanban trainers and consultants are ready to help. Don't wait. The sooner you start, the sooner you'll improve. Get in touch below."
  },
  {
    "id": "IXmOAB5e44w",
    "title": "Referral program. 20% of the course fee credited to your account.",
    "description": "Join our referral program and earn 20% of the course fee! Discover how you can benefit while helping others thrive in agile training.",
    "captions": ""
  },
  {
    "id": "Iy33x8E9JMQ",
    "title": "Dogma versus Empiricism in a consulting engagement",
    "description": "Explore the clash between dogma and empiricism in Agile consulting. Learn how to navigate challenges for a more effective team dynamic! #Agile #Scrum #Consulting",
    "captions": ""
  },
  {
    "id": "IZ-FlBbGaSY",
    "title": "Building a culture of Quality",
    "description": "Unlock the true potential of CI/CD! Join Martin Hinshelwood as he reveals best practices for Continuous Integration and Delivery to enhance quality and speed.",
    "captions": "If we want to improve the quality of our product and reduce risk, part of our automation story is going to be CI/CD pipelines. It's worth noting that most teams don't use CI/CD for CI/CD; they use it for an automated build. I see very few teams applying engineering excellence and doing CI/CD as it's intended to be done.\n\nJust to clarify a little bit, continuous integration is coupled with mainline branching. It's not integrated if it's not in the mainline with the rest of your code. So if you've got a CI, a continuous integration on a separate branch, that's not actually a CI; that's just a continuous build on your separate branch, which is great. Definitely have that, but we want continuous integration. We want to be continuously pulling things into the one true version so we have fewer and fewer integration problems. We have fewer and fewer other problems coming off that because we're having to support multiple versions of our product.\n\nIf you've got test-live in branches, you're just fundamentally doing it wrong. You might have an older product; I definitely don't judge the decisions that led to that in the past. You might have made that choice 20 years ago in your product, but you shouldn't be making that choice today. Dev-test-live with branches? No product anywhere should be making that choice today. We should be doing continuous integration and continuous delivery. Continuous integration is where you have mainline branching and things are continuously integrating into that mainline branch. Everything, all the work of all the engineers that are working on your product, are continuously integrated every day.\n\nGoogle is notorious for this one. They have one source control repository for the whole company. Every product everywhere in the company is on that one main line. That's a little bit extreme; that's a mono repo. But at least for a product, you want to have that mainline branching model where you're continuously integrating every day. You should not—I would object to a branch that's around for longer than a day. I'd strenuously object to a branch that's around for more than a couple of days. I'm not saying that they wouldn't happen; it's possible, but I strenuously object.\n\nWhere people are adding new things, adding new capability, branches shouldn't exist for very long. That's CI. Continuous integration, continuous delivery is when it hits the main line; it's going to production. Continuous delivery is not \"I'm continuously delivering to my test environment\"; it's \"I'm continuously delivering to production to real users.\" Now, you might use a ring-based deployment model where you're protecting and limiting the blast radius of any problems behind an audience. Perhaps it could be audience-based rings that enable you to have your high-risk customers in a later ring, so you find the problems first with lower-risk customers.\n\nBut continuous delivery—the delivery part in continuous delivery—is production. It should be real users really using your product. So if you're doing continuous delivery, you should be seeing every commit to the main repo or a particular branch. Let's call it a branch; it could be called main, could be called master, could be called HK, whatever it's going to be called, it ends up in production. That's where people continuously integrate. So you CI into that, and then you CD from there to production.\n\nMost teams and most organisations don't seem to do that. They say they're doing CI/CD, but they're just using the terminology and the tools that are part of it to do something else, which is just an automated build, which is also fine. You've got to have the right technology for the right thing. I recommend CI/CD; I recommend continuous integration, mainline branching, and continuous delivery into production.\n\nFor example, on products that I use, that I build, I might not use true CD. I think I'm almost there; I'm not quite there. I think it's a little bit too much risk for me because of my ability to test. But I continuously integrate to main, and it ships to production. I have CD on main; it ships to production as a preview, so the smaller number of users are controlling the blast radius. When I feel like the preview has enough telemetry to tell me that it's good, that I don't have a larger number of errors, I don't have people not being able to do the stuff that they're supposed to be able to do in the tool, when I have enough data, then I push the button and it rolls out to the next ring, which is everybody.\n\nSo I effectively have a two-ring system: a preview or CD system. Preview is a smaller subset of people that opt in to be using the preview version, and then everybody else. Sometimes, if somebody asks for a new thing, I'll get it into preview and I'll tell them it's in preview, and they can try it there and kick the tyres. I'll bring new stuff that's never been tried into preview; people will come and kick the tyres, and then it will only go to the rest of the world once it's been successful.\n\nThat's generally how Windows works; that's generally how Microsoft Teams works. Office 365—most of Microsoft products are now on a ring-based, audience-based deployment model, and that seems to be the most effective for services that you deliver to your customers. I think websites are a little bit different for commercial websites, but again, these are all things that we can talk about and figure out what the most effective model is. CD might not be the most effective model for you; CI might not be the most effective model. We might just want some automated builds.\n\nHaving the expertise to understand your product, understand its architecture, and understand what the business is trying to achieve with the product will help create that indication of how naked agility can support you in creating CI/CD or just some automation to enable you to be as effective as possible and increase your release frequency and reduce your cost of deployment."
  },
  {
    "id": "j-mPdGP7BiU",
    "title": "Mastering Product Development: From Assumptions to Hypotheses",
    "description": "Unlock the power of assumptions in product development! Learn to identify, validate, and test assumptions for data-driven decisions. A must-watch for product teams!",
    "captions": "In our new class, we will learn how to work with assumptions. So first, a very important point: we actually introduce assumption to our product development dictionary. One of the very important points we will learn is this moment of realisation: oh, we have made assumptions, and not one, not two, but many. \n\nSo what kind of assumptions are we making when developing products, when discussing potential product futures, when creating product backlog items? This is a very important aspect, but we are not only talking about this fact. Okay, the assumptions were made, but which of them need to be validated? Obviously, not every assumption requires validation. Some of them are more important, less important; there might be a crucial role in ordering our assumptions. So which should be validated first and why? We are going to cover that in this course.\n\nOkay, so first point: assumptions realisation, ordering, and choosing which one to start. The second one, when we work with assumptions, the next important topic is about hypothesis. So we will learn how to create hypotheses and how to test them. In this class, we will pay a lot, a lot of attention to using the right data that will help you verify your hypothesis. \n\nIn fact, we may realise that our product development is actually navigating around some kind of tree of different hypotheses to test. We will also discuss the topic of the importance of desired signal or evidence strength on our product development process. So when we test assumptions, when we talk about hypothesis-driven development, it's important to realise that there will never be 100% confidence. But what is your desired level of confidence? And based on that, how high do you want to be when it comes to confidence? \n\nWe will be talking about experiments that will help us test the hypothesis. So we will learn how to manage costs related to product development based on those experiments that we choose, and this will be aligned with desired signal strength and desired confidence level. \n\nAnother valuable outcome for us is learning how to analyse experiments, how to take what we got out of our experimentation journey, and how to use this data in the decision-making process. So we already talked that learning is important in this class. So think about it as a way of targeted learnings that will help in this decision-making and critical thinking. \n\nThanks to that, we want to avoid toxic love related to our ideas and to what customers told us. Instead, we will be equipped with a certain way of thinking. Maybe for some of us, it will be a new perspective on product development, and thanks to that perspective, we will be learning a lot about what to do, what not to do, and how to use those concepts to be effective in our product development."
  },
  {
    "id": "J3Z2xU5ditc",
    "title": "Scrum is like communism. It doesn't work. Myth 4",
    "description": "Unravel the myth that Agile means no planning! Discover Scrum's true essence and Microsoft's innovative approach in this insightful video. 📅🚀",
    "captions": ""
  },
  {
    "id": "J8J-5GycFsk",
    "title": "nkdAgility waiting 2 small",
    "description": "Join us as we explore the concept of 'nkdAgility' and its impact on efficiency. Discover how waiting can be minimised for optimal performance!",
    "captions": ""
  },
  {
    "id": "jCqRHt8LLgw",
    "title": "12th May 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "jCrXzgjxcEA",
    "title": "Kanban with Azure DevOps",
    "description": "Unlock Kanban's potential with Azure DevOps! Join Martin Hinshelwood for expert tips on enhancing workflow and collaboration in hybrid environments.",
    "captions": "Creating an effective Caman strategy is hard. In this world of hybrid work, we need to share our visualizations using digital tools. One such tool is Azure DevOps. Here, I'll discuss how you can use Azure DevOps to visualize your work as part of a Caman strategy.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for years.\n\nBefore we start, it's essential to understand why we need to use something like Azure Boards in order to manage our work. Since the pandemic, many teams have moved away from physical offices, and even when we're in a physical office, we're not all there at the same time. This means that there's no physical wall or meeting room that teams can use to present all of their work visually, where they can all see it. Digital tools for saving and presenting that work have really become more critical than ever.\n\nNow, there is way more to a Caman strategy than just a tool. A Caman strategy works best when applied to a stable system, one where we're all following the same rules. However, most of us don't work in environments like that. Each participant in the system typically makes choices based on their own internal system, one that they don't necessarily share with the rest of the team. \n\nWell, why don't we share it? I think it's a result of not realizing how important it is that we do share it. We don't realise how much impact those seemingly small choices make, like which item to pull or not and why, on the entire system. We've created a lot of local optimizations for our overall system that may have a negative impact on that larger system.\n\nSo, what do we do about it? Well, I recommend that you sit down with all of the participants that are going to be working on the work that goes through your system and have them work out what rules they want to use or come to an agreement on the choices that they're going to make. It doesn't need to be perfect; you'll have ample opportunity to change and adapt those rules as you discover the impact that it has on the work. But we need a place to get started, and really, you don't have to do all of that before you start with Caman. You can get started and then work through those problems with a rougher workflow, like just guessing whatever it is you work on just now. More details can be added later to start stabilising that system and make it more effective.\n\nBut let's leave that for now. For now, we're going to look at how we can create a Caman board for a typical software team and then how we can implement that in Azure DevOps. I'm going to show you how to manage the cards on the board, how to customize the cards so that you can see what's going on, and also how to customize the columns and perhaps swim lanes if you have the need for that, and then be able to see and visualize what's going on on your board and filter that board for the things you might need.\n\nSo, let's take a look at what's going on in Azure DevOps. I have an environment here; this is just my environment. I have a lovely org over here on the left; that's my learning environment, and I have a few projects that I've preset up with things that we can look at. So, let's look at a finished environment first, or at least the first stage, like we've set up our boards to be able to see what's going on. I'm going to click on the demo environment.\n\nSo, on the left-hand side, you'll see boards, and you'll see two things that are important: you'll see under boards you'll have boards and backlog. Those are the two main things that I would expect both Caman and Scrum teams to use when they're managing their work. So, I'm going to click on boards first, and here you'll see I have a pre-set board for this team. \n\nIn this view, you can see that I've got a number of different columns going on here, but the important thing to realise is that the states of the work items, the underlying work item states, have not been changed here when we've customized the columns. This means that multiple teams working inside of the same Azure DevOps project can have a different set of columns while maintaining the same states.\n\nLet's take a look at some of the work item states and how it applies to Caman, depending on the process that you've selected. So, here you can see an overlay with two things going on. Horizontally, you can see the states for the particular process that you might have selected. So, if your process for your work is based on the Agile process, on the Scrum process, or the CMMI process, it'll have these different states that you see here. \n\nI prefer the Scrum process because I believe it's the most generic, although I do make some changes to it. So, here's the Scrum process: we go from new to approved to committed to done. In the Agile process, which is the other most common one, people go from new to active, active to resolved, resolved to closed. But the vertical columns here, where you have proposed, in progress, resolved, and completed, give you an indication of how those states are going to be treated by Azure DevOps.\n\nUnder the covers, Azure DevOps has a whole bunch of Agile planning tools that have been applied to the system that has been created, and the fundamental basis upon which they work is that you have a proposed state. So, that's things that we're not working on yet. When things get added to the system, you'll see that the lead time timer starts, but the cycle time timer doesn't. \n\nInside of Azure DevOps, they specify cycle time as from when the developers start the work to when it's finished, and lead time to when it's added to the system to when it's finished. You can absolutely argue the validity of that. I would maybe prefer a more configurable option, but this is how it's configured currently inside of Azure DevOps. \n\nSo, if something's in the proposed state, the lead time timer started, but the cycle time timer's not. In the Agile template, you only have one state, which is new, which is in proposed, and then you have active and resolved, which are in progress states, and then you have one completed state called closed. That's where both the timers stop.\n\nOkay, so when it crosses this line, it gets marked as active or resolved. Sorry, when it crosses this line, the cycle time timer gets started. So, in this case, one of the reasons I prefer the Scrum process here is that by default, although you can absolutely add it to the Agile template, by default it has two states in proposed. You've got new; it's been added to the system. It might have been added by some random person in your organisation, so you don't necessarily want to have started the work. \n\nI usually use approved or some kind of second state to indicate that the person who manages that backlog, who is or this could be the team themselves, the team has agreed that they're probably going to do it. Right? So, that's where it's approved; we're going to work on it. That's why I would kind of like lead time to start there, but you can't have everything. \n\nThen in progress, I actually prefer just one state. I usually change it from committed to something else, like forecasted or just in progress. Right? New, approved, in progress, done. But I prefer one state so that the developers get the choice to split into however many columns that they want. Having an active and forced resolved state can limit the way you can configure the board, but also you can work it into the way you do things for sure. \n\nAnd then everything has a default closed state, so that's the kind of flow of work from Azure DevOps internals perspective. But we can configure that however we like on the board. So, you can kind of see here I'm going to try and show you what this looks like. \n\nSo, on this board, you'll notice that I have inventory, I have backlog, and I have discovery. When you look at the work items, they are new in all of those columns. Okay? So, they've not yet... This is the Scrum template, not the Scrum template, the Agile template. So, you'll notice that the items haven't been moved to a different state. \n\nAnd then in development, we have active, and then in validation, we have resolved, and in done, we have closed. Okay? So, this means that when work crosses this line here, that's when the timer starts on the lead time, but it has to cross this line here in this particular process to start the timer for cycle time, and all the timers stop at this line here. \n\nOkay? So, that allows us to implement a bunch of controls that we can use to kind of see what's going on and manage our work. So, this particular team has set up... We've got our inventory; this is stuff that's been added to the backlog that we may or may not do yet. So, that's like the back warehouse in our shop. \n\nAnd then we've got a backlog, which is the stuff that we're going to try and sell. We're going to do... has been moved to the front, and it's moved into that column. So, inventory is just a big list of stuff, and then when we decide we're going to do something, we've agreed to do it, whatever those reasons are, it ends up in the backlog. \n\nAnd things in the backlog are then options to be pulled into discovery. So, you could call this options. Right? So, I'm going to pull things... The team's going to pull things from here into discovery so they can put it anywhere they like in discovery. So, let me drag and drop that in there. Once it's in discovery, that column will change to discovery, but you'll note that the state has not changed. \n\nI'll show you how that works in a moment. So, once that is in this doing column, discovery doing, that's when we're going... The team's going to do all of that discovery or refinement work that they need to do to figure out what this thing is before they actually start it. Right? Before they actually start executing on creating this, and things may drop out of this space, right? Because we might do some analysis on this and figure out that it's not something we want to do. \n\nIt's either too costly or whatever reason. Here, we've got generating invoice reports that has been blocked. Perhaps it's been blocked because we're waiting for new information. We've got a request out to somebody else, but it currently is blocked. \n\nBut we've split this column into doing and done, so the doing column and the wait state column. We've done the work, and it's waiting for the next column to pull it in. When it crosses this line here from discovery to development, that's when this item is going to change state. So, if I bring this across, you'll notice it's currently set to new, and now it's going to be marked as active because we've crossed that line for the internals of Azure DevOps from one state to another state, even though we've got multiple columns. \n\nI'll show how that's configured soon. So, we've got that development column now. So, this is the team's going to work on it. We're going to work on it, and at some point, we're going to mark it as done, so it's now moved to the next column. \n\nSo, again, we've not changed the state; it's still active. So, if you're creating reports across multiple teams inside of the same project, you can still report on those states. You don't need to worry about the columns. Right? There's ways you can do that too, but you don't need to worry about the columns. \n\nSo now, it's development done. It's waiting for whoever does validation to pick it up. This could be last-minute checks by the developers who want to check that everything is... all the eyes are dotted and the tees are crossed before they say officially say it's done. They're going to check the work against the definition of done, against anything else they believe they need to do. \n\nWhatever it is they need to do in that particular stage, and then that item, when it moves across this line here, is going to move from active to resolved. You'll notice I've hit the whip limit, gone beyond it, but just for demo purposes, I'm okay with that. And then they're going to validate that it's in the resolved state. We believe, we as the team, believe the work has been done. \n\nWe're marking it as resolved. We're going to come back around, do a sanity check on that, and then move it into closed to say it's been finished. And there you go; we had a piece of work flow from left to right through our system, hopefully as effective as possible. \n\nNow, this team is generally, hopefully, when they're working on their checks, when they're viewing this board, is going to walk the board from right to left, ensuring that they've populated the board, that they've got it all set up. They can do those things here, and you can see I've got the blocked visualisation there highlighted to see what's going on.\n\nSo, how might you configure this? There's a number of things that you're going to want to configure to be able to set this up. So, I'm going to show you how to set up and manage the columns and lanes if you do want lanes. So, if I click configure board settings over here on the top right, you'll see that in here, I have a configuration for fields where I have bug and user story. \n\nSo, if I click on user story, you'll see that it's showing what fields are available for user story. So, I've added iteration path. I think I didn't unbug, so I can easily just add iteration path on here, and it will show up on the bug items as well. So, if I save that, you'll see that bug item change to include the iteration state as well. \n\nThere's iteration path there coming in. So, I can add additional fields if I have custom fields or something I want to show on there. It's definitely worth considering that the more fields you add, the bigger the card's going to be, the less you're going to be able to show on the screen. So, just consider that and have only the most important information surfaced here.\n\nYou can add style rules. Style rules enable you to change the look and feel of the work items. So, you might add... If I do a test rule, whatever it's called, and then I can change either the colour of the card or the colour of the title of the card. So, if I change the background colour of the card, let's say I'm going to change it to a kind of light blue, only if the changed date... Let's do change date is greater than, let's say today minus one. \n\nOkay, so if I save that, if I've got my... There we go. So, these items that I've moved today are going to show up today or yesterday, today minus one, are going to show up as these things have moved. Everything else has been static and hasn't moved. So, I can prove that just by bringing this one across, and you'll notice it changes colour immediately because it's been changed recently. \n\nSo, you can use that to highlight things that have moved recently or not. I can also... Not only can I do styles on the cards, you can have multiple styles if you want. Again, a kaleidoscope of colour removes the importance of colour, right? So, try and be careful with that. \n\nAnd here you can see I've got a tag, a blocked tag, that highlights a particular colour. So, in this case, a block tag highlighting red. You can add other tags as well, depending on what it is you want to look at too. On these cards, you can have annotations. So, if the sub-item of this is tasks or things linked to GitHub or tests, you can have them actually show up on the cards, and you can click on it, and it will drop down. \n\nI don't have any of those set up just now, just for that view, but then we get to customizing the columns themselves on the board. So, if I click on columns, you'll see that I have the same columns that I had set up before. The first one, inventory, has to be in the new, and the last one, done, has to be in that closed because those are the start and end states for the work items. \n\nRight? So, you must have at least one start state and at least one end state. Everything else in the middle you can configure. So, for example, I added backlog but kept it in new, and I set the whip limit to 15. So, you can see that's 11 out of 15 is in the backlog at the moment. \n\nAnd I can also choose to split the column between doing and done. And then there's a... I don't really like the name of this; this is the definition of workflow field. So, let's say in order for things to move from backlog into discovery, there might be some things that need to be true. \n\nSo, I could create some markdown that says inventory to backlog, I'm going to do that inventory to backlog rule one, rule two. And then on the next one, I'm actually just going to copy that so that I can be quick and call that backlog to discovery. And what are the rules that are going to be applied? \n\nAnd if I save that now, you'll see at the top the backlog has a little... If you hover over it, it will show you that markdown information there. So, you can add some of your definition to workflow. You can add links in here as well, so I guess it might link out to your wiki page or wherever you've got additional information for these rules for your definition of workflow. You could even store the whole thing out there and just link it so you can go and click those items. \n\nSo, that's quite useful in the columns. As you go through, you can see discovery, which is a split column here, doing and done. All I need you to do is take the box again. You've got whip limit; you've got what state it's in. This one is new. Development is where we switch to active again; it's split, and validation is set to resolved, and done is set to closed. \n\nSo, those are really those column configurations. It's not as... There's not as many configurations as I might like in the long run, but it does give me that ability to have those visual boards and have work flow from left to right across those boards in a way that allows me to create those visualisations that I'm looking for. \n\nYou can add swim lanes, so if you had different classes of service for work flowing across this board, then you could create different lanes for this. It's not something I normally would do, but let's call this expedite, and we're going to make it neon red because expedite is really important. \n\nBut the default is not going to be expedite. If I create that, you'll see I'll have this expedite lane going across the top, and I could pull a piece of work in and move it along, and it just counts to the usual whip. I don't think there's a whip you can add for the expedite lane. Is there? Where can I maybe set some rules for things that have to be in the expedite lane versus in the default lane, which can't have rules? \n\nI don't know; I need to explore what criteria does there. It's not something that I've actually used. So, there we go. You can see I've been able to configure the board. I've been able to set up an expedite lane. I've been able to set up my columns, and I've now got a configured Caman board. \n\nThere are some additional things that you might want to do. For example, if I switched to backlog, I've added some additional columns here to the backlog. So, as well as having state, I've also added board column and board column done. So, you can see a little bit more about what's going on on the other board. \n\nSo, if you're the product owner or you're the team lead or whatever, people, the whole team, right, looking at the order of the backlog, you're able to manage it from there pretty effectively. \n\nIf you're struggling to understand your systems or how work flows through these systems, Naked Agility can help or help you find somebody who can help you. We specialise in helping companies that build software get better at building software, and being able to analyse the flow of work through your existing system is critical to figuring out what to improve. \n\nDon't wait; get help as soon as possible to minimise that waste. Get in touch."
  },
  {
    "id": "jcs-2G99Rrw",
    "title": "Top 4 Rookie Mistakes in Azure DevOps",
    "description": "Discover the top 4 rookie mistakes in Azure DevOps that can derail your projects! Learn to simplify your approach and enhance your workflow. 🚀✨",
    "captions": "I work with many enterprise organisations that use Azure DevOps, and many of them do things that either reduce the effectiveness of the features or break them entirely. I asked Dan Helm, the principal product manager for Azure DevOps, what the top four issues were, and this is the result.\n\nHi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years. \n\nAzure DevOps, in its current incarnation, was built for agile teams by agile teams. The Azure DevOps product team transitioned to Agile around 2013, and they moved almost overnight from a two-year delivery schedule to one of three weeks. As of the time I recorded this video, they have completed 235 sprints and delivered 235 times to production in this new model. \n\nThis was not always the case, and many of the tools, features, and capabilities which persist from the Visual Studio Team System days of the product are much more relevant for companies that are not using agile practices. When Microsoft created Team Foundation Server back in 2006, the intent was to create a connected experience for all of the tools and capabilities that an engineering team would use. The idea was to create a holistic connected experience from ideation all the way through to delivery, with full traceability of how and why things were added. \n\nHowever, back in 2006, Microsoft found this to be at odds with the organisation's general outlook, and they ended up with a very Microsoft technology-only focused system. Fast forward to 2011 and the move to the cloud, and suddenly those limitations were much more prominent and needed to be fixed. There's a fantastic paper from Buck Hodges, director of engineering for Azure DevOps, on this, and I'll put a link in the comments below. \n\nAs Microsoft transformed TFS to become a cloud product, it also addressed many of the Microsoft-centric issues that held back its adoption. The tool started to reflect the original dream, and the idea of 1ES, or one engineering system, was born. The intent of 1ES, as with the original team system, was to reduce the complexity of product delivery by ensuring that everybody working on a product knew where their stuff was: work items, builds, release environments, and more. \n\nToday, Azure DevOps supports any technology from any stack and has enabled that 1ES dream. However, as with all products, users use them in many ways that were not envisaged by their creators. But with something as complicated as Azure DevOps, there are a number of things that users do that go against the very intent and paradigms of the tool itself. \n\nI'll show you the top four issues that give the Azure DevOps team palpitations. \n\nSo the first item that has the Azure DevOps product team pulling their hair out is same-level hierarchy. Creating a hierarchy of work items that happen to be exactly the same level. So let's take a look at what that looks like. I'm going to show a simple example, and then we'll go make a customisation and show a more complicated example. \n\nSo here I have my product backlog. I've got my product backlog items. I have under here a task, which is a sub-item. So I can quite easily go in here and add a new item. I'm going to call it a child, and I'm going to add a task. Click okay. You can see I suck at that, and now I have two tasks underneath this item. But what I've done over here is I have added product backlog items as children of product backlog items. \n\nSo it is represented on this board, and I should be able to... can I still move this around? Oh, I can still move this around here. But when I go to try and grab one of these items, I can order it inside of the context. Oh, and there I've managed to break it. This is why this is a problem. \n\nWork item 4052C can't be ordered because it's appearing in the same category. So if I hit refresh, it'll have gone back to where it was. There we go. So I was just trying to order within this category, and it jumped out, and that was the problem. If I go and try and order it over here, I will immediately get that error. That's the one I was going to show you. \n\nAnd now I can't do anything with that until I refresh, and it will go back underneath because it has a parent-child relationship. You can't order that hierarchy."
  },
  {
    "id": "jFU_4xtHzng",
    "title": "Why do you think that 4 half days is a better format than 2 full days?",
    "description": "Discover why Martin Hinshelwood advocates for 4 half days of Scrum training over 2 full days, enhancing learning in agile environments.",
    "captions": ""
  },
  {
    "id": "JGQ5zW6F6Uc",
    "title": "3 steps developers must follow if the product owner is incompetent",
    "description": "Struggling with an ineffective product owner? Discover 3 essential steps for developers to navigate this challenge and enhance team dynamics! 🌟🛠️",
    "captions": ""
  },
  {
    "id": "jhpy9Hy8uEw",
    "title": "Why did you choose the Scrum.Org track rather than the Scrum Alliance track?",
    "description": "Explore why Scrum.org is the preferred choice for Scrum training over Scrum Alliance. Uncover insights from an insider's journey to effective certification!",
    "captions": ""
  },
  {
    "id": "Jkw4sMe6h-w",
    "title": "How is Agile Leadership different to traditional management?",
    "description": "Discover how Agile Leadership differs from traditional management with Joanna Plaskonka. Explore the need for adaptive leadership in complex environments!",
    "captions": ""
  },
  {
    "id": "jKXc6hByR_k",
    "title": "Your Partner in On Time, On Budget Delivery",
    "description": "Unlock your team's potential! Join Martin Hinshelwood as he reveals how to maximise ROI through high-quality work and agile practices.",
    "captions": "If you want to build teams and an organisation that can deliver the highest possible value for the investment that you're taking, maximise that return on investment for your business, then Naked Agility can help you in advising and coaching at any level in your organisation. Be it team members who are actually doing the work in the engineering practices that they're doing, all the way up through to you as a CTO or CEO trying to understand hypothesis-driven practices, trying to understand which features should we bring in, which features should we not, how do we budget across our engineering practices organisation so that we maximise a return on investment and maximise the care within which the people doing the work take of their time and the spend that they are making, which is hugely important.\n\nUnderstanding that context enables the highest quality of work. Right, we want, if we're building software products, regardless of whether that's our main business or whether it's a side hustle for our business, right, it's an enabler for our business. We want to build products of the highest possible quality. Every product that we build, every line of code that is written by the people in our teams is an organisational asset. Right, these are things that provide, it's like buying a building, it's infrastructure. Right, it's stuff that you've built, that you've invested in, that you get a return on investment on, that you get a continuous return on. Are they of the highest quality?\n\nIf you bought a building as a leadership in an organisation, you're going to do a lot of due diligence, and the due diligence for that is well known. When it's software, there's a lot of opacity. There's the stuff the magic wizards do that build the software, and we don't often understand all of the ramifications of that. So we need to have some technical expertise on hand, whether it be in-house or bringing somebody in that helps us understand some of those relationships and some of those things that connect to each other in order to maximise the value that our business is able to bring to market."
  },
  {
    "id": "jmU91ClcSqA",
    "title": "What is Project Management?",
    "description": "Discover the essence of project management in this short video! Learn how it evolved from manufacturing to enhance teamwork and efficiency. #agile #scrum",
    "captions": ""
  },
  {
    "id": "JNJerYuU30E",
    "title": "Most Influential Person in Agile - Jerónimo Palacios",
    "description": "Discover how Jerónimo Palacios, a key figure in Agile, has influenced careers in this insightful short by Martin Hinshelwood. #Agile #Scrum #Leadership",
    "captions": ""
  },
  {
    "id": "JqVrh-g-0f8",
    "title": "What Does a Poor Product Backlog Look Like?",
    "description": "Discover the pitfalls of a poor product backlog in this quick video with Martin Hinshelwood. Learn what to avoid for effective agile project management! #shorts",
    "captions": ""
  },
  {
    "id": "JTYCRehkN5U",
    "title": "The Power of Technical Excellence in Agile Development",
    "description": "Unlock the secrets of Agile success! Discover how prioritising technical excellence over speed can transform your software development and deliver exceptional value.",
    "captions": "Technical excellence is one of the most important concepts when you're building products. Scrum talks about this in that you should always have a usable working product at the end of every iteration. Agile talks about this. The idea is that in order to mitigate risk, we need to create a usable working product.\n\nIn the more linear model, where we know lots of stuff up front, let's say we were going to build 300 houses on a construction site. We know a lot up front; we know exactly what designs of the houses we're going to have. We've probably had to get planning permission, right? So a lot of that is locked in for what it is we're going to do. We know how much materials, how much wood, how much plaster. We know when we're going to do certain things, or mostly when, right? There's some variant, but not a lot of variance. So when there's low variance, we mitigate risk by doing more planning. We plan up front, we create a bunch of documents around that planning. We create a list of risks that might happen. If this risk happens, here's the mitigating action we're going to have. Here's the percentage likelihood that that risk is going to happen. We'll maintain that data over time.\n\nWe create this whole body of material and planning and dates and things around that story, and that's great when variance is low. That allows us to mitigate the risk because if you're going to spend, I don't know, £20 million building this area of houses, then you need to plan for that. But even then, you're going to take a little bit of an agile approach, right? You're not going to build all the houses at once and then sell them all at once. You're going to build a few houses and sell them, and a few houses and sell them because you're testing the market and you're seeing. You might then even need to apply for different planning permission to change your mind. So there's still a lot of variance in that story.\n\nI do get that for those that are in that industry, but in general, old school, you're kind of making those decisions up front. But when we have high variance, which, as I just noted, can happen in the building industry as well, we can't mitigate risk by writing everything down and creating a story for every single thing that might maybe happen because every single thing that might maybe happen is going to change every day. Think of the multiverse, right? You've got all those decision points that happen, and every time you make a decision and go down a new path, a whole different set of decision points and problem points and issue points occur. So every time you make one of those decisions, every time you make one of those little changes, you would need to rebuild all of that body of asset, and it's just not reasonable to do that. It puts too much of an overhead on people, time, everything, and you end up with that story of the plan not being able to keep up with the reality of the world. Therefore, we then make bad decisions because we can't really see what's going on, and so we're not mitigating risk at all.\n\nBut in that high variance world, we mitigate risk by creating a usable working product on a regular cadence. That's how we mitigate the risk. We deliver something; we create that thing that the customer is looking for, and we offer it to them for inspection so they can look at it and see, \"Yeah, yeah, yeah, you're doing the right thing,\" or, \"Oh, I don't understand why you made those decisions.\" Great, that's a great conversation.\n\nIn order to be able to have a usable working product at the end of every iteration, I do want to point out this is not a pipe dream; this is not an ideal world thing. I want you to all go look up the US Department of Defense article on detecting agile. It was an article, a paper that was sent out to every procurement officer in the Air Force to let them know what they need to look for when they're working with vendors, right? When they're buying stuff from vendors so that they can make better purchasing decisions. This vendor is telling me that they're agile. How do I know that they're agile? I'm a layman; I don't necessarily understand agile. I don't necessarily understand that new world. How do I ensure that I'm buying the right thing? This article lays out a whole bunch of questions that enable that person to at least start getting some insight.\n\nOne of the key questions, and this is like the first one for leadership, was, \"Do you have a working version of your product every iteration, including the first, that gets into the hands of real users?\" Real users, not UAT, not fake users, not test environments, real users every iteration, including the first. So if you're doing two-week iterations, then at the end of the first two weeks, you should have a usable working product. That's how we mitigate risk in the agile and scrum space. That's how we ensure that when people give us money, we're actually delivering something that will be valuable for them.\n\nThat's really hard if our software, our product, the quality of our product is terrible. Can you imagine trying, even if you were building houses, right? And there are broken joists, there are things not attached properly, there are leaky pipes, there's flooding. We've not built the house properly, and we're trying to hand that house over to the customer and have the customer come in and look at it, and the customer's like, \"Well, this is terrible; I'm not going to buy this.\" That's where engineering excellence comes in; that's where technical excellence comes in. We want to build things that actually work. We want to deliver less stuff up front, right? In the fictional, you know, that old phrase, \"80% of the work takes 20% of the time, and the last 20% takes 80% of the time.\" That is because our quality was bad; that's because we didn't have technical excellence in what it was that we were doing.\n\nSo we got that 80% of the functionality we've done; it looks like it works, but actually, behind the scenes, it's a total mess, spaghetti, absolute garbage. The customer comes along and tries to use it, and they're like, \"Oh, we need to fix this; we need to fix that,\" and you end up patching, right? You're getting out the sticky tape and super glue and trying to figure out how do we patch this together. Then they're like, \"Oh, I don't like the way this works.\" You can't rebuild it because it's part of the fundamental architecture, so you have to add another layer of obfuscation on top to make it look like it works the way the customer wanted it to work. But actually, behind the scenes, it just works the way the developers originally built it to work, and now we've got extra complexity. We've got something that is more difficult to maintain, more difficult to understand, and you can imagine that over time that builds up on top, and you end up with massive amounts of layers that inhibit your ability to deliver value.\n\nThat's something that I would quantify with some data. I do a lot of presentations on how the Azure DevOps team, that's the team at Microsoft that built the Azure DevOps product, they, in 2012, were technically a waterfall team. They were delivering once every two years to production, and they moved almost overnight towards continuous delivery and three-week iterations, right? So they were delivering usable working product every three weeks. They were shipping to production every three weeks, and they've delivered every three weeks for the past, I don't know, 26 three-week sprints.\n\nBack in 2012, with 650 people, they were delivering around 24 features to production each year. Part of the reason that that number is quite low, 24 features, is that one, the features were really big, but also the difficulty in adding the features and interacting with the codebase in order to get the product to do the things that you wanted it to do was really difficult because you had all those little layers of things that had built on top. This doesn't quite work the way it was supposed to. I think Azure DevOps was originally Team Foundation Server, if you remember those days, and Team Foundation Server was originally a bunch of other products that were native inside of Microsoft. They had source control in-house, source control products; they had in-house work item tracking products; they had in-house other stuff, and that was kind of cobbled together in order to create the first version of Team Foundation Server.\n\nNow, I'm sure lots of stuff was rewritten, but you've got that fundamental architectural mindset, right? Even though you're rewriting something, you're taking something else. So actually, the genetics of that product is quite long, quite old. Then you get to that point where you're switching from needing two years to get a piece of functionality working to needing three weeks to get a piece of functionality working. So they moved to this new model, and in 2012, they were delivering about 24 features to production. They then focused absolutely the majority of their time—maybe going majority is probably too much; their primary focus was on paying back technical debt, building in technical excellence, solving those effectiveness problems of moving to that new model, both in their process and in the product as well. By 2018, they were delivering 280 features to production each year with the same number of people.\n\nSo from 24 features to production, 24 experiments, 24 new features to try and see if the customer likes to 280 new features, the customer experiments to try things that might work and might help the customer. Now, yes, those things were smaller, right? But they were also delivered faster. That focus on technical excellence enables us to do that. If we don't have technical excellence in the way we do things, then it just doesn't work.\n\nI did a recent interview with Dan Helm, who runs Azure Boards, the work item tracking part of the system. When he was quizzed on the definition of done and how that works, he didn't really have a solid answer, and that's because technical excellence is so baked into the way they do everything at that level. All the engineers know what it is they need to do, what level of quality is required. They know all of those things; they don't need to focus on it, right? It's just the way they do business. Technical excellence, engineering quality is just the norm; it's not an exception, which means that they can then focus on delivering value to the customer. They've reduced risk, and they can focus on delivering value. They can focus on those other things. That's what technical excellence brings for product management, for product leadership, is the ability for them to stop focusing on fighting fires, on fixing bugs, on struggling with complexity, on being frustrated that they can't get certain features done because it's just too hard to do within the architecture of the product. You start focusing on the art of the possible: what is it we can do? Where are we going? What are we trying to achieve? You can then let go of those things because you're no longer having to ride that quality.\n\nThat's a terrible analogy, but you're no longer having to hold on for dear life while this product bucks around. You're now in the groove; it's smooth. We're adding features, we're building capabilities, we're building an awesome product. That's part of that story of mitigating risk, building technical excellence. There's a myth as well; there's a huge myth in the software industry that it's okay to sacrifice some quality in order to go faster and meet the market need. There's a recent article, I think it was a Harvard Business Review article; it might not have been, but it might have been a Forbes article. There are some studies done around that idea of what happens when we cut quality in order to go faster, right? And what's the trade-offs involved in that? The ultimate outcome was that it's not a valid trade-off. The impact of that reduction in quality is much higher than the benefit you get from being able to go fast over the short term.\n\nSo that a cruel, let's call it two things: there's undone work, stuff that you need to do in order for your product to run in production that hasn't been done yet, right? That's that 80/20 thing; that's where that pit comes from. Then there's technical debt, which is shortcuts, deliberate shortcuts that we make in order to do things in a suboptimal way within the product. That's technical debt, right? Both of those things added together don't scale linearly; it's an exponential curve. That's where that Azure DevOps team was at the start. They were at the top of that exponential curve, only delivering 24 features to production each year. But in focusing almost religiously, zealot-like, on paying back that technical debt, getting rid of all of that undone work, and bringing that curve back down to a manageable level, right? And beyond, getting it towards zero. We want to have as high quality, effective a product as possible. They actually, in one year, nearly tripled the number of features delivered to production, even though their main focus was on, \"Let's do it right; let's pay back the technical debt.\" They actually delivered more stuff.\n\nSo that goes: reduced quality to go fast is a losing proposition. It always has been a losing proposition. Definitely, what you want to do is focus on technical excellence. If you don't have a definition of done, create one. If your organisation doesn't have a definition of done, which it should, your organisation should be thinking about, from a technical excellence perspective, what is the minimum level of quality we as a business require in order to have a product that is fit for purpose? Right? Protects our brand, our business as a whole. This product is representing our brand or however that works, representing your brand. Protecting the people that are using it and protecting the people, your employees and your developers, right? To make sure that everything's done right. You don't want, like, think about Boeing, right? The reduction in quality is just now seeping out. What else do you need in order to have a viable product in your market, in your situation, right? So different levels for different markets; that's the business's requirement for done.\n\nWe're not talking about features. There's a big conflation, I think, between features being feature complete and quality. Engineering excellence is about quality; it's not about having the features, right? So let's take that, put that aside. What we're building, we're going to take that aside, and we're going to focus on the how we're building it. Do we have the level of quality required to meet compliance? Do we have the level of quality required to meet the testing level that we want? Do we have the amount of telemetry in there to see what's going on? All of those things are part of that definition of done, which has nothing to do with the features. We're only focusing on the quality of the product, and that enshrines your engineering excellence.\n\nSo if the organisation doesn't have that standard, it's the developers, the scrum team, or the developers that are charged with creating one that is relevant for your product and significant enough that you're going to be able to create a usable working product every sprint. The reason you have a more usable working product is to mitigate that risk and build out your engineering excellence. So don't get left behind; don't get bogged down in the quagmire of engineering inferiority. Focus on engineering excellence. Build the best product you can and maximise the value to your customers."
  },
  {
    "id": "Juonckoiyx0",
    "title": "What should be top of mind when a Scrum team prepare for a Sprint review?",
    "description": "Unlock effective stakeholder engagement in Scrum Sprint reviews! Discover strategies to align your team’s efforts for better project outcomes. 📈🤝",
    "captions": ""
  },
  {
    "id": "JVZzJZ5q0Hw",
    "title": "What is a sprint goal?",
    "description": "Unlock the secrets of sprint planning! Discover common pitfalls in agility and learn to empower your team for swift market responses. 🚀📈",
    "captions": ""
  },
  {
    "id": "jXk1_Iiam_M",
    "title": "The Power of Immersive Learning: Elevating Scrum Mastery in Your Organization",
    "description": "Unlock your team's potential with immersive Scrum training! Discover practical insights and transform learning for effective team development. 🌟🚀",
    "captions": ""
  },
  {
    "id": "JzAbvkFxVzs",
    "title": "The Pitfalls of Routine Agile Questions: Avoiding the Ghosts of Agile Past",
    "description": "Explore the balance between pragmatism and dogmatism in Agile. Discover real stories that highlight the importance of flexibility for effective team management!",
    "captions": "One of the ghosts of agile past is dogma. We've all run into those dogmatic folks that try and pursue an idea irrelevant of the data and the experience of the people around them. We need to kick those folks to the curb. I usually, I can be— not dogmatic is the wrong word— almost 100% of the time when I'm working with teams, I'm pragmatic. But I can also be pedantic if I'm in a training situation. Whatever it is I'm training, if I'm teaching you that thing, I'm going to be specific about what things are called and what they mean based on what they're called, whether that's Scrum or continuous delivery or C or whatever it is. There are specific meanings for the nouns that have been defined within the context of the thing that we're learning, and we need to understand what they are, what the impact is, and how they engage with each other in the real world with teams.\n\nWe need to be pragmatic. We need to understand that people call things different things than we're expecting. They have different knowledge and skills; they've come from different places where they use things in different ways, and we need to work within the bounds of what it is we've got. So one of those ghosts of agile past is dogma. Oh, there's been some dogmatic things I've seen. The worst one was told to me by a good friend and my boss, Steven Borg, about a Scrum Master who had just been fired from their job in Washington State because they had been adamant that if the team weren't standing up during the daily standup, then they weren't doing Scrum, and you have to be standing up in order to do Scrum. But that team had specifically decided that they wanted to sit down because they had a disabled team member in a wheelchair, and they didn't want to be towering over that person. \n\nThat is the right thing. That is the very definition of a Scrum team, of being respectful to each other, of openness, respect, and courage to do the things that they think are valuable. And one of those was, \"Let's all sit down so that we can be at the same level and work together.\" This dogmatic Scrum Master got themselves fired for cause. I think anyone who is dogmatic— and dogmatic is where, see, dogma has this relationship to religion. It's really about believing something in spite of the evidence to the contrary. That's what I think about dogma, right? So that team was told that if they're not standing up, they're not agile, when in fact they were demonstrating agility and sitting down, and the other person was just following. \n\nAnd it's not even the letter of the law because there's no stand-up in Scrum, right? But the letter of their understanding of the law in order to just enforce that rather than working with people within the context and learning more. And that's where dogma differs from just being pedantic, right? Being pedantic is sometimes valuable within the context of training, but being pragmatic is the way most Scrum Masters and agile coaches should be. Don't be dogmatic; be pragmatic and try and get rid of one of those ghosts of agile past.\n\nIf you are being haunted by this ghost of agile past, we can help you exercise it or help you find a coach, consultant, or trainer who can. Don't let this phantom undermine the effectiveness of your value delivery, and the longer it lingers, the more it will damage your team's progress. So email me at martink@agility.com about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "JzUUQ4R9SCk",
    "title": "Free Workshop 2 - Introduction to Scrum & Empiricism",
    "description": "Join Martin Hinshelwood for an interactive workshop on Scrum & Empiricism. Discover Scrum essentials, values, and engage in discussions. Register now!",
    "captions": ""
  },
  {
    "id": "k4F9DSE99Ok",
    "title": "Famine! 7 Harbingers agile apocalypse. But shorter!",
    "description": "Discover how Famine, one of the 7 signs of the agile apocalypse, can hinder your team's success. Learn to avoid feedback starvation!",
    "captions": ""
  },
  {
    "id": "KAqCTOIB4hk",
    "title": "Unlocking the Power of Immersive Learning for Product Management",
    "description": "Unlock real change in product development! Discover how immersive learning and outcome-based assignments empower teams to apply knowledge effectively.",
    "captions": "So the new immersive learning program for that we apply to pretty much everything we do now is designed around this idea of not just imparting knowledge, right? Not just going through some content, but it's an immersive format where we have the content delivered over a much longer period of time. So we have a structured program over a much longer period of time, and it includes some learning. Right? We want to learn some new things, some new tools, some new techniques, some new philosophies, some new ideas. \n\nBut at the end of each of those learning sessions, even though we've done some exercises, perhaps practical exercises demonstrating how it might work within the context of the learning, right? We use liberating structures to help create smaller groups and have people figure out how to use the knowledge. But it's still within the context of that group of people, right? It's not out in your real organisation; it's not out with your real product and your real teams and your real customers. \n\nSo at the end of each kind of learning session where we learn something new, we have an assignment, and that is an outcome-based assignment. The idea is that for each assignment, we're trying to achieve something. So, for example, I just had the third session of the product management mentor program for a company in Sri Lanka and their product managers. We talked about value with the product managers. \n\nThe learning piece, the new information I was providing for them was, \"Here's how you can think about value. Here's how you can understand value. Here's how you can potentially measure value.\" So we talked about evidence-based management. We talked about the value pyramid, then we talked about evidence-based management, and we talked about other metrics and stories around that. \n\nEven people, because we were talking about metrics, they started to bring up other questions around, you know, answering that old question, \"When will it be done?\" So we talked a little bit about just a little bit about probabilistic forecasting and flow metrics as well, right? So they drove the learning content as well as me having a plan for what I would like them to understand. \n\nAnd then the outcome-based assignment, the assignment that they've got is to go apply that to their organisation. Like, what metrics go out into your organisation and figure out what metrics do you currently use in your organisation? How, what do you collect? How do you use them, and how does it impact on decision-making, right? That's the kind of core part of their assignment is to go understand what it is the company has and what the company's doing. \n\nBut then, in addition to that, perhaps they should start a conversation about, \"Do we have the right metrics? Is there a simpler way to collect the thing we're trying to achieve? Can we optimise this?\" and start having those conversations. \n\nSo the outcome from that that I'm trying to achieve is that they, as a group—so this was about 16 product managers for one company—they, as a group, either in small groups go off and have those conversations, as individuals have those conversations, or they can do it all together. I leave it up to them. But when they come back and we're doing our facilitated reflections, the idea that I'm trying to achieve is that they understand more about what it is that their product does and how does it work and what they're trying to achieve with it because they've looked at how they're measuring their success. \n\nThey've looked at how they're measuring their capability to deliver the product, and then they're thinking about whether those are the right things they should be looking at, right? Because a lot of the time in organisations, we're looking at the wrong things. We're looking at the wrong data. We perhaps have vanity metrics—metrics that look great, you know, like velocity or story points—but don't actually add any value to the conversation. \n\nYou know, we've managed to get our original estimate and our actuals within, you know, 10% of each other. We're awesome! Yeah, but what value does that PR provide to the organisation? Does it actually provide any greater degree of predictability? Does it actually help the organisation understand when things will be done? \n\nAnd the answer is no. But trying to figure out and have those conversations, so they're starting to have those conversations within the organisation, not just within themselves but with other people within the organisation. So they're starting that conversation generally in the organisation. \n\nAnd then when we come back for the next session, which is usually a week later, a week or two weeks later, depending on what it is we're doing, when we come back for that reflective session, they're explaining what it is they did, what they managed to learn, what they discovered in their organisation as they were doing those things. \n\nAnd really sharing with not just with each other, but I can help provide them with potential directions that they could take if things weren't working for them or if things were working well, what might be possible next steps that they could try. \n\nAnd hopefully, over time, they're able to figure out a lot of those things themselves, right? When you start from a position of not necessarily understanding something, not doing it, not knowing that you have to do it, and not knowing what you're trying to achieve with it, you need that kind of facilitated reflection to start thinking about what value it brings. \n\nAs you start understanding the value, the outcome that we're trying to achieve and the value it provides to you and your business, you start getting more engaged with that topic. You start poking at it and pulling at threads and trying to figure that out. \n\nSo this idea of immersive learning, right? Immersive, the immersive programme. So we apply it both to our training classes and to our mentorship programmes that you have. \n\nThese outcomes will hopefully enable changes within your organisation. So there's no guarantees for anything, right? Absolutely no guarantees for anything. Your organisation could completely ignore everything you're trying to do. But I find that this type of engagement has the best chance of impact because the participants are able to go start that conversation and then come back, and we can all share ideas on why did that not work? Why did people ignore you? Why did they dismiss what it was that you said? \n\nI've had product managers come back, and they've been told, \"Stay in your lane, right? This is above your pay grade. You know, you need to stay out of this,\" when in fact it's something that somebody who is a product manager should be heavily involved in and heavily engaged in. Where do the requirements come from, right? \n\nSo each of those assignments is designed to be a catalyst for change within the organisation through conversation and discussion within that organisation. And what we want to be able to do is enable the teams and people within the organisation to be able to become more effective, right? By having those conversations, discussing those things, hopefully, we'll even make small changes or at least plant the seeds for changes and then start them growing over multiple sessions, right? \n\nBecause we come back around on similar topics to reinforce them, and that should enable teams and people within the organisation to become more effective and be able to focus more effectively on the goals that they're trying to achieve and hopefully have better outcomes for their team, for the people, for the organisation, and for the business."
  },
  {
    "id": "kEywzkMhWl0",
    "title": "One critical skill for a Scrum Master and why?",
    "description": "Discover the one essential skill every Scrum Master must master for success in Agile! Join Martin Hinshelwood in this quick, insightful #shorts video.",
    "captions": ""
  },
  {
    "id": "KHcSWD2tV6M",
    "title": "Silence - 7 signs of the agile apocalypse. But shorter!",
    "description": "Discover the two types of silence in agile: one brings peace, the other signals impending disaster. Join Martin Hinshelwood in this insightful exploration!",
    "captions": ""
  },
  {
    "id": "KhKFVRcdbGo",
    "title": "NKD Agility. Your Partner in Cost Effective Software Development",
    "description": "Transform your organisation's value delivery with Naked Agility. Discover strategies for engineering excellence and cost-effective software development.",
    "captions": "Naked Agility helps organisations create a culture of engineering excellence. I struggle with the idea of creating culture; culture is just what is within the organisation. But what we can help you do is think of culture as the shadow on the wall. You need to change the shape of the thing in order to change the shadow on the wall, and Naked Agility can help you understand your current system of delivering value in order to measure the things that make an impact on where you want to go and what you want to achieve. \n\nIn order to create the highest value optimisation that we can have within your context, we do that by monitoring the system, identifying what your system is, and defining that system of delivering value. Then we create or help you create metrics and understanding and transparency of that system so that you can see what's going on and make better decisions that enable you to get to the outcomes that you're trying to achieve. \n\nThese outcomes could be reducing cost or maximising value. I would go for maximising value, to be honest. This idea of technical leadership and engineering excellence within the context of building software products is that overall ethos of understanding your system, measuring it so you can see what's going on, and then making substantive changes to that system to see whether you're able to optimise the goals and outcomes that you're trying to achieve. \n\nThose are all things that we can help you do. We can help you control your costs and achieve technical leadership with Naked Agility. Contact me today to get started on your journey."
  },
  {
    "id": "KhP_e26OSKs",
    "title": " shorts 5 things you would teach a productowner apprentice. Part 3",
    "description": "Join Martin Hinshelwood in Part 3 as he shares essential lessons for aspiring product owners. Discover key insights to boost your agile journey! #shorts",
    "captions": "One of the key issues I see in organisations is the great difficulty that product owners, especially new product owners, find in getting your stakeholders to turn up for your Sprint reviews. Right? And oftentimes it's hard, even if they do turn up, to get them to provide you with feedback. Right? You ask them for feedback and all you can hear is tumbleweeds rolling through the desert. Right? You're trying to engage them and they're just not getting there. \n\nAnd that's, to me, a marketing issue. They don't understand the value of what you're showing them. They're not emotionally engaged in what you're showing them. If they were emotionally engaged, they'd be desperate to sneak into that discussion and provide that feedback, provide you with more information. And that is part of marketing."
  },
  {
    "id": "ki7fpThJiPw",
    "title": "Innovation does not need to cost a lot of money!",
    "description": "Discover how affordable innovation can thrive! Learn how Scrum enables rapid prototyping without breaking the bank in this insightful video.",
    "captions": ""
  },
  {
    "id": "KjSRjkK6OL0",
    "title": "What Does an Ineffective Scrum Master's Day Look Like?",
    "description": "Discover the pitfalls of an ineffective scrum master in this insightful short video by Martin Hinshelwood. Learn what to avoid for agile success! #scrum #agile",
    "captions": ""
  },
  {
    "id": "klBiNFvxuy0",
    "title": "What is the most common Aha moment people have in a scrum course?",
    "description": "Discover the common Aha moments in scrum courses that transform understanding and application of agile principles for effective teamwork and innovation.",
    "captions": ""
  },
  {
    "id": "kOgKt8w_hWY",
    "title": "Live Event - An Enterprise Evolution that Shows that You Can Too",
    "description": "Join us for a transformative live event showcasing enterprise evolution and inspiring you to embrace change in your own journey. Don't miss out!",
    "captions": ""
  },
  {
    "id": "kOj-O99mUZE",
    "title": "Overview of the 'scaling with portfolio Kanban' course",
    "description": "Unlock organisational efficiency with our \"Applying Scaling Portfolio Kanban\" course! Learn to manage project portfolios effectively and enhance value delivery.",
    "captions": "The applying scaling portfolio cbank class is really about how do we look at our system no longer at the team level but how do we look at our system at the organisation level at the programme level. Um, and what how how do we then understand, analyse the work and create effective strategies for enabling that flow of portfolio items through our system to increase the amount of value that we deliver for our products to increase predictability so that we can have a better understanding of which things are likely to be successful, which things we need to cut our losses on, um, which things need to be changed drastically in order to result in that value creation.\n\nAnd so it really focuses at for heads of departments, so agile coaches, project managers, development leads, high-level product owners, scrum masters and product managers that are trying to deliver lots of things, um, that may be competing things into production. Um, and they need to increase the flow through the system. Right, we want to deliver um more stuff more quickly. We want to get faster and more predictable um at delivery and those are all things that we're going to talk about in the applying scaled portfolio cbank class.\n\nSo this course will help um leaders in organisations understand the current flow through their system and ask more interesting questions about what they can do differently to improve the flow and predictability through the system. Um, so whatever your system is at that level, how do you understand what is going on in portfolio and increase that flow of delivery of work for the business and increased predictability?\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. Um, we also have our immersive and traditional public classes on our website and would love to hear from you."
  },
  {
    "id": "kORUKHu-64A",
    "title": "Scrum is like communism, it doesn't work. Myth 5.",
    "description": "Uncover the truth about Scrum governance! Join Martin as he debunks myths and reveals the balance between flexibility and compliance in product development. 🚀",
    "captions": ""
  },
  {
    "id": "KRC89A7RtrM",
    "title": "Some of the features of Team Web Access are not available to you in TFS 2013",
    "description": "Discover why some Team Web Access features are missing in TFS 2013 and learn how to unlock them in this informative video!",
    "captions": ""
  },
  {
    "id": "ks38bwDTVfM",
    "title": "What are 3 things you would recommend for a scrum team who are struggling to get work completed?",
    "description": "Master Sprint planning with expert tips on defining 'done', avoiding overload, and managing technical debt for a more agile team! 🚀 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "kT9sB1jIz0U",
    "title": "Why I love hierarchies of competence",
    "description": "Discover why Martin Hinshelwood prefers hierarchies of competence over control, empowering experts to drive success in agile environments. #shorts #agile",
    "captions": ""
  },
  {
    "id": "kTszGsXPLXY",
    "title": "Getting started with Kanban.",
    "description": "Discover how to effortlessly launch a Kanban pilot in your organisation, tackle common challenges, and leverage metrics for workflow improvement!",
    "captions": "So how easy is it to get started with Caman? To have a pilot, to try something, it's super easy. Pick a team, apply a Caman strategy. It's really that easy. Sometimes it's difficult to convince people. People behave how they're measured, so normally it's the traditional metrics and measures within the organisation that prevent you from doing some of these things. But there are tools out there that can help. Most folks today are probably using either JIRA or Azure DevOps to manage their work, since most of us work from home quite a lot of the time, right? So we don't have the boards on the wall anymore; we don't have the opportunity for that.\n\nUsing JIRA and Azure DevOps, get access to some of the data analytics, look at some of the data, look at the Caman data, look at the graphs, and see what's going on in your current system. That's see what's going on, and then get together and run a workshop. Run a workshop on defining your definition of workflow, defining how the way it is you work just now. Start to have those conversations, but don't think—absolutely do not think—you can have a two-hour workshop and then you're done. That two-hour workshop is just a start for starting people thinking about how they work because most people don't really understand how they work. They don't understand how they work because they just do it. They just do it the way they do it. They've never had to write it down; they've never had to discuss it with each other. \n\nYou start having very interesting conversations with the team. That arc of conversations kind of needs to play out, right, in order to get to consensus of this is the way we agree how we work. Once you've got that agreement, you're doing Caman. But you can just start with the metrics, right? Sometimes using metrics to kind of drive people's behaviours can be super valuable. So if you started recording the cycle time from when work starts to when it finishes in the system and just start looking at that data—how long does work take on average to go through the system? How long does an individual item take to go through the system? \n\nThen you can look at something like a cycle time scatter plot and look for outliers. This is something that you actually don't need any buy-in from anybody in the team or anybody in the organisation to do. Load the current data from Azure DevOps or JIRA into a tool that lets you visualise the Caman metrics and look at what's going on. Start asking more interesting questions during your meetings and events that you have with the team. When you see those outliers, that piece of work that took, you know, we do two-week sprints, and there's a piece of work that took 430 days to complete, right? Ask that question at the retro: why did this take 430 days? What could we have done differently? \n\nThat's asking more and using the data to ask more interesting questions. As you start asking those more interesting questions, hopefully somebody on your team or in your group or a leader will ask, \"How do you know? How did you see this? How did you spot these things?\" You can start introducing little pieces of Caman, saying, \"I'm using this cycle time scatter plot. It's showing that all of these items are above the 95th percentile; these are the outliers. So I'm asking questions about these and why are they like that, and how do they go together?\" \n\nOh, that's really cool! Is there any more data like that? Well, yes, there is. You can start having those conversations. So I think it's very easy to start using Caman in the organisation. All it takes is any individual on the team to start analysing the data and looking and suggesting optimisations for the team, trying to build some credibility so that you can start having discussions about the definition of workflow. You can do it ninja, right? You can say, \"Well, how do we pick?\" You know, doing the retrospective, \"I'm interested in how we all pick the next piece of work we're going to do.\" \n\nOh, well, I do this, and I do that, and I do the other thing. Start pulling on those threads. Just start pulling on the threads. So ultimately, how easy is it to create a Caman pilot in your organisation? Super easy. Just do it. It just needs one person to start looking at the data, one person to start asking more interesting questions. If your current system of work is failing you, then you would benefit from creating and applying a Caman strategy. Our professional Caman trainers and consultants are ready to help. Don't wait; the sooner you start, the sooner you'll improve. Get in touch below."
  },
  {
    "id": "kVt5KP9dg8Q",
    "title": "Detecting Agile BS: Lessons from the Department of Defense",
    "description": "Is your development ecosystem truly Agile? Discover insights from the DoD and learn to eliminate bottlenecks for seamless, innovative delivery! 🚀",
    "captions": "The final question for asking leadership within the organization is going to be a stickler. I see this in organization after organization being a difficult problem to discuss, and that is: is the full ecosystem of your project agile programming teams followed by linear bureaucratic deployment a failure? How many of you out there listening to this are working within organizations where you're able to continuously deliver to production, where there is no human intervention required between the developer submitting the pull request, being approved, and getting all the way to production? How many of you work in that sort of environment where there are no bureaucratic things in between you and production? There may be tests between you and production; it may take time for your product to roll out because it has to go through a set of automated, standardized checks, perhaps compliance things. \n\nI do work with a team that makes firmware for pacemakers, and you better believe they have a lot of compliance they have to meet. Their software, after they create their usable working item to ship, needs to run a gauntlet of external tests and validations, but they expect all of them to pass because they've done all the things to ensure that it does. So, it's unusual for anything in that story to be a failure that they have to have manual processes, right? That little bit of bureaucracy in their way, but only to protect people's lives. It's the absolute minimum needed to ensure that we protect people's lives. \n\nHowever, for most systems that we work with, we want to be delivering high enough quality to our business that we're able to remove a lot of those traditional bureaucratic points in that story. For example, user acceptance testing. If you have user acceptance testing in your business, it's because it's a value centre. If your customer insists on doing user acceptance testing when you give them product, it's because it's a value centre for them. You give them product, and they find problems. Therefore, UAT has added value for them. Why are they finding those problems? They're finding those problems because the quality of the product that you're giving them is not high enough to pass the bar that they're expecting and that they're paying you for. \n\nIf it was high enough, then their UAT wouldn't find anything and would become a cost centre, and then that's a conversation about eliminating cost. If it's never finding an issue with your product, it's of no value to them to do it because your product is high enough quality. You should all be striving to have a high enough quality product that you don't need additional checks and validations. If you need to have something that somebody else wants to see as part of your process, bake it into your definition of done. Bake it into the way you build software so quality is so high you don't even have to worry about it. You can continuously ship to production. \n\nIf your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then you would probably—I probably wouldn't consider that you're already in the agile space, right? You're not already agile. You might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as yes, we do this, this is how things work here, then we're still lacking. We're still trying. We're still working towards being agile. \n\nNow, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, \"Well, you guys suck, you're not agile,\" because you're not doing this. That's not how we work towards success. \n\nBut I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organization. How many of these six questions are you able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being agile BS?"
  },
  {
    "id": "KvZbBwzxSu4",
    "title": "The Strategic Imperative: Empowering Teams with Vision, Goals, and Direction",
    "description": "Unlock your team's potential! Discover how a shared vision and clear goals drive organisational success and empower informed decision-making. Watch now!",
    "captions": "Most organisations really struggle to enable the people that are doing the work in their organisation to understand where they're going and what they're trying to achieve. I remember working with an organisation in the US. This is just an example. Probably about 80% of the... no, must be more like 90%. This is anecdotal evidence from me consulting with organisations. Probably 90% plus of organisations, teams, groups that I work with have no idea what value means to their business. They have no idea what the strategic direction of their organisation is, and they have no idea what the current goal is for their organisation. \n\nCan you imagine that you're trying to do work, trying to decide what to build, trying to decide what direction to go, and you've no idea what that direction is? That's like being dropped in a field in the middle of nowhere and told to get to the nearest village, and you have no idea what direction that village is. You're just going to have to come up with a search pattern, and you're going to have to go try and search. Whereas what you really need is a map and a compass. That's what those things are, right? That is what this idea of vision and value is for an organisation. It's the map and the compass. Where are we going? How are we going to get there? Are we going in the right direction? How do we measure how we're going in the right direction? \n\nThat's why I talk about evidence-based management, right? How do we measure we're being more successful than before we made that decision? That's why I talk about hypothesis-driven engineering practices. How do we ensure that the ideas that we have actually have a valid story to them? Are we making the difference that we thought we were going to make with the investment we thought we were going to do? \n\nAnd that's why it's so important for senior management and leaders to grow their product management and product ownership capabilities in their organisation to understand how important that story is for organisations to have. Not just to have a goal and a vision, right, but for it to be articulated in a way that every single person in your organisation understands what that goal and what that vision is, and how the work they do every day contributes to it. Because if the work they do every day doesn't contribute to what it is your business is trying to achieve, then you probably shouldn't be doing it. \n\nAnd if we don't know what direction we're going, how do we know where even the big things that we're working on are supporting that goal and vision that we're trying to achieve? You need to have a North Star. You need to understand as a business what you are trying to achieve and be able to communicate that to everybody in your organisation in a way that makes sense to them. It doesn't matter if it makes sense to you, right? It has to make sense to them because they're the ones who are doing the work. They're the ones who are making the decisions. Every person in your organisation is making lots of little micro-decisions every day within the context of whatever it is they've been hired to do. \n\nRight? So software engineers are making engineering decisions. Architects are making architectural decisions. Project managers are making project decisions. Delivery managers are making delivery decisions. Every single day, they're not going to go ask you whether they're making the right decision or not. In order for them to be able to understand whether their decision is a good decision or not, right? Let's say they just have two options. You never have two options; you have like 50 options. But let's say you've got two options. And depending on the future, one is right and one is wrong. Maybe they're both right, but one could be right, one could be wrong. We don't know yet; it depends on the future. \n\nBut if I am making that decision and I understand more about the context, I understand more about the impact that this choice is going to make on the future, I can perhaps make a better choice. If I don't understand, I'm just going to randomly pick whichever one's my favourite, right? Because that's what people do. What do I think, based on the limited knowledge I have, is the best thing I can do? \n\nSo if you look at something like David Marquet's \"Turn the Ship Around,\" right? It talks about intent-based leadership. What do you intend as a business? How do you communicate that? Does everybody understand your intent? Because if they don't understand your intent, they're going to make bad decisions. You want them to make good decisions because they're going to make the decisions. Because in order for you to make the decisions, you have to understand everything that they understand. \n\nAnd you're hiring incredibly technical people these days, right? In the old days of big textile factories, management and leadership could make better decisions than the people on the shop floor because the people on the shop floor were largely an uneducated workforce. And you could maybe talk... even the foremen were probably not highly educated. They had anecdotal knowledge, right? They didn't understand the theory; they just understood the mechanisms of what's happening on the floor. \n\nYou needed to go up to management levels to get people to understand what it is we're actually trying to achieve as the business. What's the thing? So they didn't make any of the decisions at the bottom, but they weren't doing highly technical work that required lots of decisions. When you're doing simple things, when you're doing... let's say when you're doing complicated things, you can document them into simplicity, right? That's probably a good way... it's a terrible way to describe it, but anyway, you can take a complicated thing, you can write a bunch of documentation, create a bunch of rules, create a bunch of \"if this happens, then this happens,\" and you can provide standard operating procedures, right? \n\nSo you can provide those for people, and they can just follow them, and we're going to have good outcomes, right? Because by following that standard operating procedure, we're going to have the same outcomes every time. But in the world of complexity, when we are dealing with surprises, and surprises can be good or bad surprises and opportunities, right? Those vary too much, and we can't create a standard operating procedure because we will perhaps not be able to maximise the value that we create because we're just following the standard operating procedure. \n\nAnd lots of big organisations definitely fall into that trap of they have a SOP for everything. This is how we do things here. This is our bureaucracy, our red tape, or whatever you call it locally. And it inhibits the ability of the people in your organisation to make better decisions than the person who decided on the standard operating procedure, which may have been 10 years ago in a different market, in a different part of the business, for a different context. And now it's applied to everybody and everything equally across the organisation. \n\nAnd in some cases, it's a good decision; in other cases, it's a really bad decision. We want to make more right decisions and less wrong decisions, and that means everybody in your organisation has to understand what it is you're trying to achieve. And in order for them to do that, you as the business, you as leaders and management within that business, need to grow your understanding of how you communicate and engage with everybody in your organisation to ensure that they understand what you're trying to achieve and what direction they're going. \n\nAnd that means you can't just go install OKRs and have everything be perfect. You can't just write something in your vision statement and have everybody just follow it. They need to understand. Understanding is not a Boolean proposition. It's not something that you can standard operating bureaucrat your way into. It needs to be something that is personal, that is based on empathy, that is based on engagement with people. And for that, that's why we have a product owner. That's why we have product ownership capabilities. And in order to maximise the value that your organisation creates, you're going to have to help everybody understand what it is you're trying to achieve."
  },
  {
    "id": "KX1xViey_BA",
    "title": "Quotes: In the past the man has been first; in the future the system must be first. Frederick Winslow Taylor",
    "description": "Explore Frederick Taylor's insight on prioritising systems over individuals in management. Join Martin Hinshelwood as he unpacks this shift in thinking. #shorts",
    "captions": ""
  },
  {
    "id": "kXhJrisYofU",
    "title": "Agile Budgeting for Predictable Costs",
    "description": "Discover how Beyond Budgeting transforms financial management for agile teams, enabling flexibility and value-driven decisions in dynamic markets.",
    "captions": "In traditional budgeting, we take all, we spend a bunch of time once per year and have been a little bit factious but have a whole bunch of people in our organisation fight over how much money is going to be allocated to their pot, right? And then that's their pot for the year. They know that if they don't spend it, they lose it, right? If you allocate a million dollars to a particular project and they only use 500,000, next year you're going to be thinking of giving them 500,000, and it's going to be very hard for them to fight for a million, even if that's just the normal ebb and flow of what it is we're working on. \n\nIf something doesn't fit within, like we spend such a long time building the budget and balancing it, right? Like a, like a, like one I've seen, the budget that countries have, it's this massive, massive, massive book. We end up with not obviously as big as that because we don't have as many things, but a big book of here's what the budget is for the year. The problem is that five minutes after we've ratified the budget, that we put our stamp on it and said, \"Yep, that's our budget for the year,\" the market changes, the state of the product changes, ideas change. \n\nSo if somebody comes up with an idea that's not in the budget for this year, right? But the market opportunity is in a couple of weeks, we have enough time to build it, but we don't have any budget, right? That's maybe small enough that we can, there's discretionary funding, but let's say it was six months' worth of work, so it's a massive effort, massive endeavour, but huge, huge, huge payoffs. Then we'd probably do something, right? But where's that balance in your organisation? That level, that scale of the payoff versus the cost. We have the money; we have to go find where's that biting point and how much do we lose? How much value in the market do we lose because lots of things just don't quite hit that biting point because we're doing yearly budgets? \n\nSo there's a bunch of things around Beyond Budgeting, which is how do we re-do budgets in order to be more effective? But effectively, the result that you want for your organisation is that you can fund the things that make sense at the time they make sense, right? So in the agile world, we're getting working product in front of our customers as frequently as we can, right? So depending on what it is you're building, that timescale might change. The manifesto says from a few weeks to a few months, right? Scrum talks about 30 days. 30 days is the maximum amount of time between getting things in front of your customers. \n\nIf you look at the Detecting Agile BS paper from the US Department of Defense, they talk about every iteration, including the first, getting your product in front of real customers. So not just to UAT, not just merely test users, but to real production users. So you're going to production every iteration. If you're doing that, if you're getting to production every iteration, then that's your pivot point, right? It's not a yearly pivot point figuring out what we're going to do, but it's a much smaller pivot point. \n\nSo instead of allocating all the money at a single yearly point, we want to be ebbing and flowing. As you know, this project reaches a dead end, there's not much more value to be had, so we're not going to continue it. We're not going to do more sprints; we're not going to do more iterations at the moment. We're going to move it into maintenance mode, which changes its cost profile. And for other things, there's a new initiative. Some folks have come up with a great idea. Let's fund that. \n\nSo you're effectively looking at more of a venture capitalist or an entrepreneur-style budgeting model in that you're not allocating all the funding to projects upfront. You're allocating, you have a pool of finance available, like how much can we spend? You should know that on a regular basis. What's our capability? And then we want to spend as little as possible to get the maximum value, and that ebb and flow needs to happen. \n\nThe difficulty in the traditional model is I had a customer recently who were doing big things. It's manufacturing, and they're making big things, big expensive things. And they had a machine that was faulty. Well, okay, it wasn't faulty; it was just getting old. It was starting to make mistakes. It was creating less effective parts than the product needed, and they kept using it. The person who ran the machine wrote the business case for getting a new machine and started passing it up the chain. They did all the due diligence they needed to do, and it kept going up in the organisation because I think it was a 10 or 2 million spend. Therefore, it had to go fairly high in the organisation to get approval. \n\nIt got to somebody who looked at it and said, \"That's not on my budget for this year.\" No. And that, that's not in its budget for this year, no. It cost the company billions of dollars in recall calls to recall the product and resolve the issues that resulted from this machine that could have been replaced for 10 million dollars, and it cost billions. So that's why we need to do something different. \n\nThe bit that you don't see, like that's an obvious one, right? That's a catalyst for change because, oh my goodness me, we just had this huge cost. Why did we have it? Because of this 10 million dollars we didn't spend. Well, let's spend the 10 million. But the bit you don't see is your unrealised value. If you think of in evidence-based management at the top of the curve in your market value of your product, you've got unrealised value on one side and value on the other. \n\nSo you've got value that's in your product, your current increment, and then you've got unrealised value, which should be reflected in your backlog. But there's more unrealised value than is actually in your backlog, right? We want to be continually adapting that unrealised value as the market shifts, as opportunities arise, as things change in the world. And it's very difficult to do that within the bounds of a traditional yearly budget cycle. \n\nSo we need to adapt our yearly budget cycle into the context of we're not doing yearly projects anymore. We're building products, and a product has a budget, and they can allocate it however they like. Budgets for products tend to look like n number of people, right? The most, usually the most expensive thing, especially when we're building software, is the people. So this particular product has the budget to support 100 people a year on it. That's their budget cycle. And then within that budget cycle, they're deciding how they allocate it, what features they allocate to. \n\nWithin that context, that can be a kind of halfway where your organisation might still be doing yearly budgets, but you're able to adapt it to the product cycle. But there's more you can do. Take a look at Beyond Budgeting."
  },
  {
    "id": "KXvd_oyLe3Q",
    "title": "The Crucible of Learning: Transforming Organizational Effectiveness Through DevOps",
    "description": "Discover how DevOps consulting tackles technical debt and complex architectures, leading to improved efficiency and streamlined integration for clients.",
    "captions": "So when customers engage with us, they're quite often in a place where they've identified a problem themselves. They don't call a DevOps consulting service randomly; they have some kind of problem that they've identified and they want help figuring it out and what's the next thing to do.\n\nProbably the biggest engagement I saw was with a really large organisation in the oil and gas world. They had a product that was, I think, $50,000 a licence for this product. It's a desktop product, and the main problem that they had was that what they thought their main problem was and what actually the main problem was might be different things. This is, I'm thinking from retrospection, right, because I've been through it. One of the main problems that they had was that they had 90 teams in 13 locations in nine different countries working on this product. Each of those teams had their own long-term branch that they worked on, so things would diverge. They could diverge for quite some time; it could be as much as a year. They were trying to mitigate that with an application of force. That's probably the way I would think about it. They tried to solve the problem with an application of force.\n\nSo what they did was they spun up a DevOps team, right? A dedicated DevOps team. Here are our DevOps engineers; they're in this central area. Some of you have already spotted the problem. They can't change what all of these teams are doing, but they have to figure out how they solved the problem of wanting continuous delivery. They wanted to have a daily build of their product; that was their goal. So they ended up creating a bunch of infrastructure to allow them to do that and managing that infrastructure. They would manage it, right? The teams didn't have to do anything, and if the teams changed something, that was their problem to go fix.\n\nYou had this team, I think it was eight or nine people, but I think it was eight or nine people on this team, and their whole job was building this product. In order to do that, they ended up building a system that facilitated about 11,000 build executions a day. That's 1.2 million build executions a year, and that was just to have a working product every day. They would have these temporary branches where they brought the code together and automated merging of code from all of these different branches. All of those different teams—these 90 teams—were all on different source control systems, different not only systems but platforms as well. They might have had 10 teams on Git, 10 teams on Team Foundation Version Control, another 10 teams on Subversion, and another 10 teams doing something else.\n\nSo they all had different capabilities, different branching capabilities, different merging capabilities, and their build system, their build engine, had to go reach out to all of these systems and pull together a version of the code and then build it to be able to create this unified version of the product. It was insanely complicated, insanely complicated and super expensive. I think in order for a developer to work on the product on their workstation, in fact, to run it in production as well, you had to have like 100 cores. I can't remember exactly what, but it was 128 GB RAM, lots and lots and lots of cores—24-core machine type of thing. It was just obscene, the speed of the machine required because it was a massive complicated product, and you couldn't just build parts of it. You had to build the whole thing to make sure it worked—the whole platform and all the things that were built on top of it.\n\nIt was just hugely unwieldy. So we did a DevOps assessment, a state of DevOps assessment for them. We identified those key areas: everybody's on different source control systems, everybody's doing everything differently. They had some limitations because I think there were 13 different funding routes for this product, so they didn't have full control of the whole thing. But what we were able to do was, over a number of years—because it's a really big product, a really big organisation—I think there were something like 600 to 700 people working on it in different locations, and they weren't in the same reporting structure. You can't just tell them to do stuff.\n\nIt took four years to get everything aligned into a single source control system, right? So that we could do one build out of this source control system and result in one version of the product. Then how do we fold down the branches so that they don't have so many branches working towards that model? How do we work towards this idea of mainline development? It's these types of ideas, these types of outcomes that vastly simplify the problem that companies are trying to solve. People don't get into these positions from a nefarious intent.\n\nIn this particular example, this product had been built and worked on for 25 years. They had bought anybody who tried to compete with them. So bring that piece into the puzzle, right, and you end up with a massive product with a very complicated architecture that's very difficult and time-consuming to work on. You need lots of people; it's very distributed because all of these different parts of the puzzle were brought in from different entities that now all work for the same company. They hadn't taken the time to pay back their technical debt. They'd accrued debt. You know, we use Git; we take on a company that uses Subversion, and instead of helping them migrate all of their stuff into Git and fix all of the stuff that we need to fix in order to bring it into our system, we're just going to leave them as is and plug into them and pull their stuff out and integrate it into our system.\n\nSo rather than doing that work because it seemed insurmountable at the time, they didn't do that. They just pulled the stuff in. On top of that, perhaps things didn't exist 25 years ago, so they had a lot of teams that were on their own custom in-house built source control system. When they started working on this product, there were no large-scale source control systems. You were probably talking about Visual SourceSafe at the time, but Visual SourceSafe was developed at the time of small networks and had a max size of about 5 GB. This thing was ginormous, right? So how do you manage that? Well, you have to build your own systems. When you go to try and create an automated build, perhaps there isn't a commercial automated build system, so you build your own. Then once a commercial automated build system becomes available, you adapt into that, but you're actually just calling out to your existing thing because you've not taken the time to rewrite everything because that's an inordinate task. \n\nSo we integrate it rather than refactor, right? We're missing all of those refactors over time, and it just gets bigger and bigger and bigger and more unwieldy. Sometimes it's difficult—that's a terrible expression—but difficult to see the forest for the trees, right? All of these things, like what should we go fix? Where should we go look? Where should we start? What's our biggest bang for our buck that we can go fix and figure out? Perhaps lots of little things we need to fix around the edge.\n\nSo what I would expect an organisation to get—what's like the outcome and improvement that our customers can expect? It's a more effective process, right? We're talking about taking what the organisation is doing right now, usually within the context of a product when you're talking about DevOps, but it could be holistically across an organisation and figuring out how do we eliminate waste? How do we ensure that we have automation, that that automation is effective? Because you can have ineffective automation, like that massive build system I was talking about. \n\nHow do we simplify, simplify, simplify? What I would expect the outcomes to be would be reduced cost to deliver new features, reduced time to deliver new features, improved happiness of the people that are building the product because they're spending less time struggling with the complexity that we've created over time and more time focusing on solving the business problem. These are multipliers for your capability to deliver. \n\nA great example of those multipliers is actually the Azure DevOps team at Microsoft, right? They create a product called Azure DevOps; it used to be Team Foundation Server when it was local. Back in 2010, before they started doing much more frequent deliveries and all the automation and focusing on these things, before they brought DevOps into their story, they were delivering about 25 features to production each year, and that was with 600 people working on it. They were delivering about 25 new features, lots of bug fixes, lots of little tweaks, but 25 new features to production each year.\n\nFast forward to five years later, they'd spent a huge amount of time investing in reducing the amount of time it takes them to build their product from, I think, three or four days—72 hours plus—to build their product down to three and a half minutes. Those types of capabilities enabled them to go from 25 features to production each year to nearly 300 features to production each year with the same number of people and the same people. It's not different people; it's the same people, right? \n\nSo what we're talking about is holistically scaling up all of the people that we have within our context so that everybody understands DevOps, everybody understands refactoring and clean code and what the impact is on all of these things so that we can make them more effective over time. You will be faster, you'll be slicker, and it will be cheaper, right? That's what we're talking about when we talk about bringing DevOps and the DevOps philosophy into an organisation. But it takes skill. We can't install DevOps in your organisation; you still have to do the work. If you can find a consultancy that says they will do all the work for you, your people are not going to learn anything. They're not going to have gone through the pain of actually fixing their problems. \n\nIt's like getting a cleaner in to clean your teenager's room, right? Has your teenager learned to clean up their room? No, they haven't. They're just going to do the same thing over and over and over again. When you do those big rewrites of your product and you take the same people and get them to rewrite your product, what do you think is going to be the outcome except a rewritten product that's in exactly the same state over time as your existing product? Because they've not gone through that crucible of learning the pain of actually cleaning up—the pain of pulling that mouldy plate out from under the bed and having to deal with this mouldy plate. Maybe next time I won't leave the plate because I don't want to deal with that mouldy plate, right? \n\nThat's what we're talking about with engineering practices. We're talking about upskilling, dealing with our own crap, right? Dealing with it ourselves so that we make less of that stuff in the future, that we do things in a better way that enables us to be slicker and more effective."
  },
  {
    "id": "KzNbrrBCmdE",
    "title": "Compromises you need to think about for your azuredevops migration. Excerpt 2",
    "description": "Explore key compromises to consider for your Azure DevOps migration in this insightful video excerpt. Watch now for expert guidance! #agile #devops",
    "captions": "The flexibility that you gain by being able to move things around ad hoc. I can move this one team from here to here. I can move this one project from here to here. I can merge projects. I can split projects. That overrides in most cases if you need it. The inflexibility on how the data is formed, right? That it's not quite as high fidelity as some folks would like, that they're able to do it when they before is enough. \n\nSo I think flexibility and inflexibility depend on what it is that you're trying to achieve. What's the outcome that you're doing? What's your goal? Figuring out which is the best method within that context and doing the best we can within that context."
  },
  {
    "id": "L2u9Qojrvb8",
    "title": "Navigating DevOps: Crafting Unique Solutions for Unique Organizations",
    "description": "Discover how to customise your DevOps consulting services for unique organisational needs, fostering continuous improvement and incremental growth. 🚀📈",
    "captions": "In order to meet the unique needs of all the different organizations that we work with, and we've worked with medical device organizations, military organizations, all the way through to internet startups and web organizations, whatever the organization, the intrinsic philosophies of DevOps are the same. \n\nBut how they're solved within the context of your organization is completely unique. It will always be unique in every organization. Although a lot of the stories sound the same, right? There's a lot of stories that you'll hear about DevOps and DevOps implementations that kind of sound the same. The devil's in the details, right? The way that it's solved, the tools that are used, the limitations those bring will be different in every organization. \n\nThe value of engaging with us is that we're generally going to be focused on that big picture, right? That state of DevOps: where are we right now, where do we want to go, and how do we maintain progress on that route? We do a lot more work at the start, and then there's a lot of work that has to be done by the people within the context that are doing it. \n\nWe can help keep progress in a particular direction. We can help engage with them over the longer term to coach them around some of these gnarly issues that they run into. Right? You want to solve a particular problem and you don't understand how to do it, but you need to try some things and then perhaps get some advice from somebody who's been doing it a long time. If you don't have those skills in your organization, sometimes you need to look outside of your organization for those additional skills. \n\nBecause every organization is unique, every solution is unique, and we can't tell you how to solve your problems, but we can tell you about how other people have solved similar problems to give you ideas for things to try. \n\nCreating this philosophy inside of our organization, where we're able to take little pieces of what works for us within our context, sometimes we need to adapt our context but keep moving forward, keep adapting to the needs of the market, and continually increase our capability to deliver software within our organization is where we can help you understand that direction and how it sits within those DevOps philosophies."
  },
  {
    "id": "l3NhlbM2gKM",
    "title": "Scrum is like communism, it doesn't work. Myth 2.",
    "description": "Uncover the truth about story points in Scrum! Join Martin as he debunks myths and reveals their true purpose as a tool for team conversation. 🚀📊",
    "captions": ""
  },
  {
    "id": "L6opxb0FYcU",
    "title": "Worst agile advice you've ever heard?",
    "description": "Discover the worst agile advice ever! Join Martin Hinshelwood as he highlights the pitfalls of focusing on agile mechanics over core values. #agile #scrum #shorts",
    "captions": ""
  },
  {
    "id": "L9KsDJ2Rebo",
    "title": "What excites you most about the PSM immersive learning journey for delegates?",
    "description": "Join Kanban Dan as he shares his excitement about the transformative 7-week immersive learning journey for aspiring scrum masters at NKD Agility!",
    "captions": ""
  },
  {
    "id": "LI6G1awAUyU",
    "title": "What are the most common challenges you are contracted to solve in a DevOps consulting gig?",
    "description": "Join Martin Hinshelwood as he uncovers common challenges faced in DevOps consulting, bridging the gap between Agile and effective product development.",
    "captions": ""
  },
  {
    "id": "LiKE3zHuOuY",
    "title": "How Much of An Impact can Scrum Have in a DevOps Environment?",
    "description": "Discover how scrum enhances DevOps for seamless software delivery in this insightful short with Martin Hinshelwood. Transform your team's performance!",
    "captions": ""
  },
  {
    "id": "LkphLIbmjkI",
    "title": "Why Are a Scrum Team Better Served by an Agile Consultant than a Professional Coach?",
    "description": "Discover why a scrum team benefits more from an agile consultant than a professional coach in this insightful video with Martin Hinshelwood.",
    "captions": ""
  },
  {
    "id": "LMmKDlcIvWs",
    "title": "What is Kanban?",
    "description": "Unlock the power of Kanban! Discover how to optimise workflows, visualise processes, and drive continuous improvement in this essential guide.",
    "captions": "What is Caman? There are lots of different definitions of Caman, and there are lots of misunderstandings about what Cban is. At its core, Caman is a strategy, not an actual system of delivering stuff. That's one of the common misunderstandings of Cban: that it's a system of delivering stuff. It's not; it's a strategy to help you understand your existing system of delivering stuff and help you optimise that system of delivering stuff.\n\nQuite often, I'll sometimes describe it as a meta process. It's a process that lets you monitor a process, which just messes with people's heads. But effectively, Caman brings some rigor, some metrics, and some analysis of those metrics to allow you or your team or your organisation to look at any system and what's happening in that system and adapt it in a good way. You can see when we make a change to the system, how does that affect the data? How does that affect the flow of work through that system? If you've made a positive impact, you keep doing that thing, and if you've made a negative impact, you stop doing that thing. Go back to the old way.\n\nYou could also say that Caman is a work-limited pool system, but that's a little bit... nobody understands that terminology. The easiest way to describe it is it's a way of looking at your existing system and helping you, as an individual, ask more interesting questions about how that system goes together in order to have a more optimal system to have work flow through your system more effectively.\n\nA Cban strategy can be applied to any system; it doesn't matter what the system is. If the stuff going through a system, whether that is a checkout at a supermarket—that's a system with stuff flowing through it—or your engineering team and you've got work flowing through it, or your creative team and you've got work flowing through it, it doesn't matter what your system is. Cban brings that Caman strategy that you apply, bringing a little bit of rigor to that system and some metrics that allow you to monitor that system.\n\nFor example, one of the key things that happens at the beginning of any CAND discussion is that you create what Cbang calls a definition of workflow. All that means is you write down how you work. That's it; that's all the definition of workflow is. You've got your way of working for a particular thing that you do. It could be a team with work going through it, it could be a machine that processes something, or it could be a checkout at a supermarket. You write down the way everything works in that system because what a lot of people... even just the act of doing that can create optimisations in the system.\n\nIf you've got five people working in a system and you've never written down how that system works, what do you think the chances are that everybody working in that system uses the same terminology, makes the same or similar decisions, applies the same rules to playing the game? Yeah, that's a great example, actually. I like that one as well. So if you went out and bought Monopoly—I'm not suggesting it, by the way; there are way better games than that—but if you did buy it because it's the most common thing, right? You can find it in every supermarket. If you went out and bought Monopoly and you immediately tore up the rule book and you just guessed how to play the game, and you had four people playing the game and everybody just guessed... Monopoly is a good one because everybody knows how Monopoly kind of works, right? \n\nWould everybody be playing the same game? Would everybody be playing by the same rules? Would everybody have the same understanding of the mechanisms of the game and how it actually works? No, they wouldn't, right? They would each come up with their own way of doing it. If you've ever been at one of those family dues where you've got Monopoly out, you argue over how the rules work. You argue as a group, as a family, about how you should play the game because you've not agreed as a group how to play it. That's what the rule book that comes with a game is: here's the way you play the game.\n\nSo where's the rule book for your team, for the way your team works? Where's the rule book? When a new team member comes in, do they also just make up how they work, and then you tell them when they're doing it wrong, and hopefully, they end up figuring out how to do it right? It doesn't make any sense. You write it down.\n\nWhat that typically looks like... we've all seen what a lot of people do: they draw a board on the wall or in JIRA or in Azure DevOps, and it has a bunch of columns, and they call that CAND. That's not a CAND strategy; that's just a board. Anybody can have a board and have work flow through the board. Part of the CAND is deciding and agreeing what that workflow is. Once you've agreed what that workflow is, you can then apply some metrics and monitor what's going on in that workflow.\n\nOnce you're monitoring what's going on in that workflow, just looking at the data is not enough. Remember, you have to actively manage the work that's going through the system. You actively make choices about what is happening within the system in order to optimise the outcome. Then you're going to look at the data to improve the system. You look at the data, and then you actively make changes to the workflow. \n\nSo you've written down how you think you work right now. That's where you start. There's an expression they use in Caman: start from where you are. That's the expression. So where you are is what you do right now. Write down what you do right now; that's your current definition of workflow. You build the board, you visualise your work in process, your work that's going on, and then you start using it. You're like, \"Oh crap, we didn't think about this. Oh, that doesn't quite work like that.\" So you start making changes so that it more accurately reflects your definition of workflow.\n\nBecause you're visualising your work, you start noticing things. Humans are really good at visual seeing when things aren't quite right or the way you think they should be. Then you can go look at the data and say, \"No, no, no, we should actually change this. We shouldn't have two columns; we should have one,\" or \"We shouldn't have one column; we should have two.\" Then you make those decisions. You're changing your workflow, you're actively managing your work, and you're changing your workflow. \n\nThat's what creates this continuous improvement loop of optimising your process. Making a little change: did we make it better? Yes? Awesome! Let's see what's going on. Okay, we use it for a while. But this is still broken; this doesn't work right. Okay, well, let's fix it. Let's try something different. Okay, now does that work? Yeah, yeah, yeah, that works great.\n\nThis application of... it's actually an application of Little's Law; you can go look that up later. This application of a CAND strategy to any system will help improve it. If your current system of work is failing you, then you would benefit from creating and applying a CAND strategy. Don't wait; the sooner you start, the sooner you'll improve. Get in touch below."
  },
  {
    "id": "LpiLOBG7WgI",
    "title": "What should you do if your Sprint Review delivers harsh, scathing feedback?",
    "description": "Master Sprint reviews with confidence! Learn to turn harsh feedback into actionable insights and align with stakeholders for product success. 🚀",
    "captions": ""
  },
  {
    "id": "lvg9gSLntqY",
    "title": "Why does project management not work in complex environments?",
    "description": "Discover why traditional project management fails in complex environments. Martin Hinshelwood explains the need for agile solutions. #agile #projectmanagement",
    "captions": ""
  },
  {
    "id": "LWRAX3OyO28",
    "title": "The Power of Continuous Delivery",
    "description": "Discover the true power of Continuous Delivery with Martin Hinshelwood! Learn how to reduce risk, enhance reliability, and transform your software delivery.",
    "captions": "If you're trying to unlock the power of continuous delivery, then you've probably considered the type of benefits that you get from it, and perhaps they're not the benefits you think. While it is true that continuous delivery can help you become faster, that's a lagging side effect of the work that you would do. The real benefit of continuous delivery is the requirement for automation within the context of DevOps, and the real value of automation within the context of DevOps is you've not got a person doing the deployment; you've got an automated tool during the deployment. So you gain consistency and reliability of what is happening, and that consistency and reliability reduces your risk.\n\nIf you're interested in how much risk that is, there's one example that I always used to use, which was the Night Capital Group, a financially traded stock exchange organisation in the US. They did a deployment of their software; it failed due to various reasons, mostly to do with manual deployments. They ended up losing about $10,000 an hour or a minute or whatever it was, but at the end of the day, they had to file for bankruptcy, and at the beginning of the day, they had $450 million in the bank. \n\nSo that's the example I usually use. Probably today, I would say CrowdStrike. If you've got automation that checks that your system, that what it is you've created, your teams have created, is good and meets the minimum bar for the business, what's your risk level? That's the power of continuous delivery: consistency and limiting risk. You can ensure that within your continuous delivery process, you have the checks that you as a business require to protect your business. \n\nSo there's protecting your business, protecting your brand, protecting your employees, and protecting your customers. All of those things can mostly be automated. Almost all of those things that could possibly go wrong can be automated. You can't automate legal stuff, so you would still have to handle some things there. But from the context of not wanting my software to fail, not wanting it to send money to the wrong place, we use testing, we use automation, we use continuous delivery, continuous everything: continuous testing, continuous deployment, continuous delivery. \n\nThose are the things that help you get faster feedback because if it's an automated process, you can go around that loop, and the developers can find out that it's broken or it's not doing the right thing much faster. A great example of that is the Azure DevOps team at Microsoft, which went from delivering 12 features to production per year for 600 people to delivering 280 features to production per year for 600 people. \n\nSo the number of people didn't change, but they massively increased the number of features delivered. Part of doing that was changing the feedback loop, making the feedback loop faster. They went from an automated build that would take days to get a response from to one that took minutes and seconds to get a response from. They used to have to run their full suite of tests in, I think it was four or five days, to actually get a response for a particular thing, and now it's three and a half minutes for the entire test suite. \n\nThat level of feedback makes feedback faster, costs less, reduces risk, and increases effectiveness. That shortened the feedback loop. If you're also deploying and getting your feature in front of customers, that continuous delivery piece means you're getting your product in front of real customers. You're moving to production on a continuous basis. \n\nEven the Windows team, which is probably the biggest, most complicated product on the planet, is 24 hours or less doing continuous delivery from developer cutting code to being in the hands of real production users, albeit inside of Microsoft. It's 24 hours; it's a week. They've got it in front of real external users; it's a month. They've got it in front of 20 million external users, and then it's three months. They've got it in front of, I don't know, 850 million external users. \n\nIf CrowdStrike was doing what the Windows team does, they would not have caused the errors that they did. Continuous delivery, the practices within the context of DevOps that enable continuous delivery, are the things that reduce risk, increase effectiveness, and give you faster feedback."
  },
  {
    "id": "LxM_F_JJLeg",
    "title": "Don’t put down to malevolence what can be explained by incompetence",
    "description": "Uncover how incompetence, not malevolence, often hinders agility in projects. Join Martin to transform your agile journey! 🚀 #agile #scrumtraining",
    "captions": ""
  },
  {
    "id": "m2Z4UV4OQlI",
    "title": "The Power of Metrics: Why PAL-EBM is Essential for Your Organization",
    "description": "Unlock organisational success with the PAL EBM course! Discover the power of evidence-based management and effective metrics in this insightful video. 🌟",
    "captions": "I would recommend the PAL EBM class really to anybody who works in a company who wants to take it in a direction of success. So you could be a manager managing a team within your organisation, you could be managing a group of teams, you could be managing a whole product, or you could be CEO managing the whole company. You could be a product owner, you could be a Scrum Master, you could be a leader anywhere in leadership in the organisation. The PEBM class is designed to take the participants through a story that enables understanding. Right, that's how we as humans learn best, is to experience and tell stories and engage in some kind of activities. The PBM class is designed to take us through those ideas about effectively why our existing metrics that we collect aren't being successful. Right, what is it about them that's being unsuccessful? So not just this one's bad and this one's good, but what is the underlying reason, the people reason, why a lot of those metrics are unsuccessful? Connecting those dots and enabling the people in the group to really understand the impact of having good metrics. Almost every participant I've had that goes through the PAL EBM has had epiphany-like realisations about what they're not doing in their organisation that they really should be doing. Right, that they really should be looking at these metrics, they really should be iteratively looking at them over time, seeing the trend and direction, and using metrics to shape the direction of the organisation while watching out for negative behaviours caused in people by monitoring those metrics. Right, there's lots of great examples out there of poor metrics. We tell a lot of those stories in the class. Right, in the PBM class, the trainer tells a lot of the stories of organisations out there. A lot of that information is publicly available as well, that you can find those metrics that we've always used and the negative impact that they've had on organisations over the longer term. That's not really obvious in the short term, but you do something over five or ten years in your organisation, and it can be absolutely detrimental to the way that you do business. One of the stories that I always tell for leaders is Microsoft. Microsoft used to do stack ranking. If you Google stack ranking, you'll find a whole bunch of other organisations that have also never been successful using it, in fact, been wholly unsuccessful using it. But stack ranking was this idea that you, as a manager, every manager in the organisation stack ranks every one of their direct reports, and the bottom 10% is out of the team. Right, and if you're in the bottom 10% three times in a row, you're out of the company. One of the things that we engage with is how would something like that impact on the behaviours of the people within the organisation? Right, and it's so obvious in hindsight the negative impact of those types of metrics on behaviours of people that you want to be collaborating together towards a common goal. How would this impact them? It's blatantly obvious to us the negative impact of that, but then why was it policy within Microsoft and the engineering organisation for ten years? Right, why did they not change it sooner? It took Satya coming along to make that change, and it's because people cling onto their beliefs in spite of the data. The data is telling them it's not going well, and they cling to it. Part of PAL EBM is transparency. Right, we have an empirical system for monitoring our data, so we want to be able to really see what's going on, see the real data, and then make decisions based on what's really going on, not the general fiction that most business decisions are made on at the moment. So that's why I would recommend the PAL EBM. I would heartily recommend it for individuals, but I would even more recommend it for organisation leadership teams to go through together. I've done that a number of times with organisations, and one of the comments that I got from a CIO in the PBM was, \"These are the conversations that we've never had time to have,\" right, that we should have had before. Now that we've all had that little warning bell going off, thinking we should have these conversations, and we've just not had them because we don't have time, we don't have the inclination, we don't feel like we can voice it. The class creates space for leadership teams to really have those deep conversations on how are they going to measure success, what does success even mean, and how are they going to iteratively strategise towards the desired outcome? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "M4ap4uNzptg",
    "title": "Unlocking Agile’s Core: Questioning to Create Value",
    "description": "Unlock the true potential of Agile! Discover how questioning and adaptability can transform your organisation and outpace competitors. Watch now! 🌟",
    "captions": "There's a quote by Steve Denning: \"Being agile is about questioning what you do and continuously improving what you're doing.\" And that really is that fundamental kernel of what's the difference between what people have always done and what agile is talking about. We'd like people to do going forward into the future. And that's that question everything you do: why you do it, value it.\n\nIf it doesn't have value that it creates that's greater than the pain of doing it, then you need to change what it is you're doing and do things differently. And that is why we talk about, or at least Ken talks about, Scrum as a mirror. Right? I can't do Scrum because here's something you need to go fix in the way your organisation does business in order to become more effective. Because the more effective you are at adapting to change, the more chance you have of being successful in your market. The more chance you have of adapting around whatever it is the market throws at you, the world throws at you, or your competitors throw at you.\n\nAnd if you can change and adapt faster than your competitors can, you'll be the one setting the trend in the market. You'll be the one that they're following, and you'll be the one making the money first. Right? And that's ultimately what it's all about. The most capitalistic organisations are the ones that can change as quickly as possible to take advantage of market opportunities. Right? That's what it's all about.\n\nSo, be that ninja, being able to dynamically change your business anytime you need. And for that, you can't do that. You can't make those decisions as a leader in an organisation or as a CEO. Right? You have to have the people that are at every level in your organisation need to be looking at the same thing. They need to be not following the rules; they need to be questioning the rules at every possible moment. They need to be asking, \"Is there a better way to do this?\" Right? That could be faster and quicker. Maybe we don't need to do this at all. Maybe we need to do it differently.\n\nThose are all the questions that we should be constantly asking and creating forums within our organisation so that you can have those things dealt with. There's no point in having all those questions asked and then doing nothing about them, because all you do is end up with a bunch of disgruntled people working in your organisation who can see all the things that need to be fixed, but they can't fix them. They don't have the authority to fix them, and nobody else has the authority to fix them. Right? Or nobody else wants to, or senior leadership doesn't care. Right? That's going to have a massively negative impact on your business.\n\nSo, focus instead on creating forums within your organisation where you can have those legitimate moments—might be continuously—where you continuously look at and question the things that are going on, the way you do things, the choices that have been made, the decisions that have been made, so that you can continuously have the best possible version of your organisation emerge over time.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "m4KNGw5p4Go",
    "title": "Transform Your Product Development: Unleash the Power of Experimentation and Collaboration",
    "description": "Unlock your product development potential! Discover strategies to enhance user value, reduce waste, and foster collaboration in our transformative PPDV course.",
    "captions": "The course will definitely change your product development game. First point, you will be able to increase user value. Why? Because you are going to deliberately design experiments to better understand user needs and find effective ways how to address them. So we believe this is the best way to increase user value.\n\nSecond point, because you will be able to increase user value and have this process more conscious with a lot of learning, you are definitely on your path to decrease waste. As a result, you will also improve return on investment when it comes to what the team is working on. You will invest based on evidence; you can adjust your budgeting based on experiments, based on the results, based on the data that you get. And at the end of the day, thanks to that, you can embrace the agility principle of simplicity. So in that process, you will also be maximising the amount of work that is creating little or no value.\n\nAnother important point: we, as human beings, really often jump into solution space immediately or just by briefly presenting the problem. In this class, we want to unlock creativity by thinking in problems and showing a different perspective on that. So hold your horses and let's try different experiments to make sure that we truly understand what the problem is. You might be amazed how many different solutions may finally be created when we first pay a lot of attention to understanding the problem.\n\nAnother point: some of the customers, some of the teams, companies complain when it comes to collaboration with stakeholders. With this class, you actually might be equipped with some tools and ideas on how to improve collaboration between the teams and between the stakeholders. This collaboration may change completely because if you invite others and show them this different perspective, your product development may start with using data, not opinions. In that case, it might also be easier for you to get a green light from important stakeholders, but also to show them that certain paths, certain ideas are not worth investing in.\n\nFinally, I believe it's also a class that is improving our toolbox, our product development toolbox. Because after the class, you will have a bunch of valuable practices, techniques, and ideas when it comes to discovery and validation, and you can start using them immediately after you leave the class. So it might be a great beginning of changes that you will start very soon, just after you say goodbye in our class."
  },
  {
    "id": "M5U-Pdn_ZrE",
    "title": " shorts 5 things you would teach a productowner apprentice. Part 4",
    "description": "Join Martin Hinshelwood in Part 4 as he shares essential lessons for aspiring product owners. Discover key insights for success in agile project management!",
    "captions": "You can't measure understanding. You just can't measure it. You can't say, \"Here's a line in the sand,\" and at this point, everybody understands it. It's a lot more nebulous than that, a lot more fuzzy than that. So you, as a product owner, need to learn to read the room, to know what language you need to use in order to enable understanding, to know what sometimes people don't want to admit that they don't understand your thing. Right? So you need to learn to be able to read when people are in that category and maybe do some more around it."
  },
  {
    "id": "MCdI76dGVMM",
    "title": "Hardest part of becoming a professional Scrum Master?",
    "description": "Discover the toughest challenge in becoming a professional Scrum Master with Martin Hinshelwood. Join us for insights on agile success! #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "MCkSBdzRK_c",
    "title": "Making Business Decisions with Evidence! What is evidence-based management?",
    "description": "Unlock the power of evidence-based management! Learn to make data-driven decisions and enhance your leadership for sustainable business growth.",
    "captions": "What is evidence-based management? I think the easiest way to describe it is just bringing science and empiricism to leadership. All right, how do we make decisions as leaders? What's the data that we're using to inform our decisions? And when we make decisions, what is the impact that those decisions have on the organization, and how are we measuring that? \n\nIn most organizations that I see, a lot of that is done by either gut feeling, right? So there's not really any data, or there's a lot of vanity metrics in the organization. The metrics represent us looking good but don't necessarily change the way we do business. So evidence-based management is an attempt to address that and help organizations understand their business value. Right, that's the key thing there: the business value. Are we focused on delivering value to our stakeholders, our customers, and how are we measuring that value? \n\nIt really talks about two categories with four key value areas that we feel like is a good idea to measure. At the top, we've kind of got market value. Obviously, that's key, right? If we don't have any market value, we're not going to be a sustainable business. The two sides to that are value we already have, our current value, so that's in our products and our services and things that our business does right now. The other side of that is unrealised value, right? What's the value we've got left sitting on the table? Markets we haven't explored, new opportunities, new things that we haven't pursued, new customers we haven't got yet. \n\nSo trying to understand those two, and although evidence-based management comes with a set of, I guess you could call them example metrics in each of these key value areas, the reality is that you need to find the metrics that make the most sense for your organization within those contexts. I just like to see us having metrics in each of the key value areas. \n\nSo we were talking about market value, so current value and unrealised value, but there's also our capability as an organization, our ability to actually do stuff, right? The top two are about doing the right thing. Are we moving in the right direction? Are we focused on filling those gaps, perhaps in our market capability? The bottom half is our organisational capability, so that kind of sits in two key value areas. \n\nSo it's four total, and that's time to market, which is how fast we can go from idea to market, getting stuff in front of the customers to test our assumptions, right? Because we assume that something is going to provide value, but until we actually get it in front of customers, we're not really sure. We just have an assumption, and we want to test it. The other side is the ability to innovate, right? How much time do we spend delivering new stuff, and what are the things that impact our ability to spend time delivering new stuff? \n\nI think those four together, if we as a business have a core understanding of our current value, our unrealised value, our ability to innovate, and our time to market, that gives us a holistic view of our ability to deliver business value. Then once we've decided on what those metrics are and we're able to monitor our organization, maybe you only do that quarterly, right? Collecting this large set of metrics, we're then able to see how the decisions that we make, the changes that we make to our organization, actually impact on those metrics that we've decided to look at. \n\nSo that is what evidence-based management is. We're going to use evidence to manage our organization, right? This is something that a manager would use, depending on whatever you're at the top of, the pyramid for, right? It could be a product, it could be a service, it could be a whole organization, a whole company. How are you measuring these things, and how do you use that data to inform the decisions that you make? \n\nEvidence-based management is just bringing that story together and saying, yes, we have metrics, yes, we're looking at them, we're monitoring them in a regular cadence, and we're making different decisions based on those metrics and seeing how that shapes the direction that we end up going. \n\nAnd that's because this is something that so many organizations don't do. You would believe the number of organizations that I go into, and they have no goals, they have no strategy, and they have no way to measure it. This can be a competitive advantage, right? If you're able to leverage empirical, hypothesis-driven, data-based decisions to shape the direction of your organization to the market and the market niches that you are able to find, that can be the competitive advantage that you need to be successful. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "MDpthtdJgNk",
    "title": "Why is Kanban becoming increasingly popular in creative industries?",
    "description": "Explore why Kanban is gaining traction in creative industries! Discover its adaptability, core principles, and how it enhances workflow efficiency.",
    "captions": "I think Caman is becoming popular in the creative industries because there's very little other help out there for the creative type work where you're, for example, building computer games or you're building marketing content or you're building videos. Whatever it is that you're building, that's not really software engineering, because everybody thinks of Scrum as a software engineering process and find it a little bit weird trying to apply it within their context. Right? They actually, they're actually running into the same thing that everybody runs into, that doesn't, that would, things don't work that way here. So Caman is a much better starting point for getting into making changes to the way that you work and trying to optimise your processes.\n\nSo coming up with that definition of workflow for your existing process is usually much easier than trying to apply something like Scrum. So for lots of organisations, they don't want that big bang change. Right? When you apply something like Scrum, you're making a leap from the way you currently work and changing it to something else, and this is going to be your starting point. So that would be you start at Scrum and then you're going to move forward from there and optimise. You're still going to use Cban Caman strategy and you're going to optimise from there. But if your way of working right now is kind of working and you don't want to disrupt that too much or you don't feel you don't know if you're going to get value from that Scrum thing, then start from where you are. Right? That's the beauty of a Caman strategy is it doesn't care what the, it doesn't care the way your system currently works. You model your existing system, that's where you start from.\n\nSo you can take any industry, any system, creative or otherwise, and you can just model your existing system. A huge difficulty though, I've worked in quite a few creative, I've worked in the creative industry. Right? When I first started as a software engineer after I graduated back in 2000, my first jobs were New Media agencies. You probably wouldn't call them that anymore, but New Media agencies. I worked with groups of designers building Flash applications, Flash websites, if anybody remembers Flash. If not, don't even look at it, it's mental. And those kind of things, working with the creative industry, it's a very difficult space because of the way art works. Right? It's very difficult to be iterative and incremental right away in that space because the way we traditionally work with art is it's your personal thing, and your personal thing is going to a certain point till you're personally happy with it, and then you're providing it to other people to give you feedback and that kind of thing.\n\nSo there's a much more personal nature to that than there is in maybe other industries like software engineering, right? Where there's less, a little bit less personal. It can still be personal, but a little bit less personal. So that's why creative industries and creative folks struggle with something like Scrum, because it talks about team, it doesn't talk about individual, and creativity is about the individual. So finding the balance in that is very standoffish. So Caman strategy, but the hardest part of a Caman strategy, at least at the beginning, is writing down your workflow. Right? Documenting your definition of workflow. How are you going to get five creative people in a room and agree what your existing workflow is? So that's going to be your first struggle. But Caman is popular in creative industries because it seems like actually, I'm actually going to recant some of that a little bit. I think that Caman is popular in a lot of places where people don't want to change, and they see Scrum has a bunch of rules, and Caman doesn't have a bunch of rules, and they feel like they can just put a board on the wall, call it Caman, and they're done.\n\nThat's not Caman. Having a board on the wall and moving cards across it is one very small part of Caman, maybe an important part, that visualisation part. But have you taken the time to actually define your workflow? To agree as a group, all the people working together, that this is how we are all going to act, how we're all going to make decisions in the same way? I doubt that happens in most organisations. Have you agreed what the working process limits are? How much work is going to sit in each column? If you don't have WIP limits, you ain't got Cban at all. Right? So sitting down and agreeing that this is really hard stuff. It's hard for a group of people to get together and make these decisions and come up with these rationales. It's just hard. I do workshops with groups of people talking about this stuff, and you can do a four-hour workshop with a group of five or six people and not get anywhere near a definition of workflow. Nowhere near. And this is people who largely agree on what it is they're doing, because the devil's in the details. Right? When you've got a bunch of work in a pile and you need to start a new piece of work, how do you choose that piece of work?\n\nHow do you choose it? Right? We have to agree as a group how we're going to choose it, because this is our system that we're all working within. So how, whose way of choosing it do we pick? Right? Out of the five different opinions on how they select work. Well, I like this type of work, so I'm going to take that. No, that's not good enough. That's not how you optimise a system. Right? That's not how you optimise the flow of work through a system. What is the most valuable piece of work to take next? Now that's an interesting conversation. And how do you define value? And does it matter whether you as an individual are comfortable with that piece of work or not? Right? There's probably some yes, some no, right? Within the bounds of that. So making these agreements and writing them down is very hard. And although Caman has become popular, particularly in the creative industry, I definitely feel there's a lot of \"Can't Ban,\" right? That they really don't want to do anything or change anything or have anything imposed upon them and their way of working.\n\nI know a lot of creatives, creatives are very much, very much, \"My way of working is the best for me. That's how my muse.\" Right? And that's absolutely reasonable. But we're all working together within a business driving a particular outcome, and that business needs to optimise the work in order to maximise the return on investment. Right? So how much effort we spend versus how much money we get. And yeah, we need some level of standardisation, and a core critical part of Caman is defining that standardisation. Have personal Caman. If you don't want to work together as a team, each individual has their own Cban. Problem solved. Right? Everybody just decides their own way of working, their own workflow, as long as they define it, they write it down, they have the visualisation, limit their work in process. Personal Caman. There's a book on personal Caman, and I highly recommend that as well.\n\nSo I know Caman's getting popular, but please do look at the Cang guides. Right? Take a look at the Cang guides, look at what is actually involved in creating a Caman or using a Caman strategy against your work. And usually, there's more rigor, more effort, more ambiguity, and more difficulty than something like Scrum. If your current system of work is failing you, then you would benefit from creating and applying a Caman strategy. Our professional Caman trainers and consultants are ready to help. Don't wait. The sooner you get started, the sooner you will improve. Get in touch below."
  },
  {
    "id": "mkgE6prwlj4",
    "title": "What is the best application of Scrum in the world?",
    "description": "Discover the world's best Scrum application! Join Martin Hinshelwood as he shares inspiring case studies that transformed agile teams. #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "MO7O6kTmufc",
    "title": "Introduction to Evidence-based Management Excerpt 2",
    "description": "Explore key insights on Evidence-based Management in this engaging excerpt, enhancing your agile leadership skills for effective decision-making. #Agile #EBM",
    "captions": "Once you've figured out what your outcomes are, you need to figure out what metrics are going to help you measure progress towards those outcomes. So, I mean, these can be super tactical things that help you move towards those outcomes. It can be leading or lagging measures; there's all kinds of things that come into that. But evidence-based management is that application of practices within the context of that data to help you make decisions."
  },
  {
    "id": "mqgffRQi6bY",
    "title": "Why is Lego a shit idea for a Scrum trainer - Part 2",
    "description": "Martin Hinshelwood critiques the use of LEGO in Scrum training, explaining why it's a poor choice for professional Scrum trainers. Discover more in Part 2!",
    "captions": ""
  },
  {
    "id": "msmlRibX2zE",
    "title": "Harris Beach SDS Ultrabook Unbox",
    "description": "Join us as we unbox the Harris Beach SDS Ultrabook! Discover its sleek design and features. Full review at nakedalm.com/review-harris-beach-sds-ultrabook.",
    "captions": ""
  },
  {
    "id": "MutnPwNzyXM",
    "title": "Most valuable lesson you learned as an agile consultant",
    "description": "Discover the key lesson Martin Hinshelwood learned transitioning from agile practitioner to consultant, enhancing team collaboration and performance.",
    "captions": ""
  },
  {
    "id": "mZvRMHFUarM",
    "title": "Estimating with Confidence",
    "description": "Unlock reliable software project estimates with Martin Hinshelwood! Discover the power of probabilistic forecasting for confident, accurate planning.",
    "captions": "One of the big struggles within the context of software projects is estimation. Most organizations try and do some form of estimation. Either they're using absolute estimation, so we're talking errors here, or they're using some kind of relative estimation tool. It's really difficult because we feel like we need estimates to understand what we're going to do. We actually don't. \n\nBut what we do need is the ability to forecast out into the future with some kind of probability. Right? So when we're talking about software delivery, where we have really high variance, it's still really difficult. There is no tool when you have more than 50% unknown that you can use to accurately predict the future. Right? Accuracy is not a thing you can have. \n\nSo what's the best we can get? Right? We want to be looking at probabilities and probabilistic forecasting. So what we tend to do is use some kind of forecasting simulation tool to look forward into the future based on what actually happened. So we're never actually effectively estimating an individual item within our backlog. We're just saying that we can deliver, let's say, in the next 30 days, we'll deliver another 50 items with an 85% likelihood that that's going to happen. \n\nThat leaves wiggle room for things not happening the way you think, and it doesn't require the people on your teams to spend a significant amount of time estimating. It doesn't require any actual numbers to come out of the team. It still requires the people doing the work to analyse the work and break it down into smaller chunks. Right? That's reducing the batch size of each individual item. That is still required. That is something you want to spend time on because it builds understanding within the context of what it is that we're delivering. \n\nRight? We want to understand the thing we're delivering, and that understanding is the main impactor of our ability to execute on those things. So in this new world, there isn't really estimation, but we still have confidence, and we put an actual probability on our confidence. I usually encourage teams and departments and organizations to look at about an 85% confidence level, being that what 70% of all startups fail. So it probably relates a little bit to 70% of all ideas are going to be unsuccessful. \n\nRight? So what's your confidence level of being able to deliver? As long as it's higher than 70%, it's probably a good bet, and we can figure it out from there."
  },
  {
    "id": "N0Ci9PQQRLc",
    "title": "How does your real world experience translate into your training style?",
    "description": "Discover how Martin Hinshelwood's real-world experience shapes his unique #Scrum training style, making complex concepts accessible and impactful.",
    "captions": ""
  },
  {
    "id": "N3LSpL-N3kY",
    "title": "2-day PSPO Versus 8-week PSPO",
    "description": "Discover the key differences between the 2-day and 8-week PSPO courses in this short video with Martin Hinshelwood. Elevate your Scrum journey! #PSPO #Scrum",
    "captions": ""
  },
  {
    "id": "n4XaJV9dJfs",
    "title": "What is the most useful element of the APS course for beginner Scrum Teams?",
    "description": "Unlock Scrum's secrets! 🌟 Join Martin as he explores complexity in agile, offering practical insights for beginner Scrum Teams. Dive in now!",
    "captions": ""
  },
  {
    "id": "N58DvsSx4U8",
    "title": "What is your favourite DevOps consulting outcome?",
    "description": "Join Martin Hinshelwood as he shares his favourite DevOps consulting outcome, highlighting the transformative power of agile practices in diverse industries.",
    "captions": ""
  },
  {
    "id": "n6Suj-swl88",
    "title": "Who should lead the sprint review?",
    "description": "Unlock the secrets to a successful Sprint Review! Join Martin as he guides Scrum teams on maximising productivity and stakeholder engagement. 🚀 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "Na9jm-enlD0",
    "title": "Where is consensus valuable and where does it kill great product development?",
    "description": "Explore the balance of consensus in product development! Discover when it fuels progress and when it stifles innovation. Join Martin for insights! 🚀",
    "captions": ""
  },
  {
    "id": "nDX_N-dllEQ",
    "title": "Free Workshop 3 - Introduction to Kanban & Batch Size",
    "description": "Join our free 90-minute workshop with Martin Hinshelwood to explore Kanban and batch size. Register now to participate live!",
    "captions": ""
  },
  {
    "id": "NeGch-lQkPA",
    "title": "Overview of 'applying flow metrics for Scrum' course.",
    "description": "Unlock Scrum's potential with Kanban! Discover how flow metrics can enhance planning, execution, and retrospectives for better team performance.",
    "captions": "So the applying flow metrics for Scrum course is an amazing class about Kanban from the proamband.org about how you would leverage the metrics and capabilities that a Kanban strategy brings within the context of a Scrum team. We're going to be talking about how to leverage the different data aspects in Sprint planning, in Daily Scrum, especially the other events, retrospective, what tools you can use around product backlog refinement to help you increase flow, how you track progress towards critical dates and deliverables, and to identify opportunities for the team to ask more interesting questions. \n\nAnd that's the purpose of the applying flow metrics with Scrum course. It exists mainly because there are lots of people who are doing Scrum in their organisations and they're really struggling to deliver value at the end of each Sprint, to focus on that value delivery. A Kanban strategy enables you to focus on and increase the flow of value delivery through your system. \n\nSo it really, really, really benefits Scrum teams. I wouldn't want to be doing Scrum without this capability. It really helps teams deliver on that value, right? And it's really core focus on delivering value, not tasks, but actual value to the customers. \n\nSo you should be able to increase your ability to deliver, make your stakeholders happier, and your business happier using these techniques. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "Nf6XCdhSUMw",
    "title": "Introduction to Evidence Based Management",
    "description": "Discover the essentials of Evidence Based Management in this engaging introduction. Enhance your Agile practices today! #agile #scrum #ebm",
    "captions": "Evidence-based management is the application of evidence-based practices at the strategic and tactical levels in an organisation. It involves using data to inform but not control the actions and behaviours that have been shown to impact outcomes. So what that means is that we're going to collect a bunch of data within the organisation. The way we measure people informs the way they behave. So whenever you're working within an organisation and you find somebody's working against you or somebody's not being as involved as you think they should be involved, and you're wondering why, there's probably some organisational measure or metric something being levied against them that enables, ensures, encourages that behaviour in that person.\n\nSo the best way to figure out why somebody is doing something in a particular way that maybe you feel has a negative impact on the way your things need to happen is to figure out how they're measured. That can be difficult, but if you can glean that information, you can figure out why they're behaving the way they're behaving, why they're taking the actions that they're taking. We want to try and have more behaviours and actions that impact our outcomes positively. We want to deliver more value to our customers. \n\nWhat other outcomes might your business want? Well, they might want more revenue. They might want more value for their customers. They might want to save money. What else might be good impactful outcomes for our business? We might want to increase our capability within a particular market. It's difficult without a specific instance to have a specific outcome that you're trying to achieve. \n\nOnce you've figured out what your outcomes are, you need to figure out what metrics are going to help you measure progress towards those outcomes. These can be super tactical things that help you move towards those outcomes. It can be leading or lagging measures; there's all kinds of things that come into that. But evidence-based management is that application of practices within the context of that data to help you make decisions. \n\nOne of the reasons I very specifically said inform but not control is that the data is not always going to result in a specific action. So what's a good example of that? Let's say I had a metric for my team or teams. I've got a group of teams I'm working with, and my metric is the number of live site incidents that last or exist for longer than two sprints—let's call it three sprints. We're running a live service; we're going to have outages and issues and things that happen in the live service. When those things happen, we're going to create live site incidents or live site incident mitigating actions—things we're going to change in the product in order to not have that type of live site incident happen again.\n\nSo we've done our analysis, we've come up with these ideas, and then we expect our metric is that we expect teams to clear those off within three sprints. If I expect them to clear it off within three sprints, I maybe want to have a measure, a team dashboard, and I'm going to have a measure that says what is the number of live site incidents that have been existing for longer than three sprints and what is the trend of that number? Is it trending up or is it trending down? \n\nYou may see your list of teams, and you see the numbers, and they're all good apart from this one team that has these four outstanding live site issues that have been there for longer than, let's say, six or seven sprints. That doesn't mean there's something wrong in that team. These are indications, these are flags, pieces of evidence that you use to inform your decision-making. So you'll probably need to go ask them how it's going, and maybe there's a team that they're waiting on something else to happen. They can't fix their thing until some other third party that they don't control and we have limited influence over needs to do something. \n\nSo we can't make them do it; they're going to do it in their own time. It's on their backlog; it keeps getting pushed, and we can't resolve our issue until they've resolved their stuff that they need to do. So the team, that data looks bad, but the team's doing fine. They're chasing it on a regular basis; they're putting pressure on that other group on a continuous basis. It's just taking time to get resolved. \n\nThat's why it informs but does not control. But we're making decisions based on the evidence. We're collecting a bunch of evidence; we're extrapolating what we don't know or don't understand. The evidence is going to have gaps in it, and then we're making an informed decision based on our understanding of the current situation. That's evidence-based management in a nutshell."
  },
  {
    "id": "nfTAYRLAaYI",
    "title": "Mastering Kanban: A Simple Guide to Its Core Principles",
    "description": "Unlock peak productivity with Kanban! Discover 3 essential principles to simplify workflows and enhance efficiency in this must-watch video.",
    "captions": "There are three core principles of Caman. To keep it really simple, there's defining and visualising your workflow. That's like creating your rule book as a team. How are you going to function? What does your system look like? Right, so defining and visualising a workflow.\n\nThe second core principle is to actively manage the items in the workflow. So now that you can see them, you can see what's going on. You have a visualisation; you're going to actively take action. So you're not just going to passively look at it; actively take action.\n\nAnd then the third principle is improving your workflow. You want to make changes to the workflow in order to make things a little bit better, to make things flow better through your system."
  },
  {
    "id": "NG9Y1_qQjvg",
    "title": "Install TFS 2013 Release Management",
    "description": "Learn to install and configure TFS 2013 Release Management in under 10 minutes with Martin. Streamline your deployment process effortlessly!",
    "captions": ""
  },
  {
    "id": "NgoP5W5y7Gs",
    "title": "Security by Design Building Secure Software",
    "description": "Learn to embed security from the start in software development. Join Martin Hinshelwood as he explores shifting left for resilient, secure software.",
    "captions": "Many companies make the mistake of treating security as an afterthought, doing security validation and security checks at the end of the process. This is not a small company problem; it's not a big company problem; it's an all-company problem. Some of the largest tech companies have resolved this with something you'll probably hear about in the Dora report, which is shift left. Shifting left means shifting everything as left as you can, as close to the developers and engineers as possible, to resolve these issues.\n\nWhat has been happening is that we will do many years of work on a product—could be months, could be years, could be weeks. We do a whole bunch of work on a product and then we ship it to pen testing or someone who's going to do some security validation for your product, even if it's yourselves doing it. But you just do it at the end, and you find a whole bunch of problems. Some of those problems are going to be systemic to how you've built your product in the first place. In order to fix that, we're going to have to rearchitect.\n\nIf we're late in the game, we're ready to ship, and everybody's asking us when it's going live, we need to get out. We need to blue Peter the heck out of that, and we get out our super glue, our sticky tape, and we go figure out how to paper over the cracks in our product to prevent the hackers from getting in. The problem is that hackers are super good at peeling away the edges of those things to get underneath and gain access to your system and take it over.\n\nI've been involved with some exercises that the Azure DevOps team did, where they hired a team of professional hackers. This is a red-blue exercise: hire a team of professional hackers, bring them in, and their job—the red team's job—is to hack the system. The blue team's job is to detect them and do something about them, either prevent them from getting in or push them out, or all of those things. The red team always wins. That's the thing you have to realise: eventually, the red team is always going to win. They're going to find a flaw; they're going to find ways to peel up that tape. The only way for you to prevent those things is to not have vulnerable code in the first place, not have vulnerable architectures in the first place. \n\nThe only way to do that is to refactor the heck out of your system to make those things go away and then stop those things from happening in the first place. For example, the Azure DevOps team does these red-blue exercises, and the red team's job is to go around all of the teams in the organisation and show them how the red team was able to use their code to get access to the system and how they could have coded it differently or architected it differently or changed the way they do something in order to prevent hackers from getting in. That's security by design; that's security from the start; that's security baked into the problem.\n\nThis is true for a lot of different facets of software engineering: it's every team member's problem. What the business wants is every team member's problem. How much it's going to cost is every team member's problem. The customer's worries are every team member's problem, and security is every team member's problem. So building security in rather than testing it in, building quality in rather than testing it in, is about shifting left, getting as many of those skills that you need for your context into the hands of the developers that are doing the work.\n\nThere are a bunch of tools out there that can help with that. There’s SonarQube and SonarCloud, which enable your developers to analyse their code and find and hopefully deal with vulnerabilities. There are known vulnerabilities that happen in the code. You can also use GitHub, which has an advanced security protection system that you can use in GitHub or as part of Azure DevOps to again analyse the code, find problems, and poke at it. \n\nIt's why, if you're a developer and you try to upload some code that has a PAT token or something that looks like a security token or a password into the system, you will be prevented from checking in that code, from committing that code, from the repo, from doing a push to production by GitHub and Azure DevOps, because the advanced threat protection is detecting that and preventing it from getting into the system in the first place. Shifting as far left as we possibly can to validate that those things are not going to cause vulnerabilities.\n\nA really common vulnerability is developers on dev machines putting passwords in text files. On dev machines, there are all sorts of vectors that hackers can use. My advice is to help you within the context of shifting left and enabling your teams to have the knowledge and skills they need to be able to prevent and remove as many of these issues as possible before they become a problem."
  },
  {
    "id": "nhkUm6k4Q0A",
    "title": "How to Be an Effective Agile Coach: Agnosticism in Practice",
    "description": "Discover the second essential achievement for aspiring #AgileCoaches with Martin Hinshelwood. Elevate your skills and empower teams to thrive!",
    "captions": ""
  },
  {
    "id": "NKQr8oGO8lg",
    "title": "How much of a competitive edge will the immersive PAL e course deliver to delegates?",
    "description": "Discover how the immersive PAL e-course can enhance your leadership skills and give your organisation a competitive edge in just 7 weeks!",
    "captions": ""
  },
  {
    "id": "nMkit8zBxG0",
    "title": "What is Sprint Planning?",
    "description": "Discover the essentials of sprint planning in Scrum! Join Martin Hinshelwood as he explains its importance and effective strategies for your team.",
    "captions": ""
  },
  {
    "id": "npnQtdLEwQY",
    "title": "Managing Technical Debt to Minimize Costs",
    "description": "Discover how to manage technical debt effectively to reduce costs and enhance product quality. Learn key strategies and real-world examples in this insightful video!",
    "captions": "Technical debt is something that adds a massive cost to your product and the way you do things. But I want to be really clear that I'm including multiple things in technical debt because that's how people see it. So from a technical standpoint, technical debt is like it's the implied cost of future rework because we prioritised speed over long-term design. Right, so that's where we come to a decision point. We have to, we're building a feature and we can either do it the fast way or the right way, and we choose the fast way. Right, that's technical debt. It's usually deliberately incurred, right, with choices that we make. It's either deliberate by the engineer, deliberate by product leadership, or deliberate by the organisation.\n\nThere's also an unintentional technical debt that isn't generally, I mean, in general, people characterise it as technical debt for sure, but technically it's not technical debt. Trying to get my brain around that, but it's poor quality. Poor quality is not technical debt; poor quality is just poor quality. So when people talk about technical debt and they talk about, \"We've got a lot of bugs in the system,\" they're probably not talking about technical debt; they're probably talking about poor quality. But they don't want to call it poor quality because that makes them look bad. \"Why did you deliver poor quality?\" says the CTO. I understand why you made decisions to expedite a feature in order to ship more quickly to our customers, but why did you ship poor quality?\n\nRight, you will generally find that C-suite is not interested in poor quality. They want high quality; they want their product to work, and they want users to be happy. But they would be happy to make design decisions that expedite, right, that get things done faster. So the problem is that, maybe I'm being a bit jaded here, but I would say most engineering groups—I'm using the word group very specifically there, like department, group, perhaps team, depends on your context—they characterise poor quality as technical debt, like it's a choice. I mean, it is a choice. They deliberately didn't do the stuff they needed to do in order to maintain the quality of the product, and that builds up over time.\n\nSo technical debt builds up over time, and poor quality builds up over time. Poor quality is by far your biggest killer. Both create rework, both create higher costs of maintenance, both create slower development. It's harder to add features to your product because you made what we now realise are subpar design decisions. Right, we might have made the right decision at the time, but now it's the wrong decision because the world's changed, or the market's changed, or we shipped a bunch of crap to production, which is what I see quite often. I don't understand it, but I see it quite often with teams and with products that we don't deliver high-quality usable product to production. We deliver barely functioning product to production, and when you build new features on top of new barely functioning features on top of old barely functioning features, you're going to have barely functioning squared, and it starts to become excessive cost.\n\nI use an example in one of my other videos of a company I worked with that had manual testers to 300 coders. That was because of poor quality. Definitely, some of it was to do with technical debt, but most of it was to do with poor quality. It was horrendous. So this has a massive cost. It has so much cost, and it's especially easy for it to happen when you take longer to ship your product to production. Right, so if you have a really long product cycle, let's say two years between releases, then the last six months is what they say is bug fixing. Right, but it's not really; you're out with the sticky tape and the super glue patching it up to a state where it can be shipped. If it's patched up, that means it's not right.\n\nOkay, that some of that might be technical debt, and some of that might be low quality. It's the reason that Windows, for example, is so much more stable now than it ever was in the past. In the past, they used to have a six-year ship cycle, right, and that incurred massive amounts of debt and cost. And then when they came back around at the end to clean things up, some things were now fundamental to the product, and they couldn't clean them up; they had to paper over them. Right, you've got the paper mache over the top making it like a lovely glossy product. But then hackers and nefarious people come along and start peeling back at the edges to get underneath and exploit things in it.\n\nWith the new model that the Windows team work in, where they're delivering continuously to production, every member of every team is in charge of quality or part of that story of quality, of security. They go back and fix things on a continuous basis. They don't build up that technical debt anymore; they keep on top of it. And the way you keep on top of technical debt is to continuously deal with it. You're continuously refactoring; you're continuously re-architecting your product when things happen that you find you need to deal with.\n\nA great example is when the Azure DevOps team ran into an issue that they'd moved to the cloud. They got a bunch of smaller services. One of those services was the profile service, right, where you give it an email address and it comes back with your profile data, like your picture and your friendly name and all of those kind of things. And something went wrong with the profile service, and because the profile service wasn't responding, the entire system didn't work. You couldn't change work items; you couldn't commit code; you couldn't do any of the things that, anytime it called the profile service, you couldn't even view code because it was calling the profile service to get the friendly names for the people that were committing the code, right, in the history and stuff, or the work items. Right, you couldn't see anything in the work items.\n\nSo, but why? Right, if there's something wrong with the profile service, just show the email address. You don't need to go get the friendly name. I, as a user, might go, \"Why is it just showing me the email address?\" But I can still use the system; I can still work. Right? And that was there because they made architectural decisions that were perhaps done for expediency, perhaps done deliberately, but also could be done accidentally. Right? They didn't realise this was going to be a problem in the future. But as soon as they figured that out, they realised this technical debt. We had a production incident because of our design choices, right? This service was too tightly coupled, and we need to figure out what was the cause of the problem. Well, it's this tightly coupling. What do we need to do about it? Well, we need to go re-architect, and anywhere that calls this service, we need to introduce—in this case, it was introduced the circuit breaker pattern. So that when it's not working, it just turns it off and doesn't keep trying to call it. It just stops calling it, and then maybe every ten seconds it goes, \"Is it working? No. Is it working? No. Okay, wait a minute. Is it working? Oh yeah, it's working now,\" so we can reconnect it. Right? That's a circuit breaker pattern.\n\nSo they did that so that they would never have that problem again. It would never happen that the profile service going out would result in another service not working. Right? So that's paying back some of that technical debt that you either deliberately incurred or you found later. Right? You realised you'd got into debt over your head, and you need to fix it. But you need to fix it; you need to go back and refactor it, and there's a cost to that. Right? It's engineering work; it's time; it's possible mistakes; it's reworking tests; it's all of those things to make that work.\n\nAnd then I think a year later, they had a similar problem with another service, so they took the decision at that point to go and introduce the circuit breaker pattern in all the communication across their entire service, and then they never had that problem again. So you're always going to incur technical debt, whether you choose to do it deliberately or you discover it later. You should never have poor quality. You should have an absolute minimum quality bar that's set by the organisation to protect the business, the brand, your employees, and your customers. Right? That's your organisation's—we I would call it a definition of done. Right? What's the minimum quality level required by your business? But from a technical debt perspective, we still need to go back and pay it back, and it pays back dividends when we go fix these things because it pays it back in making it easier for us to add new features to the product. It pays it back because our customers have less issues, so they're happier. They think better of our product, and if they think better of our product, then we tend to make more money. It's a lagging indicator, but we tend to make more money. So managing technical debt minimises your costs and maximises your profit."
  },
  {
    "id": "nTxn_izPBFQ",
    "title": "How good is the APSPO course in helping leaders determine product direction and Why?",
    "description": "Discover how the PSPO-A course empowers managers to transition from project to product leadership, enhancing product vision and team alignment in Agile.",
    "captions": ""
  },
  {
    "id": "Nw0bXiOqu0Q",
    "title": "Why are recessions a great time for organizations to evaluate the opportunity of agile?",
    "description": "Discover why recessions spark a shift towards agile methodologies, enabling organisations to adapt and thrive in turbulent times. Join Martin Hinshelwood!",
    "captions": ""
  },
  {
    "id": "NWVSxs13_0A",
    "title": "PAL In 40 Minutes",
    "description": "Discover the essentials of PAL in just 40 minutes! This video breaks down key concepts and practical insights for a quick yet comprehensive understanding.",
    "captions": ""
  },
  {
    "id": "nxA1Jo4J0dg",
    "title": "Scaled Professaional Scrum (SPS) with Nexus",
    "description": "Master scaling Scrum with the Scaled Professional Scrum (SPS) course using the Nexus framework. Gain skills, tackle challenges, and earn your certification!",
    "captions": ""
  },
  {
    "id": "nY4tmtGKO6I",
    "title": "Why is training such a critical element in a scrummaster journey?",
    "description": "Discover why training is vital for Scrum Masters! Martin Hinshelwood highlights the leadership role and skills needed for success in agile coaching.",
    "captions": "There's lots of things out with Scrum that a Scrum Master needs to understand in order to be as effective as possible. But if you have a brand new Scrum team that have never done Scrum before, they're just starting out. The first thing that a Scrum Master is accountable for is the knowledge that the team have, their understanding of Scrum, their understanding of empiricism, the Scrum values. Teaching those things is really important for a Scrum Master."
  },
  {
    "id": "o-wVeh3CIVI",
    "title": "What is Scrum?",
    "description": "Discover Scrum, an agile framework that empowers product development teams to tackle complex challenges. Join Martin Hinshelwood for insights! #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "o0VJuVhm0pQ",
    "title": "In high competition markets, how does scrum product development help acquire and retain customers?",
    "description": "Unlock Scrum's potential in competitive markets! Discover how it enhances product development, boosts innovation, and drives customer retention. 🚀📈",
    "captions": ""
  },
  {
    "id": "O6rYL3EDUxM",
    "title": "Detecting Agile BS: Lessons from the US Department of Defense",
    "description": "Is your company truly Agile? 🤔 Discover a 6-question test inspired by the U.S. Department of Defense to assess and enhance your Agile practices!",
    "captions": ""
  },
  {
    "id": "o9Qc_NLmtok",
    "title": "8-Week Immersive Learning Course in 60 Seconds",
    "description": "Discover NKDAgility's immersive 8-week Scrum training! Engage in practical learning, reflections, and innovative assignments. Book now for a transformative experience!",
    "captions": ""
  },
  {
    "id": "oBnvr7vOkg8",
    "title": "How does someone become an Agile consultant?",
    "description": "Discover how to become a powerful agile consultant with insights from Martin Hinshelwood. Transform organisations through effective coaching and training!",
    "captions": ""
  },
  {
    "id": "OCJuDfc-gnc",
    "title": "25th March 2020 - Office Hours \\ Ask me Anything",
    "description": "Join Martin, a Scrum Trainer and Microsoft MVP, for an engaging Q&A on DevOps and Agility. Ask anything and get expert insights!",
    "captions": ""
  },
  {
    "id": "OFUsZq0TKoo",
    "title": "What you will be able to do after the PPDV course",
    "description": "Unlock your potential with the PPDV course! Learn essential skills for product discovery and validation. Register now! #agile #scrum #productmanagement",
    "captions": "The course will definitely change your product development game. First point, you will be able to increase user value. Why? Because you are going to deliberately design experiments to better understand user needs and find effective ways how to address them. So we believe this is the best way to increase user value.\n\nSecond point, because you will be able to increase user value and have this process more conscious with a lot of learning, you are definitely on your path to decrease waste. As a result, you will also improve return on investment when it comes to what the team is working on. You will invest based on evidence; you can adjust your budgeting based on experiments, based on the results, based on the data that you get. And at the end of the day, thanks to that, you can embrace the agility principle of simplicity. So in that process, you will also be maximising the amount of work that is creating little or no value.\n\nAnother important point: we, as human beings, really often jump into solution space immediately or just by briefly presenting the problem. In this class, we want to unlock creativity by thinking in problems and showing a different perspective on that. So hold your horses and let's try different experiments to make sure that we truly understand what the problem is. You might be amazed how many different solutions may be finally created when we first pay a lot of attention to understanding the problem.\n\nAnother point: some of the customers, some of the teams, companies complain when it comes to collaboration with stakeholders. With this class, you actually might be equipped with some tools and ideas on how to improve collaboration between the teams and between the stakeholders. This collaboration may change completely because if you invite others and show them this different perspective, your product development may start with using data, not opinions. In that case, it might also be easier for you to get a green light from important stakeholders, but also to show them that certain paths, certain ideas are not worth investing in.\n\nFinally, I believe it's also a class that is improving our toolbox, our product development toolbox. Because after the class, you will have a bunch of valuable practices, techniques, and ideas when it comes to discovery and validation, and you can start using them immediately after you leave the class. So it might be a great beginning of changes that you will start very soon, just after you say goodbye in our class."
  },
  {
    "id": "oHH_ES7fNWY",
    "title": "Sending email from Office 365 for TFS 2013",
    "description": "Learn how to configure email notifications in TFS 2013 using Office 365. Enhance your app's communication effortlessly! More at nakedalm.com/blog.",
    "captions": ""
  },
  {
    "id": "oiIf2vdqgg0",
    "title": "What is a product vision?",
    "description": "Discover the essence of a product vision in Scrum! Join Martin Hinshelwood as he explains its importance and how to create one for your team.",
    "captions": ""
  },
  {
    "id": "Oj0ybFF12Rw",
    "title": "Quotes: Don't scale Scrum! Pragmatic or defeatist?",
    "description": "Explore the debate: Is advising against scaling Scrum pragmatic wisdom or a defeatist mindset? Join the conversation on Agile coaching! #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "oKZ9bbESCok",
    "title": "Say-Do Metrics: Avoiding Agile Banditry in Your Organization",
    "description": "Uncover the truth behind say-do metrics in Agile! Join Martin as he reveals pitfalls and shares insights for genuine outcomes. 🚀📊 #Agile #Transparency",
    "captions": "One of the agile practices that puts us clearly and explicitly in the category of agile banditry is using say-do metrics. That's metrics where you're looking at what people say they were going to do and then what they actually did. A great example of that is, oh, I guess my favourite example is from an organisation that I worked with many years ago. The head of PMO brought me into his office to show me some of the metrics that they presented up to leadership in the organisation. For each of the projects, this was many years ago, each of the projects that they had underway, I think there were five projects they had underway, they had an original estimate versus actual. That's the quintessential say-do, original estimate and actuals for each of the projects, and they were in the thousands of hours, right, like 5,000 hours.\n\nSomething I noticed right away when he showed me this presentation, it was a presentation to show the leadership, was that of the five projects, all of them were within 20%. But if you know your BCKs and you know your statistics, you'll probably know from the Chaos Report of the Standish Group that 65% of the features that we think we're going to build change during the life of the project. So how could it possibly be only a 20% deviation between the amount of time we think it's going to take and the amount of time actually going to take? So that was my first clue that something was up.\n\nMy second clue was that three of the projects were within 15%, two of them were within 10%, and then I noticed that one project that said 5,232 hours original estimate, 5,232 hours actuals. I just turned the graph around, pointed at that one and said, \"But this is BS. How could you possibly have these numbers be the same?\" He said, \"Well, right, you know there's something bad coming when somebody does that well.\" Last year, we created this report with what happened, and we gave it to leadership, and they had a tantrum and threw their toys out the pram and shouted at us, and made our lives a misery. So this year, we made a change to the system and we allowed project managers to make a change request to their original estimate. That project manager just got his change request in just before we completed the report, before the deadline. So the original estimate had been changed more than once in order to get the graphs to look like they did. \n\nSo they're going to go and present this to leadership, and leadership is potentially going to make decisions on what they fund, what they don't fund, based on this type of data, this data that is complete fiction. It's just complete fiction. So you don't want that in organisations. If you have a monitor say-do metrics, there are many other types of say-do metrics, but the most common one is original estimate and actuals. Monitoring say-do metrics reduces psychological safety. The PMO of a big organisation didn't feel safe enough to show leadership the real data; they had to create vanity metrics in order to make them happy.\n\nWe tend to focus on output rather than outcome. Well, you said you were going to deliver 10 things, but you only actually delivered nine things. You suck! Whereas in actual fact, we delivered nine of the most valuable things. Wasn't that better if we delivered nine things that were more valuable than the 10 things that were asked for? Or you delivered zero of the things we asked. I remember being at an MVP Summit at Microsoft, where they invited us to come and talk about the product. The year before, we’d done a whole bunch of stats and learnings on what are the most valuable features that we as MVPs believe as your DevOps needs as a product. I think it was TFS service at the time. What are the cool features we need? We did days, like five days of figuring out what that was and came up with a list of here's the top five things that we believe all of our customers need in the product.\n\nThe very first thing, the next year when Brian Harry got up to do his keynote, starting presentation to kick the next Summit off, he said, \"Here's a list of the five things that you said were the best things we could build, and I'll tell you now we've built none of them. Here's what we did build.\" Instead of building the things that we thought were the most valuable, he went off and totally blew our socks off with all the things he did build that were much more valuable to our customers. If we'd held them to the say-do metric, they delivered nothing that we asked for, and that is absolutely not the case. \n\nSo don't focus on output over outcome. You want to be focusing on the outcomes, what it is you're trying to achieve. That overemphasis that comes from it on estimation is key to that negative feeling that people have when you monitor them with say-do metrics. Just stop doing say-do metrics. Don't be a bandit and give up on that agile banditry of say-do metrics. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you or help you find a consultant or expert who can set up a no-obligation consultation using the links below. And don't forget to like and subscribe if you enjoyed this video."
  },
  {
    "id": "olryF91pOEY",
    "title": "Can organisations run an Applying Professional Scrum workshop? How would that help them?",
    "description": "Discover how an Applying Professional Scrum workshop can enhance your team's effectiveness and align with agile values for better outcomes.",
    "captions": ""
  },
  {
    "id": "OlzXHZihQzI",
    "title": "Unlocking the Power of Immersive Learning in Agile",
    "description": "Discover 5 reasons why immersive learning transforms Scrum training for students! Join us for insights that inspire and elevate your Agile journey. #Scrum #Agile",
    "captions": "One of the great things about immersive learning is that we specifically give students the ability to adapt their mental models. It's not something we force upon them, or we can actually, you know, you can lead a horse to water, but you can't make it drink, right? You have to want to change your mental models. But the new format, because they're doing things in their organisation, they're seeing how it works, they're seeing the benefits and the negatives. They're hopefully able to change their whole mental model so that they make different choices in the future, and they're able to assimilate these core agile practices into the way they do things."
  },
  {
    "id": "OMlLiLkCmMY",
    "title": " shorts 7 Virtues of Agile. Chastity",
    "description": "Discover the first virtue of Agile: Chastity. Join Martin Hinshelwood in this insightful #shorts video and unlock your team's potential!",
    "captions": "You need to think about how you're going to change your organisation. You need to involve the people in your organisation in that story; otherwise, they're not going to be interested in what it is you're trying to achieve. Nobody really cares about your goals; they care about their own goals. The way you get them to care about your goals is you make their goals your goals."
  },
  {
    "id": "omsEiYqX-Dk",
    "title": "How much competitive advantage does organizational agility offer versus traditional management?",
    "description": "Unlock the power of organizational agility! Discover how it outshines traditional management for swift market response and team empowerment. 🚀📈",
    "captions": ""
  },
  {
    "id": "OWvCS3xb7pQ",
    "title": "What excites you most about the PAL e immersive learning journey for delegates?",
    "description": "Join Joanna Plaskonka as she shares her excitement about the immersive 7-week PAL-E course, transforming Agile learning for delegates!",
    "captions": ""
  },
  {
    "id": "OyeZgnqESKE",
    "title": "Why Immersive Learning Keeps Scrum Students Excited and Engaged",
    "description": "Discover why immersive learning transforms Scrum training! Join us for Part 2 as we explore the second reason to love this engaging experience. #Shorts",
    "captions": "Another reason I love the immersive learning experience for students is because it maintains a level of excitement of newness. There are new things to be discovered each session, and I find that because people are able to try things in their organisation, they feel excited to come every week. It's not a trial; it's a discovery of new topics, new things. And because they get time to assimilate it, they keep coming back around for continuous learning."
  },
  {
    "id": "OZt-5iszx-I",
    "title": "Turning User Feedback into Actionable Work: A Guide to Maximizing Product Value",
    "description": "Unlock the secrets of Agile Product Management! Discover how short feedback loops can enhance product value and customer satisfaction in under a month.",
    "captions": "Is feedback from users turned into concrete work items for teams on timelines shorter than one month? We need to engage with our users. We need to take the feedback that they give us and turn it into something that we can actually action in a very short period of time. If we don't, then we're probably not very agile. \n\nHow long does it take for you to get feedback from your customers into your backlog, changing those work items that you're delivering so that you can deliver something else, something better, or more of the same? Maximise the value that you deliver in your product by collecting feedback from your users and doing something with it."
  },
  {
    "id": "P2UnYGAqJMI",
    "title": "The Pitfalls of Agile Burndowns: Stop Being Agile Bandits",
    "description": "Discover the 4th kind of Agile bandit with Martin Hinshelwood! Uncover insights on burndown charts and enhance your Agile journey. #Agile #Scrum #Shorts",
    "captions": "Burnd downs are a key indicator of agile banditry going on. Burnd downs encourage teams to plan too far in the future. Whether it's a Sprint burndown or a product burndown, we're planning too far ahead if we have enough data to understand where we currently are and where we're eventually going in number of items. This is why we talk about goals and D action in Scrum and agile. We want to be focused on those things, which means we probably don't understand the details and don't have enough information to even create a burndown. Don't be agile bandits."
  },
  {
    "id": "p3D5RjM5grA",
    "title": "Ep 006 - Live Virtual Retrospective On PAL-e with Russell Miller",
    "description": "Join Russell Miller and me as we discuss our experience co-teaching a Professional Agile Leadership class online, exploring tech choices and future improvements!",
    "captions": ""
  },
  {
    "id": "p9OhFJ5Ojy4",
    "title": "Agile in Nigeria 2020 - The Inevitability of change",
    "description": "Explore the essence of agility in Nigeria 2020: it's an evolution, not a transformation. Embrace continuous change for lasting organisational growth.",
    "captions": ""
  },
  {
    "id": "PaUciBmqCsU",
    "title": "Understanding the Power of Kanban in Scrum",
    "description": "Discover why the Kanban vs. Scrum debate is misguided! Learn how Kanban can enhance your Scrum process and optimise any workflow for superior results.",
    "captions": "If you're having a conversation about Caman v Scrum, you probably don't understand Caman very well. Caman is a strategy that you can apply to any system, any process, to gain deeper insights and understandings of that system and process so that you can optimize it to increase the flow of value through that system. \n\nSo it's not Scrum, it's Caman. It's Scrum and Caman always. If you're using another system, it's that system and Caman always. \n\nSo you can see what's going on. Caman is a tool to increase transparency for any system, for any type of work, in any situation, and it will always add value to the conversation."
  },
  {
    "id": "pazZ3mW5VHM",
    "title": "Most Common Thing You Hear in a PSPO Course?",
    "description": "Discover Simon Reindl's impact on Agile in this insightful short! Join Martin Hinshelwood as he highlights key figures in Scrum and Agile. #Agile #Scrum",
    "captions": ""
  },
  {
    "id": "pDAL84mht3Y",
    "title": "7 signs of the agile apocalypse. Plague",
    "description": "Discover the 7 signs of the #Agile apocalypse in this short video! Learn how interconnected environments can lead to disaster. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "phv_2Bv2PrA",
    "title": "What is Agile?",
    "description": "Discover how Agile philosophy can transform your personal and professional life. Join us for insights on growth, teamwork, and continuous improvement!",
    "captions": ""
  },
  {
    "id": "PIoyu9N2QaM",
    "title": "What is the difference between a newbie scrum master and a professional Scrum Master?",
    "description": "Discover the key differences between newbie and seasoned Scrum Masters with Agile Coach Martin. Elevate your Scrum skills and insights today! 🌟🚀",
    "captions": ""
  },
  {
    "id": "PmMqrL42FUg",
    "title": "7 deadly sins of Agile - Sloth UPDATED",
    "description": "Discover the 7 deadly sins of Agile in our updated video! Don't miss the full-length version here: https://youtu.be/uCFIW_lEFuc.",
    "captions": ""
  },
  {
    "id": "Po58JnxjX7M",
    "title": "Before You Call Yourself an Agile Coach: The Importance of Real Experience",
    "description": "Discover the first of 5 essential achievements to become an #AgileCoach with Martin Hinshelwood. Elevate your coaching journey today! #shorts #agile",
    "captions": ""
  },
  {
    "id": "pP8AnHBZEXc",
    "title": "27th May 2020 - Office Hours \\ Ask Me Anything",
    "description": "Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!",
    "captions": ""
  },
  {
    "id": "Psc6nDD7Q9g",
    "title": "Maximizing Transparency and Improvement in Software Engineering with Kanban",
    "description": "Unlock the power of Kanban! Discover how it enhances software engineering processes, boosts efficiency, and fosters team collaboration. Watch now!",
    "captions": "Gaining an understanding of your existing process, the system within which you're working, is absolutely crucial in software engineering. We have really high variance between what we think is going to happen and what actually happens. \n\nUsing Kanban, it allows you to observe your system, have metrics that help you understand your system, and visualisations that show your system. This enables you, as the team, as the people using the system, to understand the different things that are going on and look for patterns, places for improvement, and places that are awesome. \n\nIt also enables you to maximise transparency of the work that you're doing and increase your ability to change, right? Because now you have agreed what all those things are and set up continuous deliveries."
  },
  {
    "id": "pU57BrP94-8",
    "title": "How will the immersive learning experience help coach people on the job?",
    "description": "Discover how immersive learning transforms #scrum training into practical on-the-job coaching, enhancing skills and boosting team performance.",
    "captions": ""
  },
  {
    "id": "Puz2wSg7UmE",
    "title": "How to Measure Your Organization's Ability to Improve Value Through Innovation",
    "description": "Discover 5 compelling reasons to integrate Evidence-Based Management (EBM) into your agile environment and unlock your organisation's innovation potential! #EBM #Agile",
    "captions": "How do you know how effective your organisation is at improving value? In order to do that, you need to understand your organisational capability, and part of that is understanding your ability to innovate. Evidence-based management has some key example metrics that you might use within the context of monitoring your ability to innovate. If you're building software products, you might be looking at your active branches, number of active branches. You might be looking at technical debt on any product. You might be looking at innovation rate, percentage of time you spend innovating rather than struggling with complexity. But there are plenty of other metrics that you might choose from in that space. You need to understand how effective your organisation is at improving value."
  },
  {
    "id": "pVPzgsemxEY",
    "title": "The Power of Kaizen: Continuous Improvement in Scrum and Beyond",
    "description": "Unlock the power of Kaizen in Kanban! Discover how continuous improvement can elevate your workflows and drive optimal results. Embrace the journey!",
    "captions": "We love taking Japanese words and using them not quite right for their meaning. But one of the key phrases that we use all the time in Kamban is Kaizen. Kaizen is really just about continuous improvement. It's keeping changing things, hopefully for the better, because you're observing improvements in the system or measuring improvements in the system. \n\nSo the idea of continuous improvement, continuous change, and continuous optimisation of your process or your system is generally referred to in the Kamban community as Kaizen. Kaizen's not limited to Kaizen; it can be used absolutely anywhere you like. We should always be continuously striving for anything that we do to be a little bit better every time we do it, and that continuous nature is what we mean by Kaizen."
  },
  {
    "id": "pw_8gbaWZC4",
    "title": "How Top Teams Use Pull Systems!",
    "description": "Unlock the power of Kanban! Discover strategies to optimise pull systems, enhance workflow, and drive continuous improvement in your team.",
    "captions": "One of the key aspects of a Caman strategy is improving the system, improving your workflow. So after you've defined what your workflow is, you've written down how you're going to work your system, and you've started actively monitoring the work that is underway, you'll hopefully start seeing patterns. If we're using the metrics from the flow metrics from a Candan strategy, then we should be able to see when things are sitting around for too long and they're too old. We should be able to see patterns of delivery. We should be able to see groupings of things that are perhaps not quite where we expect them to be on the graphs that we might use to visualize that data. \n\nAnd that allows us to ask more interesting questions. It allows us to lift the carpet and see in the dark. See in the dark, that's a great Cban strategy. It's like a torch shining the light in the darkness of your system to see where things are broken, where things aren't working as optimally as they could be, to see what's going on where it would be opaque normally. This is especially true for teams doing Scrum. Scrum has no metrics at all, and the metrics that I would always recommend would be the Caman flow metrics, right? Because Cban is designed as something that can be used to monitor any system. It's a monitoring tool; it's not the system itself. It's the tool you use to observe the system. \n\nThink about if you were building software and you wanted to understand which features of your product your customers were using so that you could choose which parts of the product to continue to invest in and which not. How would you do that? Well, you'd need to put some hooks into your application and collect a bunch of telemetry and then analyze the data, right? So you can see what's going on. You need to increase transparency, and a Candan strategy is that tool for any system. So regardless of whether Scrum is your system, that might be your starting point, or that might be where you jump to, right? You might start from over here, but you jump to Scrum, or you've got a system that you just made up, right? That's totally cool. That's what lots of people do. \n\nWe have a system that we just made up, then we can use Caman to gain insights and understanding on what's going on in this system by monitoring it, by collecting some telemetry on how our work happens so that we can see better what's going on. I don't understand why teams try and manage their system from a position of opacity, right? They can't see what's going on; they're looking into the fog of war, and they can't see the problems. A Cban strategy, and particularly the flow metrics part of a Candan strategy and the visualization of the work, remove that fog of war so you can see what's going on. You can actually see when things aren't working properly, and it's obvious. \n\nLook, here's a problem here; I can see it. It's visually triggering my brain, and I can see it. So hopefully, being able to see all these problems will encourage you to actually do something, actually make a change. And we're effectively not implementing a Candan strategy if we're not improving the workflow, right? Improving and making changes to the system in order to see the numbers change in a more positive or more likable manner, right? So Caman supports continuous improvement by giving you the torch to shine on the problem. The view through, it's your radar that lets you see through the fog of war and be able to make better decisions. \n\nIf you're struggling to create a pool-based system of work, then we can help you. We provide world-class Candan training from Pro Caman, as well as consulting and coaching for teams trying to implement a Candan strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and have Cbang classes from Scrum.org as well."
  },
  {
    "id": "pyk0CfSobzM",
    "title": "How does a Scrum team estimate what can be delivered in a Sprint?",
    "description": "Master Sprint estimation in Scrum! Join Martin as he navigates the challenges of creative tasks and effective planning. Perfect for agile enthusiasts! 🚀",
    "captions": ""
  },
  {
    "id": "PZa77csy5r8",
    "title": "Technical Debt Management for Long Term Quality",
    "description": "Unlock long-term productivity by mastering technical debt! Join Martin Hinshelwood as he shares insights and strategies from Azure DevOps.",
    "captions": "Technical debt is a huge problem for organisations. I want to quickly define technical debt. Technical debt is future cost that you incur when you or your team prioritise quick short-term solutions over more robust long-term approaches. Right, so anytime you make a choice to do something fast but wrong because you need it fast, you're knowingly introducing technical debt. You can also unknowingly introduce technical debt, i.e., we made some architectural choices. They were good choices at the time, but now they're no longer good choices. Technical debt can appear over time.\n\nI'm thinking of a transactions system, and we supported X number of transactions per second, and our platform of choice was reasonably priced and was able to support well beyond what we thought we were going to transact. But now we're transacting a lot more than that, and we're reaching the limits of the system that we chose. A great example of that is the Azure DevOps team when they originally envisaged work item tracking fields. A work item was a row in a database, and fields were a column. Those of you who are software engineers have already figured out what the problem would be with that in that you can only have 1024 columns in a SQL database. \n\nSo they not quickly, but they did hit limitations on the number of columns that you could have for custom fields because who would have more than a thousand fields on a work item? But yeah, people do. They do exist, and people do that, and it was totally within the system. So they thought, \"We'll never have a thousand fields,\" or somebody made that decision, just like the two-digit date decision back in the day. So they had a lot of work to go back and refactor, not just refactor the system but write the capabilities to refactor the data on upgrade for their customers into a format where each field was a row in a database rather than in a column. \n\nSo then you have unlimited capability for fields and data, and those types of decisions, either knowingly made decisions that result in something that's not quite the way it needs to be or unknown ones, are where most technical debt comes from. There are other issues that people call technical debt which aren't necessarily technical debt, but most people lump it all together and say technical debt. I think I often do as well, and that's I've written bad code and shipped it. That's not technical debt; that's incompetence. \n\nRight, so within the context of a competent team, there's known technical debt and unknown technical debt. But there's another thing that we call technical debt, which is just shipping bad code, making poor choices, knowing that they're poor choices, and not doing anything about it. Right? Shipping bad code. Stop shipping bad code would be the way you pay that one back. But for technical debt, you need to pay it back. You need to prioritise paying back that technical debt. Think of it more as an unhedged fund rather than a debt like a credit card. \n\nMost debt is secured against something, secured against an asset. If you stop paying your mortgage, then the bank comes and repossesses your house and gets their money back, right? And maybe you get some leftovers because you paid some of your mortgage. But who's ensuring your product quality? Who's ensuring your product against your technical debt? There's no insurance; it's uninsured from that perspective. Nobody can magically come along and pay back all the debt. It's not insured at all, or sell something and pay back. We claim an asset, so it's something you're going to have to deal with, and you can't let it get out of control.\n\nAnd there's a lot of unknown technical debt. I mean, that's like, I mean, I use the Azure DevOps team a lot as an example, but they'd been a waterfall team for many years, shipping once every two years. And then they moved to a more continuous delivery three-week model, and they found that they made lots of poor decisions, right? That weren't necessarily poor decisions within the context of two years, but they couldn't really see the impact of the technical debt, the choices that they'd made, deliberate and undeliberate, right, on their ability to deliver product and their ability to deliver value.\n\nBut I have a graph of, I think it's 2010 through to 2018 for that product team, so eight years of development, and they effectively go by moving to continuous delivery, moving to three-week sprints, moving to that faster cycle from a two-yearly cycle and running into issues with that. And every issue they're running into, paying it back, right? Paying back the reason that they made those choices, which were perhaps valid reasons at the time, but you still need to pay it back. It doesn't matter whether it was a valid reason or not. \n\nAnd paying it back and doing the work, they actually went from 25 features to production each year in 2010 to something like 360 features to production in 2018. So by focusing on paying back their technical debt, enabling their engineers to close the feedback loops, then shorten the feedback loops, three ways of DevOps, right? Closing the feedback loops first, then shortening them. And that act of shortening the feedback loops can massively increase the amount of value that you can deliver long term. \n\nAnd that's the value of paying back technical debt, of managing technical debt well, is that you can go from removing those limitations to maximising the value that you deliver in your product with the same number of people. That was the Azure DevOps team literally went from 25 features to production each year in 2010, worked very hard to pay back technical debt, and were able to, even in the first year of focusing on paying back technical debt to get their new way of working up and running, they went from 25 features to production to 68 features to production within that one year. \n\nAnd they weren't even focused on delivering more features; they were focused on, \"Let's deal with our crap,\" and \"Let's figure out how we deal with those problems.\" And they still delivered more features. That's the benefit of paying back technical debt. That's the benefit of having a slick, easy system to add features to your product, and that's what everybody needs. Don't manage technical debt; pay it back."
  },
  {
    "id": "Q2Fo3sM6BVo",
    "title": "The Scrum Framework!",
    "description": "Discover the Scrum Framework with Martin Hinshelwood! Learn its core values, accountabilities, artefacts, and events to tackle complex problems effectively.",
    "captions": ""
  },
  {
    "id": "Q46T5DYVKqQ",
    "title": "What is Empiricism",
    "description": "Discover the essence of empiricism in Scrum! Join Martin Hinshelwood as he explains how it empowers teams to learn and adapt in complexity. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "QBX7dnUBzo8",
    "title": "Addressing Systemic Issues in Agile Organizations",
    "description": "Unlock the secrets to startup success! Discover how agile techniques can transform your business and boost team performance in this must-watch video.",
    "captions": "Organisations and people are too scared to address the real problem, which is the way the system works. Right, so they're focusing on the little bits and pieces around the edge. Oh, let's push responsibility down the organisation for some things but not other things. Let's, uh, what else do they do? Let's have people run these ceremonies, right? Uh, we're going to do a daily, we're going to have a daily, that'll fix everything, right? But these are the mechanisms, not the thing that you're trying to achieve. You're measuring the wrong thing if you think that having those things is going to result in a different way of doing things. You should be measuring return on investment. You should be measuring, uh, um, a profit per team member, right? Uh, you should be looking at your feedback loops and your cost to deliver and your meantime to repair and things, your time to learn, right? Closing those feedback loops. You should be measuring, um, what you don't know, right? What does your product not do that it could do? That is a market opportunity. And where do you go looking for that information? How do you, as a business, find that? This stuff is hard, and 70% of all startups, right? 70% of all ideas that people have are going to fail. Easy. 70% of ideas are going to fail. In fact, 70% of startups, I bet it's a much higher percentage of ideas because not all ideas manage to convince somebody to give them the money to start the idea in the first place, right? Ideas are the most nebulous one, and if you're building products and you're trying to capture market, you have to be focused on what helps us as a business be as effective as we can be within the context of those markets. And that doesn't come, um, from not having the courage to admit that you need to change more things.\n\nSo the common one that I see in organisations is that an agile coach, uh, comes in. I've been, I've been, this, this, I wasn't an agile coach at the time, uh, but my biggest regret, this is my biggest regret in consulting. It's from years ago. I was still wet behind the ears. I wasn't, uh, a very sophisticated, uh, consultant at the time. Um, this was probably nearly 10 years ago, and a CEO pulled me aside and basically said, \"Look, we've just gone through a major reorganisation.\" Um, and they'd reorganised into silos, by the way, just different sort of silos. And he said, \"Um, all the things that you're talking about, I was talking about DevOps, seem to be different from the way we've organised ourselves. Do we need to throw all of that out?\" Because it was very expensive, right, to do that reorg. Reorgs are expensive, or else don't do reorgs, it's expensive. Um, and do we need to change the way we do things completely? And I said, \"No, you can change slowly and iteratively towards the thing you want to achieve.\" And that was a bad answer. The right answer would have been, \"Yeah, rip that Band-Aid off, disinfect the wound that you just created by changing your organisation to even more silos, right, in the wrong direction, and move faster and with less constant pain and suffering and haemorrhaging of money to a resolution to a different system that enabled you to be more successful.\" \n\nAnd that is the difficulty, the difficult call that lots of organisations have is that fundamentally, the reason you can't take advantage of agile, the reason agile is so difficult, the reason you've got agile atrophy in your organisation, that people are just like, \"I can't be B, what? Don't mention agile to me anymore,\" that kind of attitude is because you've not addressed the changes that need to happen in the way you do business in order for agile to be successful. It isn't just magically successful. You need to fundamentally change the way you do business at every level in your organisation in order to move towards what people are calling agility, right? This agile movement, big A agile or little a agile, but really it's about your organisation systematically and continuously improving its effectiveness in sometimes small jumps, but sometimes you need big jumps to improve that effectiveness. And do you have the courage to make that change? If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. Uh, we also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "qEaiA_m8Vyg",
    "title": "Why have you decided to go all in on immersive learning experiences?",
    "description": "Discover how immersive learning transforms training into a journey of engagement and growth with Martin! Embrace a new way to learn. 🌱📚",
    "captions": ""
  },
  {
    "id": "QgPlMxGNIzs",
    "title": "How do you think Agile is evolving since its inception in 2001?",
    "description": "Discover the evolution of Agile since 2001, its challenges, and the future of work in dynamic environments. Join Martin on this insightful journey! 🌐🚀",
    "captions": ""
  },
  {
    "id": "QGXlCm_B5zA",
    "title": "What will you learn on the PSM II course?",
    "description": "Unlock your potential as a Scrum Master! Discover key skills and insights from the PSM II course to elevate your career and enhance team performance.",
    "captions": ""
  },
  {
    "id": "QI3oE9IUc6E",
    "title": "How effectively does an APS prepare a team to do a solid, professional Scrum?",
    "description": "Discover how the APS course empowers scrum teams to excel in professional scrum practices. Join Martin Hinshelwood for insights on effective training!",
    "captions": ""
  },
  {
    "id": "Qko_93YAV70",
    "title": "Kanban Vs Scrum",
    "description": "Explore the key differences between Kanban and Scrum in this insightful video. Discover which Agile framework suits your project best! #agile #scrum #kanban",
    "captions": "If you're having a conversation about Caman vs Scrum, you probably don't understand Caman very well. Caman is a strategy that you can apply to any system, any process, to gain deeper insights and understandings of that system and process so that you can optimize it to increase the flow of value through that system. So it's not Scrum, it's Caman. It's Scrum and Caman always. If you're using another system, it's that system and Caman always. \n\nSo you can see what's going on. Caman is a tool to increase transparency for any system, for any type of work, in any situation, and it will always add value to the conversation."
  },
  {
    "id": "qnGFctaLgVM",
    "title": "Why do you trust Russell to deliver the PSPO course for NKD Agility?",
    "description": "Discover why Martin Hinshelwood trusts Russell as a top Professional Scrum Trainer for NKD Agility's PSPO course. #Agile #Scrum #Training",
    "captions": ""
  },
  {
    "id": "qNJ2suVslzE",
    "title": "Taming Scope Creep with Agile",
    "description": "Master scope creep with Agile! Join Martin Hinshelwood as he reveals strategies to focus on value delivery and adapt to change in project management.",
    "captions": "If you're struggling with scope creep, it's probably because you're using practices and philosophies that were developed within the context of low variance. Very little changes all the time, so you can create a plan, you can create your Gantt chart, you can run the plan, and that's how you're managing risk. But when your variance—the difference between what you think's going to happen and what actually happens—is bigger than what you thought in the first place, more than 50% variance, those tools no longer work, and we start having problems with scope creep. We start to not be in control of what's going on, and that shift towards product delivery, a product operating model, is that move away from those old ideas of scope and deadlines. \n\nThere are other tools that we use to have the same outcome because the outcome you're looking for is a usable, working product in the hands of your customers so that you're delivering value, maximising the value of that item. But those old tools are no longer working for us. If you're having a conversation about scope creep, then we're probably having the wrong conversation because it needs to be okay for the scope to change. The market doesn't stay still. If you're delivering a product into your organisation or into a market, whether it's B2B or B2C or internal, then the ecosystem within which you're delivering that product is changing over time. \n\nIt's not only changing over time continuously, but that means that what you need is changing continuously, which means that what you have to do is changing continuously. It might even change in response to something you show the stakeholders. You show the customers, you show the users a capability, and they're like, \"Oh yeah, that's awesome! Don't spend any more time on that. This is the next most important thing.\" Suddenly, we're shifting direction, and maybe there's a hundred things in your list of things to do that you know you don't need. \n\nSo that scope creep is the good way where we have less scope to deal with, but also you might show them something, and they're like, \"Oh, that's not what I want. I need something completely different.\" Suddenly, you've got a whole bunch of additional work. That ebb and flow of what needs to be is the reason that Agile was created. The lean movement came out of that story of ebb and flow of delivering products. The Lean Toyota system and Agile was the adaptation of that story into the context of software delivery, which is slightly different. \n\nIt's much easier to change software; it's much easier to iterate on software. You can ship a new version. It's difficult to ship a new car to the same customer because you want to change something than it is to do it for software. So this idea, if we want to be on time and on budget, then we need to consider scope to be not the thing we're looking for. We're looking for value. The thing we're focusing on is delivering value to our customers, and if we're delivering value, we're doing the right thing. \n\nWe manage budget and time differently within the context of Agile. If we have a clear product vision, a clear direction on where we're going, and a well-defined product backlog that we know is going to change constantly, then we can much more effectively plan what we're doing and change direction as needed without worrying about scope."
  },
  {
    "id": "qnWVeumTKcE",
    "title": "A view into the PSM Training from Scrum.org",
    "description": "Explore the PSM Training from Scrum.org in this insightful video, showcasing key concepts and practices to enhance your Scrum mastery.",
    "captions": ""
  },
  {
    "id": "QpK99s9uheM",
    "title": "Is a scrum master an agile project manager?",
    "description": "Discover the difference between a Scrum Master and an Agile Project Manager in this insightful video by Martin Hinshelwood. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "qpo4Ru1VVZE",
    "title": "DevOps Migration. Compatibility Problems",
    "description": "Navigate compatibility challenges in migrating from TFS to Azure DevOps. Learn to manage customisations, data integrity, and on-prem build agents effectively!",
    "captions": "If you're worried about compatibility problems once you've moved from TFS on-prem to Azure DevOps, I probably really wouldn't worry that much about it. Everything that works on-prem works in Azure DevOps. It's more the other way; not everything that works in Azure DevOps works on-prem, where there's more likely to be compatibility issues. \n\nBut there are certainly, if you're on an older version of Team Foundation Server, we did a migration recently for TFS 2010, and they had some customisations that they built. They had some customisations that they bought that are just no longer a thing. They're no longer a thing in newer versions of on-prem TFS, so we had to plan around what they were going to do differently when they moved to the new location. \n\nRight, because even just an upgrade of TFS, they're going to lose that functionality, and they have to upgrade. TFS 2010, I think, was out of support five years ago, maybe longer. So they were really hurting from that perspective. They need to be in compliance if you want support, data integrity. These are the systems that hold your company's IP. \n\nRight, you need the code to be able to build your product, and that needs to be safe and secure. This is your organisational asset. If you have any building of software going on, this is a very expensive asset to work on, so you need to make sure that it all works. \n\nAs you move up to the cloud, you will still have a bunch of on-prem stuff going on. You probably have on-prem build agents; you probably have other things locally. Those can largely just continue to function as is. The agents will just connect to Azure DevOps in the cloud, and it's a one-way system. So the agents talk to the cloud; the cloud never talks to the agent, so you don't need to punch any holes through your firewall. \n\nAnd then you've got to consider all of your own in-house customisations that you've created. It's very easy and has been for 14, 15 years to create extensions, plugins, and other systems that bounce off TFS. So you'll need to take into consideration what they are going to do in the new model of working with the cloud. These are all things that you can just resolve; they're not that difficult."
  },
  {
    "id": "QQA9coiM4fk",
    "title": "DevOps Consulting Overview",
    "description": "Discover how DevOps consulting can transform your software delivery with insights from expert Martin Hinshelwood. Elevate your agile journey today!",
    "captions": ""
  },
  {
    "id": "qrEqX_5FWM8",
    "title": "Overview of the 8-week Immersive learning experience",
    "description": "Discover the power of immersive learning in Scrum and project management! Join Martin as he explores real-world applications and transformative training. 🌍✨",
    "captions": ""
  },
  {
    "id": "qRHzl4PieKA",
    "title": "Are Your Teams Empowered to Change Requirements Based on User Feedback? If Not, You’re Probably Not Very Agile",
    "description": "Unlock the secrets of Agile Product Management! Discover how team empowerment and user feedback drive success in this insightful video. 💡",
    "captions": "Are teams empowered to change the requirements based on user feedback? If not, then you're probably not very agile. We need to be engaging with the people that are building the product, and as we understand the work better, as we understand different ways to do things, as we gain more knowledge and context about the product and the market and what it is we're trying to achieve, we need to be able to update the backlog, update the requirements, change them, delete them as well. If we're not doing that, then we're not going to be able to maximize the value that we deliver to our customers. The people doing the work, the people creating the product, are really important to that story, and their input is just as important as the stakeholders. Are you maximizing the value that you deliver to your customers?"
  },
  {
    "id": "Qt1Ywu_KLrc",
    "title": "Basic Work Item Migration with the Azure DevOps Migration Tools",
    "description": "Discover how to effortlessly migrate and bulk edit work items in Azure DevOps with our comprehensive guide on the Migration Tools.",
    "captions": ""
  },
  {
    "id": "quFj6dy5M7E",
    "title": "Building a High Performance Delivery Engine",
    "description": "Join Martin Hinshelwood as he uncovers the secrets to building a high-performance delivery engine, blending Agile, Lean, and DevOps for organisational excellence.",
    "captions": "Building a high performance delivery engine in your organization is super hard. We need to have expertise within our teams, within various contexts, and I think we mostly underestimate the level of competence that's required for the people participating in the software delivery process to build those high performing teams. A high performing delivery engine to get stuff out the door. We need not only competence in the technical tasks—that's usually what most organizations focus on—but we also need competence within the context of business, right? Business and business need, and how business works, and what business wants.\n\nEvery member of the team should be a product developer. Well, every member—you're going to have some extremely unusual technical people who probably just want to focus on the technical side, but you want to have at least a high enough number of product developers rather than just software developers on your team. What I mean by that is that they're focused on product and delivering a successful product, which includes many different things, right? You don't just magically deliver a successful product. You need to focus on the right technologies. Do we have the right technical skills to be able to deliver this product? Do we understand the business need? Do we have the right hypothesis to be able to test our product within the market? Have we got the right market fit? Do we need to change the way we do things? This is every member of the team, as much as possible, thinking about these things as they're building the product, as they're developing features.\n\nAnd then you also need a keen understanding of the philosophies and theories behind these things. We're talking about Agile, we're talking about DevOps, we're talking about Lean, talking about Scrum, right? And mixing a few things in there. But we need to understand the core philosophies, theories, and practices that underpin these things so that we can apply them in a way that adds value to our organization, right? Because we're trying to deliver. We're trying to create a high performing delivery engine. We're trying to deliver lots of stuff and lots of the right stuff, or as much of the right stuff as we can. And for that, we need to be able to leverage the right emergent practices, right? The evolution of our practices over the life of the product lifecycle and how we pick the best stuff.\n\nAnd to do that, the people doing the work, the people managing the work, the people overseeing the work, all need to be practitioners, right? They need to be playing at the practitioner level to understand how those things influence it. I usually—the analogy I usually use is if you're renovating your house and you want to remove a wall, right? So we want to change the way we fundamentally do something and see whether it makes sense. Can we just knock down that wall? Well, no, we should probably do a little bit of due diligence. We should probably understand the structural integrity of the context. We should probably understand whether it's a good idea to remove the wall or is it a bad idea? And if it's a bad idea, is there something we can do to mitigate it so we can do it? Because we want to do it right.\n\nAnd you can absolutely remove any wall in your house, any wall in your house, with due diligence to the structural integrity of the building. The same is true when you're changing your business, when you're changing your team structure, when you're changing your system of doing work. You need to have the competence in your high performing delivery engine to build it in a way that enables you to maximize the value delivery to your stakeholders."
  },
  {
    "id": "qWHCBUwpOZk",
    "title": "3 core practices of Kanban. Improving a workflow.",
    "description": "Unlock your workflow's potential with Kanban! Discover 3 core practices to visualise, manage, and continuously improve for peak efficiency.",
    "captions": "The third most powerful practice in Kaman is improving your workflow. It's all well and good to have your visualisation so you can see everything that's going on. It's all well and good to actively manage the works through the system, but if your system's broken or your system could be improved and you don't do anything, that's not going to bode well for the future, right? \n\nSo improving the workflow, making changes to the system in order to maximise the flow of value through the system can help us prevent things like blockages and things backing up in the system, things getting old in the system. Once you've identified why those things are happening, you need to actually do something. You need to actually change the system in order to make those things more effective. \n\nSo many, so many, so many teams will just sit there and they'll understand that there's a problem with the system and they'll just say, \"Well, we can't do anything about it. That's Bob. Bob is getting in the way and Bob is not doing something he's supposed to do in a regular cadence.\" \n\nI worked with a team in the US and we had the Kaman board on the wall, right? And we couldn't change this part of the system, okay? Because it was our Kaman, but we had a dependency, right? That might be something you actively manage away. We had a dependency on somebody else and it was basically an approval state, right? So stuff would go through our system and then at this point it had to be approved and then it would continue through our system. \n\nThe person who did the approvals didn't want to look at the board every day, didn't want to approve stuff every day, so he did weekly approvals. He would, every, I can't remember what day it was, let's say it's Monday, every Monday he opens up the board, Monday morning, he opens up the board and approves the things that need approved. But what if we finish something Monday afternoon that sits there for seven days before it gets approved? \n\nSo what we started doing with our board was this: we were quite lucky, our board was on the wall in the main area of our business, right? In the corridor where everybody was going past, like everybody, the CEO, CFO, everybody would go past this board. And what we did was in that column, just at the bottom of that column, we started adding Post-its in there that listed financial numbers. \n\nWe kind of came up with a calculation. This was part of our actively managing how much does it cost for things to be sitting waiting to be approved. And we started putting that cost in there and those numbers would go up towards the end of the week and then they would go to zero on Monday and then they would start building up again and go to zero and start building up again. \n\nWe had a little graph showing that flow of that bad flow of work through the system and at some point that person whose job it was to approve walked past that board and kind of had a double take and kind of went, \"What are these numbers?\" And we just explained, \"That's the cost of these items sitting there and waiting. That's our wait time cost.\" \n\nSo we thought we would put it on the board because this is where one of our bigger costs is. And what happened? That person changed their behaviour almost immediately and started checking every morning for anything that was blocked or needed approved. In fact, I think at one point they were checking every morning and every end of day so that everything was just flowing through the system. \n\nAnd that was the single biggest cost benefit that that team had in a six-month period was reducing that cost of delay of things sitting there and not being approved when they were in fact valid, they were in fact approvable, i.e., they would be approved and just waiting. \n\nSo changing your workflow or creating a situation within which that workflow is changed is one of the three most important principles of a Kaman strategy that the things you have to have in Kaman. If you're struggling to implement a Kaman strategy, we can help or we can find somebody who can. Click the link below and get in touch."
  },
  {
    "id": "QWUUSbGXm94",
    "title": "fortnite",
    "description": "Join the battle in Fortnite! Discover epic gameplay, strategies, and thrilling moments as players compete to be the last one standing.",
    "captions": ""
  },
  {
    "id": "qXsjLuss22Y",
    "title": "What is a sprint goal?",
    "description": "Discover the essence of a product goal! Join Martin Hinshelwood as he explains its importance in aligning team efforts with customer value. #Agile #Scrum",
    "captions": ""
  },
  {
    "id": "Qzw3FSl6hy4",
    "title": "Understanding Product Discovery: Why It Matters More Than Ever",
    "description": "Discover the vital role of product discovery in shaping successful products. Learn how it differs from traditional development and drives innovation!",
    "captions": "What is product discovery and why is it different from what we've always done? Man, I would say it's not different from what we've always done, but it also is different from what we've always done. So product discovery is all of the work that you do that's about planning for the future, right? \n\nSo if in order for a team to deliver some piece of work, you need to do a bunch of research or you need to create some designs or, um, or whatevers, right? Another team has to do something before it gets to our team. All of that, from our perspective, is discovery work. That may be work for the other team, right? But from our perspective, it's discovery work. It's discovering this item. It's making, um, ensuring that we understand that item as much as possible and not just focused on the items that we know we want. \n\nDiscovery also focuses on the items we don't know we want. So how do we find the things that are going to enable our product to be better? That's going to enhance our users' experience. That's going to, um, open up new markets, increase our user base. Um, those are all things that we would do as part of discovery. \n\nUm, Scrum calls it refinement, right? Although I think refinement's probably a little bit tighter scope than discovery. Discovery is a lot bigger. Um, but it's something that we have always done. It's just not always been explicit. It's not always been something that we say, \"This is that body of work.\" Who's accountable for organizing that body of work? And in the Scrum world, that would be the product owner, right? They're accountable for maximizing the value of the work done in the product. \n\nBut in whatever process you're using, somebody needs to be directing that. It's not necessarily okay for there to be no direction. So part of discovery will be figuring out what your goals are, what your vision is, and what your goals are. What is it you're trying to achieve as a business, or what is it that your product's trying to achieve? Um, what direction are you going? And then what are the steps you want to try and take to get there? \n\nAnd then figuring out what do you need to do in your product to get there. Um, a great example, I think, at scale is the Azure DevOps team. At least when I worked with them a few years ago, the scale of that team, I think they were up to 90 plus teams at one point working on this one big product. So that's a lot of work to feed that engine that is delivering value. Those teams working together, hopefully highly effective teams, but teams. \n\nSo they set strategic direction at the high level, and then there's a bunch of discovery that has to go on at that level. Like, where are we going? What are we doing? What are we trying to achieve? Right? Think of it like portfolio. What are your value propositions for your product? How do you think you're going to be able to affect those? And then they come up with ideas through the structure. This is what we want to build and then send it to the next level down within that larger product organization and say, \"This is what we're trying to achieve. You go figure out what's going to make it happen.\" \n\nSo then discovery launches again at that level. What do we think? Perhaps this is Azure boards, right? We're trying to help the business achieve this outcome. They're trying to achieve. What do we think we can do to help make progress towards that goal or those goals, right? Um, and then they might have 20 teams working on that idea. So they would create their level, like, what is it we think we're going to try and achieve? How do we want to move the needles? \n\nUm, and then they're going to give that to the teams below, and the teams below are going to be like, \"Okay, here's what we're trying to achieve,\" all the way up the chain, right? All the way up to the product vision. Um, what do we need to do to make progress towards those goals in that vision? \n\nActually, a really good example, I've got another example which is maybe more people have experience of, and at the holistic level, and that's the Windows team or Microsoft as a whole across many products. Um, has a strategic goal for six months, right? They, um, Microsoft calls it the season. I don't know if they call it this, right? But I, looking in, observing what they're doing, many people call it the season-based model. \n\nUm, so they have a six months in a season, and they're looking out three seasons, current season plus two more, right? So that could be up to 18 months, but somewhere between six and 18 months, they're looking out. And one of the things that they wanted to go after, the market shares that they wanted to go after as a business, um, from their consumer products was creators. \n\nSo there are people writing books, there are people drawing pictures, there are people making music on computers, right? We want to go after that group of people, that market share, and we want to increase our market share in that space. So they created this idea of the creators update. That's kind of what they call it, right? That, again, they do a spring and a fall update across the board. That's kind of like that cadence of the season-based model, the six months. \n\nSo within that six months, they're overriding product goal, product focus across all of their products. Season focus is to, um, help creators create stuff. That's that overarching thing. And then each team, each group, each product group, and then each team inside of that that works under that story is trying to figure out what can we do to help further that. \n\nSo I remember the, the, I don't have one here, but the pen support folks in Microsoft moved from 255 pressure levels to 1024 pressure levels. That was one of the things they did. So that required the people who make the pen, the people who make the screens, um, the people who make the operating system, right, to all work together in order to work towards this idea of improving pen support. \n\nAnd that was to enable artists and enable that. And then they have software that comes off that, and they create SDKs and all this thing so that other people can build products on top of that. That was one of the endeavors in that, and that was just for drawing on the screen or writing on the screen, right? \n\nUm, that effort to all work together improved their market share, right, in the creator space. That's what they were trying to do. But then they realized during, right, they've got their three, six months, three seasons planned out. They just finished the creators season, so their product is shipped. It's everybody's 950 million people using Windows, and I don't know how many of them are creators, right? But they're getting feedback and telemetry and, uh, getting all that stuff. \n\nAnd then they realized that they needed another creators update because they didn't quite move the needle as far as they would like. There was certain feedback, and then they're going to do that again. All of that is product discovery. So it's really big. It depends on the scale of your organization, right? How much, uh, how big the scope is. But that is the scope of product discovery that you and everyone in your organization should be focused on, from the lowest person doing the work all the way up through the business to whoever is in charge of that, whatever level you roll up to, right? \n\nSo that could be Azure DevOps rolling up to the head of Azure DevOps, um, but then it eventually rolls up to Satya, right? The CEO of the organization. And Satya has lots of products and lots of different parts of the business, from, uh, consumer-focused parts of the business to non-consumer-focused parts of the business, seven business-focused parts of the business. \n\nSo how do we enable and align all of these things so that we are an entity that's all working together towards these common goals, towards these common outcomes? And that is part of product discovery because you deciding what your product needs isn't necessarily going to create the best outcomes. \n\nBecause we're narrowing the choices to what you can imagine. If we expand it out to include all of the people working on your product, we are diversifying and perhaps generating more ideas for how we can solve these problems in more interesting ways and help our customers even more and open out new markets and new capabilities and new ways of doing things. \n\nAnd that, yeah, product discovery is huge. It's huge, and it is very underserved in organizations. It's not very deliberate in organizations. Um, and that's one of the things, one of the reasons, uh, that there's a lot of shift in focus in the market towards product. Many teams are good engineering teams. They're good at building solid, usable, working product on a regular cadence. \n\nUm, but if they're not provided with focus and direction, they're not going to go anywhere. If that focus and direction doesn't provide additional market share, additional market opportunities, then the investment goes away, right? There's only so long companies will invest in something that they don't feel like they're getting a return on. \n\nSo product discovery is all of those things that happen within the business in order for people to figure out what they're going to go build."
  },
  {
    "id": "r_Af7X25IDk",
    "title": "Ep005 - Leading Agile Change",
    "description": "Discover key insights on leading Agile change as Martin shares valuable practices from companies' journeys. Learn, adapt, and forge your unique path!",
    "captions": ""
  },
  {
    "id": "r1wvCUxeWcE",
    "title": "Kanban Boards",
    "description": "Discover the power of Kanban Boards for agile project management! Streamline your workflow and boost productivity. Visit nkdagility.com for more! #agile #kanban",
    "captions": "Really important part of visualising your work when you're doing Kanban is having some kind of Kanban board. Okay, you want to take the way your system currently operates. You want to think about the things that move across your board, things that will move through your system, and then decide what are the columns that need to move through.\n\nNow, the absolutely most optimal way to do that would be single piece flow: one item at a time to do, in progress, and done. But the reality is we don't all live in that perfect world; in fact, none of us do. So you're going to have to look at how your work flows through your system. What are the columns that you currently have on your board with the stages of the work? Come up with a board that represents that."
  },
  {
    "id": "r2G-NrSIj2k",
    "title": "Code Reviews for Quality Assurance",
    "description": "Reimagine code reviews with Martin Hinshelwood! Discover how automation and a shift-left approach enhance quality and speed in software development.",
    "captions": "There are multiple schools of thought on code reviews. One school of thought is that code reviews help us improve our code quality and help reduce defects because we've got multiple eyes looking at the product. But I think that's only part of the story. As we shift left, another school of thought starts to come to the forefront, which is our code should be pre-reviewed. A code review, a person manually code reviewing our code, should not actually be required because our code should already have been reviewed by the time we submit a pull request. \n\nThat would then enable all of our pull requests to be almost totally automated, or as automated as we can get, so that the pull request process itself is not becoming a blocker to deliver value in our business. There are lots of different techniques and practices within the context of code reviews. I very much support and value code reviews and pull request systems that are in place in GitHub and in DevOps. \n\nI would absolutely recommend that nobody is able to commit code to master or main without going through a pull request and without passing validated checks. But those validated checks should be as automated as they can possibly be within the context of your system. Naked agility has helped others and can help you create automations and practices and procedures that enable you to have the highest quality possible code and detect defects as early as possible."
  },
  {
    "id": "R8Ris5quXb8",
    "title": "Talk us through the new Product Backlog Management course from Scrum.org",
    "description": "Discover insights from Martin Hinshelwood on the new Professional Scrum Product Backlog Management course by @ScrumOrg. Watch the full video! #shorts",
    "captions": "It's an awesome, little class that helps us get to grips with some of the nuances of product backlog management. How do we make sure that we minimize the amount of things that are in that product backlog in order to maximize the value that we get from it?"
  },
  {
    "id": "r9aCEFpUHWU",
    "title": "How does the lack of basic skills among Scrum Masters impact teams and organizations",
    "description": "Discover how competent Scrum Masters drive team success by bridging theory and practice, enhancing productivity, and delivering real business results.",
    "captions": "When Scrum Masters don't have an understanding of both the philosophies, theories, and practices within the context of the team, and an understanding of what the team does every day, the impact on those teams and those organisations is profound. They're not going to improve. If you had a coach for a soccer team that didn't understand soccer, had never played soccer, how effective would they be at coaching that team in the processes and practices that you need?\n\nNow, immediately a bunch of folks are thinking, \"But Ted Lasso did it.\" You've got to remember Ted Lasso is a fictional character, and that fictional character runs off a script. The script works because of plot. So he's a good coach, and a successful coach, sorry, because of plot, right? Not because it would work in the real world. Almost every successful coach for a sports team understands fundamentally how that sport works, the training, the specific training techniques that need to be done in order to maximise the capability of that team.\n\nIf they don't, they have sub-coaches that help for a specific thing. Like, I think in American football, you have an offensive coach and a defensive coach, and then you probably have an overall coach. The overall coach might have a different skill set from the offensive and defensive coaches, but they have a fundamental understanding of the sport, its rules, the training techniques, the types of muscles that are used by the team, and how they can train those muscles to be as effective as possible. How they prevent injury, all of those sporty things.\n\nAnd that's what we're talking about when we talk about the competence of Scrum Masters. They need to understand if they're a Scrum Master for an engineering team, they need to understand all the engineering team things that the team needs to be able to learn, practice, and do change in order to become more effective. If that's not there, they won't change. If you have somebody who is just a professional coach, right, and perhaps taking a two-day Scrum Master class, typically what you will see is very little actual improvement in the team's ability to deliver product.\n\nThey might be better at engaging with each other, but are they actually better at delivering product? Because that is what your business cares about. They want product. They want working, usable product that solves business problems. That's what we're here for. That's what we're paid for. That's the outcome they want to improve. Have these Scrum Masters actually improved? Is that what we're measuring at all?\n\nThe lack of basic skills around Scrum Masters results in an organisation's continued status quo, which is likely an inability to deliver. This is why they brought in Scrum Masters in the first place, because building software is hard. Building products that don't exist yet is hard. Are we making the right bets? Are we using the right philosophies in how we build our product, how we design our features, how we get our features in front of our customers, how we engage with the rest of the business? Without understanding all of those things, we're not going to be able to help the team be effective.\n\nWe're going to have them, I don't know, I'm being facetious, sitting doing some Lego team-building exercises and perhaps building a bridge with spaghetti and straws, right? Which sure, might be great for a team-building exercise like Myers-Briggs. I've done some Myers-Briggs exercises with teams I've worked on for organisations I've worked with, and it's a great team-building exercise, but it's of no value for delivery.\n\nThere's only so much you can help a team from the context of the team working together more effectively, but there's a massive difference you can make by improving their knowledge. It's like in Lean; you can make a certain amount of impact by looking at reducing batch size. If you make the work items smaller, you're going to improve the flow. But your biggest bang for your buck is probably limiting WIP. That's where the highest percentage of a Scrum Master helping a team comes in.\n\nThe biggest bang for your buck is that Scrum Master being able to teach the team new skills and capabilities that enable it to be more effective, enable it to build better products, to test more effectively, and have higher quality. These are the primary skills that you want your Scrum Master to have: knowledge and competence so that they can help the team.\n\nOnce all of those are awesome, perhaps at the same time, right? But once all of those are awesome, the biggest bang for our buck then becomes because the team is already awesome at engineering. They have the best DevOps practices; they have the best architectures they can in their product. They have the most effective engineering systems. Then, if we enable the team to collaborate more effectively, we'll get more stuff, right? That's a small percentage of the overall effectiveness, and we get that from competence.\n\nSo organisations are suffering because they don't have Scrum Masters that fundamentally understand the work that needs to be done and how to enable that work to be more effective."
  },
  {
    "id": "rbFTob3DdjE",
    "title": "5 tools that Scrum Masters love. Part 2",
    "description": "Discover 5 essential tools that Scrum Masters adore in Part 2! Boost your team's agility and performance with expert insights from NKD Agility. #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "RBZFAxEUQC4",
    "title": "7 deadly sins of Agile: Lust",
    "description": "Discover why 'lust' for quick agile solutions can hinder transformation. Learn to tailor agile practices to your unique needs! 🚀🔄 #Agile #Transformation",
    "captions": ""
  },
  {
    "id": "RCJsST0xBCE",
    "title": "Mastering Azure DevOps Migration - A Comprehensive Guide by NKDAgility",
    "description": "Master Azure DevOps migration with NKDAgility! Discover tools, tips, and best practices in this comprehensive guide. Unlock your potential today! 🚀",
    "captions": ""
  },
  {
    "id": "rEqytRyOHGI",
    "title": "Special Sprints: Agile Banditry or Risk Management?",
    "description": "Uncover the truth about special sprints in Agile! Join Martin as he reveals their pitfalls and impact on product delivery. 🚀🔍 #Agile #SpecialSprints",
    "captions": "You can't have spent any time in the agile space without encountering people doing some kind of special Sprints. They might be doing Sprint zeros, they might be doing refactoring sprints, they might be doing bugfix sprints, they may be doing hardening Sprints. Whatever special type of Sprint they're doing, it is absolutely agile banditry, and those that are doing it are just bandits. They're not doing good things. Special Sprints reduce and dilute our ability to deliver usable working product. \n\nSo the whole purpose across the board, the whole purpose of agile practices is to enable that visibility and connection with the stakeholders with continuous delivery of usable working product, and that's how we manage risk in agile. In the old traditional model, we managed risk by having a detailed plan, right? That was our management of risk. Here's my full detailed plan because things aren't going to change that much; this plan will work. \n\nBut in the complex cognitive space that we tend to operate in, when there are more unknowns than known, you need a different way of managing risk. In all of agile, we do that by creating usable working product. That's our key risk mitigator because we can't document everything that's going to happen because there are too many surprises. So having those usable working products mitigating that risk, no special Sprints is key there. \n\nA great example of that is a scenario that happened to the Azure DevOps team when they first started moving towards this agile thing. They were kind of moving towards this scrum thing, and they decided initially that they would have six Sprints, six three-week Sprints, and then they would do a kind of hardening bug fixing, you know, safety net, some kind of safety net Sprint. I don't remember specifically what they called it; it was some kind of safety net Sprint. \n\nWhat they expected to happen was, as each Sprint started and completed, that you would have a kind of ebb and flow of undone work, right? Whatever you want to call it, of undone work, of technical debt, of things that weren't quite right. They would have this little uptick, and then towards the end of the Sprint, it would come back down again. Then the next Sprint would have a little bit undone, and then it would come back down again. Maybe there'd be a little bit left over at the end of a Sprint, but then we'd pay it back the next Sprint. \n\nBut because they had that safety net, and because every single member of every single team knew that they had that safety net, they thought constantly, \"Well, I'll just leave that for our safety net. We'll leave that for our safety net Sprint.\" It happened so much that instead of that kind of ebb and flow of undone work, they ended up with a nice little upward curve trajectory of undone work. They got to that sixth Sprint and realised that they had more work that they could do in the safety net to pay it back and create a usable working product. It wasn't working. \n\nSo what did they do? They restarted the whole thing. \"Let's start again, and we're just going to do three-week Sprints, and at the end of every three-week Sprint, we're going to ship to production.\" Not a maybe; we're going to. So we have to have good quality, we have to have paid back our technical debt, we have to have as little undone work as possible going into the next Sprint because there is no safety net. \n\nPeople who have safety nets take risks, and if you have a safety net, that's agile banditry. If you're being ambushed by agile bandits in your organisation, then my team at Naked Agility can help you, or we can help you find a consultant or expert who can. You can set up a no-obligation consultation using the links below. Don't forget to like and subscribe if you enjoyed this video."
  },
  {
    "id": "rHFhR3o849k",
    "title": "What makes a truly great scrum master?",
    "description": "Discover the key traits of an exceptional Scrum Master in this insightful video by Martin Hinshelwood, highlighting the power of influence over authority.",
    "captions": ""
  },
  {
    "id": "RiWIHIE1JIw",
    "title": "Scrum is like communism; it does not work! [SD Only]",
    "description": "Unpack the myths that hinder Scrum adoption and discover why it’s not like communism! Join us as we debunk misconceptions and enhance your Agile journey.",
    "captions": "Scrum is like communism; it doesn't work. This is a phrase I hear often from folks who have been unable to adapt their systems of work to incorporate the core philosophies, theories, and practices of Scrum. They sit and look at the signals coming from Scrum that things are broken and don't work like they're supposed to work and do nothing but say Scrum is like communism; it doesn't work.\n\nHi, I'm Martin Henwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.\n\nIn this video, we'll explore five myths from Scrum that inhibit its adoption. From language definition inflation to cognitive bias, here are the top five myths that result in the idea that Scrum is like communism.\n\nThere's a myth in Scrum that you spend more time talking than doing. I see this quite a lot; people talking. Usually, people are using old school terminology. When you hear them talking about that, you hear them talking about ceremonies rather than events. One of the main reasons why Scrum doesn't call the activities the events ceremonies is because it's ceremonies. We get together and nothing happens; it's a ceremony. It's something we do that's perhaps the same every time, and there's no actual outcome to a ceremony apart from maybe people have some jollies and they feel good.\n\nThe reason Scrum calls them events and also not meetings is something's supposed to happen there. Every single one of the Scrum events serves empiricism; that's their purpose. You're going to inspect something and adapt something. If you're not adapting, there's no point in being there; there's no point in having it; there's no point in doing it. Their purpose is to adapt.\n\nFor example, at your Sprint planning, you're inspecting your product backlog and your product goal, and you're adapting your Sprint backlog and your Sprint goal. That emerges through that conversation. But at the end of your Sprint planning, you should have a Sprint goal; you should have selected backlog items. What do the developers think best serves working towards the product goal? You should have some kind of a starter plan to complete them. If those three things don't exist at the end of Sprint planning, there was no point in having it. That's what it's there for, so that we understand what it is we're going to take into the next Sprint, so that we can communicate that perhaps with other people.\n\nWhat's our goal for this Sprint? What are we trying to achieve? How do you get the stakeholders to actually turn up for the Sprint review? Well, you have to give them something that they're interested in coming in providing feedback on; that's your Sprint goal. And that's just one of the events in Scrum. Every single daily Scrum is only 15 minutes. How does that add up to a boatload of meetings? At most, 15 minutes per day where the team gets together and plans the next 24 hours; that's its purpose. You're inspecting your existing Sprint backlog and you're adapting that Sprint backlog based on what you learned in the last 24 hours.\n\nYou might have learned some stuff from actually working on the product, what can and cannot be done. You might have gained more information and insight from other stakeholders and collaborating with the business and doing analysis on what it is you're going to work on. That means that something you've got in the Sprint needs to be taken out because it's no longer viable, or something else needs to be brought in because it becomes part of that story of what it is you're trying to achieve that Sprint. That's your daily Scrum; it's not an elaborate status event. It's not a time that you're wasting; it's where you're maintaining the transparency that is required to be able to inspect and adapt. You're serving empiricism, and all of the Scrum events serve empiricism.\n\nOne of the common myths in Scrum is kind of a proxy myth. This proxy myth is, you know, why do we spend so much time working on story points? When story points measure complexity and not time, and then we have to figure out how many story points fit in a Sprint. I 100% agree with that; that part is not a myth. The bit that's a myth is that story points are even a Scrum thing in the first place. They're not. Story points have nothing to do with Scrum; it never has, apart from as a practice, potentially a complimentary practice that teams choose to take on in order to get to an outcome.\n\nWhen you find complimentary practices are not adding value, you should be stopping doing them, not continuing with them. So if you're in that position where you find that story points are not adding value, great, stop doing them and choose something else. The guy that invented story points, or that is generally accredited with inventing story points, has a public apology online for creating them in the first place because of how they tend to be used within organizations as a pseudo proxy for time to beat developers around the head with. They were originally invented as a reasonable way for developers to sit and have a conversation and figure out what they don't know. That's the purpose of story points.\n\nWe can all get together; we maybe use another complimentary practice called planning poker. All that really is, is we keep our cards to ourselves. We're not going to tell each other what story point we're going to pick, how complex, t-shirt sizes, right? Whatever you pick, how complex this thing is. You've got one developer that says this is a small or a one; you've got four developers that say that this is a five or a medium, and then you've got one developer that says this is an extra large or a 21. The idea is, what do they know that we don't, or what do we know that they don't? That's the purpose of story points and complexity conversation.\n\nIt should be used almost solely during refinement in order to enable teams to right-size their backlog items and decide, do they fit in a Sprint? Do we understand them, or do we not? After that, delete the numbers; they're useless. Don't use them anymore; that's their purpose for that one context. Don't bring them into the wider context.\n\nOne of the common myths in Scrum is that it is really a forum for micromanagement. There's a core test for this in your team. It is a myth, right? But it's a reality for many teams. So is it a myth or is it not a myth? That is a matter of perspective. However, I would point out that it's not Scrum, so it's a myth in the context of Scrum, but it's not a myth in the context of how lots of organizations and teams approach Scrum. Most organizations approach something like Scrum from their traditional top-down steering-based perspective, and they want to tell teams what they're going to deliver in a Sprint.\n\nSo you walk into Sprint planning, and the product owner or the tech lead or the project manager, or whoever, the Scrum Master—the worst one—but the Scrum Master says, \"Here's a list of things we need you as a team to do this Sprint.\" As soon as that happens, not Scrum. We've gone out of the bounds of the Scrum guide. Who decides what we work on this Sprint? The developers. Who decides how we work on it? The developers. It's not anybody else because the developers—that's the core reason why they dislike that approach. It's the developers that understand the nuance and intricacies of the technical challenges of actually delivering on the work inside of the Sprint. Nobody else can understand that nuance because they're living it, right? They've got skills that I don't have as a manager or as a product owner. They've got an understanding of the product and the technologies that we're using to deliver that product, the tools and techniques that we're using. They're the best place to make that decision.\n\nNow, can the product owner say, \"Oh my goodness me, we're in a difficult place because we're not working through the work that we need to deliver as fast as we would like?\" Yeah, absolutely, they can have that conversation, and they can have a conversation with the developers about how the developers might choose to cut corners in order to accelerate work. But it must be done with their assent. If the developers say no, then we can't work any faster because we might be taking on too much technical debt. For most businesses, all technical debt is a risk to the business, and most businesses don't understand the context of technical debt enough to make an informed decision on whether they should accrue it and how they should pay it back. That's why we have hired these technical experts in order to deliver our product, and we should trust their understanding and view of the product in order to do that.\n\nSo I would say that it is a myth that anybody should be telling the developers what to work on and when to work on it. But I do understand that lots of organizations don't understand how to let go of that control and are not yet ready for Agile.\n\nOne of the common myths in Scrum is that since we're doing Agile, we don't need planning. That is just utter garbage. Scrum, for example, is all about planning. We have Sprint planning; we have refinement, which is a type of planning. We have daily Scrum, which is about planning the next 24 hours. We have a review where we review what happened based on the plan and adapt the plan going forward into the future. It's all about planning; it's all about getting things right. It's not about planning upfront; it's not about spending too much time upfront planning.\n\nBut there's a phrase which is often misinterpreted, which is we should do just enough planning. We should do just enough, right? If we do too much planning and we plan a bunch of stuff that we end up not doing because it gets taken out of the backlog, then that was waste. Maybe that was okay waste; maybe we needed to do that planning in order to find out other stuff and have that thing removed. Or maybe that was a little bit too much. Is there a way that we could have learned the same thing that we learned doing that planning, doing something a little bit less?\n\nThe converse of that is if you are building—I'm trying to think what you could be building that needs lots of—let's say you're working on Windows and you're one of two and a half thousand software engineers. How many teams is that? Metric assloads of teams, right? If you're that many teams working on one product, then you're going to need to plan, right? You're going to need to understand what's happening going out into the future. You're going to need to coordinate across hundreds of teams on direction and strategy. I mean, most of that in Scrum is done through communication, right? Vision, product goal, Sprint goal, right? You've got that communication chain. How do we all get behind the same thing?\n\nBut we're trying to have as light a plan up front as possible within our context. So even if I was working on the Windows team, I would probably have a roadmap. I'm probably going to have a roadmap for my current six months. If you're not familiar with how Microsoft product teams have created their own scaling framework around what they need in their business, it's often called the season-based model. They talk about the spring update and the fall update for their really big products. Many of their products do continuous delivery, but they're talking about a long-term view of what it is they're trying to achieve, and that's about six months. They look three seasons ahead, so they're looking 18 months out. They have an 18-month plan, and I'm using air quotes because it's probably pretty vague, right? If you're looking at that third season out, things are really big, right? You might have themes rather than individual things you're going to deliver. You might be looking at what are the investment opportunities, what's happening in the market, where do we need to get ahead of the competition going over the next 18 months? That generates these big themes, buckets of work that many hundreds of teams might work in to actually make progress towards those big themes.\n\nBut you're looking that far out; you're planning that far out. You probably know what your goal—your product goal—if they call it that. I don't think they call it that, but whatever their theme for each of the seasons is. They probably know what they're going to be 18 months out for the season that we're in. We're probably got backlog items and actual things we're going to tactically deliver for the next three, four, maybe five Sprints. Maybe, and then in the next bucket, we maybe have, you know, here's some Sprint goals we might tackle, here's some product goals we might look at in that next seasonal bucket. And then the season after that, we don't have any of those details, just what's the big theme.\n\nYou can see how they did that. They did one recently—I'm saying recently in the last five years, right?—recently that was called the creators update. When they were talking to us, the general public about the products, they talked about the creators update. We're going to invest in opportunities to make our systems and products and services better for creators. That was an organization-wide theme that can spawn out of the Windows team. But think of all the things that impact. Not only does that impact on Windows, the operating system, right? But what about Office? It impacts most people who interact with the operating system through Office. So if you're talking about pen support, right, you've got the actual pen touching the screen on the surface and the number of levels of capability that it has in that world. You've got, so that's hardware; that's the surface hardware and perhaps third-party vendor hardware collaborating with. Then you've got the application that you're actually interpreting those signals, so that could be Microsoft's applications; it could be Office; it could be third-party software. And then you've got the underlying operating system, which is providing support for, I think it used to be 256 levels of pressure, and now it's 1024 at least levels of pressure that you can put on the pen in order to get that, you know, I'm drawing on the page type of feel. That requires collaboration, looking forward into the future. What do we need? What are we trying to achieve? All of those strategic things are happening; we just probably don't store them in a Gantt chart.\n\nOne of the myths in Scrum is that we have no governance. This kind of leads on to the bigger myth that just because it's not in the Scrum guide doesn't mean you're not supposed to do it. Scrum does absolutely have governance; it has small amounts of governance baked in, right? But in general, you need governance to build your product. So it's kind of correct to say Scrum doesn't have a lot of governance, right? There's a very small amount of governance built in, but if you want to be successful at building products—if you're, for example, building products within the healthcare space—then you're going to have to worry about your ability to support HIPAA, to support the regulatory compliance that comes from the outside. That's governance imposed on your organization from the outside that you have no control of.\n\nYou're going to have things that your organization does internally. Perhaps your organization has usability guidelines; perhaps they have UX guidelines for how all our products' UX is going to function so that anybody interacting with our software already knows how it's going to work because it follows the same rules. Then that's internal governance that has been applied to your product. You maybe have business rules; that's another form of governance. You might have particular ways in which you interact with the market as a business. That's one of your unique selling points, your unique engagement points with the market, and those ways of working have to be implemented in your systems in that way.\n\nJust because Scrum talks about minimising that governance doesn't mean it's not there, right? You just have just enough governance to support the business need. It's when you have way too much governance that you start running into a problem. That's why in very large organizations, for example, banks, they really struggle to move towards Scrum and Agile practices because they're encumbered by the baggage that they can't put down. Royal Bank of Scotland in the UK was, I think, the first bank in the world; it's currently the fifth biggest bank in the world, and they've been going for over 200 years. Can you imagine the procedural and compliance baggage that organization has? Many of it around for no other reason than nobody's revisited it in a long time; nobody's challenged it in a really long time. How many policies and procedures do you have in your organization that nobody knows where they came from or what they're for or who owns that policy or procedure or why, right? It's just the way we do things here. Those are the things that we want to challenge. We want to challenge anything that gets in the way of inhibiting our ability to deliver value. Those are the things we want to prevent; those are the policies, practices, and procedures, the governance that we want to reduce to the absolute minimum."
  },
  {
    "id": "RLxGdd7nEZE",
    "title": "What is the Single Most Valuable Outcome a Consulting Engagement Can Produce?",
    "description": "Discover the key outcome of a consulting engagement with Martin Hinshelwood. Learn how to achieve clarity and focus in your #agile journey!",
    "captions": ""
  },
  {
    "id": "rN1s7_iuklo",
    "title": "Empowering Teams to Maximize Value and Return on Investment",
    "description": "Unlock your team's potential! Discover how empowering Agile teams boosts innovation, adaptability, and ROI in this insightful video. Click to learn more! 💼📈",
    "captions": ""
  },
  {
    "id": "RnMOINwjO84",
    "title": "Making Data Driven Decisions - Decision making frameworks",
    "description": "Discover why agile decision-making requires flexibility and creativity in today's complex world. Embrace adaptation for success in product development!",
    "captions": "If you're looking for rules on how to make informed decisions based on the data that you've collected, whether it's from evidence-based management, telemetry data, or whatever data you're collecting, you're not going to find it. You're not going to find something that you can apply everywhere. In times gone by, there have been large decision-making frameworks that generally apply because we lived in a complicated world, not a complex one. \n\nSo, if you think about complexity theory, if we understand more about a thing, we're going to go do more than we don't know. That's like playing chess. We understand more than we don't know, then we can apply a bunch of rules. We know what the next move is. If you've ever watched a professional chess game and listened to the commentary, they know exactly what the next move is supposed to be. The only time when there's a mistake is based on the set of exchanges, depending on how smart the commentator is, how far ahead they can think. They know who's going to win, and then it’s does somebody make a mistake? \n\nThat's how I think lots of modern businesses are failing. Take, for example, a non-technology example. Let's say you're a hauling company and you're going to haul stuff from A to B in trucks. You have your drivers, you have your trucks, you need to do schedules, you need to do procurement for what goes in what truck and how it's organised in the truck, and all of those kinds of things. If you go buy off-the-shelf software that everybody else uses, all your competitors are using exactly the same software to manage this, perhaps you're buying SAP, and then having the POGE plugin and the staff management plugin and whatever stuff it has, then your business is no longer unique. \n\nYou're filling a known niche with a known business model that works, and then the only difference between you and your competitors is probably quality. Are you on time? Did you have the right stuff? Are the right things delivered to the right place? You build a reputation around that. This is a good haul company because they mostly do the right thing. This is a bad haul company because they mostly do the bad thing, and then they'll go out of business, and you'll stay in business because they mostly do the wrong thing and you mostly do the right thing. \n\nBut your business models are identical, your business practices are identical because they have to be. You have to fit within the plugins, the business model plugins that you've brought in for SAP. But when we work in a world where we know less upfront than we discover by doing, that's anything where we're bringing in a creative element. Software engineering is being creative. Anything where there's a lot of unknowns. \n\nA great set of this is red team thinking, which is a military tool. Red team thinking comes from the military. I don't remember if it's the US or the British military, probably the US military. It's a military model that is applied quite heavily in the agile space because we're talking about the same thing. We're talking about complexity, we're talking about the fog. We've got a lot of unknowns, and how do we move forward while being able to adapt to any challenges, surprises, or opportunities as we move forward and the world reveals itself? \n\nThat's something that the military do very well, or hopefully do very well, and we need to do very well at it because most of the stuff that we do when we're building software, because we're writing code, it's never been done before. If you're writing code that's been done before, you're doing it wrong. Stop doing that. When you're building products that don't exist yet, then we're exploring the unknown. \n\nThink about when the explorers went out to go somewhere new. They didn't know what they were going to find when they got there. They didn't know what was going to happen along the way, so they had to take into account bringing all of the things they needed. Scurvy was a problem for early explorers because they didn't have the right vitamins. What they found was they could take citrus fruits, which lasted a long time in storage if you stored them right, and then you could provide that to your crew and they don't get scurvy because they get the vitamins that are missing from the normal diet. \n\nThat adaptation enabled those explorers that did that to go further, and the explorers that didn't do that all died. So, which ones came back? They did this. Let's do more of that. That's what we're talking about when we talk about agile. When we talk about agility, it's about creating a system for your way of work that adapts dynamically to those changes. We have emergent knowledge, we have emergent data, we have emergent customers. We don't know who our customers are yet and what they're going to want. \n\nThen we get some of those customers and we understand what they want, so we deliver something to them, but it's not quite right because they don't like what we've delivered. So, we need to keep adapting, continuously evolving our product, our business, to fill a unique niche that we've created for ourselves. Perhaps we maintain that niche, but those niches don't exist forever. \n\nIt used to be in the old days of the Industrial Revolution where there weren't that many textile mills and there weren't that many textile mills within selling distance. Perhaps you, as a tailor, were buying cloth from the local textile mill. You had no option. You were buying the bulk of your stuff from the local textile mill, and then maybe you could get some really expensive stuff from the fancy store, wherever you managed to get that really expensive stuff from. But that's not for your main clientele. Your main clientele is going to be the stuff from the factory up the road. \n\nWhereas today, you can get stuff from any factory anywhere in the world for a relatively competitive price. That market, that niche, those factories were in is largely gone. It's not a niche anymore. There are loads of competing species within that area. The same for our companies. As competition grows, we either have to become unique in different ways or we need to be the best in that space in order to not have any of this competition come in. \n\nAs we grow as a business, this is all part of this data-driven decision-making. As we grow as a business, we have a tendency to say, \"Well, this worked one time, let's write that down and everybody does it that way.\" That's bureaucracy. That's what we're fighting against with agility because the next thing we do is slightly different, just a little bit, but slightly different. \n\nSo, this is not optimal anymore, but it kind of works. But time change after change after change, eventually this doesn't work anymore. But everybody in the company still does it because that's the way we do things. That's the mindset we're trying to change. We're trying to change to a mindset that we don't keep this longer than it's necessary. We don't keep this longer than it's valuable. Any process or practice we have, emergent practices within our organisation, any process or practice can be dissolved at any time because it's deemed to be no longer optimal or suboptimal. \n\nThis set of stories should continually change. If it's not changed, why hasn't it changed? Because the world will have changed, our environment will have changed, and we need to continually adapt. That's agile decision-making. How we make decisions is emergent based on what we understand, what we're doing, what we're trying to achieve, and the results that we get based on that decision-making. \n\nSo, you're also continuously looking at the data and analysing your decision. Did we make the right decision? Are we continuously making the wrong decision? If we're continuously making the wrong decision, why are we continuously making the wrong decision? What is our decision-making process? Because it needs to change. \n\nThere are lots of tools out there that you can use. I had a quick look for agile decision-making tools and I found a few that I recognise that I have used in the past but maybe not used recently. Fist of five, if you've got a group of people and you need to make a decision, fist of five is a great way to make a decision. Is that going to last forever? Are you always going to do fist of five in that same group of people? Probably not, because its usefulness, as you start working together for longer as a team, you may recognise more each other's tails, and then you don't need that mechanism anymore. \n\nSo, stop doing it if it's not adding value. If anything in your business is no longer adding value or it's actively inhibiting value, stop doing it and do something different. I see this in organisation after organisation where they have a departmental model and some department has decided that you can't do a thing in an organisation, and that thing that you can't do inhibits all of this value over here. It either makes it slower or makes it harder for us to take advantage of opportunities. \n\nIt just makes it too hard to do business, so the people over here stop trying to do those things because it's too hard. Usually, this is security. That department has forgotten that they work for the business. The business does not work for them. Their purpose for being is to protect the business. Perhaps that department model is a protection model, so compliance or security or those kinds of things. But they're protecting the business within the context of the business actually functioning. \n\nAs soon as they're inhibiting the business functioning, they are a cost, not a value. They're supposed to figure out, \"We need to do this. How do we do this so that you can be happy?\" Not, \"No, you can't do this.\" That's an example of that organisational craft that rust builds up over time, inhibiting your ability to deliver value because you're stuck in the past, even if the past was only five minutes ago. \n\nUse whatever tools make sense within the context of the decision that you're making, but always check. Is that tool that we're using, so it could be fist of five, DAKI, RACI, decider protocol, consent decision-making, lean coffee, holacracy, there are loads of different ways to do that. If we use that and we have a bad decision or we use it in a bunch of decision-making and all of those decisions ended up wrong, or the majority of those ended up wrong, then stop doing it. \n\nThat's the key to this agile process, to figuring out how to make decisions within the context. There aren't any rules for you to go look up. There aren't any known practices that always work, and that's true across all of agility and all of lean. There are certain rules that we know to be true, but they're not rules, they're laws. Little's law is a great example of that, queuing theory. It's true. That's how things work. \n\nSo, we make decisions within the context of that story. Figure out what the laws are that apply to your business, and everything else is flexible. Everything else is flexible. How you do business is flexible. How you find business, how you engage with customers is flexible. Emergent. How people do the work is emergent. How you engage with them, how you do everything that you do needs to be emergent because what you want to be able to do as a business is when the market shifts or your environment changes, you need to be able to evolve, and you need to be able to evolve as quickly as possible because you don't want to go extinct."
  },
  {
    "id": "rNqYGyB6PtY",
    "title": "What Should a Product Owner Do with an Incompetent Team?",
    "description": "Struggling with a team that underperforms? Discover how to identify true incompetence vs. lack of knowledge in this insightful video! 💼🚀 #LeadershipSkills",
    "captions": ""
  },
  {
    "id": "rnyJzSwU74Q",
    "title": "Traditional vs Empirical! Whats the difference? Agile faces off agianst waterfall!",
    "description": "Explore the clash of Agile vs Waterfall! Discover how empirical models boost project success with visibility, adaptability, and continuous value delivery. 🚀",
    "captions": ""
  },
  {
    "id": "roWCOkmtfDs",
    "title": "The Importance of Validation in Product Development: A Strategic Approach",
    "description": "Discover the importance of product validation! Learn how to ensure features deliver real value, reduce waste, and enhance user satisfaction.",
    "captions": "When you think a feature is going to be valuable to your customers or to your business, how do you know that that work has actually provided value? I've been working with a customer recently where a lot of sales-driven features end up in the product, which is actually having the impact of fragmenting the product and making it more difficult to use. The driving force for adding those features to the product is closing a deal; it's got nothing to do with what the users of the product want. It's got nothing to do with what the business that is creating the product wants. All it has to do with is closing the deal with the customer.\n\nSo why is that bad? We obviously want to close deals with customers, but what's bad is because we don't know whether those things that we're creating actually produce value or not. There's definitely an assumed value, right? We think if we add this feature, we're going to get value from it, close that deal. But what's the long-term impact of that feature? We might close that $30,000 deal, but if over the next five years that feature is going to cost us $100,000 in support and maintenance and all those kinds of things, and we don't close any more deals because of that feature, then it wasn't worth adding that feature to close that $30,000 contract.\n\nBut your sales guys don't care because they've made their 5% bonus on the $30,000 of the deal they closed. There's no incentive for them to really focus on the right features that will support many of their customers. They're just worried about closing the deal because that's how they get the bonus. That's usually the metric for salespeople.\n\nOne of the ways to turn that around is to start changing the way you measure, changing the way you deliver bonuses. People behave how they're measured, right? A great example again is Microsoft, which has lots of these examples because they've been through some of these traumas. They switched the Azure sales folks from getting their bonus based on the number of Azure hours they sell to being instead on the number of Azure hours the customer uses. \n\nSo then instead of selling a million dollars to the customer and then the customer being unhappy at the end of the year because they bought a million dollars' worth of Azure and they've used $40,000 and the rest is waste, the salesperson is focused on usage. How can I help you as the customer use this product, not how can I be Draconian and close the deal and get you to sign on the dotted line? Signing on the dotted line is not the value that the customer wants; using the features and capabilities to the maximum capability that they have is what the customer wants.\n\nIt's that shift in focus from revenue extraction towards value creation because quite often that short-term view on revenue extraction has a long-term cost that's not obvious to the people that are making the decision that the feature goes in. It might be obvious to the people who are actually doing the work, but they don't have any say or control over that. \n\nThis validation is really important because you pull back around and once you've shipped a feature, you monitor that feature's usage. You collect telemetry from that feature. Now, in order to collect the right telemetry, we can always in hindsight say, \"Well, this feature did this,\" right? But was that what was intended? Is that why you added that feature in the first place? Is that the change that you wanted to make? \n\nThis is why I'm a big proponent, as part of product management, of hypothesis-driven engineering practices. It doesn't have to be engineering; it can be anything we're building. If we're building a product, I guess I would just call that engineering anyway. If we're building a product, every feature that we want to add to the product that is not just table stakes—there are features that we just have to have. \n\nFor example, if you're going to have a web-based product and there's dynamic content specific to the user, they're going to have to be able to log in. I don't need to have a hypothesis to say, \"Is adding login a good idea?\" We kind of have to have it; it's table stakes. But what level does that go to might include some kind of hypothesis, right? \n\nIf we make it easier to log in—right, so base username and password is how most login systems work. Most systems are moving to passwordless. If we implement a passwordless system, do we get more or less users using our product? If we put a LinkedIn auto-login or a Windows or an Apple or Google auto-login, does that increase the number of users that we get in the system? \n\nSo the hypothesis would be, \"If we add the capability for people to log in with Facebook, we're going to get a higher number of people logging into the system because it's easier for them to log in.\" That would be a hypothesis. Then you might ask the question, \"Well, how much more is that worth?\" Hopefully, it's very minimal. That sort of thing should be very minimal effort to add to your system, right? \n\nIf you add that to your system, what data are you going to collect to know whether you've successfully achieved that hypothesis? Well, I want to know how many people click the Facebook link versus use the username and password. I also want to know the total number of new net users coming onto the system. \n\nWhat I would expect to see is, you know, we've got our line for new users in the system. We add that feature, and that line has something noticeable that says we're increasing at a higher rate. Then we can look at the data and say, \"Well, 10% of people clicked the Facebook button; we've got a 10% increase in the net new users. Therefore, we've opened up access to new users and new markets.\" \n\nLess people go to the page and then bounce; more people go to the page and then sign in just because it's easy—they can just click the button. So that's hypothesis-driven practices. We have to look at the data and figure out whether the thing that we added has the result that we expect. \n\nBut this is the important part: that means whose job is it to provide the hypothesis? It could be the person who wants the feature, who's asking for the feature. This is something that I encouraged a customer recently. I encouraged them to push back to sales. \n\nSo if sales say, \"We want feature X because we think it's going to close this deal,\" and this deal is worth X amount of money, engineering should say, \"Well, how many other customers are going to use the feature? How much do we think it's going to increase usage of the product?\" \n\nI'd like you guys to come up with a hypothesis of why we're adding this feature and what we expect to be different other than just closing that deal because we want to look at the total cost of ownership, let's say, over five years of adding a feature—support and maintenance and testing and automated testing and all of those things. \n\nWhat's the total cost of that? The amount of time it adds to the build, right? All those kinds of things. A lot of that is guesses, but we come up with, \"Here's what we think it will cost.\" Are we actually going to make the money back that we're putting in? Is it enough of a difference to make it worth doing? If we do it, what else is it going to support? How many other customers is it going to help? \n\nThat's the clincher. Do you understand how many customers are using the features that you have in your product? I think there's some data from the Standish Group in Boston that used to create the Chaos Report. I think they still do create a report called the Chaos Report every year; it might have a new name now. \n\nIn that report, they collect data—they're a data analysts group. They collect data across, I think, about 70,000 to 75,000 projects worldwide, mostly in the US and Europe but some in the rest of the world. I think it's like 60% US, 30% Europe, and then 10% of the rest of the world. I can't remember exactly, but I seem to remember those numbers; I could be making them up. \n\nThe data that they analysed showed that only 35% of the features that we build in our products are actually used by our customers. I think it could be used a little bit but not enough to make it worth adding to the product. They've analysed that across all these products. \n\nSo why is that number so low? Because that sounds like for every million dollars you invest in your product, you're only getting $350,000 worth of value, right? So that's a lot of waste—$650,000 waste. That's a lot of money. Where's it going? Why are we building features that our customers aren't using? \n\nEven worse, why are we continuing to invest in features that we could know that our customers aren't using? That's the even more interesting question. How many features do you track the usage of features in your product? And how many features in your product are you actively adding new functionality to that your customers don't use? \n\nBecause if they're not using it, you probably want to think twice about adding new features. You may want to double down, right? You've got that old adage that we can either double down, right? So we keep investing in that feature because we think it's going to be valuable in the future and customers will use it. \n\nWe pivot; we need to change the way that feature works in order to maximise user engagement with it, right? Which means it's valuable if they're engaging with it. Or we stop investing in it and perhaps take it out of the product. \n\nHow often do you make those decisions? And how often do you make those decisions based on data? Do you have the data to be able to make those decisions? This is something that product management wants. The only way they can get the data is if the team adds that capability into the product. \n\nIt needs to be integrated with the product because you want to be looking at the actual features, how they work, and create telemetry specific to those features. Understand based on what you intended the feature to do that you're able to track that data, see the needles moving, and decide whether to continue investing in it or stop. \n\nThat's something that every product manager, every product owner should have for almost every feature they add to the product or the intent to add to the product. That can be great feedback and information you can use when you're talking to stakeholders who've asked for those features. \n\nBefore you've built the whole feature, build a little bit of it, validate that it's the right feature, and if you see there's very few people using it, go back to the stakeholder and say, \"We don't want to keep investing in this feature because nobody's using it. Do you know why nobody's using it?\" \n\nYou can go ask the customers as well, but this is your pushback on that financial investment that's maybe been imposed upon you if you don't control everything. Validation is a super important part of product development. It's often lacking. \n\nI feel that it's more often lacking than almost anything else in product development. So go out there, figure out what telemetry you need in your product, get your engineers to build it, and start making evidence-based decisions. Validate that the features that you create are actually adding the value that you intended for them."
  },
  {
    "id": "rPxverzgPz0",
    "title": "Would you recommend the APS course to a newbie scrum team, and Why?",
    "description": "Discover how the APS course can empower your newbie Scrum team to create value and thrive in an Agile environment. Watch now! #Scrum #Agile #Training",
    "captions": ""
  },
  {
    "id": "RSPw8pZ9NT8",
    "title": "Can you talk about the Kanban workshop and why it's a great option for organizations",
    "description": "Discover how Kanban workshops by NKD Agility can empower your team to embrace agile practices and enhance product development without the Scrum framework.",
    "captions": ""
  },
  {
    "id": "rX258aqTf_w",
    "title": "In what circumstances is agile consulting appropriate?",
    "description": "Discover when to engage an agile consultant to enhance your team's collaboration and creativity in this insightful video with Martin Hinshelwood.",
    "captions": ""
  },
  {
    "id": "rzw7aPbz_sg",
    "title": "PAL Class Of 23 July 2020 for Everyone in EST",
    "description": "Join our Professional Agile Leadership workshop on 23-24 July 2020! Open to all, learn key skills in a live virtual format. Register now!",
    "captions": ""
  },
  {
    "id": "RzWFeLfSnP0",
    "title": "Why is done so important in the Reporting & Data Space?",
    "description": "Discover why \"done\" is crucial in Reporting & Data with Mark Noneman, as he shares insights on lean and agile practices to boost quality and productivity.",
    "captions": ""
  },
  {
    "id": "s_kWkDCbp9Y",
    "title": "The Key to Being an Effective Agile Coach: Understanding the Team’s Context",
    "description": "Discover the fifth essential achievement for aspiring #AgileCoaches with Martin Hinshelwood. Elevate your skills and empower teams to thrive!",
    "captions": ""
  },
  {
    "id": "S0h_7ayLpsE",
    "title": "Mastering Evidence-Based Management for Agile Success",
    "description": "Unlock the power of Evidence-Based Management! Learn to gather and analyse data for better product decisions and boost customer satisfaction.",
    "captions": "With evidence-based management, it's really important to gather the data, the evidence that you're going to use to help you in your decision-making, to help inform your decision-making. So we need to gather a bunch of data, and then we need to be able to analyze that data. There are lots of different places you can get your data from, depending on what type of data it is that you need. \n\nIf you remember, there are four key value areas in evidence-based management that we want to kind of try and make sure that we have at least something in each of those areas. In each of those key value areas, we want to find what it is we want to collect and then figure out how to collect it. Then we have to actually collect it, and then collecting it's not good enough; we have to actually analyze it. \n\nThere are some areas that are easier than others. In the organizational capability, the two key value areas that are part of organizational capability are time to market and ability to innovate. There's a plethora of data that you can collect within the context of your engineering teams. My focus tends to be around software engineering, so I might collect things like how much technical debt do I have, how many bugs do I have over time, right? So the trend of bugs. I might be collecting, \"Oh, there's loads of data I can collect.\" \n\nI could collect code coverage or the trend of code coverage over time; that might be valuable at some point. There are hundreds of different data points that we can collect within that context. A few that might make sense: if you're in the ability to innovate, you'll probably find a lot of metrics coming from D. If you look up the DORA metrics, there's lots of great stuff in there. \n\nThere are things like defect trends, but also innovation rate is really important. What percentage of time do you spend innovating versus doing all the other stuff that you need to do? Collecting things like technical debt, some of these things are easy to collect. Innovation rate is fairly easy; you just categorize the work that you're doing as net new work, augmentations to existing functionality, and then support and maintenance work, whatever you want to call those categories. \n\nThen you graph that over time, right? So you'll be able to see what's going on there, and you can then make decisions based on the amount of money that you're investing in each of those areas. Do you want to change how your investment strategy works? Do you want to spend more time on innovation, or do you need to spend more time on augmenting your existing functionality? That might depend on some of the other metrics from the market value side of the story. \n\nIn market value, we had current value, so what our product currently does, and unrealized value, which is the things that our product might do that it doesn't do yet. This would ultimately result in your product backlog, and this is your actual increment, your actual product. If we were looking at data for your actual product, we might be looking at something like customer satisfaction. How satisfied are the users of your product with your product? How satisfied are they with the features? Do they meet their needs? \n\nThere's a bunch of questions you can ask around that, interviews you can do to try and get some of that data, and that might inform where you want your innovation rate to be. If your existing customers are very unhappy, then perhaps you need to address that. Perhaps you need to invest more in augmenting the existing stuff or figuring out what you're missing in that space. That could be an expectations gap, which would be more on the unrealized value side—stuff your product doesn't do yet. \n\nBut understanding that data informs the decisions that you make. So there's a piece of data in our organizational capability, specifically in the ability to innovate, and our innovation rate. Our decision on what should we do with that data depends on this other data, right? Data on how people feel about our current product or the features in our current product. Maybe it's all the way down to individual features; granularity is quite important there. \n\nWhat we're missing in our product, and if we're missing a lot, we probably want to invest a lot of money in the missing stuff. If we're not missing much but our customers are unhappy, we probably want to invest a lot in increasing the satisfaction of our customers within our existing product structure. All of these decisions are informed but not controlled by the data, right? \n\nSo not only do we need to collect the data, but we need to realize that just because the data says something doesn't mean we should immediately act upon it. There are some things that you absolutely should immediately act on, like if the trend of defects is suddenly shooting up or customer satisfaction suddenly takes a big drop. Those are things that you want to check the data first, then perhaps have some kind of bigger action on it. \n\nBut there are times where you might take the opposite action. One of the things that you would definitely collect in current value is your usage index, as they call it in evidence-based management. But how, what is usage data? It's telemetry in your product, right? So do you know if you have a button that takes you to a feature, and that feature has options? How many, what percentage of your users use that feature? How often do they use that feature? And when they do use that feature, what parts of that feature do they interact with? \n\nThat should be data that you have on hand, right? That's data that we can reasonably easily collect. It requires engineering work; your developers need to add stuff to your product to collect that data. If you're building a website, you might get some of that with Google Analytics, but usually, we're looking for a deeper story than just what pages are hit, depending on the way your website's constructed. \n\nIf you're doing web, exactly what features, how long features take to load, how long actions take—these are all parts of that telemetry story that give you an absolute wealth of data that you can access. I heard a great story from a car company that I worked with, and they were talking about how easy it was to access that data within their organization. Most car companies collect this type of telemetry, even if they have no over-the-air updates. \n\nWhen your car goes in for a service and they connect up the computer system at the dealership, it sucks down all of the telemetry data on all of the gear shifts, how the gear shifts performed. There's a big log in the system; they load that data, and it gets sent off for faults and all those kinds of things. That gets sent off to the parent company, and then the idea is you would analyze that data, right? \n\nThey were talking about their inability to access that data, even though it exists. To get access to a slice of that data, to a piece of that data, required a whole bunch of time and approvals. In this particular case, they said something like six to eight months before they could get access to the data once they requested it, and that's far too long. That's us then making business decisions based on six to eight-month-old data. Because by the time we get that slice of the data, it's old, and we need a new slice of the data. \n\nWhereas they told me that one of their colleagues worked at Tesla, and at Tesla, everybody has access to all of that data instantaneously, continuously. You can go look at the real-time stream of that data from the cars to know what people are doing, how people are interacting with the features and capabilities within the car. That's game-changing data, right? Having it at all is game-changing. \n\nHaving access to as close to real-time as possible—like if I'm working on a feature right now and I'm doing continuous delivery, so I'm shipping to production on a regular basis, let's say it's on average every couple of days. I'm shipping this feature to production, and it's shipping out to all the cars like Tesla does, right? They do continuous updates. Then I want data at this point. I want as close to this point as possible. \n\nSo I make a change, I ship it in, I've got two days until my next change. I'm going to push out, what do I need to fix? What do I need to change? Well, I'm going to be analyzing the data in that segment to update my product backlog and engage with the team and figure out what needs to happen. This is what product management is all about, right? You're actually managing the product, and you're managing the product with the data to understand how you need to manage the product. \n\nThis is hugely important, and that difference is your customers loving your software or hating your software. I have a Nissan Leaf, and their software is probably some of the worst, least useful. I don't know how much more to describe it; it's the most horrible software to use and work with and the least useful from any perspective in the way that it's constructed, the way it functions, the way I engage with it. It doesn't provide me with the things I want; it doesn't provide me with the things in a timely manner. \n\nIt's terrible; it's just terrible. And that's likely because nobody's looking at the data. Nobody's looking at it. I think it has the Android store; it's got a—I think it did have a 1.2 rating at one point. It was a horrible, horrible app that nobody must be looking at that data, or they don't care, right? If the business doesn't care about that part of the system, then why provide it, right? \n\nMaybe they're providing it because they feel they have to, but if you have to provide it because it's table stakes, it needs to be good; otherwise, it reflects on your company and your business, right? Collecting this data as a product manager is the whole ball game. So we just talked about one metric. We started with an innovation rate, and we ended up connecting all those stories together. \n\nThe Visual Studio team at Microsoft gets seven terabytes of data per day, and that's just from the clients, the Visual Studio desktop clients out in the world that are on networks that allow that data to be sent. Lots of big organizations have those things locked off so that that data doesn't exit the network, right? So this is just a subset of users, but it's a subset of data that they can interact with, that they can see what's going on in the product, that they can make a change and push it out, and then see almost real-time whether they've been successful or they've not in achieving the hypothesis that they had. \n\nWe think adding this feature is going to make a change in people's behaviour in this way. Let's look at the telemetry. Did we improve the user engagement with this feature? Did we improve the number of people that used it? If not, we didn't achieve our outcome with that change. Let's think about why we didn't do that. Maybe we want to talk to a couple of users and figure out why they didn't change their behaviour, right? \n\nAll of those types of things are part of building great products. So we've talked about some where we can get some of the data. We talked about how to collect the data. Some of it is just, I guess, we talk about to collect it. Some of it is just you stick it in Excel, right? There's nothing bad about Excel; it's a great tool. \n\nSo you just record it on a regular cadence and stick it in Excel. That could be from customer survey data; that could be a slice of your innovation rate when you're looking at it. If you're really on the ball, you might feed all of that data that you have into a data warehouse and then use something like Power BI to analyze it and have dashboards that show you what's going on near real-time in your product, in your system, when your customers are doing and how they're interacting with it. \n\nThere are leading measures and lagging measures. Leading measures are ones that change frequently, right? That you can make a change to the system and then see that data changing. Lagging measures are things that take a little bit longer to come to fruition. If you surveyed users on their satisfaction, then that's going to be a lagging measure, right? \n\nYou're making changes to the system; it isn't going to immediately reflect changes to the data. You would need to analyze it over a longer period of time. Both are important, right? Your leading stuff is changing the work that you're doing right now; your lagging stuff is perhaps affecting more your overall strategy and what's going on. \n\nThere's a great example of a feature that the Visual Studio team built called IntelliTrace. If you don't know what it is, it doesn't matter, but it was a big, big, expensive feature. It was only in the Enterprise product to start with, and it was a very expensive feature to build. I can't overstate that enough; it's like huge amounts of money, more ridiculous amounts of money than we could possibly imagine. \n\nWhat they found was that nobody was using it. So they built this feature, they spent all this money on this feature, they shipped this feature, and then they're looking at the telemetry, and it says nobody's using it. So what do you do? Do you cut that feature? Do you stop investing in that feature? Do we invest more in that feature? We maybe need a little bit more information. \n\nSo when they did dive into it, right? Go see a little bit of gamber, right? Go have a look, talk to people. They found that people weren't using it because they didn't know it was there, and it was off by default, and they had to go turn it on in the settings. So in the next version of the product, because this was actually when they were on the two-yearly releases, it then took them, let's say, 18 months or whatever amount of time to get this change in. \n\nSo that's 18 months of people not using the feature, remember, of that feature effectively sitting on a shelf and depreciating while your competitors might have that feature. You do have that feature, but your customers don't know it's there, so they don't use it. They might go to your competitors because they think your competitors have a feature that you don't. \n\nWhen they turned it on by default and shipped it out, nobody turned it off. Very few people—the percentage of people that turned it off was very small, and then they were getting that usage data and getting that usage telemetry. That's why I always say the data that you collect informs but does not control your decision-making. \n\nBecause there needs to be more to it than that. You're playing poker, not chess, right? If you're playing chess, all of the information that's available is in your hands, right? You can see the state of the board; you know all the moves; you know all the possible counter moves. That's where you get to those grandmasters thinking 20, 30 moves ahead. \n\nI don't know how many moves ahead they think, but they're thinking so many moves ahead. You know it's 10 moves to checkmate, right? And then how does this person get out of it? The only way they can do that is to, I guess, maybe fake you into doing something, or you make a mistake, right? I'm going to win unless I make a mistake; I'm going to win this game. \n\nThere’s no hidden information. But for building products, it's more like playing poker. We have incomplete information; we don't understand all of what's going on. Now ideally, we want as much information as we can on the things we can find out to fill in enough of the gaps so that when we're looking at our big picture or even our little picture, we can kind of say, \"Well, we think this is what's happening,\" right? \n\nWe can infer the missing information. When you're playing poker, you know the cards in your hand; you know the cards that are open on the table, on the type of pool you're playing, but you don't know what your competitors have got in their hand, and you don't know what the dealer is hiding or what the next card's going to come off the stack. \n\nNow, if you're really good at card counting, if you're telemetry and data, then you can have a more informed decision-making. If you get very good at reading the other players around the table, really reading their emotional intent, right? Those tails that they have, then you get more information that you can use. \n\nThat's who the best poker players are, right? They are poker players that recognize the cards that go through the deck. They've got good memories; they recognize the emotional engagement between the players and the game to be able to discern more information about what their competitors are doing without actually knowing, right? It's a lot of guesswork. \n\nThen they make decisions on whether they're going to ante up, fold, or increase the bet. They might go all in, right? I've definitely got the winning hand; we're going to go all in and run with this. So that's what we're playing as product management. \n\nUnderstanding the data, collecting the data, viewing the data, analysing the data—some tools for analysing the data. Wow. IT probably is the big, big tool. My background is in the Microsoft space, so I tend to know the Microsoft solutions for these problems. But I know a lot of people like Power BI, even when they're using other platforms to store the data. \n\nPower BI to put all the data together. Probably things like App Insights is great. Application Insights is Microsoft's tool for collecting telemetry. It supports open telemetry. There's a platform called OpenTelemetry that you can use, and you can store the data wherever the heck you want. \n\nBut it enables you to collect and stream data direct from customers; that's your telemetry capture. This is part of the story, right? So you've got your data, you've analysed your data, you've been able to tell the difference between what you think is happening versus what you know is happening, right? Your intuitive versus your actual data. \n\nYou need another tool; you need a tool to help enable your organization to more quickly adapt and sync through those processes. The main tool that I would use to collect data to understand our processes, right? It's exactly the same as understanding our organization. We want to understand our process that our team or our product is our operating model for our product. \n\nI'm probably going to use a Kanban metrics, right? That's going to give us quantitative data on what's going on within our system that our teams have created, that we've created within our organization to handle work. Then I want to make tweaks to that system and be able to see in the quantitative data that it's changing, right? \n\nIt's changing in a way that we want it to change, right? We're improving, reducing our cycle time, improving our throughput—all of those kinds of things. So that's great. Kanban really allows you to model any system, right? But there are tools out there, technologies out there that you can adopt that allow you to kind of jumpstart that process. \n\nYou might be way over here on, \"My team, every team in my organization made up their process, and every member of every team does their own thing.\" That's a pretty common place for most organizations to be. We want to have a little bit of standardization while enabling the teams to be free to do those things that we've standardized in any way they choose. \n\nThis is the same idea that Microsoft talks about: one engineering system. That's Azure DevOps, right? This idea that you have one place to store all the stuff so everybody knows where to go look. Everybody knows how to go set things up in that thing. \n\nWhen an engineer moves from one product to another product, they're not going and hunting for, \"Well, where's the automated builds? What technology is this? I need to learn a new technology to even change and understand this automated build.\" You don't have to do that; we understand that stuff already. \n\nThen it's just looking at how does it actually run, right? Then we can jumpstart our people coming into that process. The same is true in process, like 1ES for our actual engineering systems. Scrum is a social technology for our social systems, right? \n\nWe can jumpstart our move towards agility. Doing Scrum doesn't mean you're agile, right? We want to improve our systems, and Scrum can be a good application to say, \"Here's our bounded environment,\" right? So that if you're familiar with Kotter's Change Model, you create a bounded environment for change. \n\nYou create a set of principles that are going to guide that change, and perhaps there's some rules in there at the start, right? We need a set of rules to get people started so that they're then following the principles. Then we start taking away, like, \"You don't have to do this; you don't have to do that.\" \n\nWhen you were new at this, you had to do it this way. You know, like training wheels on your bike. Then you can take the training wheels off, and suddenly you're riding your bike on your own. If you look at the Scrum Guide, it has a literal set of rules, but it's based on a set of principles. \n\nSo the rules are not a must; the principles are a must, if that makes sense in the Scrum Guide. But the rules are there because most teams, especially when they start out, especially when they're coming from something else, need an example of how to start doing something. Once they are doing that thing and doing that thing well and understand why those particular structures are in place, they can then start doing something different from those particular structures in order to still fulfil the same outcome from the principles. \n\nThat's why I talk about Scrum as a social technology. We've got our engineering, you know, one ES, one engineering system. What is your one ES? Your one engineering system that helps from an engineering perspective ensure that everybody in your organization is able to move between different products, is able to help each other, and collaborate with each other, share knowledge and ideas because they're all working within the same relative context, even though how they actually do stuff is completely up to them. \n\nEvidence-based management is really your lead into a whole bunch of things that we can do really, really well and to understand how we're doing things. You can apply evidence-based management to your business; you can apply evidence-based management to your product; you can apply evidence-based management, some of the metrics, to an individual team, and you can figure out what's happening with your system, how your business is organized. \n\nWhen you make changes to that system, you can see it's the empirical data that you need to understand, not just your engagement with the market and your engagement with your users, but how your people are engaging and your products are delivering within that market so that you can adapt your strategic, intermediate strategic, and tactical plans in order to have a successful business, build the best product possible, and generate lots of money."
  },
  {
    "id": "S1hBTkbZVFM",
    "title": "The Key to Hiring the Right Agile Coach: Building Credibility with Teams and Leadership",
    "description": "Discover 5 key considerations for hiring an #AgileCoach with Martin Hinshelwood in this insightful #shorts video. Elevate your team's performance today!",
    "captions": ""
  },
  {
    "id": "S3Xq6gCp7Hw",
    "title": "How much of an impact can a strong, skilled product owner have?",
    "description": "Discover the vital role of a skilled product owner in driving team success and customer value, as Martin Hinshelwood shares insights on agile collaboration.",
    "captions": ""
  },
  {
    "id": "s4h2K62V_d0",
    "title": "Code Reviews for Quality Assurance",
    "description": "Discover how to integrate quality from the start in software development with Martin Hinshelwood. Embrace shifting left for better products and reduced technical debt!",
    "captions": "So the concept that we talk about a lot from the perspective of modern software engineering that enables you to push quality, build quality, build security, build these things in from the beginning, build it in rather than testing it in later, is the concept of shift left. \n\nMoving quality assurance earlier in the development cycle. Now shifting left is often controversial because when do you stop? How far left should you shift? As far as I'm concerned, it's all the way to the left. The people writing the code should be the ones that are writing the tests. They should be the ones that are running the tests, that are taking the fallout from the tests, that are all the way through to, \"I need to support this.\" If I wrote the code, I need to support this in production. \n\nNow usually in bigger products, that's team-based, right? So the team that's working on this feature or this capability or this part of the product, this area of the product, are the ones that also support it in production. But I don't just mean support it in production. They're dealing with the bugs, they're dealing with almost with the support requests. It's probably being, in a big organisation, it's probably being filtered through some kind of levels in a centre, but they need to handle those support requests and they need to look at the telemetry for the experiments that they're doing and figure out whether their experiments are successful, whether things are right. Do we have the right alerts to know when something's gone wrong with this feature or capability? \n\nThat is all shifted left to the engineering team that is building the product. They are building it, running it, supporting it, maintaining it, validating it going forward into the future, which means you need all of those skills that in the past you maybe had dispersed around the organisation. You need all of those skills on the engineering team. \n\nSo usually, you have a lot of people who can code, right? But you also have people who have security expertise, who have testing and validation expertise, who have user experience expertise. All of those things move further towards the source of all of our problems and all of our successes, which is building the code. \n\nIn the modern engineering space, in agile practices, there are a bunch of tools and techniques that have kind of grown in that space to be really popular, but also very contentious because people don't want to put in the work because they're more effort to do right. So it seems like we're going to deliver less stuff because we're spending more time on the engineering space. But because we don't have that arc, or I don't have, is probably too strong, we have less of that arc of people finding problems in production. \n\nWe have less of that arc of reduction in brand. Everybody's losing their mind because we're not being presented well in front of our customers. We have less of that. We have an opportunity here to do stuff, but we need to fix this stuff first because we never fixed it before. We just pushed it out and we didn't bother with it. All of those things are more effective. \n\nTherefore, when we start shifting left and we're doing more things from the perspective of the engineering team, it takes longer to do each thing the first time, but each thing is done more right. Because the lack of doing things—I'm trying to avoid the term technical debt because I'm including more things in this story than just technical debt—are poor engineering practices and poor quality output, right? For whatever reason, including technical debt is an exponential problem, not a linear problem. \n\nThink about if you built the first story of a building with substandard materials, and then you built the second story of a building with substandard materials. How far are you going to get before the building collapses? Right? Now we have an advantage in the software industry that we can build the first level. We can build the first level of the building quickly, and when we go to build the second level of the building, we can go back and refactor, redo any of the things that we need to enhance the support of the second story of the building, right? \n\nThis is a terrible analogy, but it's working for me just now. It enables us, as you don't know how many stories your building's going to have when you're doing software engineering. If you want to look up the building analogy, look up the Chrysler Building and how the Chrysler Building was built because it was effectively built in an agile manner. They didn't know how many stories they were going to put on it. They didn't have all the materials up front. They didn't have a plan up front of the building and what they were going to do. \n\nIt's a great example of this in that physical space, but in the virtual space, we can do test-driven development. Test-driven development is not about building better code; it's about having better architectures. We create better architectures because we only create what we need to support the things that we need it to do. \n\nDoing pair programming means that we've got more eyes on the code. It feels like it's going to be less productive, but productivity is not a moment in time for the engineering team. It needs to be looked at across the whole system. We can take what seems like a hit on productivity to do pair programming because there's two people doing things. Why can't we have them both doing their own thing? But we have less problems that we need later, which are much more expensive than the pair programming is at the start, right? \n\nSame with test-driven development. We build better architectures, so it's easier to add stuff going forward into the future. And when we do need to refactor our architecture, we have a test infrastructure to validate at each change as we make it to make sure that we're not breaking existing things, existing stories that are supposed to happen. \n\nThese tools are fundamentally part of that story of how do we build a practice of engineering excellence within our organisation and enable great things to happen. We want to build great products. We want to make great profits from the great products that we build, and the only way we're going to do that is if we do things in a way that enables us through the future rather than us getting to a point where we're drowning under the weight of all the crap that we've shipped to production over the years. \n\nAnd if you are currently drowning under the weight of all of that, as the Azure DevOps team was when they moved from their waterfall model that they'd been doing for 200 what let C to the for five years, and then they moved to continuous delivery to production, they had to go pay back all of those loans that they'd taken out for the future, right? \n\nBut what they found was that in paying back those loans, they became so much more effective because of the exponential cost of taking out those loans. They became so much more effective that in actual fact, the cost of paying it back was completely irrelevant to the benefit and value that they got from it being paid back. That makes sense, right? They went from 25 features to production each year with the same number of people to nearly 50 features to production each year. \n\nAnd even taking four years to get there, holy moly, I would rather have 800 features than 25 features, right? And yes, the features are smaller, but it's more experiment, right? It's more chances to get something right. It's more ideas to see if they connect with the customer. \n\nSo in the old ways, you have to stick with and focus on something even when it's not quite the most optimal thing. But if you're doing lots of little experiments, you can find, \"Oh, this thing resonates really much more than these other things with the customer. Let's do more on that until it stops resonating,\" and then we move on to something else and move on to something else, and we build a better product with more capabilities. \n\nSo there are lots of tools and techniques that you can use within the context of modern software engineering practices to build quality in from the start and enabling your teams to be as effective as possible to choose the practices because they need to be able to choose the practices that work best for their context. That's something that naked agility can help you with."
  },
  {
    "id": "S4zWfPiLAmc",
    "title": "3 best ways to wreck Kanban. Use vanity metrics.",
    "description": "Unlock Kanban success by ditching vanity metrics! Discover actionable insights to enhance your workflow and drive continuous improvement. Watch now!",
    "captions": "One of the main ways to mess up the implementation of your cand strategy and not get the value that you're expecting, i.e. we're doing better than we were before, is to not look at the data. I see this in team after team. They say they're doing caman, but all they have is a board with some columns. They don't have any whip limit, and that's it. They just have a board with some columns and they call it caman. I'm sorry to say, but that is definitely not enough to be a Canan strategy. It's just not enough. \n\nOne of the key things that they miss out is not looking at the data or using vanity metrics. Oh my goodness me, the vanity metrics coming up my ears! Story points, velocity, burndowns—get rid of all that crap! It's terrible. It's not going to help you maximize the flow of value for your customers. It's not going to help you see what's going on enough to be able to ask more interesting questions that allow you to change your process in order to optimize it. Those metrics are absolutely not good enough. \n\nIn that story, there are four key metrics in cat that you should be looking at. They're all fairly straightforward, easy to collect. Most of us are using digital tools today, so you effectively only need one piece of data—well, technically two pieces of data—for each piece of work that flows through your system: the date and time when it started and the date and time when it finished. That's it! Those two pieces of data. If you're using Jira, if you're using Azure DevOps, if you're using Trello, all of that data is collected for you. It's in there, and you just need to render it in a way that makes sense. \n\nSo if it's started but not finished, it's part of your working process, right? That's your whip. If it's started but not finished, you can also see how old it is—how long it's been sitting there. That's work item age. If it's finished, if it's crossed that finish line, you know how many items you've delivered per unit of time. Right? So over each 30-day period, how many items do we deliver? There you go, we've got that number just by virtue of that end date. And if you have the start date and the end date, you also have the cycle time—how long it actually took to deliver each of those items. \n\nThen you can do a bunch of math, which is pretty standardized. You can go or look at a bunch of pieces of information in that, but without that data, you can't see what's going on. Right? Transparency, inspection, and adaption—where's the transparency if you don't have the data or you decide to look at vanity metrics or metrics that don't actually provide you with anything actionable? That's the key. It is the data. What are you doing with the data you're looking at? How are you changing the way you work based on the outcome of that data? \n\nIf you're not, you're either not doing it or you're not looking at the right data because the data is not telling you something that helps you. Stop looking at back data as part of your cband strategy. Stop looking at vanity metrics and improve your process. If you're struggling to implement a cband strategy, we can help or help you find somebody who can. Click on the link below and get in touch."
  },
  {
    "id": "S7Xr1-qONmM",
    "title": "Why do you think the PSU course has become so popular for product development?",
    "description": "Discover why the PSU course is transforming product development by integrating UX into Scrum teams, empowering them to create valuable customer solutions.",
    "captions": ""
  },
  {
    "id": "Sa7uw3CX_yE",
    "title": "The Tyranny of Taylorism and how to spot agile lies for The Future of Work in Scotland",
    "description": "Explore the pitfalls of Taylorism and uncover the truths behind agile methodologies in Scotland's evolving work landscape. Join the conversation!",
    "captions": ""
  },
  {
    "id": "sAKCLQ38GzA",
    "title": "Does 'starting with why' - Simon Sinek - really matter?",
    "description": "Explore the essence of motivation beyond money! Discover how 'starting with why' fuels intrinsic drive and purpose in the workplace.",
    "captions": ""
  },
  {
    "id": "sb9RsFslUfU",
    "title": "How did you know you were ready to transition from DevOps practitioner to DevOps Consultant?",
    "description": "Discover Martin Hinshelwood's journey from DevOps practitioner to consultant, exploring mastery through empowering others in this insightful video.",
    "captions": ""
  },
  {
    "id": "sBBKKlfwlrA",
    "title": "Professional Scrum with Nexus (SPS) with Certification - Learn skills to overcome scaling challenges",
    "description": "Master scaling Scrum with the Scaled Professional Scrum course! Overcome challenges and enhance collaboration across teams for greater value creation.",
    "captions": ""
  },
  {
    "id": "sbr8NkJSLPU",
    "title": "3 core practices of Kanban Defining and visualizing a workflow",
    "description": "Unlock Kanban's potential! Learn to define and visualise workflows for enhanced efficiency, clarity, and team collaboration. Streamline your processes today! 🚀",
    "captions": "One of the core practices of Kanban is to define and visualize your workflow. This is really important because it sets the groundwork for us all, all the people that are participating in the work in the system, as all agreeing what is it that we do and how do we currently work. \n\nSo there are lots of pieces of information that we need to pull together to figure this out. One might be like, what goes on our board? That might be a great question to ask. What types of work go on our board? Another question might be, what are the current stages that all of our work goes through? Not a specific piece of work, but all of our work goes through that would generate the columns within your Kanban board. \n\nBut also asking additional questions like, why do we pick this item? How do we pick the item from this column when we go to select things? And what you'll find is that for most teams, most groups of people, they don't have any level of agreement on what that is. Why would you pick something? Lots of people will pick stuff because they think it's cool, because it fits, they think it fits their skill set. \n\nBut the important questions to be asking are, how do we pick this so we maximize the value of what we're delivering? Is that the right thing to select in order to do that? Is that the right business decision? Answering those questions and coming up with a set of rules for our team—right, these are our decided rules on how we're going to select things, why things move from one column to another, what are the defined states, what are the types of work, and how are we going to control the amount of work that we have in progress—are all part of defining our workflow and explicitly setting policies. \n\nThat's all part of this defining and visualizing your workflow. Bringing all of those things together allows us to have a way of working. Another way of saying this, another way of saying define and visualize your workflow, is what is your team's way of working? And does everybody on your team agree that that's the way that they should be working? \n\nThis definition is absolutely fundamental to figuring out how work flows through your system. Right, you'll probably have heard folks talk about having a stable system. Right, you need a stable system. Well, you can't have a stable system if every member of the team decides ad hoc how they're going to do all of the things within the system. We don't have a system; we've got to make it up as you go along system, and that's never going to generate stability. \n\nSo having a stable system means we've decided what it is, we've written down how we're going to work, we've debated as a team and decided on certain things, and then we visualize that so we can all see what's going on. If you are struggling to implement a Kanban strategy, we can help, or we can help you find somebody who can. Click on the link below."
  },
  {
    "id": "sdIPSpbeA9w",
    "title": "The Cost Saving Power of Automation",
    "description": "Discover how automation transforms software development by reducing errors and enhancing efficiency. Learn from Azure DevOps' rapid feedback success!",
    "captions": "Automation is a huge part of enabling the building of software to be more effective, more standardised, more efficient. I don't like that word, but it certainly fits here. The difficulty is that anytime you've got a human doing something, you're going to have mistakes. You're going to have mistakes, you're going to have steps missed, you're going to have things go wrong. \n\nTwo examples: one's a commercial example and one's just an interesting one. One of the interesting ones, do that one first, is that I used to teach a bunch of testers how to use the Azure DevOps test tools when there was a separate app. It was quite some time ago, and you would think that the superpower of testers would be that they could follow a test script, right? They're going to spend a bunch of work creating the test script, but then they're going to follow that test script to run the test, running a manual test and following those steps, right? \n\nSo there's 10 steps in the test; they follow those 10 steps, and it either passes or it fails, right? Well, in this training, we had workshops, we had labs, and they had to follow a set of steps on the lab. I kept getting feedback from loads of people in the room, loads of instances of the training. I would get feedback all the time that the labs were wrong, that the labs didn't work, that they were following the steps and the lab doesn't work; it doesn't do what it's supposed to do. \n\nThis was false; they just weren't following the steps. They were either missing something or clicking the wrong button or not doing whatever it was, right? So those testers, whose job it is to create and then run sets of steps manually, perhaps to validate whether something is built correctly, were manifestly unable to successfully and consistently run through a set of steps. This is just part of being human; it's not a slight on them, it's not a tester thing, it's a human thing. \n\nThe commercial example is the KN Capital Group, which you might have heard of or maybe not, but they went bankrupt because somebody couldn't follow a set of steps. They had a deployment of a new version of their product; they were Stock Exchange Management trading software. So you can imagine when something goes wrong, the cost of something going wrong is pretty enormous. \n\nWith $400 million in the bank at the beginning of the day, a deployment happened. It went wrong because the person running the deployment deployed to eight out of the nine servers, and because not all the servers had the latest version of the code, some weird stuff started happening. It took them till the end of the day to figure out what the problem was, which was steps missed, and by that time, they had to declare bankruptcy. They were done, right? \n\nThe cost of these types of mistakes is enormous. That one is a very extreme example, but the cost of somebody who's running a set of steps—this could be a tester, it could be a coder, it could be UAT, right?—could be a user. They walk through a set of steps and then communicate back that it was wrong; it didn't work. That cost is in investigation from the engineers, in loss of focus on new features because they're not building new stuff for you when they're having to go look at this erroneous problem. \n\nWhat we want instead is automation. The solution to both of these problems is automation. There is an expression I use: if it can be automated, it should be automated, and if it can't be automated, it should be rearchitected. \n\nClose the feedback loop. Think about if you were telling a story. I'm thinking code is kind of like telling a story. You're telling a story, you're working on part of this story, and then you submit it to your publisher, and the publisher takes six months to come back with feedback. The feedback is, \"This didn't work, that doesn't work, can you change this, can you reformat this?\" \n\nNow you're much further along in the story; you're working on a different part of it, and now you have to come back to this previous part of the story and get into the mindset of this part of the story and try and ignore the things you learned during the future part of the story, right? The character development has changed, and you have to go back to this old version of the character with an older style of how that character does things. \n\nNow you need to do this differently, so now we're trying to make a change back here in the past when we have understanding from the future that would impact how we would do this, but we can't let that impact what we're doing. It's a huge cognitive load, right? And that's in code; it's exactly the same. Exactly the same thing happens when you have to do that. \n\nSo not only do we want automation in our process to automate tests so that we don't have as many false positives of tests failing or false negatives—anyway, false negatives are probably good and false positives, right?—but we also want to have those tests run as quickly as possible so that we get that feedback loop closed as quickly as possible. Preferably, I'm talking about minutes. That's what I'm talking about here: we want automation that runs in minutes that tells us whether we've passed or failed, preferably seconds, right? Or milliseconds, but minutes at the most, at the outside. \n\nA great example of that is the Azure DevOps team. They used to have very long automation to find out whether they'd broken something; it was 48 to 72 hours because they had to run on a bunch of servers. They had long-running automated tests, but they were long-running system tests. Those are the wrong types of automation. So not all types of automation are the right type of automation. They were certainly better than trying to do it manually, right? \n\nBut those types of tests tend to be flaky, tend to have a lot of false positives, tend to be difficult. So they embarked on an endeavour to invert that triangle of tests, right? So if you think about it, you've got fast-running unit tests that your developers are creating; that's testing just the smallest unit of work, all the way down to long-running system tests at the bottom. \n\nThey had 38,000 long-running system tests and a very small number of unit tests at the top, so their pyramid was the wrong way up, right? So what they did was they spent a whole bunch of time, money, and effort flipping that pyramid round and working through moving all of those tests to fast, slick automation. They got from 24 to 48 hours to find out whether something was wrong all the way down to three and a half minutes to run their entire test infrastructure locally on the developer workstation. \n\nSo you close those feedback loops; you shorten those cycles. Manual is the longest cycle. Anything manual, whether it's deployments, whether it's testing, anything manual is prone to mistakes. So you get false positives and negatives, but it also takes time. It's time-consuming, and it's costly. \n\nI worked with an organisation years ago; that's the only organisation I've ever encountered like this, so it is unusual; it's an outlier. But they had twice as many testers as coders. Their quality was so bad in their software that they had to do, I think it was, a thousand and a half hours of manual QA to validate whether any change the developers had made would actually work in the system. \n\nSo they had 600 testers and 300 coders in their teams, and it was all manual tests. That is just unsustainable. Think of the cost of having all of those people versus having fast, tight, secure, easy to understand, easy to validate automation that could run and check your software on a regular cadence. You will build more features; you will build those features with a higher level of quality, so you'll have happier customers. \n\nAnd if you're building more features, you're having happier customers, you're doing more experiments, right? Because you're building more features, you're more likely to open out new markets, and you're more likely to make a profit."
  },
  {
    "id": "sidTi_uSsdc",
    "title": "Discipline versus motivation?",
    "description": "Discover the key difference between discipline and motivation in high-performance teams with Martin Hinshelwood. Unlock your team's potential! #shorts #agile",
    "captions": ""
  },
  {
    "id": "sIhG2i7frpE",
    "title": "Improving workflow with Kanban",
    "description": "Discover how to enhance your workflow using Kanban in this insightful video. Streamline your processes and boost productivity! #agile #kanban",
    "captions": "One of the key elements of Caman is improving, making improvements or changes to the system in order to see whether you've managed to improve things or not. So we use metrics and visual tools to enable us as humans to see patterns and understand the data to increase transparency, so that we can make changes to the system. \n\nThis allows us to ask more interesting questions of ourselves and others that participate in our system. Improving the workflow is absolutely critical. If you're not making changes to your workflow on a continuous basis, you're probably not doing Caman. \n\nIf you are making changes, are you looking at the right data? Do you have the right visualisations to really be seeing what's going on?"
  },
  {
    "id": "sKYVNHcf1jg",
    "title": "What was your worst day as an agile consultant?",
    "description": "Join Martin Hinshelwood as he shares his toughest day as an agile consultant, revealing the challenges behind empowering teams in #agile and #scrum.",
    "captions": ""
  },
  {
    "id": "SLZmpwEWxD4",
    "title": "The Importance of Visualizing Your Work in a Kanban Strategy",
    "description": "Unlock the power of Kanban! Discover best practices for visualising workflows, optimising processes, and boosting team productivity in this insightful video.",
    "captions": "A hugely important technique for any implementation of a Kanban strategy is to visualize your work. Right, you need to be able to see what's going on. You need to be able to visualize that. I'm a big user of Azure DevOps. I know Jira has these features as well. But being able to visually see your cards moving across the board, the units of value, we don't really care about tasks at this point, right? But your smallest unit of value, to see them flow across the board, see where things are. So if somebody asks you, \"Oh, where's this? What's that? What's going on with this?\" it's very obvious where and what it is.\n\nThat visualization, while super important, is actually super difficult to create because we generally make assumptions as a team about what each other think the system is. Okay, so I'll think the system works like this, and another team member will think it works like that. But we'll think we're on the same page. We'll think we understand each other on how the system works. But because we've never sat down and had that conversation about how this system works, then we don't.\n\nI have a, I don't know if you've noticed, but I kind of like board games. If you were to take any one of these board games off my shelf and throw away the rule book and get four people together to decide they're each going to decide how they're going to use the pieces and move them around in order to get points, and then you're going to work together to solve the problem that is the board game. You pick a cooperative one, but if we don't agree what the rules are, then how could we possibly have a successful game, right? We're not all playing the same game because we all have not agreed what the rules are. That's why games come with a rule book.\n\nThe first part of implementing a Kanban strategy is you need to write your rule book. What are the rules of your system? How are you going to decide how things work? So even one of the first decisions is what are we going to visualize on this? What are we actually going to put on the board? Is it only things on our backlog, or is it bugs as well? What is it that's going to go on there, and how does it move through this system? So creating that visualization is super important.\n\nSo what I recommend that you do is do a workshop. Get everybody together, sit down, and just build a board. Whether you're building it in Azure DevOps or you're building it in Jira or Trello, or just pop open Mural or Miro and use a digital whiteboard, right? Totally freeform. Make the decisions, write the notes, and document your system. How does your system work? And agree as a team. When you find differences on how your system is supposed to work, then at the very least, even if we've still got a system that might not be optimal, right? Because this is where we are right now, this is what we're doing right now, we at the very least have a system that we all agree is the same system, right? Because if we want to play together, we want to play as a team, and we want to be successful together, we need to define what those things are. We need to define how the system works, and we all need to be playing in the same system.\n\nIf you're struggling to decide how your system works and create a definition of workflow, then we can help you. We provide world-class Kanban training from Pro Kanban, as well as consulting and coaching for teams trying to implement a Kanban strategy. If you're a Scrum team, then we always recommend bringing in flow metrics as a complimentary practice and have Kanban classes from Scrum the Door."
  },
  {
    "id": "SMgKAk-qPMM",
    "title": "Temperance in Agile: Why Less is More",
    "description": "Master the art of balance in Agile with our video on Temperance! Discover how moderation maximises efficiency and elevates your Agile practices. 🌟",
    "captions": "Too much of anything can be a bad thing, and that leads us to one of our seven agile virtues, which is temperance. You need to take everything in measure, right? Make sure that you don't do too much of something that could manifest in our world as having too much backlog. What does it mean to have a lean inventory in your backlog? What does it mean to not put things in there, to think a little bit more carefully about whether something should be in your backlog or not? What does it mean to have just enough and no more? That's a common phrase that we use a lot, especially in the Scrum space. I remember I have this picture in my head of Ken saying it to me many years ago: just enough and no more. I believe, in fact, he actually said that no matter what quantity question I ask him, the answer is going to be just enough and no more. It doesn't matter what the quantity question is, right? \n\nSo how much backlog should we have? Just enough and no more. How many developers should we have? Just enough and no more. How much time should we spend on refinement? Just enough and no more. Same for planning up front. That mantra of being focused on what it is we're doing and minimising our effort. One of the principles in the Agile Manifesto is maximising the amount of work not done, right? And that's that idea of temperance: maximise the amount of work not done, minimise your effort for the maximum gain, and always look to take the easy path where you can, but be willing to take the hard path when you can't. \n\nIf you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "id": "spfK8bCulwU",
    "title": "Why do you think the Advanced PSPO course is a perfect fit for entrepreneurs?",
    "description": "Discover how the Advanced PSPO course empowers entrepreneurs to master product vision and management, shaping impactful product development strategies.",
    "captions": ""
  },
  {
    "id": "sPmUuSy7G3I",
    "title": "How does a scrum team plan and prioritize work effectively?",
    "description": "Discover how scrum teams can effectively plan and prioritise work by fostering collaboration with customers and stakeholders in this insightful video!",
    "captions": ""
  },
  {
    "id": "Srwxg7Etnr0",
    "title": "How does a Scrum team decide on a Sprint goal?",
    "description": "Unlock the secrets of effective Sprint goal setting in Scrum! Join Martin as he clarifies myths and enhances team collaboration for impactful planning. 🎯",
    "captions": ""
  },
  {
    "id": "sT44RQgin5A",
    "title": "Evidence-Based Management: The Four Key Value Areas in Scrum",
    "description": "Discover the four key value areas of Evidence-Based Management to optimise your organisation's success and drive innovation. Unlock your potential today!",
    "captions": "When I'm talking about evidence-based management, I generally talk about four key value areas with specific metrics in those areas. The reason I talk about four key value areas is because they cover different aspects of our holistic system view. Rather than a suboptimal optimisation at a single level, we want to ensure that we have metrics in all of those key value areas.\n\nThe four key value areas in Scrum, as outlined in the Org's evidence-based management guide, are kind of broken into two categories. There are two key value areas in each of the categories. The one that is more business-focused is the market value. If we have a product and we're trying to build a software product and we're trying to get it into the market, there are two places we have to look for where our value is. One is the current value of our product. That's the product that already exists, potentially. If we don't have a product that exists yet, that one maybe doesn't have any metrics yet. But if we do have a product and it exists and we've got it in front of real users, then we want to think about what our current value is and how we measure our current value—the value we have in the system right now.\n\nI might have telemetry. In fact, don't just think about it—get telemetry on your product. If you're a product manager and you manage a software product, you should have access to telemetry that shows you what features in the product are used, how often they're used, which users, and which of your customers, if you've got bigger customers, use those features. That's part of your evidence-based decision-making process. But also, are your customers satisfied with your product? Are they actually satisfied? You could do that with surveys; that's a very lagging one. Telemetry is almost immediate. You could have real-time telemetry on what's going on in your product or near real-time. That's us understanding our current value—the product we have in the market right now. It could be how much money we're making from it right now, which is also part of that or revenue by employee. There are a bunch of metrics you can use in that current value space.\n\nThen we've got this idea of unrealised value. That's value that could be in our products that isn't yet. We store a list of the things that we're going to go build in our product backlog, so that's part of the story—your product backlog. But also, you're probably looking at market analysis, competitor analysis, and industry trends to figure out how we can open up new markets for our product. That unrealised value piece is actually the scenario I like to use for market value.\n\nTV showmakers generally prefer to invest in a new show, a brand new series, than to add another season to an existing series. The reason is that a second season to an existing series is almost never going to have a higher audience. Your first season is your maximum amount of audience, and then over time, it's going to dip. How good the show continues to be will either be a \"holy moly, that's bad\" or a slow decline over time. That's why you have shows like Halo, which was just cancelled. The new Halo show showed a steep decline in the second season, so they're not going to do a third. Or you think of another show, I think it's Supernatural, which went for 16 seasons, 16 years, before they finally brought it to an end. That's because that line is declining, but it's declining at a slower pace, so there's still enough money to be made to make it worth investing in that show.\n\nIf we do something brand new that the audience has never heard of, that doesn't know whether it's good or bad, then we can open out that new market, that new group of people, and bring them into seeing that show. You're more likely to have a higher audience for a new thing than you are for adding features to an existing thing that existing people use. Existing people are the ones that care about it, and you're already shortening your audience. The same is true for features in your product. Whenever you add a net new feature to your product, that's you opening out new markets, new opportunities, new capabilities for your customers—brand new capabilities that will hopefully be able to bring in new customers that you didn't have before or even whole new segments of customers that you didn't have before into your story.\n\nBut that takes a lot of effort and focus and data and analysis, right? Trying stuff, experimentation, hypothesis-driven engineering practices sit in that space where we're going to keep trying new stuff to engage or re-engage with users in that unrealised value space. That's our market value at the top. That's the focus of everybody. Let's be clear that we want to have as many product developers as developers in our team and not just jobbers doing the job. We're looking at how we all work together to make this product a success. We need experts as well that maybe don't care about that stuff; they care about their piece. But we want at least some of this. That's where product ownership kind of sits in the Scrum world, focusing on unrealised value and current value, the market value, and then up into the rest of the business.\n\nProduct management sits in that space, and hopefully, we have some product management skills in the developers on the team. Product developers, we have a good product owner who is a product manager who understands Scrum, and we have other people in the organisation also looking at this. You might have marketing people with a marketing skill set looking at this, people from a sales skill set looking at this, and all working together to start funneling features and capability and ideas into what are we going to do in this product—that's market value.\n\nThe other piece is organisational capability. This is the piece that, if you're on an engineering team, you lead an engineering team, or you're part of an engineering organisation, you have 100% control over. There are no excuses in this space; it's all you. Those two key value areas are the ability to innovate. The ability to innovate is about how much focus, how much time, how much effort do we spend innovating net new functionality? How much time do we spend on that net new functionality versus on the other stuff that we have to do? We have to do a lot of other stuff as well, but are we maximising the amount of time we are able to spend on that and minimising the amount of time that we spend struggling with complexity? Technical debt in that space of ability to innovate—any technical debt is going to reduce your ability to innovate. Any undone work is going to reduce your ability to innovate. Anything that is slow is going to reduce your ability to innovate. We have to spend time on the slow stuff rather than the fast stuff.\n\nThe other side of that is time to market. Time to market is how quickly can we go from that change we've made all the way to production? Those two make up organisational capability, and we need to measure them as well. Our ability to innovate can be measured in lots of different ways. I actually have some metrics examples that I can use over here. Ability to innovate has loads and loads of metrics. My background is engineering, so my list is going to be a little bit engineering-focused. If we're building a product that has customers that take versions of our product, either because we run private cloud for them or because we're building something that people install, I probably want to be looking at our percentage of people that are on the current version of our product. I probably want to be looking at our time spent merging code between branches. How much time do we spend on that? If you've got a branch branching policy, usually that's if you promote by environment. This is really old-school DevOps, but if you promote by environment—Dev, QA, staging, production—then normally it's four environments, and you promote by environment, i.e., you're merging code between those actual versions of your code that are then deployed to physical environments. That's really old school, by the way; don't do that anymore.\n\nIf you're in that world, then we might want to measure the amount of time we spend merging the code between branches. That could be a lot of time. I worked with an organisation a few years ago that had 90 teams in 13 locations in nine different countries. I think they know who they are when I describe that. They had a single product that had 90-odd teams working on it—90-odd active branches—and then merging that down and creating a unified product was a lot of work and a lot of effort. Getting a new version of your product was difficult. Ensuring that everything works together, ensuring that all of those things work well, could be something you measure. So installed version index, time spent merging code, production incident count—how many incidents are you having in production? If we're innovating and we're shipping bad quality code, then we're going to have a higher level of incidents in production. We need to have both positive and negative measures. We're doing the innovation really well, but we're delivering crap to production. We need to fix that; that's not going to help ensure that our customers are happy with us.\n\nThe two biggest ones that I think are easiest to collect from a data perspective are innovation rate—what percentage of your time do you spend on net new functionality versus maintenance versus support? This is the age-old CapEx versus OpEx conversation or can be, depending on your product and your organisation. How much time do you spend on those things? Obviously, you want to be spending more time on capital expenditure because it's taxed differently anyway. From a financial perspective, that's a good idea. But also, we want the capital expenditure—investing in our product's future and new features and new capabilities—is the thing that's going to bring in net new users, which is hopefully going to translate to revenue. So we want to be looking at innovation rate; that's a big part of the story.\n\nThe other one that I like to look at is technical debt. Technical debt is really important. I generally use Sonar, SonarQube, to do that. You can do on-prem or you can use their cloud version. If you're open source, it's free; if you're not open source, you have to pay. SonarQube looks at code bases using industry standards and recognises industry standard metrics for technical debt. It looks for known code flaws. There are constructs that people create in specific languages. Let's say I write in C. If I run SonarQube against it and it tells me here's a whole bunch of security problems you have in your code, I should really go fix them. They're known potentials for attack. There will be other vectors that you don't know about, but at least you don't have the ones you do know about. It could have code smells—things that are just constructed in a way that means it will be more difficult to maintain and support. These are things that we can fix, and we can monitor and we can fix. When you do run it first, it's going to look nasty; it's going to find like 6,000 things that are a problem. But if you have a policy of leaving any code a little bit better than you found it, then if you're going to edit some code, look up the metrics for that part of the code base, fix any of those problems, then make changes to the code, then revalidate, and you should find that it gets a little bit better over time. That's just policies and procedures for the team—make things a little bit better.\n\nTechnical debt is super important, and it's much easier to collect than you think. You just apply SonarQube, but it's really hard to do something with it. There's definitely a human thing that when we see 5,000 things dumped on us, we get dejected. I think that's the right word—unhappy with that—and then let it go. Instead, that's really important. The ability to innovate is one of our key stories here, and the other one is time to market. Time to market is about how quickly we get our product into production. Good examples in the industry of fast time to market are things like Facebook—12 and a half minutes from developer code commit to production. That's including all testing and load testing and stress testing and all those kinds of things. That's super quick.\n\nStarbucks, at least when I worked for a company that engaged with them back 13 years ago, had decided that their effective planning horizon, i.e., time to market, effective planning horizon for changes they needed to get was 48 hours. From implementing a thing that they wanted to get out into production to actually being out in production, they wanted to be 48 hours. That was a business decision. Another one is, and this one's a little bit more—it could be what's it called when it's not like a tale rather than reality—but I heard tell that after the Windows Vista quality debacle fixed in Windows 7 and then the Windows 8 usability debacle fixed in Windows 8.1 a year later, Satya, the CEO of Microsoft, reasonably new to it at the time, went down to that team—the Windows team, which is like four and a half thousand software engineers cutting code every day—and basically said to leadership that we've taken a business decision. We want to see working copies of Windows in the hands of real users at least every 30 days. We want it rolled out to everybody in the world at least every 90 days. They said that's impossible; you can't do that. He said it's not my problem; that's an engineering problem. This is a business decision; your job is to make it happen. Go figure it out.\n\nThat business decision is what birthed Windows 10 and that new release cadence. Now, they're less than 24 hours from code to production inside of Microsoft—a week to production for what is it, 17 million people in the Insiders program. Every three months, they do that big ship to everybody in the world—the 950 million other people that are using Windows. That cadence means that you need a higher quality on a daily basis. Time to market brings in things like cycle time, release frequency—how often you release. Back in 2012, you could probably count on both hands the releases for major software products from Microsoft. As of about 2018, they were doing 86,000 deployments a day. That's a huge difference, and it takes time and effort to get there. You have to pay back your technical debt; you have to build architectures in your product that support it. You have to build teams and knowledge and skills that support it. But once you get there and you're on that continuous cycle, you can fix stuff much more quickly. Any changes you do make have a lower impact because you have that.\n\nInstead of promoting through environments where it's easy to miss stuff, they promote through what's usually called a ring-based deployment structure or controlled exposure to production, where you're actually in production very quickly but on a small subset of users. Then you continually increase the potential blast radius. You're hoping that if each of those rings has enough people in it and you're monitoring the telemetry and understanding what's going on within that space, you should minimise the chance of things making it into production. Perhaps that's something that CrowdStrike should have done. I just saw a post from those guys that said, \"Yeah, we're going to start doing that now.\" It's like, \"Yeah, you should have been doing that already.\"\n\nSo that time to market—getting things quickly—lead time, cycle time, how quickly you get things in front of customers, time to change direction. If you're doing something and you find out it's the wrong thing, how quickly can you change direction? Time to build, time to self-test—how quickly can your developers test things locally? I think the Azure DevOps team was like six weeks to get a build out the door back in 2010. Now they're doing continuous delivery, so they're delivering it out the door every day. That time to market reduction, even just time to self-test—how quickly do your developers know that they've caused a failure? \n\nI think the Azure DevOps team went from 48 hours with their automated builds. Because they had mostly end-to-end system tests, don't do that anymore. That's like so 15 years ago. End-to-end system tests are not a way to validate that your product works. That's the pants. I can't be bothered actually building quality into my product, and I need to test quality in a way of building—of ensuring that your product works. Unit tests, unit tests, behaviour-driven—whatever you need to do, but unit tests, fast-running, super quick unit tests. I think the Azure DevOps team went from 48 hours, and it took them four years to take all of those. I think they had like 30,000 system tests and turned them into 990,000 unit tests. The 90,000 unit tests run in three and a half minutes, and the 30,000 system tests took two to three days to run. That's a huge impact on your engineering team's ability. Engineers are waiting for those things to be successful. If they're not waiting, they've moved on to other things, and now you're suffering context switching and cognitive load between those things.\n\nFrom an organisational capability perspective, all of this stuff is 100% within the control of engineering—of whoever builds the product. Do that right. If you're able to do that really quickly and effectively, that gives the business the incentive that we can ask for something and get a change really quick. So what should we be asking for? Perhaps we should start thinking about hypotheses and trying stuff and testing stuff that we can get into the product, testing in production, and then perhaps we ditch it out of the product because it's not providing the value that we think it should.\n\nThis idea of evidence-based management has the four key value areas: current value, which is your product that exists right now; collecting telemetry, understanding what's going on and how users are using it; unrealised value, which is things your product doesn't do yet; market value, getting new customers, getting new capabilities; and at the bottom, you've got your organisational capability with the ability to innovate—how much time do you spend adding that new functionality versus supporting and maintaining existing functionality—and time to market—how quickly does it take for a change you make to get into production? Hopefully, close that learning loop all the way back to your products and have that full time to learn cycle in there. That is the four key value ideas of evidence-based management."
  },
  {
    "id": "swHtVLD9690",
    "title": "The Common Challenges of Adopting DevOps Practices",
    "description": "Discover the challenges organisations face in adopting DevOps practices and why real-world production testing is crucial for user experience success.",
    "captions": "I think the most common challenge that organisations face when trying to adopt DevOps practices is regression. I think that's probably the best way to describe it: you make two steps forward and five steps backwards. Part of that is how do we maintain our ability to control risk within this new context because the risk profile is different. \n\nBecause the risk profile is different, we need different tools and techniques to manage that risk. In the old days—I'm calling it the old days; it might be the current days for lots of organisations—but in the old days, we would spend a bunch of time designing our product. We would design the architecture, we would decide what we're going to build, we would list out all of the features, and then we would work towards some kind of release date of our product. \n\nOnce we got close to that release date, once we delivered a body of features that made sense, we were going to test those features. We had a different group of people who were testing and validating those features. I mean, it is still quite common to have separate test teams from engineering teams rather than a combined engineering force. Then, once they had done those tests, it was probably handed off to some kind of operations team who were going to deploy it to an environment. \n\nThen something like UAT was going to start, where you had some kind of additional validation of what's going on in the product. Once all of those things were successful, then it moved on to maybe deploy to production or staging, or you might have other environments. The traditional, most common model is deploy by environment, and that fundamentally doesn't work within the context of DevOps. It's going to slow you down. \n\nIt's not going to get you the key thing that DevOps is trying to bring to your business: high quality, flexibility, adaptability, and your ability to validate assumptions. We have an assumption that this feature is going to be valuable, but in order to actually validate it, no matter how much stuff we do on paper or in labs or in studies, the only place to really validate that feature is in production. \n\nA great example of that is Windows 8. Microsoft spent hundreds of millions on user experience, on labs, on flying people into labs to video them using the product, performing certain tasks, and then getting feedback from them in interviews or sitting with people that are using the product. They did all of the things that you're supposed to do, and still, they ended up with a product that bounced off their consumers from a usability perspective. \n\nThat is because of that production problem. One of my favourite people, Brian Harry, who used to run the Azure DevOps team, made this comment that I loved: \"There's no place like production.\" No matter how much testing, no matter how much validation you do—especially if you're in the service world where you're building a service that's got thousands and thousands of customers using the same service—no matter what you do, you cannot simulate production. \n\nWe can maybe do some stuff, but that common challenge is how do we address these things as that world is changing? We've no longer got six months or a year. The Windows team used to be on a six-year delivery; that's how long it would take them to get a new version of Windows out the door, from starting to write the code to it actually being released to production. \n\nThey had six years to do testing. I had a colleague from Boeing, and he talked about one of the things that he saw as a problem: Boeing don't build quality in; they test quality in. You've got all of this aggressive testing that's happening as part of building something, and then you're testing it. \"Oh, right, it failed.\" So what do we have to do differently? \n\nThat is quite often what you have to do with some manufacturing stuff these days. You've got simulators, so you can do a lot more, but in the software world, we don't have to suffer from that problem. We don't have to spend lots of time building a rocket to put it on a rocket pad and launch it, and then it explodes, and we look at the telemetry and figure out what went wrong. \n\nWe don't have to do that. We're building software; we can get that software out the door as quickly as humanly possible with the level of quality that we need to maintain our business brand, protect our business, protect our consumers, and protect our producers. We can get things out the door as quickly as possible, test it in the real world, test it in the market, find out how accepted that thing is in the market, whether it's increasing our market or decreasing our market, and then adapt around that. \n\nThat's part of that DevOps story: closing those feedback loops, not just identifying those feedback loops and eliminating waste in the process to get it to go through the process as quickly as possible, but actually closing the feedback loops, not just collecting the data. \n\nThe two big common challenges that I see are, one, closing the feedback loops, and the other one is actually getting how do we change the way we understand our risk profile and how we mitigate and organise around risk within that context. Then, how do we adapt to the things that we see in a timely manner? Those are the two most common challenges, and those are the things that we can help teams, products, and your organisation deal with and figure out how to do better."
  },
  {
    "id": "sXmXT_MDXTo",
    "title": "DevOps: Elevating Your Organization’s Performance Through Bespoke Solutions",
    "description": "Explore tailored DevOps consulting services in this video, uncovering how organisations can optimise practices for better software delivery and quality.",
    "captions": "We've been doing DevOps for quite some time. It's really difficult to provide an overview of our DevOps services because our DevOps services tend to be bespoke for every single customer that uses them. There are some patterns, but there are not that many formulas that work everywhere. Every company is different, every group of people is different, and every outcome that they're trying to achieve with the philosophy that is DevOps is different. \n\nBut there are some patterns that do kind of make sense. One of those is a state of DevOps report. The idea is you want to understand, as an organisation, where we are based on modern engineering and DevOps practices. Where do we sit? Because it's difficult to understand where you want to go unless you know where you are right now. That's the first thing you do when you have a map and you're trying to figure out how to get somewhere; you have to find out where you are so you can then figure out what the direction to go is. \n\nSo that kind of state of DevOps, state of agile, where are we right now in our understanding of or our application of DevOps practices? We might talk about things like how products are being released. We might talk about what sort of tools are being used within that context of releasing products. I worked with an organisation that had 13 different source control systems in use for one product. There's a lot of waste there that can be identified. \n\nWhat are we actually doing? How do we take the ideas that we've created in our product, and how do they actually get into production? Not just what leadership thinks is happening, but what's actually happening on the ground. We tend to interview a bunch of people in the organisation, usually trying to do solo interviews because people are more willing to speak when there's not somebody else present. This kind of anonymous information allows us to find out all sorts of things. \n\nFor example, I worked with an organisation where their team of 30 engineers understood branching, but they didn't understand automatic merging. So they were manually copying code with a text diffing between branches in order to merge code, which is just mental. I worked with another organisation that had built a custom tool because the business had asked for a capability. They built a custom tool that allowed product managers to pick features and create a build of the product that only had those features merged together into the product. \n\nThis might sound like a good idea if you're on the business side, but from an engineering standpoint, creating a cohesive, valid, high-quality, usable, high-value product is totally insane. There are all sorts of non-dysfunctional behaviours; I tend to call them opportunities for improvement because it's a little bit more positive. But the reality is they're dysfunctional behaviours that are really common in the industry and have been for many years because people are pushed towards solving a problem, and they don't necessarily know that there are known logical ways to solve that problem already. \n\nEven if they do know about those non-logical ways to solve that problem, somebody in the business has an objection to it. A great example is automatic deployments. The objection might be that we're under Sarbanes-Oxley audit; we're Sarbanes-Oxley compliant, therefore we need a separation of developers from the people who do the releasing of the code. That means we can't have developers with access to production. \n\nThat's actually not true with Sarbanes-Oxley; not true at all. But because somebody believes it is, you then end up with these ideas where development and operations are separate. One of the biggest values that we bring, the biggest benefit that we bring to organisations when we're talking about the DevOps philosophy, is that ability for higher quality, more frequent delivery, and less friction in your ability to get software out the door. \n\nSome of it's about ownership. If it's you, you have an idea, you're going to build that idea, you're going to deploy that idea, you're going to monitor that idea, and you're responsible for the upkeep of that idea, the support, and the continued value add of that idea. That should all be within the control of the group, the team. \n\nSo, IDE all the way through to deployment and closing those feedback loops should be part of that story, and that's very difficult to do within a lot of organisations. So what are the steps that you can take to get towards that? What are the tools that you can use to ensure that you meet the compliance that you need to meet in order to continue to meet your compliance but do these new things? How do you maintain quality? \n\nHow do you maintain the level of quality? If, for example, you're not doing UAT because UAT is a cost centre, not a value centre for software engineering, if your UAT is a value centre because it finds stuff and protects your business, then we've not got high enough quality delivery of our product. But if we create that high enough quality and UAT becomes a cost centre, we want to get rid of those cost centres. \n\nHow do we ensure that we don't end up in the same situation as CrowdStrike? There's a great example of an organisation recently in the news that caused massive disruption. I think they're going to be sued by Delta for 500 million dollars that Delta has lost over the week that they had a problem, which is partly their own problem with DevOps. \n\nWhat could CrowdStrike have done differently? One of the things they didn't do was control the blast radius. You don't just deploy to production; you don't just deploy to 100 machines. I'm not sure exactly how many machines run at CrowdStrike, but you don't deploy to all of them at the same time. That's insanity. Even Windows, who have very high quality in the product that they ship, deploy to a small number of people first. \n\nThey control the blast radius. What are our lowest impact customers or customers that would be impacted the least by an outage? Deploy to them first. Perhaps deploy to our own systems first and run it for a few days to see if there are any problems, monitoring that feature and that capability that's being deployed. \n\nNot deploying on a Friday; the best time to deploy is Monday morning when everybody comes in because you get a whole week to fix any problems. Deploying on Friday is probably not the best idea. There are all kinds of things that make logical sense and are within the context of this DevOps story that we can help educate, coach, and engage with your team, your engineers, as well as with your business and your leadership to understand what these things are, what value you get from them, and how you maintain your ability to control risk within this new world of continuous delivery to production."
  },
  {
    "id": "sxXzOFn7iZI",
    "title": "Hiring an Agile Coach: What You Need to Know",
    "description": "Discover 5 key factors to consider before hiring an #AgileCoach in Part 3 of our series with Martin Hinshelwood. #Agile #Scrum #ProjectManagement",
    "captions": ""
  },
  {
    "id": "syzFdEP1Eso",
    "title": "Why 'Definition of Done' is Crucial for Success in Scrum",
    "description": "Unlock the secrets of defining 'done' in agile projects with a fun bakery analogy! Perfect for scrum masters and agile teams seeking clarity. 🍩🥖",
    "captions": ""
  },
  {
    "id": "T-K7HC-ZGjM",
    "title": "What is a Sprint Backlog?",
    "description": "Discover the sprint backlog's role in Scrum! Join Martin Hinshelwood as he explains its importance for teams and stakeholders in this insightful video.",
    "captions": ""
  },
  {
    "id": "T07AK-1FAK4",
    "title": "7 signs of the agile apocalypse. The Antichrist",
    "description": "Discover the 7 signs of the #Agile apocalypse! Martin Hinshelwood reveals how fake experts threaten true #Agile success. #Shorts #AgileTraining",
    "captions": ""
  },
  {
    "id": "TabMnJpXFVA",
    "title": "Why are you going the immersive Scrum training route?",
    "description": "Discover the benefits of immersive Scrum training with Martin Hinshelwood. Transform your skills in 4-8 day courses for real-time learning and growth!",
    "captions": ""
  },
  {
    "id": "TcnVsQbE8xc",
    "title": "Reasons to do a PSM II Course in 60 seconds",
    "description": "Discover why elevating your skills with a PSM II course is essential for scrum masters in just 60 seconds! Join Martin Hinshelwood for insights. #PSMII #Agile",
    "captions": ""
  },
  {
    "id": "TCs2IxB118c",
    "title": "Boosting Team Morale and Engagement Through Effective Mentorship Programs",
    "description": "Unlock team potential! Discover how mentorship boosts morale, engagement, and success in organisations. Transform your team's future today! 🌟🚀",
    "captions": "I don't know if you've noticed, but unhappy, sad people tend not to be engaged in what it is that they're doing. One of the metrics for whether you're going to have success in the future is the morale of the people that are doing the work. That could be people actually building the products, it could be the people designing the products, it could be the people managing the people, people that are designing the products. If we're sad and unhappy, we don't do good work as humans, no matter how much you encourage them to just be professionals and get on with it. \n\nSo we want happy, engaged, excited people. Part of what makes us as humans happy and engaged and excited about topics is if we have our intrinsic needs met. Hopefully, you're paying people enough in your organisation that they're not worried about extrinsic needs, like paying the mortgage or the rent or putting food on the table. Those are things that hopefully the people within your organisation are already able to achieve, which means if you've read Dan Pink's book, \"Drive\", the intrinsic motivators that really encourage us to do the best work we can are autonomy, mastery, and purpose. \n\nAutonomy means us feeling like we're in control of our own destiny and we decide what we're working on. Mastery means we're good at what we do; we're being valuable, right? We're learning and understanding. Then purpose means the things that we do matter to others; they provide value in the space, and we can see the value that those things create. \n\nPart of the thing that I think is most valuable about this idea of the longer-term mentor and training immersive programmes is that we're provoking discussion within the organisation. We're provoking thought leadership within the organisation. I found that the people within the organisation start becoming more engaged and animated in the particular topics. They start talking to other people in the organisation about the things that they've been learning, but also the things they've been discussing, the things they've been discovering. They start figuring out who in the organisation they can go speak to have a conversation on this particular topic. They're starting to get engaged and excited and animated about what it is that they're trying to do because they're starting to see how the work they do every day connects to the overall purpose of the organisation, even if the organisation doesn't yet understand the purpose that it's trying to achieve. \n\nLots of organisations don't have that overriding goal, that North Star that they're working towards. I'm working with a few organisations at the moment where the leadership hasn't even thought about that. \"Oh, to make more money,\" which is not what everybody can get behind because it's making somebody else money. \n\nEven knowing, especially this is especially true for the product management mentor programme, the things we talk about help those folks understand the need for those things. Their initial purpose becomes how do I engage with my organisation and help them create those goals and vision that this is what we're trying to achieve, that North Star. \n\nI have a current mentor programme that's underway for product management, but I had a previous one that ended perhaps two months ago, something like that, for an organisation in the UK. About halfway through the programme, I got an email from the CEO effectively saying, I’ve not an exact quote, but to paraphrase what he said, he said, \"I've never had a training programme that we've purchased as an organisation provide the level of engagement and excitement and potential change than the mentor programme did for product managers.\" \n\nIt highlighted to him because effectively one of the weeks, everybody was in Poland. From a time scale perspective, I think it was an afternoon session. In Poland, it's like two hours later. The product managers had their day in the organisation, then they'd had this class into the evening, so I take four hours of their time into the evening. There was a dinner organised with the CEO and all the product managers and some other folks. The CEO was expecting all the product managers to turn up tired and grumpy, you know, all of those things that you expect when they've just spent four hours doing this thing. \n\nBut when they came to the dinner, they were engaged in talking about the topics that we'd been discussing during the day. They were engaging the CEO in discussions about what it is that they would like to try and do, how it's different from what they've done before, how it might impact on the value that we create in the organisation. That engagement and excitement was enough to prompt the CEO to email me directly and say, \"Well, this was great. I've never seen this before. This is fantastic.\" \n\nThat, obviously, for me, is a great outcome as well. We've actually done follow-on mentorship programmes for their engineering teams as well, where we've taken their engineering teams into a similar type of programme, same model. We did a product development mentor programme with two of their four teams in the organisation, and we've already started to see improvement in the teams, improvement in what it is that they're doing in the organisation and their ability to deliver and support the business. \n\nI've seen way more instances of success with this type of format than I ever saw before with the traditional training, four half days or two full-day formats that have been delivered in the past. I've really only seen that work once really successfully in hundreds of trainings. That doesn't mean it's not been successful for people, but me being able to see and engage with this group of people over eight to fifteen weeks or perhaps longer, depending on the programme, and just have that continuous engagement, talking about those topics, has produced some fantastic results already from every single instance of running these programmes. Every single instance has created actionable outcomes for the businesses that have purchased it."
  },
  {
    "id": "tdOSrPOlyAI",
    "title": "NKD Agility. Your Partner in Engineering Excellence",
    "description": "Unlock engineering excellence with NKD Agility! Join Martin Hinshelwood as he explores quality, accountability, and technical leadership for your organisation.",
    "captions": "Naked agility can be your partner in creating engineering excellence and technical leadership within your organisation. In the last few videos, we've talked about a number of different ways or things that we focus on that are part of that story. We talked about that high cost of bad quality, of mediocre product—right? Not even mediocre, poor quality product. There's lots of poor quality products out there that have a massive cost, particularly in your brand recognition. Right? People don't want to use products that they have an image in their head to be of poor quality.\n\nWe talked a lot about shifting left and the different components that we would shift left. Not just testing and test automation, but continuous integration, continuous delivery. We talked about user experience shifting left. We talked about security shifting left, architecture shifting left. All of these things need to move as close to the engineering team that's making the decisions, the people that are making the decisions and doing the work. All of those things, those skills, those capabilities, those need to be built up in those teams in order for you to move towards this idea of engineering excellence.\n\nRight? We need to not manage technical debt but pay it back. Deal with it. Deal with the technical debt when it happens. Own up to it when we make a mistake. Be transparent and open about what the problem was and what we're going to do about it. Build that culture of quality. Build that culture of engineering excellence within our organisation. Your purpose is creating value for your customers. Our purpose is value creation for you through building the technical leadership and engineering excellence that enables your value creation. And that's what naked agility can help you with."
  },
  {
    "id": "tfQltriMcFw",
    "title": "Scrum Training 1",
    "description": "Join us for Scrum Training #1, where we explore Scrum in action through engaging videos that enhance your understanding of agile methodologies!",
    "captions": ""
  },
  {
    "id": "tKEl0YVeWv4",
    "title": "Automate Everything - Building Reliable, Fast, and Scalable Products",
    "description": "Discover how automation transforms software development, enhancing reliability and speed. Learn to build scalable products and outpace competitors!",
    "captions": "Automation plays a massive role in enabling your teams to develop faster and more effectively. Right, automation is almost the thing that supports your ability to do that, and you should automate everything. If it can be automated, it should be automated. If it can't be automated, you want to do the work in your product to enable that thing to be automated. Right, so automated deployments, automated testing. I use Azure DevOps as an example a lot because they've done a lot of this work and hit a lot of these problems.\n\nOne of the things that they started doing was they wanted to automate the changing of security. Right, so on every deployment, every security key, every certificate, everything is refreshed. Every environment, every server, you know, so infrastructure as code, everything is refreshed. So you never deploy; they never deploy to upgrade the version of their service on an existing environment. They build a new environment and put that in and take the old environment out. Right, and these sorts of automations enable you to continuously be as slick as possible. Right, and it means that one thing that's really important to understand is that humans suck at following a set of steps in the same way every time. That's what robots are for. Right, robots follow a set of steps continuously. That's what automation is. Automation follows a set of steps and always follows it the same way and always follows all of the steps. Right, so if you get an exception or you have a problem, there's a problem with the steps.\n\nRight, when humans are following a set of steps manually, for example, then you don't know whether the problem is with the set of steps or the problem is with the human following the steps, and that's a risk you don't need. It's absolutely a risk you don't need. So a great example of that is the Knight Capital Group in the US. It was a company in the US; they had 450 million in the bank at the beginning of the day, and they were doing a deployment of a new version of their system. A lot of things were not quite right; they were repurposing some code in their product. They were doing a bunch of silly things because they didn't have good quality, but they also were doing a manual deployment, and the engineer that did the deployment deployed to six out of the seven servers that they had.\n\nSo the system then started behaving oddly because six of the servers had the correct code, and one of the servers didn't have the correct code. So if you can imagine a load balancing situation where you're trying to look at the system, it's not working, it's not functioning properly, but you can't figure out why because some calls are working and some calls are not, and it looks kind of random because it's the load balancer that's load balancing between the servers. It took them all day to figure it out, but they'd started losing thousands of dollars every second. And with 450 million in the bank at the beginning of the day, by the end of the day, they had to file for Chapter 11 bankruptcy. They were listed on the New York Stock Exchange, which is why we know what the problem was because they had to file that as part of their bankruptcy filing. That would have been prevented by automation. It would have been prevented by automated testing. It would have been prevented by automated deployment. It would have been prevented by automated checks.\n\nA more recent one that had a massive global impact was CloudStrike. Right, that would have been prevented by automation. It would have been prevented by automated deployment. It would have been prevented by automated checks. It would have been prevented by these types of capabilities that we're talking about. As you increase the number of deployments that you do, you're forced to deal with these types of scenarios. Right, how do I roll out to a smaller group of people so that I can figure out whether... One of my favourite quotes is from a gentleman called Brian Harry. Brian Harry was the product unit manager for the Azure DevOps team, so he ran that whole developer division at Microsoft for many years, and one of his mantras was that there's no place like production. You know, like kind of Dorothy type of thing, clicking the red shoes. There's no place like production. No matter how much testing you do, no matter how much validation, no matter how much money you throw at that, no matter how much time you throw at that, you're going to have production issues. You're going to have production issues because you can't simulate production. It's not fundamentally possible. You can do your best, and you can spend an awful lot of money trying to figure out how to simulate production as much as possible, but there's always gaps. It's not possible to simulate production, to simulate the type of transaction, to simulate what users do. It's not possible.\n\nSo a better strategy than testing quality in is to build quality in. And if you're building quality in, you want to get that product in front of real customers in production as quickly as possible. I Google... Google does... No, Facebook. It's Facebook. I was thinking of Facebook. They do a really interesting thing where when a developer's rolling out their new version of the product, they have a point in time when a call into Facebook is executed twice. It's executed with the current production version, and then it's executed with the new version that's not in production yet. So it executes, executes, executes, executes, executes, and then they can turn up the dial and go from a small, like 10,000 users, up to 10 million users, up to 100 million users doing this. And developers can see the telemetry for what's happening with this. Is it performing well? Is it doing the right thing? Is it having similar... you know, comparing the output from the two?\n\nAnd what they actually do is they do it completely automated. So the time from a developer committing a new capability to it replacing this production capability that's there is, as I understand, about 12 to 13 minutes. And that's with a full test suite, full regression, full validation of do they operate the same way? Do they have the same output that we need? Do they work in that context? Do they perform and scale out across the entire platform in about 13 minutes? So they can have these small changes, small fixes go out really quickly. And then when they work on bigger things, perhaps they're using feature flags or they're using other capabilities.\n\nSo automation, that's an automated process. Automation is absolutely critical to your ability and your product's ability to have fast, reliable... the fast, reliable ability to add features, fast, reliable ability to deal with problems, to deal with surprises and opportunities as they arise in your market."
  },
  {
    "id": "TNnpe02_RiU",
    "title": "What is Your Peeve in DevOps",
    "description": "Join Martin Hinshelwood as he shares his top pet peeve in DevOps consulting, drawing from his extensive experience in Agile and DevOps. #DevOps #Agile #Consulting",
    "captions": ""
  },
  {
    "id": "tPkqqaIbCtY",
    "title": " shorts 7 Virtues of agile. Kindness",
    "description": "Discover the power of kindness in Agile! Join us as we explore one of the 7 virtues that fosters collaboration and inspires high-performing teams. #Agile #Shorts",
    "captions": "That could be, you know, when dealing with bug reports or it could be just with engaging with them and talking to them about the problems that they're encountering and trying to solve within our product domain. Um, and we want to be benevolent. We want to be seen as we're providing them with something that helps enable them to do something else. If they see our product as a burden or they see our product as, um, I don't know what the cost version of burden is for me. Burden's broad and then there's a cost, like a cost centre. If they see your product as a cost centre, then, um, they're not going to think of your product with kindness. Um, and you're probably not thinking of them with kindness."
  },
  {
    "id": "tPX-wc6pG7M",
    "title": "5 October 2023 Agile Leader Webinar",
    "description": "Join Dr. Joanna Płaskonka & Martin Hinshelwood in this 18-min Agile Leadership webinar. Gain insights, strategies, and engage in an interactive Q&A!",
    "captions": ""
  },
  {
    "id": "tUC5TainG2E",
    "title": "How did you come to be a preferred Scrum training supplier for Microsoft?",
    "description": "Discover how Martin Hinshelwood became the preferred Scrum training supplier for Microsoft, empowering their agile journey in product development.",
    "captions": ""
  },
  {
    "id": "txN41c6znbE",
    "title": "Where Agile Went Wrong: Understanding the Competence Crisis",
    "description": "Explore the competence crisis in Agile! Discover why skilled Scrum Masters matter and how to bridge the gap for real-world success. 🌱🚀 #AgileLeadership",
    "captions": "Agile went wrong fairly early on. It started to go off the rails almost right from the beginning because there were certain assumptions that were made by the folks that codified it that created the Agile manifesto. So think of those folks as they were the right people that were available at the right time. Right, so there's probably people that were around at the time that could have been in that room but weren't, right, just because they weren't available or whatever. But the people that were invited to Snowbird were the best of the best working with the best of the best. So because they were already very highly regarded in their industries, they were already working with people who were very highly regarded, and there was an assumption of competence, an assumption of capability of the people that were participating within the process that we're talking about.\n\nSo for Agile to be successful, we have to be continuously trying to figure out whether we're doing the right thing. We have to be continuously validating. We have to be continuously learning and figuring out new ways to do things and continuously closing those learning loops so that we change our mental model of how things work. And I don't think our current systems of education and the world itself is set up to create the majority of people that are like that. I feel like the majority of people aren't really interested in all of that stuff and perhaps just want to go to work, get a paycheck, and go home. I think a lot of people can be convinced to work differently, but if we're talking about what's the current status, I would probably hazard a guess, and it is a guess, that only about 20% of people are really interested in that level of commitment of figuring things out, of trying to do things.\n\nWhich means that the demand for folks that understand Agile, now that's quite a wide bucket, right? Folks that understand Agile within organizations, whether that's for leadership positions like Scrum Master on up through the organization or for product-focused folks, product management through the organization, or for doers, right? The I work with software teams, so generally it's the engineering team members that I'm talking about there. But the doers up through the organization, what percentage of your leaders, product people, and doers actually take the time to go read blog posts, read books, experiment, discuss, and collaborate? I participate in a number of communities, like meetups, where people gather to discuss some of these topics and learn more, and there's not that many people there compared to the number of people that are doing that type of work.\n\nWhen you sell a book on a particular topic, the well-known people, you know, they sell more copies. The new Spring Gold book has been doing awesome, but still the number of people that buy it is a tiny percentage of the people that probably need to read it. So I think that when we need to caveat when we're talking about Agile, Agile teams are like special operations teams, right? They have a distinct particular focus on maximizing the value from the work done, right? And continuously iterating on that and learning new things and practicing. They probably spend quite a high percentage of their time learning and practicing and trying new things, and that's not most teams, that's not most organizations, that's not most people.\n\nI read a blog post years ago, and it struck me. This was when I was brand new. It struck me very much that the first line was, \"If you're reading this, you're already in the top 10%.\" It was about software engineers and learning and that kind of thing. If you're reading it, you're already in the top 10%. What percentage of your people actually read and learn and try to better themselves? That is the assumption that you're going to have a team of people like that that comes from Agile. There's kind of a fundamental requirement of being Agile is having folks like that, and that's kind of why I guess the Scrum Master exists to proxy some of that because you're going to have lots of people on your team who are not like that.\n\nSo the person who's like that on your engineering team, the doer who's most focused on the effectiveness of the team, is probably the perfect choice to be the Scrum Master and then move up through the organization through leadership roles. A great example of that is Satya Nadella, right? He was a software engineer and now runs the whole show. So the thing that went wrong is Agile accelerated much more quickly than there was supply of these folks. There was an assumption that these folks had those skills and capability, and they're just not there, and they don't exist today. There's not been systemic investment in bettering people within organizations of hypothesis-driven practices, right? Of encouraging people to experiment and try things and place bets.\n\nIf you can get that efficiency, we can spread that across the organization because it works within our context. If we don't, then we advertise the cost of running that experiment across the whole business, and that philosophy is just not fundamentally there. So when we do find people that are really good at it, that's the folks that we want to have promoted through Scrum Master through leadership in our organization. But they're so few and far between that even within that context, most people in positions as Scrum Masters, there's some data from an organization called Scrum Match. Effectively, I'm going to paraphrase this; it's not quite the way it works, but they're effectively validating Scrum Masters so that if you're going to go hire this person as a Scrum Master, you know what you're getting.\n\nSo it's validated through a face-to-face validation process with two professional Scrum trainers who understand not just the Scrum Master's competence within Scrum, right, but their competence within enabling teams to be effective, enabling product owners to be effective, and enabling the organization to be effective. So all the way up the tree, and they give effectively a capability level based on their engagement with that person. I think it's like a two or three-hour process, right? Validation process of talking and discussing and describing scenarios and talking about the skills and what they found. Not everybody that's coming to them is looking for a job. For example, I went through their process, and I'm not looking for a job, right? But that's their intent is you have this moniker for your CV to validate for employers that you do have a certain level of skill.\n\nSo there’s certainly going to be a bias to people who are looking for work. What they found was that 39% of the people that were coming and saying, \"I'm a Scrum Master,\" hadn't even read the Scrum Guide, hadn't even taken the most basic learning step of reading the manual for the thing, the job that they're taking. And the Scrum Guide exists; it's there, it's been around for 14 years. These were not just new Scrum Masters; these were people who had been in role for up to 10 years. So this is somebody who's been a Scrum Master for 10 years in an organization and hasn't read the Scrum Guide. For me, that's a lack of competence. That is not capable of fulfilling the role of Scrum Master in an organization.\n\nI mean, it may depend on how the role of Scrum Masters is defined, right? I'm kind of separating here the idea of what the accountability for the Scrum Master is within the context of Scrum and the job title of Scrum Master, which is company-specific and will have other accountabilities. But at a fundamental level, if you're going to be a Scrum Master, you should have read the Scrum Guide. Even I think there was a further 12% that had read the Scrum Guide but had a really rudimentary understanding of Scrum, and then another few percent that probably weren't capable of applying it within the context. So what it ended up with was 61% of people who identify as Scrum Masters, perhaps currently hold jobs as Scrum Masters, are not capable of being Scrum Masters, yet they've been holding positions and have experience as Scrum Masters.\n\nThat is systemic of what we're talking about here. That's systemic of the problem that the two things, the demand has outstripped supply. Therefore, organizational hiring practices have systematically reduced the bar to meet the demand, right? The quality of the participants that they demand has dropped so that they can fill the positions. That means that there's a lot of people who have absolutely no business being Scrum Masters in role. You may go look to hire somebody, and they're like, \"I've been a Scrum Master for 10 years at XYZ,\" and they are still incapable of fulfilling that role.\n\nI just saw a comment recently. It was highlighted by one of my colleagues on LinkedIn of a Scrum Master who had been in role for two years. They'd been a Scrum Master for two years and didn't know what a release plan was, no idea what a release plan is, no idea how to create one or what one looks like. How can you possibly coach a team within the context of that organization and not understand the things that that organization needs to function? Rightly or wrongly, you might not like release plans, right? Or you might have a different idea of a release plan from what I have from a release plan. But if you've worked for two years in a company in a role for maximizing the effectiveness of teams and you don't know what the assets are that the teams need to create in order for the organization to consider them effective, you’re in trouble.\n\nAnd why? I mean, that's a specific occurrence. I'm not trying to throw them under the bus. But why do people not have this information? Why do they not understand it? Why are businesses hiring people that have no ability, absolutely no ability to do the job? For me, there's a couple of things that this comes down to. It comes down to the supply-demand issue, i.e., there are very few people who take the time and effort, who care enough about their capability to go do that stuff, to go read blog posts, watch videos, try stuff, learn. There are very few people in that category. I know lots of people in that category, right? I know lots of people who do that, but I think I probably wouldn't know the people that aren't because that's the circles that I'm in.\n\nSo all of my colleagues are kind of like that. I do come across people who have absolutely no interest in learning anything new, none at all. So that's a big piece. But I also think a big piece is organizations' willingness to cut quality to fill roles. I can kind of understand that in certain contexts, right? If it's software engineers, people on teams, doers, right? You can train doers. I would say it's much easier to teach somebody a programming language or teach somebody a test tool or some capability that they don't have than it is to teach them a philosophy. So that fundamental philosophy of continuous lifelong learning is something you need to hire for, not teach for, because you're probably going to be very difficult to teach that.\n\nI think please correct me in the comments, right? But I think that's going to be very hard to teach for such a fundamental pivotal role as the coach for the team. How are they possibly going to be capable without deep knowledge and understanding of the context of that team, the context of the product, and the context of the organization? Right? Those are the three contexts that that person needs. Now, you gain context in the organization, general organization, your organization, by being in it for time, right? You gain context of the product by either working in that industry or that context for a long time and then that specific product for a while. You gain context of the type of work that the team are doing by doing that type of work for a time.\n\nSo the most logical people to go through that promotion into Scrum Master, right, for the team, which should be a self-selection, not self-selection, I select it, but the team selects the person. They're the candidates for moving through leadership in the organization. They have empathy, they have skills in the context of the work that we're doing, they have skills in the context of the organization, and they have time in the organization, experience in understanding those things. That's who you want as Scrum Masters. You don't really want to be hiring them in because they're not going to have any of those contexts or potentially not have any of those contexts.\n\nThis is why the financial industry, who have very specific kind of idiosyncrasies, tend to require if we're going to hire people, they need to have worked in finance before. We're not going to hire somebody who's not worked in finance because it's too much trouble to teach them, and it's too disruptive because finance is like this. So I need people who are already able to work within that environment. So why does that just apply to finance? Why doesn't that apply to other places? This fundamental lack of not just lack of initial competence, right, but our skills atrophy. I once, and this was in finance, I worked in finance many moons ago. I probably wouldn't do it again as an employee for sure, but I worked in finance, and the person sitting next to me, I just started a new job. The person that was next to me was a user experience specialist, and they were complaining that they hadn't done anything new. They'd been working there for four years, and they hadn't done anything new in four years, and they felt like they were unemployable.\n\nThink how sad and dejected and unhappy that person is and how much effort do you think they spend on enabling the success of the organization? None, right? They're not spending any time on that. They're biding their time. That organization actually didn't last super long after that. But that's that fundamental competence that you should be looking for, and we need to have that focus. Otherwise, we're going to continue to end up in exactly the same position, which is bringing what organizations have been doing for many years. We're going to take the most junior, unskilled person and make them the Scrum Master who's accountable for the effectiveness of the team. How the most junior, unskilled person is going to be able to do that, I do not know, because it's not deemed as a valuable thing. Therefore, there's no leaders to promote through the organization who have a fundamental background and understanding of what it is that we're doing, how we're building products, and that experimentation and ideas up through the organization.\n\nSo I think we've kind of done it to ourselves. There are pockets of agility; there are folks out there who are really good at this stuff, but they're generally not listened to. They're generally skilled enough that they go become a consultant, right? Because of the supply-demand issue. If the supply-demand issue was different, they would maybe still be employees because they would be being successful and having fun within an organization. But they're not. They're getting frustrated that organizations can't change, and organizations can't change because they're fundamentally not addressing these core competency issues. They don't have enough momentum; they don't have enough people who have those core competencies to move forward. These folks get frustrated and go, \"Screw this, I'm going to go start my own business being a consultant,\" and at least I get paid more for doing terrible work with these organizations.\n\nBut there's light at the end of the tunnel if you're an organization who is already on their journey to improve the agility of their organization or you want to be. Hire for competence. Hire for lifelong learning. Hire for somebody who has the interest enough to do more than a PSM or CSM level one certification to be that thing. I really fundamentally don't understand why HR and hiring managers are expecting somebody who's done a two-day course to understand how to... I mean, I kind of do. Years ago, I worked in an organization, and the accountant was sent on an MS Project course, and when he came back, he was the new project manager, and it was the disaster that you're expecting in your head. It was the absolute unmitigated accounting-focused disaster.\n\nSo I understand that it's happening, but if we want to be different, if we want to get the value from agility that we need, we have to change the way we approach that. We have to hire for competence within the context of the roles, and that probably means... Now, I don't know the CSMs. I'm not a Scrum Alliance trainer; I'm a Scrum.org trainer. So my understanding, my knowledge is more in that space. If I'm looking to hire Scrum Masters, I am not looking for PSM1, not even remotely looking for PSM1. I'm looking for, if I'm looking for a Scrum Master for one team in a large organization, I'm at least looking for PSM2, but realistically, I want a PSM3. PSM3 has demonstrated knowledge and capability; it's essay-based questions. We're no longer in the multiple-choice world, so it's much harder for somebody without the competence who isn't interested in lifelong learning. It's much harder, much, much harder for them to gain that certification, right? The PSM3.\n\nSo that would be my minimum bar. I think it has to be my minimum bar. My minimum bar would be PSM3 if I'm hiring a Scrum Master and I'm bringing them into my business. Minimum PSM3. And I then want to look at what's the context of my product. Does that Scrum Master have experience within that context? So if my context is software engineering, which mine generally is, I want to hire somebody who understands software engineering, somebody who has experience and understands the philosophies of DevOps, who understands the practices and techniques that make sense to help teams be effective. Because a good coach coaches and teaches the team in practices they don't understand or aren't very good at, right? And in order to do that, you have to understand them if you want to teach those things.\n\nSo at the very least, PSM3, then look at engineering competence, then look at product competence because they need to help coach the product owner, product management in building a better product. And then business, well, that's kind of business product/business, and then I guess it's called organizational evolutionary context, right? What skills and capabilities do they have in organizational change, in building relationships across the organization, in doing those things? These are the folks that can do it all are fairly rare, right? Folks that can do it all are absolutely fairly rare. I agree there. But if I've got somebody just for a team, I probably need mostly, if it's a new team, mostly engineering support with a little bit of business and a little bit of org.\n\nIf I'm hiring for somebody who's looking across multiple teams, I probably have the engineering as maybe not as important, but the business context is much more important. And if I'm hiring somebody who's looking across the whole organization, then the organizational transformational mastery is the most important. But I still want business context, and I still want, I'm calling it engineering context, right? But the context, the work context on that end as well. So this is fundamentally why somebody like Satya Nadella is so hugely successful within the context and has absolutely turned a multi-million dollar business around. Because while he has engineering capability, he understands engineering, he understands the practices, he understands how important it is to spend time on learning and those practices and those things. He also understands business, which is how he made it up through management in the organization, and he understands organizational transformational context, right? How do you change an organization? How do you adapt it towards a new outcome that opens up new markets and new capabilities? And that's why he's the CEO, right? And he's been hugely successful at it. He's got a book, \"Hit Refresh,\" definitely worth a read.\n\nThis is what we're talking about. This level of competence is what's not there, and this level of competence is what we need to fix."
  },
  {
    "id": "tYDWv--taWI",
    "title": "Story Points Velocity Martin Hinshelwood",
    "description": "Join Martin Hinshelwood as he unpacks the concept of story points velocity, enhancing your understanding of agile project management and team performance.",
    "captions": ""
  },
  {
    "id": "Tye_-FY7boo",
    "title": "Vision, Value, and Validation: The Keys to Successful Product Management",
    "description": "Unlock the secrets of successful product ownership! Discover Vision, Value, and Validation in our essential guide for aspiring product owners. 🚀✨",
    "captions": "One of the five things that I would teach a new product owner is about vision, value, and validation. One of the common things that happen in organizations as they start to move from focusing on project delivery to focusing on product management is that they take out all of the things that you think of as traditional project management, like the milestones and dates and Gantt charts and project plans. We take out those things because they're not agile, but then most organizations don't replace them with anything, and you end up with this vacuum in the middle where we're not going to do any planning, we're not going to do any forecasting, we're not going to really understand what it is we're doing. We're not going to explain to people what it is they need to do. Instead of giving them the plan, we're just going to say, \"Here's the product, get on with it,\" and then we expect magic to happen. That is an absolute recipe for disaster. \n\nDon't do that. What you need to do is fill that vacuum, and as a new product owner, this is the key part for you to understand, as well as for you to be able to engage and communicate to other people in the organization, up, down, sideways, whatever it is. Do you understand the vision of your product? Do you understand what it's trying to achieve? If you don't, that's step number one. Figure out what the value is in your product. What's the vision? What is it you're trying to achieve? Where are you going? What's your North Star? \n\nOnce you figured out that, and you can communicate it, you have to learn to speak in front of people and engage them in that story because you need to engage them in that story. Then you need to think about the value that you're going to deliver. Are the things that you're delivering in the product actually serving that vision? Are they working towards that vision? What is it that you're trying to achieve? \n\nThen you need to think about validation. How are you going to check that you're actually making progress towards those key ideas? That you're actually making progress towards your vision with the value that you're delivering? Is the value you're delivering even value at all? You might think it's value, but do your customers, do your stakeholders, do the people who are using it think that it's value? \n\nThis is a key major thing that we talk about in the Professional Scrum Product Owner class. We dive even deeper in the Advanced Product Owner class, but ultimately that vision, value, and validation is what's supposed to fill that product management vacuum that occurs when we make that transition from project management towards product management. \n\nThat doesn't mean that there are no project managers anymore. That is absolutely not the case. Project management is not being deleted from our working. It just becomes one of the tools. The focus is the product. We want to deliver the most successful, most valuable product that maximises the value creation in our organisation, rather than focusing on the project, which you can be on time, on budget, with the features that we asked for, and still be unsuccessful. \n\nFrom a project manager's perspective, from a project's perspective, we can still be successful and not have delivered any value. That's why that transition, that focus, and that's why when you take away those pillars that project management uses, you need to replace it with something else. The answer is vision, value, and validation. \n\nIf you find it hard to identify how you can enable vision, value, and validation within your organisation, my team at Naked Agility can help you or help you find somebody who can help you. Don't let these sorts of issues inhibit your ability to deliver value and maximise the value creation in your organisation. Use the links in the description to seek guidance as soon as you can."
  },
  {
    "id": "TYpgtgaOXv4",
    "title": "The Importance of Product Backlog Management in Today's Agile Landscape",
    "description": "Discover why Product Backlog Management is crucial in today's Agile landscape. Join Martin Hinshelwood as he explores its rising significance in Scrum.",
    "captions": "Product backlog management is getting lots of attention right now because it is one of the most deficient things in organisations that I and my colleagues encounter. Most organisations do not have adequate backlogs; they do not have backlogs that represent transparency in the work that needs to be done, and they don't have enough information for people who, even within the context of that organisation, context of that product, to be able to explicitly understand what that thing is and what you're trying to do with it. That is hurting the ability of teams to deliver value. It's hurting the ability of organisations to understand what it is that, what the heck, the teams are doing at all anyway. \n\nThat's why product backlog management is the biggest critical focus for organisations right now. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "Tz784ysJX7Q",
    "title": "Balancing Speed and Stability in Delivery",
    "description": "Discover how to prioritise quality over speed in software delivery. Learn the true costs of rushing and why stability builds trust.",
    "captions": "So one of the questions I often get is how do we potentially, as delivery managers, balance the difference between speed and stability? Right, when you're under pressure for tight deadlines. And I'd assert that there's a fundamental problem with the question, and that's that we're under tight deadlines. Why are we under tight deadlines? We tend to be, because let's be honest, most deadlines exist because people don't believe you can meet them. That's why a deadline—this is the ridiculous thing about deadlines.\n\nSo there are some deadlines which are not even real deadlines that are coming, the external deadlines. Right, so let's say you've got a business, you're something within the context of, let's say, a regulated thing. Something's regulated by the government. The government brings in a new rule, and your software does not currently comply with that rule. And the government says, \"By this date, if you don't have compliance, we're going to start finding you x amount of money for every day that you're not compliant.\" Right? That, for many businesses, they would decide that that's just an absolute deadline. But the reality is that's not even an absolute deadline either. We can pay the fine, right? We can pay the fine. How much is it going to cost to build a feature? How long is it going to take? And what are the implications of trying to push for that feature to come out faster than we are able to deliver that feature? Right?\n\nPeople are going to start tripping over their feet if we start pushing them too hard. They're going to fall on their face, and if they fall on their face, the software is going to fall in its vase. What's the impact of that on our brand and our business? And is it worth the fine? Normally, the fine's a lot smaller than the cost implications of going too fast. So long-term, you're probably not wanting to pay all those fines, right? But short-term, you need to build the feature in the right way, with the right capabilities, with the right level of quality. Otherwise, you're going to start eroding your customers' confidence in your product. You're going to start eroding the brand awareness of your company. This is not okay, right? It's not okay to ship poor quality, unstable product under almost any circumstances.\n\nThe only circumstance I can think of—even so, the circumstance I think about is our company will go out of business next week if we don't have this feature. I think that's totally arbitrary, but I've heard that one. But if we ship that feature and we have that feature, but it doesn't work properly and it's buggy, is that actually going to help us? Right? Is that actually going to help us stay in business? I would be dubious as to that. Maybe we can try and hide it. A good example of that being successful is Zoom during the pandemic, right? They succeeded. I actually don't understand why they didn't get more crap for it, but what they did was when the pandemic happened and everybody started working from home, their user base massively multiplied, right? Very, very quickly, massively multiplied. And what they found was that their systems could not support that number of users.\n\nBut if you start capping users, right, and saying to people, \"No, we can't have another user on the system,\" they're going to go somewhere else. They're going to go to your competitors. They're going to go to Teams. They're going to go to WebEx. They're going to go to somebody else. So you don't want to do that, right? Good business practice is—sorry, what good? That's one of those could be either way. Moral and ethical business practice would have you either cap the number of users until you can increase capacity and bring on more people, bring on more capability, right? But Zoom chose a different route. They decided that maintaining that user curve and supporting it was more important. So they started systematically building features more quickly at lower quality. They started ignoring security concerns because security is a lot of your cost, right, for building stuff, validating and checking. So let's cut all of that, and then we can build more stuff.\n\nAnd they deliberately turned off encryption. So one of Zoom's selling points was end-to-end encryption. But end-to-end encryption adds about 40% load. I'm just ballparking that. I'm sure there's all sorts of variations there, but 40% load. So they can immediately have 40% more users stable on the system by turning off encryption. But they didn't want to turn off encryption and tell their users they were turning off encryption because that was a huge selling point for the product, having encryption. And what would existing users do if they were told that it was encrypted? So there was a little green light in the corner of Zoom, and it was the encryption light, and it would go green when the communication was encrypted. They turned off the encryption, but they changed the code so the light continued to be green. Right? That's a reduction in quality. That's a massive, massive business risk, and they were caught. And that had a massive impact on their brand awareness and a massive impact on their business.\n\nThere are still companies today that have Zoom blocked as a product within their organisational network that they will not allow it to be used, and it's because of that moral and ethical decision that was made at senior levels of that organisation to reduce quality, reduce stability of features that users expected to work effectively. They did. They were even worse. They kind of lied. It's kind of like the Volkswagen scandal a little bit, right? Except I don't think anybody died. But don't reduce quality in order to ship features quicker. It has an impact, and it has—because we're building complex systems, it often has an impact you're not expecting. It often pushes you into a corner, and you're then left with those moral and ethical decisions, and you have to go a particular way. One's going to suck, and one's going to be nefarious. And quite often, we as humans pick the nefarious one because it's easier, cheaper, more manageable in order to do that.\n\nSo how do you strike a balance between speed and stability? Stability is more important than speed—much, much, much more important than speed. Stability and quality is much more important than speed. Pay the fine if you have to pay the fine, but do things well and do things properly."
  },
  {
    "id": "TzhiftXOJdw",
    "title": "What more needs to happen before traditional organisations consider Agile?",
    "description": "Discover why traditional organisations hesitate to adopt Agile in a complex world. Join Martin Hinshelwood for insights on evolving project management.",
    "captions": ""
  },
  {
    "id": "TZKvdhDPMjg",
    "title": "One thing a client can do to ensure a successful Agile consulting engagement",
    "description": "Discover the key action clients can take to empower their agile coaches for success in this insightful short video with Martin Hinshelwood. #Agile #Coaching",
    "captions": ""
  },
  {
    "id": "tzmbqdEULUY",
    "title": "DevOps Migration. Downtime",
    "description": "Discover strategies to minimise downtime during Azure DevOps migrations. Learn from real-world examples and expert tips for a seamless transition!",
    "captions": "When you're doing a migration of data, downtime isn't of always great concern for organisations. If you've got 5,000 software engineers in your collection, you don't want it to be down for an extended period of time and your engineers not able to work. I'm going to put that in air quotes because it's not really true; not able to work for that period of time. \n\nSo, there's a couple of things that you do need to kind of understand in this context. Even if TFS or Azure DevOps is down, like offline, your engineers can still work. It's just more difficult for them to collaborate together. So, if they're using Git as the source control system, which is the primary source control system in Azure DevOps and TFS, then they're able to even share code in a way that works within the context of the tool, even when they're offline. That's how Linux was created; there was no central source control system and they sent patches to each other over email. \n\nRight? So, Git fully supports that. Obviously, they wouldn't have access to the work items, so they would need to know what it is we're working on for the time that it's down. But I will point out that if you plan it right, downtime can be absolutely minimal. The largest migration we have done was 2.5 terabytes, a collection that we moved up from on-prem in Europe to Azure DevOps. \n\nWe took the system offline because it needs to be offline to do the final part of the migration. We're actually moving up to the cloud. We took it offline at 5:00 p.m. on Friday, and we were back online Sunday morning. The engineers came in over the weekend to validate that things looked good. They did their cursory checks; everything's in the right place, that that's working, this is working, that kind of thing. \n\nAnd they were back up and running Monday morning. So, that's probably one of the very few people out there that have collections that big. But if you plan it right—and that took, in order to do a 2.5 terabyte system in that time, we probably took 3 to 6 months of planning and dry runs and validations and making sure everything's good in the data. \n\nDry runs are really important for that. Sorry, that's practice runs, right? To get the data out of the data centre in a timely manner, get it up to the cloud in a timely manner, or get it processed, because that can be quite failure-prone. You want to have done a dry run so that you know that's going to work. \n\nAnd perhaps have Microsoft on hand to help out if there are any issues. So, that was minimal downtime. I think that was about 5,500 software engineers, and they really, really had no downtime. 5:00 p.m. on Friday, back up in the morning. But they were a global company, so there was some downtime for some engineers in some regions, right? Because that's just unavoidable. But we minimised it as much as possible."
  },
  {
    "id": "U0h7N5xpAfY",
    "title": "Understanding the True Role of a Scrum Master",
    "description": "Discover why training is vital for Scrum Masters in this insightful video by Martin Hinshelwood, highlighting the leadership role in fostering thriving teams.",
    "captions": "Most Scrum Masters don't realise what's entailed in being a Scrum Master. Usually, that's because they've just been handed the role by their organisation, and perhaps the role of Scrum Master within their organisation is very different from what I'm talking about with the accountability of the Scrum Master within the context of Scrum. Because, you know, 25 years ago when Scrum was created, Scrum Master was a brand new term that didn't have any baggage, whereas today it has just about as much baggage, if not more, than any other term out there. \n\nSo, as a Scrum Master, you do need to disambiguate the role that your organisation has, perhaps the job title right, and all of the different accountabilities that are included in that that might be nothing to do with Scrum as well. That's fine with the accountability for the Scrum Master within the context of Scrum. That accountability is for maximising the effectiveness of the team. That's really the whole thing in a nutshell. \n\nIn order to do that, there are loads of tools that you need in your toolbox. There are loads of practices and processes that can make sense in that space, complimentary practices to Scrum. So, there's lots of things outside of Scrum that a Scrum Master needs to understand in order to be as effective as possible. But if you have a brand new Scrum team that have never done Scrum before, they're just starting out. The first thing that a Scrum Master is accountable for is the knowledge that the team have, their understanding of Scrum, their understanding of empiricism, the Scrum values. Teaching those things is really important for a Scrum Master. \n\nAnd then, once your team gets beyond that, engaging with not just the team but the rest of the organisation as well. Remember, the Scrum Master not only has accountabilities for the Scrum team, but they have accountabilities to the Product Owner and accountabilities to the organisation as well. So, enabling a team to be as effective as it can has much wider implications across the organisation. \n\nBecause usually, once you've dealt with the knowledge, the knowledge that the team have about empiricism, about working product, and the value contained within that, it's organisational impediments that get in the way. It's things your organisation is doing which impedes the ability for the team to maximise its effectiveness. Getting focus on them, building relationships within the organisation, understanding the business processes, why they're there, and inevitably how to change them is a critical role for a critical area of understanding for the Scrum Master. \n\nSo, if you want to be a Scrum Master, you don't have to come to Scrum training, but the Professional Scrum Master, and more importantly, the Advanced Scrum Master Class can really help you broaden your understanding of what is the context of a Scrum Master and become the most effective Scrum Master that you can be. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "U18nA0YFgu0",
    "title": "7 deadly sins of Agile: Wrath",
    "description": "Explore the impact of wrath in agile teams! Discover how blame deflection and lack of accountability disrupt productivity. Watch now! 🚀📊",
    "captions": ""
  },
  {
    "id": "u56sOCe6G0A",
    "title": "3 core practices of Kanban. Actively managing work items in a workflow.",
    "description": "Unlock your team's potential with our guide to active workflow management in Kanban. Learn to optimise processes and prevent bottlenecks for seamless operations!",
    "captions": "Once you've defined and visualised your workflow, the next most important thing you can do in a Kanban strategy is to actively manage the work within your workflow. That means that you are not just a bystander to the process. The people that are participating in the process are not just sitting there looking at a piece of work going, \"Yeah, that's not working very well,\" and not doing anything about it. The core practice here is to actively manage that. \n\nThis means that if we're finding that we've got too many things going on in a particular area, perhaps we should reduce our work in process. If we've got lots of folks sitting about doing nothing in a particular area because we don't have enough work, perhaps we should increase the amount of work. Actively manage your WIP. You want to avoid work piling up anywhere in your system. \n\nSo if you're viewing your visualisation of your Kanban and you see lots of things piling up before another group, another team, another process, what are you going to do about it? You can't just sit there and watch it pile up. That's not going to help us maximise the flow and the amount of value that we deliver. We need to do something about it. We need to go and figure out what the problem is. We need to change our system in order to make it better. \n\nMaking sure we don't have stuff pile up and making sure something doesn't sit there for ages is part of actively managing your work. There are so many teams that I work with where we start looking at this data, and the first thing I'll say is, \"Why has this thing been active for 250 days?\" It's something that's either fallen through the cracks, or it's some kind of bucket piece of work that exists forever, or it's just something that's taken a really long time because it's got blocked, or we didn't understand it, or any of those things. \n\nWhy is it still sitting there? How can we make it go away? How can we move it towards completion? If we have a history of things taking a long time, then we need to do something about that. If items on your board are blocked, how are you visualising and indicating that they're blocked? That was the first practice, but what are you going to do about it? Are you just going to sit there and go, \"Yeah, we've got all this blocked stuff, let's move on and work on something else?\" No, you need to actively manage the blocked items. \n\nHow do we unblock them? How do we unstick them? How do we get them moving through the system again? It's kind of like having a pipe. If the pipe gets clogged with whatever it is that's clogging the pipe, it's difficult for other things to move around it because our attention is continuously pulled in different directions. So we want to actively work to get rid of those blockages. \n\nAnything that's blocked, anything that's slow moving and getting old sitting there, and anything that is piling up—something that's stuck—usually things pile up behind blocked stuff. All of those things are required for you to be actively managing your work in a Kanban strategy. If you're struggling to implement a Kanban strategy, we can help or help you find somebody who can. Click on the link below and get in touch."
  },
  {
    "id": "U69JMzIZXro",
    "title": "Installing TFS 2013 Standard",
    "description": "Learn how to effortlessly install TFS 2013 Standard with Martin! Discover the simplicity of setup, including SQL Server and Reporting Services.",
    "captions": ""
  },
  {
    "id": "U7wIQk1pus0",
    "title": "Install TFS 2013 Basic",
    "description": "Join me as I guide you through a straightforward TFS 2013 installation. Perfect for beginners! Apologies for the fan noise—new mic on the way!",
    "captions": ""
  },
  {
    "id": "uCFIW_lEFuc",
    "title": "Sloth! 7 deadly sins of Agile.",
    "description": "Explore the sin of Sloth in Agile! Martin reveals pitfalls and the need for honesty in practices. Avoid complacency and align with Agile values! 🚀🐌",
    "captions": ""
  },
  {
    "id": "ucTJ1fe1CvQ",
    "title": "Unlocking the Power of Assumptions in Product Development: Why the PPDV Course is a Game-Changer",
    "description": "Unlock the secrets to impactful product development! Join me as I explore the importance of addressing assumptions and creating user-centred solutions.",
    "captions": "Let's start with the why. Why was the PPD V course created? Based on our observations of how companies work and how teams work, it seems there is still a lot of attention when it comes to delivery. One may also think that, hey, if we have to put just one goal of every sprint, what is the most important thing that we have to achieve? It is creating a product increment. So, it seems this is an important topic, right? But this is not enough, and I believe we forget, although we emphasise this a lot, that we are solving complex problems. \n\nWhat does it mean? We, along this product development journey, will make a lot of assumptions. What is even worse is that some of those assumptions, in some cases, I would dare to say even the majority of them, might be made unconsciously. So, we make an assumption, we take the next step, but we miss a learning opportunity. This may lead us to the feature factory problem. Of course, we have a lot of memes and stories like, \"Hey, strong stakeholders, stakeholder-driven development,\" and here we go, we have the feature factory problem in place. \n\nBut if we think about it deeper, there might be a lot of factors affecting this problem. Maybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not the healthy collaboration. And maybe we have chosen the wrong metrics. We have a misalignment here. All those things may cause the problem that we call the feature factory problem. \n\nSo, what do we want to do with this course? We want to emphasise the topic of assumptions in the complex world. In the complex environment, we don't know many things. In fact, in many cases, we don't know what we don't know yet. So, that's why this path towards creating high value, towards creating valuable products and solutions for the customers, should be some kind of way how we navigate around assumptions. \n\nOur biggest question is: what works best for the user? To find the answer with the knowledge gained in that course, we will embrace that. In fact, a full end-to-end empirical cycle requires discovery, delivery, and validation. So, those three elements work together to help us navigate around those assumptions. \n\nOur new course is designed for product leaders, product owners, product managers, but also for product teams in general. We believe that everyone involved in the product development process will benefit from this class. This class is designed to be a one-day course, around 8 hours, which can also be split into two half days or smaller chunks. \n\nIn this class, we will use a case study that will help us navigate through different concepts throughout this whole story, how to better incorporate discovery and validation into the product development process. Thanks to that, we will get familiar with working with assumptions, experimentation, collecting evidence, and an important word for this class: learning. \n\nSo, it will be a conscious learning process on how to build better and better products."
  },
  {
    "id": "uCyHR_eU22A",
    "title": "How do you select the most valuable items for the sprint backlog?",
    "description": "Master the art of selecting valuable Sprint backlog items in Scrum! Join Martin as he uncovers strategic insights for effective Agile planning. 🎨📈",
    "captions": ""
  },
  {
    "id": "UeGdC6GRyq4",
    "title": "Under employed - 30% upfront, balance when you are employed",
    "description": "Struggling to find your dream job? Discover NKD Agility's unique pricing for the under employed—30% upfront, balance upon employment. Watch now!",
    "captions": ""
  },
  {
    "id": "UeisJt8U2_0",
    "title": "7 Harbingers of the Agile Apocalypse. Plague.",
    "description": "Explore the parallels between ancient myths and today's agile challenges as Martin tackles the plague of incompetent coaches. Join the journey! 🌬️🐒",
    "captions": ""
  },
  {
    "id": "uetzybp7bf4",
    "title": "Building a Culture of Continuous Improvement",
    "description": "Empower your teams with financial transparency! Discover how to enhance decision-making and ROI in product development for continuous improvement.",
    "captions": "If you want to maximize your return on investment for the time and effort that people put into the products that you're creating, you need to try and enable and foster a culture where the people that are working within the context of your products care about the products and your customers. They care about what it is that they're creating because they feel that they have ownership of it. People care about things they have ownership of.\n\nThere are a whole bunch of ways you can do that. You're effectively fostering a culture of continuous improvement. Kind of a little bit of buzzword bingo there, right? But the idea is that when we talk about hypothesis-driven practices, we're having an idea, we're trying a little bit of that idea, we're getting feedback from the customer, and then we're adapting that idea to be better. So it's double down, right? We're going to invest more in this because it looks like it's awesome.\n\nWe've got pivot, which is we change what we're doing based on what we learn, or we've got kill it, which is stop investing in it and do something else. Like, don't keep doing this. You see Google are doing this a lot. There are two websites: Microsoft graveyard and Google graveyard. It's products that Microsoft and Google have killed over the years. Some of them are very high profile, some of them are lesser known. The more high-profile it is, probably it's been invested more money in it, and more people liked it, but not enough people. It didn't make enough of an impact to continue to invest in it for the cost that it is.\n\nSo if we want the people that are doing the work to care about our product, to care about our customers, and to spend money, which is their time, right? That's their time. Every time they do something, they're spending your money. Every person in your organization is spending your money. If we want them to spend that money diligently, I don't like that word, with care, then they need to understand the context within which they make that decision about whether they do this thing or they do not do this thing, or they do it this way or they do it that way.\n\nIn order to do that, and this is something that I see lots of organisations doing, I consider it a little bit of a dysfunctional behaviour. I see lots of organisations doing, especially professional services organisations, but also product organisations as well. They shield the people doing the work from the finances of doing the work because it's all shifted off to a finance department. What that does is remove the context of money from the people doing the work.\n\nImagine you trying to run your business and make decisions about what you're going to invest in and what you're not going to invest in, but you had no information about budget, you had no information about money, you had no information about spend, you had no information about revenue. How good are you going to be at making successful decisions to make a successful business if you don't have access to any of that information? It's going to suck, right? You're going to make bad decisions because you don't have all the information. That's every member of every team in your organisation. They're right now potentially making bad decisions about what features they build, about how they build those features because they don't understand the ROI effectively of what it is that they're doing.\n\nThey might think it's going to provide value, but do they actually know? And do they know what it costs to make? I'd advocate for every team doing their own P&L. What value are you as a team bringing to the business? What do you cost? I want value to be higher than the cost. If you're a team and you're thinking about those things, you're going to make different decisions because you have additional context. You turn every member of every team into an entrepreneur trying to figure out how do we maximize what we're doing in this work within the context of this product? How do we maximize the value that we return? What should we be working on? Well, we should be working on this stuff over here because that's going to give us the biggest return, right? Biggest short-term return, biggest long-term return.\n\nWhen you're thinking, you as a business owner, you as a CTO or CEO, are thinking about how you invest in your company. You're thinking about short-term wins to generate revenue quickly. You're thinking about the long-term objective of the business and how you're going to make money in the long term and sustainable income. That's all part of the story. It needs to be for every member of every team. You can't, if you hide that information from them, if you obfuscate it and create a filter so they don't see any of that stuff, they're going to make bad decisions.\n\nSo don't shield them from that. Build that into the story of how a team operates. Do P&L with every team. Have that filter up through the organisation, and I guarantee you'll see higher return on investments and higher value being delivered."
  },
  {
    "id": "UFCwbq00CEQ",
    "title": " shorts 5 kinds of Agile bandits. 2nd kind",
    "description": "Discover the 2nd kind of Agile bandit with Martin Hinshelwood! Learn about 'say-do' metrics in this engaging #shorts video. #Agile #Scrum #NKDAgility",
    "captions": "If you are working in the agile space and you're focused on, say, do metrics like original estimate versus actuals, then you are an agile Bandit. You want to stop doing that. It reduces the psychological safety of your team. It creates a focus on estimation rather than actually delivering stuff, and it encourages teams to focus more on the output—more stuff being delivered—than the outcomes that they're trying to achieve. Don't be an agile Bandit and don't use S do metrics."
  },
  {
    "id": "UgFVn4Sp1rw",
    "title": "Measuring and Monitoring Costs for Continuous Improvement",
    "description": "Unlock the secrets of product costs and ROI in software development. Empower your team with financial insights for continuous improvement!",
    "captions": "So if you're building products, you really need to understand the cost of those products. There are a number of factors; it's really complicated because there's the actual cost you pay, which is normally due. In general, your two big costs at building software products are hardware—that's the smaller one—and people. Right? So if you have 50 people working on a product, that's probably going to be your biggest cost. If you deploy to the cloud, that's going to be your second biggest cost, right? So your infrastructure and people, those costs should be fairly consistent. You should understand your cost profile. I usually talk about it in terms of what's the cost per sprint, right? Why should we do another sprint? What's it going to cost? What do we get for it? And are we getting a clear return on investment for the cost that we're putting in, right?\n\nSo sprints are part of the Scrum framework, and they're a way of planning and managing work, right? They don't imply an engineering process; it's just about the management of the work part and planning for what's happening next. So if I was looking at a cost per sprint, let's say I'm doing a two-week sprint, what's my cost per two weeks of work? What are my teams working on for those two weeks, and is it valuable? It's also really important in that context for the people doing the work to understand the cost of doing the work because they'll make better choices, right? If you want to create an environment in which people are spending the money as if it's their money, and if they understand the cost of the sprint, they'll think about what it is that we're doing for this sprint, the cost of the sprint, and try and maximise your return on investment. That needs to be an evolution, an effort that every single person that's working on your product is involved in; otherwise, you're not going to have people working on the right thing, and you're not going to have people making the right decisions.\n\nSo one effective way to minimise your cost and maximise your value is to have every member of every team and everybody working on your product understand what the costs are within their context. I've actually spoken to some colleagues about this, and I've kind of come to the conclusion that every team should be running a P&L, right? Not just are we adding value in the product, because value is a little bit in the eye of the beholder; it can be a little bit difficult to actually measure its capability. But revenue, we can absolutely measure that, and what percentage of the revenue is attributed to a particular feature. This team owns that feature; therefore, that's the revenue they're making. This is the cost that they're having, and are we as a team making a profit working on what we're working on? If we're not making a profit working on what we're working on, should we be working on something else, right? \n\nThat dynamic and flow of the team within the context of product management and product leadership with deliberate choices on investment in long-term efforts, right? Just like an infrastructure build. If you were running a country and you decided to invest in roads, that's a big capital expenditure to invest, and that needs to be understood as a concept. We're investing a bunch of money just now, so it looks like we're making a loss in order to get a larger return in the future, and that's a deliberate thing that we're doing. But we're still looking at the P&L; we're still understanding what it is that we're doing.\n\nSo I think from a team, from a group, from a product perspective, we should be looking at all of that information, and every member of every team should understand it to the extent that they need to, right? Within their context. To do that, you kind of need to understand a little bit more about what your product is, where you intend your product to go, what market you're in, what's happening in the market, and how you're interacting with the market. This is where I tend to fall back a little bit on evidence-based management. So there's the evidence-based management guide from Scrum.org, and it does give example metrics, right? But it doesn't really talk about specific metrics in the context of the guide. It basically says there are four key value areas that we need to think about. There are four key questions we need to ask ourselves, and in order to answer those questions, we need to have metrics which help inform but not control those decisions.\n\nSo the four key value areas that we need to monitor, right, in order to understand our cost-to-value profile, I think that's probably a good way to say it, is we need to understand where we sit in the market for our product. That market could be an external B2C or B2B market, or it could be an internal market—whatever you want to call that. You're the people that are using your product internally in the organisation. That's why lots of organisations have internal cost structures as well. You know, I worked at Merrill Lynch, and if I wanted a server or to use a piece of software, even if it was an internally built piece of software, there was a cost attributed to it. Yes, it was a little bit of a fictitious internal cost, but it allowed them to do a little bit more P&L and understand what's going on with the product. They definitely went too far with bean counting, but it is important.\n\nSo we have to understand our market value, and that's made up of two areas. There's current market value—what we've got right now, what we're delivering right now. So that could be customer happiness; it could be employee happiness; it could be usage, right? Lots of information we can collect around our current value. And then we've got hypothetical value, future value, which should be represented in our product backlog, right? What's the future value of our product? Looking at what market opportunities we can open and how do we measure whether we're opening enough market opportunities? \n\nThink of the example of Netflix. Why do they choose to create a new show, the first season of a new show, rather than add a second season to an already successful show? That's because second seasons always have less users; less people care about a second season, whereas the first season of a new show, you can big it up and onboard new people that weren't customers before, right? So that's opening out new market opportunities rather than leveraging existing market opportunities, and that's what your product backlog is about, right? You need to measure and understand those things within that context, and those things are really, really hard to measure. That's one of the hardest parts, I think, to measure for most organisations. Are we solving customers' problems? Are there other problems that the customers have that we should be solving instead? All of those kinds of questions. \n\nBut that's your market value. And then the other thing that you need to understand and have metrics for—I'm deliberately not referring to specific metrics because it really depends on your context, your industry, what it is you're doing, how your product works—you need to find metrics in these areas that suit your particular product in your particular world. I do work with organisations to help them understand those things, but it's something that they need to understand, right? The people doing the work, the people in the organisation need to understand.\n\nSo that's the market value, and then you've also got your capability of your organisation. So the two pieces are time to market—how quickly do you get your product in front of real customers, right? Time to market is about how quickly can you realise an idea to data, right? So that's time to market. And then the other one is the ability to innovate. How much time do you spend opening those new markets versus maintaining and supporting existing stuff, right? This is where if you had high technical debt, you might spend more time on maintaining and supporting. If you have low product quality, you might have more time on supporting and maintaining. \n\nSo those are the types of things you might measure in that world, right? What's our technical debt? We might do so in our code analysis of our product or whatever else you're doing. How do we understand bug trends, live site incidents? We might be looking at all of those things within our ability to innovate context and our time to market. We're looking at cycle time and lead time, right? How quickly can we get stuff out the door? What are other things in your organisation that impact those ideas, right? What are the things that inhibit your organisation's ability to reduce its time to market? Measure those, right? To get faster at delivering your products, what are the things that are getting in your way? That's what you should measure. If you're struggling to innovate, what are the things that are getting in your way? Those are the things you'd measure, right?\n\nAnd once you've got a handle on those things, figure out what the next thing you measure is to get your next biggest bang for your buck. And that's a constant cycle. So the metrics are changing over time. Some of them will take longer than others to resolve, but measuring and monitoring the value that you're creating—revenue in P&L and the cost of delivering in your product—these are other metrics that help you get that holistic picture of what's going on. It is almost the most important thing for a CTO, for a business, to understand and disseminate through the organisation so that we can all, at every level, make the best decision we can."
  },
  {
    "id": "uGIhajIO3pQ",
    "title": "Agile Scotland 2023: Why does this matter to you and why should people come to the event?",
    "description": "Join Martin Hinshelwood as he highlights why Agile Scotland 2023 is a must-attend event for anyone in Scotland's agile community!",
    "captions": ""
  },
  {
    "id": "uJaBPyixNlc",
    "title": "How does Naked Agility select associate Scrum Trainers?",
    "description": "Discover how Naked Agility selects top Scrum trainers with rigorous standards to ensure expert guidance in mastering the Scrum framework.",
    "captions": ""
  },
  {
    "id": "UOzrABhafx0",
    "title": "Mastering Product Backlog Management: Insights from the New Scrum.org Course",
    "description": "Discover Scrum.org's new Product Backlog Management course with Martin Hinshelwood and learn to master backlog refinement for effective product goals!",
    "captions": "So the new product backlog management course from Scrum.org has been a long time coming. It's going to be awesome. It's one of their new skills-based style of classes, which are shorter classes. They're eight hours, rather than the usual 16 hours, and they focus laser focus on one particular skill, and in this case, it's product backlog management. \n\nIn product backlog management, we have a number of things that we cover in the class. We're going to cover where these backlog items come from. We're going to cover how to manage those backlog items, how we write those backlog items, how we break them down into smaller units of work that are maybe easier for the team to consume, easier for people to understand. \n\nIn that, how we maximize the transparency of that product backlog by enabling the understanding of everybody that needs to understand it to be able to understand it, right? And then how do we work through it? How do we order that backlog? How do we make it the best backlog it can possibly be within the context of what it is we're doing and what we know and what we can do within our organization? \n\nSo it's an awesome little class that helps us get to grips with some of the nuances of product backlog management. How do we make sure that we minimize the amount of things that are in that product backlog in order to maximize the value that we get from it? \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility.com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "uQ786VBz3Jw",
    "title": "What is your 1 tip for effective sprint planning?",
    "description": "Unlock effective sprint planning with Martin Hinshelwood's top tip! Focus on building value, not just productivity, for your #scrumteam. #agile #projectmanagement",
    "captions": ""
  },
  {
    "id": "uRqsRNq-XRY",
    "title": "7 signs of the agile apocalypse. Judgement",
    "description": "Discover the 7 signs of the #Agile apocalypse! Learn how poor judgement can lead to doom and the importance of continuous improvement. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "USrwyGHG_tc",
    "title": "Is a Scrum Master an Agile micromanager?",
    "description": "Join Martin Hinshelwood in this #shorts video as he tackles the question: Is a Scrum Master an Agile micromanager? Discover insights in just 60 seconds!",
    "captions": ""
  },
  {
    "id": "utI-1HVpeSU",
    "title": "Quotes: Dictatorship vs Democracy",
    "description": "Explore the debate: Is a dictator or democracy better for product development? Join Martin Hinshelwood's insights in this engaging short! #agile #scrum",
    "captions": ""
  },
  {
    "id": "uvU_ATou6QY",
    "title": "What does failure look like as a product owner?",
    "description": "Discover the signs of a failing product owner! Learn to distinguish perception from reality in product management. Don't miss this insightful video! 🎯🚫",
    "captions": ""
  },
  {
    "id": "uvZ9TGbMtnU",
    "title": " shorts 5 kinds of Agile bandits. 1st Kind",
    "description": "Discover the 1st kind of Agile bandit with Martin Hinshelwood! Join us for insights on Agile practices and team evolution. #Agile #Scrum #Shorts",
    "captions": "There are no special Sprints. There are no Sprint Zeros. There are no hardening Sprints. There are no bug fix Sprints. All of these things create safety nets, and safety nets generally get used. People take more risks because they know they have a safety net, and risks, when we're trying to create usable working product, are not a good thing. They are risks to the business, and we want to focus on usable working product at the end of the Sprint. So don't have any special Sprints. Don't be an Agile Bandit."
  },
  {
    "id": "UW26aDoBVbQ",
    "title": "5 October 2023 Product Ownership and Lean Product Development Webinar",
    "description": "Join Dr. Joanna Płaskonka and Martin Hinshelwood in this 18-minute webinar to explore Product Ownership and Lean Product Development insights! #shorts",
    "captions": ""
  },
  {
    "id": "uYm_wb1sHJE",
    "title": "What is the Sprint Review workshop and how will it help organisations?",
    "description": "Discover how NKD Agility's Sprint Review workshops empower scrum teams to excel in showcasing their work and enhancing stakeholder engagement.",
    "captions": ""
  },
  {
    "id": "v1sMbKpQndU",
    "title": "What are the top 3 things a Scrum Master needs to bear in mind when adopting the coaching stance?",
    "description": "Discover the top 2 essentials for Scrum Masters in coaching agile teams: the art of listening and the power of credibility. Elevate your coaching game! 🎧🤝",
    "captions": ""
  },
  {
    "id": "V44iUwv0Jcg",
    "title": "Continuous Improvement with Kanban",
    "description": "Discover how to enhance your processes with Kanban in this insightful video on continuous improvement. Join us for agile transformation! #kanban #agile",
    "captions": "We love taking Japanese words and using them not quite right for their meaning. But one of the key phrases that we use all the time in Kamban is Kaizen. Kaizen is really just about continuous improvement. It's keeping changing things, hopefully for the better, because you're observing improvements in the system or measuring improvements in the system. \n\nSo the idea of continuous improvement, continuous change, and continuous optimization of your process or your system is generally referred to in the Kamban community as Kaizen. Kaizen's not limited to Kamban; it can be used absolutely anywhere you like. We should always be continuously striving for anything that we do to be a little bit better every time we do it, and that continuous nature is what we mean by Kaizen."
  },
  {
    "id": "V88FjP9f7_0",
    "title": "Quotes: Less is More. True or False?",
    "description": "Explore the truth behind \"Less is More\" with Martin Hinshelwood's insights on #agile. Discover how simplicity can drive team success! #shorts #scrum",
    "captions": ""
  },
  {
    "id": "vbY6LUq81uY",
    "title": "Maximizing Value with Minimum Viable Products MVPs",
    "description": "Discover how to maximise ROI with MVPs! Join Martin Hinshelwood as he shares entrepreneurial insights for funding and developing successful products.",
    "captions": "Building products is always doing something that's never been done before. Anytime you've got a team writing code, they're doing something that's never been done before. If they weren't doing something that's never been done before, you wouldn't be writing code; you would be buying the product, right? You would be buying the framework; you'd be buying the thing. So, anytime we're building products, we're doing unknown things, right? That's why we have such a high degree of variance in software engineering.\n\nIn the business space, there is something that kind of equates to that, or an analogy within the business context, and that's entrepreneurship. If you've got an idea for a company that delivers some kind of value, regardless of how that value is achieved, then you need to go and find somebody to invest in that idea. That works almost the same within the context of an organisation as it does in the context of me. If I wanted to go start a new business, I would probably need to go speak to the bank. I might need to go find some venture capitalists. I need to convince them. I need to find people in my company; I need to convince them that it's a good idea that needs to be promoted up to a level of somebody with some spending power. That person with some spending power offers me the ability to go try this out, but I have to convince them.\n\nNew ideas, things that have never been done before, are not guaranteed. They're not guaranteed to work; they're not guaranteed to have the return on investment that you expect them to. If you're in business, you already understand this concept, right? I believe my numbers might be slightly off, but I believe that 70% of new businesses fail within the first year, and 30% of the leftovers fail within five years. I think I might be underestimating the second part, the five-year part; it might be more than that. So, there is a risk profile to everything you do when you're investing money in a possible outcome within your business or external to your business. \n\nYou need to figure out what your risk profile is for investment in things that have never been done before, and you need to gauge the return that you're expecting to get on the investment that you're putting in. This is exactly how products should be funded as well. If we're going to fund a product in that way, and I'm going to be the one funding that product, I want to see value and market fit as quickly as possible, right? \n\nSo, what we tend to do is run lots of very small experiments. I might come to you and say, \"I need some money.\" Sorry, I'm switching personality here. I'm going to come to you and say, \"I need some money. I want to try out this idea. Hi, I've got this idea for a database of movie stars,\" right? And you're like, \"How are you going to make me some money?\" Because you want to return on your investment. So, I'm thinking, \"Well, I really, I'm the geek, right? I want to have a database of all the movies with all of the actors.\" \n\nThen you can ask, \"Can we have the budget for the movie in there? Can we have how much each of the actors made?\" Suddenly, you've got an idea of who you could sell this product to, right? What its possibilities are going forward into the future with a little bit of ideation from that geek idea of having a movie database, and IMDb is born, right? Which is massive now. If you don't know, IMDb has two halves. It has the public free half, which is where we just go look up movies, but then it sells inside of the industry and can give directors, for example, who are looking for a leading man or a leading lady, data on who can make my movie the most money. \n\n\"Oh, it's The Rock. Well, I can't afford The Rock. Who's within my price range for the budget for my movie that I can get that's going to maximise the amount of money?\" They pay IMDb a lot of money for that story. That's not something that was within anybody's budget; it was a venture capitalist effort, right? \n\nSo, you want to be thinking within the context of your business. You want to be thinking more like entrepreneurs, thinking more like venture capitalists. What's your return on investment? If you put money into this product or project, what do you get? How much do you get? What's the longevity of what you get? What's the story for this? I want to see a business plan. I want to see a lean canvas on what this looks like. Have people thought about the different aspects of it before I'm going to let them spend some money? \n\nEven once they're spending money, I want to see a little thing. I want to see a proof of concept, right? Let's get something out there, see what it looks like, get it in front of some other people. Does it resonate with people? Does it seem like it's going to provide value? Okay, what's the next stage? What's the next bigger thing we can do? What's the next experiment that we can run? \n\nI talk about it as hypothesis-driven engineering practices. Lots of folks out there use the phrase MVP. They're mostly, I see MVP, minimum viable product, being kind of misused. Minimum viable product is a proof of concept that you throw away at the end before you build the real product. I know lots of people use it as a small experiment, so whatever context you use it within. But we want to be running lots and lots and lots of small experiments. We know lots of experiments are going to fail, but we're going to find the ones that work, and then we're going to invest more in those, invest less in the ones that don't work. \n\nThat's how you stay within budget: lots of little experiments that have a hypothesis. What are you going to do? What do you expect the world to be like afterwards? How are you going to measure whether you've been successful? We want to see the numbers, and we're going to cull anything that is not living up to its expectation unless we can be convinced otherwise, right? There's heart as well as data in building your products and staying within budget."
  },
  {
    "id": "vBz2aWiNvAQ",
    "title": "Free Workshop 4 - Introduction to the Sprint Review!",
    "description": "Join Martin Hinshelwood for a free 90m workshop on mastering Sprint Reviews! Learn how to gather feedback and plan your next steps effectively.",
    "captions": ""
  },
  {
    "id": "vftc6m70a0w",
    "title": "7 Virtues of agile. Chastity",
    "description": "Unlock Agile success! Discover the virtue of Chastity in our latest video and learn how thoughtful planning transforms your approach to business agility.",
    "captions": "So one of the seven virtues of agility is chastity. In our context, in the agile context, chastity is really about taking your time. Right? Don't jump into thinking that you've been successful doing agile and we're going to take all the things you want to think about, the impact and the effect within your organisation of the changes that you make. \n\nSo there are loads of implications of agile that go far beyond the actual mechanisms for your organisation. So things, for example, like the democratization of the workplace, involving more people in the decision-making is something that you need to take time over. You need to think about how you're going to change your organisation. You need to involve the people in your organisation in that story; otherwise, they're not going to be interested in what it is you're trying to achieve. \n\nNobody really cares about your goals; they care about their own goals. And the way you get them to care about your goals is you make their goals your goals. Right? They want to be part of that story. So taking your time and looking at... there are tools out there, like open space agile, that allows you to involve the whole of your organisation in your decision-making process as you move towards a greater degree of agility. \n\nAnd that time and thoughtfulness and inclusivity is going to be the thing that enables you to get the most out of your agile strategies. If you are having difficulty getting the most out of the seven virtues of agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need naked agility."
  },
  {
    "id": "vhBsAXev014",
    "title": "7 Harbingers of the Agile apocalypse. Chaos.",
    "description": "Master agile transformation! 🌟 Join Martin as he uncovers chaos pitfalls and the vital role of communication, direction, and alignment. 🚀",
    "captions": ""
  },
  {
    "id": "vHNwcfbNOR8",
    "title": "What is your feeling on creating Agile apprenticeships?",
    "description": "Explore the potential of agile apprenticeships with Martin Hinshelwood as he discusses their importance in empowering the next generation in product development.",
    "captions": ""
  },
  {
    "id": "vI_qQ7-1z2E",
    "title": "Is a PSM II certification validation of your skills, or does it develop your skill and capability as a Scrum Master?",
    "description": "Discover if the PSM II certification validates your skills or enhances your capabilities as a Scrum Master. Join Martin Hinshelwood for insights!",
    "captions": ""
  },
  {
    "id": "vI2LBfMkPuk",
    "title": "What is your favourite agile course to deliver and why?",
    "description": "Join Martin Hinshelwood as he shares his favourite agile course, revealing why it’s a transformative experience for both him and his delegates.",
    "captions": ""
  },
  {
    "id": "VjPslpF3fTc",
    "title": "How will the Immersive Learning experience change the game for people with a couple of years experience in the field?",
    "description": "Unlock your potential! Discover how immersive learning transforms skill enhancement for experienced professionals in our latest video. 🎓✨",
    "captions": ""
  },
  {
    "id": "VkhIXCsoSJw",
    "title": "Automate Everything - Boosting Engineering Excellence and Building Confidence",
    "description": "Discover how automation enhances engineering excellence, boosts confidence, and accelerates product development in this insightful video!",
    "captions": "When you are working on very complex products, one of the main steps developers and engineering groups can take is automating everything. I mean, that's probably, along with reducing the backat size, so making the things that you're delivering smaller, so that you can do more of them and you're iterating on them, right? \n\nOne of the key things that enable your engineering team to have the confidence that they can continuously deploy to production those small things is to automate everything. You should have automated testing, you should have automated deployment, you should have as much automated validation as you can. There are automated validations you can do, especially if you're collecting telemetry in your product. A great example of that was the Azure DevOps team when they first started deploying their cloud version of the product. They didn't have, you know, they'd been used to doing two yearly deliveries and suddenly they were doing three weekly deliveries. \n\nThey had technical debt, they had poor quality code, they had big gnarly chunks that were very difficult to edit, and they had automation that took a very long time to run. So, one of the two big focuses, big engineering pushes that they made in that team that I think had the biggest impacts on me observing their improvements, and the first one was that they reduced as much as possible that cycle time, right? They wanted to reduce that time to learn as much as possible. \n\nTime to learn is all the way from coming up with an idea for a feature, it gets all the way through being built, or some of it being built, being deployed to production, or some of it being deployed to production and collecting telemetry, and then feeding that back all the way around to the next loop. That's time to learn all the way around. So, figuring out what the biggest time suck is in that space and tackling that. \n\nFor the Azure DevOps team, they found a number of things. One of those things was their testing infrastructure. Their testing infrastructure was, for want of a better expression, terrible. It took, as I understand, about 48 hours to find out for developers if they made a code change whether it was successful. Their time to self-test, right? Their ability to test for themselves was incredibly long. That's 48 to 72 hours, and the time to run the regression suite was even longer than that. It was perhaps a week to get that done because they had long-running regression tests. \n\nOne of the biggest focuses, biggest pushes they had was on converting all of those long-running functional tests into short code tests, right? They were top-heavy on their largest number of tests, which were these long-running functional tests. Their smallest number of tests was unit tests, and they flipped that pyramid over. It took them four years because, remember, they'd been working on this product for six to eight years in a waterfall way, and they built this massive test infrastructure. \n\nSo, it took them four years of doing a little bit at a time, paying back that technical debt to get to the point where they'd flipped that pyramid over. In fact, they just removed whole layers of that pyramid, and they ended up with all of these fast-running unit tests. Instead of 80,000 long-running automated tests, they had 880,000 short tests. They moved that number from 48 hours to find out if a developer had done something wrong to three and a half minutes. They could run the whole test suite in three and a half minutes on their local machine. \n\nThey could stand up, via command line calls, any parts of the system that they needed in order to be able to do functional tests locally on their machine. That was one of the other changes that they made. How do we enable that so that developers can just run a command and it sets up the bits they need to test the stuff that they're working on locally? So that they can have a copy of the system running locally and walk through it. \n\nThey built all of that functionality. It took them a long time to get there, but that investment helped improve their confidence in their ability, not just as individuals but as a group, to be able to deploy and build features in the product and improve the confidence of their customers. Right? Their customers had greater confidence that this is a good product, it's a solid product. Yes, we've seen things go wrong, but when things go wrong, they own up to them, they fix them, they move forward, they don't make that mistake again. \n\nSo, that building, because it's okay to make mistakes, if you've got a customer that you make a mistake and they throw a tantrum and they throw their toys out of the pram, it's because they're used to working with vendors that they have low confidence in, and they have low confidence in you fixing it. So, they believe that they have to throw that tantrum in order for you to fix that thing. \n\nYou need to build their confidence in you and in your product, and then they'll stop doing that. They'll accept, \"Oh, something went wrong, you messed up,\" but we know you're going to fix it, we know you're going to do a good job, and we know that you're not going to do it again, right? Or it's unlikely that you'll do it again. That's confidence. \n\nWhen you're working in big complex systems like Azure DevOps or other types of systems that you have, you need that level of confidence, not just at the whole product level but at every individual team level. I, as a person working on a team, need to have confidence that if I'm using capabilities delivered by another team, that they're going to be solid, that they're going to work, that they're going to meet that quality bar that I need in order to do my work, and I'm not going to be your crutch to enable functionality. \n\nSo, this is really, really important to have that underlying attention to detail, attention to quality, shorten those feedback loops, build up that automation, automate everything. There should be no manual tests. One of my favourite examples of that is the Azure DevOps team. They had poor telemetry in their product when they first moved to this cloud environment, and they were deploying through regions. \n\nSo, they would deploy to a region and then they would check to see that everything was working properly. They would check to see whether they adversely affected users. They'd do this all manually, and then they would deploy to the next region. One of the developers, an intern, for fun, developed something they called the Twitter sentiment bot. \n\nSo, this was a little bot that trolled Twitter for negative comments about your product. What they would do is they would do a deployment to a particular region, and then the Twitter sentiment bot would monitor Twitter for a couple of hours to see whether the level of negativity about your product increased in any way. You're always going to have a baseline of people that are unhappy with stuff, right? So, if it increased in a certain way, then they would automatically stop the deployment and flag that there was something that needed to be looked at. \n\nThat's a crutch, right? That's a way to automate something that isn't automatable because of the way you built your system. They eventually didn't need that bot anymore because they had those full automations built into the system. But you need crutches while you get there to be able to push those boundaries and keep pushing for continuous delivery, keep pushing to do things faster, keep pushing to improve your code, improve your quality, and improve your engagement with your customers, and you'll get there eventually."
  },
  {
    "id": "VkTnZmJGf98",
    "title": "Evidence-Based Management: The Key to Agile Success",
    "description": "Unlock the power of evidence-based management to enhance agility! Discover how data-driven strategies drive market success and organisational growth.",
    "captions": "Evidence-based management has improved agility by actually having some way to monitor whether we're making changes to the organization. I think one of the core problems that we've had is that there hasn't been any real metrics. If you look at the research out there on agility in any form, whether that's plans or SAFE or DAD or LeSS or Nexus or Scrum, whatever it is you decide to do, in general, organisations are not being successful by implementing those things. They're not making systemic changes to their organisation; they're not getting the benefits that they expected to get. \n\nPart of the reason that is true, that they're not getting the benefits, is that they're focusing on the wrong thing. We're focusing on delivering the agile, which is not the point. The point of this is having a successful business that delivers value into the market so that we increase the value of our organisation. That's what we're trying to achieve, and agile is just a set of tools and practices and capabilities that we can use to help us be better at that. But unless we focus on what it is that we're trying to achieve—being more successful in the market—we're not going to get the benefits from agile because we're not going to make the changes in our organisation that we need in order to be successful.\n\nWhen you look at organisations that are hugely successful at agile in the market, they're using agile. They've monitored what's going on in their organisation, and they've changed things in their organisation: the way their organisation functions, the way they do business, the way they lead people, the way they manage people, the way everything in their business operates. Every process, every service, every workflow has been impacted, and they've made those changes based on the data that they see. They're able to make a change in the way they do their business and monitor that data.\n\nEvidence-based management practices, even without using those terminologies, is how every successful organisation has become successful. Then we get complacent once we get to a certain size, and the organisation quite often stagnates. Every startup that ends up being successful is using an evidence-based approach. Every organisation that is continuously growing—not necessarily through the acquisition model, which is a different model—but growing through their ability to deliver is doing that based on looking at the data, making the right decisions in the market, and expanding. \n\nThis is how you scale an organisation: you use the data to figure out what's next. Evidence-based management just quantifies that and says, you know, just looking at revenue is not a good idea. What about markets we haven't tapped yet? The unrealised value? What about the ability to innovate? Because if we continuously just deliver stuff, at some point we're going to get slower and slower at delivering stuff. If we want to maintain our ability to deliver stuff into production—hopefully the right stuff—and maintain our ability to deliver stuff, we need to be continually making sure that our ability to innovate and our time to market is of a manageable size. \n\nThere's balance in this framework of unrealised value, current value, ability to innovate, and time to market that enables you as an organisation to make better decisions, to focus on the right things for your business to be successful. So forget about the agile piece. Evidence-based management is about how you adapt your organisation to be more successful, how you enable your organisation to deal with the surprises that come along in the market. They could be good surprises or bad surprises, but when things happen, how quickly can your organisation take advantage of that surprise or mitigate the cost of that surprise? \n\nThat ability to adapt is what people are trying to quantify when they talk about agility. So really, evidence-based management is the thing that helps your organisation be successful in the market. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "VMjGC_0pH58",
    "title": "Ethics in Agile",
    "description": "Explore ethical agility with Martin Hinshelwood and Simon Reindl as they reflect on values and actions shaping today's fast-paced professional world. 🌍🔍💼",
    "captions": ""
  },
  {
    "id": "VnSmFq7d7sM",
    "title": "2022-02-04_13-54-21",
    "description": "It seems there are no specific details provided about the video '2022-02-04_13-54-21'. Could you please share more information or context about its content?",
    "captions": ""
  },
  {
    "id": "VOUmfpB-d88",
    "title": "Transforming Training: The Power of Immersive Learning in Scrum",
    "description": "Discover NKD Agility's unique training approach with Martin Hinshelwood, empowering the next generation of Agile practitioners to thrive in complexity.",
    "captions": "So in addition to our mentoring and consulting programs, we also provide training. The purpose of training is to teach those underlying theory and principles with actionable practices that people can use. And that's kind of why I do scrum.org based training, because their philosophy around training is about understanding the core theory and principles. Like, here's the first principles of what it is we're trying to achieve. Then building on top of that, here's the thing, right? So you're learning the thing, and then what are the additional processes and practices, complimentary processes and practices that can be used on top of that to do more, to get the value out of it that people are expecting to get.\n\nAnd one of the main reasons I liked scrum.org was because of that story, because of the community of trainers, the people that it gave me access to, to discuss and collaborate on how do we understand these things, how do we communicate these things, how do we enable them to be as effective as possible within organisations. But the two-day training format that was pre-pandemic was really good for the trainer, right? Because you fly in somewhere, you do two days training, and then you fly out. But not so good for the customer, because if you've got a bunch of people who are struggling to deliver value in your organisation and you spend two days teaching them scrum, where's the rest of that story? If they're still under pressure after that two-day class, then how are they actually able to do anything, to action any of those things? \n\nAnd time goes by, and then they've forgotten most of what it is that they've learned. That's why I think they say only 10% of things you learn in that format actually stick. Right? So you put 20 people through the class, they all remember a different 10% of the course because it's what matters to them or impacts them. They maybe implement 2% of that, so you get a 2% net gain of knowledge from that two-day class. But if we change that format up, this is why we've moved towards the immersive learning format and incorporating it into a bigger mentor program.\n\nEven if that 2% was all that was true, you're then getting 2% compounded over multiple sessions. Right? So rather than having two full days, let's say we did eight half days, right? So we've got eight half days over a longer period of time. And even if we still got that 2% actionable change, we get 2% and then compound it with another 2% and then compound it with another 2% because there's a gap in between and there's an assignment for people to go do inside the organisation. But I believe that that format is a heck of a lot more than remembering just a 10%, because we're only learning a couple of hours' worth of stuff. We're not learning 16 hours' worth of stuff and then you have to try and remember a percentage of that 16 hours. \n\nWe're remembering from that two hours' worth of stuff that we've researched and talked about and collaborated on to understand that teaching part. And then they have to go and try and apply something in that context within their organisation. And yes, everybody's going to learn, still going to learn something different. People are all going to retain different things. But even if it was again just learning the 10%, it's 10% of two hours plus 10% of two hours plus 10% of two hours. So the end percentage for the same learning content is much more powerful, much more effective, like orders of magnitude more effective for organisations. \n\nBecause they get the assignment to go try and do things within their organisation during that time, they've also provided actionable value for the organisation. So think of it like that iterative process in scrum where we do a sprint and then we deliver usable working product. We've got a learning exercise, then at the end of that learning exercise, they go deliver usable working product within the organisation. They just need to figure out what is the use. You know, we give them an assignment, but it can be quite vague, right? We give them lots of different ways to resolve that assignment. They pick something, they try it in the organisation, they've made a change. That change either was successful or it wasn't. It was either able to be implemented or it hit a roadblock. \n\nAnd then when we come back around, we're able to debrief that activity that they did, so they then get feedback and engagement, closing that feedback loop. Right? On how, you know, what did you manage to change? How effective was it in your organisation? What roadblocks do you hit? How do you get past those roadblocks? What have other people tried? And even especially when you put a big group through that within your organisation, you even get cross-pollination and cross-learning because one person or one group within the bigger group says, \"We weren't able to do that because this doesn't work in our organisation.\" And the other group is like, \"Well, actually, we were able to speak to this person and this person and get this to happen, so we were able to do this, which got us halfway there.\" \n\nAnd that cross-pollination and learning is hugely important to that story, and it works great across organisations as well when you have multiple organisations participating. So that's moving towards that immersive format. So we kind of started in the two-day format, we then moved into the four half-day format, then into the eight-week immersive format, and now moving into the kind of more mentor program, maybe over eight to 50 weeks of that program, with sessions and workshops and different things going on. I think this is the game changer for organisations because we're not just giving you the information, we're collaborating and working with you to help you implement it over a longer period of time."
  },
  {
    "id": "vQBYdfLwJ3g",
    "title": "Why is the PSPO a great fit for the 8-week immersive learning experience?",
    "description": "Discover how the PSPO course enhances the 8-week immersive learning experience, blending work and education for mastering product ownership.",
    "captions": ""
  },
  {
    "id": "vubnDXYXiL0",
    "title": "Are there any Scrum courses that teach you how to scale Scrum?",
    "description": "Unlock the secrets to scaling Scrum! 🚀 Join Martin as he shares strategies to overcome challenges and enhance your Scrum journey. Don't miss out! 🌟",
    "captions": ""
  },
  {
    "id": "vWfebO_pwIU",
    "title": "Why Most Scrum Masters only have PSMI!",
    "description": "Uncover why many Scrum Masters stop at PSM I! Explore the passion behind true mastery in Scrum and the journey of continuous learning. 📜🔍",
    "captions": ""
  },
  {
    "id": "vXCIf3eBJfs",
    "title": "How to Choose the Right Agile Coach for Your Business Success",
    "description": "Discover 5 essential tips from Martin Hinshelwood on hiring the right #AgileCoach in this insightful video. Elevate your #Agile journey today!",
    "captions": "When you're considering an agile coach, a really important thing to look at is whether they're agnostic. Do they, are they a one trick pony? Right? Do they only do Scrum? Do they only do Kanban? Do they only do whatever it is that they only do? Or are they able to have conversations around what is the best practice, tool, or technology that will emerge that's right for your business, regardless of what flavour it is?"
  },
  {
    "id": "vY0hXTm-wgk",
    "title": "Professional Scrum Training from naked Agility with Martin Hinshelwood",
    "description": "Join Martin Hinshelwood for professional Scrum training with naked Agility. Experience interactive learning, coaching, and a people-first culture for success!",
    "captions": ""
  },
  {
    "id": "W3cyrYFXDfg",
    "title": "Agile Leadership: Empowering Managers with the Right Skills",
    "description": "Discover why training is essential for managers transitioning to agile leaders in a complex world. Join Martin Hinshelwood for insights on thriving teams!",
    "captions": "[Music] Most managers today are just expected to be leaders as well. They're given no training, no direction; they're just magically supposed to come up with these skills themselves, and that's just not always the case. There are exceptional people that don't need any additional input of knowledge; they're able to go off and find out all of this stuff themselves and put it into effect. \n\nBut most of us benefit from a little bit of a helping hand. So we have the Agile Leadership class, which focuses on a manager transitioning into that servant leadership idea, where they're providing services to the team. They're enabling a team to be effective at the organisation level. So that's somebody who is learning how to delegate, learning how to hire the right people, learning how to connect the people doing the work with the outcomes that we're trying to achieve. All of those things are part of the Professional Agile Leadership class. \n\nBut in addition to that, as a leader, it's important to understand how the changes that we're making in the organisation benefit the overall organisation, increase the effectiveness of the overall organisation. For that, we have the Evidence-Based Management class as well, where we're looking a little bit more deeply into how we measure people, what the impact of those measurements are, and how can we maximise the effectiveness. \n\nAnd how do we measure that? Right, that's effectively what it is: how do we measure that? And so it's very important that we understand all of those things as a leader in an organisation, so that we can make the right choices and know for sure that we're making progress in the right direction. Because we've designed a bunch of measures that are unique to our product or our organisation to help us see whether we're making progress towards the overall outcomes that we're trying to achieve. \n\nMost managers and leaders don't measure those things. They don't have a holistic understanding of where the organisation currently is, where the organisation's currently going, and how we're going to measure that progress towards it. And really, those two things are part of the key focus of both the Professional Agile Leadership class and the Evidence-Based Management class, to help leaders gain additional skills on top of the awesome ones they already have, to help them be as effective within the context of Agile as possible. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "W3H9z28g9R8",
    "title": "7 Harbingers of the Agile Apocalypse. Famine.",
    "description": "Explore how resource scarcity in organisations mirrors the Aztec's Fourth Sun, Nahui-Atl. Discover insights and solutions to combat organisational famine! 🌍💼",
    "captions": ""
  },
  {
    "id": "wa4A_KQ-YGg",
    "title": "What are immersive training courses?",
    "description": "Discover how immersive Scrum training courses can transform your Agile journey and empower your team for success in this insightful video with Martin Hinshelwood.",
    "captions": ""
  },
  {
    "id": "wawnGp8b2q8",
    "title": "If you could distil the PAL e immersive learning experience into 3 major benefits, what are they?",
    "description": "Discover the top 3 benefits of the PAL-E immersive learning experience with Joanna Plaskonka and elevate your Agile leadership skills! #Agile #Scrum",
    "captions": ""
  },
  {
    "id": "WEYf9jWG9wk",
    "title": "Unleash your team's full potential",
    "description": "Unlock your team's potential with NKD Agility! Discover how to achieve engineering excellence through quality code. Visit us now! #Agile #ProductDevelopment",
    "captions": "They went from 25 features to production each year with the same number of people to nearly 150 features to production each year, and even taking four years to get there. Holy moly! I would rather have 800 features than 25 features, right? And yes, the features are smaller, but it's more experiments, right? It's more chances to get something right. It's more ideas to see if they connect with the customer.\n\nSo in the old way, you have to stick with and focus on something even when it's not quite the most optimal thing. But if you're doing lots of little experiments, you can find, \"Oh, this thing resonates really much more than these other things with the customer.\" Let's do more on that until it stops resonating, and then we move on to something else and move on to something else. And we build a better product with more capabilities."
  },
  {
    "id": "wHGw1vmudNA",
    "title": "7 harbingers of the Agile apocalypse. War",
    "description": "Explore how internal 'wars' in organisations mirror Norse Ragnarök, revealing paths to innovation or downfall. Join Martin to navigate these conflicts! 🛡️⚔️",
    "captions": ""
  },
  {
    "id": "whKX9Mn1eb8",
    "title": "The superpower of quality engineering",
    "description": "Discover how quality engineering can transform your projects into success stories. Unlock your team's potential with agile methodologies! #Agile #QualityEngineering",
    "captions": "This is fundamentally why having high quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value. \n\nSo the concept that we talk about a lot from the perspective of modern software engineering that enables you to push quality, build quality, build security, build these things in from the beginning, build it in rather than testing it in later, is the concept of shift left. \n\nShift left is about moving quality assurance earlier in the development cycle."
  },
  {
    "id": "wHYYfvAGFow",
    "title": "What is Taylorism and how did it influence project management?",
    "description": "Discover how Taylorism revolutionised project management, shaping work dynamics from the Industrial Revolution to today's people-centric approaches. 📈🕰️",
    "captions": ""
  },
  {
    "id": "wiEH7vsfrSE",
    "title": "Why Cost-Cutting During Recessions Is Counterproductive",
    "description": "Discover how to recession-proof your business by investing in people and processes. Learn Kanban strategies to boost effectiveness and thrive, not just survive!",
    "captions": "I always find it interesting when in a recession or potential recession or market instability, right? Whatever your story is in your country, we talk about this idea of cost cutting and organisations divesting themselves of things they believe is waste. Like we've seen Capital One get rid of a lot of agile coaches and scrum masters, and even though they didn't really, because they're still hiring agile coaches and scrum masters, lots of other organisations have kind of done a lot of those cost cutting measures. \n\nActually, they're shooting themselves in the foot. They're absolutely shooting themselves in the foot. They're disadvantaging themselves in the face of other organisations that don't do that, that do it differently. Probably the best analogy I remember, I have done a little bit of marketing in the distant past or remember from university at least, is that the best time to invest in marketing is when sales are down and the economy is not so great. \n\nBecause the benefits that you reach on the other end are the payday, right? You have to put in the investment, put in the time when everything's booming and everything's going on. You don't need a lot of marketing to do the business that you want to do. When everything sucks, you need to do more to get what's there, right? Because everything sucks and there's not enough to go around. \n\nSo those that invest in sales and marketing during a recession are the ones that are more likely to be successful coming at the other end. The same is true for agile and let's call it business agility rather than the big A word, whatever we want to call it. I want businesses to be able to effectively take advantage of market opportunities when they arise, right? \n\nAll businesses exist in a volatile market. There are very few non-volatile markets. Today, there are very few non-volatile markets. Maybe diamonds, I don't know, that's maybe a non-volatile market. I don't know much about it, but it feels non-volatile. But all of the markets that we're all going to exist in, if you're building software and products, I have a good example in oil. \n\nOil and gas, if you're in that volatile market, when things start to suck, that's the time you should be investing in your efficiency, your productivity, and your effectiveness, right? Those are the times when you should be investing in those things. Because part of it is you get a little bit of breathing room, right? Because if there's not a lot going on in the market, like the market starting to stagnate a little bit, then you've not got that clamouring for new features, and it gives you time to get your house in order, to reorganise, re-evaluate what's going on. \n\nBut we tend to focus purely on the numbers, right? Because a lot of organisations have shareholders, and shareholders want their cash. So we can either not pay the shareholders this quarter and reinvest in our company and our people and our organisation, or we can fire 500 people and give the shareholders this higher yield than they were expecting, right? And lots of organisations opt for that second one, and that is shooting yourself in the foot. \n\nThat is revenue extraction over value creation. We want to be focusing on value creation because long-term value creation is what builds an effective business. It's how your business was built in the first place. So we want to be focusing during a recession on effectiveness, productivity, and all those lovely goodies. \n\nSo in the boom times, we tried all the things, right? Anything that came along, \"Oh, we've got cash for it, let's do that.\" \"Oh, we've got cash for this, let's do that,\" right? Because we've got a lot of cash. We're affluent. When we start moving into the opposite of boom, bust, I guess, when that bubble pops or deflates, right? It could just be deflating a little bit. \n\nThen we need to focus on our own effectiveness. If we can become more effective, we can do more with what we've got, and that means that we'll be the ones in the market innovating and adapting to the changing market more effectively. Does that make sense? If we start firing lots of people, we're going to have an unhappy workforce because people are unhappy when their friends get fired or other people in the company because they get scared. \n\nThen there's fear, and they don't want to do stuff, and they're like, \"Holy crap, what's going on?\" So unhappy, afraid people don't do good work. By having those layoffs within your organisation, you've created a culture of fear, maybe unwittingly, and maybe some of it's necessary, right? But you've created that culture of fear, and the people that are in there are not going to be serving the customers' needs as well because they're fearful. \n\nSo then customers are more unhappy with what it is that you're doing, and you get that vicious cycle. Lots of organisations end up in a death spiral at that point, and you just know they're going to disappear. It can be quite difficult to recover from some of those things. \n\nSo what we do when the bubble starts deflating is we start focusing on our effectiveness. How do we ensure that we're able to maximise the amount we're able to deliver? If you think of this, this is my market line, right? Above the line is the market, and then the people that are doing the work are here, and all the way down here is the CEO, who's not really connecting with the market, right? \n\nThe market, the people in your organisation are connected directly to the market. They're the ones that we want to have as effective as possible and dynamically shifting to whatever market opportunities come up. Because the more opportunities we're able to take advantage of within that market space, even in a recession, the less impact it's going to have on our overall business, especially if we're doing lots of small experiments, which can be risky. \n\nBut also, without risk, you don't get the bonus, right? If we're able to adapt to those changing needs as much as possible, as quickly as possible, then we, as a business, are more likely to survive. We're just more likely to survive if we're able to adapt to those changing market needs. \n\nI want to quote Satya Nadella here. I have a little quote up here: \"There cannot be a more important thing for an engineer, for a product team, than to work on the systems that drive our productivity.\" So I would any day of the week trade off features for our own productivity. I want our best engineers to work on our engineering systems so that later on we can come back and build all of the new concepts we want. \n\nThat is the epitome of this idea, right? Although from an engineering perspective, because Satya has an engineering background, right? If we, as a business, have slicker, more effective processes, minimised processes, right? You want to have systems in your business that are based on principles, not rules. \n\nIf you have rules, everybody will follow them, and they don't need to think. If they don't need to think when a market opportunity comes along, they follow the rule, not the market, right? Because they're not thinking. They need to follow the rule. But if we have a system based on principles, then the people within it need to think. \n\nWithin the bounds of those principles, they take advantage of market opportunities as they arise or other opportunities or different ways of doing things in order to be successful. So this idea of boom and bust, of non-recession and recession, is when things are going badly, the thing you want to be investing in is your people and your organisation and your practices and processes and making things more effective. \n\nMore effective is really important. A lot of people in business talk about productivity, and productivity is important, but I think effectiveness is that nuanced version of the word productivity. Because we could be highly productive, we're delivering lots of stuff, but are we delivering the right stuff, right? \n\nI know that this is basically me nitpicking the word, right? But effectiveness includes, are we building enough of the right stuff? These are the types of things that we need to invest in. That doesn't mean that you have to go and invest hundreds of thousands in scrum training or Kanban training or coaches or scrum masters or any of those things. \n\nYou want to figure out for your business in your market, right? Because remember, you were in that volatile market. What help and support do the people that are interacting with the market need in order to become more effective? Now, sometimes that is going to be training, right? Do they understand the theory and principles behind this? \n\nWe think this might help those teams. Let's train them in this. We're not going to make them do that, right? For example, let's take scrum as an example. We're not going to make them do scrum. We want the people that are doing the work, that are engaging with the volatile markets, to choose to be able to choose the best approach based on the principles that we base our organisation on. \n\nSo in order for them to choose the best approach, best within the context, right? Most effective within the context, they need to have the knowledge and skills and understanding necessary to be able to make those decisions. So this is where actually you also don't go and hire one of the big consulting companies to come in and do it for you, right? \n\nYou could hire a Boston Consulting Group or McKinsey to come in and say, \"This is how you're going to do everything.\" But the people in the system didn't learn. The way humans learn is by doing. We learn more by doing than by just talking about it. So in order to learn what works and what doesn't and how much it works and how much it doesn't, we need to actually do and try the things. \n\nSo you need the people within your system, right? That's the people that work for you in your company. This is your people. They need to be the ones that do the work. They need to be the ones that learn, that become the practitioners that understand those processes, practices, tools, principles, theories, right? \n\nSo the theory of constraints, you might be talking about scrum theory, you might be talking about first principles for all of these things. They need to be the ones that understand it so that they're able, within any context, to make the best decision possible, right? To make the best choices possible within the system of principles that we build around our organisational structure. \n\nThat means that you're probably going to be doing a lot of training. You're probably going to be bringing in experts on specific topics to help engage with people inside the organisation. But generally, you probably don't want to be doing that wholesale, right? Because what's right for one part of the organisation might not be right for another part of the organisation. \n\nSo what I think is an effective way is to let the people that are doing the work decide who and what they need. I work with a company in Spain. There are kind of two sister companies that are kind of the same but different. They give every single one of their employees a budget for training and consulting, right? \n\nSo every employee, I can't remember how much it was, let's say it's €5,000. Every employee has €5,000. So if you've got a team of five people, that's €25,000 to spend on training and consulting. It's their budget. They can spend it how they like. They can get together and bring in some kind of coach. They can get together and bring in maybe they want a scrum master for a little while or somebody specific, right? \n\nLike you want somebody who focuses on sprint goals and value, and there's people out there that focus on engineering practices and DevOps, right? So you could bring in an expert for a period of time to participate with the team, and it comes out of their budget. They're the ones making the decision, and that means that because they're making the decision, they care about what that person they've chosen to bring in has to say. \n\nThis is the whole thing of other people don't care about your goals, right? They care about their goals. So the way you enable more effective organisations is either you make their goals your goals, or they make your goals their goals, right? So we all have to be going in the same direction. What is it we're trying to do? \n\nPrinciples and goals, strategic goals, intermediate strategic goals, those are the things that help us move together in the same direction as a distinct company. When we put all of that together, we're then able to be more effective. We're able to deliver more value. We're able to adapt as needed to the changing circumstances, right? \n\nSo as a team or group inside of your organisation decides they need some help with something, they can just bring that help in. It's not hard. There's not a bunch of procurement hoops, none of that crap, right? That just gets in the way. They're able to just bring in those people, get them to help them with that story, make it a little bit better. \n\nWhat's the next problem we've got, right? We need this other person to come in and help with this little bit, make them a little bit awesome, right? What's next? We maybe don't know what's next. Maybe we bring in a generic expert who's able to say, \"Oh, maybe you should try this, this, and this.\" \"Oh, that's a good idea, let's try that.\" \n\nThey're able to do all of those experiments, build that story of effectiveness that works best for them, and each area within your organisation is able to do that. Concentric circles, all interacting with the market. \n\nSo ultimately, it doesn't matter whether you're in boom or bust. This is how you want to focus on maximising your chances of weathering that storm. All markets deal in surprise. It doesn't matter what markets you're in, there are going to be surprises. A recession is just another type of surprise. How effective is your organisation at dealing with those surprises?"
  },
  {
    "id": "WIVDWzps4aY",
    "title": "Favourite scrum course to teach and why?",
    "description": "Join Martin Hinshelwood as he shares his favourite scrum course and its impact on teaching. Discover the power of agile with Naked Agility! #scrum #agile #shorts",
    "captions": ""
  },
  {
    "id": "wjYFdWaWfOA",
    "title": "What is a scrum master? Why are they essential?",
    "description": "Discover the vital role of a Scrum Master in Agile leadership! Learn how they enhance team efficiency and drive value delivery in this insightful video. 🚀",
    "captions": ""
  },
  {
    "id": "Wk0no7MB0AM",
    "title": "War! 7 Harbingers agile apocalypse. But shorter!",
    "description": "Discover how to de-escalate team conflict and foster collaboration in Agile environments. Learn valuable tips for creating a positive workplace! ⚔️✌️",
    "captions": ""
  },
  {
    "id": "wLJAMvwR6qI",
    "title": "PPDV learning outcomes with Dr Joanna Plaskonka",
    "description": "Discover key learning outcomes from the PPDV course with Dr Joanna Plaskonka. Enhance your skills in product discovery and validation today!",
    "captions": "In our new class, we will learn how to work with assumptions. So first, a very important point: we actually introduce assumption to our product development dictionary. One of the very important points we will learn is this moment of realisation: oh, we have made assumptions, and not one, not two, but many. \n\nSo what kind of assumptions are we making when developing products, when discussing potential product futures, when creating product backlog items? This is a very important aspect, but we are not only talking about this fact. Okay, the assumptions were made, but which of them need to be validated? Obviously, not every assumption requires validation. Some of them are more important, less important; there might be a crucial role in ordering our assumptions. So which should be validated first and why? We are going to cover that in this course.\n\nOkay, so first point: assumptions realisation, ordering, and choosing which one to start. The second one, when we work with assumptions, the next important topic is about hypothesis. So we will learn how to create hypotheses and how to test them. In this class, we will pay a lot, a lot of attention to using the right data that will help you verify your hypothesis. \n\nIn fact, we may realise that our product development is actually navigating around some kind of tree of different hypotheses to test. We will also discuss the topic of the importance of desired signal or evidence strength on our product development process. So when we test assumptions, when we talk about hypothesis-driven development, it's important to realise that there will never be 100% confidence. But what is your desired level of confidence? And based on that, how high do you want to be when it comes to confidence? \n\nWe will be talking about experiments that will help us test the hypothesis. So we will learn how to manage costs related to product development based on those experiments that we choose, and this will be aligned with desired signal strength and desired confidence level. \n\nAnother valuable outcome for us is learning how to analyse experiments, how to take what we got out of our experimentation journey, and how to use this data in the decision-making process. So we already talked that learning is important in this class. So think about it as a way of targeted learnings that will help in this decision-making and critical thinking. \n\nThanks to that, we want to avoid toxic love related to our ideas and to what customers told us. Instead, we will be equipped with a certain way of thinking. Maybe for some of us, it will be a new perspective on product development, and thanks to that perspective, we will be learning a lot about what to do, what not to do, and how to use those concepts to be effective in our product development."
  },
  {
    "id": "wNgfCTE7C6M",
    "title": "How does the PSU course help teams make more effective product development decisions?",
    "description": "Discover how the PSU course enhances collaboration between design and engineering, empowering teams to make smarter product development decisions!",
    "captions": ""
  },
  {
    "id": "WpsGLkTXalE",
    "title": "7 signs of the agile apocalypse. Silence",
    "description": "Discover the 7 signs of the #Agile apocalypse! Silence can signal disaster in #Agile. Join Martin Hinshelwood to learn why stillness matters. #shorts",
    "captions": ""
  },
  {
    "id": "WTd-8mOlFfQ",
    "title": "Part 2: Common Mistakes that Scrum Masters Make",
    "description": "Discover common pitfalls for newbie Scrum Masters in part 2 of Martin Hinshelwood's 60-second insights. Elevate your agile journey with Naked Agility! #scrum #agile",
    "captions": ""
  },
  {
    "id": "Wvdh1lJfcLM",
    "title": "Mastering the Migration: Seamlessly Transitioning from TFS to Azure DevOps",
    "description": "Master Azure DevOps migration with expert insights! Discover pitfalls, best practices, and strategies for a seamless transition. Perfect for IT and DevOps teams!",
    "captions": "There's a number of migration services that we offer. They're kind of related as two sets of tools. There's Martin Azure DevOps migration tools, which is on GitHub and available for people to use, but we help people use it. We do it for customers when they don't want to learn it themselves. So that's the more targeted migration tool. I want to move stuff; I want to merge stuff. \n\nSo that's the actual moving individual work items around. That's what I want to do. Then, that's one of our services. The other one is a kind of managed import into Azure DevOps. Microsoft have a tool called the Azure DevOps data migration tool, and that data migration tool takes the whole thing. So you might have, if you're with TFS, I always call on-prem TFS and the server Azure DevOps just to avoid confusion. Right? I know they renamed the server to Azure DevOps, but it's just confusing. \n\nTFS has multiple databases hanging off it, and those databases are the things that you take and put up to Azure DevOps. So if you have 500 projects in one database, you're taking the whole thing, but you can't just take it because there are things you could do to your TFS that are not allowed in Azure DevOps. There are things that could have happened over the years to your TFS that are not allowed in Azure DevOps. \n\nI think I'm going to double down on things you could have changed in TFS that you're not allowed to do in Azure DevOps, like increasing the max attachment size, for example. There's loads of them. So Microsoft provide a bunch of tools to validate your environment to make sure it will work before you migrate it up, and it has to meet the validation before it will go to Azure DevOps. \n\nBut how do you do that? You have to get onto the latest version, then you have to run the tools, then you have to fix all of the stuff that it highlights, and then you've got to go. So we provide a managed service for moving your entire on-prem Azure DevOps TFS environment—code repos, builds, everything—up to Azure DevOps. \n\nOr we also provide a service where you want to move pieces of things within that context around and consolidate and change process templates. You know, we want to move from Scrum to Agile, or our bespoke one to Agile, or our Scrum one to our bespoke one. All of those, if you want to do things piecemeal, we can help with that. If you want to do the whole thing, we help you manage that process up to the cloud."
  },
  {
    "id": "WVNiLx3QHLg",
    "title": "Why I love heirarchies of competence",
    "description": "Discover why Martin Hinshelwood champions hierarchies of competence over control, empowering teams to solve problems and drive success. #Agile #Scrum",
    "captions": ""
  },
  {
    "id": "X2WJzWV_GiI",
    "title": "Free Workshop 1 - Introduction to Agility and Building Awesome Teams",
    "description": "Join our free workshop to explore agility, team building, and insights on Cynefin. Discover strategies for creating awesome teams and enhancing collaboration!",
    "captions": ""
  },
  {
    "id": "X4QzM00onL4",
    "title": "Chaos - 7 Harbingers agile apocalypse. But shorter!",
    "description": "Discover why chaos threatens agile success! Martin Hinshelwood reveals the pitfalls of chaos in software development. Watch now!",
    "captions": ""
  },
  {
    "id": "x6a_BuQq580",
    "title": "DevOps Migration. Incomplete Migrations",
    "description": "Master Azure DevOps migrations! Learn to tackle incomplete migrations and data loss fears with expert tips for a seamless transition to the cloud.",
    "captions": "There's a little bit of a fear of incomplete migrations, that things won't be available when you move to the cloud. I've done hundreds of migrations using Microsoft's database import tool, and I have never had any data loss in any context whatsoever that wasn't known about beforehand. There are certain things that don't work in the cloud that you can do on-prem. You can increase the database attachment size on-prem, and that will unfortunately not be possible in the cloud, right? Because there are other people on the system; it's not just your company, so you're not the only ones taking the hit for performance issues for having attachments that are too big or build lists that are bigger than normal.\n\nSo there are some things, but upfront when you're planning the migration, we need to call those things out. We need to cut them down; we need to figure out how to resolve those things. Microsoft provides tooling to help understand what those things are, what the impact is, and what we need to do in order to make our environment viable for moving up to Azure DevOps. \n\nSo there's not really any such thing as an incomplete migration within that context; it will just work. I've had migrations get stuck, and then we have to back off, restore, and turn back on. That's how you restore; you turn it back on, turn back on TFS locally, and then replan something because something's gone wrong or something needs to be done on Microsoft's end. But usually, especially if it's a bigger migration, you talk to Microsoft first, and they have a support team available who know you're doing a migration. You can email them, and they'll go kick the environment or figure out what the problem is at the time so that you can continue.\n\nSo, incomplete migrations from that perspective are not a big deal. If you're doing an ad hoc PC email migration, like you're moving the bits and pieces that you want to move, like would you just want to move this team or this subset of this team or this project or just this data, then we will know upfront exactly what you can and cannot do within the context of that migration. But it's not something we can define at this point because it's wholly dependent upon your data, the format of your data, what you want to move, what you're okay with losing, and having conversations around that. So you'll know upfront. \n\nSo when it gets to migration time, there shouldn't be any surprises at all."
  },
  {
    "id": "Xa_e2EnLEV4",
    "title": "3 best ways to wreck Kanban. Sweep problems under the rug.",
    "description": "Discover the top 3 pitfalls that sabotage Kanban adoption. Learn why ignoring problems can derail your team's success and how to confront them effectively!",
    "captions": "One of the most common behaviours that will greatly impact on your ability to be successful, um, at any process, but specifically having a CAD strategy, is sweeping your problems under the rug. Um, so that's a most teams will not necessarily nefariously but hide or ignore their problems. That's why when we talk about retrospectives, we talk about, uh, H, um, reflection, we talk about Kaizen as a phrase, are we hiding or ignoring anything, right? That's something to actively look at. And it's because we, we as humans are really, really good at ignoring stuff that maybe we feel like it's too much effort. Maybe we feel like we can't do anything about it.\n\nI remember, um, a time, uh, living in a flat with my brother in the West End of Glasgow, and, um, we never cleaned the grill because nobody wanted to do it. We effectively swept that work under the rug and went, \"I don't, I don't really know how to do that,\" right? I mean, that's, I've got to go figure out. This was before YouTube, right? I got to go figure out how to clean this. Perhaps I have to phone my mum and ask her, right? How do I, how do I do this? Um, what's the best way to approach it? What level of detail do I need in how to do that? So both of us ignored it completely, and we used it all the time. \n\nSo what do you think happened? Eventually, what do you think happened? Eventually, yeah, you're right, it caught fire. It caught fire, and we had a fire in the kitchen. We didn't have a fire extinguisher because we also swept that under the rug and didn't do that. At one point, my brother had grabbed a pan full of water and was about to throw it into the grill, and then he realised, \"No, like, it's not a good idea to throw water on a fat fire,\" right? If you've ever seen those adverts on TV, it just explodes. You don't want to throw water on a fat fire. \n\nUh, so we stopped, called the fire brigade. The fire brigade arrived, they came up with a fire extinguisher and went, \"Done,\" right? But we needed to clean the grill. That was our trigger to go do that and then to continue to do it regularly. I actually don't remember. We were teenagers. I don't remember if we actually continued to do it regularly or we just did it once and then maybe then wherever that cooker ended up, somebody else will need to do it. But you've got to do the things, otherwise this cruft builds up, right? \n\nAnd that cruft could be dirt, it could be fat, it could be clogging up the system. It can be just getting in the way, making things a little bit more difficult. It could take the guise of bureaucratic processes in your organisation. It could take the guise of technical debt in your product. It could just be purely architected, purely designed stuff that you've created, and nobody goes back, uh, to resolve those things. Just sweeping problems under the rug and ignoring them. \n\nYou know that in every cartoon, they have that moment where they're cleaning up a kid's room and they just open the cupboard, shove everything in, and then close the cupboard really quickly. And then at some point, the cupboard door pops open and all the stuff falls out again. That's what we're trying to avoid. That's why we need discipline to not sweep things under the rug, to do something about it. We need courage when things might be a little bit more difficult to deal with. \n\nA CAD strategy is not going to be effective if you or your team sweep things under the rug. Have the discipline and courage to implement a CAD strategy fully. If you're struggling to implement a CAD strategy, we can help or help you find somebody who can. Click on the link below to get in touch."
  },
  {
    "id": "xaIDtZcoVXE",
    "title": "How Do You Know How Long It Takes to Deliver Value?",
    "description": "Unlock the power of Evidence-Based Management! Discover 5 reasons why EBM is essential for enhancing your Time to Market and driving business success. #EBM #Shorts",
    "captions": "How do you know how long it takes you to deliver value? Evidence-based management has a key value area called time to market, where you would choose metrics that enable you to understand your organisational capability in this space. You might look at things like lead time, cycle time, time to pivot, time to learn, time to fix. These are all things that will help you understand how long it takes you to deliver value."
  },
  {
    "id": "xaLNCbr9o3Y",
    "title": "Ep 003 - Daniel Vacanti on live online PSK in Edinburgh",
    "description": "Join Daniel Vacanti for a live chat about the Professional Scrum with Kanban course in Edinburgh on 18th May 2020. Get insights and ask your questions!",
    "captions": ""
  },
  {
    "id": "XCwb2-h8pZg",
    "title": "Kanban with Team Foundation Service",
    "description": "Discover how to effectively implement Kanban using Team Foundation Service to enhance your team's workflow and boost productivity.",
    "captions": ""
  },
  {
    "id": "XdzGxK1Yzyc",
    "title": "What is a product owner?    Why are they essential?",
    "description": "Discover the vital role of a Product Owner in Agile and Scrum, from strategic leadership to market insights. Elevate your understanding today!",
    "captions": ""
  },
  {
    "id": "XEtys2DOkKU",
    "title": "Considerations for your Azure DevOps migration. Excerpt 1",
    "description": "Explore key compromises to consider for your Azure DevOps migration in this insightful excerpt. Watch the full video on our channel! #agile #devops",
    "captions": "Microsoft actually provide a tool that you run against your database that will tell you almost all of the things that are going to be wrong and how to fix them. So it's a case of just working through all of those stories. \n\nUm, so there's some customizations that aren't going to work in the cloud. There's quite a few custom field setups or backend customizations that are not going to be able to work because you have no access to the back end. Those would need to be rewritten, but luckily they can be rewritten prior to the migration."
  },
  {
    "id": "XF-yQmPdUME",
    "title": "Product Ownership vs. Product Management: Busting the Myth That They're Separate Roles",
    "description": "Unlock the secrets of the Product Owner's role in Scrum! Discover how they maximise value and drive Agile success. Watch now for key insights! 🚀",
    "captions": "So effective product ownership focuses on product management. There's a kind of misconception that we're in some way replacing product management with product ownership or that they're different things. Right? They're absolutely not; they're exactly the same thing. \n\nThis is where product ownership, within the context of Scrum, comes in. I definitely want to disambiguate between when I'm talking about the product owner. I'm talking about the product owner as defined within the context of Scrum and the Scrum guides, not the job title or role that your organisation has created and added other baggage that is nothing to do with those things. \n\nYou might have a product owner within your organisation, and it says in the job description, \"also responsible for writing reports for management,\" \"also responsible for managing the product,\" or \"the project,\" right? Or other stuff that is not what I'm talking about. The product owner is an accountability within the context of Scrum. That's it. It defines that the product owner needs to be somebody that the organisation respects and that is accountable for the maximisation of value delivered from the work of the Scrum team. \n\nThat's the product owner. The product owner's job title is not \"product owner.\" That's a made-up organisational misunderstanding of moving towards Scrum. There shouldn't be job titles in your organisation that are \"product owner\" or \"Scrum Master.\" Those should not exist. \n\nYou're in product management. If we take product management as a big wrapper of all of the things that need to be done in order to manage a product, we're shifting the focus of that from a long-term, maybe we do a two-yearly delivery cycle, towards a very short delivery cycle. If we're doing Scrum, there are some accountabilities that Scrum brings for those people that are doing product management. \n\nOne could say that the product owner is an aspect of existing product management that probably should always have been there in the first place but maybe wasn't necessarily quantified enough to make it a viable thing. In the past, organisations have been able to skate by without having that clear vision, goal, and value focus. \n\nOrganisations were able to skate by; perhaps they had deep coffers built up from some product that didn't have any competitors that they made, and now we have lots of money, so we actually, you know, we don't need to maximise; we just need to get by. Or for other reasons, right? But as we move towards that shorter iterative cycle, it becomes more important to focus on value and less important to focus on more stuff. \n\nWe're not maximising productivity; we're not maximising the number of items we deliver per timeframe. We kind of are, but we're not trying to deliver more stuff; we're trying to deliver more valuable stuff. In order to deliver more valuable stuff rather than just more stuff, we need to understand what value is. To understand what value is, we need to understand what direction the organisation's going, and that's the foundation of product management. \n\nProduct ownership is an accountability in Scrum. I think I've said this before: Scrum is like a mirror. The mirror just reflects what you're doing and says, \"Why can't you do this thing that we think you should need?\" So the accountability of the product owner being maximising the value of the work done by the Scrum team—why can't you do that? What's inhibiting your ability to do that? That's why the product owner accountability exists. \n\nIt's not a job title; it's not a job role; it's an accountability that forces product management to reflect on why they can't manage the product in this new context. Because we're moving from those long-term deliveries towards shorter and shorter deliveries for all products across all industries. Part of the reason for that is we want to take advantage of opportunities in the market and deal with surprises that come from the market, right? Our environment or our business. \n\nIn order to take advantage of them, we need to do so more quickly than a competitor can come along and take advantage of them, or a new business can start up and take advantage of them. Otherwise, we're too late to the party. So in order to do that, we need to move faster. What is the amount of time that your business needs to go around that cycle of re-evaluating what we're doing? That's the cycle you need to be on. \n\nHow quickly does your market change? Most of us don't exist in static markets; we exist in volatile markets that are always changing. The niches that our organisation has grown to fit are growing and contracting on a regular basis. If they're growing and contracting on a regular basis and you're in one niche, you're going to feel that pain on that cycle. \n\nThat's something that sometimes my business suffers from, where you've got that cycle of organisations having their flesh with cash, so they're looking to train people and increase skills, so our training business goes up. Then you have an economic downturn, and our training business drops. That's the ebb and flow of any one business. \n\nSo how do you mitigate that? Well, as a product owner or product manager, you need to be thinking about how do we open out new markets? All of the ebbs and flows of those different markets operate on different cycles so that we maintain our ability to operate as a business without loss by divesting our interests into lots of different areas. \n\nProduct management at a big organisational level is thinking about how do we get into new markets? How do we get those new stories in? The product owner's accountability is just to maximise the value of the work done by the team. So if we're going to have a bunch of teams, we should maximise the value of the work that they're actually doing. \n\nIn doing that, maximising the value return on investment that we get from the work that we do, we should be able to adapt to those changing needs in the market, do the product management thing. Product management includes portfolio; that's part of it. Scrum is part of it because it's managing the work done by the Scrum team. \n\nThat's part of that story, creating little social technology that allows you to manage that, but it's within that wider context. The idea is that we have a holistic approach to product management, of which the product owner is just an accountability, a part of that story. We need to create a shared understanding with vision, goals, and value for the direction that we're going so that all of these self-organising teams can work together towards that common goal. \n\nThat's how we achieve that common goal. We're using shorter iterations, particularly Scrum in this context, if we're talking about the product owner, for frequent product validation through inspection and adaptation. Scrum is founded on empiricism. We need to have regular tests to validate our hypothesis that a feature is going to advance value. \n\nThat is why saying that product ownership—how does product ownership build on the foundation of agile product management—is kind of like the reverse of the story. It's actually how does product ownership enable product management to maximise the value that we're trying to create."
  },
  {
    "id": "XF95kabzSeY",
    "title": " shorts 5 things you would teach a productowner apprentice. Part 2",
    "description": "Join Martin Hinshelwood in Part 2 as he shares 5 essential lessons for aspiring product owners. Elevate your skills in agile and scrum! #shorts",
    "captions": ""
  },
  {
    "id": "XFN4iXYLE3U",
    "title": "Why Limiting Work in Progress is Key to Success in Kanban",
    "description": "Discover how limiting work in progress (WIP) can transform your Kanban approach, boost productivity, and enhance focus in this insightful video!",
    "captions": "If you're doing Caman and you aren't limiting your work, guess what? You're not doing Caman. It is a crucial element to controlling your work in process, to understanding what's going on when in your system, and enabling you to see what's going on. Limiting work allows you to see when you have constraints in the system. \n\nUm, it enables you to allow people to focus on what's necessary to deliver the value, and it's really, really important to delivering high-quality, usable products because you have to maintain that flow of work through the system that's working at a sustainable pace. Limiting work in process is absolutely crucial to having a Caman board."
  },
  {
    "id": "xGuuZ5l6fCo",
    "title": "Empowering Agile Teams: The Critical Role of User Feedback in Requirement Changes",
    "description": "Unlock your team's potential! Discover how to empower agile responses to user feedback and enhance your organisation's adaptability in this insightful video.",
    "captions": ""
  },
  {
    "id": "XhPHa1RXrWo",
    "title": "Agile is Not New: A Journey Back to the Basics",
    "description": "Explore Agile's rich history and its evolution in this insightful video by Martin Hinshelwood, revealing how to reclaim its true value in modern business. 🌍💡",
    "captions": "Agile is not a new thing by any means. One could absolutely argue that it is a very old thing. Prior to the Industrial Revolution, although it's not totally to do with that, things were done in small, Mom and Pop shops all over the world. Your local cobbler made your shoes, and your local cobbler understood fundamentally your needs as an individual because they knew who you were. They knew your life story, and they created goods just for you. As we scaled up, we lost that human connection between things, and a lot of people blame Frederick Winslow Taylor. He’s not strictly at fault; it wasn't his intent to dehumanise the work environment. It was just the outcome of the practices that he pushed and how they were interpreted.\n\nAgile is a thing that has always been true for most of human existence. The way you get stuff done is you figure it out. If you don't know how to do something, you go try some stuff and figure out what works best and what doesn't. Ultimately, it's an evolutionary story because the people in the world that were able to do things better perhaps survived, and those that were not able to do it did not. Those that adapted to farming and new farm equipment and were able to increase the yield of the crop prospered. Those that weren't able to do that or couldn't figure it out did not. That's fundamentally how evolutionary theory works and how humans interact with the world around us. If we're successful, we do well at something; if we don't do well, we're not.\n\nSo, agile's not a new thing, but even as far back as the late 1900s, they were talking about harnessing the social aspects of work in order to maximise our ability to deliver value. If you want to look up some of the theory and stories around that, it's Maryanne Fetter you want to be looking up. She was a contemporary and perhaps a little bit in opposition to Frederick Winslow Taylor at the time, and her work was largely lost by the 1930s. However, there was really a resurgence of this idea. The thing with good ideas is they'll keep coming back even if we forget them.\n\nIn the '90s, XP came along in the software world because it was very obvious that it wasn't working. We weren't able to successfully and repeatedly build high-quality, valuable products without copious amounts of waste. We had lots of unhappy people. I think Ken Schwaber talks about it as \"hateful work.\" We hated the companies we worked for; we hated the work that we were doing. The managers hated the work that they were doing. Everybody just hated it because we were dealing with complexity, and everything would always go wrong. When you try to control chaos, much like a lion tamer, you might get eaten. In fact, the likelihood is that you're going to get eaten at some point if you keep trying to do it that way, and that happened in project after project.\n\nWhen I started out in the software industry, right when I graduated university, there was talk of this idea of a \"death march.\" A death march project is a project that every single person on it already understands before we hardly started that it is dead on arrival. It's not going anywhere; it's not going to be successful. We're not going to be able to do this. It's not going to cost what they think it's going to cost; it's not going to be done in that time; it's not going to have the features that they think it's going to have. But we have to do it anyway because that's what we're paid to do, and somebody bean counter higher up in the organisation has made the decision.\n\nThis resurgence culminated in the '90s with XP, which was really the start of the bigger resurgence, although it had been mulling around before that. Then Scrum eventually culminated in the Agile Manifesto in 2001. The manifesto really defined the principles for a new way of working, one that focused on dealing with complexity and the unknown with empathy and with connection to people, bringing that social aspect that Maryanne Fetter wrote about nearly 100 years before.\n\nHowever, it was predicated on competence. There was an assumption of the inherent craftsmanship and competence of the participants that we were going to build on. However, the demand, especially when I graduated university in 2000 and started my first job in 2001, for engineers, product managers, and leaders that had both the competence and understood this new way of working far outstripped the supply in the market. It still does. Part of the reason it still does is that we didn't focus on the competence of who we needed to do these things to make these changes and fundamentally support them from a leadership perspective, from an engineering perspective, and from our goals and discovery.\n\nBecause we didn't focus on that level of competence, it's largely starting to fall apart. That realisation is not quite like the dot-com bubble bursting; that was a money thing. This is a competence thing. Of the hundreds of thousands of people that are currently in roles where they're expected to either participate in craft or oversee, the level of competence is a tiny percentage of people in that space. It's starting to show in organisations where they are looking for what they are getting for their money because we're paying perhaps a lot of high-price salaries for engineers, product managers, and leadership. We're not getting the return on investment that we're expecting, and we need to get the return on investment; otherwise, it's not worth spending that money. That's how business functions in our world.\n\nIf we can't justify the cost, we're going to have to get rid of the thing that's costing us, and at the moment, it looks like it's not the engineers and not the product managers, but it's the leaders, the Scrum Masters, the coaches—those folks that just don't necessarily have the level of competence that's demanded to fulfil the role and be successful. They may have had enough to convince the people that were hiring them that didn't necessarily understand what they needed, but as it turns out, they couldn't do it.\n\nIt's systemic at the moment, and that's what we're seeing in the industry. There's a wide-ranging general reset of our understanding of what these competencies are, and most people are coming up lacking. That's kind of what we intended to do when we were originally talking about agile back in 2001. The outcome has not been that; it's been a commercialised, watered-down lip service-based result, and that's where we're at right now."
  },
  {
    "id": "xJsuDbsFzlw",
    "title": "What is the sprint planning workshop and how will it help organizations?",
    "description": "Discover how Sprint Planning workshops from NKD Agility can empower your Scrum team for success and enhance project outcomes. #Agile #Scrum",
    "captions": ""
  },
  {
    "id": "xk11NhTA_V8",
    "title": "Judgement! 7 Harbingers agile apocalypse. But shorter!",
    "description": "Discover how informed judgement shapes your agile journey! Join Martin Hinshelwood as he uncovers the pitfalls of poor decision-making.",
    "captions": ""
  },
  {
    "id": "XKmWMXagVgQ",
    "title": "The Power of Continuous Learning for Product Owners",
    "description": "Unlock your potential as a product owner! Discover the power of continuous learning and stay ahead in the ever-evolving world of product management. 🚀",
    "captions": "If there was one thing that new product owners should know above all the other things that we've talked about, that's that they need to focus on continuous learning. They need to be looking at what's happening in the industry, what's happening in the market, what are the new tools and techniques that are available. It doesn't mean you're going to use them; there's always a little bit of a danger of the cult of the new, right? Well, we're using it because it's new, but you need to understand all of the different tools and techniques that are available to you, at least enough to know what thing you might choose for a particular circumstance so you can have a goal. The more tools you have in the toolbox, the better.\n\nThere's a great blog post that I read years ago. It was focused on developers, coders, but the theory applies just the same, and it started with the phrase, \"If you're reading this, you're already in the top 10%.\" And that's because there's only a small number of people that actually focus on continuous learning, that actually try new things all the time, that are actually reading up on different techniques and different topics. They don't have to be new; they can just be new to you. They can be older things that you're going and figuring out. \"Crossing the Chasm\" was written in the '80s, right? What are the things that you're reading? How do you enable yourself to be in the top 10%? Because that's how you maximise your chances of getting the best gigs, right? You need to be in the top 10%. And if all you need to do to do that is read some blog posts every week, maybe a couple of books a month, that's not a high bar to get into that top 10%. And then you'll be the one with people knocking at your door trying to figure out how to get you to be their product owner.\n\nSo, as a new product owner, read voraciously. Read blog posts, watch videos on YouTube, follow on LinkedIn the other product owners out there that you'll be able to find. Product owners and product managers, what are they talking about? What are they into? What are they teaching you? Learn about evidence-based management, hypothesis-driven engineering, OKRs, all of those marketing things around A/B testing, Mechanical Turk, different tools you can use to enable you to have the information you need to make the best decisions you can around maximising the value of the work done by your Scrum team, or if you have multiple Scrum teams, by all of those Scrum teams. What is it that you're going to do to maximise the value? Continuous learning is the key to that.\n\nWe can help you. We have a bunch of Scrum classes at Scrum.org. We have the Professional Scrum Product Owner, Advanced Product Owner if you want to dive a little bit deeper. But on the side of that, you've also got the Professional Scrum with Kanban, bringing in those flow mechanics and flow stories, Professional Scrum with UX, which is focused on the Lean UX. Go read the Lean UX book if you want to understand what that is. These tools and techniques, along with many others that you can learn online, that we can certainly point you to, are the things that are going to differentiate you from all the other product owners out there.\n\nYou need to focus on continuous learning. If you find it hard to focus on continuous learning, if you don't know where to look or what to do, then my team at Naked Agility can help you or point you in the right direction to find the help you do need. Don't let the plethora of misinformation out there get in your way. We can help you filter all of that nasty stuff and get to the nuggets of gold that will help you stand out as a product owner. Use the links in the description to get in touch, and let us help you."
  },
  {
    "id": "xLUsgKWzkUM",
    "title": "Why is training such a critical element in a productowner journey",
    "description": "Discover why training is vital for product owners! Join Martin Hinshelwood as he highlights the importance of skills development in this insightful short.",
    "captions": "Product owner is accountable for spending the money right. A product owner is accountable for that. Even if, as a product owner, you only have control over ordering that product backlog, right? Maybe you can't even delete stuff from the product backlog. Maybe you can't add new stuff that you come up with yourself, but you're just ordering that product backlog. Then you're controlling the budget. You're deciding when we deliver each piece of functionality. Um, and that’s really powerful."
  },
  {
    "id": "XMLdLH6f4N8",
    "title": "nkdAgility Healthgrades Interview Katherine Maddox",
    "description": "Join Katherine Maddox, Healthgrades' lead Scrum Master, as she discusses the vital role of trainers in shaping organisational culture for over 150 learners.",
    "captions": ""
  },
  {
    "id": "xo4jMxupIM0",
    "title": "What makes the PSM immersive learning experience so unique",
    "description": "Discover the power of PSM immersive learning! Martin Hinshelwood reveals how it elevates Scrum Masters to new heights in just two days.",
    "captions": ""
  },
  {
    "id": "XOaAKJpfHIo",
    "title": "How important is DevOps in continuous delivery of value to customers?",
    "description": "Discover why DevOps is crucial for agile coaches in delivering continuous value to customers. Join Martin Hinshelwood for key insights!",
    "captions": ""
  },
  {
    "id": "xOcL_hqf1SM",
    "title": "What 5 things must you achieve before you call yourself an agilecoach. Part 3",
    "description": "Discover the third essential achievement for aspiring #AgileCoaches with Martin Hinshelwood. Elevate your skills and empower teams to thrive!",
    "captions": ""
  },
  {
    "id": "Xs-gf093GbI",
    "title": "What is a product vision, and why does it matter?",
    "description": "Discover the power of a strong product vision! Join Martin Hinshelwood as he explores its importance in agile and scrum for successful product development.",
    "captions": ""
  },
  {
    "id": "xuNNZnCNVWs",
    "title": "1 critical skill for a scrum master and why?",
    "description": "Discover the one essential skill every Scrum Master must master for success in Agile! Join Martin Hinshelwood in this quick #YouTubeShorts.",
    "captions": ""
  },
  {
    "id": "XZ1Swam_Cx0",
    "title": "Antichrist! 7 Harbingers agile apocalypse. But shorter!",
    "description": "Uncover the Agile \"Antichrist\" and the signs of the Agile-pocalypse! Learn to spot fake agilists and keep your Agile journey authentic. 🌪️🚀",
    "captions": ""
  },
  {
    "id": "XZip9ZcLyDs",
    "title": "Why is becoming a Scrum Master a great career option?",
    "description": "Unlock your leadership potential! Discover why becoming a Scrum Master is a transformative career move for aspiring leaders in this insightful video. 🌟🚀",
    "captions": ""
  },
  {
    "id": "XZVixdVy-PQ",
    "title": "Redefining Agile’s Core: Beyond Rituals and Procedures",
    "description": "Discover the true essence of Agile with Ken Schwaber! Learn how to innovate software development beyond rituals for better results. 🌟",
    "captions": "So there's a quote from Ken Schwaber: \"Agile is not about rituals; it's about developing software in a different way.\" I would broaden it out first and say, \"Agile is not about rituals; it's about developing products in a different way.\" It's broadening that out in organisations. The goal is not agility; the goal is not the rituals, right? They're part of the system, but they're not the thing you're trying to achieve.\n\nMost organisations seem to measure success in adopting Agile as, \"Is everybody doing a daily scrum? Does everybody have a Sprint review?\" And those things, those measures, the behavioural outcome from those measures is that you end up with zombie scrum or mechanical scrum, right? Or mechanical processes. People are following the processes because they're told to follow the processes, not because they believe that they are the right processes to follow in order to get the outcomes that the business needs. And that's where the failure is. Why are people just following the rules? Why don't they believe in the rules? Because if they believe in the rules, they'll perhaps make better decisions, right? If they believe that this is the way we need to do things, they'll figure out better and more effective ways to do things.\n\nAnd this is actually why it's really hard when you purchase large-scale, sweeping software systems that take care of, like, let's say your entire procurement pipeline is now fully automated. But now you're stuck in that automation; you're stuck in the rituals that that automation has created. And that's the difference between how we've implemented the Toyota Way in the West and how Toyota implemented it. Toyota didn't have a fully automated production line; they had lots of pieces of automation for the work that people do, but they had people checks at the end of every one of those pieces of automation because you're building big, complex products. It's a big, complex system, and computers are not actually that great at managing big, complex systems because they only manage what we think of for them to manage, right? We have to think of it in order for it to be managed.\n\nSo you end up with stuff built on top as you figure out different edge cases and different scenarios. And it's the same with our policies and procedures in organisations, right? It builds up this organisational or software craft that is all the rules around which it runs. And that's the same as delivering, trying to deploy or install Agile in your organisation. It's not about the rituals; it's about doing things in different ways, right? You want to build software in different ways; you want to build products in different ways; you want to do business in different ways that maximise the return on investment. That's what Agile is all about—doing things in different ways.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "y0dg0Sqs4xw",
    "title": "What is a common mistake made by rookie agile consultants?",
    "description": "Discover rookie mistakes made by agile consultants and learn how to identify the right expert for your team's agile journey in this insightful video!",
    "captions": ""
  },
  {
    "id": "y0yIAIqOv-Q",
    "title": "When should an organisation consider a professional agile consultant?",
    "description": "Discover when to engage an agile consultant for your organisation. Martin Hinshelwood shares insights on navigating the shift to agile product development.",
    "captions": ""
  },
  {
    "id": "y2TObrUi3m0",
    "title": "What should have been way more popular in Agile than it currently is?",
    "description": "Unlock the secret to Agile success! Discover why principles, not just tools, are key to effective practices in this insightful video with Martin. 🌟",
    "captions": ""
  },
  {
    "id": "y3qDih6EM0U",
    "title": "TechCheck Live Virtual PSF for Workday in Dublin on 25th May 2020",
    "description": "Join us for TechCheck's Live Virtual PSF for Workday in Dublin on 25th May 2020, where innovation meets collaboration in the tech industry!",
    "captions": ""
  },
  {
    "id": "Y7Cd1aocMKM",
    "title": "How effective is scrum training via digital delivery?",
    "description": "Discover how digital scrum training transforms learning with engaging tools like LEGO and Minecraft, making agile practices accessible and effective!",
    "captions": ""
  },
  {
    "id": "yCyjGBNaRqI",
    "title": "NKD Agility Mission and Purpose",
    "description": "Discover NKD Agility's mission and purpose with Martin Hinshelwood, as he reveals what drives our passion for Agile practices.",
    "captions": "The purpose of naked agility is to help organisations create great teams. It's something that I've... it's plainly obvious when you say it, but if you have unhappy, sad people, you're not going to get good work out of them. You're not going to build great products. I believe that every person deserves to be using great products. We, as customers, we, as users of products, don't deserve bad, shitty products. We don't deserve that. We deserve great products that provide us with a great experience and do great things for us to help us do the things that we need to do. Unhappy, sad teams don't create great products; they create bad, terrible products.\n\nIn order to have happy, engaged people, we need to create those ideas of great teams within our organisation. How do we engage with people? How do we enable them to be the productive story that we're trying to create? In the creative world, in the software world, that means autonomy, mastery, and purpose. Right? Autonomy is we need to be the ones making the decisions. We need to be the ones that are on board, that are engaged in the story. The people doing the work need to be engaged in the story. We certainly need to also be masters of the work that we're doing. We need mastery, we need expertise, we need skills, we need knowledge. We need to be able to be the best that we can be at what it is that we're doing. Lots of organisations suppress that.\n\nWe need purpose. We need to understand what direction we're going and why we're going there, and how the work that we're doing contributes to that story. Otherwise, it doesn't matter what we're working on. Like, why would I care about the product if I don't know what it's for or who it's helping? And if I don't care, what care am I taking in the product, in the work that I'm doing? I'm taking less care because I don't care.\n\nEnabling... you can't just tell people to care, right? You have to enable. You have to create an environment within which the people that are participating, that are working on the software products that you want to create and use and develop, care about what they're doing. They have that autonomy, they have mastery, and they have purpose. And that's how we create great teams that create great products."
  },
  {
    "id": "Ye016yOxvcs",
    "title": "5 critical Skills to master as an Agile Consultant?  Part 1",
    "description": "Master the essentials of agile consulting! Join Martin Hinshelwood in Part 1 of 5 critical skills every agile consultant should master. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "ye1wQic8et0",
    "title": "It's said that you can reduce time to market by up to 50% simply by removing committees. True?",
    "description": "Discover how removing committees can cut your time to market by 50%! Join Martin as he explores the impact of traditional management on agility. 🚀",
    "captions": ""
  },
  {
    "id": "Yesn-VHhQ4k",
    "title": "Why does Agile focus on values and principles rather than a prescribed set of steps?",
    "description": "Discover why Agile prioritises values and principles over rigid steps, enabling teams to navigate complexity and uncertainty effectively.",
    "captions": ""
  },
  {
    "id": "yEu8Fw4JQWM",
    "title": "In WIP, less is more.  Why?",
    "description": "Unlock productivity with 'Less is More' in Agile! Discover how minimalism transforms workflows and boosts efficiency. Watch now! 🚀",
    "captions": ""
  },
  {
    "id": "YGBrayIqm7k",
    "title": "The Synergy Between Product Management and Product Development in Agile Environments",
    "description": "Explore the vital partnership between Agile Product Management and Product Development. Learn how their collaboration drives innovation and market success!",
    "captions": "When we're building products, there are really two main parts of the consideration that we have. We need to think about product management and we need to think about product development. So product management is deciding what we're going to go build. Product development is figuring out how we're going to go do that, and they need to be able to complement each other in a way that we're working together towards a successful working product. But product management leads the product development. The product management sets the direction, the strategy, the goals that we're trying to achieve, the high-level goals, strategic goals, and product development focuses on the actual delivery of those goals and delivery of those outcomes.\n\nNow, that doesn't mean that there's no product management in product development or there's no product development in product management. There's definitely a bleed over between those two topics. They're not a distinct thing that somebody hands over from here to here. They're an integrated story, and I think a good analogy for that is the evidence-based management story that helps, at least it helps me think about not only how they interact with each other, but how they complement each other and how they need each other. Product management and product development need to be successful and working together to be successful.\n\nSo the way evidence-based management breaks this down is you've got two sets of metrics at the top of the diagram, which is market value. So in the context of market value, that's where we're talking about product management. We're focusing on two things: we've got our current value in our product, the stuff that's there that maybe we need to maintain, maybe we need to remove, maybe we need to augment in some way. That's the features and capability that we have in our product right now, and all of those features and capability in our product right now should all work. That working usable product we have increments that work, and our current increment, our current product, is our current value. That's what we've currently got; that's part of our market value.\n\nIf you're not in a consumer-facing world, then think about the market that you deliver to as inside of your business. It doesn't necessarily have to be outside of your business; it doesn't have to be a commercial market. It could be an internal market inside your business. And then the other side of that is the unrealised value, and that's where I think a lot of product management maybe doesn't focus but should focus, in this unrealised value area, which is the stuff that our product could do that it doesn't do yet. The net new functionality that we want to bring in, the net new functionality that we want to bring into the story, is going after new markets, new users. We want more people to be using our product than were using it before because you're always going to have a decline in the people that use your product if the features remain stagnant. Even if you add new capabilities to an existing feature, there's still that tail-off that we're keeping our existing user base happy, and our existing user base is always going to juice over time if we don't do anything.\n\nWe might still be bringing in new customers, but the existing people are going to tail off. That's how I think about it. I think about it a lot like Netflix creating new content. If you have an existing show, the viewership for that show is going to decline over time. It's not new anymore; people that have watched it are not necessarily going to watch it again, although some people do, and it's going to decline over time. That's a little bit more drastic than a product that people use in a business, but the idea is that you're not gaining a lot of new customers. When you do a second season of an existing season, you know the viewership is going to be less in the second season. It's always less. But does it maintain high enough for you to justify the investment?\n\nWhat we really want to be doing is focusing as much as we can, while supporting and maintaining our existing investment in our product, in our story, in our existing customers. We also want to be aggressively going after new markets and new customers. That's product management leading. Where are we going? What are we trying to achieve? What's our direction? What's our strategy for building a more valuable product? Value creation; we're creating more value. That's that unrealised value, and those two together, unrealised value and current value, is that agile product management story that leads to market value. That's what we're measuring: market value.\n\nThe activity is product management, but then we've got the product development, which is supporting that story. Product development is our organisation's capability. That's our ability to deliver the things that we identify that need to be delivered and perhaps input to those things as well. Provide part of the feedback cycle; that's what I mean by the bleed over. Product development is going to have good ideas too that we might want to implement. But that's broken into two sets of metrics in product development. One is the ability to innovate. That's how much time can we spend on net new versus maintaining and supporting existence. That's how we're measuring that amount of time that we spend on net new.\n\nThen the other side of that, to balance it off, is time to market. How quickly can we go from an idea to getting it into production? So ability to innovate and time to market both talk about product quality, talk about engineering excellence. That's our agile product development. Product development is about building high-quality, usable, working products that are of value to somebody. That's just product development. Agile product development is just the newer practices in that story.\n\nSo we've got this product management leading, looking at the market, looking at the futures, looking at what customers are going to need in the future, what our stakeholders are going to need in the future, and trying to anticipate those needs by running lots of little experiments. Some of those experiments will be implemented by product development, so we can then get the results. Ultimately, delivering usable, working product enables us to maximise that value return because we're closing those feedback loops.\n\nSo we've got product management leading with strategy and direction and vision. Value and validation is product management's focus. In order to get that value and validation, we need to actually build something. We need to actually create something that we can then put in front of our users, our stakeholders, to then gather feedback and actually see whether it is actually valuable. Are they actually using it the way we expect? Is it actually changing the number the way we would like? And that's how agile product management leads but is supported by product development. Product development supports that story of collecting that data, that telemetry, that additional information that product management can use to figure out whether we are actually going in the right direction. Do we need to stay the course? Do we need to pivot? Or do we need to stop?"
  },
  {
    "id": "YGyx4i3-4ss",
    "title": "PPDV Course Overview",
    "description": "Discover the PPDV course from Scrum.org! Enhance your skills in agile product development. Visit nkdagility.com for more details. #agile #scrum",
    "captions": "Maybe we have insufficient user understanding. Maybe we believe that what our users say is the truth. Well, this is what they say, but guess what? Do we really understand what the need is? Do we have all the data evidence to find the best ways to bring solutions to fulfil users' needs? This is a valid question. \n\nMaybe we are facing reactionary development. Okay, customers want it because competitors did it. Is it really so? That's another question. Maybe we are facing insufficient collaboration with our stakeholders, and this is not healthy."
  },
  {
    "id": "yKSkRhv_2Bs",
    "title": "Reasons to do an APS Course in 60 Seconds",
    "description": "Discover why an APS course is a game-changer for your career in just 60 seconds! Join Martin Hinshelwood and unlock your agile potential. #shorts #agile",
    "captions": ""
  },
  {
    "id": "ymKlRonlUX0",
    "title": "The Ghosts of Agile Past: Why Burndown Charts Might Be Holding You Back",
    "description": "Uncover the truth behind burndown charts in Agile! Join Martin from NKDAgility as he debunks myths and explores better alternatives. 📊💡",
    "captions": "Another ghost of Agile past is burndown charts. You know, I always, always had a problem with burndown charts. There was just something niggling at me that there was something wrong with them. Everybody seemed to talk like they were the holy grail of monitoring a team. But when you start thinking about just-in-time planning, just-in-time planning doesn't just extend to the product backlog, it also extends to the sprint backlog. And if we do just-in-time planning, how could you possibly have a burndown that reflects the team, the work that the team's working on? Think about it. The way a burndown works is it goes from top left to bottom right. It goes from a list of all the stuff that we need to deliver burns down towards that trajectory of we've delivered all the stuff in it. In order to do that we have to understand all the stuff that's going to come into the sprint backlog at the start. This is why you see lots of teams and organisations fixated on that once you've brought things into the sprint backlog you can't change the scope. Crap, right? The idea that you can't, that if you're going to remove something from the sprint backlog you have to bring in something of equal size and all of that stuff that is really really just smacks of traditional project thinking right we've got scope we want to maintain that scope we want to control that scope so we're gonna have this burndown that we want to be on this line of that and it's just just a crap. The worst way to do burndowns is if you are burning down hours on tasks. That's probably the worst form because it implies that we've built all of the tasks with all of the hours at the beginning of the sprint. And I don't mean all, right? There's at least one person out there is sitting there thinking, but Martin, we don't plan all of this stuff, but maybe we get 90% of the way there. I'm saying 90% is crap. I'm saying 70% is crap. I'm saying 50% is probably crap, right? We discover more by doing than we could by thinking up front. That's the fundamental context within which Agile sits. And anybody that thinks that they can build products that don't exist yet and have a higher than 50% probability of the things you bring in being the things you need is, I don't know what they're smoking but it would be great to get some of that stuff. Because it's just not how the world works. How the world works. When we have that high degree of probability that things will be different, low predictability in what we think's gonna happen and what actually happens, we need a different way to manage the work. We need to manage the work empirically and in any empirical process which Scrum is founded on empiricism, most of Agile is founded upon empiricism, in any empirical process you're not going to know what it's going to take to do something. That's the first part. So if we're thinking we can create a whole big list of hours at the start and then burn down and see that we're on that trajectory, that's not gonna happen. \n\nSo a solution for that that many teams have tried or many teams that I've seen have tried is to do burn down in story points so instead of burning down the hours they burn down the story points so it's slightly less granular or go even more less granular and burn down in stories right so you get that more jagged line rather than a smooth line but the real and that's a little bit better at least if we're 50% way through the sprint and we're 50% delivered value that's probably the best that the burndown is going to get right in in that world where we've brought 10 things into the sprint and we're gonna deliver 10 things if we're halfway through the sprint and we've delivered five of them things are going good if we're halfway through the sprint and we've delivered three of them, things are not going good, right? That's probably, there's a lot of assumptions in there that things are of similar size, there's all kinds of assumptions in there, but that's probably the best of that world. \n\nBut the reality is that all of those are predicated on the idea that you've decided what that thing is up front. You've decided how many of those things you're going to bring in up front. And whether it's hours or story points or stories, that's not how it works. Most teams have a higher degree of volatility. They're not just thinking about the value that they're delivering in the sprint, their sprint goal. They're also thinking about how much technical debt do we have to pay off? How much refactoring do we maybe have to do as we're building this product? They're thinking about that, those little bugs that keep, you know, that steady stream of small, inconsequential but valuable defects that keep coming through the system you don't want them building up so you've got to take some of them on and responding to the business and the business needs something and be able to respond to it or production issues or there's too many ors the reality is you are much better focusing on the flow of value through your system and maintaining a steady consistent flow as much as you can within the bounds of the work that you're doing, than on trying to meet some arbitrary top left to bottom right graph, burn down. That's just ridiculous, and it is one of the ghosts of Agile past. \n\nIf you are being haunted by these ghosts of Agile past, we can help you exercise them or find a coach, consultant, or trainer who can. Don't let these phantoms undermine the effectiveness of your value delivery. The longer they linger, the more they'll haunt your team's progress. Send me an email to martin at nkdagility.com and we will help you get to the bottom of it. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at nakedagility.com. We also have our immersive and traditional public classes on our website and we'd love to hear from you."
  },
  {
    "id": "ypVIcgSEvMc",
    "title": "30% Discount for Existing Alumni Overview",
    "description": "Unlock a 30% discount on your learning journey! Join Martin Hinshelwood as he reveals how NKD Agility supports alumni with exclusive offers. #shorts",
    "captions": ""
  },
  {
    "id": "yQlrN2OviCU",
    "title": "The Power of Peer Feedback in Immersive Learning",
    "description": "Discover how immersive learning enhances your skills as a Scrum practitioner in this engaging video. Unlock your potential with NKD Agility!",
    "captions": "One of the great parts of immersive learning is getting feedback from your peers and colleagues. We give an assignment at the end of every session, something to do in your organisation to actually practically implement some of the techniques. And when we come back, we do a debrief, but it's a facilitated debrief. So it's not just myself or one of the other trainers doing the debrief; it's your colleagues in the class, the other people that are participating, who've also tried the same thing. They're providing their input, their review, their reflections on what you've tried, and you can provide it on what they've tried. And hopefully, we can build a much bigger body of experiential knowledge."
  },
  {
    "id": "yrpAYB2yIZU",
    "title": "Install & Configure 301 - Move your Active Directory domain to another server",
    "description": "Learn how to seamlessly move your Active Directory domain to a new server, perfect for OS refreshes or rebuilding your domain controller.",
    "captions": ""
  },
  {
    "id": "Ys0dWfKVSeA",
    "title": "Scrum doesn't solve problems, it reveals them. How, and why is that valuable?",
    "description": "Discover how Scrum reveals organisational challenges and enhances progress. Join Martin as he explores its true value in this insightful video! 🚀🪞",
    "captions": ""
  },
  {
    "id": "YuKD3WWFJNQ",
    "title": "7 Harbingers of the Agile apocalypse. Silence.",
    "description": "Uncover the silence in agile teams! Join Martin as he explores stakeholder engagement and communication strategies for effective Sprint reviews. 🗣️🤝",
    "captions": ""
  },
  {
    "id": "YUlpnyN2IeI",
    "title": "Best Scrum advice you ever received?",
    "description": "Unlock Scrum's true potential! Embrace flexibility over dogma with expert insights from Martin. Discover adaptive practices for effective project management. 🚀",
    "captions": ""
  },
  {
    "id": "YVrGU0oZmc0",
    "title": "Unlocking Continuous Delivery with Feature Flags - The Key to Faster, Safer Deployments",
    "description": "Discover how feature flags revolutionise continuous delivery, enabling faster, safer deployments and enhanced customer feedback. Unlock your team's potential!",
    "captions": "So one of the key practices that I think is hugely valuable for organisations if they're moving towards that more frequent delivery, if they're starting to get things in front of customers as quickly as possible. Right, you want to, if you want to be able to do continuous delivery, you're going to accept that you're going to be deploying features, new features to production that you're not ready for customers to use yet. Right, you might need, you might have a feature that takes multiple deployments to get to the point where you're happy to have it in production. Right, even if the end of the feature is much further down the line, you've got 10% you want to do before you want the majority of users to be accessing it, but you're going to be delivering 1% at a time. Right, just as a random example, a great example of this, again, the Azure DevOps team do a great job of this. You can go open up dev.your.com and when you're logged in, you'll see that there's a button in the top right with a picture of you or a blank picture of you. You click on that and it'll have a preview features option, and when you click that, it will list all of the feature flags that are available.\n\nOkay, so what they effectively do is they write all of, if they're writing an update to an existing feature that's in production, it's just going to go, unless they're replacing a whole feature like they did recently with Azure Boards. They had old boards and new boards they wanted; they were doing a big update and they had a feature flag for that. Right, typically if you're adding functionality to an existing feature, you're probably just shipping it, right, because it's a smaller change. But if you're adding a net new functionality to your product, a new feature, a new capability, a new different thing, then they hide it behind a feature flag. The feature flag would then be turned on in their environment. They have the developers themselves' environment in their environment for testing. Once they're happy with their testing, they're going to turn it on for the product group. Right, so the environment that they're working in, their account has that new feature, and they're going to be looking at the telemetry. The developers that built the feature are going to be looking at the telemetry. So it's off for 99% of all the users in the system; it's on just for their own engineering team. And then they're looking at the telemetry: is this performing? Is it doing the right thing? Is it causing a lot of exceptions? They're looking at all of that data. Once they're happy that that's good, they maybe open that up to everybody within Microsoft that's opted in to see those things. So then everybody inside of Microsoft can turn on that feature and can turn off that feature. The feature flag's visible. If you turn off a feature flag, it asks you why you're turning it off and if it's okay to contact you. Very prudent. I always give a message and I always tick the box to say it's okay to contact me, and I do get contact from those teams because they're interested in, like, why are you turning it off? Oh, you've said why it is, but I don't quite understand what you mean. And then they'll contact you and try and figure it out. What's missing? Right, what's missing that you need? Is there an expectations gap? Is it bad? Right, it's not what I need. Is it causing errors and performing badly on my machine? Right, those are all could be reasons why I want to turn it off. But at some point, they're going to want to open it out to a wider audience, more people in the world. So what they typically do is they publish a blog post on their team Azure DevOps blog that says, \"Here's a new feature we're working on. We're looking for people to help us kick the tyres.\" And \"kick the tyres\" is just a euphemism for try it out and see if it works. And they give an email address for you to email with your account, and they'll enable it for your account. Then on your account, you'll get that feature flag, and it will be off by default, and you can go turn it on. Again, they're looking for people turning it off and feedback. They're looking for telemetry of people leaving it on. Is it performing well? That's their private preview. So you have to explicitly opt in to that capability, and that means that you're limiting your audience. Right, they'll have an idea; they'll be able to look across all of the times they've done this and have an idea how many people they're going to get. With that number of people, they're then monitoring the telemetry and looking at, do we have enough people using it? Is it because they might have to do another blog post, right, or another way to get people in? And do we have enough people using it? Does the telemetry look good? Is this viable for the next stage? So the next stage after that might be a public preview, and a public preview is that switch that feature flag then becomes visible to everybody on the service. And they put it out in a blog post saying, \"This is now available to everybody. We'd like you to try and kick the tyres.\" So people that want to then go switch it on, it's now easy. They don't have to email; it's just there. They can go turn it on and see what it's like. Some people just discover it; other people, they're reading the blogs and they find it. And again, they're looking at telemetry: do we have enough people using it? Do we need to promote it again? Do users care? Do they use this feature? Is it performing well? All of that type of data they're looking at on whether they need to invest more in that feature, whether anybody cares about that feature, whether they just need to stop. Right, or so it's pivot, anti-up or call, right? That's your poker analogy, right? You're, is this feature viable? If they get enough telemetry and everything looks good, the next stage is they turn on the feature for everybody on the server, but they leave that feature flag to be able to turn it off. So they're interested in that feedback: who's turning it off? Why are they turning it off? Can we have a chat with them and find out what's missing? What do they need? Right, you're engaging with your customers. This is the development team, the engineering team that built that functionality, is continuously engaging with real customers in production, either through telemetry or actually talking to them because you want to find out what's going on. I've turned off a feature before because I didn't like it and said I didn't like it. This is bad; it's not working for me. Take the box, hit submit, and a couple of days later, I've got a communication from the product manager for that feature, the person who's managing that feature and bringing it through, to basically ask what's it need? What's missing? Why do you not like it? All useful. And do we need to keep continuing to make changes to it before it goes live? So at any point in that story, you can pull that feature. You can just disappear that feature flag, and it's gone for everybody because it's performing badly. And you can automate that as well, so you could have automation that checks for performance and then automatically lets get rid of that feature if it's impacting the system. Right, that should be just built into the system. And then once everybody's got it turned on, people aren't turning it off. There's probably a few lards; there's probably a few unhappy people when you change things, right? You move their cheese; that's just the cost of doing business. But everything's generally okay. Then feature flags on for everybody. You start removing that feature flag from the system, and that feature's just in production. So that could be a very long time. I know that when the Azure DevOps team did their boards, the new boards, old boards, it took them nearly two and a half years, nearly three years to get everybody over to the new boards because they kept hitting missing functionality. They kept hitting some performance problems, and then they had to kind of old boards rewrite that new boards again, and it took them a long time to get from where we need to replace the boards to it's done. It was a very long time. And so feature flags and how you enable feature flags, so they can be behind the scenes. They can be something that you give actual users access to. This is one of the core practices that enable you to do continuous delivery to production while protecting your system, protecting your users, and enabling you to get the telemetry you need to understand whether you've built the right thing in production."
  },
  {
    "id": "YZq7i0i6gxQ",
    "title": "Free Workshop 5 - Introduction to Agile Leadership!",
    "description": "Join Martin Hinshelwood for a free 90m workshop on Agile Leadership, tailored for leaders managing Scrum Teams. Watch live or catch the replay!",
    "captions": ""
  },
  {
    "id": "ZBb8OZ0I6qA",
    "title": "Why its imposible to order a hierarchy, and what you can do instead!",
    "description": "Revolutionise your project management! Discover why rigid backlog hierarchies hinder agility and explore flexible, value-focused alternatives. 🌍💡",
    "captions": "You can't order a hierarchy. In this video, I'm going to demonstrate why hierarchies in backlog management inhibit the ability for us to manage them effectively and how we can think about backlog differently. My name is Martin Hinwood. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in DevOps for 15 years. A backlog is just a list of things you're going to do, but backlogs have some special characteristics. One of those main characteristics is that it's ordered in some way. You still need to decide how it's ordered, but your backlog should have an order, i.e., there's a distinct first item, second item, third item. There are no items in your backlog that have exactly the same level; therefore, it is a flat list of what it is we're going to do next or what the most important thing is. The order of the backlog informs but does not control the selection of the work that the team is going to work on at any time. There may be other things that come into that story at selection time, not just what of the most important things that are there. There might be other implications in technology, the state of the product, other things that are going on that we need to consider as we move through our product.\n\nSo why is hierarchy a problem? The most common thing that you see in teams is, depending on the product they're using to manage their backlog, they might have epics break down into features, break down into stories or backlog items. They might have features break down into epics, break down into backlog items. You might have any number of other things going on. You might have initiatives that break down into something that break down into the theme. Here is that you've got things that break down into other things, i.e., a parent-child relationship. If you have a parent-child relationship in a tool, it's very difficult to manage it in a way that allows us to use that context without that context inhibiting our ability to do stuff in the tool. So I'm going to show some examples, and this is also not just a tooling issue but a mindset issue as well. If you're thinking about your work as a parent-child relationship, the tendency, the easy thing that happens is that we end up with a work breakdown structure, which is not effective because ultimately it's not value-focused, and that's what we're trying to achieve. All of agile, whether you're using a specific agile framework or you're trying to follow the agile manifesto or you're thinking about lean and Kanban, any of these things is focusing on the flow of value through your system. So if you're focused on the flow of value through the system, you need to be focused on the value. If you're focused on the work breakdown, you tend not to be focused on value; you tend to be focused on delivering more stuff.\n\nSo that's the tendency. But what's the relationship that makes it difficult in hierarchies? So I've created a demo here to show what the problem is. In this example, I'm just going to use Azure DevOps; that's my tool of choice, that's my preference, but this could be any tool, including just a mural with backlog items. So here I've got three features: feature one, feature two, feature three, and the intent of this tool is that features work at a different level from backlog items, and they inform but do not control the next level down. But the reality is that they do control the next level down because most people use this kind of view to see what's going on. So you're looking at features breaking down into backlog items here, and perhaps those backlog items break down into tasks: task one, save that. Oh, I need to close it now. I made two, don't save that one. So now I've got this hierarchy, this work breakdown structure towards this item, and then the tendency is to use this view and to put little progress bars and whatever you want on this view, and you end up with what looks a little bit like a project status report. That's the tendency when you use these types of views. With huge amounts of discipline on your team, you can certainly avoid this, but I find that that's not the case for the majority of encounters that I've had with teams that are doing this.\n\nThe other thing that makes it very difficult is that if I want to make one item more important than another item because I'm looking at this view, I actually tend to only make things important or not important inside of the scope of the feature because I can still drag and drop inside of here and order that hierarchy, same as if you were using just mural and stickies. It has to be under that feature. But if I want to make this item more important or less important than this item here, I want to drag it below this item, and suddenly if I drop this, I now changed the parent-child relationship from feature one to feature two, and this is a feature one element, not a feature two element, and that doesn't make any sense. So I need to go put that back. So when we manage our work and we're trying to actively manage what's going on here, it tends to make it a little bit more difficult to visualize, to engage with the work. What we really want is we want people to turn off the parents and manage the backlog as a backlog, not as a hierarchy. So they're dragging and dropping things within here, they're ordering this list, and creating a view that makes sense just for them.\n\nSo the main problems with a backlog hierarchy are the first one is the tendency towards ending up with a work breakdown structure. The other tendency is to not order your backlog because it changes that parent-child relationship, and it's effort to switch between the different views. It's even more so on stickies on a whiteboard, right? Because you have that fixed view; you can't pivot that display that you like you can in tools. The last element that is difficult is parent-child relationships are one parent, many children within the context of almost all tooling. It's a tree structure, and that inhibits our ability to have an item that goes on our backlog that has many parents, a many-to-many relationship. I might have a thing that I put in my backlog that enables five different features, and then that becomes quite an important thing to work on because it enables these five different features or is the first foundation for these five different features, and it's very difficult to represent that when we have that breakdown structure from epic to feature or high-level item to next-level item to backlog item.\n\nSo how can we think differently so that we don't have this problem? What we want to be able to do when we're thinking about our product backlog is we want to think about it as a flat list. It always should be a flat list, and each item has additional context. That additional context should be able to be visualised in various ways depending on the tooling that you're using, whether you're using a hub, GitLab, Azure DevOps, or Jira. The tooling will allow you to create some of those visualisations, those pivots on the data without actually having a hierarchy, parent-child relationships. That's the primary way to do that. So I'm going to show you how to do this in Azure DevOps. I have an example set up here. I'm just going to use the same team, and I have a bunch of things in my backlog here. If you ignore that effort column there, I will just remove it because it's inconsequential for what we're talking about here.\n\nSo one of the things that we're interested in in this list is going to be a flat list that we're going to order, but there might be additional things that we want to take care of. So if you remember, we had a bunch of things that had features assigned to them. So what I can do is I can turn on the parents again, and what I'm going to do is I'm going to get rid of those parent relationships, and I'm just going to do a tag ad, and I'm going to cheat, and I'm just going to call it feature one, use feature one, and I'm going to call this one feature two. I'm going to ignore feature three, tag ad. Now tags need to be a little bit more deliberate. You can control both the ability for people to create tags; that's pre-moderation, or you can use a post-moderation technique. There is a plugin on the store; you can see it's got 28,000 installs across TFS and Azure DevOps. This allows you to actively post-moderate those tags, so activities like merging tags, filtering tags, managing things you can do to manage those tasks across TFS and Azure DevOps. I'm sure there is the same story in other platforms as well, whether you're using GitHub, GitLab, or Jira.\n\nSo now I have a feature assigned to each work item. I can easily open a work item. I can see that it's to do with a particular feature or capability. I could even link to that capability as a link to a wiki page, so I could link to an existing item here and just pick a hyperlink and go to a wiki page, some kind of documentation on what this is. But what I ultimately want to be doing is managing this flat list of work items so that I can say that any item is more important than any other item, whether it's feature one or feature two. I can intermingle all of those things between feature one and feature two to best represent the business order and business priority of my product backlog. So this is not implying that this is the order that we're going to select items in. This doesn't mean that the team is going to say, \"Well, we think we can do five items in the next 14 days.\" These or ten items, these ten items are ready. That's not how that's supposed to happen. What a team would do is on each cadence, whether it's marketing, whether it's either replenishing the ready queue in Kanban, or they're doing their sprint planning, they're going to make a decision on how much work are we going to take in from the priority list versus how much other work do we have. Perhaps there's some long-running engineering work that's going on that has to happen behind the scenes that the customer doesn't really care about in the short term, but in the long term, it's going to provide them with a huge amount of value. So those items are going to be brought into the sprint, are going to be prioritised in that same way as these other business items. You may even add them to your product backlog. I don't have any of them in here, although it does seem like that because there are things like reviewing application architecture, but that's for the product that is referencing.\n\nWhen I'm looking at this list, I might want to filter and understand what's going on with certain items. So what I can do is I can hit this filter button here, and one way to filter would be to use the tags that we created. So I can say, \"Here's feature one,\" and here's all the feature two items. And feature one, here's just the feature two items. I can also look at, for example, all of the risk guardian items. So if I pick risk guardian, which is one of the projects that is represented in here, so I'm using tags to not only represent the features that we might be working on and delivering. Some of those features might go across applications that we're building, but we're also able to filter this by the application that we're building. So I can very clearly see that these are the items that are part of feature two that are part of this application, but these three items down here are not part of feature two for that application. So I'm able to very easily change my filter and say risk guardian and feature two, and I can effectively matrix and filter what I'm looking at to see what I might want to take on into the next sprint.\n\nIn Azure DevOps, I might even do a little bit of planning, and there's my future sprints for this team. I'm just going to do some arbitrary forward forecasting. I'm not using a tool here to do probabilistic forecasting, but I'm just taking a guess, which is very much a bad way to do it. But you can see on this list the actual order of these items on the backlog, and I'm not able to reorder those items because I don't have that full list of items because we're filtering. It disables that ability to order, but I can still go in here and move to a certain position within this list. So I can say move to, it's 25. I want to move it to about eight, move to eight, and then we can go fine-tune that later. But here you're seeing there's one item that's really important for risk guardian here at four, and then these things are a little bit further down the chain. But we're going to create a sprint plan around risk guardian because it's been deemed fairly important for the business, and feature two is more important than things that are not feature two. But risk guardian is also important, so I'm creating this filter to see what it is we're going to take. We can take about 20 things into the sprint, but we only really want to take maybe five things for our sprint goal, which is going to be around feature two and risk guardian. We're going to create a story around that.\n\nSo what I might do is take a little look across these items and say, \"Well, this item's great; we're going to need to do that. That's going to come in.\" And then we've got, \"Yeah, that's not as interesting, that feature one, but it should really be part of this,\" even though feature two is currently more important than feature one. And this one, and this one, so that's three. I need a fourth one. This one's not as useful yet, but this is much more useful, so we're going to take that one. And now I can drag these into the next sprint. There we go, they've all been assigned to that sprint. You can see that in there, and that's our plan. We could have done this in sprint planning; we could have done this in refinement, and then we're going to review it in sprint planning. Like we're going to take about 20 things into this sprint, but here's the five that we think are to do with the next goal. We might get more information at the review, but we can adapt this. This is not set in stone; this is just a best guess at this moment in time what we think would be a good idea here for sprint one as we get nearer to sprint one starting.\n\nSo there I've been able to do that with filtering. So if I remove that filter, you'll see those sprint one items are not next to each other in the product backlog because we're using the order of the product backlog to inform but not control the contents of our backlog with a focus on value. And we made the decision about what items we're going to bring into the sprint based on multiple vectors of information. One was the projects, right? So here I've got risk guardian, insight ledger, unity ERP. There are various, maybe we're integrating into other systems, right? We've got various projects that are going on that are managed by other people. We're delivering the value, and we've got a bunch of features, which are a different way of grouping the contents, not based on project. We actually have, there's another vector in here that we didn't really talk about, which is the stage of each of those pieces of work. So what's the main topic of those pieces of work that is independent of feature and independent of project going on within the bounds of our product that we're delivering here, which looks like an integration tool.\n\nSo hopefully, this was a useful view of how we can move away from a hierarchical work breakdown structure towards something that is more flexible, that is more usable, and more effective. If you are struggling to move away from a project-based work breakdown structure for visualising your backlog, we can help you. We have consulting, coaching, and mentor programmes that can help kickstart your company's ability to manage your work actively and focus on the value that your business needs. Get in touch below."
  },
  {
    "id": "ZcMcVL7mNGU",
    "title": "Product Management Mentor Program Final",
    "description": "Discover how NKD Agility's Product Management Mentoring program empowers product managers to thrive in complex environments. Join Martin Hinshelwood for insights!",
    "captions": "The product management mentor programme for software development is really a programme to allow companies that are building software products to build better software products. There's a huge gap in the way organisations approach software development and software engineering and building those types of products where when we start transitioning, they realise that the work is so different and so complex and different all the time that the kind of more common ways of managing projects like you might for building houses or building bridges is just not going to work. \n\nUm, because everything's so much more complex. So they try and shift from those old ways of working where you have Gantt charts and plans and milestones and deadlines and they try and move towards agile, right? Whatever people are calling it locally, they move towards that story and they don't, they take away those milestones and Gantt charts and traditional project management tools, right, that are supporting that story. They take those away and then they don't replace it with anything and they wonder why it doesn't work out, right? Things start to go wrong fairly quickly. Things go off track. We're not going in the right direction and it's because they're missing a piece of that puzzle and it's a pretty big piece of that puzzle and it's vision, value, and validation. That's what's missing. \n\nThey don't have what, um, if you go look up in the dictionary, it's a group of people working together towards a common goal. So if you want people to work together towards a common goal, whether they're an individual team or they're your whole company, you need to have that common goal that they can all get behind and they can all follow, that they all understand, that it's been communicated effectively. \n\nAnd what I see in a lot of organisations is they'll maybe communicate at once, they'll maybe set directives and they don't involve the people that are part of the story, the people that they want to follow that goal. And the reality is that people don't follow your goals, they follow their goals. So in order for you to engage with all of the people in the organisation, the people in the software teams building the software, the people in the legal department, in cyber security, and all of those different parts and have us all working together towards that common goal of building and delivering this product to customers that's going to maximise the value means that we all have to be going in the same direction. \n\nWe all have to understand the same thing, right? What is it we're trying to achieve? And that is one of the main focuses of the product management mentor programme. We're talking about tools and techniques, we're talking about theories and principles and practices that help us understand why those things are needed and how we get everybody moving in the same direction. How do we, as product managers, enable not just to communicate that direction with the people within our organisation or outside of our organisation as well to involve those stakeholders and those customers in the story? \n\nBut also do we, how do we measure whether we've been successful, right? How do we bring in things like evidence-based management, right? Looking at our whole product and are we moving in the right direction? Are we looking at the right numbers? Do we have the right measures to be able to figure out where we're going? Looking at things like hypothesis-driven engineering practices, right? Why are you adding this feature? What would you like the world to look like after this feature has been delivered? What would you expect the difference to be? How are we going to measure that? \n\nBuilding that whole story into the way we build products so that we can maximise the value that we deliver to the business for the return for the money that they've put in."
  },
  {
    "id": "Zegnsk2Nl0Y",
    "title": "5 tools that Scrum Masters love. Part 5",
    "description": "Discover the top 5 tools that Scrum Masters adore! Boost your team's agility and performance with insights from Naked Agility. #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "ZisAuhrOhcY",
    "title": "My journey with Kanban and why I actively recommend it to clients.",
    "description": "Discover my Kanban journey and why I recommend it to clients! Learn how it enhances workflow, transparency, and predictability across all industries.",
    "captions": "I got introduced to Cban by Daniel Vante and Steve Porter when I did the participated in the first professional Scrum with Cban class back in 2018, late '17, early '18. I didn't fundamentally understand at the time the value of this different way of thinking, of this observational tool. I think it's quite important to understand that Cban is not a system itself. That's why Pro Cban and the Cban guide talks about it as a strategy. It's a strategy for understanding your existing system and then actively managing the flow of work through that existing system.\n\nWe talked about it in that context, within the context of a Scrum team, and how we can actively manage the flow of work within the system, use the Cban metric to augment our existing, perhaps awesome, Scrum process in order to really understand the predictability that we're getting and increase that predictability for the business. Because lots of teams do struggle with their ability to deliver. They struggle with getting to the end of the Sprint and having working product. They struggle with consistently getting working product. They struggle with the quantity of working product, and that creates fear in the business because the business are paying a lot of money to get stuff, and they feel like they're getting that stuff in fits and starts in an unpredictable way. They feel like it's not what they asked for, it doesn't cost what they thought it would, and it's not delivered when they thought it would.\n\nPart of that is because they can't see what's going on. We're not giving them any information. The standard Scrum team is not giving the business any information to reassure them. They're not doing transparency right. They're not increasing the transparency to a level where the people viewing who need to understand actually understand what's going on, and that creates that fear. That means that we want to have more control. When we fear something isn't working out, when we fear that our money isn't being spent well, we want to take more control of that thing. That's the knee-jerk regression that we get from a lot of teams in organisations when a lot of teams move towards Scrum because they take away some of the tools for measuring productivity from the teams. \n\nBecause in Agile, we don't measure productivity, they take that stuff away, but then they don't replace it with anything. Because they don't replace it with anything, transparency drops, fear increases, and then we want to go back to the old way. So a Cban strategy, and this is something that I've learned really over the last five years of working with Daniel Vante and the Cban guide and Pro Cban, is that the only way to be successful is to use a Cban strategy. Because we need to understand our predictability, we need to understand and actively manage the flow of work through the system, and we are not going to be successful if we don't do that. \n\nSo I recommend a Cban strategy for any team doing anything in any context. That's right, any team doing anything in any context. If you're a marketing team delivering marketing content, if you're a software team delivering software and you're using Scrum, you're a software team using SAFe, you're a software team using something else that you made up yourself, or you're a management team managing a portfolio, or I don't know, I'm trying to think of other things. If you work in a factory and you're delivering stuff, you should be using a Cban strategy in all of those contexts. That is the metrics you need in order to then be successful. \n\nBecause those metrics create transparency. Transparency allows you to make better decisions and ask more interesting questions, and those interesting questions and better decisions result in more effective flow or stop doing the thing that you thought of. That's why Cban is so important to the strategy for every team building anything in any company. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "zltmMb2EbDE",
    "title": "Does Kanban integrate into a Scrum environment?",
    "description": "Discover how Kanban enhances Scrum with essential metrics and insights for better project visibility and predictability. Elevate your Agile game today!",
    "captions": "The question is, does Cban integrate with a Scrum environment? And I want to be super clear: Cban integrates with any environment, any way of working, whether you're doing Scrum or you're doing Waterfall or you just made up a way of working. All of these things can benefit from the application of a Cban strategy.\n\nRight, the Scrum in particular doesn't have any metrics. There are no metrics in Scrum. Go read the Cang guide; there is no mention of velocity, no mention of story points, no mention of time, no mention of any of those things. The only thing that's about as close to a metric as the Scrum guide talks about is it says that the team should have discussions to understand the size of things that are in their backlog. That's it, right? How you define that size, all of those things are up to the team. Teams generally pick things like story points and velocity, and unfortunately, those metrics have damaged our ability as an industry—building software industry in particular—to have conversations with customers, have them understand what we're saying, and be able to actually answer the customer questions.\n\nIt is absolutely unreasonable for a customer to come to you, has given you and your team a bunch of money, and says, \"When will it be done?\" and you say, \"We're doing Scrum; we don't have an answer to that question.\" That is completely unreasonable, and if I was that person, I would say, \"Fine, I'm not giving you any more money. I'll go find somebody else who can answer my questions,\" right?\n\nSo, Cban—a Cban strategy—enables you to actually answer those questions, right? You're definitely not answering it with absolutes, right? Because that's impossible. We understand the cone of uncertainty; we understand that those difficulties. But we can start to use probabilistic forecasting—a fantastic tool, probabilistic forecasting—to help us answer those questions of \"When will it be done?\" or \"What will I get by this date?\" Right? These are such important questions.\n\nDaniel Vante, who's one of the creators of Pro Cban, the creator of the Cban strategy, who worked with Scrum.org to create the Cban guide for Scrum teams and H Cban for Scrum teams—of course, he has a book called \"When Will It Be Done?\" That's how important that question is to your business. You need to be able to answer that question: \"When will it be done?\" And the tools that Cban gives you, the metrics that you have to monitor, enable you to then get those answers to those questions very specifically, right?\n\nSo, does Cban integrate with a Scrum environment? I think Cban has to integrate with a Scrum environment. In fact, Scrum is not as good without a Cban strategy. For me, this is a pairing that just has to happen. If you're doing Scrum, you should be using a Cban strategy. I don't really have any—what would you call it?—like, \"Well, maybe you should use...\" No, you should be using a Cban strategy. Everybody should—for every system, in every workplace, everywhere—you should be using a Cban strategy. That's how you understand the flow of work through your system so that you can make the optimisations, right? That's where you get the continuous improvement from when you're doing Scrum.\n\nRight? You have a retrospective. How do you know what optimisations you should make? How do you have conversations about what the problem is if you've got no data? How do you see whether the things that you've decided to try actually provide any benefit or not? You need metrics, and you need data. And story points and velocity and burndown charts are completely useless to answer any of those questions. Are we on track? Are we doing well? Do we need to improve? None of those questions can be answered with burndown charts and velocity. Don't even try; they're a waste of time.\n\nWhat you need is cycle time, you need lead time, and you need throughput. You need work item aging, and you need work in process. That's it. Those are the metrics that you're looking for. Those are the metrics that you need. If your current system of work is failing you, then you would benefit from creating and applying a Cban strategy. Our professional Cban trainers and consultants are ready to help. Don't wait; the sooner you start, the sooner you will improve. Get in touch below."
  },
  {
    "id": "ZMqxCD-va_I",
    "title": "nkdagility mighty networks overview for PST",
    "description": "Discover the power of nkdagility's Mighty Networks in this overview tailored for PST. Unlock community potential and enhance your networking experience!",
    "captions": ""
  },
  {
    "id": "ZnXrAarX1Wg",
    "title": "No go zone for Agile consultants",
    "description": "Discover common pitfalls for new agile consultants and learn how to excel in your role with expert insights from Martin Hinshelwood. #Agile #Consulting #Shorts",
    "captions": ""
  },
  {
    "id": "zoAhqsEqShs",
    "title": "What is the most interesting outcome you have achieved as an agile consultant?",
    "description": "Discover the fascinating outcomes of agile consulting with Martin Hinshelwood as he shares insights on navigating complexity in project management.",
    "captions": ""
  },
  {
    "id": "ZPRvjlp9i0A",
    "title": "14th April 2020 - Office Hours \\ Ask me Anything",
    "description": "Join Martin, a Scrum Trainer and Microsoft MVP, for an engaging Q&A on DevOps and Agility. Ask anything or submit sensitive queries privately!",
    "captions": ""
  },
  {
    "id": "zqMzD1PXq4s",
    "title": "The Cost of Chaos. The Impact of Poor Technical Leadership",
    "description": "Discover how poor technical leadership fuels chaos in software delivery and learn to boost productivity through engineering excellence with Martin Hinshelwood.",
    "captions": "Chaos costs money. Most organisations that I work with and have worked with really struggle with controlling the chaos within the context of delivering usable working product to their customers. They find that the work is substandard. We've got a lot of bugs hitting production. We've perhaps got a lot of rework happening because things aren't quite what we expect them to be or don't meet the minimum standard for our organisation, and we end up going down dead ends. \n\nI'm going to need to explain that, but a lot of the time—and I do this as well when I'm building products—you try and figure out a solution to the problem you've got. Right? You've got a problem; you know where you want to get to just now, and you come up with a solution that gets you to that thing that you want to get to. But over time, that where you want to get to does in fact shift. Right? It could shift because of different market opportunities that arise, or it could shift because we're scaling. \n\nWe came up with a solution that was on par at the time, but now it's subpar. It doesn't, you know, it's slow. We're running into problems. We're having a lot of support calls because of technology choices that we made that are no longer valid. You see this a lot in the extreme in the airlines and car rental companies. Right? They have a lot of, I would call it, technical debt. The choices that were made at the time that they've never gone back around and refactored. \n\nRight? So they still have mainframe systems, and they don't have people who understand the mainframe systems anymore. So they've got a double problem. Not only do they still have those mainframes, but nobody in the organisation knows how they work, how to reimplement them, how to manage them, or where to kick them when something goes wrong. And that happens all the time in technology. Right? The technology moves forward. \n\nI work with lots of organisations who have solved problems in ways that made perfect sense at the time because there was no solution on the shelf out there that you could go get. I've got one customer that built their own source control system because they started developing software 30 years ago, and 30 years ago, building software at scale, there weren't very many options for source control systems. The ones that were out there maybe didn't fit their needs, so they created their own one. But today, that doesn't make any sense whatsoever. Right? There are plenty of good source control systems out there. Git is the de facto standard, and they should have all of their code, all of their systems on Git. \n\nBut you need to invest time and money to move from what you had before to what you need now, and that's part of this story of technical leadership and engineering excellence. We need to be focused on ensuring that our systems and processes that our people are using are as effective as possible so that their job is as slick and easy as possible. Right? Satya does good work on this at Microsoft. Right? He would rather people spent the best engineers, the most skilled people, spent time on optimising the systems that we have because then we can come back around and build all the features we want because we have these really slick systems. \n\nAnd it seems like it's a cost, right? But actually, the slickness of these systems that control the chaos are a value centre because they are the thing that supports our ability to deliver new features. A great example is the Azure DevOps team. They, back in 2012, before they improved their systems, were delivering something like 24, 25 features to production each year with 650 people, with an application of technical excellence and effort. Right? This is not for free, and great technical leadership within the organisation. They took that from 25 features to production each year to over 600 features to production each year, and that difference was because they paid back a lot of the—I’m going to say technical debt. Some of it was technical debt; other stuff was technical cruft, just a buildup of, I don't know, sediment, a buildup of rust in your system because things get old. \n\nTechnology moves really fast, and we need to keep up with it. And because they made those changes, just one simple thing, they flipped from lots of long-running system tests to unit tests. It took them four years of effort to get there, but they took their engineering team's ability to see whether what they've done works from 48 hours down to 3 and a half minutes. Think what that would do to your productivity if you had to wait 48 hours to find out if the simplest change had been successful. You'd push bigger and bigger changes through the pipe. \n\nSo when you do have a problem, it's harder and harder to figure out what that problem is, whereas if you're able to find out if it works in 3 and a half minutes, you'll be running that all the time on the smallest changes you make, and you will build a better product that's more scalable and has less Band-Aids. Right? You're not out with the super glue and sticky tape trying to seal over the gaps for bad choices that you made because you didn't know that there was a problem. You didn't know it wasn't going to meet the standard. \n\nSo that cost of chaos is because of poor technical leadership and low engineering excellence. You might see engineering mediocrity within an organisation. You can solve these problems by having your best engineers, your best people, focus on delivering the systems, the optimisations to the systems that you need so everybody on every team has the easiest possible job adding value in your product."
  },
  {
    "id": "ZQu2uSt1xxk",
    "title": "Overview of Applying Professional Kanban course.",
    "description": "Unlock your team's potential with our \"Applying Professional Kanban\" course! Learn key principles, tools, and techniques for continuous improvement.",
    "captions": "The applying professional Cang course from Pro Caman is really that foundational class on understanding how to apply a cand strategy to your existing system. It doesn't really matter what your existing system is; you could be doing Scrum, you could be doing waterfall, you could be doing anything. Whatever process you've got right now is the process that you apply the Cang strategy to. \n\nThis course's purpose is to help you understand what is needed in order to have a Cang strategy and what are some of the starting points, tools, and techniques you can use to get started with a cand strategy. What's the minimum you need to be doing Cang right? \n\nSo, what are the minimum metrics we need to be collecting, visualisations we have to have, and decisions that we have to make in order for our continuous improvement to start happening? How do we start interpreting the graphs, start understanding the data, and analysing it in order to get better at whatever it is that we're doing? \n\nIt really helps improve the flow of value through the system. It helps you get an idea of what your current flow is, and that helps you figure out how to ask more interesting questions of your team. If you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. \n\nWe have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "zqwHUwnw0hg",
    "title": "What will you learn on the professional scrum master course?",
    "description": "Discover how the Professional Scrum Master course empowers you to lead agile teams, fostering autonomy and collaboration for optimal success.",
    "captions": ""
  },
  {
    "id": "ZQZeM20TO4c",
    "title": "Agile leader versus traditional manager",
    "description": "Discover the key differences between an agile leader and a traditional manager in this insightful short video by Martin Hinshelwood. #Agile #Leadership",
    "captions": ""
  },
  {
    "id": "zro-li2QIMM",
    "title": " shorts 7 Virtues of agile. Charity",
    "description": "Discover the 7 virtues of Agile, focusing on Charity. Learn how a happy, inspired team enhances customer experience! #Agile #Scrum #Shorts",
    "captions": "And I do that both in the technical space and in the agile space. If you want to have a chat, you can go to my website and book a coffee, and we can talk about agile. We can talk about the things that are happening in your organization, and if in half an hour I can fix your problem, that's great. We've had a coffee, we've had a chat, and you get something to try that might result in success. \n\nRight, I don't do that for direct remuneration. I do that because I like helping people. I like other people being successful. I want organizations to be successful in agile because that helps all of us, all the employees of the company, the entire thing, the entire ecosystem. And that's charity."
  },
  {
    "id": "ZrzqNfV7P9o",
    "title": "Learn Scrum with Minecraft Education Edition",
    "description": "Discover how Minecraft enhances the APS course, fostering collaboration and creativity in Agile teams. Join Martin Hinshelwood for insights!",
    "captions": ""
  },
  {
    "id": "zs0q_zz8-JY",
    "title": "Biggest misconception about a scrum master",
    "description": "Discover the biggest misconception about Scrum Masters with Martin Hinshelwood! Uncover insights that can transform your Agile journey. #Scrum #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "zSQSQPFsy-o",
    "title": "Why is Scrum so easy to understand but incredibly hard to master?",
    "description": "Uncover why Scrum is easy to grasp but tough to master! Join Martin as he shares insights and strategies for navigating its complexities. 🚀💡",
    "captions": ""
  },
  {
    "id": "ZXDBoq7JUSw",
    "title": "3 reasons why you should level up your knowledge and skills?",
    "description": "Unlock your potential! Discover 3 compelling reasons to enhance your agile skills with insights from Martin Hinshelwood, a professional Scrum trainer. #Agile #Scrum",
    "captions": ""
  },
  {
    "id": "ZxDktQae10M",
    "title": "2018 VSTS Sync Migration Tools Overview",
    "description": "Discover the VSTS Sync Migration Tools in this quick overview! Learn about installation, configuration, and how to run the tools effectively.",
    "captions": ""
  }
]
