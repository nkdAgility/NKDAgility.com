- id: gYM5X2MnVBY
  title: BROKEN- The 7 Deadly Sins of Agile!
  description: Uncover the 7 Deadly Sins of Agile and learn how to avoid common pitfalls in your agile journey. Transform your approach for lasting success!
  captions: |-
    Agile is hard and it's designed for complex environments. So, as you would expect, there are many behaviours that I've found in organisations that are suboptimal to say the least. Here are my seven deadly sins of Agile.

    Hi, I'm Martin Hinwood, owner and principal consultant at Naked Agility. I'm a professional Scrum trainer with Scrum.org, a professional Kanban trainer with Pro Kanban, and I've been a Microsoft MVP in GitHub and Azure DevOps for 15 years.

    One of the seven deadly sins of Agile is lust. Loads of organisations are talking about Agile transformation, digital transformation, whatever transformation. They want something different because they've realised that the markets have changed. It's taken them a long time to realise the markets have changed. They changed years ago. In fact, the 1930s was when the market started to change. By the 1970s, they were totally changed, and it's taken until now for a lot of companies to actually realise, "Oh, stuff's changed. What's going on? Why isn't our old processes and systems working?" So now they're looking around for something new. They've got that, I was going to say, "70-year itch," but it's the 70-year itch, and they're looking around for new processes and practices that they can use. They see this Agile thing doing really well, and they want it. They want it desperately, and they don't really want to do the work for it. They just want to buy it. I think there must be a USism for that, but I think I'll stay away from it. They just want to buy this thing. They don't want to actually spend the effort and the time and the energy to figure out what it means for them and their business. They just want somebody else to come in and install it. They just want to pay somebody to come in and do it for them. That's what they want to do, and that's why you see a lot of organisations bringing in the big four consulting companies. You see McKinsey and Accenture and Boston Consulting Group coming in, giving advice. But the problem is they're giving advice based on all of these other big organisational transformations. There is no precedent within your organisation for Agile. You can't just look at what somebody else is doing and lust after it and bring it into your organisation. You need to build your own unique way of doing things over time and actually do the work to get there. And that's why you can't just lust after this Agile thing. You need to do the work to bring it into your organisation.

    One of the seven deadly sins of Agile is gluttony, and I see this a lot in teams where their backlogs and their products become bloated and full of basically just full of crap that needs to go. One common entry is the product backlog. If you go into a team, you're working with a team, and you go to look at their product backlog, and let's say there's six or seven people working on this team, and they have 5,000 things in their product backlog, they're doing it wrong. That's greedy. They've eaten all those backlog items. They're sitting in their belly, and they can't walk around. They can't move. They're not going to be nimble. They're not going to be Agile because it's almost impossible to understand what is our value, what value is in our product backlog. Diving into that thing is just not a good idea. You've got too much stuff in your product backlog.

    Another way gluttony manifests is during Sprint planning, shoving more stuff into the Sprint backlog than the team can possibly deliver in a single Sprint. That continually results in the team having to vomit backlog items into the next Sprint. If you think of it that way, perhaps teams will stop doing it, taking on too much, and then it spews into the next Sprint. If it's one or two things that move into the next Sprint, and maybe not every Sprint, it's probably okay. You're not going to be successful in everything you do. But if you're constantly got tons of things from a Sprint flowing into the next Sprint, flowing into the next Sprint, perhaps there's a need to consider, "Are we taking on too much work? Are we doing too much? Are we taking on too much work?" 

    That's the second form of gluttony that I see in teams. The third form is leaving stuff that nobody uses in your product. The Standish Group in Boston used to create the Chaos Report every year, and they analysed about 70,000 projects worldwide. They found that only 35% of the features that we build are used by our customers. 65%, I think the phrase was "little if ever." So hopefully we can stop building them in the first place. That would be great. Let's stop building them in the first place. But if we have built them, why are you keeping them in your product? Why are you continuing to spend maintenance hours on support? How long does your build take? How long does your build take if you remove 65% of the code that's in your product? Because you've got rid of those features, your build would be faster. Your teams will be able to work faster. There's a less complicated body of content. You'll just get better and faster at doing things. 

    So the way to... loads of teams just need a gastric bypass for that. How do you restrict the amount of stuff that's in a product? That's really hard because that's much harder than backlog or Sprint backlog. It's to figure out what percentage of the features of your product are actually used. The worst is continuing to invest in features that are of no use, features that aren't used by your customer. I guarantee you loads of teams do that. Years ago, I worked with a bank in Boston, and they were absolutely adamant that this 65% was crap, and they knew their customers way better than anybody else. There was no way they were wasting 65%. It was a lot less, that's what they said. So we said to them, "What's your flagship product that you build? What's the product that you think you know your customers best and are building all the awesome features?" They said, "This one, this one's the best." 

    So we got in amongst the code. We added Application Insights. Application Insights is an Azure feature that can be plugged into any application anywhere, which basically collects data. It supports all the programming languages, all the setups, and out of the box, it does a bunch of stuff. But then if you add this as a feature, you can say, "How many times do users click that button?" Out of our body of users, how many of them have clicked that button? You can get all of that data. We analysed their product end to end. We collected data for three months, and then we went back to them and said, "Here's the 7.5% of features that your customers use. All the rest was waste." Over 90% of the money they invested in their product was waste. What was really interesting was that more than 80% of the items in their backlog at the moment were going towards additional capabilities for features that weren't used by their customers. 

    So don't eat the whole thing. You've got to figure out how do I pick and choose what I'm going to eat? Don't eat the whole feature at once. You don't know if you like haggis yet, so don't order a whole plate full. Get a starter that's got a little bit of haggis and try that first. Then, obviously, when you realise you do like it and your customers like it, then you can make more. But don't overeat on your product backlog. Don't overeat in your Sprint backlog, and don't overeat in the features in your product.

    One of the seven deadly sins of Agile is greed. This usually manifests in organisations by an overwhelming focus on resource utilisation. Let's get rid of the fact that we're calling everybody resources as if they're cogs in a machine rather than actual people. That focus on resource utilisation was a fantastic idea when we were running machines, and machines could churn out things on a regular cadence. The more your machine is running, the more value you're getting in return for the cost of the machine and the cost to run it. That's where that resource utilisation idea comes from. But when you start looking at people and how people do work, people need thinking time. People need to do things different ways. If we can automate stuff that we do the same all the time, but if we're going to do something different all the time, which in my world, background as a software engineer, everything we coded was something new. Otherwise, we would have used an existing framework. 

    So anytime you're writing code, you're doing something new. Anytime you're building a product that doesn't exist yet, you're doing something new that's never been done before. When you're doing that, you need to give people the space to be able to do things well, to be able to think about things, to be able to learn things, to be able to try things. That means that people aren't always 100% focused on the work that they're doing. They're doing other things while thinking about that work. Some examples maybe: have you ever been working on something and got stuck? No matter how much time you spent on this thing, you were stuck. You're 100% utilised because you're working on this thing, but you're not making any progress. You're not delivering any value. But if you just go out for a walk or you sit with your wife and you explain the problem to your... I do this all the time. I explain some problem to my wife, and she doesn't necessarily understand the problem that I've got. I'm talking about code and architectures and things, and halfway through explaining it, I figured out what my problem was. 

    That resource utilisation is a fallacy when you're talking about people. There's no such thing as resource utilisation. You want to be looking at flow efficiency and value delivery. How much value are you delivering to your customer? I actually don't care if my team members are sitting around on their butts for 90% of the time as long as we're delivering the value to the customer. The value to the customer is the important thing. Is the customer happy? Are we getting an adequate return on investment for our product? Those are the ideas that make sense. 

    I worked with somebody years ago who ran a little experiment with some teams that he worked with in a company in the US. He decided to or got convinced leadership that per Sprint, he would remove an hour from each Sprint. You can imagine you've got a 40-hour week per week. The next Sprint, he's going to do a 39-hour week with the team. The Sprint after that, he's going to do a 38-hour week with the team. The Sprint after that, he's going to do a 37-hour week with the team. I've got a question for you: at what point do you believe that value delivery suffered if the focus is on value delivery, delivering features? 

    Now, that doesn't mean that for the other two hours people aren't... the hours that you remove, people aren't actually working. If you think about it, a Scrum team, somebody who's focused on solving problems works 100% of the time. When I'm having a shower in the morning or when I'm... I actually do a lot of my best ideas at the gym. I go to the gym, I'm working out at the gym, and I go, "Oh, that's a great idea," and I go on my phone and I message it to myself. The next idea pops in how to solve problems and figure these out is not something that you get from 100% utilisation. You need thinking time. 

    Can you guess where he got to? He got to 16 hours per week before value delivery started to suffer because all the rest of the time is thinking time that the team needed. Thinking and noodling time. 

    So very much stop being greedy. Stop trying to get people to maximise their utilisation and instead focus on maximising the flow of value delivery to your customers.

    One of the seven deadly sins of Agile is sloth. This manifests in a number of different ways with teams, with organisations, with leadership all over the place. One of the most common elements is just not bothering to actually do the things that we say we're going to do. We say we're doing Agile, but we don't deliver working product at the end of the Sprint. We say we're doing Agile, but we have long convoluted deployment processes which are not in control of the developers. We say we're doing Agile, but we don't have an ordered backlog. All of these things are places where we say we're doing something, but really we're just kind of lazy and lying through our teeth in order not to have to do the work. 

    Perhaps it's because somebody in leadership in the organisation has decided that thou shalt do Agile, and your product is not particularly suited to that model because it was built in a traditional... maybe it's got mainframe and all kinds of crazy stuff in there. Maybe there are other reasons why it's not viable within the confines, the structure of your organisation, the system that you're in. But I would much rather teams and people were honest and transparent with their companies and their organisations about what they can and cannot do, what is and is not Agile. 

    I really like there's a great article called "Detecting Agile BS" from the US Department of Defence. If you search for it, you will find a great little workflow on it. It's one of my favourite things that I use in organisations. 

    Here are six sloth things that organisations kind of say they do or pretend that they're Agile, but they don't actually do these things. I think these are great. 

    So first one is, are teams delivering working software to real users every iteration, including the first, and gathering feedback? That's like the first thing. That's almost Agile in a nutshell. Are we coming up with ideas, getting those ideas in front of customers, and getting that feedback? If you're not doing that, sloth. You're not able to get things done. 

    The second one, and because this is the Department of Defence, is there a product charter laying down the mission, strategic goals, and do all members of the team understand how they contribute? That's absolutely key. How can we expect people within the context of our product, of our teams, of our organisation to make good decisions about what it is that they need to do if they don't have all the information they need? We're hiring smart, clever people, and then we're not empowering them to do the things that they need to do. We're just not empowering them. That's part of we need to communicate with them. If you don't communicate with them, sloth. If you don't actually do those things, you're being lazy. Just do it. 

    The third one is feedback from users turned into concrete work items on Sprint timelines shorter than one month. Are you getting things in front of your customers at least once per month? That shouldn't be that hard. It shouldn't be that hard to engage with your customers, get parts of your product in front of your customers, and then get them to tell you what they think of it. Gathering feedback from those users shouldn't be that hard, and if you're not doing it, sloth, because it's not that hard, you're just being lazy. 

    One I already mentioned a little bit is the full ecosystem of your project. Agile, i.e. Agile programming teams followed by linear bureaucratic deployments is a failure. Why do you have linear bureaucratic deployments after your Agile team have done the work? We might be able to make working product in two weeks, but how long does it take before that increment, that two weeks' worth of work, actually gets in front of real users so that you can close those feedback loops, break down those assumptions, validate what it is that you're creating, that it is actually value? If that's too long, that's not Agile. If you look at the Agile Manifesto, it says ideally a shorter time frame, but only a few months between having an idea and getting it into production. 

    The fifth one: are teams empowered to change their requirements based on feedback? The people doing the work should be able to change and adapt the requirements that they're creating in the system, the things that they're building. We want to build more of the right
- id: h3J11t10A0g
  title: Escaping the Deadline Death Spiral
  description: Join Martin Hinshelwood as he tackles missed deadlines and budget overruns in software projects, sharing Agile insights for better outcomes.
  captions: |-
    Most organisations that I encounter really suffer from missed deadlines and budget overruns for their software projects. It's probably the most common issue that I see happening in organisations, and it can be really unpredictable. You can think that you've got this one in the bag, but the bag just melts, and it starts dropping out the bottom all over the street. 

    This is something that is a fundamental reality of the world of complexity, right? What we know is less than what we don't know; therefore, we have a high degree of unpredictability. The things we use to mitigate that are effectively technical leadership and engineering excellence. We need our engineers to be building products that are of a high enough quality that we can pivot as needed at any moment. 

    We need our leadership within our organisation, who have a controlling interest in the product delivery, to have enough of an understanding of the technical realities—not just of doing the work, but of ideation and futurism. What are the possibilities for this product to enable better decisions to be made within the context of the product? 

    This is super hard because we like to think that there's one right way to do something. There's a best practice, and that's a fallacy. We like to think that all of the awesome engineers we've hired just know how to solve the problem, and that can quite often be a fallacy as well. 

    So, we need tools and capabilities around that to help us be more effective. The principles and philosophies behind Agile and Scrum—those ideas of iterative development, continuous delivery, continuous feedback, continuous testing—pretty much anything with "continuous" in front of it in the modern software engineering space are those things that will enable us to be more effective, to make better decisions, to encourage technical leadership, and to encourage engineering excellence.
- id: h5TG3MbP0QY
  title: Most Common Thing You Hear in a PSM 1 Course?
  description: 'Discover the most common insights from delegates in a PSM 1 course with Martin Hinshelwood. Join us for a quick dive into Scrum training! #shorts #agile'
  captions: ""
- id: h6yumCOP-aE
  title: 3 best ways to wreck Kanban. Don't have a working agreement.
  description: Discover the top 3 pitfalls of Kanban adoption and learn why a working agreement is essential for team alignment and success in agile collaboration!
  captions: |-
    One of the main ways to wreck your campaign strategy is not agreeing how you're going to work as a team. Right? Unless you've sat down with the people you're going to work with and decided on how we are going to approach things, we probably don't have agreement. Right? Most people, unless you sit down and agree, are probably not on the same page. We don't have all of our noses pointed in the same direction. Right? I might pick things based on their affinity to something I like; you might pick things based on their affinity to something you like. And suddenly, from the outside, it looks like we're randomly picking stuff to work on. Right?

    That working agreement is so often missing from teams. For some reason, lots of people think that you can just throw ten people together and they'll magically figure out how to navigate the complex nature of delivering high-value complex products and be able to just figure it out. And they also think that you can just apply some framework, and if we all follow that, we'll also all be in agreement. So, for example, Scrum. Right? We have a campaign strategy. We're going to do Scrum as part of that. That's our working agreement. No, it's not. It's not your working agreement at all. Scrum is a framework; it's not a blow-by-blow how to do stuff. Are you going to use story points? Are you going to use planning poker? Those are not part of Scrum; they're optional things that you might pick. Have you decided to do those things? If you're not doing Scrum, you might just have ten people who all want to work a slightly different way, working together towards some outcome.

    So I would say to you, if I took one of my lovely board games to my board game group, I'll be there tonight playing. If I took one and we got the pieces out, I don't know if you've seen these things, but they have like 300 pieces in the box. Right? We got all the pieces out of the box. I set it up the way I think it looks like it should be set up, so I'm not going to look at the rules; I'm just going to make some stuff up. And then every member that's playing, all four of us, make up our own rules for how to play the game. We don't read the official rules; we just do it our own way. Are we working together? Are we playing the same game? Right? You can't have a win; you can't have success unless you've agreed what the rules are for success. Right? Most of these games, it's the most points. Right? But have you agreed how you get points? Can I just move a piece to here and say now I have 300 points?

    That's total disorder. That's total disarray. And most teams that I see and engage with operate in a state of total disarray because they've not agreed what their rules are. They've not agreed what game they're playing, what success looks like, how they get little successes within the context of the bigger successes that the organisation's trying to achieve. So sit down with your team and agree the way forward. Don't tell you need to agree, because if you tell me how to do the stuff that I do, I'm going to ignore you. I need to be in agreement with you. You need to collaborate on creating that definition of workflow. We need to collaborate on creating our working agreement. And it actually doesn't matter whether you have a CI. I don't care if you're doing a Kanban strategy, Kanban method, Scrum. It doesn't matter what it is. If you've got a bunch of people working together, you need to get together and agree how you're going to work. Otherwise, you have disarray. Everybody's making it up as they go along. Don't do that.

    If you're struggling to implement a Kanban strategy, we can help or find you someone who can. Click the link below and get in touch today.
- id: hB8oQPpderI
  title: One limitation of reading a book vs attending a course
  description: 'Discover the key limitation of learning Scrum from books versus hands-on training in this insightful short with Martin Hinshelwood. #Agile #Scrum #Shorts'
  captions: ""
- id: hBw4ouNB1U0
  title: The Kanban Key - How Continuous Improvement Transforms Your Workflow
  description: Unlock your workflow's potential! Discover how Kanban's continuous improvement can boost efficiency and drive outstanding results in this insightful video.
  captions: |-
    One of the key elements of Caman is improving, making improvements or changes to the system in order to see whether you've managed to improve things or not. 

    So we use metrics and visual tools to enable us as humans to see patterns and understand the data to increase transparency, so that we can make changes to the system. This allows us to ask more interesting questions of ourselves and others that participate in our system. 

    Improving the workflow is absolutely critical. If you're not making changes to your workflow on a continuous basis, you're probably not doing Caman. If you are making changes, are you looking at the right data? Do you have the right visualisations to really be seeing what's going on?
- id: HcoTwjPnLC0
  title: Is a Product Owner an Agile Project Manager?
  description: "Discover why a product owner isn't an agile project manager! Join Martin Hinshelwood as he explores the essence of agile in product development. #shorts"
  captions: ""
- id: HFFSrQx-wbQ
  title: Plague - 7 Harbingers agile apocalypse. But shorter!
  description: Uncover the truth behind the agile coaching crisis! Join Martin Hinshelwood as he tackles the challenges of unskilled coaches in the agile landscape.
  captions: ""
- id: hFjoIf3KPeI
  title: How does a Scrum Master or Agile coach motivate a Scrum Team?
  description: "Unlock the secrets to motivating Scrum teams! Join us as we explore effective techniques for Scrum Masters and Agile Coaches to boost engagement and productivity. \U0001F680✨"
  captions: ""
- id: hij5_aP_YN4
  title: 'The Power of Community: Becoming an Awesome Agile Coach'
  description: 'Discover the fourth essential achievement for aspiring #AgileCoaches with Martin Hinshelwood. Elevate your skills and empower teams to thrive!'
  captions: ""
- id: hiqdIfuxB0k
  title: naked agility Professional Scrum Generic v1
  description: "Explore the essence of Agile with 'Naked Agility: Professional Scrum Generic v1'. Discover key principles and practices for effective Scrum implementation."
  captions: ""
- id: hj31XHbmWbA
  title: "Quotes: You can't connect the dots looking forward; you can only connect them looking backwards. Steve Jobs"
  description: "Explore Steve Jobs' insight on connecting the dots in product development with Martin Hinshelwood. Discover the power of agile with Naked Agility! #shorts"
  captions: ""
- id: HjumLIMTefA
  title: The Power of Immersive Learning in Agile Training
  description: 'Discover the top 5 reasons why immersive learning transforms Scrum training for students! Dive into the experience in this engaging short video. #Scrum #Agile'
  captions: One of the huge impacts of immersive learning is the impact that it has on the organization because the participants are going back to their organization and trying things and then getting feedback on it and perhaps trying slightly different again to try and make it work. That act of continuous learning and continuous change enables actual change to happen in the organization, which is the reason that we go to training in the first place, so that we can enact actual change. Immersive learning is the best chance for organizations to make actual change.
- id: HjyUeuf1IEw
  title: 20th May 2020 - Office Hours \ Ask Me Anything
  description: Join Martin, a Scrum Trainer and Azure DevOps MVP, for an engaging AMA on DevOps and Agility. Ask your questions live or submit them privately!
  captions: ""
- id: HmAIUiR8QSo
  title: Building a Culture of Quality
  description: Join Martin Hinshelwood as he uncovers how to cultivate a culture of quality in engineering, drawing lessons from Boeing and Volkswagen.
  captions: |-
    Building a culture of quality within your organization is absolutely not something that you can do on your own. It's not something that any individual can do. Each individual within the context of your organization needs to be able to demonstrate their own technical excellence, their technical leadership, their engineering capability. If they demonstrate their own, other people around them will see a way of behaving that hopefully they want to copy. The more people in your organization behave that way, the quicker other people in your organization will see that as the way to behave.

    I was trying to think of an example there of it being true, and I really keep coming back to the opposite being true. And that's the Boeing story. If you've been following the Boeing story really for many years, the Boeing story's been going on. When Boeing bought McDonnell Douglas, Boeing's focus was on engineering excellence, technical leadership, and they built that mantra of "if it's not Boeing, I'm not going." Their planes were the best; they were the best build qualities; they were the least likely to fall out of the sky. They were the standard for quality in the entire aviation industry.

    Then they had that culture of engineering excellence and technical leadership, and then they moved. They bought McDonnell Douglas, and through some weird happenings, which I don't fully understand, McDonnell Douglas came out on top of being in charge. McDonnell Douglas's leadership and their focus was on revenue extraction. That was their focus. "We're not here to build value; we're here to extract money for our shareholders and for ourselves." That's what we're here for.

    Over the next 20 years, I think it's been 20 years; I might be a little bit out there, 15 to 20 years, they've decimated that culture, that culture of quality inside of Boeing completely and utterly destroyed it. So much so that you might have seen videos of Boeing employees saying, "Yes, I'd fly in this plane, but yeah, I've got a death wish." Right? That's not what you want if you're going to be flying in a plane. The culture you want within the context of the engineers that are building it, so why would you want it within the context of the software that you're purchasing, the software that you're using? 

    How much of the software that we use is actually life-critical or actually has a substantive impact on our quality of life, on the world around us? We want those products to be built within the context of a culture of quality, of delivering the right thing, of doing the right thing, and providing us with value—not "let's cut all the corners we possibly can to deliver more revenue to our shareholders."

    If you want to build amazing products rather than mediocre or even dangerous products, we need to focus on the things that really matter. Agile people talk about agile frameworks all the time and how agile frameworks were the solution, and agile frameworks are now the problem. None of those things are true. Agile frameworks are just tools that we use. It's the culture within our organization that leverages those tools in a positive or negative way. A hammer is just a tool, but you can use it to hit a nail, or you can use it to smack somebody around the head. Which one is going to add value, and which one's going to land you in jail?

    Building those cultures of quality can you—what world of culture of quality did a Volkswagen engineer write code that determined whether a car was in a test condition and faked the results? Right? They changed the way the engine operated in order to get the results they wanted, and the engine operated differently on the road. What world of quality does anybody in your organization make that sort of decision? No world of quality. If you have a culture of quality, you're not going to have people make that decision.

    That's what we need to focus on. We need to focus on building a culture of engineering excellence, the technical leadership to set that direction and go in that direction. We need to build within our organization the knowledge and understanding of the theories behind the reasons things work the way they work and how we can then apply our empirical learnings within our context. Every organization is different, with the knowledge of those theories to then extrapolate what's the next best decision that we can make.

    This is something that Naked Agility can help you and your organization do. We cannot do it for you, but we can be there to help you understand the theories and practices, how they apply within your context, and what are good engineering decisions and what are bad engineering decisions. So build engineering excellence and technical leadership within your organization.
- id: HMmCr5eMK3U
  title: Free Workshop 6 - Introduction to the Definition of Done!
  description: Join our free workshop to explore the Definition of Done! Learn how to create one with your team and enhance your project success. Don't miss out!
  captions: ""
- id: HO_XLWhJv1s
  title: Professional Scrum Product Owner (PSPO) Overview to discover product management skills & practices
  description: Unlock your potential as a Product Owner! Join our interactive PSPO course to master essential skills and drive product value in Agile teams.
  captions: ""
- id: HrJMsZZQl_g
  title: When is an APS course appropriate for a scrum team?
  description: "Discover when the APS course is ideal for Scrum teams and how it tailors Scrum practices to your organisation's unique needs. \U0001F4DA\U0001F680"
  captions: ""
- id: HTv3NkNJovk
  title: Why is Satya Nadella a better example of agile leadership than Steve Jobs?
  description: Discover why Satya Nadella exemplifies agile leadership better than Steve Jobs, as Martin Hinshelwood explores vision and teamwork in this insightful video.
  captions: ""

