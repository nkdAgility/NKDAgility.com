- id: 5bgfme-Pspw
  title: Momentum
  description: "Discover the power of momentum in product development and organisational culture with Martin Hinshelwood. Boost your agile team's performance today! #agile #scrum"
  captions: |-
    Momentum is movement. Right? You're moving in a particular direction, and you have enough stuff moving in that direction that it's difficult to stop. Right? That, for me, is momentum. Like a ship. When a ship puts on the brakes, it takes 10 miles to stop. Right? 

    So, momentum, especially in product delivery, does... does everybody who's working with you understand the direction that you're going? So that they're going in that direction, and they're going to pull other people along with them who don't necessarily understand as well as some people do. 

    So, if you've got enough people moving in that direction in order to pull in the rest of the people and folks that you need. And this is true for, I'm building a product or I'm changing an organisation or...
- id: 5EryGepZu8o
  title: If you could teach just one thing about Scrum, what would it be?
  description: "Unlock Scrum's true potential! Discover how empiricism and complexity empower teams and drive success in this insightful video. #Scrum #Agile"
  captions: |-
    If you could teach just one thing about Scrum, what would it be? I think it wouldn't be Scrum at all; that would be the first principles. Right? It would be empiricism and complexity. That's what I would teach, and in fact, that's probably what I spend the majority of my time in the EPS. When I'm just talking to people, engaging with leadership, that's what I spend the majority of my time talking about: empiricism and complexity.

    If you have those fundamental ideas of empiricism and complexity, the understanding, the realisation that no matter what way you choose to do stuff, it might not always work. It might have different outcomes depending on the current circumstances, the prevailing wind, right? Then you realise why people realise why things don't always work out for them. They realise why things are different. They realise why things are difficult. They realise why you don't always get a successful Sprint, no matter how hard you try. You realise why you can't normalise your number of story points delivered per Sprint. You realise why story points become ultimately ineffective.

    Beyond the team, you realise why for a lot of those things, people and teams can take those ideas and run with them themselves. I don't believe that Scrum should be forced upon teams. I think they should choose themselves how they work, and if they want to take and use principles of Scrum, then I'm here to help them. But if you want to use other stuff, I'll help them with that too. They should be making those choices with a clear and concise understanding of complexity and empiricism so that they can ultimately make more of the right choices and less of the wrong ones.

    I think that's hard, and I think that's missing in a lot of the—I don't know a better word than boilerplate—teachings of the mechanisms in Scrum. Doing mechanical Scrum is not useful at all. People have to understand why each of those things in Scrum is in place, why it provides them with value, why taking it away—what's the result of taking it away? What happens? What doesn't happen? And why we want to keep those things. I think that's so important.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.
- id: 5gGBdfAPot0
  title: PSOP In 10m
  description: Discover the essentials of PSOP in just 10 minutes! This quick guide breaks down key concepts and insights for a clear understanding.
  captions: ""
- id: 5H9rOGhTB88
  title: 'Empowering Teams to Tailor Their Processes: A Path to True Agility'
  description: Empower your teams to adapt processes for greater value! Discover how to break down silos and foster innovation in this Agile reality check.
  captions: |-
    Another key question to ask leadership about their way of working is if their teams are empowered to change their processes based on what they learn. This is one of those critical things that, in order for a group of people to work as effectively as possible, that doesn't mean they work like another team working on the same product or another team working on a different product. It means that every team, although we're going to perhaps follow some general guidelines about how we want to do business with our customer, perhaps that represents the cadence of delivery to our customer, we need teams to be empowered to change their process based on what they learn. 

    Because just because you've decided that something needs to be a certain way, doesn't mean that that adds value to this team. It might actually be waste for Team A while it is value for Team B. We need to recognize that we want to maximize the amount of value that teams are able to create, which means we need to minimize any waste. A great example of that is I used to work for an organization; I was an employee of Merl Lynch back in the day. Because they had a trading desk software within the body of their organization, there were certain processes that had to be in place for all software in the organization, even if it had nothing to do with this trading desk bit. 

    So the trading desk defined those processes, and everybody had to follow them. I was building a small CRM system for a group of about 20 sales folks who were making calls, calling people up selling the mortgages. What they wanted was a way to tapy interface, pop the call, running it on my desktop or my laptop, and I'm able to click, see the phone numbers, call them up, see notes, that kind of just a simple CRM system. In order to deliver that, I had a whole bunch of constraints that I had to work within. One was that I had to have the architecture signed off before I started, and any changes to the architecture needed to be signed off as well. 

    So if you think about it, as you're building the product, you can't go, "Oh, actually that architecture I thought I was going to use is wrong; I need to do something different." It all has to go through an architectural change review board, right? Central environment, and it was very time-consuming. They didn't get back to you within a few days; they got back to you within a few weeks or a few months because they maybe only sat once over a period or they had a backlog of work. 

    That's one thing for a small system that doesn't have a lot of consequence or any consequence for the rest of the business and only affects a small number of people. That's a little bit of overkill. I also had to have all of the systems that I used, even though they weren't publicly facing, pent tested. So we had to pay an external company about $20,000 per pentest to pentest our system, even though it was internal and the data was of no consequence. It's not the trading desk system; it's a small data set for a small group of people. Yes, it has some PPI, but from a risk value factor, we probably could have done a lot less security overture and still provided on the compliance for the PPI external PPI compliance site. 

    So that was a bunch of waste that we couldn't change. When I had to deploy to an environment, I had to have three servers: front end, middle tier, back end. The database had to run on one server; I had to have a separate server for the middle tier, the API, so it had to have APIs that were available, and then the front end had to run on a separate machine. You had to have those three servers as part of that mix, so you had to pay for them. It worked out about $33,000 per month for those three. 

    Then you had to have a dev environment, a test environment, a UAT environment, and a production environment. That was $3,000 per environment, and I had to have four environments for a little system that was just used by 20 people in a call centre. Total overkill, total waste for what it was. Those were processes that were imposed on us from the rest of the business. Even worse, we were doing continuous delivery, and in the organization, if you didn't submit a change request for a deployment of your product more than, I think it was, six weeks in advance, it was considered an emergency, and you got a black mark against your name. 

    We were doing daily continuous deliveries on a number of different products that we were creating, so we got a lot of black marks. In fact, we got the most black marks of any department. I think the combined black marks of every other department in the whole organization because we were doing continuous delivery, because we were starting to use modern engineering practices, we were punished within the organization because that's not the way we do things here. 

    So, are your teams empowered to change their processes based on what they learn so they can make everybody's lives better and maximize the value that you deliver to your customers? If your answer to any one of these questions, or the answer of your business to any one of these questions, is no, we're not doing that, then I probably wouldn't consider that you're already in the agile space. You're not already agile; you might be working towards it, and you might have put in loads of effort, but unless you can mark every single one of these six questions as "yes, we do this; this is how things work here," then we're still lacking. 

    We're still trying; we're still working towards being agile. Now, this is just a litmus test dreamed up by the US Department of Defense, but they are probably the least likely place for you to expect something with this high a bar to have come from. I'm not going to go into a team and work with a team or a company, and if they're not doing these things, then I'm going to say, "Well, you guys suck; you're not agile because you're not doing this." That's not how we work towards success. 

    But I think it's hugely valuable from the perspective of self-reflection for you all to think about the processes and practices in your organization. How many of these six questions are you able to achieve, and what could you do to make it a little bit easier for the teams, for the people doing the work, to work towards this idea of not being agile BS?

