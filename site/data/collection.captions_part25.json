[
  {
    "id": "AaCM_pmZb4k",
    "title": "What are the hierarchies of competence vs control?  Why does this matter?",
    "description": "Explore the contrast between empowering coaching and micromanagement in hierarchies of competence vs control with Martin Hinshelwood.",
    "captions": "Well, that's a great question. What are hierarchies of competence versus hierarchies of control, and why does it matter? \n\nWell, let's define each one. A hierarchy of control is where everybody's told what to do, usually, obviously, in a hierarchy, right? Because it's hierarchies of control. But you've got the traditional organisational structure, the pyramid, right? You've got the small number of people at the top that are the thinkers, right? The deciders. And then you get the majority of people at the bottom who are the doers, and steering flows down, right? \n\nSo, in order for something to be decided, right, there needs to be some kind of trigger that a decision needs to be made. Sometimes that's just going to come from the top because the person at the top has an idea, and everybody shall follow it, right? Everybody shall do it. But sometimes it's a market trigger, right? And when it's a market trigger, this is hierarchies of control. In a market trigger, you've got the markets are actually at the bottom. The people talking directly to the markets are not the people at the top; they're the people at the bottom. They're talking to the shareholders, right? Which is a different sort of market, but who are talking to your actual market of your customers. \n\nSo, there's some kind of trigger, and it has to be important enough that this person who has no authority whatsoever and maybe doesn't give a crap, right? Because they're just doing what they're told, it has to be painful enough for this person that they filter that up to the next level, right? And then it needs to be painful enough for that person above, i.e. there's enough people below giving that feedback that they're like, \"Oh, I need to escalate this.\" And then it escalates, and it escalates. Escalation is the word to watch out for, right? So, we're managing by escalation. \n\nYou've got this item, this problem, escalated up the chain until it gets to somebody who, for want of a better expression, this is how my dad phrased it, you get to somebody who it's beneath them to deal with your problem, right? And they just say to somebody below them, \"Just fix it. I don't care,\" right? Just fix it. Or they just make a decision, and it doesn't matter whether it's the right or wrong decision; nobody cares. They just make one, right? Because at that level, they're not connected to the environment. \n\nAnd so, I worked at Merrill Lynch for a few years before it was bought over by Bank of America. So, Bank of America, Merrill Lynch now. But there were 16 people between me and the CEO. How long do you think it would take in that pyramidal structure for that trigger to get all the way to the top, a decision to be made, and then that to filter all the way down? And remember, it has to be the same message that filters down to the bottom, which is never the case because, you know, politics happens in here as well. \n\nSo, that's hierarchies of control. You're maximising the amount of time it takes for a signal, a message, to get to the person who needs to act on it, and then for the change to come all the way back down. And that was great when we were in the industrial revolution, right? Where these practices came from. Where, in fact, the mantra is \"slow and steady wins the race,\" right? Would be the watchword of the day because the customers aren't changing their mind all the time. The customers aren't exposed to a hundred different companies doing the same thing and then picking that you're making the product that they are buying. End of story, right? \n\nPerhaps really, really, really rich people could afford to import a product from somewhere else in the world, but otherwise, it's all kind of more local industry, right? If you want a ship and you're a shipping company, you go to your local shipyard in Glasgow if you're in Glasgow, or perhaps Southampton. But you're not going to buy a ship from a shipyard in China, right? That doesn't make any sense whatsoever. You wouldn't even know that shipyard existed, right? No marketing, no communications at that level. \n\nSo, that's hierarchies of control. Work great then, but today, with the speed of market change, right? Because there are no static markets anymore, you need this decision process to be much, much quicker. \n\nSo, hierarchies of competence are about kind of, I guess, kind of flipping on its head while still having a little bit of hierarchy because, kind of, I believe that there's definitely a human need for hierarchy, right? \n\nAny time you see a group of people who are challenged to complete some task, whether it's, \"Here's a pile of ropes and stuff across that river,\" right? They're going to have leaders that emerge based on their understanding or ability within that particular context, right? So, if you gave the same group of people another task, it might be a different leader that emerges based on the context that they're in. That would be a hierarchy created based on competence. \n\nI choose to secede some of my control over what it is we're doing to you so that we can all collaborate together to get to the outcome that we desire. And I'm deliberately choosing to secede that control to you because I believe you are the most competent person to do it. And you'll see in larger groups of people, there might be multiple different competing ideas for how to solve the problem. And perhaps you'll end up with two groups of people with two leaders that are both trying to solve it in different ways, and then you see which is the better outcome or the quicker outcome, more of the more optimal outcome, right? \n\nAnd that's just a natural thing that we do. So, the fundamental difference between hierarchies of control is, in hierarchies of control, you as an individual don't choose to follow; you are enforced to follow a specific person, even if you think they're the most incompetent idiot in the world. \n\nAnd in that model, there's an expression that you hear a lot, which is \"promoted to their level of incompetence.\" You heard that expression? That fits perfectly with that model because somebody is seen to be good at doing a job, and then they promote them to the next level up. And maybe the next level up is all about management and has nothing to do with actually doing the same job, and now they're not good at it. But you never demote people; you only promote people. So then they never get promoted again. So, they've been promoted to their level of incompetence. One level down, they're awesome; this level up, they suck, right? \n\nAnd so, you end up with these massive management structures and organisations because you've promoted this person to the level of incompetence, and oh crap, they're not actually doing their job. So, we need to find somebody else, so we promote this other person. I know they're actually good at it, so out of how many people at that level, how many people are actually useful? That's what hierarchies of control create, some of those structures. \n\nSo, in hierarchies of competence, you have no enforced structure in that manner. A good example might be Netflix. I think holocracy, they use some of those ideas where they have a board, which is kind of the enforced hierarchy part. They have a board who sets strategic direction, but everybody in the company's job is to figure out what can they do to best fulfil that overall strategy, right? \n\nSo, that could be, \"I'm going to go join this team over here because I like what they're doing,\" or \"I've got a cool idea, so I'm going to...\" What's it called when you attract people to your position? You know, you're going to be the leader and attract followers. That's the one! Attract followers and move in a certain direction. \n\nAnd that's all ad hoc and dynamic in that world. So, you can almost go, \"Well, that's all the way over here,\" and maybe your company's not ready for that. We're all the way over here in this top-down, terroristic waterfall model. You've got to figure out what's the first thing we can do to help move a little bit more in that direction to leverage the people that we have and get closer to the market and have a faster, shorter feedback loop, faster turnaround time between market triggers and actual things happening in our organisation. \n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else, agile, scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "aathsp3IMfg",
    "title": "When is an APS course appropriate for a scrum team?",
    "description": "Join Martin Hinshelwood as he shares his vision of the perfect agile consulting week, highlighting the power of inspired teams in #agile and #scrum.",
    "captions": ""
  },
  {
    "id": "Af-wBYtyyRU",
    "title": "Mastering Evidence-Based Management (EBM) for Product Owners: Maximizing Value Delivery",
    "description": "Unlock product success with the PAL EBM course! Discover how evidence-based management empowers product owners to make informed decisions and maximise value.",
    "captions": "So the PBM course is a fantastic idea for product owners because ultimately product owners are the entrepreneur, the mini CEO of a product. If you want to be making good decisions about which bets to make on the success of your product, right, which features to build, you need to understand the holistic outcome of your product, the whole product. \n\nEBM, evidence-based management, can be used to look at a whole product and say these are the metrics that we've decided in each of the key value areas, right: unrealised value, current value, ability to innovate, and time to market. Once we've chosen those metrics, we can then monitor them over a long period of time and see that we're taking the product in the right direction. \n\nHow do you know when you're going off topic? When you're going on a tangent to what your organisation is trying to achieve? When you're off the beaten path? Maybe off the beaten path is the best place to be because you look at the data, you look at the metrics, and holy moly, this has been really successful, right? \n\nThen you need to have a conversation with your business about, well, we were going this way, but actually we think this way is a better way to go that's going to add more value. How do you know to have those conversations with the business? How do you make those determinations? We need to understand what's going on in the product, right? We need to understand our ability to innovate. We need to understand our time to market, how quickly we can get things through to maximise our capability. \n\nAs a product owner, you want to maximise your ability to deliver business value, right? That's your whole job: maximise our ability to deliver value, maximise the value that we deliver. So our capability of our teams that are delivering value, right? Are we maximising the throughput of our ability to deliver value? And then are we delivering the right value, our market value? Are we maximising that? \n\nAnd how do you know if you're not measuring? That's why product owners like the PAL EBM, the evidence-based management class is awesome to help you give you extra tools to help you figure out what that is, help you engage with the rest of your team and bring them along on that story, and perhaps help you turn some of your developers from developers to product developers. \n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility. Have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "agPLmBdXdbk",
    "title": "Must have trait in an Agile Consultant",
    "description": "Discover the essential trait every agile consultant needs to excel in solving complex problems quickly. Join Martin Hinshelwood in this insightful short! #Agile #Consulting",
    "captions": ""
  },
  {
    "id": "AJ8-c0l7oRQ",
    "title": "Why is Lego a shit idea for a scrum trainer - Part 3",
    "description": "Martin Hinshelwood critiques the use of Lego in scrum training, arguing executives prefer valuable learning over play. Discover his insights in this short video!",
    "captions": ""
  },
  {
    "id": "AjUC6FPYCQM",
    "title": "Do teams really understand the power of applying scrum professionally?",
    "description": "Unlock the true potential of Scrum! Join Martin as he reveals insights to elevate your team's practices from basic to professional. 🚀 #Scrum #Agile",
    "captions": ""
  },
  {
    "id": "APZNdMokZVo",
    "title": "What is a definition of done? Why is it so important?",
    "description": "Unlock the essence of 'Definition of Done' in Scrum! Discover its vital role in ensuring product quality and risk mitigation in Agile frameworks. 🚀📈",
    "captions": ""
  },
  {
    "id": "ARhXjid0zSE",
    "title": "7 signs of the agile apocalypse. Famine",
    "description": "Discover the 7 signs of the #Agile apocalypse! In this short video, Martin Hinshelwood reveals how famine can signal impending doom for teams. #Agile #Shorts",
    "captions": ""
  },
  {
    "id": "ArVDYRCKpOE",
    "title": "Quotes: Fake it until you make it",
    "description": "Explore the pros and cons of \"fake it until you make it\" in Agile with Martin Hinshelwood. Discover insights for inspired, high-performing teams! #agile #scrum",
    "captions": ""
  },
  {
    "id": "ARWK1wvXYGY",
    "title": "Ep 006 - Live Virtual Retrospective on PAL-e with Russell Miller",
    "description": "Join Russell Miller for a live retrospective on PAL-e! Ask Martin, a Scrum Trainer and Azure DevOps MVP, anything from DevOps to Agility.",
    "captions": ""
  },
  {
    "id": "aS9TRDoC62o",
    "title": "If a client hasn't considered DevOps consulting as part of their Agile Consulting needs, why should they?",
    "description": "Discover why integrating DevOps consulting into your Agile coaching can enhance team performance and streamline software delivery. Watch now!",
    "captions": ""
  },
  {
    "id": "atV8TIupSsg",
    "title": "Live Virtual PAL on 27 – 30 July , 2020 in CEST",
    "description": "Join our Professional Agile Leadership workshop from 27-30 July 2020! Enhance your skills in a live virtual format. Register now!",
    "captions": ""
  },
  {
    "id": "AwkxZ9RS_0g",
    "title": "How Does Your Consulting Experience Manifest in the Training Environment?",
    "description": "Discover how real-world consulting experience enhances training in Agile and Scrum. Join Martin Hinshelwood as he shares insights on effective teaching.",
    "captions": ""
  },
  {
    "id": "aWYoJtSgTDo",
    "title": "The importance of knowing the territory.",
    "description": "Discover how navigating new territories, like mushroom foraging, parallels agile leadership in seizing opportunities and making informed decisions.",
    "captions": ""
  },
  {
    "id": "AY35ys1uQOY",
    "title": "How do you know if you've got a great Sprint Goal?",
    "description": "Discover how to craft a valuable sprint goal in Scrum! Join Martin Hinshelwood for insights that align teams with strategic objectives. #Agile #Scrum #Shorts",
    "captions": ""
  },
  {
    "id": "b-2TDkEew2k",
    "title": " shorts 7 Virtues of agile. Temperance",
    "description": "Discover the virtue of Temperance in Agile! Join us for insights on fostering balance and harmony in your teams. #Agile #Scrum #Shorts",
    "captions": "I have this picture in my head of Ken saying it to me many years ago: \"Just enough and no more.\" I believe, in fact, he actually—I think he said that no matter what quantity question I ask him, the answer is going to be \"just enough and no more.\" It doesn't matter what the quantity question is, right? \n\nSo how much backlog should we have? Just enough and no more. How many developers should we have? Just enough and no more. How much time should we spend on refinement? Just enough and no more. Same for planning upfront. \n\nThat mantra of being focused on what it is we're doing and minimising our effort. One of the principles in the Agile Manifesto is maximising the amount of work not done."
  },
  {
    "id": "B12n_52H48U",
    "title": "How do you decide whether to pivot or stay the course? (Nokia story)",
    "description": "Explore the pivotal choices in product management: when to pivot, persevere, or walk away. Join us for insights and real-world examples! 🚀",
    "captions": ""
  },
  {
    "id": "b3HFBlCcomk",
    "title": "The Fallacy of Equating Agility with Speed: What Agile Really Means",
    "description": "Discover why Agile isn't just about speed! This video reveals its true focus on value, adaptability, and delivering the right products. Embrace a strategic mindset!",
    "captions": "There's an idea out there: the agility equals speed. I think this is in the same category as agile project manager, right? It's an oxymoron; it doesn't exist. It's not a thing. That's not what agility is about. Agility is about spending your time well. That's probably a bit... I think that's a good way to describe it. Probably spending your time well. The time we do spend is on valuable endeavours. We spend less time doing the wrong thing and more time doing the right thing. That's the idea that we're trying to achieve. But in order to find the right thing, we've got to try ten things to find the three things that work, right? \n\nSo the idea that agility is about speed is a complete fallacy because we might have to do nine things before we find the one thing that works. So if each of those things took two weeks, that's twenty weeks. And we did one thing. Well, why don't we just decide what those ten things are up front, look at them, and go, \"Let's do that one. Let's do number five and just do that one thing, and then we're done. We've built a product.\" \n\nWell, is that the right product? Does it have market fit? Are people going to buy it? Is it even the right feature? Does it actually provide value to the customers? We don't know any of those things. We could have just built the wrong thing. Lots of organisations fail because of assumptions. They fail because they think they're building the thing that they want, but they're not. They're not building the thing that the customer wants. \n\nMy favourite example was... I use this one a lot. Sorry, that they've been bought, so now the product sucks. But I was an average user of a product called Zoom AI, right? So this was an awesome product, and what it allowed you to do was multiple things. It was basically a calendaring tool, right? One of those calendaring tools, but its unique focus was on a kind of bot-based calendaring tool. So you could have a bot. I use Teams, so I had a bot in Teams that I could just go message and say, \"I want to meet with Simon at four on Friday. Go organise that.\" \n\nAnd it would email Simon and say, \"Simon, Mar wants to meet at four Fridays. Does this work for you? Yes or no? Would you like to pick some times that you and Martin have available?\" Okay, pick some times, and then it comes back. And that was that story. So it was a bot-based interactive. It was maybe a bit early, right? Probably the versions coming now with AI are going to make this a lot more effective, but it worked. \n\nAnd almost all of the other customers found that they didn't really use it that way. What they used it was as a calendaring tool: send people a link. \"Here's how... here's my free time. Go book a slot,\" because it was just easier, right? You didn't even have to write a message to someone; you just sent them the link. \n\nSo while they were Zoom AI and this AI story, they actually very much ended up just changing the whole company ethos and focus from that to Calendar Hero. And they were just another calendaring tool, but a very good one. They've been bought by somebody else now, and everything has gone crap. But, you know, you're really good; somebody comes and buys you, and then they absorb you and eat you, and now you're no longer good. \n\nBut that idea of completely changing not only your business, your focus, your company name is around why is your market fit? And what a lot of big organisations fail to realise is that their market changes. It's not that they fail to realise it; it's that they don't understand how to take advantage of it because they build up rust, right, in all of the bureaucracy that builds up around the organisation. We shouldn't have a lot of bureaucracy. If you have a lot of bureaucracy in your organisation, you're doing it wrong, right? That's all. You're not able to respond to market changes quickly enough if you have a lot of bureaucracy. \n\nLocal optimisations, right? So this comes back to that idea of agility is not equal to speed. The purpose of agility is not to go faster. If you think you're going to do Agile to make you go faster, you're wrong. It's not going to work that way. If you have three hundred things to do, it's going to take three hundred things' worth of time to do, whether you do Agile, waterfall, whatever. You've got three hundred things to do. \n\nThe way Agile makes it seem like you're going faster is maybe you don't need three hundred things; maybe you only need one hundred things. That's how it might seem like it's faster because we do one hundred things, and we're done, right? Think of the Sentinel project, right? That's the big famous one. That was the US FBI records-keeping system. In 1995, a brand new system was delivered. It was green screen with terminals, right? We all had Windows 95 at that point, and they realised it was obsolete the moment they shipped it. \n\nSo they started working on the new version, Project Sentinel, right? And they had money from Congress—so $400 million. And I can't remember the company; it might have been Lockheed Martin that was building it. And they spent four years, $400 million, and at the end of that, they didn't have a working product. No working product. So they had to go to Congress, get more money—$300 million, five years spent, $300 million, another five years, no working product, right? Not very fast. \n\nGot to, I don't know, 2012. They'd been going for nearly ten years. This project had been going for nearly ten years, maybe 2005. Anyway, nearly ten years, and they decided to quit the whole thing. They took the best people out of the group that they had building it. They hired them. The FBI physically hired the people, set up scrum teams in the basement of the Hoover building. So they had about forty people, went from four hundred people to forty people, and they delivered to production within a year. \n\nSo you could say that they went faster, but they didn't go faster. They just didn't try and build the whole thing. They just built the first piece, right? They got to production within a year. That's the speed that we're talking about. We're not actually talking about delivering what you thought you were going to get faster. You're going to get a better product in the same amount of time. \n\nSo the best way to think about it is if we have a... let's say it costs $10,000 per sprint. We've got $100,000; we can do ten sprints. We can do five things per sprint. Do we just do these fifty things we decide up front, or do we figure out as we go which fifty things are the best fifty things to build? We've still spent exactly the same amount of time, but we have a better fifty things that we've delivered. We've got fifty of the right things than just the fifty things we thought we needed at the start. And that's why Agile is not about speed."
  },
  {
    "id": "BAwBXYtKj7o",
    "title": "Technical Debt Management for Long-Term Quality",
    "description": "Discover how automated testing transforms software engineering, reducing errors and speeding up feedback for high-quality, efficient delivery.",
    "captions": "Automated testing is extremely important to our ability to use modern software engineering to benefit our organization and increase our profit, increase our margins, increase our capability, and deliver better quality, higher value software to our customers. \n\nAutomated testing comes in lots of different flavours, and I'm definitely going to stretch the term automated testing maybe from your traditional concept. One of the things that automated testing does is it reduces human errors. You would think I used to teach a training class; I still have it on my list of things for manual testers to use as your DevOps test tools. We had labs in it. You would think that if there was one group of people that were awesome at following a set of steps and validating whether they worked or not, you would think that a group of testers would be that magical group of people that would be able to do that. \n\nIt's absolutely not the case. Most of the groups that were doing the labs failed to follow the steps and resulted in the lab not working. This lab doesn't work, right? And it's like, yeah, it does. Did you follow all the steps? Yes, yes, yes, we followed all the steps. Then you sit with them, and they walk through it, and I'm like, you missed step four. You didn't do step four, or you didn't do the second part of step four, or whatever it is, right? You didn't follow the instruction. \n\nThis is just a human thing; this is not an assassination attempt on testers. It's just how humans work, right? So you cannot expect somebody to follow a set of steps and do it the same every time. That's not how humans function. That's how computers function. So we want to take those things that make sense and convert them into automated tests. \n\nNow, we're not looking for a particular level of code coverage, although no code coverage is probably bad. Chasing code coverage is always a bad idea because you'll just have lots of people writing terrible tests that get you good code coverage but don't actually validate your product, right? So don't chase code coverage or test coverage, but it is a way for us to get faster feedback. \n\nWe want to have fast-running automated tests that we can validate the changes that we make on a continuous basis. TDD results in some of those, right? Some tests out of TDD are like that. Most tests out of TDD validate that at least the product does what the software engineer intended it to do and validates that we've got an architecture that probably is a little bit better. \n\nThat's hopefully part of that testing mode, but the value in automated testing is it happens the same every time. You do need to balance this idea of test infrastructure, right? Because when we write test automation, we have a body of tests, and whenever we make a change to our product, it's going to have an impact on those tests. \n\nThere used to be a great feature in Azure DevOps that had something called test impact analysis, and you could make a change in the code, and it would tell you exactly which code paths had changed and tell you which tests were impacted. I think there were a lot of false negatives, which is why it's not well thought of, but it was a great idea, right? A great idea. How do we know what tests we need to run? Well, let's look at what's changed and what the tests hit, and are we missing something, and which tests need to be rerun in order to reduce your test matrix? \n\nBut because that fundamentally doesn't work because of complexity, right? That's what got in the way: the complexity of software engineering. We need to run them all, which means they all need to be super fast. We need unit tests, not end-to-end tests, not integration tests. We need unit tests that run really, really quickly and thousands of them in milliseconds. \n\nThe Azure DevOps team moved from long-running end-to-end tests to fast-running unit tests and took their test strategy, their test infrastructure, from 72 hours down to 3 and a half minutes almost to run their entire test infrastructure. That's what you're looking to be able to do, and there's something like between 60,000 and 100,000 tests being run to validate that their product still works. \n\nThat's the story that you're looking for. You're looking for small, lean, discrete tests that don't have an impact across the entire platform so that when you make a change in this part of the system, you only need to change the tests in that part of the system. All the other tests should still pass because you've not broken what they're expecting in other parts of the system, and it gives you a good indication. \n\nSo having this tight test infrastructure, shifting left as much as you can, can and automating everything. The phrase I usually say is if it can be automated, it should be automated, and if it can't be automated, it should be refactored so that it can, right? Automate everything. You should not have any manual steps between developer cutting code and production. \n\nThe only thing that I'd say was a valid place where you put a human between those things is maybe an approval, but I would prefer for those approvals to be automated. Right? On what basis does this human decide whether we're a go or no-go for release? Well, they look at this data. Well, we can automate that. They look at the calendar, and they only do it on these days. Well, we can look at that. We can say we only release on Monday mornings, right, to give us maximum amount of time to deal with any problems. \n\nNever release on Friday; don't do that. CL strike did that; don't do that. We can do all of those things. We can automate everything so that we have that engineering excellence, modern software engineering excellence built into our entire story so that we can then spend the time that we would have spent doing all those things manually and fixing all those problems focusing on delivering the value that's going to generate the revenue that we need to grow and create more. \n\nThat's what we should be focusing on, and test automation is a huge part of that to reduce the number of problems that make it through to production, to reduce the amount of time it takes to detect that you've injected problems into the system. We can help you create those strategies, build that engineering excellence within your organization, and ultimately build better."
  },
  {
    "id": "BCWiKTm8hjg",
    "title": "The Power of Charity in Agile: How Helping Others Elevates Teams and Organizations",
    "description": "Discover how the virtue of charity can transform your Agile approach, fostering team success and community support. Watch now for powerful insights! 🌟",
    "captions": "One of the key agile virtues is charity, and that manifests in our world as things like being willing to help each other for no specific gain. Right? I want to help my colleagues on the team because it helps us all, not because I get something out of it. I want to be looking at making sure that my team is successful, that my product is successful, that my company is successful, and I'm not necessarily doing it because I get my bonus. I'm doing it because it helps the people around me, that we're all better because of it, and that we're able to create the best possible products for our customers. That leads back to Dan Pink's autonomy, mastery, and purpose, right? I want to feel like the work that I do matters, and charity is part of that.\n\nFor example, I'm a Microsoft MVP. I don't get that MVP for paid work; I get that MVP for spending time in the community providing help and support to others for free. I do that both in the technical space and in the agile space. If you want to have a chat, you can go to my website and book a coffee, and we can talk about agile. We can talk about the things that are happening in your organisation, and if in half an hour I can fix your problem, that's great! We've had a coffee, we've had a chat, and you get something to try that might result in success. Right? I don't do that for direct remuneration; I do that because I like helping people. I like other people being successful. I want organisations to be successful in agile because that helps all of us, all the employees of the company, the entire ecosystem, and that's charity.\n\nIf you are having difficulty getting the most out of the Seven Virtues of Agility, then my team at Naked Agility can help you, or find a consultant, coach, or trainer who can. It's essential for you to find help as soon as you can and not wait. Use the links below to get in touch because you don't just need agility; you need Naked Agility."
  },
  {
    "id": "BDFrmCV_c68",
    "title": "7 deadly sins of Agile: Pride",
    "description": "Explore the dual nature of pride in Agile! Learn to harness it wisely while avoiding costly pitfalls. Join Martin for insights on data-driven success. 📊🚫",
    "captions": ""
  },
  {
    "id": "BE6E5tV8130",
    "title": "How is agile product development different to waterfall project management?",
    "description": "Discover how agile product development contrasts with traditional waterfall project management in complex environments. Learn to adapt and thrive!",
    "captions": ""
  }
]
