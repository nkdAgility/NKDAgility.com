[
  {
    "id": "17qTGonSsbM",
    "title": "The Importance of Evaluating Direction: Are You Heading the Right Way?",
    "description": "Evaluate your project's direction! ðŸ§­ Discover how to make informed choices and adapt in a changing world. Join us for insights and guidance! ðŸ’¡",
    "captions": "So there's a quote from Lau which is, \"If you do not change direction, you may end up where you're heading.\" And I think that's absolutely a thing we have to be concerned with. We want to be continuously asking ourselves, are we going in the right direction? And that can be asked at many levels, right? I can be a developer building a product, and I'm writing code. Am I writing the right code? Am I taking this product in the right direction? Am I making the right architectural choices? Am I making the right security choices? Right? Because you don't want to head in that direction where you end up at the end of a product cycle, you're shipping your product to a bunch of users, and there's security flaws, and there's usability issues, and there's... because we've not been heading in the right direction.\n\nAnd that's also true at the product owner level, right? Are we building the right features in our product? Are we going in the right direction to maximise our ability to provide benefit in the market and thus have lots of people use our product? And it also works at the organisational level. Are we as a business focused on the right vision? Are we going in the right direction? And quite often, lots of organisations head off the cliff and don't change direction, right? They forget to look at the data. They forget that the world is ever-changing and ever-dynamic, and that where you thought you were going might not be the right place for you.\n\nThere's a great example. It's a product I use. It used to be called Zoom, nothing to do with the video conferencing tool, but it allowed you... it was basically an AI assistant that would help you with booking your meetings. So you could add them on Teams, you could add them on whatever chat platforms you've got, and I could just message it and say, \"Set me up a meeting with Satia at 3:00 on Thursday,\" right? And it would go off and it would email Satia and say, \"We've got this meeting to set up. How would you like it to be? You want to pick your valid options?\" And it would figure out from everybody's valid options what's a good time to host that meeting, and then it would just book it, right? It would book it straight into your calendar.\n\nBut they realised that that's not how people use their product. Most people that used their product just went to the website and booked through the website, right? They literally went, \"New meeting, here's who I want to attend, submit,\" and that would go off and do it. So they weren't going through the chatbot, so the chatbot was largely irrelevant to their business outcome. The thing that they were delivering that people were using was largely irrelevant. So they actually changed their whole business strategy in order to fit how people were using their product, right? They were taking advantage of an opportunity that arose. Instead of heading in the direction that they were heading, they pivoted. Maybe not far, right? But they pivoted over to a different direction, and they actually renamed their entire organisation. They reasserted all of their interfaces and stuff around this. This is the paradigm that people are actually using in our product.\n\nAnd that's something that lots of organisations don't do. What's a good example of things not happening that way? Oh, I'm not going to remember the dude's name, but the dude that was doing the high jump. Everybody at the time was doing the high jump one leg first, right? And he started doing it. He was the first person to start going backwards, doing the backflip over the high jump, and he was winning gold medals and totally outing all of the competition, like going far higher than everybody else for ten years before everybody else went, \"Oh, actually, maybe we should do it that way. Maybe that's better. He seems to be getting better results.\" Why does it take ten years? Because this is the way we've always done things. We're going in that direction, and we like to keep going in that direction. That's our comfortable, is to keep doing the thing that we've always been doing. And perhaps keeping doing the thing you've always been doing is going the wrong way.\n\nIf you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "1AO6FFBlE4Y",
    "title": "The Hidden Costs of Poor Quality Codeâ€”and How to Turn It Into a Superpower",
    "description": "Discover the hidden costs of poor-quality code with Martin Hinshelwood. Learn how investing in quality boosts productivity and protects your brand.",
    "captions": "It's a lot more expensive than you think having poor quality code. There are lots of hidden impacts. The obvious stuff is the cost of fixing bugs, right? Because you've got poor quality and people find issues, and that cost gets exponentially more expensive the closer to production you get, right? More expensive to fix it with the customers. But you've also got the cost of customer support. That's obvious stuff. The things that people generally don't think of are things like brand reputation, right? What is the impact of poor quality on brand reputation? Not just poor quality in your product, but poor quality in the way you do things.\n\nThe most recent one is CrowdStrike, right? They had poor engineering practices that resulted in a massive global impact when something went wrong. All they did was what lots of companies do, which is push something to production and didn't really think about controlling the blast radius or any of the other modern engineering practices that they might have. So you've got loss to your brand. You've got productivity of your team, right? If everybody's got to run around trying to figure out what the problem is because it's too difficult to figure it out, then you're going to have a massive loss of productivity.\n\nNot just productivity. There are lots of engineering practices that people use that reduce quality, but they don't think it reduces quality. One of those is branching, right? Having a really large branching strategy. I worked with a company recently that had 96 teams, and they had 96 long-running branches, one for each team. Then each team created their own branches of that. The cost in lost productivity to maintain that, to ensure that you have a working product, is just enormous. Add to that if you're maintaining multiple versions of your product, right? This is a massive cost. \n\nIn general, you should not be maintaining multiple versions of your product. You should not be supporting multiple versions of your product. You should be supporting the latest version of your product and not anything else. In general, I can think of circumstances where I might have two versions of my product or maybe three at absolute tops. But if you have more than that, perhaps you have a version of your product per customer. That's a very common one. That's a massive cost, not just to support and maintenance, but in lost productivity.\n\nIf I'm a developer and I fixed a problem, I fixed a bug, right? Let's take that as an example. I fix a bug in the main version of our product, the latest version of our product, but we realise that it's in lots of customers' versions. Maybe there are 10 customer versions that have this bug. Can I fix it the same in all of those versions? Probably not, right? Because they diverge over time, and perhaps things that I used to fix the product as part of the fix in the main version aren't there in older versions, or it's slightly different, or it's not quite the same version. All kinds of that increases the cognitive load on the engineers. It increases the likelihood of something going wrong because you're increasing that cognitive load.\n\nAnd because you have to backport all of those fixes across all those different versions, what's the cost in missed opportunities? Because your team's having to mess around with lots of work that is avoidable. I'm going to put that in there. These are all avoidable losses in productivity. What are the missed opportunities for your business? What features are you not able to ship because it's harder for you to add features? A great, fantastic example is some data from the Azure DevOps team. The Azure DevOps team had a very long tail on figuring out whether they'd been successful in building the product, right? The engineers had been successful in the code that they write and having the test and validation of those things done, and it was taking 48 to 72 hours to figure that out.\n\nThey invested a bunch of time and energy in paying back poor choices they'd made in the past, some of them deliberate. That's okay, but poor choices they'd made in the past and things they didn't realise were poor choices in the past that they now realise were poor choices. Paying that back took them nearly four years of investment in that story to fully pay it back, right? You know, just like if you take out a loan, you pay it back over a longer period of time, a little piece at a time. So they were paying it back as they had time. They were prioritising it, so it was important to them. They were spending time on it, but they were also doing other things, so it's getting done over time.\n\nSo it took them four years to pay it back, but that, plus fixing that problem, refactoring that problem, re-architecting that part of the problem, so they went from 72 hoursâ€”that was the longestâ€”to find out whether you'd broken stuff to three and a half minutes, right? So that's a massive shift. Shifting from long-running system tests to small discrete unit tests as their measure of validation massively impacted their productivity. They went from 25ish features to production each year with 650 people to over 800 features to production with the same 600 people. Not quite the same, right? Because it's four years' time, but more or less the same 600 people.\n\nEven in the first year, when they had a really big focus on paying that back, although there was a long tail, a really big focus on paying it back, they spent most of their time in the first year focusing on fixing a lot of these types of architectural problems. They weren't focused on features, and they still managed to go from 24 features to production to like 60-something features to productionâ€”almost three times the number of features were delivered to production at the end of the first year, and they weren't even focused on delivering features. They were focused on building up engineering excellence, fixing those older problems that had crept in over time.\n\nYou know, it's like 15 years working on this product, and it had this massive, massive boost to not just productivity, right? The productivity of the team, but brand reputation went up because you're delivering more features, more experiments, more things that your customers need. You're missing fewer opportunities, and you're having fewer security breaches because if we're iterating much more quickly, which is what you're trying to do, is reduce those feedback loops. You can't leave security to the end. One of the main reasons that companies get large-scale, high-cost security breaches is that they leave security as an afterthought. It's not baked into the process.\n\nIf security is an afterthought, you find a problem in the way you've architected your product. It's a lot of work to go back and fix that, so most people in teams don't because it may be hundreds, thousands of hours to go fix it. Or we could get out the sticky tape and super glue and stick over the top and create something over the top that prevents the hackers from getting into that flaw. But hackers spend copious amounts of time figuring out how to peel back the edges of those sticky things and get underneath and get access to the system.\n\nSo by paying back this technical debt of increasing the level of quality in your product, you have all kinds of exponential benefits to your ability to deliver product to your customer, the happiness of your customer, and you're able to not just reduce costs. Technical debt is not just a cost; it's a missed opportunity. Right? What money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "id": "1CCv95gd_oU",
    "title": "Agile in Nigeria 2020 - Emotional Intelligence & Team Performance with Louisa Mensah",
    "description": "Join Louisa Mensah as she explores the impact of emotional intelligence on team performance in Agile environments in Nigeria. Discover key insights and strategies!",
    "captions": ""
  },
  {
    "id": "1cZABFi7gdc",
    "title": "Hiring the Right Agile Coach: What You Need to Know",
    "description": "Discover key insights from Martin Hinshelwood on hiring an #agilecoach in part 4 of our series. Make informed decisions for your #agile journey!",
    "captions": "If you're hiring an agile coach, make sure you take a look at their track record. What have they done in the past? What organisations have they worked with? Is it within the same context that you're in? Is it the same scale that you're in? Do they have references? Is there somebody you can go speak to that they've worked with in the past that can tell you about how they do the things that they do? \n\nSo, in order to maximise your ability to move towards a greater degree of agility, you need a coach with experience."
  },
  {
    "id": "1ePkQeCVAlY",
    "title": "What is the difference between resource efficiency and flow efficiency?",
    "description": "Explore the vital differences between resource and flow efficiency in modern workplaces. Unlock strategies for a happier, more productive team!",
    "captions": "Oh, that's a great question. So, the question is what's the difference between resource efficiency and flow efficiency? And first off, I do want to say that most organizations and most teams focus on resource efficiency. That's where you worry more about your access to materials, with people being considered materials in this case. Right, people are resources, and we want to optimize the amount of time that they spend doing the thing as if they're machines in a factory that you're paying a rent for, right? You're paying maintenance for, and you want to maximize the output of that machine.\n\nUnfortunately, in our world of complexity, we're not doing the same thing over and over and over again like a machine does, so we can't optimize with patterns in that way. I mean, there are patterns we can optimize with, but not in the same way that we can with machines. So, when you focus on resource efficiency with a group of people, you end up with feature factories. You end up with unhappy people. You end up with high staff turnover, right? Because people don't really care about your company. They don't really care about what you're trying to do, and they feel like you're not rewarding them for the expertise and capabilities they're bringing to your organization. So, they'll be like, \"Well, I'll go somewhere else that's offering me more money,\" or \"I'll go somewhere else because I don't like you anymore,\" or \"My boss sucks,\" or whatever it is.\n\nWhereas in a flow efficiency environment, you're looking holistically at the flow of work through the system rather than optimizing any particular resource. A great example of that, I think, is in organizations that have sales teams. Quite often, they optimize sales for leads and more work coming into the system, but you don't actually have the capability to deliver that work in the system. So, sales is overselling, and then the engineering teams need to suffer because they have to try and deliver within the bounds of that world of, \"We're under high pressure. We can't actually solve the problems that we want to solve. We've just got to get stuff out the door, get it done, get it finished.\" And that doesn't breed happy people or, you know, it doesn't break the craftsmanship or craftsmanship. I don't know if that's a word, but that idea that I want to be good at what I do. I want there to be value in what I do. I want to understand what it is that I'm trying to achieve and why it matters, right? What's the work I'm doing, and how does it matter to the overall organization?\n\nSo, flow efficiency tries to look at holistically across the flow of work, right? Are we optimizing in the right areas? Are we able to see that when we increase theâ€”what would you call it? If we optimize this one resource, what effect does it actually have on the rest of the system? Right? What effect does it have down the line? If we optimize for software engineering, the developers are churning out stuff, and we've got testers as a separate entity here. Are they then overburdened? And then it looks like they're the problem, and we're all blaming the testers for not getting stuff done.\n\nSo, flow efficiency is about looking holistically across the system, understanding the flow of work through that system, and how do we optimize to maximize the value that we're delivering through the system. Resource efficiency is looking at how do we deliver more stuff. We just need more stuff, right? Whether that's projects finished or it's widgets in a factory or whatever it is, that's resource efficiency versus flow efficiency."
  },
  {
    "id": "1M2_AVqoRbs",
    "title": "Technical debt costs you more than you think",
    "description": "Discover the hidden costs of technical debt and how it impacts your projects. Learn more at nkdagility.com! #agile #projectmanagement #technicaldebt",
    "captions": "Technical debt is not just a cost; it's a missed opportunity. How much money are you leaving on the table because you haven't had the ability to tackle those opportunities? You haven't had the ability to try those things. This is fundamentally why having a high-quality, usable, working product on a regular cadence is a superpower for your teams and for your organisation in your ability to deliver value."
  },
  {
    "id": "1TaIjFL-0o8",
    "title": "What is the most common epiphany in a PSM II course?",
    "description": "Discover the key epiphanies from the PSM II course that transform Scrum Masters into advanced professionals. Elevate your agile skills today!",
    "captions": "So what is the most common Epiphany in the PSM2 course? I think there's more than one, and I think it depends on what level you're playing at when you come into the class, which Epiphany you get.\n\nSo probably the biggest Epiphany is the realisation that the Scrum Master is not just focused on the team. That's the big Epiphany for most folks because I think, even though it's very explicit in the Scrum Guide, it absolutely states here's the Scrum Master's accountability to the team, and here's the accountability of the Product Owner, and here's the accountability to the organisation. Most people seem to forget or kind of gloss over that bit for the accountability for the organisation. \n\nWhen we start kind of double-clicking on that and expanding it and figuring out what the implications are of those accountabilities for how the Scrum Master purports themselves within the organisation, I think it changes that dynamic. It expands those ideas, and they really have that realisation that they perhaps need to be doing more, that they need to be poking at some of those, asking difficult questions. Right? That's something that I find is very important as a Scrum Master. \n\nEven if all that difficult question is, is why? Right? Something happens a particular way in the organisation that is getting in the way of the team. Why? Right? Because you do find, depending on the organisation, that there can be rules in place that are ancient rules. \n\nI have been doing a little bit of digging recently on the Royal Bank of Scotland, and they have these rules in place for how their teams work. But there are 200-plus-year-old bank rules, right? There are rules in place because they were a great rule 100 years ago for whatever context they were created in. But are they still relevant today? That's kind of like your organisational package and your organisational craft, and who's going to take care of that? Who looks at that craft? \n\nSo I think that that's one of the big epiphanies at that level. Then there's the meta Epiphany in the PSM2 that I think is really important for those people in the room that are also facilitators. So they kind of get a double Epiphany, and that's how to engage with people and have more people participate in the discussions. \n\nLike, how to become a two-dimensional Scrum Master rather than that one-dimensional of just looking at Scrum. How do I start bringing in additional tools and practices in the way that they do things and demonstrate their own behaviour in order to facilitate change of the people and participation in the events?\n\nThanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility."
  },
  {
    "id": "1VzbtRspOsM",
    "title": "How Immersive Learning Transforms Aspiring Agile Leaders",
    "description": "Discover why the PAL-E immersive learning experience is essential for aspiring agile leaders, blending scrum training with hands-on coaching for effective transition.",
    "captions": "I think it's very difficult for aspiring agile leaders to get the time and the space needed to have a lot of the conversations that really need to be had in the leadership space in their organisation. The P.E. is a fantastic class that enables that space to have those conversations but doesn't necessarily always result in space to actually do the things differently that you want to do or practice the things that you want to practice. \n\nThat's where taking the traditional P.A.L.I. class and exploding it into a six-week immersive class enables more time for people's thought processes, right? To adopt some of these new ideas, for people to try things in between the class. Specifically, the assignments would be something that they're definitely going to try. They might try other things that we talked about in the course, but the assignment is a specific thing: here, go try this, go figure out how this happens in your organisation. \n\nThen bring that back around into a group of their peers, whether it's a public class and there's leaders from lots of different aspiring leaders from lots of different organisations, or it's a private class where you've got the leadership for your organisation in that private class. That coming back around and debriefing those assignments, and also being able to, if you did try other things, being able to ask those questions at that point. \n\nThis is, I tried this, we looked at this idea and it didn't work. We tried to do this level of delegation. How do we do this differently so that we can get more buy-in from the people that are doing it? That collaborative experience is really the why the P.A.L. immersive class is such a great fit for people who are in management or leadership positions inside of their organisation and they want to adopt those agile ideas that they see organisations out there, people out there being able to do and getting so much value from. \n\nHow do we get the same value in our organisation from those conversations? How do we change the way we do things to enable the people in our organisations to take more accountability, to take more ownership of the things that they're working on, to be more invested and connected with the work that they're doing? \n\nThe P.A.L.E. class is an experience that allows you to understand how all of those things are connected together and perhaps reflect on the way your organisation currently does things and how that might inhibit the ability for teams to maximise the value that they deliver to stakeholders, your customers, your stakeholders, your leadership. \n\nIf you want to have a discussion about how immersive classes can revolutionise your training experience, then please book a call on our website. Alternatively, you can find all of our public immersive classes listed there as well, and we would love to hear from you."
  },
  {
    "id": "2_CowcUpzAA",
    "title": "The Real Scope of a Product Owner: Beyond the Backlog",
    "description": "Discover why training is vital for product owners in Scrum. Martin Hinshelwood highlights the skills needed to excel and gain a competitive edge.",
    "captions": "[Music] Most product owners or people that have been given the role or accountability of product owner don't really comprehend the breadth of the product owner role, and it's generally sold to them or told to them as being focused on creating a product backlog and making the team work through it. That's a very small part of a product owner. A product owner is really an agile product manager, right? They're a product manager that has a bunch of additional skills and understandings that are encapsulated a little bit in the accountability of the product owner in Scrum. \n\nIt's really important that product owners understand the breadth of the possibilities of the product owner role, what it is they're supposed to be looking at. I find that quite often most people who come to a product owner class realise that they don't want to be product owners because it's a lot bigger role with more actual accountability than they really realised it was in the first place. \n\nA product owner is accountable for spending the money, right? A product owner is accountable for that. Even if as a product owner you only have control over ordering that product backlog, maybe you can't even delete stuff from the product backlog, maybe you can't add new stuff that you come up with yourself, but you're just ordering that product backlog, then you're controlling the budget. You're deciding when we deliver each piece of functionality, and that's really powerful. \n\nIf you can then gain the ability to remove and add things to the product backlog, you're then going to be hopefully more effectively spending that budget. For a product owner, that means a lot of things. What do you think a product owner needs to do in order to maximise the value of the work done? We're going to put stuff in the product backlog, the team's going to work through it, maximising the value of that work. \n\nWhat do we need to look at? What information do we need? What controls and levers do we need to be able to have those conversations? It's not just about focusing on the backlog and the team; it's not just about being a funnel for the requests from the organisation. It's about making decisions, placing bets, looking at probabilities of what's the most effective thing to work on, what's going to produce the most value now for the organisation or the most long-term value depending on your timelines and topics that you're thinking of delivering in the product. \n\nAs a product owner, you really need to be looking out into the future. You need to be looking at what's happening in the business, what's the trend in the market, how do I get to where I need to be in order that instead of me looking at my competitors and saying, \"Ooh, that's cool functionality, we should add that,\" they're looking at my features and they want to add and follow my trend that I'm setting for features and capabilities in the market. \n\nEffectively shifting your product from following the market to leading the market, and in order to do that, you need a clear picture of a lot of information. You need access to levers within the organisation to be able to change what you're working on based on those needs and that understanding. What's the next bet? What's the next hypothesis that you have for something that you think is going to provide value, and can you invest in it? \n\nThat takes a lot of building relationships, understanding the business and the market that lots of people don't understand as part of the product owner role. So if you want to be a product owner, just coming to a training class is not going to help you be the best product owner. \n\nOkay, but a training class is going to help broaden the scope of your understanding of what that role is and what are the different tools and techniques that you can at least start with to start investing in some of those areas that perhaps you're missing. The value of coming to a product owner class, if you want to have a discussion about your unique needs or situation, then please book a call or visit us at Naked Agility dot com. We also have our immersive and traditional public classes on our website, and we'd love to hear from you."
  },
  {
    "id": "2-AyrLPg-8Y",
    "title": "Why is training such a critical element in a manager or leader journey?",
    "description": "Discover why training is essential for managers transitioning to agile leadership. Join Martin in this insightful short! Watch now: https://youtu.be/W3cyrYFXDfg",
    "captions": "Evidence-based management class to help leaders gain additional skills on top of the awesome ones they already have to help them be as effective within the context of AG as possible."
  },
  {
    "id": "21k6OgxeKjo",
    "title": " shorts 5 kinds of Agile bandits. 5th kind",
    "description": "Discover the 5 Agile bandits with Martin Hinshelwood, featuring the toxic product owner. Learn how to tackle these challenges in your team! #Agile #Scrum",
    "captions": "Have you ever worked with a product owner who really, really should have been a project manager? Where they're focused on work breakdown and delivering to time and task with a Gantt chart? If you have, you've encountered an agile bandit product owner. It creates lots of negative impacts for the team. They don't care about the work; they're just interested in their tasks, and they are not a connected, engaged, empowered team. That way lies agile banditry. Stop it."
  },
  {
    "id": "220tyMrhSFE",
    "title": "Kanban principles",
    "description": "Discover the core principles of Kanban and enhance your Agile project management skills. Watch now! #agile #kanban #agileframework",
    "captions": "There are three core principles of Caman. To keep it really simple, there's defining and visualising your workflow. That's like creating your rule book as a team. How are you going to function? What does your system look like? \n\nSo, defining and visualising a workflow. The second core principle is to actively manage the items in the workflow. Now that you can see them, you can see what's going on. You have a visualisation, so you're going to actively take action. You're not just going to passively look at it; actively take action. \n\nThen, the third principle is improving your workflow. You want to make changes to the workflow in order to make things a little bit better, to make things flow better through your system."
  }
]
