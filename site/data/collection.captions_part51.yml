- id: sXmXT_MDXTo
  title: 'DevOps: Elevating Your Organizationâ€™s Performance Through Bespoke Solutions'
  description: Explore tailored DevOps consulting services in this video, uncovering how organisations can optimise practices for better software delivery and quality.
  captions: |-
    We've been doing DevOps for quite some time. It's really difficult to provide an overview of our DevOps services because our DevOps services tend to be bespoke for every single customer that uses them. There are some patterns, but there are not that many formulas that work everywhere. Every company is different, every group of people is different, and every outcome that they're trying to achieve with the philosophy that is DevOps is different. 

    But there are some patterns that do kind of make sense. One of those is a state of DevOps report. The idea is you want to understand, as an organisation, where we are based on modern engineering and DevOps practices. Where do we sit? Because it's difficult to understand where you want to go unless you know where you are right now. That's the first thing you do when you have a map and you're trying to figure out how to get somewhere; you have to find out where you are so you can then figure out what the direction to go is. 

    So that kind of state of DevOps, state of agile, where are we right now in our understanding of or our application of DevOps practices? We might talk about things like how products are being released. We might talk about what sort of tools are being used within that context of releasing products. I worked with an organisation that had 13 different source control systems in use for one product. There's a lot of waste there that can be identified. 

    What are we actually doing? How do we take the ideas that we've created in our product, and how do they actually get into production? Not just what leadership thinks is happening, but what's actually happening on the ground. We tend to interview a bunch of people in the organisation, usually trying to do solo interviews because people are more willing to speak when there's not somebody else present. This kind of anonymous information allows us to find out all sorts of things. 

    For example, I worked with an organisation where their team of 30 engineers understood branching, but they didn't understand automatic merging. So they were manually copying code with a text diffing between branches in order to merge code, which is just mental. I worked with another organisation that had built a custom tool because the business had asked for a capability. They built a custom tool that allowed product managers to pick features and create a build of the product that only had those features merged together into the product. 

    This might sound like a good idea if you're on the business side, but from an engineering standpoint, creating a cohesive, valid, high-quality, usable, high-value product is totally insane. There are all sorts of non-dysfunctional behaviours; I tend to call them opportunities for improvement because it's a little bit more positive. But the reality is they're dysfunctional behaviours that are really common in the industry and have been for many years because people are pushed towards solving a problem, and they don't necessarily know that there are known logical ways to solve that problem already. 

    Even if they do know about those non-logical ways to solve that problem, somebody in the business has an objection to it. A great example is automatic deployments. The objection might be that we're under Sarbanes-Oxley audit; we're Sarbanes-Oxley compliant, therefore we need a separation of developers from the people who do the releasing of the code. That means we can't have developers with access to production. 

    That's actually not true with Sarbanes-Oxley; not true at all. But because somebody believes it is, you then end up with these ideas where development and operations are separate. One of the biggest values that we bring, the biggest benefit that we bring to organisations when we're talking about the DevOps philosophy, is that ability for higher quality, more frequent delivery, and less friction in your ability to get software out the door. 

    Some of it's about ownership. If it's you, you have an idea, you're going to build that idea, you're going to deploy that idea, you're going to monitor that idea, and you're responsible for the upkeep of that idea, the support, and the continued value add of that idea. That should all be within the control of the group, the team. 

    So, IDE all the way through to deployment and closing those feedback loops should be part of that story, and that's very difficult to do within a lot of organisations. So what are the steps that you can take to get towards that? What are the tools that you can use to ensure that you meet the compliance that you need to meet in order to continue to meet your compliance but do these new things? How do you maintain quality? 

    How do you maintain the level of quality? If, for example, you're not doing UAT because UAT is a cost centre, not a value centre for software engineering, if your UAT is a value centre because it finds stuff and protects your business, then we've not got high enough quality delivery of our product. But if we create that high enough quality and UAT becomes a cost centre, we want to get rid of those cost centres. 

    How do we ensure that we don't end up in the same situation as CrowdStrike? There's a great example of an organisation recently in the news that caused massive disruption. I think they're going to be sued by Delta for 500 million dollars that Delta has lost over the week that they had a problem, which is partly their own problem with DevOps. 

    What could CrowdStrike have done differently? One of the things they didn't do was control the blast radius. You don't just deploy to production; you don't just deploy to 100 machines. I'm not sure exactly how many machines run at CrowdStrike, but you don't deploy to all of them at the same time. That's insanity. Even Windows, who have very high quality in the product that they ship, deploy to a small number of people first. 

    They control the blast radius. What are our lowest impact customers or customers that would be impacted the least by an outage? Deploy to them first. Perhaps deploy to our own systems first and run it for a few days to see if there are any problems, monitoring that feature and that capability that's being deployed. 

    Not deploying on a Friday; the best time to deploy is Monday morning when everybody comes in because you get a whole week to fix any problems. Deploying on Friday is probably not the best idea. There are all kinds of things that make logical sense and are within the context of this DevOps story that we can help educate, coach, and engage with your team, your engineers, as well as with your business and your leadership to understand what these things are, what value you get from them, and how you maintain your ability to control risk within this new world of continuous delivery to production.
- id: sxXzOFn7iZI
  title: 'Hiring an Agile Coach: What You Need to Know'
  description: 'Discover 5 key factors to consider before hiring an #AgileCoach in Part 3 of our series with Martin Hinshelwood. #Agile #Scrum #ProjectManagement'
  captions: ""
- id: syzFdEP1Eso
  title: Why 'Definition of Done' is Crucial for Success in Scrum
  description: "Unlock the secrets of defining 'done' in agile projects with a fun bakery analogy! Perfect for scrum masters and agile teams seeking clarity. \U0001F369\U0001F956"
  captions: ""
- id: T-K7HC-ZGjM
  title: What is a Sprint Backlog?
  description: Discover the sprint backlog's role in Scrum! Join Martin Hinshelwood as he explains its importance for teams and stakeholders in this insightful video.
  captions: ""
- id: T07AK-1FAK4
  title: 7 signs of the agile apocalypse. The Antichrist
  description: 'Discover the 7 signs of the #Agile apocalypse! Martin Hinshelwood reveals how fake experts threaten true #Agile success. #Shorts #AgileTraining'
  captions: ""
- id: TabMnJpXFVA
  title: Why are you going the immersive Scrum training route?
  description: Discover the benefits of immersive Scrum training with Martin Hinshelwood. Transform your skills in 4-8 day courses for real-time learning and growth!
  captions: ""
- id: TcnVsQbE8xc
  title: Reasons to do a PSM II Course in 60 seconds
  description: 'Discover why elevating your skills with a PSM II course is essential for scrum masters in just 60 seconds! Join Martin Hinshelwood for insights. #PSMII #Agile'
  captions: ""
- id: TCs2IxB118c
  title: Boosting Team Morale and Engagement Through Effective Mentorship Programs
  description: "Unlock team potential! Discover how mentorship boosts morale, engagement, and success in organisations. Transform your team's future today! \U0001F31F\U0001F680"
  captions: |-
    I don't know if you've noticed, but unhappy, sad people tend not to be engaged in what it is that they're doing. One of the metrics for whether you're going to have success in the future is the morale of the people that are doing the work. That could be people actually building the products, it could be the people designing the products, it could be the people managing the people, people that are designing the products. If we're sad and unhappy, we don't do good work as humans, no matter how much you encourage them to just be professionals and get on with it. 

    So we want happy, engaged, excited people. Part of what makes us as humans happy and engaged and excited about topics is if we have our intrinsic needs met. Hopefully, you're paying people enough in your organisation that they're not worried about extrinsic needs, like paying the mortgage or the rent or putting food on the table. Those are things that hopefully the people within your organisation are already able to achieve, which means if you've read Dan Pink's book, "Drive", the intrinsic motivators that really encourage us to do the best work we can are autonomy, mastery, and purpose. 

    Autonomy means us feeling like we're in control of our own destiny and we decide what we're working on. Mastery means we're good at what we do; we're being valuable, right? We're learning and understanding. Then purpose means the things that we do matter to others; they provide value in the space, and we can see the value that those things create. 

    Part of the thing that I think is most valuable about this idea of the longer-term mentor and training immersive programmes is that we're provoking discussion within the organisation. We're provoking thought leadership within the organisation. I found that the people within the organisation start becoming more engaged and animated in the particular topics. They start talking to other people in the organisation about the things that they've been learning, but also the things they've been discussing, the things they've been discovering. They start figuring out who in the organisation they can go speak to have a conversation on this particular topic. They're starting to get engaged and excited and animated about what it is that they're trying to do because they're starting to see how the work they do every day connects to the overall purpose of the organisation, even if the organisation doesn't yet understand the purpose that it's trying to achieve. 

    Lots of organisations don't have that overriding goal, that North Star that they're working towards. I'm working with a few organisations at the moment where the leadership hasn't even thought about that. "Oh, to make more money," which is not what everybody can get behind because it's making somebody else money. 

    Even knowing, especially this is especially true for the product management mentor programme, the things we talk about help those folks understand the need for those things. Their initial purpose becomes how do I engage with my organisation and help them create those goals and vision that this is what we're trying to achieve, that North Star. 

    I have a current mentor programme that's underway for product management, but I had a previous one that ended perhaps two months ago, something like that, for an organisation in the UK. About halfway through the programme, I got an email from the CEO effectively saying, Iâ€™ve not an exact quote, but to paraphrase what he said, he said, "I've never had a training programme that we've purchased as an organisation provide the level of engagement and excitement and potential change than the mentor programme did for product managers." 

    It highlighted to him because effectively one of the weeks, everybody was in Poland. From a time scale perspective, I think it was an afternoon session. In Poland, it's like two hours later. The product managers had their day in the organisation, then they'd had this class into the evening, so I take four hours of their time into the evening. There was a dinner organised with the CEO and all the product managers and some other folks. The CEO was expecting all the product managers to turn up tired and grumpy, you know, all of those things that you expect when they've just spent four hours doing this thing. 

    But when they came to the dinner, they were engaged in talking about the topics that we'd been discussing during the day. They were engaging the CEO in discussions about what it is that they would like to try and do, how it's different from what they've done before, how it might impact on the value that we create in the organisation. That engagement and excitement was enough to prompt the CEO to email me directly and say, "Well, this was great. I've never seen this before. This is fantastic." 

    That, obviously, for me, is a great outcome as well. We've actually done follow-on mentorship programmes for their engineering teams as well, where we've taken their engineering teams into a similar type of programme, same model. We did a product development mentor programme with two of their four teams in the organisation, and we've already started to see improvement in the teams, improvement in what it is that they're doing in the organisation and their ability to deliver and support the business. 

    I've seen way more instances of success with this type of format than I ever saw before with the traditional training, four half days or two full-day formats that have been delivered in the past. I've really only seen that work once really successfully in hundreds of trainings. That doesn't mean it's not been successful for people, but me being able to see and engage with this group of people over eight to fifteen weeks or perhaps longer, depending on the programme, and just have that continuous engagement, talking about those topics, has produced some fantastic results already from every single instance of running these programmes. Every single instance has created actionable outcomes for the businesses that have purchased it.
- id: tdOSrPOlyAI
  title: NKD Agility. Your Partner in Engineering Excellence
  description: Unlock engineering excellence with NKD Agility! Join Martin Hinshelwood as he explores quality, accountability, and technical leadership for your organisation.
  captions: |-
    Naked agility can be your partner in creating engineering excellence and technical leadership within your organisation. In the last few videos, we've talked about a number of different ways or things that we focus on that are part of that story. We talked about that high cost of bad quality, of mediocre productâ€”right? Not even mediocre, poor quality product. There's lots of poor quality products out there that have a massive cost, particularly in your brand recognition. Right? People don't want to use products that they have an image in their head to be of poor quality.

    We talked a lot about shifting left and the different components that we would shift left. Not just testing and test automation, but continuous integration, continuous delivery. We talked about user experience shifting left. We talked about security shifting left, architecture shifting left. All of these things need to move as close to the engineering team that's making the decisions, the people that are making the decisions and doing the work. All of those things, those skills, those capabilities, those need to be built up in those teams in order for you to move towards this idea of engineering excellence.

    Right? We need to not manage technical debt but pay it back. Deal with it. Deal with the technical debt when it happens. Own up to it when we make a mistake. Be transparent and open about what the problem was and what we're going to do about it. Build that culture of quality. Build that culture of engineering excellence within our organisation. Your purpose is creating value for your customers. Our purpose is value creation for you through building the technical leadership and engineering excellence that enables your value creation. And that's what naked agility can help you with.
- id: tfQltriMcFw
  title: Scrum Training 1
  description: 'Join us for Scrum Training #1, where we explore Scrum in action through engaging videos that enhance your understanding of agile methodologies!'
  captions: ""
- id: tKEl0YVeWv4
  title: Automate Everything - Building Reliable, Fast, and Scalable Products
  description: Discover how automation transforms software development, enhancing reliability and speed. Learn to build scalable products and outpace competitors!
  captions: |-
    Automation plays a massive role in enabling your teams to develop faster and more effectively. Right, automation is almost the thing that supports your ability to do that, and you should automate everything. If it can be automated, it should be automated. If it can't be automated, you want to do the work in your product to enable that thing to be automated. Right, so automated deployments, automated testing. I use Azure DevOps as an example a lot because they've done a lot of this work and hit a lot of these problems.

    One of the things that they started doing was they wanted to automate the changing of security. Right, so on every deployment, every security key, every certificate, everything is refreshed. Every environment, every server, you know, so infrastructure as code, everything is refreshed. So you never deploy; they never deploy to upgrade the version of their service on an existing environment. They build a new environment and put that in and take the old environment out. Right, and these sorts of automations enable you to continuously be as slick as possible. Right, and it means that one thing that's really important to understand is that humans suck at following a set of steps in the same way every time. That's what robots are for. Right, robots follow a set of steps continuously. That's what automation is. Automation follows a set of steps and always follows it the same way and always follows all of the steps. Right, so if you get an exception or you have a problem, there's a problem with the steps.

    Right, when humans are following a set of steps manually, for example, then you don't know whether the problem is with the set of steps or the problem is with the human following the steps, and that's a risk you don't need. It's absolutely a risk you don't need. So a great example of that is the Knight Capital Group in the US. It was a company in the US; they had 450 million in the bank at the beginning of the day, and they were doing a deployment of a new version of their system. A lot of things were not quite right; they were repurposing some code in their product. They were doing a bunch of silly things because they didn't have good quality, but they also were doing a manual deployment, and the engineer that did the deployment deployed to six out of the seven servers that they had.

    So the system then started behaving oddly because six of the servers had the correct code, and one of the servers didn't have the correct code. So if you can imagine a load balancing situation where you're trying to look at the system, it's not working, it's not functioning properly, but you can't figure out why because some calls are working and some calls are not, and it looks kind of random because it's the load balancer that's load balancing between the servers. It took them all day to figure it out, but they'd started losing thousands of dollars every second. And with 450 million in the bank at the beginning of the day, by the end of the day, they had to file for Chapter 11 bankruptcy. They were listed on the New York Stock Exchange, which is why we know what the problem was because they had to file that as part of their bankruptcy filing. That would have been prevented by automation. It would have been prevented by automated testing. It would have been prevented by automated deployment. It would have been prevented by automated checks.

    A more recent one that had a massive global impact was CloudStrike. Right, that would have been prevented by automation. It would have been prevented by automated deployment. It would have been prevented by automated checks. It would have been prevented by these types of capabilities that we're talking about. As you increase the number of deployments that you do, you're forced to deal with these types of scenarios. Right, how do I roll out to a smaller group of people so that I can figure out whether... One of my favourite quotes is from a gentleman called Brian Harry. Brian Harry was the product unit manager for the Azure DevOps team, so he ran that whole developer division at Microsoft for many years, and one of his mantras was that there's no place like production. You know, like kind of Dorothy type of thing, clicking the red shoes. There's no place like production. No matter how much testing you do, no matter how much validation, no matter how much money you throw at that, no matter how much time you throw at that, you're going to have production issues. You're going to have production issues because you can't simulate production. It's not fundamentally possible. You can do your best, and you can spend an awful lot of money trying to figure out how to simulate production as much as possible, but there's always gaps. It's not possible to simulate production, to simulate the type of transaction, to simulate what users do. It's not possible.

    So a better strategy than testing quality in is to build quality in. And if you're building quality in, you want to get that product in front of real customers in production as quickly as possible. I Google... Google does... No, Facebook. It's Facebook. I was thinking of Facebook. They do a really interesting thing where when a developer's rolling out their new version of the product, they have a point in time when a call into Facebook is executed twice. It's executed with the current production version, and then it's executed with the new version that's not in production yet. So it executes, executes, executes, executes, executes, and then they can turn up the dial and go from a small, like 10,000 users, up to 10 million users, up to 100 million users doing this. And developers can see the telemetry for what's happening with this. Is it performing well? Is it doing the right thing? Is it having similar... you know, comparing the output from the two?

    And what they actually do is they do it completely automated. So the time from a developer committing a new capability to it replacing this production capability that's there is, as I understand, about 12 to 13 minutes. And that's with a full test suite, full regression, full validation of do they operate the same way? Do they have the same output that we need? Do they work in that context? Do they perform and scale out across the entire platform in about 13 minutes? So they can have these small changes, small fixes go out really quickly. And then when they work on bigger things, perhaps they're using feature flags or they're using other capabilities.

    So automation, that's an automated process. Automation is absolutely critical to your ability and your product's ability to have fast, reliable... the fast, reliable ability to add features, fast, reliable ability to deal with problems, to deal with surprises and opportunities as they arise in your market.
- id: TNnpe02_RiU
  title: What is Your Peeve in DevOps
  description: 'Join Martin Hinshelwood as he shares his top pet peeve in DevOps consulting, drawing from his extensive experience in Agile and DevOps. #DevOps #Agile #Consulting'
  captions: ""
- id: tPkqqaIbCtY
  title: ' shorts 7 Virtues of agile. Kindness'
  description: 'Discover the power of kindness in Agile! Join us as we explore one of the 7 virtues that fosters collaboration and inspires high-performing teams. #Agile #Shorts'
  captions: That could be, you know, when dealing with bug reports or it could be just with engaging with them and talking to them about the problems that they're encountering and trying to solve within our product domain. Um, and we want to be benevolent. We want to be seen as we're providing them with something that helps enable them to do something else. If they see our product as a burden or they see our product as, um, I don't know what the cost version of burden is for me. Burden's broad and then there's a cost, like a cost centre. If they see your product as a cost centre, then, um, they're not going to think of your product with kindness. Um, and you're probably not thinking of them with kindness.
- id: tPX-wc6pG7M
  title: 5 October 2023 Agile Leader Webinar
  description: Join Dr. Joanna PÅ‚askonka & Martin Hinshelwood in this 18-min Agile Leadership webinar. Gain insights, strategies, and engage in an interactive Q&A!
  captions: ""
- id: tUC5TainG2E
  title: How did you come to be a preferred Scrum training supplier for Microsoft?
  description: Discover how Martin Hinshelwood became the preferred Scrum training supplier for Microsoft, empowering their agile journey in product development.
  captions: ""

