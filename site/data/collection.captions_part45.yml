- id: quFj6dy5M7E
  title: Building a High Performance Delivery Engine
  description: Join Martin Hinshelwood as he uncovers the secrets to building a high-performance delivery engine, blending Agile, Lean, and DevOps for organisational excellence.
  captions: |-
    Building a high performance delivery engine in your organization is super hard. We need to have expertise within our teams, within various contexts, and I think we mostly underestimate the level of competence that's required for the people participating in the software delivery process to build those high performing teams. A high performing delivery engine to get stuff out the door. We need not only competence in the technical tasks—that's usually what most organizations focus on—but we also need competence within the context of business, right? Business and business need, and how business works, and what business wants.

    Every member of the team should be a product developer. Well, every member—you're going to have some extremely unusual technical people who probably just want to focus on the technical side, but you want to have at least a high enough number of product developers rather than just software developers on your team. What I mean by that is that they're focused on product and delivering a successful product, which includes many different things, right? You don't just magically deliver a successful product. You need to focus on the right technologies. Do we have the right technical skills to be able to deliver this product? Do we understand the business need? Do we have the right hypothesis to be able to test our product within the market? Have we got the right market fit? Do we need to change the way we do things? This is every member of the team, as much as possible, thinking about these things as they're building the product, as they're developing features.

    And then you also need a keen understanding of the philosophies and theories behind these things. We're talking about Agile, we're talking about DevOps, we're talking about Lean, talking about Scrum, right? And mixing a few things in there. But we need to understand the core philosophies, theories, and practices that underpin these things so that we can apply them in a way that adds value to our organization, right? Because we're trying to deliver. We're trying to create a high performing delivery engine. We're trying to deliver lots of stuff and lots of the right stuff, or as much of the right stuff as we can. And for that, we need to be able to leverage the right emergent practices, right? The evolution of our practices over the life of the product lifecycle and how we pick the best stuff.

    And to do that, the people doing the work, the people managing the work, the people overseeing the work, all need to be practitioners, right? They need to be playing at the practitioner level to understand how those things influence it. I usually—the analogy I usually use is if you're renovating your house and you want to remove a wall, right? So we want to change the way we fundamentally do something and see whether it makes sense. Can we just knock down that wall? Well, no, we should probably do a little bit of due diligence. We should probably understand the structural integrity of the context. We should probably understand whether it's a good idea to remove the wall or is it a bad idea? And if it's a bad idea, is there something we can do to mitigate it so we can do it? Because we want to do it right.

    And you can absolutely remove any wall in your house, any wall in your house, with due diligence to the structural integrity of the building. The same is true when you're changing your business, when you're changing your team structure, when you're changing your system of doing work. You need to have the competence in your high performing delivery engine to build it in a way that enables you to maximize the value delivery to your stakeholders.
- id: qWHCBUwpOZk
  title: 3 core practices of Kanban. Improving a workflow.
  description: Unlock your workflow's potential with Kanban! Discover 3 core practices to visualise, manage, and continuously improve for peak efficiency.
  captions: |-
    The third most powerful practice in Kaman is improving your workflow. It's all well and good to have your visualisation so you can see everything that's going on. It's all well and good to actively manage the works through the system, but if your system's broken or your system could be improved and you don't do anything, that's not going to bode well for the future, right? 

    So improving the workflow, making changes to the system in order to maximise the flow of value through the system can help us prevent things like blockages and things backing up in the system, things getting old in the system. Once you've identified why those things are happening, you need to actually do something. You need to actually change the system in order to make those things more effective. 

    So many, so many, so many teams will just sit there and they'll understand that there's a problem with the system and they'll just say, "Well, we can't do anything about it. That's Bob. Bob is getting in the way and Bob is not doing something he's supposed to do in a regular cadence." 

    I worked with a team in the US and we had the Kaman board on the wall, right? And we couldn't change this part of the system, okay? Because it was our Kaman, but we had a dependency, right? That might be something you actively manage away. We had a dependency on somebody else and it was basically an approval state, right? So stuff would go through our system and then at this point it had to be approved and then it would continue through our system. 

    The person who did the approvals didn't want to look at the board every day, didn't want to approve stuff every day, so he did weekly approvals. He would, every, I can't remember what day it was, let's say it's Monday, every Monday he opens up the board, Monday morning, he opens up the board and approves the things that need approved. But what if we finish something Monday afternoon that sits there for seven days before it gets approved? 

    So what we started doing with our board was this: we were quite lucky, our board was on the wall in the main area of our business, right? In the corridor where everybody was going past, like everybody, the CEO, CFO, everybody would go past this board. And what we did was in that column, just at the bottom of that column, we started adding Post-its in there that listed financial numbers. 

    We kind of came up with a calculation. This was part of our actively managing how much does it cost for things to be sitting waiting to be approved. And we started putting that cost in there and those numbers would go up towards the end of the week and then they would go to zero on Monday and then they would start building up again and go to zero and start building up again. 

    We had a little graph showing that flow of that bad flow of work through the system and at some point that person whose job it was to approve walked past that board and kind of had a double take and kind of went, "What are these numbers?" And we just explained, "That's the cost of these items sitting there and waiting. That's our wait time cost." 

    So we thought we would put it on the board because this is where one of our bigger costs is. And what happened? That person changed their behaviour almost immediately and started checking every morning for anything that was blocked or needed approved. In fact, I think at one point they were checking every morning and every end of day so that everything was just flowing through the system. 

    And that was the single biggest cost benefit that that team had in a six-month period was reducing that cost of delay of things sitting there and not being approved when they were in fact valid, they were in fact approvable, i.e., they would be approved and just waiting. 

    So changing your workflow or creating a situation within which that workflow is changed is one of the three most important principles of a Kaman strategy that the things you have to have in Kaman. If you're struggling to implement a Kaman strategy, we can help or we can find somebody who can. Click the link below and get in touch.
- id: QWUUSbGXm94
  title: fortnite
  description: Join the battle in Fortnite! Discover epic gameplay, strategies, and thrilling moments as players compete to be the last one standing.
  captions: ""
- id: qXsjLuss22Y
  title: What is a sprint goal?
  description: 'Discover the essence of a product goal! Join Martin Hinshelwood as he explains its importance in aligning team efforts with customer value. #Agile #Scrum'
  captions: ""
- id: Qzw3FSl6hy4
  title: 'Understanding Product Discovery: Why It Matters More Than Ever'
  description: Discover the vital role of product discovery in shaping successful products. Learn how it differs from traditional development and drives innovation!
  captions: |-
    What is product discovery and why is it different from what we've always done? Man, I would say it's not different from what we've always done, but it also is different from what we've always done. So product discovery is all of the work that you do that's about planning for the future, right? 

    So if in order for a team to deliver some piece of work, you need to do a bunch of research or you need to create some designs or, um, or whatevers, right? Another team has to do something before it gets to our team. All of that, from our perspective, is discovery work. That may be work for the other team, right? But from our perspective, it's discovery work. It's discovering this item. It's making, um, ensuring that we understand that item as much as possible and not just focused on the items that we know we want. 

    Discovery also focuses on the items we don't know we want. So how do we find the things that are going to enable our product to be better? That's going to enhance our users' experience. That's going to, um, open up new markets, increase our user base. Um, those are all things that we would do as part of discovery. 

    Um, Scrum calls it refinement, right? Although I think refinement's probably a little bit tighter scope than discovery. Discovery is a lot bigger. Um, but it's something that we have always done. It's just not always been explicit. It's not always been something that we say, "This is that body of work." Who's accountable for organizing that body of work? And in the Scrum world, that would be the product owner, right? They're accountable for maximizing the value of the work done in the product. 

    But in whatever process you're using, somebody needs to be directing that. It's not necessarily okay for there to be no direction. So part of discovery will be figuring out what your goals are, what your vision is, and what your goals are. What is it you're trying to achieve as a business, or what is it that your product's trying to achieve? Um, what direction are you going? And then what are the steps you want to try and take to get there? 

    And then figuring out what do you need to do in your product to get there. Um, a great example, I think, at scale is the Azure DevOps team. At least when I worked with them a few years ago, the scale of that team, I think they were up to 90 plus teams at one point working on this one big product. So that's a lot of work to feed that engine that is delivering value. Those teams working together, hopefully highly effective teams, but teams. 

    So they set strategic direction at the high level, and then there's a bunch of discovery that has to go on at that level. Like, where are we going? What are we doing? What are we trying to achieve? Right? Think of it like portfolio. What are your value propositions for your product? How do you think you're going to be able to affect those? And then they come up with ideas through the structure. This is what we want to build and then send it to the next level down within that larger product organization and say, "This is what we're trying to achieve. You go figure out what's going to make it happen." 

    So then discovery launches again at that level. What do we think? Perhaps this is Azure boards, right? We're trying to help the business achieve this outcome. They're trying to achieve. What do we think we can do to help make progress towards that goal or those goals, right? Um, and then they might have 20 teams working on that idea. So they would create their level, like, what is it we think we're going to try and achieve? How do we want to move the needles? 

    Um, and then they're going to give that to the teams below, and the teams below are going to be like, "Okay, here's what we're trying to achieve," all the way up the chain, right? All the way up to the product vision. Um, what do we need to do to make progress towards those goals in that vision? 

    Actually, a really good example, I've got another example which is maybe more people have experience of, and at the holistic level, and that's the Windows team or Microsoft as a whole across many products. Um, has a strategic goal for six months, right? They, um, Microsoft calls it the season. I don't know if they call it this, right? But I, looking in, observing what they're doing, many people call it the season-based model. 

    Um, so they have a six months in a season, and they're looking out three seasons, current season plus two more, right? So that could be up to 18 months, but somewhere between six and 18 months, they're looking out. And one of the things that they wanted to go after, the market shares that they wanted to go after as a business, um, from their consumer products was creators. 

    So there are people writing books, there are people drawing pictures, there are people making music on computers, right? We want to go after that group of people, that market share, and we want to increase our market share in that space. So they created this idea of the creators update. That's kind of what they call it, right? That, again, they do a spring and a fall update across the board. That's kind of like that cadence of the season-based model, the six months. 

    So within that six months, they're overriding product goal, product focus across all of their products. Season focus is to, um, help creators create stuff. That's that overarching thing. And then each team, each group, each product group, and then each team inside of that that works under that story is trying to figure out what can we do to help further that. 

    So I remember the, the, I don't have one here, but the pen support folks in Microsoft moved from 255 pressure levels to 1024 pressure levels. That was one of the things they did. So that required the people who make the pen, the people who make the screens, um, the people who make the operating system, right, to all work together in order to work towards this idea of improving pen support. 

    And that was to enable artists and enable that. And then they have software that comes off that, and they create SDKs and all this thing so that other people can build products on top of that. That was one of the endeavors in that, and that was just for drawing on the screen or writing on the screen, right? 

    Um, that effort to all work together improved their market share, right, in the creator space. That's what they were trying to do. But then they realized during, right, they've got their three, six months, three seasons planned out. They just finished the creators season, so their product is shipped. It's everybody's 950 million people using Windows, and I don't know how many of them are creators, right? But they're getting feedback and telemetry and, uh, getting all that stuff. 

    And then they realized that they needed another creators update because they didn't quite move the needle as far as they would like. There was certain feedback, and then they're going to do that again. All of that is product discovery. So it's really big. It depends on the scale of your organization, right? How much, uh, how big the scope is. But that is the scope of product discovery that you and everyone in your organization should be focused on, from the lowest person doing the work all the way up through the business to whoever is in charge of that, whatever level you roll up to, right? 

    So that could be Azure DevOps rolling up to the head of Azure DevOps, um, but then it eventually rolls up to Satya, right? The CEO of the organization. And Satya has lots of products and lots of different parts of the business, from, uh, consumer-focused parts of the business to non-consumer-focused parts of the business, seven business-focused parts of the business. 

    So how do we enable and align all of these things so that we are an entity that's all working together towards these common goals, towards these common outcomes? And that is part of product discovery because you deciding what your product needs isn't necessarily going to create the best outcomes. 

    Because we're narrowing the choices to what you can imagine. If we expand it out to include all of the people working on your product, we are diversifying and perhaps generating more ideas for how we can solve these problems in more interesting ways and help our customers even more and open out new markets and new capabilities and new ways of doing things. 

    And that, yeah, product discovery is huge. It's huge, and it is very underserved in organizations. It's not very deliberate in organizations. Um, and that's one of the things, one of the reasons, uh, that there's a lot of shift in focus in the market towards product. Many teams are good engineering teams. They're good at building solid, usable, working product on a regular cadence. 

    Um, but if they're not provided with focus and direction, they're not going to go anywhere. If that focus and direction doesn't provide additional market share, additional market opportunities, then the investment goes away, right? There's only so long companies will invest in something that they don't feel like they're getting a return on. 

    So product discovery is all of those things that happen within the business in order for people to figure out what they're going to go build.
- id: r_Af7X25IDk
  title: Ep005 - Leading Agile Change
  description: Discover key insights on leading Agile change as Martin shares valuable practices from companies' journeys. Learn, adapt, and forge your unique path!
  captions: ""
- id: r1wvCUxeWcE
  title: Kanban Boards
  description: 'Discover the power of Kanban Boards for agile project management! Streamline your workflow and boost productivity. Visit nkdagility.com for more! #agile #kanban'
  captions: |-
    Really important part of visualising your work when you're doing Kanban is having some kind of Kanban board. Okay, you want to take the way your system currently operates. You want to think about the things that move across your board, things that will move through your system, and then decide what are the columns that need to move through.

    Now, the absolutely most optimal way to do that would be single piece flow: one item at a time to do, in progress, and done. But the reality is we don't all live in that perfect world; in fact, none of us do. So you're going to have to look at how your work flows through your system. What are the columns that you currently have on your board with the stages of the work? Come up with a board that represents that.
- id: r2G-NrSIj2k
  title: Code Reviews for Quality Assurance
  description: Reimagine code reviews with Martin Hinshelwood! Discover how automation and a shift-left approach enhance quality and speed in software development.
  captions: |-
    There are multiple schools of thought on code reviews. One school of thought is that code reviews help us improve our code quality and help reduce defects because we've got multiple eyes looking at the product. But I think that's only part of the story. As we shift left, another school of thought starts to come to the forefront, which is our code should be pre-reviewed. A code review, a person manually code reviewing our code, should not actually be required because our code should already have been reviewed by the time we submit a pull request. 

    That would then enable all of our pull requests to be almost totally automated, or as automated as we can get, so that the pull request process itself is not becoming a blocker to deliver value in our business. There are lots of different techniques and practices within the context of code reviews. I very much support and value code reviews and pull request systems that are in place in GitHub and in DevOps. 

    I would absolutely recommend that nobody is able to commit code to master or main without going through a pull request and without passing validated checks. But those validated checks should be as automated as they can possibly be within the context of your system. Naked agility has helped others and can help you create automations and practices and procedures that enable you to have the highest quality possible code and detect defects as early as possible.
- id: R8Ris5quXb8
  title: Talk us through the new Product Backlog Management course from Scrum.org
  description: 'Discover insights from Martin Hinshelwood on the new Professional Scrum Product Backlog Management course by @ScrumOrg. Watch the full video! #shorts'
  captions: It's an awesome, little class that helps us get to grips with some of the nuances of product backlog management. How do we make sure that we minimize the amount of things that are in that product backlog in order to maximize the value that we get from it?
- id: r9aCEFpUHWU
  title: How does the lack of basic skills among Scrum Masters impact teams and organizations
  description: Discover how competent Scrum Masters drive team success by bridging theory and practice, enhancing productivity, and delivering real business results.
  captions: |-
    When Scrum Masters don't have an understanding of both the philosophies, theories, and practices within the context of the team, and an understanding of what the team does every day, the impact on those teams and those organisations is profound. They're not going to improve. If you had a coach for a soccer team that didn't understand soccer, had never played soccer, how effective would they be at coaching that team in the processes and practices that you need?

    Now, immediately a bunch of folks are thinking, "But Ted Lasso did it." You've got to remember Ted Lasso is a fictional character, and that fictional character runs off a script. The script works because of plot. So he's a good coach, and a successful coach, sorry, because of plot, right? Not because it would work in the real world. Almost every successful coach for a sports team understands fundamentally how that sport works, the training, the specific training techniques that need to be done in order to maximise the capability of that team.

    If they don't, they have sub-coaches that help for a specific thing. Like, I think in American football, you have an offensive coach and a defensive coach, and then you probably have an overall coach. The overall coach might have a different skill set from the offensive and defensive coaches, but they have a fundamental understanding of the sport, its rules, the training techniques, the types of muscles that are used by the team, and how they can train those muscles to be as effective as possible. How they prevent injury, all of those sporty things.

    And that's what we're talking about when we talk about the competence of Scrum Masters. They need to understand if they're a Scrum Master for an engineering team, they need to understand all the engineering team things that the team needs to be able to learn, practice, and do change in order to become more effective. If that's not there, they won't change. If you have somebody who is just a professional coach, right, and perhaps taking a two-day Scrum Master class, typically what you will see is very little actual improvement in the team's ability to deliver product.

    They might be better at engaging with each other, but are they actually better at delivering product? Because that is what your business cares about. They want product. They want working, usable product that solves business problems. That's what we're here for. That's what we're paid for. That's the outcome they want to improve. Have these Scrum Masters actually improved? Is that what we're measuring at all?

    The lack of basic skills around Scrum Masters results in an organisation's continued status quo, which is likely an inability to deliver. This is why they brought in Scrum Masters in the first place, because building software is hard. Building products that don't exist yet is hard. Are we making the right bets? Are we using the right philosophies in how we build our product, how we design our features, how we get our features in front of our customers, how we engage with the rest of the business? Without understanding all of those things, we're not going to be able to help the team be effective.

    We're going to have them, I don't know, I'm being facetious, sitting doing some Lego team-building exercises and perhaps building a bridge with spaghetti and straws, right? Which sure, might be great for a team-building exercise like Myers-Briggs. I've done some Myers-Briggs exercises with teams I've worked on for organisations I've worked with, and it's a great team-building exercise, but it's of no value for delivery.

    There's only so much you can help a team from the context of the team working together more effectively, but there's a massive difference you can make by improving their knowledge. It's like in Lean; you can make a certain amount of impact by looking at reducing batch size. If you make the work items smaller, you're going to improve the flow. But your biggest bang for your buck is probably limiting WIP. That's where the highest percentage of a Scrum Master helping a team comes in.

    The biggest bang for your buck is that Scrum Master being able to teach the team new skills and capabilities that enable it to be more effective, enable it to build better products, to test more effectively, and have higher quality. These are the primary skills that you want your Scrum Master to have: knowledge and competence so that they can help the team.

    Once all of those are awesome, perhaps at the same time, right? But once all of those are awesome, the biggest bang for our buck then becomes because the team is already awesome at engineering. They have the best DevOps practices; they have the best architectures they can in their product. They have the most effective engineering systems. Then, if we enable the team to collaborate more effectively, we'll get more stuff, right? That's a small percentage of the overall effectiveness, and we get that from competence.

    So organisations are suffering because they don't have Scrum Masters that fundamentally understand the work that needs to be done and how to enable that work to be more effective.
- id: rbFTob3DdjE
  title: 5 tools that Scrum Masters love. Part 2
  description: "Discover 5 essential tools that Scrum Masters adore in Part 2! Boost your team's agility and performance with expert insights from NKD Agility. #Scrum #Agile"
  captions: ""
- id: RBZFAxEUQC4
  title: '7 deadly sins of Agile: Lust'
  description: "Discover why 'lust' for quick agile solutions can hinder transformation. Learn to tailor agile practices to your unique needs! \U0001F680\U0001F504 #Agile #Transformation"
  captions: ""
- id: RCJsST0xBCE
  title: Mastering Azure DevOps Migration - A Comprehensive Guide by NKDAgility
  description: "Master Azure DevOps migration with NKDAgility! Discover tools, tips, and best practices in this comprehensive guide. Unlock your potential today! \U0001F680"
  captions: ""

