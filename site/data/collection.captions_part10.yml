- id: 3AVlBmOATHA
  title: How would you help organizations pitch the opportunity of agile internally?
  description: Discover how to effectively pitch agile within your organisation and inspire teams to embrace its transformative potential for continuous improvement.
  captions: |-
    Foreign. How do I help organisations pitch the idea of Agile internally? I guess it depends whether you're managing up or you're managing down, right? 

    Um, so if you're managing up, i.e. you're working on a team or with a team or at some level where you're building products and you want to do Agile but your organisation is not yet there, yet is not yet understanding what the difference is or what the impact is, um, then having conversations with them in their language is the most important thing you can do. 

    Um, you need to, like, there's no point in talking about Agile or Scrum up the organisation because they're words that then you then have to explain, right? The other person's like, "Well, what the heck is this crap?" Right? I need to, you need to tell me what it is then, and you end up having to stop all the time. So you need to use their language. 

    So if you're talking to people with, uh, um, like a business value focus, then talk about, um, delivering more of the right things, less of the wrong things. Um, talk about, uh, responding to the market more quickly. I'll talk about, um, how to, um, deliver happier, more engaged customers, right? That's probably what they're focused on; that's probably what their metrics push. 

    But find out what their metrics are, right? What are they measuring as success in the business? And go look at that. If you're, um, business, if you look at those metrics and your business is a totally fiscally focused, right? Apart from just being screwed, right? You also need, you need to look at, um, what are the benefits from a fiscal perspective that you can get from Agile. 

    I feel like if your company's focused on just fiscal stuff, then that's not a good thing anyway, right? That's revenue extraction rather than value creation. But, um, that's, that's, you can only get to that conversation once you convince them. So you want to be talking about reducing fiscal risk. You want to be talking about, because quick, fast iterations of actual value they provide reduces operational risk, reduces fiscal risk. 

    Um, it increases the value that you've delivered, and in most countries, there are tax benefits to write down capital expenditures, right? For example, here's a simple argument: I'm going to spend, uh, uh, 12 million dollars capital expenditure to build a product. Um, at the end of 12 months, I'm going to deliver that product into production, and at that point, and like, I can start writing down that capital expenditure, right? From a tax perspective, normally you can only start writing down so it depreciates over time, right? You can write that down and claim tax benefits for it. Most countries, I don't know about all countries, but UK, US definitely have these things in there. 

    But if you remember in school when you do that, uh, um, compound interest calculation, right? And you're always looking at how big the money grows, the opposite is true for, um, writing things down. So at the end of, if you're delivering monthly, right, to production, it's costing you a million dollars a month on a 12 million dollar yearly gig. At the end of the first month, you can just, you can start writing down that million dollars. 

    And then at the end of the second month, you've already had a month of writing down a million dollars, and you start writing down the second million dollars. And then at the end of the third month, you've had two months of writing down the first million dollars, two, sorry, three months of writing down the first million dollars, two months of the second, and you're getting into the third, right? So you end up with this compound, right? 

    I've never met a CFO, um, who you can't convince that Agile's a good idea if you use their language. What data are they looking at? How could being more Agile shift those metrics? And use their words to describe it. So that's managing up. 

    Um, if you're in leadership in your organisation and you're looking down in your organisation and you're trying to figure out how do I, um, engage all of these people in this change activity in moving towards a different way of working, um, and the answer is get them involved in that process. You need to create an event whereby you're asking them what it is that we need to do differently, getting them to agree what the action steps are to move forward, getting them to choose the processes and practices that you're going to use. 

    Because only by them choosing it, them being involved, and them deciding will they care enough about the change to get behind it and support it and help, help, help make that change. Otherwise, they'll, they're not in, they don't care about your objectives, right? They care about their objectives. You have to make it their objective or help encourage it to be their objective. 

    So I use things like, um, open space Agile, and there's a concrete implementation called Open Space Beta, which helps with that as well. Um, so yeah, it just depends whether you're managing up or managing down.
- id: 3CgKmunwiSQ
  title: 'Understanding the Difference: Traditional Management vs. Evidence-Based Management'
  description: Explore the key differences between Traditional Management and Evidence-Based Management (EBM) in decision-making for better organisational success!
  captions: |-
    So I get a lot of questions about the difference between traditional management versus evidence-based management. I'm not sure the term traditional applies. It's interesting; I had a book on evidence-based management practices that I gave to my father about 10 years ago when he was asking me what the heck it is that I do. I gave him this book, Radical Management, and he read the book and he said, "Oh, that's what I've been doing for the last 40 years in my company." That's the type of things, trying to change the organization and move people in a particular direction and do all those things. 

    So maybe that's why traditional, like if people have been doing it 40 years ago, 80 years ago, then it's the common management, the normal way people approach things. Evidence-based management is hard. If we're talking about the differences between traditional, classic, the way most people do things, common cause, right? Evidence-based management is hard. Evidence-based management is we have to collect data, we have to read the data, and we have to make informed decisions. 

    Most management decisions are made one of two ways: make it up. I'm just going to decide. I'm the manager, I'm the boss, I will decide, and I make a decision, right? Or I ask somebody more senior to me to make the decision, right? So escalation-based decision making. Both are bad. We shouldn't be making decisions on multi-million dollar things based on, or even smaller than that, right? But based on just making it up. We want to be asking, "Why are we doing this thing? What do we hope the outcome's going to be? And how are we going to measure it?" 

    We want evidence to know. That's why when we're in court, we don't make decisions based on how we feel today, right? We collect a bunch of evidence, we present that evidence to a group of people, and a group of people analyse that evidence, including, you know, not evidence parts as well, how they feel about it, how they think about it, and they put it together into something that is a coherent decision. And that's what we would like to see in management today. 

    Most managers trying to do evidence-based decision making, unfortunately, the evidence that they choose to accept is generally whatever the easiest data is to collect. Most of that revolves around metrics, right? Original estimate, actuals, how far off course are we? People talk about scope creep. Well, you said you were going to do this and it's changed to this; therefore, the scope has changed. 

    That traditional look at data is very... what's a good way to describe it? Vanity metrics. That's the expression I've not used in a while. Vanity metrics are the biggest part of this. I want to create metrics. For me as a manager, I want to have metrics that make me look good. I want to keep my job. I want to perhaps get promoted. So I want to create metrics that make me look good. That would be nice. So that's the ones I'm going to focus on. That's the ones I'm going to judge my people that report to me by, is the metrics that I think make me look good. 

    Unfortunately, metrics that make you look good are suboptimal metrics. We're looking at one part of the puzzle. Me, right? Me as a manager, I'm looking at one part of the puzzle and I'm trying to make a decision on how I measure things based on one part of the puzzle. But is my decision going to be good for the whole thing, for the whole organization, for the whole product or organization team, whatever it is? At whatever level you're playing at, is that going to be the right metric that's going to help progress the outcomes, the impacts, the goals that we're trying to have as an organization, the vision? Or is it just making me look good? 

    That's a suboptimal metric. We're not looking at the whole system, just part of the system. And that's really common. I see that with story points and velocity, right? Ridiculous metrics to look at outside of the context of internal to the team. Story points and velocity can be useful inside of a team. Actually, I would maybe disagree with my own statement there, but they might be useful within that context. But outside of the team, no use whatsoever. 

    Any manager that makes a decision based on velocity, any product owner that makes a decision based on velocity, you know, sum of story points per sprint or sum of tasks, whatever it is, it's just mental. That's vanity metrics. We're trying to massage the metrics to make ourselves look good. And that's really the big difference between traditional management and evidence-based management. Evidence-based management is about the evidence. We're going to collect the evidence, we're going to try and validate that evidence, right? Is it good evidence or is it bad evidence? And then we're going to try and make decisions based on it rather than just making stuff up.
- id: 3E_NKzHDvig
  title: PAL In 5m
  description: Discover the essentials of PAL in just 5 minutes! This quick guide breaks down key concepts for easy understanding. Perfect for beginners!
  captions: ""
- id: 3jYFD-6_kZk
  title: Navigating the Complex World of Azure DevOps Data Migration
  description: Discover essential insights for Azure DevOps migration! Learn about common pitfalls, best practices, and expert tips to ensure a smooth transition.
  captions: |-
    When you're migrating data around in Azure DevOps, there are a hundred thousand things that can go wrong. There are some really big things that people run into. If you're using the Azure DevOps data migration service that Microsoft provides to take your whole collection up, big things are we're on an older version of TFS that's not supported. I did one recently and discovered during the discovery that the customer still had Visual SourceSafe. So we had to do a Visual SourceSafe import first. Visual SourceSafe I think went end of life in 2005, maybe 2005, so it was stuff that had been around for a long time. We had to bring that in first because if you don't bring it in first and you try and upgrade your TFS first, the VSS import was only supported up to TFS 2015 because after that it's ten years after VSS was end of life. Microsoft stopped having that functionality in TFS, so if you don't bring it in before that, you can't bring it in, not with full history and all of the things. They discontinued those tools.

    One of the most common issues that people run into when they're doing migrations is doing things in the wrong order. If you push up to Azure DevOps and you've done things in the wrong order, you might want to do process template changes. You want to do them on-prem before you push them up. You might want to bring in other source control stuff; you need to do that before you take it up. You might want to move from TFVC (Team Foundation Version Control) to Git; you probably want to do that before you move up, but you can probably get away with it. 

    The biggest one, and this is the one that there's absolutely no way back from, is account alignment. This is just mental. The way TFS does identity is TFS has an identity, and it wraps whatever the actual identity is. In the old days, this was either a workgroup account if you're familiar with Windows authentication, or it was an Active Directory account. The issue is that if you take a workgroup and then move it into a domain-joined environment and convert it to a domain-joined, but the accounts don't match up, TFS will automatically, when you move between environments, try and find the account that matches the one that already exists and just swap out the bit inside of the TFS identity. But if it can't find it and it's already added to the systems, it will create a new identity. 

    So you'll end up with two TFS identities. If you've got Bob in your company and Bob has the old TFS identity and the new TFS identity, when he logs into TFS and he searches for "show me all work that's assigned to me," he won't find anything because it's assigned to old Bob, not new Bob. That's an order of operations issue, and it's really hard in Active Directory because quite often there are groups and things that add people into services before you want them to be added, and then you end up with this problem. 

    Azure DevOps combats that a little bit when you move stuff around because even once you're in Azure DevOps, you can move from tenant A to tenant B. Your Microsoft intra-tenant identity management can be swapped out, and it does the same thing. But it's going to ask you, "Here's a list of all the users that we couldn't match up; do you want to match them up?" If you click that skip button at the bottom, which if you have somebody who doesn't know what they're doing, people are apt to do. I find so many times things go wrong because people click the skip button because they think they know what it says or they don't care what it says, or they just want to do it, or it's not their job, or whatever reason. 

    There is no way going back to the old way because now you've got both those identities existing, and there's no way to merge those identities. If you want everything to align through your upgrade process, then all of those things need to be taken into account. Probably the absolute worst case of that having to be managed was years ago when Microsoft sold a part of their business to another company. We had to get all of this work right—the TFS environment from inside of Microsoft to inside of this other company. 

    As you can imagine, with legal and compliance and all kinds of things, it wasn't that easy. When you work within a company, you take dependencies on lots of things that maybe your company owns, but then you sell this thing and you're not selling these things that you're taking a dependency on. So how do you get it out? I think we had seven migrations that we had to do with this single environment. There were three outgoing, one outside neither environment, and then three incoming into the new company. At each of those levels, there were different validations, different scripts, different things that had to be run against those environments to ensure that we don't lose anything and we don't get anything we're not supposed to. 

    It was an absolutely horrendous nightmare of convoluted legalese to get it all done. The biggest issue was maintaining those identities all the way through because the people were going as well, and they wanted all of the identities to match up on the other side. You have to ensure that you map all of the identities correctly all the way through so that when you get to the other side, people open it up and go, "Oh, there's all my stuff," rather than, "Oh, where's all my stuff gone?" Then they have to go find it, and they have to go create custom queries and all kinds of stuff. It's just a pain in the butt.

    Those are some of the bad things that can happen with identity management. There's a lot of gotchas in there. Database size moving up to Azure DevOps, the size of the database and what's in there and how you clean it up—that's a bunch of gotchas in there. If your company, which you should know developers are apt to do, you might find that your TFS environment has been around for a really long time, and it didn't used to be run by your operations team with control. It maybe used to be run by the developers before it was handed off to operations. 

    Before they knew that in the old days, operations often thought that anything that developers did was non-production, even though all the code is an organisational asset and we're storing it in there. The build environments and build agents are all organisational assets because we can't deliver our product if we don't have it. They were all considered not production, so developers could have the keys to everything and do everything for so many companies like that. 

    The problem is that because they can do whatever they want, they go, "Oh, there's the new beta version of TFS. Oh, it's supported by Microsoft, so we'll install that." But it's mostly supported by Microsoft. I've had environments where it's a major enterprise company, but in the midst of time of that environment, it's had a beta version of TFS deployed that was maybe supported way back ten years ago. It causes knock-on errors because there were a couple of things that weren't taken care of that mean it can function the way it is, but it ain't going to Azure DevOps without fixing all of those things.

    If your server is old enough, there are all sorts of buggy things from TFS 2010 that they fixed in 2012. If your server's old enough to have been in 2010, there’s just a whole nightmare of stuff left over that you have to go fix before you can go to the cloud. You can have half-committed stuff because you had to do two commits back in the day to do a rename, but nobody told anybody, and there was no error message. 

    In Service Pack One, they brought in the error message, and then in 2012, they fixed it, but there's still a bunch of stuff in there that's messed up. If you imagine a product that's been around for 18 years—no, not quite 18 years, 16. Where are we? It was created in 2005, shipped in 2006. Man, that's a long time, right? Nearly 20—nearly two years off 20, 18 years. My math sucks. Eighteen years of engineering work has gone into this product. Eighteen years of different people working on it. Eighteen years of forgotten stuff. Eighteen years of bodies being buried underneath some of the classes and methods. 

    Those are probably where the biggest difficulties are. The easy stuff, the stuff that can go right—man, I did mention the migration up to Azure DevOps. This was really early on in Azure DevOps. It took less than an hour. This was a government agency in the UK. It was a council, so not government government, but local government. We ran the tool against it; it said everything was good. The database was a couple of gig, tiny, so we just sequenced the D pack, did a dry run up into Azure DevOps. That took about 15 minutes, less than 15 minutes, and it was there. They looked at the dry run; they thought, "Oh, this looks awesome. This is perfect. Everything's where it's supposed to be. We see all the stuff. We trust Microsoft." 

    They were just reasonable folks. We just went, "Okay, do you want to just do the production one then, or do you want to wait and validate it some more?" They were like, "No, just run the production one." So we ran the production one, and we were done. Turn off TFS. That's one headache off their plate, one headache off their local admin's plate. 

    Hold on, we need to go back to what's the worst—the absolute most appalling issue with TFS or Azure DevOps Server. Running it on-prem, especially if your developers are running it, this will be done right. If your operations team is running it, I guarantee you it's wrong, and that's backup. Most operations teams want to use their standardised tools, so they just see a SQL Server and they want to plug their standard backup tool into Azure DevOps and suck out the data, store it off-site. If they're doing that, that does not guarantee a restore. 

    The problem with systems like TFS—it's not really a problem with TFS; it's a problem with having people that don't know what they're doing running it or that don't care running it. It's actually the same issue for SharePoint and a lot of other systems. You have multiple physical databases inside of the system. When it runs updates, you could have an update that straddles multiple databases. In TFS's case, you've got a configuration database and then you've got a bunch of collection databases. 

    You can have an identity update, for example, that will hit the collection and the configuration database. The configuration database is small, so that bit will be done really quickly, and then it needs to complete on the other one. They run it as a transaction. It's absolutely possible to hit the point in time of your backup that it's completed and committed on one database and not completed on the other one. So it will roll back because the transaction has crossed multiple databases, and this one's finished and it's moving on to this one. The transaction allows you to roll back the whole thing, but not if you restore a backup without that transaction being in existence mid-transaction. 

    There are things that you're supposed to do that are all documented by Microsoft to enable you to do marked transaction logs. You actually put a mark—you use the transaction system to put a mark across all of the databases, and then you back up. The transaction completes, all of the other transactions are completed, this transaction completes and has this mark, and it might be at different timestamps across the different databases. Then you back up that mark, and when you restore that mark, it's exactly the right point. 

    But most people don't do that, and they validate things by doing a trial restore. It's totally possible that that restore will work. Probably in most circumstances, that restore will work. But you know what Murphy says: what's the worst thing that could happen? It will happen at the worst possible time. So in an actual disaster, when you need to recover your database, that's the time when you'll hit that transaction log. If you hit that, you are not going to be able to restore your databases, and you're going to have to call up Microsoft, and they're going to have to have an engineer log into your servers and run scripts to fix the databases. 

    Then, because they've run scripts to fix the databases, that's another thing that can end up being a future problem when you go to move to Azure DevOps, and something in the database is not quite right when they do the validation, and it fails the import. My advice is never, ever let an operations team run TFS. That's my advice. If you have to let an operations team run TFS, ensure that they must use the TFS documented backup procedures, not their own stuff. That won't work and might end up with you in the hole. 

    Yeah, so that's the big one. Ninety percent of the time, things go perfectly fine. Upgrading TFS is super easy. It used to be an absolute nightmare, but the Azure DevOps team did a bunch of work to validate everything, check everything, and that's part of their ethos. If you run it, it will tell you, "Here's a problem; here's how you fix it." You fix it, it runs, and you can do the upgrade. Totally cool. They're super easy. But when something isn't right, that's when you need that expertise to go, "What is the problem? How do I fix it? Where does it come from?" 

    The documentation is awesome, but there are still those things that slip through the cracks. So that's really the thing. There are a lot of things that can go wrong and a lot of things that can go wrong that are really important, but 99.9% of the time, everything's going to be fine. You're going to be able to upgrade; you're going to be able to migrate, and everything's going to go great.
- id: 3nSV-v2cK-w
  title: If you could distil the PSM immersive learning experience into 3 major benefits. What would they be?
  description: Discover the top 3 benefits of the immersive PSM experience compared to the 2-day course. Elevate your Scrum skills with insights from Kanban Dan!
  captions: ""
- id: 3NtGxZfuBnU
  title: Do you think we are on the slope of enlightenment in Gartner's Hype Cycle?
  description: "Explore Agile's journey from disillusionment to enlightenment with Martin as he uncovers truths, debunks myths, and sets realistic expectations. \U0001F680\U0001F4A1"
  captions: |-
    Do you think that we are in the slope of Enlightenment in Garner's hype cycle? I would maybe have to say not yet. I think that's going to be my answer. I think we're still in the trough of disillusionment, right? And I think the reason I think that is perhaps I'm wrong, right? But every time I turn on my LinkedIn, I'm reading the feeds, I'm seeing what's going on. Every time I look, it's, "Scrum sucks, Scrum doesn't work, Safe sucks, Safe doesn't work, Agile 2.0 is the way forward, Agile 1.0 is dead, Agile is dead." Right? There's all these types of posts. There's still a significant, and I think majority of people are still in that trough of disillusionment.

    Does that mean that lots of companies are not already in the slope of Enlightenment? I think they are. I think lots and lots of organisations out there, lots of people are in that slope of Enlightenment already. But there are lots of organisations out there who just haven't made it yet. There are people out there who are still disillusioned that they can't have twice the features in half the time. Jeff's book title didn't help with that, right? Because it sets a level of expectation. Lots of people don't even read the book, which is a little bit going on that's not really what it's about, right? But that belief of what Agile was supposed to deliver, most organisations have not really worked out the hard work that is involved in actually doing it and getting there. It's not a magic wand that's going to solve their problems.

    So I think there's still a huge number of people in that trough of disillusionment. I love that phrase. But as I think, I think we're definitely on that upward turn of that slope. There's definitely more, certainly the early adopters and even, could I say, the late majority? Some of the early majority are already in that Enlightenment mode, that they realise that it's not all the hype that is important, but it's the fundamental change in the way we work and the way we understand how we do things. And that realisation that it's people that solve problems, not tools, right? It's people that solve problems, not bureaucracy.

    Putting truly, truly putting people first and being willing to dismantle whatever processes, practices, or tools, ways of doing things are getting in the way of people actually doing the work that they need to do and helping the business be successful, right? I think that's where we are right now. But we're certainly on the little up of that slope, I think.

    Thanks for watching the video. If you enjoyed it, please like, follow, and subscribe. I always reply to comments, and if you want to have a chat about this or anything else Agile, Scrum, or DevOps, then please book a coffee with me through Naked Agility.

