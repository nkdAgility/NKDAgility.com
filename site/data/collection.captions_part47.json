[
  {
    "id": "RnMOINwjO84",
    "title": "Making Data Driven Decisions - Decision making frameworks",
    "description": "Discover why agile decision-making requires flexibility and creativity in today's complex world. Embrace adaptation for success in product development!",
    "captions": "If you're looking for rules on how to make informed decisions based on the data that you've collected, whether it's from evidence-based management, telemetry data, or whatever data you're collecting, you're not going to find it. You're not going to find something that you can apply everywhere. In times gone by, there have been large decision-making frameworks that generally apply because we lived in a complicated world, not a complex one. \n\nSo, if you think about complexity theory, if we understand more about a thing, we're going to go do more than we don't know. That's like playing chess. We understand more than we don't know, then we can apply a bunch of rules. We know what the next move is. If you've ever watched a professional chess game and listened to the commentary, they know exactly what the next move is supposed to be. The only time when there's a mistake is based on the set of exchanges, depending on how smart the commentator is, how far ahead they can think. They know who's going to win, and then itâ€™s does somebody make a mistake? \n\nThat's how I think lots of modern businesses are failing. Take, for example, a non-technology example. Let's say you're a hauling company and you're going to haul stuff from A to B in trucks. You have your drivers, you have your trucks, you need to do schedules, you need to do procurement for what goes in what truck and how it's organised in the truck, and all of those kinds of things. If you go buy off-the-shelf software that everybody else uses, all your competitors are using exactly the same software to manage this, perhaps you're buying SAP, and then having the POGE plugin and the staff management plugin and whatever stuff it has, then your business is no longer unique. \n\nYou're filling a known niche with a known business model that works, and then the only difference between you and your competitors is probably quality. Are you on time? Did you have the right stuff? Are the right things delivered to the right place? You build a reputation around that. This is a good haul company because they mostly do the right thing. This is a bad haul company because they mostly do the bad thing, and then they'll go out of business, and you'll stay in business because they mostly do the wrong thing and you mostly do the right thing. \n\nBut your business models are identical, your business practices are identical because they have to be. You have to fit within the plugins, the business model plugins that you've brought in for SAP. But when we work in a world where we know less upfront than we discover by doing, that's anything where we're bringing in a creative element. Software engineering is being creative. Anything where there's a lot of unknowns. \n\nA great set of this is red team thinking, which is a military tool. Red team thinking comes from the military. I don't remember if it's the US or the British military, probably the US military. It's a military model that is applied quite heavily in the agile space because we're talking about the same thing. We're talking about complexity, we're talking about the fog. We've got a lot of unknowns, and how do we move forward while being able to adapt to any challenges, surprises, or opportunities as we move forward and the world reveals itself? \n\nThat's something that the military do very well, or hopefully do very well, and we need to do very well at it because most of the stuff that we do when we're building software, because we're writing code, it's never been done before. If you're writing code that's been done before, you're doing it wrong. Stop doing that. When you're building products that don't exist yet, then we're exploring the unknown. \n\nThink about when the explorers went out to go somewhere new. They didn't know what they were going to find when they got there. They didn't know what was going to happen along the way, so they had to take into account bringing all of the things they needed. Scurvy was a problem for early explorers because they didn't have the right vitamins. What they found was they could take citrus fruits, which lasted a long time in storage if you stored them right, and then you could provide that to your crew and they don't get scurvy because they get the vitamins that are missing from the normal diet. \n\nThat adaptation enabled those explorers that did that to go further, and the explorers that didn't do that all died. So, which ones came back? They did this. Let's do more of that. That's what we're talking about when we talk about agile. When we talk about agility, it's about creating a system for your way of work that adapts dynamically to those changes. We have emergent knowledge, we have emergent data, we have emergent customers. We don't know who our customers are yet and what they're going to want. \n\nThen we get some of those customers and we understand what they want, so we deliver something to them, but it's not quite right because they don't like what we've delivered. So, we need to keep adapting, continuously evolving our product, our business, to fill a unique niche that we've created for ourselves. Perhaps we maintain that niche, but those niches don't exist forever. \n\nIt used to be in the old days of the Industrial Revolution where there weren't that many textile mills and there weren't that many textile mills within selling distance. Perhaps you, as a tailor, were buying cloth from the local textile mill. You had no option. You were buying the bulk of your stuff from the local textile mill, and then maybe you could get some really expensive stuff from the fancy store, wherever you managed to get that really expensive stuff from. But that's not for your main clientele. Your main clientele is going to be the stuff from the factory up the road. \n\nWhereas today, you can get stuff from any factory anywhere in the world for a relatively competitive price. That market, that niche, those factories were in is largely gone. It's not a niche anymore. There are loads of competing species within that area. The same for our companies. As competition grows, we either have to become unique in different ways or we need to be the best in that space in order to not have any of this competition come in. \n\nAs we grow as a business, this is all part of this data-driven decision-making. As we grow as a business, we have a tendency to say, \"Well, this worked one time, let's write that down and everybody does it that way.\" That's bureaucracy. That's what we're fighting against with agility because the next thing we do is slightly different, just a little bit, but slightly different. \n\nSo, this is not optimal anymore, but it kind of works. But time change after change after change, eventually this doesn't work anymore. But everybody in the company still does it because that's the way we do things. That's the mindset we're trying to change. We're trying to change to a mindset that we don't keep this longer than it's necessary. We don't keep this longer than it's valuable. Any process or practice we have, emergent practices within our organisation, any process or practice can be dissolved at any time because it's deemed to be no longer optimal or suboptimal. \n\nThis set of stories should continually change. If it's not changed, why hasn't it changed? Because the world will have changed, our environment will have changed, and we need to continually adapt. That's agile decision-making. How we make decisions is emergent based on what we understand, what we're doing, what we're trying to achieve, and the results that we get based on that decision-making. \n\nSo, you're also continuously looking at the data and analysing your decision. Did we make the right decision? Are we continuously making the wrong decision? If we're continuously making the wrong decision, why are we continuously making the wrong decision? What is our decision-making process? Because it needs to change. \n\nThere are lots of tools out there that you can use. I had a quick look for agile decision-making tools and I found a few that I recognise that I have used in the past but maybe not used recently. Fist of five, if you've got a group of people and you need to make a decision, fist of five is a great way to make a decision. Is that going to last forever? Are you always going to do fist of five in that same group of people? Probably not, because its usefulness, as you start working together for longer as a team, you may recognise more each other's tails, and then you don't need that mechanism anymore. \n\nSo, stop doing it if it's not adding value. If anything in your business is no longer adding value or it's actively inhibiting value, stop doing it and do something different. I see this in organisation after organisation where they have a departmental model and some department has decided that you can't do a thing in an organisation, and that thing that you can't do inhibits all of this value over here. It either makes it slower or makes it harder for us to take advantage of opportunities. \n\nIt just makes it too hard to do business, so the people over here stop trying to do those things because it's too hard. Usually, this is security. That department has forgotten that they work for the business. The business does not work for them. Their purpose for being is to protect the business. Perhaps that department model is a protection model, so compliance or security or those kinds of things. But they're protecting the business within the context of the business actually functioning. \n\nAs soon as they're inhibiting the business functioning, they are a cost, not a value. They're supposed to figure out, \"We need to do this. How do we do this so that you can be happy?\" Not, \"No, you can't do this.\" That's an example of that organisational craft that rust builds up over time, inhibiting your ability to deliver value because you're stuck in the past, even if the past was only five minutes ago. \n\nUse whatever tools make sense within the context of the decision that you're making, but always check. Is that tool that we're using, so it could be fist of five, DAKI, RACI, decider protocol, consent decision-making, lean coffee, holacracy, there are loads of different ways to do that. If we use that and we have a bad decision or we use it in a bunch of decision-making and all of those decisions ended up wrong, or the majority of those ended up wrong, then stop doing it. \n\nThat's the key to this agile process, to figuring out how to make decisions within the context. There aren't any rules for you to go look up. There aren't any known practices that always work, and that's true across all of agility and all of lean. There are certain rules that we know to be true, but they're not rules, they're laws. Little's law is a great example of that, queuing theory. It's true. That's how things work. \n\nSo, we make decisions within the context of that story. Figure out what the laws are that apply to your business, and everything else is flexible. Everything else is flexible. How you do business is flexible. How you find business, how you engage with customers is flexible. Emergent. How people do the work is emergent. How you engage with them, how you do everything that you do needs to be emergent because what you want to be able to do as a business is when the market shifts or your environment changes, you need to be able to evolve, and you need to be able to evolve as quickly as possible because you don't want to go extinct."
  },
  {
    "id": "rNqYGyB6PtY",
    "title": "What Should a Product Owner Do with an Incompetent Team?",
    "description": "Struggling with a team that underperforms? Discover how to identify true incompetence vs. lack of knowledge in this insightful video! ðŸ’¼ðŸš€ #LeadershipSkills",
    "captions": ""
  },
  {
    "id": "rnyJzSwU74Q",
    "title": "Traditional vs Empirical! Whats the difference? Agile faces off agianst waterfall!",
    "description": "Explore the clash of Agile vs Waterfall! Discover how empirical models boost project success with visibility, adaptability, and continuous value delivery. ðŸš€",
    "captions": ""
  },
  {
    "id": "roWCOkmtfDs",
    "title": "The Importance of Validation in Product Development: A Strategic Approach",
    "description": "Discover the importance of product validation! Learn how to ensure features deliver real value, reduce waste, and enhance user satisfaction.",
    "captions": "When you think a feature is going to be valuable to your customers or to your business, how do you know that that work has actually provided value? I've been working with a customer recently where a lot of sales-driven features end up in the product, which is actually having the impact of fragmenting the product and making it more difficult to use. The driving force for adding those features to the product is closing a deal; it's got nothing to do with what the users of the product want. It's got nothing to do with what the business that is creating the product wants. All it has to do with is closing the deal with the customer.\n\nSo why is that bad? We obviously want to close deals with customers, but what's bad is because we don't know whether those things that we're creating actually produce value or not. There's definitely an assumed value, right? We think if we add this feature, we're going to get value from it, close that deal. But what's the long-term impact of that feature? We might close that $30,000 deal, but if over the next five years that feature is going to cost us $100,000 in support and maintenance and all those kinds of things, and we don't close any more deals because of that feature, then it wasn't worth adding that feature to close that $30,000 contract.\n\nBut your sales guys don't care because they've made their 5% bonus on the $30,000 of the deal they closed. There's no incentive for them to really focus on the right features that will support many of their customers. They're just worried about closing the deal because that's how they get the bonus. That's usually the metric for salespeople.\n\nOne of the ways to turn that around is to start changing the way you measure, changing the way you deliver bonuses. People behave how they're measured, right? A great example again is Microsoft, which has lots of these examples because they've been through some of these traumas. They switched the Azure sales folks from getting their bonus based on the number of Azure hours they sell to being instead on the number of Azure hours the customer uses. \n\nSo then instead of selling a million dollars to the customer and then the customer being unhappy at the end of the year because they bought a million dollars' worth of Azure and they've used $40,000 and the rest is waste, the salesperson is focused on usage. How can I help you as the customer use this product, not how can I be Draconian and close the deal and get you to sign on the dotted line? Signing on the dotted line is not the value that the customer wants; using the features and capabilities to the maximum capability that they have is what the customer wants.\n\nIt's that shift in focus from revenue extraction towards value creation because quite often that short-term view on revenue extraction has a long-term cost that's not obvious to the people that are making the decision that the feature goes in. It might be obvious to the people who are actually doing the work, but they don't have any say or control over that. \n\nThis validation is really important because you pull back around and once you've shipped a feature, you monitor that feature's usage. You collect telemetry from that feature. Now, in order to collect the right telemetry, we can always in hindsight say, \"Well, this feature did this,\" right? But was that what was intended? Is that why you added that feature in the first place? Is that the change that you wanted to make? \n\nThis is why I'm a big proponent, as part of product management, of hypothesis-driven engineering practices. It doesn't have to be engineering; it can be anything we're building. If we're building a product, I guess I would just call that engineering anyway. If we're building a product, every feature that we want to add to the product that is not just table stakesâ€”there are features that we just have to have. \n\nFor example, if you're going to have a web-based product and there's dynamic content specific to the user, they're going to have to be able to log in. I don't need to have a hypothesis to say, \"Is adding login a good idea?\" We kind of have to have it; it's table stakes. But what level does that go to might include some kind of hypothesis, right? \n\nIf we make it easier to log inâ€”right, so base username and password is how most login systems work. Most systems are moving to passwordless. If we implement a passwordless system, do we get more or less users using our product? If we put a LinkedIn auto-login or a Windows or an Apple or Google auto-login, does that increase the number of users that we get in the system? \n\nSo the hypothesis would be, \"If we add the capability for people to log in with Facebook, we're going to get a higher number of people logging into the system because it's easier for them to log in.\" That would be a hypothesis. Then you might ask the question, \"Well, how much more is that worth?\" Hopefully, it's very minimal. That sort of thing should be very minimal effort to add to your system, right? \n\nIf you add that to your system, what data are you going to collect to know whether you've successfully achieved that hypothesis? Well, I want to know how many people click the Facebook link versus use the username and password. I also want to know the total number of new net users coming onto the system. \n\nWhat I would expect to see is, you know, we've got our line for new users in the system. We add that feature, and that line has something noticeable that says we're increasing at a higher rate. Then we can look at the data and say, \"Well, 10% of people clicked the Facebook button; we've got a 10% increase in the net new users. Therefore, we've opened up access to new users and new markets.\" \n\nLess people go to the page and then bounce; more people go to the page and then sign in just because it's easyâ€”they can just click the button. So that's hypothesis-driven practices. We have to look at the data and figure out whether the thing that we added has the result that we expect. \n\nBut this is the important part: that means whose job is it to provide the hypothesis? It could be the person who wants the feature, who's asking for the feature. This is something that I encouraged a customer recently. I encouraged them to push back to sales. \n\nSo if sales say, \"We want feature X because we think it's going to close this deal,\" and this deal is worth X amount of money, engineering should say, \"Well, how many other customers are going to use the feature? How much do we think it's going to increase usage of the product?\" \n\nI'd like you guys to come up with a hypothesis of why we're adding this feature and what we expect to be different other than just closing that deal because we want to look at the total cost of ownership, let's say, over five years of adding a featureâ€”support and maintenance and testing and automated testing and all of those things. \n\nWhat's the total cost of that? The amount of time it adds to the build, right? All those kinds of things. A lot of that is guesses, but we come up with, \"Here's what we think it will cost.\" Are we actually going to make the money back that we're putting in? Is it enough of a difference to make it worth doing? If we do it, what else is it going to support? How many other customers is it going to help? \n\nThat's the clincher. Do you understand how many customers are using the features that you have in your product? I think there's some data from the Standish Group in Boston that used to create the Chaos Report. I think they still do create a report called the Chaos Report every year; it might have a new name now. \n\nIn that report, they collect dataâ€”they're a data analysts group. They collect data across, I think, about 70,000 to 75,000 projects worldwide, mostly in the US and Europe but some in the rest of the world. I think it's like 60% US, 30% Europe, and then 10% of the rest of the world. I can't remember exactly, but I seem to remember those numbers; I could be making them up. \n\nThe data that they analysed showed that only 35% of the features that we build in our products are actually used by our customers. I think it could be used a little bit but not enough to make it worth adding to the product. They've analysed that across all these products. \n\nSo why is that number so low? Because that sounds like for every million dollars you invest in your product, you're only getting $350,000 worth of value, right? So that's a lot of wasteâ€”$650,000 waste. That's a lot of money. Where's it going? Why are we building features that our customers aren't using? \n\nEven worse, why are we continuing to invest in features that we could know that our customers aren't using? That's the even more interesting question. How many features do you track the usage of features in your product? And how many features in your product are you actively adding new functionality to that your customers don't use? \n\nBecause if they're not using it, you probably want to think twice about adding new features. You may want to double down, right? You've got that old adage that we can either double down, right? So we keep investing in that feature because we think it's going to be valuable in the future and customers will use it. \n\nWe pivot; we need to change the way that feature works in order to maximise user engagement with it, right? Which means it's valuable if they're engaging with it. Or we stop investing in it and perhaps take it out of the product. \n\nHow often do you make those decisions? And how often do you make those decisions based on data? Do you have the data to be able to make those decisions? This is something that product management wants. The only way they can get the data is if the team adds that capability into the product. \n\nIt needs to be integrated with the product because you want to be looking at the actual features, how they work, and create telemetry specific to those features. Understand based on what you intended the feature to do that you're able to track that data, see the needles moving, and decide whether to continue investing in it or stop. \n\nThat's something that every product manager, every product owner should have for almost every feature they add to the product or the intent to add to the product. That can be great feedback and information you can use when you're talking to stakeholders who've asked for those features. \n\nBefore you've built the whole feature, build a little bit of it, validate that it's the right feature, and if you see there's very few people using it, go back to the stakeholder and say, \"We don't want to keep investing in this feature because nobody's using it. Do you know why nobody's using it?\" \n\nYou can go ask the customers as well, but this is your pushback on that financial investment that's maybe been imposed upon you if you don't control everything. Validation is a super important part of product development. It's often lacking. \n\nI feel that it's more often lacking than almost anything else in product development. So go out there, figure out what telemetry you need in your product, get your engineers to build it, and start making evidence-based decisions. Validate that the features that you create are actually adding the value that you intended for them."
  },
  {
    "id": "rPxverzgPz0",
    "title": "Would you recommend the APS course to a newbie scrum team, and Why?",
    "description": "Discover how the APS course can empower your newbie Scrum team to create value and thrive in an Agile environment. Watch now! #Scrum #Agile #Training",
    "captions": ""
  },
  {
    "id": "RSPw8pZ9NT8",
    "title": "Can you talk about the Kanban workshop and why it's a great option for organizations",
    "description": "Discover how Kanban workshops by NKD Agility can empower your team to embrace agile practices and enhance product development without the Scrum framework.",
    "captions": ""
  },
  {
    "id": "rX258aqTf_w",
    "title": "In what circumstances is agile consulting appropriate?",
    "description": "Discover when to engage an agile consultant to enhance your team's collaboration and creativity in this insightful video with Martin Hinshelwood.",
    "captions": ""
  },
  {
    "id": "rzw7aPbz_sg",
    "title": "PAL Class Of 23 July 2020 for Everyone in EST",
    "description": "Join our Professional Agile Leadership workshop on 23-24 July 2020! Open to all, learn key skills in a live virtual format. Register now!",
    "captions": ""
  },
  {
    "id": "RzWFeLfSnP0",
    "title": "Why is done so important in the Reporting & Data Space?",
    "description": "Discover why \"done\" is crucial in Reporting & Data with Mark Noneman, as he shares insights on lean and agile practices to boost quality and productivity.",
    "captions": ""
  },
  {
    "id": "s_kWkDCbp9Y",
    "title": "The Key to Being an Effective Agile Coach: Understanding the Teamâ€™s Context",
    "description": "Discover the fifth essential achievement for aspiring #AgileCoaches with Martin Hinshelwood. Elevate your skills and empower teams to thrive!",
    "captions": ""
  }
]
