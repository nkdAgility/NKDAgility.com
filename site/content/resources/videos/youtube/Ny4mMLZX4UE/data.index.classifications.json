{
  "Definition of Workflow": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Definition of Workflow",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 20.33,
    "ai_mentions": 0.5,
    "ai_alignment": 2.6,
    "ai_depth": 1.8,
    "ai_intent": 2.2,
    "ai_audience": 6.1,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content primarily discusses building quality into the software process using practices like TDD, CI/CD, static analysis, and automation, with a significant focus on Azure DevOps. While it references 'engineering workflow' and improving processes, it does not discuss, mention, or explain the 'Definition of Workflow' as a dynamic set of explicit agreements or policies per Kanban or agile theory. There are no references to entry/exit criteria, WIP limits, or making the flow of work visible as described in the classification. Any mention of workflow is generic and aimed at improving code quality and feedback speed, not clarifying, governing, or adapting the flow of work explicitly. Audience alignment is moderate since practitioners in agile and DevOps may overlap. The content is focused but only tangentially related to the Definition of Workflow category.",
    "reasoning_summary": "This content focuses on building software quality through DevOps automation and shift-left practices. It mentions improving engineering workflow but does not address the Definition of Workflow as explicitly required by the Kanban/agile context. Relevance to the category is minimal and indirect.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-08-07T07:07:18",
    "ai_confidence": 44.9,
    "ai_mentions": 1.2,
    "ai_alignment": 5.6,
    "ai_depth": 5.8,
    "ai_intent": 4.4,
    "ai_audience": 6.3,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content primarily discusses technical practices and workflow improvements for building in software quality (shift-left, automation, CI/CD, etc.). There is some reference to organisational change (empowering engineers, culture of quality), but these are brief and not deeply explored. No direct mention or in-depth discussion of sociotechnical systems, organisational structures, or the interplay between people and technology in a systemic sense. The main focus remains on engineering workflow, so conceptual and depth scores are moderate but not high. Audience aligns somewhat (practitioners interested in delivery improvement). No penalties for outdated or critical material.",
    "reasoning_summary": "The article focuses on shift-left quality and automation practices. While it briefly touches on culture and team empowerment, it does not directly explore sociotechnical systems or the interplay of social and technical elements. Fit is partial and mostly indirect.",
    "level": "Tertiary"
  },
  "Hybrid Agile": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Hybrid Agile",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 8.65,
    "ai_mentions": 0.1,
    "ai_alignment": 1.7,
    "ai_depth": 1.3,
    "ai_intent": 1.4,
    "ai_audience": 2.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content discusses shifting left on quality, TDD, automation, and DevOps for better software delivery. There is no mention of Hybrid Agile, nor does the theme critically examine the blending of agile and traditional methodologies. It focuses on agile engineering practices and quality, not on hybridization or related pitfalls. Audience fits practitioners, somewhat adjacent to the category, but there is no substantive overlap. No outdated or contradictory info detected, so no penalties are applied.",
    "reasoning_summary": "This content is focused on agile engineering, DevOps, and quality practices, with no direct or implied discussion of Hybrid Agile or its critical challenges. Minimal relevance to Hybrid Agile.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Enterprise Agility",
    "calculated_at": "2025-07-15T17:14:16",
    "ai_confidence": 45.35,
    "ai_mentions": 1.5,
    "ai_alignment": 4.6,
    "ai_depth": 4.8,
    "ai_intent": 4.2,
    "ai_audience": 5.1,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content focuses on engineering practices such as TDD, automation, and DevOps with Azure DevOps, emphasizing 'building quality in' over late-stage testing. While it references concepts familiar in enterprise agility (shift left, feedback loops, CI/CD, continuous improvement), it is strictly targeted at team or engineering practices without explicit discussion of organisation-wide agility, frameworks, leadership, or transformation. Direct mentions of 'Enterprise Agility' are absent, and the organisational context is implicit, not explicit. The audience is primarily technical practitioners (engineers, dev leads), not organisational leaders or strategists. Thus, while thematically adjacent, the content only partially aligns with the broader, culture- and organisation-level focus of Enterprise Agility.",
    "reasoning_summary": "This content highlights engineering excellence through automation and DevOps, reflecting related agile principles, but its focus is on team-level technical practices, not enterprise-wide agility or transformation. Organisational context and direct relevance to Enterprise Agility remain limited.",
    "level": "Tertiary"
  },
  "Backlog Refinement": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Backlog Refinement",
    "calculated_at": "2025-07-15T17:13:54",
    "ai_confidence": 8.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 0.8,
    "ai_intent": 1.0,
    "ai_audience": 3.8,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content centers on software quality, shift-left testing, TDD, automation, and CI/CD, focusing on building quality into the development process. While Agile and some practices such as feedback loops are mentioned, there are no explicit or implicit discussions of backlog refinement, backlog structure, prioritization, or related topics. Any alignment is tangential at best (e.g., quality in Agile teams), with only a faint connection to the broader Agile context, not specifically backlog refinement. Thus, all scores for relevance to backlog refinement are extremely low.",
    "reasoning_summary": "This content exclusively addresses building quality in through TDD, automation, and DevOps, without referencing or aligning with Backlog Refinement. Its focus and intent are a poor fit for the category.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Technical Excellence",
    "calculated_at": "2025-07-15T17:14:21",
    "ai_confidence": 92.8,
    "ai_mentions": 8.7,
    "ai_alignment": 9.8,
    "ai_depth": 9.1,
    "ai_intent": 9.3,
    "ai_audience": 9.0,
    "ai_signal": 9.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content directly addresses building quality into software from the startâ€”central to technical excellence. It explicitly mentions TDD, CI/CD, automation, static analysis, and feedback loops as mechanisms for high-quality, maintainable delivery. The discussion goes beyond tool promotion, explaining the 'why' and 'how' of practices that foster engineering excellence, with clear intent to educate and empower technical teams. The audience is practitioners aiming to improve engineering outcomes, and the majority of the content is tightly focused on practices underpinning technical excellence. No penalties applied since content is modern, positive, and on-topic. Scores vary to account for a slightly stronger alignment and depth than mere direct mentions.",
    "reasoning_summary": "This content closely aligns with 'Technical Excellence,' detailing how TDD, automation, and CI/CD embed quality into development. It is targeted at technical teams, thoroughly explores relevant practices, and maintains a focused, purposeful discussion that supports high-quality software engineering.",
    "level": "Primary"
  },
  "Metrics and Learning": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Metrics and Learning",
    "calculated_at": "2025-07-15T17:14:00",
    "ai_confidence": 71.6,
    "ai_mentions": 2.8,
    "ai_alignment": 7.5,
    "ai_depth": 7.4,
    "ai_intent": 7.7,
    "ai_audience": 8.4,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content focuses on 'building quality in' with practices like TDD, automation, feedback loops, and CI/CD, all of which support continuous improvement. It references shorter feedback cycles and faster detection of issues, aligning with the core of Metrics and Learning. However, it does not directly discuss measurement, specific metrics, or evidence-based approaches; rather, it emphasizes methodology and process improvements. The target audience (Agile, DevOps, engineering teams) matches, and there is a moderate but not explicit connection with metrics and learning cycles, justifying a strong but not perfect score.",
    "reasoning_summary": "This content advocates for fast feedback and continuous improvement through DevOps practices, aligning well with the Metrics and Learning category. While metrics are implied (e.g., cycle reduction, defects caught earlier), explicit discussion of measurement or data use is minimal.",
    "level": "Secondary"
  },
  "Agile Planning Tools": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-07-15T17:14:17",
    "ai_confidence": 13.23,
    "ai_mentions": 0.7,
    "ai_alignment": 1.4,
    "ai_depth": 1.1,
    "ai_intent": 1.2,
    "ai_audience": 4.2,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on building quality in via TDD, automation, static analysis, and CI/CD pipelines using Azure DevOps. No specific Agile Planning Tools are mentioned; there is no discussion of backlog management, sprint/release planning, or related functionalities. The main topic is Agile engineering and quality practices rather than planning tools or methodologies. The audience (Agile practitioners/engineers) partially overlaps but the focus remains outside planning tool usage, resulting in very low alignment.",
    "reasoning_summary": "This content addresses Agile engineering excellence and quality assurance through DevOps and automation, not Agile Planning Tools. It lacks discussion of planning functionalities, backlog management, or tool features directly related to Agile planning. Alignment is very limited.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Collective Intelligence",
    "calculated_at": "2025-08-07T06:10:06",
    "ai_confidence": 17.55,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 1.7,
    "ai_intent": 2.1,
    "ai_audience": 8.2,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on software quality, shift-left testing, automation, and fast feedback within agile/DevOpsâ€”but does not explicitly or implicitly discuss human-AI collaboration, distributed cognition, or collective intelligence. While there is brief mention of 'AI checks' enforcing team policies, this is framed strictly as an automated enforcement tool, not partnership, shared cognition, or enhanced team outcomes as described in the 'Collective Intelligence' definition. The main audience (software teams and leaders) aligns, but topical relevance is highly limited and indirect.",
    "reasoning_summary": "Content does not address human-AI collaboration or collective intelligence. Focus is on DevOps/quality practices, with a minor mention of AI as a toolâ€”not a team collaborator. Category fit is poor and very indirect.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Decision Theory",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 8.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.35,
    "ai_depth": 0.8,
    "ai_intent": 0.85,
    "ai_audience": 2.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses on engineering quality practices such as TDD, CI/CD, automation, and feedback loops to improve software quality in DevOps. There are no direct or indirect mentions of decision theory, heuristics, probability, behavioral economics, or cognitive psychology in decision-making. The core message is about shifting quality left technically, not about frameworks or models for decision-making under uncertainty. The intent is to educate technical practitioners on building quality into software via concrete practices, not on the theory or psychology of decision-making. Audience alignment is closest only because agile/DevOps practitioners may overlap with audiences interested in better decision processes, but the content's signal is extremely low for decision theory. No penalties applied as it is not outdated or contradicting.",
    "reasoning_summary": "This content is highly technical and focused on practices for building quality into software delivery. It does not discuss decision theory concepts, models, or processes; thus, its fit for the 'Decision Theory' category is extremely low.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Technical Mastery",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 94.65,
    "ai_mentions": 8.6,
    "ai_alignment": 9.6,
    "ai_depth": 9.1,
    "ai_intent": 9.0,
    "ai_audience": 9.3,
    "ai_signal": 9.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 95.0,
    "reasoning": "The content directly addresses building quality into software via advanced engineering practices central to Technical Masteryâ€”TDD, automation, CI/CD, static analysis, and feedback loops. It avoids project management topics and strictly advances best practices in software craftsmanship, targeting practitioners and engineering teams. There are frequent explicit and implicit references to core principles. The discussion is in-depth (specific practices, benefits, and outcomes), focused, and makes little to no digression. No obsolete or counter-aligned notions are present, negating penalties.",
    "reasoning_summary": "The content is a strong, focused match for Technical Masteryâ€”emphasizing modern engineering practices, automation, TDD, CI/CD, and principles for high-quality, maintainable software. It addresses the right audience and deeply aligns with software craftsmanship objectives.",
    "level": "Primary"
  },
  "Test First Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Test First Development",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 92.5,
    "ai_mentions": 8.8,
    "ai_alignment": 9.7,
    "ai_depth": 9.3,
    "ai_intent": 9.1,
    "ai_audience": 9.2,
    "ai_signal": 9.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content directly advocates for 'building quality in' using Test First practices, emphasizing TDD as a design practice, automation, and fast feedback. It targets engineering teams seeking to shift left and adopt modern DevOps flows; concepts align fully with Test First Development. Mentions of TDD, feedback loops, CI/CD, and success criteria are explicit and central. The discussion is deep (beyond surface-level), with supporting examples about fast feedback, shorter cycles, and 'building quality in.' No significant tangents or off-topic material; all signals point to Test First as both a practice and philosophy, and the tone is supportive throughout. No penalties needed, as content is current and not critical or outdated.",
    "reasoning_summary": "This content strongly aligns with Test First Development by focusing on building quality in from the start, highlighting TDD, automation, and shift-left principles, and directly addressing practices, benefits, and engineering audiences central to the category.",
    "level": "Primary"
  },
  "Azure DevOps": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Azure DevOps",
    "calculated_at": "2025-08-07T07:06:43",
    "ai_confidence": 73.661,
    "ai_mentions": 6.9,
    "ai_alignment": 8.3,
    "ai_depth": 7.7,
    "ai_intent": 7.8,
    "ai_audience": 7.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 74.0,
    "reasoning": "The content predominantly focuses on modern software quality practicesâ€”shift-left testing, automation, CI/CD, trunk-based developmentâ€”which are key parts of Agile and DevOps. It directly references Azure DevOps multiple times, including with a dedicated case study about the Azure DevOps team's improvement journey (moving from long regression tests to rapid feedback with unit tests), using Azure DevOps as a flagship example. However, most of the article is written in generic, tool-agnostic language and only expands into Azure DevOps specifics for one in-depth but supplementary section. While the Azure DevOps case is detailed and relevant, the primary intent and much of the content aligns with general best practices for DevOps, Agile, and software engineering, with Azure DevOps presented as one strong illustration. The audience is technical (engineering teams, leaders), matching the category, and the discussion is focused, but not wholly centered on Azure DevOps. No penalties for outdated content or tone were necessary.",
    "reasoning_summary": "While much of the content covers general Agile/DevOps practices, a significant, in-depth Azure DevOps case study and multiple direct references establish relevance. However, the fit is partial, with Azure DevOps as a key example, not the sole focus.",
    "level": "Secondary"
  },
  "Daily Scrum": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Daily Scrum",
    "calculated_at": "2025-07-15T17:14:15",
    "ai_confidence": 5.62,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.6,
    "ai_intent": 0.75,
    "ai_audience": 2.1,
    "ai_signal": 0.35,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content centers on building in software quality with TDD, automation, and Azure DevOps practices. There are no direct mentions of the Daily Scrum event or its themes, structures, or best practices. While adjacent topics of transparency, feedback loops, and Agile/DevOps approaches are discussed, nothing specifically links to Daily Scrumâ€™s intent, roles, cadence, or execution. The audience overlaps in that both target Agile practitioners, but the subject matter focuses on technical engineering improvements, not Scrum events or meetings.",
    "reasoning_summary": "This content does not relate to Daily Scrum. It focuses on engineering quality and 'shift left' practices in DevOps, without reference to Scrum events or Daily Scrum topics, structure, or intent.",
    "level": "Ignored"
  },
  "Scaling": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Scaling",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 19.066,
    "ai_mentions": 0.2,
    "ai_alignment": 2.9,
    "ai_depth": 2.6,
    "ai_intent": 2.1,
    "ai_audience": 7.3,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on integrating quality engineering practices such as TDD, automation, static analysis, and CI/CD pipelines. It targets engineering teams and practitioners, with strong audience alignment. However, there is almost no direct mention or discussion of scaling frameworks, cross-team coordination, or managing complexity across multiple teams. The advice is relevant at the team or workflow level, not enterprise scale. The main goal is improving software quality at the sourceâ€”valuable for all teams, but not explicitly or substantially related to scaling agile or DevOps across an organization.",
    "reasoning_summary": "This content provides strategies for building quality into software delivery, targeting developers and engineering teams. While valuable, it does not address the challenges or frameworks of scaling Agile or DevOps across multiple teams or the enterprise. Its focus remains at the single-team or workflow level.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Trend Analysis",
    "calculated_at": "2025-07-15T17:14:21",
    "ai_confidence": 39.32,
    "ai_mentions": 1.3,
    "ai_alignment": 4.7,
    "ai_depth": 4.1,
    "ai_intent": 3.6,
    "ai_audience": 8.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content is focused on engineering quality in DevOps by shifting left with TDD, automation, and Azure DevOps, aiming for faster feedback and fewer defects. While tools and practices mentioned are current, the content is advocacy-driven rather than an analysis or exploration of patterns or meaningful trends over time. It lacks evidence-based examination of shifts or trend impacts, and there's minimal reference to broader methodologies or strategic implications. Audience alignment and relevancy are strong, but alignment with the Trend Analysis category is limited to indirect references to practice shifts, not a deep dive into analysing or monitoring industry or organisational trends.",
    "reasoning_summary": "This content promotes DevOps quality practices, but does not explicitly or deeply analyse trends or shifting patterns in Agile or DevOps methodologies. Its fit with 'Trend Analysis' is mostly indirect, focusing more on advocacy and practice improvement.",
    "level": "Ignored"
  },
  "Team Performance": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Team Performance",
    "calculated_at": "2025-07-15T17:14:03",
    "ai_confidence": 83.84,
    "ai_mentions": 6.7,
    "ai_alignment": 9.2,
    "ai_depth": 8.9,
    "ai_intent": 8.3,
    "ai_audience": 7.6,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 84.0,
    "reasoning": "The content strongly emphasizes systemic, team-level delivery practices such as shifting quality left, implementing TDD, automation, static analysis, and CI/CD pipelinesâ€”all central to optimizing team performance. It explicitly discusses team challenges ('teams are still testing quality in'), how process changes (feedback loops, test cycles) affect outcomes, and provides actionable methods for elevating team behavior and throughput. Direct mentions of 'teams' and the focus on delivery system improvements signal strong conceptual alignment and depth. While there are some marketing elements, the majority is devoted to operational recommendations for technical teams, not individuals or HR metrics. Hence, scores are high across alignment, depth, and intent, with minor deductions for slight sales tone and call-to-action elements.",
    "reasoning_summary": "The content directly addresses team-level delivery practices, focusing on engineering quality as part of team workflow and system optimization. Its themes, solutions, and intent closely align with 'Team Performance,' providing actionable guidance for team improvement.",
    "level": "Primary"
  },
  "Working Software": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Working Software",
    "calculated_at": "2025-07-15T17:14:00",
    "ai_confidence": 77.84,
    "ai_mentions": 2.5,
    "ai_alignment": 8.6,
    "ai_depth": 7.8,
    "ai_intent": 8.2,
    "ai_audience": 8.0,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "The content centers on building quality into software from the start through TDD, automation, and CI/CDâ€”practices directly producing tangible, working software. It emphasizes real outcomes (shorter feedback loops, maintainability, testable code) and the role of engineering excellence in delivering usable software, aligning well conceptually with the category. However, explicit mention of 'working software' as an artifact is minimal, and the focus partly drifts to enabling practices rather than deliverables, with some promotional content reducing the signal-to-noise ratio.",
    "reasoning_summary": "The content strongly aligns with 'Working Software' by discussing strategies that directly result in high-quality, maintainable software increments. Although terminology is more implicit than explicit, the emphasis on engineering practices to consistently deliver working software makes it highly relevant to the category.",
    "level": "Secondary"
  },
  "Automated Testing": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Automated Testing",
    "calculated_at": "2025-07-15T17:14:18",
    "ai_confidence": 92.87,
    "ai_mentions": 8.8,
    "ai_alignment": 9.7,
    "ai_depth": 8.9,
    "ai_intent": 9.4,
    "ai_audience": 9.2,
    "ai_signal": 9.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content explicitly advocates for shifting left with automated testing practices like TDD, automated code checks, CI/CD, and unit testing within the context of Azure DevOps. Automated testing is directly referenced (mentions), and practices such as test automation, static analysis, and feedback loops are thematically central (alignment, intent). The discussion addresses multiple forms of automation (TDD, PR gates, CI pipelines) and their impact on early defect detection and team workflow (depth, signal). The target audience is engineers and agile teams, matching the category (audience). No penalties apply, as content is current, affirming, and not obsolete.",
    "reasoning_summary": "This content strongly aligns with Automated Testing, emphasizing TDD, automation, CI/CD, and quality engineering practices in Agile/DevOps. Itâ€™s tailored for technical teams seeking to shift left, speed up feedback, and integrate automated tests throughout development.",
    "level": "Primary"
  },
  "Mentoring": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Mentoring",
    "calculated_at": "2025-07-15T17:14:03",
    "ai_confidence": 16.35,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.8,
    "ai_intent": 1.0,
    "ai_audience": 6.7,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content focuses almost entirely on technical practices for building quality into software (e.g., TDD, automation, DevOps pipelines) and improving feedback cycles. There is no explicit or implicit discussion of mentoring, coaching, leadership development, or growth-oriented guidance for Agile professionals. The audience could include leaders, but the direct aim is at engineering practices, not personal development or mentoring dynamics. No outdated practices or contradictions are present, so no penalties apply. Overall, the discussion and intention are technical and process-focused rather than mentorship-related, resulting in very low alignment with the mentoring category.",
    "reasoning_summary": "This content centers on technical strategies for engineering quality in software, not on mentoring or coaching topics. There's minimal alignment with mentoring concepts or purposes described in the category.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Cycle Time",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 36.63,
    "ai_mentions": 2.2,
    "ai_alignment": 4.5,
    "ai_depth": 3.6,
    "ai_intent": 4.1,
    "ai_audience": 7.4,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses on building quality in early using TDD, automation, and DevOps practices, aiming to shorten feedback loops and reduce test cycles. However, it does not explicitly use the term \"Cycle Time\" or directly discuss its definition, measurement, or broader impact. While shorter feedback loops and faster cycles relate conceptually to Cycle Time, these are discussed only as desirable outcomes of engineering practices, not as the primary focus. There are no explicit references to measuring or managing Cycle Time, its relationship to other metrics, or tools for its visualization. The audience (Agile/DevOps practitioners) matches well, and the content is mostly on-topic for workflow efficiency, but Cycle Time itself plays only a secondary, implicit role.",
    "reasoning_summary": "This content emphasizes shifting left on quality and shortening feedback loops with DevOps practices, which indirectly aligns with Cycle Time by implying faster work cycles. However, Cycle Time is neither explicitly mentioned nor centrally analyzed, making the fit moderate but not strong.",
    "level": "Ignored"
  },
  "Current Value": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Current Value",
    "calculated_at": "2025-07-15T17:14:16",
    "ai_confidence": 34.03,
    "ai_mentions": 1.9,
    "ai_alignment": 3.7,
    "ai_depth": 3.35,
    "ai_intent": 2.8,
    "ai_audience": 7.1,
    "ai_signal": 5.25,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses primarily on quality engineering practices such as TDD, automation, and DevOps pipelines, advocating for 'building quality in' rather than inspecting for defects at later stages. While these practices can indirectly affect indicators relevant to Current Value (like speeding up feedback and reducing costs of late fixes), the content does not mention or explicitly discuss Current Value, Evidence-Based Management, or value-based metrics. Conceptual alignment is modest since improved quality can impact value realization, but there's no direct exploration of value measurement, customer impact, revenue metrics, or practical techniques for assessing Current Value. The audience (teams using DevOps, TDD, automation) potentially overlaps with Current Value stakeholders, but the intent and main message are just tangentially related to Current Value principles. Signal-to-noise is moderate: most of the content is on topic regarding quality but off-topic for value measurement.",
    "reasoning_summary": "This content advocates for engineering quality into software delivery, focusing on TDD, automation, and rapid feedback loops, but does not directly address Current Value or value measurement. Any alignment with the category is incidental and indirect.",
    "level": "Ignored"
  },
  "Windows": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Windows",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.15,
    "ai_depth": 0.1,
    "ai_intent": 0.15,
    "ai_audience": 0.15,
    "ai_signal": 0.15,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is entirely about DevOps quality practices, test automation, and engineering workflows, using Azure DevOps as the main platform. There are no direct mentions of Windows and no discussion of Windows-specific features, tooling, configuration, or troubleshooting. The topics, examples, and audience are focused on general software engineering excellence, not management or utilisation of the Windows operating system. No aspect of the content aligns with the Windows category key topics.",
    "reasoning_summary": "This content exclusively covers DevOps and software quality strategies, without referencing Windows or addressing any Windows-related concerns. It does not fit the Windows category by definition or topic alignment.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Engineering Practices",
    "calculated_at": "2025-08-07T07:22:29",
    "ai_confidence": 98.1,
    "ai_mentions": 9.5,
    "ai_alignment": 9.9,
    "ai_depth": 9.8,
    "ai_intent": 9.9,
    "ai_audience": 9.5,
    "ai_signal": 9.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 98.0,
    "reasoning": "This content is an exemplary fit for the 'Engineering Practices' category. It extensively and directly covers core topics: shifting left, automation, CI/CD, TDD, refactoring, and engineering ownership of quality. Clean code, feedback loops, static analysis, and trunk-based development are clearly highlighted, with deep, actionable examples (Azure DevOps) and practical steps for Agile teams. The intent is sharply focused on promoting high-quality, test-first engineering methods for technical teams, matching the target audience and avoiding off-topic discourse. There are no outdated or contradictory elements; every major dimension is strong.",
    "reasoning_summary": "Fully aligns with 'Engineering Practices'; covers automation, TDD, CI/CD, and feedback loops in depth, with clear technical intent and targeted audience. Fit is direct, complete, and highly confident.",
    "level": "Primary"
  },
  "Shift Left Strategy": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-07-15T17:14:01",
    "ai_confidence": 97.7,
    "ai_mentions": 9.5,
    "ai_alignment": 9.8,
    "ai_depth": 9.4,
    "ai_intent": 9.7,
    "ai_audience": 9.6,
    "ai_signal": 9.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 98.0,
    "reasoning": "The content explicitly references the Shift Left Strategy by name (in both plain language and as a hashtag), directly urges teams to 'shift quality left,' and discusses hallmark shift-left techniques: TDD, static analysis, automated gates, and CI/CD. The focus is clearly on integrating quality practices early in the development lifecycle (not just post-development). The depth includes specific tools (Azure DevOps), concrete practices, and outcome-oriented reasoning (fast feedback, catching issues early, building testable code). Audience targeting is directly aligned with practitioners and teams implementing DevOps and Agile engineering improvements. Over 90% of content is squarely on shift-leftâ€”no penalties apply.",
    "reasoning_summary": "This content highly aligns with Shift Left Strategy, featuring direct mentions, strong conceptual fit, and substantial depth on integrating quality early via TDD, automation, and toolchains. It targets practitioners keen on adopting shift-left practices, making its alignment with the category extremely high.",
    "level": "Primary"
  },
  "Value Stream Mapping": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-07-15T17:14:18",
    "ai_confidence": 16.6,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 1.7,
    "ai_intent": 1.8,
    "ai_audience": 4.8,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on building quality into software via test automation, TDD, and DevOps practices, with Azure DevOps tooling. There are no direct mentions of Value Stream Mapping, nor discussion of visualizing flow, identifying value or waste, or mapping end-to-end processes. It addresses process improvement for software, but not in the specific VSM sense. Its audience matches that of some VSM discussions (tech practitioners improving engineering workflows), but the overlap is incidental. No evidence of outdated or critical tone, so no penalties applied.",
    "reasoning_summary": "While relevant to process improvement and Agile engineering, the content does not discuss Value Stream Mapping or its principles. Its focus remains solely on quality, automation, and DevOps, without reference to mapping flow or identifying value across the stream.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Frequent Releases",
    "calculated_at": "2025-07-15T17:14:04",
    "ai_confidence": 75.57,
    "ai_mentions": 3.7,
    "ai_alignment": 8.9,
    "ai_depth": 8.2,
    "ai_intent": 8.4,
    "ai_audience": 8.6,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 76.0,
    "reasoning": "Direct mentions of 'frequent releases' are rare; however, conceptual alignment is highâ€”the text strongly emphasizes practices (CI/CD pipelines, test automation, shift-left, rapid feedback cycles) integral to enabling frequent releases. The focus is on shortening feedback loops, engineering quality in from the start, and reducing release friction, all of which are foundational to releasing more often. Audience targeting (technical practitioners, DevOps/engineering teams) and signal-to-noise are both strong. While the main intent is about quality-building, much of the substance centers on methods and tooling that directly support frequent and safe releasing. No penalties are warranted, as content is modern and supportive of the target category.",
    "reasoning_summary": "While not explicitly about frequent releases, the content is highly relevant due to its focus on shift-left quality practices, automation, and CI/CDâ€”all core enablers of releasing more frequently. Its audience and depth make it a strong match for the category.",
    "level": "Secondary"
  },
  "Practice": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Practice",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 91.7,
    "ai_mentions": 8.6,
    "ai_alignment": 9.7,
    "ai_depth": 9.3,
    "ai_intent": 9.2,
    "ai_audience": 9.0,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content emphasizes actionable practicesâ€”building in quality through TDD, automation, static analysis, and CI/CD pipelinesâ€”matching the 'Practice' definition. There are multiple direct references to key practices such as TDD (highlighted as design practice), continuous deployment, and automated feedback loops. The discussion is thorough, going beyond mere mention to explain intent and implementation benefits (shorter feedback loops, shift-left). Audience targeting aligns with practitioners and engineering teams, and most of the post is relevant to repeatable team habits. There are no outdated references or negative framing. Slight deduction on direct mentions since 'practice' itself isn't repeatedly named, but numerous methods are. Signal-to-noise slightly less than perfect due to brief promotional call-to-action, but this is minimal in context.",
    "reasoning_summary": "This content clearly focuses on actionable, repeatable engineering practices such as TDD, automation, and CI/CD, thoroughly illustrating how to build quality into the software process. The audience, intent, and discussion are all strongly aligned with the 'Practice' category.",
    "level": "Primary"
  },
  "Project Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Project Management",
    "calculated_at": "2025-07-15T17:14:03",
    "ai_confidence": 52.85,
    "ai_mentions": 1.2,
    "ai_alignment": 6.6,
    "ai_depth": 6.2,
    "ai_intent": 5.9,
    "ai_audience": 7.5,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content focuses primarily on technical engineering practicesâ€”TDD, CI/CD, automation, and building quality into software development using Azure DevOpsâ€”rather than project management concepts like scope, cost, scheduling, or governance. Although it touches tangentially on project outcomes (reducing feedback loops, enabling teams), explicit references to project management are almost entirely absent except for high-level links between quality and delivery efficiency. The main intent is to promote engineering workflow transformation, not methods or frameworks for planning and delivering projects across their lifecycle. The audience skews strongly technical rather than project managers or related roles. There are some general alignment points (e.g., meeting objectives, continuous improvement), but the core theme is product engineering and DevOps quality, not project management as defined here.",
    "reasoning_summary": "This content mainly addresses engineering practices and quality within software delivery, not project management methodologies or processes. Its relevance to project management is indirect, focusing on team workflow and automation rather than broader project execution or governance topics.",
    "level": "Tertiary"
  },
  "Hypothesis Driven Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-07-15T17:14:22",
    "ai_confidence": 22.15,
    "ai_mentions": 0.2,
    "ai_alignment": 2.4,
    "ai_depth": 2.3,
    "ai_intent": 2.8,
    "ai_audience": 6.5,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content strongly emphasizes 'building in quality' via TDD, automation, static analysis, and shift-left practices, targeted at engineering teams. However, it does not mention or discuss hypothesis formulation, experimentation, empirical validation, or the process of learning from testing hypotheses. There are no references to A/B testing, metrics, or validated learning cycles. The focus is almost entirely on proactive quality engineering and DevOps workflow improvements, which do not inherently involve hypothesis-driven development as defined. The signal-to-noise ratio is reasonable, with some targeting the correct audience, but the conceptual fit and depth related to the category remain very weak.",
    "reasoning_summary": "This content is centered on proactive quality engineering and DevOps practices but lacks any discussion of hypothesis-driven development methods such as experimentation, validated learning, or empirical hypothesis testing. Its alignment with the category is marginal.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Continuous Delivery",
    "calculated_at": "2025-07-15T17:14:00",
    "ai_confidence": 91.6,
    "ai_mentions": 8.7,
    "ai_alignment": 9.6,
    "ai_depth": 9.3,
    "ai_intent": 8.8,
    "ai_audience": 8.9,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content directly and explicitly references Continuous Delivery (CI/CD) in hashtags and core messaging, focusing on integrating quality practices early, TDD, automation, and feedback loopsâ€”all central to Continuous Delivery principles. It highlights how Azure DevOps pipelines, automation, and rapid feedback enable small, reliable, and immediate releases. The audience is technical (developers, engineers), with a clear intent to advance Continuous Delivery practices. The discussion is substantial, covering techniques (TDD, static analysis, policy gates), user benefits (shorter cycles, built-in quality), and tools (Azure DevOps). There is minimal off-topic content, with strong conceptual alignment throughout. No penalties were required, as the material is current and positively framed.",
    "reasoning_summary": "This content deeply aligns with Continuous Delivery by emphasizing early quality, automation, feedback, and enabling rapid, reliable releases. It targets technical teams and thoroughly explores relevant practices and tooling, with minor off-topic material.",
    "level": "Primary"
  },
  "Experimentation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Experimentation",
    "calculated_at": "2025-07-15T17:13:55",
    "ai_confidence": 37.95,
    "ai_mentions": 0.8,
    "ai_alignment": 3.3,
    "ai_depth": 3.7,
    "ai_intent": 3.1,
    "ai_audience": 8.6,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "This content is focused on promoting 'shift left' quality practices like TDD, automation, and CI/CD within Agile and DevOps workflows. However, it never directly references experimentation, hypothesis-driven approaches, or systematic testing of ideas. Instead, it emphasizes engineering practices to build quality in from the start and accelerate feedback loops. While rapid feedback and continuous improvement are thematically related to experimentation, no explicit methods (A/B testing, hypothesis validation, experimental cycles) are discussed. The main intent is educational and practical, targeting practitioners interested in Agile/DevOps quality, not in experimentation per se. The audience and focus are aligned with Agile engineers and teams, but direct linkages to experimentation as defined are minimal.",
    "reasoning_summary": "While thematically connected to Agile improvement and feedback, the content centers on engineering quality practicesâ€”not on experimentation or hypothesis-driven validation. There are no explicit mentions or substantial exploration of experimentation methods relative to the category definition.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Scrum Master",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 12.7,
    "ai_mentions": 0.1,
    "ai_alignment": 1.5,
    "ai_depth": 1.2,
    "ai_intent": 2.0,
    "ai_audience": 3.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on engineering practices such as TDD, automation, and DevOps for building quality into software delivery. There is no explicit mention of the Scrum Master role or accountability, nor any discussion about Scrum Master responsibilities or systemic impact on team effectiveness. The primary audience appears to be developers and engineering teams, not Scrum Masters specifically. Overall, the content aligns more closely with software engineering and DevOps rather than the Scrum Master accountability within Scrum.",
    "reasoning_summary": "This content centers on quality engineering practices with TDD, DevOps, and automationâ€”not Scrum Master accountability. It lacks direct references to Scrum or the Scrum Master role, addressing developers and teams interested in engineering excellence rather than focusing on the Scrum Masterâ€™s unique responsibilities.",
    "level": "Ignored"
  },
  "Strategy": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Strategy",
    "calculated_at": "2025-07-15T17:14:05",
    "ai_confidence": 32.056,
    "ai_mentions": 1.1,
    "ai_alignment": 3.7,
    "ai_depth": 4.0,
    "ai_intent": 3.2,
    "ai_audience": 5.6,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content focuses heavily on the operational shift from testing quality late to building it in early via practices like TDD, static analysis, automation, and CI/CD. While these practices can be part of a broader quality or engineering strategy, discussion here remains tactical and practice-specific, emphasizing workflow transformation and technical enablement in Azure DevOps. There is a brief allusion to 'engineering excellence' as a goal, but strategic planning, alignment, or higher-level decision frameworks are not substantially addressed. The target audience blends practitioners and teams implementing methods rather than executives or strategists. Scores reflect minimal explicit mention of 'strategy', modest conceptual overlap, and a lack of in-depth strategic exploration.",
    "reasoning_summary": "This content is primarily tactical, guiding teams on implementing quality-focused engineering practices. While these can support strategic goals, explicit discussion of organizational strategy, strategic planning, or decision frameworks is minimal.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Customer Focus",
    "calculated_at": "2025-07-15T17:14:25",
    "ai_confidence": 30.472,
    "ai_mentions": 0.6,
    "ai_alignment": 2.3,
    "ai_depth": 2.5,
    "ai_intent": 1.8,
    "ai_audience": 2.5,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content chiefly discusses 'building quality in' via engineering tactics like TDD, automation, and CI/CD, emphasizing rapid feedback and reduced rework. However, it stops short of explicitly connecting these practices to defining, measuring, or maximizing customer value or outcomes. There is no mention of customer-centric metrics, feedback from users, or tying engineering excellence to improved customer experiences. While the effort to 'build quality in' indirectly supports customer satisfaction, this implication is not explored in depth; the content remains focused on process and engineering discipline for internal product quality. No penalties are needed as the content does not contradict or satirize the category.",
    "reasoning_summary": "The content centers on shifting quality practices left with TDD and automation but does not directly address customer value, outcomes, or feedback. Its primary focus remains on engineering process excellence, resulting in only a weak alignment with the Customer Focus category.",
    "level": "Ignored"
  },
  "Forecasting": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Forecasting",
    "calculated_at": "2025-07-15T17:14:04",
    "ai_confidence": 7.33,
    "ai_mentions": 0.15,
    "ai_alignment": 0.6,
    "ai_depth": 0.55,
    "ai_intent": 0.75,
    "ai_audience": 2.7,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses on quality engineering practices (TDD, automation, CI/CD, shift-left) within Agile/DevOps, emphasizing early feedback and rapid defect detection to build quality into the software process. However, it never references forecasting, predicting timelines, empirical risk management, or estimation practices associated with the Forecasting category. Key concepts such as delivery prediction, velocity, burn-down charts, or planning accuracy are absent. The target audience (Agile/DevOps practitioners) marginally overlaps with those interested in forecasting, but the content remains tightly centered on quality and workflow transformationâ€”not forecasting methods. Any alignment is limited to indirect, hypothetical effects of reducing cycle times or increasing code stability, but explicit and conceptual relevance is minimal.",
    "reasoning_summary": "This content is about building in software quality with Agile/DevOps practices and rapid feedback, not about forecasting delivery timelines or project outcomes. It doesn't mention or discuss forecasting methods, making its relevance to the Forecasting category extremely low.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Modern Source Control",
    "calculated_at": "2025-07-15T17:14:00",
    "ai_confidence": 23.3,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.5,
    "ai_audience": 7.2,
    "ai_signal": 3.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content primarily focuses on shifting quality left through practices like TDD, static analysis, automation, and CI/CD in the context of Azure DevOps. While pull request gates and CI/CD pipelines are briefly mentionedâ€”touching on modern source control workflowsâ€”the main focus is on quality assurance, not on the principles, strategies, or best practices central to modern source control. Explicit references to version control systems, branching, or code management are absent. Most relevance is indirect: the mention of code review gates and automated checks aligns partially with source control practices, but the discussion does not go beyond high-level mentions, lacking depth, technical detail, or exploration of source control methodologies. The audience is generally aligned (practitioners in DevOps/engineering environments), but content focus is only marginally relevant to the evaluated category.",
    "reasoning_summary": "This content is focused on quality engineering, automation, and feedback loops, with only brief and peripheral mentions of source control practices such as pull request gates. It does not substantially address modern source control topics, making its fit for this category minimal.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Organisational Change",
    "calculated_at": "2025-07-15T17:14:00",
    "ai_confidence": 31.031,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 2.9,
    "ai_intent": 3.5,
    "ai_audience": 5.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content focuses primarily on technical practices such as TDD, DevOps automation, and tooling to build quality into software delivery. While improved engineering workflows can indirectly support organisational change towards agility, there is no direct mention or deep exploration of organisational transformation, change management frameworks, leadership roles, or strategies for managing resistance. The main audience seems to be software engineers or technical specialists, not decision-makers leading change initiatives. Thus, the connection to organisational change is mostly tangential and lacks methodological or strategic alignment.",
    "reasoning_summary": "This content spotlights technical quality practices like TDD, automation, and DevOps. It barely references organisational transformation or change management and is targeted more at technical practitioners than leaders driving organisational change. Alignment with the category is marginal.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Definition of Ready",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 11.863,
    "ai_mentions": 0.1,
    "ai_alignment": 1.7,
    "ai_depth": 1.2,
    "ai_intent": 2.2,
    "ai_audience": 3.8,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on building quality into the development process, emphasizing shift-left strategies such as TDD, automation, and early feedback. There is no direct reference or discussion of Definition of Ready, nor are criteria for backlog item readiness or refinement covered. Although both build quality and DoR contribute to effective delivery, this content is solely about engineering practices and continuous integration, not about preparing backlog items for sprint planning. The audience (technical Agilists and DevOps practitioners) loosely overlaps, but the substance does not address DoR concepts.",
    "reasoning_summary": "This content promotes shift-left quality practices like TDD and automation but does not mention or discuss Definition of Ready or readiness criteria for backlog items. Its focus is on engineering discipline, not backlog refinement or DoR.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Entrepreneurship",
    "calculated_at": "2025-07-15T17:14:23",
    "ai_confidence": 27.65,
    "ai_mentions": 0.3,
    "ai_alignment": 3.2,
    "ai_depth": 2.5,
    "ai_intent": 3.7,
    "ai_audience": 5.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content is focused on DevOps practices such as shifting quality left, TDD, automation, and faster software delivery. There is no direct mention or substantial discussion of entrepreneurship, innovation in the business/venture sense, risk-taking, or entrepreneurial mindset. The intent is to improve software engineering workflows rather than address value creation or business-building strategies central to entrepreneurship. The audience aligns more with technical professionals than entrepreneurs, although practices discussed could influence innovative startups. Signal is moderate due to tangential links where process improvements might interest entrepreneurially minded teams, yet overall the fit is poor for the 'Entrepreneurship' category.",
    "reasoning_summary": "This resource primarily discusses software engineering quality, not entrepreneurship. While relevant for technical teams and process improvement, it lacks direct focus on entrepreneurial concepts like innovation, risk, or value creation in business.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-07-15T17:14:17",
    "ai_confidence": 81.78,
    "ai_mentions": 4.3,
    "ai_alignment": 8.7,
    "ai_depth": 7.9,
    "ai_intent": 8.1,
    "ai_audience": 7.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content focuses on practical approaches (TDD, automation, DevOps pipelines) to embedding quality throughout the software development lifecycleâ€”central to pragmatic thinking in Agile/DevOps. While it doesn't explicitly reference 'pragmatic thinking', its direct application of experience-based practices, emphasis on feedback loops, and real-world reduction of QA cycles align tightly with the category. The discussion moves beyond abstraction, offering actionable steps and examples relevant for practitioners. The primary intent is to inform and motivate technically-oriented teams to adopt proven, pragmatic shifts in quality strategy, reflecting a high signal-to-noise ratio. A moderate audience alignment score reflects some subtle marketing, but the content remains solution-oriented and relevant.",
    "reasoning_summary": "The content strongly aligns with Pragmatic Thinking, emphasizing experience-based, practical strategies for building quality into Agile/DevOps workflows. It spotlights real-world techniques and benefits, focusing on actionable guidance for technical teams.",
    "level": "Primary"
  },
  "Lean Principles": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Lean Principles",
    "calculated_at": "2025-08-07T07:07:24",
    "ai_confidence": 53.55,
    "ai_mentions": 1.3,
    "ai_alignment": 6.9,
    "ai_depth": 6.8,
    "ai_intent": 6.5,
    "ai_audience": 7.2,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content aligns with Lean ideas around minimizing waste and maximizing value by advocating for automation, reduced cycle times, early feedback, and continuous improvement in software delivery. However, it never explicitly names or discusses 'Lean Principles' or Lean-specific terminology (e.g., Muda, Kaizen, Value Stream Mapping). The primary focus is on DevOps, Agile, shift-left testing, and engineering practices to improve software quality, which overlap conceptually with Lean but do not directly reference its core principles, tools, or language. The Azure DevOps case and advice for teams mirror Lean themesâ€”shortening feedback loops and incremental improvementâ€”but without explicit Lean framing. The intended audience (software/DevOps practitioners) somewhat matches Lean's practitioner audience, but Lean practitioners would expect more direct terminology and examples. Therefore, the fit is partial and mostly conceptual rather than direct.",
    "reasoning_summary": "The content shares Lean themesâ€”waste reduction, continuous improvement, rapid feedbackâ€”but doesn't mention or frame itself as Lean Principles. Conceptual overlap exists, but the fit is indirect and lacks explicit Lean context.",
    "level": "Tertiary"
  },
  "Estimation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Estimation",
    "calculated_at": "2025-07-15T17:14:08",
    "ai_confidence": 1.6,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.3,
    "ai_audience": 0.1,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content focuses entirely on building quality into software processes through TDD, automation, and DevOps practices. There are no direct mentions or discussions of estimation techniques, forecasting, empirical data use in estimation, or stakeholder alignment related to estimation. Any agile references are about quality and feedback loops, not estimation. The audience and intent are aligned with engineering and quality improvement rather than estimation-related objectives.",
    "reasoning_summary": "The content is centered on engineering quality via TDD and DevOps, with no significant connection to Agile estimation practices or topics.",
    "level": "Ignored"
  },
  "Decision Making": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Decision Making",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 42.3,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 3.6,
    "ai_audience": 8.5,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content centers on adopting 'build quality in' via DevOps, TDD, automation, and feedback loops. While it references structured techniques and feedbackâ€”each adjacent to evidence-based practiceâ€”explicit discussions of decision-making frameworks, analytics, or collaborative choice processes are absent. There are no direct mentions of decision making. The primary intent is engineering quality, not facilitating or exploring organisational decision-making per se. The audience (engineering/DevOps practitioners) does overlap with those involved in evidence-based decision practices, but the focus is operational (how to implement quality) instead of strategic (how to decide between options). Signal-to-noise is moderate, with much content relevant to workflow transformation rather than core decision-making approaches. No penalties were applied, as the content does not contradict the category nor use outdated material.",
    "reasoning_summary": "This resource discusses engineering quality in software delivery using TDD and DevOps, referencing feedback loops and CI/CD. While these concepts are adjacent to decision-making, the content does not directly address structured or evidence-based decision-making methodologies, making alignment moderate but not strong.",
    "level": "Tertiary"
  },
  "Lean Startup": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Lean Startup",
    "calculated_at": "2025-07-15T17:14:26",
    "ai_confidence": 13.352,
    "ai_mentions": 0.2,
    "ai_alignment": 1.6,
    "ai_depth": 1.4,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on shifting quality practices left in the software development lifecycle using TDD, automation, and DevOps tooling. It does not mention or substantially align with Lean Startup concepts such as MVPs, Build-Measure-Learn, validated learning, or rapid customer-centric experimentation. The primary audience appears to be engineers and DevOps practitioners interested in code quality, not startup founders or innovators focusing on iterative business validation. While quick feedback loops are mentioned, these are in service of code quality rather than business hypothesis testing, so any alignment with Lean Startup is incidental and minimal.",
    "reasoning_summary": "The content centers on engineering quality and DevOps practices, not Lean Startup principles. There are only surface-level similarities in feedback loop language, with no substantive connection to Lean Startup concepts or intended audience.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Test Driven Development",
    "calculated_at": "2025-07-15T17:14:04",
    "ai_confidence": 69.55,
    "ai_mentions": 5.9,
    "ai_alignment": 7.5,
    "ai_depth": 6.6,
    "ai_intent": 8.1,
    "ai_audience": 9.2,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 70.0,
    "reasoning": "TDD is explicitly mentioned and is positioned as a core practice for building quality in, with emphasis on using tests as a design tool. The content discusses shifting quality left with TDD, automation, and Azure DevOps, and referencing feedback loops and maintainable code. However, TDD is discussed alongside other practices (static analysis, CI/CD, automation) and does not receive thorough deep-dive treatment. The main thrust is holistic engineering quality, not solely TDD. The audience is clearly technical, with the primary intent fitting TDD category objectives. No penalties apply as the content is current and not critical of TDD.",
    "reasoning_summary": "The content strongly aligns with TDD by highlighting it as a key approach for building quality in early. While TDD shares focus with other practices, its mention as a design methodology and the technical, practitioner-focused audience make it a solid fit for this category, though coverage is not deeply detailed.",
    "level": "Secondary"
  },
  "Continuous Improvement": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Continuous Improvement",
    "calculated_at": "2025-07-15T17:14:09",
    "ai_confidence": 70.23,
    "ai_mentions": 2.8,
    "ai_alignment": 7.7,
    "ai_depth": 6.6,
    "ai_intent": 7.2,
    "ai_audience": 7.9,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 70.0,
    "reasoning": "The content focuses on proactively engineering quality through practices like TDD, automation, CI/CD, and feedback loops, concepts closely tied to Continuous Improvement in Agile and DevOps contexts. However, it makes only indirect or implicit references to Continuous Improvement itself and does not deeply explore its cultural, empirical, or strategic aspects (e.g., Kaizen, PDCA, or broader evidence-based reflection and adaptation cycles). The content is strongly aligned in audience and signal, being relevant for technical practitioners and advocating for process enhancement, but the main framing is around engineering quality, with Continuous Improvement as a secondary implication rather than a primary theme.",
    "reasoning_summary": "This content highlights practices that strongly support Continuous Improvementâ€”such as shifting quality left, rapid feedback, and automationâ€”but focuses primarily on engineering quality rather than the broader philosophy or processes of Continuous Improvement itself.",
    "level": "Secondary"
  },
  "Framework": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Framework",
    "calculated_at": "2025-07-15T17:14:02",
    "ai_confidence": 32.75,
    "ai_mentions": 1.1,
    "ai_alignment": 3.3,
    "ai_depth": 2.7,
    "ai_intent": 3.8,
    "ai_audience": 9.2,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content promotes building quality into software processes using DevOps practices, TDD, and automation. It does not directly discuss or compare frameworks, nor does it outline principles, adaptation strategies, or provide structured methodology guidance. The primary focus is on practices and tools (TDD, CI/CD, Azure DevOps) rather than on any Agile, DevOps, or Lean frameworks. There's strong audience alignment (engineering teams), and the content is relevant for practitioners seeking workflow and quality improvements, but it lacks the conceptual depth, direct mentions, and intent required for the 'Framework' classification.",
    "reasoning_summary": "This content focuses on DevOps practices and engineering quality rather than discussing, explaining, or comparing Agile or DevOps frameworks. While relevant to teams using such frameworks, it does not address the framework categoryâ€™s main themes.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Flow Efficiency",
    "calculated_at": "2025-07-15T17:14:23",
    "ai_confidence": 37.35,
    "ai_mentions": 1.2,
    "ai_alignment": 3.7,
    "ai_depth": 3.2,
    "ai_intent": 4.4,
    "ai_audience": 5.1,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content primarily discusses building quality into software delivery, highlighting practices like TDD, static analysis, and shift-left testing in Azure DevOps. While these strategies can indirectly support aspects of flow efficiency (by reducing late defect discovery and minimizing rework), the main focus is quality and automationâ€”not explicit optimization of work throughput or value stream bottlenecks. Flow efficiency terms, metrics (like cycle or lead time), or WIP optimization are not directly addressed. The audience overlaps with those interested in flow efficiency (engineering teams, DevOps practitioners), and the content is fairly focused with little off-topic filler, but the conceptual and depth alignment remains low to moderate due to lack of direct coverage.",
    "reasoning_summary": "This content centers on building quality in via shift-left engineering, TDD, and automation within DevOps workflows. While related to fast feedback loops and indirectly relevant to flow efficiency, it does not directly address optimizing work throughput or eliminating bottlenecksâ€”the core of the flow efficiency category.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Large Scale Agility",
    "calculated_at": "2025-07-15T17:14:00",
    "ai_confidence": 17.65,
    "ai_mentions": 0.4,
    "ai_alignment": 2.45,
    "ai_depth": 2.7,
    "ai_intent": 2.25,
    "ai_audience": 4.1,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on team-level quality engineering, such as TDD, automation, DevOps, and Azure pipelines. It emphasizes shifting quality left and faster feedback cycles, but never directly discusses principles or frameworks of scaling Agile at the enterprise level. There are no references to multi-team, organization-wide, or cross-team alignment, nor to large-scale frameworks, leadership roles in scaling, or strategy. The primary intent is to improve quality practices within teams, not on organizational Agility, which limits alignment and depth for the 'Large Scale Agility' category.",
    "reasoning_summary": "The content centers on improving software quality within teams using TDD, automation, and Azure DevOps. It doesn't address scaling Agile or enterprise-level strategies, so its relevance to 'Large Scale Agility' is minimal. Alignment and depth with the category are notably limited.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Team Motivation",
    "calculated_at": "2025-07-15T17:14:11",
    "ai_confidence": 12.05,
    "ai_mentions": 0.3,
    "ai_alignment": 1.6,
    "ai_depth": 1.1,
    "ai_intent": 0.8,
    "ai_audience": 3.2,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on shifting quality practices leftâ€”using TDD, automation, and DevOps workflows for more efficient software delivery. It emphasizes engineering practices, tools, and rapid feedback loops, aiming to improve process quality, not directly to enhance motivation, engagement, or team dynamics. There are no direct mentions or key motivational strategies (such as trust, empowerment, or shared vision). While the audience (agile engineers and teams) has overlap with those interested in team motivation, the contentâ€™s main purpose is technical process improvement. Aside from a light reference to team workflows, it does not explore psychological or social motivators, leadership, or interpersonal aspects.",
    "reasoning_summary": "This content is about technical practices for building software quality in, not about team motivation. Thereâ€™s minimal relevance to engagement, empowerment, or team dynamicsâ€”its focus is process and tooling rather than motivational strategies.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Azure Repos",
    "calculated_at": "2025-07-15T17:14:27",
    "ai_confidence": 14.195,
    "ai_mentions": 0.6,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 2.1,
    "ai_audience": 3.2,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses on building quality into software via DevOps practices like TDD, automation, static analysis, and CI/CD, within an Azure DevOps context. However, it does not mention Azure Repos directly or discuss its specific functionalities (version control, branching, pull requests, repository management, etc.). Any references to pull request gates or CI/CD remain generic or tied to Azure DevOps as a suite. The themes and audience do not specifically map to Azure Repos as the primary category; source control and repository-specific practices are not discussed in depth or at all.",
    "reasoning_summary": "This content discusses quality practices and automation using Azure DevOps, but does not directly address Azure Repos or its core source control topics. Its relevance to the Azure Repos category is minimal and almost entirely incidental.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Beta Codex",
    "calculated_at": "2025-07-15T17:14:04",
    "ai_confidence": 13.55,
    "ai_mentions": 0.3,
    "ai_alignment": 1.9,
    "ai_depth": 2.4,
    "ai_intent": 2.1,
    "ai_audience": 4.2,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content exclusively focuses on software engineering practices such as TDD, test automation, CI/CD, and 'shift left' quality, referencing Azure DevOps and Agile engineeringâ€”not decentralized, human-centric, or adaptive organizational design as per BetaCodex principles. There are no direct mentions, concepts, comparisons, or discussions relating to Beta Codex. Audience is technical/engineering rather than organizational design. No notable penalties apply for obsolete or contradictory tone.",
    "reasoning_summary": "This content targets engineering teams and discusses software quality and DevOps practices, not organizational design or BetaCodex concepts. It does not align with the Beta Codex category.",
    "level": "Ignored"
  },
  "Business Agility": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Business Agility",
    "calculated_at": "2025-07-15T17:14:09",
    "ai_confidence": 40.91,
    "ai_mentions": 1.1,
    "ai_alignment": 4.2,
    "ai_depth": 3.9,
    "ai_intent": 4.1,
    "ai_audience": 3.7,
    "ai_signal": 3.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses on software engineering practicesâ€”such as TDD, automated CI/CD, and shift-left testingâ€”with tools like Azure DevOps to build quality into the development process. There is an indirect fit to business agility: improved feedback loops, automation, and shift-left practices do contribute to a team's ability to rapidly deliver value and respond to change (an aspect of business agility). However, the framing and language are engineering-centric, with no direct or explicit discussion of business agility principles, culture, leadership, organisational transformation, or business outcomes. Target audience is primarily technical (developers, engineers) rather than business leaders or strategists typically addressed by business agility content. The content aligns best with enabling practices that can support business agility, but does not address the broader dimensions, purpose, or metrics central to the category.",
    "reasoning_summary": "This content highlights technical practices to build quality into software developmentâ€”a foundational enabler for rapid delivery and change. While relevant to business outcomes, it doesn't directly address business agility principles, organisational change, or leadership, making its fit with the category partial and indirect.",
    "level": "Tertiary"
  },
  "Systems Thinking": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Systems Thinking",
    "calculated_at": "2025-07-15T17:14:05",
    "ai_confidence": 36.1,
    "ai_mentions": 0.5,
    "ai_alignment": 3.8,
    "ai_depth": 2.4,
    "ai_intent": 3.3,
    "ai_audience": 6.2,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "Direct mention of systems thinking is absent (score: 0.5). The content centers on DevOps and engineering quality practices such as TDD, automation, and shifting feedback left. While there is a nod to feedback loops and reduction of rework (concepts that relate to systems thinking), the explicit focus is on practical engineering and tools rather than holistic analysis of organizational systems. Thereâ€™s no substantial exploration of interdependencies, system mapping, or systemic culture change. Audience is aligned with engineering practitioners (score: 6.2), and content is generally focused, but lacks direct or deep systems thinking discussion.",
    "reasoning_summary": "This content focuses mainly on DevOps practices and improving feedback loopsâ€”not on the holistic principles or applications of Systems Thinking. While thereâ€™s some relevance in preventing downstream quality issues, Systems Thinking is not directly addressed or thoroughly explored.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "System Configuration",
    "calculated_at": "2025-07-15T17:14:12",
    "ai_confidence": 34.18,
    "ai_mentions": 1.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.7,
    "ai_intent": 2.2,
    "ai_audience": 3.1,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content primarily emphasizes building quality into software development processes early through TDD, CI/CD pipelines, automated testing, and feedback loops using Azure DevOps. While these topics involve some technical practices (automation, CI/CD), they are not directly and thoroughly addressing the domain of System Configuration as defined. There are no significant explicit mentions of configuration tools, management methodologies, hardware/software integration, or ongoing maintenance practices. The focus is on engineering excellence, test automation, and shifting quality left, which sit adjacent to but do not deeply align with the purposeful setup, configuration, or administration of systems. Only tangential referencesâ€”such as automated policies and pipelinesâ€”could be loosely related to system automation aspects, but these are secondary to the main narrative about software quality and process improvement, not comprehensive coverage of system configuration.",
    "reasoning_summary": "This content centers on building quality through DevOps, automation, and fast feedback rather than system setup or configuration. References to pipelines and automation are secondary, leaving only limited overlap with System Configuration as defined.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-07-15T17:14:01",
    "ai_confidence": 40.25,
    "ai_mentions": 1.7,
    "ai_alignment": 4.9,
    "ai_depth": 4.3,
    "ai_intent": 5.6,
    "ai_audience": 4.2,
    "ai_signal": 3.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content strongly promotes engineering practices such as TDD, automation, CI/CD, and shift-left principles for quality, arguing for building quality in from the start. This aligns tangentially with Agile principles around technical excellence and early, continuous delivery of valuable software. However, the discussion remains focused on practical techniques, not the Agile Values and Principles themselves. There are no explicit references to the Agile Manifesto, Agile values, or principles, and the main focus is on how to engineer quality via tools and practices (Azure DevOps, TDD, automation) rather than discussing the philosophy or mindset behind Agile. The intended audience are engineering teams and leaders, which does overlap somewhat with agile practitioners, but the messaging is more practical and tool-based than values-driven. Overall, the fit is partial and implicit, resulting in a relatively low confidence score.",
    "reasoning_summary": "While the content encourages quality-first practices that reflect Agile principles, its primary focus is on engineering tools, automation, and process improvement. It offers only indirect alignment with Agile Values and Principles, covering tactics rather than discussing philosophy or core values.",
    "level": "Ignored"
  },
  "Software Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Software Development",
    "calculated_at": "2025-07-15T17:14:15",
    "ai_confidence": 97.68,
    "ai_mentions": 9.7,
    "ai_alignment": 9.9,
    "ai_depth": 9.5,
    "ai_intent": 9.8,
    "ai_audience": 9.4,
    "ai_signal": 9.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 98.0,
    "reasoning": "The content directly references key Software Development topics such as TDD, CI/CD, DevOps, static analysis, automation, and code quality practices. It is conceptually aligned, emphasizing 'building quality in,' a central SDLC principle. The depth is strongâ€”the piece elaborates on specific techniques, feedback loops, and shifting quality left. Intent aligns with helping practitioners adopt these practices, clearly targeting developers, engineers, and Agile teams. Nearly all content is signal; hashtags and calls to action reinforce developer relevance. No penalties are necessary, as it is up-to-date and positive in framing.",
    "reasoning_summary": "The content thoroughly covers critical software development practices like TDD, CI/CD, automation, and DevOps, emphasizing quality engineering from the start. It is purpose-built for a technical software engineering audience and strongly aligns with the Software Development category.",
    "level": "Primary"
  },
  "Digital Transformation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Digital Transformation",
    "calculated_at": "2025-07-15T17:14:25",
    "ai_confidence": 60.56,
    "ai_mentions": 2.8,
    "ai_alignment": 7.3,
    "ai_depth": 6.1,
    "ai_intent": 6.6,
    "ai_audience": 8.5,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content focuses on engineering practices to improve software quality, primarily through shift-left strategies, TDD, automation, and leveraging Azure DevOps. While it references workflow transformation and ties to a larger series about moving from legacy to excellence, it does not directly mention digital transformation, enterprise strategy, or organisational change beyond engineering practices. The main conceptual ties are with agility, automation, and continuous improvement, which are components of broader digital transformation but not discussed in a strategic business context here. Some alignment exists through the messaging on transforming workflows, but depth and explicitness regarding enterprise-level digital transformation topics are limited.",
    "reasoning_summary": "This episode emphasizes engineering workflow improvement via modern DevOps and quality practices. While relevant to digital transformation in intent and themes, the discussion centers on engineering teams and technical practices, with limited strategic scope.",
    "level": "Secondary"
  },
  "Company as a Product": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Company as a Product",
    "calculated_at": "2025-07-15T17:14:12",
    "ai_confidence": 16.56,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 8.4,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses exclusively on software engineering practices (shift-left, TDD, DevOps, automation) aimed at 'building in' software quality. It does not reference, discuss, or imply Company as a Product approaches. There is no mention of organizational strategy, holistic organisational evolution, or customer-centric organizational design. The audience is technical and practitioner-focused (engineers, DevOps), not executives, strategists, or those seeking CaaP frameworks. Though well-aligned with modern engineering, it is not conceptually or purposefully tied to the CaaP category.",
    "reasoning_summary": "This content centers on engineering and testing best practices, not on Company as a Product themes. It lacks connection to organizational strategy, structure, or evolution, and does not engage with customer-centric or CaaP concepts.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-07-15T17:14:28",
    "ai_confidence": 37.432,
    "ai_mentions": 1.5,
    "ai_alignment": 4.0,
    "ai_depth": 3.2,
    "ai_intent": 3.7,
    "ai_audience": 5.0,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content is focused on building quality via TDD, automation, and DevOps practices, with emphasis on shifting quality left and shortening feedback loops. However, it does not directly discuss cross-functional teams, their structure, or cross-discipline collaborationâ€”terms key to the category. There's only an implicit connection: quality practices like TDD and CI/CD often require some cross-functionality, and Azure DevOps is typically used by teams with blended roles. Still, the main discussion centers on engineering practices, not the dynamics or characteristics of cross-functional teams themselves.",
    "reasoning_summary": "The content emphasizes quality engineering and DevOps without directly discussing cross-functional teams, their roles, or collaboration. It aligns tangentially due to the multidisciplinary nature of DevOps but does not address the core themes of the category.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Discovery",
    "calculated_at": "2025-07-15T17:14:11",
    "ai_confidence": 13.05,
    "ai_mentions": 1.1,
    "ai_alignment": 2.7,
    "ai_depth": 1.9,
    "ai_intent": 2.3,
    "ai_audience": 1.7,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content primarily discusses building quality into software development by shifting quality assurance earlier (shift left), TDD, automation, and CI/CD in Azure DevOps. It does not reference or deeply relate to identifying customer needs, user research, or validating product ideasâ€”core aspects of Product Discovery. While the concepts may tangentially affect overall product quality, the focus is strictly on technical engineering practices, not discovery methodologies or customer requirement exploration.",
    "reasoning_summary": "This content focuses on shifting quality and testing practices left in the software development process using engineering and DevOps methods. It does not relate to Product Discovery topics or the exploration of customer needs and feature definition.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Asynchronous Development",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 17.41,
    "ai_mentions": 0.3,
    "ai_alignment": 2.1,
    "ai_depth": 2.4,
    "ai_intent": 1.5,
    "ai_audience": 4.2,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on building quality into software development using TDD, automation, CI/CD, and Azure DevOps. There are no explicit or substantial references to asynchronous development practices, principles, or challenges. It addresses improving feedback loops and development quality (often relevant in both synchronous and asynchronous contexts) but does not discuss distributed teams, time zone concerns, or core asynchronous workflows. Audience alignment is partially met as technical practitioners often engaged in asynchronous teams may find the tips useful, but the intent and depth do not cover asynchronous principles. Hence, confidence for this category is low.",
    "reasoning_summary": "This episode focuses on quality engineering and automation in DevOps, without addressing asynchronous development or its principles. Its relevance to asynchronous collaboration is incidental rather than central.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Continuous Integration",
    "calculated_at": "2025-07-15T17:14:13",
    "ai_confidence": 80.816,
    "ai_mentions": 6.3,
    "ai_alignment": 8.7,
    "ai_depth": 8.4,
    "ai_intent": 8.2,
    "ai_audience": 8.1,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content is largely aligned with Continuous Integration (CI), referencing CI/CD pipelines, automated feedback, shift-left practices, and tools such as Azure DevOps, all core themes of CI. It discusses building quality in through TDD, static analysis, automation, and shortening feedback loopsâ€”key intents behind CI. Although CI is not the central phrase (slightly lowering Mentions), the conceptual focus on integrating quality into the development process and leveraging automation fits the CI category very well. Depth is strong as it describes principles and implementation strategies. Intent, audience targeting (engineering teams), and signal-to-noise are all highly relevant. No outdated, off-topic, or penalty triggers are present.",
    "reasoning_summary": "This content robustly supports key Continuous Integration practices: it details shift-left quality, automation, feedback cycles, and CI/CD pipelines, all tailored for engineering teams. A minor deduction in direct mention, but overall the fit with the CI category is high.",
    "level": "Primary"
  },
  "Professional Scrum": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Professional Scrum",
    "calculated_at": "2025-07-15T17:14:10",
    "ai_confidence": 48.44,
    "ai_mentions": 1.5,
    "ai_alignment": 5.2,
    "ai_depth": 4.9,
    "ai_intent": 5.8,
    "ai_audience": 6.1,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "While the content strongly advocates for building quality into software from the start and highlights shift-left practices like TDD, static analysis, and automation, it does not reference Professional Scrum or its ethos directly. The focus is on engineering excellence via DevOps with some agile concepts, but lacks explicit discussion of Scrum values, empiricism, accountability, or Professional Scrum roles. The main audience (technical practitioners/engineers) somewhat overlaps with Professional Scrum, but the core message aligns more with DevOps thought leadership than the Professional Scrum philosophy. There is moderate conceptual overlap, yet insufficient depth on Professional Scrum's principles or guiding philosophy to warrant a high confidence.",
    "reasoning_summary": "This content focuses on engineering excellence, quality, and DevOps-oriented shift-left practices rather than the ethos of Professional Scrum. While thereâ€™s partial alignment with Scrum's value of technical excellence, core Professional Scrum concepts aren't directly addressed or explored in depth.",
    "level": "Tertiary"
  },
  "Site Reliability Engineering": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-07-15T17:14:27",
    "ai_confidence": 43.7,
    "ai_mentions": 1.3,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 5.1,
    "ai_audience": 5.0,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content focuses on building quality into software through test-driven development, automation, and DevOps practices such as CI/CD and static analysis. While these are important for high-quality systems, SRE is not directly mentioned, nor are its distinct concerns (SLIs, SLOs, incident response) explored. The intent is to improve code quality and feedback loops, which indirectly support reliability in production, but the discussion lacks explicit SRE framing. The audience includes technical practitioners who may overlap with SREs, but the main thrust is Agile/DevOps improvement rather than core SRE principles.",
    "reasoning_summary": "This content centers on DevOps, Agile, and test automation to build software quality early but does not directly address Site Reliability Engineering concepts, principles, or terminology. Its relevance to SRE is tangential, focusing more on general engineering best practices and workflow improvement.",
    "level": "Tertiary"
  },
  "Collaboration Tools": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Collaboration Tools",
    "calculated_at": "2025-07-15T17:14:16",
    "ai_confidence": 22.315,
    "ai_mentions": 1.2,
    "ai_alignment": 2.8,
    "ai_depth": 2.5,
    "ai_intent": 3.1,
    "ai_audience": 6.4,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content centers on building software quality through practices like TDD, static analysis, CI/CD, and automation using Azure DevOps. While Azure DevOps can include collaboration features, the discussion here is focused on engineering quality, feedback loops, and technical excellenceâ€”not on communication or coordination tools for Agile teams. There's no substantive focus on collaboration toolsâ€™ features, comparative reviews, or their role in team communication. Audience targeting does include Agile/DevOps practitioners but the content's intent and alignment are not primarily collaborative. Therefore the confidence that this content squarely fits 'Collaboration Tools' is low.",
    "reasoning_summary": "The content primarily addresses DevOps engineering practices to improve software quality, not collaboration tools enhancing team communication or coordination. Its slight relevance comes from mentioning Azure DevOps, a platform with collaboration elements, but this is not the focus.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Objective Key Results",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 6.8,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 0.5,
    "ai_intent": 1.1,
    "ai_audience": 1.2,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is focused on building quality into software development via TDD, automation, and DevOps practices. There is no explicit or implicit reference to Objective Key Results (OKRs), outcome-based measurement, or John Doerrâ€™s framework. The main ideas are about engineering practices and process improvement, not structured goal-setting or key results tracking. No OKR terminology or theory is present; the contentâ€™s primary intent, detail, and audience focus do not pertain to OKRs.",
    "reasoning_summary": "This episode discusses engineering quality via DevOps and automation but does not reference OKRs or outcome-based goal frameworks. Content themes, terminology, and intent do not align with the OKR category definition.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-07-15T17:14:15",
    "ai_confidence": 19.56,
    "ai_mentions": 0.1,
    "ai_alignment": 1.8,
    "ai_depth": 1.9,
    "ai_intent": 2.4,
    "ai_audience": 5.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content predominantly discusses building in quality early via TDD, static analysis, automation, and Azure DevOps. Behaviour Driven Development is not mentioned by name, nor are its practices, such as stakeholder collaboration or user stories. The concept of building quality in and shifting left can be related to BDD in a broad sense, but the focus is much more aligned to Test Driven Development and DevOps engineering practices rather than BDD's unique emphases. The audience, being technical practitioners pursuing quality and agility, somewhat aligns with BDD topics, but the coverage lacks BDD principles, frameworks, collaboration themes, or shared understanding techniques.",
    "reasoning_summary": "While the content promotes engineering quality early, it centers on TDD, automation, and DevOps without directly addressing Behaviour Driven Development concepts, collaboration practices, or BDD tools. Alignment with the BDD category is minimal and mostly coincidental.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Organisational Culture",
    "calculated_at": "2025-07-15T17:14:07",
    "ai_confidence": 23.64,
    "ai_mentions": 1.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.2,
    "ai_intent": 2.6,
    "ai_audience": 7.2,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is primarily a technical discussion highlighting best practices like TDD, automation, and CI/CD pipelines for quality in software development. While these practices can be influenced by or influence organisational culture, there is no direct reference or substantive exploration of culture, leadership, or transformation topics as specified in the classification. The main ideas and intent focus on tooling and processes, not cultural change. Audience is mostly practitioners who might be affected by culture, but the explicit focus is technical excellence, not cultural evolution.",
    "reasoning_summary": "This content is mainly about technical practices like TDD, automation, and Azure DevOps, without explicit or substantial treatment of organisational culture or its role in transformation or agility. Culture is, at most, an implicit background influence here.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Value Delivery",
    "calculated_at": "2025-07-15T17:14:10",
    "ai_confidence": 89.85,
    "ai_mentions": 7.6,
    "ai_alignment": 9.35,
    "ai_depth": 8.95,
    "ai_intent": 9.1,
    "ai_audience": 8.4,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 90.0,
    "reasoning": "The content focuses on engineering practices like TDD, automation, static analysis, and CI/CD pipelinesâ€”all classic enablers for delivering value iteratively and reducing cycle time. The main message, 'build quality in,' directly reinforces agile value delivery by ensuring early and continuous feedback. References to shorter feedback loops and team transformation align with agile principles and value stream optimization. Mentions of value delivery aren't always explicit, but the strategic focus is clear. The audience is technical, matching the category, while the emphasis stays tightly on improving practices that maximize delivered business/customer value.",
    "reasoning_summary": "This content closely aligns with 'Value Delivery' by highlighting practicesâ€”like TDD, CI/CD, and shift-left testingâ€”that enable continuous, iterative delivery of value in Agile and DevOps contexts. Its focus on feedback loops, team transformation, and customer-centric outcomes makes the fit highly relevant.",
    "level": "Primary"
  },
  "Model": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Model",
    "calculated_at": "2025-07-15T17:14:30",
    "ai_confidence": 38.225,
    "ai_mentions": 1.2,
    "ai_alignment": 4.8,
    "ai_depth": 3.6,
    "ai_intent": 4.0,
    "ai_audience": 5.5,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses on the practical shift-left principle within DevOps and Agile engineeringâ€”building quality in from the startâ€”as well as specific practices like TDD, automation, and CI/CD in Azure DevOps. While elements like feedback loops and engineering excellence are discussed, it lacks explicit reference to canonical models (such as Cynefin, the Three Ways of DevOps, or Lean frameworks). The discussion is tactical, emphasizing actionable approaches, not abstract modeling or analysis. There's minimal engagement with conceptual frameworks or comparative model analysis. The audience is technical practitioners interested in engineering workflow transformation, fitting partially with the category. However, content does not dissect or compare models or frameworks in depth, so confidence remains moderate-low.",
    "reasoning_summary": "This content discusses shift-left quality practices and workflow improvement in DevOps, but it only aligns loosely with the Model category. While it mentions key principles and engineering approaches, it does not directly explore conceptual models or frameworks central to the category.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-07-15T17:14:14",
    "ai_confidence": 22.8,
    "ai_mentions": 0.2,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.8,
    "ai_audience": 6.2,
    "ai_signal": 4.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses on building quality in early via TDD, static analysis, automation, and DevOps, but never mentions ATDD, acceptance criteria, or collaborative requirements definition. Its conceptual alignment is partial due to its 'shift left' philosophy, but it lacks direct discussion or depth around ATDD principles, roles, or practices. Most detailed topics relate to TDD and pipeline automation, not acceptance criteria, stakeholder collaboration, or ATDD-specific practices.",
    "reasoning_summary": "This content discusses 'shift left' quality practices using TDD and automation but does not mention or focus on ATDD or acceptance criteria. While relevant to software quality, it lacks direct connection to Acceptance Test Driven Development.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Engineering Excellence",
    "calculated_at": "2025-07-15T17:14:16",
    "ai_confidence": 96.65,
    "ai_mentions": 9.7,
    "ai_alignment": 9.9,
    "ai_depth": 9.1,
    "ai_intent": 9.8,
    "ai_audience": 9.6,
    "ai_signal": 9.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 97.0,
    "reasoning": "The content directly and repeatedly references Engineering Excellence, including in the episode series name and hashtags. Its core argument centers on shifting from post-facto QA to 'building quality in', specifically via TDD, static analysis, automation, and CI/CDâ€”all signature practices within software craftsmanship. It details methodology (shift left, feedback loops, pull request gates) and contextualizes with real-world platforms (Azure DevOps), showing depth and practical application, not just naming tools or practices. The primary purpose is to educate technical practitioners on high-standards development, matching both audience and category. The focus is tight with minimal distraction, and all main suggestions support the main theme. There are no outdated or contradictory references, and the advice is current. Thus, maximum scores for conceptual and intent alignment, with micro-variations for depth and signal due to brevity in this written summary versus a full technical guide.",
    "reasoning_summary": "This content strongly aligns with Engineering Excellence by advocating for proactive quality practices (TDD, automation, CI/CD), focusing on engineering process improvement and high standards. It addresses technical audiences, directly references the category, and tightly centers on core topics with minimal off-topic material.",
    "level": "Primary"
  },
  "Customer Satisfaction": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 38.8,
    "ai_mentions": 1.0,
    "ai_alignment": 4.7,
    "ai_depth": 4.6,
    "ai_intent": 4.9,
    "ai_audience": 7.3,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content primarily focuses on engineering practices such as TDD, automation, and CI/CD to 'build quality in' from the start, which are essential Agile and DevOps practices. However, customer satisfaction is neither directly mentioned nor explored as a central theme. Thereâ€™s an indirect tieâ€”higher intrinsic software quality can lead to improved customer experienceâ€”but the piece lacks explicit discussion of measuring, targeting, or enhancing customer satisfaction, engagement, or feedback, and it does not cite related Agile/Lean practices for CSAT. The target audience (DevOps/engineering practitioners) is adjacent, but message focus is on workflow and defect prevention, not directly on the customer or their happiness.",
    "reasoning_summary": "The content discusses engineering excellence and quality practices in DevOps, which may contribute to customer satisfaction, but it does not directly address or focus on customer satisfaction itself. The link is indirect and secondary rather than a core topic.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Ethos",
    "calculated_at": "2025-07-15T17:14:13",
    "ai_confidence": 33.36,
    "ai_mentions": 1.2,
    "ai_alignment": 3.6,
    "ai_depth": 2.8,
    "ai_intent": 3.2,
    "ai_audience": 8.1,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content primarily focuses on the practical adoption of tools and practices (TDD, automation, Azure DevOps) to move quality efforts earlier in the development process. While it briefly alludes to 'building quality in at the core,' it does so from a process/practice perspective rather than deeply exploring the underlying convictions, system behaviors, or foundational ethos driving such changes. The main thrust is about achieving faster feedback, maintainable code, and workflow improvementâ€”goals relevant to quality, but not directly positioned as ethos-driven transformation. There are no explicit references to ethos or prolonged discussion of system-level beliefs, leadership, or cultural underpinnings central to the ethos category definition. Audience targeting and topic focus are on practitioners and transformation, but the engagement with ethos is indirect and limited.",
    "reasoning_summary": "While the material hints at deeper quality principles, its focus is squarely on shifting practices and toolsets, not on exploring or evidencing the core convictions or disciplined beliefs that define team or organizational ethos in Agile, DevOps, or Lean contexts.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agentic Agility",
    "calculated_at": "2025-07-15T17:14:18",
    "ai_confidence": 41.25,
    "ai_mentions": 1.2,
    "ai_alignment": 4.5,
    "ai_depth": 4.1,
    "ai_intent": 6.2,
    "ai_audience": 7.9,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content centers on engineering quality into software development through practices like TDD, automation, and CI/CD, aligning with Agile/DevOps but primarily as process optimization. While it discusses intentional and adaptive actions to improve quality, it rarely touches on agency, autonomy, or accountability as core concepts. There are no explicit or frequent mentions of agency, agentic agility, or related constructs, and the depth is focused mainly on technical enablers rather than the transformation of agency within teams. The intent is practical workflow improvement, and the target audience (engineering teams, DevOps practitioners) overlaps partially with the Agentic Agility theme but with limited direct relevance.",
    "reasoning_summary": "This content emphasizes shifting quality practices left via technical automation and modern engineering workflows. While relevant to Agile/DevOps, it lacks direct discussion of agency or the core concepts of agentic agility, focusing instead on process and tool improvements for practitioners.",
    "level": "Tertiary"
  },
  "Transparency": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Transparency",
    "calculated_at": "2025-07-15T17:14:12",
    "ai_confidence": 19.03,
    "ai_mentions": 1.4,
    "ai_alignment": 2.2,
    "ai_depth": 2.0,
    "ai_intent": 1.8,
    "ai_audience": 5.1,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses almost exclusively on quality engineering practices such as TDD, automation, static analysis, and CI/CDâ€”core technical practices. While it heavily references fast feedback loops, catching issues early, and visibility via rapid tests and pipelines, it does not directly discuss transparency as an Agile value or practice. There is no mention of fostering openness among team members or stakeholders, nor does it address information radiators, communication practices, or visibility of work progress in Agile. References to fast feedback and preventing 'bug ping-pong' have marginal conceptual overlap with transparency, but the thrust is technical process improvement, not openness or team visibility.",
    "reasoning_summary": "This content centers on building quality into software using DevOps and automation, not on transparency. While concepts like rapid feedback have minor connections, the main focus is technical qualityâ€”not openness or work visibility in Agile.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Technical Leadership",
    "calculated_at": "2025-07-15T17:14:11",
    "ai_confidence": 72.35,
    "ai_mentions": 2.8,
    "ai_alignment": 8.7,
    "ai_depth": 7.6,
    "ai_intent": 8.9,
    "ai_audience": 7.3,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content directly addresses technical best practices like TDD, automation, and DevOps within the agile context, and it urges engineering teams to adopt quality-first principles. It is conceptually aligned with technical leadership as it frames guidance on shifting left, reducing feedback cycles, and engineering excellence as a leadership challenge for teams. However, explicit references to leadership roles, mentoring, or team coaching are minimal; the focus is on advocacy and process change. Audience targeting is technical practitioners, which matches the category. No penalties were applied as the content is current, supportive, and does not contradict the leadership framing.",
    "reasoning_summary": "This content promotes agile and DevOps best practices to help development teams improve quality earlier in the process. Its message closely aligns with technical leadership by advocating process improvements and engineering discipline, though it doesn't explicitly discuss leadership behaviors or coaching.",
    "level": "Secondary"
  },
  "Release Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Release Management",
    "calculated_at": "2025-07-15T17:14:32",
    "ai_confidence": 54.74,
    "ai_mentions": 2.7,
    "ai_alignment": 6.6,
    "ai_depth": 6.4,
    "ai_intent": 5.8,
    "ai_audience": 7.0,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content centers on shifting quality left with TDD, automation, static analysis, and CI/CD in Azure DevOps. Although CI/CD pipelines and feedback loops relate to release management, the main thrust is on engineering quality and testing, not explicit release planning or coordination. The direct mentions of release management concepts are limited. The depth is moderate regarding processes (like feedback loops and code checks), but not specifically tailored to release planning, versioning, or multi-stakeholder release coordination. The audience is technical (developers, teams using CI/CD), suitable for release management but also more generally engineering. No penalties apply as content is current and purpose-driven.",
    "reasoning_summary": "While the content touches on CI/CD and fast feedbackâ€”concepts shared with release managementâ€”its primary focus is on building quality in through development practices, not the strategies or logistics of release management itself.",
    "level": "Tertiary"
  },
  "Internal Developer Platform": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-07-15T17:14:19",
    "ai_confidence": 23.45,
    "ai_mentions": 0.7,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.3,
    "ai_audience": 8.7,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is heavily focused on quality engineering, shift-left practices, TDD, automation, and Azure DevOps, emphasizing streamlined feedback and robust CI/CD. However, it never mentions or discusses Internal Developer Platforms (IDP) as a concept, nor does it explore the architecture, implementation, or strategic value of an IDP. Any overlap exists only in the general DevOps and tooling space, not in the direct context or organizational framing of an IDP.",
    "reasoning_summary": "Though the content discusses DevOps, automation, and engineering quality, it doesn't reference or engage with Internal Developer Platforms. It focuses on improving software quality and workflow, not on the specific frameworks or environments that constitute an IDP.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Self Organisation",
    "calculated_at": "2025-07-15T17:14:14",
    "ai_confidence": 37.44,
    "ai_mentions": 1.1,
    "ai_alignment": 4.3,
    "ai_depth": 4.7,
    "ai_intent": 3.6,
    "ai_audience": 8.6,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content centers on improving software quality by integrating practices like TDD, static analysis, and automation. Its main thrust is on technical enablement (e.g., shifting testing left, faster feedback loops) rather than team autonomy or empowerment. Although it lightly mentions enabling teams, it lacks explicit discussion of self-organisation principles (e.g., team ownership, autonomy, leadership support). No direct references to self-organisation or associated cultural/structural factors are present. Audience fit (engineering teams) and signal are high, but depth and conceptual alignment to self-organisation are only incidental.",
    "reasoning_summary": "This content mainly discusses embedding quality practices through technical means, not self-organisation. While it targets Agile teams, it only indirectly touches self-organisation by mentioning empowerment in workflow change. Direct relevance is limited.",
    "level": "Ignored"
  },
  "Method": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Method",
    "calculated_at": "2025-07-15T17:14:18",
    "ai_confidence": 75.23,
    "ai_mentions": 6.4,
    "ai_alignment": 8.9,
    "ai_depth": 7.8,
    "ai_intent": 7.7,
    "ai_audience": 8.1,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 75.0,
    "reasoning": "The content directly references several method-level practices: TDD as a design practice, static analysis, automated policies, gates, AI checks, and CI/CD pipelinesâ€”all structured approaches for building quality in. It conceptually aligns with method by advocating for procedural transformation (shift left) rather than tool- or philosophy-centric views. There is moderate depth: practices are listed and context is given for their impact, but the procedural steps or detailed flows are not elaborated beyond summary. The main intent is to inform and motivate a behavioral/methodological shift; this fits method, though with a slight promotional slant. The audience is practitioners/teams involved in software engineering and DevOps. Signal is high, with nearly all content focused on method-level changes; noise is minimal. No outdated practices or contradictory tone observed, so no penalties applied.",
    "reasoning_summary": "This content strongly fits the 'Method' category by highlighting procedural practices like TDD, static analysis, and CI/CD pipelines to build quality in. It targets practitioners, stresses process transformation, and provides practical technique references, though without detailed stepwise explanations.",
    "level": "Secondary"
  },
  "Product Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Management",
    "calculated_at": "2025-07-15T17:14:25",
    "ai_confidence": 24.485,
    "ai_mentions": 0.5,
    "ai_alignment": 2.8,
    "ai_depth": 2.3,
    "ai_intent": 2.5,
    "ai_audience": 7.0,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses mainly on technical and engineering practices (TDD, automation, Azure DevOps) for improving software quality, advocating for 'building quality in' early in the development process. While this is related to engineering excellence and potentially impacts product outcomes, it does not directly address product management's strategic themes such as stakeholder alignment, product vision, metrics for product success, or frameworks for prioritising customer needs. Direct mentions of product management are absent, and themes are operational/engineering-focused with only tangential relevance to product management as defined. Audience is primarily engineering teams, with some possible value for product managers, but the main thrust and detail remain outside the product management category.",
    "reasoning_summary": "This content is focused on engineering quality and DevOps practices, lacking direct discussion of product managementâ€™s strategic aspects or decision frameworks, and is primarily targeted at technical audiences.",
    "level": "Ignored"
  },
  "Common Goals": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Common Goals",
    "calculated_at": "2025-07-15T17:14:11",
    "ai_confidence": 32.05,
    "ai_mentions": 1.7,
    "ai_alignment": 3.6,
    "ai_depth": 2.8,
    "ai_intent": 3.4,
    "ai_audience": 7.3,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content promotes building quality in from the start using Agile/DevOps practices like TDD, automation, and CI/CD. While it discusses collective action (teams shifting left), it never specifically discusses Common Goals, strategic alignment, or the foundational concepts/synchronisation typical of this category. Its intent is more to instruct or market specific engineering practices than to frame a shared objective guiding cross-team alignment. The audience is relevant (Agile/DevOps/engineering teams), and most examples are technical rather than about unifying strategy. Thereâ€™s some indirect conceptual overlap (improving collaboration, preventing rework), but there's little to no explicit connection to the core definition of Common Goals, making the fit weak overall.",
    "reasoning_summary": "This content covers engineering practices like TDD and CI/CD for quality, targeting Agile/DevOps teams. While it hints at collaboration, it doesnâ€™t explicitly address Common Goals or strategic alignment, making its fit with the category only tangential.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "First Principal",
    "calculated_at": "2025-07-15T17:14:07",
    "ai_confidence": 48.9,
    "ai_mentions": 1.1,
    "ai_alignment": 4.6,
    "ai_depth": 5.3,
    "ai_intent": 3.9,
    "ai_audience": 8.2,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content advocates the practice of 'building quality in' rather than testing for it later, referencing Lean and DevOps patterns like shift-left testing, TDD, automation, and CI/CD. However, it does not explicitly discuss or define 'first principles' as foundational, immutable constraintsâ€”nor does it distinguish between first principles and heuristics or derived practices. Instead, it assumes 'build quality in' as a guiding idea but presents it mainly as a recommended approach, illustrated via tools and process changes. There are no overt references or deep exploration of the philosophical basis of first principles within Lean, Agile, Scrum, or DevOps, nor any engagement with the non-negotiable nature of such principles. Instead, the focus is practical and advisory, aligning the content only partially with the strict scope for the 'First Principal' category.",
    "reasoning_summary": "This content promotes 'build quality in' using shift-left practices, TDD, and DevOps tools, but treats it as an advisory improvementâ€”not as a foundational, immutable first principle. It does not explicitly identify, define, or apply first principles per the category definition.",
    "level": "Tertiary"
  },
  "Market Share": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Market Share",
    "calculated_at": "2025-07-15T17:14:11",
    "ai_confidence": 7.44,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.5,
    "ai_audience": 2.5,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content strongly focuses on software quality practices such as TDD, automation, and DevOps, with the intent of improving internal engineering processes and delivering faster, more reliable software. There are no explicit mentions or discussions of market shareâ€”no exploration of competitive market positioning, business growth relative to competitors, or metrics/KPIs for market share. The content is directed at technical practitioners interested in quality engineering, not strategic audiences seeking to increase market share. No penalties apply for tone or outdated content.",
    "reasoning_summary": "This content is about building quality into software delivery processes, with no meaningful tie to market share concepts. It targets developers and engineering teams, not audiences seeking strategies or insights for expanding market presence.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Tenet",
    "calculated_at": "2025-07-15T17:14:22",
    "ai_confidence": 86.22,
    "ai_mentions": 7.7,
    "ai_alignment": 9.2,
    "ai_depth": 8.5,
    "ai_intent": 8.1,
    "ai_audience": 8.4,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 86.0,
    "reasoning": "The content centers on 'building quality in'â€”a core tenet of Lean, Agile, and DevOpsâ€”by prescribing actionable approaches like TDD, static analysis, automation, and feedback loops. Concepts such as 'shift left' and shortening feedback cycles are not only named but discussed within the context of principles that guide teams. The discussion is practical and aimed at technical practitioners implementing DevOps and Agile engineering, directly supporting the tenet. There is moderate use of hashtags and call-to-action, but the main narrative remains focused on applying and enabling prescribed quality-related tenets; there are no significant distractions, off-topic content, or outdated practices noted.",
    "reasoning_summary": "This content strongly aligns with the Tenet categoryâ€”highlighting the actionable doctrine of 'building quality in' and demonstrating its implementation through DevOps and Agile practices. It targets practitioners, offers practical depth, and maintains a high level of topical focus.",
    "level": "Primary"
  },
  "Observability": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Observability",
    "calculated_at": "2025-07-15T17:14:14",
    "ai_confidence": 30.821,
    "ai_mentions": 0.2,
    "ai_alignment": 2.5,
    "ai_depth": 2.8,
    "ai_intent": 3.1,
    "ai_audience": 8.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content primarily discusses building quality in from the start through practices like TDD, static analysis, automation, and CI/CD pipelines within Azure DevOps. While these are relevant DevOps engineering topics, they focus on early defect prevention and feedback loops rather than on measuring, understanding, or providing visibility into system internals via observability approaches (metrics, logs, traces, observability tools). The only tangential connection is a mention of feedback loops, but this is in the context of test and quality feedback, not observability in the sense defined above. There are no explicit mentions of observability, nor any discussion of its principles, practices, or tools.",
    "reasoning_summary": "This content centers on building quality in through automation, TDD, and DevOps, but does not explicitly address observability concepts, measuring system internals, or related practices. It is tangentially relevant via feedback loops but does not fit the defined category.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Azure Pipelines",
    "calculated_at": "2025-07-15T17:14:19",
    "ai_confidence": 48.24,
    "ai_mentions": 2.3,
    "ai_alignment": 5.7,
    "ai_depth": 5.2,
    "ai_intent": 4.8,
    "ai_audience": 4.2,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content discusses Azure DevOps and covers quality engineering practices like TDD, static analysis, and CI/CD pipelines. While CI/CD pipelines are referenced, 'Azure Pipelines' is never mentioned explicitly; most discussion focuses on process-level change and Azure DevOps more broadly. Conceptual alignment exists where pipelines are called out for feedback loops and bug prevention, but the main attention is on 'shifting left' and engineering excellence, not directly configuring, managing, or optimizing Azure Pipelines. The audience is technical, but the specificity to Azure Pipelines practitioners is diluted by broader DevOps and software quality topics.",
    "reasoning_summary": "The piece tangentially references CI/CD pipelines as part of Azure DevOps but never directly discusses or delves deeply into Azure Pipelines. Its focus is broader, centered on quality engineering and shifting left, making the direct fit to Azure Pipelines moderate rather than strong.",
    "level": "Tertiary"
  },
  "Definition of Done": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Definition of Done",
    "calculated_at": "2025-07-15T17:14:26",
    "ai_confidence": 29.6,
    "ai_mentions": 0.3,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 3.9,
    "ai_audience": 8.0,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "Direct mention of the 'Definition of Done' is absent, and the content is focused on the principle of building quality into the engineering process through practices like TDD, automation, and CI/CD as opposed to inspecting at the end. While these ideas are tangential to the DoD (which often includes quality criteria), the episode neither defines nor discusses the Definition of Done explicitly, nor explores its criteria, process integration, or related artefacts. The intent primarily advocates for proactive quality and workflow transformation, which can be complementary to DoD concepts but does not directly address or exemplify the category. The audience is aligned (technical practitioners in Agile/DevOps), and the content is highly focused for them, but the fit with the Definition of Done is conceptual at best.",
    "reasoning_summary": "The content emphasizes proactive quality practices like TDD and automation but makes no direct or explicit reference to the Definition of Done. Its primary focus is on engineering excellence rather than on DoD, resulting in only a weak, conceptual connection to the category.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Operational Practices",
    "calculated_at": "2025-07-15T17:14:14",
    "ai_confidence": 93.2,
    "ai_mentions": 7.8,
    "ai_alignment": 9.4,
    "ai_depth": 9.2,
    "ai_intent": 9.0,
    "ai_audience": 9.5,
    "ai_signal": 9.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content is a strong operational practices fit: it emphasizes 'building quality in,' referencing TDD, static analysis, automation, CI/CD, and Azure DevOpsâ€”core process optimization tools. It thoroughly discusses concrete strategies for shifting quality left, focusing on shortening feedback loops, reducing manual rework, and improving delivery speedâ€”highly relevant to the category definition. The audience clearly targets practitioners and teams pursuing engineering excellence in Agile/DevOps contexts. Virtually the entire content addresses best practices, workflow improvements, and metrics for operational efficiency. Very minor deduction for lack of named KPIs, but the actionable discussion on tools, automation, and process changes outweighs this. No outdated practices or critical/satirical tone detected.",
    "reasoning_summary": "This content directly addresses operational practices by providing actionable tacticsâ€”like TDD, automation, and CI/CDâ€”for building quality in early, improving feedback, and optimizing team workflows in Agile and DevOps settings. The intent and detail fully align with practitioners seeking operational excellence.",
    "level": "Primary"
  },
  "Philosophy": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Philosophy",
    "calculated_at": "2025-07-15T17:14:26",
    "ai_confidence": 22.43,
    "ai_mentions": 1.13,
    "ai_alignment": 2.15,
    "ai_depth": 2.4,
    "ai_intent": 2.54,
    "ai_audience": 7.93,
    "ai_signal": 7.08,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on advocating for building quality in from the start rather than relying on late-stage QA. While this idea echoes a core Lean/Agile philosophy, the discussion rapidly becomes practical and tool-centric, emphasizing test automation, TDD, static analysis, and Azure DevOps implementations. Direct philosophical framing (the why and what behind these practices) is largely absent; terms and themes are practice-oriented. The main audience is likely software engineers or process owners rather than those exploring philosophical underpinnings. There are faint references to underlying philosophy (e.g., 'building in quality'), but supporting details are heavily skewed toward concrete techniques and transformations. The signal is relatively focused on the value proposition, but not in a philosophical context.",
    "reasoning_summary": "While the content invokes the idea of 'building quality in,' its focus is on specific practices, tools, and engineering workflow changes. There is minimal exploration of the underlying philosophy, so alignment with the Philosophy category is low.",
    "level": "Ignored"
  },
  "Tool": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Tool",
    "calculated_at": "2025-07-15T17:14:15",
    "ai_confidence": 89.75,
    "ai_mentions": 8.7,
    "ai_alignment": 9.4,
    "ai_depth": 8.9,
    "ai_intent": 9.2,
    "ai_audience": 8.8,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 90.0,
    "reasoning": "The content explicitly discusses Azure DevOps, CI/CD pipelines, and automation as enablers for building quality into software processesâ€”directly referencing the use and functionality of specific tools. There is conceptual alignment: 'shift left' practices like TDD, static analysis, automated policies, and DevOps toolchains are framed in the context of Agile and continuous improvement initiatives. The depth includes concrete tool-focused strategies (automated gates, fast feedback, pull requests), and the content is intended to inform teams about transforming workflows using tools. The audience aligns with Agile practitioners seeking tool-based process improvement. The content remains focused on tool capabilities, not abstract methodology. All dimensions are addressed with strong, though not perfect, relevance; no penalties apply.",
    "reasoning_summary": "This content centers on Azure DevOps and related automation tools, detailing how they drive quality and workflow improvement in Agile teams. The discussion is strongly aligned with the 'Tool' category, focusing on practical implementation and direct benefits to practitioners.",
    "level": "Primary"
  },
  "Artifact": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Artifact",
    "calculated_at": "2025-07-15T17:14:12",
    "ai_confidence": 24.4,
    "ai_mentions": 0.4,
    "ai_alignment": 2.5,
    "ai_depth": 2.9,
    "ai_intent": 3.4,
    "ai_audience": 5.2,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on the practice of 'building quality in' via techniques such as TDD, static analysis, automation, and CI/CD pipelines, with references to Azure DevOps. However, artifacts are not explicitly referenced or discussed in form, structure, or management. The content is about workflow and engineering practices, not formal constructs or visible artifacts that support inspection or adaptation. The audience overlaps somewhat with those interested in artifacts, but the content intent and discussion are not directly aligned with the Artifact category as defined.",
    "reasoning_summary": "This content emphasizes engineering practices like TDD, automation, and feedback loops but does not mention or explore artifacts as tangible, inspectable constructs. Its primary focus is on practices and workflow improvement, making its relevance to the 'Artifact' category limited.",
    "level": "Ignored"
  },
  "Product Owner": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Owner",
    "calculated_at": "2025-07-15T17:14:22",
    "ai_confidence": 12.14,
    "ai_mentions": 0.5,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.0,
    "ai_audience": 7.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on engineering practices such as TDD, automation, and CI/CD to improve software quality and feedback loops. There are no direct mentions of the Product Owner accountability, nor is there discussion of the Product Owner's core responsibilities (value maximisation, backlog prioritisation, stakeholder communication, or strategic decision-making). The intended audience seems technical (developers, engineers, maybe DevOps), and the signal is focused on quality engineering rather than PO topics. Alignment, depth, and intent are minimal in relation to the Product Owner category.",
    "reasoning_summary": "This content is about engineering quality practices in Agile/DevOps, not Product Owner accountability. It targets technical roles and doesn't address PO responsibilities, value delivery, or stakeholder alignment; thus, it has very low relevance for the Product Owner category.",
    "level": "Ignored"
  },
  "Test Automation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Test Automation",
    "calculated_at": "2025-07-15T17:14:23",
    "ai_confidence": 91.35,
    "ai_mentions": 9.4,
    "ai_alignment": 9.7,
    "ai_depth": 9.2,
    "ai_intent": 9.6,
    "ai_audience": 8.9,
    "ai_signal": 8.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 91.0,
    "reasoning": "The content centers on building quality in via shift-left practices like TDD, automation, and CI/CDâ€”directly aligned with test automation in Agile/DevOps. It discusses automated tests, feedback loops, and relevant tooling (automation, static analysis, pull request gates, Azure DevOps pipelines), making frequent explicit and implicit references. Depth extends beyond mere mention, explaining why manual QA isn't enough and how rapid, automated feedback improves engineering. The audience is technical practitioners in Agile/DevOps. No outdated or satirical notes are present, so no penalties are applied. Minor off-topic points (e.g., static analysis) reduce signal slightly but remain adjacent.",
    "reasoning_summary": "This content thoroughly focuses on test automation within Agile/DevOps, highlighting automated tests, CI/CD, and shift-left quality practices. The alignment, depth, and direct mentions make it a strong fit for the Test Automation category, targeting technical practitioners seeking practical automation strategies.",
    "level": "Primary"
  },
  "Evidence Based Leadership": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-07-15T17:14:29",
    "ai_confidence": 25.82,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.7,
    "ai_intent": 2.9,
    "ai_audience": 8.2,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content primarily promotes technical practices (TDD, CI/CD, Azure DevOps automation) to 'build in quality' rather than 'test quality in.' While feedback loops and fast detection are mentioned, the content focuses on engineering workflow improvements, not on leadership decisions or organizational change rooted in empirical evidence. It does not reference Evidence-Based Leadership, metrics, or leadership strategy. The closest alignment is the advocacy for shorter feedback loops, but this is in the context of technical execution rather than leadership. Audience fit is relatively high (practitioners and technical leaders), but the overall content is not on-topic for Evidence Based Leadership.",
    "reasoning_summary": "This content centers on technical engineering practices like TDD and automation to improve software quality, rather than on evidence-based leadership or decision-making. Its focus is practical software engineering, with minimal relevance to leadership or the application of empirical evidence in leadership contexts.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Backlog",
    "calculated_at": "2025-07-15T17:14:17",
    "ai_confidence": 7.1,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 0.8,
    "ai_intent": 0.6,
    "ai_audience": 2.5,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses entirely on building quality into engineering workflows through TDD, automation, static analysis, and DevOps practices. There are no explicit mentions or in-depth discussion of the Product Backlog, its management, prioritization, or significance within Agile or Scrum frameworks. The intent is to promote continuous quality and shift-left testing, not to describe backlog management. The audience may overlap somewhat with practitioners working in Agile, but the relevance to Product Backlog practices is minimal, only tangential at most (e.g., possibly influencing backlog items indirectly relating to quality, but this is not explored). Thus, the confidence in its alignment with the 'Product Backlog' category is very low.",
    "reasoning_summary": "This content is focused squarely on engineering quality practices (TDD, automation, DevOps) and does not address Product Backlog concepts, management, or practices. Its relevance to the Product Backlog category is minimal, resulting in a very low alignment score.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Scrum Team",
    "calculated_at": "2025-07-15T17:14:32",
    "ai_confidence": 17.165,
    "ai_mentions": 1.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 4.1,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content is mostly about engineering practices (TDD, automation, CI/CD) and 'building quality in,' rather than discussing the Scrum Team as a formal accountability per the Scrum Guide. There are no direct mentions of Scrum, Scrum Team, or its roles (Scrum Master/Product Owner/Developers). While teams and cross-functionality are implied, the focus and vocabulary are on development best practices, DevOps, and workflow optimization, not on the unique structure, responsibilities, or accountability of a Scrum Team. No penalties applied since the content is not outdated nor directly contradicts the category; it is simply not a strong fit.",
    "reasoning_summary": "This content centers on engineering and DevOps quality practices rather than the Scrum Team's accountability or structure. It lacks direct references to Scrum Teams, focusing instead on workflow and automation improvements for general software teams.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Evidence Based Management",
    "calculated_at": "2025-07-15T17:14:18",
    "ai_confidence": 30.5,
    "ai_mentions": 0.3,
    "ai_alignment": 3.8,
    "ai_depth": 2.7,
    "ai_intent": 3.2,
    "ai_audience": 8.4,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content focuses on building in quality in software engineering using TDD, automation, and DevOps, emphasizing shorter feedback loops and earlier defect detection. While there is overlap with EBM topics like 'Time to Market' and value delivery via speed and quality, there are no direct references to EBM or its metrics. Discussion is centered around engineering practices, not data-informed organizational decision-making or specific EBM dimensions. The content targets technical practitioners rather than executive-level strategists who are the main EBM audience. Overall, it is tangential to Evidence Based Management, lacking direct conceptual, terminological, and depth alignment, but does contain minor relevance via its impact on organizational outcomes.",
    "reasoning_summary": "This content centers on software engineering best practices like TDD and automation to build in quality, with minor relevance to EBM through its focus on early issue detection and value delivery. It lacks direct ties to evidence-based metrics, making its alignment with Evidence Based Management limited.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Portfolio Management",
    "calculated_at": "2025-07-15T17:14:26",
    "ai_confidence": 12.28,
    "ai_mentions": 0.3,
    "ai_alignment": 1.0,
    "ai_depth": 0.9,
    "ai_intent": 1.1,
    "ai_audience": 4.0,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on building quality into software development processes using TDD, automation, and DevOpsâ€”not on methods, metrics, or strategies relevant to managing a portfolio of projects. There are no explicit mentions or exploration of portfolio prioritisation, value streams, or strategic alignment. The intended audience is technical (engineering teams), not portfolio strategists. Nearly all content is unrelated to the portfolio management category.",
    "reasoning_summary": "This episode is centered on engineering practices for software quality, not on portfolio management. It addresses team-level DevOps and testingâ€”not portfolio-level strategy, investment, or project alignment.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-07-15T17:14:24",
    "ai_confidence": 48.78,
    "ai_mentions": 3.7,
    "ai_alignment": 6.3,
    "ai_depth": 5.8,
    "ai_intent": 6.2,
    "ai_audience": 7.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "This content focuses on shifting quality left by using practices such as TDD, automation, static analysis, and CI/CD to catch issues earlier in the development process. There are a few direct mentions of 'feedback loops' and a strong emphasis on shortening these loops to detect problems faster. However, the primary focus is on engineering quality and workflow efficiency, not on customer feedback or mechanisms for collecting and acting on user input. The feedback discussed is internal (integration/test feedback for developers), and customer-centric feedback loop practices (such as surveys or user insights) are not covered. The intended audience aligns with practitioners in Agile/DevOps, and the content remains generally focused, but only partially overlaps with the category's definition.",
    "reasoning_summary": "The content highlights the importance of fast internal feedback loops for quality engineering but does not address customer feedback mechanisms or their integration in product development. Alignment with 'Customer Feedback Loops' is partial and incidental.",
    "level": "Tertiary"
  },
  "Product Developer": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Developer",
    "calculated_at": "2025-07-15T17:14:21",
    "ai_confidence": 34.375,
    "ai_mentions": 1.2,
    "ai_alignment": 4.6,
    "ai_depth": 3.8,
    "ai_intent": 4.1,
    "ai_audience": 6.3,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content advocates for building quality into software development using TDD, automation, and DevOps practices, aligning with the importance of technical excellence and quality for product teams. However, it does not explicitly discuss Product Developer as an accountability, nor does it delve into their collective responsibilities, cross-functional skills, or integration with Scrum roles. Its themes are relevant to any technical team but do not specifically articulate the unique role, structure, or accountability of Product Developers. The main audience is technical (engineers, DevOps), with only implicit ties to cross-functional Product Developer concepts and little discussion of formal frameworks or collective product accountability.",
    "reasoning_summary": "This content emphasizes engineering quality practices and modern DevOps, which are relevant for Product Developers but does not explicitly discuss their role, accountability, or structure. It targets technical teams broadly, with only indirect alignment to the Product Developer category.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Lead Time",
    "calculated_at": "2025-07-15T17:14:36",
    "ai_confidence": 32.29,
    "ai_mentions": 1.2,
    "ai_alignment": 4.3,
    "ai_depth": 3.7,
    "ai_intent": 4.5,
    "ai_audience": 6.0,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content focuses on building quality in earlier using shift left practices such as TDD, automation, and fast CI/CD feedback loops. There is a relevant, though indirect, relationship to Lead Time, since shortening feedback loops and faster test cycles can reduce overall lead time. However, the content does not explicitly mention Lead Time, its definition, or measurement as an observability metric. Instead, the emphasis is on improving quality and speed generally, not on tracking or optimizing Lead Time specifically. Discussion on related metrics, dashboards, or processes for measuring Lead Time is absent, and no specific techniques for Lead Time optimization are described. The audience (engineering and DevOps practitioners) matches, but the primary focus remains on quality, shift left, and faster feedback rather than the measurement or analysis of Lead Time itself.",
    "reasoning_summary": "The content is tangentially relevant: it discusses practices (TDD, automation, faster feedback) that can improve Lead Time, but never defines, measures, or directly addresses the metric. The primary focus is on quality, not explicit Lead Time discussion or analysis.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Complexity Thinking",
    "calculated_at": "2025-07-15T17:14:20",
    "ai_confidence": 12.72,
    "ai_mentions": 0.4,
    "ai_alignment": 1.5,
    "ai_depth": 1.0,
    "ai_intent": 0.9,
    "ai_audience": 5.2,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on 'building quality in' using DevOps practices, TDD, automation, CI/CD, and feedback loops to improve software engineering. There is no explicit mention of complexity science, nonlinear dynamics, or complexity frameworks. While some ideas (like shortening feedback loops or adapting engineering practices) are peripherally relevant to managing complexity, the discussion is strictly about engineering process improvement and DevOpsâ€”without any reference to complexity theory, emergence, or systemic unpredictability. The alignment and depth are just above minimal because engineering in quality relates tangentially to complex software systems, but it does not explicitly adopt or even lightly reflect complexity thinking concepts.",
    "reasoning_summary": "This content is about engineering quality into software development with DevOps practices. It does not directly or substantively reference complexity thinking, its frameworks, or principles, and focuses instead on process improvement and automation.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Throughput",
    "calculated_at": "2025-07-15T17:14:28",
    "ai_confidence": 10.8,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.7,
    "ai_intent": 1.0,
    "ai_audience": 4.2,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses on building quality in early via TDD, automation, and rapid feedback in Azure DevOps. While it highlights faster feedback cycles (e.g., reducing test cycles from 48 hours to 3 minutes), it does not discuss throughput as a delivery metric. There is no analysis, calculation, or mention of throughput as a system measure. Instead, the piece centers on engineering practices, not on system-level work item completion rates or throughput visualisation. No penalties were applied, as the content does not mention outdated practices or contradict the throughput framing, but its alignment is low because it never references or interprets throughput as a metric.",
    "reasoning_summary": "This content centers on quality practices, TDD, automation, and fast feedback, without discussing throughput as a delivery metric. Although speed is referenced, throughput as a system measure is neither defined nor analyzed, resulting in very low relevance to the specified category.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-07-15T17:14:34",
    "ai_confidence": 74.6,
    "ai_mentions": 2.7,
    "ai_alignment": 7.8,
    "ai_depth": 6.9,
    "ai_intent": 7.3,
    "ai_audience": 7.7,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 75.0,
    "reasoning": "The content primarily discusses building quality in throughout the development process via shift-left practices like TDD, automation, static analysis, and CI/CD using Azure DevOps. These are essential to ALM but the content does not directly mention 'Application Lifecycle Management' or its full lifecycle stages. The focus is on early quality integration and engineering workflows, which are relevant to ALM, yet the scope is narrower and does not cover topics like retirement, governance, compliance, or broad lifecycle management. The depth is moderate; there's practical advice but no deep dive into ALM frameworks or governance. The intended audience (software teams, engineering leads) aligns with ALM practitioners. Most content is focused, with minimal off-topic material. No penalties were needed as it's current and not contradictory to the category intent.",
    "reasoning_summary": "The content aligns well with Application Lifecycle Management by addressing early quality practices and DevOps automation, which support lifecycle management. However, its scope is more focused on 'shift left' and quality engineering rather than the broad end-to-end ALM process.",
    "level": "Secondary"
  },
  "Azure Boards": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Azure Boards",
    "calculated_at": "2025-07-15T17:14:12",
    "ai_confidence": 19.72,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.2,
    "ai_intent": 2.5,
    "ai_audience": 6.1,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content is heavily focused on building quality into software development via shift-left practices, automated testing, CI/CD pipelines, TDD, and Azure DevOps as a platform. There are no direct or indirect references to Azure Boards or its capabilities, nor any discussion of Agile planning, work items, boards, or backlog management. The audience overlaps somewhat (Agile/DevOps practitioners), but conceptual fit and depth regarding Azure Boards are minimal.",
    "reasoning_summary": "Although the post is relevant to Agile and Azure DevOps, it does not discuss Azure Boards, work tracking, or project management practices. The content centers on quality engineering and automation, not on board-based planning or collaboration.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Social Technologies",
    "calculated_at": "2025-07-15T17:14:26",
    "ai_confidence": 48.25,
    "ai_mentions": 1.2,
    "ai_alignment": 5.6,
    "ai_depth": 4.9,
    "ai_intent": 5.5,
    "ai_audience": 7.0,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "Direct references to 'social technologies' are absent; neither the term nor synonymous frameworks are named. The focus is primarily on technical practices: TDD, automation, CI/CD, and static analysis within Azure DevOps. However, shifting quality left and shortening feedback loops aligns tangentially with collaborative, adaptive Agile principlesâ€”central to social technologies. The depth is modest: most discussion orbits tooling/processes, not social frameworks or methodologies. The purpose is mainly advocacy of engineering practices, not the promotion of collaboration, decision-making, or emergent problem-solving methodologies. The audience (devs, engineers, Agile practitioners) aligns moderately well, and content is focused with minimal filler. Overall, while some alignment exists via Agile/DevOps context and the iterative improvement ethos, the explicit and qualitative focus on social technological frameworks for team organization and collaborative value delivery is limited.",
    "reasoning_summary": "This content centers on technical quality practices in Agile/DevOps, referencing collaborative improvement but lacking explicit coverage of social technologies, self-organisation, or collective intelligence. Some indirect alignment exists, but focus is mainly on procedural and technical implementation.",
    "level": "Tertiary"
  },
  "Leadership": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Leadership",
    "calculated_at": "2025-07-15T17:14:22",
    "ai_confidence": 24.145,
    "ai_mentions": 0.4,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 3.9,
    "ai_audience": 7.2,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on technical practices for building quality into software deliveryâ€”primarily TDD, automation, and DevOps toolsâ€”not on leadership behaviors, strategies, or frameworks. Leadership is not directly mentioned, and the discussion is centered around process and engineering tactics, not leadership roles in transformation, decision-making, or team inspiration. Although the audience could include leaders, all recommendations target engineering and process improvement rather than leadership practice or philosophy.",
    "reasoning_summary": "This content centers on technical engineering practices for building quality in, with no emphasis on leadership roles or behaviors. Its relevance to the Leadership category is minimal, focused almost entirely on process and technical guidance.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Competence",
    "calculated_at": "2025-07-15T17:14:37",
    "ai_confidence": 57.32,
    "ai_mentions": 2.3,
    "ai_alignment": 6.4,
    "ai_depth": 5.7,
    "ai_intent": 6.5,
    "ai_audience": 7.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content strongly advocates for building quality into software engineering processes using TDD, automation, and DevOps practices. While these themes tangentially relate to professional competence, the piece focuses more on quality assurance strategies, process improvements, and DevOps culture than on the specific development of skills or capabilities. Direct references to 'competence', continuous learning, or skill mastery are absent, and most discussion aligns more with technical enablement than with team or individual capability growth. However, fostering quality through professional methods can be seen as adjacent to competence, thus reasonable alignment and depth are present but not central. Audience focus on technical practitioners is appropriate, and the content remains relevant and on-topic.",
    "reasoning_summary": "The content spotlights technical quality practices (TDD, automation, shift-left) within DevOps, which supports competence indirectly. However, explicit discussion of skill development or professional growth is limited, so confidence in full alignment with 'Competence' is only moderate.",
    "level": "Tertiary"
  },
  "Product Strategy": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Strategy",
    "calculated_at": "2025-07-15T17:14:21",
    "ai_confidence": 20.91,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 2.5,
    "ai_intent": 2.5,
    "ai_audience": 6.2,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content is focused almost entirely on engineering practices (TDD, automation, static analysis, CI/CD) for improving built-in quality, which are operational and technical in nature. There are no direct mentions of product strategy, vision, roadmap, or market alignment. The main topic is quality engineering, not the strategic planning of product direction. The intended audience appears to be practitioners and engineering teams rather than product strategists or executives. While improving quality can impact overall product success, the discussion here is method-oriented, not strategy-focused.",
    "reasoning_summary": "This content centers on technical quality practices (TDD, automation) and workflow improvements, not on product strategy themes like vision, roadmap, or market alignment. It is relevant for engineering teams, not strategic planners.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Troubleshooting",
    "calculated_at": "2025-07-15T17:14:36",
    "ai_confidence": 43.2,
    "ai_mentions": 2.8,
    "ai_alignment": 5.8,
    "ai_depth": 5.6,
    "ai_intent": 5.9,
    "ai_audience": 8.3,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content focuses on shifting quality practices leftâ€”emphasizing TDD, automation, static analysis, and CI/CDâ€”to prevent bugs from appearing late in the development cycle. While it references 'catching issues,' 'preventing bug ping-pong,' and improving feedback loops, its intent is centered on proactive quality engineering rather than the identification and resolution of specific issues after they appear. There is no explicit or thorough treatment of troubleshooting techniques or structured problem diagnosis/solution processes. The primary audience (technical practitioners) and topics partially overlap with troubleshooting, but the discussion mainly addresses practices to avoid defects rather than to resolve them. Hence, the fit with the 'Troubleshooting' category is indirect and limited.",
    "reasoning_summary": "This content primarily promotes preventive quality practices and speedy feedback rather than troubleshooting. While it mentions issue detection and related DevOps tools, its main focus is on building quality inâ€”not diagnosing or resolving technical problems post-factumâ€”making its alignment with 'Troubleshooting' partial and tangential.",
    "level": "Tertiary"
  },
  "Remote Working": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Remote Working",
    "calculated_at": "2025-07-15T17:14:36",
    "ai_confidence": 7.2,
    "ai_mentions": 0.1,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 1.0,
    "ai_audience": 2.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses on building quality into software development processes using TDD, automation, static analysis, and DevOps. While it references Agile and Azure DevOps, there are no direct or implied references to remote working, distributed collaboration, or tools, challenges, or best practices for remote Agile teams. The intent is to promote quality-focused engineering, not remote work practices, and the audience is clearly technical, but not specifically remote-oriented. Given the absence of remote working themes or advice, all dimension scores are low, leading to a very low overall confidence score for category fit.",
    "reasoning_summary": "This content does not address remote working, focusing instead on engineering quality through DevOps and TDD. There is no discussion of distributed teams, remote practices, or related tools, making it a poor fit for the Remote Working category.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Frameworks",
    "calculated_at": "2025-07-15T17:14:15",
    "ai_confidence": 22.95,
    "ai_mentions": 2.2,
    "ai_alignment": 3.8,
    "ai_depth": 2.7,
    "ai_intent": 2.9,
    "ai_audience": 5.1,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "While the content leverages language common in Agile-adjacent conversations (e.g., shift left, TDD, engineering excellence), it does not directly discuss, compare, or analyze Agile frameworks themselves. There is a tangential mention via the NKD Agility brand and the #AgileEngineering tag, but the focus is on DevOps, quality practices, and technical workflow improvements, not Agile frameworksâ€™ principles, features, or applications. Specific frameworks (Scrum, Kanban, etc.) and comparative principles are absent, as are discussions of implementation challenges or organisational agility. Thus, alignment, mentions, and depth are low, with some moderate signal since the audience may overlap with those interested in Agile frameworks.",
    "reasoning_summary": "This content centers on engineering practices like TDD, automation, and DevOps, emphasizing building quality inâ€”but it does not explore or compare Agile frameworks themselves. Any Agile relevance is indirect; the primary focus is technical quality practices rather than framework discussion.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Philosophy",
    "calculated_at": "2025-07-15T17:14:34",
    "ai_confidence": 46.72,
    "ai_mentions": 2.3,
    "ai_alignment": 5.6,
    "ai_depth": 5.2,
    "ai_intent": 5.3,
    "ai_audience": 6.2,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content emphasizes building quality in from the start, promoting feedback loops and continuous improvementâ€”ideas core to Agile philosophy. However, it largely operationalizes these through TDD, automation, and Azure DevOps, focusing on practices and tools rather than explicit Agile principles or philosophy. While there's some alignment (feedback loops, avoid late testing), direct reference to Agile values, culture, or manifesto is minimal. The primary purpose is to showcase technical strategies for quality, targeting engineering teams interested in process improvement, not a broad discourse on Agile mindset shifts. No penalties applied, as the tone is supportive and the information up to date.",
    "reasoning_summary": "The content promotes principles related to Agile Philosophy, such as feedback loops and building in quality, but mainly through practical DevOps and engineering methods. It is moderately aligned conceptually but lacks substantial discussion of core Agile philosophical values or mindset.",
    "level": "Tertiary"
  },
  "Empirical Process Control": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Empirical Process Control",
    "calculated_at": "2025-07-15T17:14:28",
    "ai_confidence": 64.65,
    "ai_mentions": 1.3,
    "ai_alignment": 7.9,
    "ai_depth": 6.7,
    "ai_intent": 7.5,
    "ai_audience": 8.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 65.0,
    "reasoning": "The content strongly promotes engineering practices like TDD, automation, and feedback loops to 'build quality in,' which aligns with empirical process control through the emphasis on rapid inspection and adaptation. However, it does not explicitly mention 'empirical process control,' nor does it deeply discuss all its principles (transparency, explicit adaptation cycles). It is practitioner-oriented and highly relevant to Agile contexts (mentions of DevOps, CI/CD, and engineering workflows). The focus remains on process improvement via observed feedback, but terminology is more about quality and DevOps than core empirical process control doctrine.",
    "reasoning_summary": "The content advocates Agile-aligned practices like fast feedback and shift-left testing, closely aligning with empirical process control ideals, but doesn't explicitly name the concept or delve into its foundational theory.",
    "level": "Secondary"
  },
  "Deployment Frequency": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Deployment Frequency",
    "calculated_at": "2025-07-15T17:14:42",
    "ai_confidence": 54.25,
    "ai_mentions": 2.7,
    "ai_alignment": 5.6,
    "ai_depth": 5.2,
    "ai_intent": 5.8,
    "ai_audience": 7.2,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content focuses primarily on building quality into the development process using practices like TDD, automation, and feedback loops with CI/CD and Azure DevOps. It mentions reducing test cycles from 48 hours to 3 minutes, indirectly relating to deployment efficiency. While the discussion is relevant to flow optimization, explicit discussion of deployment frequency, its measurement, or direct strategies to optimize deployment intervals is lacking. No penalties are applied as the content is current and not critical or satirical.",
    "reasoning_summary": "This content highlights quality practices and faster feedback with Azure DevOps, using automation and CI/CD. While shortening test cycles may support frequent deployment, deployment frequency itself is not directly discussed, making alignment partial.",
    "level": "Tertiary"
  },
  "Customer Retention": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Customer Retention",
    "calculated_at": "2025-07-15T17:14:42",
    "ai_confidence": 23.23,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.1,
    "ai_audience": 6.4,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses almost entirely on technical practices for building quality into software using DevOps and Agile methods (TDD, automation, feedback loops). While fast feedback and quality can indirectly support customer retention, the content never explicitly links these practices to customer engagement, satisfaction, or retention strategies. Discussions of user feedback, continuous value delivery, or customer-centricity are missing. The intended audience is technical practitioners, overlapping somewhat with customer retention roles, but the focus is on engineering workflow excellence, not retention per se.",
    "reasoning_summary": "This episode details technical practices for building software quality in via DevOps and Agile, not strategies aimed at keeping customers engaged or loyal. Any relevance to retention is indirect and not explicitly discussed; the main focus is engineering excellence.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Open Space Agile",
    "calculated_at": "2025-07-15T17:14:25",
    "ai_confidence": 11.03,
    "ai_mentions": 0.1,
    "ai_alignment": 1.2,
    "ai_depth": 1.4,
    "ai_intent": 1.3,
    "ai_audience": 1.8,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses on engineering practices such as TDD, automation, and DevOps to build quality into software, with a strong emphasis on technical implementation in Azure DevOps environments. There are no direct mentions or implied discussion of Open Space Agile, Open Space Technology, or participatory transformation. The intended audience is technicalâ€”engineers and teams seeking improved qualityâ€”not organizational change agents or stakeholders in Agile transformation. Key Open Space Agile elements like collective ownership, psychological safety, or emergence are absent, and the approach is not discussed conceptually or in detail. Any weak alignment comes only from a broad Agile context, not from any aspect unique to Open Space Agile.",
    "reasoning_summary": "The content is focused on technical quality and DevOps practices with no mention of Open Space Agile principles, participation, or transformation mechanisms. Its relevance to Open Space Agile is extremely limited, mainly sharing a very general Agile context.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Lean Product Development",
    "calculated_at": "2025-07-15T17:14:42",
    "ai_confidence": 53.69,
    "ai_mentions": 1.0,
    "ai_alignment": 6.9,
    "ai_depth": 5.7,
    "ai_intent": 7.2,
    "ai_audience": 6.5,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content emphasizes building in quality early, using TDD, automation, and rapid feedbackâ€”ideas compatible with Lean Product Development, particularly minimizing waste (defects, rework) and maximizing learning through short feedback loops. However, Lean Product Development is only indirectly referenced; there are no explicit lean terminology, lean-specific frameworks, or direct discussion of value-stream mapping, A3, or lean waste concepts. The focus is mostly on agile engineering practice and DevOps process improvement, aimed at practitioners. No penalties apply as the ideas are not outdated or contrary. Confidence reflects partial conceptual overlap, without depth into Lean Product Development practices.",
    "reasoning_summary": "The content aligns moderately with Lean Product Development by advocating early quality, rapid feedback, and efficiency, which reflect Lean principles. However, it doesn't directly address Lean frameworks or waste elimination in product development, so the fit is indirect and partial.",
    "level": "Tertiary"
  },
  "DevOps": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "DevOps",
    "calculated_at": "2025-07-15T17:14:35",
    "ai_confidence": 92.55,
    "ai_mentions": 9.1,
    "ai_alignment": 9.6,
    "ai_depth": 8.8,
    "ai_intent": 9.4,
    "ai_audience": 9.2,
    "ai_signal": 9.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content repeatedly and explicitly references DevOps, both in text and hashtags (Direct Mentions: 9.1). Its main themeâ€”building in quality through shift left, CI/CD, TDD, automation, fast feedback loops, and Azure DevOpsâ€”is integral to core DevOps principles (Alignment: 9.6). The discussion is detailed, referencing specific practices (static analysis, pull request gates, test automation) and resulting benefits, but as a brief episode summary, it doesn't deeply explore every aspect (Depth: 8.8). Its intent is overtly to advocate DevOps-aligned improvements and educate practitioners (Intent: 9.4). The audience is clearly technical practitioners/teams involved in software delivery, the key DevOps demographic (Audience: 9.2). The messaging is highly focused with little-to-no off-topic content or filler (Signal: 9.6). No outdated practices or contradictory framing were noted, so no penalties were applied.",
    "reasoning_summary": "This content is tightly focused on key DevOps tenetsâ€”automation, shifting left, CI/CD, fast feedback, and culture changeâ€”tailored for technical practitioners. Direct references and actionable practices signal strong conceptual alignment with the DevOps category.",
    "level": "Primary"
  },
  "Discipline": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Discipline",
    "calculated_at": "2025-07-15T17:14:30",
    "ai_confidence": 56.11,
    "ai_mentions": 2.0,
    "ai_alignment": 6.8,
    "ai_depth": 6.7,
    "ai_intent": 6.4,
    "ai_audience": 7.4,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content emphasizes shifting quality left in software development, advocating practices like TDD, automation, and CI/CD. While it references systemic improvements and elements from professional disciplines (e.g., feedback loops, principles of engineering excellence), its focus remains mostly on technical practices and tooling. It does not explicitly discuss the concept of 'Discipline' as a codified field or analyze governing principles or the maturation of fields like Agile or DevOps. There are also limited references to governance, ethics, or continuous learning as core aspects of disciplines. The alignment is moderate: the content does support the maturation of engineering practices, but its orientation is more practical and prescriptive than reflective of discipline as defined. Audience targeting is practitioners and technical leads, which fits partially, but the depth and conceptual discussion linger on methods and tools more than on the evolution of disciplines themselves.",
    "reasoning_summary": "The content suggests systematically building quality through proven engineering practices and references key ideas from mature fields, but its approach emphasizes techniques over a discussion of discipline as a structured, evolving professional field.",
    "level": "Tertiary"
  },
  "Revenue per Employee": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Revenue per Employee",
    "calculated_at": "2025-07-15T17:14:17",
    "ai_confidence": 4.62,
    "ai_mentions": 0.3,
    "ai_alignment": 1.1,
    "ai_depth": 1.0,
    "ai_intent": 0.6,
    "ai_audience": 0.8,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content focuses exclusively on building in software quality through DevOps, TDD, and automation practices. There are no direct or indirect references to financial metrics, Revenue per Employee, or workforce efficiency as signals of organisational financial performance. The purpose is to promote technical enhancements and engineering excellence, not to connect these improvements to revenue outcomes or personnel cost effectiveness. The only potential alignment comes from a general implication that efficiency improvements can have business impact, but this is not discussed or measured, nor is Revenue per Employee mentioned at any level. The audience and intent do not match the category, and the discussion does not explore systemic financial analysis.",
    "reasoning_summary": "This content addresses DevOps practices for improving code quality and delivery speed, but does not mention or analyze Revenue per Employee or related financial observability metrics. There is no conceptual or thematic alignment with the specified category.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Delivery",
    "calculated_at": "2025-07-15T17:14:25",
    "ai_confidence": 88.45,
    "ai_mentions": 7.5,
    "ai_alignment": 9.4,
    "ai_depth": 8.9,
    "ai_intent": 9.1,
    "ai_audience": 8.5,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 88.0,
    "reasoning": "The content centers on 'building quality in' rather than inspecting it late, explicitly referencing Agile, CI/CD, DevOps, TDD, and automated pipelinesâ€”core tenets of product delivery. It directly targets practitioners aiming to improve delivery processes and quality through iterative feedback and automation. Examples such as shifting test cycles from 48 hours to minutes and leveraging Azure DevOps for continuous integration strongly align with the Product Delivery scope. The discussion is concise yet substantial, clearly conveying how integrated practices optimize delivery outcomes. There's no off-topic or outdated information, and the audience is aligned with those interested in delivery engineering and improvement.",
    "reasoning_summary": "This content is highly relevant to Product Delivery, focusing on embedding quality through Agile practices, CI/CD, automation, and DevOps. It offers practical insights for delivery teams, strongly aligning in intent, depth, and audience, with minimal off-topic content.",
    "level": "Primary"
  },
  "Cell Structure Design": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Cell Structure Design",
    "calculated_at": "2025-07-15T17:14:45",
    "ai_confidence": 7.05,
    "ai_mentions": 0.0,
    "ai_alignment": 0.35,
    "ai_depth": 0.25,
    "ai_intent": 0.6,
    "ai_audience": 5.1,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is focused on software quality practices within Agile and DevOps, emphasizing 'building in quality' via TDD, automation, and Azure DevOps. There are no explicit or implicit references to Cell Structure Design, the Beta Codex, autonomous cells, or decentralised network-based structures. No signal suggests an organisational model shift or principles of decentralisation. The target audience is technical, partially overlapping with Cell Structure Designâ€™s implementation audience, but not strategically aligned. Therefore, relevance is extremely low across all dimensions.",
    "reasoning_summary": "This content centers on DevOps and Agile quality practices, lacking any direct or thematic connection to Cell Structure Design. It does not discuss organisational structure, decentralisation, or Beta Codex principles, making its fit with the category minimal.",
    "level": "Ignored"
  },
  "One Engineering System": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "One Engineering System",
    "calculated_at": "2025-07-15T17:14:49",
    "ai_confidence": 38.83,
    "ai_mentions": 0.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.5,
    "ai_intent": 4.3,
    "ai_audience": 4.8,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content focuses on building quality into software through practices such as TDD, automation, static analysis, and Azure DevOps. While these are important components that can support unified engineering processes, there are no direct or explicit mentions of the One Engineering System (1ES) framework. The main ideas align loosely, emphasizing engineering efficiency and quality, but without discussion of 1ES principles, tools integration across orgs, or system-wide standardization, which are fundamental to the category. The depth is moderate, centering on shift-left quality, but has no detailed reference to 1ES implementation, challenges, comparisons, or broader integration topics. The audience is technicalâ€”developers and engineersâ€”which overlaps with the intended 1ES audience. Noise is moderate, as the content is promotional with some tangential focus but stays mostly on best engineering practices.",
    "reasoning_summary": "This content highlights shift-left quality practices and effective DevOps automation, which resonate partially with One Engineering System principles. However, it does not explicitly discuss 1ES, unified processes, or cross-team standardization, making the category fit quite limited.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Increment",
    "calculated_at": "2025-07-15T17:14:30",
    "ai_confidence": 41.15,
    "ai_mentions": 1.4,
    "ai_alignment": 5.6,
    "ai_depth": 4.7,
    "ai_intent": 5.2,
    "ai_audience": 8.1,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses primarily on building quality into development processes through practices like TDD, automation, CI/CD, and Azure DevOps. While these practices are highly relevant to delivering high-quality working softwareâ€”a foundational aspect of Incrementsâ€”the discussion stays mostly at the level of shifting quality left and engineering excellence, without directly mentioning the Increment as a tangible, usable output of Agile or Scrum. It implies value delivery and testable, maintainable code (correlating with solid Increments), but does not explore the Increment artifact, its Scrum context, or direct measurement/value delivery via Increments. Audience is technical and highly relevant, signal is moderately strong, but depth and alignment with the specific Increment category are only partial.",
    "reasoning_summary": "This piece highlights engineering practices that support quality delivery in Agile teams, touching on principles aligned with delivering valuable software. However, it does not directly address or deeply explore the concept of the Increment in Scrum or Agile frameworks.",
    "level": "Tertiary"
  },
  "Product Validation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Validation",
    "calculated_at": "2025-07-15T17:14:38",
    "ai_confidence": 39.72,
    "ai_mentions": 1.4,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 3.7,
    "ai_audience": 5.2,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content focuses on building quality into software development processes via TDD, automation, and rapid feedback loops, framing its discussion around 'shift left' engineering. While these practices are foundational to modern software quality, they align more with in-process quality assurance and engineering excellence than with direct product validation as defined (which centers on validating product ideas or hypotheses through real user feedback and market fit evaluation). The content mentions rapid feedback and the value of feedback loops, but these are targeted at developer workflow and code quality rather than gathering, testing, or analyzing feedback from actual product users. There are no explicit discussions on user testing, market fit, customer feedback loops, prototyping, or evidence-based decision-making regarding product-market validation. The intended audience is technical teams, which partially matches the category, but the purpose and coverage primarily address software quality practices, not testing product ideas with real users.",
    "reasoning_summary": "This content advocates engineering practices such as TDD, automation, and feedback loops to 'build in quality'â€”improving software delivery but focusing on code/process quality rather than directly validating product ideas with real users. Its alignment with product validation is moderate and indirect.",
    "level": "Ignored"
  },
  "Product Development": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Product Development",
    "calculated_at": "2025-07-15T17:14:20",
    "ai_confidence": 85.9,
    "ai_mentions": 7.6,
    "ai_alignment": 9.3,
    "ai_depth": 8.8,
    "ai_intent": 8.9,
    "ai_audience": 8.7,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 86.0,
    "reasoning": "Direct use of â€˜build quality inâ€™ and â€˜shift leftâ€™ references match core Agile and Lean product development practices. Content thoroughly covers the impact of early quality and fast feedback loops, mentioning TDD, automation, static analysis, and CI/CDâ€”all relevant to iterative and evidence-based product development. Intent is educational and improvement-focused. While more focused on engineering and DevOps techniques, themes like customer value, reducing risk, and integrating quality into the dev process keep it closely aligned with product development methodologies. Mentions of Azure DevOps and automation slightly emphasize implementation but are still centered on improving the product lifecycle.",
    "reasoning_summary": "The content strongly fits 'Product Development' by promoting early quality, feedback loops, and key agile/lean practices. Its focus on integrating engineering excellence directly into the delivery process closely aligns with modern product development methodologies and continuous improvement.",
    "level": "Primary"
  },
  "Employee Engagement": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Employee Engagement",
    "calculated_at": "2025-07-15T17:14:49",
    "ai_confidence": 7.55,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 0.3,
    "ai_audience": 4.4,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses almost exclusively on technical quality practicesâ€”TDD, DevOps, automation, and CI/CDâ€”rather than the psychological or motivational aspects of teams central to employee engagement. No explicit or implicit discussion involves motivation, recognition, trust, or social factors affecting engagement. The intended audience (engineering teams, DevOps practitioners) only overlaps minimally with the category as a byproduct; thereâ€™s no content targeting or addressing engagement strategies or measurements. Virtually all content centers on improving software quality and workflow speed, not engagement.",
    "reasoning_summary": "This resource is technically focused, discussing quality engineering and DevOps practices with no meaningful coverage of employee engagement, motivation, or related human factors.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Technical Debt",
    "calculated_at": "2025-07-15T17:14:28",
    "ai_confidence": 38.152,
    "ai_mentions": 1.0,
    "ai_alignment": 3.6,
    "ai_depth": 3.7,
    "ai_intent": 4.2,
    "ai_audience": 8.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses on building quality in from the start, emphasizing TDD, automation, static analysis, and CI/CDâ€”all practices that reduce the likelihood of defects and rework. However, it never refers directly to 'technical debt' nor discusses explicit debt concepts (such as trade-offs, remediation, or measurement). Indirectly, these practices help manage technical debt, but the explicit focus is on proactive quality and efficiency rather than managing accumulated suboptimal code. Thus, while aligned in audience and tangentially relevant, the match with the technical debt category is mostly indirect and lacks conceptual and terminological depth.",
    "reasoning_summary": "While this content promotes practices that can reduce technical debt, it doesn't mention technical debt explicitly or focus on its management. The main theme is proactive quality engineering, making the fit with the 'Technical Debt' category generally indirect and limited.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-07-15T17:14:34",
    "ai_confidence": 37.33,
    "ai_mentions": 1.4,
    "ai_alignment": 3.9,
    "ai_depth": 3.8,
    "ai_intent": 3.7,
    "ai_audience": 7.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content primarily discusses building quality into software via practices like TDD, automation, and Azure DevOps. Only a brief mention is made of 'AI-driven code checks,' but no further detail is provided. There is no substantial exploration of AI integration, applications, or their impact. Most of the themes and advice are about DevOps and Agile quality practices, not AI's role within those areas. The explicit mention of AI is limited, with little relevance to the core expectations of the 'Artificial Intelligence' category as defined. The intended audienceâ€”technical DevOps/Agile practitionersâ€”fits, but the focus remains overwhelmingly on automation, quality engineering, and iterative delivery, not AI. No penalties for outdated content or contradictory tone were needed.",
    "reasoning_summary": "This content focuses on quality engineering in DevOps with limited, superficial reference to 'AI-driven code checks.' It does not substantially address AI's integration or impact in Agile or DevOps, thus only weakly fits the 'Artificial Intelligence' category.",
    "level": "Ignored"
  },
  "Kanban": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Kanban",
    "calculated_at": "2025-07-15T17:14:50",
    "ai_confidence": 6.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 1.4,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content is centered on building quality into software development, promoting practices such as TDD, CI/CD, automation, and feedback loops using Azure DevOps. While these practices are relevant to Agile and Lean, there are no direct or indirect references to Kanban principles, practices, metrics, or visualisation. The focus is on quality engineering and workflow automation, not managing work-in-progress or optimizing flow through Kanban stages. Audience alignment is tangential since Kanban practitioners may be interested in quality, but the content doesnâ€™t address Kanban-specific concerns. Signal-to-noise is low for Kanban, as all main ideas fall outside the strict Kanban domain.",
    "reasoning_summary": "This content does not pertain to Kanban and makes no reference to its principles or practices, focusing instead on DevOps, quality engineering, and automation. It falls well outside the Kanban categoryâ€™s scope.",
    "level": "Ignored"
  },
  "Scrum": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Scrum",
    "calculated_at": "2025-07-15T17:14:22",
    "ai_confidence": 29.3,
    "ai_mentions": 0.6,
    "ai_alignment": 3.5,
    "ai_depth": 3.9,
    "ai_intent": 2.7,
    "ai_audience": 5.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "Direct mentions of Scrum or its core concepts are absent. The content focuses on 'building quality in', TDD, automation, DevOps, and tooling (Azure DevOps), none of which are intrinsically Scrum-specific. While 'shortening feedback loops' and 'continuous improvement' lightly overlap with Agile (and by extension, Scrum), the emphasis is on engineering excellence through DevOps practices rather than the Scrum framework, roles, events, artifacts, or philosophy. The audience (software engineers, DevOps teams) partially overlaps with Scrum practitioners, but the substance and purpose center around DevOps transformation, test automation, and technical quality. There is no alignment with Scrum roles, ceremonies, or empiricism as defined by the Scrum Guide.",
    "reasoning_summary": "The content is centered on DevOps, test automation, and building quality into software using tools like Azure DevOpsâ€”not the Scrum framework. While thereâ€™s conceptual overlap with Agile, the discussion lacks any specific focus on Scrum roles, artifacts, or events.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Liberating Structures",
    "calculated_at": "2025-07-15T17:14:51",
    "ai_confidence": 3.2,
    "ai_mentions": 0.0,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.6,
    "ai_audience": 5.4,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses entirely on engineering quality, DevOps automation, TDD, and pipeline practicesâ€”explicitly aiming at software delivery improvements. There is no mention or description of Liberating Structures, facilitation techniques, or collaborative methods. The main themes remain technical (automation, code quality, CI/CD), with zero reference to group facilitation or engagement tools. Audience overlap is moderate, as Agile teams and coaches are sometimes addressed, but the discussion does not address Liberating Structures practices, integration, or benefits. No penalties were needed as content is not outdated or antagonistic, but relevance is extremely low.",
    "reasoning_summary": "This content is focused on engineering quality, TDD, and DevOps, without any mention or discussion of Liberating Structures or facilitation techniques. It does not fit the Liberating Structures category.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Value Stream Management",
    "calculated_at": "2025-07-15T17:14:22",
    "ai_confidence": 43.75,
    "ai_mentions": 1.3,
    "ai_alignment": 4.8,
    "ai_depth": 3.6,
    "ai_intent": 4.5,
    "ai_audience": 8.0,
    "ai_signal": 8.25,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content centers on building quality into software development cycles with practices like TDD, CI/CD, automation, and fast feedback via Azure DevOps. While these are process improvement strategies that can indirectly benefit value flow, the material heavily focuses on engineering, testing, and DevOps techniques, not on value stream mapping, waste elimination, or organisational outcome alignment. Direct, explicit mention of Value Stream Management is completely absent. Conceptual connections are limited to improving efficiency and feedback loops, but there's no substantive discussion of value stream principles, metrics, or strategic alignment with customer-facing value. Audience and signal are high due to the focus on technical practitioners interested in efficiency, but depth and alignment with VSM are modest.",
    "reasoning_summary": "This content focuses on engineering practices for building in quality and accelerating delivery cycles. Although improved feedback loops can relate to value flow, it does not address Value Stream Management principles, mapping, or organisation-wide alignment. Only tangential relevance to VSM.",
    "level": "Tertiary"
  },
  "Time to Market": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Time to Market",
    "calculated_at": "2025-07-15T17:14:34",
    "ai_confidence": 71.905,
    "ai_mentions": 4.4,
    "ai_alignment": 8.7,
    "ai_depth": 7.9,
    "ai_intent": 8.1,
    "ai_audience": 6.6,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content focuses on building quality into software development through TDD, automation, and DevOps practices, explicitly referencing the effects of these on speed ('faster, better software', 'shorten feedback loops', 'from 48-hour test cycles to 3-minute unit test runs'). While the core of the discussion revolves around engineering quality, the improvements highlightedâ€”rapid feedback, quicker cycles, reduced delays, and less reworkâ€”directly contribute to reducing Time to Market. There is limited explicit mention ('faster', â€˜shorten feedback loopsâ€™), but the alignment and depth scores are elevated because process optimization and speed to delivery are strongly implied throughout. The main audience is technical practitioners interested in improving delivery speed, though the framing is more on quality engineering than on Evidence-Based Management or direct Time to Market metrics. The content is focused and relevant, with minor noise primarily in promotional elements.",
    "reasoning_summary": "This content discusses building quality early through practices that lead to faster, more efficient delivery. By emphasizing rapid feedback, automation, and process improvements, it strongly aligns with Time to Market concepts even though explicit references are limited. The fit is solid, with clear relevance to speeding value delivery.",
    "level": "Secondary"
  },
  "Agile Product Operating Model": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-07-15T17:14:37",
    "ai_confidence": 29.75,
    "ai_mentions": 0.5,
    "ai_alignment": 3.8,
    "ai_depth": 3.3,
    "ai_intent": 4.2,
    "ai_audience": 4.7,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content focuses on engineering practices for building in quality early through TDD, automation, and DevOps processes. While these are relevant to agile and product delivery, there is no explicit mention of the Agile Product Operating Model or its core principles such as the shift from project to product, operating model considerations, or product-centric value delivery frameworks. The main themes center on technical excellence and workflow transformation at the team level, not organizational APOM concepts. As such, alignment, depth, and direct mentions with the category are low, though an agile audience overlap nudges scores slightly higher where applicable. No penalties were warranted as the content is current and not undermining the category.",
    "reasoning_summary": "This content discusses technical practices for improving engineering quality with agile and DevOps techniques but does not directly address Agile Product Operating Model principles or frameworks. Its main focus is on team-level process improvement, yielding only partial alignment with the target category.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Service Level Expectation",
    "calculated_at": "2025-07-15T17:14:27",
    "ai_confidence": 2.85,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 0.8,
    "ai_intent": 2.0,
    "ai_audience": 5.5,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses exclusively on shifting quality left, TDD, automation, and using Azure DevOps to improve feedback loops and code quality. It does not mention Service Level Expectation (SLE), cycle time probability ranges, or any related forecast metrics within Agile, Scrum, or Kanban. There are no discussions of SLE definition, calculation, or use for delivery predictability. While the intent is improvement and agility, none of the key SLE topics or practices appear directly or indirectly. Thus, extremely low confidence is warranted, with nonzero scores only on dimensions like Audience, where Agile practitioners are potentially an overlapping group.",
    "reasoning_summary": "This content centers on building in software quality early via Agile engineering practices, without mentioning or connecting to Service Level Expectation (SLE) concepts, metrics, or applications. There is no direct or indirect relevance to SLE in Agile, Scrum, or Kanban contexts.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Ability to Innovate",
    "calculated_at": "2025-07-15T17:14:31",
    "ai_confidence": 38.6,
    "ai_mentions": 1.2,
    "ai_alignment": 3.3,
    "ai_depth": 3.7,
    "ai_intent": 2.2,
    "ai_audience": 7.0,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content extensively discusses the importance of shifting quality assurance practices left (e.g., TDD, automation, CI/CD) to improve engineering effectiveness. However, its focus is almost entirely on software quality, speed, and maintainabilityâ€”not on mechanisms or practices that directly foster, measure, or sustain innovation. There is no explicit mention or substantive discussion of innovation metrics, cultivation of innovative culture, or the ability to innovate as defined by EBM. The content targets practitioners focused on DevOps and Agile engineering but does not address innovation-oriented topics or frameworks.",
    "reasoning_summary": "While the content shares valuable practices for proactive software quality, it does not address mechanisms or metrics related to organisational innovation. Its focus is quality engineering in DevOps, not on fostering or sustaining the ability to innovate.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Market Adaptability",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 71.35,
    "ai_mentions": 2.3,
    "ai_alignment": 8.7,
    "ai_depth": 7.4,
    "ai_intent": 8.1,
    "ai_audience": 7.5,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content focuses on building quality into software development processes through shift-left strategies, TDD, automation, and Azure DevOps. While 'market adaptability' is not mentioned directly, the emphasis on shortening feedback loops, accelerating delivery, and enhancing development practices closely aligns with the categoryâ€™s theme of organizational adaptability to dynamic environments. References to Agile, DevOps, continuous feedback, and speed underscore how these practices improve responsiveness. The main audience is technical (developers, engineering leads), overlapping with the target for market adaptability. However, the discussion is more centered on engineering excellence and process efficiency than explicit market positioning, accounting for slightly lower scores in direct mentions and depth.",
    "reasoning_summary": "This content closely aligns with 'Market Adaptability' by advocating DevOps, Agile, and automation practices that reduce delivery cycles and foster rapid feedback. While it doesn't directly address market response, it supports the core enablers of adapting quickly to change.",
    "level": "Secondary"
  },
  "Change Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Change Management",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 33.17,
    "ai_mentions": 1.2,
    "ai_alignment": 3.9,
    "ai_depth": 3.3,
    "ai_intent": 3.8,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content focuses on technical practices for improving software quality in Agile and DevOps environments, specifically advocating for 'shift left', TDD, and automation. These practices relate tangentially to organizational improvement but do not explicitly discuss strategies for managing organizational change, stakeholder engagement, or change leadership. There are no direct references to change management concepts, and the focus is mostly on engineering workflow transformation rather than broader cultural or organizational adaptationâ€”the core of Change Management. While relevant for practitioners interested in improvement, its alignment with the Change Management category is indirect and somewhat limited.",
    "reasoning_summary": "This content prioritizes technical workflow improvements like TDD and automation to build quality in from the start. While these changes can support transformation, there is little focus on organizational change management principles or practices, resulting in only partial category alignment.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Strategic Goals",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 36.97,
    "ai_mentions": 1.3,
    "ai_alignment": 4.8,
    "ai_depth": 3.8,
    "ai_intent": 4.2,
    "ai_audience": 6.5,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content centers on adopting development practices (TDD, automation, DevOps) to build quality in from the start, promoting shifts in engineering culture and workflow. While these changes support long-term improvements and might align with organizational transformation, the focus remains tactical and practical rather than on explicitly setting, articulating, or measuring strategic goals. There is no direct reference to strategic objectives, business agility, or frameworks for strategic alignment, and the language targets practitioners (engineers, teams) rather than executives or strategists. Depth and conceptual alignment with strategic goals are present to a limited degree, primarily in implied transformational impacts. Overall, the fit is moderate but indirect.",
    "reasoning_summary": "This content emphasizes engineering practices for building quality in early, which indirectly supports long-term improvement but does not explicitly discuss or align with strategic goals. The focus is tactical, geared toward practitioners, with minimal explicit linkage to organizational strategy or business agility.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Organisational Physics",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 20.475,
    "ai_mentions": 0.2,
    "ai_alignment": 2.6,
    "ai_depth": 1.8,
    "ai_intent": 2.2,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content primarily discusses technical practices (TDD, automation, DevOps, CI/CD), focusing on improving software engineering workflow and building quality in from the start. While it mentions elements like feedback loopsâ€”an aspect seen in systems thinkingâ€”the core content is about practical DevOps initiatives, not holistic analysis of systemic organisational dynamics. There is minimal to no explicit or implicit reference to systems thinking, organisational structure, or feedback at the organisation level; the audience is mainly practitioners, not strategists or organisational designers. Depth and alignment with Organisational Physics is weak, resulting in a low confidence score, though some slight overlap in concepts exists (feedback loops, prevention over detection).",
    "reasoning_summary": "This content is focused on software engineering and DevOps practices, not on systems thinking or organisational dynamics. Thereâ€™s only a minor conceptual overlap (feedback loops), but it lacks depth or intent aligned with Organisational Physics.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-07-15T17:14:07",
    "ai_confidence": 7.05,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.45,
    "ai_intent": 0.9,
    "ai_audience": 2.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is focused on building quality into software development through TDD, automation, static analysis, and Azure DevOps. While these practices align with Agile and Lean principles that are also used in MVP development, there is no explicit mention or substantive discussion of Minimum Viable Product concepts, strategies, or outcomes. The content targets practitioners interested in DevOps and quality, not MVP or hypothesis-driven product development. Minimal overlap comes indirectly from shared Agile values, but substantial evidence tying it to MVP is lacking.",
    "reasoning_summary": "This content emphasizes DevOps and engineering quality practices, with no direct discussion of Minimum Viable Product concepts. While Agile themes are present, there's limited relevance to MVP beyond general methodological alignment.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Transformation",
    "calculated_at": "2025-07-15T17:14:08",
    "ai_confidence": 54.95,
    "ai_mentions": 2.2,
    "ai_alignment": 6.9,
    "ai_depth": 6.6,
    "ai_intent": 7.5,
    "ai_audience": 6.7,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content centers on building quality into software development processes through practices like TDD, automation, and CI/CD, which are highly relevant to Agile methodologies. However, it does not directly mention 'Agile Transformation', change management, or organizational agility. The main focus is engineering excellence, technical practices, and workflow improvementsâ€”elements associated with Agile and DevOps, but discussed primarily at the team or engineering process level rather than broader transformation strategy. Terms like 'shift left', 'feedback loops', and references to NKD Agility suggest Agile influence, yet the content does not explore cultural change, leadership, or organizational readiness topics critical to the transformation scope. Mentions are sparse and alignment is partial; depth is notable for engineering practice, but not for holistic Agile Transformation. Audience is technical practitioners and team leads, which partially matches, and the signal-to-noise ratio is strong.",
    "reasoning_summary": "This content focuses on embedding quality through modern development practices resembling Agile engineering. While conceptually related, it doesn't explicitly address Agile Transformation topics like organizational change or Agile adoption at scale, resulting in only partial category alignment.",
    "level": "Tertiary"
  },
  "Install and Configuration": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Install and Configuration",
    "calculated_at": "2025-07-15T17:14:09",
    "ai_confidence": 13.35,
    "ai_mentions": 1.0,
    "ai_alignment": 1.7,
    "ai_depth": 1.3,
    "ai_intent": 2.2,
    "ai_audience": 4.6,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on software engineering quality practices such as TDD, static analysis, automation, and Azure DevOps, but it frames them in terms of process transformation, not installation or configuration steps. Direct mentions of 'install', 'setup', or 'configuration' are absent. The emphasis is on changing team culture, improving quality feedback loops, and adopting shift-left practices. Although there is brief mention of CI/CD pipelines and enabling automation, these are examples of outcomes or recommendations, not actionable installation or configuration guidance. The likely audience is technical practitioners, but the content is promotional and educational about quality principlesâ€”not a guide or resource for technical setup. There are no outdated practices, contradictions, or satire present, so no penalties apply.",
    "reasoning_summary": "The content mainly discusses quality engineering concepts like shift-left, TDD, and automation in Azure DevOps without addressing installation or configuration procedures. Its intent, depth, and topical alignment make it a poor fit for the 'Install and Configuration' category.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agnostic Agile",
    "calculated_at": "2025-07-15T17:14:10",
    "ai_confidence": 37.34,
    "ai_mentions": 0.5,
    "ai_alignment": 4.8,
    "ai_depth": 4.2,
    "ai_intent": 4.5,
    "ai_audience": 7.0,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses on engineering practices (TDD, test automation, shift-left quality) but does not directly reference Agnostic Agile or its principles. There is some tangential alignmentâ€”ideas such as context-driven improvement and value delivery are loosely present in the advocacy for proactive quality. However, the content is grounded in tooling and technique (Azure DevOps, CI/CD) rather than a discussion of agility as a context-driven philosophy, professionalism, or ethical considerations. No direct or indirect mention of Agnostic Agile movement, no references to ethics, critical thinking, or comparisons among methodologies. The primary audience (technical practitioners) somewhat overlaps with those interested in Agnostic Agile, but the message is specific to engineering excellence and DevOps. Most content is relevant to the message but doesn't strongly signal the Agnostic Agile category.",
    "reasoning_summary": "This content advocates for shift-left quality and engineering excellence but does not explicitly reference or explore Agnostic Agile principles. It focuses on DevOps tooling and software practices, making only loose, indirect connections to the category.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Platform Engineering",
    "calculated_at": "2025-07-15T17:14:15",
    "ai_confidence": 40.058,
    "ai_mentions": 1.2,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 4.5,
    "ai_audience": 4.0,
    "ai_signal": 3.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content primarily focuses on quality engineering, shift-left practices, TDD, automation, and leveraging Azure DevOps for improving software quality and feedback cycles. While related concepts (CI/CD, automation, Azure DevOps) are present, there are no explicit or comprehensive discussions of platform engineering, internal developer platforms, or platform product thinking. References to 'platform' are indirectâ€”Azure DevOps as a tool supporting automationâ€”rather than a discussion of designing, building, or maintaining internal developer platforms. The audience is largely technical (developers, engineering teams), which partially aligns, but the main thrust is better software quality and engineering practices, not platform engineering as defined. No penalties were necessary, as the content is not outdated or openly critical.",
    "reasoning_summary": "This content focuses on quality, shift-left testing, and automation with Azure DevOps, but does not directly address platform engineering or internal developer platforms. Its relevance is tangential, making only indirect connections with the core category.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Unrealised Value",
    "calculated_at": "2025-07-15T17:14:16",
    "ai_confidence": 27.759,
    "ai_mentions": 1.6,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 1.7,
    "ai_audience": 7.5,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content focuses on building quality into software development through practices like TDD, automation, and shift-left testing. It does reference missed opportunities from delays, but these are operational metrics rather than an exploration of Unrealised Value as defined in Evidence-Based Management. There is no explicit mention or in-depth discussion of potential, latent, or untapped business value, market opportunities, or strategic innovation. The main focus is engineering best practices, not on identifying or measuring Unrealised Value. The intended audience (engineering teams, DevOps practitioners) overlaps somewhat with those concerned about value maximization, but the content itself is not sufficiently conceptually aligned to warrant a high confidence score for this category.",
    "reasoning_summary": "This content is primarily about engineering quality through DevOps practices. While 'missed opportunities' are mentioned, the discussion doesn't address Unrealised Value in the evidence-based management sense, resulting in low confidence for this category.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Personal",
    "calculated_at": "2025-07-15T17:14:18",
    "ai_confidence": 14.0,
    "ai_mentions": 0.7,
    "ai_alignment": 1.6,
    "ai_depth": 1.5,
    "ai_intent": 2.0,
    "ai_audience": 3.1,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is primarily prescriptive and technical, promoting best practices like TDD, CI/CD, and automation in Azure DevOps, rather than recounting personal experiences or reflections. There are no anecdotes or subjective insightsâ€”the advice is generalized, with no first-person narratives about challenges or personal application. The intent is informative and geared toward practitioners seeking to enhance engineering quality, not sharing individual stories. As such, it only minimally aligns with the 'Personal' category, which demands focus on individual reflections or experiences.",
    "reasoning_summary": "The content is technical and solution-focused, lacking personal anecdotes or individual reflections. It promotes best practices rather than sharing personal experiences, resulting in low alignment with the Personal category.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Principle",
    "calculated_at": "2025-07-15T17:14:20",
    "ai_confidence": 92.46,
    "ai_mentions": 8.7,
    "ai_alignment": 9.5,
    "ai_depth": 9.0,
    "ai_intent": 9.3,
    "ai_audience": 8.8,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content directly advocates the principle of 'Build Quality In' (a key Lean, Agile, and DevOps principle). It positions this as the foundational approach, contrasting 'testing quality in' with 'building it in from the start.' Main ideas support conceptual alignment (shift-left, short feedback loops, engineering practices). The discussion is substantial, citing actionable methods: TDD, automation, CI/CD, static analysis, and policies. The primary intent is to inform and encourage adoption of these principles. The audienceâ€”software engineering/DevOps professionalsâ€”aligns directly. The message is focused with minimal distraction. No outdated or critical perspectives detected, so no penalties applied.",
    "reasoning_summary": "The content is highly relevant to the 'Principle' category, clearly advocating for the principle of building quality in from the start, and substantively exploring actionable practices that support this principle within Agile and DevOps contexts.",
    "level": "Primary"
  },
  "GitHub": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "GitHub",
    "calculated_at": "2025-07-15T17:14:21",
    "ai_confidence": 5.77,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 0.6,
    "ai_audience": 2.0,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content centers exclusively on Azure DevOps practices, TDD, automation, and shifting quality left in the software process. It explicitly mentions Azure DevOps and related engineering concepts, but does not mention GitHub services, features, or workflows, nor does it discuss any tooling, integrations, or project management methods directly related to GitHub. There are no explicit or implicit references to GitHub anywhere in the text, nor are any examples, use cases, or best practices from the GitHub ecosystem highlighted. The intended audience (Agile/DevOps engineers) could overlap with GitHub users, but the focus and substance remain outside the scope of the 'GitHub' category.",
    "reasoning_summary": "This content focuses entirely on Azure DevOps and quality engineering approaches, with no direct or implied relevance to GitHub's tools or practices. There are no mentions, features, or use cases related to GitHub, so alignment with the 'GitHub' category is extremely low.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Scrum Values",
    "calculated_at": "2025-07-15T17:14:26",
    "ai_confidence": 8.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.6,
    "ai_intent": 0.5,
    "ai_audience": 2.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content does not mention Scrum Values directly nor does it discuss any of the five core values. Instead, it focuses on technical practices (TDD, automation, DevOps, feedback loops) for improving software quality, with no explicit or substantive reference to commitment, courage, focus, openness, or respect. Though it encourages positive engineering habits, these are not framed in terms of Scrum Values per the Scrum Guide, and the audience is more technical (engineers, DevOps) than explicitly Scrum-oriented.",
    "reasoning_summary": "This content focuses exclusively on technical quality and DevOps practices, without referencing or aligning with Scrum Values. It lacks discussion of commitment, courage, focus, openness, or respect, making its relevance to the Scrum Values category minimal at best.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Coaching",
    "calculated_at": "2025-07-15T17:14:27",
    "ai_confidence": 25.9,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.1,
    "ai_intent": 2.5,
    "ai_audience": 8.7,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "There are no direct mentions of coaching, nor does the content discuss coaching techniques, relationship-building, or facilitation practices typical of the Coaching category. The focus is on technical quality, TDD, DevOps, and process improvementâ€”not facilitating team growth or applying collaborative learning principles. While the audience (engineering teams) overlaps with users who benefit from coaching, the material does not substantively address or model coaching mindsets, tools, or frameworks. Any coaching alignment is, at best, indirectâ€”limited to encouraging teams to improve practices rather than offering guidance, feedback, or enabling self-discovery in the context of coaching.",
    "reasoning_summary": "This content centers on technical strategies for building software quality using TDD and automation, not on coaching practices. It lacks direct coaching references and does not explore team development, guidance, or facilitation, making it only tangentially related to the Coaching category.",
    "level": "Ignored"
  },
  "Lean": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Lean",
    "calculated_at": "2025-07-15T17:14:29",
    "ai_confidence": 39.35,
    "ai_mentions": 1.2,
    "ai_alignment": 4.8,
    "ai_depth": 4.6,
    "ai_intent": 5.1,
    "ai_audience": 7.3,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "Direct mention of 'Lean' or its core terminology does not appear; instead, the content focuses on shifting quality left, TDD, DevOps, automation, and shortening feedback loops. These themes overlap conceptually with Lean's emphasis on waste reduction, continuous improvement, and value stream efficiency, but the link is implicit, not explicit. There are mentions of reducing rework and shortening cycles, aligning partially with Lean, though the context is more DevOps/engineering rigor than classical Lean methodologies. No penalties were applicable.",
    "reasoning_summary": "While the content promotes practices like waste reduction and rapid feedback, its primary framing is DevOps/TDD/automation rather than Lean. There is partial conceptual overlap with Lean principles, but Lean itself is neither explicitly addressed nor deeply explored.",
    "level": "Ignored"
  },
  "Capability": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Capability",
    "calculated_at": "2025-07-15T17:14:30",
    "ai_confidence": 68.58,
    "ai_mentions": 3.5,
    "ai_alignment": 7.2,
    "ai_depth": 7.4,
    "ai_intent": 7.1,
    "ai_audience": 6.9,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 69.0,
    "reasoning": "The content advocates for building quality in from the outset (a key capability in Agile/DevOps), referencing TDD, CI/CD, automation, and shifting left. The discussion centers around changing team habits/systemic practices, not just isolated tools, indicating a focus on enduring capability. Depth covers why, how, and impact, though many specifics emphasize practice over systemic capability. Mentions are implicit; the term 'capability' is not named. The audience fits practitioners and leaders interested in engineering culture and sustainable improvement. No explicit penalties apply.",
    "reasoning_summary": "The content centers on embedding quality as an enduring team capability by promoting systemic engineering practices like TDD and CI/CD. It aligns well conceptually but only implicitly references capability and focuses somewhat more on tactics than broad capability frameworks.",
    "level": "Secondary"
  },
  "Agile Leadership": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Leadership",
    "calculated_at": "2025-07-15T17:14:33",
    "ai_confidence": 38.53,
    "ai_mentions": 0.4,
    "ai_alignment": 4.7,
    "ai_depth": 4.2,
    "ai_intent": 3.9,
    "ai_audience": 6.8,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content focuses on engineering practices to improve software qualityâ€”specifically TDD, automation, CI/CD, and shift-left testing. While these align with Agile principles, they center on technical adoption rather than leadership behavior, team empowerment, or transformational change. There is no direct discussion of Agile Leadership roles, servant leadership, culture building, or navigating change as leaders. The audience is practitioners and teams rather than leaders or managers. Thus, relevance to Agile Leadership is tangential and implicit, not explicit or in-depth.",
    "reasoning_summary": "This content promotes Agile technical practices and quality engineering, but lacks explicit focus on leadership roles or behaviors within Agile. Its relevance to Agile Leadership is indirect and mostly procedural.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Organisational Agility",
    "calculated_at": "2025-07-15T17:14:33",
    "ai_confidence": 62.05,
    "ai_mentions": 2.2,
    "ai_alignment": 7.6,
    "ai_depth": 6.9,
    "ai_intent": 7.4,
    "ai_audience": 7.9,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "Direct mentions of 'Organisational Agility' are lacking, with only the hashtag #NKDAgility tangentially related. However, the content conceptually aligns well with agility principles by emphasizing 'shift left,' rapid feedback loops, TDD, CI/CD, and the need for process and cultural shifts in quality practicesâ€”common agility enablers. The piece primarily targets technical teams and engineering leaders seeking to transform workflows, which fits part of the category audience, though it's not executive-focused. Depth is decent but mostly tactical rather than deeply strategic or organizational. The signal-to-noise ratio is high, with little irrelevant content. No outdated or critical tone detected, so no penalties applied.",
    "reasoning_summary": "The content strongly aligns with principles that support organisational agilityâ€”highlighting quality built-in, rapid feedback, and continuous improvementâ€”but focuses on technical and process change rather than broad organisational transformation.",
    "level": "Secondary"
  },
  "Agile Strategy": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Strategy",
    "calculated_at": "2025-07-15T17:13:59",
    "ai_confidence": 38.64,
    "ai_mentions": 1.3,
    "ai_alignment": 4.5,
    "ai_depth": 3.9,
    "ai_intent": 4.2,
    "ai_audience": 5.1,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content focuses on 'building quality in' through Agile engineering practices such as TDD, automation, and shifting left. While it is rooted in Agile principles and continuous improvement, its explicit focus is on technical implementation rather than on strategic alignment, organizational vision, or leadership. There is passing alignment with Agile Strategy (through continuous value delivery and responsiveness to change), but the depth and direct references are limited to process improvements for development teams. The target audience seems more technical (developers, DevOps practitioners) than strategic leadership, and there is minimal discussion about organizational strategy, scaling, or vision alignment.",
    "reasoning_summary": "This content centers on implementing quality practices in Agile development but does not explicitly address strategic alignment or organizational Agile strategy. It aligns partially through themes of continuous improvement and value delivery but remains mostly technical in focus.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Accountability",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 18.97,
    "ai_mentions": 0.7,
    "ai_alignment": 2.3,
    "ai_depth": 2.0,
    "ai_intent": 1.5,
    "ai_audience": 6.5,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on building quality into software delivery through DevOps, TDD, automation, and process improvements, emphasizing shifting left in the SDLC. While it targets a technical, Agile/DevOps audience and discusses outcomes (e.g., shorter feedback loops, catching issues early), it does not discuss accountability structures, outcome ownership, roles, or mechanisms for clarifying who owns quality results. No explicit or conceptual connection to accountability as a structural mechanism is present, nor are distinctions between responsibility, authority, or defined accountabilities explored. The audience fit is reasonably high due to targeting Agile/DevOps practitioners but the signal, mentions, and depth all remain low with respect to the accountability category definition.",
    "reasoning_summary": "This content is closely aligned with technical Agile and DevOps practices around quality but does not address accountability structures, outcome ownership, or role clarity. Its relevance to the 'Accountability' category is minimal.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Continuous Learning",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 56.195,
    "ai_mentions": 2.2,
    "ai_alignment": 5.6,
    "ai_depth": 5.9,
    "ai_intent": 5.0,
    "ai_audience": 7.7,
    "ai_signal": 8.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content strongly emphasizes building quality in from the start, promoting TDD, automation, and fast feedback loopsâ€”principles aligned with improvement. However, while it briefly suggests shortening feedback loops and learning from defects, it focuses more on technical process than explicitly cultivating a continuous learning culture as defined (e.g., growth mindset, knowledge sharing, or explicit learning practices). Direct references to continuous learning are minimal, and the audience is technical, well-aligned with practitioners, but discussion of learning mechanisms or practices is not the main thrust.",
    "reasoning_summary": "This content mainly addresses technical enablers for building quality into software delivery. While related conceptsâ€”like fast feedback and process improvementâ€”are discussed, explicit focus on continuous learning and knowledge sharing is secondary, yielding partial alignment.",
    "level": "Tertiary"
  },
  "Sensemaking": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Sensemaking",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 16.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 1.8,
    "ai_intent": 1.7,
    "ai_audience": 5.4,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses heavily on technical implementationâ€”specifically, shifting quality left with tools like TDD, automation, and Azure DevOps. There is no direct discussion or mention of sensemaking principles, frameworks, or the interpretation of complex environments. While the content targets practitioners who could benefit from sensemaking, its core themes are distinctly about technical engineering practices and optimizing software delivery processes, not about interpreting or responding to complexity. Any remote overlap comes from references to responding to issues quickly and improving feedback loops, but this is framed only as a technical process rather than organizational sensemaking. Thus, the confidence for classification under Sensemaking is very low.",
    "reasoning_summary": "This resource is focused on engineering practices for building quality into software, not on organizational sensemaking or interpreting complexity. It does not align with the category's core themes.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Planning",
    "calculated_at": "2025-07-15T17:14:08",
    "ai_confidence": 39.58,
    "ai_mentions": 1.2,
    "ai_alignment": 4.9,
    "ai_depth": 4.2,
    "ai_intent": 3.8,
    "ai_audience": 3.6,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content centers around building quality into software delivery through shift-left practices like TDD, automation, and Azure DevOps tools. While these are related to Agile engineering and continuous delivery, there is very little explicit discussion of Agile Planning concepts (like backlog management, sprint planning, or prioritization). Mentions of 'feedback loops' and some Agile hashtags suggest indirect alignment, but the main focus is on quality engineering strategies, not planning approaches, techniques, or ceremonies. There is almost no direct mention of Agile Planning terminology or principles; thus, scores for direct mention, intent, and audience are low, while conceptual overlap receives a moderate score. There are no penalties since the content does not contradict or undermine Agile Planning and is not outdated.",
    "reasoning_summary": "This content mainly promotes DevOps and engineering excellence by building quality in early through automation and TDD, with minimal focus on Agile Planning practices or principles. Alignment with the category is incidental rather than central.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Miscellaneous",
    "calculated_at": "2025-07-15T17:13:58",
    "ai_confidence": 7.0,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.7,
    "ai_intent": 0.3,
    "ai_audience": 0.6,
    "ai_signal": 0.4,
    "ai_penalties_applied": true,
    "ai_penalty_points": 5.8,
    "ai_penalty_details": "All dimensions penalized by 0.8â€“1.0 points due to direct alignment with DevOps, Agile Engineering, and recognized practices (TDD, CI/CD, automation), making content expressly non-miscellaneous per exclusion criteria.",
    "final_score": 7.0,
    "reasoning": "The content centers on building software quality via DevOps practices, referencing TDD, CI/CD, automation, static analysis, and Azure DevOps. These are all core Agile/DevOps practices, not miscellaneous. The purpose, audience (developers/engineering teams), and language all tie directly to recognized frameworks. No surface-level or anecdotal contentâ€”the discussion is instructive, actionable, and method-driven, excluding it from the Miscellaneous category. Every element directly applies Agile/DevOps philosophy, justifying heavy penalties for nearly every category.",
    "reasoning_summary": "This content is deeply rooted in Agile and DevOps practicesâ€”focusing on TDD, CI/CD, automation, and industry-endorsed quality strategiesâ€”making it a poor fit for the Miscellaneous category. It offers actionable, framework-based guidance rather than general or unaligned discussion.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Deployment Strategies",
    "calculated_at": "2025-07-15T17:14:46",
    "ai_confidence": 42.45,
    "ai_mentions": 2.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.0,
    "ai_intent": 4.6,
    "ai_audience": 7.4,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "Direct mentions of deployment strategies are limitedâ€”CI/CD pipelines and continuous delivery are referenced, but not discussed in depth. The main theme is quality engineering and shifting left (TDD, automation, policies), which is conceptually related but not focused on methodologies for production deployment. The discussion is targeted at technical practitioners and does touch on deployment tooling (Azure DevOps), but most actionable insights pertain to early quality practices, not to deployment strategies per se. There is sufficient conceptual overlap (e.g., CI/CD), but the primary purpose, as described and evidenced, is to promote building in quality upstream of deployment, making the category fit partial rather than strong.",
    "reasoning_summary": "This content centers on building quality into software using TDD, automation, and Azure DevOps. While CI/CD and continuous delivery are mentioned, the main focus is early quality practicesâ€”not deployment methodologiesâ€”so it's only partly aligned to Deployment Strategies.",
    "level": "Tertiary"
  },
  "Organisational Psychology": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Organisational Psychology",
    "calculated_at": "2025-07-15T17:14:04",
    "ai_confidence": 7.8,
    "ai_mentions": 0.3,
    "ai_alignment": 0.9,
    "ai_depth": 0.8,
    "ai_intent": 1.1,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses almost entirely on technical practices (TDD, CI/CD, automation) and engineering workflow improvements for software teams. There is no direct mention of organisational psychology conceptsâ€”no attention is given to psychological safety, motivation, leadership, or team dynamics as defined in the category. The target audience is engineering and DevOps practitioners, not organisational psychologists or those interested in workplace psychology. The material intends to inform teams about quality engineering, not about psychological principles. Thus, minimal alignment exists with the 'Organisational Psychology' category, with only indirect peripheral relevance since quality culture or feedback loops might tangentially relate to team satisfaction or morale, but those elements are not explored or discussed here.",
    "reasoning_summary": "This content is focused on technical engineering practices and workflow improvements, with no substantive links to organisational psychology concepts or themes. The fit for this category is minimal and highly indirect.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agile Product Management",
    "calculated_at": "2025-07-15T17:14:57",
    "ai_confidence": 31.575,
    "ai_mentions": 1.0,
    "ai_alignment": 2.9,
    "ai_depth": 2.7,
    "ai_intent": 3.2,
    "ai_audience": 5.6,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content directly addresses engineering quality practices such as TDD, test automation, CI/CD pipelines, and DevOpsâ€”primarily from a software engineering perspective. While there is a passing hashtag reference to 'AgileEngineering' and recurring mentions of feedback loops and continuous delivery, the main thrust is technical process improvement rather than Agile Product Management. It does not discuss product ownership, backlog prioritization, customer alignment, or evidence-based management. The content is thus tangential to the scope of Agile Product Management, with low direct mentions, modest thematic overlap (e.g., building in quality can impact product value, but this is not explicitly tied to product management responsibilities), and main intent targeting engineering excellence in delivery practices. The primary audience is engineers and DevOps practitioners, not product managers.",
    "reasoning_summary": "This content focuses on engineering practices for building in software quality using DevOps, TDD, and automation. While it briefly references Agile, it does not address Agile Product Management themes or practices, and its relevance to the category is minimal and tangential.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Psychological Safety",
    "calculated_at": "2025-07-15T17:14:06",
    "ai_confidence": 13.358,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.6,
    "ai_intent": 1.3,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is focused exclusively on engineering practices for building quality (TDD, automation, CI/CD, DevOps) and preventing late defect detection. There are no direct mentions of psychological safety or any discussion of its concepts, such as risk-taking, open communication, or team environment. The depth, alignment, and intent are largely technical, targeting Agile/DevOps practitioners but without linking to psychological safety issues or benefits. Scoring reflects extreme minimal alignment: aside from brief reference to friction or feedback, these are technical, not psychological safety, concerns.",
    "reasoning_summary": "This article centers solely on technical tools and processes for software quality and does not address psychological safety, its concepts, or practices. The content's fit with the psychological safety category is extremely limited and indirect.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Team Collaboration",
    "calculated_at": "2025-07-15T17:15:07",
    "ai_confidence": 40.95,
    "ai_mentions": 2.1,
    "ai_alignment": 5.5,
    "ai_depth": 4.8,
    "ai_intent": 3.2,
    "ai_audience": 8.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content highlights engineering quality practices like TDD, automation, and CI/CD, mainly from a technical and process-focused lens. While these concepts are relevant in a team context (e.g., 'teams are still testing quality in'), the explicit focus is on technical workflow transformation, not on collaboration dynamics, shared ownership, or communication. Audience targeting aligns well with Agile and DevOps practitioners. There are indirect hints at team impact (feedback loops, developer-level quality), but the piece lacks explicit strategies or examples of improving team collaboration, trust, or shared ownership. Thus, confidence for 'Team Collaboration' is moderate and mostly due to tangential references.",
    "reasoning_summary": "This content focuses on technical practices for building in software quality, with only indirect references to team collaboration. It targets Agile and DevOps professionals but does not deeply explore teamwork, communication, or shared ownership, making its fit for the Team Collaboration category limited.",
    "level": "Tertiary"
  },
  "Sprint Review": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Sprint Review",
    "calculated_at": "2025-07-15T17:15:18",
    "ai_confidence": 6.2,
    "ai_mentions": 0.1,
    "ai_alignment": 0.4,
    "ai_depth": 0.3,
    "ai_intent": 0.4,
    "ai_audience": 2.2,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content focuses exclusively on embedding quality early via TDD, automation, and DevOps practices. It presents concepts of shifting feedback left and improving code quality, but does not mention or allude to Sprint Reviews, their purpose, stakeholders, or associated Scrum events. There is no substantive overlap between this topic and the processes or aims of a Sprint Review. The only minor overlap is a very indirect relevance: both strive to improve product quality, but through entirely different means, audiences, and intentions.",
    "reasoning_summary": "Content centers on DevOps, TDD, and building quality inâ€”not on Sprint Reviews. It does not reference or align with Sprint Review concepts, events, or processes, making fit highly unlikely.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Lean Thinking",
    "calculated_at": "2025-07-15T17:14:08",
    "ai_confidence": 57.9,
    "ai_mentions": 1.7,
    "ai_alignment": 6.4,
    "ai_depth": 5.8,
    "ai_intent": 7.1,
    "ai_audience": 8.2,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content emphasizes building quality in from the start, referencing practices like TDD, automation, CI/CD, and shortening feedback loops. These concepts align with Lean's focus on eliminating waste (e.g., rework, delays) and enhancing value streams, but 'Lean Thinking' and its specific principles or tools (e.g., Muda, Kaizen, 5S, Value Stream Mapping) are never explicitly named. The depth is moderateâ€”the message is focused but practical, with actionable suggestions for engineering strategy in a DevOps context. Audience is well-targeted (technical teams, engineers, software delivery professionals), and the intent supports efficient workflow, relevant to Lean's ethos, though framed in an Agile/DevOps context. Because direct Lean terminology or frameworks are missing, and while alignment is notable, the content rests more on adjacent Agile/DevOps practices than Lean Thinking itself. No outdated content or penalties were detected.",
    "reasoning_summary": "The content closely aligns with Lean Thinking principlesâ€”especially waste reduction and process optimizationâ€”but emphasizes Agile and DevOps methods. While it demonstrates Lean concepts (like building in quality and shortening feedback loops), it doesnâ€™t explicitly reference Lean frameworks or vocabulary.",
    "level": "Tertiary"
  },
  "Working Agreements": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Working Agreements",
    "calculated_at": "2025-07-23T12:05:08",
    "ai_confidence": 13.625,
    "ai_mentions": 0.3,
    "ai_alignment": 1.8,
    "ai_depth": 1.9,
    "ai_intent": 1.2,
    "ai_audience": 3.3,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content does not mention working agreements directly or explore topics like team norms, principles for collaboration, or communication protocols. Its main focus is on technical practices (TDD, automation, DevOps) for embedding quality in software delivery. While it is aimed at Agile/DevOps teams and does indirectly relate to building a culture of quality, there is no substantive discussion of agreements or shared team principles as defined for this category.",
    "reasoning_summary": "This content focuses on engineering quality practices in Agile/DevOps, not on working agreements or team norms. It lacks direct references or detailed discussion of collaborative principles, so its alignment with the 'Working Agreements' category is minimal.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:08",
    "ai_confidence": 67.2,
    "ai_mentions": 2.2,
    "ai_alignment": 7.7,
    "ai_depth": 7.2,
    "ai_intent": 7.4,
    "ai_audience": 7.3,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content centers on building quality in via TDD, automation, and rapid feedback with Azure DevOpsâ€”strongly aligning to agentic principles such as developer agency, feedback-driven adaptation, and DevOps-infused craft. There is emphasis on shortening feedback loops and empowering developers, key to Agentic Engineering. However, explicit reference to ethical AI, system-level decentralization, or philosophical deliberation about agency is limited, and Agentic Engineering terminology is not directly cited. The focus is practical with some conceptual alignment, but lacks the deepest exploration or breadth of philosophical agency discourse.",
    "reasoning_summary": "The content aligns well with Agentic Engineering via its focus on building in quality, developer empowerment, and rapid feedback loops, echoing agentic principles. While practical and DevOps-driven, it doesn't deeply explore agency philosophy or ethical AI, limiting full category fit.",
    "level": "Secondary"
  },
  "Agentic Software Delivery": {
    "resourceId": "Ny4mMLZX4UE",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:03",
    "ai_confidence": 32.95,
    "ai_mentions": 0.1,
    "ai_alignment": 2.05,
    "ai_depth": 2.2,
    "ai_intent": 2.15,
    "ai_audience": 3.15,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content comprehensively discusses modern software engineering, focusing on 'shift left', automation, feedback loops, and quality-in practices central to Agile, Scrum, and DevOps. However, it lacks any direct mention or in-depth exploration of autonomous AI agents, contextual intelligence, or human-agent synergyâ€”the hallmarks of Agentic Software Delivery. The closest the content gets is briefly noting 'I even use AI checks to enforce team policies,' which appears to refer to automated static checks rather than true agentic or proactive, context-aware intelligence. The intent, depth, and alignment are rooted in engineering enablement, with minimal overlap to the category definition. The target audience (practicing engineers and delivery teams) partially overlaps, and the overall focus is high, but not explicitly relevant to Agentic Software Delivery.",
    "reasoning_summary": "This content focuses on shift-left, automation, and modern DevOps but does not address agentic principles such as autonomous AI agents or contextual intelligence. Any overlap is incidental; fit with the Agentic Software Delivery category is minimal and indirect.",
    "level": "Ignored"
  }
}