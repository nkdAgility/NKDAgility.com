{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-02-12T12:10:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a focus on hypothesis formulation, experimentation, or validated learning.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-02-12T12:10:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on hypothesis-driven experimentation or Agile methodologies.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T12:10:43",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the implications of poor quality code on productivity, brand reputation, and technical debt, which are not directly related to the principles and practices of entrepreneurship.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, technical debt, and engineering practices, without a focus on the Product Backlog or its management.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T12:10:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and engineering practices, without a clear focus on Scrum principles, roles, or practices.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T12:10:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without a clear focus on systems thinking or organisational dynamics.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T12:10:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a focus on coaching practices or techniques.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T12:10:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on evidence-based leadership principles or practices.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T12:10:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code on productivity and brand reputation, without addressing employee engagement or related themes.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the implications of poor quality code on productivity and brand reputation, which are relevant to product management. However, it primarily focuses on technical aspects and engineering practices rather than strategic product management methodologies or frameworks. While it touches on the importance of delivering value to customers, it lacks a direct focus on product management principles, making it a secondary discussion rather than a primary one.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T12:10:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and engineering practices, without a clear focus on Agile leadership principles or practices.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T12:10:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, with no clear focus on Daily Scrum or its related practices.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the impacts of poor quality code on productivity, brand reputation, and technical debt, rather than focusing on system configuration processes or methodologies.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity and brand reputation, which indirectly relates to digital transformation. However, it lacks a direct focus on the strategic adoption of digital technologies or methodologies for business transformation. While it touches on improving processes and efficiency, it does not delve into broader digital transformation strategies or case studies, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 82.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 82.0,
    "reasoning": "The content discusses the implications of poor quality code and its impact on productivity, brand reputation, and the ability to deliver features, which aligns with the importance of working software. It highlights the need for high-quality, functional software and the benefits of addressing technical debt, which are core themes of the category. However, while it touches on these aspects, the primary focus is on the costs associated with poor quality rather than a direct discussion of working software itself, leading to a high confidence score but not a perfect one.",
    "level": "Primary"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and suggests improvements, but it lacks a structured approach to decision-making. While it touches on the importance of investing in quality and reducing technical debt, it does not provide evidence-based methodologies or frameworks for decision-making, nor does it focus on collaborative insights or empirical evidence. The discussion is more about the implications of poor decisions rather than a structured decision-making process.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, without a focus on self-organisation principles or practices.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs and impacts of poor quality code, engineering practices, and productivity, without any focus on remote working or Agile practices.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of improving code quality, which indirectly relates to efficiency and productivity. However, it does not explicitly mention Lean principles or focus on minimising waste in the product development process. The discussion is more centred on technical debt and code quality rather than Lean Product Development concepts.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T12:11:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity, brand reputation, and technical debt, without a clear focus on organisational culture or its influence on Agile methodologies.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on customer feedback mechanisms or integration into product development.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and engineering practices, with only a brief mention of Azure DevOps without a direct focus on Azure Repos functionalities or practices.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T12:11:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a focus on transparency in Agile processes.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, technical debt, and engineering practices, without a clear focus on the Definition of Done or its criteria.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the implications of poor quality code on productivity, brand reputation, and technical debt, without a clear focus on product strategy methodologies or frameworks.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, rather than focusing on strategies for retaining customers.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-12T12:11:17",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, technical debt, and engineering practices, without a focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 30,
    "final_score": 62.0,
    "reasoning": "The content discusses the implications of poor-quality code and its impact on productivity and brand reputation, which indirectly relates to strategic outcomes in Agile environments. However, it lacks a direct focus on strategic alignment or specific Agile methodologies, making it more of a general discussion on quality rather than a strategic analysis.",
    "level": "Secondary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T17:06:08",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 50.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of poor-quality code on innovation, particularly how time spent on fixing issues detracts from the ability to innovate. It mentions missed opportunities and provides a case study of the Azure DevOps team, which aligns with the category's focus on fostering innovation. However, the primary focus is on quality and productivity rather than innovation mechanisms or metrics, which slightly lowers the confidence score. The depth of discussion on how to turn quality into a superpower also contributes positively to the score, but it lacks a broader exploration of innovation strategies or frameworks.",
    "level": "Secondary"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-12T12:11:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on Agile frameworks or their principles.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, rather than focusing on team collaboration dynamics or Agile methodologies.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of poor-quality code on customer satisfaction, particularly in terms of brand reputation and customer support strain. However, the primary focus is on technical debt and code quality rather than a comprehensive exploration of customer satisfaction principles and practices. While it touches on customer happiness, it does not delve deeply into measurement techniques or strategies for enhancing customer engagement, which are central to the category.",
    "level": "Secondary"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 100.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the importance of improving code quality, which indirectly relates to Lean principles of efficiency and waste reduction. However, it primarily focuses on software quality and technical debt rather than explicitly addressing Lean Thinking concepts such as value stream mapping or waste identification. The mention of productivity and efficiency is present but lacks depth in Lean-specific tools or methodologies.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity, brand reputation, and technical debt, without a clear focus on Cycle Time as a primary topic.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 75.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the implications of poor quality code and the importance of engineering practices, such as refactoring, automation, and the impact of branching strategies on productivity. It highlights the benefits of improving engineering practices, including increased productivity and brand reputation, which aligns closely with the core themes of clean code and continuous improvement in Agile methodologies. The depth of discussion is significant, providing detailed examples and outcomes from real-world scenarios, thus reinforcing its relevance to the category.",
    "level": "Primary"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T12:11:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs of poor quality code and its impact on productivity and brand reputation, without a clear focus on portfolio management or strategic alignment of projects.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the implications of poor quality code on productivity, brand reputation, and engineering practices, which are all critical aspects of software development. It highlights specific methodologies and practices, such as the importance of maintaining a single version of a product, the impact of branching strategies, and the need for continuous improvement in engineering excellence. The depth of the discussion is significant, providing detailed examples and case studies, particularly around the Azure DevOps team's experience, which illustrates the benefits of addressing technical debt and improving code quality. Overall, the content aligns closely with the core themes of software development, making it a strong fit for the category.",
    "level": "Primary"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the implications of poor quality code on productivity, brand reputation, and overall engineering practices. It highlights the importance of maintaining high standards in software craftsmanship, addressing technical debt, and implementing effective engineering processes. The detailed examples provided, such as the case of Azure DevOps, illustrate the benefits of refactoring and improving engineering practices, aligning closely with the core themes of Engineering Excellence. The depth of discussion on the costs associated with poor engineering practices and the strategies for improvement further supports a high confidence score.",
    "level": "Primary"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 67.0,
    "reasoning": "The content discusses the impact of poor-quality code on team productivity and mentions a case study of the Azure DevOps team improving their efficiency, which aligns with throughput concepts. However, it primarily focuses on the costs of poor code quality rather than directly measuring or optimising throughput, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 45.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 35.0,
    "non_ai_confidence": 10,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of code quality and mentions Azure DevOps in the context of improving productivity through better practices. However, it does not focus specifically on Azure Pipelines or CI/CD processes, which are central to the category. The mention of Azure DevOps is brief and serves more as an example rather than a detailed discussion on Azure Pipelines. Overall, while there is some relevance, the primary focus is not on Azure Pipelines.",
    "level": "Tertiary"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and engineering practices, without a clear focus on Agile values or principles.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of code quality and mentions unit tests briefly, but it primarily focuses on the costs of poor-quality code and strategies for improvement rather than on automated testing principles or methodologies. The discussion lacks depth in automated testing practices and tools, which are central to the category.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without a clear focus on Site Reliability Engineering principles or practices.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the impacts of poor quality code and engineering practices, with no clear focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-02-12T12:11:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on change management strategies or practices.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T12:11:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without focusing on mentoring, coaching, or professional development in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-02-12T12:11:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on empirical process control principles or Agile methodologies.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, rather than focusing on methodologies for validating product ideas through user engagement.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, with no clear focus on Azure Boards or Agile project management.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs associated with poor quality code and its impact on productivity, brand reputation, and technical debt, but does not focus on revenue per employee as a primary topic.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of code quality and the costs associated with poor-quality code, but it does not explicitly mention Test First Development or its principles. While it touches on related themes such as reducing feedback loops and investing in engineering practices, it lacks a direct focus on defining success criteria before implementation or the specific practices of Test-Driven Development (TDD) or Acceptance Test-Driven Development (ATDD). Therefore, the confidence score reflects a low alignment with the Test First Development category.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity and customer satisfaction, which indirectly relates to frequent releases. However, it does not explicitly focus on the principles of frequent releases, continuous delivery, or deployment strategies. The mention of Azure DevOps improving their release efficiency hints at the benefits of frequent releases, but the overall discussion is more centred on code quality and technical debt rather than the release process itself.",
    "level": "Tertiary"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T12:12:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs and impacts of poor quality code, technical debt, and productivity, but does not focus on estimation techniques or practices within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and suggests improvements, but it primarily focuses on the implications of code quality rather than directly addressing troubleshooting techniques or methodologies. While it touches on issues like bugs and technical debt, it lacks a systematic approach to diagnosing and resolving specific technical problems, which is essential for a strong alignment with the Troubleshooting category.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity and customer satisfaction, which indirectly relates to the concept of delivering valuable software increments. However, it does not explicitly mention the Increment or its role within Agile frameworks, nor does it focus on the delivery of software increments as a primary topic.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T12:12:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, engineering practices, and productivity, with no specific focus on the Windows operating system or its related topics.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-02-12T12:12:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, with no clear focus on Sprint Review or its related processes.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-11T08:57:41",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the costs associated with poor-quality code and the benefits of improving code quality. While it touches on productivity and efficiency, it does not explicitly mention Lead Time or its measurement. The discussion is more focused on technical debt and team morale rather than the specific observability metric of Lead Time, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 15.0,
    "ai_alignment": 40.0,
    "ai_depth": 32.0,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content discusses the practical implications of poor quality code and its impact on productivity, brand reputation, and overall project management. It provides real-world examples, such as the case of CrowdStrike and the Azure DevOps team, illustrating how addressing technical debt and improving engineering practices can lead to significant productivity gains and better outcomes. The focus on practical problem-solving strategies and the integration of lessons learned from experience aligns well with the core themes of Pragmatic Thinking. However, while the content is rich in examples and insights, it does not explicitly mention Agile, Scrum, or DevOps frameworks, which slightly lowers the confidence score.",
    "level": "Primary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity and deployment efficiency. While it touches on reducing feedback loops and improving deployment intervals, the primary focus is on code quality rather than deployment frequency itself. The mention of Azure DevOps improving their validation time hints at deployment frequency but lacks a detailed exploration of strategies or metrics specifically related to deployment frequency.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of reducing branching strategies and mentions continuous integration as a method to improve code quality. However, the primary focus is on the costs of poor-quality code and the benefits of high-quality code rather than a detailed exploration of Continuous Integration principles or practices. While CI is mentioned, it is not the central theme, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-02-12T12:12:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity, brand reputation, and technical debt, without a clear focus on Agile methodologies or strategic planning.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of code quality and its impact on productivity and brand reputation, which are relevant to Continuous Delivery. However, it primarily focuses on the costs associated with poor-quality code rather than the principles and practices of Continuous Delivery itself. While there are mentions of improving processes and reducing technical debt, the discussion lacks a direct focus on Continuous Delivery practices such as automation, rapid feedback, or specific delivery techniques.",
    "level": "Secondary"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity, brand reputation, and technical debt, without a clear focus on cross-functional teams or their characteristics.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, technical debt, and productivity losses, without addressing the criteria or importance of a Definition of Ready for backlog items.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T12:12:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on sensemaking or decision-making processes in complex environments.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs of poor quality code and its impact on productivity, brand reputation, and technical debt, without focusing on team dynamics or motivation strategies.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 50.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of poor-quality code on team productivity and morale, which aligns with the themes of team performance. It mentions specific strategies for improving team efficiency and reducing cognitive load, indicating a focus on enhancing team dynamics. However, the primary focus is on code quality rather than direct team performance strategies, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T12:12:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, technical debt, and engineering practices, without addressing working agreements or team collaboration principles.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of improving code quality, which indirectly relates to Lean principles such as waste reduction and continuous improvement. However, it primarily focuses on software quality and technical debt rather than explicitly addressing Lean concepts or practices. The discussion lacks depth in Lean-specific tools or methodologies, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-12T12:12:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on Agile transformation principles or methodologies.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 90.0,
    "ai_alignment": 85.0,
    "ai_depth": 90.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the implications of poor quality code, which directly relates to technical debt. It highlights the costs associated with maintaining multiple versions of a product, the cognitive load on engineers, and the long-term impacts of past design decisions. The narrative includes specific examples of how addressing technical debt can lead to improved productivity and brand reputation, aligning well with the core themes of the category. The depth of discussion is significant, providing detailed insights into the consequences of neglecting technical debt and the benefits of remediation strategies.",
    "level": "Primary"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T12:12:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs of poor quality code and its impact on productivity and brand reputation, without addressing Scrum Values or their significance.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-02-12T12:12:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs of poor quality code and its impact on productivity and brand reputation, without addressing organisational change strategies or methodologies.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and the impact on productivity and brand reputation, without a clear focus on test automation principles, practices, or tools.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 75.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the implications of poor quality code on operational efficiency, highlighting the costs associated with maintaining multiple product versions and the cognitive load on engineers. It aligns well with operational practices by addressing process optimisation, continuous improvement, and the importance of integrating quality into the development process. The depth of discussion is significant, providing detailed examples and metrics related to productivity and delivery speed, which are core to the category.",
    "level": "Primary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs of poor-quality code and the benefits of investing in quality, which aligns with the concept of improving outcomes and productivity. However, it lacks direct references to Evidence-Based Management principles and does not focus on empirical metrics or data-informed decision-making, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T12:13:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the costs associated with poor-quality code and strategies for improving code quality, which does not directly address the role or responsibilities of a Scrum Master. While there are implications for team productivity and morale, the discussion lacks explicit references to Scrum practices, the Scrum Master's influence, or agile principles, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity, brand reputation, and technical debt, without a clear focus on scaling Agile methodologies or enterprise-level Agile practices.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T12:13:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without a clear focus on forecasting methodologies or practices within Agile and Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses the implications of poor-quality code and the importance of technical debt management, which aligns with technical leadership principles. However, it primarily focuses on the costs associated with code quality rather than providing in-depth strategies for leading teams or fostering agile practices. While it touches on relevant topics, such as productivity and engineering excellence, it lacks a strong emphasis on the role of leadership in guiding teams through these challenges.",
    "level": "Secondary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, rather than focusing on methodologies for identifying customer needs or defining product features.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T12:13:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without focusing on Lean Startup principles such as MVP, Build-Measure-Learn feedback loop, or validated learning.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-02-12T12:13:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, rather than focusing on Agile Planning methodologies or practices.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-02-12T12:13:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on accountability or team ownership principles in Agile.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "MVP",
    "calculated_at": "2025-02-12T12:13:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs of poor quality code and its impact on productivity and brand reputation, without focusing on the concept of Minimum Viable Product or its development.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T12:13:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity, brand reputation, and technical debt, without focusing on collaboration tools or Agile team dynamics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T12:13:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the costs of poor quality code and its impact on productivity and brand reputation, without addressing psychological safety or its role in team dynamics.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T12:13:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, technical debt, and productivity losses, without focusing on specific deployment strategies or methodologies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without focusing on Scrum roles, team dynamics, or collaboration techniques relevant to a Scrum Team.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the implications of poor-quality code and the importance of improving code quality, which aligns closely with the principles of software craftsmanship. It addresses technical debt management, refactoring, and the integration of engineering excellence practices, demonstrating a strong focus on methodologies that enhance software quality. The depth of discussion is significant, providing actionable strategies for improvement, which further supports a high confidence score.",
    "level": "Primary"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-02-12T12:13:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without a clear focus on release management processes or practices.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of code quality and mentions practices like unit tests, but it does not focus specifically on Test Driven Development (TDD) principles or the TDD cycle. While it touches on related themes, such as reducing technical debt and improving productivity, it lacks a detailed exploration of TDD as a methodology.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T12:13:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the benefits of improving engineering practices, rather than analysing trends in Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-12T12:13:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on Agile principles or philosophy.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses the impact of poor-quality code on productivity and team morale, with a specific mention of complex branching strategies and the need for simpler approaches. It aligns with the category by addressing modern source control practices, particularly in the context of version management and continuous integration. However, the primary focus is on code quality rather than source control methodologies, which limits the depth of discussion on the category itself.",
    "level": "Secondary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T12:13:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without focusing on Agile planning tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and the impact on productivity and brand reputation, without a focus on Acceptance Test Driven Development or its principles.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T12:13:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity, brand reputation, and engineering practices, without addressing asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T12:13:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code on productivity and brand reputation, without a clear focus on market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T12:13:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, focusing on operational issues rather than long-term strategic objectives or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of improving code quality and mentions practices like reducing feedback loops and investing in engineering excellence, which align with continuous learning principles. However, it primarily focuses on the costs of poor-quality code rather than explicitly promoting a growth mindset or knowledge sharing, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T12:09:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, engineering practices, and productivity, without a clear focus on decision-making processes or frameworks related to uncertainty.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-02-12T12:09:31",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity, brand reputation, and technical debt, without a clear focus on enterprise agility principles or organisational-level agility practices.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of improving code quality, which aligns with Lean principles of efficiency and waste reduction. However, it does not explicitly mention Lean methodologies or tools, and the focus is primarily on software quality rather than Lean practices. The discussion lacks depth in Lean-specific strategies, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the impacts of poor quality code and technical debt on productivity and brand reputation, rather than installation or configuration processes.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the impact of poor quality code on productivity and the importance of optimising engineering practices to enhance throughput. It highlights how technical debt and inefficient practices can lead to bottlenecks, affecting the overall flow of work. The mention of metrics like feature delivery rates and the shift from long-running tests to quicker validation methods aligns well with flow efficiency principles. However, while the content touches on relevant themes, it primarily focuses on quality and technical debt rather than flow efficiency as a standalone topic.",
    "level": "Secondary"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 82.0,
    "reasoning": "The content discusses the implications of poor quality code on product delivery, highlighting the costs associated with fixing bugs, maintaining multiple versions, and the impact on team productivity. It aligns well with the core themes of product delivery, such as the importance of quality assurance, iterative development, and the role of engineering practices in enhancing delivery efficiency. The depth of discussion is significant, providing detailed examples and metrics that illustrate the relationship between quality and delivery performance.",
    "level": "Primary"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and engineering practices, focusing on technical debt and productivity rather than Agile product management principles or practices.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-12T12:09:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on Systems Thinking principles or interconnectedness within organisational dynamics.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-02-12T12:09:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on complexity science or its principles.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity and brand reputation, which indirectly relates to market adaptability. However, it lacks a direct focus on Agile, DevOps, or Lean methodologies, and does not provide specific strategies for enhancing market responsiveness. The mention of Azure DevOps showcases a case of improved efficiency, but the overall discussion is more about code quality than market adaptability.",
    "level": "Tertiary"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T12:10:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the impacts of poor quality code on productivity, brand reputation, and technical debt, with specific examples and actionable insights related to software engineering practices.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 50,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of code quality and its impact on productivity, which aligns with DevOps principles of continuous improvement and shared accountability. However, it primarily focuses on the costs associated with poor-quality code rather than explicitly addressing DevOps practices or cultural shifts. The mention of Azure DevOps provides a connection to the category, but the overall discussion lacks depth in DevOps-specific strategies or methodologies.",
    "level": "Secondary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 65.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 65.0,
    "reasoning": "The content discusses the impact of poor-quality code and mentions the Azure DevOps team as a case study for improving productivity. However, the primary focus is on code quality rather than Azure DevOps itself. While there is a relevant mention of Azure DevOps, it is not the central theme of the discussion, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity and brand reputation, which are relevant to business agility. However, it primarily focuses on technical debt and code quality rather than the broader principles and practices of business agility. The mention of missed opportunities and the need for innovation aligns somewhat with business agility, but the overall discussion lacks depth in agile methodologies and leadership roles in fostering agility.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T12:10:17",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, without any clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 27.0,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content discusses the impact of poor quality code on productivity, brand reputation, and customer satisfaction, which aligns with the principles of value delivery. It highlights the importance of addressing technical debt and improving engineering practices to enhance value delivery. However, while it touches on relevant themes, the primary focus is more on the consequences of poor quality rather than specific strategies or methodologies for value delivery within Agile or DevOps frameworks.",
    "level": "Primary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 87.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 27.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content discusses the implications of poor quality code and the importance of engineering practices that enhance productivity and quality. It mentions specific practices like reducing branching strategies and the impact of technical debt on productivity and brand reputation. However, while it touches on relevant themes such as the need for high-quality code and the consequences of neglecting engineering practices, it lacks a focused discussion on specific methodologies like TDD or CI/CD. The depth of technical discussion is moderate, primarily highlighting the consequences rather than providing detailed methodologies or practices.",
    "level": "Primary"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 42.0,
    "ai_mentions": 100.0,
    "ai_alignment": 35.0,
    "ai_depth": 45.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the impact of poor-quality code on productivity and innovation, which aligns with the themes of organisational agility. However, it primarily focuses on technical debt and code quality rather than explicitly addressing agile methodologies or cultural shifts necessary for agility. The mention of productivity and missed opportunities hints at agility but lacks depth in discussing agile principles or frameworks.",
    "level": "Tertiary"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T12:10:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code and engineering practices, without personal anecdotes or reflections related to Agile, Scrum, or DevOps.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the impact of poor-quality code on team productivity and morale, which touches on sociotechnical aspects. However, it primarily focuses on technical debt and code quality without a thorough exploration of the interplay between social and technical systems within organisations. While there are mentions of team dynamics and productivity, the discussion lacks depth in addressing organisational culture or structure, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 10,
    "final_score": 42.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of improving code quality, which indirectly relates to metrics and learning through the lens of productivity and team efficiency. However, it lacks explicit discussions on metrics, data collection, or feedback mechanisms, which are central to the category. The focus is more on the implications of code quality rather than on evidence-based decision-making or continuous improvement methodologies.",
    "level": "Tertiary"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the implications of poor-quality code and its impact on productivity and brand reputation, which are relevant to the application lifecycle. However, it primarily focuses on code quality rather than the comprehensive management of the application lifecycle stages, tools, or methodologies. While there are mentions of practices that could relate to ALM, they are not the primary focus of the discussion.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of improving code quality, which indirectly relates to efficiency and productivity. However, it does not explicitly mention Value Stream Management or its core principles, nor does it provide in-depth analysis or techniques related to value streams. The focus is more on code quality and technical debt rather than the strategic approach of Value Stream Management.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T12:10:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the impacts of poor quality code on productivity, brand reputation, and technical debt, focusing on engineering practices rather than psychological principles or theories related to organisational behaviour.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, without a clear focus on platform engineering or Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:03:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation, without a clear focus on BetaCodex principles or decentralised organisational design.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content discusses the importance of code quality and its impact on productivity and brand reputation, but it does not explicitly mention the Agile Product Operating Model or its principles. While there are elements of continuous improvement and team efficiency that align with agile methodologies, the primary focus is on technical debt and code quality rather than the broader framework of APOM.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:49:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs associated with poor quality code and its impact on productivity and brand reputation, without a clear focus on leadership practices or themes.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the impact of poor-quality code on team productivity and morale, which touches on aspects of collaboration and decision-making. However, it primarily focuses on technical debt and code quality rather than the broader themes of social technologies. While there are mentions of team dynamics and productivity, the depth of discussion on social frameworks and methodologies is limited, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs of poor quality code and its impact on productivity and brand reputation, without a clear focus on Internal Developer Platforms or their role in streamlining development processes.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:33:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the costs and impacts of poor quality code, engineering practices, and productivity, without any mention of Artificial Intelligence or its application in Agile or DevOps.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 3.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the costs associated with poor quality code and the impact on productivity and brand reputation. While it touches on themes relevant to software development, it does not explicitly mention Scrum principles, roles, events, or artifacts. The discussion lacks a direct focus on Scrum practices or frameworks, resulting in a low confidence score for alignment with the Scrum category.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift-Left Strategy",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of improving code quality and integrating security into the development process, which aligns with the Shift-Left Strategy. However, it primarily focuses on the costs of poor-quality code and general practices for improvement rather than explicitly detailing the Shift-Left approach or its principles. The mention of reducing feedback loops and baking security into the process indicates some alignment, but the overall depth and direct focus on Shift-Left practices are limited.",
    "level": "Secondary"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of improving code quality and its impact on productivity and brand reputation, which aligns with the principles of Continuous Improvement. However, while it touches on relevant themes such as reducing technical debt and enhancing team effectiveness, it does not explicitly frame these discussions within the context of Continuous Improvement methodologies or strategies. The focus is more on the consequences of poor quality rather than a structured approach to ongoing improvement.",
    "level": "Secondary"
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of code quality and its impact on productivity and brand reputation, which indirectly relates to common goals in Agile and DevOps. However, it lacks explicit discussions on shared objectives or alignment strategies, focusing more on the consequences of poor quality rather than how to align team efforts with overarching goals.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 72.0,
    "ai_mentions": 3,
    "ai_alignment": 80.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of high-quality code and its impact on productivity, team morale, and brand reputation, which aligns with the core themes of competence. It mentions strategies for improving code quality, such as reducing branching and investing in engineering excellence, indicating a focus on skill development and continuous improvement. However, while competence is a significant theme, the primary focus is on the costs of poor-quality code rather than a direct exploration of competence itself.",
    "level": "Secondary"
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-03-21T16:58:01",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 30,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of code quality and its impact on productivity and brand reputation, which are relevant to the principles of the One Engineering System. However, it does not explicitly mention 1ES or its components, nor does it focus on integration and standardisation of engineering processes. The discussion is more centred on general software quality rather than the specific framework of 1ES.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-10T13:41:51",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the costs associated with poor-quality code and strategies for improving code quality. While it touches on themes of productivity and team morale, it does not explicitly address Agentic Agility or the intentional shaping of outcomes through autonomy and adaptability. The focus is more on technical debt and operational efficiency rather than the transformative capacity of individuals or systems in a socio-technical context.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:41:54",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 28,
    "ai_depth": 22,
    "non_ai_confidence": 20,
    "final_score": 62.0,
    "reasoning": "The content discusses the implications of poor-quality code on productivity, team morale, and brand reputation, which aligns with the principles of continuous improvement and customer feedback in product development. However, it primarily focuses on the technical aspects of code quality rather than broader product development methodologies, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T17:06:02",
    "ai_confidence": 62.0,
    "ai_mentions": 2,
    "ai_alignment": 75.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of poor-quality code on productivity and the ability to deliver features, which aligns with the concept of Time to Market. It mentions missed opportunities and the importance of reducing technical debt to improve delivery speed. However, the primary focus is on code quality rather than explicitly on Time to Market metrics or strategies, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:42:01",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of investing in quality, which indirectly relates to project management principles such as risk management and team productivity. However, it lacks direct mentions of project management methodologies, lifecycle phases, or specific tools, making it more of a secondary focus rather than a primary discussion on project management.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T17:06:21",
    "ai_confidence": 65.0,
    "ai_mentions": 50.0,
    "ai_alignment": 70.0,
    "ai_depth": 60.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the hidden costs of poor-quality code and how improving code quality can lead to increased productivity and innovation, which aligns with the concept of Unrealised Value. It mentions missed opportunities and the potential for organisations to achieve more by addressing technical debt, indicating a focus on untapped value. However, the primary focus is on the costs associated with poor quality rather than a direct exploration of Unrealised Value as defined in the category. The discussion is relevant but not exhaustive, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:42:07",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the costs and benefits of poor-quality code, with no direct mention of Hybrid Agile methodologies or their challenges. While it touches on team productivity and engineering practices, it does not critically examine the integration of traditional and agile practices, nor does it discuss the implications of Hybrid Agile frameworks.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T17:06:26",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs associated with poor-quality code and the benefits of investing in quality, which indirectly relates to the concept of Current Value by highlighting productivity and customer satisfaction. However, it lacks explicit mentions of Current Value metrics or techniques for measuring it, and the discussion is more focused on the implications of code quality rather than a real-time assessment of value delivered. Therefore, while there is some alignment with the themes of Current Value, the depth and direct mentions are insufficient for a higher confidence score.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:42:13",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the costs associated with poor-quality code and strategies for improving code quality. While it touches on team productivity and mentions multiple teams, it does not explicitly discuss scaling methodologies, frameworks, or the complexities involved in scaling Agile practices. The discussion lacks depth in terms of scaling strategies and does not align with the core themes of the Scaling category.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-10T13:42:15",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the costs of poor-quality code and touches on branching strategies, which are relevant to version control practices. However, it does not explicitly mention GitHub or its specific functionalities, nor does it focus on GitHub's collaboration features or project management tools. The discussion is more general about coding practices and technical debt rather than being centred on GitHub as a platform.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T17:06:04",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the costs associated with poor-quality code and strategies for improving code quality. It does not explicitly mention Agnostic Agile or its principles, nor does it discuss the adaptability of agile methodologies based on context. While there are references to productivity and team dynamics, these are not framed within the context of Agnostic Agile, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T17:06:11",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 40,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the implications of poor-quality code and its impact on productivity and brand reputation. While it touches on themes of organisational efficiency and team morale, it does not explicitly discuss the concept of treating the organisation as a product or integrating customer feedback into organisational design. The discussion lacks depth in terms of CaaP principles and does not provide strategies or case studies related to CaaP, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T17:06:14",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the costs associated with poor-quality code and strategies for improving code quality. It does not mention or align with the principles of Cell Structure Design, such as decentralised structures, autonomous cells, or the Beta Codex. The focus is on technical debt and productivity in software development, which is unrelated to the core themes of Cell Structure Design.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "category": "Liberating Structures",
    "calculated_at": "2025-04-10T17:05:59",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the costs associated with poor-quality code and strategies for improving code quality. It does not mention Liberating Structures or discuss facilitation techniques aimed at enhancing participation or collaboration within groups. While there are references to team productivity and morale, these are not framed within the context of Liberating Structures, which diminishes the relevance to the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T17:06:29",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the costs associated with poor-quality code and strategies for improving code quality. It does not mention Open Space Agile or its principles, nor does it discuss topics related to collective participation, psychological safety, or co-creation in Agile transformations. While there are some indirect references to team productivity and morale, these do not align with the core themes of Open Space Agile, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 45.0,
    "ai_mentions": 20.0,
    "ai_alignment": 55.0,
    "ai_depth": 40.0,
    "non_ai_confidence": null,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of high-quality code and its implications for productivity, but it does not explicitly focus on principles as defined. While there are elements indirectly related to principles (such as investment in quality leading to improved outcomes), the emphasis remains on the costs and consequences of poor code rather than actionable guiding principles that directly influence decision-making or behavior within frameworks like Agile or DevOps.",
    "level": "Tertiary"
  },
  "Tool": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 45.0,
    "ai_mentions": 2,
    "ai_alignment": 60.0,
    "ai_depth": 35.0,
    "non_ai_confidence": null,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of quality code and its relationship to productivity and team morale, touching briefly on tools like Azure DevOps to illustrate points. However, the overall focus is on quality improvement and practices rather than detailed analysis or discussion of specific tools as mechanisms for Agile or DevOps frameworks, leading to a moderate but not strong confidence score.",
    "level": "Tertiary"
  },
  "Values": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Values",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content discusses the impact of poor-quality code on productivity and brand reputation, which touches on the values of quality and trust. However, it primarily focuses on technical aspects and the benefits of improving code quality rather than providing a deep philosophical discussion on values themselves. It lacks direct mentions of core values like those found in Agile, Scrum, or DevOps, and does not elaborate on how these values shape team dynamics and decision-making.",
    "level": "Ignored"
  },
  "Philosophy": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the practical implications of poor-quality code, discussing causes and solutions rather than exploring foundational philosophical ideas behind methodologies like Agile or Lean. While it touches on team dynamics and productivity, it lacks deep exploration of the 'why' behind these practices, which is central to philosophical discussions. The mention of improving processes is procedural, not philosophical.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 28.0,
    "ai_mentions": 2,
    "ai_alignment": 30.0,
    "ai_depth": 25.0,
    "non_ai_confidence": null,
    "final_score": 28.0,
    "reasoning": "While the content discusses the importance of high-quality code and the costs associated with poor-quality code, it primarily focuses on practical aspects, such as productivity and cost management, rather than on the systematic principles or methodologies that define a discipline. Although there are mentions of related practices like continuous integration and engineering excellence, the content does not address the underlying principles or evolution of methodologies such as Agile, DevOps, or Lean, which are central to the discipline category. Furthermore, the discussion on team morale and brand reputation, while relevant, is more anecdotal and does not delve deeply into a structured approach or codified knowledge that would align it with the discipline category.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 12.0,
    "reasoning": "The content discusses poor-quality code and its impact on productivity and brand reputation, but does not explicitly mention any formal artifacts as defined in Agile, Scrum, or Lean. While it touches upon concepts like technical debt and development practices, it does not focus on artifacts or their role in transparency and empirical control, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content focuses primarily on the costs associated with poor-quality code and best practices for improving code quality, without directly addressing observability principles, tools, or metrics. While it discusses team productivity and effective engineering practices, it does not provide insights into measuring internal states of systems or the specific role of observability in software development. The relationship to observability is minimal and more related to general software quality, leading to a low confidence score for this category.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 68.0,
    "ai_mentions": 2,
    "ai_alignment": 60.0,
    "ai_depth": 75.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses the importance of high-quality code and the consequences of poor-quality code, focusing on actionable techniques for improvement, such as reducing branching strategies, limiting versions, and investing in engineering excellence. These points align with the 'Practice' category by emphasizing consistent actions teams can take to improve performance. However, while practical techniques are discussed, the primary focus is more on the overall impact of code quality rather than solely on practices itself, affecting the overall confidence score.",
    "level": "Secondary"
  },
  "Method": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Method",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 75.0,
    "ai_mentions": 16,
    "ai_alignment": 30,
    "ai_depth": 28,
    "non_ai_confidence": null,
    "final_score": 75.0,
    "reasoning": "The content emphasizes structured procedures for improving code quality, with specific strategies such as reducing branching, limiting versions, and investing in engineering excellence. These constitute a methodical approach to achieving higher quality software. While the broader discussion on the impact of quality on productivity and reputation is valuable, the focus on concrete steps and procedural recommendations aligns well with the 'Method' category.",
    "level": "Secondary"
  },
  "Model": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Model",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 24.0,
    "ai_mentions": 5.0,
    "ai_alignment": 30.0,
    "ai_depth": 30.0,
    "non_ai_confidence": null,
    "final_score": 24.0,
    "reasoning": "The content primarily discusses the costs of poor quality code and strategies for improving code quality, rather than focusing on conceptual models or frameworks related to Agile, DevOps, or Lean. While it briefly touches on improving processes (related to system agility), it does not delve into specific models like the Cynefin Framework or Lean Startup principles. Therefore, it does not align closely with the 'Model' category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 24.0,
    "ai_mentions": 2,
    "ai_alignment": 20.0,
    "ai_depth": 25.0,
    "non_ai_confidence": null,
    "final_score": 24.0,
    "reasoning": "The content discusses quality code and its impacts on productivity and brand reputation but does not focus on any specific frameworks or their methodologies, such as Agile or DevOps. It touches on concepts related to engineering practices and technical debt which could be part of a framework discussion; however, it largely emphasizes costs and improvements rather than outlining or exploring structured methodologies or frameworks. This results in a low confidence score, as the primary focus does not align with 'Framework' discussions.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 68.0,
    "ai_mentions": 2,
    "ai_alignment": 35.0,
    "ai_depth": 45.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses the importance of high-quality code and strategies to improve coding practices, which aligns with the idea of continuous improvement as embraced in Agile and DevOps methodologies. However, while it mentions some actionable practices, it primarily focuses on the issues of poor-quality code rather than clearly outlining specific tenets that dictate decision-making and behaviors within an organization. The content briefly touches on principles like continuous integration and reducing complexity but lacks a thorough exploration of how these practices serve as guiding tenets.",
    "level": "Secondary"
  },
  "Capability": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:06:28",
    "ai_confidence": 43.0,
    "ai_mentions": 100.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 43.0,
    "reasoning": "The content focuses on the impact of poor-quality code and strategies to improve it, touching on aspects that can enhance team productivity and overall organizational performance, which loosely align with the concept of capabilities. However, it centers more on specific practices and technical debt rather than discussing the cultivation of enduring capabilities within an organization. Therefore, the direct mentions are minimal, the conceptual alignment is moderate, and the depth of discussion does provide insights on improving processes but lacks a strong focus on systemic capabilities.",
    "level": "Tertiary"
  },
  "Service Level Expectation": {
    "resourceId": "1AO6FFBlE4Y",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:41",
    "ai_confidence": 2.514,
    "ai_mentions": 0.0,
    "ai_alignment": 1.3,
    "ai_depth": 2.0,
    "ai_intent": 3.2,
    "ai_audience": 4.5,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses on the costs of poor-quality code, technical debt, and engineering practices, with detailed anecdotes about branching strategies, customer support, and code validation. There are no explicit or implicit mentions of Service Level Expectation (SLE) in terms of definition, calculation, or usage. While themes like productivity improvement and flow are tangentially related to predictability and delivery, the discussion stays firmly on code quality and process excellence, not SLE in Agile, Scrum, or Kanban terms. The main intent is to advocate for investment in quality for better business outcomes, not to define, analyze, or apply SLE. The audience (teams and stakeholders in engineering excellence) has some overlap but not a precise match for SLE-related expertise. The signal-to-noise ratio is modest, as most content is on topic for engineering improvement, but none of it is focused on SLE. No penalties applied, as the information is current and not satirical or contradictory. The extremely low confidence score reflects an absence of mention, definition, or application of SLE, and only faint contextual overlap.",
    "level": "Ignored"
  }
}