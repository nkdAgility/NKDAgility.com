{
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T02:10:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without a focus on decision-making processes or the principles of decision theory.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-02-12T02:10:57",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses agile practices and engineering excellence, which are relevant to enterprise agility, but the primary focus is on team-level practices and quality assurance rather than broader organisational agility.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-02-12T02:10:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, particularly Agile methodologies, and does not focus on Lean principles or waste reduction.",
    "level": "Ignored"
  },
  "Resilience and Change": {
    "category": "Resilience and Change",
    "calculated_at": "2025-02-12T02:11:00",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses methodologies and practices in software engineering that can enhance organisational resilience and adaptability, particularly through the concept of 'shift left' in quality assurance. However, the primary focus is on technical implementations rather than a comprehensive exploration of resilience and change as a central theme.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-02-12T02:11:01",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses concepts related to quality assurance, engineering practices, and team dynamics rather than installation or configuration of tools or software.",
    "level": "Ignored"
  },
  "Code and Complexity": {
    "category": "Code and Complexity",
    "calculated_at": "2025-02-12T02:11:03",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses the importance of code quality, the shift-left approach in software development, and the role of practices like pair programming and test-driven development in managing complexity and improving maintainability. It aligns well with the key topics of the category, particularly in relation to software code quality and best practices in development.",
    "level": "Secondary"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-02-12T02:11:05",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses concepts related to improving engineering practices and quality assurance, which indirectly touches on flow efficiency through the idea of shifting left and optimising processes. However, the primary focus is on quality assurance and engineering practices rather than directly on flow efficiency principles or metrics.",
    "level": "Ignored"
  },
  "AI and Automation in Agility": {
    "category": "AI and Automation in Agility",
    "calculated_at": "2025-02-12T02:11:06",
    "ai_confidence": 0,
    "non_ai_confidence": 30,
    "final_score": 3.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and the shift-left approach, without any mention of AI or automation technologies in Agile frameworks.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-02-12T02:11:09",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses methodologies and practices related to quality assurance and engineering excellence, which are integral to the product delivery process. It emphasises the importance of shifting quality assurance left in the development cycle, the role of cross-functional teams, and the impact of agile practices on delivering effective software products.",
    "level": "Secondary"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-02-12T02:11:10",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses Agile practices and their impact on product development, particularly in relation to quality assurance and team dynamics. However, it primarily focuses on engineering practices rather than product management strategies, making Agile principles a major but secondary theme.",
    "level": "Ignored"
  },
  "Discovery and Learning": {
    "category": "Discovery and Learning",
    "calculated_at": "2025-02-12T02:11:13",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of shifting quality assurance left in the development cycle, which involves experimentation and learning from both successes and failures. It touches on methodologies that foster continuous learning and improvement within engineering teams, but the primary focus is on quality assurance practices rather than discovery and learning as a central theme.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-12T02:11:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on Systems Thinking principles or interconnectedness within organisational dynamics.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-02-12T02:11:16",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses modern software engineering practices, particularly the concept of 'shift left' in quality assurance, which touches on themes of complexity in organisational behaviour and the need for adaptive practices. However, it primarily focuses on practical engineering techniques rather than a deep exploration of complexity science principles.",
    "level": "Ignored"
  },
  "Transparency and Accountability": {
    "category": "Transparency and Accountability",
    "calculated_at": "2025-02-12T02:11:17",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on transparency or accountability within Agile teams.",
    "level": "Ignored"
  },
  "Practical Techniques and Tooling": {
    "category": "Practical Techniques and Tooling",
    "calculated_at": "2025-02-12T02:11:19",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses practical techniques and tooling related to quality assurance in software engineering, including concepts like 'shift left', test-driven development, and pair programming. It explores how these methodologies can enhance team performance and product quality, aligning well with the category's focus.",
    "level": "Secondary"
  },
  "Events and Presentations": {
    "category": "Events and Presentations",
    "calculated_at": "2025-02-12T02:11:21",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices and concepts, specifically around quality assurance and Agile methodologies, without reference to any specific events, presentations, or discussions related to them.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-02-12T02:11:22",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses Agile practices and the importance of building quality into the development process, which relates to market adaptability. However, the primary focus is on quality assurance and engineering practices rather than directly addressing strategies for responding to market shifts.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T02:11:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, which is closely related to Agile methodologies and practices. It references various Agile concepts and tools, making it not suitable for the Miscellaneous category.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-02-12T02:11:25",
    "ai_confidence": 80,
    "non_ai_confidence": 50,
    "final_score": 77.0,
    "reasoning": "The content primarily discusses the integration of quality assurance practices within the software development lifecycle, emphasising the shift-left approach, which aligns with DevOps principles. It highlights the importance of collaboration, automation, and continuous delivery, making it a central theme in the context of DevOps.",
    "level": "Secondary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-02-12T02:11:28",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses engineering practices and methodologies that align with Agile and DevOps principles, and it briefly mentions Azure DevOps in the context of transitioning from a waterfall model to continuous delivery. However, the primary focus is on general software engineering practices rather than specifically on Azure DevOps functionalities or tools.",
    "level": "Ignored"
  },
  "Products and Books": {
    "category": "Products and Books",
    "calculated_at": "2025-02-12T02:11:29",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses software engineering practices and the concept of shifting quality assurance left, without a clear focus on specific products or literature related to Agile or DevOps.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-02-12T02:11:31",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses modern software engineering practices, including concepts like 'shift left' and test-driven development, which are relevant to fostering a culture of innovation and adaptability. However, the primary focus is on technical practices rather than a comprehensive exploration of business agility principles or strategies.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T02:11:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with no clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-02-12T02:11:34",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses strategies for improving quality assurance through practices like shift left, test-driven development, and pair programming, which are all aimed at enhancing value delivery in software engineering. It highlights the importance of iterative development and aligning engineering practices with customer needs, making it a central theme.",
    "level": "Secondary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-02-12T02:11:36",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses engineering practices such as shifting quality assurance left, test-driven development, and pair programming, all of which are central to enhancing technical excellence in software development.",
    "level": "Secondary"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "calculated_at": "2025-02-12T02:11:37",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies rather than scaling Agile practices across multiple teams or organisational structures.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-02-12T02:11:39",
    "ai_confidence": 80,
    "non_ai_confidence": 10,
    "final_score": 73.0,
    "reasoning": "The content primarily discusses modern software engineering practices, particularly the concept of 'shift left' in quality assurance, which aligns with agile methodologies. It explores how these practices enhance organisational adaptability and responsiveness, emphasising the importance of team-based approaches and continuous improvement, which are central to organisational agility.",
    "level": "Secondary"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T02:11:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical concepts and practices related to quality assurance and software engineering, without personal anecdotes or reflections.",
    "level": "Ignored"
  },
  "People and Process": {
    "category": "People and Process",
    "calculated_at": "2025-02-12T02:11:42",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses the role of engineering teams in quality assurance, the importance of collaboration, and the integration of various skills within teams, which aligns well with the themes of team dynamics and process improvement in technology development.",
    "level": "Secondary"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-02-12T02:11:44",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the integration of engineering practices and team dynamics in the context of quality assurance and software development. While it touches on sociotechnical themes, such as team roles and the importance of collaboration, the primary focus is on technical practices rather than a comprehensive exploration of sociotechnical systems.",
    "level": "Ignored"
  },
  "News and Reviews": {
    "category": "News and Reviews",
    "calculated_at": "2025-02-12T02:11:45",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses software engineering practices and the concept of 'shift left' in quality assurance, without focusing on news or reviews related to Agile, DevOps, or technology updates.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-02-12T02:11:47",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of quality assurance and engineering practices, touching on concepts like shift left and continuous improvement. However, it primarily focuses on practices rather than metrics and learning, making it a secondary theme.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-02-12T02:11:49",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses aspects of the application lifecycle, particularly focusing on quality assurance and the shift-left approach in the development cycle. However, it primarily centres around engineering practices and methodologies rather than a comprehensive view of Application Lifecycle Management as a whole.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-02-12T02:11:50",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, particularly around quality assurance and the concept of 'shift left', rather than focusing on Value Stream Management principles or techniques.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T02:11:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and Agile methodologies, without addressing psychological principles or theories related to motivation, engagement, leadership, or team dynamics.",
    "level": "Ignored"
  }
}
