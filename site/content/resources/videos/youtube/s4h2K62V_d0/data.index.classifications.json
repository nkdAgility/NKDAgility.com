{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices without any explicit mention of hypothesis formulation, experimentation, or validated learning. While it touches on Agile methodologies, it does not align with the core themes of hypothesis-driven development, such as testing hypotheses or using data to inform decisions.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of 'shifting left' in quality assurance and touches on the importance of testing and validation within Agile practices. It mentions experimentation in the context of validating features and user feedback, particularly through the lens of continuous delivery and iterative development. However, while it references experimentation, it does not delve deeply into hypothesis-driven methodologies or specific techniques like A/B testing. The primary focus is more on quality assurance and engineering practices rather than a systematic exploration of experimentation itself.",
    "level": "Secondary",
    "reasoning_summary": "This content mainly explores quality assurance and Agile practices, highlighting the value of early testing and validation. While it briefly mentions experimentation, it doesnâ€™t thoroughly address hypothesis-driven approaches or specific experimentation methods. Therefore, it aligns more with quality engineering than with in-depth experimentation or optimisation topics."
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T02:11:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically quality assurance and agile methodologies, without a clear focus on entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "s4h2K62V_d0",
    "category": "Product Backlog",
    "calculated_at": "2025-05-13T21:55:09",
    "ai_confidence": 10.95,
    "ai_mentions": 1.0,
    "ai_alignment": 1.5,
    "ai_depth": 1.0,
    "ai_intent": 2.2,
    "ai_audience": 2.5,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content is focused on code review practices for quality assurance, automation, and improving code quality. While various Agile-related hashtags and terms appear in the metadata, there are no direct references to the Product Backlog, its management, prioritization, or its role in Agile frameworks. There is no exploration of backlog-related processes or stakeholders. The audience may overlap partially (developers, Agile practitioners), but the substance is not about backlog techniques or Product Owner responsibilities. The discussion does not intersect with backlog refinement, selection, or tools specific to backlog management.",
    "reasoning_summary": "This content is all about code review and quality assurance, not Product Backlog. There are no references or relevant discussion connecting to backlog topics, resulting in a very low confidence score for this category.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T02:11:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on Scrum principles, roles, or events.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the dynamics of engineering teams and their practices, touching on systems thinking principles such as the shift left approach and the interplay between team roles and organisational effectiveness. However, the primary focus is on software engineering practices rather than a comprehensive exploration of organisational dynamics.",
    "level": "Tertiary"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T02:12:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and the shift-left approach, with minimal focus on coaching or facilitation of growth and development within teams.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T02:12:03",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on evidence-based leadership principles or empirical decision-making in leadership contexts.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T02:12:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance, with no focus on employee engagement or related themes.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on software engineering practices, particularly around quality assurance and Agile methodologies, rather than the strategic aspects of product management. While it touches on concepts like team dynamics and the importance of building quality into products, it lacks a direct discussion on product management frameworks, customer feedback prioritisation, or alignment with business strategy, which are core to the category. The depth of discussion on engineering practices is significant, but it does not sufficiently address the strategic alignment of product management.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices and concepts related to quality assurance and software engineering, without a clear focus on leadership roles or practices within Agile contexts.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T02:12:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance and engineering practices, with no clear focus on Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-10T13:41:14",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance in software development, which is not directly related to system configuration. While it mentions automation and practices that could tangentially relate to system setup, the focus is on code quality rather than the configuration of systems. The discussion lacks depth in terms of system configuration specifics, such as integration of hardware and software or configuration management tools.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices within software development, focusing on techniques and methodologies rather than the strategic adoption of digital technologies for business transformation. While there are mentions of automation and improving processes, these are not explicitly tied to broader themes of digital transformation, such as business agility or organisational culture. The discussion lacks depth in relation to the key topics outlined for the Digital Transformation category.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 87.0,
    "ai_mentions": 15.0,
    "ai_alignment": 40.0,
    "ai_depth": 32.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content discusses the importance of quality assurance and engineering practices in software development, particularly the concept of 'shift left' which aligns with the principles of working software. It highlights the need for teams to take ownership of their code and support it in production, which is crucial for delivering functional software. The depth of discussion on practices like test-driven development and pair programming indicates a strong focus on ensuring software quality and functionality. However, while it touches on key aspects of working software, it does not explicitly define or categorise working software within Agile or Scrum frameworks, which slightly lowers the confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a good fit for the category as it explores quality assurance and engineering practices that underpin working software, such as test-driven development and team ownership. While it doesnâ€™t explicitly define 'working software' in Agile or Scrum terms, its focus on practical methods to ensure software quality aligns well with the categoryâ€™s intent."
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to decision-making in the context of software development. However, it lacks explicit discussions on structured decision-making methodologies, evidence-based practices, or collaborative decision-making techniques. The focus is more on practices rather than the decision-making process itself.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses code reviews and automation in the context of Agile practices, but it does not explicitly address self-organisation principles or techniques. While it touches on aspects of team collaboration and quality assurance, it lacks a direct focus on self-organisation as a primary theme. The depth of discussion is moderate, primarily centred on code review processes rather than fostering autonomy or team empowerment.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance, with no clear focus on remote working or Agile collaboration in a distributed environment.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is more aligned with Agile practices than Lean Product Development. While there are mentions of improving processes and reducing blockers, the focus is not on Lean principles such as waste reduction or customer feedback integration. The discussion lacks depth in Lean concepts and does not provide substantial insights into Lean methodologies.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T02:12:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices and tools related to quality assurance and software engineering, without a clear focus on organisational culture or its influence on agility and transformation.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices, with no direct mention of customer feedback loops or their integration into product development. While it touches on improving code quality, it does not explore mechanisms for collecting or acting on customer feedback, which is essential for this category.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of shifting left in quality assurance and modern software engineering practices, with no direct focus on Azure Repos or its functionalities.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T02:12:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance and engineering practices, with no clear focus on transparency or its role in Agile processes.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "s4h2K62V_d0",
    "category": "Definition of Done",
    "calculated_at": "2025-05-13T21:55:11",
    "ai_confidence": 30.425,
    "ai_mentions": 1.1,
    "ai_alignment": 3.8,
    "ai_depth": 3.9,
    "ai_intent": 2.4,
    "ai_audience": 7.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content focuses on code reviews and automation in quality assurance, mentioning Agile and Scrum in passing but not explicitly referring to the Definition of Done (DoD). It discusses practices (like automated checks on pull requests) which are often included as DoD criteria, yet never ties these directly to DoD, its purpose, or evolution within Agile teams. The depth is limited to code review procedures rather than a holistic view of DoD. The intent is oriented toward code quality, but not DoD as a framework or shared agreement. The audience (developers, product managers) overlaps with DoD stakeholders, and the content is focused (high signal), but its main thrust is procedural and tool-centric, not on DoD as an Agile principle.",
    "reasoning_summary": "This content emphasizes code reviews and related tooling for quality, touching on areas often found in a Definition of Done checklist but never addressing DoD itself. Thus, it only weakly aligns with the category and does not offer substantive discussion or intent related to DoD concepts.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses engineering practices, quality assurance, and technical implementation details rather than product strategy, vision, or market analysis.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-12T02:12:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and development methodologies without a clear focus on customer retention strategies or user engagement.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and the concept of 'shift left', without any focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to Agile practices. However, it lacks a direct focus on strategic alignment or the development of strategic approaches within Agile, Scrum, or DevOps frameworks. While it mentions Agile and DevOps tools, the primary discussion revolves around code quality rather than strategic planning or execution, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T17:05:05",
    "ai_confidence": 12.0,
    "ai_mentions": 5,
    "ai_alignment": 10,
    "ai_depth": 5,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices, which are more focused on improving code quality rather than fostering innovation. While there are mentions of shifting left and automating processes, these concepts do not directly address the mechanisms or practices that enable innovation as defined in the category. The discussion lacks depth in exploring innovation metrics, learning cycles, or strategies for enhancing innovation capacity, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content briefly mentions Agile and Scrum, but primarily focuses on code reviews and quality assurance practices. While it touches on Agile principles, it does not provide a comprehensive exploration of Agile frameworks or their implementation, which is necessary for a higher confidence score.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to team collaboration by emphasising the importance of multiple perspectives in the development process. However, it primarily focuses on individual practices rather than team dynamics or collaboration techniques. While it mentions Agile and DevOps, the discussion lacks depth in exploring team communication, shared ownership, or fostering a culture of trust, which are key themes of the category.",
    "level": "Tertiary"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-12T02:12:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and the shift-left approach, without a clear focus on customer satisfaction or related metrics.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-02-12T02:12:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance and engineering practices, with a focus on shifting left in the development cycle, rather than Lean principles or waste minimisation.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on Cycle Time or its measurement.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 32,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, which aligns closely with the principles of clean code, test-driven development (TDD), and the importance of integrating testing and support into the engineering process. It highlights the need for engineering teams to take ownership of their code, including testing and maintenance, which is a core tenet of Agile practices. The discussion on pair programming and TDD further reinforces the focus on high-quality engineering practices. The depth of the discussion is significant, providing detailed insights into how these practices can enhance productivity and product quality, thus justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content clearly fits the category, as it delves into 'shift left' quality assurance, clean code, and TDDâ€”key aspects of modern engineering practices. By emphasising team ownership, integrated testing, and Agile principles, it demonstrates a strong alignment with high-quality software development methodologies, making the classification highly appropriate."
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T02:12:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, quality assurance, and team dynamics, with no clear focus on portfolio management or strategic alignment of projects.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 38,
    "ai_depth": 36,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, which is a critical aspect of modern software development practices. It elaborates on the importance of integrating testing and support into the development process, aligning closely with best practices in coding and software design. The discussion includes references to Agile methodologies, test-driven development, and the need for collaboration within engineering teams, all of which are core themes of the Software Development category. The depth of the discussion is significant, providing detailed insights into how these practices can lead to better software quality and efficiency, thus justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Software Development category, as it delves into 'shift left' quality assurance, emphasising early testing, Agile practices, and team collaboration. Its focus on integrating quality measures throughout the development lifecycle aligns closely with key software engineering principles, making the classification highly appropriate."
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, emphasising the importance of integrating quality practices early in the development cycle. It aligns well with the principles of software craftsmanship and quality assurance, highlighting best practices such as test-driven development and pair programming. The depth of discussion is significant, providing detailed insights into how these practices contribute to engineering excellence and the overall effectiveness of teams. The content also touches on the impact of these practices on productivity and the long-term benefits of addressing technical debt, which further solidifies its relevance to the category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it thoroughly explores 'shift left' in quality assurance, detailing how early integration of quality practices like test-driven development and pair programming supports software craftsmanship. It also highlights the positive effects on team productivity and technical debt, making it highly relevant to discussions on engineering excellence and quality assurance."
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:41:20",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance in software development, with a focus on improving code quality and reducing defects. While it touches on the importance of automation in the pull request process, it does not explicitly mention throughput as a delivery metric or provide any analysis or visualisation of throughput. The discussion is more aligned with quality practices rather than throughput metrics, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and agile methodologies without a specific focus on Azure Pipelines or its features.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to Agile practices but does not explicitly address Agile values or principles. While it mentions the importance of delivering value and improving processes, it lacks a direct focus on the core themes of Agile methodologies, such as customer collaboration or responding to change. The depth of discussion is moderate, primarily centred on technical practices rather than Agile philosophy.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 47.0,
    "ai_mentions": 30.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 47.0,
    "reasoning": "The content discusses the importance of automated checks in the code review process, which aligns with the principles of automated testing. However, the primary focus is on code reviews rather than automated testing itself, leading to a moderate confidence score. The mention of automation in the context of pull requests indicates some relevance, but it lacks depth in discussing specific automated testing methodologies or tools.",
    "level": "Tertiary"
  },
  "Site Reliability Engineering": {
    "resourceId": "s4h2K62V_d0",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-13T21:55:14",
    "ai_confidence": 26.97,
    "ai_mentions": 0.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.7,
    "ai_audience": 9.2,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on code reviews and automation to ensure quality software delivery, mentioning practices like pull requests and validated checks. While automation and reliability are briefly discussed, these themes are treated generically and not through an SRE lens. There are no direct references to SRE, its principles, or related practices such as monitoring, SLOs/SLIs, or operational reliability in production. The depth of discussion remains on generic code quality assurance rather than system reliability. The audience is technical but not specific to SRE practitioners. Most content is on topic for QA/code review, but not tightly aligned with the SRE category.",
    "reasoning_summary": "This content mainly discusses code review and automation for quality assurance, with little direct link to SRE. While elements like automation relate to reliability, the primary focus is not on SRE principles, so confidence for this category is low.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance, with no clear focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, rather than focusing on change management strategies or principles.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T02:13:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance techniques, with no clear focus on mentoring or coaching within Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to empirical process control through the lens of Agile practices. However, it lacks a direct focus on empirical process control principles such as transparency, inspection, and adaptation. While it mentions Agile and Scrum, the discussion primarily revolves around code review techniques rather than the core themes of empirical process control.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 50.0,
    "reasoning": "The content discusses methodologies related to quality assurance and engineering practices that indirectly support product validation through improved testing and user feedback integration. However, the primary focus is on engineering processes rather than direct product validation techniques.",
    "level": "Tertiary"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on Azure Boards or its functionalities in Agile project management.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-12T02:13:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without any focus on revenue per employee metrics or related financial efficiency discussions.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and the importance of integrating quality early in the development process, which aligns with the concept of shifting left. However, it does not explicitly mention Test First Development or its principles. The focus is more on code reviews rather than on defining success criteria or automated testing practices, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of quality assurance and engineering practices that can lead to more effective and frequent releases, particularly through the concept of 'shift left' and continuous delivery. However, the primary focus is on quality assurance and engineering practices rather than frequent releases themselves.",
    "level": "Tertiary"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T02:13:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses quality assurance practices and the concept of shifting left in software engineering, with no clear focus on estimation techniques or Agile estimation practices.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-02-12T02:13:22",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software development, rather than focusing on the identification and resolution of technical issues.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "s4h2K62V_d0",
    "category": "Increment",
    "calculated_at": "2025-05-13T21:55:10",
    "ai_confidence": 32.48,
    "ai_mentions": 1.7,
    "ai_alignment": 3.2,
    "ai_depth": 3.9,
    "ai_intent": 3.5,
    "ai_audience": 7.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content centers on code review practices for quality assurance, stressing automation and early defect detection in software delivery. While related to practices that improve increment quality in Agile, it does not explicitly discuss what an Increment is, its value, or its role in Scrum. References to Scrum and Agile are largely in hashtags; there is no direct exploration of Increment as defined in the category. The contentâ€™s main themes are only tangentially aligned; there is no thorough discussion of incrementally delivered working software, measuring value per iteration, or Scrum artifacts. Scores reflect minor overlaps but lack direct fit.",
    "reasoning_summary": "This piece discusses code review processes for higher software quality but doesn't directly address the Agile Increment or its key aspects. Itâ€™s tangentially relevant through its focus on quality in delivery, but lacks explicit connection to the Incrementâ€™s role in Scrum.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T02:13:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance, with no focus on the Windows operating system or its related topics.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "resourceId": "s4h2K62V_d0",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T21:55:15",
    "ai_confidence": 3.8,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.8,
    "ai_intent": 1.2,
    "ai_audience": 6.4,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content is focused exclusively on code review practices for quality assurance, emphasizing automation, pull requests, and early defect detection. There is no direct mention of Sprint Review or its concepts, processes, or stakeholder engagement. Although some tags reference 'scrum' and 'agile,' the core ideas do not align with Sprint Review as defined. The depth and intent remain low due to the lack of relevance, while the audience and signal scores are higher since practitioners might overlap and the content is well-focused, albeit off-topic. No penalties were applied as the content is not outdated and does not contradict the Sprint Review framework.",
    "reasoning_summary": "This content focuses on code review processes and quality assurance, which are unrelated to Sprint Review. It lacks relevant mentions or alignment, with only a faint connection through audience overlap. Overall, it does not fit the Sprint Review category.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-11T08:57:35",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance in software development, with a focus on improving code quality and reducing defects. While it touches on the importance of automating processes to avoid blockers, it does not explicitly mention Lead Time or its significance as an observability metric. The discussion lacks depth regarding Lead Time, its measurement, or strategies for optimisation, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which aligns with practical problem-solving strategies in Agile contexts. It mentions the importance of automated checks and the shift-left approach, indicating a pragmatic application of DevOps principles. However, while it touches on relevant themes, the discussion lacks depth in exploring broader Agile or Scrum frameworks and does not provide extensive real-world case studies or evidence-based practices.",
    "level": "Secondary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which indirectly relates to deployment frequency through the automation of pull requests. However, it does not explicitly focus on deployment frequency or provide detailed strategies for optimising deployment intervals, making it a secondary topic rather than a primary focus.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is tangentially related to Continuous Integration. However, it does not explicitly mention CI practices or tools, nor does it delve deeply into CI principles. The focus is more on code review processes rather than the integration of code changes into a shared repository, which is the primary focus of CI.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is more focused on technical practices rather than strategic alignment with Agile methodologies. While it mentions Agile principles and practices, it does not delve into how these practices integrate into broader organisational strategies or long-term success. The discussion lacks a clear focus on Agile strategy, making it a secondary topic rather than a primary one.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is tangentially related to Continuous Delivery principles. However, it primarily focuses on code review practices rather than the broader aspects of Continuous Delivery, such as automation in deployment or rapid feedback loops. While it mentions automation and reducing blockers in the delivery process, it lacks a comprehensive exploration of Continuous Delivery concepts, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of diverse skill sets within engineering teams and touches on collaboration practices like pair programming and test-driven development, which are relevant to cross-functional teams. However, the primary focus is on quality assurance and engineering practices rather than explicitly on cross-functional team dynamics.",
    "level": "Tertiary"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software engineering, without addressing the Definition of Ready or its criteria.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T02:13:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically quality assurance and the shift-left approach, without a clear focus on sensemaking or decision-making in complex environments.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical practices and methodologies in software engineering, with minimal focus on team dynamics or motivation.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to team performance by suggesting practices that can enhance collaboration and reduce defects. However, it lacks a direct focus on team dynamics, Agile ceremonies, or leadership roles, which are central to the 'Team Performance' category. The discussion is more about technical practices than team collaboration or performance metrics.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of shift left in quality assurance and engineering practices, without a clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies rather than working agreements or team collaboration norms.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which can relate to Lean principles of waste reduction and value maximisation. However, the primary focus is on Agile practices rather than Lean principles specifically. The mention of automating processes aligns with Lean's efficiency goals, but the overall discussion lacks depth in Lean concepts and does not explicitly address core Lean principles such as Muda or Kaizen.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses Agile practices and methodologies, particularly in the context of software engineering and quality assurance. However, it primarily focuses on the concept of 'shift left' and engineering excellence rather than a comprehensive discussion on Agile transformation strategies or frameworks.",
    "level": "Tertiary"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is tangentially related to technical debt but does not focus on it. While it mentions the importance of code quality and automated checks, it lacks a direct discussion on technical debt, its implications, or strategies for managing it. The depth of discussion is more about practices rather than the management of technical debt itself.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T02:14:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance, with no clear focus on Scrum Values.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and development methodologies, without a clear emphasis on organisational change strategies or frameworks.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is tangentially related to test automation. However, it does not explicitly focus on test automation principles, frameworks, or practices. While it mentions the importance of automated checks in the pull request process, the primary focus remains on code reviews rather than on the automation of testing itself. Therefore, the confidence score reflects a low alignment with the Test Automation category.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which aligns with operational practices in Agile and DevOps. However, while it touches on automation and the importance of validated checks, it lacks a comprehensive exploration of broader operational efficiency techniques or metrics. The focus is primarily on code quality rather than a wider operational strategy, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and quality assurance in software development, which are relevant to improving outcomes but does not explicitly mention Evidence-Based Management or its key topics. The focus is more on Agile practices and code quality rather than data-informed decision-making or empirical evidence.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T02:14:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content briefly mentions agile and scrum but primarily focuses on code reviews and quality assurance practices. It does not delve into the specific responsibilities or impact of a Scrum Master, nor does it discuss the role in fostering team dynamics or organisational change. The discussion is more aligned with software development practices than with the core themes of the Scrum Master role.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically focusing on quality assurance and the concept of 'shift left', without addressing large-scale Agile frameworks or enterprise-level Agile transformation.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T02:14:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on forecasting methodologies or practices within Agile and Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to technical leadership but does not explicitly address the core themes of guiding teams or fostering collaboration. While it mentions practices that could enhance team productivity, it lacks a focus on leadership strategies or agile methodologies in a broader context.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses quality assurance practices and engineering methodologies rather than focusing on identifying customer needs or defining product features.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T02:14:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on Lean Startup principles such as MVP, Build-Measure-Learn feedback loop, or validated learning.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance, with only brief mentions of Agile concepts. It lacks a focus on Agile Planning principles, techniques, or methodologies, and does not delve into planning processes or team dynamics related to Agile. The discussion is more aligned with software development practices rather than Agile Planning specifically.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses code reviews and quality assurance but does not explicitly address accountability or ownership within Agile teams. While it touches on practices that could indirectly relate to team dynamics, it lacks a clear focus on accountability as defined in the category. The discussion is primarily about code quality and automation rather than fostering a culture of accountability or the distinction between accountability and blame.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "Minimum Viable Product",
    "calculated_at": "2025-02-12T02:14:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses quality assurance practices and engineering methodologies, with no clear focus on Minimum Viable Product concepts or market validation.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with a focus on shifting left in the development cycle, rather than collaboration tools or their impact on Agile team dynamics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T02:14:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without addressing psychological safety or its implications in team dynamics.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T02:14:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software development, without a clear focus on deployment strategies or methodologies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses quality assurance practices and engineering techniques rather than focusing on Scrum Team dynamics, roles, or collaboration. It does not address Scrum-specific topics such as team roles, communication strategies, or self-organisation.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses code reviews as a method for improving code quality, which aligns with the principles of clean code and software craftsmanship. It mentions the importance of automated checks and practices that enhance code quality, indicating a focus on technical excellence. However, the discussion is somewhat general and lacks in-depth exploration of specific methodologies or frameworks, which affects the overall depth of the content.",
    "level": "Secondary"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-02-12T02:14:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with a focus on shifting quality left in the development cycle, rather than on release management strategies or processes.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is not directly related to Test Driven Development (TDD). While it touches on the importance of automated checks and quality practices, it does not explicitly mention TDD principles such as the Red-Green-Refactor cycle or the practice of writing tests before code. The discussion lacks depth in TDD-specific topics, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T02:14:43",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on identifying patterns or shifts in Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, with a focus on automation and practices rather than the broader Agile philosophy. While it briefly touches on Agile concepts, such as delivering value and the importance of collaboration, these are not the main focus. The discussion lacks depth regarding Agile principles and does not explicitly reference the Agile Manifesto or its core values.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content primarily discusses code reviews, which are a crucial aspect of modern source control practices. It explicitly mentions pull requests and the importance of automated checks, aligning well with the category's focus on collaboration workflows and code review processes. The depth of discussion on techniques and practices for code reviews adds to its relevance, although it does touch on broader agile concepts, which slightly detracts from its primary focus on source control.",
    "level": "Secondary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with no clear focus on Agile Planning Tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of shifting quality assurance left in the development process, focusing on engineering practices and team dynamics rather than specifically on Acceptance Test Driven Development or its principles.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a focus on asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T02:14:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and development methodologies, with no clear focus on market share strategies or competitive advantage.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T02:14:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering techniques rather than long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to continuous learning through feedback and knowledge sharing. However, it lacks a strong focus on the principles of a growth mindset or techniques for effective knowledge sharing, which are central to the Continuous Learning category. The discussion is more about practices in code quality assurance rather than fostering a culture of continuous improvement or learning.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T02:10:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without a focus on decision-making processes or the principles of decision theory.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-03-14T17:16:31",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance practices, which are more aligned with team-level agile practices rather than enterprise-level agility. While it mentions automation and practices that could contribute to efficiency, it lacks a broader discussion on organisational agility, frameworks, or cultural aspects that define Enterprise Agility.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-02-12T02:10:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, particularly Agile methodologies, and does not focus on Lean principles or waste reduction.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses concepts related to quality assurance, engineering practices, and team dynamics rather than installation or configuration of tools or software.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses concepts related to improving engineering practices and quality assurance, which indirectly touches on flow efficiency through the idea of shifting left and optimising processes. However, the primary focus is on quality assurance and engineering practices rather than directly on flow efficiency principles or metrics.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, which is a critical aspect of product delivery. It highlights the importance of integrating quality practices early in the development cycle, aligning with the category's focus on methodologies and practices for delivering usable software. The discussion on team responsibilities, agile practices, and the impact of testing and validation on product quality further supports its relevance to product delivery. However, while it covers many key topics, it does not delve deeply into deployment strategies or metrics for measuring delivery performance, which slightly lowers the depth score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the product delivery category, as it explores how early quality assurance practices enhance software outcomes. By focusing on team roles, agile methods, and the value of early testing, it aligns well with delivery methodologies. However, it doesnâ€™t cover deployment tactics or performance metrics in detail, which would have provided a more comprehensive view of product delivery."
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to Agile practices but does not focus on Agile Product Management specifically. While it mentions Agile and Scrum, the primary focus is on code quality rather than product management principles, making it a secondary topic rather than a primary discussion.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-12T02:11:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on Systems Thinking principles or interconnectedness within organisational dynamics.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and Agile practices, focusing on quality assurance and automation in software development. While it touches on themes relevant to Agile methodologies, it does not explicitly engage with complexity science or its principles. The discussion lacks depth in exploring non-linear dynamics, emergent behaviours, or the role of uncertainty in management, which are central to Complexity Thinking. Therefore, the confidence score reflects a minimal connection to the category.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses Agile practices and the importance of building quality into the development process, which relates to market adaptability. However, the primary focus is on quality assurance and engineering practices rather than directly addressing strategies for responding to market shifts.",
    "level": "Tertiary"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T02:11:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, which is closely related to Agile methodologies and practices. It references various Agile concepts and tools, making it not suitable for the Miscellaneous category.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 30,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of integrating quality early in the development process, which aligns with the DevOps principle of shifting left. It also emphasises automation in the code review process to reduce blockers, reflecting the DevOps focus on continuous value delivery and minimising delays. However, while it touches on relevant themes, the primary focus is on code reviews rather than a broader discussion of DevOps principles, which slightly limits its depth of discussion.",
    "level": "Secondary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 55.0,
    "ai_mentions": 60.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 55.0,
    "reasoning": "The content discusses code reviews and their importance in quality assurance, mentioning Azure DevOps specifically in the context of pull request systems. However, the primary focus is on code review practices rather than Azure DevOps functionalities or methodologies. While there is a relevant mention of Azure DevOps, the overall discussion does not deeply explore its services or best practices, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which indirectly relates to operational efficiency. However, it does not explicitly mention business agility or its principles. The focus is primarily on technical practices rather than the broader themes of business agility, such as organisational adaptability or leadership roles in fostering agility.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T02:11:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with no clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of 'shift left' in quality assurance, which aligns with the principles of iterative development and continuous delivery. It highlights the importance of integrating quality practices early in the development cycle and the role of cross-functional teams in supporting and maintaining the product. However, while it touches on value delivery, the primary focus is on technical practices and methodologies rather than explicitly discussing strategies for maximising customer value or aligning product development with customer needs.",
    "level": "Secondary",
    "reasoning_summary": "This content is mainly about implementing quality assurance early in the development process, emphasising technical methods and teamwork. While it briefly mentions delivering value, its core focus is on development practices rather than directly addressing how to maximise customer value or align with customer requirements. So, it fits best under technical methodologies rather than value-driven strategies."
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, emphasising the importance of integrating testing and support into the development process. It aligns closely with key topics of Technical Excellence, such as Test-Driven Development (TDD), Continuous Integration and Continuous Delivery (CI/CD), and the need for modular architecture. The depth of discussion is significant, providing detailed insights into how these practices enhance engineering quality and team effectiveness. The content also touches on the integration of Agile methodologies with technical practices, reinforcing its relevance to the category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Technical Excellence category, as it thoroughly explores 'shift left' practices in quality assurance. By highlighting TDD, CI/CD, modular architecture, and Agile integration, it demonstrates a clear focus on improving engineering quality and team performance through advanced technical methods."
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses modern software engineering practices, particularly the concept of 'shift left' in quality assurance, which indirectly relates to organisational agility by promoting adaptability and responsiveness in development processes. However, it primarily focuses on technical practices rather than the broader organisational strategies and cultural shifts that define agility. While there are mentions of agile practices and team dynamics, the depth of discussion does not fully explore the key topics outlined in the category, such as leadership roles or continuous improvement strategies.",
    "level": "Secondary",
    "reasoning_summary": "This content touches on agile principles through its focus on 'shift left' quality assurance, highlighting adaptability in development. However, it mainly addresses technical methods rather than the broader organisational strategies, leadership, or cultural changes central to true organisational agility. As such, it only partially fits the category, lacking depth in key areas like leadership and continuous improvement."
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T02:11:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical concepts and practices related to quality assurance and software engineering, without personal anecdotes or reflections.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, focusing on technical practices rather than the interplay between social and technical systems. While it touches on the importance of processes and tools like pull requests, it lacks a direct exploration of organisational culture, team dynamics, or the broader sociotechnical context. The discussion is more about technical implementation than the integration of social aspects within organisations.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to metrics and learning through the concept of validating code quality. However, it lacks explicit discussions on metrics, data analysis, or feedback loops, which are central to the category. The focus is more on practices rather than evidence-based decision-making or continuous improvement methodologies.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is a part of the development stage of the application lifecycle. However, it does not explicitly mention Application Lifecycle Management or cover the broader scope of the lifecycle stages, governance, or tools. The focus is primarily on code review practices rather than a comprehensive discussion of ALM principles.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, particularly around quality assurance and the concept of 'shift left', rather than focusing on Value Stream Management principles or techniques.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T02:11:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and Agile methodologies, without addressing psychological principles or theories related to motivation, engagement, leadership, or team dynamics.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on platform engineering or Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:02:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices in software engineering, focusing on concepts like 'shift left' and team dynamics within traditional frameworks, without a clear emphasis on BetaCodex principles.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses code reviews and quality assurance in software development, which are relevant to agile practices but do not specifically address the Agile Product Operating Model. While it mentions agile and product management, the primary focus is on code quality rather than the broader principles and frameworks of APOM. The depth of discussion on agile practices is present, but it lacks a direct connection to the core themes of the Agile Product Operating Model.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:49:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices and methodologies in software engineering, specifically around quality assurance and development processes, without a clear focus on leadership principles or practices.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and quality assurance in software development, which are primarily technical practices rather than social technologies. While there are mentions of collaboration through code reviews, the focus is more on technical processes and automation rather than on fostering collaboration, decision-making, or value delivery within teams. The discussion lacks depth in exploring the social frameworks or methodologies that underpin effective collaboration and decision-making, which are central to the category of Social Technologies.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-02-24T13:33:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software development, without a clear focus on Internal Developer Platforms or their specific benefits and components.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:33:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, quality assurance, and Agile methodologies without any mention of Artificial Intelligence.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with only a brief mention of agile practices. While it touches on team dynamics and the importance of collaboration, it does not explicitly address Scrum roles, events, or artifacts. The discussion lacks depth in Scrum-specific principles and does not focus on the Scrum framework, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift Left Strategy",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of shifting left in the context of code reviews, indicating an understanding of integrating quality assurance earlier in the development process. However, while it mentions the shift-left concept, the primary focus is on code reviews rather than a comprehensive exploration of the Shift-Left Strategy. The discussion lacks depth in terms of techniques and methodologies specific to Shift-Left practices, which affects the overall confidence score.",
    "level": "Secondary"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which aligns with the principles of Continuous Improvement. However, it primarily focuses on specific practices rather than a broader discussion of Continuous Improvement as a strategic approach. The mention of shifting left and automating processes indicates some alignment with Continuous Improvement, but the depth of discussion is limited to code reviews without exploring wider implications or strategies for organisational processes.",
    "level": "Secondary"
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance in software development, which are important practices but do not directly address the concept of Common Goals within Agile and DevOps. While there are mentions of improving code quality and reducing technical debt, these topics are more focused on technical practices rather than the alignment of strategy and execution or shared objectives that guide decision-making. The discussion lacks depth in connecting these practices to overarching strategic goals or frameworks like OKRs, which are central to the Common Goals category.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 20,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of code reviews and automated checks in ensuring quality, which aligns with the concept of competence in maintaining quality outcomes. However, while it touches on continuous improvement and quality assurance, it does not delve deeply into the broader themes of competence such as continuous learning or skill development. The focus is more on processes rather than the development of individual or team capabilities.",
    "level": "Secondary"
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-10T13:40:38",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and quality assurance practices, which are relevant to software development but do not explicitly mention the One Engineering System (1ES) framework. While it touches on integration and automation in the context of code reviews, it lacks a direct focus on the principles, components, or implementation of 1ES. The discussion is more centred on agile methodologies and personal opinions rather than the standardisation and integration of engineering processes as outlined in the 1ES category.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-08T15:39:47",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance in software development, focusing on practices like shifting left and automation. While it touches on improving processes, it does not explicitly address Agentic Agility or its key themes such as intentional shaping of outcomes, the distinction between human and AI capabilities, or the role of accountability and reflection. The discussion lacks depth and does not engage with the core principles of Agentic Agility.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:40:41",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 25,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses code reviews and their role in ensuring quality assurance within the software development process, which aligns with product development principles. It mentions the importance of integrating quality early in the development cycle and automating checks, which reflects iterative and incremental development practices. However, the focus is more on technical implementation rather than broader product development methodologies, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T17:04:59",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing technical debt, which indirectly relates to Time to Market by suggesting that better quality can lead to faster delivery. However, it does not explicitly mention Time to Market or provide metrics or strategies for improving it. The focus is more on quality assurance rather than the speed of delivering value, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:40:48",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews and quality assurance in software development, which are relevant to project management, particularly in agile contexts. However, the primary focus is on technical practices rather than broader project management principles or methodologies. While it mentions project management and includes relevant hashtags, the depth of discussion on project management concepts is limited, leading to a moderate confidence score.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T17:05:16",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, discussing practices to improve code quality and reduce defects. While it touches on the importance of automation and efficiency in the development process, it does not explicitly mention or explore the concept of Unrealised Value or its indicators, strategies, or case studies. The discussion is more aligned with operational practices rather than identifying untapped opportunities or potential improvements, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:40:54",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, with no explicit discussion of Hybrid Agile concepts. While it mentions agile practices, it does not critically examine the integration of traditional and agile methodologies or the challenges associated with Hybrid Agile. The discussion lacks depth and does not align with the core themes of the category.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T17:05:19",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content discusses code reviews and quality assurance in software development, which are important for improving product quality. However, it does not explicitly mention Current Value or its metrics, nor does it provide a direct assessment of value delivered. The focus is more on practices and techniques rather than on measuring or evaluating Current Value in the context of Evidence-Based Management. While there is some conceptual alignment regarding the importance of quality in delivering value, the depth of discussion does not sufficiently address the key topics outlined for Current Value.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:41:01",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, which does not directly address scaling methodologies or frameworks. While it mentions practices that could contribute to quality in a team setting, it lacks explicit discussions on scaling Agile practices, cross-team collaboration, or managing dependencies, which are central to the Scaling category.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-10T13:41:10",
    "ai_confidence": 68.0,
    "ai_mentions": 60.0,
    "ai_alignment": 70.0,
    "ai_depth": 70.0,
    "non_ai_confidence": 50,
    "final_score": 68.0,
    "reasoning": "The content discusses code reviews and their importance in maintaining code quality, specifically mentioning GitHub's pull request system. This aligns well with GitHub's functionalities, particularly in the context of collaboration and version control. However, while GitHub is a significant part of the discussion, the content also touches on broader Agile concepts and practices, which slightly dilutes the focus on GitHub itself. The depth of discussion is substantial, providing insights into practices and techniques related to code reviews, but it does not delve deeply into GitHub's specific features beyond pull requests.",
    "level": "Secondary"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T17:05:02",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, with only a brief mention of agile practices. It does not explicitly discuss Agnostic Agile principles or provide a comparative analysis with traditional frameworks. The discussion lacks depth regarding the core themes of Agnostic Agile, such as ethical considerations or the importance of context-driven agility. Overall, the content does not align well with the category.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T17:05:08",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, discussing practices and techniques for improving code quality. It does not explicitly mention the concept of 'Company as a Product' or relate to organisational strategies, customer insights, or cross-functional collaboration. While there are elements of continuous improvement and automation, these are not tied to the broader themes of CaaP, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T17:05:13",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, with no direct mention of Cell Structure Design or its principles. While it discusses aspects of agile methodologies, it does not align with the core themes of decentralised organisational structures or the Beta Codex. The depth of discussion is also limited to practices around code quality rather than organisational design.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "s4h2K62V_d0",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-13T21:55:09",
    "ai_confidence": 2.1,
    "ai_mentions": 0.0,
    "ai_alignment": 1.0,
    "ai_depth": 0.5,
    "ai_intent": 2.0,
    "ai_audience": 5.1,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "There is no mention of Liberating Structures, nor is there any discussion of facilitation methods or practices relevant to the category. The content is entirely focused on code review processes, automation, and pull requests for software quality assurance. While there are Agile tags present, these do not reference Liberating Structures or any related facilitation techniques. There is no conceptual alignment or depth with regard to Liberating Structures, and the audience, while potentially overlapping, is not directly targeted toward practitioners seeking facilitation structures. Thus, the confidence that this content fits the category is extremely low.",
    "reasoning_summary": "This content is wholly about code review and automation for quality assurance, with zero reference or relevance to Liberating Structures facilitation methods. It does not align in topic, intent, or signal, resulting in a very low confidence score for this category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T17:05:22",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance in software development, with no direct mention of Open Space Agile principles or practices. While it touches on Agile concepts, it does not align with the core themes of Open Space Agile, such as collective participation or psychological safety. The depth of discussion is limited to code review techniques, lacking any exploration of co-creation or shared ownership in Agile transformations.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "s4h2K62V_d0",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:06:26",
    "ai_confidence": 42.0,
    "ai_mentions": 10.0,
    "ai_alignment": 30.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 42.0,
    "reasoning": "The content discusses principles of quality assurance in software development, particularly the concept of shifting left and reducing technical debt, which resonates with themes of Continuous Improvement and Value Delivery. However, it focuses more on techniques and practices rather than articulating distinct, actionable principles. The content briefly mentions relevant principles and aligns conceptually, but the depth of discussion primarily revolves around methods rather than guiding principles.",
    "level": "Tertiary"
  },
  "Tool": {
    "resourceId": "s4h2K62V_d0",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:06:26",
    "ai_confidence": 53.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 40,
    "non_ai_confidence": null,
    "final_score": 53.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance but primarily focuses on methodologies rather than specific tools themselves. While it mentions tools like GitHub and Azure DevOps in passing, they are not the primary focus of the discussion. The alignment with the category exists due to the inclusion of tools in the context of improving processes, but the depth is more centered on practices rather than a comprehensive analysis of those tools. Thus, while there is a connection to the concept of tools used in software development, the primary focus is not strictly on those tools as defined in the 'Tool' category guidelines.",
    "level": "Tertiary"
  },
  "Philosophy": {
    "resourceId": "s4h2K62V_d0",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:06:26",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses specific practices related to code reviews and quality assurance in software development, without engaging in a philosophical discussion about the foundational beliefs that guide these practices. While there is a brief mention of shifting left, it does not delve into the underlying 'why' or the broader implications for organizational culture or decision-making, which are key aspects of the Philosophy category. Thus, it does not meet the criteria for a confident alignment with Philosophy.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "s4h2K62V_d0",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:06:26",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 30.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content discusses code reviews primarily as a technique for quality assurance in software development. While it mentions concepts related to Agile methodologies with references to shifting left and automated checks, it lacks a robust exploration of the principles and systemic nature of discipline as defined in the category. The focus remains on specific practices rather than a thorough discussion of disciplines or their characteristics, leading to a lower confidence score in alignment with the category of Discipline.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "s4h2K62V_d0",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:06:26",
    "ai_confidence": 15.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 5.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content largely addresses the process of code reviews within software development and emphasizes quality assurance practices, but does not focus on artifacts as formal representations of work in Agile or related frameworks. While it mentions practices and the role of quality checks, it does not explicitly discuss tangible artifacts like Product Backlogs or Sprint Backlogs. The mention of systems like GitHub and Azure DevOps relates to tool usage rather than the nature or management of artifacts, leading to a very low relevance to the category 'Artifact'.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "s4h2K62V_d0",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 15.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content focuses on code reviews as a technique for quality assurance and emphasizes practices around pre-reviewing code to reduce defects and improve quality. While it touches on practices that can contribute to a quality software development process, it does not explicitly address observability or its related concepts such as metrics, logs, traces, or tools for understanding internal system states. The discussion is primarily about code quality and automation in the development process, which falls outside the strict definition of observability, contributing to a low confidence score.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "s4h2K62V_d0",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 68.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses code reviews, which align with actionable techniques for improving code quality and development practices. While it mentions various techniques and methodologies related to code reviews, the focus is primarily on the integration of quality assurance rather than on specific practices like pair programming or continuous deployment. The depth of discussion presents valuable insights into practices that enhance team performance, but lacks detailed exploration of how these practices can be consistently applied in teams, hence the slightly lower score for depth. Overall, it maintains a strong relevance to the category of Practice, especially through its focus on actionable techniques and quality integration.",
    "level": "Secondary"
  },
  "Method": {
    "resourceId": "s4h2K62V_d0",
    "category": "Method",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 60.0,
    "ai_mentions": 2,
    "ai_alignment": 50.0,
    "ai_depth": 70.0,
    "non_ai_confidence": null,
    "final_score": 60.0,
    "reasoning": "The content discusses code reviews and automated processes aimed at improving code quality and reducing technical debt, which aligns with structured practices in software development. However, it lacks depth in outlining specific methodologies or step-by-step procedures, and primarily focuses on broader principles rather than being a detailed exposition of a particular method like Scrum or Kanban.",
    "level": "Tertiary"
  },
  "Model": {
    "resourceId": "s4h2K62V_d0",
    "category": "Model",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 20.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content discusses code reviews and quality assurance practices but does not focus on conceptual models or frameworks relevant to the Model category. While it touches on Agile practices, there are no direct mentions of models or frameworks like the Cynefin Framework or Lean Startup principles. The content primarily addresses practical techniques without aligning with the key topics expected under the Model category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "s4h2K62V_d0",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 35.0,
    "ai_mentions": 5,
    "ai_alignment": 3,
    "ai_depth": 2,
    "non_ai_confidence": null,
    "final_score": 35.0,
    "reasoning": "The content touches on quality assurance in the context of code reviews and mentions Agile principles. However, it primarily focuses on the practices surrounding code reviews and automation rather than discussing specific Agile frameworks or structured methodologies in detail. While Scrum is briefly referenced, the core discussion revolves around practices rather than comprehensive framework implementation or adaptation, resulting in a lower confidence score.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "s4h2K62V_d0",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 56.0,
    "ai_mentions": 10,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": null,
    "final_score": 56.0,
    "reasoning": "The content discusses the practice of code reviews and the concept of 'shifting left', which align with the quality assurance tenet in Agile. It mentions the importance of automated checks and processes, which is a part of Agile and DevOps practices. However, it does not explicitly articulate any specific tenets or actionable guiding rules beyond general practices for improving code quality. The discussion lacks depth compared to the core tenets as it focuses more on techniques rather than the actionable doctrines that guide Agile methodologies.",
    "level": "Tertiary"
  },
  "Capability": {
    "resourceId": "s4h2K62V_d0",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:06:27",
    "ai_confidence": 25.0,
    "ai_mentions": 3,
    "ai_alignment": 20.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 25.0,
    "reasoning": "The content discusses code reviews as a technique that can improve code quality and reduce defects, but it primarily focuses on the mechanics of code reviews rather than on the enduring competencies or capabilities that organizations can develop over time. The mention of automations and practices could relate to capabilities, but it lacks depth in discussing how these contribute to organizational capabilities, sustainability, or adaptability in a systemic way. The content is more focused on tools and practices rather than the broader implications of building capabilities.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "s4h2K62V_d0",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:41",
    "ai_confidence": 3.51,
    "ai_mentions": 0.0,
    "ai_alignment": 2.0,
    "ai_depth": 2.4,
    "ai_intent": 3.0,
    "ai_audience": 8.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content is focused entirely on code review practices as a means of improving quality assurance in software development and the merits of automation in the review process. At no point is Service Level Expectation (SLE) mentioned, referred to, or implied either directly or indirectly. There are no discussions of cycle time, probability-based delivery forecasts, or the Kanban- and Scrum-oriented SLE concepts as described in the category definition. The mention of Agile and Scrum hashtags is generic and does not connect to SLE or its purpose, calculation, or application. The audience is generally aligned (Agile practitioners), but the content lacks substantial alignment, depth, or relevance to SLE. No penalties applied, as the content is not outdated or critical in tone. The confidence score is extremely low, reflecting that there is almost no evidence present to justify classifying this under Service Level Expectation.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "s4h2K62V_d0",
    "category": "Ethos",
    "calculated_at": "2025-05-13T21:55:14",
    "ai_confidence": 24.05,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 3.0,
    "ai_intent": 3.2,
    "ai_audience": 6.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on code review practices for quality assurance, specifically discussing automation and early defect detection. While it aligns with Agile and DevOps practices and refers to pull requests, it does not explicitly discuss foundational beliefs, system-level convictions, or the core ethos underpinning these practices. The discussion stays at the practical and tactical level, not addressing the deeper system behaviors, leadership stances, or ethos-based systemic resilience required by this category. The target audience (developers, project managers) is appropriate, and the content is relevant to their work, but the content does not demonstrate the requisite depth or conceptual focus to fit squarely under 'Ethos.'",
    "reasoning_summary": "This content explores code review practices and automation for quality assurance in Agile/DevOps, but stays practical without examining underlying beliefs or ethos. It's audience-appropriate and focused, but lacks conceptual depth or ethos discussion, resulting in low category confidence.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "s4h2K62V_d0",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T21:55:11",
    "ai_confidence": 31.628,
    "ai_mentions": 1.5,
    "ai_alignment": 3.7,
    "ai_depth": 3.2,
    "ai_intent": 3.5,
    "ai_audience": 7.9,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content centers exclusively on code review practices, automation, and defect reduction to ensure code quality and reliable delivery. While these are important for product development, the discussion does not define, measure, or anchor these practices in real customer needs, outcomes, or value. There are no direct or frequent references to customer focus or value delivered from the customerâ€™s point of view. The alignment, depth, and intent are technical and process-oriented, with only tangential relevance to the customer-centric objectives outlined in the classification definition.",
    "reasoning_summary": "This content offers practical advice on code review for quality, but it lacks explicit focus on customer outcomes or value. Its emphasis is on internal process and quality metrics, making the fit for 'Customer Focus' weak and mostly incidental.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "s4h2K62V_d0",
    "category": "First Principal",
    "calculated_at": "2025-05-13T21:55:09",
    "ai_confidence": 19.46,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.6,
    "ai_intent": 2.1,
    "ai_audience": 6.3,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on best practices and advisory opinions about code review automation for quality assurance, not on identifying or explaining immutable first principles in Lean, Agile, Scrum, or DevOps. It discusses techniques, practices, and process optimisations, but never grounds these in foundational, irreducible constraints or references theorists' core principles. No penalties apply as it is timely and not satirical.",
    "reasoning_summary": "This content centers on code review and automation practices, not on foundational, immutable principles. It gives practical advice and recommendations, but does not directly address or explain first principles in Lean-Agile contexts. Confidence for the 'First Principal' category is very low.",
    "level": "Ignored"
  }
}