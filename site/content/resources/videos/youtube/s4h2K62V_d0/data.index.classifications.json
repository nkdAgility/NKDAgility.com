{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-03-14T17:17:09",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 11.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices without any explicit mention of hypothesis formulation, experimentation, or validated learning. While it touches on Agile methodologies, it does not align with the core themes of hypothesis-driven development, such as testing hypotheses or using data to inform decisions.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-03-10T17:50:19",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the concept of 'shifting left' in quality assurance and touches on the importance of testing and validation within Agile practices. It mentions experimentation in the context of validating features and user feedback, particularly through the lens of continuous delivery and iterative development. However, while it references experimentation, it does not delve deeply into hypothesis-driven methodologies or specific techniques like A/B testing. The primary focus is more on quality assurance and engineering practices rather than a systematic exploration of experimentation itself.",
    "level": "Secondary"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T02:11:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically quality assurance and agile methodologies, without a clear focus on entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-02-12T02:11:57",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on the Product Backlog or its management.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T02:11:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on Scrum principles, roles, or events.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the dynamics of engineering teams and their practices, touching on systems thinking principles such as the shift left approach and the interplay between team roles and organisational effectiveness. However, the primary focus is on software engineering practices rather than a comprehensive exploration of organisational dynamics.",
    "level": "Tertiary"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T02:12:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and the shift-left approach, with minimal focus on coaching or facilitation of growth and development within teams.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T02:12:03",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on evidence-based leadership principles or empirical decision-making in leadership contexts.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T02:12:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance, with no focus on employee engagement or related themes.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content primarily focuses on software engineering practices, particularly around quality assurance and Agile methodologies, rather than the strategic aspects of product management. While it touches on concepts like team dynamics and the importance of building quality into products, it lacks a direct discussion on product management frameworks, customer feedback prioritisation, or alignment with business strategy, which are core to the category. The depth of discussion on engineering practices is significant, but it does not sufficiently address the strategic alignment of product management.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T02:12:08",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical practices and concepts related to quality assurance and software engineering, without a clear focus on leadership roles or practices within Agile contexts.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T02:12:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance and engineering practices, with no clear focus on Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-02-12T02:12:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and agile methodologies, with no clear focus on system configuration or related topics.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-03-14T17:16:49",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 22.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices within software development, focusing on techniques and methodologies rather than the strategic adoption of digital technologies for business transformation. While there are mentions of automation and improving processes, these are not explicitly tied to broader themes of digital transformation, such as business agility or organisational culture. The discussion lacks depth in relation to the key topics outlined for the Digital Transformation category.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-03-11T00:17:42",
    "ai_confidence": 87.0,
    "ai_mentions": 15.0,
    "ai_alignment": 40.0,
    "ai_depth": 32.0,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content discusses the importance of quality assurance and engineering practices in software development, particularly the concept of 'shift left' which aligns with the principles of working software. It highlights the need for teams to take ownership of their code and support it in production, which is crucial for delivering functional software. The depth of discussion on practices like test-driven development and pair programming indicates a strong focus on ensuring software quality and functionality. However, while it touches on key aspects of working software, it does not explicitly define or categorise working software within Agile or Scrum frameworks, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-03-14T17:17:18",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to decision-making in the context of software development. However, it lacks explicit discussions on structured decision-making methodologies, evidence-based practices, or collaborative decision-making techniques. The focus is more on practices rather than the decision-making process itself.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 22.0,
    "reasoning": "The content discusses code reviews and automation in the context of Agile practices, but it does not explicitly address self-organisation principles or techniques. While it touches on aspects of team collaboration and quality assurance, it lacks a direct focus on self-organisation as a primary theme. The depth of discussion is moderate, primarily centred on code review processes rather than fostering autonomy or team empowerment.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-12T02:12:20",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance, with no clear focus on remote working or Agile collaboration in a distributed environment.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-03-14T17:16:59",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 22.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is more aligned with Agile practices than Lean Product Development. While there are mentions of improving processes and reducing blockers, the focus is not on Lean principles such as waste reduction or customer feedback integration. The discussion lacks depth in Lean concepts and does not provide substantial insights into Lean methodologies.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T02:12:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices and tools related to quality assurance and software engineering, without a clear focus on organisational culture or its influence on agility and transformation.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-03-14T17:17:30",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 11.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices, with no direct mention of customer feedback loops or their integration into product development. While it touches on improving code quality, it does not explore mechanisms for collecting or acting on customer feedback, which is essential for this category.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-02-12T02:12:27",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the concept of shifting left in quality assurance and modern software engineering practices, with no direct focus on Azure Repos or its functionalities.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T02:12:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance and engineering practices, with no clear focus on transparency or its role in Agile processes.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-02-12T02:12:30",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software engineering, without a clear focus on the Definition of Done.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-02-12T02:12:32",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses engineering practices, quality assurance, and technical implementation details rather than product strategy, vision, or market analysis.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-12T02:12:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and development methodologies without a clear focus on customer retention strategies or user engagement.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-12T02:12:35",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and the concept of 'shift left', without any focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to Agile practices. However, it lacks a direct focus on strategic alignment or the development of strategic approaches within Agile, Scrum, or DevOps frameworks. While it mentions Agile and DevOps tools, the primary discussion revolves around code quality rather than strategic planning or execution, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-03-14T17:16:29",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 24.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance practices, which are not directly related to the Ability to Innovate category. While there are mentions of improving processes and reducing blockers, the focus is on operational efficiency rather than on measuring or enhancing innovation capabilities. The discussion lacks depth in terms of frameworks, metrics, or Evidence-Based Management principles that are central to the category.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-03-14T17:16:24",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content briefly mentions Agile and Scrum, but primarily focuses on code reviews and quality assurance practices. While it touches on Agile principles, it does not provide a comprehensive exploration of Agile frameworks or their implementation, which is necessary for a higher confidence score.",
    "level": "Ignored"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "calculated_at": "2025-02-12T02:12:43",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering techniques, with a focus on team-level activities rather than organisational scaling of agile principles.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-03-14T17:17:07",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 38.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to team collaboration by emphasising the importance of multiple perspectives in the development process. However, it primarily focuses on individual practices rather than team dynamics or collaboration techniques. While it mentions Agile and DevOps, the discussion lacks depth in exploring team communication, shared ownership, or fostering a culture of trust, which are key themes of the category.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-12T02:12:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and the shift-left approach, without a clear focus on customer satisfaction or related metrics.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-02-12T02:12:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance and engineering practices, with a focus on shifting left in the development cycle, rather than Lean principles or waste minimisation.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-02-12T02:12:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on Cycle Time or its measurement.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-03-11T09:49:15",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 32,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, which aligns closely with the principles of clean code, test-driven development (TDD), and the importance of integrating testing and support into the engineering process. It highlights the need for engineering teams to take ownership of their code, including testing and maintenance, which is a core tenet of Agile practices. The discussion on pair programming and TDD further reinforces the focus on high-quality engineering practices. The depth of the discussion is significant, providing detailed insights into how these practices can enhance productivity and product quality, thus justifying a high confidence score.",
    "level": "Secondary"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T02:12:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, quality assurance, and team dynamics, with no clear focus on portfolio management or strategic alignment of projects.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-03-11T11:12:50",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 38,
    "ai_depth": 36,
    "non_ai_confidence": 20,
    "final_score": 85.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, which is a critical aspect of modern software development practices. It elaborates on the importance of integrating testing and support into the development process, aligning closely with best practices in coding and software design. The discussion includes references to Agile methodologies, test-driven development, and the need for collaboration within engineering teams, all of which are core themes of the Software Development category. The depth of the discussion is significant, providing detailed insights into how these practices can lead to better software quality and efficiency, thus justifying a high confidence score.",
    "level": "Primary"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-03-06T14:42:19",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 85.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, emphasising the importance of integrating quality practices early in the development cycle. It aligns well with the principles of software craftsmanship and quality assurance, highlighting best practices such as test-driven development and pair programming. The depth of discussion is significant, providing detailed insights into how these practices contribute to engineering excellence and the overall effectiveness of teams. The content also touches on the impact of these practices on productivity and the long-term benefits of addressing technical debt, which further solidifies its relevance to the category.",
    "level": "Primary"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-02-12T02:12:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software engineering, rather than focusing on the measurement and optimisation of throughput.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-02-12T02:12:58",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and agile methodologies without a specific focus on Azure Pipelines or its features.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-03-14T17:17:25",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to Agile practices but does not explicitly address Agile values or principles. While it mentions the importance of delivering value and improving processes, it lacks a direct focus on the core themes of Agile methodologies, such as customer collaboration or responding to change. The depth of discussion is moderate, primarily centred on technical practices rather than Agile philosophy.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-03-14T15:07:16",
    "ai_confidence": 47.0,
    "ai_mentions": 30.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 43.0,
    "reasoning": "The content discusses the importance of automated checks in the code review process, which aligns with the principles of automated testing. However, the primary focus is on code reviews rather than automated testing itself, leading to a moderate confidence score. The mention of automation in the context of pull requests indicates some relevance, but it lacks depth in discussing specific automated testing methodologies or tools.",
    "level": "Tertiary"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-02-12T02:13:02",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses quality assurance and software engineering practices, with a focus on shifting left in the development cycle, rather than Site Reliability Engineering principles or practices.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-02-12T02:13:04",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance, with no clear focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-02-12T02:13:05",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, rather than focusing on change management strategies or principles.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T02:13:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance techniques, with no clear focus on mentoring or coaching within Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-03-14T17:17:23",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to empirical process control through the lens of Agile practices. However, it lacks a direct focus on empirical process control principles such as transparency, inspection, and adaptation. While it mentions Agile and Scrum, the discussion primarily revolves around code review techniques rather than the core themes of empirical process control.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses methodologies related to quality assurance and engineering practices that indirectly support product validation through improved testing and user feedback integration. However, the primary focus is on engineering processes rather than direct product validation techniques.",
    "level": "Tertiary"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-02-12T02:13:11",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on Azure Boards or its functionalities in Agile project management.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-12T02:13:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without any focus on revenue per employee metrics or related financial efficiency discussions.",
    "level": "Ignored"
  },
  "Software Developers": {
    "category": "Software Developers",
    "calculated_at": "2025-03-11T13:07:19",
    "ai_confidence": 87.0,
    "ai_mentions": 90.0,
    "ai_alignment": 85.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content extensively discusses modern software engineering practices, particularly focusing on the concept of 'shift left' in quality assurance, which is a critical aspect of Agile and DevOps methodologies. It highlights the importance of developers being involved in testing and support, aligning well with the role of software developers in Agile contexts. The discussion includes specific practices like Test-Driven Development (TDD) and pair programming, which are integral to modern engineering practices. The depth of the content is significant, providing detailed insights into how these practices enhance productivity and quality in software delivery, thus strongly aligning with the category's focus.",
    "level": "Secondary"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance but does not explicitly mention Test First Development or its principles. While it touches on the importance of automated checks and quality processes, it lacks a direct focus on writing tests before code, which is central to Test First Development. The discussion is more about code review practices rather than the TDD methodology itself.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of quality assurance and engineering practices that can lead to more effective and frequent releases, particularly through the concept of 'shift left' and continuous delivery. However, the primary focus is on quality assurance and engineering practices rather than frequent releases themselves.",
    "level": "Tertiary"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T02:13:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses quality assurance practices and the concept of shifting left in software engineering, with no clear focus on estimation techniques or Agile estimation practices.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-02-12T02:13:22",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software development, rather than focusing on the identification and resolution of technical issues.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-02-12T02:13:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering techniques rather than the delivery of software increments in Agile frameworks.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T02:13:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance, with no focus on the Windows operating system or its related topics.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-02-12T02:13:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering processes, with no clear focus on Sprint Review or its related topics.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-02-12T02:13:27",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software engineering, without a clear focus on Lead Time as defined in the category.",
    "level": "Ignored"
  },
  "Scaled Agile": {
    "category": "Scaled Agile",
    "calculated_at": "2025-02-12T02:13:29",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies without a clear focus on scaling Agile across multiple teams or enterprise-level initiatives.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-03-11T16:06:31",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which aligns with practical problem-solving strategies in Agile contexts. It mentions the importance of automated checks and the shift-left approach, indicating a pragmatic application of DevOps principles. However, while it touches on relevant themes, the discussion lacks depth in exploring broader Agile or Scrum frameworks and does not provide extensive real-world case studies or evidence-based practices.",
    "level": "Secondary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-03-14T17:17:04",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which indirectly relates to deployment frequency through the automation of pull requests. However, it does not explicitly focus on deployment frequency or provide detailed strategies for optimising deployment intervals, making it a secondary topic rather than a primary focus.",
    "level": "Ignored"
  },
  "Agile Project Management": {
    "category": "Agile Project Management",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses agile practices and their impact on software engineering, particularly in relation to quality assurance and team dynamics. However, it primarily focuses on the concept of 'shift left' in quality assurance rather than a comprehensive exploration of agile project management principles or frameworks.",
    "level": "Tertiary"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-03-14T17:16:26",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is tangentially related to Continuous Integration. However, it does not explicitly mention CI practices or tools, nor does it delve deeply into CI principles. The focus is more on code review processes rather than the integration of code changes into a shared repository, which is the primary focus of CI.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-03-14T17:16:54",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is more focused on technical practices rather than strategic alignment with Agile methodologies. While it mentions Agile principles and practices, it does not delve into how these practices integrate into broader organisational strategies or long-term success. The discussion lacks a clear focus on Agile strategy, making it a secondary topic rather than a primary one.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses the concept of 'shift left' in quality assurance and its implications for engineering teams, which relates to Continuous Delivery principles. However, the primary focus is on quality assurance practices rather than Continuous Delivery itself, making it a secondary theme.",
    "level": "Tertiary"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of diverse skill sets within engineering teams and touches on collaboration practices like pair programming and test-driven development, which are relevant to cross-functional teams. However, the primary focus is on quality assurance and engineering practices rather than explicitly on cross-functional team dynamics.",
    "level": "Tertiary"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-02-12T02:13:43",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software engineering, without addressing the Definition of Ready or its criteria.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T02:13:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically quality assurance and the shift-left approach, without a clear focus on sensemaking or decision-making in complex environments.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-02-12T02:13:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses technical practices and methodologies in software engineering, with minimal focus on team dynamics or motivation.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-03-14T17:16:42",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to team performance by suggesting practices that can enhance collaboration and reduce defects. However, it lacks a direct focus on team dynamics, Agile ceremonies, or leadership roles, which are central to the 'Team Performance' category. The discussion is more about technical practices than team collaboration or performance metrics.",
    "level": "Ignored"
  },
  "AI": {
    "category": "AI",
    "calculated_at": "2025-02-12T02:13:48",
    "ai_confidence": 0,
    "non_ai_confidence": 30,
    "final_score": 3.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically focusing on quality assurance and Agile methodologies, without any mention or integration of AI.",
    "level": "Ignored"
  },
  "Scaling Kanban": {
    "category": "Scaling Kanban",
    "calculated_at": "2025-02-12T02:13:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses shift left in quality assurance and modern engineering practices, with no clear focus on Kanban principles or scaling Kanban in large organisations.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T02:13:50",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the concept of shift left in quality assurance and engineering practices, without a clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-12T02:13:52",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies rather than working agreements or team collaboration norms.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-03-14T17:17:20",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which can relate to Lean principles of waste reduction and value maximisation. However, the primary focus is on Agile practices rather than Lean principles specifically. The mention of automating processes aligns with Lean's efficiency goals, but the overall discussion lacks depth in Lean concepts and does not explicitly address core Lean principles such as Muda or Kaizen.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses Agile practices and methodologies, particularly in the context of software engineering and quality assurance. However, it primarily focuses on the concept of 'shift left' and engineering excellence rather than a comprehensive discussion on Agile transformation strategies or frameworks.",
    "level": "Tertiary"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-03-14T17:17:02",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 22.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is tangentially related to technical debt but does not focus on it. While it mentions the importance of code quality and automated checks, it lacks a direct discussion on technical debt, its implications, or strategies for managing it. The depth of discussion is more about practices rather than the management of technical debt itself.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T02:14:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance, with no clear focus on Scrum Values.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-02-12T02:14:04",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and development methodologies, without a clear emphasis on organisational change strategies or frameworks.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-03-14T17:16:52",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is tangentially related to test automation. However, it does not explicitly focus on test automation principles, frameworks, or practices. While it mentions the importance of automated checks in the pull request process, the primary focus remains on code reviews rather than on the automation of testing itself. Therefore, the confidence score reflects a low alignment with the Test Automation category.",
    "level": "Ignored"
  },
  "Scrum Product Development": {
    "category": "Scrum Product Development",
    "calculated_at": "2025-02-12T02:14:07",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "The content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on Scrum principles, roles, or product development processes.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-03-11T17:19:55",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 66.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which aligns with operational practices in Agile and DevOps. However, while it touches on automation and the importance of validated checks, it lacks a comprehensive exploration of broader operational efficiency techniques or metrics. The focus is primarily on code quality rather than a wider operational strategy, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-02-12T02:14:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, rather than focusing on Evidence-Based Management principles or empirical data-driven decision-making.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T02:14:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scaling Scrum": {
    "category": "Scaling Scrum",
    "calculated_at": "2025-02-12T02:14:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses quality assurance practices and engineering methodologies, with no clear focus on scaling Scrum principles or frameworks. It does not address coordination among multiple Scrum teams or the challenges of scaling Scrum in large organisations.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-02-12T02:14:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices and quality assurance, with no clear focus on the role or responsibilities of a Scrum Master.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T02:14:17",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically focusing on quality assurance and the concept of 'shift left', without addressing large-scale Agile frameworks or enterprise-level Agile transformation.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T02:14:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on forecasting methodologies or practices within Agile and Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-03-14T17:17:14",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to technical leadership but does not explicitly address the core themes of guiding teams or fostering collaboration. While it mentions practices that could enhance team productivity, it lacks a focus on leadership strategies or agile methodologies in a broader context.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-02-12T02:14:23",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses quality assurance practices and engineering methodologies rather than focusing on identifying customer needs or defining product features.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T02:14:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on Lean Startup principles such as MVP, Build-Measure-Learn feedback loop, or validated learning.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-03-14T17:17:16",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 11.0,
    "reasoning": "The content primarily discusses code reviews and quality assurance, with only brief mentions of Agile concepts. It lacks a focus on Agile Planning principles, techniques, or methodologies, and does not delve into planning processes or team dynamics related to Agile. The discussion is more aligned with software development practices rather than Agile Planning specifically.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-03-14T17:16:45",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 22.0,
    "reasoning": "The content discusses code reviews and quality assurance but does not explicitly address accountability or ownership within Agile teams. While it touches on practices that could indirectly relate to team dynamics, it lacks a clear focus on accountability as defined in the category. The discussion is primarily about code quality and automation rather than fostering a culture of accountability or the distinction between accountability and blame.",
    "level": "Ignored"
  },
  "MVP": {
    "category": "MVP",
    "calculated_at": "2025-02-12T02:14:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses quality assurance practices and engineering methodologies, with no clear focus on Minimum Viable Product concepts or market validation.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T02:14:31",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with a focus on shifting left in the development cycle, rather than collaboration tools or their impact on Agile team dynamics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T02:14:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without addressing psychological safety or its implications in team dynamics.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T02:14:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software development, without a clear focus on deployment strategies or methodologies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-02-12T02:14:36",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "The content primarily discusses quality assurance practices and engineering techniques rather than focusing on Scrum Team dynamics, roles, or collaboration. It does not address Scrum-specific topics such as team roles, communication strategies, or self-organisation.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-03-13T14:46:38",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses code reviews as a method for improving code quality, which aligns with the principles of clean code and software craftsmanship. It mentions the importance of automated checks and practices that enhance code quality, indicating a focus on technical excellence. However, the discussion is somewhat general and lacks in-depth exploration of specific methodologies or frameworks, which affects the overall depth of the content.",
    "level": "Secondary"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-02-12T02:14:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering methodologies, with a focus on shifting quality left in the development cycle, rather than on release management strategies or processes.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 22.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, which is not directly related to Test Driven Development (TDD). While it touches on the importance of automated checks and quality practices, it does not explicitly mention TDD principles such as the Red-Green-Refactor cycle or the practice of writing tests before code. The discussion lacks depth in TDD-specific topics, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T02:14:43",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on identifying patterns or shifts in Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, with a focus on automation and practices rather than the broader Agile philosophy. While it briefly touches on Agile concepts, such as delivering value and the importance of collaboration, these are not the main focus. The discussion lacks depth regarding Agile principles and does not explicitly reference the Agile Manifesto or its core values.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-03-14T17:16:37",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses code reviews, which are a crucial aspect of modern source control practices. It explicitly mentions pull requests and the importance of automated checks, aligning well with the category's focus on collaboration workflows and code review processes. The depth of discussion on techniques and practices for code reviews adds to its relevance, although it does touch on broader agile concepts, which slightly detracts from its primary focus on source control.",
    "level": "Secondary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T02:14:47",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with no clear focus on Agile Planning Tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-02-12T02:14:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses the concept of shifting quality assurance left in the development process, focusing on engineering practices and team dynamics rather than specifically on Acceptance Test Driven Development or its principles.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T02:14:50",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a focus on asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T02:14:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, quality assurance, and development methodologies, with no clear focus on market share strategies or competitive advantage.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T02:14:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and engineering techniques rather than long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-03-14T17:17:27",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to continuous learning through feedback and knowledge sharing. However, it lacks a strong focus on the principles of a growth mindset or techniques for effective knowledge sharing, which are central to the Continuous Learning category. The discussion is more about practices in code quality assurance rather than fostering a culture of continuous improvement or learning.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T02:10:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices and quality assurance without a focus on decision-making processes or the principles of decision theory.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-03-14T17:16:31",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on code reviews and quality assurance practices, which are more aligned with team-level agile practices rather than enterprise-level agility. While it mentions automation and practices that could contribute to efficiency, it lacks a broader discussion on organisational agility, frameworks, or cultural aspects that define Enterprise Agility.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-02-12T02:10:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, particularly Agile methodologies, and does not focus on Lean principles or waste reduction.",
    "level": "Ignored"
  },
  "Resilience and Change": {
    "category": "Resilience and Change",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses methodologies and practices in software engineering that can enhance organisational resilience and adaptability, particularly through the concept of 'shift left' in quality assurance. However, the primary focus is on technical implementations rather than a comprehensive exploration of resilience and change as a central theme.",
    "level": "Tertiary"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-02-12T02:11:01",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses concepts related to quality assurance, engineering practices, and team dynamics rather than installation or configuration of tools or software.",
    "level": "Ignored"
  },
  "Code and Complexity": {
    "category": "Code and Complexity",
    "calculated_at": "2025-03-06T13:28:39",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content primarily discusses the importance of integrating quality assurance into the software development process, particularly through practices like shift left, test-driven development, and pair programming. It explicitly mentions code quality and the complexities involved in maintaining and supporting code, aligning well with the core themes of the category. The depth of discussion is substantial, covering various practices and their implications on software quality and complexity, although it could benefit from more explicit references to complexity theory and its principles.",
    "level": "Secondary"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses concepts related to improving engineering practices and quality assurance, which indirectly touches on flow efficiency through the idea of shifting left and optimising processes. However, the primary focus is on quality assurance and engineering practices rather than directly on flow efficiency principles or metrics.",
    "level": "Tertiary"
  },
  "AI and Automation in Agility": {
    "category": "AI and Automation in Agility",
    "calculated_at": "2025-02-12T02:11:06",
    "ai_confidence": 0,
    "non_ai_confidence": 30,
    "final_score": 3.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and the shift-left approach, without any mention of AI or automation technologies in Agile frameworks.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-03-06T14:42:24",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, which is a critical aspect of product delivery. It highlights the importance of integrating quality practices early in the development cycle, aligning with the category's focus on methodologies and practices for delivering usable software. The discussion on team responsibilities, agile practices, and the impact of testing and validation on product quality further supports its relevance to product delivery. However, while it covers many key topics, it does not delve deeply into deployment strategies or metrics for measuring delivery performance, which slightly lowers the depth score.",
    "level": "Secondary"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-03-14T17:16:57",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which is tangentially related to Agile practices but does not focus on Agile Product Management specifically. While it mentions Agile and Scrum, the primary focus is on code quality rather than product management principles, making it a secondary topic rather than a primary discussion.",
    "level": "Ignored"
  },
  "Discovery and Learning": {
    "category": "Discovery and Learning",
    "calculated_at": "2025-03-14T17:16:33",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses code reviews and their role in quality assurance, which touches on aspects of learning and improvement. However, it primarily focuses on technical practices and project management rather than exploring methodologies for fostering innovation or continuous learning. The mention of 'techniques and practices' is vague and does not delve into the core themes of discovery and learning, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-12T02:11:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on Systems Thinking principles or interconnectedness within organisational dynamics.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-03-14T17:16:18",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 11.0,
    "reasoning": "The content primarily discusses code reviews and Agile practices, focusing on quality assurance and automation in software development. While it touches on themes relevant to Agile methodologies, it does not explicitly engage with complexity science or its principles. The discussion lacks depth in exploring non-linear dynamics, emergent behaviours, or the role of uncertainty in management, which are central to Complexity Thinking. Therefore, the confidence score reflects a minimal connection to the category.",
    "level": "Ignored"
  },
  "Transparency and Accountability": {
    "category": "Transparency and Accountability",
    "calculated_at": "2025-02-12T02:11:17",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, without a clear focus on transparency or accountability within Agile teams.",
    "level": "Ignored"
  },
  "Practical Techniques and Tooling": {
    "category": "Practical Techniques and Tooling",
    "calculated_at": "2025-03-06T15:43:29",
    "ai_confidence": 82.0,
    "ai_mentions": 75.0,
    "ai_alignment": 85.0,
    "ai_depth": 80.0,
    "non_ai_confidence": 20,
    "final_score": 76.0,
    "reasoning": "The content extensively discusses practical techniques such as 'shift left', test-driven development, and pair programming, which are directly related to Agile and DevOps practices. It provides a detailed exploration of how these methodologies can enhance team performance and product quality. The mention of tools and techniques within modern software engineering practices further solidifies its alignment with the category. The depth of discussion is significant, as it not only explains the concepts but also illustrates their application and benefits, making it a strong fit for the category.",
    "level": "Secondary"
  },
  "Events and Presentations": {
    "category": "Events and Presentations",
    "calculated_at": "2025-02-12T02:11:21",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices and concepts, specifically around quality assurance and Agile methodologies, without reference to any specific events, presentations, or discussions related to them.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-02-17T12:02:24",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses Agile practices and the importance of building quality into the development process, which relates to market adaptability. However, the primary focus is on quality assurance and engineering practices rather than directly addressing strategies for responding to market shifts.",
    "level": "Tertiary"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T02:11:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software engineering practices, specifically the concept of 'shift left' in quality assurance, which is closely related to Agile methodologies and practices. It references various Agile concepts and tools, making it not suitable for the Miscellaneous category.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-03-06T13:28:36",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 50,
    "final_score": 75.0,
    "reasoning": "The content discusses concepts related to quality assurance and engineering practices, such as 'shift left' and test-driven development, which are relevant to DevOps principles. However, it primarily focuses on software engineering practices rather than the broader integration of development and operations teams. While it touches on automation and team dynamics, it lacks a comprehensive exploration of DevOps tools, cultural shifts, and metrics, which are crucial for a higher confidence score in the DevOps category.",
    "level": "Secondary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-03-14T17:16:40",
    "ai_confidence": 55.0,
    "ai_mentions": 60.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses code reviews and their importance in quality assurance, mentioning Azure DevOps specifically in the context of pull request systems. However, the primary focus is on code review practices rather than Azure DevOps functionalities or methodologies. While there is a relevant mention of Azure DevOps, the overall discussion does not deeply explore its services or best practices, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Products and Books": {
    "category": "Products and Books",
    "calculated_at": "2025-02-12T02:11:29",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses software engineering practices and the concept of shifting quality assurance left, without a clear focus on specific products or literature related to Agile or DevOps.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-03-14T17:17:12",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality and reducing defects, which indirectly relates to operational efficiency. However, it does not explicitly mention business agility or its principles. The focus is primarily on technical practices rather than the broader themes of business agility, such as organisational adaptability or leadership roles in fostering agility.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T02:11:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with no clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-03-07T12:33:12",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 67.0,
    "reasoning": "The content discusses the concept of 'shift left' in quality assurance, which aligns with the principles of iterative development and continuous delivery. It highlights the importance of integrating quality practices early in the development cycle and the role of cross-functional teams in supporting and maintaining the product. However, while it touches on value delivery, the primary focus is on technical practices and methodologies rather than explicitly discussing strategies for maximising customer value or aligning product development with customer needs.",
    "level": "Secondary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-03-07T12:48:26",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content extensively discusses the concept of 'shift left' in quality assurance, emphasising the importance of integrating testing and support into the development process. It aligns closely with key topics of Technical Excellence, such as Test-Driven Development (TDD), Continuous Integration and Continuous Delivery (CI/CD), and the need for modular architecture. The depth of discussion is significant, providing detailed insights into how these practices enhance engineering quality and team effectiveness. The content also touches on the integration of Agile methodologies with technical practices, reinforcing its relevance to the category.",
    "level": "Secondary"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-03-10T11:36:33",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 66.0,
    "reasoning": "The content discusses modern software engineering practices, particularly the concept of 'shift left' in quality assurance, which indirectly relates to organisational agility by promoting adaptability and responsiveness in development processes. However, it primarily focuses on technical practices rather than the broader organisational strategies and cultural shifts that define agility. While there are mentions of agile practices and team dynamics, the depth of discussion does not fully explore the key topics outlined in the category, such as leadership roles or continuous improvement strategies.",
    "level": "Secondary"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T02:11:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical concepts and practices related to quality assurance and software engineering, without personal anecdotes or reflections.",
    "level": "Ignored"
  },
  "People and Process": {
    "category": "People and Process",
    "calculated_at": "2025-03-10T13:53:52",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of team dynamics and collaboration in the context of quality assurance and engineering practices. It highlights how shifting responsibilities to the engineering team enhances their involvement in the entire development process, which aligns with the category's focus on human behaviour and structured methodologies. However, while it touches on these themes, the primary focus remains on technical practices and methodologies rather than a deep exploration of the interplay between people and processes.",
    "level": "Secondary"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-03-14T17:16:35",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 24.0,
    "reasoning": "The content primarily discusses code reviews and their role in quality assurance, focusing on technical practices rather than the interplay between social and technical systems. While it touches on the importance of processes and tools like pull requests, it lacks a direct exploration of organisational culture, team dynamics, or the broader sociotechnical context. The discussion is more about technical implementation than the integration of social aspects within organisations.",
    "level": "Ignored"
  },
  "News and Reviews": {
    "category": "News and Reviews",
    "calculated_at": "2025-02-12T02:11:45",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses software engineering practices and the concept of 'shift left' in quality assurance, without focusing on news or reviews related to Agile, DevOps, or technology updates.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-03-14T17:16:20",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which indirectly relates to metrics and learning through the concept of validating code quality. However, it lacks explicit discussions on metrics, data analysis, or feedback loops, which are central to the category. The focus is more on practices rather than evidence-based decision-making or continuous improvement methodologies.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and their role in improving code quality, which is a part of the development stage of the application lifecycle. However, it does not explicitly mention Application Lifecycle Management or cover the broader scope of the lifecycle stages, governance, or tools. The focus is primarily on code review practices rather than a comprehensive discussion of ALM principles.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-02-12T02:11:50",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses software engineering practices, particularly around quality assurance and the concept of 'shift left', rather than focusing on Value Stream Management principles or techniques.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T02:11:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, specifically focusing on quality assurance and Agile methodologies, without addressing psychological principles or theories related to motivation, engagement, leadership, or team dynamics.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-02-17T12:02:29",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, without a clear focus on platform engineering or Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:02:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices in software engineering, focusing on concepts like 'shift left' and team dynamics within traditional frameworks, without a clear emphasis on BetaCodex principles.",
    "level": "Ignored"
  },
  "One Engineering System (1ES)": {
    "category": "One Engineering System (1ES)",
    "calculated_at": "2025-02-17T12:02:32",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses engineering practices and methodologies that could relate to the principles of 1ES, particularly in terms of integrating quality assurance and team responsibilities. However, it primarily focuses on the concept of 'shift left' and agile practices rather than the specific framework of 1ES.",
    "level": "Tertiary"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-02-17T12:02:37",
    "ai_confidence": 50,
    "non_ai_confidence": 30,
    "final_score": 48.0,
    "reasoning": "The content discusses Agile practices and the importance of quality assurance in product development, but it primarily focuses on technical practices and engineering excellence rather than a comprehensive discussion of the Agile Product Operating Model.",
    "level": "Tertiary"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:49:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices and methodologies in software engineering, specifically around quality assurance and development processes, without a clear focus on leadership principles or practices.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-03-19T17:45:48",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses code reviews and quality assurance in software development, which are primarily technical practices rather than social technologies. While there are mentions of collaboration through code reviews, the focus is more on technical processes and automation rather than on fostering collaboration, decision-making, or value delivery within teams. The discussion lacks depth in exploring the social frameworks or methodologies that underpin effective collaboration and decision-making, which are central to the category of Social Technologies.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-02-24T13:33:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses quality assurance practices and the concept of shifting left in software development, without a clear focus on Internal Developer Platforms or their specific benefits and components.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:33:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software engineering practices, quality assurance, and Agile methodologies without any mention of Artificial Intelligence.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-03-14T17:16:15",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 11.0,
    "reasoning": "The content primarily discusses quality assurance practices and the concept of 'shift left' in software engineering, with only a brief mention of agile practices. While it touches on team dynamics and the importance of collaboration, it does not explicitly address Scrum roles, events, or artifacts. The discussion lacks depth in Scrum-specific principles and does not focus on the Scrum framework, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Shift-Left Strategy": {
    "category": "Shift-Left Strategy",
    "calculated_at": "2025-03-17T15:39:12",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the concept of shifting left in the context of code reviews, indicating an understanding of integrating quality assurance earlier in the development process. However, while it mentions the shift-left concept, the primary focus is on code reviews rather than a comprehensive exploration of the Shift-Left Strategy. The discussion lacks depth in terms of techniques and methodologies specific to Shift-Left practices, which affects the overall confidence score.",
    "level": "Secondary"
  }
}
