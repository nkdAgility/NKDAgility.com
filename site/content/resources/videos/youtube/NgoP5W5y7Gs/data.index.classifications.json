{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-02-12T04:10:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on hypothesis formulation, experimentation, or validated learning.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-02-12T04:10:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on hypothesis-driven experimentation within Agile workflows.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T04:10:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses software security practices and methodologies, with no clear focus on entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on the Product Backlog or its management.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, with no clear focus on Scrum principles, roles, or events.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T04:11:05",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and the role of teams in preventing vulnerabilities, rather than exploring systems thinking or organisational dynamics.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T04:11:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on coaching or team development.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T04:11:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and the importance of integrating security from the start, rather than addressing leadership decisions or evidence-based practices.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T04:11:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses security practices and software engineering processes, with no focus on employee engagement or related themes.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and the importance of integrating security from the start, rather than addressing product management strategies or methodologies.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T04:11:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on technical aspects and tools rather than leadership roles or Agile principles.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T04:11:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not mention the Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development rather than system configuration processes or methodologies.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with digital transformation by emphasising the integration of modern practices to enhance quality and efficiency. However, while it touches on transformation and organisational change, it primarily focuses on software engineering techniques rather than broader strategic adoption of digital technologies across an organisation. The case study of Azure DevOps illustrates a successful transformation, but the overall discussion lacks depth in exploring the strategic implications of digital transformation as defined in the category.",
    "level": "Secondary",
    "reasoning_summary": "This content mainly explores software engineering practices like 'shifting left', using Azure DevOps as an example. While it mentions digital transformation and organisational change, its primary focus is on technical methods rather than the wider strategic adoption of digital technologies, so it only partially fits the digital transformation category."
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with the principles of delivering high-quality, functional software. It emphasises the importance of integrating quality and security from the start, which is a key aspect of working software. However, while it touches on relevant practices and benefits, it does not delve deeply into specific Agile or Scrum frameworks, nor does it provide extensive metrics or case studies directly related to working software delivery.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category as it highlights the value of embedding quality and security early in the development process, which supports the goal of delivering robust, functional software. However, it doesnâ€™t go into detail about Agile or Scrum methodologies, nor does it offer in-depth examples or metrics specifically tied to working software outcomes."
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-02-12T04:11:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, particularly the concept of 'shifting left' and the importance of integrating security from the start, rather than focusing on structured decision-making methodologies.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on self-organisation principles or practices.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-12T04:11:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, with no focus on remote working or Agile methodologies.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and building security into the development process, rather than addressing Lean Product Development principles or waste reduction.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T04:11:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with no clear focus on organisational culture or its influence on agility and transformation.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-02-12T04:11:29",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, without any focus on customer feedback mechanisms or loops.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-03-14T17:10:53",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the concept of 'shifting left' in software development, focusing on quality and security practices. While it briefly mentions Azure DevOps, it does not delve into Azure Repos specifically or its functionalities, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T04:11:31",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on transparency within Agile methodologies.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on the Definition of Done in Agile and Scrum.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, rather than product strategy, vision, or roadmap development.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-12T04:11:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the importance of integrating security from the start rather than as an afterthought. It does not address customer retention strategies or user engagement.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-12T04:11:38",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and building security into the development process, which is unrelated to Value Stream Mapping.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-02-12T04:11:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with a focus on shifting left in the development process, rather than strategic alignment or Agile methodologies.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T17:01:01",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 70.0,
    "ai_depth": 55.0,
    "non_ai_confidence": 30,
    "final_score": 62.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which indirectly relates to innovation by emphasising the importance of integrating quality and security from the start. It mentions tools and techniques that can enhance innovation, such as Test-Driven Development (TDD) and Continuous Feedback Loops. However, the primary focus is on quality assurance and process improvement rather than on fostering a culture of innovation or specific metrics for assessing innovation capability. While there are mentions of empowering teams and improving products, the depth of discussion on innovation as a core theme is limited, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-12T04:11:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, without any mention of Agile frameworks or principles.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of security in software development and mentions the role of team members in addressing security issues. However, it primarily focuses on security practices and tools rather than explicitly exploring team collaboration dynamics or techniques. While there are references to team involvement and shared responsibility, the discussion lacks depth in terms of collaboration strategies and does not align closely with the core themes of the Team Collaboration category.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-12T04:11:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, with no clear focus on customer satisfaction or related themes.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-02-12T04:11:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, rather than Lean principles or waste minimisation.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-02-12T04:11:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, with no clear focus on Cycle Time or its implications.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of integrating security into the software development process, which aligns with the principles of clean code and automation. It emphasises the need for refactoring to eliminate vulnerabilities and promotes a proactive approach to security, resonating with the themes of Test-Driven Development and Continuous Integration. The depth of discussion on tools like SonarQube and GitHub's security features further supports its relevance to engineering practices, although it does not explicitly mention Agile methodologies.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it highlights how embedding security into software development supports clean code and automation. By focusing on refactoring and proactive security, it aligns well with engineering best practices like Test-Driven Development and Continuous Integration, even though Agile methods arenâ€™t directly referenced. The mention of tools such as SonarQube and GitHubâ€™s security features further reinforces its relevance."
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T04:11:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on shifting security left and building security into the development process, rather than on portfolio management or strategic alignment of projects.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 32,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the concept of 'Security by Design' within the context of software development, emphasising the importance of integrating security practices throughout the development lifecycle. It mentions methodologies like 'shifting left' and references tools such as SonarQube and GitHub for code analysis, which are directly related to best practices in software engineering. The depth of discussion is significant, covering various aspects of security, team responsibilities, and practical examples, making it a strong fit for the Software Development category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the Software Development category, as it thoroughly explores 'Security by Design' and its integration into the development process. By referencing industry tools and methodologies, and providing practical examples, it clearly addresses best practices and responsibilities relevant to software engineering professionals."
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of integrating security into the software development process from the outset, aligning closely with the principles of software craftsmanship and quality assurance. It highlights best practices such as 'shifting left' and the need for continuous improvement in coding standards to prevent vulnerabilities. The depth of discussion on tools like SonarQube and GitHub's security features further supports the focus on engineering excellence, making it a primary topic rather than a secondary mention.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it thoroughly explores embedding security within software development, emphasising best practices and continuous improvement. The detailed discussion of tools and methodologies demonstrates a clear focus on engineering excellence, making security integration a central theme rather than a peripheral topic."
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:36:25",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, emphasising quality and security rather than discussing throughput as a delivery metric. While it touches on improving processes and efficiency, it does not explicitly define or analyse throughput, nor does it provide observable data about team delivery capacity. The discussion lacks depth in terms of throughput metrics, visualisation, or empirical forecasting, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 10,
    "final_score": 42.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which is relevant to quality assurance and continuous delivery practices. However, while it mentions Azure DevOps as a case study, it does not focus specifically on Azure Pipelines or provide detailed insights into pipeline configuration, management, or CI/CD practices within Azure. The primary focus is on general software engineering principles rather than the specific automation processes of Azure Pipelines.",
    "level": "Tertiary"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with no clear focus on Agile values or principles.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, rather than focusing on automated testing principles or methodologies.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-02-12T04:12:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on 'shift left' strategies and security validation, which are not central to Site Reliability Engineering principles.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, with no focus on the responsibilities or role of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-02-12T04:12:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, without a focus on change management principles or strategies.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T04:12:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not focus on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-02-12T04:12:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, rather than on empirical process control principles or Agile methodologies.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, rather than validating product ideas through user engagement.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not focus on Azure Boards or its functionalities in Agile project management.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-12T04:12:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses security practices in software development and does not address revenue per employee or related financial metrics.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with the principles of Test First Development, particularly through the mention of Test-Driven Development (TDD). However, the primary focus is on embedding quality and security from the start rather than explicitly detailing Test First Development practices. While TDD is mentioned, the overall discussion lacks depth in exploring the full scope of Test First Development principles, such as success criteria and collaboration among roles. Therefore, while there is some relevant content, it does not fully meet the criteria for a strong alignment with the category.",
    "level": "Secondary",
    "reasoning_summary": "The content touches on Test First Development by referencing TDD and the idea of 'shifting left', but its main emphasis is on early integration of quality and security. It doesnâ€™t delve deeply into Test First Development practices or principles, so while thereâ€™s some overlap, it doesnâ€™t fully fit the category."
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-02-12T04:12:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, particularly the concept of 'shifting left' and building security into the development process, rather than focusing on frequent releases or software delivery practices.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T04:12:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses security practices and the importance of integrating security into the software development process, with no focus on estimation techniques or Agile practices.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which indirectly relates to troubleshooting by emphasising early detection of issues and quality assurance. However, it primarily focuses on proactive measures and methodologies rather than specific troubleshooting techniques or case studies. The discussion lacks depth in terms of diagnosing and resolving existing technical issues, which is essential for a higher confidence score in the Troubleshooting category.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-02-12T04:12:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development rather than the delivery of software increments within Agile frameworks.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T04:12:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not focus on the Windows operating system or its specific features.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-02-12T04:12:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not address Sprint Review topics or processes.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-11T08:57:06",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing quality assurance and security practices. While it touches on improving processes and efficiency, it does not explicitly mention Lead Time or its measurement, nor does it delve into its relationship with Cycle Time or strategies for optimising Lead Time. The discussion lacks depth in terms of Lead Time as a specific observability metric, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content discusses practical strategies for integrating security into the software development process, emphasising the importance of shifting security considerations left in the development lifecycle. It aligns well with the core themes of pragmatic thinking by providing real-world applications of DevOps principles, such as the red-blue team exercises, and highlights the necessity of collaboration among team members to address security issues proactively. The depth of discussion is substantial, covering various tools and techniques that developers can use to prevent vulnerabilities, thus demonstrating a strong alignment with pragmatic problem-solving in complex environments.",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the category, as it offers actionable advice on embedding security within software development. By focusing on real-world DevOps practices and team collaboration, it demonstrates pragmatic problem-solving. The discussion of tools and proactive strategies further reinforces its relevance to those seeking practical, effective approaches in complex development settings."
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-02-12T04:12:31",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, without a focus on deployment frequency or related optimisation strategies.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses security practices in software development, particularly the concept of 'shifting left' to integrate security early in the development process. While it touches on aspects of CI, such as the importance of integrating quality and security into the development workflow, it does not explicitly focus on Continuous Integration principles or practices. The mention of tools like SonarQube and GitHub's security features indicates some alignment with CI tools, but the primary focus remains on security rather than CI itself. Therefore, the confidence score reflects a moderate connection to the CI category, but it is not a primary focus.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-02-12T04:12:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, without a clear connection to Agile methodologies or strategic planning.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 20,
    "final_score": 62.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with Continuous Delivery principles by emphasising early quality assurance and integration. However, while it touches on Continuous Delivery practices, the primary focus is on security and quality rather than on Continuous Delivery itself. The depth of discussion on related practices like Test-Driven Development and continuous feedback loops adds to the relevance, but the overall emphasis is not strictly on Continuous Delivery.",
    "level": "Secondary"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with no clear focus on cross-functional teams or their dynamics.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the importance of integrating security early in the development process rather than backlog item readiness.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T04:12:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and technical implementations rather than the interpretation of complexity or decision-making processes in organisational contexts.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses security practices and technical implementation details without a focus on team dynamics or motivation.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies rather than team performance or collaboration within agile teams.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T04:12:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, with no clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-12T04:12:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, with no focus on working agreements or team collaboration norms.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-02-12T04:12:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, which does not align with Lean Principles focused on waste reduction and value maximisation.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-12T04:12:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, with no clear focus on Agile transformation principles or practices.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-02-12T04:12:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on technical debt management or its implications.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T04:12:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, with no clear focus on Scrum Values.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-02-12T04:12:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, specifically focusing on the concept of 'shifting left' and the role of tools in preventing vulnerabilities, rather than organisational change strategies or methodologies.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-02-12T04:12:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and principles in software development, with a focus on shifting left and building security into the development process, rather than on test automation specifically.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of integrating security practices early in the software development process, which aligns with operational efficiency principles. It mentions 'shifting left' as a strategy to enhance security and prevent vulnerabilities, reflecting a practical application of methodologies that streamline processes. However, the primary focus is on security rather than operational practices, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more about quality assurance and engineering practices rather than evidence-based management. While it touches on some aspects of improving processes and outcomes, it does not explicitly discuss metrics or empirical decision-making related to EBM. The discussion lacks depth in terms of evidence-based practices and does not align closely with the key topics outlined for EBM.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T04:13:05",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not address backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 12.0,
    "ai_mentions": 0.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing quality assurance and engineering practices. While it touches on team dynamics and empowerment, it does not explicitly mention the role of a Scrum Master or align closely with the core themes of Scrum methodology. The discussion lacks depth regarding Scrum-specific responsibilities or the influence of a Scrum Master on organisational change.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T04:13:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on scaling Agile methodologies across an organisation.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T04:13:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, with no clear focus on forecasting within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 10,
    "final_score": 42.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which touches on aspects of technical leadership, such as empowering teams and integrating quality practices. However, it primarily focuses on technical practices rather than the broader themes of guiding teams or fostering collaboration in an agile context. While there are mentions of team dynamics and accountability, the depth of discussion on technical leadership principles is limited.",
    "level": "Tertiary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies in software development, rather than focusing on identifying customer needs or defining product features.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T04:13:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, specifically the concept of 'shifting left' and security by design, without any focus on Lean Startup principles or methodologies.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-02-12T04:13:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies, particularly the concept of 'shifting left' in software development, rather than Agile Planning principles or practices.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-02-12T04:13:17",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on accountability within Agile teams.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "MVP",
    "calculated_at": "2025-02-12T04:13:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses security practices in software development, focusing on the importance of integrating security from the start rather than as an afterthought. It does not address MVP concepts or related themes.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with no focus on collaboration tools or Agile team dynamics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T04:13:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses security practices and software engineering, with no focus on psychological safety or team dynamics.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T04:13:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development lifecycle, rather than focusing on deployment methodologies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not focus on Scrum Team dynamics, roles, or collaboration.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of integrating security into the software development process from the outset, aligning closely with the principles of software craftsmanship and engineering excellence. It highlights best practices such as 'shifting left' and the need for continuous refactoring to prevent vulnerabilities, which are core themes of Technical Mastery. The depth of discussion is significant, covering practical tools and methodologies that enhance code quality and security, thus justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Technical Mastery category, as it thoroughly explores how embedding security early in development supports software craftsmanship. It covers practical strategies like 'shifting left' and ongoing refactoring, demonstrating a deep understanding of tools and methods that improve both code quality and security. This comprehensive approach clearly aligns with the principles of technical excellence."
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-02-12T04:13:29",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on release management strategies or practices.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-02-12T04:13:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, without a focus on Test Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T04:13:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, specifically the concept of 'shifting left' in security, rather than analysing trends in Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-12T04:13:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, without addressing Agile principles or philosophy.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, focusing on quality and security practices. While it touches on modern engineering practices, it does not explicitly address version control systems, branching strategies, or collaboration workflows, which are central to the 'Modern Source Control' category. The mention of tools like Test-Driven Development (TDD) and Continuous Delivery practices aligns somewhat with the category, but the primary focus is on broader software engineering principles rather than specific source control methodologies.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with no focus on Agile planning tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-02-12T04:13:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the concept of 'shifting left' in software development, without any focus on Acceptance Test Driven Development or acceptance criteria.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T04:13:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and the importance of integrating security from the start, rather than addressing asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T04:13:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the importance of integrating security from the start rather than as an afterthought. It does not address market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T04:13:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of integrating security practices early in the software development process, which aligns with the principles of Continuous Learning by emphasising the need for ongoing education and skill development among team members. However, while it touches on knowledge sharing and the need for a growth mindset, the primary focus is on security practices rather than a broader discussion of Continuous Learning principles. The depth of discussion on how to foster a culture of learning is moderate, but it lacks explicit references to feedback loops or learning from failures, which are key aspects of the Continuous Learning category.",
    "level": "Secondary"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T04:10:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and the importance of integrating security from the start, rather than decision-making processes in uncertain environments.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-02-12T04:10:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, without addressing broader organisational agility or adaptability.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-02-12T04:10:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, without any clear reference to Lean principles or methodologies.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and principles rather than installation or configuration processes for tools or software.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-02-12T04:10:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on optimising work throughput or flow efficiency.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 82.0,
    "reasoning": "The content extensively discusses the 'shift left' principle, which is closely related to product delivery methodologies, particularly in integrating quality assurance early in the development process. It highlights the importance of team accountability, iterative practices like Test-Driven Development (TDD), and continuous feedback loops, all of which are key aspects of effective product delivery. The depth of discussion on tools and techniques further supports its relevance to the category, making it a primary focus rather than a secondary mention.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the product delivery category, as it delves into the 'shift left' approach and its impact on development workflows. By emphasising early quality assurance, team responsibility, and iterative methods like TDD, it clearly centres on practices that drive successful product delivery, rather than treating them as side topics."
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and security by design, rather than Agile product management principles.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the 'shift left' approach in software development, which focuses on integrating quality and security early in the process. While it touches on interconnectedness and team dynamics, it primarily centres on linear problem-solving and specific methodologies rather than a holistic Systems Thinking perspective. The mention of team empowerment and feedback loops aligns somewhat with Systems Thinking, but the overall focus remains on practical software engineering techniques rather than exploring complex organisational dynamics or fostering a culture of Systems Thinking.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-02-12T04:10:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and the importance of integrating security throughout the development process, rather than addressing complexity science or its principles.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-02-12T04:10:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on market adaptability strategies or methodologies.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T04:10:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, specifically focusing on the concept of 'shifting left' and security by design, which are closely related to DevOps principles.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 82.0,
    "ai_mentions": 15.0,
    "ai_alignment": 40.0,
    "ai_depth": 27.0,
    "non_ai_confidence": 50,
    "final_score": 82.0,
    "reasoning": "The content discusses the concept of 'shifting left', which aligns with DevOps principles of integrating quality and security early in the development lifecycle. It emphasises shared accountability among teams and the importance of continuous feedback loops, both of which are core to DevOps. However, while it touches on these themes, the primary focus is on security practices rather than a broader discussion of DevOps as a philosophy, which slightly limits its alignment.",
    "level": "Primary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 78.0,
    "ai_mentions": 60.0,
    "ai_alignment": 85.0,
    "ai_depth": 70.0,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content discusses Azure DevOps in the context of security practices, specifically mentioning its tools and functionalities related to security validation and threat protection. While the primary focus is on security by design, it aligns well with Azure DevOps principles and practices, particularly in the context of CI/CD and team collaboration. The depth of discussion includes specific examples of Azure DevOps tools and their integration into security processes, which enhances the relevance to the category.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores how Azure DevOps supports security practices within CI/CD workflows. By highlighting specific tools and their integration for security validation and threat protection, it demonstrates practical alignment with Azure DevOps principles, especially around secure development and team collaboration."
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on business agility principles or practices.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T04:10:38",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not address Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-02-12T04:10:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and methodologies rather than value delivery strategies within Agile, Scrum, or DevOps frameworks.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of integrating security into the software development process, which aligns with the principles of Technical Excellence. It mentions practices like 'shifting left' and the need for refactoring to prevent vulnerabilities, which are relevant to engineering methodologies. However, while it touches on these topics, the focus is more on security practices rather than a comprehensive exploration of broader technical excellence principles such as TDD or CI/CD. The depth of discussion on specific methodologies is somewhat limited, leading to a moderately high confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is relevant to the Technical Excellence category because it highlights the integration of security within software development, referencing practices like 'shifting left' and refactoring. While it addresses key engineering methods, its primary focus is on security rather than a full exploration of technical excellence topics, making the fit appropriate but not exhaustive."
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-02-12T04:10:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on organisational agility or adaptability.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T04:10:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and tools in software development, with no personal anecdotes or reflections.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the 'shift left' approach in software engineering, which touches on team dynamics and the integration of various roles within a team. However, it primarily focuses on technical practices and tools without a strong emphasis on the organisational context or the interplay between social and technical systems. While there are mentions of team empowerment and collaboration, the overall discussion lacks depth in exploring how these practices influence organisational culture or project outcomes.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development process, rather than focusing on metrics, data analysis, or learning methodologies.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the 'shift left' approach in software development, which aligns with the principles of Application Lifecycle Management by emphasising early quality assurance and security integration. However, it primarily focuses on development practices rather than the entire lifecycle management, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-02-12T04:10:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on shifting security left and building security into the development process, rather than addressing Value Stream Management principles.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T04:10:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses software security practices and methodologies, with no focus on psychological principles or theories related to organisational behaviour.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-02-17T12:01:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development lifecycle, rather than focusing on platform engineering or Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:01:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and does not address BetaCodex principles or themes.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more aligned with quality assurance and engineering practices rather than the Agile Product Operating Model. While it touches on themes of team empowerment and iterative improvement, it lacks a direct discussion of product management principles or the specific frameworks associated with APOM.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:48:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and technical implementation details rather than leadership strategies or practices.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the 'shift left' approach, which emphasises quality and security in coding practices. While it touches on team dynamics and empowerment, it lacks a strong emphasis on collaboration, decision-making, or value delivery as defined in the Social Technologies category. The discussion of team roles and responsibilities is present but does not delve deeply into the social frameworks or methodologies that promote collaboration and continuous improvement within organisations.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices and the importance of integrating security into the software development lifecycle, rather than focusing on Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:32:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses security practices in software development and does not focus on the application of AI in Agile, DevOps, or software development.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses security practices in software development, focusing on the concept of 'shifting left' and integrating security into the development process. While it touches on team dynamics and collaboration, it does not explicitly mention Scrum roles, events, or artifacts, nor does it align closely with the core themes of the Scrum framework. The discussion lacks depth regarding Scrum principles, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift Left Strategy",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 92.0,
    "ai_mentions": 90.0,
    "ai_alignment": 95.0,
    "ai_depth": 90.0,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the Shift-Left Strategy, detailing its principles, benefits, and practical techniques for integrating quality and security early in the software development lifecycle. It provides a comprehensive overview of the concept, including real-world examples and specific methodologies like Test-Driven Development and Continuous Feedback Loops, demonstrating a strong alignment with the core themes of the category. The depth of discussion is significant, covering various aspects of the strategy and its impact on software quality and team dynamics.",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the category, as it thoroughly explores the Shift-Left Strategy by outlining its key concepts, advantages, and actionable methods. By including practical examples and established practices like Test-Driven Development, it clearly demonstrates how early integration of quality and security can benefit software projects, making it highly relevant and insightful for the intended topic."
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with Continuous Improvement principles by emphasising early quality assurance and proactive problem-solving. However, while it touches on themes of team empowerment and iterative processes, it primarily focuses on specific practices and tools rather than a broader discussion of Continuous Improvement as a philosophy. The depth of discussion on Continuous Improvement concepts is limited, leading to a moderate confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content mainly explores 'shifting left' in software development, highlighting early quality checks and proactive issue resolution. While it briefly mentions team empowerment and iterative work, its main focus is on practical methods and tools rather than a comprehensive look at Continuous Improvement as a philosophy, so it only partially fits the category."
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more about quality assurance and engineering practices rather than discussing common goals within Agile and DevOps frameworks. While it touches on team empowerment and accountability, it lacks a direct discussion on shared objectives or strategic alignment, which are central to the category of Common Goals.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with the principles of competence by emphasising the importance of embedding quality and security from the start. It highlights the need for continuous learning and skill development, particularly through practices like Test-Driven Development (TDD) and pair programming. However, while competence is a significant theme, the primary focus is more on processes and practices rather than a deep exploration of competence itself, leading to a moderately high confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category because it explores how early integration of quality and security in software development supports competence, especially through methods like TDD and pair programming. While it touches on skill development and learning, the main emphasis is on development processes rather than an in-depth analysis of competence, making it a reasonably good, but not perfect, match."
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-10T13:04:10",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses the concept of 'shifting left' in software development, focusing on quality and security practices. While it touches on themes relevant to engineering processes, it does not explicitly mention the One Engineering System (1ES) framework or its principles. The discussion lacks depth in relation to 1ES, and the focus remains on individual practices rather than a unified engineering system.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-08T15:38:25",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the concept of 'shifting left' in software development, focusing on quality assurance and team empowerment. While it touches on themes of accountability and proactive practices, it does not explicitly address Agentic Agility or differentiate between human and AI capabilities. The discussion lacks depth in exploring the intentional shaping of outcomes, which is central to the category.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:04:19",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 82.0,
    "reasoning": "The content extensively discusses the 'shift left' approach in software development, which aligns closely with product development methodologies. It covers principles such as integrating quality and security early in the development process, which is a key aspect of Agile practices. The depth of discussion on techniques like Test-Driven Development (TDD) and Continuous Feedback Loops further supports its relevance to product development. However, while it touches on important themes, it does not explicitly frame these within a broader product development strategy, which slightly lowers the confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the product development category, as it delves into practices like 'shift left', TDD, and continuous feedbackâ€”core elements of modern development methodologies. While it thoroughly covers these techniques, it could be more explicit in connecting them to overarching product development strategies, which would strengthen its alignment even further."
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:04:24",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more aligned with software engineering practices than project management. While it touches on team dynamics and the importance of quality assurance, it lacks a direct discussion of project management principles, methodologies, or lifecycle phases. The mention of team roles and tools is limited and does not delve into broader project management strategies or governance structures.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:04:28",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing quality assurance and security practices. It does not explicitly mention Hybrid Agile or engage with its core themes, such as the integration of traditional and agile methodologies or the challenges associated with Hybrid Agile environments.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:04:31",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more about quality assurance and security practices rather than scaling methodologies or frameworks. While it touches on team dynamics and collaboration, it does not delve into specific scaling frameworks or strategies that align with the core themes of the Scaling category.",
    "level": "Ignored"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T17:00:54",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which indirectly relates to improving processes that can affect Time to Market. However, it primarily focuses on quality and security rather than explicitly addressing Time to Market metrics or strategies. While there are mentions of faster delivery cycles and improved customer feedback, these are secondary to the main theme of embedding quality and security early in the development process. Therefore, the confidence score reflects a low primary focus on Time to Market.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T17:01:13",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more about improving processes and quality assurance rather than discussing unrealised value in the context of Evidence-Based Management. While there are elements that touch on potential improvements and efficiencies, the discussion lacks a direct focus on unrealised value indicators, strategies for identifying untapped opportunities, or case studies specifically related to unrealised value. The content does not provide a detailed exploration of how these practices relate to capturing additional value for the organisation, which is central to the category of Unrealised Value.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T17:01:17",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing quality and security practices rather than directly addressing Current Value or its metrics. While it touches on customer satisfaction and team empowerment, it lacks a detailed exploration of Current Value as defined in Evidence-Based Management. The discussion is more about improving processes and practices than measuring or evaluating the real-time value delivered by a product or service.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-10T13:36:14",
    "ai_confidence": 12.0,
    "ai_mentions": 0.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the concept of 'shifting left' in software development, focusing on quality and security practices. While it touches on modern engineering practices, it does not specifically mention GitHub or its functionalities, making it only tangentially related to the GitHub category.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T17:00:57",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing practices like Test-Driven Development and Continuous Delivery. While it touches on agile principles, it does not explicitly mention Agnostic Agile or its core themes. The discussion lacks depth regarding the principles of Agnostic Agile, and there is no comparison with traditional frameworks or ethical considerations, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T17:01:04",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is more about improving software engineering practices rather than discussing the company as a product. While there are mentions of team empowerment and organisational transformation, these are not explicitly tied to the CaaP framework or its principles. The discussion lacks depth in terms of organisational design or customer-centric strategies, which are central to the CaaP concept.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T17:01:08",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on software development practices, specifically the concept of 'shifting left' in quality assurance and security. It does not mention or discuss the principles of Cell Structure Design, the Beta Codex, or the characteristics of autonomous cells. While there is a brief mention of team empowerment, it is in the context of software engineering rather than organisational design. Overall, the content does not align with the core themes of Cell Structure Design.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "category": "Liberating Structures",
    "calculated_at": "2025-04-10T17:00:48",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing practices like Test-Driven Development and Pair Programming. While it touches on team empowerment and collaboration, it does not explicitly mention or align with the principles or techniques of Liberating Structures. The discussion is centred around software engineering rather than facilitation techniques or group dynamics, leading to a very low confidence score.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T17:01:19",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, discussing quality assurance and security practices. It does not mention Open Space Agile or its principles, nor does it align with the core themes of collective participation, psychological safety, or co-creation in Agile transformations. The discussion lacks depth regarding Open Space Agile methodologies, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 76.0,
    "ai_mentions": 15,
    "ai_alignment": 31,
    "ai_depth": 25,
    "non_ai_confidence": null,
    "final_score": 76.0,
    "reasoning": "The content primarily focuses on the principle of 'shifting left' in software development, discussing how quality, security, and reliability should be integrated from the beginning of the development cycle. It discusses  principles like empowering teams, continuous improvement, and value delivery, which are core themes in Agile and DevOps methodologies. Additionally, the article provides insights and actionable advice on implementing these principles, with substantial depth in describing tools and techniques like Test-Driven Development (TDD) and Continuous Feedback Loops. This aligns well with the definition of principles as actionable guidelines that influence team behaviors and decision-making.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores foundational principles in software development, such as early integration of quality and security. It offers practical advice and highlights key Agile and DevOps concepts, making it highly relevant for those seeking actionable guidelines to shape team practices and decision-making."
  },
  "Tool": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 68.0,
    "ai_mentions": 15,
    "ai_alignment": 24,
    "ai_depth": 25,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses concepts related to software development practices and the benefits of adopting them. It mentions specific tools like Test-Driven Development (TDD) and practices that facilitate a shift-left approach. While it does touch on tools indirectly, such as the reference to Azure DevOps as a case study, the primary focus leans more towards the concepts and methodologies rather than a detailed examination of tools themselves. The depth of discussion on tools is notable but not exhaustive enough to classify it firmly as tool-centric. Therefore, the overall confidence score reflects a moderate alignment with the 'Tool' category.",
    "level": "Secondary"
  },
  "Values": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Values",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 52.0,
    "ai_mentions": 5,
    "ai_alignment": 30,
    "ai_depth": 20,
    "non_ai_confidence": null,
    "final_score": 52.0,
    "reasoning": "The content discusses shifting left as a principle in software development, which hints at underlying values of accountability, quality, and team empowerment. However, it primarily focuses on tools and practices rather than explicitly connecting these concepts to a foundational framework of values. The mentions reflect some core values but lack depth in exploring how these values influence organizational behavior or decision-making consistently throughout the discourse.",
    "level": "Tertiary"
  },
  "Philosophy": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 10.0,
    "reasoning": "The content provides a detailed explanation of the 'shift left' principle in software development but does not engage in the philosophical underpinnings of why this approach is taken or its broader cultural implications within organizations. There is little focus on foundational beliefs or decision-making philosophies, making the content primarily procedural with minimal relevance to the philosophy category.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 32.0,
    "ai_mentions": 7,
    "ai_alignment": 10,
    "ai_depth": 12,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the concept of 'shifting left' in software development, which is closely related to the Agile discipline. While there are mentions of methodologies like Test-Driven Development (TDD) and Continuous Delivery, the discussion emphasizes practical tools and techniques rather than the underlying principles and governance structures that define a discipline. Therefore, while it partially aligns with the concept of 'Discipline', its focus on techniques rather than the maturation of a professional field reduces its overall relevance to this category.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 23.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 25.0,
    "non_ai_confidence": null,
    "final_score": 23.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development but does not focus on artifacts as defined in Agile or Lean methodologies. While there are some mentions of practices like Test-Driven Development (TDD) and pair programming, which can relate to artifacts, the primary focus is on processes and team practices rather than specific artifacts that facilitate transparency and inspection in work systems. Therefore, the content does not explicitly address the structure, purpose, or management of artifacts.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 30.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content focuses on the concept of 'shift left' in software development, discussing quality, security, and associated practices. While it includes elements of team processes and practices that could connect to observability, such as continuous feedback loops and accountability, there is no explicit discussion about observability principles, tools, or metrics. Hence, its relation to observability is tangential at best, resulting in a low to moderate confidence score in this category.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 32,
    "ai_depth": 36,
    "non_ai_confidence": null,
    "final_score": 87.0,
    "reasoning": "The content discusses several actionable techniques that enhance software development practices, particularly focusing on the 'shift left' approach. It explicitly mentions practices such as Test-Driven Development (TDD) and Pair Programming, which are directly aligned with the category 'Practice.' The discussion dives into their implementation and benefits, providing a depth of insights that can help teams improve their effectiveness. However, while the primary focus is on actionable practices, there could be a slightly increased emphasis on organizational culture rather than just individual practices, which prevents a perfect score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the 'Practice' category, as it explores hands-on methods like TDD and Pair Programming that directly improve software development. The discussion is practical and insightful, offering clear guidance for teams. While thereâ€™s some mention of broader organisational culture, the main emphasis remains on actionable practices, making it highly relevant to this category."
  },
  "Method": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Method",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 25,
    "non_ai_confidence": null,
    "final_score": 78.0,
    "reasoning": "The content discusses methods like 'shifting left' which is a structured approach to integrating quality and security in software development from the outset. It provides specific procedures such as Test-Driven Development (TDD) and Pair Programming, which are concrete methods for achieving better software quality. While the piece touches on broader principles and cultural changes, the primary focus is on actionable methods, making it a strong fit for the 'Method' category, albeit with some broader implications woven in.",
    "level": "Secondary",
    "reasoning_summary": "This content is well-suited to the 'Method' category, as it centres on practical techniques like Test-Driven Development and Pair Programming to enhance software quality. While it briefly mentions overarching principles and cultural shifts, its main emphasis is on clear, actionable steps that teams can implement, making it a strong example of method-focused guidance."
  },
  "Model": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Model",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 27.0,
    "ai_mentions": 2,
    "ai_alignment": 25.0,
    "ai_depth": 30.0,
    "non_ai_confidence": null,
    "final_score": 27.0,
    "reasoning": "While the content discusses principles like 'shifting left' and Agile practices that are conceptually related to models in systems thinking, it does not explicitly delve into specific frameworks or comparative analyses typical of the 'Model' category. It touches on concepts that inform decision-making and encourages iterative practices within Agile, but it remains primarily focused on operational practices rather than theoretical models or frameworks themselves.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 24,
    "ai_depth": 16,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which aligns with Agile principles but does not focus on specific frameworks like Scrum or Kanban, nor does it deeply explore implementation strategies or comparisons of frameworks. While tools and techniques such as TDD and pair programming are mentioned, the overall discussion is more about practices than structured frameworks. There's clear mention of Agile concepts and how they can enhance team performance, but it lacks a deeper classification under a specific framework or detailed case studies focused on framework adaptation.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 67.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": null,
    "final_score": 67.0,
    "reasoning": "The content discusses the concept of 'shifting left' in software development, which relates closely to tenets of Agile and DevOps, particularly around continuous improvement and feedback loops. While it provides actionable guidance on implementing this principle, such as having developers take ownership of the process and integrating security practices early, the discussion lacks depth regarding specific tenets and frameworks in Agile, Lean, and DevOps. Therefore, it demonstrates good conceptual alignment but does not fully delve into the tenets as prescriptive guiding rules.",
    "level": "Secondary"
  },
  "Capability": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:06:24",
    "ai_confidence": 37.0,
    "ai_mentions": 10,
    "ai_alignment": 30,
    "ai_depth": 35,
    "non_ai_confidence": null,
    "final_score": 37.0,
    "reasoning": "The content discusses the concept of 'shifting left' which indirectly relates to enhancing team capabilities through the early integration of quality and security. However, it mostly focuses on processes, tools, and techniques rather than on the development of enduring capabilities as defined in the classification criteria. The discussion lacks emphasis on systemic and lasting organizational competencies in the context of Agile and DevOps, leaning more towards practices that do not fundamentally change the organizational culture or processes over time.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "NgoP5W5y7Gs",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:39",
    "ai_confidence": 1.3,
    "ai_mentions": 0.0,
    "ai_alignment": 0.7,
    "ai_depth": 0.5,
    "ai_intent": 1.2,
    "ai_audience": 1.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 1.0,
    "reasoning": "The content thoroughly discusses the 'shift-left' mindset in software engineering, with a focus on embedding security and quality from the outset. It details practices like test-driven development, pair programming, and continuous feedback loops. However, there are no direct mentions or even indirect allusions to Service Level Expectation (SLE) as defined in Agile, Scrum, or Kanban theory. The content does not discuss elapsed time ranges, probability forecasts, transparency of delivery timelines, or flow predictability as it relates to SLE. The audience is mostly developers and engineering leaders interested in quality and security, not specifically SLE or Kanban practitioners. The signal-to-noise ratio is slightly higher as the content remains focused on its theme, but none of the main ideas align with SLE. For these reasons, all scores are extremely low, with a slightly higher audience and signal score due to its target audience's likely familiarity with Agile tools. The overall confidence reflects the near-absence of relevant material regarding SLE.",
    "level": "Ignored"
  }
}