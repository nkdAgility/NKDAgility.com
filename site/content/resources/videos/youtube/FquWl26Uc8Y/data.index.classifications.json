{
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-02-12T17:21:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on individual accountability rather than team dynamics or collaboration.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "Minimum Viable Product",
    "calculated_at": "2025-02-12T17:21:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no clear focus on Minimum Viable Product concepts or related methodologies.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-02-12T17:21:35",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and the implications of shipping bad code, without a focus on deployment frequency or related practices.",
    "level": "Ignored"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:04:09",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality rather than throughput as a delivery metric. While it discusses accountability and improvement in coding practices, it does not explicitly mention throughput, nor does it analyse or visualise throughput metrics. The discussion lacks depth in relation to throughput, making it a secondary topic at best.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T17:21:38",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Scrum Values.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-02-12T17:21:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping poor quality code, which does not align with Lean Product Development principles focused on minimising waste and maximising learning.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-02-12T17:21:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and poor coding practices, without a focus on Test Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-02-12T17:21:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without any focus on test automation or related practices.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T17:21:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses concepts of technical debt and coding practices, with no relevance to the Windows operating system or its functionalities.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T17:21:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, with no focus on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-02-12T17:21:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without a clear focus on empirical process control principles or Agile methodologies.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the practical implications of technical debt and the importance of addressing it within a team context, which aligns with pragmatic thinking. However, while it touches on real-world applications and problem-solving, it lacks a comprehensive exploration of Agile or Scrum frameworks, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T17:21:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no focus on employee engagement or related themes.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Increment",
    "calculated_at": "2025-05-13T21:55:06",
    "ai_confidence": 21.389,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 5.9,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses on technical debt, bad code, and software quality strategies (code reviews, testing, refactoring). The term 'increment' is used only in passing ('do it incrementally') and not in the context of the Agile Increment artifact. There's little to no discussion about the Agile Increment, its value, or delivery. The main themes are team competence, code health, and practices to avoid technical debt, not the delivery or evaluation of working software increments. Some overlap exists in the notion of 'incremental refactoring' and allocating time in sprints for debt, which may affect how teams deliver increments, but this is not explicitly aligned with the Increment concept as defined by Scrum. The audience overlaps (software teams, practitioners), but the content does not directly address the Increment artifact, making most dimensions low. No penalties apply.",
    "reasoning_summary": "This article is centered on code quality and technical debt management, with only a glancing, non-Agile-related use of 'incrementally.' It doesn't meaningfully address the Agile Increment, so confidence in its fit to the category is very low.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T17:00:25",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on addressing technical debt and improving code quality, which are important aspects of software development but do not directly discuss innovation or the mechanisms that foster it. While there are mentions of accountability and quality, these are more about maintaining standards rather than innovating. The discussion lacks explicit references to innovation metrics, learning cycles, or strategies for enhancing innovation capacity, which are crucial for the 'Ability to Innovate' category. Therefore, the confidence score reflects a low alignment with the category.",
    "level": "Ignored"
  },
  "Strategy": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Strategy",
    "calculated_at": "2025-05-13T21:55:15",
    "ai_confidence": 55.1,
    "ai_mentions": 2.4,
    "ai_alignment": 5.2,
    "ai_depth": 4.7,
    "ai_intent": 6.3,
    "ai_audience": 7.6,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content briefly mentions 'strategies' for dealing with technical debt, but the focus is on concrete development practices (code reviews, testing, refactoring, prioritisation) rather than high-level strategic alignment or planning. The main purpose is to help practitioners ship better code and manage technical debt at a team/project level, not to connect these actions explicitly to organisational strategy or long-term goals. While elements like prioritising technical debt are relevant to strategic thinking, they remain operational in nature. The audience seems to be team leads or developers, not senior leaders driving strategic vision. Overall, the article is practical and tactical, with only tangential links to the definition of 'Strategy' as a high-level, integrating framework aligning with organisational objectives.",
    "reasoning_summary": "Content shares practical ways to tackle technical debt and improve code quality, targeting developers and teams. It does mention 'strategies,' but these are operational rather than organisational or high-level. The focus is tactical, with only minimal overlap with true strategic alignment or planning.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T17:21:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and its implications, without focusing on Agile planning tools or methodologies.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T17:21:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on portfolio management or related methodologies.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, with no direct mention of the Scrum Master role or responsibilities. While it touches on team dynamics and accountability, it does not align with the core themes of the Scrum Master category, such as facilitation, coaching, or promoting agile principles. The discussion lacks depth regarding the Scrum Master's influence on team effectiveness or organisational change.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-02-12T17:22:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on individual accountability rather than team dynamics or performance strategies.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-02-12T17:22:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, which does not align with Agile Planning principles or practices.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T17:22:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on forecasting methodologies or practices within Agile and Scrum.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T17:22:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no focus on estimation techniques or Agile methodologies.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and code quality, which are important for improving outcomes in software development. However, it does not explicitly mention Evidence-Based Management or its key topics. While there is some alignment with the concept of making informed decisions about technical debt, the focus is primarily on practical strategies rather than empirical evidence or metrics related to EBM.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-02-12T17:22:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, which are not related to organisational change.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-02-12T17:22:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and coding practices, with no mention of Azure Boards or Agile project management.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T17:22:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no relevance to market share or related strategies.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Accountability",
    "calculated_at": "2025-05-13T21:55:08",
    "ai_confidence": 54.63,
    "ai_mentions": 2.7,
    "ai_alignment": 5.8,
    "ai_depth": 6.3,
    "ai_intent": 7.5,
    "ai_audience": 8.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content discusses personal and team responsibility in shipping quality code and differentiates technical debt from incompetence. While 'accountability' is mentioned (\"willingness to hold ourselves accountable\") and the overall message is about taking responsibility for outcomes, it focuses more on technical practices than on structural accountabilities in work systems. There are light references to performance ownership, code reviews (shared checks), and intent to improve outcomes, which aligns conceptually with accountability, but there is little depth about explicit accountabilities, organizational mechanisms, or role-based ownership. The primary audience is technical practitioners, matching likely readers of the 'Accountability' category, and the content remains focused. However, it lacks direct exploration of accountability as a work system mechanism, so the alignment and depth are moderate.",
    "reasoning_summary": "This post stresses personal and team responsibility for code quality and technical debt, mentioning accountability but not deeply exploring it as a structural work system concept. The content mostly targets developers and is relevant, but alignment to formal 'accountability' mechanisms is moderate.",
    "level": "Tertiary"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 42.0,
    "ai_mentions": 3,
    "ai_alignment": 35.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the importance of code quality and strategies to improve it, such as automated testing and code reviews, which are relevant to Continuous Delivery. However, it primarily focuses on technical debt and accountability rather than the broader principles and practices of Continuous Delivery itself. While there are mentions of practices that support quality in delivery, the primary focus remains on addressing technical debt rather than on Continuous Delivery as a whole.",
    "level": "Tertiary"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-12T17:22:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, with no clear focus on working agreements or team collaboration principles.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-12T17:22:17",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices without any reference to customer satisfaction or experience.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T17:22:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without addressing Agile leadership roles or practices.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-02-12T17:22:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of bad code and technical debt, without a clear focus on Continuous Integration principles or practices.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-02-12T17:22:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Lean principles or waste reduction.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T17:22:22",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear reference to the Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without a clear focus on Agile values or principles.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-02-12T17:22:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and the implications of shipping bad code, without any mention of automated testing principles, practices, or methodologies.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and the implications of shipping bad code, with no focus on the Definition of Ready or its criteria.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Definition of Done",
    "calculated_at": "2025-05-13T21:55:10",
    "ai_confidence": 33.74,
    "ai_mentions": 0.5,
    "ai_alignment": 3.8,
    "ai_depth": 4.0,
    "ai_intent": 4.5,
    "ai_audience": 6.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on code quality, technical debt, and preventing bad code, with practical development strategies like code reviews and testing. While some criteria may overlap with Definition of Done topics, there are no explicit mentions of DoD, its formal use in Agile/Scrum, or discussion of its role as a shared agreement for completion. The depth and alignment to 'Definition of Done' are weak despite some thematic connections, and the main intent is improving code and technical practice, not defining or evolving DoD.",
    "reasoning_summary": "This article emphasizes code quality and technical debt management, not the formal Definition of Done. While some practices align thematically, it doesn't directly discuss DoD or its Agile/Scrum context, so confidence in this category fit is low.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-12T17:22:29",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, with no focus on cross-functional teams or their characteristics.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of technical debt and the implications of shipping poor-quality code, which are relevant to software development practices. However, while it touches on important themes, such as the need to address technical debt, it lacks detailed exploration of methodologies or frameworks that guide software development. The discussion is somewhat informal and does not delve deeply into best practices or structured approaches, which limits its depth and alignment with the category.",
    "level": "Secondary",
    "reasoning_summary": "This content relates to software development by highlighting technical debt and the risks of releasing subpar code. However, it remains fairly informal and doesn’t provide in-depth analysis or reference established methodologies. As a result, while it’s relevant to the topic, it doesn’t fully align with the category’s focus on structured practices or comprehensive frameworks."
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-02-12T17:22:35",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, with no direct relation to Azure Repos or its functionalities.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-02-12T17:22:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without any focus on Acceptance Test Driven Development or its principles.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-02-12T17:22:38",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no mention of customer feedback or its integration into product development.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-02-12T17:22:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without a clear focus on Agile methodologies or strategic alignment.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T17:22:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no focus on collaboration tools or Agile team dynamics.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-12T17:22:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, which does not directly relate to Agile transformation principles or practices.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-02-12T17:22:43",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on personal accountability rather than operational efficiency or methodologies like Agile, DevOps, or Lean.",
    "level": "Ignored"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on personal experiences and opinions rather than structured decision-making methodologies.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the implications of shipping bad code and the concept of technical debt, which are relevant to the quality and functionality of software. However, it lacks a direct focus on working software as defined in the category, and the discussion is more about the consequences of poor coding practices rather than delivering functional software that meets user needs. The mention of technical debt is relevant but does not fully align with the core themes of working software, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Sprint Review": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T21:55:13",
    "ai_confidence": 7.95,
    "ai_mentions": 0.1,
    "ai_alignment": 2.3,
    "ai_depth": 2.45,
    "ai_intent": 1.6,
    "ai_audience": 1.8,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses on technical debt, code quality, and strategies like code reviews and automated testing, but makes no explicit mention of Sprint Review or its core concepts. While there is a passing reference to allocating time in sprints for addressing technical debt, the thrust of the piece is not about the Sprint Review event, its process, stakeholder involvement, or Scrum practices specific to Sprint Reviews. Direct mention and conceptual alignment to 'Sprint Review' are nearly absent, leading to a very low confidence score.",
    "reasoning_summary": "This content centers on handling technical debt and improving code quality, offering little relevance to Sprint Review. It lacks mentions, discussion, or insights related to Sprint Review processes or goals, resulting in a very low matching confidence.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-13T21:55:06",
    "ai_confidence": 19.06,
    "ai_mentions": 0.5,
    "ai_alignment": 2.7,
    "ai_depth": 2.8,
    "ai_intent": 2.0,
    "ai_audience": 6.1,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on preventing bad code and managing technical debt via code reviews, testing, and prioritization. While it advocates for high-quality code and sustainable practices, it does not discuss SRE principles, concepts like SLOs/SLIs, incident response, automation for reliability, or concrete reliability engineering practices. There is no direct mention of Site Reliability Engineering nor use of related terminology. The audience (software developers) is tangentially related to SRE, but the material addresses standard development quality practices, not reliability in production systems.",
    "reasoning_summary": "This content is centered on coding quality and technical debt, targeting software developers, but has little connection to Site Reliability Engineering—missing SRE concepts like reliability, automation for operations, or monitoring. Thus, the confidence score for this category is low.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T17:22:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no clear focus on psychological safety or related themes.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-12T17:22:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no focus on customer retention strategies or user engagement.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T17:22:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Lean Startup principles or methodologies.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T17:22:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the concepts of technical debt and code quality, with no mention of asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-02-12T17:22:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices without any focus on experimentation or hypothesis-driven approaches.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-12T17:23:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no mention of revenue per employee or related financial metrics.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-02-12T17:23:01",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, with no mention of Azure Pipelines or related CI/CD practices.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-02-12T17:23:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Lean principles or concepts.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-02-12T17:23:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T17:23:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the concept of technical debt and individual coding practices, without addressing large scale Agile principles or frameworks.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Product Backlog",
    "calculated_at": "2025-05-13T21:55:12",
    "ai_confidence": 34.12,
    "ai_mentions": 0.5,
    "ai_alignment": 3.2,
    "ai_depth": 3.6,
    "ai_intent": 3.8,
    "ai_audience": 5.8,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on distinguishing technical debt from bad coding practices, and emphasizes strategies like code reviews, automated testing, and prioritization. While it briefly discusses keeping a running list of technical debt and allocating sprint time, there is no explicit mention of a Product Backlog or detailed discussion around backlog management, prioritization techniques specific to backlogs, or the Product Owner's role. Audience alignment is moderate, as Agile teams may find it relevant, but the core context remains technical debt, not backlog management.",
    "reasoning_summary": "This content centers primarily on technical debt and code quality, only lightly touching on backlog-related behaviors (like making lists and sprint prioritization), but falls short of directly addressing Product Backlog practices or concepts. Thus, its fit for the 'Product Backlog' category is low.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-02-12T17:23:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices without addressing team dynamics or motivation.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-02-12T17:23:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without any focus on hypothesis formulation, experimentation, or validated learning.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-12T17:23:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no mention of Value Stream Mapping or related Lean principles.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-02-12T17:23:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, which are not related to product discovery methodologies or understanding customer needs.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-02-12T17:23:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, rather than focusing on frequent releases or related practices.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-12T17:23:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without addressing Agile principles or philosophy.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T17:23:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without a focus on long-term strategic objectives or business agility.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-11T08:57:03",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, with no direct mention of Lead Time. While it discusses the importance of accountability and quality in software development, it does not align with the core themes of Lead Time as an observability metric or its relationship with Cycle Time. The discussion lacks depth regarding Lead Time, providing only a vague connection to efficiency without specific techniques or strategies related to measuring or optimising Lead Time.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T17:23:22",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without any reference to Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-02-12T17:23:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, which are not central to product strategy.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T17:23:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and coding practices, without a focus on sensemaking or decision-making in complex environments.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 10,
    "final_score": 78.0,
    "reasoning": "The content discusses the concept of technical debt and the implications of shipping bad code, which aligns with the principles of software craftsmanship. However, while it touches on important aspects of technical debt management, it lacks a comprehensive exploration of best practices or methodologies that contribute to high-quality software development. The discussion is somewhat informal and does not delve deeply into the technical practices or principles that would elevate it to a higher confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content relates to software craftsmanship by addressing technical debt and the risks of releasing poor-quality code. However, it doesn’t fully explore best practices or established methodologies, and its informal tone limits its depth. As a result, while relevant, it doesn’t provide a thorough or highly technical perspective on software craftsmanship."
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T17:23:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the concepts of technical debt and code quality, without addressing transparency or its importance in Agile processes.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-02-12T17:23:31",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without a clear focus on Scrum roles, team dynamics, or collaboration practices.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-02-12T17:23:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and the implications of shipping bad code, with no clear focus on Cycle Time or its measurement.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-02-12T17:23:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on individual accountability rather than team improvement or continuous learning principles.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T17:23:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and coding practices, without a focus on trend analysis within Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-02-12T17:23:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without a focus on self-organisation principles or practices.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the concept of technical debt and the importance of addressing it, which aligns with the principles of software craftsmanship and quality assurance. However, while it touches on the need to stop shipping bad code, it lacks a broader discussion on best practices, coding standards, or continuous improvement processes. The focus is primarily on the consequences of poor coding choices rather than a comprehensive exploration of engineering excellence.",
    "level": "Secondary"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-02-12T17:23:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, which are not directly related to the strategic use of digital technologies for business transformation.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-10T13:04:06",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on software development practices, particularly around technical debt and code quality, rather than system configuration. While it touches on aspects like automated testing and code reviews, these are not directly related to system configuration as defined in the category. The discussion lacks explicit references to configuration management tools, system setup, or integration of hardware and software components, which are central to the category.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 78.0,
    "ai_mentions": 85.0,
    "ai_alignment": 75.0,
    "ai_depth": 70.0,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content explicitly discusses technical debt, differentiating between known and unknown types, and highlights the importance of addressing it. It provides a conceptual understanding of technical debt as a consequence of poor coding practices and the need for prioritisation in remediation. However, while it touches on the implications of shipping bad code, it lacks detailed strategies or methodologies for managing technical debt, which slightly lowers the depth score.",
    "level": "Secondary"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-12T17:23:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no mention of remote working or Agile methodologies.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T17:23:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the concepts of technical debt and code quality, without reference to evidence-based leadership principles or practices.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T17:23:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and coding practices, with no focus on deployment strategies or methodologies.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T17:23:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-02-12T17:23:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, which are more related to software development practices rather than strategic product management discussions.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T17:23:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without a focus on organisational culture or its influence on Agile methodologies.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-02-12T17:23:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, which are not directly related to version control practices.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T17:23:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, with no clear focus on coaching practices or themes related to facilitating growth and development within teams.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T17:24:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, which are not central to organisational dynamics or systems thinking.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-02-12T17:24:01",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, which are not directly related to product validation methodologies or user engagement.",
    "level": "Ignored"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-02-12T17:24:05",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without a clear focus on release management practices or processes.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T17:24:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, which are not directly related to entrepreneurship or the entrepreneurial process.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on personal experiences rather than technical leadership principles or agile methodologies.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-02-12T17:24:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality rather than identifying or resolving specific technical issues.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-02-12T17:24:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on change management principles or strategies.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the concept of technical debt, which is relevant to engineering practices, particularly in the context of clean code and the implications of shipping poor-quality code. However, it lacks explicit references to Agile methodologies, clean code principles, or practices like TDD and CI/CD. The discussion is somewhat superficial and does not delve deeply into the methodologies or practices that would enhance the understanding of engineering practices in an Agile context.",
    "level": "Secondary"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-12T17:24:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, without any reference to Agile frameworks or principles.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 30,
    "final_score": 42.0,
    "reasoning": "The content discusses the importance of quality in code and mentions automated testing as a strategy to improve code quality. However, it does not explicitly focus on Test First Development principles or practices, such as defining success criteria before implementation or the specific methodologies like TDD or ATDD. The discussion on technical debt and code quality is relevant but secondary to the core themes of Test First Development.",
    "level": "Tertiary"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T17:24:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and its implications, without a clear focus on Scrum principles, roles, or practices.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-02-12T17:20:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and personal experiences with coding, without any mention of Azure DevOps or its functionalities.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T17:20:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on decision-making processes or the principles of decision theory.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-02-12T17:20:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality rather than optimising work throughput or flow efficiency.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-02-12T17:20:43",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and coding quality, without a focus on market adaptability or related methodologies such as Agile, DevOps, or Lean.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-02-12T17:20:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality without addressing the interplay between technology and organisational structures.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-02-12T17:20:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and coding practices, without a focus on organisational agility or related strategies.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-12T17:20:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no clear focus on Systems Thinking principles or applications.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without a focus on metrics, data utilisation, or learning mechanisms.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-02-12T17:20:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, which does not directly relate to Agile Product Management principles or practices.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without any focus on installation or configuration processes.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 25,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of accountability, code quality, and technical debt, which are relevant to DevOps principles. However, it primarily focuses on software development practices rather than the broader DevOps philosophy, which includes collaboration and automation across teams. While it touches on aspects like code reviews and automated testing, it lacks a comprehensive exploration of DevOps culture and practices, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 55.0,
    "ai_mentions": 30.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 55.0,
    "reasoning": "The content discusses technical debt, which is a relevant aspect of technical excellence, but it primarily focuses on the consequences of poor coding practices rather than on methodologies or practices that enhance technical excellence. While it touches on the need to address technical debt, it lacks a detailed exploration of engineering practices like TDD, CI/CD, or modular architecture, which are central to the category.",
    "level": "Tertiary"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-02-12T17:21:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Lean principles or methodologies.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-02-12T17:21:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on personal experiences and opinions rather than strategies or methodologies related to value delivery.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T17:21:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and its implications, which are directly related to Agile and software development practices.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T17:21:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-02-12T17:21:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on Value Stream Management principles or practices.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-02-12T17:21:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the concept of technical debt and personal accountability in coding, without addressing enterprise agility or its broader implications on organisational performance and culture.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-02-12T17:21:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the concepts of technical debt and code quality, which are not central to business agility principles or practices.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-02-12T17:21:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, which does not directly relate to the comprehensive management of the application lifecycle.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T17:21:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and coding practices, with no focus on psychological principles or organisational behaviour.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-02-12T17:21:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the distinction between bad code and technical debt, focusing on individual accountability rather than the methodologies and practices involved in product delivery.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-02-12T17:21:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concepts of technical debt and code quality, without a clear focus on complexity science or its principles.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T17:21:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the concept of technical debt and the implications of shipping bad code, lacking personal anecdotes or reflections related to Agile, Scrum, or DevOps.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-02-17T12:00:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and code quality, with no clear focus on platform engineering or related concepts.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:00:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses issues related to technical debt and code quality, with no clear focus on BetaCodex principles or practices.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on technical debt and code quality rather than the Agile Product Operating Model. While it touches on accountability and team dynamics, it does not explicitly discuss the principles or practices of APOM, nor does it address the transition from project to product ethos or the integration of agile methodologies with product management. Therefore, the confidence score reflects a low alignment with the category.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:48:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and coding practices, with no clear focus on leadership or related themes.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Social Technologies",
    "calculated_at": "2025-08-07T06:10:42",
    "ai_confidence": 51.25,
    "ai_mentions": 1.2,
    "ai_alignment": 5.7,
    "ai_depth": 5.9,
    "ai_intent": 5.6,
    "ai_audience": 7.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 51.0,
    "reasoning": "The content centers on practical strategies (e.g., code reviews, testing, refactoring) to address technical debt and bad code. There is some overlap with social technologies, notably via code reviews and fostering collaboration, but discussion is mainly technical quality, not organisational frameworks or emergent collective intelligence. The points on team collaboration are present but not deeply developed—the main theme is competency and code quality rather than optimising value delivery through adaptive social processes. The audience matches (software teams), and the content is mostly relevant, but explicit discussion of Agile, self-organisation, or organisational improvement practices is limited. No penalties applied.",
    "reasoning_summary": "Some relevant elements (team collaboration, code reviews), but focus is on code quality and technical debt, not on frameworks or principles central to Social Technologies. Partial fit; content only tangentially addresses the category's intent.",
    "level": "Tertiary"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-02-24T13:32:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses issues related to technical debt and code quality, without a focus on Internal Developer Platforms or their role in streamlining development processes.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:32:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical debt and code quality, with no mention of AI or its application in Agile or DevOps.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content briefly touches on the concept of technical debt, which is relevant to software development but does not explicitly mention Scrum or its principles, roles, or events. The discussion lacks depth regarding Scrum practices and does not align with the core themes of the Scrum framework, making it a secondary focus rather than a primary one.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift Left Strategy",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 28,
    "ai_depth": 22,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses strategies for improving code quality and addressing technical debt, which aligns with the Shift-Left Strategy's focus on integrating testing and quality assurance earlier in the development process. It mentions automated testing and code reviews, which are techniques that support a Shift-Left approach. However, the primary focus is on technical debt rather than explicitly on the Shift-Left Strategy itself, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses strategies for improving code quality and addressing technical debt, which aligns with the principles of Continuous Improvement. It mentions practices like code reviews, automated testing, and refactoring, which are techniques that foster a culture of learning and incremental enhancement. However, while it touches on these themes, the primary focus is on technical debt rather than a broader discussion of Continuous Improvement as a systematic approach. Therefore, while there is significant relevance, it does not fully encapsulate the category's core themes.",
    "level": "Secondary",
    "reasoning_summary": "The content is relevant to Continuous Improvement as it highlights methods like code reviews and refactoring that support ongoing enhancement. However, its main emphasis is on managing technical debt rather than exploring Continuous Improvement as a comprehensive, systematic process, so it only partially fits the category."
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on addressing technical debt and improving code quality, which are important aspects of software development but do not directly discuss Common Goals within Agile or DevOps frameworks. While there are mentions of accountability and team collaboration, these are not explicitly tied to shared objectives or strategic alignment. The discussion lacks depth in connecting these concepts to the overarching mission of the organisation or the use of frameworks like OKRs, which are central to the Common Goals category.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 30,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of accountability and quality in software development, directly addressing the concept of competence. It highlights the need for continuous improvement and skill development through practices like code reviews and automated testing, which align well with the core themes of competence. The depth of discussion is substantial, providing specific strategies for fostering a culture of competence and addressing technical debt, although it could further elaborate on the distinction between performative activity and genuine progress.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the competence category, as it explores how accountability and quality practices like code reviews and automated testing drive skill development in software teams. It offers practical strategies for nurturing competence and managing technical debt, though it could further clarify the difference between real progress and surface-level activity."
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, which are important aspects of software development but do not directly address the One Engineering System framework or its principles. While there are mentions of improving processes like code reviews and automated testing, these are not explicitly tied to the integration and standardisation of engineering practices across teams as outlined in the 1ES category. The discussion lacks a clear connection to the broader themes of 1ES, such as collaboration across teams or the impact of a unified engineering system on software delivery timelines.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-10T13:03:45",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, with a strong emphasis on accountability and improvement within development teams. While it touches on themes of responsibility and proactive measures, it does not explicitly discuss Agentic Agility or differentiate between human and AI capabilities in the context of agility. The discussion lacks depth regarding the intentional shaping of outcomes and does not align closely with the core principles of Agentic Agility.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:03:48",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses technical debt and code quality, which are important aspects of product development. However, it primarily focuses on technical implementation and accountability rather than broader product development methodologies or customer-centric approaches. While it touches on iterative practices like code reviews and refactoring, it lacks a comprehensive exploration of Agile principles or customer feedback integration, which are central to the category.",
    "level": "Secondary"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:03:51",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, which are important aspects of software development but do not directly address broader project management principles or methodologies. While it touches on accountability and team dynamics, it lacks a comprehensive discussion on project lifecycle phases, governance structures, or specific project management tools. Therefore, it aligns with the category only in a limited capacity.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:03:54",
    "ai_confidence": 12.0,
    "ai_mentions": 0.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, with no direct mention of Hybrid Agile methodologies or their challenges. While it discusses accountability and team dynamics, it does not critically examine the integration of traditional and agile practices, nor does it address the specific themes outlined for the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:03:57",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality rather than scaling methodologies or frameworks. While it touches on team accountability and collaboration, it does not delve into the complexities of scaling Agile practices or cross-team coordination, which are central to the 'Scaling' category.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-10T13:04:00",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and code quality, which are relevant to software development practices, but it does not specifically mention GitHub or its functionalities. While it touches on concepts like code reviews and automated testing, which can be related to GitHub practices, the primary focus is on general software development principles rather than GitHub-specific methodologies or tools.",
    "level": "Ignored"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T17:00:17",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 30.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 20,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on technical debt and code quality rather than directly addressing Time to Market. While it discusses the importance of improving code quality, which can indirectly affect Time to Market, it does not explicitly mention Time to Market or related metrics. The discussion on strategies for addressing technical debt may contribute to faster delivery in a broader sense, but the primary focus remains on accountability and code quality rather than optimising processes for quicker market delivery.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T17:00:35",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 30.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on technical debt and improving code quality, which are not directly related to the concept of Unrealised Value. While there are mentions of accountability and improvement, these discussions do not explicitly address the potential value that can be captured through further innovations or improvements. The content lacks a clear exploration of untapped opportunities or strategies for identifying unrealised value, leading to a low confidence score in this category.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T17:00:40",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on technical debt and code quality rather than Current Value in the context of Evidence-Based Management. While it touches on accountability and the importance of quality, it does not explicitly discuss metrics or indicators related to Current Value, nor does it provide insights into customer satisfaction or revenue impact. The discussion lacks depth in terms of practical application or measurement of Current Value, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T17:00:20",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, discussing strategies for improvement without any explicit mention of Agnostic Agile principles or methodologies. While it touches on accountability and quality, it does not engage with the core themes of Agnostic Agile, such as the importance of context-driven agility or comparisons with traditional frameworks. The discussion lacks depth regarding Agnostic Agile, making it a secondary topic at best.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T17:00:28",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality within software development, discussing strategies for improving these aspects. While it touches on accountability and team collaboration, it does not explicitly address the concept of treating the organisation as a product or integrating customer feedback into organisational design. The discussion lacks depth in relation to CaaP principles and does not provide insights into organisational culture or cross-functional collaboration, which are key elements of the category. Therefore, the confidence score reflects a minimal connection to the 'Company as a Product' classification.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T17:00:32",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on technical debt and code quality in software development, with no direct mention of Cell Structure Design or its principles. While there are themes of accountability and team collaboration, these do not align with the core concepts of decentralised organisational structures or the Beta Codex. The discussion lacks depth regarding the characteristics of autonomous cells or the impact of decentralisation, leading to a very low confidence score.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-13T21:55:09",
    "ai_confidence": 6.65,
    "ai_mentions": 0.1,
    "ai_alignment": 0.25,
    "ai_depth": 0.2,
    "ai_intent": 0.3,
    "ai_audience": 5.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content discusses practical strategies to improve code quality and manage technical debt, targeting software developers and teams. It does not reference Liberating Structures directly or indirectly, nor does it discuss facilitation techniques, group processes, or collaborative frameworks. No methods or ideas specific to Liberating Structures are touched on. Audience is partly aligned (team-level practitioners), but content is unrelated to the category's core focus.",
    "reasoning_summary": "This article is about improving software quality and managing technical debt, not Liberating Structures. It offers practical advice for developers but never references facilitation methods or structures, so it's a very poor fit for the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T17:00:44",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt and code quality, with no direct mention of Open Space Agile principles or practices. While it discusses accountability and collaboration within a development team, these themes do not align closely with the core concepts of Open Space Agile, such as collective participation and psychological safety. The depth of discussion is centred on technical practices rather than organisational agility or collaborative change processes, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 68.0,
    "ai_mentions": 3,
    "ai_alignment": 65.0,
    "ai_depth": 70.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses actionable strategies to tackle technical debt and improve code quality, aligning well with principles such as continuous improvement and respect for people. It emphasizes accountability within the team and promotes processes like code reviews and automated testing, which reflect the principle of self-management. Although it does touch on principles, its primary focus is more on practical solutions to issues rather than a deep exploration of guiding principles themselves, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Tool": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 35.0,
    "ai_mentions": 5,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": null,
    "final_score": 35.0,
    "reasoning": "The content discusses methods for improving code quality and managing technical debt, including code reviews and automated testing. While it touches on tools and practices that relate to this, the focus is more on best practices and methodologies rather than specific tools or technologies. The mentions of 'automated testing' and 'code reviews' hint at tools but do not delve deeply into any specific tools or their functionalities as required for a stronger alignment with the 'Tool' category. Therefore, the alignment and depth scores are lower, resulting in a moderate confidence score.",
    "level": "Ignored"
  },
  "Philosophy": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on practical strategies for managing technical debt and improving code quality rather than engaging with philosophical discussions about the foundational beliefs behind these practices. While it briefly touches on the importance of accountability, it lacks deeper exploration of the underlying philosophies that influence decision-making and team dynamics in software development.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 35.0,
    "ai_mentions": 5,
    "ai_alignment": 30.0,
    "ai_depth": 40.0,
    "non_ai_confidence": null,
    "final_score": 35.0,
    "reasoning": "The content discusses technical debt and accountability in software development, but it primarily focuses on practices and tools (like code reviews and automated testing) rather than the underlying principles and structured methodologies of disciplines such as Agile or DevOps. While it touches on the importance of a disciplined approach to coding, it lacks a strong, systematic discourse on the principles and evolution of a discipline itself, leading to a lower alignment score.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 15.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content does not focus on artifacts as formal representations of work but rather addresses issues related to technical debt and code quality. There are no direct mentions of specific artifacts such as Product Backlogs or Increment, nor does the discussion delve into the structural role that artifacts play in frameworks like Agile or Scrum. While concepts of accountability and team culture are touched on, these are abstract discussions rather than an exploration of tangible constructs. Therefore, it aligns only marginally with the key topics associated with the 'Artifact' category.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 20.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 25.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content focuses primarily on tackling technical debt and improving code quality, rather than discussing observability explicitly. While there are mentions of practices like code reviews and automated testing that could indirectly relate to observability outcomes, the main topics do not include observability principles or concepts, nor do they elaborate on metrics, logs, or traces. The discussion lacks a clear connection to the overall understanding of system states through observability. Therefore, the confidence score reflects minimal relevance to the observability category.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 80.0,
    "ai_mentions": 3,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": null,
    "final_score": 80.0,
    "reasoning": "The content extensively discusses practices such as code reviews, automated testing, and refactoring, which align closely with enhancing team effectiveness and continuous improvement. It also emphasizes accountability and quality in coding, linking these practices to resolving technical debt. However, while the discussion is rich in actionable strategies, it lacks a more explicit focus on the specific practices of retrospectives or agile frameworks, which slightly limits its alignment. Overall, the content maintains a strong focus on actionable practices, justifying a high confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it thoroughly explores methods like code reviews and automated testing that drive team effectiveness and ongoing improvement. While it doesn’t delve deeply into retrospectives or agile frameworks, its emphasis on accountability and quality in coding clearly supports the category’s goals, making it highly relevant."
  },
  "Method": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Method",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 78.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 38,
    "non_ai_confidence": null,
    "final_score": 78.0,
    "reasoning": "The content provides specific strategies for tackling technical debt, including detailed suggestions on code reviews, automated testing, and refactoring. These strategies reflect a procedural approach to addressing technical debt in software development, aligning closely with the 'Method' category. While the focus is primarily on improving code quality and accountability, these discussions do not comprehensively translate into a structured, step-by-step methodological framework as outlined in the category definition. Hence, while there is significant alignment and depth, it does not fully encapsulate the concept of method in a rigid sense.",
    "level": "Secondary",
    "reasoning_summary": "The content shares practical ways to manage technical debt, such as code reviews and automated testing, which aligns well with the 'Method' category. However, it stops short of outlining a formal, step-by-step methodology, so while it’s methodical in nature, it doesn’t fully meet the strict definition of a method."
  },
  "Model": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Model",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 20.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content primarily discusses technical debt and strategies for improving code quality, which are practical concerns in software development but do not directly engage with conceptual models or frameworks appropriate for the 'Model' category. There are some elements of prioritization and decision-making involved in managing technical debt, but these do not align strongly with the key themes outlined for the 'Model' category, such as specific frameworks or models like the Cynefin Framework or Lean principles. The discussion lacks sufficient depth regarding models themselves, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": null,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses technical debt and strategies for improving code quality within a development team. While it touches on practices that could relate to frameworks, such as code reviews and automated testing, it does not explicitly reference any Agile, DevOps, or Lean frameworks or discuss how frameworks can be adapted in different contexts. Therefore, it lacks direct references to the Framework category and does not provide sufficient depth or alignment with its core themes.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 65.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": null,
    "final_score": 65.0,
    "reasoning": "The content outlines specific actionable strategies aimed at improving code quality and addressing technical debt, which can be linked to tenets of practices in Agile and DevOps such as continuous improvement and collaboration. However, it does not focus on explicit guiding rules or principles from Agile or DevOps methodologies, but rather on the author's personal approaches to quality. Thus, while there is a connection to the themes of tenets, the discussion lacks a primary focus on established tenets or doctrines.",
    "level": "Secondary"
  },
  "Capability": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:06:23",
    "ai_confidence": 45.0,
    "ai_mentions": 10,
    "ai_alignment": 30,
    "ai_depth": 35,
    "non_ai_confidence": null,
    "final_score": 45.0,
    "reasoning": "The content addresses aspects of quality and technical debt, discussing strategies like code reviews and refactoring, which are aligned with developing capabilities in a team. However, it primarily revolves around practical techniques and tools rather than enduring competencies and cultural integration, which are central to the 'Capability' category. As such, the discussion feels secondary to the main focus of improving code quality and addressing incompetence rather than building systemic organizational capabilities.",
    "level": "Tertiary"
  },
  "Service Level Expectation": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:39",
    "ai_confidence": 2.753,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 0.3,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses almost exclusively on technical debt, code quality, and related practices such as code reviews and automated testing. It does not mention Service Level Expectation (SLE) directly or indirectly, nor does it discuss any of the core aspects of the SLE definition such as cycle time forecasts, elapsed time ranges, probability, or predictability of delivery. There is no reference to Agile, Scrum, or Kanban metrics around forecasting or workflow transparency tied to SLE. The intent and audience are primarily developers aiming to improve technical outcomes, not teams tracking or improving SLEs. No relevant authorities or explicit SLE concepts are cited or discussed. For these reasons, all dimension scores are very low, resulting in a minimal confidence score and clear justification for exclusion from the SLE classification.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Ethos",
    "calculated_at": "2025-05-13T21:55:12",
    "ai_confidence": 42.85,
    "ai_mentions": 1.3,
    "ai_alignment": 4.5,
    "ai_depth": 4.7,
    "ai_intent": 5.1,
    "ai_audience": 7.7,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content focuses on confronting bad code and technical debt through personal and team responsibility, acknowledging the need for accountability and quality in software delivery. However, it does not explicitly discuss the deeper foundational system ethos underpinning Agile, DevOps, or Lean systems. The discussion sticks mostly to practices and personal standards, brushing but not delving into ethos as defined. It hints at cultural and quality commitments but doesn't address core, demonstrable values beneath system evolution or delivery. There's also minimal reference to ethos concepts, with the bulk focused on actionable practices and advice. Depth is moderate, with the primary audience being technical practitioners seeking improvement but not explicit reflection on organizational or system-level ethos.",
    "reasoning_summary": "While the post emphasizes personal accountability and quality, it stays at the level of practice and mindset rather than deeply exploring system ethos. There's limited conceptual overlap with 'Ethos' as defined, resulting in a moderate confidence score.",
    "level": "Tertiary"
  },
  "Customer Focus": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T21:55:13",
    "ai_confidence": 16.475,
    "ai_mentions": 0.7,
    "ai_alignment": 2.3,
    "ai_depth": 2.8,
    "ai_intent": 2.1,
    "ai_audience": 4.2,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content addresses code quality, technical debt, and fostering responsibility in software teams, but does not explicitly mention customer focus, customer outcomes, or measurable customer value. The main themes are internal practices—code reviews, testing, and refactoring—focused on improving team output and code health. There is no meaningful link to defining, measuring, or using customer outcomes to drive delivery. While healthier code can indirectly benefit customers, the article never discusses user feedback loops, customer-centric prioritization, analytics, or product strategy grounded in customer needs. Audience targeting aligns reasonably with practitioners in agile/dev settings, but signal-to-noise is moderate because content is tangential to the core customer focus definition.",
    "reasoning_summary": "This article centers on technical debt, code quality, and internal team practices, not on customer outcomes or value. While practitioners might benefit, there's no substantial alignment to customer focus as defined—no direct, actionable discussion of measuring or prioritizing by customer needs.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "FquWl26Uc8Y",
    "category": "First Principal",
    "calculated_at": "2025-05-13T21:55:06",
    "ai_confidence": 16.25,
    "ai_mentions": 0.4,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.3,
    "ai_audience": 4.3,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content addresses quality, technical debt, and personal/team responsibility but never directly explores first principles or frames any discussion within them. It proposes actionable strategies (code reviews, testing, refactoring) and outlines distinctions between technical debt and incompetence, yet does not reference foundational, immutable principles as non-negotiable constraints (per definition). The advice is context-dependent and pragmatic, not articulated as first principles. Audience is software practitioners, partly overlapping with the target but not strictly within the first principles context.",
    "reasoning_summary": "This content gives practical advice on technical debt and code quality, but it doesn't identify, explain, or apply first principles as non-negotiable foundations. It focuses on context-driven strategies for improvement, so it doesn't fit the strict definition of the First Principal category.",
    "level": "Ignored"
  },
  "Definition of Workflow": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-23T22:06:18",
    "ai_confidence": 10.7,
    "ai_mentions": 0.5,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 3.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses entirely on distinguishing between technical debt and incompetence, providing advice on preventing bad code via testing, code review, and prioritising debt repayment. There are no explicit or implicit references to the Definition of Workflow, Kanban principles, WIP limits, or related process agreements. The discussion stays at the level of code quality practices and contains no policy or explicit workflow modeling. The closest alignment is minor discussion of prioritisation and documentation, but these relate to debt management, not workflow as defined by Kanban guides or agile theory.",
    "reasoning_summary": "This content does not address the Definition of Workflow. It focuses on technical debt, code quality, and team accountability without referencing Kanban, explicit workflow policies, or making work visible through workflow definitions.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:04:43",
    "ai_confidence": 23.38,
    "ai_mentions": 1.2,
    "ai_alignment": 3.4,
    "ai_depth": 3.7,
    "ai_intent": 2.9,
    "ai_audience": 7.3,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content primarily addresses how to prevent bad code and manage technical debt, focusing on strategies like code reviews, automated testing, and refactoring. While it discusses team quality and accountability, it frames them generically around 'developers' and 'teams,' never explicitly referencing the formal Product Developer accountability or the specific collective responsibilities, structure, or behaviors defined for Product Developers. The audience is practitioners, but content lacks alignment with Product Developer role definition, and there are no direct category mentions.",
    "reasoning_summary": "This content centers on general software development quality and technical debt, lacking focus on the Product Developer accountability. While it addresses relevant practices, it doesn't discuss the formal role, structure, or responsibilities that define Product Developers within frameworks like Scrum.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:04:45",
    "ai_confidence": 12.85,
    "ai_mentions": 0.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.2,
    "ai_audience": 3.1,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on improving code quality and addressing technical debt through practices like code reviews, testing, and prioritizing work. While it encourages collaboration within teams, all references are strictly about human team members and traditional software development practices. There is no mention of AI agents, human-AI collaboration, augmented decision-making, or the socio-technical factors at the heart of collective intelligence as defined. Audience is broadly relevant to practitioners interested in team practices but not specific to human-AI teams or collective intelligence contexts.",
    "reasoning_summary": "This content discusses human team strategies for technical debt and code quality but does not address human-AI collaboration or collective intelligence. Its intent and subject matter are outside the focus of the category.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-23T09:04:37",
    "ai_confidence": 8.5,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.7,
    "ai_audience": 1.1,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content does not reference OKRs directly or indirectly. It focuses exclusively on technical debt, code quality, and developer accountability. There are no mentions of strategic alignment, outcome measurement, OKR practices, or frameworks such as 'Measure What Matters.' Even the scoring/prioritization of technical debt is not positioned in OKR terms. The content is practical advice aimed at software developers and does not address the OKR audience or principles.",
    "reasoning_summary": "This content is entirely centered on technical debt and code quality in software development, with no reference to Objective Key Results or their related frameworks, principles, or strategic alignment. It does not fit the OKR category.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:25",
    "ai_confidence": 36.45,
    "ai_mentions": 0.3,
    "ai_alignment": 3.2,
    "ai_depth": 3.6,
    "ai_intent": 3.5,
    "ai_audience": 5.0,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "Direct mentions of 'Agentic Engineering' or related terminology are absent—the content never discusses agency, decentralisation, observability, or AI collaboration. The narrative revolves around technical debt, code quality, and practical team habits such as code reviews, automated testing, and refactoring. While these are essential engineering themes, the discussion doesn't frame them as mechanisms for maximizing human or AI agency, nor does it connect them to philosophical or systemic concepts indicated in Agentic Engineering. The focus remains at a practical, team- and developer-level, without exploring systemic autonomy, feedback-driven adaptation, or decision-making frameworks. The audience (developers and teams) partly matches, but the thematic focus is on responsibility and craft, not agentic design, so signal-to-noise is moderate.",
    "reasoning_summary": "The content focuses on technical debt, code quality, and practical engineering habits. While it's relevant for developers, it does not address agentic practices, decentralisation, or human/AI agency, so alignment with Agentic Engineering is minimal.",
    "level": "Ignored"
  },
  "Agentic Software Delivery": {
    "resourceId": "FquWl26Uc8Y",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:34",
    "ai_confidence": 17.914,
    "ai_mentions": 0.3,
    "ai_alignment": 2.0,
    "ai_depth": 2.1,
    "ai_intent": 2.1,
    "ai_audience": 6.2,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on technical debt, code quality, and strategies like code reviews, automated testing, and refactoring. There are no explicit or implied discussions of agentic principles, autonomous AI agents, or their integration with human expertise and organisational context. While modern engineering practices (like automated testing) are mentioned, these references are not in an agentic or AI-augmented delivery context but rather in traditional best practices. The audience is development practitioners, but the alignment with agentic software delivery is minimal and indirect. There is no reference to AI agency, context-aware systems, or feedback loops involving autonomous agents. The fit is marginal and mostly coincidental regarding some engineering practices.",
    "reasoning_summary": "The content does not address agentic delivery or AI integration. It focuses on traditional code quality and technical debt management, making any fit with 'Agentic Software Delivery' minimal and incidental.",
    "level": "Ignored"
  }
}