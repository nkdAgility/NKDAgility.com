{
  "Team Collaboration": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Team Collaboration",
    "calculated_at": "2025-08-07T11:25:55",
    "ai_confidence": 45.2,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 5.1,
    "ai_intent": 4.9,
    "ai_audience": 6.4,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content is primarily focused on the technical and workflow impact of frequent deployments, such as code quality, deployment frequency, technical debt, and iterative development. While team dynamics are occasionally implied (e.g., accountability about colleagues and team confidence), there is minimal direct or deep discussion about techniques for collaboration, communication, or shared ownership as defined for 'Team Collaboration.' There are no explicit or frequent mentions of team collaboration, nor does the content delve into the mechanics of teamwork, shared ownership in Agile, or fostering a collaborative culture. The audience—developers and technical teams—is somewhat aligned, but the focus is not truly on collaboration but rather process improvement.",
    "reasoning_summary": "Content centers on deployment frequency and code quality, with only minor, implicit references to teamwork. There is low direct fit for 'Team Collaboration'; the topic and intent do not align strongly with the category definition.",
    "level": "Tertiary"
  },
  "Minimum Viable Product": {
    "category": "Minimum Viable Product",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 55.0,
    "non_ai_confidence": 0,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with MVP principles. It highlights the need for rapid feedback and learning, key aspects of MVPs. However, it does not explicitly mention MVP or its definition, and the focus is more on deployment practices rather than the MVP concept itself.",
    "level": "Secondary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the importance of frequent deployments and how they can reduce technical debt, improve code quality, and enhance customer feedback. It aligns well with the core themes of deployment frequency in Agile and DevOps, providing detailed insights into the benefits of smaller batch sizes and continuous delivery practices. The depth of discussion is substantial, covering various aspects such as maintainability, customer interaction, and the impact on team dynamics.",
    "level": "Primary"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can improve code quality and user feedback, which indirectly relates to throughput as a delivery metric. However, it does not explicitly define or calculate throughput, nor does it focus on throughput as a primary metric for delivery capacity. The discussion is more about deployment frequency and its impact on development practices rather than a thorough analysis of throughput itself.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Scrum Values",
    "calculated_at": "2025-08-07T11:25:55",
    "ai_confidence": 27.47,
    "ai_mentions": 0.1,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 1.2,
    "ai_audience": 8.2,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content centers on frequent code deployments and their impact on code quality, technical debt, and development processes. There is almost no mention (explicit or implicit) of Scrum Values or their key concepts (commitment, courage, focus, openness, respect). Alignment is low, as the content primarily discusses DevOps and iterative delivery, not the human or team dynamics at the core of Scrum Values. While some aspects, such as teamwork or commitment to improvement, might be interpreted in a broad sense, they are not positioned in the context of Scrum Values or principles. Audience and signal scores are higher due to targeting practitioners and focus on practical process improvement, but low relevance to Scrum Values is reflected in the rest of the scores. No penalties were necessary as the content is not outdated or oppositional.",
    "reasoning_summary": "This content focuses on code deployment practices and their effects on delivery and code quality. It does not address Scrum Values directly or in theme, making the category fit weak and mostly incidental.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns with Lean principles of minimising waste and maximising learning through iterative development. It highlights the benefits of smaller, manageable changes and the role of user feedback, both of which are core themes in Lean Product Development. However, while it touches on Lean concepts, it primarily focuses on deployment practices rather than a comprehensive exploration of Lean methodologies, which slightly limits its depth in the category.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category as it emphasises frequent deployments, a key Lean Product Development practice that encourages rapid learning and reduced waste. While it mainly addresses deployment strategies rather than the full spectrum of Lean methods, its focus on iterative improvement and user feedback clearly reflects Lean principles."
  },
  "Test Driven Development": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Test Driven Development",
    "calculated_at": "2025-08-07T11:25:55",
    "ai_confidence": 13.75,
    "ai_mentions": 0.2,
    "ai_alignment": 2.2,
    "ai_depth": 2.8,
    "ai_intent": 1.9,
    "ai_audience": 3.1,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses exclusively on the benefits and process of frequent code deployments, such as smaller batch sizes, reduced technical debt, and enhanced feedback loops. No explicit or implicit references to TDD (Test Driven Development), its principles (Red-Green-Refactor), automated unit testing, or core practices are present. While the audience and Agile context could marginally overlap with TDD practitioners, the main ideas, terminology, and actionable steps are not TDD-specific or even closely aligned in methodology. The depth of discussion is significant for deployment frequency, but not for TDD. Thus, fit to 'Test Driven Development' is exceptionally weak: only a slight generic connection via Agile software quality improvement exists.",
    "reasoning_summary": "Content is about frequent deployments and code quality—not Test Driven Development. No TDD principles, methods, or tools discussed. Alignment is minimal; category fit is highly tangential and indirect.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-02-12T15:22:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on test automation principles, practices, or tools.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T15:22:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment strategies and technical debt in software development, with no specific focus on the Windows operating system or its related topics.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T15:23:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical deployment practices and the impact on technical debt, without a focus on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns with the principles of empirical process control by emphasising decision-making based on observed evidence (user feedback) rather than assumptions. It highlights the benefits of smaller, manageable changes and iterative development, which are core themes of empirical process control. However, while it touches on these concepts, it does not delve deeply into the theoretical foundations or specific Agile frameworks, which slightly limits its depth of discussion.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category as it highlights how frequent deployments support empirical process control by enabling decisions based on real user feedback. It effectively illustrates the value of iterative development and manageable changes, though it doesn’t explore the underlying theory or specific Agile frameworks in detail. Overall, it aligns well with the category’s main themes."
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content discusses practical strategies for improving code quality through frequent deployments, which aligns well with the core themes of Pragmatic Thinking. It emphasises real-world applications of Agile principles, such as iterative development and hypothesis-driven engineering, showcasing how these practices can enhance collaboration and efficiency. The depth of discussion is significant, providing specific examples and actionable steps, which further supports its alignment with pragmatic approaches. Overall, the content is focused on practical problem-solving in a complex environment, justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores actionable methods for boosting code quality through regular deployments. It clearly connects Agile concepts to everyday engineering challenges, offering concrete examples and steps. The focus on practical solutions and real-world application demonstrates a pragmatic mindset, making it highly relevant to the category."
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T15:23:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical processes related to deployment and technical debt, with no focus on employee engagement or motivation.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Increment",
    "calculated_at": "2025-05-13T21:55:00",
    "ai_confidence": 60.84,
    "ai_mentions": 3.4,
    "ai_alignment": 6.0,
    "ai_depth": 6.2,
    "ai_intent": 6.0,
    "ai_audience": 8.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content explicitly discusses software being delivered in smaller, frequent increments and highlights their value in feedback, code quality, and technical debt reduction. However, it does not directly use the Scrum/Agile 'Increment' terminology nor deeply connect the concept to Scrum artifacts and roles. It focuses on deployment frequency and iterative practice rather than the Increment as defined in Scrum, though it aligns in spirit. The primary audience is practitioners and development teams, closely matching the category. Despite the thematic overlap and use of language such as 'increments' and 'iterative development', the lack of direct reference to Scrum Increment concepts and artifacts limits the alignment and depth scores. There are no penalties as content is up-to-date and supportive.",
    "reasoning_summary": "The content advocates for frequent, user-focused software releases and discusses iterative value delivery, aligning conceptually with 'Increment.' However, it doesn't reference Scrum's Increment explicitly or explore it in depth, so the fit is moderate rather than strong.",
    "level": "Secondary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T16:47:27",
    "ai_confidence": 62.0,
    "ai_mentions": 10,
    "ai_alignment": 25,
    "ai_depth": 27,
    "non_ai_confidence": 20,
    "final_score": 62.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to improved code quality and user feedback, which aligns with the concept of innovation in Agile and DevOps contexts. It mentions iterative development and hypothesis-driven engineering, which are relevant to fostering a culture of innovation. However, the primary focus is on deployment practices rather than a comprehensive exploration of innovation metrics or strategies, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on technical debt, which relates to strategic approaches in Agile environments. However, the primary focus is on technical practices rather than a clear strategic framework or alignment with organisational goals.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T15:23:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on Agile Planning Tools or methodologies.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T15:23:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and deployment practices, with no clear focus on portfolio management or strategic alignment of projects.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses deployment practices and their impact on code quality, which is relevant to agile methodologies but does not explicitly mention the role of a Scrum Master or their responsibilities. While it touches on concepts like iterative development and continuous improvement, it lacks a direct focus on the Scrum Master role, making it only tangentially related to the category.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 42.0,
    "ai_mentions": 2,
    "ai_alignment": 35.0,
    "ai_depth": 45.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and team dynamics, touching on aspects like accountability and real-time user insights. However, it primarily focuses on deployment practices rather than directly addressing team performance strategies or methodologies. While there are mentions of team dynamics, the depth of discussion on team performance is limited, making it a secondary focus rather than a primary one.",
    "level": "Tertiary"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are aligned with Agile principles. However, it primarily focuses on deployment practices rather than Agile Planning methodologies, making it a secondary discussion rather than a primary focus.",
    "level": "Secondary"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T15:23:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on forecasting methodologies or practices within Agile and Scrum.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T15:23:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, with no clear focus on estimation techniques or practices within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 28,
    "ai_depth": 24,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and user feedback, which aligns with the principles of Evidence-Based Management. It mentions the importance of data-driven decision-making and iterative development, which are key aspects of EBM. However, the primary focus is on deployment practices rather than a comprehensive exploration of EBM concepts, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical practices related to frequent deployments and technical debt, without a focus on organisational change strategies or methodologies.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-02-12T15:23:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without any mention of Azure Boards or its functionalities in Agile project management.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T15:23:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to software deployment and technical debt, with no clear focus on market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Accountability",
    "calculated_at": "2025-05-13T21:55:00",
    "ai_confidence": 42.68,
    "ai_mentions": 2.9,
    "ai_alignment": 4.4,
    "ai_depth": 4.0,
    "ai_intent": 4.1,
    "ai_audience": 6.7,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content focuses on the benefits of frequent deployments: code quality, feedback, technical debt, and iterative delivery. Accountability is only explicitly referenced in a brief mention about writing maintainable code because colleagues may review it. While there is some conceptual overlap—frequent deployments can foster outcome ownership—there is minimal direct discussion of accountability as a structural mechanism or role-specific construct. Most key themes center on technical and process benefits, not explicit outcome ownership or defined accountabilities. The target audience (developers in modern delivery organizations) partially fits the category, and the piece is focused and relevant, but falls short of deep accountability exploration. Thus, confidence is moderate and reflective of indirect, partial alignment.",
    "reasoning_summary": "Although this article briefly mentions accountability in the context of maintainable code, its primary focus is on technical and process improvements through frequent deployments. There is minimal direct exploration of accountability structures or outcome ownership, leading to a moderate, partial fit.",
    "level": "Tertiary"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 16,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content explicitly discusses the benefits of frequent deployments, which is a core aspect of Continuous Delivery. It highlights the importance of smaller, manageable changes, rapid user feedback, and the reduction of technical debt, all of which align closely with Continuous Delivery principles. The depth of discussion is substantial, providing practical steps for improvement and emphasising the cultural shift towards iterative development. Overall, the content is highly relevant to Continuous Delivery, making it a strong fit for the category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the Continuous Delivery category, as it thoroughly explores the advantages of frequent deployments and iterative development. It offers practical advice and emphasises cultural changes that support Continuous Delivery, making it highly relevant and valuable for anyone interested in this area."
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without addressing working agreements or team collaboration principles.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and user feedback, which indirectly relates to customer satisfaction. However, it primarily focuses on technical practices rather than explicitly addressing customer satisfaction principles or methodologies. While it mentions the importance of user insights and improving customer happiness, these points are secondary to the main discussion on deployment strategies.",
    "level": "Secondary"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T15:23:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to frequent deployments and technical debt, without a clear focus on Agile leadership roles or practices.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments, which is a key aspect of Continuous Integration. It highlights the benefits of smaller, manageable changes and the need for regular feedback, aligning with CI principles. However, it lacks explicit mention of CI tools, automated testing, or detailed strategies for managing code merges, which are crucial for a higher confidence score in this category.",
    "level": "Secondary"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses the benefits of frequent deployments, which aligns with Lean principles of iterative learning and continuous improvement. It highlights waste reduction through smaller batch sizes and the importance of feedback, which are core concepts in Lean thinking. However, while it touches on these principles, it primarily focuses on deployment practices rather than a comprehensive exploration of Lean itself, leading to a high but not perfect confidence score.",
    "level": "Secondary"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T15:23:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on the Daily Scrum or its related practices.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they relate to technical debt and customer feedback, which aligns with Agile principles of delivering value and responding to change. However, it primarily focuses on technical practices rather than the foundational values and principles of Agile.",
    "level": "Tertiary"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-02-12T15:24:01",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on automated testing principles or practices.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without addressing the criteria or practices related to the Definition of Ready.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Definition of Done",
    "calculated_at": "2025-05-13T21:55:03",
    "ai_confidence": 31.63,
    "ai_mentions": 0.2,
    "ai_alignment": 3.8,
    "ai_depth": 2.7,
    "ai_intent": 3.5,
    "ai_audience": 6.4,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits and processes around frequent deployments, technical debt, batch size reduction, and iterative feedback in software development—all highly relevant to agile and quality-centric teams. However, it does not mention or explore the Definition of Done (DoD) explicitly or implicitly. Key DoD aspects such as agreed acceptance criteria, code review, testing, or shared team definitions are not addressed. Depth is moderate for deployment practices but not DoD-specific. Target audience partially overlaps (agile practitioners, developers), but the core focus diverges from the DoD itself; the connection is tangential at best.",
    "reasoning_summary": "While the content offers valuable insights on code quality and deployment frequency, it doesn't explicitly or deeply discuss the Definition of Done. Its relevance to DoD is indirect and incidental, resulting in a low confidence score for this specific category.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-12T15:24:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on cross-functional teams or their characteristics.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 32,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the impact of frequent deployments on code quality, aligning closely with best practices in Continuous Integration and Continuous Deployment (CI/CD). It provides detailed insights into the benefits of smaller, manageable changes, technical debt, and iterative development, which are core themes in software development methodologies. The depth of discussion is significant, offering practical steps for improvement and a clear connection to user feedback and maintainability, reinforcing its primary focus on software engineering practices.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the software engineering category, as it thoroughly explores how frequent deployments influence code quality. It highlights key CI/CD principles, addresses technical debt, and emphasises iterative development. The discussion is practical and user-focused, making it highly relevant to professionals interested in effective software development practices."
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-02-12T15:24:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without any direct reference to Azure Repos or its functionalities.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-02-12T15:24:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a focus on acceptance criteria or collaborative development practices central to ATDD.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can lead to better understanding of customer needs through telemetry and feedback. However, the primary focus is on technical debt and deployment practices rather than a dedicated exploration of customer feedback loops.",
    "level": "Tertiary"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with Agile principles of continuous value delivery and adaptability. It highlights the benefits of smaller, manageable changes and real-time user feedback, which are key aspects of Agile strategy. However, while it touches on Agile concepts, it primarily focuses on technical practices related to deployment rather than a broader strategic context, which slightly limits its depth in terms of Agile strategy discussions.",
    "level": "Secondary",
    "reasoning_summary": "This content aligns with Agile principles by emphasising frequent deployments and iterative development, both of which support continuous value delivery and adaptability. While it references Agile concepts, its main focus is on technical deployment practices rather than a comprehensive exploration of Agile strategy, making its fit with the category somewhat limited."
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T15:24:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment frequency and technical debt, with no focus on collaboration tools or team dynamics.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses frequent deployments and their impact on technical debt, which aligns with Agile principles of iterative development and continuous delivery. However, it primarily focuses on technical practices rather than broader Agile transformation strategies or methodologies.",
    "level": "Tertiary"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content primarily discusses the impact of frequent deployments on code quality and operational efficiency, aligning closely with the core themes of operational practices. It provides detailed insights into the benefits of smaller batch sizes, increased deployment frequency, and the importance of real-time user feedback, all of which are essential for improving operational efficiency in Agile and DevOps contexts. The depth of discussion is significant, offering practical steps for improvement, which further supports its classification under Operational Practices.",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the Operational Practices category, as it explores how frequent deployments and smaller batch sizes can enhance code quality and efficiency. By focusing on real-time feedback and practical improvement steps, it directly addresses key operational strategies in Agile and DevOps, making it highly relevant to this classification."
  },
  "Decision Making": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Decision Making",
    "calculated_at": "2025-08-07T07:06:23",
    "ai_confidence": 76.92,
    "ai_mentions": 3.6,
    "ai_alignment": 8.7,
    "ai_depth": 7.8,
    "ai_intent": 7.3,
    "ai_audience": 8.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 77.0,
    "reasoning": "The content discusses the role of frequent deployments in improving code quality and delivering business value. It references hypothesis-driven engineering, gathering telemetry, and using data for informed choices—core Evidence-Based Management concepts. Although it doesn't explicitly use the term 'decision making', many practices described directly enable evidence-based and data-driven decisions, like using user insights, feedback loops, and data analytics to guide which features to build and how to iterate. The depth is solid, tying together practical steps (like reducing batch size and increasing deployment frequency) with their effects on learning and adapting—key for robust decision-making. However, the main focus remains process improvement via deployment habits, not pure decision-making frameworks, so the fit is strong but not perfect. Audience and purpose are also well-aligned for practitioners and technical leads in Agile/DevOps settings.",
    "reasoning_summary": "Strong alignment: Frequent deployments, feedback loops, and telemetry support evidence-based, iterative decision-making. Although not solely about decision frameworks, the content's focus and intent fit the category well for Agile/DevOps practitioners.",
    "level": "Secondary"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the impact of frequent deployments on code quality and user feedback, which aligns closely with the principles of working software. It highlights the importance of iterative development, gathering user insights, and maintaining software quality through regular updates. The depth of discussion on practical steps for improvement and the benefits of smaller, manageable changes further supports its relevance to the category. However, while it is focused on software delivery, it does not explicitly mention Agile or Scrum frameworks, which slightly lowers the alignment score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category as it explores how frequent deployments enhance code quality and user feedback, key aspects of working software. It emphasises iterative improvement and practical steps for maintaining quality, which are central to the category, even though it doesn’t directly reference Agile or Scrum methodologies."
  },
  "Sprint Review": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T21:55:03",
    "ai_confidence": 13.53,
    "ai_mentions": 0.4,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 1.6,
    "ai_audience": 5.1,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses exclusively on the benefits and techniques of frequent code deployments to improve quality, manage technical debt, and support iterative delivery. It never directly mentions Sprint Review, nor does it discuss its purpose, structure, or stakeholder engagement as defined by the Scrum framework. There is no discussion of Scrum events or practices; instead, the emphasis is on engineering practices, feedback loops, and deployment efficiency. The intended audience is software developers and technical practitioners, which coincidentally overlaps with Scrum stakeholders but not in the context of Sprint Reviews. Overall, almost none of the key topics of Sprint Review are addressed, and there is no explicit or implicit thematic alignment with the category.",
    "reasoning_summary": "This content thoroughly explores the value of frequent deployments and feedback in engineering, but it never discusses Sprint Review or Scrum practices. Therefore, its fit for the category is minimal, resulting in a very low confidence score.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-13T21:55:02",
    "ai_confidence": 54.2,
    "ai_mentions": 1.0,
    "ai_alignment": 5.7,
    "ai_depth": 6.2,
    "ai_intent": 6.5,
    "ai_audience": 7.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content emphasizes frequent code deployments, smaller batch sizes, telemetry, and feedback loops, which touch on ideas related to SRE practices (like observability and production awareness). However, it never directly discusses Site Reliability Engineering, SRE principles, SLOs, incident response, or Google's SRE framework. The depth is reasonable but mostly about development process improvement. The intended audience (devs interested in code quality) overlaps somewhat with SRE, and there is little off-topic content. However, the article remains focused on software development and quality improvement through deployment practices, not specifically on SRE or reliability engineering as defined in the category. No penalties needed.",
    "reasoning_summary": "While the piece highlights practices adjacent to SRE—like telemetry, observability, and production feedback—its primary focus is code quality via deployment frequency, not explicit SRE principles or reliability engineering. The overlap exists, but it's only partial and doesn't fully fit the category.",
    "level": "Tertiary"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T15:24:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and deployment strategies, with only a brief mention of peer pressure among colleagues, which does not align with the core themes of psychological safety.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better understanding of customer needs and improved product quality, which are relevant to customer retention. However, the primary focus is on technical debt and deployment practices rather than direct strategies for retaining customers.",
    "level": "Tertiary"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and hypothesis-driven engineering practices, which align with Lean Startup principles. However, the primary focus is on technical debt and code quality rather than explicitly on Lean Startup methodologies like MVP or the Build-Measure-Learn feedback loop.",
    "level": "Tertiary"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T15:24:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a focus on asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can lead to better code quality and user insights, which aligns with the principles of experimentation. It mentions hypothesis-driven engineering and iterative development, indicating a focus on testing ideas and validating assumptions. However, the primary focus is more on deployment practices rather than a systematic exploration of experimentation within Agile workflows, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-12T15:24:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment frequency, technical debt, and coding practices, with no clear focus on revenue per employee metrics or related financial efficiency discussions.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, which aligns with CI/CD principles. However, it lacks specific references to Azure Pipelines, YAML configurations, or Azure DevOps services, making it more of a general discussion on deployment practices rather than a focused discourse on Azure Pipelines.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing batch sizes, which aligns with Lean principles of minimising waste and enhancing efficiency. However, the primary focus is on technical debt and deployment practices rather than Lean Thinking itself.",
    "level": "Tertiary"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical deployment practices and their impact on code quality and technical debt, without focusing on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T15:24:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without addressing large-scale Agile frameworks or enterprise-level practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Product Backlog",
    "calculated_at": "2025-05-13T21:55:00",
    "ai_confidence": 13.943,
    "ai_mentions": 0.2,
    "ai_alignment": 1.0,
    "ai_depth": 0.6,
    "ai_intent": 1.2,
    "ai_audience": 7.4,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses solely on the benefits and mechanics of frequent code deployments—such as feedback cycles, technical debt, batch size, and team confidence. There are no direct mentions or conceptual discussion of the Product Backlog or its management in Agile/Scrum. The alignment score is thus minimal as none of the key topics—backlog prioritization, roles, refinement, tools, or backlog-to-sprint planning—are discussed. Audience and signal-to-noise scores are higher, since the content is clear and addresses agile teams, but the core topic is unrelated to backlog management.",
    "reasoning_summary": "This content is about deployment frequency and its impact on code quality, not Product Backlog management. It lacks mentions, alignment, or depth on backlog topics, so confidence in this category fit is very low.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-02-12T15:24:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical practices related to deployment and technical debt, with minimal focus on team dynamics or motivation.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 10,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with hypothesis-driven practices. It mentions 'hypothesis-driven engineering' and the need for user feedback, indicating a focus on experimentation and learning. However, the primary emphasis is on deployment frequency rather than a detailed exploration of hypothesis formulation or testing, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-12T15:25:01",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can help understand customer needs through telemetry and feedback, which aligns with product discovery. However, the primary focus is on technical practices and reducing technical debt rather than directly exploring methodologies for identifying customer needs or defining product features.",
    "level": "Tertiary"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content explicitly discusses the importance of frequent deployments and their impact on code quality, user feedback, and team dynamics. It aligns well with the principles of Continuous Delivery and Agile methodologies, providing detailed insights into the benefits and practical steps for implementing frequent releases. The depth of discussion is substantial, covering both the pitfalls of infrequent deployments and the advantages of a more frequent release strategy.",
    "level": "Primary"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing technical debt, which aligns with Agile principles of continuous improvement and customer feedback. However, it primarily focuses on technical practices rather than the broader Agile philosophy.",
    "level": "Tertiary"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T15:25:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-11T08:55:33",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and user feedback. However, it does not explicitly mention 'Lead Time' or provide a detailed exploration of it as a metric. While there are implications of improved delivery times through frequent deployments, the primary focus is on deployment frequency and its impact on code quality rather than on Lead Time itself. The discussion touches on related concepts like feedback loops and technical debt but lacks a direct connection to Lead Time as defined in the classification criteria.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T15:25:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and their impact on technical debt and product quality, which relates to customer needs and product success. However, the primary focus is on technical implementation and engineering practices rather than a clear product strategy framework or vision.",
    "level": "Tertiary"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can help in understanding customer needs and managing technical debt, which relates to decision-making in complex environments. However, the primary focus is on technical practices rather than a deep exploration of sensemaking principles or frameworks.",
    "level": "Tertiary"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content primarily focuses on the impact of frequent deployments on code quality, which aligns closely with the principles of software craftsmanship and technical excellence. It discusses best practices such as reducing batch size, increasing deployment frequency, and managing technical debt, all of which are core themes of the Technical Mastery category. The depth of discussion is substantial, providing practical steps and insights into how these practices can enhance software development. However, while the content is strong, it does not delve deeply into all aspects of software architecture or engineering practices, which slightly lowers the confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a good fit for the Technical Mastery category, as it explores how frequent deployments can improve code quality and highlights best practices like smaller batch sizes and managing technical debt. While it offers practical advice and valuable insights, it doesn’t cover every facet of software architecture or engineering, which slightly limits its alignment with the full scope of the category."
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T15:25:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on transparency or its role in Agile processes.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-02-12T15:25:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses deployment frequency and technical debt, with no clear focus on Scrum roles, team dynamics, or collaboration practices.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing batch sizes, which indirectly relates to Cycle Time by emphasising the importance of smaller, more manageable work units and their impact on workflow efficiency. However, the primary focus is on technical debt and deployment practices rather than Cycle Time itself.",
    "level": "Tertiary"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and understanding of customer needs, which aligns with the principles of Continuous Learning. However, the primary focus is on technical debt and deployment strategies rather than explicitly on continuous learning practices or team improvement.",
    "level": "Tertiary"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality and user feedback, which aligns with some aspects of trend analysis in Agile and DevOps. However, it lacks explicit mentions of trend analysis as a primary focus and does not delve deeply into the identification of patterns or shifts within Agile or DevOps frameworks. The discussion is more about practices rather than analysing trends, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which can relate to self-organisation principles, such as accountability and continuous improvement. However, it primarily focuses on deployment practices rather than explicitly addressing self-organisation or team autonomy. The mention of accountability and team confidence hints at self-organisation but lacks depth in exploring the core themes of the category.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of frequent deployments and their impact on code quality, technical debt management, and maintainability, which are all key aspects of engineering excellence. It directly addresses best practices in coding and the benefits of continuous delivery, aligning well with the core themes of the category. The depth of discussion is significant, providing detailed insights into how these practices can enhance software craftsmanship and improve overall engineering processes.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it thoroughly explores how frequent deployments contribute to better code quality, reduced technical debt, and improved maintainability. By focusing on best practices and the advantages of continuous delivery, it offers valuable insights that align closely with the principles of engineering excellence and software craftsmanship."
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and technical debt reduction, which are relevant to digital transformation practices. However, it primarily focuses on software development processes rather than a broader strategic adoption of digital technologies across an organisation.",
    "level": "Tertiary"
  },
  "System Configuration": {
    "resourceId": "D1wz-J1jklQ",
    "category": "System Configuration",
    "calculated_at": "2025-08-07T07:06:14",
    "ai_confidence": 21.44,
    "ai_mentions": 0.4,
    "ai_alignment": 2.1,
    "ai_depth": 2.2,
    "ai_intent": 2.5,
    "ai_audience": 4.6,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses on the benefits and strategies of frequent code deployments and their impact on code quality, technical debt, and user feedback. While it mentions deployment practices and briefly touches on observability/monitoring, it does not explicitly discuss system configuration, tools, methodologies, or automation practices for configuring systems. There is minimal overlap with configuration topics (e.g., observability), but the primary themes are software delivery, maintainability, and process improvement—not system setup or configuration per se.",
    "reasoning_summary": "The topic centers on deployment frequency and engineering practices, not system configuration, setup, or management. Any links to system configuration are tangential or very high-level. Fit is minimal and largely coincidental.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt in the context of deployment frequency and its impact on code quality. It explicitly mentions technical debt accumulation as a consequence of infrequent deployments, which aligns with the category's focus. However, while it touches on the topic, the primary focus is on deployment practices rather than a comprehensive exploration of technical debt management strategies. The depth of discussion on technical debt is moderate, as it is integrated into broader themes of deployment and maintainability.",
    "level": "Secondary",
    "reasoning_summary": "This content is relevant to the category as it links technical debt to deployment frequency, highlighting how infrequent releases can lead to its accumulation. While technical debt isn’t the sole focus, its discussion is woven into broader topics like deployment and code maintainability, making the content a suitable, though not exhaustive, fit for the category."
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on remote working practices or Agile methodologies in a distributed context.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of data and telemetry in decision-making related to software development and deployment, which aligns with evidence-based practices. However, the primary focus is on technical aspects of deployment rather than leadership decisions, making it a secondary theme.",
    "level": "Tertiary"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the impact of deployment frequency on code quality and development practices, which aligns with the core themes of deployment strategies. It mentions practical steps for improvement, such as reducing batch size and increasing deployment frequency, which are relevant to deployment methodologies. However, while it touches on important aspects of deployment, it lacks detailed exploration of specific strategies like Blue-Green Deployments or Canary Releases, leading to a moderate confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is relevant to deployment strategies as it explores how deployment frequency affects code quality and development processes. It offers practical advice for improvement, making it suitable for the category. However, it doesn’t delve into specific deployment techniques, so while it fits broadly, it lacks depth in specialised strategies, resulting in only moderate confidence in its classification."
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T15:25:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and customer feedback. However, it primarily focuses on technical aspects of deployment and coding practices rather than the strategic alignment of product management. While there are mentions of customer needs and feedback, the depth of discussion on product management methodologies and frameworks is limited, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T15:26:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to frequent deployments and technical debt, without a clear focus on organisational culture or its influence on Agile methodologies.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns with modern source control practices, particularly in relation to continuous integration and deployment. It highlights the benefits of smaller, manageable changes and the need for regular feedback, which are key aspects of effective version control. However, while it touches on these topics, it does not delve deeply into specific version control systems or methodologies, which slightly limits its depth of discussion.",
    "level": "Secondary"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T15:26:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on coaching practices or themes.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T15:26:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to software deployment and technical debt, without a clear focus on organisational dynamics or systems thinking.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can help in understanding customer needs through telemetry and feedback, which aligns with product validation practices. However, the primary focus is on technical debt and deployment strategies rather than direct user testing or validation methodologies.",
    "level": "Tertiary"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 82.0,
    "reasoning": "The content focuses extensively on the benefits and practices of frequent deployments, which directly relates to release management. It discusses the importance of smaller, manageable changes, the impact of deployment frequency on code quality, and the necessity of user feedback, all of which align with key topics in release management. The depth of discussion is significant, providing practical steps for improvement and emphasising iterative development, which are crucial for effective release management. Overall, the content is highly relevant and detailed, justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the release management category, as it thoroughly explores frequent deployments, manageable changes, and the value of user feedback. By offering practical advice and highlighting iterative development, it addresses core aspects of release management, making it both relevant and insightful for professionals in this field."
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T15:26:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to software development and deployment, focusing on reducing technical debt and improving code quality, rather than entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and its impact on technical debt, which aligns with technical leadership principles. However, it primarily focuses on technical practices rather than the broader aspects of guiding teams or fostering collaboration.",
    "level": "Tertiary"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-02-12T15:26:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management rather than identifying or resolving specific technical issues.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and user feedback, which indirectly relates to change management principles. However, it primarily focuses on deployment practices rather than the broader strategies and practices of change management in Agile environments. While it touches on concepts like iterative development and continuous improvement, it lacks a comprehensive exploration of change management as a primary focus.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 82.0,
    "reasoning": "The content primarily discusses the impact of frequent deployments on code quality, which aligns closely with the principles of Continuous Integration and Continuous Delivery (CI/CD). It explicitly mentions the benefits of smaller, manageable changes and the importance of maintainability, which are key aspects of clean code and Agile practices. The depth of discussion is substantial, providing practical steps for improvement and insights into user feedback, which enhances the overall understanding of Agile engineering practices. However, while it touches on several relevant topics, it does not delve deeply into all aspects of Engineering Practices, such as TDD or pair programming, which slightly lowers the confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Engineering Practices category, as it explores how frequent deployments influence code quality and maintainability—core concerns in Agile and CI/CD workflows. While it offers practical advice and user insights, it doesn’t cover the full range of engineering techniques like TDD or pair programming, so it’s not fully comprehensive for the category."
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing technical debt, which aligns with Agile principles of iterative development and continuous delivery. However, it does not explicitly focus on Agile frameworks themselves, making it a secondary theme rather than the primary topic.",
    "level": "Tertiary"
  },
  "Test First Development": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Test First Development",
    "calculated_at": "2025-08-07T06:10:24",
    "ai_confidence": 21.85,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.1,
    "ai_audience": 7.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses almost exclusively on frequent deployments, smaller batch sizes, technical debt, and fast feedback—core principles of DevOps and Continuous Delivery, not Test First Development. There is no direct mention (or even implied discussion) of defining success criteria before implementation, writing tests before code, or any practices (manual or automated) described in Test First Development, such as TDD, ATDD, or the evolution from manual to automated checks. The content relates peripherally via advocacy for fast feedback and quality, but these themes are generic to modern software engineering. The purpose is not to inform about Test First, but rather deployment frequency and its impact. Audience and signal scores are higher only because the content is developer-focused and remains tightly on its chosen topic without filler.",
    "reasoning_summary": "This content does not fit 'Test First Development.' It discusses frequent deployments and code quality but never addresses Test First principles, practices, or defining success criteria before implementation. Fit is marginal and incidental.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T15:26:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on Scrum principles, roles, or practices.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are relevant to DevOps practices. However, it does not specifically mention Azure DevOps or its tools, nor does it delve into Azure DevOps functionalities or methodologies. The focus is more on general deployment strategies rather than Azure DevOps itself.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Decision Theory",
    "calculated_at": "2025-08-07T09:25:34",
    "ai_confidence": 41.23,
    "ai_mentions": 0.2,
    "ai_alignment": 4.75,
    "ai_depth": 4.4,
    "ai_intent": 4.35,
    "ai_audience": 8.1,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content is focused on the benefits of frequent deployments, code quality, technical debt, and iterative feedback cycles in software development. It touches lightly on hypothesis-driven engineering and the use of telemetry for informed decisions, which aligns tangentially with decision theory (notably in evidence-based, incremental learning under uncertainty), but explicit references to decision theory, heuristics, cognitive biases, or probabilistic decision frameworks are absent. The discussion is mainly on practical process improvements rather than core decision-making frameworks or theories. There is some partial conceptual alignment where informed choices are discussed (e.g., learning from user data and making product pivots), but the main thrust is not a deep exploration of decision theory principles. Audience and signal scores are high since the content is relevant to practitioners interested in iterative improvement, a group that overlaps with decision theory's applied audience. No content is outdated or contradictory, so no penalties are applied.",
    "reasoning_summary": "The content partially aligns with decision theory in advocating data-informed iteration and learning under uncertainty, but lacks explicit theory, terminology, or deep exploration of decision-making models. Overall fit is tangential and indirect.",
    "level": "Tertiary"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 87.0,
    "reasoning": "The content discusses the importance of frequent deployments and breaking down larger tasks into smaller, manageable pieces, which directly relates to optimising flow efficiency. It highlights how smaller batch sizes and increased deployment frequency can reduce technical debt and improve code quality, aligning well with the principles of Flow Efficiency. The depth of discussion on how these practices impact team performance and customer feedback further supports its relevance to the category.",
    "level": "Primary"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the benefits of frequent deployments and smaller batch sizes, which align with Agile and DevOps principles that enhance market adaptability. It highlights how these practices allow for quicker responses to customer feedback and market demands, thus demonstrating a clear connection to the category. However, while the content is rich in detail about technical practices, it does not explicitly frame these practices within a broader market adaptability strategy, which slightly lowers the confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good fit for the category, as it explores how frequent deployments and smaller batch sizes—key Agile and DevOps practices—help teams respond swiftly to customer needs and market changes. While it clearly links technical methods to adaptability, it could strengthen its case by more directly connecting these practices to overarching market strategies."
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses the technical aspects of deployment frequency and its impact on code quality, with limited reference to organisational structures or team dynamics. While it touches on concepts like accountability and user feedback, it lacks a thorough exploration of the interplay between social and technical systems, which is essential for a stronger alignment with the Sociotechnical Systems category.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the benefits of frequent deployments and smaller batch sizes, which align with agile principles of adaptability and responsiveness. However, it primarily focuses on technical aspects of code quality and deployment practices rather than broader organisational strategies or cultural shifts. While it touches on customer feedback and continuous delivery, it lacks a comprehensive exploration of organisational agility as a primary focus.",
    "level": "Secondary"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 50.0,
    "reasoning": "The content discusses the importance of frequent deployments and their impact on technical debt, which touches on interconnectedness and feedback loops in software development. However, it primarily focuses on deployment strategies rather than a comprehensive exploration of Systems Thinking principles.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 10,
    "final_score": 82.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they relate to technical debt, customer feedback, and code quality. It explicitly mentions the collection of telemetry and data to validate whether features are worth investing in, which aligns with evidence-based decision-making. The discussion on breaking down work into smaller chunks and the impact of deployment frequency on team behaviour and product quality further supports its relevance to the category. However, while it touches on metrics and learning, it does not delve deeply into specific methodologies or frameworks, which slightly limits the depth of discussion.",
    "level": "Primary",
    "reasoning_summary": "This content is a good fit for the category as it explores how frequent deployments, data collection, and feedback loops support evidence-based decision-making. It highlights the value of using metrics to guide product and team improvements, even though it doesn’t go into detail about specific frameworks or methodologies. Overall, it aligns well with the category’s focus on data-driven practices."
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which align with Agile principles. However, it lacks explicit references to Agile Product Management roles, techniques, or strategies, making it more focused on deployment practices than on product management itself.",
    "level": "Secondary"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without focusing on installation or configuration processes.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 82.0,
    "reasoning": "The content primarily focuses on the benefits of frequent deployments, which aligns closely with DevOps principles such as continuous delivery, feedback loops, and shared accountability. It discusses the importance of smaller, manageable changes and the role of user feedback in improving code quality, which are key aspects of the DevOps philosophy. The depth of discussion on practical steps for improvement and the emphasis on iterative development further reinforce its alignment with DevOps. However, while it touches on relevant themes, it does not explicitly mention DevOps as a philosophy, which slightly lowers the confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content fits the DevOps category as it highlights practices like frequent deployments, iterative improvements, and leveraging user feedback—all central to DevOps. While it doesn’t directly reference DevOps by name, its focus on collaboration, continuous delivery, and practical improvement steps clearly reflects DevOps principles."
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content primarily focuses on the importance of frequent deployments and its impact on code quality, maintainability, and technical debt, which aligns closely with the principles of Technical Excellence. It discusses Continuous Delivery practices and how they facilitate better engineering outcomes, demonstrating a strong conceptual alignment with the category. The depth of discussion is substantial, providing detailed insights into how smaller batch sizes and frequent deployments can enhance code quality and responsiveness to user feedback, thus fostering a culture of continuous improvement.",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the Technical Excellence category, as it delves into how frequent deployments and Continuous Delivery practices drive better code quality and maintainability. By highlighting the benefits of smaller batch sizes and rapid feedback, it clearly demonstrates how these approaches support ongoing improvement and robust engineering standards."
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 65.0,
    "non_ai_confidence": 30,
    "final_score": 62.0,
    "reasoning": "The content discusses the benefits of frequent deployments, which aligns with Lean principles of reducing waste and improving processes. It mentions concepts like smaller batch sizes and iterative development, which are relevant to Lean thinking. However, the primary focus is on deployment practices rather than a comprehensive exploration of Lean methodologies, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 35,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the benefits of frequent deployments and how they relate to value delivery, particularly in terms of reducing technical debt and improving customer feedback. It aligns well with the principles of iterative development and continuous delivery, emphasising the importance of breaking down work into smaller, valuable increments. The depth of discussion on maintaining code quality and adapting to customer needs further supports its strong alignment with the category.",
    "level": "Primary"
  },
  "Miscellaneous": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Miscellaneous",
    "calculated_at": "2025-08-07T09:25:37",
    "ai_confidence": 24.765,
    "ai_mentions": 0.2,
    "ai_alignment": 1.9,
    "ai_depth": 2.1,
    "ai_intent": 1.7,
    "ai_audience": 8.3,
    "ai_signal": 9.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on the benefits of frequent code deployments and practices such as reducing batch size, increasing deployment frequency, and gathering user feedback. These are core principles of recognised frameworks like DevOps and Agile (e.g., Continuous Delivery, iterative development). While there are no explicit references to specific frameworks or authors, the content's underlying concepts map directly to established DevOps/Agile practices. There is some anecdotal narration, but most advice links to recognised principles. Only a minimal surface-level fit with Miscellaneous, as the main purpose and substance are better classified under DevOps or Agile, not as a general or non-framework discussion.",
    "reasoning_summary": "Minimal fit with Miscellaneous: content aligns closely with DevOps/Agile practices (e.g., deployment frequency, iteration, technical debt), so only a low confidence for Miscellaneous. Not general enough or detached from established frameworks.",
    "level": "Ignored"
  },
  "Kanban": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Kanban",
    "calculated_at": "2025-08-07T09:25:34",
    "ai_confidence": 21.535,
    "ai_mentions": 0.1,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 3.3,
    "ai_audience": 5.2,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on the benefits of frequent code deployments, smaller batch sizes, and continuous improvement—concepts that partially overlap with Kanban, especially regarding flow and incremental delivery. However, there are no direct or explicit references to Kanban, its principles (such as Kanban boards, WIP limits, or flow management), or vocabulary tied directly to the methodology. The main intent appears to be advocating for DevOps/Continuous Delivery practices rather than Kanban itself, though concepts like reduced batch size and continuous improvement are Kanban-adjacent. The audience—developers interested in process improvement—overlaps partially with Kanban's audience, but the fit is incidental rather than intentional. The discussion's depth is moderate regarding iterative delivery, but not with respect to Kanban's practices or framework.",
    "reasoning_summary": "The content shares themes with Kanban (flow, smaller batch work), but does not name or substantially discuss Kanban practices. The alignment is partial and incidental—not a clear Kanban resource.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing technical debt, which aligns with improving efficiency and customer outcomes. However, it primarily focuses on deployment practices rather than a comprehensive discussion on Value Stream Management principles.",
    "level": "Tertiary"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are relevant to agile practices. However, it primarily focuses on team-level practices rather than organisational agility. While it touches on concepts like continuous improvement and responsiveness to user feedback, it lacks a broader organisational context and does not address enterprise-level frameworks or structures that support agility.",
    "level": "Tertiary"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 67.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and responsiveness to customer needs, which aligns with the principles of business agility. However, it primarily focuses on technical practices rather than broader organisational strategies or leadership roles in fostering agility. While it touches on concepts like adaptability and customer feedback, it lacks a comprehensive exploration of business agility as a primary focus.",
    "level": "Secondary"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can reduce technical debt, which aligns with the maintenance and deployment stages of the application lifecycle. However, it lacks explicit mentions of broader ALM practices, governance, or tools, which limits its overall alignment with the category. The depth of discussion on deployment practices is significant, but it does not cover the entire lifecycle or other key topics outlined in the category definition.",
    "level": "Secondary"
  },
  "Organisational Psychology": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Organisational Psychology",
    "calculated_at": "2025-08-07T09:25:37",
    "ai_confidence": 19.82,
    "ai_mentions": 0.1,
    "ai_alignment": 2.8,
    "ai_depth": 2.5,
    "ai_intent": 2.2,
    "ai_audience": 8.2,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content extensively discusses the technical and process impacts of frequent deployments—code quality, technical debt, feedback loops, and maintainability—but does not directly address psychological principles or theories related to organisational behaviour. There are minor indirect hints at team confidence and accountability but without depth or reference to established organisational psychology concepts (e.g., motivation theory, leadership, group dynamics, psychological safety). The main audience is practitioners interested in software engineering process improvement, not those focused on psychological frameworks. Thus, the fit with Organisational Psychology is minimal; the intent, focus, and themes are technical, not psychological.",
    "reasoning_summary": "This content is technically focused, with only incidental allusions to team confidence. It lacks meaningful discussion of motivation, leadership, or organisational psychological theory. Fit with Organisational Psychology is mostly absent.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the benefits of frequent deployments, which directly ties into product delivery methodologies. It highlights the importance of breaking down work into smaller, manageable chunks, aligning with iterative development and feedback loops. The discussion on technical debt and the need for maintainable code further supports the core themes of product delivery. Additionally, it touches on customer feedback and telemetry, which are crucial for understanding customer needs and improving delivery performance. Overall, the content is highly relevant and detailed, making it a strong fit for the Product Delivery category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the Product Delivery category, as it explores frequent deployments, iterative development, and the value of breaking work into smaller pieces. It also addresses technical debt, maintainable code, and the use of customer feedback—all key aspects of effective product delivery and continuous improvement."
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the implications of frequent deployments and smaller batch sizes in software development, which relates to managing complexity and uncertainty in systems. However, it primarily focuses on technical debt and deployment practices rather than a comprehensive exploration of complexity science principles.",
    "level": "Tertiary"
  },
  "Personal": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Personal",
    "calculated_at": "2025-08-07T11:25:55",
    "ai_confidence": 83.41,
    "ai_mentions": 7.8,
    "ai_alignment": 9.3,
    "ai_depth": 9.0,
    "ai_intent": 9.1,
    "ai_audience": 8.7,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 83.0,
    "reasoning": "The content is rich in personal insights, with repeated first-person references (e.g., 'I've often found,' 'In my experience,' 'In my journey as a developer'), which directly aligns with the Personal category. It shares the author's subjective experiences and reflections on deployment practices, highlighting lessons learned, practical challenges, and key benefits. The narrative is not just theoretical or technical but rooted in experiential storytelling, with explicit mentions of how practices affected the author’s own development and team outcomes. The discussion stays focused, targeting practitioners/dev teams, and maintains strong signal-to-noise. No outdated practices are discussed, and the tone is constructive, not critical. No penalties applied.",
    "reasoning_summary": "This content strongly fits the Personal category—it is experience-driven, filled with personal anecdotes, insights, and direct reflections about Agile/DevOps practices, matching both topic and intent with depth. It’s a clear, high-confidence fit.",
    "level": "Primary"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses deployment frequency and its impact on code quality and technical debt, which are relevant to platform engineering principles. However, it primarily focuses on deployment practices rather than the broader aspects of platform engineering.",
    "level": "Tertiary"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T11:57:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on BetaCodex principles or decentralised organisational design.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are aligned with agile principles. However, it lacks a direct focus on the Agile Product Operating Model and does not address key topics such as transitioning from project to product ethos or governance in product delivery.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:47:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of code deployment and technical debt, with no clear focus on leadership practices or themes.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Social Technologies",
    "calculated_at": "2025-08-07T07:06:27",
    "ai_confidence": 60.98,
    "ai_mentions": 2.1,
    "ai_alignment": 6.2,
    "ai_depth": 6.6,
    "ai_intent": 6.3,
    "ai_audience": 7.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content focuses on the impact of frequent deployments on code quality, feedback loops, and iterative development, aligning partially with Social Technologies through discussion of collaborative practices, continuous improvement, and adaptive processes. However, the main emphasis remains on engineering/deployment practices rather than explicit social frameworks, team dynamics, or methodologies that directly foster collaboration and self-organisation. There are hints toward collective accountability and transparency (e.g., code reviews, user feedback), but no direct or in-depth exploration of social frameworks, self-organisation, or organisational culture. Audience is technical practitioners, which fits, and the signal-to-noise ratio is strong with focused, relevant commentary. No penalties apply, as the tone, practices, and themes are current, neutral, and relevant.",
    "reasoning_summary": "Fits the category partially, with themes of iterative feedback, adaptability, and team accountability but lacks explicit discussion of social frameworks, team dynamics, or self-organisation central to Social Technologies.",
    "level": "Secondary"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 50.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, which relates to the principles of an Internal Developer Platform, but it primarily focuses on deployment practices rather than the broader context of IDPs.",
    "level": "Tertiary"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:31:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment strategies and technical debt in software development, with no clear focus on AI applications.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and breaking down work into smaller chunks, which aligns with Agile principles and iterative progress. However, it does not explicitly mention Scrum roles, events, or artifacts, nor does it focus on Scrum practices specifically. The discussion is more about deployment strategies and technical debt rather than Scrum as a framework.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift Left Strategy",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 12,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can improve code quality and user feedback, which aligns with the Shift-Left Strategy's emphasis on early integration of processes. However, it primarily focuses on deployment frequency rather than explicitly addressing testing, security, or compliance integration early in the development lifecycle. The discussion lacks depth in terms of specific Shift-Left techniques or tools, leading to a moderate confidence score.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the benefits of frequent deployments, which directly ties into the principles of Continuous Improvement. It highlights the importance of iterative development, user feedback, and reducing technical debt, all of which are core themes of Continuous Improvement. The depth of discussion is significant, providing practical steps and insights into how frequent deployments can enhance code quality and team effectiveness. Overall, the content aligns well with the category, demonstrating a strong commitment to ongoing improvement and adaptation.",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the Continuous Improvement category, as it thoroughly explores how frequent deployments support ongoing progress. By focusing on iterative development, user feedback, and reducing technical debt, it clearly demonstrates key aspects of continuous improvement, offering practical advice and showing a strong dedication to evolving and refining processes."
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, user feedback, and team confidence. However, it does not explicitly mention Common Goals or their significance within Agile and DevOps frameworks. While it touches on concepts like iterative development and accountability, these are not directly tied to the overarching theme of aligning strategy with execution or shared objectives. The focus is more on deployment practices rather than the alignment of team efforts with strategic goals.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments and their impact on code quality, user feedback, and team confidence, which aligns with the principles of competence in Agile and DevOps. It highlights continuous learning through iterative development and the necessity of maintaining quality, thus demonstrating a strong connection to the core themes of competence. However, while it touches on these aspects, it does not delve deeply into strategies for fostering a culture of competence or methods for inspecting and adapting competence over time, which slightly limits its depth of discussion.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the competence category as it explores how regular deployments support code quality, user feedback, and team confidence—key aspects of competence in Agile and DevOps. While it clearly links frequent releases to ongoing learning and quality, it doesn’t go into detail about building or evaluating a culture of competence, so its coverage is somewhat limited."
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, which aligns with some principles of the One Engineering System, such as improving efficiency and collaboration. However, it does not explicitly mention 1ES or its components, nor does it delve into integration of tools or processes across teams, which are key aspects of the category. The focus is more on deployment practices rather than a unified engineering framework.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, user feedback, and team confidence. However, it primarily focuses on Agile practices and does not explicitly address the concept of Agentic Agility or the intentional shaping of outcomes through autonomy and adaptability. While there are elements of adaptability and accountability mentioned, they are not deeply explored in the context of Agentic Agility, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 87.0,
    "ai_mentions": 16,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the benefits of frequent deployments, which aligns with Agile principles and iterative development processes. It highlights the importance of user feedback, technical debt management, and continuous improvement, all of which are core themes in product development. The depth of discussion is significant, providing practical steps and insights into enhancing product delivery through iterative practices.",
    "level": "Primary"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 42.0,
    "ai_mentions": 3,
    "ai_alignment": 35.0,
    "ai_depth": 45.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and team dynamics, which aligns with project management principles such as iterative development and stakeholder feedback. However, it primarily focuses on technical practices rather than broader project management methodologies or lifecycle phases, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the benefits of frequent deployments and does not explicitly discuss Hybrid Agile concepts or challenges. While it touches on iterative development and user feedback, it lacks a critical examination of the integration of traditional and agile methodologies, which is essential for the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:00:41",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses the benefits of frequent deployments and their impact on code quality, which is more aligned with Agile practices rather than the specific complexities of scaling methodologies. While it touches on concepts like iterative development and user feedback, it does not delve into frameworks for scaling Agile practices or cross-team collaboration, which are central to the Scaling category.",
    "level": "Ignored"
  },
  "GitHub": {
    "resourceId": "D1wz-J1jklQ",
    "category": "GitHub",
    "calculated_at": "2025-08-07T07:06:26",
    "ai_confidence": 14.256,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 3.1,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content centers on the cultural and practical impact of frequent deployments for code quality and team effectiveness. There are no direct mentions or references to GitHub, its tools, or features. The discussion is entirely platform-agnostic, focusing on deployment frequency, technical debt, and iterative engineering, which are relevant to software delivery but not specifically to GitHub. No examples, case studies, or integrations with GitHub (Actions, Projects, pull requests, etc.) are provided. The content targets practitioners who manage deployments, but not GitHub users specifically. Therefore, conceptual alignment and depth regarding GitHub is extremely low, and the confidence that this fits the GitHub content category is minimal.",
    "reasoning_summary": "This content discusses frequent deployments, technical debt, and iterative development, but does not mention GitHub or its services. It is not meaningfully aligned with the 'GitHub' category and only fits tangentially at best.",
    "level": "Ignored"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T16:47:20",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments, which directly relates to reducing Time to Market by enabling quicker feedback and iterative development. It highlights the benefits of smaller, manageable changes and increased deployment frequency, aligning well with the core themes of Time to Market. However, while it touches on these concepts, it does not explicitly define Time to Market or provide metrics associated with it, which slightly lowers the confidence score. Overall, the depth of discussion on practical steps for improvement and the impact on user satisfaction supports a strong alignment with the category.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good fit for the Time to Market category, as it explores how frequent deployments can speed up feedback loops and support faster, more manageable releases. While it doesn’t explicitly define Time to Market or offer specific metrics, its focus on practical strategies and their positive effects on user satisfaction closely aligns with the category’s core themes."
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T16:47:40",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, user feedback, and technical debt. However, it does not explicitly mention 'Unrealised Value' or its indicators. While there are elements of potential improvements and innovation opportunities, the primary focus is on deployment practices rather than exploring untapped opportunities within an organisation. The discussion lacks depth in terms of strategic insights or frameworks related to Unrealised Value.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T16:47:45",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the benefits of frequent deployments, which directly relates to the concept of Current Value by highlighting how real-time user insights and feedback can inform development decisions. It mentions metrics like user feedback and technical debt, aligning with the importance of assessing value delivered. However, while it touches on these aspects, it does not delve deeply into specific metrics or structured techniques for measuring Current Value, which slightly lowers the depth score. Overall, the primary focus is on the impact of deployment frequency on code quality and user satisfaction, making it relevant to the Current Value category.",
    "level": "Secondary",
    "reasoning_summary": "This content is relevant to the Current Value category because it explores how frequent deployments can enhance user satisfaction and code quality by enabling rapid feedback and adaptation. While it references user feedback and technical debt, it doesn’t provide detailed measurement methods, focusing instead on the broader impact of deployment practices on delivering value."
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T16:47:23",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which aligns with some principles of Agnostic Agile, such as value delivery and adaptability. However, it does not explicitly mention Agnostic Agile or its core principles, nor does it provide a deep exploration of the philosophy behind it. The focus is primarily on deployment practices rather than a broader discussion of agility in various contexts.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T16:47:32",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 30,
    "final_score": 32.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality and user feedback, which aligns with some principles of CaaP, such as continuous improvement and customer-centric strategies. However, it primarily focuses on technical practices rather than organisational design or the broader implications of treating a company as a product. The discussion lacks direct references to organisational culture, cross-functional collaboration, or strategic alignment, which are key aspects of the CaaP framework. Therefore, while there is some conceptual alignment, the depth and direct mentions are insufficient for a higher confidence score.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T16:47:35",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the benefits of frequent code deployments and their impact on code quality, user feedback, and team dynamics. It does not mention or discuss the principles of Cell Structure Design, the Beta Codex, or the characteristics of autonomous cells. While there are themes of accountability and responsiveness, they are not aligned with the core concepts of decentralised organisational structures. Therefore, the content does not meet the criteria for this category.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "category": "Liberating Structures",
    "calculated_at": "2025-04-28T14:37:16",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content focuses on the benefits of frequent deployments in software development, discussing aspects like user feedback and technical debt. However, it does not mention Liberating Structures or any specific facilitation techniques, nor does it align with the core themes of engagement and collaboration that are central to the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T16:47:52",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the benefits of frequent deployments and their impact on code quality, which does not directly address Open Space Agile principles or practices. While it touches on iterative development and user feedback, these concepts are not explicitly linked to Open Space Agile or its core themes such as psychological safety, co-creation, or shared ownership. The discussion lacks depth regarding Open Space Agile methodologies, making it a secondary topic rather than a primary focus.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 68.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 65.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content primarily focuses on the principle of frequent deployments and their impact on code quality, aligning with the principles of Continuous Improvement, Value Delivery, and Adaptability. It discusses actionable steps and the benefits of these practices, supporting the claims with evidence, such as user feedback and maintainability. Although it mentions principles indirectly, the depth of discussion and the applicability of these practices to Agile methodologies support a moderate confidence score.",
    "level": "Secondary"
  },
  "Tool": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 65.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 15.0,
    "non_ai_confidence": null,
    "final_score": 65.0,
    "reasoning": "The content discusses the benefits of frequent deployments and practices such as iterative development, which are relevant to Agile practices. However, it focuses more on the impact of deployment frequency rather than specific tools or mechanisms that facilitate this process. While it mentions practical steps for improvement, the discussion lacks depth regarding specific tools or their integration within frameworks like Agile, Lean, or DevOps, which are required for a higher confidence score.",
    "level": "Secondary"
  },
  "Philosophy": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the practical aspects and benefits of frequent deployments rather than exploring the philosophical foundations behind Agile, Lean, or DevOps. While it touches upon ideas such as iterative development and continuous improvement, it lacks deep engagement with the 'why' and 'what' of these methodologies, focusing instead on 'how' to improve practices. Key philosophical discussions and theoretical implications are absent.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 40.0,
    "ai_mentions": 5,
    "ai_alignment": 30,
    "ai_depth": 50,
    "non_ai_confidence": null,
    "final_score": 40.0,
    "reasoning": "The content brings up the importance of frequent deployments in software development and practices such as hypothesis-driven engineering, which are indeed relevant to the disciplines at play like Agile and Lean. However, it primarily emphasizes specific tools and techniques for improving code quality without deeply engaging with the overarching principles that define a discipline. While there is some alignment with the category regarding continuous improvement, it lacks in discussing the systemic application and maturation of these practices within a professional context.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 20.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content primarily discusses the benefits of frequent deployments for code quality without explicitly addressing artifacts or their formal representations in Agile, Scrum, or Lean contexts. While it implies the importance of breaking down work into manageable pieces (which could relate to artifacts like the Product Backlog), it does not provide a detailed exploration of specific artifacts, their structures, or their roles in the systems mentioned. Therefore, the confidence score reflects a low alignment with the 'Artifact' category.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 65.0,
    "ai_mentions": 20.0,
    "ai_alignment": 40.0,
    "ai_depth": 55.0,
    "non_ai_confidence": null,
    "final_score": 65.0,
    "reasoning": "The content primarily discusses development practices surrounding frequent deployments and code quality improvement, with a significant focus on technical processes rather than observability itself. While it mentions enhancing 'observability' in the context of gaining insights through telemetry and monitoring tools, this mention is not the central theme of the content. However, the article aligns with some core themes of observability, such as the importance of real-time user insights and data-driven decision-making, suggesting a moderate level of relevance to the category but lacking depth in actual observability practices.",
    "level": "Secondary"
  },
  "Practice": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 88.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 35,
    "non_ai_confidence": null,
    "final_score": 88.0,
    "reasoning": "The content focuses heavily on the practice of frequent deployments, detailing both the pitfalls of infrequent deployments and the benefits of adopting a practice of deploying frequently. It discusses actionable steps to improve deployment frequency and addresses issues relevant to collaboration and continuous improvement. The depth of discussion includes specific benefits, consequences, and practical recommendations which makes it a solid fit for the 'Practice' category.",
    "level": "Primary"
  },
  "Method": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Method",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 75.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 35,
    "non_ai_confidence": null,
    "final_score": 75.0,
    "reasoning": "The content focuses extensively on the practice of frequent deployments as a method to enhance code quality, thoroughly discussing specific procedures and benefits associated with iterative development and smaller batch sizes. It provides practical steps for improvement, aligning strongly with the core themes of structured methods in Agile practices. While the content does touch on concepts like technical debt and user feedback, it primarily emphasizes actionable methods directly related to software deployment, making it a strong candidate for the 'Method' category.",
    "level": "Secondary",
    "reasoning_summary": "This content is a great fit for the 'Method' category, as it centres on practical steps and structured approaches to frequent deployments. It highlights how iterative development and smaller releases can improve code quality, aligning closely with Agile methodologies. While related topics like technical debt are mentioned, the main focus remains on actionable deployment strategies, making it well-suited to this classification."
  },
  "Model": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Model",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 25.0,
    "ai_depth": 7.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content discusses the practices of frequent deployments and their impact on code quality but does not explicitly mention or analyze any specific conceptual models or frameworks relevant to the category 'Model'. While it does touch on principles of iterative development and user feedback, which relate somewhat to Agile practices, the focus is more on practical advice rather than on the examination of models or frameworks. Therefore, it scores low on direct mentions and depth, while also having modest alignment with the content of the category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:48:46",
    "ai_confidence": 32.0,
    "ai_mentions": 100.0,
    "ai_alignment": 30.0,
    "ai_depth": 25.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the benefits and practices surrounding frequent deployments, discussing issues like technical debt and maintainability but does not explicitly reference any established frameworks such as Agile, DevOps, or Lean methodologies. While it touches on concepts like iterative development and continuous improvement, these are not fully tied to a framework, nor does it provide a structured methodology or best practices specific to frameworks. The brief mention of continuous improvement indicates a loose connection to the category, but the depth and explicit alignment to framework discussions are lacking.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:48:47",
    "ai_confidence": 68.0,
    "ai_mentions": 3,
    "ai_alignment": 70.0,
    "ai_depth": 65.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses practices related to frequent deployments and the impacts these have on code quality, user feedback, and team dynamics. It touches on the principles of continuous improvement, reduces batch size, and iterates on features, all of which align with actionable tenets in Agile and DevOps. However, it lacks a strong focus on formalized tenets or frameworks and leans more towards general insights rather than specific guiding rules.",
    "level": "Secondary"
  },
  "Capability": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:48:47",
    "ai_confidence": 36.0,
    "ai_mentions": 100.0,
    "ai_alignment": 40.0,
    "ai_depth": 30.0,
    "non_ai_confidence": null,
    "final_score": 36.0,
    "reasoning": "The content discusses the importance of frequent deployments in improving code quality and highlights the benefits of smaller changes and real-time user feedback, which can be linked to the theme of capabilities in Agile and DevOps. However, the primary focus is on practices rather than on developing enduring competencies or organizational capabilities, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:32",
    "ai_confidence": 14.71,
    "ai_mentions": 0.2,
    "ai_alignment": 1.6,
    "ai_depth": 2.0,
    "ai_intent": 2.1,
    "ai_audience": 4.3,
    "ai_signal": 3.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content is a reflective and practical piece on the benefits of frequent deployments, team habits, and code quality. It discusses the impact of batch size, technical debt, user feedback, hypothesis-driven development, and deployment frequency. However, there is no direct or indirect mention of Service Level Expectation (SLE) as a technical metric, nor does the content use the mathematical forecasting or probability elements that define SLE in Agile, Scrum, or Kanban contexts. While the author promotes ways to become more predictable and responsive—shared values with SLE—the text never references SLE terminology or concepts such as SLE ranges, probabilities, Kanban metrics, cycle time analysis, or any authoritative SLE sources. There is mild alignment in audience (teams interested in continuous delivery and improvement), and some conceptual overlap in intent (predictable, responsive delivery), but no substantial surface or depth regarding SLE calculation, transparency, or its explicit use in workflow governance. The substance and signal relate to deployment and quality, not formal service-level delivery forecasting. Therefore, each scoring dimension is rated very low, and the final confidence score is deeply below the bar for this category.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Ethos",
    "calculated_at": "2025-05-13T21:55:04",
    "ai_confidence": 36.8,
    "ai_mentions": 1.3,
    "ai_alignment": 3.7,
    "ai_depth": 4.1,
    "ai_intent": 3.5,
    "ai_audience": 4.2,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content primarily covers the practical benefits of frequent deployments—improved code quality, reduced technical debt, and user feedback—rather than deeply exploring ethos. Although it touches on accountability and continuous improvement, it does so from a behavioral and process perspective, not linking these aspects to foundational beliefs or system-level convictions. There are no direct references to ethos or substantial discussions about values underpinning Agile, DevOps, or Lean. The intended audience (practitioners) is partially aligned, but the article remains squarely focused on practices and outcomes. Minimal alignment with the core scope of ethos results in a low confidence score.",
    "reasoning_summary": "This article focuses on the practical and behavioral outcomes of frequent deployments rather than exploring the foundational system-level convictions characteristic of Ethos. While relevant to practitioners, its depth and alignment with the category remain limited, resulting in a low confidence fit.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T21:55:02",
    "ai_confidence": 84.61,
    "ai_mentions": 7.7,
    "ai_alignment": 9.3,
    "ai_depth": 8.6,
    "ai_intent": 8.2,
    "ai_audience": 9.1,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 85.0,
    "reasoning": "The content robustly discusses how frequent deployments connect to user feedback, iterative improvements, and measuring real customer outcomes. Concepts such as real-time user insights, hypothesis-driven engineering, telemetry, and customer-driven pivots are presented in detail. The main themes align strongly with the definition of Customer Focus, targeting technical practitioners and clearly emphasizing actionable methods. While the category is not always named directly, its principles are thoroughly explored, and the content consistently links engineering practices to customer value and outcomes. The signal is strong with effective, topic-relevant advice throughout.",
    "reasoning_summary": "This article strongly aligns with Customer Focus, detailing how frequent deployments foster customer-driven feedback, iterative improvement, and measurable user outcomes. It offers practical guidance for practitioners on using engineering practices to drive customer value, making it a confident fit for the category.",
    "level": "Primary"
  },
  "First Principal": {
    "resourceId": "D1wz-J1jklQ",
    "category": "First Principal",
    "calculated_at": "2025-05-13T21:55:02",
    "ai_confidence": 33.65,
    "ai_mentions": 0.6,
    "ai_alignment": 4.8,
    "ai_depth": 4.2,
    "ai_intent": 3.9,
    "ai_audience": 7.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on the benefits and practices of frequent code deployments, highlighting impacts on code quality, technical debt, and feedback loops. While these are important in Lean/Agile/DevOps, the discussion does not explicitly identify or explore first principles as foundational, immutable constraints. Rather, practices are presented as strategies or heuristics. There is no meaningful distinction between first principles and context-dependent advice, and terms like first principles are never mentioned directly. The content is practitioner-oriented and mostly relevant to DevOps/Agile audiences, but the depth doesn't extend to system-defining axioms. Confidence is moderate due to thematic overlap with common professional debates in Lean/Agile but falls far short on categorically anchoring arguments to the 'First Principal' definition.",
    "reasoning_summary": "This content discusses deployment frequency's impact on code quality and team outcomes, but it frames practices as context-driven strategies—not as immutable first principles. There's thematic overlap, but it lacks explicit focus on foundational constraints, so category fit is weak.",
    "level": "Ignored"
  },
  "Definition of Workflow": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-23T22:06:15",
    "ai_confidence": 18.4,
    "ai_mentions": 1.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.2,
    "ai_audience": 4.8,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content centers on the benefits of frequent deployments and how they impact code quality, feedback loops, and technical debt—primarily focusing on release and iteration practices. It mentions work batching and process improvement tangentially, but never addresses Definition of Workflow, workflow policies, WIP limits, or Kanban concepts. The audience (software practitioners/developers) overlaps somewhat, but core Kanban workflow theory is absent. No penalties were applied as the content is current and not critical.",
    "reasoning_summary": "This content outlines how frequent deployments benefit code quality and agile development, but it does not discuss Definition of Workflow, Kanban, or explicit workflow policies. Its focus is on deployment practice, not on modeling or making workflow explicit as defined by the category.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:04:05",
    "ai_confidence": 37.42,
    "ai_mentions": 0.7,
    "ai_alignment": 3.3,
    "ai_depth": 3.6,
    "ai_intent": 2.3,
    "ai_audience": 4.1,
    "ai_signal": 3.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "Direct mentions of 'Product Developer' are absent. The content centers on code quality and the benefits of frequent deployments, aligning mostly with generic software engineering and DevOps best practices. While the text uses 'we' and references the developer's experience, it does not discuss the formal accountability, structure, purpose, or behaviors specific to the Product Developer role as defined by modern product frameworks. No substantial exploration of Product Developer concepts (e.g., collective accountability, Sprint Backlog ownership, cross-functional responsibilities, or integration with Product Owner/Scrum Master) is present. The main focus is on pragmatic delivery improvement, not the accountability, mindset, or defined behaviors of Product Developers. Thus, the confidence of correct category fit is modest.",
    "reasoning_summary": "This content focuses on deployment practices and code quality, not the Product Developer role or its distinct accountabilities. It lacks direct references and substantial discussion relevant to Product Developer-specific responsibilities and is only indirectly aligned with the category definition.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:04:06",
    "ai_confidence": 26.85,
    "ai_mentions": 0.2,
    "ai_alignment": 2.2,
    "ai_depth": 2.9,
    "ai_intent": 4.5,
    "ai_audience": 6.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content is focused on the practice and benefits of frequent code deployments, emphasizing feedback loops, technical debt reduction, and iterative delivery. While it references user feedback and hypothesis-driven development, there is no explicit or implicit discussion of human-AI collaboration, AI partnership, or collective intelligence as defined. The primary audience—developers and DevOps practitioners—is loosely aligned with collective intelligence topics, but the content itself never discusses distributed cognition between humans and AI, nor emergent capabilities from such partnerships. Depth is moderate regarding engineering practices and cultural improvement for teams, but collective intelligence is neither directly nor conceptually central to the message.",
    "reasoning_summary": "This piece discusses frequent deployment benefits in software teams, focusing on feedback, technical debt, and iterative engineering. It does not reference human-AI collaboration or collective intelligence concepts, so its relevance to this category is minimal.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-23T09:04:06",
    "ai_confidence": 5.2,
    "ai_mentions": 0.1,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.6,
    "ai_audience": 0.7,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content does not directly mention Objective Key Results (OKRs) nor does it reference their principles, structure, or John Doerr’s framework. Instead, it centers on the transformative benefits of frequent code deployments — such as code quality, maintainability, and iterative learning — within a DevOps/engineering context. While there is thematic overlap in discussing iterative learning and outcome orientation, the piece does not define objectives, key results, or explicitly connect its practices to the OKR framework. Strategic intent, alignment, and tracking as defined in the OKR system are absent here; no language or examples refer to OKRs, measurement as outcomes, or strategic cascades. The intended audience is practitioners interested in DevOps and continuous delivery, not strategic leaders focused on OKRs. Signal-to-noise is low for OKR relevance, as the discourse is entirely about deployment cadence and technical practice with no reference to OKRs.",
    "reasoning_summary": "This content focuses on the impact of frequent code deployments in improving code quality and user feedback, with no mention or substantive alignment to Objective Key Results. Its themes, purpose, and audience remain unrelated to the OKR framework.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:46",
    "ai_confidence": 72.45,
    "ai_mentions": 1.2,
    "ai_alignment": 8.3,
    "ai_depth": 7.7,
    "ai_intent": 8.0,
    "ai_audience": 7.5,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content thoroughly discusses modern engineering practices—specifically, how frequent deployments foster faster feedback, technical debt control, and iterative value delivery. Concepts such as small batch sizes, continuous improvement, observability, and hypothesis-driven engineering strongly align with Agentic Engineering's focus on developer agency, feedback-driven adaptation, and systemic observability. The discussion addresses software engineers and technical practitioners, fitting Agentic Engineering’s target audience. However, there is only an implicit—not explicit—mention of Agentic Engineering; the terminology and certain ethical/AI aspects are not foregrounded, modestly lowering depth and direct mentions. Minor portions focus on general best practices, causing a slight dip in signal score. Overall, the content embodies the spirit and substance of Agentic Engineering, even if it does not use the term itself.",
    "reasoning_summary": "This content exemplifies Agentic Engineering by emphasizing fast feedback, developer autonomy, observability, and continuous value delivery through frequent deployments. Despite lacking explicit use of the term, its main themes and target audience align closely with the category’s philosophical core.",
    "level": "Secondary"
  },
  "Agentic Software Delivery": {
    "resourceId": "D1wz-J1jklQ",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:23",
    "ai_confidence": 38.5,
    "ai_mentions": 0.3,
    "ai_alignment": 3.9,
    "ai_depth": 3.7,
    "ai_intent": 4.2,
    "ai_audience": 5.2,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content thoroughly discusses frequent deployments, CI/CD, technical debt, observability, iterative development, and user feedback—some relevant to agentic software delivery's engineering practices. However, there are no explicit or implicit references to autonomous AI agents, agentic principles, or synergy between AI and humans in delivery. The main focus is on DevOps best practices, not the integration of contextual, proactive AI. Audience and purpose loosely overlap, but the fit is partial and indirect.",
    "reasoning_summary": "Content focuses on DevOps, frequent deployments, and feedback loops—key engineering practices—but lacks agentic AI, agency, or human–AI integration. Only partial conceptual alignment; explicit agentic elements are missing.",
    "level": "Ignored"
  }
}