{
  "AI": {
    "category": "AI",
    "calculated_at": "2025-02-12T15:22:45",
    "ai_confidence": 0,
    "non_ai_confidence": 30,
    "final_score": 3.0,
    "reasoning": "Content primarily discusses deployment strategies and technical debt without any mention of AI or its integration in Agile or DevOps practices.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-02-12T15:22:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with little focus on team dynamics, communication, or collaboration within Agile or DevOps frameworks.",
    "level": "Ignored"
  },
  "MVP": {
    "category": "MVP",
    "calculated_at": "2025-03-14T16:44:13",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 55.0,
    "non_ai_confidence": 0,
    "final_score": 60.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with MVP principles. It highlights the need for rapid feedback and learning, key aspects of MVPs. However, it does not explicitly mention MVP or its definition, and the focus is more on deployment practices rather than the MVP concept itself.",
    "level": "Tertiary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-03-11T13:05:29",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 85.0,
    "reasoning": "The content explicitly discusses the importance of frequent deployments and how they can reduce technical debt, improve code quality, and enhance customer feedback. It aligns well with the core themes of deployment frequency in Agile and DevOps, providing detailed insights into the benefits of smaller batch sizes and continuous delivery practices. The depth of discussion is substantial, covering various aspects such as maintainability, customer interaction, and the impact on team dynamics.",
    "level": "Primary"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-03-11T14:15:47",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the impact of deployment frequency on code quality and team performance, which aligns with throughput concepts. It mentions reducing batch size and increasing deployment frequency, both of which are strategies for improving throughput. However, while it touches on related themes, it does not explicitly focus on throughput as a primary topic, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T15:22:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to frequent deployments and technical debt, without a clear focus on Scrum Values.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-03-11T16:04:33",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns with Lean principles of minimising waste and maximising learning through iterative development. It highlights the benefits of smaller, manageable changes and the role of user feedback, both of which are core themes in Lean Product Development. However, while it touches on Lean concepts, it primarily focuses on deployment practices rather than a comprehensive exploration of Lean methodologies, which slightly limits its depth in the category.",
    "level": "Secondary"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-02-12T15:22:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a clear focus on Test Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-02-12T15:22:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on test automation principles, practices, or tools.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T15:22:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment strategies and technical debt in software development, with no specific focus on the Windows operating system or its related topics.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T15:23:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical deployment practices and the impact on technical debt, without a focus on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-03-11T17:18:16",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 10,
    "final_score": 66.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns with the principles of empirical process control by emphasising decision-making based on observed evidence (user feedback) rather than assumptions. It highlights the benefits of smaller, manageable changes and iterative development, which are core themes of empirical process control. However, while it touches on these concepts, it does not delve deeply into the theoretical foundations or specific Agile frameworks, which slightly limits its depth of discussion.",
    "level": "Secondary"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-03-13T14:45:08",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses practical strategies for improving code quality through frequent deployments, which aligns well with the core themes of Pragmatic Thinking. It emphasises real-world applications of Agile principles, such as iterative development and hypothesis-driven engineering, showcasing how these practices can enhance collaboration and efficiency. The depth of discussion is significant, providing specific examples and actionable steps, which further supports its alignment with pragmatic approaches. Overall, the content is focused on practical problem-solving in a complex environment, justifying a high confidence score.",
    "level": "Secondary"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T15:23:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical processes related to deployment and technical debt, with no focus on employee engagement or motivation.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-03-13T14:55:53",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 35,
    "non_ai_confidence": 30,
    "final_score": 73.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they relate to delivering smaller, manageable increments of work. It highlights the benefits of iterative development, user feedback, and maintaining code quality, which aligns well with the Increment category. However, while it touches on key themes, it does not delve deeply into the specific Agile frameworks or the formal definition of an Increment, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-03-14T16:44:26",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 67.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which indirectly supports the concept of innovation through improved practices. However, it lacks explicit references to the Ability to Innovate category and does not delve deeply into frameworks or metrics for measuring innovation capabilities. The focus is more on deployment practices rather than a comprehensive exploration of innovation strategies.",
    "level": "Secondary"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on technical debt, which relates to strategic approaches in Agile environments. However, the primary focus is on technical practices rather than a clear strategic framework or alignment with organisational goals.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T15:23:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on Agile Planning Tools or methodologies.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-12T15:23:20",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and deployment practices, with no clear focus on portfolio management or strategic alignment of projects.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-02-12T15:23:21",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment strategies and technical debt, with no clear focus on the Scrum Master role or related responsibilities.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-03-14T16:44:08",
    "ai_confidence": 42.0,
    "ai_mentions": 2,
    "ai_alignment": 35.0,
    "ai_depth": 45.0,
    "non_ai_confidence": 0,
    "final_score": 38.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and team dynamics, touching on aspects like accountability and real-time user insights. However, it primarily focuses on deployment practices rather than directly addressing team performance strategies or methodologies. While there are mentions of team dynamics, the depth of discussion on team performance is limited, making it a secondary focus rather than a primary one.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-03-14T16:43:51",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 56.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are aligned with Agile principles. However, it primarily focuses on deployment practices rather than Agile Planning methodologies, making it a secondary discussion rather than a primary focus.",
    "level": "Tertiary"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T15:23:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on forecasting methodologies or practices within Agile and Scrum.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T15:23:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, with no clear focus on estimation techniques or practices within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of frequent deployments and data-driven decision-making, which aligns with some principles of Evidence-Based Management. However, the primary focus is on technical debt and deployment practices rather than a comprehensive exploration of EBM principles.",
    "level": "Tertiary"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-02-12T15:23:32",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses technical practices related to frequent deployments and technical debt, without a focus on organisational change strategies or methodologies.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-02-12T15:23:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without any mention of Azure Boards or its functionalities in Agile project management.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T15:23:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to software deployment and technical debt, with no clear focus on market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-03-14T16:44:15",
    "ai_confidence": 47.0,
    "ai_mentions": 2,
    "ai_alignment": 35.0,
    "ai_depth": 45.0,
    "non_ai_confidence": 50,
    "final_score": 47.0,
    "reasoning": "The content discusses accountability in the context of code quality and team practices, particularly highlighting how frequent deployments encourage better coding practices and a sense of responsibility among team members. However, the primary focus is on deployment strategies rather than a deep exploration of accountability as a core Agile principle. While it mentions accountability in relation to maintainability and team dynamics, it does not extensively cover the broader themes of ownership, trust, or collective responsibility within Agile frameworks.",
    "level": "Tertiary"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-03-13T15:19:15",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 75.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns closely with Continuous Delivery principles. It highlights the benefits of smaller, manageable changes, the need for regular feedback, and the reduction of technical debt, all of which are core themes in Continuous Delivery. The depth of discussion is substantial, providing practical steps for improvement and emphasising the iterative nature of development. However, while it strongly aligns with Continuous Delivery, it does not explicitly mention the term 'Continuous Delivery' or delve into specific methodologies or practices outlined by experts in the field, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-12T15:23:44",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without addressing working agreements or team collaboration principles.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-03-14T16:44:28",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and user feedback, which indirectly relates to customer satisfaction. However, it primarily focuses on technical practices rather than explicitly addressing customer satisfaction principles or methodologies. While it mentions the importance of user insights and improving customer happiness, these points are secondary to the main discussion on deployment strategies.",
    "level": "Secondary"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T15:23:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to frequent deployments and technical debt, without a clear focus on Agile leadership roles or practices.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-03-13T16:19:17",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 66.0,
    "reasoning": "The content discusses the importance of frequent deployments, which is a key aspect of Continuous Integration. It highlights the benefits of smaller, manageable changes and the need for regular feedback, aligning with CI principles. However, it lacks explicit mention of CI tools, automated testing, or detailed strategies for managing code merges, which are crucial for a higher confidence score in this category.",
    "level": "Secondary"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-03-13T16:25:45",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 70.0,
    "reasoning": "The content discusses the benefits of frequent deployments, which aligns with Lean principles of iterative learning and continuous improvement. It highlights waste reduction through smaller batch sizes and the importance of feedback, which are core concepts in Lean thinking. However, while it touches on these principles, it primarily focuses on deployment practices rather than a comprehensive exploration of Lean itself, leading to a high but not perfect confidence score.",
    "level": "Secondary"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T15:23:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on the Daily Scrum or its related practices.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they relate to technical debt and customer feedback, which aligns with Agile principles of delivering value and responding to change. However, it primarily focuses on technical practices rather than the foundational values and principles of Agile.",
    "level": "Tertiary"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-02-12T15:24:01",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on automated testing principles or practices.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-02-12T15:24:02",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without addressing the criteria or practices related to the Definition of Ready.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-02-12T15:24:04",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a clear focus on the Definition of Done or its criteria.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-12T15:24:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on cross-functional teams or their characteristics.",
    "level": "Ignored"
  },
  "Software Developers": {
    "category": "Software Developers",
    "calculated_at": "2025-03-13T16:27:17",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content primarily discusses the impact of frequent deployments on code quality, which aligns closely with Agile principles of iterative development and continuous feedback. It explicitly mentions concepts such as technical debt, maintainability, and user feedback, all of which are relevant to software developers' practices in Agile and DevOps contexts. The depth of discussion is substantial, providing practical steps for improvement and emphasising the importance of smaller batch sizes and increased deployment frequency. Overall, the content is highly relevant to the role of software developers, making it a strong fit for the category.",
    "level": "Secondary"
  },
  "Scaled Agile": {
    "category": "Scaled Agile",
    "calculated_at": "2025-02-12T15:24:09",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without addressing scaling Agile practices or coordination among multiple teams.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-03-14T14:46:08",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 32,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content extensively discusses the impact of frequent deployments on code quality, aligning closely with best practices in Continuous Integration and Continuous Deployment (CI/CD). It provides detailed insights into the benefits of smaller, manageable changes, technical debt, and iterative development, which are core themes in software development methodologies. The depth of discussion is significant, offering practical steps for improvement and a clear connection to user feedback and maintainability, reinforcing its primary focus on software engineering practices.",
    "level": "Secondary"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-02-12T15:24:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without any direct reference to Azure Repos or its functionalities.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-02-12T15:24:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a focus on acceptance criteria or collaborative development practices central to ATDD.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can lead to better understanding of customer needs through telemetry and feedback. However, the primary focus is on technical debt and deployment practices rather than a dedicated exploration of customer feedback loops.",
    "level": "Tertiary"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-03-14T16:44:23",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with Agile principles of continuous value delivery and adaptability. It highlights the benefits of smaller, manageable changes and real-time user feedback, which are key aspects of Agile strategy. However, while it touches on Agile concepts, it primarily focuses on technical practices related to deployment rather than a broader strategic context, which slightly limits its depth in terms of Agile strategy discussions.",
    "level": "Secondary"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T15:24:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment frequency and technical debt, with no focus on collaboration tools or team dynamics.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses frequent deployments and their impact on technical debt, which aligns with Agile principles of iterative development and continuous delivery. However, it primarily focuses on technical practices rather than broader Agile transformation strategies or methodologies.",
    "level": "Tertiary"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-03-14T15:05:49",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content primarily discusses the impact of frequent deployments on code quality and operational efficiency, aligning closely with the core themes of operational practices. It provides detailed insights into the benefits of smaller batch sizes, increased deployment frequency, and the importance of real-time user feedback, all of which are essential for improving operational efficiency in Agile and DevOps contexts. The depth of discussion is significant, offering practical steps for improvement, which further supports its classification under Operational Practices.",
    "level": "Secondary"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can lead to better decision-making regarding code quality and customer needs. However, the primary focus is on technical practices rather than structured decision-making methodologies.",
    "level": "Tertiary"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-03-14T16:43:23",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content extensively discusses the impact of frequent deployments on code quality and user feedback, which aligns closely with the principles of working software. It highlights the importance of iterative development, gathering user insights, and maintaining software quality through regular updates. The depth of discussion on practical steps for improvement and the benefits of smaller, manageable changes further supports its relevance to the category. However, while it is focused on software delivery, it does not explicitly mention Agile or Scrum frameworks, which slightly lowers the alignment score.",
    "level": "Secondary"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-02-12T15:24:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on Sprint Review processes or related topics.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-03-14T16:44:40",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content primarily discusses the benefits of frequent deployments and their impact on code quality, which is more aligned with software development practices than Site Reliability Engineering. While it touches on aspects like monitoring and user feedback, it lacks a direct focus on SRE principles such as incident response, SLOs, or the integration of development and operations. The discussion is more about improving deployment processes rather than enhancing system reliability in production environments.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T15:24:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical debt and deployment strategies, with only a brief mention of peer pressure among colleagues, which does not align with the core themes of psychological safety.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better understanding of customer needs and improved product quality, which are relevant to customer retention. However, the primary focus is on technical debt and deployment practices rather than direct strategies for retaining customers.",
    "level": "Tertiary"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of frequent deployments and hypothesis-driven engineering practices, which align with Lean Startup principles. However, the primary focus is on technical debt and code quality rather than explicitly on Lean Startup methodologies like MVP or the Build-Measure-Learn feedback loop.",
    "level": "Tertiary"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T15:24:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a focus on asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-03-14T16:43:27",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can lead to better code quality and user insights, which aligns with the principles of experimentation. It mentions hypothesis-driven engineering and iterative development, indicating a focus on testing ideas and validating assumptions. However, the primary focus is more on deployment practices rather than a systematic exploration of experimentation within Agile workflows, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-12T15:24:46",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment frequency, technical debt, and coding practices, with no clear focus on revenue per employee metrics or related financial efficiency discussions.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-03-14T16:44:17",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, which aligns with CI/CD principles. However, it lacks specific references to Azure Pipelines, YAML configurations, or Azure DevOps services, making it more of a general discussion on deployment practices rather than a focused discourse on Azure Pipelines.",
    "level": "Ignored"
  },
  "Agile Project Management": {
    "category": "Agile Project Management",
    "calculated_at": "2025-03-14T16:43:29",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which align with agile principles. However, it lacks explicit references to agile frameworks like Scrum or Kanban, and does not delve deeply into agile roles or ceremonies. The focus is more on deployment practices than on agile project management as a whole.",
    "level": "Secondary"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing batch sizes, which aligns with Lean principles of minimising waste and enhancing efficiency. However, the primary focus is on technical debt and deployment practices rather than Lean Thinking itself.",
    "level": "Tertiary"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-02-12T15:24:53",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical deployment practices and their impact on code quality and technical debt, without focusing on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T15:24:55",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without addressing large-scale Agile frameworks or enterprise-level practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-02-12T15:24:57",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on the Product Backlog or its management.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-02-12T15:24:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical practices related to deployment and technical debt, with minimal focus on team dynamics or motivation.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-03-14T16:43:31",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 10,
    "final_score": 71.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with hypothesis-driven practices. It mentions 'hypothesis-driven engineering' and the need for user feedback, indicating a focus on experimentation and learning. However, the primary emphasis is on deployment frequency rather than a detailed exploration of hypothesis formulation or testing, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-12T15:25:01",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can help understand customer needs through telemetry and feedback, which aligns with product discovery. However, the primary focus is on technical practices and reducing technical debt rather than directly exploring methodologies for identifying customer needs or defining product features.",
    "level": "Tertiary"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-03-14T16:43:33",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content explicitly discusses the importance of frequent deployments and their impact on code quality, user feedback, and team dynamics. It aligns well with the principles of Continuous Delivery and Agile methodologies, providing detailed insights into the benefits and practical steps for implementing frequent releases. The depth of discussion is substantial, covering both the pitfalls of infrequent deployments and the advantages of a more frequent release strategy.",
    "level": "Secondary"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing technical debt, which aligns with Agile principles of continuous improvement and customer feedback. However, it primarily focuses on technical practices rather than the broader Agile philosophy.",
    "level": "Tertiary"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T15:25:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-03-14T16:44:37",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 20,
    "final_score": 40.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to smaller, more manageable changes, which indirectly relates to Lead Time. However, it does not explicitly define or focus on Lead Time as a primary metric. The discussion touches on concepts like delayed feedback and technical debt, which are relevant but not central to the definition of Lead Time. Overall, while there is some alignment with the category, the primary focus is on deployment frequency rather than Lead Time itself.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T15:25:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Scrum Product Development": {
    "category": "Scrum Product Development",
    "calculated_at": "2025-03-14T16:44:21",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 20,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of frequent deployments and iterative development, which aligns with Scrum principles. However, it lacks explicit references to Scrum roles, events, or the Product Backlog, which are crucial for a higher confidence score. The focus is more on deployment practices than on Scrum-specific methodologies.",
    "level": "Secondary"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of frequent deployments and their impact on technical debt and product quality, which relates to customer needs and product success. However, the primary focus is on technical implementation and engineering practices rather than a clear product strategy framework or vision.",
    "level": "Tertiary"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can help in understanding customer needs and managing technical debt, which relates to decision-making in complex environments. However, the primary focus is on technical practices rather than a deep exploration of sensemaking principles or frameworks.",
    "level": "Tertiary"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-03-14T16:43:37",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content primarily focuses on the impact of frequent deployments on code quality, which aligns closely with the principles of software craftsmanship and technical excellence. It discusses best practices such as reducing batch size, increasing deployment frequency, and managing technical debt, all of which are core themes of the Technical Mastery category. The depth of discussion is substantial, providing practical steps and insights into how these practices can enhance software development. However, while the content is strong, it does not delve deeply into all aspects of software architecture or engineering practices, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T15:25:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on transparency or its role in Agile processes.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-02-12T15:25:27",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses deployment frequency and technical debt, with no clear focus on Scrum roles, team dynamics, or collaboration practices.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing batch sizes, which indirectly relates to Cycle Time by emphasising the importance of smaller, more manageable work units and their impact on workflow efficiency. However, the primary focus is on technical debt and deployment practices rather than Cycle Time itself.",
    "level": "Tertiary"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and understanding of customer needs, which aligns with the principles of Continuous Learning. However, the primary focus is on technical debt and deployment strategies rather than explicitly on continuous learning practices or team improvement.",
    "level": "Tertiary"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-03-14T16:43:56",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality and user feedback, which aligns with some aspects of trend analysis in Agile and DevOps. However, it lacks explicit mentions of trend analysis as a primary focus and does not delve deeply into the identification of patterns or shifts within Agile or DevOps frameworks. The discussion is more about practices rather than analysing trends, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-03-14T16:44:10",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which can relate to self-organisation principles, such as accountability and continuous improvement. However, it primarily focuses on deployment practices rather than explicitly addressing self-organisation or team autonomy. The mention of accountability and team confidence hints at self-organisation but lacks depth in exploring the core themes of the category.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-03-06T14:36:43",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content extensively discusses the importance of frequent deployments and their impact on code quality, technical debt management, and maintainability, which are all key aspects of engineering excellence. It directly addresses best practices in coding and the benefits of continuous delivery, aligning well with the core themes of the category. The depth of discussion is significant, providing detailed insights into how these practices can enhance software craftsmanship and improve overall engineering processes.",
    "level": "Secondary"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the benefits of frequent deployments and technical debt reduction, which are relevant to digital transformation practices. However, it primarily focuses on software development processes rather than a broader strategic adoption of digital technologies across an organisation.",
    "level": "Tertiary"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-02-12T15:25:41",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses deployment practices and technical debt rather than system configuration processes or methodologies.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-03-14T16:43:40",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt in the context of deployment frequency and its impact on code quality. It explicitly mentions technical debt accumulation as a consequence of infrequent deployments, which aligns with the category's focus. However, while it touches on the topic, the primary focus is on deployment practices rather than a comprehensive exploration of technical debt management strategies. The depth of discussion on technical debt is moderate, as it is integrated into broader themes of deployment and maintainability.",
    "level": "Secondary"
  },
  "Scaling Scrum": {
    "category": "Scaling Scrum",
    "calculated_at": "2025-02-12T15:25:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and reducing technical debt, without a clear focus on scaling Scrum principles or practices.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-12T15:25:47",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on remote working practices or Agile methodologies in a distributed context.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of data and telemetry in decision-making related to software development and deployment, which aligns with evidence-based practices. However, the primary focus is on technical aspects of deployment rather than leadership decisions, making it a secondary theme.",
    "level": "Tertiary"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-03-14T16:43:42",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 10,
    "final_score": 66.0,
    "reasoning": "The content discusses the impact of deployment frequency on code quality and development practices, which aligns with the core themes of deployment strategies. It mentions practical steps for improvement, such as reducing batch size and increasing deployment frequency, which are relevant to deployment methodologies. However, while it touches on important aspects of deployment, it lacks detailed exploration of specific strategies like Blue-Green Deployments or Canary Releases, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T15:25:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "calculated_at": "2025-02-12T15:26:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without addressing scaling agility frameworks, leadership roles, or organisational structures.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-03-07T12:36:21",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 10,
    "final_score": 57.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and customer feedback. However, it primarily focuses on technical aspects of deployment and coding practices rather than the strategic alignment of product management. While there are mentions of customer needs and feedback, the depth of discussion on product management methodologies and frameworks is limited, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T15:26:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to frequent deployments and technical debt, without a clear focus on organisational culture or its influence on Agile methodologies.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-03-14T16:44:02",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the importance of frequent deployments, which aligns with modern source control practices, particularly in relation to continuous integration and deployment. It highlights the benefits of smaller, manageable changes and the need for regular feedback, which are key aspects of effective version control. However, while it touches on these topics, it does not delve deeply into specific version control systems or methodologies, which slightly limits its depth of discussion.",
    "level": "Secondary"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T15:26:07",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, with no clear focus on coaching practices or themes.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T15:26:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to software deployment and technical debt, without a clear focus on organisational dynamics or systems thinking.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can help in understanding customer needs through telemetry and feedback, which aligns with product validation practices. However, the primary focus is on technical debt and deployment strategies rather than direct user testing or validation methodologies.",
    "level": "Tertiary"
  },
  "Scaling Kanban": {
    "category": "Scaling Kanban",
    "calculated_at": "2025-02-12T15:26:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on Kanban principles or scaling Kanban practices.",
    "level": "Ignored"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-03-14T16:43:45",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 74.0,
    "reasoning": "The content focuses extensively on the benefits and practices of frequent deployments, which directly relates to release management. It discusses the importance of smaller, manageable changes, the impact of deployment frequency on code quality, and the necessity of user feedback, all of which align with key topics in release management. The depth of discussion is significant, providing practical steps for improvement and emphasising iterative development, which are crucial for effective release management. Overall, the content is highly relevant and detailed, justifying a high confidence score.",
    "level": "Secondary"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T15:26:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to software development and deployment, focusing on reducing technical debt and improving code quality, rather than entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the importance of frequent deployments and its impact on technical debt, which aligns with technical leadership principles. However, it primarily focuses on technical practices rather than the broader aspects of guiding teams or fostering collaboration.",
    "level": "Tertiary"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-02-12T15:26:19",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management rather than identifying or resolving specific technical issues.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-03-14T16:44:35",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the impact of frequent deployments on code quality and user feedback, which indirectly relates to change management principles. However, it primarily focuses on deployment practices rather than the broader strategies and practices of change management in Agile environments. While it touches on concepts like iterative development and continuous improvement, it lacks a comprehensive exploration of change management as a primary focus.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-03-14T16:43:48",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 76.0,
    "reasoning": "The content primarily discusses the impact of frequent deployments on code quality, which aligns closely with the principles of Continuous Integration and Continuous Delivery (CI/CD). It explicitly mentions the benefits of smaller, manageable changes and the importance of maintainability, which are key aspects of clean code and Agile practices. The depth of discussion is substantial, providing practical steps for improvement and insights into user feedback, which enhances the overall understanding of Agile engineering practices. However, while it touches on several relevant topics, it does not delve deeply into all aspects of Engineering Practices, such as TDD or pair programming, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing technical debt, which aligns with Agile principles of iterative development and continuous delivery. However, it does not explicitly focus on Agile frameworks themselves, making it a secondary theme rather than the primary topic.",
    "level": "Tertiary"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-02-12T15:26:25",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on Test First Development or related testing practices.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T15:26:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the benefits of frequent deployments and technical debt, without a clear focus on Scrum principles, roles, or practices.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-03-14T16:44:04",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are relevant to DevOps practices. However, it does not specifically mention Azure DevOps or its tools, nor does it delve into Azure DevOps functionalities or methodologies. The focus is more on general deployment strategies rather than Azure DevOps itself.",
    "level": "Ignored"
  },
  "Products and Books": {
    "category": "Products and Books",
    "calculated_at": "2025-02-12T15:21:35",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without focusing on specific products or literature related to Agile or DevOps.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T15:21:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to frequent deployments and technical debt, without a clear focus on decision-making processes or the principles of decision theory.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-03-06T13:24:29",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of frequent deployments and breaking down larger tasks into smaller, manageable pieces, which directly relates to optimising flow efficiency. It highlights how smaller batch sizes and increased deployment frequency can reduce technical debt and improve code quality, aligning well with the principles of Flow Efficiency. The depth of discussion on how these practices impact team performance and customer feedback further supports its relevance to the category.",
    "level": "Secondary"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-03-06T14:36:47",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the benefits of frequent deployments and smaller batch sizes, which align with Agile and DevOps principles that enhance market adaptability. It highlights how these practices allow for quicker responses to customer feedback and market demands, thus demonstrating a clear connection to the category. However, while the content is rich in detail about technical practices, it does not explicitly frame these practices within a broader market adaptability strategy, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-03-14T16:43:59",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content primarily discusses the technical aspects of deployment frequency and its impact on code quality, with limited reference to organisational structures or team dynamics. While it touches on concepts like accountability and user feedback, it lacks a thorough exploration of the interplay between social and technical systems, which is essential for a stronger alignment with the Sociotechnical Systems category.",
    "level": "Ignored"
  },
  "Transparency and Accountability": {
    "category": "Transparency and Accountability",
    "calculated_at": "2025-02-12T15:21:54",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on transparency or accountability principles.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-03-06T15:41:56",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the benefits of frequent deployments and smaller batch sizes, which align with agile principles of adaptability and responsiveness. However, it primarily focuses on technical aspects of code quality and deployment practices rather than broader organisational strategies or cultural shifts. While it touches on customer feedback and continuous delivery, it lacks a comprehensive exploration of organisational agility as a primary focus.",
    "level": "Secondary"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses the importance of frequent deployments and their impact on technical debt, which touches on interconnectedness and feedback loops in software development. However, it primarily focuses on deployment strategies rather than a comprehensive exploration of Systems Thinking principles.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-03-07T12:30:43",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 10,
    "final_score": 75.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they relate to technical debt, customer feedback, and code quality. It explicitly mentions the collection of telemetry and data to validate whether features are worth investing in, which aligns with evidence-based decision-making. The discussion on breaking down work into smaller chunks and the impact of deployment frequency on team behaviour and product quality further supports its relevance to the category. However, while it touches on metrics and learning, it does not delve deeply into specific methodologies or frameworks, which slightly limits the depth of discussion.",
    "level": "Secondary"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-03-14T16:44:31",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 61.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which align with Agile principles. However, it lacks explicit references to Agile Product Management roles, techniques, or strategies, making it more focused on deployment practices than on product management itself.",
    "level": "Secondary"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-02-12T15:22:05",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without focusing on installation or configuration processes.",
    "level": "Ignored"
  },
  "AI and Automation in Agility": {
    "category": "AI and Automation in Agility",
    "calculated_at": "2025-02-12T15:22:07",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and managing technical debt, without a clear focus on AI or automation in Agile practices.",
    "level": "Ignored"
  },
  "News and Reviews": {
    "category": "News and Reviews",
    "calculated_at": "2025-02-12T15:22:08",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, lacking a focus on industry news or reviews.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-03-21T10:37:30",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 74.0,
    "reasoning": "The content primarily focuses on the benefits of frequent deployments, which aligns closely with DevOps principles such as continuous delivery, feedback loops, and shared accountability. It discusses the importance of smaller, manageable changes and the role of user feedback in improving code quality, which are key aspects of the DevOps philosophy. The depth of discussion on practical steps for improvement and the emphasis on iterative development further reinforce its alignment with DevOps. However, while it touches on relevant themes, it does not explicitly mention DevOps as a philosophy, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "People and Process": {
    "category": "People and Process",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the impact of frequent deployments on technical debt and code quality, touching on human behaviours such as peer pressure and the need for maintainable code. However, the primary focus is on technical practices rather than a deep exploration of team dynamics or structured methodologies.",
    "level": "Tertiary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-03-07T12:36:25",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content primarily focuses on the importance of frequent deployments and its impact on code quality, maintainability, and technical debt, which aligns closely with the principles of Technical Excellence. It discusses Continuous Delivery practices and how they facilitate better engineering outcomes, demonstrating a strong conceptual alignment with the category. The depth of discussion is substantial, providing detailed insights into how smaller batch sizes and frequent deployments can enhance code quality and responsiveness to user feedback, thus fostering a culture of continuous improvement.",
    "level": "Secondary"
  },
  "Events and Presentations": {
    "category": "Events and Presentations",
    "calculated_at": "2025-02-12T15:22:17",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt, without reference to specific events, presentations, or discussions related to Agile or DevOps.",
    "level": "Ignored"
  },
  "Code and Complexity": {
    "category": "Code and Complexity",
    "calculated_at": "2025-03-07T12:42:57",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content discusses the relationship between frequent deployments and code quality, particularly in terms of maintainability and technical debt. It explicitly mentions how smaller, more frequent deployments can lead to better code practices and a deeper understanding of user needs, which aligns well with the core themes of the category. The depth of discussion is substantial, covering various aspects of how deployment frequency impacts code quality and complexity management. However, while it touches on complexity, it does not delve deeply into complexity theory or its broader implications, which slightly lowers the overall confidence score.",
    "level": "Secondary"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-03-14T16:44:19",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 65.0,
    "non_ai_confidence": 30,
    "final_score": 59.0,
    "reasoning": "The content discusses the benefits of frequent deployments, which aligns with Lean principles of reducing waste and improving processes. It mentions concepts like smaller batch sizes and iterative development, which are relevant to Lean thinking. However, the primary focus is on deployment practices rather than a comprehensive exploration of Lean methodologies, resulting in a moderate confidence score.",
    "level": "Tertiary"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-03-10T11:34:29",
    "ai_confidence": 87.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 35,
    "non_ai_confidence": 10,
    "final_score": 79.0,
    "reasoning": "The content extensively discusses the benefits of frequent deployments and how they relate to value delivery, particularly in terms of reducing technical debt and improving customer feedback. It aligns well with the principles of iterative development and continuous delivery, emphasising the importance of breaking down work into smaller, valuable increments. The depth of discussion on maintaining code quality and adapting to customer needs further supports its strong alignment with the category.",
    "level": "Secondary"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T15:22:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses the benefits of frequent deployments and their impact on technical debt, which aligns with Agile and DevOps principles.",
    "level": "Ignored"
  },
  "Resilience and Change": {
    "category": "Resilience and Change",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 47.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and adaptability, which aligns with themes of organisational resilience and change. However, the primary focus is on technical practices rather than broader organisational strategies or change management principles.",
    "level": "Tertiary"
  },
  "Practical Techniques and Tooling": {
    "category": "Practical Techniques and Tooling",
    "calculated_at": "2025-03-10T13:51:28",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content extensively discusses the practical implications of frequent deployments, linking it to technical debt management and code quality. It provides insights into methodologies like continuous delivery and the importance of breaking down work into smaller, manageable chunks, which aligns well with the core themes of the category. The depth of discussion on how these practices can enhance team performance and product delivery outcomes further supports a high confidence score.",
    "level": "Secondary"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T15:22:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses frequent deployments and technical debt, with no clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the benefits of frequent deployments and reducing technical debt, which aligns with improving efficiency and customer outcomes. However, it primarily focuses on deployment practices rather than a comprehensive discussion on Value Stream Management principles.",
    "level": "Tertiary"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-03-14T16:43:53",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 38.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are relevant to agile practices. However, it primarily focuses on team-level practices rather than organisational agility. While it touches on concepts like continuous improvement and responsiveness to user feedback, it lacks a broader organisational context and does not address enterprise-level frameworks or structures that support agility.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-03-10T17:48:28",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 60.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and responsiveness to customer needs, which aligns with the principles of business agility. However, it primarily focuses on technical practices rather than broader organisational strategies or leadership roles in fostering agility. While it touches on concepts like adaptability and customer feedback, it lacks a comprehensive exploration of business agility as a primary focus.",
    "level": "Tertiary"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-03-11T00:15:49",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 60.0,
    "reasoning": "The content discusses the importance of frequent deployments and how they can reduce technical debt, which aligns with the maintenance and deployment stages of the application lifecycle. However, it lacks explicit mentions of broader ALM practices, governance, or tools, which limits its overall alignment with the category. The depth of discussion on deployment practices is significant, but it does not cover the entire lifecycle or other key topics outlined in the category definition.",
    "level": "Tertiary"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T15:22:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical practices related to software deployment and technical debt, with no clear focus on psychological principles or theories relevant to organisational behaviour.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-03-11T09:47:30",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 20,
    "final_score": 80.0,
    "reasoning": "The content extensively discusses the benefits of frequent deployments, which directly ties into product delivery methodologies. It highlights the importance of breaking down work into smaller, manageable chunks, aligning with iterative development and feedback loops. The discussion on technical debt and the need for maintainable code further supports the core themes of product delivery. Additionally, it touches on customer feedback and telemetry, which are crucial for understanding customer needs and improving delivery performance. Overall, the content is highly relevant and detailed, making it a strong fit for the Product Delivery category.",
    "level": "Secondary"
  },
  "Discovery and Learning": {
    "category": "Discovery and Learning",
    "calculated_at": "2025-03-11T11:11:01",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 10,
    "final_score": 71.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can lead to better code quality and understanding of customer needs. It touches on concepts like hypothesis-driven engineering and the importance of feedback loops, which align with the themes of discovery and learning. However, while it mentions these ideas, the primary focus is more on technical practices rather than a deep exploration of methodologies for fostering innovation or continuous learning. The discussion lacks a broader context of team dynamics or culture of innovation, which limits its alignment with the category.",
    "level": "Secondary"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-02-17T11:57:38",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the implications of frequent deployments and smaller batch sizes in software development, which relates to managing complexity and uncertainty in systems. However, it primarily focuses on technical debt and deployment practices rather than a comprehensive exploration of complexity science principles.",
    "level": "Tertiary"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T15:22:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of frequent deployments and technical debt without personal anecdotes or reflections.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-02-17T11:57:41",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses deployment frequency and its impact on code quality and technical debt, which are relevant to platform engineering principles. However, it primarily focuses on deployment practices rather than the broader aspects of platform engineering.",
    "level": "Tertiary"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T11:57:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the benefits of frequent deployments and technical debt management, without a clear focus on BetaCodex principles or decentralised organisational design.",
    "level": "Ignored"
  },
  "One Engineering System (1ES)": {
    "category": "One Engineering System (1ES)",
    "calculated_at": "2025-02-17T11:57:46",
    "ai_confidence": 50,
    "non_ai_confidence": 30,
    "final_score": 48.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, which aligns with the principles of improving efficiency and software delivery. However, it does not explicitly focus on the One Engineering System framework or its integration across teams.",
    "level": "Tertiary"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-03-21T10:37:33",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses the benefits of frequent deployments and iterative development, which are aligned with agile principles. However, it lacks a direct focus on the Agile Product Operating Model and does not address key topics such as transitioning from project to product ethos or governance in product delivery.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:47:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of code deployment and technical debt, with no clear focus on leadership practices or themes.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-03-19T17:43:29",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 38.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, user feedback, and team confidence. While it touches on aspects of collaboration and iterative processes, it primarily focuses on technical practices rather than the underlying social frameworks that promote collaboration and decision-making within teams. The mention of accountability and user insights aligns somewhat with social technologies, but the overall emphasis is more on technical execution than on fostering a collaborative organisational culture.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-02-24T13:31:37",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses the benefits of frequent deployments and their impact on code quality, which relates to the principles of an Internal Developer Platform, but it primarily focuses on deployment practices rather than the broader context of IDPs.",
    "level": "Tertiary"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:31:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses deployment strategies and technical debt in software development, with no clear focus on AI applications.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-03-14T16:43:20",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the benefits of frequent deployments and breaking down work into smaller chunks, which aligns with Agile principles and iterative progress. However, it does not explicitly mention Scrum roles, events, or artifacts, nor does it focus on Scrum practices specifically. The discussion is more about deployment strategies and technical debt rather than Scrum as a framework.",
    "level": "Ignored"
  },
  "Shift-Left Strategy": {
    "category": "Shift-Left Strategy",
    "calculated_at": "2025-03-17T15:37:27",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 12,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the benefits of frequent deployments and how they can improve code quality and user feedback, which aligns with the Shift-Left Strategy's emphasis on early integration of processes. However, it primarily focuses on deployment frequency rather than explicitly addressing testing, security, or compliance integration early in the development lifecycle. The discussion lacks depth in terms of specific Shift-Left techniques or tools, leading to a moderate confidence score.",
    "level": "Ignored"
  }
}
