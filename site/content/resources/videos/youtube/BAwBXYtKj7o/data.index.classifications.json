{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-02-12T09:14:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a focus on hypothesis formulation, experimentation, or validated learning.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-02-12T09:14:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on hypothesis-driven experimentation or Agile workflows.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T09:14:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Product Backlog",
    "calculated_at": "2025-05-13T21:55:10",
    "ai_confidence": 23.15,
    "ai_mentions": 0.6,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.1,
    "ai_audience": 7.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses entirely on technical debt: its definition, origin, examples, impact, and strategies to reduce it for long-term software quality. While audience overlap exists (Agile practitioners, Product Owners), there are no direct mentions or exploration of Product Backlog, backlog refinement, prioritization, or related core practices. There is some adjacency in discussing prioritization and long-term value, but Product Backlog as a concept or process is absent. This results in low scores for direct mentions, conceptual alignment, depth, intent, and signal, though the audience alignment is moderate as both groups work in Agile. No penalties were required, though confidence is low and justified by strong off-target focus.",
    "reasoning_summary": "This content is dedicated to technical debt management, not Product Backlog. Though it targets a similar Agile audience, it lacks key mentions or discussions of backlog-related practices, so confidence in the Product Backlog category is low.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T09:15:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses automated testing and software engineering practices, with no clear focus on Scrum principles, roles, or events.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T09:15:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on systems thinking or organisational dynamics.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T09:15:05",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on coaching or facilitating growth and development within teams or individuals.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T09:15:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without a clear focus on evidence-based leadership principles or empirical decision-making.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T09:15:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and software engineering processes, with no focus on employee motivation, commitment, or engagement strategies.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and software engineering practices, lacking a focus on product management strategies or methodologies.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T09:15:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to automated testing and software engineering without addressing leadership roles or practices within Agile contexts.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T09:15:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-10T13:39:20",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt in software development rather than system configuration. While it touches on aspects of system performance and decision-making, it does not explicitly address configuration management, integration of hardware and software, or best practices for system setup. The focus is on managing technical debt and improving software delivery, which falls outside the defined scope of system configuration.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is a crucial aspect of software development but does not explicitly focus on the strategic adoption of digital technologies for business transformation. While it touches on improving operational efficiency and mentions the Azure DevOps team's transition to a more agile model, it lacks a broader discussion on digital transformation strategies, emerging technologies, or change management practices. The primary focus remains on technical debt rather than a comprehensive view of digital transformation.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 82.0,
    "reasoning": "The content discusses the importance of automated testing in delivering high-quality software, which aligns well with the principles of working software. It highlights the role of automated testing in reducing human error, ensuring fast feedback, and maintaining software quality, all of which are crucial for meeting customer needs. The depth of discussion on test strategies and the emphasis on continuous delivery further support its relevance to the category. However, while it touches on key aspects of working software, it does not explicitly frame these discussions within Agile or Scrum contexts, which slightly lowers the confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores how automated testing supports the delivery of reliable, high-quality software—key to meeting user needs. It covers benefits like reducing errors and enabling quick feedback. While it doesn’t directly reference Agile or Scrum, its focus on test strategies and continuous delivery clearly aligns with the principles of working software."
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and its implications on decision-making within software development, particularly in the context of Agile practices. However, while it touches on the importance of making informed choices and the consequences of past decisions, it lacks a structured, evidence-based approach to decision-making as outlined in the category definition. The discussion is more focused on the concept of technical debt rather than a comprehensive exploration of decision-making methodologies.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-02-12T09:15:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on self-organisation principles or practices.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-12T09:15:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on remote working or Agile methodologies.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is tangentially related to Lean principles, particularly in terms of maximising value and minimising waste. However, it primarily focuses on technical debt rather than Lean Product Development specifically. While there are mentions of improving delivery and efficiency, the core themes of Lean thinking, waste elimination, and customer feedback are not explicitly addressed, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T09:15:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to automated testing and software engineering, without a clear focus on organisational culture or its influence on agility and transformation.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-02-12T09:15:29",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on customer feedback integration or feedback loops.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with only a brief mention of Azure DevOps features, which does not focus on Azure Repos specifically.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T09:15:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits in software engineering, without a focus on transparency or related Agile practices.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Definition of Done",
    "calculated_at": "2025-05-13T21:55:14",
    "ai_confidence": 10.3,
    "ai_mentions": 0.0,
    "ai_alignment": 1.3,
    "ai_depth": 1.7,
    "ai_intent": 2.0,
    "ai_audience": 2.5,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content centers entirely on technical debt: its causes, practical examples, impacts on productivity, and how teams can manage and repay it. There is no direct mention or even an indirect, conceptual tie to Definition of Done (DoD). The core topics—though relevant to software quality and agile teams—focus on legacy code, feedback loops, and improvement in feature delivery, not on shared completeness criteria, DoD best practices, or DoD concepts. Depth and alignment are minimal: the discussion does not explore or even allude to the role, creation, maintenance, or purpose of a DoD. The closest thematic overlap is vague references to quality, which are always discussed in the context of technical debt, not in explicit or implicit relation to DoD. The likely audience overlaps broadly with agile practitioners but not DoD-focused readers. The signal for DoD is extremely weak.",
    "reasoning_summary": "The content is exclusively about technical debt and never references the Definition of Done. Any overlap with DoD is incidental, not deliberate. As such, this content does not fit under the \"Definition of Done\" category.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and technical implementation details, with no clear focus on product strategy methodologies or frameworks.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-12T09:15:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on customer retention strategies or user engagement.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Strategy": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Strategy",
    "calculated_at": "2025-08-07T07:06:49",
    "ai_confidence": 47.895,
    "ai_mentions": 2.3,
    "ai_alignment": 5.2,
    "ai_depth": 4.8,
    "ai_intent": 5.4,
    "ai_audience": 5.9,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content focuses on technical debt management and its impact on long-term product quality and delivery speed. While it references long-term value and organizational outcomes, discussion is largely operational and practice-focused, not on strategic planning or high-level decision alignment. Examples relate to engineering and process improvements rather than overarching strategic frameworks, vision, or organizational alignment. The audience appears to be practitioners and engineers. There are occasional indirect references to high-level objectives, but these are not explored in depth as matters of strategy per se.",
    "reasoning_summary": "The content primarily details technical debt management practices for quality improvement, with only brief tie-ins to strategic value. It only partially fits the Strategy category, lacking sustained focus on organizational alignment or strategic planning.",
    "level": "Tertiary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T17:03:37",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software quality rather than focusing on innovation practices or metrics. While it touches on the importance of addressing technical debt to improve delivery and efficiency, it lacks a direct discussion on innovation mechanisms, strategies, or frameworks. The examples provided, such as the Azure DevOps team's transition to continuous delivery, illustrate improvements in delivery but do not explicitly connect to broader innovation capabilities or practices. Therefore, while there is some relevance, the primary focus is not on the Ability to Innovate.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-12T09:15:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile frameworks or their principles.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits for software engineering, without a clear focus on team collaboration or dynamics within Agile, Scrum, or DevOps frameworks.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-12T09:15:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without a clear focus on customer satisfaction or related strategies.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is tangentially related to Lean principles, particularly in terms of efficiency and value delivery. However, it does not explicitly mention Lean Thinking concepts such as waste identification or continuous improvement. The focus is primarily on technical debt rather than Lean methodologies, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits, with no clear focus on Cycle Time or its measurement.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of automated testing, TDD, and the need for fast-running unit tests, which are core principles of Engineering Practices. It provides detailed insights into how automation can enhance software quality and reduce human error, aligning well with the category's focus. The depth of discussion on test infrastructure and the shift from end-to-end tests to unit tests further supports its relevance. Overall, the content is a strong fit for the category.",
    "level": "Primary"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on portfolio management or alignment of projects with organisational strategy.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 90.0,
    "ai_alignment": 85.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses automated testing, its importance in software engineering, and its role in improving software quality and efficiency. It aligns well with key topics such as Test-Driven Development (TDD), Continuous Integration and Continuous Deployment (CI/CD), and best practices in coding. The depth of discussion on test infrastructure and the need for fast-running unit tests further solidifies its relevance to software development practices.",
    "level": "Primary"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of automated testing, its role in reducing human error, and the need for fast-running unit tests, which are all key aspects of engineering excellence. It aligns well with the principles of software craftsmanship and quality assurance, emphasising continuous improvement in testing methodologies and the impact of automation on development efficiency. The depth of discussion is significant, providing detailed insights into test strategies and the importance of maintaining a robust test infrastructure, which further supports the category's focus.",
    "level": "Primary",
    "reasoning_summary": "This content clearly fits the category, as it thoroughly explores automated testing and its benefits for software quality and development efficiency. By highlighting best practices, continuous improvement, and robust test strategies, it demonstrates a strong alignment with engineering excellence and quality assurance principles. The detailed insights reinforce its relevance to the category."
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and its impact on delivery timelines, which indirectly relates to throughput. However, it primarily focuses on the concept of technical debt rather than explicitly measuring or optimising throughput. While there are mentions of improving delivery rates and the relationship between technical debt and feature delivery, the discussion lacks a direct focus on throughput as defined in Agile and DevOps contexts.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and references the Azure DevOps team, but it does not focus on Azure Pipelines specifically. While it touches on continuous delivery and the impact of technical debt on software delivery, it lacks detailed discussions on Azure Pipelines, such as configuration, management, or CI/CD practices directly related to Azure Pipelines. The primary focus is on technical debt rather than the automation of software development processes using Azure Pipelines.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software quality, without a clear focus on Agile values or principles.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 85.0,
    "ai_alignment": 90.0,
    "ai_depth": 88.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of automated testing in software engineering, highlighting its role in reducing human error, providing fast feedback, and improving software quality. It covers various aspects such as the need for unit tests, the impact of test infrastructure, and the shift from long-running tests to faster ones. The discussion aligns well with the core themes of automated testing, including methodologies, best practices, and the significance of automation in the development process. The depth of the discussion is substantial, providing detailed insights into the implementation and benefits of automated testing, thus justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content clearly fits the automated testing category, as it thoroughly explores its benefits, methodologies, and best practices. By addressing topics like unit tests, test infrastructure, and the move towards faster feedback, it demonstrates a strong focus on automation’s role in improving software quality, making it highly relevant to the category."
  },
  "Site Reliability Engineering": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-13T21:55:10",
    "ai_confidence": 16.29,
    "ai_mentions": 0.1,
    "ai_alignment": 2.9,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 3.2,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content thoroughly discusses technical debt, providing practical examples and its impact on long-term software delivery. However, it never directly references Site Reliability Engineering (SRE), its principles (such as SLOs/SLIs), or production reliability as an explicit focus. While there are some indirect links, such as system scalability and feedback loops, the primary emphasis is on technical debt management for quality and delivery speed—topics that, while relevant to software engineering, do not delve into SRE-specific practices or discussions. Audience alignment is only partial, as the piece targets a broader technical and managerial crowd rather than SRE practitioners. Signal to noise is moderate due to some tangential Agile and DevOps mentions.",
    "reasoning_summary": "This content is a deep dive into technical debt management and its impact on software quality and speed, not on SRE or production reliability. It doesn't reference SRE concepts or principles and targets a broader technical audience, so alignment with the Site Reliability Engineering category is very low.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on change management strategies or principles.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T09:16:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and software engineering, with no clear focus on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-02-12T09:16:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on empirical process control principles or Agile methodologies.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its role in software engineering, rather than focusing on validating product ideas through user engagement or feedback.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with only a brief mention of Azure DevOps features, which does not align with the central theme of Azure Boards.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on revenue per employee metrics or related financial efficiency discussions.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery but does not explicitly mention Test First Development or its principles. While it touches on the importance of reducing errors and improving feedback loops, it lacks a direct focus on defining success criteria before implementation or the specific practices of Test-Driven Development (TDD) or Acceptance Test-Driven Development (ATDD). The discussion is more about managing technical debt rather than the Test First approach itself.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the concept of technical debt and its impact on software delivery, particularly in the context of the Azure DevOps team's transition to a more frequent release cycle. While it touches on the benefits of moving to continuous delivery and mentions the increase in features delivered, the primary focus is on technical debt management rather than the principles and practices of frequent releases. The discussion lacks depth in terms of specific strategies or metrics related to release frequency, which diminishes its alignment with the category.",
    "level": "Tertiary"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T09:16:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on estimation techniques or practices within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and its implications on software development, which indirectly relates to troubleshooting by highlighting the need to address issues arising from poor decisions. However, it lacks a direct focus on diagnosing or resolving specific technical problems, making it more about management than troubleshooting.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Increment",
    "calculated_at": "2025-05-13T21:55:10",
    "ai_confidence": 38.632,
    "ai_mentions": 0.3,
    "ai_alignment": 4.8,
    "ai_depth": 4.4,
    "ai_intent": 3.8,
    "ai_audience": 5.5,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content thoroughly addresses technical debt management in software development, detailing how repaying debt leads to improved delivery speed and long-term value. While it references continuous delivery, agile, and the value of shippable product features, the concept of 'Increment'—as defined in Scrum (the tangible, usable output at the end of each iteration)—is not explicitly mentioned or deeply examined. The discussion is closely related, especially where paying off technical debt increases the rate of feature delivery, which indirectly relates to increment value, but the content overall centers on technical debt as an engineering concern rather than a primary focus on increments. The audience is technical and relevant, and the signal-to-noise ratio is reasonably strong, but depth on 'Increment' is moderate and mostly indirect.",
    "reasoning_summary": "The content gives a detailed analysis of technical debt and its impact on software teams, improving delivery velocity and product value but never directly explores Scrum Increments. While relevant to agile delivery, its focus isn't on increments, so confidence is moderate and not high.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T09:16:38",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on the Windows operating system or its specific functionalities.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T21:55:10",
    "ai_confidence": 2.2,
    "ai_mentions": 0.1,
    "ai_alignment": 0.4,
    "ai_depth": 0.6,
    "ai_intent": 0.2,
    "ai_audience": 0.5,
    "ai_signal": 0.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content focuses extensively on technical debt management and its impact on software quality and agility, but makes no mention of Sprint Review or its key characteristics. There is no discussion of reviewing increments, stakeholder collaboration, or Scrum events. Even tangential references to Scrum or Sprint Reviews are absent. The intended audience is adjacent to the topic (agile practitioners), but other dimensions register almost no alignment.",
    "reasoning_summary": "This piece is squarely about technical debt; it doesn't reference Sprint Review, its process, or related Scrum collaboration. There is neither direct nor conceptual fit. Confidence in this content belonging in the Sprint Review category is extremely low.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-11T08:57:24",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications on software delivery, without explicitly addressing Lead Time as a metric. While there are references to improving delivery speed and efficiency, these are not directly tied to the concept of Lead Time or its measurement. The focus remains on technical debt rather than the time from initiation to delivery, which is the core of the Lead Time category.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 82.0,
    "reasoning": "The content discusses practical problem-solving strategies related to automated testing within a DevOps context, highlighting the importance of reducing human error and improving efficiency. It aligns well with the core themes of Pragmatic Thinking by providing real-world applications of testing strategies, emphasising adaptability in testing approaches, and illustrating the impact of automation on software quality. The depth of discussion is substantial, covering various aspects of test automation and its implications for project management and delivery, thus supporting a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Pragmatic Thinking category, as it explores real-world solutions for automated testing in DevOps. It demonstrates adaptability, focuses on reducing errors, and highlights efficiency gains. The discussion is thorough, covering both technical and project management perspectives, which aligns well with the category’s emphasis on practical, adaptable approaches to problem-solving."
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of managing technical debt on deployment frequency, particularly through the example of the Azure DevOps team transitioning from a two-year release cycle to a three-week continuous delivery model. While it touches on the relationship between technical debt and deployment frequency, the primary focus is on technical debt management rather than optimising deployment intervals. The discussion lacks depth in strategies specifically aimed at increasing deployment frequency and does not provide metrics or measurement techniques, which are key topics in the category.",
    "level": "Secondary"
  },
  "Continuous Integration": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Continuous Integration",
    "calculated_at": "2025-08-07T06:10:40",
    "ai_confidence": 30.07,
    "ai_mentions": 0.4,
    "ai_alignment": 2.8,
    "ai_depth": 2.65,
    "ai_intent": 3.5,
    "ai_audience": 4.05,
    "ai_signal": 3.15,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content is principally about technical debt management and long-term quality, using the Azure DevOps team's migration to continuous delivery as a related example. While continuous delivery and feature deployment velocity are discussed, there is only a passing reference to 'three ways of DevOps' and closing/shortening feedback loops, but no direct or substantive mention of Continuous Integration (CI), its principles, tools, or core practices. There is no discussion of CI pipelines, toolchains, code integration frequency, automated testing as part of CI, or team collaboration specifically within a CI context. Audience fit is somewhat adjacent due to engineering and DevOps references but not targeting CI practitioners directly. Proportion of directly relevant signal for CI is low; therefore, confidence is low.",
    "reasoning_summary": "Content focuses on technical debt and long-term quality, using a continuous delivery example. It lacks explicit or in-depth discussion of Continuous Integration and only tangentially references related concepts. Partial fit at best.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-02-12T09:16:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and technical practices without a clear focus on Agile strategy or methodologies.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, particularly in the context of a transition to continuous delivery. While it mentions continuous delivery and provides a case study of the Azure DevOps team, the primary focus is on technical debt rather than the principles and practices of continuous delivery itself. The discussion on how managing technical debt can enhance delivery speed and quality aligns with the category, but it lacks a comprehensive exploration of continuous delivery practices, automation, and cultural aspects.",
    "level": "Secondary",
    "reasoning_summary": "This content touches on continuous delivery by highlighting how managing technical debt can improve delivery speed and quality, using the Azure DevOps team as an example. However, it mainly centres on technical debt rather than delving into the core practices, automation, or cultural elements of continuous delivery, so it only partially fits the category."
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-12T09:16:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a focus on cross-functional teams or their characteristics.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on the Definition of Ready or its criteria.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T09:16:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and technical debt management without a clear focus on sensemaking or decision-making processes in complex environments.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of automated testing and software engineering without addressing team dynamics or motivation.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software engineering rather than focusing on team dynamics, collaboration, or Agile methodologies.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T09:17:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-12T09:17:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on working agreements or team collaboration norms.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which indirectly relates to Lean principles through the concepts of waste reduction and value maximisation. However, it primarily focuses on technical debt rather than explicitly addressing Lean principles or practices. While there are mentions of improving processes and delivering value, the depth of discussion is more centred on technical debt rather than Lean methodologies or tools.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-12T09:17:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile transformation principles or methodologies.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content provides a comprehensive discussion on technical debt, including its definition, types (intentional and unintentional), and real-world examples illustrating its impact on development velocity and product quality. It also discusses strategies for prioritising technical debt remediation and the importance of managing it effectively to enhance long-term value delivery. The depth of the discussion is significant, with detailed examples and a clear narrative on the consequences of neglecting technical debt, which aligns well with the key topics outlined in the category definition.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it thoroughly explores technical debt—covering its definition, types, and real-world implications. The discussion includes practical examples and strategies for managing and prioritising technical debt, demonstrating a clear understanding of its impact on development and product quality. The depth and relevance of the content align well with the category’s focus."
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T09:17:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Scrum Values such as commitment, courage, focus, openness, or respect.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and software engineering practices without a focus on organisational change strategies or methodologies.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications on software quality and delivery, without a direct focus on test automation principles, frameworks, or practices. While it touches on Agile and continuous delivery, it does not delve into the specifics of automating testing processes or tools associated with test automation.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 78.0,
    "ai_mentions": 70.0,
    "ai_alignment": 85.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt management, which is crucial for improving operational efficiency in software development. It highlights the importance of addressing technical debt to enhance delivery speed and product quality, aligning well with operational practices. The depth of discussion includes specific examples and metrics related to the Azure DevOps team's experience, demonstrating a practical application of strategies to optimise processes and improve performance. However, while it is focused on operational practices, it does not explicitly mention Agile, DevOps, or Lean methodologies in a structured way, which slightly lowers the confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores technical debt management and its impact on operational efficiency in software development. By sharing practical examples and metrics, it demonstrates real-world strategies for process optimisation. While it doesn’t directly reference Agile, DevOps, or Lean, its focus on improving delivery and quality aligns closely with operational best practices."
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, but it does not explicitly mention Evidence-Based Management or its key topics. While there are elements of empirical decision-making and value delivery, the focus is primarily on technical debt rather than a broader evidence-based approach to management.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T09:17:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and automated testing in software engineering, with only a brief mention of Scrum Masters in the hashtags. It does not focus on the role, responsibilities, or impact of a Scrum Master, nor does it delve into Scrum practices or principles, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T09:17:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without addressing large scale Agile principles or frameworks.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T09:17:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on forecasting methodologies or practices within Agile and Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Technical Leadership",
    "calculated_at": "2025-08-07T07:06:49",
    "ai_confidence": 65.092,
    "ai_mentions": 3.2,
    "ai_alignment": 6.5,
    "ai_depth": 7.2,
    "ai_intent": 7.0,
    "ai_audience": 6.0,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 65.0,
    "reasoning": "The content centers on technical debt, providing definitions, examples, and consequences while using DevOps and agile teams as case studies. The topic is highly relevant to technical leadership, specifically in architectural decision-making and technical debt management. However, explicit references to leadership practices (mentoring, coaching, team facilitation etc.) are largely absent. The connection to leadership is implied through discussion of team practices, continuous improvement, and strategic technical decisions, but there's limited focus on guiding or influencing teams directly. The audience is technical but not solely leaders. Overall, strong thematic fit for technical leadership in the context of decision-making and quality, but with less emphasis on leadership as a practice.",
    "reasoning_summary": "Content aligns with technical leadership by exploring technical debt management in agile/DevOps, but lacks explicit discussion of guiding or influencing teams. Strong fit on decision-making and strategy for quality, but less on leadership practices. Partial fit.",
    "level": "Secondary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, rather than focusing on identifying customer needs or defining product features.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T09:17:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Lean Startup principles such as MVP, Build-Measure-Learn feedback loop, or validated learning.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-02-12T09:17:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile Planning principles or methodologies.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Accountability",
    "calculated_at": "2025-05-13T21:55:11",
    "ai_confidence": 26.15,
    "ai_mentions": 1.1,
    "ai_alignment": 2.6,
    "ai_depth": 2.3,
    "ai_intent": 2.5,
    "ai_audience": 7.2,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content offers an in-depth look at technical debt management and its impact on software quality and delivery, using concrete examples (Azure DevOps team). However, it rarely addresses accountability as a structural mechanism or explicitly discusses outcome ownership and defined roles (such as Product Owner or Scrum Master) in an organizational context. The focus is on engineering practices and technical decision-making, not on clarifying systemic outcome ownership. The mentions of 'teams' taking action are present, but do not explore who structurally owns outcomes or how accountability is designed in work systems. The audience is generally relevant (software teams, technical leaders), and the discussion is focused, but largely omits the core Accountability topics of the provided definition.",
    "reasoning_summary": "While the post thoroughly discusses technical debt and value delivery, it rarely touches on accountability as defined. The focus is on engineering practices and decision-making, not on outcome ownership or role-based accountability in work systems.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "Minimum Viable Product",
    "calculated_at": "2025-02-12T09:17:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and its importance in software engineering, without a clear focus on Minimum Viable Product concepts or related strategies.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T09:17:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no focus on collaboration tools or Agile team dynamics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T09:17:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on psychological safety or its related themes.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T09:17:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on deployment methodologies or strategies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Scrum Team dynamics, roles, or collaboration.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Technical Mastery",
    "calculated_at": "2025-08-07T07:06:49",
    "ai_confidence": 92.9,
    "ai_mentions": 8.8,
    "ai_alignment": 9.7,
    "ai_depth": 9.4,
    "ai_intent": 9.1,
    "ai_audience": 8.7,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content is explicitly about technical debt—a core technical mastery topic. It defines technical debt, provides detailed real-world examples (Azure DevOps team), examines architectural decisions, discusses the importance of refactoring, continuous delivery, and the impact on delivery speed and value. The purpose is to educate engineers and practitioners on concrete methods for improving code quality via technical debt management. Target audience is aligned (software engineers, technical teams). Almost the entire discussion is directly on point, mentioning best practices and discipline in code management. There is little off-topic content, only a brief CTA to a consultancy at the end.",
    "reasoning_summary": "Strong fit—deep discussion of technical debt, refactoring, architecture, and engineering excellence. Fully aligned with Technical Mastery and aimed at practitioners. Content intent, scope, and audience are well matched; minimal off-topic material.",
    "level": "Primary"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is tangentially related to release management through its impact on software delivery and product quality. However, it lacks direct mentions of release management practices, version control, or release scheduling. The discussion primarily focuses on the implications of technical debt rather than the structured processes of managing software releases, resulting in a low confidence score for the category.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Test Driven Development",
    "calculated_at": "2025-08-07T07:06:47",
    "ai_confidence": 6.91,
    "ai_mentions": 0.1,
    "ai_alignment": 1.6,
    "ai_depth": 1.2,
    "ai_intent": 1.3,
    "ai_audience": 1.05,
    "ai_signal": 0.85,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is almost exclusively about managing technical debt, its causes, symptoms, and benefits of paying it back for long-term software quality and delivery speed. There are references to related engineering practices and continuous delivery, but there are no explicit or implicit mentions of Test Driven Development (TDD), its core cycle (Red-Green-Refactor), or related principles. Automated testing is vaguely referenced within 'robust testing strategies,' but not in the context of TDD. Thus, the content is largely misaligned with the requirements for this category.",
    "reasoning_summary": "The topic focuses on technical debt, not Test Driven Development. It does not discuss TDD methods or principles—even implicitly—so the content is outside this category’s intended scope. Fit is minimal to none.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T09:17:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on trend analysis within Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-12T09:17:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and test infrastructure, with no clear focus on Agile principles or philosophy.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on version control practices or methodologies.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T09:17:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile planning tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits, without a clear focus on Acceptance Test Driven Development or its principles.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T09:17:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without any focus on asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T09:17:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T09:18:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits for software quality, without a clear focus on long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software quality, without a clear focus on continuous learning principles or practices.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Decision Theory",
    "calculated_at": "2025-08-07T09:25:43",
    "ai_confidence": 21.45,
    "ai_mentions": 0.2,
    "ai_alignment": 1.6,
    "ai_depth": 2.0,
    "ai_intent": 1.9,
    "ai_audience": 7.3,
    "ai_signal": 3.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content is focused on technical debt management and its impact on software quality and delivery, providing practical examples from DevOps teams. While decision-making is referenced in terms of making technical choices (e.g., fast vs. robust solutions, deliberate/accidental technical debt), it does not explicitly discuss the principles, models, or frameworks of decision theory. There are no direct mentions of decision theory, heuristics, cognitive bias, probability, or behavioral economics. The alignment and depth are marginal, as decision-making is present only implicitly as part of engineering and delivery rationale rather than as an object of analysis. The intent is not centered on improving or reflecting on decision-making under uncertainty, but rather on long-term quality via code practices. Most of the content addresses engineering audiences, but it is not targeted to decision theorists or those interested in decision science. Therefore, the content only partially fits under 'Decision Theory' due to the tangential relevance of option selection and debt consequences in software engineering.",
    "reasoning_summary": "The content focuses on technical debt management, not on the study or analysis of decision-making under uncertainty. References to choices are superficial and lack theoretical or practical alignment with decision theory. Fit is marginal and indirect.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Enterprise Agility",
    "calculated_at": "2025-08-07T09:25:42",
    "ai_confidence": 34.372,
    "ai_mentions": 1.3,
    "ai_alignment": 3.9,
    "ai_depth": 3.7,
    "ai_intent": 2.6,
    "ai_audience": 5.1,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on technical debt management, primarily at the team and engineering practices level. While it mentions organizational impacts (e.g., product delivery performance after investing in technical debt), it does not explicitly discuss enterprise-wide agility, scaling frameworks, leadership, or cultural change. There are only implicit connections to enterprise agility (such as shifting from waterfall to continuous delivery), but the main topic and purpose do not align with the broader organizational focus required by the 'Enterprise Agility' category. The audience is somewhat mixed, and much of the discussion is technical or engineering-centric, not strategic or organizational.",
    "reasoning_summary": "This content mainly addresses technical debt in software teams. It only touches lightly on organizational outcomes and does not focus on enterprise-wide agility, frameworks, or culture, so the fit for 'Enterprise Agility' is low and indirect.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is related to efficiency and value delivery, but it primarily focuses on Agile practices and does not explicitly mention Lean principles or methodologies. While there are elements of continuous improvement and value maximisation, the discussion lacks depth in Lean-specific tools or concepts, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, rather than focusing on installation or configuration processes.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses technical debt and its impact on delivery speed and product quality, which indirectly relates to flow efficiency. However, it primarily focuses on the concept of technical debt rather than explicitly addressing flow efficiency principles or techniques for optimising throughput. While there are mentions of improving delivery speed and managing work in progress, these are secondary to the main topic of technical debt management.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of automated testing in the context of delivering quality software products, which aligns well with the core themes of product delivery. It addresses methodologies like TDD and the need for fast-running tests, which are crucial for effective deployment and quality assurance. However, while it touches on relevant topics, it lacks a broader discussion on the entire product delivery process, such as planning and cross-functional team roles, which slightly limits its depth in the category.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good fit for the product delivery category, as it highlights how automated testing and methodologies like TDD contribute to software quality and deployment. However, it mainly focuses on testing practices and doesn’t cover the full spectrum of product delivery, such as planning or team collaboration, so its coverage of the category is somewhat limited."
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses automated testing and software engineering practices, with no clear focus on Agile Product Management principles or practices.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Systems Thinking",
    "calculated_at": "2025-08-07T09:25:42",
    "ai_confidence": 24.44,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.7,
    "ai_intent": 2.9,
    "ai_audience": 7.3,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content revolves around technical debt management, linking its repayment to improved quality and delivery. While there is some discussion of feedback loops (a Systems Thinking element), the references are practical and tied specifically to DevOps/technical debt, not to mapping system interdependencies or engaging with holistic analysis. There is no explicit mention of Systems Thinking, its principles, or standard frameworks (e.g., causal loop diagrams, Cynefin, soft systems methodology). The main focus is linear cause and effect (debt leads to problems, fixing helps value delivery) rather than whole-system behaviors or interconnection of organizational components. The term 'feedback loops' is invoked in the context of DevOps best practices, not systemic modeling. The intended audience overlaps somewhat with Systems Thinkers (tech leads, DevOps, product managers), but the discussion does not map onto Systems Thinking's core themes.",
    "reasoning_summary": "Technical debt is discussed with some nods to feedback loops, but there's little discussion of holistic system analysis or explicit Systems Thinking principles. Content is only weakly aligned with the category; fit is partial and mostly coincidental.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which touches on aspects of complexity in software development, such as the implications of decision-making and the need for adaptive practices. However, it primarily focuses on practical examples and does not explicitly reference complexity science or its principles. The discussion lacks depth in exploring non-linear dynamics or emergent behaviours, which are central to the category of Complexity Thinking.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses technical debt management and its impact on product delivery, which indirectly relates to market adaptability through the lens of Agile methodologies and continuous delivery. However, the primary focus is on technical debt rather than explicitly addressing strategies for market responsiveness or adaptability. While there are mentions of Agile practices and the benefits of shortening feedback loops, the overall discussion does not centre on enhancing market adaptability as defined in the category.",
    "level": "Tertiary"
  },
  "Miscellaneous": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Miscellaneous",
    "calculated_at": "2025-08-07T09:25:42",
    "ai_confidence": 8.77,
    "ai_mentions": 0.3,
    "ai_alignment": 1.0,
    "ai_depth": 0.8,
    "ai_intent": 1.1,
    "ai_audience": 1.1,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses on technical debt management and its benefits for software quality and delivery but is heavily anchored by references to Agile, DevOps, and engineering practices. Prominent direct mentions include continuous delivery, DevOps teams, sprints, and Agile-specific hashtags. Core thematic alignment with Miscellaneous is minimal as the discussion closely follows established Agile/DevOps principles and provides actionable technical learning for practitioners. Depth is fair but not within the scope of Miscellaneous because the insight is grounded in recognized methodologies, not anecdotal or off-topic. The intent, audience, and signal are all oriented toward Agile/DevOps practitioners, rather than a general or non-framework-specific discussion. No penalties are needed as the content is current and not critical or satirical toward Miscellaneous.",
    "reasoning_summary": "Content is technical and directly references Agile and DevOps frameworks, aligning strongly with recognized practices, not the Miscellaneous category. Does not fit as Miscellaneous; its intent and audience are specifically Agile/DevOps-focused.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 50,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt management, which is relevant to DevOps, particularly in the context of continuous delivery and feedback loops. However, it primarily focuses on technical debt rather than the broader DevOps philosophy. While it mentions the Azure DevOps team and touches on aspects like feedback loops and value delivery, the depth of discussion on core DevOps principles is limited, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses automated testing and its importance in software engineering, with specific references to Azure DevOps features like test impact analysis. However, the primary focus is on general testing strategies and practices rather than a comprehensive exploration of Azure DevOps as a whole. While Azure DevOps is mentioned, it is not the central theme of the discussion, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Business Agility": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Business Agility",
    "calculated_at": "2025-08-07T11:26:02",
    "ai_confidence": 59.51,
    "ai_mentions": 2.7,
    "ai_alignment": 6.8,
    "ai_depth": 6.9,
    "ai_intent": 6.3,
    "ai_audience": 8.2,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 60.0,
    "reasoning": "The content focuses on technical debt—what it is and why repaying it matters for quality, speed, and value delivery. It references Agile, DevOps, and continuous delivery, and describes how process improvement can lead to greater value delivery and adaptability. However, discussion centers more on engineering excellence than overtly on organizational-level agility, and 'business agility' as a concept is not explicitly named or deeply explored. The Azure DevOps case touches on agility outcomes, but the main narrative is technical and delivery-focused, not holistic business agility. Audience alignment is strong as it addresses agile practitioners and leaders. Signal is high, as little of the content is off-topic.",
    "reasoning_summary": "Strong fit with parts of business agility (agile practices, faster delivery, adaptability), but main focus is technical excellence and debt management, not core business agility. Partial thematic overlap; moderate conceptual fit, limited explicit mention.",
    "level": "Tertiary"
  },
  "Kanban": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Kanban",
    "calculated_at": "2025-08-07T11:26:01",
    "ai_confidence": 1.6,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.8,
    "ai_intent": 0.0,
    "ai_audience": 0.1,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is entirely about technical debt management, technical decision-making, and delivery pipeline improvements without any mention or discussion of Kanban principles, practices, boards, WIP limits, or flow management. No direct or indirect Kanban concepts are referenced, and the framing is unrelated to Kanban theory or audience. Although it discusses delivery flow improvement and feedback loops, these are contextually about DevOps and technical practices, not Kanban methodology.",
    "reasoning_summary": "This content concerns technical debt, not Kanban. There are no Kanban references or relevant concepts discussed, so it does not fit the Kanban category.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of automated testing in delivering high-quality software, which aligns with the principles of iterative development and continuous delivery. However, while it touches on value delivery, the primary focus is on technical implementation details and personal experiences rather than explicitly discussing strategies for maximising customer value or aligning product development with customer needs.",
    "level": "Secondary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses automated testing, its importance in software engineering, and its role in enhancing code quality and reliability, which aligns closely with the principles of Technical Excellence. It provides detailed insights into Test-Driven Development (TDD), the need for fast-running unit tests, and the impact of test infrastructure on software delivery. The discussion is rich in technical detail and directly addresses engineering practices that improve agility and quality in software development, fulfilling the criteria for this category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the Technical Excellence category, as it delves into automated testing and Test-Driven Development, highlighting their significance in improving code quality and reliability. The detailed focus on engineering practices and test infrastructure clearly demonstrates how these approaches contribute to higher standards and agility in software development."
  },
  "Organisational Agility": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Organisational Agility",
    "calculated_at": "2025-08-07T11:26:01",
    "ai_confidence": 60.85,
    "ai_mentions": 1.4,
    "ai_alignment": 7.7,
    "ai_depth": 6.8,
    "ai_intent": 6.0,
    "ai_audience": 7.5,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "This content primarily explores technical debt management and how addressing it can improve software quality, delivery speed, and long-term value. While it references Agile practices and illustrates benefits such as faster feedback loops and increased feature delivery, explicit discussion of organisational agility as a holistic, structural or cultural transformation is limited. The focus is on engineering and product teams’ practices, touching on factors supporting agility (like continuous delivery, reframing processes, closing feedback loops) but not discussing broader strategic agility, leadership roles, or organisation-wide methodologies. The audience appears familiar with Agile and DevOps but is more technically oriented. Direct use of 'Organisational Agility' or synonymous terms is weak, but some conceptual alignment exists. The signal is high due to relevance to continuous improvement and adaptability, even if the lens is mostly technical quality, not organisational transformation.",
    "reasoning_summary": "The content mostly focuses on technical debt and technical practices, indirectly supporting agility. There is partial conceptual overlap with organisational agility but little direct discussion of culture, leadership, or structural agility. Fit is partial and tangential.",
    "level": "Secondary"
  },
  "Personal": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Personal",
    "calculated_at": "2025-08-07T11:26:02",
    "ai_confidence": 41.249,
    "ai_mentions": 2.1,
    "ai_alignment": 3.9,
    "ai_depth": 4.2,
    "ai_intent": 3.6,
    "ai_audience": 5.2,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "This content primarily explains the concept of technical debt, using both generic and Azure DevOps-specific examples. While there is some anecdotal material (e.g., reflecting on a platform's evolution, team transformation details, and lessons learned), the tone and substance focus mainly on technical guidance, problem analysis, and outcomes, not on the author's own personal experiences, reflections, or unique insights. There are no clear first-person narratives or subjective explorations. The audience is practitioners, but content lacks personal depth or introspection, thus fitting weakly and only partially in the Personal category.",
    "reasoning_summary": "Primarily technical, with only slight anecdotal references. Lacks personal reflection, subjective experience, or individual insight as defined by the category. Only a partial and weak fit for 'Personal'.",
    "level": "Tertiary"
  },
  "Sociotechnical Systems": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-09-05T03:28:39",
    "ai_confidence": 47.42,
    "ai_mentions": 1.2,
    "ai_alignment": 5.4,
    "ai_depth": 5.8,
    "ai_intent": 4.7,
    "ai_audience": 7.1,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content focuses on technical debt management and its impact on software quality and delivery, using organizational examples (e.g., Azure DevOps' shift to continuous delivery). While it alludes to sociotechnical interactions—such as how team decisions and process changes affect outcomes—these links remain implicit. The main thrust remains technical: how to manage and repay technical debt for improved delivery. There are limited direct references to the interplay between social and technical systems, and the discussion seldom explores organizational culture, structure, or team dynamics in depth. The intended audience (practitioners, team leads) partially aligns, but overall, the thematic fit to Sociotechnical Systems is partial and somewhat secondary.",
    "reasoning_summary": "Primarily about technical debt management; mentions organizational/process impacts but only implicitly addresses sociotechnical interplay. Partial alignment—main focus is technical, not on the relationship between social and technical factors per the category.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses technical debt management and its impact on product delivery, which indirectly relates to metrics and learning through the emphasis on feedback loops and continuous improvement. However, it lacks explicit discussions on metrics or data analysis techniques, which limits its alignment with the core themes of the category. The depth of discussion on the consequences of technical debt and the benefits of addressing it provides some insight into learning from past decisions, but it does not fully explore the broader implications of metrics in Agile and DevOps practices.",
    "level": "Secondary"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt, which is a relevant aspect of application lifecycle management, particularly in the context of maintenance and improvement of software applications. However, it primarily focuses on the implications of technical debt rather than the broader stages of the application lifecycle or governance practices. While it touches on the importance of managing technical debt to enhance delivery and product quality, it lacks a comprehensive exploration of the entire application lifecycle, making it a secondary rather than primary focus.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its role in software engineering, without a clear focus on Value Stream Management principles or practices.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T09:14:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and software engineering practices, with no focus on psychological principles or theories related to organisational behaviour.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses technical debt management and its implications on software development rather than focusing on platform engineering principles or Internal Developer Platforms (IDPs). While it touches on aspects of developer productivity and the importance of managing technical debt, it does not explicitly mention platform engineering or its core components. The discussion lacks depth in relation to platform engineering, making it a secondary topic rather than a primary focus.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:01:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on BetaCodex principles or decentralised organisational design.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, which is relevant to agile practices. However, it primarily focuses on technical debt rather than the Agile Product Operating Model itself. While there are mentions of agile methodologies and continuous delivery, the core principles of the Agile Product Operating Model are not explicitly addressed, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:49:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and software engineering, with no clear focus on leadership practices or themes.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing in software engineering, which are more technical topics rather than discussions on social technologies. While there are mentions of team dynamics and decision-making, they are not the primary focus. The content lacks depth in exploring social frameworks or methodologies that promote collaboration and value delivery, which are essential for the 'Social Technologies' category.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Internal Developer Platforms or their specific components and benefits.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:33:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and DevOps practices without a clear focus on the application of AI in these areas.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses automated testing and its importance in software engineering, with no direct mention of Scrum principles, roles, or events. While it touches on concepts like continuous improvement and efficiency, these are not explicitly linked to Scrum practices. The focus is more on technical aspects of testing rather than the collaborative and iterative nature of Scrum.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift Left Strategy",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, which indirectly relates to the Shift-Left Strategy by emphasising the importance of addressing issues early in the development process. However, it primarily focuses on technical debt rather than explicitly integrating testing, security, or compliance earlier in the lifecycle. The mention of feedback loops and continuous delivery hints at Shift-Left principles, but the overall discussion lacks a direct focus on the core themes of the Shift-Left Strategy.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, which indirectly relates to Continuous Improvement through the lens of enhancing processes and product quality. However, it lacks a direct focus on Continuous Improvement principles, such as empirical evidence or a structured approach to fostering a culture of experimentation. While it highlights the benefits of addressing technical debt, it does not delve deeply into strategies or frameworks that support Continuous Improvement, resulting in a moderate confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content touches on technical debt and its effects on software delivery, which can influence process improvement. However, it doesn’t directly address Continuous Improvement principles or provide concrete strategies for fostering ongoing enhancement. As a result, while there’s some relevance, the connection to the category isn’t strong or explicit."
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software delivery, which does not directly address the concept of Common Goals. While it touches on aspects of team performance and delivery, it lacks explicit discussions on shared objectives or alignment within Agile and DevOps frameworks. The focus is more on technical practices rather than the foundational principles of Common Goals.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 30,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management and its implications for software quality, which indirectly relates to competence through the lens of making informed decisions and improving team capabilities. However, while it touches on the importance of addressing technical debt to enhance delivery and quality, it does not explicitly focus on continuous learning or skill development, which are core themes of competence. The depth of discussion on competence is limited, primarily revolving around the consequences of poor decisions rather than strategies for fostering a culture of competence.",
    "level": "Secondary",
    "reasoning_summary": "This content mainly explores technical debt and its impact on software quality, highlighting the importance of informed decision-making. While it hints at competence by referencing team capabilities, it doesn’t directly address continuous learning or skill development. As such, it only loosely connects to the competence category, lacking a focused discussion on nurturing or measuring competence within teams."
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software quality and delivery, but it does not explicitly mention the One Engineering System (1ES) framework or its principles. While there are references to improving software delivery and efficiency, these are not directly tied to the integration and standardisation of engineering processes as outlined in the 1ES category. The focus is more on individual practices rather than a unified engineering system.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software engineering, without explicitly addressing the concept of Agentic Agility. While it touches on themes of decision-making and value delivery, it lacks a clear focus on intentional shaping of outcomes through autonomy and adaptability, which are central to Agentic Agility. The discussion does not differentiate between human and AI capabilities in this context, nor does it explore the transformative capacity of individuals or systems in a socio-technical environment.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:38:53",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt management in the context of product development, highlighting its impact on delivery and value creation. It explicitly mentions Agile practices and continuous delivery, aligning well with the core themes of iterative learning and customer feedback. The depth of discussion on how managing technical debt can enhance product delivery and the examples provided contribute to a strong alignment with product development methodologies.",
    "level": "Secondary"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T17:03:30",
    "ai_confidence": 62.0,
    "ai_mentions": 2,
    "ai_alignment": 75.0,
    "ai_depth": 65.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the concept of technical debt and its impact on the ability to deliver features, which is indirectly related to Time to Market. It mentions the Azure DevOps team's transition to a faster delivery model and how managing technical debt allowed them to increase their feature delivery from 25 to 360 features per year. However, while it touches on the importance of reducing delivery times and improving processes, the primary focus is on technical debt rather than a comprehensive exploration of Time to Market metrics or strategies. Therefore, while there is a significant connection, it does not fully align with the core themes of Time to Market.",
    "level": "Secondary"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:39:00",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 10,
    "final_score": 42.0,
    "reasoning": "The content discusses technical debt management, which is relevant to project management, particularly in the context of software delivery and agile practices. However, it primarily focuses on technical aspects and specific examples rather than broader project management principles or methodologies. While it touches on the importance of managing technical debt for effective delivery, it lacks a comprehensive exploration of project management roles, lifecycle phases, or governance structures.",
    "level": "Tertiary"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T17:03:46",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses technical debt management rather than focusing on unrealised value. While it touches on the potential benefits of addressing technical debt, it does not explicitly define or explore unrealised value as a concept. The discussion lacks depth in terms of identifying specific indicators or strategies related to unrealised value, and the examples provided are more about operational improvements than untapped opportunities. Therefore, while there is some alignment with the category, it is not the primary focus of the content.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:39:06",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing in software engineering, with no explicit discussion of Hybrid Agile principles or challenges. While it touches on the transition from traditional to agile methodologies, it lacks a critical examination of the integration of these approaches, which is essential for the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T17:03:50",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on delivering value, particularly through the example of the Azure DevOps team. While it touches on the importance of managing technical debt to enhance product delivery and value, it does not explicitly define or focus on Current Value as a concept within Evidence-Based Management. The discussion is more centred on technical debt rather than a real-time assessment of value delivered, which is the core of Current Value. Therefore, while there are relevant mentions and some alignment, the depth of discussion does not fully meet the criteria for a strong focus on Current Value.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:39:14",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its impact on software delivery, without a clear focus on scaling methodologies or frameworks. While it touches on the importance of improving delivery speed and quality, it does not delve into the complexities of scaling Agile practices or cross-team collaboration, which are central to the 'Scaling' category.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-10T13:39:17",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications in software engineering, with a focus on Azure DevOps rather than GitHub. While it touches on concepts relevant to software delivery and engineering practices, it does not explicitly mention GitHub or its functionalities, nor does it delve into GitHub-specific practices or tools. Therefore, the alignment with the GitHub category is minimal.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T17:03:34",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing, with no direct mention of Agnostic Agile principles or discussions. While it touches on agile practices, it does not explore the core themes of Agnostic Agile, such as ethical considerations, value delivery, or comparisons with traditional frameworks. The depth of discussion is limited to technical debt without connecting it to the broader context of agility or the Agnostic Agile philosophy.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T17:03:40",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 15.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management within software engineering, discussing its implications on product delivery and quality. While it touches on aspects of organisational practices, such as the transition from waterfall to continuous delivery, it does not explicitly discuss the company as a product concept or its core themes. The mention of improving product delivery through technical debt management is relevant but does not align with the broader CaaP framework, which emphasises organisational strategy and customer-centric approaches. Overall, the content lacks depth in discussing the principles or strategies associated with CaaP.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T17:03:43",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses technical debt management in software engineering, focusing on the implications of technical debt and strategies for addressing it. There are no direct mentions of Cell Structure Design or its principles, nor does the content align with the core themes of decentralised organisational structures or autonomous cells. The discussion is centred around traditional software practices rather than the innovative organisational design model described in the category.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-13T21:55:11",
    "ai_confidence": 6.0,
    "ai_mentions": 0.1,
    "ai_alignment": 0.3,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 0.1,
    "ai_signal": 0.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content is focused on technical debt management and its impact on product quality, using Azure DevOps as an illustrative case. Nowhere does it mention Liberating Structures, their techniques, or how to facilitate team collaboration using them. There is no conceptual or thematic alignment; no methods, practices, or principles from Liberating Structures are discussed. The intended audience (software engineers, DevOps teams) partially overlaps with possible Liberating Structures users, but the topic remains solely about engineering practices and process improvement—never facilitation or group dynamics. All scoring dimensions are therefore minimal, and there is no basis for penalties.",
    "reasoning_summary": "This piece solely discusses technical debt and engineering practices, making no mention of Liberating Structures, their methods, or relevant facilitation topics. There's no direct or conceptual alignment to the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T17:03:53",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing within software engineering, with no direct mention of Open Space Agile principles or practices. While it touches on Agile concepts, it does not align with the core themes of Open Space Agile, such as collective participation, psychological safety, or co-creation. The discussion lacks depth regarding Open Space Agile methodologies, making it unsuitable for this category.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 47.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 20,
    "non_ai_confidence": null,
    "final_score": 47.0,
    "reasoning": "The content discusses technical debt management, focusing on the implications that short-term decisions have on long-term quality. While it does touch upon principles like continuous improvement and value delivery, it primarily centers on the concept of technical debt rather than explicitly outlining actionable principles. The alignment with the principles of Agile or Lean is present but not explicitly detailed enough to be categorized under 'Principle' strongly. The depth is moderate as it provides examples and implications but does not explore core principles sufficiently in a structured manner.",
    "level": "Tertiary"
  },
  "Tool": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 45.0,
    "ai_mentions": 20.0,
    "ai_alignment": 40.0,
    "ai_depth": 35.0,
    "non_ai_confidence": null,
    "final_score": 45.0,
    "reasoning": "The content discusses technical debt and its implications within software engineering, using the Azure DevOps team as a case study. While the mention of Azure DevOps indicates a tool relevant to Agile and DevOps practices, the primary focus of the content is on the concept of technical debt rather than on specific tools or their functionalities. The discussion provides some insights into how addressing technical debt can improve workflows in Agile methods, but it lacks detailed exploration of specific tool functionalities or comparative analyses that would strengthen its alignment with the 'Tool' category. Thus, the content only partially meets the category criteria.",
    "level": "Tertiary"
  },
  "Philosophy": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 5.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content focuses on the practical aspects of managing technical debt in software development, discussing specific actions and outcomes rather than exploring the underlying philosophical concepts behind Agile, Lean, or DevOps. It lacks explicit discussion of the philosophical foundations or cultural implications of these methodologies, limiting its alignment with the 'Philosophy' category.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 32.0,
    "ai_mentions": 100.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content mentions DevOps in the context of technical debt management and discusses its implications for productivity. However, it largely focuses on specific examples of technical debt and automated testing without thoroughly contextualizing these within the principles and methodologies that define a discipline. While there's some reference to Agile and team practices, the primary focus seems to be more on technical aspects than on a structured discussion of discipline itself.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management but does not explicitly focus on specific artifacts used in Agile or Lean practices. While there are mentions of processes and improvements related to technical debt, it does not delve into the structure, use, or management of tangible Agile artifacts such as product backlogs or increments. Instead, it emphasizes the concept of technical debt and its implications, which is more abstract and not distinctly related to the core themes of artifacts in Agile systems.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 20.0,
    "ai_mentions": 100.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content primarily focuses on technical debt management rather than observability. While there is a brief mention of software development practices that could relate to observability indirectly (like feedback loops), the core discussion does not address observability concepts such as metrics, logs, or traces that provide insights into system performance. There are no tools or best practices specific to observability discussed, and the details provided are centered around technical debt rather than the internal states of a system or how observability enhances development practices. Overall, the content does not align closely with the core themes or principles of observability.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 53.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 20,
    "non_ai_confidence": null,
    "final_score": 53.0,
    "reasoning": "The content discusses technical debt management and emphasizes the importance of practices that enhance long-term quality in software delivery. While it touches on concepts like continuous delivery and feedback loops, which reflect some actionable techniques, the primary focus is more on the implications and examples of technical debt rather than specific practices themselves. It does provide useful details related to improving value delivery, but the depth of actionable practices such as conducting retrospectives or implementing pair programming is lacking.",
    "level": "Tertiary"
  },
  "Method": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Method",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 40.0,
    "ai_mentions": 2,
    "ai_alignment": 50.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 40.0,
    "reasoning": "The content discusses technical debt and its management but does not detail specific structured methods or procedures within Agile, Lean, or DevOps. While it showcases some practices to improve feedback loops and manage technical debt, it lacks a focused discussion on clearly defined methods or systematic step-by-step procedures related to the mentioned frameworks. Thus, while there's a conceptual link to improving processes, the content primarily relates to the consequences of technical debt management rather than a direct engagement with methodical approaches.",
    "level": "Ignored"
  },
  "Model": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Model",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 40.0,
    "ai_mentions": 10.0,
    "ai_alignment": 30.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 40.0,
    "reasoning": "The content discusses technical debt and its management in software engineering but does not explicitly focus on conceptual models or frameworks. While it references the Three Ways of DevOps, which aligns with one aspect of the 'Model' category, the primary focus is on the concept of technical debt rather than on models that guide decision-making or systems thinking. The depth of discussion on technical debt is significant, but it lacks a concentrated exploration of models and their role in improving organizational agility. Thus, while there is some relevant content, it does not robustly engage with the 'Model' category overall.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 35.0,
    "ai_mentions": 3,
    "ai_alignment": 50.0,
    "ai_depth": 40.0,
    "non_ai_confidence": null,
    "final_score": 35.0,
    "reasoning": "The content primarily focuses on technical debt management rather than a specific framework. While it mentions continuous delivery and references the Azure DevOps team's transformation, it lacks a comprehensive discussion on Agile, DevOps, or Lean frameworks as structured methodologies. Although there are mentions of team dynamics and delivery cycles, the content does not provide an overview of or strategies for implementing specific frameworks, nor does it engage in a detailed exploration of adapting frameworks for unique contexts. The focus on technical debt detracts from the framework-centric themes outlined in the category description.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 55.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 40,
    "non_ai_confidence": null,
    "final_score": 55.0,
    "reasoning": "The content discusses technical debt management, including how closing feedback loops relates to better efficiency, which aligns with agile practices. However, it lacks direct actionable tenets or specific prescriptive rules derived from methodologies like Agile or DevOps. It mentions concepts that support efficiency and performance, such as speeding up delivery and reducing errors, but does not explicitly outline guiding rules or doctrines suited to the Tenet category. Thus, while there's a decent alignment with some themes of the category, the depth of actionable tenets is limited.",
    "level": "Tertiary"
  },
  "Capability": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:06:25",
    "ai_confidence": 36.0,
    "ai_mentions": 2,
    "ai_alignment": 30.0,
    "ai_depth": 40.0,
    "non_ai_confidence": null,
    "final_score": 36.0,
    "reasoning": "The content discusses technical debt management, which indirectly relates to capabilities but focuses more on specific examples and events rather than the overarching concept of capability as defined in Agile and DevOps contexts. While it touches on the importance of improving team effectiveness and value delivery, it primarily centers on the issues of technical debt and its consequences rather than developing enduring capabilities or embedding them within organizational culture. Therefore, while there is some relevance, it does not deeply explore the concept of capability itself.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:38",
    "ai_confidence": 1.6,
    "ai_mentions": 0.1,
    "ai_alignment": 0.3,
    "ai_depth": 0.2,
    "ai_intent": 0.1,
    "ai_audience": 0.5,
    "ai_signal": 0.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is focused exclusively on technical debt management, discussing its definition, causes, and impact on long-term product quality. There is no mention—direct or indirect—of Service Level Expectation (SLE), nor of its purpose, calculation, or use in Agile/Scrum/Kanban contexts. The content, while relevant for Agile practitioners, does not touch upon SLE concepts, its probabilistic nature, transparency, or its use for predictability and flow improvement. The intent is education about technical debt rather than discussing or improving SLE practices. As such, all scoring dimensions remain minimal and the calculated confidence reflects that the content does not fit under the SLE category.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Ethos",
    "calculated_at": "2025-05-13T21:55:12",
    "ai_confidence": 37.84,
    "ai_mentions": 0.5,
    "ai_alignment": 5.8,
    "ai_depth": 4.9,
    "ai_intent": 3.7,
    "ai_audience": 7.6,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses mainly on technical debt management, defining its causes and discussing the benefits of repaying it for long-term feature delivery. There are minor conceptual overlaps with system-level thinking (discussing how technical debt impacts sustainable delivery and value realization), but the primary lens is practical, not foundational ethos. There is very limited discussion about organizational beliefs, values, or system-wide convictions driving practices. The audience is well aligned (practitioners and teams in Agile/DevOps contexts), and the signal is decent, but most of the substance targets engineering strategy, not underlying ethos. Direct references to ethos, foundational beliefs, or principles are absent. Thus, it touches at the edges of ethos only where sustainable delivery is discussed as an outcome, not as a matter of system-anchoring convictions.",
    "reasoning_summary": "While the content effectively explains technical debt and its benefits for delivery, it doesn't explicitly connect to ethos or foundational beliefs driving Agile/DevOps practices. It serves practitioners but falls short on discussing system-level convictions, so confidence in the 'Ethos' fit is low.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T21:55:08",
    "ai_confidence": 39.32,
    "ai_mentions": 1.3,
    "ai_alignment": 4.8,
    "ai_depth": 4.6,
    "ai_intent": 2.7,
    "ai_audience": 6.2,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content centers on technical debt management to improve product quality and delivery. It references outcomes such as 'maximizing value you can deliver long term' and mentions closing/shortening feedback loops, loosely aligning with principles of Customer Focus. However, explicit exploration of defining, measuring, or prioritizing based on real customer outcomes is minimal. The discussion remains primarily about internal engineering practices, quality, and throughput, not direct customer-centric strategies. Audience and signal are moderate, as some agile/DevOps practitioners may find indirect relevance. Still, the core intent is not customer value but engineering excellence and process improvement.",
    "reasoning_summary": "This article discusses technical debt management mainly as a driver of software quality and internal capability gains. While it touches on delivering greater value and feedback loops, there is little direct ties to customer outcomes or decisions based on user feedback—keeping confidence in Customer Focus fitting low.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "BAwBXYtKj7o",
    "category": "First Principal",
    "calculated_at": "2025-05-13T21:55:09",
    "ai_confidence": 23.37,
    "ai_mentions": 0.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.9,
    "ai_intent": 1.1,
    "ai_audience": 7.1,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content centers on practical explanations and strategies for managing technical debt, with references to real-world DevOps and Agile scenarios. It does not explicitly reference first principles or foundational immutable constraints, focusing instead on context-dependent best practices and consequences. No discussion of the ontological distinction between first principles and heuristics appears, nor are non-negotiable system boundaries explored. As such, while the audience and context are generally aligned, the content does not fit the strict requirements for the First Principal category.",
    "reasoning_summary": "Though relevant to Agile and DevOps practitioners, this content discusses technical debt from a practical, applied perspective rather than through the lens of first principles. It lacks explicit or in-depth coverage of immutable, foundational constraints required for the First Principal category.",
    "level": "Ignored"
  },
  "Definition of Workflow": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-23T22:06:21",
    "ai_confidence": 9.971,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.9,
    "ai_intent": 0.7,
    "ai_audience": 4.1,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses on technical debt management, its causes, impacts, and the need for repayment to improve software delivery. While the discussion aligns with agile and DevOps contexts, there is no mention of the Definition of Workflow, explicit workflow policies, entry/exit criteria, or WIP limits. Any workflow references are generic (e.g., improved delivery speed) and not related to Kanban's Definition of Workflow. Audience and some agile alignment are present, but the content is not about defining or visualizing workflow.",
    "reasoning_summary": "This content thoroughly explores technical debt but does not address the Definition of Workflow or related policies, criteria, or Kanban principles, making it only marginally relevant to the specified category.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:04:42",
    "ai_confidence": 18.46,
    "ai_mentions": 0.7,
    "ai_alignment": 2.4,
    "ai_depth": 2.7,
    "ai_intent": 2.0,
    "ai_audience": 5.1,
    "ai_signal": 3.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content centers on technical debt management, offering practical insights and examples of its impact on product delivery and quality. While it discusses development teams, engineering practices, and the consequences of technical decisions, it never directly references the Product Developer role or explores collective responsibilities or structures as defined in product development frameworks. The focus is on software quality improvement in general, not the unique accountabilities or behaviors specific to Product Developers. Audience is somewhat aligned due to general relevance for practitioners, but nearly all the content is about development process improvements in an undifferentiated sense.",
    "reasoning_summary": "This content discusses technical debt for software teams, focusing on quality and improvement practices. However, it does not reference the Product Developer accountability, role, or associated behaviors, and aligns only generally with audiences interested in product development.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:04:42",
    "ai_confidence": 7.9,
    "ai_mentions": 0.1,
    "ai_alignment": 1.8,
    "ai_depth": 1.9,
    "ai_intent": 1.2,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses exclusively on technical debt management, team practices, historical examples (such as Azure DevOps), and agile engineering strategies. There is no direct mention or meaningful exploration of human-AI collaboration, distributed cognition with AI, or collective problem-solving involving both human agents and AI systems. Content emphasizes human team decision-making, technical constraints, and agile process improvements but not the enhanced cognitive outcomes possible through human-AI partnership. No penalties were warranted as material is not outdated or satirical.",
    "reasoning_summary": "This content is about human team strategies for technical debt in Agile and DevOps, with no discussion of AI collaboration or collective intelligence involving humans and AI. It does not address the category’s intended focus.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-23T09:04:43",
    "ai_confidence": 4.85,
    "ai_mentions": 0.3,
    "ai_alignment": 1.6,
    "ai_depth": 1.9,
    "ai_intent": 1.1,
    "ai_audience": 0.7,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content focuses on technical debt management and its impact on software delivery quality and speed. There are no direct mentions of Objective Key Results (OKRs), nor any discussion of OKR concepts such as objectives, key results, strategic alignment, outcome-based measurement, or regular inspection/adaptation in the OKR context. Examples and frameworks referenced center on DevOps, engineering excellence, technical debt repayment, and feedback loop optimization, with no explicit or implicit connection to the OKR system or its principles as defined by John Doerr. The audience is adjacent—product managers, agile practitioners, etc.—but the central thesis is firmly rooted in technical debt, not OKRs.",
    "reasoning_summary": "This content is devoted to technical debt and its impact on product delivery, with no explicit or implicit connection to Objective Key Results. Neither OKR fundamentals nor the framework's strategic approach are referenced or discussed.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:44",
    "ai_confidence": 39.55,
    "ai_mentions": 1.7,
    "ai_alignment": 4.8,
    "ai_depth": 4.9,
    "ai_intent": 5.0,
    "ai_audience": 7.0,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content focuses on technical debt management and its impact on long-term product quality and delivery speed. It references DevOps, continuous delivery, feedback loops, and engineering practices—concepts tangent to Agentic Engineering—but doesn't explicitly discuss agency (human or AI), ethical autonomy, or deliberate decentralization of decisions. Mentions of enabling engineers to close and shorten feedback loops suggest some proximity to developer agency. However, the core purpose is advising on technical debt rather than agentic design, and there are no references to AI collaboration or explicit frameworks for agency. The main audience is technical practitioners, fitting the Agentic Engineering demographic, but the signal-to-noise ratio is moderate due to tangential content. No penalties apply as there's no outdated or contradictory material.",
    "reasoning_summary": "This content discusses technical debt management, touches on DevOps, feedback loops, and engineering practices, and aligns partially with Agentic Engineering. Brief references to developer empowerment occur, but no focus on agency, decision decentralization, or AI collaboration. Alignment is peripheral rather than central.",
    "level": "Ignored"
  },
  "Agentic Software Delivery": {
    "resourceId": "BAwBXYtKj7o",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:47",
    "ai_confidence": 19.09,
    "ai_mentions": 0.3,
    "ai_alignment": 2.35,
    "ai_depth": 2.6,
    "ai_intent": 2.25,
    "ai_audience": 6.15,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content centers on technical debt management for quality and delivery speed. It discusses DevOps, feedback loops, CI/CD, and engineering practices, but does not mention AI agents, agency, or the integration of contextual intelligence into delivery. Although there are nods to themes such as automating pipelines and continuous delivery, there is no substantive linkage to agentic principles—no reference to AI autonomy, human-agent synergy, contextualized intelligence, or the governance of agent operations. The focus remains on human team practices, modern software engineering, and feature delivery acceleration. The audience is aligned (engineers, managers, product owners), and the discussion is moderately deep about technical debt, but it lacks key agentic delivery content.",
    "reasoning_summary": "Discusses technical debt and modern engineering but omits AI agents, autonomy, or agentic software delivery concepts. No direct or indirect alignment with agentic principles. Fit is low, with mentions of related contexts only.",
    "level": "Ignored"
  }
}