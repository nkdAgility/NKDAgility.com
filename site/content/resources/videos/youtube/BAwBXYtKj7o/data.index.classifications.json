{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-02-12T09:14:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a focus on hypothesis formulation, experimentation, or validated learning.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-02-12T09:14:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on hypothesis-driven experimentation or Agile workflows.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-12T09:14:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on the Product Backlog or its management.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-12T09:15:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses automated testing and software engineering practices, with no clear focus on Scrum principles, roles, or events.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-12T09:15:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on systems thinking or organisational dynamics.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-12T09:15:05",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on coaching or facilitating growth and development within teams or individuals.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-12T09:15:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without a clear focus on evidence-based leadership principles or empirical decision-making.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-12T09:15:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and software engineering processes, with no focus on employee motivation, commitment, or engagement strategies.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and software engineering practices, lacking a focus on product management strategies or methodologies.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-12T09:15:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to automated testing and software engineering without addressing leadership roles or practices within Agile contexts.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-12T09:15:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-10T13:39:20",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt in software development rather than system configuration. While it touches on aspects of system performance and decision-making, it does not explicitly address configuration management, integration of hardware and software, or best practices for system setup. The focus is on managing technical debt and improving software delivery, which falls outside the defined scope of system configuration.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is a crucial aspect of software development but does not explicitly focus on the strategic adoption of digital technologies for business transformation. While it touches on improving operational efficiency and mentions the Azure DevOps team's transition to a more agile model, it lacks a broader discussion on digital transformation strategies, emerging technologies, or change management practices. The primary focus remains on technical debt rather than a comprehensive view of digital transformation.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 82.0,
    "reasoning": "The content discusses the importance of automated testing in delivering high-quality software, which aligns well with the principles of working software. It highlights the role of automated testing in reducing human error, ensuring fast feedback, and maintaining software quality, all of which are crucial for meeting customer needs. The depth of discussion on test strategies and the emphasis on continuous delivery further support its relevance to the category. However, while it touches on key aspects of working software, it does not explicitly frame these discussions within Agile or Scrum contexts, which slightly lowers the confidence score.",
    "level": "Primary"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and its implications on decision-making within software development, particularly in the context of Agile practices. However, while it touches on the importance of making informed choices and the consequences of past decisions, it lacks a structured, evidence-based approach to decision-making as outlined in the category definition. The discussion is more focused on the concept of technical debt rather than a comprehensive exploration of decision-making methodologies.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-02-12T09:15:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on self-organisation principles or practices.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-12T09:15:24",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on remote working or Agile methodologies.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is tangentially related to Lean principles, particularly in terms of maximising value and minimising waste. However, it primarily focuses on technical debt rather than Lean Product Development specifically. While there are mentions of improving delivery and efficiency, the core themes of Lean thinking, waste elimination, and customer feedback are not explicitly addressed, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-12T09:15:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical practices related to automated testing and software engineering, without a clear focus on organisational culture or its influence on agility and transformation.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-02-12T09:15:29",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on customer feedback integration or feedback loops.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with only a brief mention of Azure DevOps features, which does not focus on Azure Repos specifically.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-12T09:15:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits in software engineering, without a focus on transparency or related Agile practices.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on the Definition of Done or its criteria.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and technical implementation details, with no clear focus on product strategy methodologies or frameworks.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-12T09:15:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on customer retention strategies or user engagement.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Value Stream Mapping or its principles.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 55.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the management of technical debt within the context of Agile practices, particularly highlighting how addressing technical debt can enhance team performance and delivery processes. It provides specific examples, such as the Azure DevOps team's transition to continuous delivery and the impact of technical debt on their ability to deliver features. However, while it touches on strategic elements, the primary focus is more on technical debt management rather than a comprehensive discussion of strategic alignment or planning within Agile frameworks.",
    "level": "Secondary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-10T14:29:20",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery but does not explicitly focus on innovation or the mechanisms that foster it. While it touches on improving delivery through better practices, it lacks a direct connection to innovation metrics, learning cycles, or strategies for enhancing innovation capacity.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-12T09:15:47",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile frameworks or their principles.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits for software engineering, without a clear focus on team collaboration or dynamics within Agile, Scrum, or DevOps frameworks.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-12T09:15:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without a clear focus on customer satisfaction or related strategies.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is tangentially related to Lean principles, particularly in terms of efficiency and value delivery. However, it does not explicitly mention Lean Thinking concepts such as waste identification or continuous improvement. The focus is primarily on technical debt rather than Lean methodologies, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits, with no clear focus on Cycle Time or its measurement.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 34,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of automated testing, TDD, and the need for fast-running unit tests, which are core principles of Engineering Practices. It provides detailed insights into how automation can enhance software quality and reduce human error, aligning well with the category's focus. The depth of discussion on test infrastructure and the shift from end-to-end tests to unit tests further supports its relevance. Overall, the content is a strong fit for the category.",
    "level": "Primary"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on portfolio management or alignment of projects with organisational strategy.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 90.0,
    "ai_alignment": 85.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses automated testing, its importance in software engineering, and its role in improving software quality and efficiency. It aligns well with key topics such as Test-Driven Development (TDD), Continuous Integration and Continuous Deployment (CI/CD), and best practices in coding. The depth of discussion on test infrastructure and the need for fast-running unit tests further solidifies its relevance to software development practices.",
    "level": "Primary"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of automated testing, its role in reducing human error, and the need for fast-running unit tests, which are all key aspects of engineering excellence. It aligns well with the principles of software craftsmanship and quality assurance, emphasising continuous improvement in testing methodologies and the impact of automation on development efficiency. The depth of discussion is significant, providing detailed insights into test strategies and the importance of maintaining a robust test infrastructure, which further supports the category's focus.",
    "level": "Primary"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and its impact on delivery timelines, which indirectly relates to throughput. However, it primarily focuses on the concept of technical debt rather than explicitly measuring or optimising throughput. While there are mentions of improving delivery rates and the relationship between technical debt and feature delivery, the discussion lacks a direct focus on throughput as defined in Agile and DevOps contexts.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and references the Azure DevOps team, but it does not focus on Azure Pipelines specifically. While it touches on continuous delivery and the impact of technical debt on software delivery, it lacks detailed discussions on Azure Pipelines, such as configuration, management, or CI/CD practices directly related to Azure Pipelines. The primary focus is on technical debt rather than the automation of software development processes using Azure Pipelines.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software quality, without a clear focus on Agile values or principles.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 85.0,
    "ai_alignment": 90.0,
    "ai_depth": 88.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses the importance of automated testing in software engineering, highlighting its role in reducing human error, providing fast feedback, and improving software quality. It covers various aspects such as the need for unit tests, the impact of test infrastructure, and the shift from long-running tests to faster ones. The discussion aligns well with the core themes of automated testing, including methodologies, best practices, and the significance of automation in the development process. The depth of the discussion is substantial, providing detailed insights into the implementation and benefits of automated testing, thus justifying a high confidence score.",
    "level": "Primary"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 30,
    "non_ai_confidence": 10,
    "final_score": 30.0,
    "reasoning": "The content discusses automated testing and its importance in software engineering, but it primarily focuses on testing practices rather than the principles and practices of Site Reliability Engineering. While there are mentions of reducing problems in production and improving quality, these are not central themes related to SRE.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on change management strategies or principles.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-12T09:16:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and software engineering, with no clear focus on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-02-12T09:16:18",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on empirical process control principles or Agile methodologies.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its role in software engineering, rather than focusing on validating product ideas through user engagement or feedback.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with only a brief mention of Azure DevOps features, which does not align with the central theme of Azure Boards.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on revenue per employee metrics or related financial efficiency discussions.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery but does not explicitly mention Test First Development or its principles. While it touches on the importance of reducing errors and improving feedback loops, it lacks a direct focus on defining success criteria before implementation or the specific practices of Test-Driven Development (TDD) or Acceptance Test-Driven Development (ATDD). The discussion is more about managing technical debt rather than the Test First approach itself.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses the concept of technical debt and its impact on software delivery, particularly in the context of the Azure DevOps team's transition to a more frequent release cycle. While it touches on the benefits of moving to continuous delivery and mentions the increase in features delivered, the primary focus is on technical debt management rather than the principles and practices of frequent releases. The discussion lacks depth in terms of specific strategies or metrics related to release frequency, which diminishes its alignment with the category.",
    "level": "Tertiary"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-12T09:16:30",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on estimation techniques or practices within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt and its implications on software development, which indirectly relates to troubleshooting by highlighting the need to address issues arising from poor decisions. However, it lacks a direct focus on diagnosing or resolving specific technical problems, making it more about management than troubleshooting.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-02-12T09:16:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on the concept of Increment in Agile or Scrum.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-12T09:16:38",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on the Windows operating system or its specific functionalities.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-02-12T09:16:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Sprint Review or its related topics.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits, with no clear focus on Lead Time or its measurement.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 82.0,
    "reasoning": "The content discusses practical problem-solving strategies related to automated testing within a DevOps context, highlighting the importance of reducing human error and improving efficiency. It aligns well with the core themes of Pragmatic Thinking by providing real-world applications of testing strategies, emphasising adaptability in testing approaches, and illustrating the impact of automation on software quality. The depth of discussion is substantial, covering various aspects of test automation and its implications for project management and delivery, thus supporting a high confidence score.",
    "level": "Primary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of managing technical debt on deployment frequency, particularly through the example of the Azure DevOps team transitioning from a two-year release cycle to a three-week continuous delivery model. While it touches on the relationship between technical debt and deployment frequency, the primary focus is on technical debt management rather than optimising deployment intervals. The discussion lacks depth in strategies specifically aimed at increasing deployment frequency and does not provide metrics or measurement techniques, which are key topics in the category.",
    "level": "Secondary"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-03-14T17:13:51",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management rather than Continuous Integration. While it briefly mentions the transition to a continuous delivery model, it does not delve into CI principles, practices, or tools. The focus is on the implications of technical debt and its management, which is not aligned with the core themes of Continuous Integration.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-02-12T09:16:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and technical practices without a clear focus on Agile strategy or methodologies.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, particularly in the context of a transition to continuous delivery. While it mentions continuous delivery and provides a case study of the Azure DevOps team, the primary focus is on technical debt rather than the principles and practices of continuous delivery itself. The discussion on how managing technical debt can enhance delivery speed and quality aligns with the category, but it lacks a comprehensive exploration of continuous delivery practices, automation, and cultural aspects.",
    "level": "Secondary"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-12T09:16:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a focus on cross-functional teams or their characteristics.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on the Definition of Ready or its criteria.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-12T09:16:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and technical debt management without a clear focus on sensemaking or decision-making processes in complex environments.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of automated testing and software engineering without addressing team dynamics or motivation.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software engineering rather than focusing on team dynamics, collaboration, or Agile methodologies.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-12T09:17:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-12T09:17:08",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on working agreements or team collaboration norms.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which indirectly relates to Lean principles through the concepts of waste reduction and value maximisation. However, it primarily focuses on technical debt rather than explicitly addressing Lean principles or practices. While there are mentions of improving processes and delivering value, the depth of discussion is more centred on technical debt rather than Lean methodologies or tools.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-12T09:17:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile transformation principles or methodologies.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content provides a comprehensive discussion on technical debt, including its definition, types (intentional and unintentional), and real-world examples illustrating its impact on development velocity and product quality. It also discusses strategies for prioritising technical debt remediation and the importance of managing it effectively to enhance long-term value delivery. The depth of the discussion is significant, with detailed examples and a clear narrative on the consequences of neglecting technical debt, which aligns well with the key topics outlined in the category definition.",
    "level": "Primary"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-12T09:17:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Scrum Values such as commitment, courage, focus, openness, or respect.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and software engineering practices without a focus on organisational change strategies or methodologies.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications on software quality and delivery, without a direct focus on test automation principles, frameworks, or practices. While it touches on Agile and continuous delivery, it does not delve into the specifics of automating testing processes or tools associated with test automation.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 78.0,
    "ai_mentions": 70.0,
    "ai_alignment": 85.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt management, which is crucial for improving operational efficiency in software development. It highlights the importance of addressing technical debt to enhance delivery speed and product quality, aligning well with operational practices. The depth of discussion includes specific examples and metrics related to the Azure DevOps team's experience, demonstrating a practical application of strategies to optimise processes and improve performance. However, while it is focused on operational practices, it does not explicitly mention Agile, DevOps, or Lean methodologies in a structured way, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, but it does not explicitly mention Evidence-Based Management or its key topics. While there are elements of empirical decision-making and value delivery, the focus is primarily on technical debt rather than a broader evidence-based approach to management.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-12T09:17:23",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with no clear focus on backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and automated testing in software engineering, with only a brief mention of Scrum Masters in the hashtags. It does not focus on the role, responsibilities, or impact of a Scrum Master, nor does it delve into Scrum practices or principles, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-12T09:17:26",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without addressing large scale Agile principles or frameworks.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-12T09:17:28",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on forecasting methodologies or practices within Agile and Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management, which is a crucial aspect of technical leadership, particularly in agile environments. It highlights the importance of making informed architectural decisions and the consequences of neglecting technical debt. However, while it touches on the role of teams in managing technical debt, it lacks a broader discussion on mentoring, coaching, or specific agile practices that would enhance its alignment with the category of Technical Leadership. The depth of discussion is somewhat limited to examples and consequences rather than strategies for leading teams through these challenges.",
    "level": "Secondary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, rather than focusing on identifying customer needs or defining product features.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-12T09:17:32",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Lean Startup principles such as MVP, Build-Measure-Learn feedback loop, or validated learning.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-02-12T09:17:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile Planning principles or methodologies.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-02-12T09:17:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits in software engineering, without a clear focus on accountability or team dynamics in Agile methodologies.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "MVP",
    "calculated_at": "2025-02-12T09:17:37",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and its importance in software engineering, without a clear focus on Minimum Viable Product concepts or related strategies.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-12T09:17:39",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no focus on collaboration tools or Agile team dynamics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-12T09:17:40",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on psychological safety or its related themes.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-12T09:17:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on deployment methodologies or strategies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on Scrum Team dynamics, roles, or collaboration.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 10,
    "final_score": 87.0,
    "reasoning": "The content provides a thorough exploration of technical debt, its implications, and the importance of managing it effectively within software development. It discusses the concept of technical debt in detail, including its causes, consequences, and the necessity of prioritising its repayment to enhance product delivery. The examples provided, particularly regarding the Azure DevOps team, illustrate the practical impact of managing technical debt on software quality and team performance. This aligns closely with the core themes of Technical Mastery, focusing on best practices, principles of clean code, and the role of continuous improvement in software engineering. The depth of discussion is significant, offering insights into both known and unknown technical debt, and how addressing these issues can lead to improved outcomes in software delivery.",
    "level": "Primary"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is tangentially related to release management through its impact on software delivery and product quality. However, it lacks direct mentions of release management practices, version control, or release scheduling. The discussion primarily focuses on the implications of technical debt rather than the structured processes of managing software releases, resulting in a low confidence score for the category.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-03-14T17:14:03",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management rather than Test Driven Development (TDD). While it touches on aspects of software quality and decision-making, it does not explicitly mention TDD principles, the Red-Green-Refactor cycle, or the practice of writing tests before code. The focus is on managing technical debt and its implications, which is outside the core themes of TDD.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-12T09:17:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on trend analysis within Agile, DevOps, or business agility frameworks.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-12T09:17:51",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and test infrastructure, with no clear focus on Agile principles or philosophy.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on version control practices or methodologies.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-12T09:17:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Agile planning tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits, without a clear focus on Acceptance Test Driven Development or its principles.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-12T09:17:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without any focus on asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-12T09:17:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-12T09:18:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its benefits for software quality, without a clear focus on long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software quality, without a clear focus on continuous learning principles or practices.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-12T09:13:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on decision-making processes or the principles of decision theory.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-02-12T09:13:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on enterprise agility or organisational-level agility practices.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which is related to efficiency and value delivery, but it primarily focuses on Agile practices and does not explicitly mention Lean principles or methodologies. While there are elements of continuous improvement and value maximisation, the discussion lacks depth in Lean-specific tools or concepts, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, rather than focusing on installation or configuration processes.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses technical debt and its impact on delivery speed and product quality, which indirectly relates to flow efficiency. However, it primarily focuses on the concept of technical debt rather than explicitly addressing flow efficiency principles or techniques for optimising throughput. While there are mentions of improving delivery speed and managing work in progress, these are secondary to the main topic of technical debt management.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of automated testing in the context of delivering quality software products, which aligns well with the core themes of product delivery. It addresses methodologies like TDD and the need for fast-running tests, which are crucial for effective deployment and quality assurance. However, while it touches on relevant topics, it lacks a broader discussion on the entire product delivery process, such as planning and cross-functional team roles, which slightly limits its depth in the category.",
    "level": "Secondary"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses automated testing and software engineering practices, with no clear focus on Agile Product Management principles or practices.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-12T09:14:14",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Systems Thinking principles or interconnectedness within organisational dynamics.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management, which touches on aspects of complexity in software development, such as the implications of decision-making and the need for adaptive practices. However, it primarily focuses on practical examples and does not explicitly reference complexity science or its principles. The discussion lacks depth in exploring non-linear dynamics or emergent behaviours, which are central to the category of Complexity Thinking.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses technical debt management and its impact on product delivery, which indirectly relates to market adaptability through the lens of Agile methodologies and continuous delivery. However, the primary focus is on technical debt rather than explicitly addressing strategies for market responsiveness or adaptability. While there are mentions of Agile practices and the benefits of shortening feedback loops, the overall discussion does not centre on enhancing market adaptability as defined in the category.",
    "level": "Tertiary"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-12T09:14:25",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, with clear references to DevOps practices and methodologies.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 78.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 28.0,
    "non_ai_confidence": 50,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt management, which is relevant to DevOps, particularly in the context of continuous delivery and feedback loops. However, it primarily focuses on technical debt rather than the broader DevOps philosophy. While it mentions the Azure DevOps team and touches on aspects like feedback loops and value delivery, the depth of discussion on core DevOps principles is limited, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses automated testing and its importance in software engineering, with specific references to Azure DevOps features like test impact analysis. However, the primary focus is on general testing strategies and practices rather than a comprehensive exploration of Azure DevOps as a whole. While Azure DevOps is mentioned, it is not the central theme of the discussion, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-02-12T09:14:33",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its role in software engineering, without a clear focus on business agility principles or practices.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-12T09:14:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices without any clear focus on Kanban principles or practices.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of automated testing in delivering high-quality software, which aligns with the principles of iterative development and continuous delivery. However, while it touches on value delivery, the primary focus is on technical implementation details and personal experiences rather than explicitly discussing strategies for maximising customer value or aligning product development with customer needs.",
    "level": "Secondary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 87.0,
    "ai_mentions": 80.0,
    "ai_alignment": 90.0,
    "ai_depth": 85.0,
    "non_ai_confidence": 20,
    "final_score": 87.0,
    "reasoning": "The content extensively discusses automated testing, its importance in software engineering, and its role in enhancing code quality and reliability, which aligns closely with the principles of Technical Excellence. It provides detailed insights into Test-Driven Development (TDD), the need for fast-running unit tests, and the impact of test infrastructure on software delivery. The discussion is rich in technical detail and directly addresses engineering practices that improve agility and quality in software development, fulfilling the criteria for this category.",
    "level": "Primary"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-02-12T09:14:41",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its impact on software quality, without a clear focus on organisational agility principles or practices.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-12T09:14:42",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and DevOps practices without personal anecdotes or reflections.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-02-12T09:14:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its technical aspects without a clear focus on the interplay between technology and organisational structures.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content discusses technical debt management and its impact on product delivery, which indirectly relates to metrics and learning through the emphasis on feedback loops and continuous improvement. However, it lacks explicit discussions on metrics or data analysis techniques, which limits its alignment with the core themes of the category. The depth of discussion on the consequences of technical debt and the benefits of addressing it provides some insight into learning from past decisions, but it does not fully explore the broader implications of metrics in Agile and DevOps practices.",
    "level": "Secondary"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt, which is a relevant aspect of application lifecycle management, particularly in the context of maintenance and improvement of software applications. However, it primarily focuses on the implications of technical debt rather than the broader stages of the application lifecycle or governance practices. While it touches on the importance of managing technical debt to enhance delivery and product quality, it lacks a comprehensive exploration of the entire application lifecycle, making it a secondary rather than primary focus.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its role in software engineering, without a clear focus on Value Stream Management principles or practices.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-12T09:14:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses automated testing and software engineering practices, with no focus on psychological principles or theories related to organisational behaviour.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 25.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses technical debt management and its implications on software development rather than focusing on platform engineering principles or Internal Developer Platforms (IDPs). While it touches on aspects of developer productivity and the importance of managing technical debt, it does not explicitly mention platform engineering or its core components. The discussion lacks depth in relation to platform engineering, making it a secondary topic rather than a primary focus.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-17T12:01:59",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and software engineering practices, with no clear focus on BetaCodex principles or decentralised organisational design.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, which is relevant to agile practices. However, it primarily focuses on technical debt rather than the Agile Product Operating Model itself. While there are mentions of agile methodologies and continuous delivery, the core principles of the Agile Product Operating Model are not explicitly addressed, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-17T13:49:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of automated testing and software engineering, with no clear focus on leadership practices or themes.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing in software engineering, which are more technical topics rather than discussions on social technologies. While there are mentions of team dynamics and decision-making, they are not the primary focus. The content lacks depth in exploring social frameworks or methodologies that promote collaboration and value delivery, which are essential for the 'Social Technologies' category.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and its importance in software engineering, without a clear focus on Internal Developer Platforms or their specific components and benefits.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T13:33:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses automated testing and DevOps practices without a clear focus on the application of AI in these areas.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses automated testing and its importance in software engineering, with no direct mention of Scrum principles, roles, or events. While it touches on concepts like continuous improvement and efficiency, these are not explicitly linked to Scrum practices. The focus is more on technical aspects of testing rather than the collaborative and iterative nature of Scrum.",
    "level": "Ignored"
  },
  "Shift-Left Strategy": {
    "category": "Shift-Left Strategy",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, which indirectly relates to the Shift-Left Strategy by emphasising the importance of addressing issues early in the development process. However, it primarily focuses on technical debt rather than explicitly integrating testing, security, or compliance earlier in the lifecycle. The mention of feedback loops and continuous delivery hints at Shift-Left principles, but the overall discussion lacks a direct focus on the core themes of the Shift-Left Strategy.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management and its impact on software delivery, which indirectly relates to Continuous Improvement through the lens of enhancing processes and product quality. However, it lacks a direct focus on Continuous Improvement principles, such as empirical evidence or a structured approach to fostering a culture of experimentation. While it highlights the benefits of addressing technical debt, it does not delve deeply into strategies or frameworks that support Continuous Improvement, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software delivery, which does not directly address the concept of Common Goals. While it touches on aspects of team performance and delivery, it lacks explicit discussions on shared objectives or alignment within Agile and DevOps frameworks. The focus is more on technical practices rather than the foundational principles of Common Goals.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 30,
    "final_score": 72.0,
    "reasoning": "The content discusses technical debt management and its implications for software quality, which indirectly relates to competence through the lens of making informed decisions and improving team capabilities. However, while it touches on the importance of addressing technical debt to enhance delivery and quality, it does not explicitly focus on continuous learning or skill development, which are core themes of competence. The depth of discussion on competence is limited, primarily revolving around the consequences of poor decisions rather than strategies for fostering a culture of competence.",
    "level": "Secondary"
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software quality and delivery, but it does not explicitly mention the One Engineering System (1ES) framework or its principles. While there are references to improving software delivery and efficiency, these are not directly tied to the integration and standardisation of engineering processes as outlined in the 1ES category. The focus is more on individual practices rather than a unified engineering system.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-10T13:38:49",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications for software engineering, without explicitly addressing the concept of Agentic Agility. While it touches on themes of decision-making and value delivery, it lacks a clear focus on intentional shaping of outcomes through autonomy and adaptability, which are central to Agentic Agility. The discussion does not differentiate between human and AI capabilities in this context, nor does it explore the transformative capacity of individuals or systems in a socio-technical environment.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-10T13:38:53",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 20,
    "final_score": 78.0,
    "reasoning": "The content discusses technical debt management in the context of product development, highlighting its impact on delivery and value creation. It explicitly mentions Agile practices and continuous delivery, aligning well with the core themes of iterative learning and customer feedback. The depth of discussion on how managing technical debt can enhance product delivery and the examples provided contribute to a strong alignment with product development methodologies.",
    "level": "Secondary"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-10T14:29:14",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 25,
    "ai_depth": 25,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the impact of managing technical debt on the speed of delivering features, which aligns with the concept of Time to Market. It provides examples of how addressing technical debt can lead to increased feature delivery rates, thus enhancing the organisation's ability to deliver value quickly. However, the primary focus is on technical debt management rather than a direct exploration of Time to Market metrics or strategies, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-10T13:39:00",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 10,
    "final_score": 42.0,
    "reasoning": "The content discusses technical debt management, which is relevant to project management, particularly in the context of software delivery and agile practices. However, it primarily focuses on technical aspects and specific examples rather than broader project management principles or methodologies. While it touches on the importance of managing technical debt for effective delivery, it lacks a comprehensive exploration of project management roles, lifecycle phases, or governance structures.",
    "level": "Tertiary"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-10T14:29:11",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on delivering value, but it primarily focuses on the concept of technical debt rather than explicitly addressing unrealised value. While there are mentions of improving delivery and efficiency, the discussion lacks a direct exploration of unrealised value indicators or strategies. The depth of discussion on unrealised value is minimal, making it a secondary theme rather than a primary focus.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-10T13:39:06",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing in software engineering, with no explicit discussion of Hybrid Agile principles or challenges. While it touches on the transition from traditional to agile methodologies, it lacks a critical examination of the integration of these approaches, which is essential for the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-10T14:29:17",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses technical debt management and its impact on delivering value, particularly through the example of the Azure DevOps team. While it touches on the importance of managing technical debt to enhance product delivery and value, it does not explicitly focus on Current Value as defined in Evidence-Based Management. The discussion is more about technical debt rather than a real-time assessment of value delivered, which is the core of Current Value. Therefore, while there is some alignment, it is not the primary focus.",
    "level": "Ignored"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-10T13:39:14",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its impact on software delivery, without a clear focus on scaling methodologies or frameworks. While it touches on the importance of improving delivery speed and quality, it does not delve into the complexities of scaling Agile practices or cross-team collaboration, which are central to the 'Scaling' category.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-10T13:39:17",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management and its implications in software engineering, with a focus on Azure DevOps rather than GitHub. While it touches on concepts relevant to software delivery and engineering practices, it does not explicitly mention GitHub or its functionalities, nor does it delve into GitHub-specific practices or tools. Therefore, the alignment with the GitHub category is minimal.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-10T14:28:51",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing, with no explicit discussion of Agnostic Agile principles or its core themes. While it touches on agile practices, it does not engage with the ethical, context-driven aspects of Agnostic Agile or compare methodologies. The mention of agile terms is superficial and does not reflect a deep understanding or application of Agnostic Agile principles.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-10T14:28:57",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses technical debt management in software engineering, focusing on the implications of technical debt on product delivery and quality. While it touches on aspects of organisational practices, it does not explicitly address the concept of treating the company as a product or integrating customer feedback into organisational design. The discussion lacks depth in relation to CaaP principles and does not provide a clear connection to the broader themes of organisational strategy or culture, resulting in a low confidence score for alignment with the 'Company as a Product' category.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-10T14:29:00",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses technical debt management in software engineering, with no direct references to Cell Structure Design or its principles. While it touches on themes of organisational efficiency and team dynamics, these are not aligned with the core concepts of decentralised structures or autonomous cells as defined in the Cell Structure Design category.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "category": "Liberating Structures",
    "calculated_at": "2025-04-10T14:29:03",
    "ai_confidence": 5.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on technical debt management in software engineering, discussing its implications and strategies for resolution. While it touches on Agile methodologies, it does not explicitly mention or explore Liberating Structures or their facilitation techniques. The discussion lacks depth in relation to the principles and practices of Liberating Structures, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-10T14:29:08",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical debt management and automated testing in software engineering, with no direct mention of Open Space Agile principles or practices. While it touches on Agile concepts, it does not align with the core themes of Open Space Agile, such as collective participation, psychological safety, or co-creation. The discussion lacks depth regarding Open Space Agile methodologies, making it unsuitable for this category.",
    "level": "Ignored"
  }
}
