1
00:00:00,160 --> 00:00:05,440
If if you're still

2
00:00:02,639 --> 00:00:07,520
deploying manually, you're you're you're

3
00:00:05,440 --> 00:00:11,120
not you don't have modern engineering

4
00:00:07,520 --> 00:00:14,480
practices, I would suggest you have

5
00:00:11,120 --> 00:00:17,359
massive amounts of business risk. Uh

6
00:00:14,480 --> 00:00:20,240
there's there's no good outcomes um to

7
00:00:17,359 --> 00:00:23,279
deploying manually. Uh if you want

8
00:00:20,240 --> 00:00:25,760
stories about that, look up uh the Night

9
00:00:23,279 --> 00:00:28,000
Capital Group uh which is a company that

10
00:00:25,760 --> 00:00:29,679
went out of business in a day from a

11
00:00:28,000 --> 00:00:32,960
failed deployment, from a failed manual

12
00:00:29,679 --> 00:00:36,480
deployment. Um this happens in the

13
00:00:32,960 --> 00:00:39,120
industry. And

14
00:00:36,480 --> 00:00:42,079
while the bigger organizations can

15
00:00:39,120 --> 00:00:44,640
absorb smaller failures within that

16
00:00:42,079 --> 00:00:47,600
context, if you're a one product

17
00:00:44,640 --> 00:00:50,160
business, um it's it's almost impossible

18
00:00:47,600 --> 00:00:52,480
to absorb that that that failure

19
00:00:50,160 --> 00:00:54,879
depending on how you're you're the

20
00:00:52,480 --> 00:00:56,960
outcome the impact of that. H for the

21
00:00:54,879 --> 00:00:59,960
night capital group. Um they ended up

22
00:00:56,960 --> 00:00:59,960
deploying

23
00:01:00,000 --> 00:01:02,800
there's a whole story around it, but

24
00:01:01,359 --> 00:01:04,400
they ended up they had eight servers,

25
00:01:02,800 --> 00:01:07,360
eight production servers, and they ended

26
00:01:04,400 --> 00:01:10,400
up deploying with a feature flag enabled

27
00:01:07,360 --> 00:01:12,000
on one of they forgot to deploy to one

28
00:01:10,400 --> 00:01:14,560
of the production servers cuz there's a

29
00:01:12,000 --> 00:01:16,880
manual person following a script. Um and

30
00:01:14,560 --> 00:01:20,400
they repurposed a feature flag that used

31
00:01:16,880 --> 00:01:22,080
to be used for a a training scenario

32
00:01:20,400 --> 00:01:24,880
that they were exploring, like an

33
00:01:22,080 --> 00:01:26,240
exploratory training scenario. and they

34
00:01:24,880 --> 00:01:27,759
were they were a venture capitalist

35
00:01:26,240 --> 00:01:30,240
group. So they were they're not venture

36
00:01:27,759 --> 00:01:32,799
capitalist stock trading company. So

37
00:01:30,240 --> 00:01:35,200
they're trading stocks. Um and the

38
00:01:32,799 --> 00:01:36,960
feature flag enabled on this one old

39
00:01:35,200 --> 00:01:42,320
server that wasn't updated to the new

40
00:01:36,960 --> 00:01:44,640
code. Um, it updated it to buy high and

41
00:01:42,320 --> 00:01:46,479
sell low

42
00:01:44,640 --> 00:01:48,799
because there were they they had in the

43
00:01:46,479 --> 00:01:51,280
past they had some kind of exercise

44
00:01:48,799 --> 00:01:53,119
training, AB test, whatever they did

45
00:01:51,280 --> 00:01:56,880
around that in in in the test

46
00:01:53,119 --> 00:02:01,119
environment. Um, buy high, sell low, bad

47
00:01:56,880 --> 00:02:02,640
idea. Um, and they couldn't it took them

48
00:02:01,119 --> 00:02:05,439
long enough to figure out what the

49
00:02:02,640 --> 00:02:07,119
problem is that they went bust.

50
00:02:05,439 --> 00:02:09,440
They used up all their money. They had

51
00:02:07,119 --> 00:02:12,400
$450 million in the bank at the

52
00:02:09,440 --> 00:02:14,560
beginning of trading that day. Um, and

53
00:02:12,400 --> 00:02:16,000
by I don't know, certainly by the close

54
00:02:14,560 --> 00:02:17,520
of business, I think by lunchtime,

55
00:02:16,000 --> 00:02:19,520
they'd run out of money. They they

56
00:02:17,520 --> 00:02:22,000
they'd lost all all of the money because

57
00:02:19,520 --> 00:02:26,400
their software was acting erroneously.

58
00:02:22,000 --> 00:02:29,520
And that's massive risk. How a a

59
00:02:26,400 --> 00:02:32,239
business that has that much at stake

60
00:02:29,520 --> 00:02:36,319
when they're doing a deployment is

61
00:02:32,239 --> 00:02:38,080
completely incompetent.

62
00:02:36,319 --> 00:02:42,239
if they're using manual deployment

63
00:02:38,080 --> 00:02:46,000
processes. This just mental. I I I I wor

64
00:02:42,239 --> 00:02:49,920
I worked with a bank many years ago

65
00:02:46,000 --> 00:02:52,560
and they had ma not just manual

66
00:02:49,920 --> 00:02:55,360
deployment processes but they had five

67
00:02:52,560 --> 00:02:57,519
production servers. This is for a real

68
00:02:55,360 --> 00:02:59,599
time banking system.

69
00:02:57,519 --> 00:03:01,120
Real time banking system. They had five

70
00:02:59,599 --> 00:03:02,959
servers. They had five people in the

71
00:03:01,120 --> 00:03:04,400
team and each person in the team would

72
00:03:02,959 --> 00:03:05,599
log into the server and write their own

73
00:03:04,400 --> 00:03:08,640
code and deploy it directly to

74
00:03:05,599 --> 00:03:13,080
production on the server. Right? And

75
00:03:08,640 --> 00:03:13,080
this is within the last 15 years.

76
00:03:13,200 --> 00:03:19,360
These sorts of things

77
00:03:16,159 --> 00:03:22,720
risk they're unprofessional.

78
00:03:19,360 --> 00:03:25,120
They they they risk your business.

79
00:03:22,720 --> 00:03:26,720
They're they're not the risk of the

80
00:03:25,120 --> 00:03:28,879
engineers to take. They're probably not

81
00:03:26,720 --> 00:03:31,840
even the risk of the managers to take.

82
00:03:28,879 --> 00:03:34,480
Um, if you're a scrum master, that's a

83
00:03:31,840 --> 00:03:36,480
big squirrel burger right there. Um,

84
00:03:34,480 --> 00:03:39,920
it's a whole bunch of squirrel bers. So,

85
00:03:36,480 --> 00:03:43,120
if if if you want to

86
00:03:39,920 --> 00:03:45,120
have any movement towards modern

87
00:03:43,120 --> 00:03:46,959
engineering practices,

88
00:03:45,120 --> 00:03:49,440
um, let alone engineering excellence,

89
00:03:46,959 --> 00:03:52,239
just modern engineering practices, you

90
00:03:49,440 --> 00:03:54,720
need to be using

91
00:03:52,239 --> 00:03:56,560
automated processes. You need to be

92
00:03:54,720 --> 00:03:58,080
using automated builds, automated

93
00:03:56,560 --> 00:04:01,040
deployments.

94
00:03:58,080 --> 00:04:03,599
That's non-negotiable. That's table

95
00:04:01,040 --> 00:04:06,959
stakes in this story. It's not an

96
00:04:03,599 --> 00:04:09,920
aspirational thing. It is table stakes

97
00:04:06,959 --> 00:04:12,400
because it makes you vulnerable.

98
00:04:09,920 --> 00:04:14,080
People People make mistakes, right? You

99
00:04:12,400 --> 00:04:17,600
would think

100
00:04:14,080 --> 00:04:21,680
my my favorite reason the the the the

101
00:04:17,600 --> 00:04:25,600
moment in time when I lost

102
00:04:21,680 --> 00:04:28,800
any belief that a human can follow a set

103
00:04:25,600 --> 00:04:31,600
of steps repeatedly and successfully um

104
00:04:28,800 --> 00:04:35,199
was when I taught a training class for

105
00:04:31,600 --> 00:04:37,680
testers. Testers using the Azure DevOps

106
00:04:35,199 --> 00:04:38,960
test tools. And this was many years ago.

107
00:04:37,680 --> 00:04:42,080
So it wasn't the Azure DevOps test

108
00:04:38,960 --> 00:04:46,000
tools, it was TFS test tools. But yeah,

109
00:04:42,080 --> 00:04:48,720
um Visual Studio Team System, but you we

110
00:04:46,000 --> 00:04:52,800
had we had labs

111
00:04:48,720 --> 00:04:54,800
in our training and in a lab you work

112
00:04:52,800 --> 00:04:56,320
through the set of steps and when you

113
00:04:54,800 --> 00:04:57,440
get to the end you've completed the lab

114
00:04:56,320 --> 00:05:00,080
and you've done all the things and

115
00:04:57,440 --> 00:05:03,440
you've seen how it worked, right? All of

116
00:05:00,080 --> 00:05:06,000
the labs worked,

117
00:05:03,440 --> 00:05:08,240
but every five minutes in that training

118
00:05:06,000 --> 00:05:10,000
class, I had testers. This was for

119
00:05:08,240 --> 00:05:12,320
testers, and the people doing it were

120
00:05:10,000 --> 00:05:14,160
testers. Testers saying, "The labs don't

121
00:05:12,320 --> 00:05:17,840
work."

122
00:05:14,160 --> 00:05:20,639
I followed the lab and it doesn't work.

123
00:05:17,840 --> 00:05:22,320
And I would sit down with them and show

124
00:05:20,639 --> 00:05:23,600
me where it doesn't work. And they've

125
00:05:22,320 --> 00:05:24,960
missed a step. They haven't done

126
00:05:23,600 --> 00:05:27,360
something. They've missed one of the

127
00:05:24,960 --> 00:05:29,280
things in the list.

128
00:05:27,360 --> 00:05:32,000
If there was one group of people in the

129
00:05:29,280 --> 00:05:34,800
world that should be able to

130
00:05:32,000 --> 00:05:38,320
successfully manually follow a set of

131
00:05:34,800 --> 00:05:41,199
steps and confirm whether that set of

132
00:05:38,320 --> 00:05:43,120
steps works or not, it would be testers.

133
00:05:41,199 --> 00:05:46,320
How many false positives are we getting

134
00:05:43,120 --> 00:05:48,320
in in manual testing, right? That that

135
00:05:46,320 --> 00:05:52,560
that that they just missed a step

136
00:05:48,320 --> 00:05:57,680
perhaps in their own test, right?

137
00:05:52,560 --> 00:06:02,240
This is why you can't rely on humans to

138
00:05:57,680 --> 00:06:04,880
do these types of repetitive uh um

139
00:06:02,240 --> 00:06:07,919
complex repetitive

140
00:06:04,880 --> 00:06:10,479
tasks. You need automation. This must be

141
00:06:07,919 --> 00:06:12,639
automated. Everything must be automated

142
00:06:10,479 --> 00:06:16,880
and automated in as fast a way as

143
00:06:12,639 --> 00:06:19,120
possible. So you want to have h um

144
00:06:16,880 --> 00:06:24,639
automated builds.

145
00:06:19,120 --> 00:06:26,479
I recommend both uh Azure DevOps um

146
00:06:24,639 --> 00:06:28,080
pipelines,

147
00:06:26,479 --> 00:06:30,720
Azure pipelines, right? That that

148
00:06:28,080 --> 00:06:32,560
feature of Azure DevOps and I recommend

149
00:06:30,720 --> 00:06:35,199
uh GitHub actions, right? But Azure

150
00:06:32,560 --> 00:06:38,880
pipelines is is is is great. It's

151
00:06:35,199 --> 00:06:41,759
fantastic. Um

152
00:06:38,880 --> 00:06:45,039
you need those pipelines. You need those

153
00:06:41,759 --> 00:06:46,639
um I'm going to call them gates. Just

154
00:06:45,039 --> 00:06:49,360
cuz they're gates doesn't mean they're

155
00:06:46,639 --> 00:06:51,680
not automated, right? A gate doesn't

156
00:06:49,360 --> 00:06:53,440
have to be a manual thing that blocks

157
00:06:51,680 --> 00:06:57,680
your ability to do something. It can be

158
00:06:53,440 --> 00:06:59,199
automated. But pipelines, gates, test

159
00:06:57,680 --> 00:07:01,520
automation,

160
00:06:59,199 --> 00:07:03,280
that that's how you automated

161
00:07:01,520 --> 00:07:07,199
deployments.

162
00:07:03,280 --> 00:07:10,000
You want to automate everything. If it

163
00:07:07,199 --> 00:07:13,440
can be automated, automate it. If it

164
00:07:10,000 --> 00:07:15,840
can't be automated, refactor it until it

165
00:07:13,440 --> 00:07:19,599
can be automated. End of story. You

166
00:07:15,840 --> 00:07:21,759
should not have any manual processes

167
00:07:19,599 --> 00:07:24,800
from your developers committing a line

168
00:07:21,759 --> 00:07:27,360
of code to it ending up in production.

169
00:07:24,800 --> 00:07:29,120
You might have approve an approval

170
00:07:27,360 --> 00:07:32,319
button or I'm going to read through it

171
00:07:29,120 --> 00:07:35,360
and then approve it. Right? That's fine,

172
00:07:32,319 --> 00:07:37,759
but all of the steps are automated.

173
00:07:35,360 --> 00:07:41,840
That's human in the loop,

174
00:07:37,759 --> 00:07:45,360
but not human doing the loop.

175
00:07:41,840 --> 00:07:48,319
And what you'll find is if you get there

176
00:07:45,360 --> 00:07:50,960
to that minimum bar,

177
00:07:48,319 --> 00:07:52,960
the only way to peel away the pain is

178
00:07:50,960 --> 00:07:54,240
you're going to do lots of automation.

179
00:07:52,960 --> 00:07:55,680
You're going to do lot you're going to

180
00:07:54,240 --> 00:07:57,039
go through that process lots of times to

181
00:07:55,680 --> 00:07:58,720
build it out. And what you realize in

182
00:07:57,039 --> 00:08:03,280
doing that is you can do it lots of

183
00:07:58,720 --> 00:08:07,199
times. So if you want to go from monthly

184
00:08:03,280 --> 00:08:11,360
or yearly releases to continuous

185
00:08:07,199 --> 00:08:15,759
delivery to continuous daily, weekly,

186
00:08:11,360 --> 00:08:17,199
hourly releases into into

187
00:08:15,759 --> 00:08:20,160
an environment where at least some

188
00:08:17,199 --> 00:08:23,199
subset of your users are. You need to

189
00:08:20,160 --> 00:08:24,639
automate. You need to use uh build

190
00:08:23,199 --> 00:08:26,639
automation. You need to use test

191
00:08:24,639 --> 00:08:29,039
automation. You need to integrate it all

192
00:08:26,639 --> 00:08:31,199
together. Deployment automation. Get

193
00:08:29,039 --> 00:08:34,640
your stuff deployed in an automated

194
00:08:31,199 --> 00:08:37,279
fashion. Otherwise, your business is at

195
00:08:34,640 --> 00:08:37,279
risk.


