{
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-04-30T09:50:36",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like incremental change and continuous improvement, which are relevant to Kanban, it does not explicitly mention Kanban principles or practices, nor does it focus on visualisation of work or flow management. The discussion lacks depth in relation to Kanban, making it only tangentially related.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-30T09:50:39",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it briefly mentions a gradual approach to change, which could align with Agile principles, it does not explicitly discuss Scrum roles, events, or artifacts, nor does it focus on team dynamics or continuous improvement in the context of Scrum. Therefore, the alignment with the Scrum category is minimal.",
    "level": "Ignored"
  },
  "Product Development": {
    "resourceId": "utAzlIGxj7O",
    "category": "Product Development",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 62.1,
    "ai_mentions": 1.7,
    "ai_alignment": 6.6,
    "ai_depth": 6.2,
    "ai_intent": 5.9,
    "ai_audience": 7.5,
    "ai_signal": 7.2,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1,
    "ai_penalty_details": "Penalty (-1.0) applied to 'mentions' as 'Product Development' is not referenced explicitly and only implied through discussion of engineering/modernization practices; no obsolete advice but indirect relevant framing.",
    "final_score": 62.0,
    "reasoning": "The content thoroughly argues for refactoring business logic out of SQL stored procedures in favor of more modern, testable, and maintainable code — referencing practices like continuous delivery, refactoring, CI/CD, and modern engineering discipline. This aligns conceptually with product development methodologies emphasizing iterative improvement and risk mitigation. However, the category 'Product Development' is never named directly; references are to software development and engineering practices, so Direct Mentions is low. Depth is moderately strong given the practical refactoring strategy and rationale against stored procedures, but the focus remains primarily on codebase quality and maintainability — not on product lifecycle or customer-centric delivery. The intent is constructive, though more about best coding/engineering practices than product development explicitly. The intended audience appears to be engineers and tech leads, closely matching, but the content does not address cross-functional, product manager, or business stakeholder perspectives typical in the product development category. The signal-to-noise ratio is high: arguments, strategies, and steps are on-topic, though firmly rooted in software engineering rather than classic product development themes. No significant outdated content is present, but the relative lack of explicit product development category grounding, and the primary focus on technical/code quality practices, results in a modest penalty and a confidence score solidly in the low 60s.",
    "level": "Secondary"
  },
  "Technical Leadership": {
    "resourceId": "utAzlIGxj7O",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-08T08:55:03",
    "ai_confidence": 61.2,
    "ai_mentions": 1.0,
    "ai_alignment": 7.3,
    "ai_depth": 6.9,
    "ai_intent": 6.2,
    "ai_audience": 6.9,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "Direct mentions of 'technical leadership' are absent; the language references engineering teams and modern software practices but does not name, discuss, or explicitly advise technical leaders directly. Conceptual alignment is moderate: the piece advocates for modernizing legacy code practices, supports maintainability, and suggests gradual, team-wide improvements—these relate to technical leadership principles (e.g., fostering continuous improvement, technical debt management), but leadership as a discipline is not the focus. The depth is somewhat above surface, addressing specific technical reasons and strategies. However, it centers on an engineering practice (refactoring business logic out of stored procedures) rather than team guidance, facilitation, or servant leadership. The intent is to inform and persuade engineers to improve code quality, with indirect application for technical leaders but not as a leadership treatise. The likely audience is senior engineers, architects, and possibly tech leads, but not squarely positioned at technical leadership per se. The signal is quite high—almost all content is focused and technical, though not all is relevant to leadership. No penalties applied: the content is current, not satirical or critical of core technical leadership ideas. Confidence is in the low 60s: it overlaps some technical leadership outcomes but lacks direct, deep, or guiding discussion for technical leaders.",
    "level": "Secondary"
  },
  "Product Management": {
    "resourceId": "utAzlIGxj7O",
    "category": "Product Management",
    "calculated_at": "2025-05-08T08:55:03",
    "ai_confidence": 27.5,
    "ai_mentions": 0.4,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.3,
    "ai_audience": 6.2,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "Direct mentions of Product Management are entirely absent—the content never references the category, frameworks, or typical product strategy roles/topics. Conceptual alignment is weak; the article focuses squarely on software engineering practices (specifically, the removal of business logic from stored procedures), rather than on aligning customer needs, business objectives, or technical feasibility as a product manager might. There is some minor overlap regarding strategies to reduce technical debt and enable maintainability, which could be of indirect interest to product managers, but these are presented almost strictly from an engineering/process/DevOps perspective. The depth of discussion is solid but is aimed at code quality refactoring, not strategic product decision-making. The intent is prescriptive and supportive of engineering teams, not of product managers or their frameworks; it implicitly aims for improved engineering outcomes rather than deliberate product outcomes. The audience alignment is moderate—while some product managers may find the arguments relevant (particularly those with a technical background), the primary target is software engineers and architects. The signal-to-noise ratio is strong: the article stays laser-focused on its engineering argument, but that focus is almost entirely orthogonal to product management. No explicit penalties were necessary as the content is current and non-contradictory. The final confidence reflects the lack of explicit or conceptual presence of core Product Management themes.",
    "level": "Ignored"
  },
  "Lean": {
    "resourceId": "utAzlIGxj7O",
    "category": "Lean",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 16.98,
    "ai_mentions": 0.1,
    "ai_alignment": 2.7,
    "ai_depth": 2.1,
    "ai_intent": 2.2,
    "ai_audience": 5.7,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content solely discusses the drawbacks of putting business logic in SQL stored procedures and advocates for refactoring towards more maintainable, testable application code. There is no direct mention of Lean, Lean principles, or any Lean methodologies or tools such as Kaizen, waste reduction, value stream mapping, 5S, or Kanban. While there is a tangential focus on process improvement and reducing technical debt, these are general engineering best practices and not specifically Lean-aligned. The depth and intent scores are low because the central narrative is about software engineering discipline and maintainability, not Lean thinking. The audience is moderately aligned since some Lean practitioners may care about efficient engineering practices, but the primary target is software engineers and architects, not Lean practitioners. The signal-to-noise ratio is also low for Lean because the discussion never contextualizes its guidance within Lean, nor does it reference the Lean framework or related examples. No penalties were applied since the content is current and does not present satire, criticism, or outdated methods.",
    "level": "Ignored"
  },
  "DevOps": {
    "resourceId": "utAzlIGxj7O",
    "category": "DevOps",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 43.74,
    "ai_mentions": 1.2,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 4.8,
    "ai_audience": 5.3,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content directly mentions 'DevOps' only once as a reference to an Azure DevOps team as an example of a gradual, incremental approach. The main focus of the article is on discouraging placing business logic in stored procedures, with a strong emphasis on best practices such as unit testing, CI/CD, maintainability, and modern engineering discipline. Several of these themes (refactoring, automation, pipelines, feedback loops, and continuous delivery) are adjacent to core DevOps principles, but the central argument is not explicitly about DevOps philosophy, practices, or culture. The article's depth is moderate regarding the rationales against stored procedures and in favor of code-based logic but only indirectly ties these to DevOps concepts like collaboration, feedback loops, and continuous improvement. The intent is more about raising engineering practice standards rather than delivering a discussion on DevOps itself, though there is conceptual overlap. The audience (engineers, developers, team leads) partially aligns with those interested in DevOps, but content is not explicitly targeting DevOps practitioners. The signal-to-noise ratio is lowered by the substantial focus on stored procedure drawbacks rather than DevOps implementation, with only passing references to continuous delivery and pipelines. No penalties were applied since the content is current and does not contradict the DevOps framing, nor is it satirical or critical of the philosophy. The final confidence score reflects the modest and primarily tangential relationship to DevOps — the content is supportive of DevOps values in a secondary manner, but not about DevOps as a philosophy or practice primarily.",
    "level": "Tertiary"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-04-30T09:50:45",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the refactoring of stored procedures. While it touches on the importance of modern engineering discipline, it does not explicitly discuss leadership roles, strategies, or frameworks that align with Agile or DevOps principles. The mention of teams and the need for a commitment to discipline is too vague to be considered a substantial discussion on leadership.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "utAzlIGxj7O",
    "category": "Engineering Excellence",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 91.18,
    "ai_mentions": 7.7,
    "ai_alignment": 9.4,
    "ai_depth": 9.2,
    "ai_intent": 9.0,
    "ai_audience": 8.2,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 91.0,
    "reasoning": "Direct mentions are strong—the text references 'engineering practices,' 'engineering excellence,' 'modern engineering discipline,' and themes of software craftsmanship explicitly. Conceptual alignment is extremely high as the piece argues for refactoring legacy patterns to enable CI/CD, testability, and maintainability—the core tenets of engineering excellence as defined. Depth is robust: the author explores why business logic in stored procedures violates engineering excellence through analysis, real-world examples, and practical strategy (gradual refactoring, CI/CD, technical debt reduction). The purpose is squarely focused on advocating for better software development practices, showing clear intent fit. While the technical level occasionally references executive decisions ('you don’t need permission'), the primary audience is clearly engineers and technical practitioners. Almost every section is rich with actionable, relevant content; tangential parts (e.g., referencing Azure DevOps) are used only for reinforcing the main point, so the signal-to-noise ratio is very good. The content is not outdated, satirical, or critical of the engineering excellence concept—no penalties apply. The overall confidence is proportional: it is very high because every element (from explicit calls to 'engineering excellence' to detailed best practices) is present, but slightly less than perfect because the direct audience alignment could be sharpened, and signal has minor generalizations.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the category, as it directly addresses engineering excellence by discussing best practices, refactoring, and modern software development principles. The focus is on actionable strategies for engineers, with clear examples and practical advice. While there are minor generalisations and occasional references to broader audiences, the core message and depth make it highly relevant and valuable for technical practitioners."
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-30T09:51:04",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not discuss Hybrid Agile methodologies, nor does it critically examine the integration of traditional and agile practices. The mention of incremental change aligns loosely with agile principles, but there is no direct reference to Hybrid Agile concepts or challenges.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "utAzlIGxj7O",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 27.4,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 9.2,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content is strongly focused on refactoring business logic out of SQL stored procedures for greater testability, maintainability, and modern software engineering discipline. While these principles (e.g., reducing technical debt, incremental modernization) can indirectly align with Lean Product Development—such as minimising waste and improving feedback loops—there is no direct or explicit mention of Lean, Lean thinking, waste elimination, or Lean Product Development frameworks or tools. The main theme is migrating to cleaner engineering practices, not specifically applying Lean in product development. The alignment and depth scores are moderately low, reflecting only peripheral connections to Lean's core concerns. The audience (engineers and software practitioners) could overlap with Lean Product Development's audience, and the content maintains a reasonable signal-to-noise ratio, hence higher scores on those fronts. There are no penalties as the content is current and not satirical or contradictory, but overall confidence remains low due to the lack of direct conceptual focus on Lean Product Development.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "utAzlIGxj7O",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 49.178,
    "ai_mentions": 2.7,
    "ai_alignment": 5.8,
    "ai_depth": 5.2,
    "ai_intent": 5.7,
    "ai_audience": 6.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content centers on the argument against keeping business logic in stored procedures, emphasizing the importance of refactoring to achieve more testable, maintainable, and modern code. There are several indirect alignments with Continuous Delivery principles, such as advocating for incremental improvements, enabling faster feedback loops, improving automation readiness, and referencing continuous delivery as an aspirational outcome. It briefly mentions CI/CD and references 'continuous delivery' in passing among its benefits, but there are no sustained or explicit discussions of Continuous Delivery practices, tools, cultural aspects, or in-depth case studies. The intent is mostly about clean code, testability, and maintainability, which are relevant but only partly overlap with the specific focus of the Continuous Delivery category. The audience appears to be practitioners and engineers who care about modern practices, but the core message is more about code quality and architecture than a deep-dive into Continuous Delivery. There is low but present direct mention, moderate conceptual alignment, and some overlap in purpose, but the discussion is not deeply rooted in, nor is it primarily addressed to, the Continuous Delivery topic or its audience. No penalties were applied as the content is current and does not contradict the framing.",
    "level": "Tertiary"
  },
  "Lean Thinking": {
    "resourceId": "utAzlIGxj7O",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 33.672,
    "ai_mentions": 0.2,
    "ai_alignment": 3.2,
    "ai_depth": 2.9,
    "ai_intent": 3.3,
    "ai_audience": 6.1,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on best practices related to application architecture—specifically, advocating for moving business logic out of SQL stored procedures and into application code for better testability, maintainability, and CI/CD compatibility. While some of these goals (reduction of waste, improved flow, incremental improvement) do indirectly overlap with Lean Thinking principles, the piece makes no direct reference to Lean Thinking and does not employ its terminology, frameworks, or tools. There is minor indirect conceptual alignment where it discusses progressive, incremental improvements (similar to Kaizen), continuous delivery, and reduction of technical debt, but Lean principles, wastes (Muda), value stream mapping, or Lean tools are not meaningfully discussed. Depth of discussion on Lean concepts is limited, as the article remains tightly scoped within software engineering best practices. Audience targeting (engineers, DevOps, modernizers) does overlap somewhat with Lean-responsive audiences, and the content signal-to-noise ratio is strong within its chosen focus, but this focus is not Lean-specific. No penalties were applied as the tone does not contradict Lean, and the content is modern and constructive. The overall low confidence reflects the near absence of Lean domain references or substantial Lean lens.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "utAzlIGxj7O",
    "category": "Product Backlog",
    "calculated_at": "2025-05-08T08:55:03",
    "ai_confidence": 9.0,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.0,
    "ai_intent": 0.1,
    "ai_audience": 1.0,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses exclusively on the drawbacks of implementing business logic in stored procedures, advocating for moving business logic into application code for maintainability and testability. There are no direct or indirect mentions of the Product Backlog, nor are there discussions or themes aligned with backlog management, agile practices, prioritization techniques, backlog refinement, or roles such as Product Owner. No connection is made between these architecture choices and the process of feature triage, backlog item definition, or stakeholder value delivery through backlog management. The content targets engineering practitioners (potentially the same audience who works with product backlogs), but the focus remains entirely on software architecture and refactoring, not on Agile backlog discussions. For these reasons, all scoring dimensions are very low, and the confidence that this content fits under 'Product Backlog' is extremely minimal.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "resourceId": "utAzlIGxj7O",
    "category": "Automated Testing",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 71.63,
    "ai_mentions": 6.4,
    "ai_alignment": 8.9,
    "ai_depth": 7.8,
    "ai_intent": 7.5,
    "ai_audience": 7.7,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content directly discusses the inadequacies of storing business logic in SQL stored procedures, repeatedly highlighting their incompatibility with modern testing methodologies—particularly the inability to perform unit testing, lack of fast feedback, and challenges to CI/CD integration. There are explicit, if indirect, references to automated testing throughout (e.g., testability, unit tests, feedback loops, CI/CD, and modern engineering discipline). The alignment is strong: the call to refactor logic out of stored procedures is framed as a means of enabling testable, maintainable, and automatable code, which is central to automated testing philosophies. However, automated testing is more an underpinning rationale for the argument rather than the core subject. There are few mentions of specific tools or automated testing frameworks, and no in-depth, prescriptive guidance for automated testing itself; the deepest dives are into why stored procedures hinder testing, rather than direct methodologies or best practices for automation. The content is clearly intended for technical readers (primarily software engineers and engineering leaders aligned with modern development practices). While the signal-to-noise ratio remains high, a portion of the content is persuasive narrative about architecture choices, not detailed automated testing discussions, accounting for fractional deduction in that dimension. Overall, the content is closely aligned with principles behind Automated Testing, but it serves an architectural/engineering best practices agenda rather than providing direct expertise, practices, or tooling specifics for automated testing.",
    "level": "Secondary",
    "reasoning_summary": "This content strongly relates to automated testing by emphasising how storing business logic in SQL procedures impedes testability, rapid feedback, and CI/CD adoption. While it advocates for practices that enable automation, its main focus is on architectural choices rather than offering direct guidance or tools for automated testing itself. Thus, it aligns with automated testing principles, but isn’t a hands-on resource for automation."
  },
  "Sprint Review": {
    "resourceId": "utAzlIGxj7O",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T13:53:50",
    "ai_confidence": 0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.2,
    "ai_depth": 0.1,
    "ai_intent": 0.0,
    "ai_audience": 0.5,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content does not mention Sprint Review or any Scrum event. Its focus is on software engineering practices, specifically the drawbacks of writing business logic in stored procedures and strategies for refactoring. There are no references to Scrum, Sprint Reviews, stakeholder feedback, or any related process. The audience is technical, but the topic is entirely unrelated to Sprint Review. No penalties were necessary as the content is not outdated or satirical.",
    "reasoning_summary": "This content is entirely unrelated to Sprint Review, focusing instead on software engineering practices around stored procedures. There are no direct or indirect connections to the category, resulting in a confidence score of zero.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "utAzlIGxj7O",
    "category": "Working Software",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 36.95,
    "ai_mentions": 1.6,
    "ai_alignment": 3.2,
    "ai_depth": 3.1,
    "ai_intent": 2.7,
    "ai_audience": 5.5,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses on advocating for the removal of business logic from SQL stored procedures in favor of writing application code that is testable, maintainable, and more suitable for modern engineering practices. While these practices are related to creating higher quality, more maintainable software, the article never directly references 'Working Software' as a tangible artifact or increment produced in frameworks like Scrum or Agile. It critiques stored procedures for lacking qualities such as testability, CI/CD readiness, and maintainability, all of which are important in producing working software, but the article mainly aims to guide engineering discipline and code quality, not to define, measure, or discuss Working Software as an Agile deliverable or increment.\n\nMentions (1.6): There are no explicit references to 'Working Software', though some concepts align loosely (discussion of maintainable, testable software, and code).\nAlignment (3.2): The alignment is moderate at best, as the content advocates for strategies that indirectly would help produce working, high-quality software increments, but its main angle is a best-practices argument rather than a discussion of the artifact itself.\nDepth (3.1): While the article goes in-depth discussing technical arguments against stored procedures and tips for refactoring, it does not explore Working Software as an Agile concept, nor discuss artifacts, increments, or value delivery within a framework.\nIntent (2.7): The purpose is to encourage engineers to migrate business logic out of stored procedures; it is not directly focused on Working Software as an artifact or deliverable, but rather on coding habits.\nAudience (5.5): The article targets engineers and technical practitioners, overlapping with the typical audience for Working Software discussions but not exclusively so.\nSignal (2.9): The content is focused, but it is not focused on the Working Software category except peripherally through its call for maintainable software practices.\nNo penalty deductions were warranted, as the content is not outdated and the tone is not contradictory or negative regarding the Working Software concept.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-04-30T09:51:30",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than portfolio management. It does not mention any aspects of strategic alignment, prioritisation, or value optimisation related to managing a portfolio of projects. The discussion is more about technical implementation and refactoring strategies, which are not relevant to the category of Portfolio Management.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "resourceId": "utAzlIGxj7O",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 78.49,
    "ai_mentions": 4.2,
    "ai_alignment": 8.6,
    "ai_depth": 8.3,
    "ai_intent": 8.0,
    "ai_audience": 7.8,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "Direct mentions of 'Continuous Improvement' are minimal—the term itself never appears, nor its synonyms directly, which keeps the 'mentions' score low. However, conceptually, the core advocacy centers on ongoing, incremental refactoring of legacy systems: urging not a wholesale rewrite but steady, stepwise improvement as part of daily engineering practice. The Azure DevOps example explicitly references a multi-year, empirical improvement journey. The discussion of modernizing codebases, reducing technical debt by refactoring as you go, and integrating these practices into regular delivery cycles closely aligns with continuous improvement principles. Arguments are based on lessons learned, testability, and data-driven outcomes, which boosts conceptual alignment and depth. However, the main thrust is advocating for clean architecture, maintainability, and testability, with many supporting arguments focused on why stored procedures are problematic—not all of which directly address continuous improvement per se. The audience (developers, engineering leaders) matches well with those managing technical practices, and the content is tightly focused on advocacy for sustained process change, minimizing off-topic noise. The absence of explicit continuous improvement language keeps the confidence from being higher, but the alignment of purpose and actionable incrementalism justifies a solid score.",
    "level": "Secondary",
    "reasoning_summary": "While the content doesn’t use the term 'Continuous Improvement' directly, it strongly supports the concept by promoting ongoing, incremental enhancements to legacy systems. The focus on regular refactoring, reducing technical debt, and integrating improvements into daily workflows aligns well with continuous improvement principles, making the content a good fit for this category despite the lack of explicit terminology."
  },
  "Test Automation": {
    "resourceId": "utAzlIGxj7O",
    "category": "Test Automation",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 44.5,
    "ai_mentions": 1.2,
    "ai_alignment": 5.2,
    "ai_depth": 5.8,
    "ai_intent": 6.1,
    "ai_audience": 5.0,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content focuses on advising developers to refactor business logic out of SQL stored procedures into application code to achieve testability, maintainability, and improved engineering practices. While it repeatedly highlights the challenges stored procedures pose to unit testing, CI/CD, and version control—all relevant to test automation—the primary focus is not on test automation techniques, tools, or frameworks per se. Test automation is referenced conceptually (e.g., testability, 'no mocking, no fast feedback, no isolation', 'if it can’t be unit tested, it can’t be trusted'). The benefits section mentions enabling faster feedback loops and moving toward continuous delivery. However, it stops short of a sustained or in-depth discussion of test automation strategies, best practices, tools, or implementation. The main intent is about maintainable code and engineering discipline with testability as one justification rather than a main topic. The target audience (developers/engineers) overlaps with test automation’s practitioners, but the article is broader in software craftsmanship rather than dedicated TA practitioners. The content is well-focused, but only part of its argument is about test automation as narrowly defined—the majority is about general maintainability. Therefore, scores are moderate and confidence is low-medium: strongly related but not core category material.",
    "level": "Tertiary"
  },
  "Complexity Thinking": {
    "resourceId": "utAzlIGxj7O",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 13.55,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.1,
    "ai_intent": 2.4,
    "ai_audience": 3.2,
    "ai_signal": 2.75,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "There are no explicit references to Complexity Thinking, its frameworks (e.g., Cynefin), or any language referencing non-linear dynamics, emergence, or complex adaptive systems. The content is a tightly focused critique and practical guide regarding code maintainability, specifically moving business logic out of SQL stored procedures for better software engineering outcomes—emphasizing testability, maintainability, CI/CD, and modern practices. While there is a peripheral acknowledgement of 'complexity' in legacy systems or 'fragile procedural past', these are metaphorical rather than rooted in the theories or principles of complexity science. There is no discussion of system emergence, unpredictability, or adaptive management. The intent is directly practical and engineering-focused, not strategic or complexity-oriented. The target audience is engineers and developers, with limited overlap with the Complexity Thinking audience (which is more likely to involve strategists, leaders, or systems thinkers). The signal/noise is moderate, staying on the topic of modern engineering disciplines, but again has almost no anchor to Complexity Thinking. Given the lack of direct or even indirect alignment with the category, the confidence score is consequently very low and proportionate to the evidence.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "resourceId": "utAzlIGxj7O",
    "category": "Continuous Integration",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 41.98,
    "ai_mentions": 2.4,
    "ai_alignment": 5.2,
    "ai_depth": 4.8,
    "ai_intent": 4.3,
    "ai_audience": 4.6,
    "ai_signal": 5.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "Direct mentions of Continuous Integration are minimal; the only explicit reference is in a subsection ('They don’t participate in CI/CD'), noting that stored procedures typically cannot be properly integrated into CI/CD pipelines. The content’s primary focus is advocating for moving business logic out of stored procedures, arguing from software engineering best practices like testability, maintainability, and modern development discipline. Only tangential alignment exists with Continuous Integration through points about testability, automation, and refactoring for pipeline compatibility, and one passing mention of CI/CD. There is no sustained or in-depth exploration of CI principles, practices, tools, or implementation. The intent is to drive best practices generally, not to inform specifically about CI or guide on CI implementation. The audience is broadly technical—engineers and developers concerned with code quality—which fits the CI audience but is not tailored to those specifically seeking CI knowledge or practical guidance. The signal-to-noise ratio is fair: most points are relevant to modern software engineering but only occasionally tie back to CI-specific concepts. No penalties were applied, as the advice is current, not satirical or critical of the foundational framing, and does not reference outdated practices. The confidence score reflects minimal direct mention, generally weak conceptual overlap, and an absence of deep CI-related discussion.",
    "level": "Tertiary"
  },
  "System Configuration": {
    "resourceId": "utAzlIGxj7O",
    "category": "System Configuration",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 28.276,
    "ai_mentions": 0.5,
    "ai_alignment": 3.0,
    "ai_depth": 3.2,
    "ai_intent": 2.6,
    "ai_audience": 6.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.5,
    "ai_penalty_details": "Mentions penalized by 0.5 for lack of explicit reference to system configuration; Alignment and Depth penalized by 0.5 each for some conceptual overlap but primarily focused on software architecture, not system setup; no other penalties.",
    "final_score": 28.0,
    "reasoning": "The content focuses on discouraging the use of stored procedures for business logic and advocating for refactoring logic into application code. While there is some tangential overlap with ongoing system maintainability and development discipline, the primary orientation is around software engineering best practices and code architecture, not system configuration methodologies, automation, tooling, or integration. There is little to no direct mention of 'system configuration', nor does the piece explicitly discuss tools, automation of setups, or managing system integration/configuration. The audience is aligned in that technical practitioners are addressed, but the main thrust (testability, maintainability, code architecture) is not central to system configuration as defined in the classification. Discussion of deployment automation, CI/CD, and version control slightly touches system configuration themes, but only in critique of stored procedures, not as main focal points. Thus, the confidence that this content fits the 'System Configuration' category is appropriately low.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "utAzlIGxj7O",
    "category": "Self Organisation",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 18.89,
    "ai_mentions": 0.5,
    "ai_alignment": 2.2,
    "ai_depth": 1.8,
    "ai_intent": 2.5,
    "ai_audience": 6.0,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses entirely on the technical and engineering drawbacks of implementing business logic in SQL stored procedures, advocating for maintainability, testability, and modern software engineering practices. There are no direct mentions or even indirect references to self-organisation, team autonomy, empowerment, or collaborative approaches characteristic of the 'Self Organisation' category. While there is a suggestion that developers can take incremental actions without broader project approval (\"You don’t need permission to start this\"), this is a minor thematic overlap and not explored as a self-organisation principle; the intent is mainly technical guidance, not team process or structure. The depth is specific to code structure and technical debt, not to agile empowerment. The audience may overlap (engineering practitioners who might be interested in self-organising approaches), but the content is not addressing team autonomy, collaboration, or self-management. Signal-to-noise is moderate as nearly all discussion is off-topic for the category except for minor allusions to initiative-taking. Therefore, the confidence in this content fitting the 'Self Organisation' category is very low.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-04-30T09:51:54",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic in software development. It does not discuss collaboration tools or their impact on Agile teams, nor does it provide any insights into team communication or coordination. While it touches on engineering practices, it does not align with the core themes of collaboration tools, resulting in a very low confidence score.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "utAzlIGxj7O",
    "category": "Decision Theory",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 9.05,
    "ai_mentions": 0.15,
    "ai_alignment": 1.15,
    "ai_depth": 1.45,
    "ai_intent": 0.85,
    "ai_audience": 1.05,
    "ai_signal": 0.95,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content does not mention 'Decision Theory' directly, nor any of its core topics, such as heuristics, probability, behavioural economics, cognitive psychology, or frameworks for decision-making under uncertainty. The main focus is on advocating engineering practices: moving business logic out of stored procedures for maintainability, testability, CI/CD, and agility. There are faint traces of decision-making guidance in advocating incremental (not big bang) change and risk-mitigating modernization, but these do not rise to the conceptual threshold of decision theory as defined. There are no decision models, heuristics, probability discussions, or exploration of decisions under uncertainty; the discussion is strictly software architecture and best practice. The intent and audience are engineers, not decision theorists, and the signal-to-noise ratio is high, but only for the topic of software engineering, not decision theory. There are no outdated or satirical tones, so no penalties applied. The very low scores across all dimensions reflect the almost complete lack of relevance to decision theory as defined.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "utAzlIGxj7O",
    "category": "Competence",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 60.76,
    "ai_mentions": 2.2,
    "ai_alignment": 6.9,
    "ai_depth": 6.7,
    "ai_intent": 5.9,
    "ai_audience": 8.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "There are only brief implicit nods to 'engineering practices', 'modern engineering discipline', and continuous learning, but 'competence' itself is never explicitly named or central. The article's intent is to advocate for better code structure and maintainability by discouraging business logic in stored procedures, which indirectly ties to competence (continuous improvement, professionalism, higher standards), but does not make competence its theme. The depth is moderate: it lists engineering benefits (testability, maintainability, reducing technical debt), but mostly in service of the 'don't use stored procedures for business logic' argument, rather than exploring competence as a concept. The conceptual alignment is partial: while the examples show ways to improve quality and assure professionalism, the perspective is pragmatic/code-centric more than competence-centric. Signal is strong, but the content's main purpose is architectural advocacy, not cultivation or inspection of competence itself. The intended audience—software engineers and technical practitioners—does align well with those likely to care about competence, and there is minimal off-topic material. No penalties were needed: the material is up-to-date, serious, and not critical of competence as a value. The confidence score reflects this: while there is meaningful relevance, competence is tangential rather than central, so confidence remains moderate and not high.",
    "level": "Secondary"
  },
  "Scaling": {
    "resourceId": "utAzlIGxj7O",
    "category": "Scaling",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 19.91,
    "ai_mentions": 1.1,
    "ai_alignment": 2.5,
    "ai_depth": 2.7,
    "ai_intent": 2.0,
    "ai_audience": 4.4,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content is primarily focused on software engineering best practices, specifically arguing against writing business logic in stored procedures and encouraging incremental refactoring to move business logic into application code. There is one minimal reference to scalability: 'Stored procedures run on the most expensive, least scalable part of your infrastructure: the database server. Business logic belongs in services that can scale out.' However, this is a superficial mention and does not discuss the key scaling topics—such as frameworks for scaling Agile, cross-team strategies, enterprise flow, alignment, or scaling methodologies. The rest of the content is almost entirely devoted to testability, maintainability, deployment practices, and general software craft, not to scaling as defined by the classification. The main intent is not to teach or discuss scaling across teams or organisations but to advocate for better engineering discipline at the code and team level. The minor reference to scalability does not address scaling frameworks, team coordination, or enterprise alignment. The audience is software engineers and possibly DevOps practitioners, which has partial overlap with scaling audiences (often leaders or managers orchestrating multi-team structures), but this article does not target those scenarios. There is little signal on scaling; the noise vastly outweighs category relevance.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-04-30T09:52:08",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the importance of modern engineering practices and incremental change, it does not explicitly discuss coaching, mentoring, or the facilitation of growth and development within teams. The themes of collaboration and support are not present, leading to a low confidence score in the Coaching category.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "resourceId": "utAzlIGxj7O",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 15.485,
    "ai_mentions": 0.5,
    "ai_alignment": 2.5,
    "ai_depth": 1.8,
    "ai_intent": 2.0,
    "ai_audience": 4.1,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content is a strong argument against putting business logic in stored procedures, focusing on maintainability, testability, CI/CD integration, and modern code practices. There are broad, implicit connections to Agile principles like maintainability, continuous improvement, and iterative refactoring (e.g., paying down technical debt incrementally, improving feedback loops). However, the Agile Manifesto, values, or principles are never directly mentioned, and the framing is primarily about code quality and engineering best practices, not explicitly Agile philosophy. There are passing references to concepts Agile practices support (e.g., small incremental change, improving delivery), but without directly connecting them to Agile values. The depth is insufficient regarding Agile principles, as the thoroughness is about the technical rationale for moving logic out of SQL, not exploring Agile thinking or values. The intent and signal are mostly technical and focused on software engineering, which can include Agile practitioners but is not specifically targeted at people interested in Agile values and principles. No penalties are needed as the content is not outdated or satirical.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "resourceId": "utAzlIGxj7O",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 28.01,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 1.9,
    "ai_audience": 8.0,
    "ai_signal": 9.5,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1,
    "ai_penalty_details": "Alignment penalized by 0.8 for being tangential to flow efficiency; content does not reference or build on modern flow efficiency, and focuses on code maintainability instead.",
    "final_score": 28.0,
    "reasoning": "The content focuses on advocating against writing business logic in stored procedures and promoting practices such as refactoring, testability, maintainability, and alignment with modern engineering discipline. There is no direct or explicit mention of 'Flow Efficiency' or its core principles, metrics, or methodologies; neither the term nor related concepts like throughput, value stream, bottleneck elimination, or optimizing WIP appear in any meaningful way. While some improvement outcomes (e.g., 'faster feedback loops,' 'continuous delivery') are mentioned, they are not framed in the context of flow efficiency or value stream optimization but rather as consequences of improved code quality. The main intent is about code design and maintainability, not about optimizing throughput or managing value streams. The discussion is deep and detailed within its domain (code maintainability, testability), but peripheral to flow efficiency. The audience is broadly relevant (software practitioners), and the content is focused, but the topical misalignment leads to a low overall confidence score for classification under Flow Efficiency.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "resourceId": "utAzlIGxj7O",
    "category": "Operational Practices",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 79.4,
    "ai_mentions": 4.6,
    "ai_alignment": 8.3,
    "ai_depth": 7.8,
    "ai_intent": 7.2,
    "ai_audience": 6.8,
    "ai_signal": 7.4,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.0,
    "ai_penalty_details": "mentions (-0.4): The category 'Operational Practices' is not named directly and only referenced by implication; intent (-0.5): The tone mixes best practices with negative critique and is partially polemical; audience (-0.1): The guidance is general for practitioners but could be more narrowly targeted toward operational leads/practitioners.",
    "final_score": 79.0,
    "reasoning": "The content provides actionable guidance in refactoring operational workflows—specifically, moving business logic out of stored procedures, which aligns strongly with process improvement, CI/CD adoption, and technical debt reduction, all of which fit the core of 'Operational Practices.' Several points (testability, automation, continuous delivery, maintainability) map directly to operational optimization. Concrete recommendations ('refactor when touching', 'thin wrapper', 'pay as you go strategy') and explicit description of benefits (testability, observability, reducing runtime cost) show conceptual depth, not just theoretical argument. However, the category is never directly named; references to Agile, Lean, or DevOps are only lightly implied, not explicit. The narrative assumes a practitioner audience but could more overtly target those responsible for operational processes, and some polemic/critical tones slightly dilute intent, as the content positions itself partly against legacy practices rather than neutrally focused on operational betterment. There are minor deductive penalties for lack of direct category mention and partial mixing of intent. Overall, the content is focused, evidence-based, and largely congruent with practical operational improvement, justifying a high (but not maximal) confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content clearly fits the 'Operational Practices' category, as it offers practical advice on improving workflows, reducing technical debt, and enhancing testability and automation. While it doesn’t explicitly name the category or related frameworks, its actionable recommendations and focus on process optimisation make it highly relevant for professionals aiming to refine operational processes. Minor tone and targeting issues slightly reduce confidence, but overall alignment is strong."
  },
  "Deployment Frequency": {
    "resourceId": "utAzlIGxj7O",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 38.432,
    "ai_mentions": 0.2,
    "ai_alignment": 4.3,
    "ai_depth": 3.6,
    "ai_intent": 4.0,
    "ai_audience": 6.1,
    "ai_signal": 5.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content predominantly argues against the use of SQL stored procedures for business logic and advocates refactoring toward modern engineering practices that enable testability, maintainability, and CI/CD. While the content does mention related DevOps concepts (such as CI/CD, feedback loops, technical debt, and continuous delivery), it never directly references 'Deployment Frequency' or its optimisation. The discussion around deployment is peripheral—stored procedures are criticized partly for being a poor fit for automated pipelines, but actual strategies or metrics for improving deployment intervals are not covered. There's a minor conceptual alignment on themes (e.g., faster feedback loops, enabling continuous delivery), but not on direct optimization of deployment intervals themselves. Depth stays somewhat surface-level in relation to deployment frequency, as the detailed arguments all reinforce the primary theme: refactoring out of stored procedures for better engineering practices, not specifically to improve deployment cadence. The intent is tangential rather than purposefully aligned, and the audience (technical engineers, developers) is a partial fit but the content's main value isn't to people specifically focused on deployment frequency. There is a moderately strong signal-to-noise ratio because the article is focused, but not on the prompt's target category. No penalties apply as content is current and does not directly contradict the frame. The confidence score is low-moderate, reflecting that while there are some overlaps in modern practices and feedback loops, the core topic of deployment frequency is not substantively addressed.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "utAzlIGxj7O",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 23.545,
    "ai_mentions": 0.2,
    "ai_alignment": 2.4,
    "ai_depth": 2.8,
    "ai_intent": 2.5,
    "ai_audience": 8.1,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "Direct mentions: There is no explicit reference to 'Site Reliability Engineering' or SRE, nor to its key terminology (SLOs, SLIs, incident response, etc.), so the mentions score is very low. Conceptual alignment: While the content discusses topics like maintainability, testability, and CI/CD, its focus is squarely on where to locate business logic (application code vs stored procedures), which marginally overlaps with SRE principles about reliability but is mostly general software engineering. Depth of discussion: The text goes into substantial detail about business logic placement and technical debt related to stored procedures, but it does not address SRE core concepts such as reliability engineering, monitoring, automation for reliability, or production failure management. Intent: The purpose is to provide guidance on moving business logic out of stored procedures for modern, testable code, not to enhance production reliability, SRE-style scalability, or operator/developer collaboration. Audience alignment: The target audience (engineering teams, especially backend developers and architects) partially overlaps with SRE practitioners, so this score is relatively high. Signal-to-noise: Most of the content is focused and relevant if the category was software engineering best practices, with little extraneous material, but is off-topic for SRE. No penalties are applied, as the content is not outdated or satirical. Overall, the content does not fit comfortably in the Site Reliability Engineering category. Its slight connection is in tangential mentions of production bugs, CI/CD, and maintainability, but it neither discusses nor deeply supports Site Reliability Engineering specifically.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "utAzlIGxj7O",
    "category": "Social Technologies",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 28.04,
    "ai_mentions": 0.15,
    "ai_alignment": 3.5,
    "ai_depth": 3.65,
    "ai_intent": 2.85,
    "ai_audience": 7.1,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content directly addresses the technical and strategic reasons for migrating business logic out of SQL stored procedures and into more maintainable code, emphasizing benefits like testability, maintainability, CI/CD participation, and scalability. However, it does not explicitly reference or discuss frameworks, methodologies, or principles that define Social Technologies (e.g., self-organisation, collective intelligence, transparency, or emergent problem-solving). While some concepts like continuous improvement and technical excellence are implied, the main focus is software engineering discipline and best practices rather than collaborative frameworks or team dynamics foundational to Social Technologies. The intent is more about advocating for technical modernization and developer workflow improvement than about societal or organizational transformation as specified in the category. The audience is strongly technical (developers/engineers), which partially overlaps with the Social Technologies audience, and the signal is decent but not centered on the category’s purpose. There are no obsolete references or contradictory tones, so no penalties were applied. Overall, conceptual alignment and depth are modest due to indirect ties to Social Technologies, resulting in a low overall confidence.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-04-30T09:52:30",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention forecasting, Agile, or Scrum methodologies, nor does it explore any techniques or practices related to predicting delivery timelines or managing risks. The focus is on software engineering practices rather than forecasting within Agile frameworks.",
    "level": "Ignored"
  },
  "Transparency": {
    "resourceId": "utAzlIGxj7O",
    "category": "Transparency",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 9.98,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.9,
    "ai_intent": 0.5,
    "ai_audience": 2.3,
    "ai_signal": 1.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses almost exclusively on advocating for moving business logic out of stored procedures, emphasizing testability, maintainability, CI/CD, and modern engineering discipline. There are no direct mentions of 'transparency' in Agile contexts, nor are transparency-related concepts a central or even substantial subtheme. The closest alignment exists in mentions of improved observability and traceability after refactoring, but these are secondary to the core message and are not discussed as pillars of openness, communication, or visibility typical to the Transparency category. The primary intent is to persuade readers to adopt engineering best practices focused on software quality, not to promote transparency as an Agile value. The audience is technical (developers/engineers), which may overlap with those interested in transparency, but the messaging does not target Agile practitioners or stakeholders concerned with transparency practices. Most of the discussion is tightly focused on code maintainability, testability, and architecture, providing very little explicit or implied content aligned with the Transparency classification.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-04-30T09:52:36",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the importance of refactoring and modern engineering practices, it does not discuss mentoring, coaching, or the development of skills and behaviours necessary for effective practice in Agile or related methodologies. The lack of direct mentions and minimal conceptual alignment with the mentoring category results in a very low confidence score.",
    "level": "Ignored"
  },
  "GitHub": {
    "resourceId": "utAzlIGxj7O",
    "category": "GitHub",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 14.51,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.4,
    "ai_intent": 1.1,
    "ai_audience": 5.0,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content strongly advocates against writing business logic in SQL stored procedures, urging readers to refactor such logic into maintainable, testable application code. It refers to general engineering practices and CI/CD, and mentions Azure DevOps as an example of incremental refactoring. However, there is no explicit mention of GitHub or any of its features, tools, or workflows. There are allusions to practices like version control, continuous delivery, and pipelines, but these are referenced in generic terms, not linked to GitHub specifically. As such, the direct mention score is extremely low (only the word 'GitOps' appears as part of an argument for refactoring, but not in the context of GitHub). Conceptual and depth scores are very low since the focus is on software architecture, refactoring, and procedural code, not GitHub itself. The intent is somewhat technical, targeting engineers who might overlap with GitHub users, partly reflected in audience alignment, but the content never addresses GitHub tools or best practices. The signal-to-noise ratio is poor for the GitHub category, as virtually all discussion is off-topic for that classification. No penalties were applied since there are no obsolete practices or negative/contradictory tone regarding GitHub. Overall, the confidence in the content fitting under the GitHub category is extremely low.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "utAzlIGxj7O",
    "category": "Beta Codex",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 16.17,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 3.8,
    "ai_audience": 3.6,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content does not mention 'Beta Codex' or any associated language, concepts, or principles directly. It focuses on code quality, maintainability, and modern engineering practices—specifically advocating that business logic be kept out of SQL stored procedures in favor of testable code. While this can be loosely associated with adaptive, modern approaches to engineering, the core themes and purposes are around software craftsmanship, not decentralised organisational design or human-centric frameworks. There is no discussion of organisational models, decentralisation of power or decision-making, leadership, or comparisons between Beta Codex and traditional models. The intended audience appears to be engineers and technical practitioners rather than strategists or change agents interested in organisational theory. The content is focused and on-topic for its area (engineering excellence), so the signal-to-noise ratio is relatively strong—however, none of the substance is about Beta Codex. Thus, the final confidence is very low, and no penalties were applied, as there is no outdatedness or negative contradiction present.",
    "level": "Ignored"
  },
  "Product Validation": {
    "resourceId": "utAzlIGxj7O",
    "category": "Product Validation",
    "calculated_at": "2025-05-08T08:55:04",
    "ai_confidence": 29.15,
    "ai_mentions": 0.3,
    "ai_alignment": 2.2,
    "ai_depth": 2.55,
    "ai_intent": 3.6,
    "ai_audience": 8.45,
    "ai_signal": 6.15,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1,
    "ai_penalty_details": "alignment (-0.5, limited overlap with product validation specifically); intent (-0.5, as the purpose is code maintainability, not validating product ideas with users)",
    "final_score": 29.0,
    "reasoning": "The content is a persuasive argument against embedding business logic in stored procedures, advocating for refactoring to application code for improved testability and maintainability. While it encourages engineering best practices such as unit testing and CI/CD, it does not directly or explicitly reference product validation processes, nor does it discuss methodologies for testing product ideas with users, market fit assessment, or customer feedback loops. The focus is on code quality, engineering discipline, and technical debt reduction, which are tangential to product validation. There are minor overlaps through mentions of testing and feedback loops, but these refer to engineering practices for code, not for gathering user input about product value or fit. The audience (software engineers) partly overlaps, but the content lacks direct alignment or depth regarding the goals and themes that define Product Validation. Consequently, penalties were applied to the alignment and intent dimensions for insufficient specificity and intent misalignment.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "utAzlIGxj7O",
    "category": "Throughput",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 2.4,
    "ai_mentions": 0.3,
    "ai_alignment": 0.7,
    "ai_depth": 0.9,
    "ai_intent": 0.4,
    "ai_audience": 0.2,
    "ai_signal": 0.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content focuses on advocating for moving business logic out of SQL stored procedures and into application code. Nowhere does it mention throughput as a delivery metric, nor does it discuss measurement, trends, forecasting, or visualization of throughput in delivery systems. At best, some loosely implied benefits—such as improved maintainability, enabling faster feedback loops, and reducing technical debt—could theoretically correlate with delivery improvement, but the article never frames those in the language of throughput, nor does it cite metrics or practices directly aligned with throughput measurement or empirical forecasting. The target audience appears to be practitioners focused on code structure and maintainability, not flow-based delivery or performance analysis. Very little of the content could be considered even tangentially relevant to the throughput category as defined, resulting in low scores across all dimensions. No penalties were necessary as there is no outdated or contradictory tone; the low score purely reflects lack of fit with the 'Throughput' category.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-04-30T09:52:53",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not discuss asynchronous development principles, tools, or practices, nor does it address team collaboration across time zones. The mention of incremental change could loosely relate to asynchronous workflows, but this is not the primary focus of the content.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-04-30T09:52:56",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not mention or discuss any of the Scrum Values such as commitment, courage, focus, openness, or respect. While there is a brief mention of team dynamics in the context of engineering practices, it lacks a direct connection to the principles of Scrum, resulting in a very low confidence score for alignment with the category.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "resourceId": "utAzlIGxj7O",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 77.72,
    "ai_mentions": 2.6,
    "ai_alignment": 8.8,
    "ai_depth": 7.9,
    "ai_intent": 8.0,
    "ai_audience": 8.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "Direct Mentions (2.6): The phrase 'Pragmatic Thinking' is never explicitly mentioned. Terms like Agile, Scrum, or DevOps receive indirect reference (e.g., Azure DevOps, CI/CD, and continuous delivery practices), but there are no explicit category call-outs, resulting in a low score. Conceptual Alignment (8.8): The content strongly aligns with pragmatic thinking, focusing on actionable approaches for improving code maintainability and testability, supporting CI/CD, and refactoring as part of a modernization strategy—key elements of practical, real-world problem-solving within complex engineering environments. Depth of Discussion (7.9): The discussion goes well beyond surface-level advice by explaining practical motivations for moving away from stored procedures, providing reasoning grounded in real-world engineering pain points, and outlining a stepwise strategy to reduce technical debt. However, while the case for change is robust, there aren’t detailed Agile/Scrum transformation case studies or multiple layered techniques explored. Intent (8.0): The main intent is to inform and persuade technical teams to adopt modern, pragmatic, and maintainable engineering practices. The content is not theoretical or critical of pragmatic thinking, instead providing actionable advice to drive better outcomes. Audience Alignment (8.1): The content is targeted at experienced developers, engineers, and teams maintaining legacy codebases in operational settings—closely matching the DevOps/Agile practitioner audience for this category, though not framing the discussion exclusively through those lenses. Signal-to-Noise Ratio (7.6): Most of the content is highly focused on relevant, practical advice. Some narrative repetition and broad motivational statements slightly detract from its tightness but do not introduce substantial off-topic material. No penalties were required, as the content is modern, positive in tone, and accurate in technical framing. Overall, the confidence score is high as the content meaningfully embodies pragmatic thinking, especially around continuous improvement and real-world, incremental problem-solving in engineering contexts, but lacks direct category mention and some depth that would warrant a perfect score.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category well due to its strong focus on practical, actionable strategies for improving code maintainability and supporting modern engineering practices. While it doesn’t explicitly mention “Pragmatic Thinking” or related methodologies, its real-world advice and clear intent to guide technical teams align closely with the category’s aims, making it highly relevant for experienced practitioners."
  },
  "Technical Mastery": {
    "resourceId": "utAzlIGxj7O",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 94.4,
    "ai_mentions": 8.1,
    "ai_alignment": 9.8,
    "ai_depth": 9.7,
    "ai_intent": 9.3,
    "ai_audience": 9.1,
    "ai_signal": 9.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 94.0,
    "reasoning": "The content provides a thorough, practical critique of using stored procedures for business logic, tightly aligning with the principles of Technical Mastery. It explicitly discusses refactoring, maintainability, testability, and modern engineering practices—core elements of software craftsmanship. The main ideas cover technical debt reduction, CI/CD, separation of concerns, and best practices in software design, all key criteria for this category. Direct mentions of 'engineering excellence,' 'technical debt,' 'continuous delivery,' and other supporting terminology are frequent, if not of the exact phrase 'Technical Mastery.' The argumentation is detailed and concrete, providing multiple examples, action steps, and justifications, going far beyond a superficial treatment of the topic. Intent is firmly on technical improvement for practitioners, not management, business, or non-technical audiences. The signal-to-noise ratio is very high, with minimal tangential content or filler, and no satire or outdated advice. There are no penalties since the viewpoint is modern, constructive, and advocacy-based without sarcasm or contradiction. The audience (engineers and technical leads) matches perfectly with the intended focus of the category. The confidence score is high, as nearly every scoring dimension is close to maximum, with slight variance to avoid identical scores.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Technical Mastery category. It offers in-depth, actionable insights on software engineering best practices, focusing on maintainability, refactoring, and modern development workflows. The discussion is highly relevant for technical professionals, with clear examples and practical advice, making it valuable for those aiming to enhance their engineering skills."
  },
  "Team Motivation": {
    "resourceId": "utAzlIGxj7O",
    "category": "Team Motivation",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 9.3,
    "ai_mentions": 0.2,
    "ai_alignment": 0.9,
    "ai_depth": 0.5,
    "ai_intent": 1.1,
    "ai_audience": 2.1,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The article is an advocacy piece urging software engineers to cease implementing business logic in SQL stored procedures and instead refactor such logic into maintainable, testable code. It is technical in nature and intended for practitioners seeking to modernize legacy systems for software quality and maintainability. There is no explicit mention or even allusion to team motivation, nor does it discuss engagement, team dynamics, psychology, trust, or agile frameworks. The focus is on technical practices, technical debt reduction, code quality, and engineering discipline, with anecdotal examples supporting the technical argument. No linkage is made to motivational factors, team engagement, or psychological/sociological dynamics within agile teams. The only faint overlap lies in high-level themes like discipline and sustainable practices, which could indirectly benefit teams, but this is neither discussed nor foregrounded. Audience alignment is weak: it's for engineers, but not those seeking motivation guidance. Content is single-mindedly technical and off-topic for team motivation. No penalties are assigned, as the tone and advice are not outdated or satirical. Scoring is low in all categories: mentions (barely referenced, if at all), alignment (main ideas are technical, not motivational), depth (zero exploration of motivation), intent (not relevant), audience (tangential at best), and signal (on-topic for engineering, not motivation). The overall confidence score is extremely low and proportionate to the utter lack of fit to the 'Team Motivation' category.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "utAzlIGxj7O",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 18.425,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.2,
    "ai_intent": 2.2,
    "ai_audience": 5.3,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content predominantly focuses on the technical refactoring of business logic from SQL stored procedures into application code. There are no direct or explicit mentions or references to Agile Leadership, nor is there any clear discussion on leadership roles, Agile transformation, empowerment, or team culture. Its intent is to advocate for best engineering practices, continuous refactoring, and modernisation for maintainability and testability. While the article addresses process improvements and references change over time, these are framed solely from a technical engineering perspective, not through the lens of leadership or Agile adoption at the organisational or team level. The audience is likely engineers or technical leads, not specifically Agile leaders. The content is highly focused (moderate signal) but does not align with the scope or depth required for Agile Leadership. No penalties for outdated content or negative tone are warranted.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-04-30T09:53:14",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention backlog refinement, Agile practices, or Scrum methodologies, which are essential for this category. While there are elements of iterative improvement and engineering discipline, they do not directly relate to backlog refinement or its key topics.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "resourceId": "utAzlIGxj7O",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 18.46,
    "ai_mentions": 0.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 5.2,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "This content is focused primarily on best engineering practices related to database layer responsibilities, code testability, maintainability, and modernizing legacy code. It does not directly address team collaboration, group dynamics, communication strategies, team ownership, or any of the core Agile/Scrum/DevOps team-centric topics defined for this category. There are a few light, indirect allusions to 'real teams' and their lessons, but these serve mainly as anecdotal setup for the individual technical recommendations. The content's main intent is to guide technical refactoring behavior, not to enhance team collaboration nor explore related dynamics. The target audience (software engineers/architects) partially overlaps with those potentially engaged in team collaboration, but the advice is not framed around teams working together—it is an individual, code-ownership focused article. Consequently, scores for Direct Mentions, Conceptual Alignment, Depth, and Intent are all low, Audience is above average due to possible overlap, and Signal-to-Noise is modest, as content is focused (albeit off-topic for this category). No penalties were needed as the content isn't outdated or antagonistic; final score properly reflects marginal relevance, with no risk of over-classification.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-04-30T09:53:22",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it discusses the importance of refactoring and maintaining code quality, it does not address psychological safety or its relevance to team dynamics, communication, or innovation. The mention of team experiences is minimal and does not connect to the core themes of psychological safety, leading to a very low confidence score.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "utAzlIGxj7O",
    "category": "Value Stream Management",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 13.12,
    "ai_mentions": 0.12,
    "ai_alignment": 1.8,
    "ai_depth": 2.2,
    "ai_intent": 1.1,
    "ai_audience": 2.4,
    "ai_signal": 1.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content titled 'Stop Writing Business Logic in Stored Procedures' focuses on advocating for better software engineering practices by moving business logic out of SQL stored procedures and into application code. It discusses refactoring strategies to improve testability, maintainability, CI/CD integration, and code quality. At no point does it directly or indirectly reference Value Stream Management or its core principles—such as optimizing the flow of value, value stream mapping, eliminating organizational waste at the process/system level, aligning work with customer value, or integrating with Agile/Lean principles at the value stream layer. The discussion is deeply technical, aimed at software engineers and architects, and focused specifically on code practices rather than value stream optimization. There are no mentions, either direct or conceptual, of Value Stream Management, nor are its key topics (waste elimination, flow, customer value alignment) applied in an organizational or strategic context. While the post discusses gains in efficiency and reduction of 'technical debt,' these are discussed strictly within the scope of code maintenance, not as part of a value stream analysis or transformation effort. Therefore, low scores have been assigned for all dimensions, with small fractions to reflect that some audience alignment and surface-level conceptual proximity (via technical debt and refactoring) exist, but the signal is very weak. The confidence score (13.12) thus accurately reflects a very low confidence that this content fits under Value Stream Management.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "utAzlIGxj7O",
    "category": "Test First Development",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 57.87,
    "ai_mentions": 2.2,
    "ai_alignment": 6.6,
    "ai_depth": 5.5,
    "ai_intent": 6.2,
    "ai_audience": 8.0,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content strongly advocates for refactoring business logic from SQL stored procedures into application code, prioritizing testability and maintainability. There are clear references to testability, unit tests, fast feedback loops, CI/CD, and maintainable code, which are in close conceptual proximity to Test First Development principles. However, there is no direct mention or in-depth discussion of Test First practices themselves (e.g., TFD, TDD, ATDD, or defining success criteria upfront). The main thrust is on engineering discipline and the disadvantages of stored procedures, rather than an exploration of Test First methodology. The recommendation to improve testability indirectly aligns with Test First, but the purpose focuses on generic engineering best practices and modernization, not driving home the concept of writing tests or criteria before code. Audience targeting aligns with technical practitioners who would be interested in Test First Development. The content is focused, with relevant examples and actionable advice to incrementally refactor toward testable code (raising signal). There are no penalties for outdatedness or tone. The confidence reflects moderate conceptual alignment and indirect but non-explicit support for Test First, hence a middling score.",
    "level": "Tertiary"
  },
  "Continuous Learning": {
    "resourceId": "utAzlIGxj7O",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 43.24,
    "ai_mentions": 1.7,
    "ai_alignment": 3.6,
    "ai_depth": 3.9,
    "ai_intent": 2.7,
    "ai_audience": 6.1,
    "ai_signal": 6.4,
    "ai_penalties_applied": true,
    "ai_penalty_points": 2,
    "ai_penalty_details": "Mentions: Deducted 0.3 points for no direct reference to continuous learning or growth mindset; Alignment: Deducted 0.4 points for only indirect connection to category definition; Depth: Deducted 0.6 points as the depth focuses on refactoring, not learning principles.",
    "final_score": 43.0,
    "reasoning": "The content is an opinionated article arguing against writing business logic in stored procedures, focusing on the benefits of refactoring code for maintainability, testability, and modern development practices. While it touches on ideas such as incremental change, progressive improvement, enabling faster feedback loops, and reducing technical debt—all of which can be tangentially related to the spirit of continuous improvement—there is no direct mention or substantial discussion of continuous learning, growth mindset, or team learning practices. The references to Agile or DevOps are implicit (e.g., mention of Azure DevOps and CI/CD), but the focus remains procedural and technical, not on learning culture, knowledge sharing, or team adaptability. Audience alignment is reasonably strong (targeting engineers and teams similar to those interested in Continuous Learning), and the content is mostly on-topic for engineering practices, but the overall intent and depth fall short of what the category requires. Penalties were applied for lack of direct mention, limited alignment, and surface-level conceptual overlap. Overall, the confidence score reflects that although the content supports modern engineering values and incremental improvement, it does not substantively address Continuous Learning as defined here.",
    "level": "Tertiary"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-04-30T09:53:36",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. It does not discuss customer satisfaction, customer experience, or any related metrics or strategies. While it touches on improving engineering practices, it lacks any direct connection to customer needs or satisfaction, making it largely irrelevant to the specified category.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "utAzlIGxj7O",
    "category": "Project Management",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 34.789,
    "ai_mentions": 0.2,
    "ai_alignment": 4.3,
    "ai_depth": 4.85,
    "ai_intent": 3.8,
    "ai_audience": 7.15,
    "ai_signal": 6.7,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.3,
    "ai_penalty_details": "Depth (-0.6): The discussion references industry practices that are increasingly dated, highlighting stored procedures as a legacy concern. This focus weakens contemporary project management relevance. Intent (-0.3): The intent is improvement of engineering/development practices, only indirectly relevant to project management goals. Alignment (-0.4): Heavy bias toward software architecture/engineering excellence rather than core project management functions.",
    "final_score": 35.0,
    "reasoning": "The content directly addresses engineering practices around business logic and stored procedures, focusing on advocating code refactoring and modern software development disciplines. There is minimal explicit mention of project management concepts, roles, methodologies, or tools; the closest thematic parallel is the reference to incremental change management (\"pay-as-you-go modernisation strategy\") and technical debt reduction, which are tangentially relevant to project management. Most discussion is aimed at developers and architects—not project managers or PMOs. The article deeply explores reasons for moving logic out of SQL into application code, with concrete steps and benefits articulated, but these are from quality/engineering rather than PM perspectives. References to delivery discipline, risk reduction, and stakeholder value are lightly touched but not explored with PM depth. Deductions were applied for the content's narrow focus on engineering refactoring (lessening PM alignment), indirect intent for the category, and some attention to legacy rather than current best practices. Overall, confidence is low to moderate that this piece fits the 'Project Management' category, based mainly on overlap with process improvement and continuous delivery themes.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "utAzlIGxj7O",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 24.65,
    "ai_mentions": 0.7,
    "ai_alignment": 2.5,
    "ai_depth": 3.2,
    "ai_intent": 2.9,
    "ai_audience": 6.0,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content strongly advocates for refactoring business logic out of stored procedures and into application code for greater testability, maintainability, and engineering discipline. However, it does not directly address or mention 'innovation', nor does it discuss organizational capacity for innovation, innovation metrics, learning cycles, or established theories of innovation in Agile, DevOps, or Lean contexts. The primary focus is on improving engineering practices and reducing technical debt, not on mechanisms or strategies that foster or measure innovation. Only indirectly, it touches on the idea of enabling change or improvement (e.g., faster feedback, maintainability), which could be seen as preconditions for innovation, but these are not explored in the context of innovation capacity or Evidence-Based Management. The audience is aligned with technical teams and practitioners, and the signal-to-noise ratio is relatively high, but the core category of 'Ability to Innovate' is at best tangential to the main purpose of the piece. No penalties are applied as the content is current and does not undermine the category.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "utAzlIGxj7O",
    "category": "Lean Principles",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 47.47,
    "ai_mentions": 0.4,
    "ai_alignment": 5.7,
    "ai_depth": 5.4,
    "ai_intent": 4.2,
    "ai_audience": 9.2,
    "ai_signal": 7.3,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.5,
    "ai_penalty_details": "Mentions (-1): No direct reference to Lean, Lean Principles, or Lean terminology. Alignment (-0.5): Refactoring and iterative improvement share some Lean themes but are not explicitly framed as Lean. All other dimensions unpenalized.",
    "final_score": 47.0,
    "reasoning": "This content strongly advocates for refactoring away from business logic in stored procedures for more maintainable, testable, and modern code practices. The focus on incremental change, continuous refactoring, and reducing technical debt faintly echoes Lean themes: continuous improvement, waste reduction (by removing inefficient practices), and iterative development. However, at no point does the author reference 'Lean', its formal principles, or its terminology, and the overall framing is squarely on software engineering best practices—not Lean as a discipline. There is depth in advocating incremental, pay-as-you-go modernization and examples of how to make these changes, but these are not explicitly tied to Lean concepts like value stream mapping, waste elimination, or flow/pull systems. The intended audience (software engineers, architects, and practitioners concerned with modern engineering discipline) aligns with those who might practice Lean, but this is incidental rather than deliberate. The signal-to-noise ratio is good, with focus tightly on the main anti-pattern and solution, but without explicit Lean philosophy or tools. Penalties were applied for lack of any direct mention/terminology and partial alignment. The final confidence is thus moderate; there is conceptual overlap, but too little evidence to confidently place this in the Lean Principles category.",
    "level": "Tertiary"
  },
  "Frequent Releases": {
    "resourceId": "utAzlIGxj7O",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 43.757,
    "ai_mentions": 2.7,
    "ai_alignment": 5.0,
    "ai_depth": 6.1,
    "ai_intent": 5.5,
    "ai_audience": 7.2,
    "ai_signal": 5.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "Direct mentions of 'Frequent Releases' or explicit discussion of release cadence are minimal; the only relevant phrase is 'Move toward continuous delivery' in a single bullet point, giving this dimension a low score of 2.7. Conceptually, the content is about refactoring business logic out of stored procedures for better maintainability and testability, which is tangentially related to being able to automate releases via CI/CD, but this is more an enabler than the central theme, hence a 5.0 for alignment. The depth of discussion around actual release practices, incremental delivery, automation, or feedback loops for frequent release is shallow—the bulk of the content discusses maintainability, not release process—hence a moderate 6.1. Intent is more about advocating for code maintainability and engineering discipline, not specifically about frequent or incremental software releases, so a middling 5.5. The audience is relatively well aligned (engineers, DevOps-focused practitioners), so this is the strongest dimension at 7.2. Signal-to-noise is moderate; much of the piece is focused on legacy code practices rather than frequent release mechanics, so 5.4. No penalty points are applied as the content is current and tone is not satirical or critical of the category. Overall, the confidence reflects some foundational but not primary or thorough relevance to 'Frequent Releases'—it is more enabler-focused than category-centered.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "resourceId": "utAzlIGxj7O",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 47.453,
    "ai_mentions": 1.3,
    "ai_alignment": 5.5,
    "ai_depth": 5.85,
    "ai_intent": 4.35,
    "ai_audience": 7.55,
    "ai_signal": 6.25,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content primarily focuses on advocating against the use of stored procedures for business logic, recommending a shift toward application code for better maintainability, testability, and engineering practices. Direct, explicit mentions of metrics, feedback loops, analysis techniques, or evidence-based management are minimal; the text only indirectly references concepts such as testability, maintainability, and faster feedback as benefits. There are allusions to continuous delivery and feedback loops, but not in a way that systematically discusses their measurement or learning cycles. The conceptual alignment is present but not central—metrics and learning are side benefits in a modernization narrative, not the main topic. The depth of discussion is moderate regarding engineering excellence, but shallow with respect to actual metrics and learning frameworks or data-driven improvement. The audience fits reasonably well (technical practitioners, DevOps-minded engineers), and the signal-to-noise ratio is high, as most content is focused on modernizing practices. The overall confidence is moderate because the principles of testability and continuous improvement overlap with 'Metrics and Learning,' but the main thrust of the article lies outside the target category.",
    "level": "Tertiary"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-04-30T09:53:58",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not discuss working agreements, team norms, or collaboration principles, which are essential for the 'Working Agreements' category. While it touches on team dynamics indirectly by mentioning real teams and their experiences, it lacks a structured approach to teamwork or collaboration, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-04-30T09:54:00",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses technical practices related to software development and the use of SQL stored procedures. It does not directly address any psychological principles, theories, or discussions relevant to organisational psychology. While it touches on team dynamics and engineering practices, these are not explored from a psychological perspective, leading to a very low confidence score in alignment with the category.",
    "level": "Ignored"
  },
  "Team Performance": {
    "resourceId": "utAzlIGxj7O",
    "category": "Team Performance",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 51.471,
    "ai_mentions": 2.324,
    "ai_alignment": 6.179,
    "ai_depth": 6.347,
    "ai_intent": 5.927,
    "ai_audience": 7.011,
    "ai_signal": 5.658,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 51.0,
    "reasoning": "The content is primarily focused on coding practices, specifically discouraging the use of SQL stored procedures for business logic in favor of application code for maintenance, testing, and scalability. While it references experiences from 'real teams' and mentions systemic benefits such as improved delivery pipelines, CI/CD, and modern engineering discipline, it never directly references 'team performance' as defined in the classification. There is some indirect alignment in that the recommended practices can enable teams to be more efficient, reduce technical debt, and support sustainable delivery, but the article is not about evaluating, measuring, or systematically improving performance at the team level. No delivery metrics are discussed, team-level system behaviors are not systematically explored, and topics like throughput, WIP limits, or dynamics affecting delivery are only tangentially implied (e.g., through reduced bugs, improved feedback, and enabling CI/CD). The audience is technical, likely overlapping with the target category. The overall signal is moderate: the focus is specific (refactoring away from stored procedures), but is not holistically about team delivery capability. No penalties were applied, as the tone and recommendations are modern and consistent with current practices. Confidence remains moderate since there are genuine, if indirect, links to improved team outcomes, but the central topic is not team performance itself.",
    "level": "Tertiary"
  },
  "Application Lifecycle Management": {
    "resourceId": "utAzlIGxj7O",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-08T08:55:05",
    "ai_confidence": 60.5,
    "ai_mentions": 1.4,
    "ai_alignment": 6.5,
    "ai_depth": 6.9,
    "ai_intent": 5.8,
    "ai_audience": 5.2,
    "ai_signal": 5.5,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.5,
    "ai_penalty_details": "Penalized 'intent' (-0.7) and 'audience' (-0.8). Reason: The content references some outdated practices and focuses more on code maintainability and software engineering discipline than on explicit ALM frameworks or governance. While the advocacy for refactoring aligns loosely with ALM goals, the discussion is framed more as general engineering best practices, so the core ALM audience and purpose are only partially served.",
    "final_score": 60.0,
    "reasoning": "The content is a strong opinion piece advocating for moving business logic out of stored procedures and into application code. While this improves testability, maintainability, and aligns with some ALM outcomes (like maintainability and reducing technical debt), there are no direct mentions of 'Application Lifecycle Management' or specific ALM frameworks, tools, or governance practices. The core focus is on modern engineering discipline, continuous delivery, and software craftsmanship, not explicitly on managing the entire application lifecycle in a governed or metrics-driven way. As such, the alignment and depth scores reflect conceptual overlaps with ALM (refactoring, maintainability, incremental modernization), but the lack of overt lifecycle, governance, or process discussion keeps all scores in the moderate range. The audience is largely engineers and developers rather than ALM managers or strategists, and the purpose centers on code-level improvement. Penalties were applied due to some reference to outdated practices (legacy stored procedures) and insufficient targeting of the ALM stakeholder or intent. Thus, the overall confidence reflects moderate but not strong relevance to Application Lifecycle Management.",
    "level": "Tertiary"
  },
  "Agnostic Agile": {
    "resourceId": "utAzlIGxj7O",
    "category": "Agnostic Agile",
    "calculated_at": "2025-08-07T06:10:12",
    "ai_confidence": 13.2,
    "ai_mentions": 0.0,
    "ai_alignment": 1.7,
    "ai_depth": 2.3,
    "ai_intent": 2.2,
    "ai_audience": 3.3,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is entirely focused on engineering practices (why not to use stored procedures for business logic) and strategies for refactoring code. While it occasionally refers to modernisation, discipline, technical debt, and CI/CD, it does not mention Agnostic Agile, its principles, comparisons to frameworks, or value-/context-driven agility. The content's main purpose and themes are technical and engineering-focused, not about context-sensitive agility or ethical/principled practice in agile methods. There's no critical thinking about frameworks or methodologies, only practices around business logic location.",
    "reasoning_summary": "The content gives technical reasons to move business logic out of stored procedures, not discussing Agnostic Agile values, principles, or context-driven agility, and is weakly aligned with the category. Fit is minimal and indirect.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-04-30T09:54:13",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not discuss cross-functional teams, their structure, benefits, or any related Agile methodologies, which are central to the category. The mention of teams is very indirect and does not align with the core themes of cross-functional collaboration.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-04-30T09:54:16",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in SQL, focusing on software engineering practices rather than any aspects of the Windows operating system. There are no direct mentions of Windows, and the discussion does not align with the key topics outlined for the Windows category, such as installation, configuration, or troubleshooting of the Windows OS.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "utAzlIGxj7O",
    "category": "Increment",
    "calculated_at": "2025-05-08T08:55:03",
    "ai_confidence": 12.5,
    "ai_mentions": 0.2,
    "ai_alignment": 2.2,
    "ai_depth": 1.1,
    "ai_intent": 1.6,
    "ai_audience": 4.3,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content does not directly mention 'Increment' or discuss the delivery of working software increments. Its main theme is advocating against writing business logic in SQL stored procedures and promoting application code refactoring for maintainability and testability. There are minor, indirect references to iterative improvement and incremental modernization (e.g., 'move incrementally'), but these are not connected to the Scrum/Agile concept of 'Increment' as defined. The depth and alignment to the Increment category are weak, as the focus is on modern engineering practices and technical debt rather than on Scrum Increments, their value, or their relationship with Scrum artifacts. The target audience (developers, engineering teams) partially overlaps with those interested in Increment discussions, but signals are low due to the tangential nature of topic coverage. No penalties for outdatedness or oppositional tone are needed.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-30T09:54:22",
    "ai_confidence": 65.0,
    "ai_mentions": 100.0,
    "ai_alignment": 70.0,
    "ai_depth": 60.0,
    "non_ai_confidence": 20,
    "final_score": 65.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It briefly mentions the Azure DevOps team as an example of gradual improvement in engineering practices, which aligns with the category. However, the primary focus is on coding practices rather than Azure DevOps functionalities or methodologies, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-04-30T09:54:25",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on the importance of testing and maintainability, it does not explicitly mention hypothesis formulation, experimentation, or data-driven decision-making, which are central to hypothesis-driven development. The focus is more on engineering practices rather than on the iterative, experimental approach that characterises hypothesis-driven development.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-04-30T09:54:28",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, without any direct mention or discussion of customer feedback loops. While it touches on improving engineering practices and mentions benefits like faster feedback loops, it does not explore mechanisms for integrating customer feedback into product development or how such feedback influences decision-making. Therefore, it lacks the necessary focus and depth to align with the category of Customer Feedback Loops.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-30T09:54:32",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which aligns with the concept of agency in terms of taking intentional actions to improve software practices. However, it does not explicitly mention agency or adaptive actions within Agile frameworks, nor does it delve deeply into the implications of agency in team dynamics or organisational evolution. The focus is more on technical practices rather than the broader implications of agentic agility.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-04-30T09:54:34",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it discusses the importance of refactoring and maintaining code quality, it does not address Lean Startup principles such as MVP, the Build-Measure-Learn feedback loop, or validated learning. The discussion lacks direct relevance to Lean Startup methodologies, making it only tangentially related to the category.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-30T09:54:37",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts related to software development efficiency, it does not explicitly mention Cycle Time or its measurement, nor does it delve into the implications of Cycle Time on workflow efficiency. The focus is on architectural decisions rather than the specific metric of Cycle Time.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-30T09:54:40",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the technical aspects of software engineering practices, specifically the drawbacks of using stored procedures for business logic. It does not mention the Product Owner role or its accountability within Scrum, nor does it address topics related to backlog prioritisation, stakeholder communication, or product value maximisation. The focus is on engineering discipline rather than the strategic decision-making responsibilities of a Product Owner.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-04-30T09:54:42",
    "ai_confidence": 0,
    "ai_mentions": 0,
    "ai_alignment": 0,
    "ai_depth": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content focuses entirely on the drawbacks of using stored procedures for business logic and does not mention the Daily Scrum or any related Scrum practices. It lacks any discussion on team alignment, communication, or Scrum events, which are essential for the Daily Scrum category.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-04-30T09:54:45",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on refactoring and modern engineering practices. It does not mention Value Stream Mapping or its principles, nor does it align with the core themes of VSM, such as visualising workflows or optimising value delivery. The discussion is more related to software engineering and project management rather than Lean methodologies or VSM.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift Left Strategy",
    "calculated_at": "2025-04-30T09:54:48",
    "ai_confidence": 75.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 35,
    "non_ai_confidence": 0,
    "final_score": 75.0,
    "reasoning": "The content discusses the importance of refactoring business logic out of stored procedures into testable code, which aligns with the Shift-Left Strategy by emphasising early integration of testing and maintainability in the development process. It highlights the benefits of improved testing, faster feedback loops, and reduced technical debt, which are core themes of the Shift-Left approach. However, while it touches on these principles, the primary focus is on the drawbacks of stored procedures rather than a comprehensive exploration of Shift-Left practices, leading to a slightly lower confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is relevant to the category because it explores how moving business logic from stored procedures to testable code supports early testing and maintainability—key aspects of the Shift-Left Strategy. While it mainly critiques stored procedures, it still connects to Shift-Left principles by highlighting benefits like improved testing and faster feedback, though it doesn’t cover the full breadth of the approach."
  },
  "Liberating Structures": {
    "category": "Liberating Structures",
    "calculated_at": "2025-04-30T09:54:50",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than facilitation techniques or team interactions. There are no direct mentions of Liberating Structures or their application in collaborative settings, and the discussion does not align with the core themes of engagement, participation, or facilitation methods outlined in the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-30T09:54:53",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention Open Space Agile or its principles, nor does it discuss topics related to organisational agility, collective participation, or psychological safety. The discussion is centred around technical practices rather than the collaborative change processes that define Open Space Agile.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-04-30T09:54:55",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to more maintainable code, which aligns with the principles of business agility by promoting adaptability and efficiency in software development. However, the primary focus is on technical practices rather than broader organisational strategies or leadership roles in fostering business agility. While it touches on the need for incremental change and the benefits of modern engineering practices, it lacks a comprehensive exploration of business agility as a concept, resulting in a moderate confidence score.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-04-30T09:54:58",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it briefly touches on concepts like incremental change and continuous improvement, it does not explicitly discuss Agile principles or the Agile mindset. The discussion lacks depth in relation to Agile philosophy, making it a secondary mention rather than a primary focus.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-04-30T09:55:01",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the practice of refactoring business logic out of SQL stored procedures, discussing the technical implications and benefits of this approach. While it touches on modern engineering practices, it does not explicitly analyse trends within Agile, DevOps, or business agility frameworks. The discussion lacks direct references to emerging trends or strategic decision-making, which are central to the Trend Analysis category.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-04-30T09:55:04",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like incremental change and continuous improvement, it does not explicitly discuss empirical process control principles such as transparency, inspection, or adaptation in an Agile context. The discussion lacks direct references to Agile methodologies or empirical process control frameworks, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-04-30T09:55:08",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on software engineering practices, specifically the refactoring of business logic from SQL stored procedures to application code. While it touches on themes of change management and incremental improvement, it does not explicitly discuss systems thinking or organisational dynamics. The discussion lacks depth in relation to organisational behaviour or the interplay of organisational elements, which are central to the category of Organisational Physics.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-04-30T09:55:11",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on concepts like incremental change and improving maintainability, it does not explicitly discuss Systems Thinking principles such as interconnectedness, feedback loops, or holistic analysis. The discussion is more aligned with software engineering practices rather than the broader organisational dynamics and methodologies associated with Systems Thinking.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-30T09:55:15",
    "ai_confidence": 55.0,
    "ai_mentions": 2,
    "ai_alignment": 60.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 30,
    "final_score": 55.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of version control, such as the challenges of version-controlling stored procedures, the primary focus is on architectural decisions rather than modern source control practices. The mention of CI/CD and the need for testable code aligns with the category, but the overall depth and primary focus on refactoring strategies reduce the confidence score.",
    "level": "Tertiary"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-30T09:55:19",
    "ai_confidence": 45.0,
    "ai_mentions": 2,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 45.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and highlights the importance of CI/CD practices, which indirectly relates to Azure Pipelines. However, it does not focus specifically on Azure Pipelines or provide detailed insights into its configuration, management, or practices. The mentions of CI/CD and tooling suggest some relevance, but the primary focus is on stored procedures rather than Azure Pipelines specifically.",
    "level": "Tertiary"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-04-30T09:55:22",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not discuss market share, competitive strategies, or any related topics that would align with the category of Market Share. The mention of improving engineering practices may indirectly relate to business efficiency, but it lacks any direct connection to market presence or competitive advantage.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-30T09:55:25",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on themes of modernisation and improving engineering practices, it does not explicitly discuss the concept of treating the organisation as a product or integrating customer feedback into organisational design. The discussion lacks depth in relation to CaaP principles and does not provide insights into organisational culture or cross-functional collaboration.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "Minimum Viable Product",
    "calculated_at": "2025-04-30T09:55:27",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts of incremental change and improving engineering practices, it does not directly address Minimum Viable Products, their definition, or their role in product development. The focus is more on technical debt and software engineering rather than MVP strategies or market validation.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-30T09:55:30",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts related to software development efficiency, it does not explicitly mention Lead Time or its measurement, nor does it explore its relationship with Cycle Time or other observability metrics. The focus is on architectural decisions rather than the time taken from initiation to delivery, which is the essence of Lead Time.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-04-30T09:55:34",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on software engineering practices, specifically the drawbacks of using stored procedures for business logic. While it touches on concepts like maintainability and technical debt, it does not directly address entrepreneurship principles such as innovation, risk-taking, or value-driven decision-making. The discussion lacks explicit mentions of entrepreneurial strategies or the entrepreneurial mindset, leading to a low confidence score in the context of the Entrepreneurship category.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-30T09:55:38",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like CI/CD and testing, it does not explicitly discuss Internal Developer Platforms or their benefits, components, or best practices. The discussion is more about coding practices rather than the broader framework of an IDP, leading to a low confidence score in alignment with the category.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-30T09:55:41",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from SQL stored procedures to application code. While it touches on themes of modern engineering practices and continuous delivery, it does not explicitly discuss the Agile Product Operating Model or its principles. The discussion lacks direct mentions of product management, agile methodologies, or the transition from project to product ethos, which are central to the APOM framework.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-04-30T09:55:44",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development, specifically advocating against the use of stored procedures for business logic. While it touches on the need for change in engineering practices, it lacks a direct discussion on organisational change strategies, methodologies, or frameworks. The mention of incremental change and refactoring could be loosely related to organisational change, but it does not delve into the principles or practices that would align with the category's core themes. Overall, the content does not meet the criteria for a strong alignment with the 'Organisational Change' category.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-30T09:55:48",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. However, it does not explicitly mention Evidence-Based Management or its key topics. While it touches on concepts like improving maintainability and reducing technical debt, it lacks a focus on empirical decision-making or metrics that assess value delivery, which are central to EBM.",
    "level": "Ignored"
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-30T09:55:50",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the importance of modern engineering practices, it does not explicitly discuss Common Goals within Agile or DevOps frameworks. The discussion lacks direct mentions of shared objectives or alignment strategies, and the depth of discussion is more about technical implementation rather than the overarching strategic alignment that characterises Common Goals.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-04-30T09:55:53",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than remote working or Agile methodologies. There are no direct mentions of remote work, team collaboration, or Agile practices, which are essential for the category. The content lacks relevance to the unique challenges and solutions associated with remote working in an Agile context.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-04-30T09:55:56",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the drawbacks of using stored procedures for business logic. While it discusses the importance of refactoring and modern engineering practices, it does not explicitly mention evidence-based leadership principles or the application of empirical evidence in leadership decision-making. The discussion lacks depth in relation to leadership and does not provide case studies or strategies related to fostering a culture of evidence-based decision-making.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-30T09:55:58",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention the Scrum Team, its roles, or any accountability within the Scrum framework. While it references a team (Azure DevOps) in a general sense, it does not align with the specific themes or responsibilities of a Scrum Team as defined in the Scrum Guide.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-04-30T09:56:01",
    "ai_confidence": 32.0,
    "ai_mentions": 100.0,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more maintainable code, which implies a change in practices. However, it primarily focuses on technical aspects of software engineering rather than broader change management strategies. While it mentions the importance of incremental change and modernisation, it lacks a comprehensive exploration of change management principles, stakeholder engagement, or leadership roles in guiding transformation, which are key topics in the Change Management category.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "utAzlIGxj7O",
    "category": "Definition of Done",
    "calculated_at": "2025-05-08T08:55:03",
    "ai_confidence": 9.3,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.3,
    "ai_audience": 1.2,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses exclusively on refactoring business logic out of SQL stored procedures and promoting better engineering practices like testability and maintainability. It never mentions 'Definition of Done' directly and does not discuss the core meaning, best practices, criteria, or team alignment aspects of DoD in Agile or Scrum. The content's intent is to advocate for design and maintainability, not the establishment or evolution of a Definition of Done. The audience is technical, which does partially align, but all examples and discussion center on code organization and not on delivery criteria, product increments, or team agreements around completeness. The signal-to-noise ratio is high in terms of staying on its central topic, but that topic is not related to DoD principles. Overall, only a very speculative connection could be made (e.g., better code practices may incidentally contribute to meeting DoD criteria), but there is no evidence or direct discussion of DoD. Each scoring dimension is very low, with only the audience score being slightly higher due to the audience overlap. The final weighted confidence score is extremely low, appropriately reflecting no substantive relevance to the 'Definition of Done' category.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-04-30T09:56:07",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on refactoring and modern engineering practices. It does not mention AI or its integration within Agile methodologies, DevOps practices, or software development processes, which are the core themes of the 'Artificial Intelligence' category. The discussion is more about software engineering principles rather than AI applications.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-30T09:56:10",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to more maintainable code, which indirectly relates to market adaptability by promoting agile practices and continuous delivery. However, it lacks a direct focus on market adaptability strategies, such as Agile methodologies or DevOps practices, and does not provide in-depth discussions on how these changes enhance responsiveness to market shifts. The mention of Azure DevOps and the benefits of refactoring suggest some alignment with adaptability principles, but the overall depth and focus remain limited.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-04-30T09:56:13",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention Agile Planning Tools, nor does it align with the core themes of Agile methodologies, such as backlog management, sprint planning, or team collaboration. The focus is on software engineering practices rather than Agile planning tools, resulting in a very low confidence score.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-30T09:56:16",
    "ai_confidence": 25.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on the importance of improving engineering practices, it does not explicitly address Current Value or its metrics, nor does it provide a real-time assessment of value delivered. The focus is more on technical practices rather than the evaluation of value in the context of Evidence-Based Management.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-30T09:56:19",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from SQL stored procedures to application code. It does not discuss customer needs, product features, or methodologies related to product discovery. While it touches on the importance of maintainability and testing, these are not aligned with the core themes of understanding user requirements or validating product ideas.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-04-30T09:56:22",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 20,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, which is more aligned with software engineering practices than with large-scale Agile methodologies. While it touches on concepts like incremental change and improving maintainability, it does not explicitly discuss frameworks, enterprise-level strategies, or cross-team collaboration that are central to the Large Scale Agility category.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-04-30T09:56:25",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, which is more aligned with software engineering practices than with enterprise agility. While it touches on themes of incremental change and improving engineering practices, it lacks a broader organisational context or discussion on how these practices contribute to overall enterprise agility. There are no direct mentions of agile frameworks, organisational structures, or leadership roles that would typically be associated with enterprise agility.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-04-30T09:56:28",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention estimation techniques, Agile or Scrum frameworks, or any related concepts. The focus is on software engineering practices rather than estimation, leading to a very low confidence score.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-04-30T09:56:31",
    "ai_confidence": 15.0,
    "ai_mentions": 5,
    "ai_alignment": 10,
    "ai_depth": 20,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the technical practice of avoiding business logic in stored procedures, providing actionable insights and guidance on refactoring and modern engineering practices. It directly references principles of software development and engineering excellence, which are not aligned with the Miscellaneous category. While it does touch on broader themes of software development, the depth and focus on specific practices and methodologies related to coding and engineering principles indicate a strong alignment with established practices rather than a miscellaneous discussion.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-30T09:56:35",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the importance of refactoring and modern engineering practices, it does not engage with the core themes of product strategy such as vision formulation, market analysis, or customer-centric approaches. The discussion is more about technical implementation rather than strategic planning or product development methodologies.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-04-30T09:56:37",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more maintainable code, which aligns with the principles of continuous improvement and adaptability. However, it primarily focuses on technical practices rather than broader organisational strategies or cultural shifts that enhance agility. The mention of incremental change and modernisation strategies hints at agility but lacks a direct focus on organisational structures or leadership roles that foster agility.",
    "level": "Ignored"
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-30T09:56:40",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on themes of modern engineering discipline and improving software quality, it does not explicitly mention the One Engineering System (1ES) framework or its principles. The discussion lacks depth regarding integration, standardisation, or the specific methodologies of 1ES, leading to a low confidence score in alignment with the category.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-04-30T09:56:45",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on the importance of testing and improving engineering practices, it does not explicitly mention experimentation, hypothesis-driven approaches, or systematic testing of ideas within Agile workflows. The focus is more on architectural decisions rather than on experimentation as a method for validating assumptions or driving continuous improvement.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-04-30T09:56:48",
    "ai_confidence": 15.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the importance of modern engineering practices, it lacks a clear discussion of long-term strategic goals or alignment with agile principles. The mention of a 'strategy' for refactoring is too operational and does not delve into how these practices contribute to broader organisational objectives or business agility.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-30T09:56:52",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on the idea of improving engineering practices, it does not explicitly discuss the concept of Unrealised Value or its indicators, nor does it explore potential improvements or innovations in a way that aligns with the category's focus. The discussion is more about operational efficiency rather than identifying untapped opportunities for value capture.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-30T09:56:55",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more testable and maintainable code. It aligns closely with the principles of Technical Excellence by emphasising the importance of testability, CI/CD practices, and modular architecture. The depth of discussion is significant, providing detailed reasons why stored procedures hinder engineering practices and outlining a clear strategy for improvement. Overall, the content is a strong fit for the category, focusing on high-level engineering practices that enhance software quality.",
    "level": "Primary",
    "reasoning_summary": "This content is a great match for the Technical Excellence category. It thoughtfully critiques the use of stored procedures for business logic, highlighting their impact on testability and maintainability. By recommending refactoring and modern engineering practices, it demonstrates a clear commitment to improving software quality and aligns well with the principles of technical excellence."
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-04-30T09:57:01",
    "ai_confidence": 65.0,
    "ai_mentions": 3,
    "ai_alignment": 70.0,
    "ai_depth": 60.0,
    "non_ai_confidence": 20,
    "final_score": 65.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures into testable code, which aligns with TDD principles. It mentions the need for unit tests and highlights the benefits of improved maintainability and faster feedback loops, which are core themes of TDD. However, the primary focus is on the drawbacks of stored procedures rather than a detailed exploration of TDD practices, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-30T09:57:06",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 50.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which aligns with the principles of product delivery, particularly in terms of improving maintainability, enabling faster feedback loops, and supporting continuous delivery. However, while it touches on aspects of deployment and testing, it does not explicitly address broader product delivery methodologies or practices, which limits its overall alignment with the category.",
    "level": "Secondary"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-30T09:57:10",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the drawbacks of using stored procedures for business logic, advocating for refactoring towards more maintainable and testable code. It aligns closely with core themes of software development, such as code quality, maintainability, and CI/CD practices. The depth of discussion is significant, providing detailed reasons and a strategic approach to modernising code practices, which enhances its relevance to the Software Development category.",
    "level": "Primary"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-04-30T09:57:13",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 20,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more testable code. While it touches on the importance of testability, it does not explicitly mention Acceptance Test Driven Development (ATDD) or its principles, nor does it discuss acceptance criteria or collaboration among stakeholders, which are key aspects of ATDD. The focus is more on coding practices and architectural decisions rather than the collaborative approach of ATDD.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-04-30T09:57:15",
    "ai_confidence": 25.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses refactoring and modern engineering practices, which can relate to Agile principles of continuous improvement and adaptability. However, it primarily focuses on technical practices rather than strategic alignment or broader Agile methodologies. The mention of a progressive modernisation strategy hints at Agile concepts, but the overall emphasis is on technical execution rather than strategic planning or organisational vision.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-04-30T09:57:19",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 3.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it briefly mentions CI/CD in relation to stored procedures, it does not focus on Azure Repos or its functionalities, best practices, or integration. The primary focus is on software engineering practices rather than Azure Repos, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-30T09:57:21",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the decision to stop using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on decision-making principles, such as incremental change and the importance of testing, it lacks a structured, evidence-based methodology and does not delve deeply into collaborative decision-making or empirical frameworks. The focus is more on technical practices than on the broader principles of decision-making within organisations.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-30T09:57:24",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention the Definition of Ready or its criteria, nor does it address the importance of backlog item readiness in Agile practices. The focus is on technical implementation rather than Agile methodologies, leading to a very low confidence score in relation to the Definition of Ready.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-30T09:57:28",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not mention the Scrum Master role, its responsibilities, or its impact on team effectiveness. While it discusses engineering practices, it lacks any reference to Scrum principles or the accountability of a Scrum Master.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-30T09:57:31",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software engineering, specifically the drawbacks of using stored procedures for business logic. While it touches on concepts like refactoring and continuous delivery, it does not directly address Agile Product Management principles, such as the role of the Product Owner, backlog prioritisation, or stakeholder engagement. The discussion lacks a clear connection to Agile methodologies or product management strategies, resulting in a very low confidence score for alignment with the category.",
    "level": "Ignored"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-30T09:57:34",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 20,
    "ai_depth": 7,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which indirectly relates to improving Time to Market by enhancing maintainability and enabling faster feedback loops. However, it does not explicitly focus on Time to Market as a primary theme, nor does it provide detailed metrics or strategies specifically aimed at reducing the time from conception to delivery. The discussion is more about technical practices than the broader implications of Time to Market in an organisational context.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-04-30T09:57:39",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, which does not directly address Agile transformation principles or methodologies. While it mentions incremental change and modernisation strategies, it lacks explicit discussions on Agile frameworks, leadership roles, or cultural shifts necessary for Agile transformation. The content is more aligned with software engineering practices than with the broader themes of Agile transformation.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-04-30T09:57:42",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the implications of this practice for engineering discipline and team dynamics, it lacks a direct discussion of sociotechnical interactions or organisational structures. The emphasis is on technical practices without adequately addressing the social context or the interplay between technology and organisational culture, which are central to the Sociotechnical Systems category.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-04-30T09:57:45",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic, which indirectly relates to troubleshooting by highlighting potential issues such as testing difficulties, lack of CI/CD integration, and maintainability challenges. However, it primarily focuses on advocating for refactoring rather than providing specific troubleshooting techniques or methodologies. The discussion lacks depth in terms of systematic problem-solving or case studies, which are key aspects of the troubleshooting category.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-30T09:57:49",
    "ai_confidence": 45.0,
    "ai_mentions": 5,
    "ai_alignment": 30,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more modern coding practices, which aligns with the principles of digital transformation by advocating for improved engineering practices and operational efficiency. However, it lacks a broader discussion on strategic adoption of digital technologies or organisational culture changes, focusing instead on technical details and specific practices. While it mentions the importance of modernisation and continuous delivery, it does not delve into the strategic implications or case studies that would strengthen its alignment with the digital transformation category.",
    "level": "Tertiary"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-04-30T09:57:52",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on concepts like maintainability and continuous delivery, it does not directly address customer retention strategies or user engagement. The discussion lacks explicit mentions of customer needs, feedback mechanisms, or user experience, which are crucial for the category of Customer Retention.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-30T09:57:55",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on some aspects of software development and engineering discipline, it does not provide any actionable instructions or insights related to the installation or configuration of tools, software, or platforms. The focus is on architectural decisions rather than installation or configuration processes, leading to a low confidence score in this category.",
    "level": "Ignored"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-04-30T09:57:58",
    "ai_confidence": 32.0,
    "ai_mentions": 2,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on aspects of continuous integration and delivery (CI/CD) and mentions the need for testability and maintainability, it does not focus on the broader strategies and practices of release management. The primary emphasis is on coding practices rather than the planning, scheduling, and controlling of software releases, which are central to release management.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-04-30T09:58:01",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of CI/CD and the importance of modern engineering practices, it does not focus on deployment strategies or methodologies for deploying software into production. The discussion lacks direct mentions of deployment strategies like Blue-Green Deployments or Canary Releases, and the depth of discussion on deployment-related topics is minimal.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-04-30T09:58:04",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring and maintaining code quality, which aligns with the ethos of technical excellence and accountability in Professional Scrum. However, it does not explicitly mention Scrum principles or roles, and the focus is primarily on engineering practices rather than the broader application of Scrum in a professional context. The discussion lacks depth in terms of Scrum values and the disciplined application of Scrum, leading to a moderate confidence score.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-30T09:58:07",
    "ai_confidence": 72.0,
    "ai_mentions": 3,
    "ai_alignment": 85.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to more maintainable code, which aligns with the principles of iterative development and incremental delivery. It highlights the benefits of this approach, such as improved testability, maintainability, and faster feedback loops, which are key aspects of delivering value to customers. The discussion is detailed, providing specific reasons why stored procedures hinder value delivery and outlining a strategy for gradual improvement. However, while it touches on CI/CD practices, it does not explicitly discuss broader Agile or DevOps methodologies, which slightly limits its alignment with the category.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category as it explores how moving business logic from stored procedures to maintainable code supports iterative development and faster value delivery. It clearly explains the benefits, like better testability and maintainability, though it doesn’t delve deeply into wider Agile or DevOps practices, which would strengthen its alignment further."
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-04-30T09:58:10",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on incremental change, which is a principle of Agile, it does not explicitly discuss Agile frameworks, their principles, or their application in organisational contexts. Therefore, it lacks direct mentions, conceptual alignment, and depth related to Agile frameworks.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-04-30T09:58:12",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic in software development. It discusses engineering practices, refactoring, and the benefits of modern coding techniques, but it does not mention or relate to the concept of Revenue per Employee or its implications for workforce efficiency or organisational performance. Therefore, it has minimal relevance to the specified category.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-04-30T09:58:15",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development, specifically the use of stored procedures for business logic. While it touches on the importance of modern engineering practices and mentions teams, it does not explicitly discuss organisational culture or its influence on agility, responsiveness, or transformation. The discussion lacks depth in cultural aspects and does not align with the key topics outlined for the category.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-04-30T09:58:18",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the use of stored procedures, with no direct mention or discussion of employee engagement, motivation, or team dynamics. While it touches on the importance of modern engineering practices, it does not explore the psychological or social aspects of work that contribute to employee satisfaction or productivity.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-30T09:58:21",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, with no direct mention of Azure Boards or Agile project management practices. While it touches on concepts relevant to software engineering, it does not align with the functionalities or best practices of Azure Boards, nor does it explore any of the key topics outlined for this category.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-04-30T09:58:25",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on technical advice regarding the use of stored procedures in software development, lacking personal anecdotes or reflections. While it discusses the challenges of maintaining business logic in stored procedures, it does not provide individual experiences or insights that align with the Personal category. The discussion is more about best practices and technical strategies rather than personal interpretations or experiences related to Agile or DevOps methodologies.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-30T09:58:29",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of developer productivity and automation, it does not explicitly focus on Platform Engineering or Internal Developer Platforms (IDPs). The discussion is more about coding practices than the design and construction of internal platforms, which is the core of Platform Engineering. Therefore, while there are relevant mentions, the overall alignment and depth of discussion do not strongly support the category.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-30T09:58:35",
    "ai_confidence": 85.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 85.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic, which directly relates to the concept of technical debt. It discusses the implications of maintaining such practices, highlighting issues like testability, CI/CD integration, and maintainability, all of which are key aspects of technical debt. The author advocates for refactoring as a strategy to reduce this debt, aligning well with the category's core themes. The depth of discussion is substantial, providing detailed reasons and a clear strategy for remediation, thus justifying a high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the technical debt category, as it thoroughly explores the challenges of using stored procedures for business logic. It addresses key issues like maintainability, testing, and CI/CD integration, all central to technical debt. The author also suggests refactoring as a solution, making the discussion both relevant and actionable for this category."
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-04-30T09:58:38",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the need for refactoring and improving engineering practices, it does not explicitly discuss sensemaking, decision-making processes, or the interpretation of complexity in organisational contexts. The discussion lacks depth in exploring how teams can navigate challenges or adapt strategies based on complex environments, which are key themes of sensemaking.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-04-30T09:58:41",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like incremental change and reducing technical debt, it does not explicitly discuss Agile Planning principles, methodologies, or practices. The mention of a gradual approach to change aligns somewhat with Agile's iterative nature, but the overall focus is on technical practices rather than planning or team dynamics.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-04-30T09:58:44",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more testable and maintainable code. While it touches on concepts like testability and maintainability, which are relevant to BDD, it does not explicitly mention BDD principles, user stories, or collaboration among stakeholders. The focus is more on architectural decisions rather than the collaborative and requirement-alignment aspects of BDD.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-30T09:58:47",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content primarily focuses on the engineering practice of refactoring business logic out of stored procedures into more maintainable and testable code. It discusses the importance of testability, CI/CD integration, and separation of concerns, which are all key themes in engineering practices. The depth of discussion is significant, providing detailed reasoning and examples of why stored procedures are detrimental to modern engineering practices. The content aligns closely with the principles of clean code and automation, making it a strong fit for the category.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the engineering practices category, as it delves into refactoring business logic for better maintainability and testability. It highlights essential engineering themes like CI/CD, separation of concerns, and clean code, offering detailed examples and reasoning. The focus on automation and modern development principles further reinforces its relevance to engineering best practices."
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-30T09:58:50",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than organisational design models like Cell Structure Design. There are no direct mentions of cells, decentralisation, or the principles of the Beta Codex, which are central to the category. The discussion lacks depth in relation to the key topics outlined for Cell Structure Design, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "utAzlIGxj7O",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": null,
    "final_score": 72.0,
    "reasoning": "The content discusses the principles of software engineering, particularly around maintaining business logic outside of SQL stored procedures. It emphasizes actionable change (refactoring) and provides a reasoning framework that aligns with principles of Continuous Improvement and Value Delivery by focusing on producing maintainable, testable code. However, it does not explicitly reference Agile, Lean, or DevOps principles nor does it deeply explore foundational beliefs that shape decision-making within these frameworks, leading to a moderate confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content aligns with the category as it focuses on improving software maintainability and testability, which supports continuous improvement and value delivery. However, it doesn’t directly reference Agile, Lean, or DevOps principles, nor does it delve into the core beliefs that guide these methodologies, so its fit is partial rather than complete."
  },
  "Tool": {
    "resourceId": "utAzlIGxj7O",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 35.0,
    "ai_mentions": 2,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 35.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and suggests a strategy of refactoring to better practices in application code. Although it mentions tooling indirectly (e.g., continuous integration/continuous delivery, automation), the explicit focus on tools is limited. The primary focus is on refactoring and engineering discipline rather than specific tools used to facilitate these practices. Therefore, it aligns with the category of 'Tool' only in a surface-level context, resulting in a moderately low confidence score.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "utAzlIGxj7O",
    "category": "Accountability",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 22.0,
    "ai_mentions": 100.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 22.0,
    "reasoning": "While the content critiques the use of stored procedures and emphasizes modern engineering practices, it does so without a clear focus on accountability as defined in the context of this category. It mentions ownership indirectly by discussing the need to refactor and manage code properly, but lacks a direct exploration of structural accountabilities, defined roles, or outcome ownership in work systems. Thus, it only briefly touches the topic and primarily focuses on code management rather than accountability within a work environment.",
    "level": "Ignored"
  },
  "Philosophy": {
    "resourceId": "utAzlIGxj7O",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": null,
    "final_score": 12.0,
    "reasoning": "The content focuses on specific practices and recommendations regarding the use of SQL stored procedures, discussing the technical aspects and drawbacks of this approach without delving into the philosophical reasons or foundational beliefs that underlie such methodologies. While it touches on concepts like engineering discipline and modern practices, it lacks a clear exploration of the 'why' behind these practices, making it more procedural than philosophical.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "utAzlIGxj7O",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 67.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 70.0,
    "non_ai_confidence": null,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of a modern engineering discipline, emphasizing the need for structured practices like refactoring, the role of maintainable code, and continuous improvement. It outlines clear principles that align closely with the expectations of the Discipline category. However, while it reflects on methodologies and their evolution, it focuses more on technical practices rather than on the broader systemic application of disciplines such as Agile or DevOps, thus limiting its full alignment with the category.",
    "level": "Secondary"
  },
  "Artifact": {
    "resourceId": "utAzlIGxj7O",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 20.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content primarily discusses the downsides of using stored procedures for business logic and advocates for refactoring into maintainable code. It does not focus on artifacts related to Agile, Scrum, or Lean practices, nor does it define or explore specific artifacts within those frameworks. The discussion lacks depth and relevance to the role of artifacts in a software development context, making it only tangentially related to the category of 'Artifact'.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "utAzlIGxj7O",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 65.0,
    "ai_mentions": 2,
    "ai_alignment": 80.0,
    "ai_depth": 55.0,
    "non_ai_confidence": null,
    "final_score": 65.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and emphasizes the importance of refactoring to improve testability, maintainability, and support for continuous delivery—which connects to the principles of observability. Terms like 'testability', 'traceability', and 'observability' are mentioned, indicating a conceptual alignment with the category. However, the primary focus of the content is on refactoring practices rather than observability itself, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Practice": {
    "resourceId": "utAzlIGxj7O",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": null,
    "final_score": 78.0,
    "reasoning": "The content extensively discusses the practice of refactoring business logic out of SQL stored procedures into more maintainable and testable code. It provides actionable recommendations such as 'stop creating new business logic in stored procedures' and emphasizes the importance of progressive refactoring, making it closely aligned with improvement techniques in software engineering practices. The depth of discussion around the disadvantages of stored procedures and the rationale for moving towards a better engineering discipline indicates a clear focus on actionable practices, earning a high confidence in classification.",
    "level": "Secondary",
    "reasoning_summary": "This content clearly fits the category, as it offers practical advice on improving software engineering practices by moving business logic out of stored procedures. It highlights the benefits of maintainability and testability, and provides concrete steps for progressive refactoring, making it highly relevant to those seeking actionable improvement techniques in software development."
  },
  "Method": {
    "resourceId": "utAzlIGxj7O",
    "category": "Method",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 78.0,
    "ai_mentions": 16,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": null,
    "final_score": 78.0,
    "reasoning": "The content focuses on a methodical approach to refactoring business logic away from stored procedures into testable, maintainable application code. It details specific practices and strategies for implementing this change, emphasizing gradual improvement and the benefits of such a method over time. It discusses practical steps and the rationale behind avoiding stored procedures in favor of better engineering practices, aligning well with the key topics of structured methods in software development.",
    "level": "Secondary",
    "reasoning_summary": "This content is a great fit for the category, as it clearly outlines practical strategies for moving business logic from stored procedures into application code. It highlights the advantages of this approach, such as improved testability and maintainability, and offers actionable steps, making it highly relevant to discussions on structured software development methods."
  },
  "Strategy": {
    "resourceId": "utAzlIGxj7O",
    "category": "Strategy",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 68.0,
    "ai_mentions": 20.0,
    "ai_alignment": 40.0,
    "ai_depth": 60.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses a strategy to transition from using stored procedures for business logic to a more maintainable and testable codebase. It emphasizes a gradual approach to refactoring and progressive modernization, which aligns with strategic decision-making and long-term improvement in engineering practices. However, while there is a clear reference to strategy, much of the content focuses on specific practices and technical details, which detracts from its alignment with the broad and high-level focus of the 'Strategy' category.",
    "level": "Secondary"
  },
  "Model": {
    "resourceId": "utAzlIGxj7O",
    "category": "Model",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 25.0,
    "reasoning": "The content mainly discusses technical practices related to business logic and SQL stored procedures, focusing on the importance of refactoring code rather than stored procedures. It does not explicitly mention any conceptual models or frameworks associated with Agile, DevOps, or Lean contexts. While there is an underlying theme of improving systems and practices, it lacks sufficient discussion of specific models that would warrant a higher confidence score in the 'Model' category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "utAzlIGxj7O",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 15.0,
    "ai_mentions": 4,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content discusses refactoring business logic out of SQL stored procedures and touches on engineering practices, which are important for software development but does not explicitly discuss Agile, DevOps, or Lean frameworks. The mention of the DevOps team as an example does not significantly contribute to a framework discussion. The overall focus is on practices and strategies rather than on structured methodologies that fall within the Framework category, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "utAzlIGxj7O",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 76.0,
    "ai_mentions": 15,
    "ai_alignment": 26,
    "ai_depth": 34,
    "non_ai_confidence": null,
    "final_score": 76.0,
    "reasoning": "The content discusses actionable practices for refactoring business logic from SQL stored procedures into application code, which is a prescriptive approach aligned with the core tenets of modern software development methodologies. It mentions strategies like 'refactor when touching existing stored procedures' and emphasizes continuous improvement and maintainability, relating to principles in Agile and DevOps. The article presents a clear methodology to enhance efficiency and quality in software engineering, therefore fitting well within the 'Tenet' category.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the 'Tenet' category as it outlines clear, actionable guidelines for improving software development by moving business logic from SQL stored procedures to application code. Its focus on continuous improvement, maintainability, and alignment with Agile and DevOps principles makes it a strong example of a foundational practice in modern engineering."
  },
  "Capability": {
    "resourceId": "utAzlIGxj7O",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 20,
    "ai_depth": 15,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the technical argument against using stored procedures for business logic, discussing refactoring for testable, maintainable code. While it mentions the importance of discipline and strategies for improving coding practices, it lacks a direct emphasis on 'capabilities' as defined in the context of empowering teams and organizations. Although there are aspects related to enhancing the engineering practices that could be seen as aligning with building capabilities, they are more focused on technical practices than on cultivating enduring, systemic capabilities within a team or organization.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "utAzlIGxj7O",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T20:54:06",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 1.0,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content makes no direct or even indirect mention of Service Level Expectation (SLE), nor does it discuss any Agile, Scrum, or Kanban-specific practice or metric. It focuses entirely on code maintainability, refactoring away from stored procedures, and modern engineering discipline. There are no references to SLE definitions, calculations, application, or continuous improvement within the Agile process. The audience is technical, which has a slight incidental overlap, but otherwise, all content is off-topic for SLE, resulting in a confidence score of zero.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "utAzlIGxj7O",
    "category": "Ethos",
    "calculated_at": "2025-05-13T13:53:33",
    "ai_confidence": 36.85,
    "ai_mentions": 0.4,
    "ai_alignment": 3.7,
    "ai_depth": 3.9,
    "ai_intent": 3.2,
    "ai_audience": 2.8,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses on technical arguments against using stored procedures for business logic, emphasising testability, maintainability, and modern engineering discipline. While it references discipline and sustainable engineering, it does not explicitly discuss foundational beliefs, system-level convictions, or ethos as defined. The main thrust is practical advice and technical strategy, not an exploration of ethos underpinning Agile, DevOps, or Lean. There are no direct mentions of ethos, and the alignment is partial at best, as the content is more about best practices than core demonstrable values or system behaviour. The audience is technical practitioners, which partially overlaps, but the discussion lacks depth on ethos and is not primarily intended to examine foundational convictions.",
    "reasoning_summary": "This content is a technical critique of stored procedures for business logic, focusing on practical engineering discipline rather than the foundational beliefs or system-level convictions that define ethos. It only partially aligns with the ethos category and does not explore its core themes in depth.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "utAzlIGxj7O",
    "category": "First Principal",
    "calculated_at": "2025-05-13T13:53:39",
    "ai_confidence": 19.25,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on why business logic should not be written in stored procedures, emphasising testability, maintainability, and modern engineering practices. However, it does not explicitly discuss or identify first principles, nor does it anchor its arguments in foundational, immutable constraints of Lean, Agile, Scrum, or DevOps. The arguments are based on practical experience, best practices, and modern software engineering values, not on irreducible truths or non-negotiable principles. There is no direct mention or exploration of first principles, and the discussion is context-dependent and advisory rather than foundational. The audience is technical practitioners, which aligns somewhat, but the content lacks the depth and conceptual alignment required for the 'First Principal' category.",
    "reasoning_summary": "This content argues against using stored procedures for business logic, focusing on practical engineering concerns. It doesn't identify or apply first principles, nor does it ground its advice in foundational, immutable truths. The discussion is context-driven and advisory, so it doesn't fit the 'First Principal' category.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "utAzlIGxj7O",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T13:53:45",
    "ai_confidence": 18.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on technical and engineering best practices for refactoring business logic out of stored procedures, emphasising testability, maintainability, and modernisation. While it references outcomes like faster feedback loops and reduced bugs, these are framed in terms of engineering efficiency and code quality, not direct customer value or outcomes. There is no explicit discussion of defining, measuring, or prioritising work based on customer needs, nor is there evidence of feedback loops with real users or alignment of delivery to customer outcomes. The audience is technical practitioners, which partially aligns, but the main thrust is internal process improvement rather than customer focus.",
    "reasoning_summary": "This content is primarily about engineering discipline and code maintainability, not customer outcomes. While some benefits could indirectly impact customers, the discussion lacks explicit focus on customer value, feedback, or outcomes, so confidence in the Customer Focus category is low.",
    "level": "Ignored"
  },
  "Definition of Workflow": {
    "resourceId": "utAzlIGxj7O",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-18T20:52:58",
    "ai_confidence": 2.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 0.8,
    "ai_audience": 4.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses on why business logic should not reside in stored procedures, advocating for refactoring towards maintainable, testable code. There is no mention or discussion of the Definition of Workflow, Kanban, agile, or related concepts. The main themes are software architecture, testability, and maintainability, not workflow policies or explicit agreements governing work flow. The audience (engineers, developers) partially overlaps, but the content is not aligned with the category's scope or intent.",
    "reasoning_summary": "This article is about refactoring business logic out of stored procedures for better code quality and maintainability. It does not discuss the Definition of Workflow, Kanban, or agile workflow policies, so it is not a fit for this category.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "utAzlIGxj7O",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-03T12:22:23",
    "ai_confidence": 3.2500000000000004,
    "ai_mentions": 0.0,
    "ai_alignment": 0.3,
    "ai_depth": 0.2,
    "ai_intent": 0.5,
    "ai_audience": 2.9,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses strictly on technical practices around software engineering, specifically discouraging placing business logic in SQL stored procedures. It emphasizes maintainability, scalability, testability, and CI/CD practices. There are no explicit mentions or references related to OKRs or any of their core principles (such as objectives, key results, strategic alignment, transparency or outcome-based measurement). The theme of iterative change and technical excellence might tangentially align conceptually with continuous improvement, but there is no meaningful exploration or direct alignment with OKR theory or practices as defined by John Doerr. Therefore, the Direct Mentions dimension scores zero points. Conceptual Alignment and Depth of Discussion dimensions receive minimal scores due to lack of clear thematic connections. The Intent dimension scores marginally higher (0.5) simply because the intent around continuous improvement and strategic engineering practice mildly overlaps OKR ideals of continual improvement and iterative refinement—but this is still weak and at most incidental. Audience Alignment is relatively higher (2.9) since OKRs and the content both address technically-inclined practitioners interested in iterative, incremental improvements, but even this alignment is weak given OKRs typically address organizational strategy and execution rather than specific technical best practices. Signal-to-Noise is moderate (3.5), as the content is high-quality and focused, but only weakly relevant to OKRs. No penalties are applied as the content doesn't actively contradict or use outdated terms specific to the OKR category.",
    "reasoning_summary": "The content deals explicitly with best practices in software architecture and avoiding business logic in stored procedures. It does not meaningfully reference, align, or connect with the OKR framework or its principles, making it largely irrelevant to this category.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "utAzlIGxj7O",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:01:34",
    "ai_confidence": 16.984,
    "ai_mentions": 0.5,
    "ai_alignment": 2.6,
    "ai_depth": 2.0,
    "ai_intent": 2.2,
    "ai_audience": 5.0,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on software engineering practices, specifically arguing against writing business logic in stored procedures, and advocating for refactoring such logic into testable, maintainable code. There is no direct mention of the 'Product Developer' role, its accountabilities, or related behaviors as defined in modern frameworks. Conceptual overlap is marginal—while the guidance supports general modern product practices (e.g., testability, CI/CD), it does not connect these practices to the formal accountabilities or professional focus of Product Developers. The intended audience are developers and engineers dealing with legacy code, not specifically those operating within the Product Developer accountability. The discussion is thorough regarding migration strategies but not in context of Product Developer responsibilities.",
    "reasoning_summary": "This content addresses best practices in code maintainability and moving business logic out of stored procedures, targeting software engineers in general. It does not discuss the Product Developer role or accountability as defined in contemporary product development frameworks.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "utAzlIGxj7O",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:01:38",
    "ai_confidence": 11.1205,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.5,
    "ai_intent": 1.2,
    "ai_audience": 4.1,
    "ai_signal": 2.3,
    "ai_penalties_applied": true,
    "ai_penalty_points": 2.1,
    "ai_penalty_details": "Alignment (-0.7): No reference to human-AI collaboration, only human engineering practices. Depth (-0.7): Lacks any exploration of human-AI or AI-agent topics. Intent (-0.4): Focused solely on best practices for humans refactoring code, unrelated to collective intelligence themes. Signal (-0.3): All AI/collective intelligence content is absent.",
    "final_score": 11.0,
    "reasoning": "The content thoroughly argues against maintaining business logic in stored procedures, focusing on testability, maintainability, and modern software practices for human teams. It never references, describes, or implies any human-AI collaboration, AI agent participation, or hybrid team dynamics central to collective intelligence. All arguments and examples center around human agency, engineering process improvements, DevOps habits, and reducing technical debt—entirely human-centric. There is a passing mention of DevOps and technical culture, but these are not in an AI-collaborative context. No AI tools, agents, or collaborative problem-solving involving AI are mentioned or implied, nor are distributed cognition, shared understanding with AI, or new capabilities emerging from human-AI teaming explored. The content is thus conceptually and substantively unrelated to the 'Collective Intelligence' category, falling outside every topical key area described.",
    "reasoning_summary": "This content is solely about human-driven software engineering practices and does not address human-AI collaboration, hybrid teams, or any dimension of collective intelligence. It is entirely outside the intended scope of the category.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "utAzlIGxj7O",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:22",
    "ai_confidence": 54.46,
    "ai_mentions": 1.2,
    "ai_alignment": 5.6,
    "ai_depth": 5.8,
    "ai_intent": 6.1,
    "ai_audience": 7.0,
    "ai_signal": 6.8,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.4,
    "ai_penalty_details": "Mentions (-0.5): The content is explicit about engineering practices but never directly references 'Agentic Engineering' or its synonyms. Alignment (-0.2): Focuses on autonomy/agency themes but not with the explicit philosophical or systemic framing. Depth (-0.2): Goes deep on modern engineering but doesn't fully connect to agentic discussion. Intent (-0.3): Purpose is practical and technical, not explicitly about maximising agency.",
    "final_score": 54.0,
    "reasoning": "The content aligns partially with Agentic Engineering through its advocacy for developer autonomy, better feedback loops, and modern engineering discipline. It promotes moving business logic to testable, observable code, which increases agency. However, it never directly mentions Agentic Engineering's key concepts or philosophical framing, and lacks discussion of AI, decentralised decision-making, or the interplay between human and intelligent system agency. The focus is on technical best practices rather than a holistic agentic shift. Some penalty applied for lack of explicit mention and the limited conceptual/philosophical depth compared to Agentic Engineering’s definition.",
    "reasoning_summary": "The content champions engineering practices that increase developer autonomy and continuous improvement, which partially aligns with Agentic Engineering. However, it lacks explicit connection to agentic philosophy, autonomy for intelligent systems, or ethical/AI dimensions, making its fit moderate rather than strong.",
    "level": "Tertiary"
  },
  "Agentic Software Delivery": {
    "resourceId": "utAzlIGxj7O",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:12",
    "ai_confidence": 22.7,
    "ai_mentions": 0.3,
    "ai_alignment": 2.8,
    "ai_depth": 3.2,
    "ai_intent": 3.1,
    "ai_audience": 7.9,
    "ai_signal": 6.0,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1.0,
    "ai_penalty_details": "mentions penalized (-0.7) for no category references, alignment penalized (-0.3) for only partial overlap.",
    "final_score": 23.0,
    "reasoning": "The content argues for refactoring business logic out of stored procedures to code, citing maintainability, testability, and CI/CD benefits. While this aligns with modern engineering and continuous delivery practices, there is no mention or substantive exploration of agentic concepts: autonomous AI agents, agency, contextual intelligence, agent-human synergy, or governance frameworks. The intent is limited to advocacy for software maintainability and does not touch deeply on integration of agents or agentic software delivery principles. Audience (software engineers, practitioners) partially overlaps with the category’s, but the core concept of 'Agentic Software Delivery' is only distantly related through modernisation themes. There are no explicit or even implicit discussions of AI agents, autonomous systems, or human-agent collaboration.",
    "reasoning_summary": "This content advocates for modern CI/CD and software refactoring but does not discuss agentic software delivery, AI agents, or their integration. Only a minimal, indirect fit through generic modern engineering themes.",
    "level": "Ignored"
  }
}