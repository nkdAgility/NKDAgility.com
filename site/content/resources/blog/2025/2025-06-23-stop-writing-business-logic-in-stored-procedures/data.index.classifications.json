{
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-04-30T09:50:36",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like incremental change and continuous improvement, which are relevant to Kanban, it does not explicitly mention Kanban principles or practices, nor does it focus on visualisation of work or flow management. The discussion lacks depth in relation to Kanban, making it only tangentially related.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-04-30T09:50:39",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it briefly mentions a gradual approach to change, which could align with Agile principles, it does not explicitly discuss Scrum roles, events, or artifacts, nor does it focus on team dynamics or continuous improvement in the context of Scrum. Therefore, the alignment with the Scrum category is minimal.",
    "level": "Ignored"
  },
  "Product Development": {
    "category": "Product Development",
    "calculated_at": "2025-04-30T09:50:51",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the refactoring of business logic from stored procedures to application code, which touches on aspects of product development such as continuous improvement and iterative processes. However, it primarily focuses on technical implementation rather than broader product development methodologies or customer-centric approaches. While it mentions the importance of maintainability and testing, it lacks a direct connection to product strategy or customer feedback loops, which are crucial for the 'Product Development' category.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-04-30T09:50:48",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which touches on aspects of technical leadership such as improving engineering practices and reducing technical debt. However, it lacks a direct focus on guiding teams, mentoring, or fostering collaboration, which are key elements of technical leadership. The discussion is more about technical practices than leadership strategies, resulting in a moderate confidence score.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-04-30T09:50:43",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development, specifically the use of stored procedures for business logic. While it touches on the importance of refactoring and maintaining code quality, it does not directly address product management strategies, methodologies, or frameworks. The discussion lacks explicit mentions of product management concepts and does not delve into customer needs, business objectives, or the strategic alignment necessary for product success.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-04-30T09:50:56",
    "ai_confidence": 25.0,
    "ai_mentions": 100.0,
    "ai_alignment": 30.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses refactoring and improving engineering practices, which aligns with Lean principles of continuous improvement and waste reduction. However, it primarily focuses on software development practices rather than Lean methodologies specifically. The mention of reducing technical debt and improving maintainability hints at Lean concepts, but the overall discussion lacks depth in Lean-specific tools or methodologies, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-04-30T09:50:54",
    "ai_confidence": 72.0,
    "ai_mentions": 2,
    "ai_alignment": 80.0,
    "ai_depth": 65.0,
    "non_ai_confidence": 50,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which aligns with DevOps principles of automation, continuous delivery, and reducing technical debt. It mentions CI/CD practices and the need for testability and maintainability, which are key aspects of DevOps. However, the primary focus is on coding practices rather than broader DevOps culture or collaboration, leading to a slightly lower confidence score.",
    "level": "Secondary"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-04-30T09:50:45",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the refactoring of stored procedures. While it touches on the importance of modern engineering discipline, it does not explicitly discuss leadership roles, strategies, or frameworks that align with Agile or DevOps principles. The mention of teams and the need for a commitment to discipline is too vague to be considered a substantial discussion on leadership.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-04-30T09:51:01",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable and testable code, which aligns closely with the principles of software craftsmanship and quality assurance. It provides detailed reasoning and examples that highlight best practices in coding standards, CI/CD practices, and technical debt management. The depth of discussion is significant, as it covers multiple aspects of engineering excellence, including testing, maintainability, and the impact on development processes.",
    "level": "Primary"
  },
  "Hybrid Agile": {
    "category": "Hybrid Agile",
    "calculated_at": "2025-04-30T09:51:04",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not discuss Hybrid Agile methodologies, nor does it critically examine the integration of traditional and agile practices. The mention of incremental change aligns loosely with agile principles, but there is no direct reference to Hybrid Agile concepts or challenges.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-04-30T09:51:07",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts of continuous improvement and efficiency, it does not explicitly discuss Lean Product Development principles or techniques for waste elimination in the product lifecycle. The discussion lacks direct mentions of Lean methodologies, customer feedback, or integration with Agile practices, which are crucial for a higher confidence score in this category.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-04-30T09:51:11",
    "ai_confidence": 75.0,
    "ai_mentions": 3,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 75.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code, which aligns with Continuous Delivery principles. It mentions the importance of testability, CI/CD, and reducing technical debt, all of which are relevant to Continuous Delivery. However, the primary focus is on the architectural debate rather than a comprehensive exploration of Continuous Delivery practices, which limits its depth in this specific category.",
    "level": "Secondary"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-04-30T09:51:14",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like continuous improvement and reducing waste (in terms of technical debt), it does not explicitly discuss Lean Thinking principles or tools. The alignment with Lean principles is minimal, as the content does not delve into value stream mapping, waste identification, or Lean leadership. Overall, the discussion is more about software engineering practices than Lean Thinking itself.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-04-30T09:51:17",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention the Product Backlog, Agile methodologies, or any related concepts, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-04-30T09:51:20",
    "ai_confidence": 75.0,
    "ai_mentions": 3,
    "ai_alignment": 80.0,
    "ai_depth": 70.0,
    "non_ai_confidence": 10,
    "final_score": 75.0,
    "reasoning": "The content discusses the importance of refactoring business logic out of stored procedures into testable code, which aligns with the principles of automated testing. It mentions the inability to properly test stored procedures and highlights the benefits of increased testability and maintainability when moving logic to application code. The discussion on CI/CD practices and the need for automated testing frameworks further supports its relevance to the category. However, while the content is focused on the implications of stored procedures on testing, it does not delve deeply into specific automated testing methodologies or tools, which slightly lowers the depth score.",
    "level": "Secondary"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-04-30T09:51:24",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention the Sprint Review or its processes, roles, or best practices, which are essential for alignment with the category. The discussion is entirely unrelated to the Sprint Review event in the Scrum framework.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-04-30T09:51:27",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to maintainable code, which aligns with the principles of delivering working software. It highlights the need for testability, maintainability, and continuous delivery, all of which are key aspects of working software. The discussion is detailed and provides specific reasons and benefits for moving away from stored procedures, indicating a strong focus on improving software quality and functionality. However, it does not explicitly mention working software as an artifact or its role in Agile frameworks, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-04-30T09:51:30",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than portfolio management. It does not mention any aspects of strategic alignment, prioritisation, or value optimisation related to managing a portfolio of projects. The discussion is more about technical implementation and refactoring strategies, which are not relevant to the category of Portfolio Management.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "category": "Continuous Improvement",
    "calculated_at": "2025-04-30T09:51:34",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 10,
    "final_score": 82.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more maintainable code, which aligns with the principles of Continuous Improvement. It emphasises incremental changes, the importance of testing, and the benefits of a modernisation strategy that reduces technical debt over time. The author provides a clear rationale for moving away from outdated practices, which supports a culture of experimentation and learning. The depth of discussion on the challenges and benefits of refactoring further strengthens its alignment with Continuous Improvement principles.",
    "level": "Primary"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-04-30T09:51:39",
    "ai_confidence": 72.0,
    "ai_mentions": 3,
    "ai_alignment": 85.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures into testable code, which aligns with the principles of test automation. It mentions the inability to properly test stored procedures and highlights the benefits of moving towards a more testable architecture, which is a core theme of test automation. The depth of discussion on the challenges of testing stored procedures and the benefits of refactoring into maintainable code supports a strong alignment with the category, although it does not focus exclusively on test automation tools or frameworks.",
    "level": "Secondary"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-04-30T09:51:42",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on themes of incremental change and modernisation, it does not explicitly discuss complexity science or its principles. The discussion lacks depth in relation to complexity thinking, as it does not reference frameworks like Cynefin or concepts such as emergence and self-organisation. Overall, the content is more aligned with traditional software engineering practices rather than the complexities of organisational behaviour or systems thinking.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-04-30T09:51:45",
    "ai_confidence": 65.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 70.0,
    "non_ai_confidence": 10,
    "final_score": 65.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic, highlighting issues related to testing, CI/CD participation, and version control. It mentions CI/CD explicitly and discusses how stored procedures hinder these practices. However, the primary focus is on refactoring and architectural decisions rather than a comprehensive exploration of Continuous Integration principles and practices. While it aligns with CI concepts, it does not delve deeply into CI tools or broader CI strategies, which limits its depth of discussion.",
    "level": "Secondary"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-04-30T09:51:49",
    "ai_confidence": 25.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of system configuration, such as CI/CD and testing, the main focus is on software development practices rather than the configuration of systems. The mentions of system-related issues are secondary to the overall message about coding practices, leading to a low confidence score in the context of system configuration.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-04-30T09:51:52",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it discusses the importance of modern engineering practices and incremental change, it does not explicitly address self-organisation principles, team autonomy, or the role of leadership in fostering a self-organising culture. The discussion lacks depth in exploring how these practices relate to self-organisation, making it only tangentially relevant to the category.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-04-30T09:51:54",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic in software development. It does not discuss collaboration tools or their impact on Agile teams, nor does it provide any insights into team communication or coordination. While it touches on engineering practices, it does not align with the core themes of collaboration tools, resulting in a very low confidence score.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-04-30T09:51:57",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development and the refactoring of business logic from stored procedures to application code. While it discusses decision-making in the context of software engineering practices, it does not explicitly address decision theory concepts such as heuristics, biases, or frameworks for decision-making under uncertainty. The mention of a strategy for refactoring could be seen as a decision-making process, but it lacks depth and does not engage with the broader themes of decision theory.",
    "level": "Ignored"
  },
  "Competence": {
    "category": "Competence",
    "calculated_at": "2025-04-30T09:52:01",
    "ai_confidence": 72.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to maintainable code, which aligns with the principles of competence in software engineering. It highlights the need for continuous improvement, skill development, and the importance of testability and maintainability in engineering practices. The discussion is detailed, providing specific reasons why stored procedures are detrimental to engineering excellence and outlining a strategy for gradual improvement. However, while it touches on competence, it does not explicitly frame the discussion within the broader context of Agile or DevOps methodologies, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Scaling": {
    "category": "Scaling",
    "calculated_at": "2025-04-30T09:52:04",
    "ai_confidence": 25.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more scalable and maintainable code practices. While it touches on the importance of scalability in the context of software engineering, it does not delve into methodologies or frameworks for scaling Agile practices or cross-team collaboration, which are central to the 'Scaling' category. The focus is primarily on technical debt and refactoring strategies rather than the broader enterprise-level scaling discussions outlined in the category definition.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-04-30T09:52:08",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the importance of modern engineering practices and incremental change, it does not explicitly discuss coaching, mentoring, or the facilitation of growth and development within teams. The themes of collaboration and support are not present, leading to a low confidence score in the Coaching category.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-04-30T09:52:10",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, without explicitly discussing Agile values or principles. While it touches on concepts like incremental change and continuous improvement, which are aligned with Agile principles, these are not the main focus of the discussion. The content lacks direct mentions of Agile methodologies, the Agile Manifesto, or the core values and principles that underpin Agile practices.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-04-30T09:52:13",
    "ai_confidence": 65.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 60.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the inefficiencies of using stored procedures for business logic, highlighting how they hinder testing, CI/CD processes, and scalability, which aligns with the principles of Flow Efficiency. It mentions the importance of refactoring to improve maintainability and throughput, which are key aspects of optimising flow. However, while it touches on these concepts, the primary focus is on the drawbacks of stored procedures rather than a comprehensive exploration of flow efficiency principles or techniques. Therefore, the confidence score reflects a moderate alignment with the category.",
    "level": "Secondary"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-04-30T09:52:17",
    "ai_confidence": 85.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 85.0,
    "reasoning": "The content primarily focuses on the operational practice of refactoring business logic out of SQL stored procedures into more maintainable and testable code. It discusses the inefficiencies and risks associated with stored procedures, aligning well with the category's emphasis on improving operational efficiency. The depth of discussion is substantial, providing specific reasons and strategies for refactoring, which enhances the overall operational practices in software development. The content is practical and actionable, making it a strong fit for the category.",
    "level": "Primary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-04-30T09:52:20",
    "ai_confidence": 65.0,
    "ai_mentions": 2,
    "ai_alignment": 30,
    "ai_depth": 35,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic, highlighting issues related to CI/CD and the impact on deployment practices. While it does mention the importance of moving towards testable and maintainable code, which can indirectly relate to deployment frequency, the primary focus is on refactoring and architectural decisions rather than optimising deployment intervals. The discussion on CI/CD practices and the benefits of refactoring does provide some alignment with the category, but it is not the main focus of the content.",
    "level": "Secondary"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-04-30T09:52:23",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 10,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of reliability, such as testing and maintainability, it does not explicitly discuss Site Reliability Engineering principles or practices. The discussion lacks depth in SRE-specific topics like incident response, SLOs, or automation, leading to a low confidence score in alignment with the SRE category.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-04-30T09:52:27",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the importance of modern engineering practices and mentions team dynamics indirectly (e.g., through references to team experiences), it lacks a direct discussion on collaboration, decision-making, or value delivery as defined in the Social Technologies category. The content does not provide substantial insights into social frameworks or methodologies that promote collective intelligence or transparency within organisations.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-04-30T09:52:30",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention forecasting, Agile, or Scrum methodologies, nor does it explore any techniques or practices related to predicting delivery timelines or managing risks. The focus is on software engineering practices rather than forecasting within Agile frameworks.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-04-30T09:52:33",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of visibility and control in software development, it does not explicitly discuss transparency in Agile processes, nor does it provide detailed insights into fostering trust and accountability among team members. The mention of CI/CD and testing practices hints at the importance of visibility but lacks a direct connection to the core themes of transparency in Agile methodologies.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-04-30T09:52:36",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the importance of refactoring and modern engineering practices, it does not discuss mentoring, coaching, or the development of skills and behaviours necessary for effective practice in Agile or related methodologies. The lack of direct mentions and minimal conceptual alignment with the mentoring category results in a very low confidence score.",
    "level": "Ignored"
  },
  "GitHub": {
    "category": "GitHub",
    "calculated_at": "2025-04-30T09:52:39",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. However, it does not mention GitHub or its functionalities, nor does it align with the core themes of GitHub such as version control, collaboration, or CI/CD pipelines specifically related to GitHub. The discussion is primarily focused on software engineering practices without any direct connection to GitHub services or tools.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-04-30T09:52:43",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic in software development, advocating for a shift towards more maintainable and testable code practices. While it touches on themes of modernisation and incremental change, it does not explicitly discuss the principles of Beta Codex, such as decentralisation or human-centric organisational design. The discussion lacks depth in relation to the core tenets of Beta Codex, making it only tangentially related to the category.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-04-30T09:52:47",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like maintainability and testing, it does not directly address product validation methodologies, user feedback, or market fit, which are central to the 'Product Validation' category. The focus is more on technical practices rather than validating product ideas through user engagement.",
    "level": "Ignored"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-04-30T09:52:50",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on aspects of improving engineering practices that could indirectly relate to throughput, such as reducing technical debt and enabling faster feedback loops, it does not explicitly discuss throughput as a delivery metric or provide any analysis or visualisation of throughput. The discussion lacks depth in terms of throughput metrics, making it a secondary topic rather than a primary focus.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-04-30T09:52:53",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not discuss asynchronous development principles, tools, or practices, nor does it address team collaboration across time zones. The mention of incremental change could loosely relate to asynchronous workflows, but this is not the primary focus of the content.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-04-30T09:52:56",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not mention or discuss any of the Scrum Values such as commitment, courage, focus, openness, or respect. While there is a brief mention of team dynamics in the context of engineering practices, it lacks a direct connection to the principles of Scrum, resulting in a very low confidence score for alignment with the category.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-04-30T09:52:59",
    "ai_confidence": 85.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 85.0,
    "reasoning": "The content discusses practical strategies for refactoring business logic from stored procedures to application code, which aligns well with pragmatic thinking in software development. It emphasises incremental change, real-world applications of DevOps principles, and the importance of maintainability and testability in engineering practices. The depth of discussion is substantial, providing specific reasons and benefits for the proposed changes, which further supports its alignment with the category. However, while it touches on Agile principles, it does not explicitly mention Agile or Scrum frameworks, which slightly lowers the confidence score.",
    "level": "Primary"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-04-30T09:53:03",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 40,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content focuses extensively on the technical drawbacks of using stored procedures for business logic, advocating for refactoring towards more maintainable and testable code. It discusses best practices in software design, emphasising the importance of testability, CI/CD integration, and separation of concerns, which are all core themes of Technical Mastery. The depth of the discussion is significant, providing detailed reasoning and examples that align with the principles of clean code and software craftsmanship. Overall, the content is a strong fit for the category, with a high confidence score reflecting its comprehensive treatment of the subject.",
    "level": "Primary"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-04-30T09:53:06",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the refactoring of stored procedures. While it mentions the impact of these practices on teams, it does not explicitly discuss team motivation, engagement, or dynamics. The discussion lacks depth in exploring psychological or social aspects that drive team performance, which are central to the 'Team Motivation' category.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-04-30T09:53:09",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development, specifically the use of stored procedures in SQL. While it discusses the importance of refactoring and modern engineering practices, it does not address Agile leadership principles, such as empowering teams, fostering a culture of trust, or navigating organisational change. The discussion lacks direct mentions of leadership roles or practices within an Agile context, leading to a low confidence score for alignment with the Agile Leadership category.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-04-30T09:53:14",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention backlog refinement, Agile practices, or Scrum methodologies, which are essential for this category. While there are elements of iterative improvement and engineering discipline, they do not directly relate to backlog refinement or its key topics.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-04-30T09:53:19",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it briefly touches on team dynamics by mentioning real teams and their experiences, it does not delve into the core themes of team collaboration, such as communication, shared ownership, or fostering a culture of trust. The discussion lacks depth in exploring how these practices impact teamwork or project success, leading to a low confidence score in the 'Team Collaboration' category.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-04-30T09:53:22",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it discusses the importance of refactoring and maintaining code quality, it does not address psychological safety or its relevance to team dynamics, communication, or innovation. The mention of team experiences is minimal and does not connect to the core themes of psychological safety, leading to a very low confidence score.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-04-30T09:53:26",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on themes of efficiency and improvement, it does not explicitly discuss Value Stream Management principles, techniques, or metrics. The discussion is more aligned with software engineering practices rather than the strategic approach of Value Stream Management.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-04-30T09:53:30",
    "ai_confidence": 72.0,
    "ai_mentions": 3,
    "ai_alignment": 85.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures into testable code, which aligns with the principles of Test First Development. It mentions the need for testability, maintainability, and the benefits of faster feedback loops, which are core themes of the category. However, while it touches on testing practices, it does not explicitly discuss Test First Development methodologies like TDD or ATDD, which slightly lowers the confidence score. Overall, the content provides a detailed argument for moving towards a testable codebase, reflecting a strong alignment with Test First principles.",
    "level": "Secondary"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-04-30T09:53:33",
    "ai_confidence": 62.0,
    "ai_mentions": 2,
    "ai_alignment": 75.0,
    "ai_depth": 55.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of refactoring and modern engineering practices, which aligns with the principles of Continuous Learning. It mentions the need for incremental improvements and the benefits of adopting a growth mindset in software development. However, while it touches on aspects of continuous improvement and knowledge sharing, it primarily focuses on technical practices rather than broader team dynamics or cultural aspects of Continuous Learning, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-04-30T09:53:36",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. It does not discuss customer satisfaction, customer experience, or any related metrics or strategies. While it touches on improving engineering practices, it lacks any direct connection to customer needs or satisfaction, making it largely irrelevant to the specified category.",
    "level": "Ignored"
  },
  "Project Management": {
    "category": "Project Management",
    "calculated_at": "2025-04-30T09:53:40",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on software engineering practices, specifically advocating against the use of stored procedures for business logic. While it touches on concepts of refactoring and incremental change, which could relate to project management in a very broad sense, it lacks direct mentions of project management principles, methodologies, or roles. The discussion does not delve into project lifecycle phases, tools, or governance structures, which are key aspects of project management. Therefore, the alignment and depth of discussion are minimal, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-04-30T09:53:43",
    "ai_confidence": 35.0,
    "ai_mentions": 5,
    "ai_alignment": 40.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 20,
    "final_score": 35.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more maintainable code, which indirectly touches on innovation in engineering practices. However, it primarily focuses on technical debt and refactoring strategies rather than fostering a culture of innovation or providing metrics for assessing innovation capability. While it mentions the benefits of refactoring, it lacks a broader discussion on innovation processes, metrics, or case studies that would align more closely with the 'Ability to Innovate' category.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-04-30T09:53:47",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring and improving engineering practices, which aligns with Lean principles of continuous improvement and waste reduction. However, it primarily focuses on the technical aspects of software development rather than explicitly addressing Lean principles. The mention of reducing technical debt and improving maintainability hints at Lean concepts, but the overall discussion lacks a direct focus on Lean methodologies or tools, resulting in a moderate confidence score.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-04-30T09:53:51",
    "ai_confidence": 45.0,
    "ai_mentions": 2,
    "ai_alignment": 60.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the importance of refactoring and modernising code practices, which indirectly supports the principles of frequent releases by advocating for incremental improvements and maintaining a sustainable engineering future. However, it does not explicitly focus on the concept of frequent releases or continuous delivery, and the discussion on CI/CD is limited. The primary focus is on the drawbacks of stored procedures rather than on release frequency or strategies for delivering updates to users.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-04-30T09:53:54",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like continuous delivery and improving maintainability, it lacks direct discussions on metrics, data utilisation, or feedback mechanisms that are central to the 'Metrics and Learning' category. The alignment with the core themes is moderate, as it hints at iterative improvement but does not delve into evidence-based decision-making or specific metrics. The depth of discussion is limited, primarily offering a high-level overview of the issues without detailed exploration of metrics or learning methodologies.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-04-30T09:53:58",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not discuss working agreements, team norms, or collaboration principles, which are essential for the 'Working Agreements' category. While it touches on team dynamics indirectly by mentioning real teams and their experiences, it lacks a structured approach to teamwork or collaboration, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-04-30T09:54:00",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses technical practices related to software development and the use of SQL stored procedures. It does not directly address any psychological principles, theories, or discussions relevant to organisational psychology. While it touches on team dynamics and engineering practices, these are not explored from a psychological perspective, leading to a very low confidence score in alignment with the category.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-04-30T09:54:03",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the implications of using stored procedures for business logic and how this practice affects engineering teams. While it touches on team dynamics and the need for modern engineering practices, it primarily focuses on technical aspects rather than evaluating team performance metrics or systemic behaviours. The mention of team experiences and the need for discipline in engineering practices provides some alignment, but the depth of discussion is more about technical refactoring than team performance as defined in the category.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-04-30T09:54:07",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the refactoring of business logic from stored procedures to application code, which touches on aspects of application maintenance and improvement. However, it primarily focuses on coding practices rather than the broader scope of Application Lifecycle Management, such as governance, deployment, or retirement of applications. While it mentions the importance of testing and CI/CD, it does not delve into the full lifecycle stages or provide comprehensive insights into ALM methodologies or tools.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "category": "Agnostic Agile",
    "calculated_at": "2025-04-30T09:54:10",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, without any direct mention of Agnostic Agile principles or discussions. While it touches on the importance of modern engineering practices, it does not engage with the core themes of Agnostic Agile, such as ethical considerations, value delivery, or comparisons with agile frameworks. The discussion lacks depth in relation to Agnostic Agile, making it a secondary topic at best.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-04-30T09:54:13",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not discuss cross-functional teams, their structure, benefits, or any related Agile methodologies, which are central to the category. The mention of teams is very indirect and does not align with the core themes of cross-functional collaboration.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-04-30T09:54:16",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in SQL, focusing on software engineering practices rather than any aspects of the Windows operating system. There are no direct mentions of Windows, and the discussion does not align with the key topics outlined for the Windows category, such as installation, configuration, or troubleshooting of the Windows OS.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-04-30T09:54:19",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on the importance of incremental change, it does not explicitly address the concept of Increment in Agile or Scrum methodologies, nor does it focus on delivering working software increments. The discussion lacks depth regarding the value delivered by increments or their relationship to Scrum artifacts.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-04-30T09:54:22",
    "ai_confidence": 65.0,
    "ai_mentions": 100.0,
    "ai_alignment": 70.0,
    "ai_depth": 60.0,
    "non_ai_confidence": 20,
    "final_score": 65.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It briefly mentions the Azure DevOps team as an example of gradual improvement in engineering practices, which aligns with the category. However, the primary focus is on coding practices rather than Azure DevOps functionalities or methodologies, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-04-30T09:54:25",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on the importance of testing and maintainability, it does not explicitly mention hypothesis formulation, experimentation, or data-driven decision-making, which are central to hypothesis-driven development. The focus is more on engineering practices rather than on the iterative, experimental approach that characterises hypothesis-driven development.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-04-30T09:54:28",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, without any direct mention or discussion of customer feedback loops. While it touches on improving engineering practices and mentions benefits like faster feedback loops, it does not explore mechanisms for integrating customer feedback into product development or how such feedback influences decision-making. Therefore, it lacks the necessary focus and depth to align with the category of Customer Feedback Loops.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "category": "Agentic Agility",
    "calculated_at": "2025-04-30T09:54:32",
    "ai_confidence": 32.0,
    "ai_mentions": 0,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which aligns with the concept of agency in terms of taking intentional actions to improve software practices. However, it does not explicitly mention agency or adaptive actions within Agile frameworks, nor does it delve deeply into the implications of agency in team dynamics or organisational evolution. The focus is more on technical practices rather than the broader implications of agentic agility.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-04-30T09:54:34",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it discusses the importance of refactoring and maintaining code quality, it does not address Lean Startup principles such as MVP, the Build-Measure-Learn feedback loop, or validated learning. The discussion lacks direct relevance to Lean Startup methodologies, making it only tangentially related to the category.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-04-30T09:54:37",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts related to software development efficiency, it does not explicitly mention Cycle Time or its measurement, nor does it delve into the implications of Cycle Time on workflow efficiency. The focus is on architectural decisions rather than the specific metric of Cycle Time.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-04-30T09:54:40",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the technical aspects of software engineering practices, specifically the drawbacks of using stored procedures for business logic. It does not mention the Product Owner role or its accountability within Scrum, nor does it address topics related to backlog prioritisation, stakeholder communication, or product value maximisation. The focus is on engineering discipline rather than the strategic decision-making responsibilities of a Product Owner.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-04-30T09:54:42",
    "ai_confidence": 0,
    "ai_mentions": 0,
    "ai_alignment": 0,
    "ai_depth": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content focuses entirely on the drawbacks of using stored procedures for business logic and does not mention the Daily Scrum or any related Scrum practices. It lacks any discussion on team alignment, communication, or Scrum events, which are essential for the Daily Scrum category.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-04-30T09:54:45",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on refactoring and modern engineering practices. It does not mention Value Stream Mapping or its principles, nor does it align with the core themes of VSM, such as visualising workflows or optimising value delivery. The discussion is more related to software engineering and project management rather than Lean methodologies or VSM.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "category": "Shift-Left Strategy",
    "calculated_at": "2025-04-30T09:54:48",
    "ai_confidence": 75.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 35,
    "non_ai_confidence": 0,
    "final_score": 75.0,
    "reasoning": "The content discusses the importance of refactoring business logic out of stored procedures into testable code, which aligns with the Shift-Left Strategy by emphasising early integration of testing and maintainability in the development process. It highlights the benefits of improved testing, faster feedback loops, and reduced technical debt, which are core themes of the Shift-Left approach. However, while it touches on these principles, the primary focus is on the drawbacks of stored procedures rather than a comprehensive exploration of Shift-Left practices, leading to a slightly lower confidence score.",
    "level": "Secondary"
  },
  "Liberating Structures": {
    "category": "Liberating Structures",
    "calculated_at": "2025-04-30T09:54:50",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than facilitation techniques or team interactions. There are no direct mentions of Liberating Structures or their application in collaborative settings, and the discussion does not align with the core themes of engagement, participation, or facilitation methods outlined in the category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "category": "Open Space Agile",
    "calculated_at": "2025-04-30T09:54:53",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention Open Space Agile or its principles, nor does it discuss topics related to organisational agility, collective participation, or psychological safety. The discussion is centred around technical practices rather than the collaborative change processes that define Open Space Agile.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-04-30T09:54:55",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to more maintainable code, which aligns with the principles of business agility by promoting adaptability and efficiency in software development. However, the primary focus is on technical practices rather than broader organisational strategies or leadership roles in fostering business agility. While it touches on the need for incremental change and the benefits of modern engineering practices, it lacks a comprehensive exploration of business agility as a concept, resulting in a moderate confidence score.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-04-30T09:54:58",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it briefly touches on concepts like incremental change and continuous improvement, it does not explicitly discuss Agile principles or the Agile mindset. The discussion lacks depth in relation to Agile philosophy, making it a secondary mention rather than a primary focus.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-04-30T09:55:01",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the practice of refactoring business logic out of SQL stored procedures, discussing the technical implications and benefits of this approach. While it touches on modern engineering practices, it does not explicitly analyse trends within Agile, DevOps, or business agility frameworks. The discussion lacks direct references to emerging trends or strategic decision-making, which are central to the Trend Analysis category.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-04-30T09:55:04",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like incremental change and continuous improvement, it does not explicitly discuss empirical process control principles such as transparency, inspection, or adaptation in an Agile context. The discussion lacks direct references to Agile methodologies or empirical process control frameworks, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-04-30T09:55:08",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on software engineering practices, specifically the refactoring of business logic from SQL stored procedures to application code. While it touches on themes of change management and incremental improvement, it does not explicitly discuss systems thinking or organisational dynamics. The discussion lacks depth in relation to organisational behaviour or the interplay of organisational elements, which are central to the category of Organisational Physics.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-04-30T09:55:11",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on concepts like incremental change and improving maintainability, it does not explicitly discuss Systems Thinking principles such as interconnectedness, feedback loops, or holistic analysis. The discussion is more aligned with software engineering practices rather than the broader organisational dynamics and methodologies associated with Systems Thinking.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-04-30T09:55:15",
    "ai_confidence": 55.0,
    "ai_mentions": 2,
    "ai_alignment": 60.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 30,
    "final_score": 55.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of version control, such as the challenges of version-controlling stored procedures, the primary focus is on architectural decisions rather than modern source control practices. The mention of CI/CD and the need for testable code aligns with the category, but the overall depth and primary focus on refactoring strategies reduce the confidence score.",
    "level": "Tertiary"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-04-30T09:55:19",
    "ai_confidence": 45.0,
    "ai_mentions": 2,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 10,
    "final_score": 45.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and highlights the importance of CI/CD practices, which indirectly relates to Azure Pipelines. However, it does not focus specifically on Azure Pipelines or provide detailed insights into its configuration, management, or practices. The mentions of CI/CD and tooling suggest some relevance, but the primary focus is on stored procedures rather than Azure Pipelines specifically.",
    "level": "Tertiary"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-04-30T09:55:22",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not discuss market share, competitive strategies, or any related topics that would align with the category of Market Share. The mention of improving engineering practices may indirectly relate to business efficiency, but it lacks any direct connection to market presence or competitive advantage.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "category": "Company as a Product",
    "calculated_at": "2025-04-30T09:55:25",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 20,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on themes of modernisation and improving engineering practices, it does not explicitly discuss the concept of treating the organisation as a product or integrating customer feedback into organisational design. The discussion lacks depth in relation to CaaP principles and does not provide insights into organisational culture or cross-functional collaboration.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "category": "Minimum Viable Product",
    "calculated_at": "2025-04-30T09:55:27",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts of incremental change and improving engineering practices, it does not directly address Minimum Viable Products, their definition, or their role in product development. The focus is more on technical debt and software engineering rather than MVP strategies or market validation.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-04-30T09:55:30",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts related to software development efficiency, it does not explicitly mention Lead Time or its measurement, nor does it explore its relationship with Cycle Time or other observability metrics. The focus is on architectural decisions rather than the time taken from initiation to delivery, which is the essence of Lead Time.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-04-30T09:55:34",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on software engineering practices, specifically the drawbacks of using stored procedures for business logic. While it touches on concepts like maintainability and technical debt, it does not directly address entrepreneurship principles such as innovation, risk-taking, or value-driven decision-making. The discussion lacks explicit mentions of entrepreneurial strategies or the entrepreneurial mindset, leading to a low confidence score in the context of the Entrepreneurship category.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-04-30T09:55:38",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like CI/CD and testing, it does not explicitly discuss Internal Developer Platforms or their benefits, components, or best practices. The discussion is more about coding practices rather than the broader framework of an IDP, leading to a low confidence score in alignment with the category.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-04-30T09:55:41",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from SQL stored procedures to application code. While it touches on themes of modern engineering practices and continuous delivery, it does not explicitly discuss the Agile Product Operating Model or its principles. The discussion lacks direct mentions of product management, agile methodologies, or the transition from project to product ethos, which are central to the APOM framework.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-04-30T09:55:44",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development, specifically advocating against the use of stored procedures for business logic. While it touches on the need for change in engineering practices, it lacks a direct discussion on organisational change strategies, methodologies, or frameworks. The mention of incremental change and refactoring could be loosely related to organisational change, but it does not delve into the principles or practices that would align with the category's core themes. Overall, the content does not meet the criteria for a strong alignment with the 'Organisational Change' category.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-04-30T09:55:48",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. However, it does not explicitly mention Evidence-Based Management or its key topics. While it touches on concepts like improving maintainability and reducing technical debt, it lacks a focus on empirical decision-making or metrics that assess value delivery, which are central to EBM.",
    "level": "Ignored"
  },
  "Common Goals": {
    "category": "Common Goals",
    "calculated_at": "2025-04-30T09:55:50",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the importance of modern engineering practices, it does not explicitly discuss Common Goals within Agile or DevOps frameworks. The discussion lacks direct mentions of shared objectives or alignment strategies, and the depth of discussion is more about technical implementation rather than the overarching strategic alignment that characterises Common Goals.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-04-30T09:55:53",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than remote working or Agile methodologies. There are no direct mentions of remote work, team collaboration, or Agile practices, which are essential for the category. The content lacks relevance to the unique challenges and solutions associated with remote working in an Agile context.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-04-30T09:55:56",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the drawbacks of using stored procedures for business logic. While it discusses the importance of refactoring and modern engineering practices, it does not explicitly mention evidence-based leadership principles or the application of empirical evidence in leadership decision-making. The discussion lacks depth in relation to leadership and does not provide case studies or strategies related to fostering a culture of evidence-based decision-making.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-04-30T09:55:58",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention the Scrum Team, its roles, or any accountability within the Scrum framework. While it references a team (Azure DevOps) in a general sense, it does not align with the specific themes or responsibilities of a Scrum Team as defined in the Scrum Guide.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-04-30T09:56:01",
    "ai_confidence": 32.0,
    "ai_mentions": 100.0,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more maintainable code, which implies a change in practices. However, it primarily focuses on technical aspects of software engineering rather than broader change management strategies. While it mentions the importance of incremental change and modernisation, it lacks a comprehensive exploration of change management principles, stakeholder engagement, or leadership roles in guiding transformation, which are key topics in the Change Management category.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-04-30T09:56:04",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts related to software quality and testing, it does not explicitly discuss the Definition of Done or its criteria, nor does it align with the core themes of the DoD. The discussion is more about engineering practices than the shared understanding of completion criteria in Agile and Scrum.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-04-30T09:56:07",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on refactoring and modern engineering practices. It does not mention AI or its integration within Agile methodologies, DevOps practices, or software development processes, which are the core themes of the 'Artificial Intelligence' category. The discussion is more about software engineering principles rather than AI applications.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-04-30T09:56:10",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to more maintainable code, which indirectly relates to market adaptability by promoting agile practices and continuous delivery. However, it lacks a direct focus on market adaptability strategies, such as Agile methodologies or DevOps practices, and does not provide in-depth discussions on how these changes enhance responsiveness to market shifts. The mention of Azure DevOps and the benefits of refactoring suggest some alignment with adaptability principles, but the overall depth and focus remain limited.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-04-30T09:56:13",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention Agile Planning Tools, nor does it align with the core themes of Agile methodologies, such as backlog management, sprint planning, or team collaboration. The focus is on software engineering practices rather than Agile planning tools, resulting in a very low confidence score.",
    "level": "Ignored"
  },
  "Current Value": {
    "category": "Current Value",
    "calculated_at": "2025-04-30T09:56:16",
    "ai_confidence": 25.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on the importance of improving engineering practices, it does not explicitly address Current Value or its metrics, nor does it provide a real-time assessment of value delivered. The focus is more on technical practices rather than the evaluation of value in the context of Evidence-Based Management.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-04-30T09:56:19",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from SQL stored procedures to application code. It does not discuss customer needs, product features, or methodologies related to product discovery. While it touches on the importance of maintainability and testing, these are not aligned with the core themes of understanding user requirements or validating product ideas.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-04-30T09:56:22",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 20,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, which is more aligned with software engineering practices than with large-scale Agile methodologies. While it touches on concepts like incremental change and improving maintainability, it does not explicitly discuss frameworks, enterprise-level strategies, or cross-team collaboration that are central to the Large Scale Agility category.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-04-30T09:56:25",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, which is more aligned with software engineering practices than with enterprise agility. While it touches on themes of incremental change and improving engineering practices, it lacks a broader organisational context or discussion on how these practices contribute to overall enterprise agility. There are no direct mentions of agile frameworks, organisational structures, or leadership roles that would typically be associated with enterprise agility.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-04-30T09:56:28",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention estimation techniques, Agile or Scrum frameworks, or any related concepts. The focus is on software engineering practices rather than estimation, leading to a very low confidence score.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-04-30T09:56:31",
    "ai_confidence": 15.0,
    "ai_mentions": 5,
    "ai_alignment": 10,
    "ai_depth": 20,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the technical practice of avoiding business logic in stored procedures, providing actionable insights and guidance on refactoring and modern engineering practices. It directly references principles of software development and engineering excellence, which are not aligned with the Miscellaneous category. While it does touch on broader themes of software development, the depth and focus on specific practices and methodologies related to coding and engineering principles indicate a strong alignment with established practices rather than a miscellaneous discussion.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-04-30T09:56:35",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the importance of refactoring and modern engineering practices, it does not engage with the core themes of product strategy such as vision formulation, market analysis, or customer-centric approaches. The discussion is more about technical implementation rather than strategic planning or product development methodologies.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-04-30T09:56:37",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more maintainable code, which aligns with the principles of continuous improvement and adaptability. However, it primarily focuses on technical practices rather than broader organisational strategies or cultural shifts that enhance agility. The mention of incremental change and modernisation strategies hints at agility but lacks a direct focus on organisational structures or leadership roles that foster agility.",
    "level": "Ignored"
  },
  "One Engineering System": {
    "category": "One Engineering System",
    "calculated_at": "2025-04-30T09:56:40",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 30,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on themes of modern engineering discipline and improving software quality, it does not explicitly mention the One Engineering System (1ES) framework or its principles. The discussion lacks depth regarding integration, standardisation, or the specific methodologies of 1ES, leading to a low confidence score in alignment with the category.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-04-30T09:56:45",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on the importance of testing and improving engineering practices, it does not explicitly mention experimentation, hypothesis-driven approaches, or systematic testing of ideas within Agile workflows. The focus is more on architectural decisions rather than on experimentation as a method for validating assumptions or driving continuous improvement.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-04-30T09:56:48",
    "ai_confidence": 15.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the importance of modern engineering practices, it lacks a clear discussion of long-term strategic goals or alignment with agile principles. The mention of a 'strategy' for refactoring is too operational and does not delve into how these practices contribute to broader organisational objectives or business agility.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "category": "Unrealised Value",
    "calculated_at": "2025-04-30T09:56:52",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 30.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on the idea of improving engineering practices, it does not explicitly discuss the concept of Unrealised Value or its indicators, nor does it explore potential improvements or innovations in a way that aligns with the category's focus. The discussion is more about operational efficiency rather than identifying untapped opportunities for value capture.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-04-30T09:56:55",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more testable and maintainable code. It aligns closely with the principles of Technical Excellence by emphasising the importance of testability, CI/CD practices, and modular architecture. The depth of discussion is significant, providing detailed reasons why stored procedures hinder engineering practices and outlining a clear strategy for improvement. Overall, the content is a strong fit for the category, focusing on high-level engineering practices that enhance software quality.",
    "level": "Primary"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-04-30T09:57:01",
    "ai_confidence": 65.0,
    "ai_mentions": 3,
    "ai_alignment": 70.0,
    "ai_depth": 60.0,
    "non_ai_confidence": 20,
    "final_score": 65.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures into testable code, which aligns with TDD principles. It mentions the need for unit tests and highlights the benefits of improved maintainability and faster feedback loops, which are core themes of TDD. However, the primary focus is on the drawbacks of stored procedures rather than a detailed exploration of TDD practices, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-04-30T09:57:06",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 50.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which aligns with the principles of product delivery, particularly in terms of improving maintainability, enabling faster feedback loops, and supporting continuous delivery. However, while it touches on aspects of deployment and testing, it does not explicitly address broader product delivery methodologies or practices, which limits its overall alignment with the category.",
    "level": "Secondary"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-04-30T09:57:10",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 20,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses the drawbacks of using stored procedures for business logic, advocating for refactoring towards more maintainable and testable code. It aligns closely with core themes of software development, such as code quality, maintainability, and CI/CD practices. The depth of discussion is significant, providing detailed reasons and a strategic approach to modernising code practices, which enhances its relevance to the Software Development category.",
    "level": "Primary"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-04-30T09:57:13",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 20,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more testable code. While it touches on the importance of testability, it does not explicitly mention Acceptance Test Driven Development (ATDD) or its principles, nor does it discuss acceptance criteria or collaboration among stakeholders, which are key aspects of ATDD. The focus is more on coding practices and architectural decisions rather than the collaborative approach of ATDD.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-04-30T09:57:15",
    "ai_confidence": 25.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses refactoring and modern engineering practices, which can relate to Agile principles of continuous improvement and adaptability. However, it primarily focuses on technical practices rather than strategic alignment or broader Agile methodologies. The mention of a progressive modernisation strategy hints at Agile concepts, but the overall emphasis is on technical execution rather than strategic planning or organisational vision.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-04-30T09:57:19",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 3.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it briefly mentions CI/CD in relation to stored procedures, it does not focus on Azure Repos or its functionalities, best practices, or integration. The primary focus is on software engineering practices rather than Azure Repos, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-04-30T09:57:21",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the decision to stop using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on decision-making principles, such as incremental change and the importance of testing, it lacks a structured, evidence-based methodology and does not delve deeply into collaborative decision-making or empirical frameworks. The focus is more on technical practices than on the broader principles of decision-making within organisations.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-04-30T09:57:24",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. It does not mention the Definition of Ready or its criteria, nor does it address the importance of backlog item readiness in Agile practices. The focus is on technical implementation rather than Agile methodologies, leading to a very low confidence score in relation to the Definition of Ready.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-04-30T09:57:28",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. It does not mention the Scrum Master role, its responsibilities, or its impact on team effectiveness. While it discusses engineering practices, it lacks any reference to Scrum principles or the accountability of a Scrum Master.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-04-30T09:57:31",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software engineering, specifically the drawbacks of using stored procedures for business logic. While it touches on concepts like refactoring and continuous delivery, it does not directly address Agile Product Management principles, such as the role of the Product Owner, backlog prioritisation, or stakeholder engagement. The discussion lacks a clear connection to Agile methodologies or product management strategies, resulting in a very low confidence score for alignment with the category.",
    "level": "Ignored"
  },
  "Time to Market": {
    "category": "Time to Market",
    "calculated_at": "2025-04-30T09:57:34",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 20,
    "ai_depth": 7,
    "non_ai_confidence": 20,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to application code, which indirectly relates to improving Time to Market by enhancing maintainability and enabling faster feedback loops. However, it does not explicitly focus on Time to Market as a primary theme, nor does it provide detailed metrics or strategies specifically aimed at reducing the time from conception to delivery. The discussion is more about technical practices than the broader implications of Time to Market in an organisational context.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-04-30T09:57:39",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code, which does not directly address Agile transformation principles or methodologies. While it mentions incremental change and modernisation strategies, it lacks explicit discussions on Agile frameworks, leadership roles, or cultural shifts necessary for Agile transformation. The content is more aligned with software engineering practices than with the broader themes of Agile transformation.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-04-30T09:57:42",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on the technical aspects of refactoring business logic from stored procedures to application code. While it touches on the implications of this practice for engineering discipline and team dynamics, it lacks a direct discussion of sociotechnical interactions or organisational structures. The emphasis is on technical practices without adequately addressing the social context or the interplay between technology and organisational culture, which are central to the Sociotechnical Systems category.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-04-30T09:57:45",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic, which indirectly relates to troubleshooting by highlighting potential issues such as testing difficulties, lack of CI/CD integration, and maintainability challenges. However, it primarily focuses on advocating for refactoring rather than providing specific troubleshooting techniques or methodologies. The discussion lacks depth in terms of systematic problem-solving or case studies, which are key aspects of the troubleshooting category.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-04-30T09:57:49",
    "ai_confidence": 45.0,
    "ai_mentions": 5,
    "ai_alignment": 30,
    "ai_depth": 10,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses the need to refactor business logic from stored procedures to more modern coding practices, which aligns with the principles of digital transformation by advocating for improved engineering practices and operational efficiency. However, it lacks a broader discussion on strategic adoption of digital technologies or organisational culture changes, focusing instead on technical details and specific practices. While it mentions the importance of modernisation and continuous delivery, it does not delve into the strategic implications or case studies that would strengthen its alignment with the digital transformation category.",
    "level": "Tertiary"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-04-30T09:57:52",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on concepts like maintainability and continuous delivery, it does not directly address customer retention strategies or user engagement. The discussion lacks explicit mentions of customer needs, feedback mechanisms, or user experience, which are crucial for the category of Customer Retention.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-04-30T09:57:55",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 10,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on some aspects of software development and engineering discipline, it does not provide any actionable instructions or insights related to the installation or configuration of tools, software, or platforms. The focus is on architectural decisions rather than installation or configuration processes, leading to a low confidence score in this category.",
    "level": "Ignored"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-04-30T09:57:58",
    "ai_confidence": 32.0,
    "ai_mentions": 2,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code. While it touches on aspects of continuous integration and delivery (CI/CD) and mentions the need for testability and maintainability, it does not focus on the broader strategies and practices of release management. The primary emphasis is on coding practices rather than the planning, scheduling, and controlling of software releases, which are central to release management.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-04-30T09:58:01",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of CI/CD and the importance of modern engineering practices, it does not focus on deployment strategies or methodologies for deploying software into production. The discussion lacks direct mentions of deployment strategies like Blue-Green Deployments or Canary Releases, and the depth of discussion on deployment-related topics is minimal.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-04-30T09:58:04",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of refactoring and maintaining code quality, which aligns with the ethos of technical excellence and accountability in Professional Scrum. However, it does not explicitly mention Scrum principles or roles, and the focus is primarily on engineering practices rather than the broader application of Scrum in a professional context. The discussion lacks depth in terms of Scrum values and the disciplined application of Scrum, leading to a moderate confidence score.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-04-30T09:58:07",
    "ai_confidence": 72.0,
    "ai_mentions": 3,
    "ai_alignment": 85.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 10,
    "final_score": 72.0,
    "reasoning": "The content discusses the importance of refactoring business logic from stored procedures to more maintainable code, which aligns with the principles of iterative development and incremental delivery. It highlights the benefits of this approach, such as improved testability, maintainability, and faster feedback loops, which are key aspects of delivering value to customers. The discussion is detailed, providing specific reasons why stored procedures hinder value delivery and outlining a strategy for gradual improvement. However, while it touches on CI/CD practices, it does not explicitly discuss broader Agile or DevOps methodologies, which slightly limits its alignment with the category.",
    "level": "Secondary"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-04-30T09:58:10",
    "ai_confidence": 10.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 10.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on incremental change, which is a principle of Agile, it does not explicitly discuss Agile frameworks, their principles, or their application in organisational contexts. Therefore, it lacks direct mentions, conceptual alignment, and depth related to Agile frameworks.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-04-30T09:58:12",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic in software development. It discusses engineering practices, refactoring, and the benefits of modern coding techniques, but it does not mention or relate to the concept of Revenue per Employee or its implications for workforce efficiency or organisational performance. Therefore, it has minimal relevance to the specified category.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-04-30T09:58:15",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on technical practices related to software development, specifically the use of stored procedures for business logic. While it touches on the importance of modern engineering practices and mentions teams, it does not explicitly discuss organisational culture or its influence on agility, responsiveness, or transformation. The discussion lacks depth in cultural aspects and does not align with the key topics outlined for the category.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-04-30T09:58:18",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily focuses on technical practices related to software development and the use of stored procedures, with no direct mention or discussion of employee engagement, motivation, or team dynamics. While it touches on the importance of modern engineering practices, it does not explore the psychological or social aspects of work that contribute to employee satisfaction or productivity.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-04-30T09:58:21",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, with no direct mention of Azure Boards or Agile project management practices. While it touches on concepts relevant to software engineering, it does not align with the functionalities or best practices of Azure Boards, nor does it explore any of the key topics outlined for this category.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-04-30T09:58:25",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 15.0,
    "reasoning": "The content primarily focuses on technical advice regarding the use of stored procedures in software development, lacking personal anecdotes or reflections. While it discusses the challenges of maintaining business logic in stored procedures, it does not provide individual experiences or insights that align with the Personal category. The discussion is more about best practices and technical strategies rather than personal interpretations or experiences related to Agile or DevOps methodologies.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-04-30T09:58:29",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 25,
    "ai_depth": 20,
    "non_ai_confidence": 10,
    "final_score": 32.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on aspects of developer productivity and automation, it does not explicitly focus on Platform Engineering or Internal Developer Platforms (IDPs). The discussion is more about coding practices than the design and construction of internal platforms, which is the core of Platform Engineering. Therefore, while there are relevant mentions, the overall alignment and depth of discussion do not strongly support the category.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-04-30T09:58:35",
    "ai_confidence": 85.0,
    "ai_mentions": 15,
    "ai_alignment": 35,
    "ai_depth": 30,
    "non_ai_confidence": 20,
    "final_score": 85.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic, which directly relates to the concept of technical debt. It discusses the implications of maintaining such practices, highlighting issues like testability, CI/CD integration, and maintainability, all of which are key aspects of technical debt. The author advocates for refactoring as a strategy to reduce this debt, aligning well with the category's core themes. The depth of discussion is substantial, providing detailed reasons and a clear strategy for remediation, thus justifying a high confidence score.",
    "level": "Primary"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-04-30T09:58:38",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the technical aspects of software development, specifically the drawbacks of using stored procedures for business logic. While it touches on the need for refactoring and improving engineering practices, it does not explicitly discuss sensemaking, decision-making processes, or the interpretation of complexity in organisational contexts. The discussion lacks depth in exploring how teams can navigate challenges or adapt strategies based on complex environments, which are key themes of sensemaking.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-04-30T09:58:41",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on the drawbacks of using stored procedures for business logic and advocates for refactoring towards more maintainable code practices. While it touches on concepts like incremental change and reducing technical debt, it does not explicitly discuss Agile Planning principles, methodologies, or practices. The mention of a gradual approach to change aligns somewhat with Agile's iterative nature, but the overall focus is on technical practices rather than planning or team dynamics.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-04-30T09:58:44",
    "ai_confidence": 15.0,
    "ai_mentions": 0,
    "ai_alignment": 20.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 10,
    "final_score": 15.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic and advocates for refactoring towards more testable and maintainable code. While it touches on concepts like testability and maintainability, which are relevant to BDD, it does not explicitly mention BDD principles, user stories, or collaboration among stakeholders. The focus is more on architectural decisions rather than the collaborative and requirement-alignment aspects of BDD.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-04-30T09:58:47",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 10,
    "final_score": 92.0,
    "reasoning": "The content primarily focuses on the engineering practice of refactoring business logic out of stored procedures into more maintainable and testable code. It discusses the importance of testability, CI/CD integration, and separation of concerns, which are all key themes in engineering practices. The depth of discussion is significant, providing detailed reasoning and examples of why stored procedures are detrimental to modern engineering practices. The content aligns closely with the principles of clean code and automation, making it a strong fit for the category.",
    "level": "Primary"
  },
  "Cell Structure Design": {
    "category": "Cell Structure Design",
    "calculated_at": "2025-04-30T09:58:50",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": 0,
    "final_score": 5.0,
    "reasoning": "The content primarily discusses the drawbacks of using stored procedures for business logic in software development, focusing on engineering practices rather than organisational design models like Cell Structure Design. There are no direct mentions of cells, decentralisation, or the principles of the Beta Codex, which are central to the category. The discussion lacks depth in relation to the key topics outlined for Cell Structure Design, making it largely irrelevant to the category.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "utAzlIGxj7O",
    "category": "Principle",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": null,
    "final_score": 72.0,
    "reasoning": "The content discusses the principles of software engineering, particularly around maintaining business logic outside of SQL stored procedures. It emphasizes actionable change (refactoring) and provides a reasoning framework that aligns with principles of Continuous Improvement and Value Delivery by focusing on producing maintainable, testable code. However, it does not explicitly reference Agile, Lean, or DevOps principles nor does it deeply explore foundational beliefs that shape decision-making within these frameworks, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Tool": {
    "resourceId": "utAzlIGxj7O",
    "category": "Tool",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 35.0,
    "ai_mentions": 2,
    "ai_alignment": 40.0,
    "ai_depth": 50.0,
    "non_ai_confidence": null,
    "final_score": 35.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and suggests a strategy of refactoring to better practices in application code. Although it mentions tooling indirectly (e.g., continuous integration/continuous delivery, automation), the explicit focus on tools is limited. The primary focus is on refactoring and engineering discipline rather than specific tools used to facilitate these practices. Therefore, it aligns with the category of 'Tool' only in a surface-level context, resulting in a moderately low confidence score.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "utAzlIGxj7O",
    "category": "Accountability",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 22.0,
    "ai_mentions": 100.0,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 22.0,
    "reasoning": "While the content critiques the use of stored procedures and emphasizes modern engineering practices, it does so without a clear focus on accountability as defined in the context of this category. It mentions ownership indirectly by discussing the need to refactor and manage code properly, but lacks a direct exploration of structural accountabilities, defined roles, or outcome ownership in work systems. Thus, it only briefly touches the topic and primarily focuses on code management rather than accountability within a work environment.",
    "level": "Ignored"
  },
  "Values": {
    "resourceId": "utAzlIGxj7O",
    "category": "Values",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 32.0,
    "ai_mentions": 100.0,
    "ai_alignment": 2,
    "ai_depth": 2,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on technical practices related to coding and engineering rather than discussing core values. It briefly touches on themes of discipline and commitment to modern practices, which are loosely aligned with values, but lacks depth in exploring how these relate to broader organizational principles or cultural impacts. Thus, while there are some mentions of values implicit in the arguments for change, they are secondary to the main technical discussion.",
    "level": "Ignored"
  },
  "Philosophy": {
    "resourceId": "utAzlIGxj7O",
    "category": "Philosophy",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 12.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": null,
    "final_score": 12.0,
    "reasoning": "The content focuses on specific practices and recommendations regarding the use of SQL stored procedures, discussing the technical aspects and drawbacks of this approach without delving into the philosophical reasons or foundational beliefs that underlie such methodologies. While it touches on concepts like engineering discipline and modern practices, it lacks a clear exploration of the 'why' behind these practices, making it more procedural than philosophical.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "utAzlIGxj7O",
    "category": "Discipline",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 67.0,
    "ai_mentions": 3,
    "ai_alignment": 75.0,
    "ai_depth": 70.0,
    "non_ai_confidence": null,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of a modern engineering discipline, emphasizing the need for structured practices like refactoring, the role of maintainable code, and continuous improvement. It outlines clear principles that align closely with the expectations of the Discipline category. However, while it reflects on methodologies and their evolution, it focuses more on technical practices rather than on the broader systemic application of disciplines such as Agile or DevOps, thus limiting its full alignment with the category.",
    "level": "Secondary"
  },
  "Artifact": {
    "resourceId": "utAzlIGxj7O",
    "category": "Artifact",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 20.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 20.0,
    "reasoning": "The content primarily discusses the downsides of using stored procedures for business logic and advocates for refactoring into maintainable code. It does not focus on artifacts related to Agile, Scrum, or Lean practices, nor does it define or explore specific artifacts within those frameworks. The discussion lacks depth and relevance to the role of artifacts in a software development context, making it only tangentially related to the category of 'Artifact'.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "utAzlIGxj7O",
    "category": "Observability",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 65.0,
    "ai_mentions": 2,
    "ai_alignment": 80.0,
    "ai_depth": 55.0,
    "non_ai_confidence": null,
    "final_score": 65.0,
    "reasoning": "The content discusses the drawbacks of using stored procedures for business logic and emphasizes the importance of refactoring to improve testability, maintainability, and support for continuous delivery—which connects to the principles of observability. Terms like 'testability', 'traceability', and 'observability' are mentioned, indicating a conceptual alignment with the category. However, the primary focus of the content is on refactoring practices rather than observability itself, resulting in a moderate confidence score.",
    "level": "Secondary"
  },
  "Practice": {
    "resourceId": "utAzlIGxj7O",
    "category": "Practice",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": null,
    "final_score": 78.0,
    "reasoning": "The content extensively discusses the practice of refactoring business logic out of SQL stored procedures into more maintainable and testable code. It provides actionable recommendations such as 'stop creating new business logic in stored procedures' and emphasizes the importance of progressive refactoring, making it closely aligned with improvement techniques in software engineering practices. The depth of discussion around the disadvantages of stored procedures and the rationale for moving towards a better engineering discipline indicates a clear focus on actionable practices, earning a high confidence in classification.",
    "level": "Secondary"
  },
  "Method": {
    "resourceId": "utAzlIGxj7O",
    "category": "Method",
    "calculated_at": "2025-05-01T14:48:24",
    "ai_confidence": 78.0,
    "ai_mentions": 16,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": null,
    "final_score": 78.0,
    "reasoning": "The content focuses on a methodical approach to refactoring business logic away from stored procedures into testable, maintainable application code. It details specific practices and strategies for implementing this change, emphasizing gradual improvement and the benefits of such a method over time. It discusses practical steps and the rationale behind avoiding stored procedures in favor of better engineering practices, aligning well with the key topics of structured methods in software development.",
    "level": "Secondary"
  },
  "Strategy": {
    "resourceId": "utAzlIGxj7O",
    "category": "Strategy",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 68.0,
    "ai_mentions": 20.0,
    "ai_alignment": 40.0,
    "ai_depth": 60.0,
    "non_ai_confidence": null,
    "final_score": 68.0,
    "reasoning": "The content discusses a strategy to transition from using stored procedures for business logic to a more maintainable and testable codebase. It emphasizes a gradual approach to refactoring and progressive modernization, which aligns with strategic decision-making and long-term improvement in engineering practices. However, while there is a clear reference to strategy, much of the content focuses on specific practices and technical details, which detracts from its alignment with the broad and high-level focus of the 'Strategy' category.",
    "level": "Secondary"
  },
  "Model": {
    "resourceId": "utAzlIGxj7O",
    "category": "Model",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 25.0,
    "ai_mentions": 0,
    "ai_alignment": 15.0,
    "ai_depth": 10.0,
    "non_ai_confidence": null,
    "final_score": 25.0,
    "reasoning": "The content mainly discusses technical practices related to business logic and SQL stored procedures, focusing on the importance of refactoring code rather than stored procedures. It does not explicitly mention any conceptual models or frameworks associated with Agile, DevOps, or Lean contexts. While there is an underlying theme of improving systems and practices, it lacks sufficient discussion of specific models that would warrant a higher confidence score in the 'Model' category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "utAzlIGxj7O",
    "category": "Framework",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 15.0,
    "ai_mentions": 4,
    "ai_alignment": 25.0,
    "ai_depth": 20.0,
    "non_ai_confidence": null,
    "final_score": 15.0,
    "reasoning": "The content discusses refactoring business logic out of SQL stored procedures and touches on engineering practices, which are important for software development but does not explicitly discuss Agile, DevOps, or Lean frameworks. The mention of the DevOps team as an example does not significantly contribute to a framework discussion. The overall focus is on practices and strategies rather than on structured methodologies that fall within the Framework category, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "utAzlIGxj7O",
    "category": "Tenet",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 76.0,
    "ai_mentions": 15,
    "ai_alignment": 26,
    "ai_depth": 34,
    "non_ai_confidence": null,
    "final_score": 76.0,
    "reasoning": "The content discusses actionable practices for refactoring business logic from SQL stored procedures into application code, which is a prescriptive approach aligned with the core tenets of modern software development methodologies. It mentions strategies like 'refactor when touching existing stored procedures' and emphasizes continuous improvement and maintainability, relating to principles in Agile and DevOps. The article presents a clear methodology to enhance efficiency and quality in software engineering, therefore fitting well within the 'Tenet' category.",
    "level": "Secondary"
  },
  "Capability": {
    "resourceId": "utAzlIGxj7O",
    "category": "Capability",
    "calculated_at": "2025-05-01T14:48:25",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 20,
    "ai_depth": 15,
    "non_ai_confidence": null,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the technical argument against using stored procedures for business logic, discussing refactoring for testable, maintainable code. While it mentions the importance of discipline and strategies for improving coding practices, it lacks a direct emphasis on 'capabilities' as defined in the context of empowering teams and organizations. Although there are aspects related to enhancing the engineering practices that could be seen as aligning with building capabilities, they are more focused on technical practices than on cultivating enduring, systemic capabilities within a team or organization.",
    "level": "Ignored"
  }
}
