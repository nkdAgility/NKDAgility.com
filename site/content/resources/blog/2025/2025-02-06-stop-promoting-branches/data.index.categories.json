{
  "Decision Theory": {
    "category": "Decision Theory",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control systems, without a focus on decision-making processes or the principles of Decision Theory.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws of traditional branching models and advocates for continuous integration and delivery practices, which are relevant to organisational agility. However, it primarily focuses on technical practices rather than broader organisational strategies or frameworks for enterprise agility.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models in software development, emphasising the importance of continuous delivery and value delivery, which aligns with Lean principles. However, the primary focus is on Git workflows rather than Lean methodologies specifically.",
    "level": "Ignored"
  },
  "Resilience and Change": {
    "category": "Resilience and Change",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 41.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models and advocates for more agile practices, which indirectly relates to organisational resilience and adaptability. However, the primary focus is on technical implementations rather than the broader themes of resilience and change management.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses the drawbacks of traditional branch promotion models and advocates for alternative branching strategies like GitHub Flow and Release Flow. It does not provide actionable instructions or insights related to the installation or configuration of tools or software.",
    "level": "Ignored"
  },
  "Code and Complexity": {
    "category": "Code and Complexity",
    "ai_confidence": 85,
    "non_ai_confidence": 30,
    "final_score": 68.0,
    "reasoning": "The content primarily discusses the complexities and inefficiencies of traditional branch promotion models in software development, advocating for simpler, more effective branching strategies like GitHub Flow and Release Flow. It addresses the impact of these models on code quality, delivery speed, and organisational dysfunction, aligning well with the themes of code quality and complexity management.",
    "level": "Secondary"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content primarily discusses the inefficiencies of traditional branch promotion models and advocates for alternatives that enhance flow efficiency in software delivery, aligning closely with the principles of Flow Efficiency in Lean and Agile methodologies.",
    "level": "Secondary"
  },
  "AI and Automation in Agility": {
    "category": "AI and Automation in Agility",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models without any mention of AI or automation in Agile practices.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses the flaws of traditional software delivery models and advocates for modern practices like GitHub Flow and Release Flow, which are central to effective product delivery.",
    "level": "Secondary"
  },
  "Agile Product Management": {
    "category": "Agile Product Management",
    "ai_confidence": 45,
    "non_ai_confidence": 10,
    "final_score": 34.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, which are more aligned with DevOps practices than Agile Product Management. While it touches on concepts of agility, it does not focus on product management principles or the role of the Product Owner.",
    "level": "Ignored"
  },
  "Discovery and Learning": {
    "category": "Discovery and Learning",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes alternative approaches that enhance delivery and reduce complexity, which aligns with the theme of continuous learning and adapting processes in software development. However, the primary focus is on technical implementation rather than a broader exploration of discovery and learning methodologies.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, focusing on linear problem-solving approaches rather than exploring the interconnectedness of components within a system or the principles of Systems Thinking.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the complexities and inefficiencies of traditional branching models in software development, touching on themes of organisational dysfunction and the need for adaptive practices. However, it primarily focuses on specific Git workflows rather than a broader application of complexity science principles.",
    "level": "Ignored"
  },
  "Transparency and Accountability": {
    "category": "Transparency and Accountability",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching models and their impact on software delivery, without addressing transparency or accountability within Agile teams.",
    "level": "Ignored"
  },
  "Practical Techniques and Tooling": {
    "category": "Practical Techniques and Tooling",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for practical alternatives like GitHub Flow and Release Flow, focusing on their implementation and benefits in Agile and DevOps practices.",
    "level": "Secondary"
  },
  "Events and Presentations": {
    "category": "Events and Presentations",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies in software development and does not reference any events, presentations, or discussions related to Agile, DevOps, or software engineering conferences.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "ai_confidence": 75,
    "non_ai_confidence": 0,
    "final_score": 52.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes GitHub Flow and Release Flow as alternatives that enhance agility and speed in software delivery, which aligns with the principles of market adaptability.",
    "level": "Secondary"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies in software development, specifically critiquing traditional models and advocating for GitHub Flow and Release Flow, which are directly related to DevOps practices.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "ai_confidence": 95,
    "non_ai_confidence": 50,
    "final_score": 82.0,
    "reasoning": "The content primarily discusses the flaws of traditional branching models in software delivery, advocating for Continuous Integration and Continuous Delivery practices, which are central to DevOps principles. It emphasizes the importance of automation, collaboration, and streamlined workflows, aligning closely with key DevOps topics.",
    "level": "Primary"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "ai_confidence": 85,
    "non_ai_confidence": 20,
    "final_score": 66.0,
    "reasoning": "The content discusses branching strategies and CI/CD practices, specifically mentioning Microsoft's Release Flow, which is directly related to Azure DevOps functionalities. It provides insights into methodologies that align with Azure DevOps principles, making it a major theme.",
    "level": "Secondary"
  },
  "Products and Books": {
    "category": "Products and Books",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching models in software development and their implications on delivery processes, without focusing on specific products or literature related to Agile or DevOps.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "ai_confidence": 75,
    "non_ai_confidence": 0,
    "final_score": 52.0,
    "reasoning": "The content discusses the flaws of traditional software delivery models and promotes alternative approaches that enhance agility and value delivery, making business agility a significant theme.",
    "level": "Secondary"
  },
  "Kanban": {
    "category": "Kanban",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses issues with branch promotion models and alternatives like GitHub Flow and Release Flow, focusing on software delivery practices rather than Kanban principles such as visualisation of work, WIP limits, or flow management.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for continuous integration and delivery practices that enhance value delivery to customers.",
    "level": "Secondary"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "ai_confidence": 95,
    "non_ai_confidence": 0,
    "final_score": 66.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for modern practices like GitHub Flow and Release Flow, which are central to enhancing software delivery processes and ensuring technical excellence.",
    "level": "Secondary"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, rather than scaling Agile practices across multiple teams or organisational structures.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content primarily discusses the flaws of traditional branching models in software delivery and advocates for more agile practices like GitHub Flow and Release Flow, which enhance organisational agility by promoting continuous integration and delivery. It highlights the importance of reducing complexity and increasing responsiveness, aligning well with the principles of organisational agility.",
    "level": "Secondary"
  },
  "Personal": {
    "category": "Personal",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses technical aspects of branching models in software development, specifically critiquing the branch promotion model and advocating for alternatives like GitHub Flow and Release Flow. It does not include personal experiences, reflections, or insights related to Agile, Scrum, or DevOps methodologies.",
    "level": "Ignored"
  },
  "People and Process": {
    "category": "People and Process",
    "ai_confidence": 75,
    "non_ai_confidence": 10,
    "final_score": 56.0,
    "reasoning": "The content discusses the impact of branching models on team dynamics and process efficiency, highlighting how traditional models can hinder agility and collaboration. It addresses the need for teams to adapt their processes to enhance productivity, making it a significant theme.",
    "level": "Secondary"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "ai_confidence": 65,
    "non_ai_confidence": 0,
    "final_score": 46.0,
    "reasoning": "The content discusses the impact of branching models on software delivery and team dynamics, highlighting how organisational dysfunction can arise from poor practices. While it primarily focuses on technical practices, it does touch on the interplay between these practices and organisational effectiveness, making it a significant but secondary theme.",
    "level": "Ignored"
  },
  "News and Reviews": {
    "category": "News and Reviews",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses branching models and their implications for software delivery, which relates to DevOps practices. However, it primarily focuses on advocating for specific methodologies rather than providing industry news or reviews.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "ai_confidence": 45,
    "non_ai_confidence": 10,
    "final_score": 34.0,
    "reasoning": "The content primarily discusses branching models and their impact on software delivery processes, rather than focusing on metrics, data analysis, or continuous improvement methodologies.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses branching strategies and their impact on software delivery, which relates to the deployment and maintenance stages of the application lifecycle. However, it primarily focuses on branching models rather than a comprehensive view of Application Lifecycle Management.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 41.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models and advocates for practices that enhance the flow of value in software delivery, aligning with some principles of Value Stream Management. However, it primarily focuses on branching strategies rather than a comprehensive discussion on Value Stream Management itself.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control systems, with no focus on psychological principles or theories related to motivation, engagement, leadership, or team dynamics within organisations.",
    "level": "Ignored"
  }
}
