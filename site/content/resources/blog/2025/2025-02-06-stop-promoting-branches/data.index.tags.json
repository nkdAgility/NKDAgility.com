{
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models in software development and advocates for alternative branching strategies like GitHub Flow and Release Flow. It does not focus on hypothesis formulation, experimentation, or data-driven decision-making, which are central to hypothesis-driven development.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative workflows like GitHub Flow and Release Flow. It does not focus on hypothesis-driven experimentation or the systematic testing of ideas within Agile workflows.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software development practices and branching strategies in version control systems, which do not align with the principles and practices of entrepreneurship.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on the Product Backlog or its management in Agile frameworks.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, which are not related to Scrum principles, roles, or practices.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses organisational dysfunction related to software delivery processes and branching strategies, which touches on systems thinking principles. However, it primarily focuses on technical practices rather than a comprehensive exploration of organisational dynamics.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no focus on coaching, mentoring, or team development.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, without any focus on evidence-based leadership principles or practices.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control, with no focus on employee engagement, motivation, or team dynamics.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, which are technical implementation details rather than strategic aspects of product management.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "ai_confidence": 30,
    "non_ai_confidence": 0,
    "final_score": 21.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with limited focus on leadership roles or practices within Agile contexts.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on the Daily Scrum or its related topics.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models rather than system configuration practices or methodologies.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses modern software delivery practices and the importance of agility in development processes, which aligns with the principles of digital transformation. However, it primarily focuses on specific branching strategies rather than a broader strategic adoption of digital technologies across an organisation.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content primarily discusses software delivery models and practices that enhance the delivery of functional software, emphasising continuous integration and delivery, which are key aspects of working software.",
    "level": "Secondary"
  },
  "Decision Making": {
    "category": "Decision Making",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the implications of different branching models on software delivery and decision-making processes within teams, highlighting the need for evidence-based practices in choosing effective strategies. However, the primary focus is on the critique of branching models rather than structured decision-making methodologies.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content discusses branching models and their impact on delivery speed and team efficiency, but it primarily focuses on technical practices rather than self-organisation principles or team autonomy.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no direct relevance to remote working practices, challenges, or solutions in an Agile context.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "ai_confidence": 75,
    "non_ai_confidence": 10,
    "final_score": 56.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models and promotes continuous integration and delivery, which aligns with Lean principles of minimising waste and maximising value delivery. However, it primarily focuses on Git workflows rather than Lean Product Development as a central theme.",
    "level": "Secondary"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "ai_confidence": 45,
    "non_ai_confidence": 10,
    "final_score": 34.0,
    "reasoning": "The content primarily discusses technical practices and models related to software delivery and branching strategies, with only a brief mention of organisational dysfunction. It does not focus on the cultural aspects of agility or transformation within teams.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no focus on customer feedback mechanisms or practices.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses branching strategies and models relevant to source control, including GitHub Flow and Release Flow, which are applicable in the context of Azure Repos. However, it primarily focuses on general branching practices rather than specifically on Azure Repos functionalities or best practices.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and their impact on software delivery processes, without a clear focus on transparency or related themes.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching models and their implications on software delivery, without addressing the Definition of Done or its criteria.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "ai_confidence": 30,
    "non_ai_confidence": 10,
    "final_score": 24.0,
    "reasoning": "The content primarily discusses branching models and software delivery processes, which are technical implementation details rather than a clear focus on product strategy methodologies or frameworks.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no direct focus on customer retention strategies or methodologies aimed at maintaining user engagement.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, focusing on the inefficiencies of branch promotion rather than Value Stream Mapping or Lean principles.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "ai_confidence": 85,
    "non_ai_confidence": 50,
    "final_score": 74.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative strategies like GitHub Flow and Release Flow, which align with Agile principles. It focuses on optimising delivery processes and enhancing team performance, making strategy a central theme.",
    "level": "Secondary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes alternative strategies that enhance delivery speed and reduce complexity, which indirectly relates to innovation in software delivery practices. However, the primary focus is on branching strategies rather than a direct exploration of innovation capabilities or Evidence-Based Management.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses branching models and their impact on software delivery, touching on concepts of agility and continuous delivery, but it primarily focuses on Git workflows rather than Agile frameworks themselves.",
    "level": "Ignored"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "ai_confidence": 30,
    "non_ai_confidence": 0,
    "final_score": 21.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, rather than focusing on scaling agile practices across an organisation.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses team dynamics in the context of branching strategies and their impact on delivery speed, which relates to collaboration but is primarily focused on technical processes rather than direct team collaboration techniques.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies without any focus on customer satisfaction or customer experience. It does not address customer needs, feedback, or engagement, which are central to the category.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models in software development, which aligns with Lean principles of minimising waste and enhancing flow. However, it primarily focuses on Git workflows rather than Lean Thinking itself.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "ai_confidence": 45,
    "non_ai_confidence": 20,
    "final_score": 38.0,
    "reasoning": "The content discusses branching models and their impact on delivery speed, but it primarily focuses on the flaws of branch promotion rather than directly addressing Cycle Time as a central theme.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses the flaws of traditional branching models in software development and advocates for modern practices like GitHub Flow and Release Flow, which align with principles of Continuous Integration and Continuous Delivery (CI/CD). It emphasises the importance of clean, efficient workflows that enhance agility and reduce complexity, making it a clear fit for the Engineering Practices category.",
    "level": "Secondary"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, which do not align with the principles of portfolio management or the strategic alignment of projects and initiatives.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "ai_confidence": 95,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "Content primarily discusses branching strategies in software development, specifically critiquing traditional models and advocating for GitHub Flow and Release Flow, which are central to modern software engineering practices.",
    "level": "Secondary"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content primarily discusses best practices in software development, specifically focusing on branching strategies, continuous integration, and delivery models. It critiques outdated practices and promotes modern approaches that enhance engineering processes and deliverable quality.",
    "level": "Secondary"
  },
  "Throughput": {
    "category": "Throughput",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "The content primarily discusses the inefficiencies of traditional branch promotion models and advocates for practices that enhance the flow of work, such as GitHub Flow and Release Flow, which directly relate to improving throughput in software delivery.",
    "level": "Secondary"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses branching strategies and their impact on software delivery, with specific mention of Microsoft's Release Flow, which is relevant to Azure Pipelines. However, the primary focus is on branching models rather than Azure Pipelines specifically, making it a secondary theme.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "ai_confidence": 45,
    "non_ai_confidence": 10,
    "final_score": 34.0,
    "reasoning": "The content discusses software delivery models and branching strategies, which are more focused on specific practices rather than the foundational values and principles of Agile. While it touches on concepts like delivering value and avoiding complexity, it does not primarily address Agile values or principles.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 41.0,
    "reasoning": "The content discusses automated tests in the context of GitHub Flow and Release Flow, highlighting their role in continuous integration and delivery. However, the primary focus is on branching strategies rather than automated testing principles.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "ai_confidence": 30,
    "non_ai_confidence": 10,
    "final_score": 24.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, which are not central to Site Reliability Engineering principles. While it touches on aspects of deployment and stability, it does not focus on SRE practices such as monitoring, incident response, or reliability in production systems.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "ai_confidence": 45,
    "non_ai_confidence": 20,
    "final_score": 38.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies rather than focusing on change management principles or practices. While it touches on organisational dysfunction and the need for improved processes, it does not centralise around change management as a primary topic.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, with no focus on mentoring, coaching, or professional development in Agile environments.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content discusses software delivery models and branching strategies, but it primarily focuses on the flaws of traditional models rather than the principles of empirical process control. While it touches on aspects of agility and continuous delivery, it does not centralise around empirical process control as a primary theme.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, focusing on the flaws of traditional promotion models rather than validating product ideas through user engagement or feedback.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and models in software development, specifically focusing on Git workflows. It does not address Azure Boards or its functionalities in Agile project management.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control, with no mention of revenue per employee or related financial metrics.",
    "level": "Ignored"
  },
  "Software Developers": {
    "category": "Software Developers",
    "ai_confidence": 95,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models in software development, advocating for modern practices like GitHub Flow and Release Flow, which are central to Agile and DevOps methodologies.",
    "level": "Secondary"
  },
  "Test First Development": {
    "category": "Test First Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative workflows like GitHub Flow and Release Flow, without focusing on Test First Development principles or practices.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "The content primarily discusses the flaws of traditional branching models and advocates for continuous delivery practices, specifically GitHub Flow and Release Flow, which are central to the concept of frequent releases.",
    "level": "Secondary"
  },
  "Estimation": {
    "category": "Estimation",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no focus on estimation techniques or practices within Agile or Scrum frameworks.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and their implications on software delivery rather than focusing on the identification and resolution of technical issues.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content primarily critiques traditional branching models and promotes alternative workflows, focusing on continuous delivery rather than the concept of Increment in Agile. While it touches on value delivery, it does not centralise the discussion around the Increment itself.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software development practices, specifically branching models in Git, and does not address any aspects related to the Windows operating system.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no mention of Sprint Reviews or related Scrum events.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "ai_confidence": 75,
    "non_ai_confidence": 10,
    "final_score": 56.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models and their impact on delivery speed, which relates to Lead Time. However, it primarily focuses on branching strategies rather than a comprehensive exploration of Lead Time as a metric.",
    "level": "Secondary"
  },
  "Scaled Agile": {
    "category": "Scaled Agile",
    "ai_confidence": 30,
    "non_ai_confidence": 0,
    "final_score": 21.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, which are not central to the principles of Scaled Agile or the coordination of multiple teams at an enterprise level.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses practical problem-solving strategies in software delivery, specifically critiquing traditional branching models and advocating for GitHub Flow and Release Flow as more effective alternatives. It emphasises real-world applications of DevOps principles to enhance collaboration and efficiency, aligning closely with the key topics of pragmatic thinking.",
    "level": "Secondary"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for continuous integration and delivery practices that enhance deployment frequency. It emphasises the importance of reducing complexity and increasing the speed of deployments, aligning closely with the principles of optimising deployment intervals in Agile and DevOps methodologies.",
    "level": "Secondary"
  },
  "Agile Project Management": {
    "category": "Agile Project Management",
    "ai_confidence": 45,
    "non_ai_confidence": 10,
    "final_score": 34.0,
    "reasoning": "The content discusses branching strategies and their impact on software delivery but does not primarily focus on agile methodologies or principles. It critiques traditional models and suggests alternatives, which are relevant to agile practices, but the main theme is not centred on Agile Project Management.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "ai_confidence": 85,
    "non_ai_confidence": 20,
    "final_score": 66.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for continuous integration practices, specifically highlighting GitHub Flow and Release Flow as effective strategies for CI. It addresses the importance of merging changes continuously and the role of automated testing, which aligns closely with CI principles.",
    "level": "Secondary"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "ai_confidence": 75,
    "non_ai_confidence": 10,
    "final_score": 56.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes continuous delivery practices, which align with Agile principles. However, it primarily focuses on technical practices rather than a comprehensive Agile strategy.",
    "level": "Secondary"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for Continuous Delivery practices such as GitHub Flow and Release Flow, emphasising the importance of maintaining a production-ready state and minimising deployment risks.",
    "level": "Secondary"
  },
  "BetaCodex": {
    "category": "BetaCodex",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws of traditional hierarchical software delivery models and advocates for more fluid and responsive frameworks like GitHub Flow and Release Flow, which aligns with the principles of decentralisation and agility in organisational design. However, the primary focus is on software delivery practices rather than a comprehensive discussion of BetaCodex principles.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, without a focus on cross-functional teams or their characteristics in Agile methodologies.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching models and their implications on software delivery, with no focus on the Definition of Ready or its criteria.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content primarily discusses branching models and software delivery strategies, focusing on technical implementations rather than the interpretation of complexity or decision-making processes in organisational contexts.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no focus on team dynamics, motivation, or engagement.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the impact of branching models on team agility and delivery, which relates to team performance, but the primary focus is on branching strategies rather than direct team dynamics or collaboration.",
    "level": "Ignored"
  },
  "AI": {
    "category": "AI",
    "ai_confidence": 0,
    "non_ai_confidence": 30,
    "final_score": 9.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on the application of AI in Agile, DevOps, or software development.",
    "level": "Ignored"
  },
  "Scaling Kanban": {
    "category": "Scaling Kanban",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses issues with branch promotion models and alternatives like GitHub Flow and Release Flow, which are not related to Scaling Kanban principles or practices.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, focusing on Git Flow, GitHub Flow, and Release Flow, without any mention of Behaviour Driven Development principles, practices, or collaboration among stakeholders.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery strategies, with no focus on working agreements or team collaboration norms.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "ai_confidence": 75,
    "non_ai_confidence": 0,
    "final_score": 52.0,
    "reasoning": "The content discusses the inefficiencies of traditional branching models in software delivery, emphasising the importance of continuous integration and delivery, which aligns with Lean principles of waste reduction and value maximisation. However, it primarily focuses on Git workflows rather than Lean principles themselves.",
    "level": "Secondary"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content discusses software delivery models and branching strategies, which are related to Agile practices but does not primarily focus on Agile transformation principles or methodologies.",
    "level": "Ignored"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content discusses issues related to branching models and their impact on development processes, but it does not primarily focus on technical debt management or its implications. The emphasis is more on workflow efficiency rather than the accumulation of suboptimal code or design decisions.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, with no clear focus on Scrum Values such as commitment, courage, focus, openness, or respect.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "ai_confidence": 45,
    "non_ai_confidence": 20,
    "final_score": 38.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, which are more technical in nature. While it touches on themes of agility and efficiency, it does not focus on organisational change processes or frameworks, making it not relevant enough for the category.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the implications of branching models on software delivery and mentions automated tests in the context of GitHub Flow, but the primary focus is on branching strategies rather than test automation principles or practices.",
    "level": "Ignored"
  },
  "Scrum Product Development": {
    "category": "Scrum Product Development",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, which are not directly related to Scrum principles or practices. It does not focus on Scrum roles, sprint processes, or product development within a Scrum framework.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses the inefficiencies of traditional branch promotion models in software delivery and advocates for alternative practices like GitHub Flow and Release Flow, which enhance operational efficiency and delivery speed.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control, with no clear focus on Evidence-Based Management principles or practices.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no mention of backlog refinement or related Agile practices.",
    "level": "Ignored"
  },
  "Scaling Scrum": {
    "category": "Scaling Scrum",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Scaling Scrum principles or practices.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no direct reference to the role or responsibilities of a Scrum Master.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "ai_confidence": 30,
    "non_ai_confidence": 0,
    "final_score": 21.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, which is more focused on team-level practices rather than large-scale Agile principles or frameworks.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, with no clear focus on forecasting methods or practices within Agile and Scrum frameworks.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "ai_confidence": 75,
    "non_ai_confidence": 0,
    "final_score": 52.0,
    "reasoning": "Content discusses the flaws of traditional branching models and advocates for modern practices like GitHub Flow and Release Flow, which align with agile methodologies and technical leadership principles. However, it primarily focuses on branching strategies rather than broader themes of technical leadership.",
    "level": "Secondary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, which are unrelated to product discovery methodologies or understanding customer needs.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control systems, which are not related to Lean Startup principles or methodologies.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "ai_confidence": 45,
    "non_ai_confidence": 0,
    "final_score": 31.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, rather than focusing on Agile Planning principles or methodologies.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, with no clear focus on accountability, ownership, or team dynamics in an Agile context.",
    "level": "Ignored"
  },
  "MVP": {
    "category": "MVP",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Minimum Viable Products or related concepts.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, focusing on Git workflows rather than collaboration tools or enhancing communication within Agile teams.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on psychological safety or its related themes.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative deployment strategies like GitHub Flow and Release Flow, which are directly related to deployment methodologies. It addresses the impact of these strategies on delivery speed and risk management, making it a significant theme throughout the text.",
    "level": "Secondary"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Scrum roles, team dynamics, or collaboration practices.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "The content primarily discusses software delivery models, branching strategies, and their impact on code quality and maintainability, aligning closely with principles of technical mastery in software engineering.",
    "level": "Secondary"
  },
  "Release Management": {
    "category": "Release Management",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative strategies like GitHub Flow and Release Flow, which are directly related to release management practices and continuous delivery.",
    "level": "Secondary"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses branching strategies and the flaws of traditional deployment models, without addressing Test Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws of traditional branching models in software delivery and suggests alternatives like GitHub Flow and Release Flow, which can be seen as a response to emerging trends in DevOps practices. However, the primary focus is on critiquing specific models rather than a broader analysis of trends or their implications.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "ai_confidence": 75,
    "non_ai_confidence": 0,
    "final_score": 52.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes continuous delivery practices, which align with Agile principles of delivering value and adaptability. However, it primarily focuses on technical aspects of branching strategies rather than a broader discussion of Agile philosophy.",
    "level": "Secondary"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "The content primarily discusses modern branching strategies, specifically criticising traditional branch promotion models and advocating for GitHub Flow and Release Flow. It focuses on best practices for version control, continuous integration, and delivery, making it highly relevant to the category.",
    "level": "Secondary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and models in software development, focusing on Git workflows rather than Agile planning tools or methodologies.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses branching strategies and models in software development, focusing on the flaws of branch promotion and advocating for continuous integration and delivery practices. It does not address Acceptance Test Driven Development or its principles, making it irrelevant to the category.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching models and their impact on software delivery, focusing on GitHub Flow and Release Flow, without addressing asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software development practices and branching models, with no direct relevance to market share strategies or methodologies.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "ai_confidence": 30,
    "non_ai_confidence": 0,
    "final_score": 21.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, with a focus on operational tactics rather than long-term strategic goals or business agility.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes alternative strategies that enhance delivery and integration, which aligns with principles of continuous improvement and adaptability. However, it primarily focuses on technical practices rather than a broader discussion on continuous learning within teams.",
    "level": "Ignored"
  }
}
