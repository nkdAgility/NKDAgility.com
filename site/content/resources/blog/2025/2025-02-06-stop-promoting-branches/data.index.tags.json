{
  "Change Management": {
    "category": "Change Management",
    "ai_confidence": 85,
    "non_ai_confidence": 20,
    "final_score": 66.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for alternative strategies that enhance delivery and reduce complexity, which are central themes in change management.",
    "level": "Secondary"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for continuous integration and delivery, which are key principles of Agile transformation.",
    "level": "Secondary"
  },
  "Software Development": {
    "category": "Software Development",
    "ai_confidence": 95,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "Content primarily discusses software delivery models, branching strategies, and their implications on development processes, making it central to software development.",
    "level": "Secondary"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for continuous delivery practices, which are central to scaling agility in software development.",
    "level": "Secondary"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses the flaws of branch promotion models and advocates for alternative workflows, without focusing on the concept of 'Definition of Done'.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes continuous integration and delivery, which are key aspects of Agile methodologies, but the primary focus is on branching strategies rather than Agile planning itself.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on customer satisfaction.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses branching models and their impact on software delivery processes, which relates to system configuration, but the primary focus is on promoting better practices rather than direct system configuration.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "ai_confidence": 80,
    "non_ai_confidence": 0,
    "final_score": 56.0,
    "reasoning": "Content primarily discusses the impact of branching models on team agility and delivery efficiency, highlighting how outdated practices hinder team performance.",
    "level": "Secondary"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily focuses on optimising software delivery processes, emphasising continuous integration and delivery, which aligns closely with Lean Principles.",
    "level": "Secondary"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses branching models and practices relevant to version control systems, including GitHub Flow and Release Flow, which are associated with Azure DevOps. However, the primary focus is on the critique of branch promotion strategies rather than Azure Repos specifically.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for practices that enhance agility in software delivery, focusing on continuous integration and delivery.",
    "level": "Secondary"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses software delivery models, branching strategies, and the implications of various Git workflows, demonstrating a deep understanding of technical practices in software development.",
    "level": "Secondary"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, with no clear focus on Scrum values.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery practices, with no clear focus on product backlog management or related topics.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "Content primarily focuses on optimising software delivery processes and eliminating unnecessary complexity, which aligns closely with lean principles of delivering value efficiently.",
    "level": "Secondary"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "ai_confidence": 30,
    "non_ai_confidence": 10,
    "final_score": 24.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, with only a brief mention of team dynamics and processes.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative workflows like GitHub Flow and Release Flow, without focusing on hypothesis-driven development.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws of traditional branching models and advocates for more efficient strategies like GitHub Flow and Release Flow, which align with the goal of improving software delivery processes.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content heavily discusses the flaws of traditional branching models and promotes alternative strategies that enhance agility and value delivery, aligning closely with Agile principles.",
    "level": "Secondary"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for alternative strategies that enhance delivery speed and reduce complexity, which are central to product strategy.",
    "level": "Secondary"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses issues with branch promotion models and advocates for alternative Git workflows, without a clear focus on Behaviour Driven Development principles.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content heavily discusses the inefficiencies of branch promotion models and advocates for streamlined workflows that enhance flow efficiency in software delivery.",
    "level": "Secondary"
  },
  "Mentoring": {
    "category": "Mentoring",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, with no clear focus on mentoring or guidance.",
    "level": "Ignored"
  },
  "People and Process": {
    "category": "People and Process",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses team processes and organisational dysfunction related to branching models, making it a major but secondary theme.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Sprint Review activities or outcomes.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Scrum roles or practices.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses the flaws of branch promotion models and advocates for alternative workflows like GitHub Flow and Release Flow, without addressing the concept of 'Definition of Ready' as a central theme.",
    "level": "Ignored"
  },
  "MVP": {
    "category": "MVP",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses software delivery models and branching strategies, which are relevant to MVP development, but the primary focus is on the flaws of branch promotion rather than directly on MVP concepts.",
    "level": "Ignored"
  },
  "Software Developers": {
    "category": "Software Developers",
    "ai_confidence": 95,
    "non_ai_confidence": 20,
    "final_score": 72.0,
    "reasoning": "Content primarily discusses software development practices, specifically focusing on branching strategies and their impact on delivery processes, which is central to the work of software developers.",
    "level": "Secondary"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for continuous integration and delivery practices, which are central to achieving large scale agility.",
    "level": "Secondary"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on psychological safety.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily focuses on optimising software delivery processes, reducing waste, and enhancing value delivery, which aligns closely with Lean Thinking principles.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses software delivery models and their impact on team performance, which aligns with evidence-based management principles, but the primary focus is on branching strategies rather than management practices.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the inefficiencies of branch promotion models and advocates for continuous delivery practices, which align with value stream mapping principles, but the primary focus is on branching strategies rather than value stream mapping itself.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for continuous delivery practices, specifically highlighting GitHub Flow and Release Flow as effective strategies for achieving continuous delivery.",
    "level": "Secondary"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the implications of branch promotion models on team dynamics and organisational processes, indicating a major theme related to organisational dysfunction and the need for cultural change in software delivery practices.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for continuous integration and delivery practices, which are central to asynchronous development.",
    "level": "Secondary"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for modern practices, demonstrating a clear focus on improving team processes and leadership in software delivery.",
    "level": "Secondary"
  },
  "Lead Time": {
    "category": "Lead Time",
    "ai_confidence": 80,
    "non_ai_confidence": 10,
    "final_score": 59.0,
    "reasoning": "The content primarily discusses the inefficiencies of branch promotion models and their impact on delivery speed, emphasising the importance of reducing lead time through better branching strategies.",
    "level": "Secondary"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses branching strategies and deployment models, including Release Flow, which is relevant to Azure Pipelines, but the primary focus is on the critique of branch promotion models rather than Azure Pipelines specifically.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses software delivery models and practices, focusing on the implications of branch promotion on software development efficiency and value delivery.",
    "level": "Secondary"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the need for teams to adapt their branching strategies to improve delivery speed and reduce complexity, which aligns with market adaptability principles, but it is primarily focused on software development practices.",
    "level": "Ignored"
  },
  "Coaching": {
    "category": "Coaching",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, with no clear focus on coaching or mentoring.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control, rather than portfolio management.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 41.0,
    "reasoning": "The content discusses automated tests as part of a broader critique of branch promotion models and advocates for continuous integration and delivery, making it a significant but secondary theme.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for alternative approaches, providing insights into improving software delivery processes.",
    "level": "Secondary"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for continuous delivery practices, specifically highlighting GitHub Flow and Release Flow as methods to enable frequent releases.",
    "level": "Secondary"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "ai_confidence": 80,
    "non_ai_confidence": 10,
    "final_score": 59.0,
    "reasoning": "The content primarily discusses innovative approaches to software delivery and branching strategies, advocating for modern practices like GitHub Flow and Release Flow to enhance agility and value delivery.",
    "level": "Secondary"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models in software development and advocates for alternative approaches like GitHub Flow and Release Flow. It does not focus on analysing trends but rather critiques existing practices and suggests improvements.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses modern software delivery practices and the shift from traditional branching models to more agile approaches, emphasising continuous integration and delivery, which are key aspects of digital transformation.",
    "level": "Secondary"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses software delivery models and practices that promote continuous integration and delivery, which are key aspects of continuous learning in software development. However, the primary focus is on critiquing branch promotion strategies rather than on continuous learning itself.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 41.0,
    "reasoning": "The content discusses testing in the context of continuous integration and delivery, but the primary focus is on branching models and their impact on software delivery rather than explicitly advocating for Test First Development.",
    "level": "Ignored"
  },
  "Scaled Agile": {
    "category": "Scaled Agile",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies in software development and critiques traditional models, without a clear focus on Scaled Agile principles or practices.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses organisational dysfunction related to branch promotion models, highlighting the need for teams to adopt more efficient practices, which aligns with self-organisation principles. However, the primary focus is on branching strategies rather than self-organisation itself.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and their implications on software delivery, with no mention of Daily Scrum practices or principles.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on revenue or employee productivity.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, with no clear focus on employee engagement.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for alternative workflows like GitHub Flow and Release Flow. Experimentation is not a central theme.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control systems, rather than focusing on decision-making processes or theories.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Scrum principles or practices.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content heavily discusses software delivery models, branching strategies, and the implications of these practices on the application lifecycle, making it a primary focus.",
    "level": "Secondary"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "ai_confidence": 95,
    "non_ai_confidence": 10,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses various branching models in Git, critiques traditional branch promotion strategies, and advocates for modern practices like GitHub Flow and Release Flow, making it central to the topic of modern source control.",
    "level": "Secondary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses branching models and their impact on delivery speed and team agility, which are relevant to agile planning, but the primary focus is on Git workflows rather than agile planning tools specifically.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on market share.",
    "level": "Ignored"
  },
  "Decision Making": {
    "category": "Decision Making",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "The content primarily discusses the decision-making process regarding branching strategies in software development, advocating for alternatives to traditional branch promotion models.",
    "level": "Secondary"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, rather than focusing on Test Driven Development as a central theme.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the flaws of branch promotion models in software development and advocates for alternative workflows, with transparency being a minor aspect rather than a central theme.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content heavily discusses the flaws of traditional branch promotion models and advocates for alternative practices like GitHub Flow and Release Flow, which are central to operational efficiency in software delivery.",
    "level": "Secondary"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching models and software delivery strategies, with no clear focus on working agreements.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses software delivery models and branching strategies, which relate to empirical process control principles, but the primary focus is on the critique of branch promotion rather than a detailed exploration of empirical process control itself.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models in software development and advocates for more efficient practices like GitHub Flow and Release Flow, demonstrating a strong focus on improving technical processes.",
    "level": "Secondary"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on customer feedback loops.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models in software development and advocates for more efficient practices, emphasising practical solutions for improving delivery and reducing complexity.",
    "level": "Secondary"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses branching models and workflows that impact team collaboration and delivery processes, making collaboration a significant theme, but it is primarily focused on the flaws of branch promotion strategies.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in version control, with no clear focus on remote working.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses team processes and collaboration in the context of branching models, but the primary focus is on the flaws of branch promotion strategies rather than collaboration itself.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies in Git, with no clear focus on Windows as a topic.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the flaws of branch promotion models in software development and advocates for alternative workflows, making it focused on software delivery practices rather than miscellaneous topics.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on the role or responsibilities of a Product Owner.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 6.0,
    "reasoning": "The content primarily discusses issues with branch promotion models and advocates for alternative branching strategies like GitHub Flow and Release Flow, without a clear focus on Acceptance Test Driven Development.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "Content primarily discusses the inefficiencies of branch promotion models and advocates for continuous delivery practices, which directly relate to reducing cycle time in software development.",
    "level": "Secondary"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and promotes GitHub Flow and Release Flow, which are aligned with Agile principles of continuous delivery and integration.",
    "level": "Secondary"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on evidence-based leadership principles.",
    "level": "Ignored"
  },
  "Scaling Scrum": {
    "category": "Scaling Scrum",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Scrum practices or scaling Scrum methodologies.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws of traditional branching models and advocates for continuous delivery practices, which are relevant to Agile principles, but the primary focus is on technical processes rather than leadership aspects.",
    "level": "Ignored"
  },
  "Scrum Product Development": {
    "category": "Scrum Product Development",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and their impact on software delivery, without a clear focus on Scrum principles or practices.",
    "level": "Ignored"
  },
  "BetaCodex": {
    "category": "BetaCodex",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily critiques traditional branching models and promotes alternatives like GitHub Flow and Release Flow, aligning closely with BetaCodex principles of agile delivery and continuous integration.",
    "level": "Secondary"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on team motivation.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for alternative deployment strategies like GitHub Flow and Release Flow, making deployment strategies the central theme.",
    "level": "Secondary"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "Content heavily discusses the flaws of traditional branch promotion models and advocates for alternatives that enhance value delivery through continuous integration and deployment.",
    "level": "Secondary"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses the inefficiencies and risks associated with traditional branch promotion models, highlighting how they contribute to technical debt in software delivery processes.",
    "level": "Secondary"
  },
  "Throughput": {
    "category": "Throughput",
    "ai_confidence": 92,
    "non_ai_confidence": 0,
    "final_score": 64.0,
    "reasoning": "Content primarily discusses the inefficiencies of branch promotion models and advocates for continuous delivery practices, which directly relate to improving throughput in software delivery.",
    "level": "Secondary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, focusing on the flaws of branch promotion and advocating for alternatives like GitHub Flow and Release Flow. Product discovery is not a central theme.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "ai_confidence": 80,
    "non_ai_confidence": 20,
    "final_score": 62.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes a shift towards more agile practices, highlighting the need for organisational change in software delivery processes.",
    "level": "Secondary"
  },
  "Scaling Kanban": {
    "category": "Scaling Kanban",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses issues with branch promotion models and alternatives like GitHub Flow and Release Flow, rather than focusing on Scaling Kanban.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "Content heavily discusses branching strategies, continuous integration, and delivery practices, making it primarily focused on engineering practices.",
    "level": "Secondary"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses software delivery models and their impact on value delivery, which aligns with Lean Startup principles, but the primary focus is on branching strategies rather than Lean Startup methodologies.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "ai_confidence": 92,
    "non_ai_confidence": 20,
    "final_score": 70.0,
    "reasoning": "The content primarily discusses the flaws of traditional branch promotion models and advocates for continuous integration practices, specifically highlighting GitHub Flow and Release Flow as effective alternatives.",
    "level": "Secondary"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on customer retention.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses the inefficiencies of branch promotion models and their impact on organisational processes, indicating a major theme of organisational dysfunction and the need for improved workflows.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the flaws in traditional software delivery models and promotes alternative approaches, indicating a systemic view of software development processes. However, it primarily focuses on branching strategies rather than a broader systems thinking perspective.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "Content primarily discusses software delivery models and practices that enhance reliability and agility in deployment, which are central themes in Site Reliability Engineering.",
    "level": "Secondary"
  },
  "Test Automation": {
    "category": "Test Automation",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 38.0,
    "reasoning": "The content discusses testing in the context of deployment strategies and branching models, but it primarily focuses on the flaws of branch promotion and the benefits of alternative workflows, making testing a secondary theme.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software delivery models and branching strategies, with no clear focus on accountability as a central theme.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software development practices and branching models in Git, with no clear focus on entrepreneurship.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 35.0,
    "reasoning": "The content discusses the issues and failures associated with branch promotion models, highlighting the risks and complexities they introduce. While troubleshooting is a significant theme, the primary focus is on advocating for alternative branching strategies rather than solely on troubleshooting specific problems.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses the flaws of traditional branch promotion models and advocates for continuous delivery practices, emphasising the importance of reducing deployment delays and increasing delivery speed.",
    "level": "Secondary"
  },
  "Resilience and Change": {
    "category": "Resilience and Change",
    "ai_confidence": 50,
    "non_ai_confidence": 20,
    "final_score": 41.0,
    "reasoning": "The content discusses the flaws of traditional branching models and promotes alternative strategies that enhance agility and stability, indicating a significant theme of change in software delivery practices.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses software development practices and branching models, with no clear focus on personal topics.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models in software engineering and advocates for more efficient practices, emphasising continuous integration and delivery, which aligns closely with the principles of engineering excellence.",
    "level": "Secondary"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Scrum teams or their roles.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 3.0,
    "reasoning": "The content primarily discusses branching strategies and software delivery models, with no clear focus on Azure Boards.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses issues with branch promotion models and alternatives like GitHub Flow and Release Flow, rather than focusing on backlog refinement.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "ai_confidence": 85,
    "non_ai_confidence": 10,
    "final_score": 62.0,
    "reasoning": "Content primarily critiques traditional software delivery models and promotes continuous integration and delivery, aligning closely with Agile principles of delivering value and maintaining flexibility.",
    "level": "Secondary"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "ai_confidence": 92,
    "non_ai_confidence": 10,
    "final_score": 67.0,
    "reasoning": "Content heavily critiques traditional branching models and promotes simpler alternatives, focusing on reducing complexity in software delivery processes.",
    "level": "Secondary"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "ai_confidence": 85,
    "non_ai_confidence": 0,
    "final_score": 59.0,
    "reasoning": "Content primarily discusses the flaws of traditional branching models and advocates for continuous delivery practices, which are central to enhancing enterprise agility.",
    "level": "Secondary"
  }
}
