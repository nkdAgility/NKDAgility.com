post:
  title: Release planning and predictable delivery
  link: https://nkdagility.com/blog/release-planning-and-predictable-delivery/
  pubDate: Tue, 24 Nov 2020 13:00:01 +0000
  creator: MrHinsh
  guid:
    _: http://nakedalmweb.wpengine.com/?p=9714
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <!-- wp:paragraph -->

    <p>Many organisations wrestle with the seeming incompatibility between agile
    and release management, and they struggle with release planning and
    predictable delivery.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><a href="https://nkdagility.com/the-2020-scrum-guide/">Updated to reflect
    the 2020 Scrum Guide!</a></p>

    <!-- /wp:paragraph -->


    <!-- wp:heading -->

    <h2 id="h-tl-dr">TL;DR;</h2>

    <!-- /wp:heading -->


    <!-- wp:paragraph -->

    <p>Without working software, you can't build trust and you don't know when
    you will get the next piece of working software.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>Any software that you create is an organisational asset and decisions to
    cut quality need to be reflected in your company accounts and as such those
    decisions need to made by your executive leadership and should not be made
    by <a href="/the-2020-scrum-guide/#developers">Developers</a>. Once you
    accept this, and quality becomes non-negotiable, your <a
    href="/the-2020-scrum-guide/#developers">Dev</a><a
    href="/the-2020-scrum-guide/#developers">e</a><a
    href="/the-2020-scrum-guide/#developers">lopers</a>&nbsp;can focus on
    creating usable increments of working software. Once you have usable
    increments of working software, you can then start to look with interest at
    the progress being made on features and goals.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>Without a regular cadence of delivery of&nbsp;working software any belief
    that you will get a usable increment is misguided at best. <a
    href="/the-2020-scrum-guide/#developers">Professional Developers</a> create
    working software.</p>

    <!-- /wp:paragraph -->


    <!-- wp:heading -->

    <h2 id="h-release-planning-and-predictable-delivery">Release planning and
    predictable delivery</h2>

    <!-- /wp:heading -->


    <!-- wp:paragraph -->

    <p>The incompatibility between predictable delivery and agility is
    fictitious <small>(<a href="http://clicktotweet.com/Ub4K3">tweet
    this</a>)</small> and while usually created by an organisation and structure
    that is unwilling to let go of the old ways and embrace the tenants of agile
    it can also be the result of a <a
    href="/the-2020-scrum-guide/#scrum-team">Scrum Teams</a> fervour to divest
    themselves of all things that smack of prior planning. There is a lack of
    understanding that agile and the path to agility is far more than just a
    change in the way that you build software, it is a fundamental shift in the
    way that you run your business. Much like the lean movement in
    manufacturing, companies that embraced it wholeheartedly were the ones that
    ultimately see the competitive edge that it provides. If one is unwilling to
    let go of the old ways, then one can’t attain the value of the new. This
    change will take hard work and courage as the fundamental transparency
    required to inspect and adapt effectively is at odds with the measures of
    the past. The lack of predictability of software development is the key to
    understanding the new model.</p>

    <!-- /wp:paragraph -->


    <!-- wp:heading -->

    <h2 id="h-why-is-software-so-unpredictable">Why is software so
    unpredictable</h2>

    <!-- /wp:heading -->


    <!-- wp:paragraph -->

    <p><strong>All software development is product development.</strong> In lean
    manufacturing, we can optimise the production of pre-developed products
    through the nature of its predictable production. Each unit of work takes
    the same amount of materials and time to produce so any changes that we make
    to the process,&nbsp;time, or materials can easily be qualified and the
    benefit demonstrated. <strong>Manufacturing lives in the predictive
    world.</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>With software everything that we create takes its own amount of time: You
    can really only know how long something took after it has been completed.
    Even in manufacturing if you asked an engineer how long it would take to
    develop a new type of unit of work they would not be able to tell you with
    any certainty. Once they have developed it however they can tell you exactly
    how long it will take to make each one, and then systematically optimise the
    process that you use to make it. In software development we are always doing
    new product design, therefore, we have no certainty...and this often results
    in chaos. <strong>Software lives in the empirical world.</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>All is not lost however as we can, by looking at our history of delivery
    for similar things, make a pretty good <strong>forecast</strong>…</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>The best thing we can then do is to expend effort to make that forecast
    as accurate as possible while accepting that more time spent planning does
    not necessarily affect the accuracy of that forecast.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><img src="https://nkdagility.com/files/2013/06/image80.png" alt="image"
    width="624" height="369"/><br /><small>Figure: Diminishing returns from <a
    href="http://leadinganswers.typepad.com/leading_answers/2007/11/agile-estimatin.html">Agile
    Estimating – Estimation Approaches</a></small></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>Ultimately Software Development is a creative endeavour and has the same
    lack of predictability that painting a picture, writing a book or making a
    movie has. Yet movies get made all of the time. How can that possibly be!
    Well, they have a Director (<a
    href="/the-2020-scrum-guide/#product-owner">Product Owner</a>) that has a
    bunch of money and a delivery plan, a Producer (Scrum Master) to make sure
    that everyone has the skills, knowledge and assets available at the right
    time and place and one or more Units (Scrum Teams) that have all of the
    skills necessary to turn the Directors ideas into a working movie. They
    create Storyboards of what they expect to create so that they can run it
    past the stakeholders and get feedback. They take those storyboards to the
    Units who collaboratively work together with the stunt, prop, lighting,
    camera, sound and wardrobe crews to get estimates and costs and ultimately
    coordinating to create the movie. Sometimes they don’t know how to do stuff
    and have to have a go and see what they get.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>Making a movie is just like building software, you need a budget, you
    need a plan, and you are trying to reach a ship date. And just like making a
    movie, you have to make money at the end of the day so that you can do it
    all over again.</p>

    <!-- /wp:paragraph -->


    <!-- wp:heading -->

    <h2 id="h-accept-the-lack-of-predictability">Accept the lack of
    predictability</h2>

    <!-- /wp:heading -->


    <!-- wp:paragraph -->

    <p>While I hope by now you understand that the lack of predictability is
    part of the nature of building software, there are many things that we can
    do to lessen the impact of that chaos. Indeed if you were to estimate all of
    the discreet things that you need to do to achieve a goal (let us call them
    backlog items) in Small, Medium and Large what would your standard deviation
    of actual hours be? I would wager that it is fairly large. So large in fact
    that at least half of all mediums would be more accurately classified as
    Large. But that reclassification can only be done with hindsight. This is
    indeed one of the tenants of the No-Estimates movement, as really there are
    only three classifications of size: <strong>small,</strong><span>
    </span><strong>fits</strong> in a Sprint, or <strong>too big</strong> to fit
    in a Sprint.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>This difficulty in estimation&nbsp;is normal for organisations that move
    towards agility as the transparency that it brings uncovers these sorts of
    problems. In order to increase the accuracies of our forecasts, there are a
    number of simple activities that we can perform. These activities, while
    easy to understand, are very hard to do as they require a culture shift
    within your organisation as well as the courage of the participants to make
    them work.</p>

    <!-- /wp:paragraph -->


    <!-- wp:heading -->

    <h2 id="h-focus-on-continuous-quality">Focus on continuous quality</h2>

    <!-- /wp:heading -->


    <!-- wp:paragraph -->

    <p>Most software lacks quality for the simple reason that you can not easily
    see the quality in software like you could with a table or a painting. I am
    not talking about the quality of the User Interface, but the quality under
    the covers; the quality of the code.</p>

    <!-- /wp:paragraph -->


    <!-- wp:quote -->

    <blockquote class="wp-block-quote"><p>If you put developers under pressure
    to deliver they will continuously and increasingly cut quality to meet
    deadlines.<small>-Unknown (<a href="http://clicktotweet.com/0U2be">Tweet
    this</a>)</small></p></blockquote>

    <!-- /wp:quote -->


    <!-- wp:paragraph -->

    <p>A lack of quality of the code results in an increase in <a
    href="/blog/professional-scrum-teams-build-software-works/">Technical
    Debt</a> (or more accurately an unhedged fund) which in turn results in two
    nasties. The first is the teams increasingly have to spend more time
    struggling with the complexity of your software rather than on new features.
    If you are still pushing your teams to deliver the same feature level every
    year you are only encouraging them to cut more quality and thus incurring
    more technical debt which&nbsp;becomes a vicious cycle. The second is an
    increasing number of bugs found in production. Bugs found in production also
    directly impact on the number of features that the team can deliver and any
    bug, no matter how small, costs ten times and much to fix in production than
    it does in development.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>The only way to handle technical debt is to stop creating it, and then
    pay a little back each iteration. If however, you are so drowning in
    technical debt that you cant create working software at the end of the
    iteration then:</p>

    <!-- /wp:paragraph -->


    <!-- wp:list {"ordered":true} -->

    <ol><li>Create a <strong><a
    href="/blog/getting-started-definition-done-dod/">short measurable
    checklist</a></strong> that mirrors minimum releasable product (<a
    href="/blog/getting-started-definition-done-dod/">Defenition of
    Done</a>)</li><li>Stop adding new features and <strong>make your product
    meet that checklist</strong> and release your product</li><li>While you have
    an increment of working software (<a
    href="/the-2020-scrum-guide/#the-sprint">Sprint</a>)<ol><li><strong>Work to
    create something of value (<a
    href="/the-2020-scrum-guide/#increment">Increment</a>)</strong><ol><li>Work
    towards a new goal while meeting the DOD (<a
    href="/blog/the-sprint-goal-is-a-commitment-for-the-sprint-backlog/">Sprint
    Goal</a>)</li><li>Leave things better than you found them (Engineering
    Excellence)</li></ol></li><li><strong>Review that thing of value with your
    stakeholders (<a href="/the-2020-scrum-guide/#sprint-review">Sprint
    Review</a>, Backlog Adaption)</strong><ol><li>Get feedback on at least one
    new thing for stakeholders</li><li>Update the Backlog to reflect this new
    information</li></ol></li><li><strong>Reflect on how you worked with your
    entire team (<a href="/the-2020-scrum-guide/#sprint-retrospective">Sprint
    Retrospective</a>, Kaizen)</strong><ol><li>Is quality increasing?</li><li>Is
    the DOD increasing?</li><li>What can we change to make things
    better?</li></ol></li></ol></li><li>Go to #1</li></ol>

    <!-- /wp:list -->


    <!-- wp:paragraph -->

    <p>You can call the activity that results from dropping out of the while
    loop of working software to be a <strong>Scrumble</strong>; You need to stop
    piling more features on top of the features that don’t work and fix things
    so that you can make new things. Ultimately <a
    href="/blog/professional-scrum-teams-build-software-works/">professional
    teams build software that works</a>.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>There are a number of strategies that can help you both stop creating and
    start paying back technical-debt:</p>

    <!-- /wp:paragraph -->


    <!-- wp:list -->

    <ul><li><strong>Sufficient requirements</strong> – If your backlog has
    things in it that are too big or too vague then your team will not really be
    able to understand them and this, in turn, creates a multiplier for
    uncertainty. Follow the INVEST (Independent, Negotiable, Valued, Estimable,
    Small, Testable ) model for every single thing that you ask the team to
    deliver. If you invest in you backlog in this way you will find it much
    easier to deliver the contents and thus predict that delivery. This will
    require you to spend a significant amount of time in refinement. Backlog
    refinement is key to facilitating a flow of actionable Backlog Items to your
    team.</li><li><strong>The <a
    href="/the-2020-scrum-guide/#developers">Developers </a>choose what they can
    deliver</strong> – this implies that the <a
    href="/the-2020-scrum-guide/#developers">Developers </a>can reject any item
    on the backlog that they do not understand. If we accept that every <a
    href="/the-2020-scrum-guide/#developers">Developer </a>is trying to do their
    best to deliver for their <a
    href="/the-2020-scrum-guide/#product-owner">Product Owner</a> then the only
    reason to reject anything would be if an item is too big or does not have
    enough detail to understand. These Backlog Items can be put on the queue for
    refinement and refined over the next Sprint. Remember that there is <a
    href="/blog/the-fallacy-of-the-rejected-backlog-item/">no such thing as a
    rejected backlog item</a>, only actionable feedback and continuous
    improvement.</li><li><strong>Definition of Done (DoD)</strong> – Along with
    having sufficient requirements the single biggest blocker to predictability
    is a lack of common understanding of DONE. Done for <a
    href="/the-2020-scrum-guide/#developers">Developers</a> should equal what it
    means to complete an item with no further work required to ship it. If <a
    href="/blog/professional-scrum-teams-build-software-works/">you cant ship
    working software</a> then you need to stop sprinting, Scrumble, and focus on
    getting your software into a shape that can be delivered in a
    Sprint.</li><li><strong>Test First</strong> - Focus on <a
    href="/blog/you-are-doing-it-wrong-if-you-are-not-using-test-first/">Test
    First practices like TDD or ATDD</a> to help you make sure that not only did
    your engineers build what they expect, but that you ultimately built what
    the customer expects.</li><li><strong>Fixed length iterations</strong> – If
    you have variable length iterations you can’t be sure what you can do in a
    particular timeframe. How much decomposition do you need to do to the
    backlog? How much can the team deliver in a single iteration? You can’t be
    sure unless you have fixed length iteration, and <a
    href="/blog/a-better-way-than-staggered-iterations-for-delivery/">you reject
    the idea of staggered iterations</a>.</li><li><strong>No separate
    teams</strong> – This means no separate test teams, configuration management
    teams and definitely no separate maintenance teams. It's hard for folks to
    grasp, especially with the recent focus on DevOps but if you have separate
    teams then why would your <a
    href="/the-2020-scrum-guide/#developers">Developers</a>, those best placed
    to fix any problems, care about the problems of other teams. The most
    successful organisations at creating software have development teams that
    own the entire application lifecycle (Amazon AWS | Visual Studio | Azure
    DevOps.)</li><li><strong>Manage dependencies</strong> - Managing
    dependencies is a hard task and my advice&nbsp;would always be to minimise
    the number of dependencies that you have.&nbsp;<a
    href="/the-2020-scrum-guide/#developers">Developers </a>should have all of
    the skills required to deliver what you want at the quality level that you
    want. So if you need to have productionised databases or scripting for
    production delivery then you might need a DBA or an Operations administrator
    or two. This can be hard for many teams or organisations but you will have
    far less success creating silos like Configuration Management or DevOps.
    Rather add those individuals that you need to the team. However, if you have
    a dependency on a separate team, maybe you have an application upon which
    all of your other applications depend, then you may need another way. This
    is not a silo of types of individual skills, but of a domain and that team
    just has something in their backlog upon which you are dependent. It is up
    to the team's respective <a
    href="/the-2020-scrum-guide/#product-owner">Product Owners</a> to
    <del>fight</del> negotiate over when these things get
    done.</li><li><strong>Use a modern source control system</strong> - A <a
    href="/blog/getting-started-with-modern-source-control-system-and-devops/">modern
    source control system is more than just code management</a>, it should
    include all of the goodies talked about in DevOps practices and
    beyond.</li></ul>

    <!-- /wp:list -->


    <!-- wp:paragraph -->

    <p>If you can, do them all, and many more…</p>

    <!-- /wp:paragraph -->
  - >-
    <p class="lead">Many organisations wrestle with the seeming incompatibility
    between agile and release management and they struggle with release planning
    and predictable delivery. </p>
  post_id: '9714'
  post_date: '2020-11-24 13:00:01'
  post_date_gmt: '2020-11-24 13:00:01'
  post_modified: '2021-02-26 13:33:48'
  post_modified_gmt: '2021-02-26 13:33:48'
  comment_status: open
  ping_status: open
  post_name: release-planning-and-predictable-delivery
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '64'
  - meta_key: _thumbnail_id
    meta_value: '38235'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _syn_old_sitegroups
    meta_value: a:0:{}
  - meta_key: _syn_selected_sitegroups
    meta_value: ''
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:7:"default";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _yoast_wpseo_focuskw
    meta_value: predictable delivery
  - meta_key: _yoast_wpseo_title
    meta_value: Release planning and predictable delivery
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      Many organisations wrestle with the seeming incompatibility between agile
      and release management and they struggle with release planning and
      predictable delivery.
  - meta_key: _syn_slave_post_states
    meta_value: a:0:{}
  - meta_key: dsq_thread_id
    meta_value: '1449723627'
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: wp-to-buffer-log
    meta_value: >-
      O:8:"stdClass":5:{s:7:"updates";a:3:{i:0;O:8:"stdClass":17:{s:3:"_id";s:24:"51d47b15e8309b4f5900000c";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1372879637;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1372924680;s:8:"due_time";s:7:"8:58
      am";s:2:"id";s:24:"51d47b15e8309b4f5900000c";s:10:"profile_id";s:24:"507a4e20d9320dd125000018";s:15:"profile_service";s:7:"twitter";s:10:"shared_now";b:0;s:6:"status";s:6:"buffer";s:4:"text";s:81:"New
      Post: Release planning and predictable delivery http://buff.ly/1cS0Sdv
      #vsalm";s:14:"text_formatted";s:296:"New Post: Release planning and
      predictable delivery <a class="url" href="http://buff.ly/1cS0Sdv"
      rel="external nofollow" target="_blank">http://buff.ly/1cS0Sdv</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1372879637;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}i:1;O:8:"stdClass":18:{s:3:"_id";s:24:"51d47b15e8309b4f5900000d";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1372879637;s:3:"day";s:5:"Today";s:6:"due_at";i:1372896360;s:8:"due_time";s:7:"6:06
      pm";s:2:"id";s:24:"51d47b15e8309b4f5900000d";s:5:"media";O:8:"stdClass":5:{s:8:"original";s:64:"http://nkdagility.com/release-planning-and-predictable-delivery/";s:11:"description";s:162:"Many
      organisations wrestle with the seaming incompatibility between agile and
      release management and they struggle with release planning and predictable
      delivery.";s:5:"title";s:41:"Release planning and predictable
      delivery";s:4:"link";s:64:"http://nkdagility.com/release-planning-and-predictable-delivery/";s:7:"preview";s:94:"http://i2.wp.com/nakedalmweb.wpengine.com/files/2012/03/metro-process-link.png?fit=1024%2C1024";}s:10:"profile_id";s:24:"5088ae7ed9320d615a00000a";s:15:"profile_service";s:8:"facebook";s:10:"shared_now";b:0;s:6:"status";s:6:"buffer";s:4:"text";s:81:"New
      Post: Release planning and predictable delivery http://buff.ly/1cS0SdB
      #vsalm";s:14:"text_formatted";s:296:"New Post: Release planning and
      predictable delivery <a class="url" href="http://buff.ly/1cS0SdB"
      rel="external nofollow" target="_blank">http://buff.ly/1cS0SdB</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1372879637;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}i:2;O:8:"stdClass":18:{s:3:"_id";s:24:"51d47b16e8309b4f5900000e";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1372879638;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1372931340;s:8:"due_time";s:8:"10:49
      am";s:2:"id";s:24:"51d47b16e8309b4f5900000e";s:5:"media";O:8:"stdClass":5:{s:8:"original";s:64:"http://nkdagility.com/release-planning-and-predictable-delivery/";s:11:"description";s:162:"Many
      organisations wrestle with the seaming incompatibility between agile and
      release management and they struggle with release planning and predictable
      delivery.";s:5:"title";s:41:"Release planning and predictable
      delivery";s:4:"link";s:64:"http://nkdagility.com/release-planning-and-predictable-delivery/";s:7:"preview";s:94:"http://i2.wp.com/nakedalmweb.wpengine.com/files/2012/03/metro-process-link.png?fit=1024%2C1024";}s:10:"profile_id";s:24:"5088ae96d9320d3a5a00000a";s:15:"profile_service";s:8:"linkedin";s:10:"shared_now";b:0;s:6:"status";s:6:"buffer";s:4:"text";s:81:"New
      Post: Release planning and predictable delivery http://buff.ly/1cS0Rqf
      #vsalm";s:14:"text_formatted";s:296:"New Post: Release planning and
      predictable delivery <a class="url" href="http://buff.ly/1cS0Rqf"
      rel="external nofollow" target="_blank">http://buff.ly/1cS0Rqf</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1372879638;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}}s:17:"buffer_percentage";i:10;s:12:"buffer_count";i:1;s:7:"success";b:1;s:7:"message";s:48:"One
      more post in your Buffer. Keep it topped up!";}
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/11AIypH
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474410555;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10372;}i:1;a:1:{s:2:"id";i:9716;}i:2;a:1:{s:2:"id";i:10058;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2013-07-03-release-planning-and-predictable-delivery.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: pl_magazine_format
    meta_value: ''
  - meta_key: _yoast_wpseo_primary_category
    meta_value: '9'
  - meta_key: _yoast_wpseo_primary_marketing-category
    meta_value: '612'
  - meta_key: _wpml_media_duplicate
    meta_value: ''
  - meta_key: _wpml_media_featured
    meta_value: ''
  - meta_key: _yoast_wpseo_focuskw_text_input
    meta_value: predictable delivery
  - meta_key: _yoast_wpseo_content_score
    meta_value: '30'
  - meta_key: _yoast_wpseo_focuskeywords
    meta_value: '[]'
  - meta_key: _wpcom_is_markdown
    meta_value: '1'
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.9.3
  - meta_key: _wpv_contains_gutenberg_views
    meta_value: ''
  - meta_key: kamy_acc_user_role
    meta_value: a:0:{}
  - meta_key: kamy_acc_group_child
    meta_value: '[]'
  - meta_key: kamy_acc_group_default_filed
    meta_value: '[]'
  - meta_key: _yoast_wpseo_keywordsynonyms
    meta_value: '[""]'
  - meta_key: hefo_before
    meta_value: '0'
  - meta_key: hefo_after
    meta_value: '0'
  - meta_key: _yoast_wpseo_estimated-reading-time-minutes
    meta_value: '10'
  - meta_key: ekit_post_views_count
    meta_value: '4068'
  - meta_key: _toolset_associations_audience-post
    meta_value: >-
      {!{https://nakedalmstage.wpengine.com/?post_type=audience&#038;p=44704}!}
      +
      {!{https://nakedalmstage.wpengine.com/blog/audience-post/audiences-posts-44704-9714/}!},
      {!{https://nakedalmstage.wpengine.com/?post_type=audience&#038;p=44703}!}
      +
      {!{https://nakedalmstage.wpengine.com/blog/audience-post/audiences-posts-44703-9714/}!}
  comment:
  - comment_id: '1728'
    comment_author: Russ Collier
    comment_author_email: russ.collier@gmail.com
    comment_author_url: http://www.devopsonwindows.com/
    comment_author_IP: 75.224.180.86
    comment_date: '2013-07-10 12:50:00'
    comment_date_gmt: '2013-07-10 11:50:00'
    comment_content: >-
      Hi Martin,


      Great article! I especially like your analogy comparing creating software
      with movie making.


      However, I disagree with your points about DevOps. In my opinion - which
      admittedly might go against the DevOps movement as a whole - DevOps is
      about building stronger partnerships between the existing teams, dev and
      ops, rather than creating a new silo to live between them.


      This is especially true with configuration management where dev teams must
      learn to take ownership of the configuration and how it is managed in all
      environments, not just chuck it over the wall and make it an ops problem.
      A friend and colleague of mine discusses this in more detail in an article
      on our site, DevOps on Windows:
      http://www.devopsonwindows.com/configuration-done-right/


      Anyway, thanks again for the article, keep up the good work!


      Russ
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '957301021'
  - comment_id: '1729'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 71.231.177.177
    comment_date: '2013-07-10 14:05:00'
    comment_date_gmt: '2013-07-10 13:05:00'
    comment_content: |-
      Russ,


       Thanks for your response.


       The problem is not with "devops" but that it has to exist in the first place. It is a band aid and not a solution. Why do we have a situation where people can 'chuck it over the wall' at all? Operations should be responsible for hardware only. The application should be supported and maintained by the Development Team. This removes the silo and forces the Development Team to deal with their own messes.


       Get rid of all of the silos by making the folks that would be in that silo part of the Development Team and holding the entire team accountable and responsible for delivery all the way to production.


      -MrHinsh
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1728'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '957301021'
    - meta_key: dsq_post_id
      meta_value: '957356877'
  - comment_id: '1822'
    comment_author: Does your company culture resemble Survivor?
    comment_author_email: ''
    comment_author_url: http://blog.nwcadence.com/does-your-company-culture-resemble-survivor/
    comment_author_IP: 66.175.212.70
    comment_date: '2013-08-21 19:25:06'
    comment_date_gmt: '2013-08-21 19:25:06'
    comment_content: '[&#8230;] Release planning and predictable delivery [&#8230;]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1377113107.192873;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1377126282.686828;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '4571'
    comment_author: Does your company culture resemble Survivor? - Scrum.org Community Blog
    comment_author_email: ''
    comment_author_url: http://blog.scrum.org/company-culture-resemble-survivor/
    comment_author_IP: 191.237.129.87
    comment_date: '2014-09-10 16:20:04'
    comment_date_gmt: '2014-09-10 15:20:04'
    comment_content: '[&#8230;] Release planning and predictable delivery [&#8230;]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1410362404.159405;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1411998941.813854;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '14431'
    comment_author: The fallacy of the rejected backlog item
    comment_author_email: ''
    comment_author_url: https://nkdagility.com/the-fallacy-of-the-rejected-backlog-item/
    comment_author_IP: 104.199.122.113
    comment_date: '2017-12-13 11:24:36'
    comment_date_gmt: '2017-12-13 11:24:36'
    comment_content: >-
      [&#8230;] any chance of predictability for future sprints until the undone
      work is under [&#8230;]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: a:2:{s:4:"time";d:1513164276.418551;s:5:"event";s:9:"check-ham";}
    - meta_key: akismet_history
      meta_value: >-
        a:3:{s:4:"time";d:1513166907.083255;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '14457'
    comment_author: Dew Drop - January 2, 2018 (#2634) - Morning Dew
    comment_author_email: ''
    comment_author_url: https://www.alvinashcraft.com/2018/01/02/dew-drop-january-2-2018-2634/
    comment_author_IP: 168.62.48.33
    comment_date: '2018-01-02 12:50:15'
    comment_date_gmt: '2018-01-02 12:50:15'
    comment_content: >-
      [&#8230;] Release planning and predictable delivery (Martin Hinshelwood)
      [&#8230;]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: a:2:{s:4:"time";d:1514897415.96752;s:5:"event";s:9:"check-ham";}
    - meta_key: akismet_history
      meta_value: >-
        a:3:{s:4:"time";d:1514978153.645545;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '14469'
    comment_author: >-
      Getting started with a Definition of Done (DoD). | Martin Hinshelwood -
      naked Agility Ltd
    comment_author_email: ''
    comment_author_url: https://nkdagility.com/getting-started-definition-done-dod/
    comment_author_IP: 104.197.208.225
    comment_date: '2018-01-10 12:08:42'
    comment_date_gmt: '2018-01-10 12:08:42'
    comment_content: >-
      [&#8230;] Workshop. Without a Defenition of Done we don&#8217;t understand
      what working software means, and without working software we cant have
      predictable delivery. Your Product Owner can&#8217;t reject a Backlog
      Item, only whether the Increment is working or [&#8230;]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: a:2:{s:4:"time";d:1515586122.871075;s:5:"event";s:9:"check-ham";}
    - meta_key: akismet_history
      meta_value: >-
        a:3:{s:4:"time";d:1515591368.755763;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
