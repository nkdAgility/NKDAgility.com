post:
  title: IHandlerFactory
  link: https://nkdagility.com/blog/ihandlerfactory/
  pubDate: Tue, 05 Aug 2008 10:11:13 +0000
  creator: MrHinsh
  guid:
    _: http://geekswithblogs.net/hinshelm/archive/2008/08/05/ihandlerfactory.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p>As you have probably noticed I have moved URL’s (sorry to all you feed readers with the duplicate entries). The reason I moved my blog was to free up the <a href=\"http://hinshelwood.com\">http://hinshelwood.com</a> URL for use as a personal site that then links to my blog. When you do this you need to consider all of your current users, bookmarks, feeds, links and all that malarkey.</p>\n<p>So, I created a WebRedirect (thanks to DynDNS.org) that means that all hinshelwood.com traffic is automatically redirected to blog.hinshelwood.com including all of the sub pages. This is fine until I actually put up a site on hinshelwood.com and brake all of the links… HttpHandler to the rescue…</p>\n<p>The first step was to create a “BlogRedirectHandler” to redirect all of those pesky URL’s to the new site.</p>\n<pre><span style=\"color: blue\">Imports </span>System.Text.RegularExpressions\n<span style=\"color: blue\">Imports </span>System.Web\n\n<span style=\"color: blue\">Namespace </span>Core.Handlers\n\n    <span style=\"color: blue\">Public Class </span>BlogRedirectHandler\n        <span style=\"color: blue\">Implements </span>IHttpHandler\n\n        <span style=\"color: blue\">Private Shared </span>m_Patterns() <span style=\"color: blue\">As String </span>= {<span style=\"color: #a31515\">\"/archive/*\"</span>, _\n                                                 <span style=\"color: #a31515\">\"/Tag/*/default.aspx\"</span>, _\n                                                 <span style=\"color: #a31515\">\"/category/*\"</span>}\n\n        <span style=\"color: blue\">Public Shared Function </span>IsValidToRun(<span style=\"color: blue\">ByVal </span>context <span style=\"color: blue\">As </span>System.Web.HttpContext, _\n                                            <span style=\"color: blue\">ByVal </span>requestType <span style=\"color: blue\">As String</span>, _\n                                            <span style=\"color: blue\">ByVal </span>virtualPath <span style=\"color: blue\">As String</span>, _\n                                            <span style=\"color: blue\">ByVal </span>path <span style=\"color: blue\">As String</span>) <span style=\"color: blue\">As Boolean\n            For Each </span>p <span style=\"color: blue\">In </span>m_Patterns\n                <span style=\"color: blue\">If </span>Regex.IsMatch(context.Request.Url.ToString, p) <span style=\"color: blue\">Then Return True\n            Next\n            Return False\n        End Function\n\n        Public ReadOnly Property </span>IsReusable() <span style=\"color: blue\">As Boolean Implements </span>IHttpHandler.IsReusable\n            <span style=\"color: blue\">Get\n                Return True\n            End Get\n        End Property\n\n        Public Sub </span>ProcessRequest(<span style=\"color: blue\">ByVal </span>context <span style=\"color: blue\">As </span>System.Web.HttpContext) <span style=\"color: blue\">Implements </span>IHttpHandler.ProcessRequest\n            <span style=\"color: blue\">Dim </span>oldurl <span style=\"color: blue\">As String </span>= context.Request.Url.ToString\n            <span style=\"color: blue\">If </span>oldurl.Contains(<span style=\"color: #a31515\">\"/archive/\"</span>) <span style=\"color: blue\">Then\n                Dim </span>newurl <span style=\"color: blue\">As String </span>= <span style=\"color: #a31515\">\"http://blog.hinshelwood.com\" </span>&amp; context.Request.Url.AbsolutePath\n                context.Response.StatusCode = System.Net.HttpStatusCode.MovedPermanently <span style=\"color: green\">' permanent HTTP 301\n                </span>context.Response.RedirectLocation = newurl\n                context.Response.StatusDescription = <span style=\"color: #a31515\">\"Moved Permanently\"\n                </span>context.Response.ContentType = <span style=\"color: #a31515\">\"text/html\"\n                </span>context.Response.Write(<span style=\"color: #a31515\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;Object Moved&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\"</span>)\n                context.Response.Write(<span style=\"color: #a31515\">\"&lt;h2&gt;Object moved to &lt;a href=\" </span>&amp; newurl &amp; <span style=\"color: #a31515\">\" &gt;here&lt;/a&gt;.&lt;/h2&gt;\"</span>)\n                context.Response.Write(<span style=\"color: #a31515\">\"&lt;/body&gt;&lt;/html&gt;\"</span>)\n                context.Response.End()\n            <span style=\"color: blue\">End If\n\n        End Sub\n\n    End Class\n\nEnd Namespace</span></pre>\n<p>This little piece of code has two important pieces, the “IsValidToRun” which makes sure that we need to run it, and the “ProcessRequest” method that does the actual dog work of the redirect.</p>\n<p>I have chosen to use a “MovedPermanently“ status so that the search engines will catch on more quickly and the new URL should quite quickly replace the old.</p>\n<p>If we just added this handler to the web application we would loose all of our .aspx pages and only see a blank page for those that are not valid for this handler.</p>\n<p>To handle this the easiest way is to inherit from the existing “PageHandlerFactory” that is the default in ASP.NET.</p>\n<pre><span style=\"color: blue\">Imports </span>System.Web\n\n<span style=\"color: blue\">Namespace </span>Core.Handlers\n\n    <span style=\"color: blue\">Public Class </span>CustomPageHandlerFactory\n        <span style=\"color: blue\">Inherits </span>PageHandlerFactory\n\n        <span style=\"color: blue\">Public Overrides Function </span>GetHandler(<span style=\"color: blue\">ByVal </span>context <span style=\"color: blue\">As </span>System.Web.HttpContext, _\n                                             <span style=\"color: blue\">ByVal </span>requestType <span style=\"color: blue\">As String</span>, _\n                                             <span style=\"color: blue\">ByVal </span>virtualPath <span style=\"color: blue\">As String</span>, _\n                                             <span style=\"color: blue\">ByVal </span>path <span style=\"color: blue\">As String</span>) <span style=\"color: blue\">As </span>IHttpHandler\n            <span style=\"color: blue\">If </span>BlogRedirectHandler.IsValidToRun(context, requestType, virtualPath, path) <span style=\"color: blue\">Then\n                Return New </span>BlogRedirectHandler\n            <span style=\"color: blue\">Else\n                Return MyBase</span>.GetHandler(context, requestType, virtualPath, path)\n            <span style=\"color: blue\">End If\n        End Function\n    End Class\n\nEnd Namespace</span></pre>\n<p>\_</p>\n<p>Then all we need to do is call our IsValidToRun method and either run the base (default) GetHandler or return our new handler…</p>\n<blockquote>\n<p>\_</p>\n<div class=\"wlWriterSmartContent\" style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\">Technorati Tags: <a rel=\"tag\" href=\"http://technorati.com/tags/.NET+3.5\">.NET 3.5</a>,<a rel=\"tag\" href=\"http://technorati.com/tags/.NET\">.NET 2.0</a></div>\n</blockquote>"
  - ''
  post_id: '214'
  post_date: '2008-08-05 10:11:13'
  post_date_gmt: '2008-08-05 10:11:13'
  post_modified: '2008-08-05 10:11:13'
  post_modified_gmt: '2008-08-05 10:11:13'
  comment_status: open
  ping_status: open
  post_name: ihandlerfactory
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '320581448'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1bahLiE
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1467836078;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:73;}i:1;a:1:{s:2:"id";i:74;}i:2;a:1:{s:2:"id";i:142;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2008-08-05-ihandlerfactory.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '286'
