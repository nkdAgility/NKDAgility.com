{
  "Agile Product Management": {
    "category": "Agile Product Management",
    "calculated_at": "2025-02-16T01:59:53",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details related to WPF and dependency injection, with no clear focus on Agile Product Management principles or practices.",
    "level": "Ignored"
  },
  "Practical Techniques and Tooling": {
    "category": "Practical Techniques and Tooling",
    "calculated_at": "2025-03-07T15:42:21",
    "ai_confidence": 78.0,
    "ai_mentions": 85.0,
    "ai_alignment": 75.0,
    "ai_depth": 70.0,
    "non_ai_confidence": 10,
    "final_score": 71.0,
    "reasoning": "The content provides a detailed exploration of using Ninject for dependency injection in a WPF application, which aligns well with practical techniques and tooling in software development. It discusses the implementation of a custom DataSourceProvider and the integration of Ninject, showcasing a specific tool and methodology. The depth of discussion includes code examples and explanations of how to achieve the desired functionality, demonstrating a strong focus on practical application. However, while it is primarily focused on tooling, it does not cover broader Agile or DevOps practices, which slightly lowers the overall confidence score.",
    "level": "Secondary"
  },
  "Platform Engineering": {
    "category": "Platform Engineering",
    "calculated_at": "2025-02-16T01:59:56",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF applications and does not focus on platform engineering principles or Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "category": "Evidence Based Management",
    "calculated_at": "2025-02-16T01:59:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and dependency injection using Ninject, with no focus on Evidence-Based Management principles or practices.",
    "level": "Ignored"
  },
  "Code and Complexity": {
    "category": "Code and Complexity",
    "calculated_at": "2025-02-17T09:09:22",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses dependency injection and the implementation of a custom DataSourceProvider in WPF, which relates to code quality and maintainability. However, the primary focus is on specific coding practices rather than a broader exploration of complexity theory or its impact on software architecture.",
    "level": "Tertiary"
  },
  "Discovery and Learning": {
    "category": "Discovery and Learning",
    "calculated_at": "2025-02-16T02:00:02",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details related to WPF and dependency injection, without a focus on discovery or learning processes.",
    "level": "Ignored"
  },
  "AI and Automation in Agility": {
    "category": "AI and Automation in Agility",
    "calculated_at": "2025-02-16T02:00:04",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, which is unrelated to AI and automation in Agile practices.",
    "level": "Ignored"
  },
  "Lean": {
    "category": "Lean",
    "calculated_at": "2025-02-16T02:00:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, with no reference to Lean principles or methodologies.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "category": "Install and Configuration",
    "calculated_at": "2025-02-16T02:00:07",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses the implementation of a custom DataSourceProvider using Ninject in a WPF application, rather than focusing on installation or configuration processes.",
    "level": "Ignored"
  },
  "Transparency and Accountability": {
    "category": "Transparency and Accountability",
    "calculated_at": "2025-02-16T02:00:09",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and dependency injection, with no focus on transparency or accountability principles.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "category": "Market Adaptability",
    "calculated_at": "2025-02-16T02:00:10",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the implementation of dependency injection in WPF using Ninject, without a focus on market adaptability strategies or methodologies.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-02-16T02:00:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and dependency injection using Ninject, without addressing the interplay between technology and organisational structures.",
    "level": "Ignored"
  },
  "Resilience and Change": {
    "category": "Resilience and Change",
    "calculated_at": "2025-02-16T02:00:13",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses technical implementations of dependency injection in WPF using Ninject, without addressing organisational resilience or change management.",
    "level": "Ignored"
  },
  "DevOps": {
    "category": "DevOps",
    "calculated_at": "2025-02-16T02:00:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, which is not related to DevOps principles or practices.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "category": "Miscellaneous",
    "calculated_at": "2025-02-16T02:00:50",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and Ninject, which are specific technologies and practices, rather than general discussions on Agile methodologies or concepts.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "category": "Decision Theory",
    "calculated_at": "2025-02-16T02:00:52",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementations related to WPF and dependency injection, with no focus on decision-making processes or theories.",
    "level": "Ignored"
  },
  "Events and Presentations": {
    "category": "Events and Presentations",
    "calculated_at": "2025-02-16T02:00:53",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and Ninject, with no reference to events, presentations, or discussions related to Agile, DevOps, or software engineering events.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "category": "Flow Efficiency",
    "calculated_at": "2025-02-16T02:00:54",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF applications and does not address flow efficiency principles or techniques.",
    "level": "Ignored"
  },
  "People and Process": {
    "category": "People and Process",
    "calculated_at": "2025-02-16T02:00:55",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of dependency injection in WPF using Ninject, with no focus on human behaviour or structured methodologies in technology and product development.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "category": "Enterprise Agility",
    "calculated_at": "2025-02-16T02:00:57",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and dependency injection using Ninject, without addressing enterprise agility or organisational adaptability.",
    "level": "Ignored"
  },
  "Business Agility": {
    "category": "Business Agility",
    "calculated_at": "2025-02-16T02:00:58",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and dependency injection using Ninject, with no clear focus on business agility principles or practices.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "category": "Metrics and Learning",
    "calculated_at": "2025-02-16T02:00:59",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses dependency injection in WPF applications and does not address metrics, learning, or evidence-based decision-making.",
    "level": "Ignored"
  },
  "Kanban": {
    "category": "Kanban",
    "calculated_at": "2025-02-16T02:01:00",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, dependency injection, and MVVM, with no mention of Kanban principles or practices.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "category": "Technical Excellence",
    "calculated_at": "2025-03-10T13:08:09",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 65.0,
    "reasoning": "The content discusses the implementation of dependency injection using Ninject in a WPF application, which aligns with the principles of modular architecture and emergent design. However, while it touches on technical practices, the focus is more on a specific implementation rather than broader engineering methodologies or practices that enhance agility in software development. The depth of discussion is moderate, primarily detailing code snippets and their functionality without extensive exploration of the underlying principles of technical excellence.",
    "level": "Secondary"
  },
  "Complexity Thinking": {
    "category": "Complexity Thinking",
    "calculated_at": "2025-02-16T02:01:02",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection and WPF development, with no clear focus on complexity science or its principles.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "category": "Organisational Psychology",
    "calculated_at": "2025-02-16T02:01:04",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of WPF and dependency injection, with no relevance to organisational psychology.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "category": "Product Delivery",
    "calculated_at": "2025-02-16T02:01:05",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection and implementation details of a WPF project, which are not central to product delivery methodologies or practices.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "category": "Beta Codex",
    "calculated_at": "2025-02-16T02:01:06",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, which is not related to BetaCodex principles or practices.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "category": "Value Stream Management",
    "calculated_at": "2025-02-16T02:01:07",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses WPF, dependency injection, and MVVM patterns, with no clear focus on Value Stream Management principles or practices.",
    "level": "Ignored"
  },
  "Products and Books": {
    "category": "Products and Books",
    "calculated_at": "2025-02-16T02:01:08",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and Ninject, without focusing on specific products or literature related to Agile or DevOps.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "category": "Value Delivery",
    "calculated_at": "2025-02-16T02:01:09",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of dependency injection in WPF using Ninject, without a focus on value delivery strategies or methodologies.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "category": "Azure DevOps",
    "calculated_at": "2025-02-16T02:01:11",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, dependency injection, and the Ninject framework, with no mention of Azure DevOps or its functionalities.",
    "level": "Ignored"
  },
  "Personal": {
    "category": "Personal",
    "calculated_at": "2025-02-16T02:01:12",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and Ninject, lacking personal reflections or experiences.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "category": "Systems Thinking",
    "calculated_at": "2025-02-16T02:01:13",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF applications and does not address Systems Thinking principles or applications.",
    "level": "Ignored"
  },
  "One Engineering System (1ES)": {
    "category": "One Engineering System (1ES)",
    "calculated_at": "2025-02-16T02:01:14",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, which is unrelated to the principles or implementation of the One Engineering System framework.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-02-16T02:01:15",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and dependency injection, with no clear focus on Agile principles or product-centric development.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "category": "Organisational Agility",
    "calculated_at": "2025-02-16T02:01:16",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation of dependency injection in WPF using Ninject, with no focus on organisational agility or related strategies.",
    "level": "Ignored"
  },
  "News and Reviews": {
    "category": "News and Reviews",
    "calculated_at": "2025-02-16T02:01:17",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of WPF and Ninject, lacking a focus on industry news, updates, or reviews.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-02-16T02:01:18",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses dependency injection in WPF applications and does not address the stages or practices of Application Lifecycle Management.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "category": "Daily Scrum",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content is primarily focused on technical aspects of WPF and dependency injection using Ninject, without any relevance to Daily Scrum discussions or themes.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "category": "Definition of Done",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 20,
    "final_score": 2.0,
    "reasoning": "Content focuses on dependency injection and WPF programming techniques, with no mention of the Definition of Done or related Agile concepts.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "category": "Technical Mastery",
    "calculated_at": "2025-03-10T15:06:00",
    "ai_confidence": 82.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 28,
    "non_ai_confidence": 0,
    "final_score": 74.0,
    "reasoning": "The content primarily focuses on the implementation of dependency injection using Ninject in a WPF application, which aligns well with best practices in software design and architecture. It discusses the importance of maintaining clean code and improving code quality through the use of dependency injection, which is a key principle of software craftsmanship. The depth of discussion is substantial, providing code examples and explanations of how to create a custom DataSourceProvider, which demonstrates a strong understanding of technical concepts. Overall, the content is a detailed exploration of a specific technical practice, justifying a high confidence score in the 'Technical Mastery' category.",
    "level": "Secondary"
  },
  "Product Discovery": {
    "category": "Product Discovery",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical implementation details related to WPF and dependency injection, with no focus on user needs or product feature validation.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "category": "Continuous Delivery",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses WPF, dependency injection, and data providers without any reference to Continuous Delivery principles or practices.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "category": "Strategic Goals",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on technical aspects of WPF and dependency injection, lacking discussion on strategic goals, long-term objectives, or business agility.",
    "level": "Ignored"
  },
  "Lead Time": {
    "category": "Lead Time",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, dependency injection with Ninject, and related coding practices, with no mention of Lead Time or its relevant metrics.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "category": "Organisational Culture",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of WPF and dependency injection without any focus on organisational culture.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "category": "Definition of Ready",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, with no reference to the Definition of Ready or backlog item readiness.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "category": "Portfolio Management",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is focused on technical implementation of WPF and dependency injection using Ninject, without any mention of portfolio management concepts.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "category": "Product Backlog",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on dependency injection in WPF using Ninject, with no discussion on Product Backlog or Agile practices.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "category": "Agile Planning",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content is focused on WPF and dependency injection using Ninject, with no discussions about Agile Planning methodologies or practices.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "category": "Value Stream Mapping",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses dependency injection, WPF, and MVVM architecture without any reference to Value Stream Mapping or Lean principles.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF, dependency injection, and technical implementation details, with no relevance to customer feedback loops.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "category": "Operational Practices",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses implementation details of WPF and Ninject rather than operational efficiency or practices related to Agile, DevOps, or Lean methodologies.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "category": "Scrum Team",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, MVVM, and dependency injection using Ninject, with no relevant information about Scrum Teams or their dynamics.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "category": "Agile Philosophy",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses dependency injection and implementation details in WPF, which does not relate to Agile philosophy.",
    "level": "Ignored"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical implementation details of WPF and dependency injection, with no focus on strategy or Agile principles.",
    "level": "Ignored"
  },
  "Product Validation": {
    "category": "Product Validation",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on technical implementation of dependency injection in WPF applications, not on product validation or user testing methodologies.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "category": "Agile Transformation",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses dependency injection, WPF, and MVVM, which are not related to Agile transformation methodologies or practices.",
    "level": "Ignored"
  },
  "Mentoring": {
    "category": "Mentoring",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily focuses on technical implementation details and dependency injection, with no clear discussion on mentoring or coaching in Agile environments.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "category": "Automated Testing",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF development and dependency injection with Ninject, with no focus on automated testing principles, practices, or methodologies.",
    "level": "Ignored"
  },
  "Team Performance": {
    "category": "Team Performance",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses technical aspects of software development, specifically regarding WPF and dependency injection, without focus on team dynamics or performance.",
    "level": "Ignored"
  },
  "Increment": {
    "category": "Increment",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content discusses WPF and dependency injection techniques with no clear focus on Agile, Scrum, or software increments.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-02-16T02:06:48",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses primarily on dependency injection and implementation details of a WPF project without discussing Acceptance Test Driven Development or acceptance criteria.",
    "level": "Ignored"
  },
  "Software Development": {
    "category": "Software Development",
    "calculated_at": "2025-03-10T18:53:14",
    "ai_confidence": 87.0,
    "ai_mentions": 90.0,
    "ai_alignment": 85.0,
    "ai_depth": 90.0,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content provides a detailed discussion on implementing dependency injection in a WPF application using Ninject, which is a core software development practice. It explicitly mentions concepts such as MVVM, data access layers, and custom data providers, aligning well with best practices in software design and architecture. The depth of the discussion is significant, as it includes code examples and explanations of the implementation process, demonstrating a strong focus on software development methodologies.",
    "level": "Secondary"
  },
  "Agile Project Management": {
    "category": "Agile Project Management",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses dependency injection and WPF development techniques, with no mention of agile principles, methodologies, or practices.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "category": "Agile Values and Principles",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content focuses on dependency injection and WPF, with no clear discussion of Agile values or principles.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "category": "Professional Scrum",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses WPF programming and dependency injection using Ninject, with no mention or discussion of Scrum principles, roles, or practices.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "category": "Modern Source Control",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on dependency injection in WPF using Ninject, which is unrelated to version control practices.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "category": "Empirical Process Control",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is primarily focused on technical implementation of dependency injection in WPF applications, which is unrelated to empirical process control or Agile practices.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "category": "Scrum Values",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details, specifically about WPF and dependency injection with Ninject, which does not relate to Scrum Values or their discussion.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "category": "Azure Boards",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on WPF, dependency injection, and custom data providers, with no mention of Azure Boards or Agile project management.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "category": "Collaboration Tools",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection and implementation details related to WPF and Ninject, which does not pertain to collaboration tools or Agile team dynamics.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "category": "Organisational Change",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of WPF and dependency injection, which are unrelated to organisational change processes or strategies.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "category": "Lean Startup",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content discusses technical implementation of dependency injection in WPF applications, which is unrelated to Lean Startup principles.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "category": "Frequent Releases",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses the implementation of dependency injection in a WPF application using Ninject and does not focus on software release practices or frequent releases.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "category": "Customer Satisfaction",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical implementation details of dependency injection in WPF, without any focus on customer satisfaction or related themes.",
    "level": "Ignored"
  },
  "Scaling Scrum": {
    "category": "Scaling Scrum",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses WPF and dependency injection using Ninject, with no relevance to Scrum principles or scaling frameworks.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of WPF and dependency injection, without any reference to leadership or evidence-based management practices.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "category": "Psychological Safety",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of dependency injection and WPF development, with no mention of psychological safety or related themes.",
    "level": "Ignored"
  },
  "Scaling Agility": {
    "category": "Scaling Agility",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on technical implementation of dependency injection in WPF, with no discussion on scaling agile methodologies or practices within organizations.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "category": "Engineering Excellence",
    "calculated_at": "2025-03-07T15:42:16",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 29.0,
    "reasoning": "The content discusses the implementation of dependency injection using Ninject in a WPF application, which touches on best practices in software development. However, it lacks a broader discussion on engineering excellence principles, such as quality assurance or continuous improvement. The focus is primarily on a specific technical implementation rather than a comprehensive exploration of engineering excellence.",
    "level": "Quaternary"
  },
  "Revenue per Employee": {
    "category": "Revenue per Employee",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on dependency injection and WPF development, unrelated to revenue per employee discussions.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "category": "Asynchronous Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF, dependency injection, and implementation details, with no mention of asynchronous development principles or practices.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "category": "Organisational Physics",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on technical aspects of software development, specifically regarding dependency injection and WPF, without any discussion on organisational dynamics or systems thinking.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "category": "Customer Retention",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on technical implementation details related to dependency injection and WPF, with no discussion of strategies or methodologies for customer retention.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-02-17T09:09:22",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses practical implementation strategies for dependency injection in a WPF project, emphasizing real-world application and problem-solving in a programming context, though it is primarily focused on technical implementation rather than broader Agile or Scrum concepts.",
    "level": "Tertiary"
  },
  "Backlog Refinement": {
    "category": "Backlog Refinement",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is primarily focused on technical details related to WPF, dependency injection, and implementation of a custom data provider, with no relevance to backlog refinement discussions in Agile.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "category": "Ability to Innovate",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses technical implementation details of using Ninject in WPF, focusing on dependency injection rather than any broader insights into innovation capabilities or practices.",
    "level": "Ignored"
  },
  "Scrum Product Development": {
    "category": "Scrum Product Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF and dependency injection without any mention or discussion of Scrum principles, practices, or product development methodologies.",
    "level": "Ignored"
  },
  "Scaled Agile": {
    "category": "Scaled Agile",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF development and dependency injection using Ninject, with no mention of Scaled Agile practices or multi-team coordination.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "category": "Employee Engagement",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical topics related to WPF and dependency injection, with no focus on employee engagement strategies or practices.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "category": "Lean Thinking",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF development and dependency injection, with no relevance to Lean Thinking principles or practices.",
    "level": "Ignored"
  },
  "Test Automation": {
    "category": "Test Automation",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF, dependency injection, and MVVM patterns, with no discussion of test automation principles, frameworks, or practices.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "category": "Entrepreneurship",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is focused on technical implementation details regarding dependency injection in WPF, which does not relate to entrepreneurship principles or practices.",
    "level": "Ignored"
  },
  "Working Software": {
    "category": "Working Software",
    "calculated_at": "2025-02-17T09:09:22",
    "ai_confidence": 50,
    "non_ai_confidence": 10,
    "final_score": 46.0,
    "reasoning": "The content discusses implementing a custom data provider in WPF using dependency injection techniques, which relates to software functionality and quality. While it primarily focuses on technical implementation, there are elements concerning working software principles in terms of functionality and design patterns used in software development.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "category": "Agile Planning Tools",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, dependency injection, and custom data providers, with no relevance to Agile planning tools.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "category": "Continuous Integration",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the implementation of a data provider in WPF using Ninject for dependency injection, with no focus on Continuous Integration principles or practices.",
    "level": "Ignored"
  },
  "Market Share": {
    "category": "Market Share",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses dependency injection in WPF applications and does not mention market share or related strategies.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "category": "Agile Leadership",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of WPF and Ninject without any mention of Agile Leadership principles or practices.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "category": "Sensemaking",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical implementations of dependency injection and WPF without addressing sensemaking principles or decision-making in complex environments.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF and dependency injection using Ninject, which is unrelated to Site Reliability Engineering principles and practices.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF and dependency injection with no focus on hypothesis formulation, experimentation, or data-driven decision-making.",
    "level": "Ignored"
  },
  "Decision Making": {
    "category": "Decision Making",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on technical implementation details of a data provider and dependency injection in WPF, with no discussion of decision-making processes or methodologies.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "category": "Lean Principles",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is focused on WPF, dependency injection, and Ninject, with no discussion of Lean Principles or related concepts.",
    "level": "Ignored"
  },
  "Release Management": {
    "category": "Release Management",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is focused on WPF and dependency injection implementation without any mention of release management concepts.",
    "level": "Ignored"
  },
  "Product Owner": {
    "category": "Product Owner",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details related to WPF, Ninject, and MVVM, with no focus on the responsibilities or practices of a Product Owner.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "category": "Cycle Time",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content discusses WPF and dependency injection using Ninject but does not mention or relate to Cycle Time or its measurement.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "category": "Azure Pipelines",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF and dependency injection using Ninject, with no mention of Azure Pipelines or related CI/CD processes.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "category": "Deployment Frequency",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses dependency injection in WPF using Ninject, without any mention of deployment frequency or related Agile/DevOps practices.",
    "level": "Ignored"
  },
  "Change Management": {
    "category": "Change Management",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily focuses on technical aspects of dependency injection in WPF and does not discuss change management principles, strategies, or practices.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "category": "Team Collaboration",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on using Ninject for dependency injection in WPF projects and discusses technical implementation details, rather than team communication or collaboration dynamics.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, dependency injection, and creating a custom data provider using Ninject, without any reference to Behaviour Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "category": "Digital Transformation",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on coding techniques and specific implementations of dependency injection using Ninject in a WPF application, without discussing strategic adoption or integration of digital technologies for business transformation.",
    "level": "Ignored"
  },
  "MVP": {
    "category": "MVP",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses the implementation of dependency injection in a WPF application, focusing on the use of Ninject and MVVM, without any reference to Minimum Viable Product strategies or principles.",
    "level": "Ignored"
  },
  "AI": {
    "category": "AI",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 30,
    "final_score": 3.0,
    "reasoning": "Content primarily discusses dependency injection in WPF and Ninject, with no relevant discussion on AI or its applications in Agile, DevOps, or software development.",
    "level": "Ignored"
  },
  "System Configuration": {
    "category": "System Configuration",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on WPF development and dependency injection using Ninject, without a clear discussion on system configuration practices or methodologies.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "category": "Product Strategy",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, Ninject, and data access implementation rather than product strategy themes such as market analysis, customer needs alignment, or product vision development.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "category": "Technical Leadership",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on WPF and dependency injection with Ninject, lacking discussions on technical leadership, team dynamics, or agile methodologies.",
    "level": "Ignored"
  },
  "Estimation": {
    "category": "Estimation",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content discusses technical implementation of dependency injection in WPF and Ninject, without any reference to estimation practices in Agile or Scrum.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "category": "Cross Functional Teams",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses Ninject and dependency injection in WPF, with no relevance to cross-functional teams in Agile methodologies.",
    "level": "Ignored"
  },
  "Test First Development": {
    "category": "Test First Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content discusses dependency injection in WPF applications without any mention of Test First Development or related testing practices.",
    "level": "Ignored"
  },
  "Windows": {
    "category": "Windows",
    "calculated_at": "2025-02-17T09:09:22",
    "ai_confidence": 50,
    "non_ai_confidence": 50,
    "final_score": 50.0,
    "reasoning": "The content discusses WPF and dependency injection within the context of creating a WPF application, indicating a significant focus on Windows software development while also discussing related technologies.",
    "level": "Tertiary"
  },
  "Deployment Strategies": {
    "category": "Deployment Strategies",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection within a WPF application context and does not focus on deployment strategies or methodologies related to deploying software into production.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "category": "Large Scale Agility",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content discusses software development practices, specifically around dependency injection and MVVM in WPF, without addressing Agile principles or large-scale Agile practices.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "category": "Team Motivation",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical aspects of dependency injection and WPF without any mention of team dynamics or motivation.",
    "level": "Ignored"
  },
  "Remote Working": {
    "category": "Remote Working",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content primarily discusses WPF and dependency injection, with no focus on remote working practices or Agile methodologies.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "category": "Continuous Learning",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily discusses technical implementation details of WPF and Ninject, with no clear emphasis on the principles of continuous learning or knowledge sharing.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "category": "Troubleshooting",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses implementing dependency injection in a WPF application without focusing on problem diagnosis or resolution.",
    "level": "Ignored"
  },
  "Experimentation": {
    "category": "Experimentation",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content discusses dependency injection and data providers in WPF, with no emphasis on hypothesis-driven experimentation or Agile workflows.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "category": "Scrum Master",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "The content primarily discusses dependency injection in WPF and Ninject, with no relation to the role or responsibilities of a Scrum Master.",
    "level": "Ignored"
  },
  "Transparency": {
    "category": "Transparency",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of WPF, dependency injection, and custom data providers without any focus on transparency in Agile processes.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "category": "Working Agreements",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 10,
    "final_score": 1.0,
    "reasoning": "Content heavily discusses technical implementation details related to WPF and dependency injection, with no focus on working agreements or teamwork principles.",
    "level": "Ignored"
  },
  "Software Developers": {
    "category": "Software Developers",
    "calculated_at": "2025-02-17T09:09:22",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content discusses dependency injection and its implementation in a WPF application, which are relevant topics for software developers, but it does not clearly focus on Agile or DevOps methodologies.",
    "level": "Tertiary"
  },
  "Coaching": {
    "category": "Coaching",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation of WPF and Ninject without any focus on coaching, mentoring, or collaborative growth approaches.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "category": "Engineering Practices",
    "calculated_at": "2025-02-17T09:09:22",
    "ai_confidence": 50,
    "non_ai_confidence": 0,
    "final_score": 45.0,
    "reasoning": "The content primarily discusses implementation details of dependency injection in WPF applications using Ninject. While it touches on the concept of clean architecture and maintainable code, it is mainly focused on a specific technical implementation rather than broader engineering practices like clean code principles or TDD.",
    "level": "Tertiary"
  },
  "Technical Debt": {
    "category": "Technical Debt",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses on dependency injection in WPF applications and does not discuss technical debt or its management.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "category": "Sprint Review",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is focused on WPF and dependency injection using Ninject, and has no relevance to Sprint Reviews or Scrum events.",
    "level": "Ignored"
  },
  "Product Management": {
    "category": "Product Management",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is predominantly about technical implementation details related to WPF and Ninject, with no clear emphasis on product management topics or strategic alignment.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "category": "Self Organisation",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation of dependency injection in WPF using Ninject, without any focus on self-organisation or related principles.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "category": "Agile Frameworks",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection and specific programming practices in WPF and Ninject, with no clear relevance to Agile frameworks or their principles.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "category": "Agile Strategy",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical aspects of dependency injection and WPF data binding rather than agile methodologies or strategic planning.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "category": "Azure Repos",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content heavily focuses on WPF, dependency injection, and custom data providers, with no mention or relevance to Azure Repos or source control topics.",
    "level": "Ignored"
  },
  "Forecasting": {
    "category": "Forecasting",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection and data access in WPF applications, with no mention of forecasting methods or practices relevant to Agile and Scrum.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "category": "Lean Product Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on implementing dependency injection in WPF applications and does not discuss Lean Product Development principles or practices.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "category": "Trend Analysis",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily focuses on technical implementation details of WPF and Ninject, without discussing any trends or analyses relevant to Agile, DevOps, or business agility.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF and dependency injection with no relevant information on accountability in Agile contexts.",
    "level": "Ignored"
  },
  "Scaling Kanban": {
    "category": "Scaling Kanban",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content focuses solely on WPF, dependency injection, and MVVM pattern implementation, without any relevance to Kanban or scaling practices.",
    "level": "Ignored"
  },
  "Throughput": {
    "category": "Throughput",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content is primarily about using Ninject for dependency injection in WPF projects, with no clear focus on throughput as defined in Agile, DevOps, or Lean contexts.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "category": "Test Driven Development",
    "calculated_at": "2025-02-16T02:06:49",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, without mentioning Test Driven Development principles or practices.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "category": "Social Technologies",
    "calculated_at": "2025-02-18T12:01:44",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, which is unrelated to Scrum, Kanban, Lean, or Agile practices.",
    "level": "Ignored"
  },
  "Leadership": {
    "category": "Leadership",
    "calculated_at": "2025-02-18T12:01:45",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses technical implementation details related to WPF and dependency injection, with no focus on leadership practices.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "category": "Internal Developer Platform",
    "calculated_at": "2025-02-24T14:34:34",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses WPF, dependency injection, and specific programming techniques without addressing the concept of Internal Developer Platforms.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "category": "Artificial Intelligence",
    "calculated_at": "2025-02-24T14:34:36",
    "ai_confidence": 0,
    "non_ai_confidence": 0,
    "final_score": 0.0,
    "reasoning": "Content primarily discusses dependency injection in WPF using Ninject, with no mention of AI or its applications in Agile or DevOps.",
    "level": "Ignored"
  },
  "Scrum": {
    "category": "Scrum",
    "calculated_at": "2025-03-04T11:53:08",
    "ai_confidence": 5.0,
    "ai_mentions": 0,
    "ai_alignment": 10.0,
    "ai_depth": 5.0,
    "non_ai_confidence": 0,
    "final_score": 4.0,
    "reasoning": "The content primarily discusses technical aspects of WPF and dependency injection using Ninject, with no direct mentions or discussions related to Scrum principles, roles, events, or practices. The focus is on implementation details rather than any Scrum-related topics.",
    "level": "Ignored"
  }
}
