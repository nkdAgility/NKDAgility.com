post:
  title: Updating the Command Line Parser
  link: https://nkdagility.com/blog/updating-the-command-line-parser/
  pubDate: Mon, 17 Aug 2009 01:11:08 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2009/08/17/updating-the-command-line-parser.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    I had previously created a Command Line Parser from <a
    href="http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=7917"
    target="_blank">Ray Hayes</a> codeproject article <a
    href="http://www.codeproject.com/KB/recipes/commandlineparser.aspx"
    target="_blank">Automatic Command Line Parsing in C#</a>. I had adapted it
    to VB.NET and upgraded it to .NET 3.5 but I recently ran into the problem
    with wanting a single command prompt application to handle multiple
    processes and multiple parameters. This would allow you to group all of a
    particular tasks commands into a single application. With the advent of
    Power Shell this format is increasingly less relevant, but with the
    proliferation of Power Shell many people still prefer to use the good old
    command line.


    So, staring from the original <a
    href="http://hinshlabs.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=28451"
    target="_blank">Command Line Parser v1.0</a> code I wanted to be able to add
    multiple commands, or even nest commands. The result is a nice simple
    commanding architecture conducive to creating multiple commands.


    <a
    href="http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-UpdatingtheCommandLineParser_AC5D-image_4.png"><img
    style="margin: 10px auto; float: none; border-width: 0px;"
    src="http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-UpdatingtheCommandLineParser_AC5D-image_thumb_1.png"
    border="0" alt="image" width="600" height="257" /></a>


    &nbsp;


    Using this model I can create a simple command…

    <pre>Imports Hinshlabs.CommandLineParser

    Imports System.IO

    Imports System.Collections.ObjectModel

    Imports System.Net


    Public Class Demo1Command
        Inherits CommandBase(Of Demo1CommandLine)

        Private m_PortalLocation As Uri

        Public Overrides ReadOnly Property Description() As String
            Get
                Return "demo 1 command demonstrates a sinle nested command"
            End Get
        End Property

        Public Overrides ReadOnly Property Name() As String
            Get
                Return "Demo1"
            End Get
        End Property

        Protected Overrides Function ValidateCommand() As Boolean
            Return True
        End Function

        Public Overrides ReadOnly Property Title() As String
            Get
                Return "demo 1"
            End Get
        End Property

        Public Overrides ReadOnly Property Synopsis() As String
            Get
                Return "demo 1 command"
            End Get
        End Property

        Public Overrides ReadOnly Property Switches() As ReadOnlyCollection(Of SwitchInfo)
            Get
                Return CommandLine.Switches
            End Get
        End Property

        Public Overrides ReadOnly Property Qualifications() As String
            Get
                Return String.Empty
            End Get
        End Property

        Protected Overrides Function RunCommand() As Integer
            Try
                CommandOut.Warning("running Demo1")
                Return -1
            Catch ex As Exception
                CommandOut.Error("Failed: {0}", ex.ToString)
                Return -1
            End Try
        End Function

    End Class</pre>

    Or something more substantial:

    <pre>Protected Overrides Function RunCommand() As Integer
        Try
            Dim x As New Proxies.MyApp.Configuration.ConfigurationServiceClient("BasicHttpBinding_IConfigurationService", m_PortalLocation.ToString)
            x.ClientCredentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Delegation
            Select Case CommandLine.Action
                Case QuiesceAction.Offline
                    x.QuiesceSource(CommandLine.Source, CommandLine.Message, New TimeSpan(0))
                Case QuiesceAction.Online
                    x.RestoreSource(CommandLine.Source)
            End Select
            CommandOut.Info("Source {0} has been made {1}", CommandLine.Source, CommandLine.Action.ToString)
            Return 0

        Catch ex As EndpointNotFoundException
            CommandOut.Error("Unable to locate site. Check the value you selected for /Portal:{0}", CommandLine.Portal)
            Return -1
        Catch ex As Exception
            CommandOut.Error("Failed: {0}", ex.ToString)
            Return -1
        End Try
    End Function</pre>

    If you are wondering where the variables come from, you can see form
    Demo1Command that a generic type of Demo1CommandLine is passed in. The
    application creates an instance of this which wraps the <a
    href="http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=7917"
    target="_blank">Ray Hayes</a> parser to provide the values from
    Environment.CommandLine used on the shared methods on the CommandLineBase
    class.

    <pre>''' &lt;summary&gt;

    ''' Created a command line object using the Environment.CommandLine
    information

    ''' &lt;/summary&gt;

    ''' &lt;typeparam name="TCommandLine"&gt;The concrete type of object to
    create&lt;/typeparam&gt;

    ''' &lt;returns&gt;An instance of the object&lt;/returns&gt;

    ''' &lt;remarks&gt;&lt;/remarks&gt;

    Public Shared Function CreateCommandLine(Of TCommandLine As {New,
    CommandLineBase})() As TCommandLine
        Return CreateCommandLine(Of TCommandLine)(Environment.CommandLine)
    End Function


    ''' &lt;summary&gt;

    ''' Created a command line object using the Environment.CommandLine
    information

    ''' &lt;/summary&gt;

    ''' &lt;typeparam name="TCommandLine"&gt;The concrete type of object to
    create&lt;/typeparam&gt;

    ''' &lt;param name="CommandLine"&gt;The command line arguments to
    parse&lt;/param&gt;

    ''' &lt;returns&gt;&lt;/returns&gt;

    ''' &lt;remarks&gt;&lt;/remarks&gt;

    Public Shared Function CreateCommandLine(Of TCommandLine As {New,
    CommandLineBase})(ByVal CommandLine As String) As TCommandLine
        Dim instance As New TCommandLine
        Dim parser As New Parser(CommandLine, instance)
        parser.Parse()
        instance.Parser = parser
        Return instance
    End Function</pre>

    This parser then populates the CommandLine object with values from the
    CommandLine passed in. For example:


    &nbsp;

    <pre>Imports Hinshlabs.CommandLineParser

    Imports System.Collections.ObjectModel


    Public Class Demo3CommandLine
        Inherits CommandLineBase

        Private m_value1 As String
        Private m_value2 As Value2Values = Value2Values.Value1

        &lt;CommandLineSwitch("Value1", "Adds a string value named value1"), CommandLineAlias("v1")&gt; _
        Public Property Value1() As String
            Get
                Return Me.m_value1
            End Get
            Set(ByVal value As String)
                Me.m_value1 = value
            End Set
        End Property

        &lt;CommandLineSwitch("Value2", "Adds and enum value called value2"), CommandLineAlias("v2")&gt; _
        Public Property Value2() As Value2Values
            Get
                Return Me.m_value2
            End Get
            Set(ByVal value As Value2Values)
                Me.m_value2 = value
            End Set
        End Property

        Public Enum Value2Values
            Enum1
            Enum2
            Enum3
        End Enum

    End Class</pre>

    Would allow you to call [consoleApp] Demo3 /v1:”Any value you like”
    /Value2:Enum3 and have the correct values populated at runtime.


    I have also updated with a DelegateCommand class that would allow you to
    call a function in the right format from anywhere:

    <pre>New DelegateCommand(Of Demo3CommandLine)("Demo2", AddressOf OnDemo2Run,
    "demo 2", "no additional information", "demo 2 command", "This command shows
    how to delegate the run method using the delegate command")</pre>

    The delegate command is really easy in .NET 3.5 with the only change being
    the addition of a variable declared as a Func in the class:

    <pre>Imports Hinshlabs.CommandLineParser

    Imports System.IO

    Imports System.Collections.ObjectModel

    Imports System.Net


    Public Class DelegateCommand(Of TCommandLine As {New, CommandLineBase})
        Inherits CommandBase(Of TCommandLine)

        Private m_Description As String
        Private m_Title As String
        Private m_Synopsis As String
        Private m_Qualifications As String
        Private m_name As String
        Private m_RunCommand As Func(Of Integer)

        Public Overrides ReadOnly Property Description() As String
            Get
                Return m_Description
            End Get
        End Property

        Public Overrides ReadOnly Property Name() As String
            Get
                Return m_name
            End Get
        End Property

        Protected Overrides Function RunCommand() As Integer
            Try
                Return m_RunCommand.Invoke
            Catch ex As Exception
                CommandOut.Error("Failed: {0}", ex.ToString)
                Return -1
            End Try
        End Function

        Protected Overrides Function ValidateCommand() As Boolean
            Return True
        End Function

        Public Overrides ReadOnly Property Title() As String
            Get
                Return m_title
            End Get
        End Property

        Public Overrides ReadOnly Property Synopsis() As String
            Get
                Return Synopsis
            End Get
        End Property

        Public Overrides ReadOnly Property Switches() As ReadOnlyCollection(Of SwitchInfo)
            Get
                Return CommandLine.Switches
            End Get
        End Property

        Public Overrides ReadOnly Property Qualifications() As String
            Get
                Return String.Empty
            End Get
        End Property

        Public Sub New(ByVal name As String, ByVal runCommand As Func(Of Integer), ByVal title As String, ByVal qualifications As String, ByVal synopsis As String, ByVal description As String)
            m_name = name
            m_RunCommand = runCommand
            m_Title = title
            m_Qualifications = qualifications
            m_Synopsis = synopsis
            m_Description = description
        End Sub

    End Class</pre>

    If you were wondering why there are so many properties, it is to allow the
    help to be created automatically. For example if you call the help function
    on Demo3Command you will get…


    <img style="margin: 10px auto; float: none; border-width: 0px;"
    src="http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-UpdatingtheCommandLineParser_AC5D-image_2fd1f26f-de28-4c9a-a746-edf9887615a4.png"
    border="0" alt="image" width="628" height="158" />


    With the values coming from the relevant places:


    <img style="margin: 10px auto; float: none; border-width: 0px;"
    src="http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-UpdatingtheCommandLineParser_AC5D-image_422c0996-339e-4054-835a-dc29f41a7433.png"
    border="0" alt="image" width="618" height="162" />


    It will also support inherited CommandLine objects to minimize duplication.


    &nbsp;


    I hope that if you are building command line apps that you will have a look,
    just remember not to spend too much effort on cmd, when Power Shell is much
    more suitable and accessible to non developers.


    Get <a
    href="http://hinshlabs.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=31651"
    target="_blank">Command Line Parser v2.0</a>

    <div class="wlWriterEditableSmartContent" style="margin: 0px; float: none;
    padding: 0px;">Technorati Tags: <a rel="tag"
    href="http://technorati.com/tags/.NET">.NET</a> <a rel="tag"
    href="http://technorati.com/tags/CodeProject">CodeProject</a></div>
  - ''
  post_id: '91'
  post_date: '2009-08-17 01:11:08'
  post_date_gmt: '2009-08-17 01:11:08'
  post_modified: '2009-08-17 01:11:08'
  post_modified_gmt: '2009-08-17 01:11:08'
  comment_status: open
  ping_status: open
  post_name: updating-the-command-line-parser
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '311601960'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: robotsmeta
    meta_value: index,follow
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1b3RXpU
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1470468065;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:11491;}i:1;a:1:{s:2:"id";i:3951;}i:2;a:1:{s:2:"id";i:9906;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2009-08-17-updating-the-command-line-parser.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '476'
  comment:
  - comment_id: '584'
    comment_author: steveballmer
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2009-09-02 10:24:35'
    comment_date_gmt: '2009-09-02 10:24:35'
    comment_content: Fascinating stuff here!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209970105'
  - comment_id: '585'
    comment_author: Rediff
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-04-03 14:02:46'
    comment_date_gmt: '2010-04-03 14:02:46'
    comment_content: This absolutely awesome!!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209970106'
