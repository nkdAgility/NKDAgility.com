post:
  title: Creating a Data Access layer using Unity
  link: https://nkdagility.com/blog/creating-a-data-access-layer-using-unity/
  pubDate: Thu, 30 Jul 2009 04:57:53 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2009/07/30/creating-a-data-access-layer-using-unity.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p>I am always pulling out the Unity assemblies. Maybe it is just because I am lazy, but I really can’t be bothered rolling my own dependency injection and mapping framework!</p>  <p><img style=\"border-right-width: 0px;margin: 0px 10px 10px 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-CreatingaDataAccesslayerusingUnity_E289-image_13.png\" width=\"240\" height=\"261\" /></p>  <p>I am going to use Unity only as a mapping frame work for now, I want to be able to pass an Interface into a method, and get back the correct data access class.</p>  <p>The plan is to meet the diagram on the left. Only the factory and the interfaces are accessible, but are all set to “friend” which will require an assembly tag to be added to both the Factory and the Interfaces assemblies to allow explicit access.</p>  <pre>&lt;Assembly: InternalsVisibleTo(\"Hinshlabs.TfsDynamicPolicy.Services.Server\")&gt; </pre>\n\n<p>This allows classes in the named assembly to access all classes and methods that have been prefaced with the “Friend” access level. Its a sneaky way of helping to maintain your layer integrity. So with this reference added only the Services.Server assembly, the one with the web service implementation, can access the factory and the interfaces, making them un-callable from any other assembly.</p>\n\n<p><font color=\"#ff0000\" size=\"1\">note: if you use only the assembly’s friendly name and not the explicit signed name then someone could just create an assembly of the same name as above and they will be able to call as if they were Services.Server. This is not to prevent hacking, just those pesky developers (me) who may try to bypass the service tier…</font></p>\n\n<p>If, like me you are running tests you will also need to add an InternalsVisibleTo entry for your test assemblies or you will be plagued by “Assessors”..</p>\n\n<p>First is my IDataAccess class, this is really only exists so there is some validation on my generics.</p>\n\n<p><a href=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-CreatingaDataAccesslayerusingUnity_E289-image34.png\"><img style=\"border-right-width: 0px;margin: 0px 10px 10px 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-CreatingaDataAccesslayerusingUnity_E289-image34_thumb.png\" width=\"146\" height=\"240\" /></a> </p>\n\n<pre>' Assembly: Hinshlabs.TfsDynamicPolicy.DataAccess.Common\nPublic Interface IDataAccess\n\nEnd Interface</pre>\n\n<p>I also have a more specific Interface that allows for the loading of Artefacts. I have not yet implemented anything more than get and add, but you can see that it inherits (yes an interface and inherits in the same sentence) from the IDataAccess interface so we can pass it as a generic type that complies with IDataAccess.</p>\n\n<pre>'Assembly: Hinshlabs.TfsDynamicPolicy.DataAccess.Common \nImports Hinshlabs.TfsDynamicPolicy.Common\n\nPublic Interface IArtifactDataAccess(Of T As Artifact)\n    Inherits IDataAccess\n\n    Function GetArtifact(ByVal id As Guid) As T\n    Function GetArtifact(ByVal Uri As Uri) As T\n    Function GetArtifacts() As ArtifactCollection\n    Function AddArtifact(ByVal artifact As T) As Boolean\n\nEnd Interface</pre>\n\n<p>Wow… that was hard, IDataAccess may have a little more than nothing in the future, but for now that is it. Now, what I need is a class that I can inherit from that will provide the functionality I need for any factory. This is mainly coz factories bread factories. </p>\n\n<p><img style=\"border-right-width: 0px;margin: 0px 10px 10px 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-CreatingaDataAccesslayerusingUnity_E289-image25.png\" width=\"182\" height=\"300\" /></p>\n\n<pre>'Assembly: Hinshlabs.TfsDynamicPolicy.Common\nImports System.IO\nImports System.Globalization\nImports System.Xml.Serialization\nImports System.Configuration\nImports Microsoft.Practices.Unity\nImports Microsoft.Practices.Unity.Configuration\nImports Hinshlabs.TfsDynamicPolicy.Common\nImports System.Reflection\n\nFriend MustInherit Class UnityFactoryBase(Of T As {New, UnityFactoryBase(Of T)})\n\n#Region \" Singleton\"\n\n    Private Shared m_Instance As T\n\n    Friend Shared ReadOnly Property Instance As T\n        Get\n            If m_Instance Is Nothing Then\n                m_Instance = New T\n                m_Instance.Initialize()\n            End If\n            Return m_Instance\n        End Get\n    End Property\n\n    Protected Sub New()\n        ' Do nothing in here\n    End Sub\n\n#End Region\n\n    Private m_UnityContainer As IUnityContainer\n\n    Private Sub Initialize()\n        ' Create Unity container\n        m_UnityContainer = New UnityContainer()\n        ' Configure Unity\n        Dim config As Configuration\n        Dim fm As New ExeConfigurationFileMap\n\n        fm.ExeConfigFilename = ConfigFilename\n        Dim configFileLocation As String = Path.Combine(Path.GetDirectoryName(Assembly.GetCallingAssembly.Location), ConfigFilename)\n        If Not File.Exists(configFileLocation) Then\n            Throw New FileNotFoundException(String.Format(CultureInfo.InvariantCulture, \"Unable to load config file with the name {0}\", fm.ExeConfigFilename), configFileLocation)\n        End If\n        config = ConfigurationManager.OpenMappedExeConfiguration(fm, ConfigurationUserLevel.None)\n        Dim section As UnityConfigurationSection = CType(config.GetSection(\"unity\"), UnityConfigurationSection)\n        If section Is Nothing Then\n            Throw New AccessViolationException(String.Format(CultureInfo.InvariantCulture, \"There is no unity section called {0} in the config file {1}\", UnityContainerName, ConfigFilename))\n        End If\n        section.Containers(UnityContainerName).Configure(m_UnityContainer)\n    End Sub\n\n    Protected ReadOnly Property UnityContainer As IUnityContainer\n        Get\n            Return m_UnityContainer\n        End Get\n    End Property\n\n    Protected MustOverride ReadOnly Property UnityContainerName As String\n    Protected MustOverride ReadOnly Property ConfigFilename As String\n\nEnd Class</pre>\n\n<p>\_</p>\n\n<p>The UnityFactoryBase class provides a couple of features. It provides a Singleton pattern so that we make sure that there is only ever one instance per factory type T and we initialise a UnityContainer for each Instance of factory T. You can see that on the class definition the generic type T that will be passed in is of the same type as the class itself. This makes sure that the class that represents T inherits from UnityFactoryBase(Of T As {New, UnityFactoryBase(Of T)}). When configuring the Unity Container we get both the container name and the config file to load from the child class. This allows for both different config files per factory and the option to have a single config file and multiple unity configuration elements. Its up to you…</p>\n\n<p>We need to inherit from UnityFactoryBase(Of T As {New, UnityFactoryBase(Of T)})\_ to create our factory and provide a config file to configure the UnityContainer. The inherited class is pretty simple as we have done most of the heavy lifting in the base class.</p>\n\n<p><img style=\"border-right-width: 0px;margin: 0px 10px 10px 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-CreatingaDataAccesslayerusingUnity_E289-image19.png\" width=\"260\" height=\"237\" /></p>\n\n<pre>Imports Hinshlabs.TfsDynamicPolicy.DataAccess.Common\n' Assembly: Hinshlabs.TfsDynamicPolicy.DataAccess\nImports Hinshlabs.TfsDynamicPolicy.Common\nImports System.Globalization\n\nFriend Class DataAccessFactory\n    Inherits UnityFactoryBase(Of DataAccessFactory)\n\n    Public Sub New()\n        ' Do nothing in here\n    End Sub\n\n    Protected Overrides ReadOnly Property UnityContainerName As String\n        Get\n            Return \"DataAccess\"\n        End Get\n    End Property\n\n    Protected Overrides ReadOnly Property ConfigFilename As String\n        Get\n            Return String.Format(CultureInfo.InvariantCulture, \"{0}.Unity.config\", System.Reflection.Assembly.GetExecutingAssembly().GetName.Name)\n        End Get\n    End Property\n\n    Public Function GetDataAccess(Of T As IDataAccess)() As T\n        Return UnityContainer.Resolve(Of T)()\n    End Function\n\nEnd Class</pre>\n\n<p style=\"clear: both\">\_</p>\n\n<p>The DataAccessFactory provides the data needed by the UnityFactoryBase(Of DataAccessFactory) as well as the method that I need to retrieve an IDataAccess class. I will show you how it is called, but first there is the little matter of config:</p>\n\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n  &lt;configSections&gt;\n    &lt;section name=\"unity\" type=\"Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration\" /&gt;\n  &lt;/configSections&gt;\n  &lt;unity&gt;\n    &lt;typeAliases&gt;\n      &lt;!-- Lifetime manager types should be inserted if you need lifetime managers --&gt;\n      &lt;typeAlias alias=\"singleton\" type=\"Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity\" /&gt;\n      &lt;typeAlias alias=\"external\" type=\"Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity\" /&gt;\n      &lt;!-- User defined type aliases --&gt;\n      &lt;!-- An interface for artifact data access implementation --&gt;\n      &lt;typeAlias alias=\"IArtifactDataAccess`1\" type=\"Hinshlabs.TfsDynamicPolicy.DataAccess.Common.IArtifactDataAccess`1, Hinshlabs.TfsDynamicPolicy.DataAccess.Common\" /&gt;\n    &lt;/typeAliases&gt;\n    &lt;containers&gt;\n      &lt;container name=\"DataAccess\"&gt;\n        &lt;types&gt;\n          &lt;!-- Lifetime managers specified using the type aliases --&gt;\n          &lt;type type=\"IArtifactDataAccess`1\" mapTo=\"Hinshlabs.TfsDynamicPolicy.DataAccess.Xml.ArtifactDataAccess`1, Hinshlabs.TfsDynamicPolicy.DataAccess.Xml\"&gt;\n            &lt;lifetime type=\"singleton\" /&gt;\n          &lt;/type&gt;\n        &lt;/types&gt;\n      &lt;/container&gt;\n    &lt;/containers&gt;\n  &lt;/unity&gt;\n&lt;/configuration&gt;</pre>\n\n<p>I am not going to explain the config file as it is well (ish) documented, but it effectively mapped all generic calls to retrieve IArtifactDataAccess`1 to the implementation in the XML assembly of ArtifactDataAccess`1 and makes the resultant object a singleton.</p>\n\n<p>To call this lovely package after you have populated it with many many DataAccess goodies all you need to do is this:</p>\n\n<pre>Dim dal As IArtifactDataAccess(Of DynamicPolicy) = DataAccessFactory.Instance.GetDataAccess(Of IArtifactDataAccess(Of DynamicPolicy))()</pre>\n\n<p>Lovely and simple, and to add a new implementation all I need is an Interface like IArtifactDataAccess.. lets call it IHypotheticalDataBits, a concrete implementation… lets call it HypoDataFromTwitter and a mapping in the config file:</p>\n\n<pre>&lt;type type=\"IHypotheticalDataBits\" mapTo=\"Hinshlabs.TfsDynamicPolicy.DataAccess.Xml.HypoDataFromTwitter, Hinshlabs.TfsDynamicPolicy.DataAccess.Xml\"&gt;\n  &lt;lifetime type=\"singleton\" /&gt;\n&lt;/type&gt;</pre>\n\n<p>And you can then call:</p>\n\n<pre>Dim dal As IHypotheticalDataBits = DataAccessFactory.Instance.GetDataAccess(Of IHypotheticalDataBits)()</pre>\n\n<p>\_</p>\n\n<p>Any easier and it would be writing for you :)</p>\n\n<div style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\" class=\"wlWriterEditableSmartContent\">Technorati Tags: <a href=\"http://technorati.com/tags/.NET\" rel=\"tag\">.NET</a>\_<a href=\"http://technorati.com/tags/Developing\" rel=\"tag\">Developing</a>\_<a href=\"http://technorati.com/tags/Version+Control\" rel=\"tag\">Version Control</a>\_<a href=\"http://technorati.com/tags/CodeProject\" rel=\"tag\">CodeProject</a>\_</div>"
  - ''
  post_id: '95'
  post_date: '2009-07-30 04:57:53'
  post_date_gmt: '2009-07-30 04:57:53'
  post_modified: '2009-07-30 04:57:53'
  post_modified_gmt: '2009-07-30 04:57:53'
  comment_status: open
  ping_status: open
  post_name: creating-a-data-access-layer-using-unity
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '312534233'
  - meta_key: _views
    meta_value: '1'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBOjqJ
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1473992753;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:123;}i:1;a:1:{s:2:"id";i:88;}i:2;a:1:{s:2:"id";i:381;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2009-07-30-creating-a-data-access-layer-using-unity.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '720'
