post:
  title: Log Elmah errors in Team Foundation Server
  link: https://nkdagility.com/blog/log-elmah-errors-in-team-foundation-server/
  pubDate: Sun, 26 Jul 2009 22:30:00 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2009/07/26/log-elmah-errors-in-team-foundation-server.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p>I am not sure if this is a good idea, but I was bored one day and decided to add a TFS Error Log provider for <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a>. There are 2 ways you can do this. You can create a new WorkItem type and log an error report for each of the errors or you can create one work item for each error type/title. To do this you can create a title that is the combination of error message and application name and then search TFS for an existing work item. If it exists then add the error to it, if it does not then create a work item for that instance. You can use any work item type, and the errors are added as <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a> xml log files. </p>  <p>There are a number of things you need to override when you inherit from <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a>.ErrorLog. The first is the Log method.</p>  <pre>''' &lt;summary&gt;\n''' Logs the error as an attachment to an existing work item, or adds a new work item if this error has not occurred.\n''' &lt;/summary&gt;\n''' &lt;param name=\"error\"&gt;The error to be logged&lt;/param&gt;\n''' &lt;returns&gt;The ID of the error&lt;/returns&gt;\n''' &lt;remarks&gt;&lt;/remarks&gt;\nPublic Overrides Function Log(ByVal [error] As [Error]) As String\n    Dim errorId = Guid.NewGuid().ToString()\n    Dim timeStamp = DateTime.UtcNow.ToString(\"yyyy-MM-ddHHmmssZ\", CultureInfo.InvariantCulture)\n    Dim Filename = String.Format(\"error-{0}-{1}.elmah\", timeStamp, errorId)\n    Dim temp = System.IO.Path.Combine(\".\", Filename)\n    ' Temp Log to disk\n    Using writer = New XmlTextWriter(temp, Encoding.UTF8)\n        writer.Formatting = Formatting.Indented\n        writer.WriteStartElement(\"error\")\n        writer.WriteAttributeString(\"errorId\", errorId)\n        ErrorXml.Encode([error], writer)\n        writer.WriteEndElement()\n        writer.Flush()\n    End Using\n\n    Dim Title As String = String.Format(\"{0}-{1}\", [error].ApplicationName, [error].Message)\n\n    Dim wi As WorkItem = GetWorkItemForException(Title, [error])\n\n    Dim a As New Attachment(temp, \"Elmah error log\")\n\n    wi.Attachments.Add(a)\n    If wi.IsValid Then\n        wi.Save()\n        Return String.Format(\"{0}|{1}\", wi.Id, errorId.ToString)\n    Else\n        Dim message As New System.Text.StringBuilder\n        Dim results = wi.Validate()\n        Dim isFirst As Boolean = True\n        For Each r In results\n            message.AppendLine(String.Format(IIf(isFirst, \"{0}\", \", {0}\"), r))\n            isFirst = False\n        Next\n        Throw New ApplicationException(String.Format(\"Unable to save the work item because the following fields produced a validation error '{0}'.\", message.ToString))\n    End If\nEnd Function</pre>\n\n<p>The idea is that you attach the <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a> log file to the work item with a .<a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">elmah</a> extension. This will allow us to find all the error logs in the future. So we create the temporary log file, and then create our key/title for our work item. You can customize this by customizing your exception messages on the server side. We then get our work item, and add the file as an attachment.</p>\n\n<p>Because I am doing this the quick and dirty way, i.e. just for fun, I have utilised the API’s provided in the Templates add-on for the Power Tools to customize the work items. So when we are creating the Work item:</p>\n\n<pre>Protected Function GetWorkItemForException(ByVal Title As String, ByVal [error] As [Error]) As WorkItem\n    Dim wi As WorkItem = GetExistingWorkItem(Title)\n    If wi Is Nothing Then\n        wi = CreateNewWorkItem(Title)\n    End If\n    m_TemplateDefault.Fields.ApplyFieldValues(wi, False)\n    ApplyErrorFieldValues(wi, [error])\n    Return wi\nEnd Function</pre>\n\n<p>So, we either get an existing work item, or we create a new one, but then we need to apply some values to the work item. In the constructor of the class <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a> passes an IDictionary object that we use to pass the template names.</p>\n\n<pre>Public Sub New(ByVal config As IDictionary)\n    If config Is Nothing Then\n        Throw New ArgumentNullException(\"config\")\n    End If\n    sm_Config = config\n\n    Dim store As ITemplateStore = GetStore()\n    m_TemplateDefault = GetTemplate(\"Defaults\", store)\n    m_TemplateErrorMap = GetTemplate(\"ErrorMap\", store)\n\n    If m_TemplateDefault Is Nothing Or m_TemplateErrorMap Is Nothing Then\n        Throw New ApplicationException(\"Unable to load the templates from the store.\")\n    End If\n\nEnd Sub</pre>\n\n<p>I created a Store (Microsoft.TeamFoundation.PowerTools.Client.WorkItemTracking.Templates.ITemplateStore) for the templates and attempt to load both a “defaults” template and a dynamic “mapping” template. The latter will need some special mapping, but as you can see from the GetWorkItemForException there is already a method on the Template object to Apply all of the values to a work item. Here is an example default template:</p>\n\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;Template xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n  &lt;FieldValues&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;System.AreaPath&lt;/ReferenceName&gt;\n      &lt;Value&gt;TestProject1TestArea1&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;System.IterationPath&lt;/ReferenceName&gt;\n      &lt;Value&gt;TestProject1TestIteration1&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;System.AssignedTo&lt;/ReferenceName&gt;\n      &lt;Value&gt;Martin Hinshelwood&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;Microsoft.VSTS.CMMI.FoundInEnvironment&lt;/ReferenceName&gt;\n      &lt;Value&gt;DEV&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;Microsoft.VSTS.Build.FoundIn&lt;/ReferenceName&gt;\n      &lt;Value&gt;Build_v1.13_20090312.1&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n  &lt;/FieldValues&gt;\n  &lt;WorkItemTypeName&gt;Bug&lt;/WorkItemTypeName&gt;\n  &lt;TeamServerUri&gt;http://tfs01.company.biz:8080/&lt;/TeamServerUri&gt;\n  &lt;TeamProjectName&gt;TestProject1&lt;/TeamProjectName&gt;\n  &lt;Description /&gt;\n&lt;/Template&gt;</pre>\n\n<p>These values are now mapped onto the work item. But what about any dynamic values that we want to use from the Error. I added a second template called “ErrorMap” that will use the same format, but use something like:</p>\n\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;Template xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n  &lt;FieldValues&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;System.AreaPath&lt;/ReferenceName&gt;\n      &lt;Value&gt;TestProject1{ApplicationName}&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;System.Description&lt;/ReferenceName&gt;\n      &lt;Value&gt;{WebHostHtmlMessage}&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n    &lt;FieldValue&gt;\n      &lt;ReferenceName&gt;Company.Custom.MethodName&lt;/ReferenceName&gt;\n      &lt;Value&gt;{Exception.TargetSite.Name}&lt;/Value&gt;\n    &lt;/FieldValue&gt;\n  &lt;/FieldValues&gt;\n  &lt;WorkItemTypeName&gt;Bug&lt;/WorkItemTypeName&gt;\n  &lt;TeamServerUri&gt;http://tfs01.company.biz:8080/&lt;/TeamServerUri&gt;\n  &lt;TeamProjectName&gt;TestProject1&lt;/TeamProjectName&gt;\n  &lt;Description /&gt;\n&lt;/Template&gt;</pre>\n\n<p>We can then apply those values with a little reflection by parsing out the value and applying the retrieved object values to the work item.</p>\n\n<pre>Private Sub ApplyErrorFieldValues(ByVal wi As WorkItem, ByVal [error] As [Error])\n    For Each i In m_TemplateErrorMap.Fields\n        Dim value As String = GetPropertyValue(i.Value, [error])\n        If wi.Fields(i.ReferenceName).AllowedValues.Contains(value) Then\n            wi.Fields(i.ReferenceName).Value = value\n        Else\n            Throw New ApplicationException(String.Format(\"Unable to set the work item field '{0}' to '{1}' as '{1}' is not in the Allowed Values list.\", i.ReferenceName, value))\n        End If\n    Next\nEnd Sub\n\nPrivate Function GetPropertyValue(ByVal path As String, ByVal target As Object) As String\n    Dim bits() As String = path.Split(\".\")\n    Dim ll As New LinkedList(Of String)\n    Array.ForEach(bits, Function(b) ll.AddLast(b))\n    Return GetPropertyRecurse(ll.First, target)\nEnd Function\n\nPrivate Function GetPropertyRecurse(ByVal node As LinkedListNode(Of String), ByVal target As Object) As String\n    ' ToDo: add ability to support propertyName(0) [arrays]\n    Dim r As System.Reflection.PropertyInfo = target.GetType.GetProperty(node.Value, BindingFlags.Static Or BindingFlags.Public Or BindingFlags.GetField Or BindingFlags.GetProperty)\n    If r.PropertyType.IsClass And Not node.Next Is Nothing Then\n        Return GetPropertyRecurse(node.Next, r.GetValue(target, Nothing))\n    Else\n        Return r.GetValue(target, Nothing).ToString\n    End If\nEnd Function</pre>\n\n<p>Like I said this is work in progress and it does not support arrays as sub values, but it does add a certain level of versatility to the logging. My last project used a logging system, not <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a>, to log errors to TFS in this way and I also added functionality to update the work item in different ways if it was Closed or Resolved to reactivate it depending on the Build number values.</p>\n\n<p>We have now created a new work item, but what about loading an existing one?</p>\n\n<pre>Private Function GetExistingWorkItem(ByVal Title As String) As WorkItem\n    ' Query for work items\n    Dim query As String = \"SELECT [System.Id], [System.Title] \" _\n                         &amp; \"FROM WorkItems \" _\n                         &amp; \"WHERE [System.TeamProject] = @Project  \" _\n                         &amp; \"AND  [System.WorkItemType] = @WorkItemType  \" _\n                         &amp; \"AND  [System.Title] = @Title  \" _\n                         &amp; \"ORDER BY [System.Id]\"\n    Dim paramiters As New Hashtable\n    paramiters.Add(\"Project\", m_TemplateDefault.TeamProjectName)\n    paramiters.Add(\"WorkItemType\", m_TemplateDefault.WorkItemTypeName)\n    paramiters.Add(\"Title\", m_TemplateDefault.WorkItemTypeName)\n    Dim y As WorkItemCollection = TfsWorkItemStore.Query(query, paramiters)\n    Return y(0)\nEnd Function</pre>\n\n<p>This is a simple search for the title that we created and pass back the first match, just in case we have duplicates.</p>\n\n<p>And that's all there is to saving your logs into VSTS, but how do we get them out! This is pretty easy as all of our log entries have now been saved to a TFS work item and if you remember from before we used the “String.Format(\"{0}|{1}\", wi.Id, errorId.ToString)“ for the ID so we can find the work item again.</p>\n\n<p>The two thing we have left is loading a single error, and loading all of the errors. Getting a single error is a little tricky, which is why we passed back the ID in a format that included the Work Item ID.</p>\n\n<pre>Public Overrides Function GetError(ByVal id As String) As ErrorLogEntry\n    Dim idBits() As String = id.Split(\"|\")\n    Dim wiId As Integer\n    Dim errGuid As String\n    If Not idBits.Length = 2 Then\n        Throw New ArgumentException(\"Invalid ID, it must be made in the format {workItemId}|{guid}\", \"id\")\n    End If\n    If Not IsNumeric(idBits(0)) Then\n        Throw New ArgumentException(\"The workItemId part of the ID must be an integer. Format: {workItemId}|{guid}\", \"id\")\n    End If\n    wiId = CInt(idBits(0))\n    Try\n        errGuid = New Guid(idBits(1)).ToString\n    Catch ex As Exception\n        Throw New ArgumentException(\"The guid part of the ID must be an integer. Format: {workItemId}|{guid}\", \"id\")\n    End Try\n    Dim wi As WorkItem = TfsWorkItemStore.GetWorkItem(wiId)\n    If wi Is Nothing Then\n        Throw New ApplicationException(\"A work item with that id does not exits\")\n    End If\n    Dim a = (From attachemnt As Attachment In wi.Attachments Where attachemnt.Name.Contains(errGuid) Select attachemnt).SingleOrDefault\n    If a Is Nothing Then\n        Throw New ApplicationException(\"The attachment does not exits or has been removed\")\n    End If\n    Return GetErrorLogEntryFromTfsAttachement(wi, a)\nEnd Function</pre>\n\n<p>In this method we do a little validation while parsing out the Work Item ID and the <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a> ID, we then load the specified work item, and find the attachment, and return it. I have a little helper method to make a log item from an attachment, but it fairly simple:</p>\n\n<pre>Private Function GetErrorLogEntryFromTfsAttachement(ByVal wi As WorkItem, ByVal a As Attachment) As ErrorLogEntry\n    Using reader = XmlReader.Create(a.Uri.ToString)\n        If Not reader.IsStartElement(\"error\") Then\n            Return Nothing\n        End If\n        Dim errid = String.Format(\"{0}|{1}\", wi.Id, reader.GetAttribute(\"errorId\"))\n        Dim [error] = ErrorXml.Decode(reader)\n        Return New ErrorLogEntry(Me, errid, [error])\n    End Using\n    Return Nothing\nEnd Function</pre>\n\n<p>And voila! You havve a single Error Log Entry. As you have probably guesses, getting all the errors is easy now. We just need to find all attachements that have a .<a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">elmah</a> extension in our project. A little linq can help with this.</p>\n\n<pre>Public Overrides Function GetErrors(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal errorEntryList As System.Collections.IList) As Integer\n    If pageIndex &lt; 0 Then Throw New ArgumentOutOfRangeException(\"pageIndex\", pageIndex, Nothing)\n    If pageSize &lt; 0 Then Throw New ArgumentOutOfRangeException(\"pageSize\", pageSize, Nothing)\n\n    ' Query for work items\n    Dim query As String = \"SELECT [System.Id], [System.Title] \" _\n                         &amp; \"FROM WorkItems \" _\n                         &amp; \"WHERE [System.TeamProject] = @Project  \" _\n                         &amp; \"AND  [System.WorkItemType] = @WorkItemType  \" _\n                         &amp; \"ORDER BY [System.Id]\"\n    Dim paramiters As New Hashtable\n    paramiters.Add(\"Project\", m_TemplateDefault.TeamProjectName)\n    paramiters.Add(\"WorkItemType\", m_TemplateDefault.WorkItemTypeName)\n    Dim y As WorkItemCollection = TfsWorkItemStore.Query(query, paramiters)\n    ' Query work items for attachments\n    Dim wiats = From wi As WorkItem In y, a As Attachment In wi.Attachments Where a.Name.Contains(\".elmah\") Order By a.Name Select a, wi\n    If Not wiats Is Nothing Then\n        ' Select specific attachemnts\n        Dim results = From wiat In wiats Skip pageIndex * pageSize Take pageSize Select wiat\n        ' Add to output\n        For Each el In results\n            errorEntryList.Add(GetErrorLogEntryFromTfsAttachement(el.wi, el.a))\n        Next\n    End If\n    ' return count\n    Return errorEntryList.Count\nEnd Function</pre>\n\n<p>And there we go, errors from <a href=\"http://code.google.com/p/elmah/\" target=\"_blank\">Elmah</a> saved into Team Foundation Server and then loaded back out. I don’t know how useful this would be in the real world, but it was good for a little boredom relief.</p>\n\n<p><strong><u>Full Source</u></strong></p>\n\n<pre>Imports Elmah\nImports Microsoft.TeamFoundation.Client\nImports Microsoft.TeamFoundation.WorkItemTracking.Client\nImports Microsoft.TeamFoundation.PowerTools.Client.WorkItemTracking.Templates\nImports System.Globalization\nImports System.Xml\nImports System.Text\nImports System.Web\nImports System.Reflection\n\nPublic Class TfsErrorLog\n    Inherits ErrorLog\n\n    Private Shared m_TemplateDefault As Template\n    Private Shared m_TemplateErrorMap As Template\n    Private Shared sm_Tfs As TeamFoundationServer\n    Private Shared sm_TfsStore As WorkItemStore\n    Private Shared sm_TfsProject As Project\n    Private Shared sm_Config As IDictionary\n\n    Public ReadOnly Property TfsServer() As TeamFoundationServer\n        Get\n            If sm_Tfs Is Nothing Then\n                sm_Tfs = GetTeamFoundationServer()\n            End If\n            Return sm_Tfs\n        End Get\n    End Property\n\n    Public ReadOnly Property TfsWorkItemStore() As WorkItemStore\n        Get\n            If sm_TfsStore Is Nothing Then\n                sm_TfsStore = GetTeamFoundationServerWorkItemStore()\n            End If\n            Return sm_TfsStore\n        End Get\n    End Property\n\n    Public ReadOnly Property TfsProject() As Project\n        Get\n            If sm_TfsProject Is Nothing Then\n                sm_TfsProject = GetTeamFoundationServerProject()\n            End If\n            Return sm_TfsProject\n        End Get\n    End Property\n\n    Public Sub New(ByVal config As IDictionary)\n        If config Is Nothing Then\n            Throw New ArgumentNullException(\"config\")\n        End If\n        sm_Config = config\n\n        Dim store As ITemplateStore = GetStore()\n        m_TemplateDefault = GetTemplate(\"Defaults\", store)\n        m_TemplateErrorMap = GetTemplate(\"ErrorMap\", store)\n\n        If m_TemplateDefault Is Nothing Or m_TemplateErrorMap Is Nothing Then\n            Throw New ApplicationException(\"Unable to load the templates from the store.\")\n        End If\n\n    End Sub\n\n    Private Function GetStore()\n        Dim TfsWorkItemTemplateStore As String = GetStorePath()\n        Try\n            Dim storeProvider As New FileSystemTemplateStoreProvider\n            Return New TemplateStore(storeProvider, TfsWorkItemTemplateStore, \":)Store\")\n        Catch ex As Exception\n            Throw New ApplicationException(String.Format(\"Unable to load the store from '{0}'.\", TfsWorkItemTemplateStore), ex)\n        End Try\n    End Function\n\n    Private Function GetStorePath() As String\n        Dim storePath As String = sm_Config(\"TfsWorkItemTemplateStore\")\n        If String.IsNullOrEmpty(storePath) Then\n            Throw New ApplicationException(\"Tfs Server Name is missing for the TFS based error log.\")\n        End If\n        Try\n            If storePath.StartsWith(\"~/\") Then\n                storePath = HttpContext.Current.Server.MapPath(storePath)\n            End If\n            Return storePath\n        Catch ex As Exception\n            Throw New ApplicationException(String.Format(\"Unable to produce the store path from '{0}'.\", storePath), ex)\n        End Try\n    End Function\n\n    Private Function GetTemplate(ByVal TemplateName As String, ByVal store As ITemplateStore) As ITemplate\n        Try\n            Dim t As ITemplate\n            If Not store.TemplateExists(\"/\", TemplateName) Then\n                t = store.CreateTemplate()\n                t.Name = TemplateName\n                t.ParentFolder = \"/\"\n                t.TeamServerUri = \"https://tfs01.codeplex.biz:443\"\n                t.TeamProjectName = \"RDdotNet\"\n                t.WorkItemTypeName = \"WorkItem\"\n                store.AddTemplate(t)\n            End If\n            Return store.GetTemplate(\"/\", TemplateName)\n        Catch ex As Exception\n            Throw New ApplicationException(String.Format(\"Unable to load the template '{0}' from the store.\", TemplateName), ex)\n        End Try\n    End Function\n\n    Private Function GetTeamFoundationServer() As TeamFoundationServer\n        Dim tfs As TeamFoundationServer = Nothing\n        Try\n            tfs = New TeamFoundationServer(m_TemplateDefault.TeamServerUri)\n            tfs.Authenticate()\n            If Not tfs.HasAuthenticated Then\n                Throw New ApplicationException(\"Unable to authenticate against TFS server\")\n            End If\n        Catch ex As Exception\n            Throw New ApplicationException(\"Failed to authenticate against TFS server\", ex)\n        End Try\n        Return tfs\n    End Function\n\n    Private Function GetTeamFoundationServerWorkItemStore() As WorkItemStore\n        Dim store As WorkItemStore = Nothing\n        If TfsServer.HasAuthenticated Then\n            store = DirectCast(TfsServer.GetService(GetType(WorkItemStore)), WorkItemStore)\n        End If\n        Return store\n    End Function\n\n    Private Function GetTeamFoundationServerProject() As Project\n        Dim Project As Project = Nothing\n        Try\n            If TfsServer.HasAuthenticated Then\n                Project = TfsWorkItemStore.Projects(m_TemplateDefault.TeamProjectName)\n            End If\n        Catch ex As Exception\n            Throw New ApplicationException(\"Unable to retrieve Tfs Project\", ex)\n        End Try\n        If Project Is Nothing Then\n            Throw New ApplicationException(String.Format(\"Unable to locate project with the name '{0}'\", m_TemplateDefault.TeamProjectName))\n        End If\n        Return Project\n    End Function\n\n    Public Overrides Function GetError(ByVal id As String) As ErrorLogEntry\n        Dim idBits() As String = id.Split(\"|\")\n        Dim wiId As Integer\n        Dim errGuid As String\n        If Not idBits.Length = 2 Then\n            Throw New ArgumentException(\"Invalid ID, it must be made in the format {workItemId}|{guid}\", \"id\")\n        End If\n        If Not IsNumeric(idBits(0)) Then\n            Throw New ArgumentException(\"The workItemId part of the ID must be an integer. Format: {workItemId}|{guid}\", \"id\")\n        End If\n        wiId = CInt(idBits(0))\n        Try\n            errGuid = New Guid(idBits(1)).ToString\n        Catch ex As Exception\n            Throw New ArgumentException(\"The guid part of the ID must be an integer. Format: {workItemId}|{guid}\", \"id\")\n        End Try\n        Dim wi As WorkItem = TfsWorkItemStore.GetWorkItem(wiId)\n        If wi Is Nothing Then\n            Throw New ApplicationException(\"A work item with that id does not exits\")\n        End If\n        Dim a = (From attachemnt As Attachment In wi.Attachments Where attachemnt.Name.Contains(errGuid) Select attachemnt).SingleOrDefault\n        If a Is Nothing Then\n            Throw New ApplicationException(\"The attachment does not exits or has been removed\")\n        End If\n        Return GetErrorLogEntryFromTfsAttachement(wi, a)\n    End Function\n\n    Public Overrides Function GetErrors(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal errorEntryList As System.Collections.IList) As Integer\n        If pageIndex &lt; 0 Then Throw New ArgumentOutOfRangeException(\"pageIndex\", pageIndex, Nothing)\n        If pageSize &lt; 0 Then Throw New ArgumentOutOfRangeException(\"pageSize\", pageSize, Nothing)\n\n        ' Query for work items\n        Dim query As String = \"SELECT [System.Id], [System.Title] \" _\n                             &amp; \"FROM WorkItems \" _\n                             &amp; \"WHERE [System.TeamProject] = @Project  \" _\n                             &amp; \"AND  [System.WorkItemType] = @WorkItemType  \" _\n                             &amp; \"ORDER BY [System.Id]\"\n        Dim paramiters As New Hashtable\n        paramiters.Add(\"Project\", m_TemplateDefault.TeamProjectName)\n        paramiters.Add(\"WorkItemType\", m_TemplateDefault.WorkItemTypeName)\n        Dim y As WorkItemCollection = TfsWorkItemStore.Query(query, paramiters)\n        ' Query work items for attachments\n        Dim wiats = From wi As WorkItem In y, a As Attachment In wi.Attachments Where a.Name.Contains(\".elmah\") Order By a.Name Select a, wi\n        If Not wiats Is Nothing Then\n            ' Select specific attachemnts\n            Dim results = From wiat In wiats Skip pageIndex * pageSize Take pageSize Select wiat\n            ' Add to output\n            For Each el In results\n                errorEntryList.Add(GetErrorLogEntryFromTfsAttachement(el.wi, el.a))\n            Next\n        End If\n        ' return count\n        Return errorEntryList.Count\n    End Function\n\n    ''' &lt;summary&gt;\n    ''' Logs the error as an attachement to an existing work item, or adds a new work item if this error has not occured.\n    ''' &lt;/summary&gt;\n    ''' &lt;param name=\"error\"&gt;The error to be logged&lt;/param&gt;\n    ''' &lt;returns&gt;The ID of the error&lt;/returns&gt;\n    ''' &lt;remarks&gt;&lt;/remarks&gt;\n    Public Overrides Function Log(ByVal [error] As [Error]) As String\n        'TODO: Log\n        Dim errorId = Guid.NewGuid().ToString()\n        Dim timeStamp = DateTime.UtcNow.ToString(\"yyyy-MM-ddHHmmssZ\", CultureInfo.InvariantCulture)\n        Dim Filename = String.Format(\"error-{0}-{1}.elmah\", timeStamp, errorId)\n        Dim temp = System.IO.Path.Combine(\".\", Filename)\n        ' Temp Log to disk\n        Using writer = New XmlTextWriter(temp, Encoding.UTF8)\n            writer.Formatting = Formatting.Indented\n            writer.WriteStartElement(\"error\")\n            writer.WriteAttributeString(\"errorId\", errorId)\n            ErrorXml.Encode([error], writer)\n            writer.WriteEndElement()\n            writer.Flush()\n        End Using\n\n        Dim Title As String = String.Format(\"{0}-{1}\", [error].ApplicationName, [error].Message)\n\n        Dim wi As WorkItem = GetWorkItemForException(Title, [error])\n\n        Dim a As New Attachment(temp, \"Elmah error log\")\n\n        wi.Attachments.Add(a)\n        If wi.IsValid Then\n            wi.Save()\n            Return String.Format(\"{0}|{1}\", wi.Id, errorId.ToString)\n        Else\n            Dim message As New System.Text.StringBuilder\n            Dim results = wi.Validate()\n            Dim isFirst As Boolean = True\n            For Each r In results\n                message.AppendLine(String.Format(IIf(isFirst, \"{0}\", \", {0}\"), r))\n                isFirst = False\n            Next\n            Throw New ApplicationException(String.Format(\"Unable to save the work item becuse the following fields produced a validation error '{0}'.\", message.ToString))\n        End If\n    End Function\n\n    Protected Function GetWorkItemForException(ByVal Title As String, ByVal [error] As [Error]) As WorkItem\n        Dim wi As WorkItem = GetExistingWorkItem(Title)\n        If wi Is Nothing Then\n            wi = CreateNewWorkItem(Title)\n        End If\n        m_TemplateDefault.Fields.ApplyFieldValues(wi, False)\n        ApplyErrorFieldValues(wi, [error])\n        Return wi\n    End Function\n\n    Private Function GetExistingWorkItem(ByVal Title As String) As WorkItem\n        ' Query for work items\n        Dim query As String = \"SELECT [System.Id], [System.Title] \" _\n                             &amp; \"FROM WorkItems \" _\n                             &amp; \"WHERE [System.TeamProject] = @Project  \" _\n                             &amp; \"AND  [System.WorkItemType] = @WorkItemType  \" _\n                             &amp; \"AND  [System.Title] = @Title  \" _\n                             &amp; \"ORDER BY [System.Id]\"\n        Dim paramiters As New Hashtable\n        paramiters.Add(\"Project\", m_TemplateDefault.TeamProjectName)\n        paramiters.Add(\"WorkItemType\", m_TemplateDefault.WorkItemTypeName)\n        paramiters.Add(\"Title\", m_TemplateDefault.WorkItemTypeName)\n        Dim y As WorkItemCollection = TfsWorkItemStore.Query(query, paramiters)\n        Return y(0)\n    End Function\n\n    Private Function CreateNewWorkItem(ByVal Title As String) As WorkItem\n        Dim wit As WorkItemType = (From t As WorkItemType In TfsProject.WorkItemTypes Where t.Name = m_TemplateDefault.WorkItemTypeName).SingleOrDefault\n        If wit Is Nothing Then\n            Throw New ApplicationException(String.Format(\"Unable to find the work item type '{0}' in the project '{1}'\", m_TemplateDefault.WorkItemTypeName, TfsProject.Name))\n        End If\n        Dim wi As New WorkItem(wit)\n        wi.Title = Title\n        Return wi\n    End Function\n\n    Private Sub ApplyErrorFieldValues(ByVal wi As WorkItem, ByVal [error] As [Error])\n        For Each i In m_TemplateErrorMap.Fields\n            Dim value As String = GetPropertyValue(i.Value, [error])\n            If wi.Fields(i.ReferenceName).AllowedValues.Contains(value) Then\n                wi.Fields(i.ReferenceName).Value = value\n            Else\n                Throw New ApplicationException(String.Format(\"Unable to set the work item field '{0}' to '{1}' as '{1}' is not in the Allowed Values list.\", i.ReferenceName, value))\n            End If\n        Next\n    End Sub\n\n    Private Function GetPropertyValue(ByVal path As String, ByVal target As Object) As String\n        Dim bits() As String = path.Split(\".\")\n        Dim ll As New LinkedList(Of String)\n        Array.ForEach(bits, Function(b) ll.AddLast(b))\n        Return GetPropertyRecurse(ll.First, target)\n    End Function\n\n    Private Function GetPropertyRecurse(ByVal node As LinkedListNode(Of String), ByVal target As Object) As String\n        ' ToDo: addd ability to support propertyName(0) [arrays]\n        Dim r As System.Reflection.PropertyInfo = target.GetType.GetProperty(node.Value, BindingFlags.Static Or BindingFlags.Public Or BindingFlags.GetField Or BindingFlags.GetProperty)\n        If r.PropertyType.IsClass And Not node.Next Is Nothing Then\n            Return GetPropertyRecurse(node.Next, r.GetValue(target, Nothing))\n        Else\n            Return r.GetValue(target, Nothing).ToString\n        End If\n    End Function\n\n    Private Function GetErrorLogEntryFromTfsAttachement(ByVal wi As WorkItem, ByVal a As Attachment) As ErrorLogEntry\n        Using reader = XmlReader.Create(a.Uri.ToString)\n            If Not reader.IsStartElement(\"error\") Then\n                Return Nothing\n            End If\n            Dim errid = String.Format(\"{0}|{1}\", wi.Id, reader.GetAttribute(\"errorId\"))\n            Dim [error] = ErrorXml.Decode(reader)\n            Return New ErrorLogEntry(Me, errid, [error])\n        End Using\n        Return Nothing\n    End Function\n\nEnd Class</pre>\n\n<div style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\" class=\"wlWriterEditableSmartContent\">Technorati Tags: <a href=\"http://technorati.com/tags/WIT\" rel=\"tag\">WIT</a>\_<a href=\"http://technorati.com/tags/ALM\" rel=\"tag\">ALM</a>\_<a href=\"http://technorati.com/tags/.NET\" rel=\"tag\">.NET</a>\_<a href=\"http://technorati.com/tags/CodeProject\" rel=\"tag\">CodeProject</a>\_<a href=\"http://technorati.com/tags/TFS\" rel=\"tag\">TFS</a>\_</div>"
  - ''
  post_id: '97'
  post_date: '2009-07-26 22:30:00'
  post_date_gmt: '2009-07-26 22:30:00'
  post_modified: '2009-07-26 22:30:00'
  post_modified_gmt: '2009-07-26 22:30:00'
  comment_status: open
  ping_status: open
  post_name: log-elmah-errors-in-team-foundation-server
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '311602036'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBNVIX
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474536734;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:332;}i:1;a:1:{s:2:"id";i:10221;}i:2;a:1:{s:2:"id";i:32;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2009-07-26-log-elmah-errors-in-team-foundation-server.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '606'
  comment:
    comment_id: '591'
    comment_author: Jason Irwin
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2009-07-27 22:26:01'
    comment_date_gmt: '2009-07-27 22:26:01'
    comment_content: Awesome! I can see how this could come in quite useful. Great post!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209970153'
