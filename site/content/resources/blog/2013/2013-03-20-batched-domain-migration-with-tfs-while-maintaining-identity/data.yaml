post:
  title: Batched domain migration with TFS while maintaining Identity
  link: >-
    https://nkdagility.com/blog/batched-domain-migration-with-tfs-while-maintaining-identity/
  pubDate: Wed, 20 Mar 2013 23:49:43 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=9324
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">If you are moving from one domain to another, but you have
    lots of users you may do a batched domain migration with Visual Studio 2012
    Team Foundation Server. Make suer that you read all of the fine print and
    don't get caught with duplicate Identities and no&nbsp;traceability.</p>

    <p>In this case you need to carefully mange the users over to the new
    environment as Visual Studio 2012 Team Foundation Server actively syncs all
    domain accounts into its internal identity system. Why do you care? Well,
    lets suppose you have a domain group called domain1domaingroup1 and this
    group contains domain1user1 and domain1user2.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-width: 0px;" title="image"
    alt="image" src="http://blog.hinshelwood.com/files/2013/03/image32.png"
    width="141" height="133" border="0" /><br /><strong>Figure:
    Domain1</strong></p>

    <p>Now when you add this “Group1” to Team Foundation Server it goes and
    syncs all of the accounts in that group. If it syncs an account that does
    not currently have an internal identity it creates that wrapper TFS
    Identity. TFS uses wrapper identities so that you can change the contents of
    that identity and so that you can have multiple Active Directory users with
    the same username, but in different domains.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-width: 0px;" title="image"
    alt="image" src="http://blog.hinshelwood.com/files/2013/03/image33.png"
    width="185" height="286" border="0" /><br /><strong>Figure: Domain1
    Sync</strong></p>

    <p>This is all fine until you try to switch domains. This is not a switch of
    the domain of which TFS is a member, but a switch of the domain of which the
    accounts are members. This usually happens at the same time, but you may
    move TFS from your “Department” domain to your “Corporate” domain while
    still maintaining trust between the two. Or you may have multiple
    “Departmental” or “IBoughtThisComany” domains that all have trust
    relationships with your “Corporate” domain and can log into TFS.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-width: 0px;" title="image"
    alt="image" src="http://blog.hinshelwood.com/files/2013/03/image34.png"
    width="450" height="458" border="0" /><br /><strong>Figure: <i
    class="icon-remove-circle"></i> Bad example, we created duplicate
    identities</strong></p>

    <p>But at some point you want to move your users from signing in with
    “Domain1” credentials to using “Corporate” ones. When this happens and we do
    the workflow wrong we can mess up the identities in TFS and effectively have
    new users when we want the same ones.</p>

    <p>This can happen when the new users are given permission, perhaps through
    an active directory group to your TFS server in the new domain before you
    have done a little work to make sure this does not happen. What we really
    want to happen is to change the active directory users that the TFS Identity
    refers to to the new domain without creating a new Identity.</p>

    <p><strong><em><span class="label label-warning">Warning</span> If you do
    end up with a duplicate identity then there is NO way to fix this! You would
    need to restore from backup and start your migration again making sure not
    to add any of the new domains users to the server.</em></strong></p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-width: 0px;" title="image"
    alt="image" src="http://blog.hinshelwood.com/files/2013/03/image35.png"
    width="468" height="388" border="0" /><br /><strong>Figure: <i
    class="icon-ok-circle"></i> Good example, we have mapped the user
    across</strong></p>

    <p>If you have a lot of users you are probably going to stage or batch your
    users across to the new domain. So how do we manage that?</p>

    <ol>

    <li>Move TFS Server from Domain1 to Domain2 with full trust</li>

    <li>For each user:

    <ol>

    <li>Make 100% sure that domain2User1 has NEVER been added to TFS</li>

    <li>Remove User1 from group1 in domain1</li>

    <li>Migrate User1 to Domain2 and disable account on Domain1</li>

    <li>Run TfsIdentities command line to remap the TFS Identity to the user in
    the new domain</li>

    <li>Add domain2user1 to TFS and remove domain1user1</li>

    <li>Add user1 to group1 of domain2</li>

    </ol>

    </li>

    </ol>

    <p><em><span class="label label-info">Info</span> You may see that under the
    covers TFS has created a new&nbsp; Identity wrapper for the old domain1user1
    account after you have mapped it across. Note that this would be a NEW TFS
    Identity object and we can safely ignore it. You can prevent it from being
    created by removing user1 from Domain1Group1 prior to running the
    TfsIdentity command.</em></p>

    <p>If for any reason we need to back out then you can follow the reverse
    process. Remember that the server is joined to Domain2 at this point and it
    is just the users identities that we are messing with.</p>

    <p>This is the theory, but in the real world things may be different. In the
    case of one customer it will take up to a year to move all users across.
    This poses a problem as the Active Directory migration tool automatically
    adds the new user to all of the existing Groups and thus the user would
    likely already be synced to the new server <img class="wlEmoticon
    wlEmoticon-sadsmile" style="border-style: none;" alt="Sad smile"
    src="http://blog.hinshelwood.com/files/2013/03/wlEmoticon-sadsmile.png"
    /></p>

    <p>One way around this would be to move to TFS groups for the migration. You
    can create a TFS group that is equivalent to the Active Directory group and
    thus remove the automatic syncing as you can then remove the Active
    Directory groups from TFS. While this does mean that you need to manage the
    users that are members of those groups manually it will avoid the duplicate
    users.</p>

    <ol>

    <li>Convert all Domain1 AD Groups to TFS Groups</li>

    <li>Move TFS Server from Domain1 to Domain2 with full trust</li>

    <li>For each user:

    <ol>

    <li>Migrate User1 to Domain2 and disable account on Domain1</li>

    <li>Run TfsIdentities command line to remap the TFS Identity to the user in
    the new domain</li>

    </ol>

    </li>

    <li>Convert all TFS Groups to AD Domain Groups on Domain2</li>

    </ol>

    <p>Either of these two workflows for moving users will work. It depends on
    how your Operations teams are moving the accounts around. However you do
    this, if you are batching users, it will take some time. This particular
    customer thinks it will take them up to a year to move all of their users
    and are in this for the long term.</p>

    <ul>

    <li><a
    title="http://blog.hinshelwood.com/in-place-upgrade-of-tfs-2008-to-tfs-2010-with-move-to-new-domain/"
    href="http://blog.hinshelwood.com/in-place-upgrade-of-tfs-2008-to-tfs-2010-with-move-to-new-domain/"
    target="_blank">In-Place upgrade of TFS 2008 to TFS 2010 with move to new
    domain</a></li>

    </ul>

    <p>Hopefully your domain move goes more smoothly and that you watch out for
    the pitfalls.</p>
  - "<p class=\"lead\">If you are moving from one domain to another, but you have lots of users you may do a batched domain migration with Visual Studio 2012 Team Foundation Server. Make suer that you read all of the fine print and don't get caught with duplicate Identities and no\_traceability.</p>"
  post_id: '9324'
  post_date: '2013-03-20 16:49:43'
  post_date_gmt: '2013-03-20 23:49:43'
  post_modified: '2013-03-20 16:49:43'
  post_modified_gmt: '2013-03-20 23:49:43'
  comment_status: open
  ping_status: open
  post_name: batched-domain-migration-with-tfs-while-maintaining-identity
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '85'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _yoast_wpseo_focuskw
    meta_value: batched domain migration
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      Moving Visual Studio 2012 Team Foundation Server from one domain to
      another and have lots of users? You may end up with a batched domain
      migration...
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: wp-to-buffer-log
    meta_value: >-
      O:8:"stdClass":5:{s:7:"updates";a:3:{i:0;O:8:"stdClass":16:{s:3:"_id";s:24:"514a4c4c84046e284b000016";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1363823692;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1363885620;s:8:"due_time";s:7:"5:07
      pm";s:2:"id";s:24:"514a4c4c84046e284b000016";s:10:"profile_id";s:24:"507a4e20d9320dd125000018";s:15:"profile_service";s:7:"twitter";s:6:"status";s:6:"buffer";s:4:"text";s:100:"New
      Post: Batched domain migration with TFS while maintaining Identity
      http://buff.ly/161hiiq #vsalm";s:14:"text_formatted";s:315:"New Post:
      Batched domain migration with TFS while maintaining Identity <a
      class="url" href="http://buff.ly/161hiiq" rel="external nofollow"
      target="_blank">http://buff.ly/161hiiq</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1363823692;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}i:1;O:8:"stdClass":17:{s:3:"_id";s:24:"514a4c4c84046e284b000017";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1363823692;s:3:"day";s:5:"Today";s:6:"due_at";i:1363824360;s:8:"due_time";s:7:"6:06
      pm";s:2:"id";s:24:"514a4c4c84046e284b000017";s:5:"media";O:8:"stdClass":5:{s:8:"original";s:89:"http://blog.hinshelwood.com/batched-domain-migration-with-tfs-while-maintaining-identity/";s:11:"description";s:149:"Moving
      Visual Studio 2012 Team Foundation Server from one domain to another and
      have lots of users? You may end up with a batched domain
      migration...";s:5:"title";s:80:"Batched domain migration with TFS while
      maintaining Identity - Visual Studio
      ALM";s:4:"link";s:89:"http://blog.hinshelwood.com/batched-domain-migration-with-tfs-while-maintaining-identity/";s:7:"preview";s:73:"http://blog.hinshelwood.com/files/2012/02/metro-visualstudio-128-link.png";}s:10:"profile_id";s:24:"5088ae7ed9320d615a00000a";s:15:"profile_service";s:8:"facebook";s:6:"status";s:6:"buffer";s:4:"text";s:100:"New
      Post: Batched domain migration with TFS while maintaining Identity
      http://buff.ly/161hiiq #vsalm";s:14:"text_formatted";s:315:"New Post:
      Batched domain migration with TFS while maintaining Identity <a
      class="url" href="http://buff.ly/161hiiq" rel="external nofollow"
      target="_blank">http://buff.ly/161hiiq</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1363823692;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}i:2;O:8:"stdClass":17:{s:3:"_id";s:24:"514a4c4c84046e284b000018";s:9:"client_id";s:24:"50f71563f758fa8f40000001";s:10:"created_at";i:1363823692;s:3:"day";s:8:"Tomorrow";s:6:"due_at";i:1363862940;s:8:"due_time";s:8:"10:49
      am";s:2:"id";s:24:"514a4c4c84046e284b000018";s:5:"media";O:8:"stdClass":5:{s:8:"original";s:89:"http://blog.hinshelwood.com/batched-domain-migration-with-tfs-while-maintaining-identity/";s:11:"description";s:149:"Moving
      Visual Studio 2012 Team Foundation Server from one domain to another and
      have lots of users? You may end up with a batched domain
      migration...";s:5:"title";s:80:"Batched domain migration with TFS while
      maintaining Identity - Visual Studio
      ALM";s:4:"link";s:89:"http://blog.hinshelwood.com/batched-domain-migration-with-tfs-while-maintaining-identity/";s:7:"preview";s:73:"http://blog.hinshelwood.com/files/2012/02/metro-visualstudio-128-link.png";}s:10:"profile_id";s:24:"5088ae96d9320d3a5a00000a";s:15:"profile_service";s:8:"linkedin";s:6:"status";s:6:"buffer";s:4:"text";s:100:"New
      Post: Batched domain migration with TFS while maintaining Identity
      http://buff.ly/161hiiq #vsalm";s:14:"text_formatted";s:315:"New Post:
      Batched domain migration with TFS while maintaining Identity <a
      class="url" href="http://buff.ly/161hiiq" rel="external nofollow"
      target="_blank">http://buff.ly/161hiiq</a> <a
      href="https://twitter.com/#!/search?q=%23vsalm" title="#vsalm"
      class="hashtag" rel="external nofollow"
      target="_blank">#vsalm</a>";s:4:"type";s:4:"link";s:10:"updated_at";i:1363823692;s:7:"user_id";s:24:"507a4e20d9320dd125000017";s:3:"via";s:3:"api";}}s:17:"buffer_percentage";i:30;s:12:"buffer_count";i:3;s:7:"success";b:1;s:7:"message";s:48:"One
      more post in your Buffer. Keep it topped up!";}
  - meta_key: dsq_thread_id
    meta_value: '1153026916'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBHhlP
  - meta_key: _thumbnail_id
    meta_value: '11141'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474925264;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5;}i:1;a:1:{s:2:"id";i:9443;}i:2;a:1:{s:2:"id";i:7176;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2013-03-20-batched-domain-migration-with-tfs-while-maintaining-identity.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '954'
  comment:
  - comment_id: '1591'
    comment_author: Gary Nguyen
    comment_author_email: chau.nguyen@mitchell.com
    comment_author_url: ''
    comment_author_IP: 76.91.232.199
    comment_date: '2013-03-23 10:38:00'
    comment_date_gmt: '2013-03-23 17:38:00'
    comment_content: >-
      Martin, I have a few comments:


      For workflow 1, I don't think we should remove "domain1user1" in step 5
      since workitem/source codes still show the history of this user. Unless,
      after running Tfsidentities, it knows to replace the user with
      "domain2user1".


      For our current situation, I think workflow 2 would be shorter where we
      don't need to perform step 2 in workflow 1 "Remove User1 from group1 in
      domain1"


      Do you know of a way from codes/scripts to traverse and identify the name
      of the groups that "domain1user1" belongs to?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '839710209'
  - comment_id: '1592'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 76.104.188.230
    comment_date: '2013-03-23 11:23:00'
    comment_date_gmt: '2013-03-23 18:23:00'
    comment_content: >-
      1) Internally TFS used the "TfsIdentity-001" construct. So once you have
      changed its linked AD account from domain1user1 to domain2user1 all of the
      things within TFS that were actioned by domain1user1 are now mapped to
      domain2user1.


      You can then remove "domain1user1" from permission safely as there are no
      longer any actions in TFS that are linked to that account. The workflow is
      designed to make sure you don't end up with the 'bad example' above where
      you accidentally create the orphaned "domain1user1" account inside a new
      TFS Identity that has never had any actions performed against it....


      2) For your situation and number of users along with the year long
      migration I agree that you would be better with Workflow 2.


      3) I have not done it personally but one of our consultants, James Tupper,
      has done extensive Security API work in TFS and I know that what you want
      is possible.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1591'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '839710209'
    - meta_key: dsq_post_id
      meta_value: '839750664'
  - comment_id: '1593'
    comment_author: James Tupper
    comment_author_email: ''
    comment_author_url: http://twitter.com/jamesTUPPER
    comment_author_IP: 65.102.165.25
    comment_date: '2013-03-26 10:55:00'
    comment_date_gmt: '2013-03-26 17:55:00'
    comment_content: >-
      Hi Gary, I can definitely give you a coding example for this. Would you
      like to follow up offline? Contact me via email:
      james[dot]tupper[at]nwcadence[dot]com
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1591'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '839710209'
    - meta_key: dsq_post_id
      meta_value: '843117943'
  - comment_id: '1594'
    comment_author: Gary Nguyen
    comment_author_email: chau.nguyen@mitchell.com
    comment_author_url: ''
    comment_author_IP: 255.255.255.255
    comment_date: '2013-03-27 14:32:00'
    comment_date_gmt: '2013-03-27 21:32:00'
    comment_content: >-
      Hi James,

      I’m been working with Martin H. and there are some questions about TFS
      migration onto new domain. “Do you know of a way from codes/scripts to
      traverse and identify the name of the groups that "domain1user1" belongs
      to?” 


      Do you have any sample on this?

      Thanks,

      -- Gary
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1593'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '843117943'
    - meta_key: dsq_post_id
      meta_value: '844301925'
  - comment_id: '1595'
    comment_author: Jonathan Albright
    comment_author_email: jdalbright05@gmail.com
    comment_author_url: ''
    comment_author_IP: 170.201.180.38
    comment_date: '2013-05-13 18:56:00'
    comment_date_gmt: '2013-05-13 17:56:00'
    comment_content: >-
      Is there anyway to make this work without disabling the user accounts in
      the "from" domain?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '896081309'
  - comment_id: '1596'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 184.78.139.42
    comment_date: '2013-05-14 17:52:00'
    comment_date_gmt: '2013-05-14 16:52:00'
    comment_content: >-
      Sure, that would work too. I think that Microsoft's AD Migration tool
      automatically disables the old account, but you can either reactivate it
      or use another tool...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1595'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '896081309'
    - meta_key: dsq_post_id
      meta_value: '897231443'
  - comment_id: '1597'
    comment_author: Jonathan Albright
    comment_author_email: jdalbright05@gmail.com
    comment_author_url: ''
    comment_author_IP: 170.201.180.38
    comment_date: '2013-05-22 19:49:00'
    comment_date_gmt: '2013-05-22 18:49:00'
    comment_content: >-
      Looks like the old accounts must be inactive for the migration to work.



      With my experimentation the identity sync reverts the identity change back
      to the previous account if the previous identity is still active,
      basically undoing your work. I don't understand why this behavior happens.



      More about it here:
      http://social.msdn.microsoft.com/Forums/en-US/tfsadmin/thread/eff67cbe-90c3-456e-97e1-6728a881ce55/
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1596'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '897231443'
    - meta_key: dsq_post_id
      meta_value: '905126859'
  - comment_id: '10367'
    comment_author: >-
      Use corporate identities with existing VSO accounts | naked ALM - Experts
      in ALM, TFS &amp; lean-agile with Scrum
    comment_author_email: ''
    comment_author_url: http://nkdagility.com/use-corporate-identities-existing-vso-accounts/
    comment_author_IP: 97.107.139.31
    comment_date: '2015-01-22 13:10:04'
    comment_date_gmt: '2015-01-22 13:10:04'
    comment_content: >-
      [&#8230;] and not my Microsoft ID (MSA).&nbsp; Now my account has been
      migrated. Just as it would be if you run the change identities command
      from [&#8230;]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1421932204.240883;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1421933456.079196;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
