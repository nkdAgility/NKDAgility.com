post:
  title: Reserve an Agent for a special build in Team Foundation Server 2012
  link: >-
    https://nkdagility.com/blog/reserve-an-agent-for-a-special-build-in-team-foundation-server-2012/
  pubDate: Thu, 04 Apr 2013 01:37:57 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=9359
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">By the time you hit the AgentScope activity in a TF Build
    workflow you are already running on the agent and if you have things you
    need to configure you need to figure out some way to reserve an agent before
    you get there.</p>

    <ul>

    <li><span style="line-height: 13px;"><strong>Update 2013-04-04</strong> -
    All three of the activities below have been added to the<a
    href="http://tfsbuildextensions.codeplex.com/documentation"> TFS Community
    Build Extensions</a>&nbsp;project on Codeplex and will be in a future
    release</span></li>

    </ul>

    <p>There are a number of reasons that you might want to reserve your TF
    Build Agent in Visual Studio 2012 Team Foundation Server before you hit the
    default AgentScope. The one I am working on with a customer is that they
    have a build that can only be executed once on a Build server and then
    always fails. Yes, the build breaks the Build Agent. Yes, I know that this
    is something that the development team responsible should fix but the
    Software Configuration Management (SCM) team that owns the servers can only
    encourage good behaviour and not enforce it.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    margin: 0px; display: inline; padding-right: 0px; border-width: 0px;"
    title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Agent Scope runs on the
    agent</strong></p>

    <p>The current solution is to revert the build server to a snapshot after
    every build. This causes a bunch of knock on problems:</p>

    <ol>

    <li><strong>Revert to Snapshot</strong><br />We need to revert the VM Ware
    server to a Snapshot after every build</li>

    <li><strong>Removed from Domain</strong><br />As the snapshot can be more
    than 30 days old the Active Directory machine security token may have
    expired in which case you would need to re-join that server to the domain.
    The result of this is that the Infrastructure teams will not have these
    build servers on the domain. And rightly do…</li>

    <li><strong>Shadow accounts need to be used</strong><br />As our computers
    are now in a workgroup we need to setup and maintain Shadow accounts for
    access.</li>

    <li><strong>You can only use one AppTier</strong><br />As we need to
    maintain shadow accounts and thee needs to be one on each AppTier we end up
    with either AppTier1MyAccount or AppTier2MyAccount. So on the build server
    we get a conflict of Workgroup as these two accounts vie for workspace
    mappings.</li>

    </ol>

    <p>So what can we do to alleviate this. One idea, the one that we re going
    to try,&nbsp; is to take the snapshot at the beginning of the build and
    revert at the end. That way the Snapshot we are reverting to is only a few
    hors old at worst and our Build computers can continue to be services
    normally. Unfortunately we only know the agent… on the agent..</p>

    <p>The way to solve this is to either rewrite the AgentScope Activity (not
    going to happen) or to do something a little sneaky. How about if we add
    another AgentAcope, reserve the agent in some way and then run the real
    agent scope…</p>

    <ol>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Reserve Agent in some way</span></li>

    <li>Execute some action against the Agent</li>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Run on Reserved Agent</span></li>

    <li>Execute some action against the Agent</li>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Reset the
    Reservation</span>&nbsp;</li>

    </ol>

    <p>While this does complicate the build process it does indeed looks to be
    the best bet in this circumstance.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    margin: 0px; display: inline; padding-right: 0px; border-width: 0px;"
    title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image1.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Reserve an agent before you
    execute the build for real</strong></p>

    <h2 class="icon-task">Reserve an Agent in some way</h2>

    <p>This should be simple even though it looks a little convoluted.</p>

    <ol>

    <li>Add additional AgentScope</li>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Add a Tag to the Agent</span></li>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Get Machine name of the
    Agent</span></li>

    <li>Exit AgentScope</li>

    </ol>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    margin: 0px; display: inline; padding-right: 0px; border-width: 0px;"
    title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image2.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Add additional AgentScope to
    reserve an agent</strong></p>

    <p>In this additional Agent Scope we can now call GetBuildAgent to populate
    the data we need and gain access to the Tags. However we need to do a couple
    of things that are not normally done:</p>

    <h3 class="icon-task">Add a Tag to the Agent</h3>

    <p>In order to add a tag to an agent we need to create our first custom
    activity. This one, as with all of the activities for this process are
    really simple. It takes the IBuildAgent variable that we just got and a
    string Tag that it then adds to that agent.</p>

    <p><pre class="lang:c# mark:14,18,22,31-38,39-,41,48-51 decode:true "
    title="BuildAgentTags">namespace MrHinsh.TfsBuildExtensions

    {
        using System;
        using System.Activities;
        using System.ComponentModel;
        using Microsoft.TeamFoundation.Build.Client;
        using Microsoft.TeamFoundation.Client;

        [BuildActivity(HostEnvironmentOption.All)]
        public sealed class BuildAgentTags : CodeActivity
        {
            [RequiredArgument]
            [Browsable(true)]
            public InArgument BuildAgent { get; set; }

            [RequiredArgument]
            [Browsable(true)]
            public InArgument Action { get; set; }

            [RequiredArgument]
            [Browsable(true)]
            public InArgument Tag { get; set; }

            protected override void Execute(CodeActivityContext context)
            {
                if (context == null)
                {
                    throw new ArgumentNullException("context");
                }

                IBuildAgent buildAgent = context.GetValue(this.BuildAgent);
                TagActions action = context.GetValue(this.Action);
                String tag = context.GetValue(this.Tag);
                switch (action)
                {
                    case TagActions.Add:
                        buildAgent.Tags.Add(tag);
                        break;
                    case TagActions.Remove:
                        buildAgent.Tags.Remove(tag);
                        break;
                    default:
                        break;
                }
            }
        }

        public enum TagActions
        {
            Add,Remove
        }
    }</pre>

    </p><p><strong>Figure: Add a Tag to the Agent custom build
    activity</strong></p>

    <p>Once compiled and added to your custom assemblies location you can then
    add that new activity to your Build Workflow and configure it.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-width: 0px;" title="image"
    alt="image" src="http://blog.hinshelwood.com/files/2013/04/image3.png"
    width="800" height="480" border="0" /><br /><strong>Figure: Add a Tag to the
    Agent workflow</strong></p>

    <p>We already got the BuildAgent variable from the GetBuildAgent activity
    and we can pass it in here. I am also choosing to use the Build Number, that
    we get from the BuildDetail object,&nbsp; to add as a tag. This makes sure
    that it is unique to this execution and allows us a simple way to clean it
    up afterwards.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border: 0px;" title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image8.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Tag added to
    agent</strong></p>

    <p>As you can see this successfully adds the tag to the agent.</p>

    <h3 class="icon-task">Get Machine name of the Agent</h3>

    <p>The second activity we need is to retrieve the physical server name for
    the agent that we are running on. We need to call into wither VMWare or
    HyperV to snapshot the server and for that I need to know what server to
    call.</p>

    <p>This was even easier to get although it did take a little while poking at
    the API’s to find the right thread to pull. I had thought that I could get
    the server name from a property of an existing object but it was
    conspicuously missing. I decided that rather than trying to be difficult I
    would just parse it out of a URL. Simples…</p>

    <pre class="brush: csharp; ruler: true; highlight: [14, 18, 26,
    27]">namespace MrHinsh.TfsBuildExtensions

    {
        using System;
        using System.Activities;
        using System.ComponentModel;
        using Microsoft.TeamFoundation.Build.Client;
        using Microsoft.TeamFoundation.Client;

        [BuildActivity(HostEnvironmentOption.All)]
        public sealed class GetBuildAgentMachineName : CodeActivity
        {
            [RequiredArgument]
            [Browsable(true)]
            public InArgument BuildAgent { get; set; }

            [RequiredArgument]
            [Browsable(true)]
            public OutArgument AgentMachineName { get; set; }

            protected override void Execute(CodeActivityContext context)
            {
                if (context == null)
                {
                    throw new ArgumentNullException("context");
                }
                IBuildAgent buildAgent = context.GetValue(this.BuildAgent);
                context.SetValue(this.AgentMachineName, buildAgent.Url.Host);
            }
        }
    }

    </pre>

    <p><strong>Figure: Get Machine name of the Agent custom
    activity</strong></p>

    <p>You can see that I am just using the build agent object and parsing the
    servers host name from the URL. This seamed a lot easier than using any of
    the other methods that I could think of and even after spelunking the API’s
    for a few hours I could not find a better approach.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    display: inline; padding-right: 0px; border-width: 0px;" title="image"
    alt="image" src="http://blog.hinshelwood.com/files/2013/04/image4.png"
    width="800" height="500" border="0" /><br /><strong>Figure: URL from Build
    Configuration page of TFS Administration Console</strong></p>

    <p>This will give me the fully qualified name of the server as it is
    configured in the Build Configuration of the TFS Administration Console on
    the Build Agent server.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    margin: 0px; display: inline; padding-right: 0px; border-width: 0px;"
    title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image5.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Get Machine name of the
    Agent workflow config</strong></p>

    <p>Again I am using the BuildAgent object and passing back the value as
    AgentMachineName to a veriable that I can use outside of the scope of the
    “Reserve on Agent” sequence.</p>

    <h2 class="icon-task">Run on Reserved Agent</h2>

    <p>Rather than creating something custom we really want to hook into what is
    already there. When you configured a build you were able to define some
    information on what agent to select and run on. In this configuration you
    were able to select things like Agent Name and Tags to filter by.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    margin: 0px; display: inline; padding-right: 0px; border-width: 0px;"
    title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image6.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Selecting the Agent
    Settings</strong></p>

    <p>Using Agent Name will not provide us any value as we do not want another
    build to snag this agent but instead to ignore it. To do that we need to set
    the “Tag Comparison Operator” to “MatchExactly” and make sure that only the
    agents we want have the desired tag set. In this case it is NONE. With no
    tags added this build should select any agent with no tags and ignore agents
    that have even one tag.</p>

    <p>So when we execute the first agent scope above our agent will be selected
    and we harvest the name and add a tag that is the same as the build number.
    Now all we need to do is update the Agent Settings above to include a tag
    that is the same as the build name and the second Agent Scope with only be
    able to choose our tagged Agent. And for that we need another custom
    Activity.</p>

    <pre class="brush: csharp; ruler: true; highlight: [15,19,
    23,31,32,33,34,35,36,37,38,39,40,41,42,43,44];">namespace
    MrHinsh.TfsBuildExtensions

    {
        using System;
        using System.Activities;
        using System.ComponentModel;
        using Microsoft.TeamFoundation.Build.Client;
        using Microsoft.TeamFoundation.Client;
        using Microsoft.TeamFoundation.Build.Workflow.Activities;

        [BuildActivity(HostEnvironmentOption.All)]
        public sealed class AgentSettingsTags : CodeActivity
        {
            [RequiredArgument]
            [Browsable(true)]
            public InArgument AgentSettings { get; set; }

            [RequiredArgument]
            [Browsable(true)]
            public InArgument Action { get; set; }

            [RequiredArgument]
            [Browsable(true)]
            public InArgument Tag { get; set; }

            protected override void Execute(CodeActivityContext context)
            {
                if (context == null)
                {
                    throw new ArgumentNullException("context");
                }
                AgentSettings agentSettings = context.GetValue(this.AgentSettings);
                TagActions action = context.GetValue(this.Action);
                String tag = context.GetValue(this.Tag);
                switch (action)
                {
                    case TagActions.Add:
                        agentSettings.Tags.Add(tag);
                        break;
                    case TagActions.Remove:
                        agentSettings.Tags.Remove(tag);
                        break;
                    default:
                        break;
                }
            }
        }
    }

    </pre>

    <p><strong>Figure: Add Tag to Agent Settings custom activity</strong></p>

    <p>All this code does is take the Agent Settings object and add a tag to
    make sure that we get the right agent the second time through the
    AgentScope.</p>

    <p><strong><img style="background-image: none; padding-top: 0px;
    padding-left: 0px; margin: 0px; display: inline; padding-right: 0px;
    border-width: 0px;" title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image7.png" width="800"
    height="480" border="0" /><br />Figure: Add Tag to Agent Settings
    Workflow</strong></p>

    <p>So we just pass the AgentSettings object and feed it the same build
    number that we used before as the tag. Now we can only get this agent to
    “Match Exactly” and thus the build should run on this agent.</p>

    <h2 class="icon-task">Reset the Reservation</h2>

    <p>And to reset the reservation all that needs done is to remove that tag
    from the agent. For this activity we just set the “Action” attribute to be
    “Remove” and we remove the tag of the build name and free up the Agent for
    other builds. It is worth noting that if a build is cancelled then you my
    need a separate clean-up routine that runs and un reserves machines that are
    reserved due to failed or stopped builds.</p>

    <h2 class="conclusion">Conclusion</h2>

    <p>This process while requiring the customisation of your build process can
    allow you to do a bunch of things with your build server that you may not
    want to enshrine in it. You may want to do the snapshot and revert not
    because your developers are breaking the build, but because you want to
    start with a clean build machine each time to test your install process as
    well.</p>

    <p><img style="background-image: none; padding-top: 0px; padding-left: 0px;
    margin: 0px; display: inline; padding-right: 0px; border: 0px;"
    title="image" alt="image"
    src="http://blog.hinshelwood.com/files/2013/04/image9.png" width="800"
    height="480" border="0" /><br /><strong>Figure: Successfully reserved agent
    and then used same agent</strong></p>

    <p>If we are trying to achieve “configuration as code” then we need to be
    installing all of our pre-requisites with our build script.</p>
  - >-
    <p class="lead">By the time you hit the AgentScope activity in a TF Build
    workflow you are already running on the agent and if you have things you
    need to configure you need to figure out some way to reserve an agent before
    you get there.</p>
  post_id: '9359'
  post_date: '2013-04-03 18:37:57'
  post_date_gmt: '2013-04-04 01:37:57'
  post_modified: '2013-04-03 18:37:57'
  post_modified_gmt: '2013-04-04 01:37:57'
  comment_status: open
  ping_status: open
  post_name: reserve-an-agent-for-a-special-build-in-team-foundation-server-2012
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '87'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"0";}
  - meta_key: _yoast_wpseo_focuskw
    meta_value: reserve an agent
  - meta_key: _yoast_wpseo_title
    meta_value: Reserve an Agent for a special build in Team Foundation Server 2012
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      By the time you hit the AgentScope activity in a TF Build workflow you are
      already running on the agent and if you have things you need to configure
      you need to figure out some way to reserve an agent before you get there.
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: wp-to-buffer-log
    meta_value: 'Error 400 whilst trying to authenticate: Bad Request. Please try again.'
  - meta_key: dsq_thread_id
    meta_value: '1185350234'
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:4:"9422";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1b3BzFO
  - meta_key: _thumbnail_id
    meta_value: '11141'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474818298;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:9336;}i:1;a:1:{s:2:"id";i:5496;}i:2;a:1:{s:2:"id";i:35;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2013-04-03-reserve-an-agent-for-a-special-build-in-team-foundation-server-2012.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '894'
  comment:
  - comment_id: '1625'
    comment_author: disqus_KolbBZPckk
    comment_author_email: richard.davis@osi.com
    comment_author_url: ''
    comment_author_IP: 8.19.44.116
    comment_date: '2013-04-04 13:46:00'
    comment_date_gmt: '2013-04-04 20:46:00'
    comment_content: >-
      How do you snapshot with VMware? Couldn't you just have told the customer
      to upgrade to Hyper-V and use network isolated lab management VMs?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '852240796'
  - comment_id: '1626'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 184.78.139.42
    comment_date: '2013-04-04 17:35:00'
    comment_date_gmt: '2013-04-05 00:35:00'
    comment_content: >-
      This is a compilation build on the build server that is breaking so Lab
      Management would not help. But you can easily write a powershell to
      snapshot the VMWare servers :) but yea, I said to upgrade to Hyper-V
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1625'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '852240796'
    - meta_key: dsq_post_id
      meta_value: '852464652'
  - comment_id: '1627'
    comment_author: Jim
    comment_author_email: thecolonel@kfc.com
    comment_author_url: ''
    comment_author_IP: 195.89.17.230
    comment_date: '2013-05-21 13:52:00'
    comment_date_gmt: '2013-05-21 12:52:00'
    comment_content: >-
      Really nice way to address this issue. Could be useful in providing
      snapshot clean build environments that are provisioned on the fly for
      users.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '903833776'
  - comment_id: '1628'
    comment_author: Reserve an Agent for a special build in Team Foundation Server 2012
    comment_author_email: ''
    comment_author_url: >-
      http://blog.nwcadence.com/reserve-an-agent-for-a-special-build-in-team-foundation-server-2012/
    comment_author_IP: 66.175.212.70
    comment_date: '2013-05-23 16:17:02'
    comment_date_gmt: '2013-05-23 15:17:02'
    comment_content: >-
      [...] Published at Where Technology Meets Teamwork with permission of
      Martin Hinshelwood, Senior ALM Consultant. (source) [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1369322222.5582;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1369324770.291389;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '10390'
    comment_author: Wayne
    comment_author_email: wayne639@yahoo.com
    comment_author_url: ''
    comment_author_IP: 206.169.203.164
    comment_date: '2015-01-22 23:56:00'
    comment_date_gmt: '2015-01-22 23:56:00'
    comment_content: >-
      Hi Martin. We (Mitchell) finally got around to implementing your
      AgentScope solution but I ran into a problem in which after getting the
      Agent computer name while inside the 1st AgentScope, I am not able to pass
      this Agent Computer name back to the controller to perform the destructive
      operation (Power the VM off, then on again). The variables and arguments
      from the build controller are serialized into the AgentScope but there
      seems to be no way to pass data back to the controller once AgentScope
      activity is completed. Can you think of a solution to this? Thx.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1812010741'
  - comment_id: '10404'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 193.212.101.70
    comment_date: '2015-01-23 10:07:00'
    comment_date_gmt: '2015-01-23 10:07:00'
    comment_content: >-
      Can you not just pull the Agent with the appropriate tag? Find the agent
      with a tag that is the same as the build and you have found your machine!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '10390'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1812010741'
    - meta_key: dsq_post_id
      meta_value: '1812623499'
  - comment_id: '10619'
    comment_author: Wayne
    comment_author_email: wayne639@yahoo.com
    comment_author_url: ''
    comment_author_IP: 206.169.203.164
    comment_date: '2015-02-02 18:36:00'
    comment_date_gmt: '2015-02-02 18:36:00'
    comment_content: >-
      Thanks Martin. I created another activity to search for the build agent
      (outside Agent Scope activity) with the custom tag.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '10404'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1812623499'
    - meta_key: dsq_post_id
      meta_value: '1830943479'
  - comment_id: '11696'
    comment_author: Wayne
    comment_author_email: wayne639@yahoo.com
    comment_author_url: ''
    comment_author_IP: 206.169.203.164
    comment_date: '2015-04-03 19:50:00'
    comment_date_gmt: '2015-04-03 18:50:00'
    comment_content: >-
      Hi Martin. We just realized a problem with this approach. Here's the
      scenario:

      1. Two different build definitions are queued at the same time which uses
      the same build agent

      2. One build reserves the build agent while inside the first Agent Scope
      "Reserve an Agent" and adds a new tag to the agent to make it unavailable
      to other builds

      3. Instead of the second build waiting to reserve the same agent, it fails
      with "build controller XYZ does not contain an enabled build agent with
      name * and tags exactly matching XYZ..."

      This is because the agent has a new tag which does not MatchExactly the
      second Build definition's tag comparison anymore but we don't want second
      build to fail... :( Any thoughts? Thx.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1944641780'
  - comment_id: '11746'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@nakedalm.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 82.12.112.139
    comment_date: '2015-04-13 17:56:00'
    comment_date_gmt: '2015-04-13 16:56:00'
    comment_content: >-
      @disqus_rfHs2TkcED:disqus, you will need to make sure that you have enough
      agents in the pool to not hit this issue. On each controller you can have
      multiple agents and even on each build machine. If you have one more agent
      available than you think that you will need then you should only rarely
      hit this...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '11696'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1944641780'
    - meta_key: dsq_post_id
      meta_value: '1965241459'
  - comment_id: '11748'
    comment_author: Wayne
    comment_author_email: wayne639@yahoo.com
    comment_author_url: ''
    comment_author_IP: 206.169.203.164
    comment_date: '2015-04-13 18:43:00'
    comment_date_gmt: '2015-04-13 17:43:00'
    comment_content: >-
      Hi Martin. I figured as much. Thanks for your suggestion. I guess this is
      a trade off limitation for implementing this feature.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '11746'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1965241459'
    - meta_key: dsq_post_id
      meta_value: '1965330912'
