post:
  title: The TFS Automation Platform is dead, long live the TfPlugable
  link: >-
    https://nkdagility.com/blog/the-tfs-automation-platform-is-dead-long-live-the-tfplugable/
  pubDate: Thu, 31 Jan 2013 20:52:16 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=9229
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">The TFS Automation Platform is dead, long live the
    TfPlugable! It has been a long time since I have talked about the <a
    href="http://blog.hinshelwood.com/what-is-the-tfs-automation-platform/"
    target="_blank">TFS Automation Platform</a> that I had almost forgotten
    about it myself. It was almost two years ago that I spoke to <a
    href="http://blogs.msdn.com/b/willy-peter_schaub/" target="_blank">Willy</a>
    about an ALM Rangers project to build a solution to dynamically deploy
    plug-ins for TFS, kind of like Nuget for TFS Extensions.</p> <p>When we
    first attempted to get this off the ground way back in 2011 we had a <a
    href="http://blogs.msdn.com/b/willy-peter_schaub/archive/2011/02/20/new-rangers-project-tfs-iteration-automation.aspx"
    target="_blank">team of rock star Rangers</a> that ended up having no
    bandwidth for yet another project and it faded and died after a few sprints.
    I was sad, but what can you do…</p> <h2>The Problem</h2> <p>However recently
    I have seen more and more customers wanting their TFS servers to have custom
    automation as part of their deployment. There are quite a few things that
    come out of the box but there are still many things that could be done. From
    Admin tasks to simple rollup or email alerts for your entire organisation
    there are a plethora of extensions for Team Foundation Server that would be
    useful but are currently hidden away in the back of your TFS cupboards and
    never see the light of day.</p> <p>I would like to do for Team Foundation
    Server what NuGet has done for distributing and popularising shared
    assemblies. We need a store for Team Foundation Server where we can pick and
    choose what extensions we want. Now this already exists for Visual Studio in
    the <a href="http://visualstudiogallery.msdn.microsoft.com/"
    target="_blank">Visual Studio Gallery</a> but there is nothing for Team
    Foundation Server. I can’t find Check-In Policies for TFS and it is hard to
    install them, although there is a little love from the Power Tools. I can’t
    find background operations for TFS… oh I can search for them and find them
    on blogs, Codeplex or GitHub… but I want the same thing that <a
    href="http://nuget.org/" target="_blank">NuGet</a> or <a
    href="http://chocolatey.org/" target="_blank">Chocolatey</a> provides.</p>
    <p>It is easy to create to create extensions for Team Foundation Server, but
    it is hard to deploy and manage them. Here are the key integration points
    that we will be looking at:</p> <ol> <li><strong>TF Job</strong> – These
    jobs can be schedules or one off and run within the context of the TFS
    Server Itself. They are a compiled DLL that has to be deployed to a
    particular folder on the TF Server in order to be loaded and registered with
    TFS.  </li><li><strong>TF Event Sink</strong> – Events are fired on the TF
    Server as a result of Work Item, Build, Source Code changes and implement
    the ISubscriber interface. Again they need to have the containing DLL
    dropped into the correct folder on the TF Server.  </li><li><strong>Custom
    Controls</strong> – Sometimes you want to extend the UI of&nbsp; work items
    capability to display data and this requires both server side and client
    side components to be deployed.  </li><li><strong>Check-in Policy</strong> –
    These policies are evaluated at check-in both on the Client and on a Build
    Server as part of a Gated Check-in. They need to be registered in the system
    register to be executed but have no special folder.  </li><li><strong>Soap
    Events</strong> – These are like TF Event Sinks but they are more
    disconnected from TFS. They do need to be registered with TFS, but it is a
    SOAP registration rather than integral to the server itself. With the
    introduction of TF Event Sinks there is little need for this, but if you
    want to have events from TFS 2008 or TFS 2010 then it may be a viable
    solution for backward compatibility. </li></ol> <p>With our Team Foundation
    Server more commonly being managed by infrastructure teams there is less
    access to those servers to install and update those extensions. In essence
    they are very rarely productionised. While it is a fantastic thing to have
    what amounts to better supported server we still need to be able to add
    these extensions.</p> <p>I want to be able to go to a webpage on my Team
    Foundation Server that allows me to search for and find extensions that can
    then be selected and installed.</p> <h2>The Plan</h2> <p>This sounds simple,
    but in-fact it can be fairly complex. We plan to create this delivery
    mechanism and create documentation on how to create packages to do all of
    these things… will we have everything from day-one? No way… we will be
    iteratively adding functionality&nbsp; we get feedback on what we have
    delivered and changing our roadmap to incorporate that feedback.</p> <ol>
    <li><strong>DONE - <span style="text-decoration: line-through">Create
    ability to publish and manage packages</span></strong>  <p>We decided to use
    myget as it provides a lot of services including permissions and a web UI
    that we do not need to build.</p> <p><a
    href="http://blog.hinshelwood.com/files/2013/01/image.png"><img
    title="image" style="border-left-width: 0px; border-right-width: 0px;
    border-bottom-width: 0px; margin: 5px 5px 0px; display: inline;
    border-top-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2013/01/image_thumb.png" width="800"
    height="379"/></a> <br /><strong>Figure: Using MyGet to provide hosted
    NuGet-as-a-service</strong></p> </li><li><strong>DONE - <span
    style="text-decoration: line-through">Create ability to search for and
    install packages</span></strong>  <p>We have already added some features to
    the application and it will already allow installs of packages and pass the
    information required for deployment to the packages.</p> <p><a
    href="http://blog.hinshelwood.com/files/2013/01/image1.png"><img
    title="image" style="border-left-width: 0px; border-right-width: 0px;
    border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0"
    alt="image" src="http://blog.hinshelwood.com/files/2013/01/image_thumb1.png"
    width="800" height="379"/></a> <br /><strong>Figure: Search for Team
    Foundation Server extensions</strong></p> </li><li><strong>Create ability to
    customise configuration</strong>  </li><li><strong>Create ability to create
    custom configurations</strong> </li></ol> <p>We plan on having the first
    release soon with #1 &amp; #2 above and include everything that you can
    install server side. As Extension creators and Extension users express a
    need for additional features we will prioritise them and include those
    requests over time. This will be a single install for your TFS server that
    makes all of the available extensions just a click away.</p> <h2>The
    Team</h2> <p>I have a couple of folks helping me on this little project and
    we are always looking for others that can help add value.</p> <ul>
    <li><strong><img style="display: inline" alt=""
    src="http://blog.nwcadence.com/wp-content/uploads/2012/10/tuppers50-headshot-150x150.jpg"
    width="128" height="128"/>&nbsp; <br />James Tupper</strong>, ALM Consultant
    &amp; ALM Champ  </li><li><strong><img alt=""
    src="http://blog.nwcadence.com/wp-content/uploads/2012/09/mug-shot-andrew-clear.png"/><br
    />Andrew Clear</strong>, ALM Developer </li></ul> <p>I am open for others to
    join and you would only need to contribute around 2 hours a week to
    participate.</p>
  - >-
    <p class="lead">The TFS Automation Platform is dead, long live the
    TfPlugable! It has been a long time since I have talked about the <a
    href="http://blog.hinshelwood.com/what-is-the-tfs-automation-platform/"
    target="_blank">TFS Automation Platform</a> that I had almost forgotten
    about it myself. It was almost two years ago that I spoke to <a
    href="http://blogs.msdn.com/b/willy-peter_schaub/" target="_blank">Willy</a>
    about an ALM Rangers project to build a solution to dynamically deploy
    plug-ins for TFS, kind of like Nuget for TFS Extensions.</p>
  post_id: '9229'
  post_date: '2013-01-31 12:52:16'
  post_date_gmt: '2013-01-31 20:52:16'
  post_modified: '2013-01-31 12:52:16'
  post_modified_gmt: '2013-01-31 20:52:16'
  comment_status: open
  ping_status: open
  post_name: the-tfs-automation-platform-is-dead-long-live-the-tfplugable
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '79'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: _thumbnail_id
    meta_value: '5063'
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: wp-to-buffer-log
    meta_value: 'Error 400 whilst trying to authenticate: Bad Request. Please try again.'
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: _yoast_wpseo_focuskw
    meta_value: TfPlugable
  - meta_key: _yoast_wpseo_title
    meta_value: The TFS Automation Platform is dead, long live the TfPlugable
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      Do you want to deploy extensions from a trusted source to Team Foundation
      Server? TfPlugable is for you...
  - meta_key: dsq_thread_id
    meta_value: '1057735402'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/174Vdyx
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1473481923;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3373;}i:1;a:1:{s:2:"id";i:3383;}i:2;a:1:{s:2:"id";i:3361;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2013-01-31-the-tfs-automation-platform-is-dead-long-live-the-tfplugable.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '725'
  comment:
  - comment_id: '1549'
    comment_author: Betty
    comment_author_email: smckoy@gmail.com
    comment_author_url: ''
    comment_author_IP: 203.97.146.211
    comment_date: '2013-01-31 14:32:00'
    comment_date_gmt: '2013-01-31 22:32:00'
    comment_content: >-
      I still like the idea, but don't think you're going about it quite right.


      Personally I think it makes more sense to make a couple of install helpers
      for chocolatey instead (see your chocolateyInstallhelpersfunctions
      directory), then create chocolatey packages which depend on the helpers to
      do the install. MyGet supports chocolatey last I checked so you could
      still use it as the package backend, although it may just be worth
      sticking them in the main chocolatey repo.


      Then the web interface should also be an extension to chocolatey which
      allows remote package installation, seems like a far more useful/reusable
      project.  If you add an api to it then you could also have it on developer
      boxes as well as the TFS server. Imagine installing any chocolatey package
      (eg checkin policies) by using a simple POST request to any machine that
      needs it.


      More powershell cmdlets for TFS commands could be really useful, the tfs
      powertools started this but are missing a lot.  Although this sounds like
      a totally separate project again (which could be installed via chocolatey)
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '785056891'
  - comment_id: '1550'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 131.107.147.236
    comment_date: '2013-01-31 14:45:00'
    comment_date_gmt: '2013-01-31 22:45:00'
    comment_content: >-
      I am extending the NuGet.Core as I want to deliberately have a specific
      package form. This is slightly different from NuGet as we have to support
      multiple versions of Team Foundation Server rather than multiple
      frameworks...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1549'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785056891'
    - meta_key: dsq_post_id
      meta_value: '785068495'
  - comment_id: '1551'
    comment_author: Xavier Decoster
    comment_author_email: xavier.decoster@gmail.com
    comment_author_url: http://www.xavierdecoster.com/
    comment_author_IP: 84.198.137.5
    comment_date: '2013-01-31 15:27:00'
    comment_date_gmt: '2013-01-31 23:27:00'
    comment_content: >-
      Wow! Great to see you're leveraging NuGet as a protocol for distributing
      TFS plug-ins. Even more awesome you're using MyGet for that! 


      MyGet indeed supports Chocolatey out-of-the-box. Basically, you could use
      the MyGet interface on top of Chocolatey, as you can create any feed and
      hook up some package sources underneath, such as Chocolatey.org which is a
      preset. We have a blog post on how to do that:
      http://blog.myget.org/post/2012/03/01/MyGet-tops-Vanilla-NuGet-feeds-with-a-Chocolatey-flavor.aspx 


      Don't hesitate to reach out to us if you need assistance or want to share
      your valuable feedback.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '785106227'
  - comment_id: '1552'
    comment_author: Betty
    comment_author_email: smckoy@gmail.com
    comment_author_url: ''
    comment_author_IP: 203.97.146.211
    comment_date: '2013-01-31 16:21:00'
    comment_date_gmt: '2013-02-01 00:21:00'
    comment_content: >-
      You could handle that in a similar way to the way Chocotely does 32 vs
      64bit. Although I guess that wouldn't give you server side filtering which
      I'm guessing you want.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1550'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785068495'
    - meta_key: dsq_post_id
      meta_value: '785154551'
  - comment_id: '1553'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 131.107.174.236
    comment_date: '2013-01-31 16:42:00'
    comment_date_gmt: '2013-02-01 00:42:00'
    comment_content: >-
      Most of what I am installing does not have an installer. No MSI, only a
      collection of files that need to be dropped into folders under the Team
      Foundation Server install location...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1552'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785154551'
    - meta_key: dsq_post_id
      meta_value: '785175204'
  - comment_id: '1554'
    comment_author: Betty
    comment_author_email: smckoy@gmail.com
    comment_author_url: ''
    comment_author_IP: 203.97.146.211
    comment_date: '2013-01-31 16:55:00'
    comment_date_gmt: '2013-02-01 00:55:00'
    comment_content: >-
      Which is why I suggested writing a Chocolatey helper function, just a
      powershell script that can copy files anywhere you want.  But can have the
      smarts in it to check install directorys and required components.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1553'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785175204'
    - meta_key: dsq_post_id
      meta_value: '785189302'
  - comment_id: '1555'
    comment_author: Betty
    comment_author_email: smckoy@gmail.com
    comment_author_url: ''
    comment_author_IP: 203.97.146.211
    comment_date: '2013-01-31 17:02:00'
    comment_date_gmt: '2013-02-01 01:02:00'
    comment_content: >-
      Other benefits? Packages could have dependencies, eg auto install TFS
      power tools, a windows service, or setup some TFS features via powershell
      scripts.  Chocolately already has a number of TFS related packages
      (although not plugins like you're planning) -
      http://chocolatey.org/packages?q=tfs
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1550'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785068495'
    - meta_key: dsq_post_id
      meta_value: '785196950'
  - comment_id: '1556'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 131.107.174.236
    comment_date: '2013-01-31 17:07:00'
    comment_date_gmt: '2013-02-01 01:07:00'
    comment_content: >-
      Do you have documentation on how to do that? I only have little knowledge
      of PowerShell and the API's for NuGet were a lot more accessible.. I did
      look at Chocolatey but I could not find any entrypoints or
      documentation...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1554'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785189302'
    - meta_key: dsq_post_id
      meta_value: '785202160'
  - comment_id: '1557'
    comment_author: Betty
    comment_author_email: smckoy@gmail.com
    comment_author_url: ''
    comment_author_IP: 203.97.146.211
    comment_date: '2013-01-31 17:52:00'
    comment_date_gmt: '2013-02-01 01:52:00'
    comment_content: >-
      Sadly I haven't found much documentation, it's normally a mix of copying
      other packages + asking Rob for help.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1556'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785202160'
    - meta_key: dsq_post_id
      meta_value: '785247334'
  - comment_id: '1558'
    comment_author: ferventcoder
    comment_author_email: ferventcoder@gmail.com
    comment_author_url: ''
    comment_author_IP: 68.102.148.32
    comment_date: '2013-01-31 19:12:00'
    comment_date_gmt: '2013-02-01 03:12:00'
    comment_content: >-
      Hey folks, Rob here. Is using the github wiki really that bad? If so we
      can start migrating the documentation to the website. Let me know.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1557'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785247334'
    - meta_key: dsq_post_id
      meta_value: '785333886'
  - comment_id: '1559'
    comment_author: Betty
    comment_author_email: smckoy@gmail.com
    comment_author_url: ''
    comment_author_IP: 203.97.146.211
    comment_date: '2013-01-31 19:55:00'
    comment_date_gmt: '2013-02-01 03:55:00'
    comment_content: >-
      The docs aren't too bad imo, they just don't cover advanced topics like
      creating and installing helpers for other packages (unless I just can't
      find it?).  @Rob Was hoping you could give some thoughts on chocolatey
      targeting different versions of already installed software (in this case
      tfs 2008/2010/2012) and reactiing accordingly
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1558'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785333886'
    - meta_key: dsq_post_id
      meta_value: '785379123'
  - comment_id: '1560'
    comment_author: ferventcoder
    comment_author_email: ferventcoder@gmail.com
    comment_author_url: ''
    comment_author_IP: 68.102.148.32
    comment_date: '2013-02-01 06:26:00'
    comment_date_gmt: '2013-02-01 14:26:00'
    comment_content: >-
      PowerShell can definitely target different version of already installed
      software (registry lookups in most cases). Since choco is just a nice
      wrapper for running powershell, you can do pretty much anything ;)
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1559'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '785379123'
    - meta_key: dsq_post_id
      meta_value: '785785164'
  - comment_id: '1561'
    comment_author: Visual Studio ALM Links&ndash;Week 5 2013
    comment_author_email: ''
    comment_author_url: >-
      http://www.codewrecks.com/blog/index.php/2013/02/02/visual-studio-alm-linksweek-5-2013/
    comment_author_IP: 137.116.195.11
    comment_date: '2013-02-02 09:21:07'
    comment_date_gmt: '2013-02-02 17:21:07'
    comment_content: '[...] The TFS Automation Platform is dead, long live the TfPlugable [...]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1360134334.540719;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1562'
    comment_author: Daniel Schroeder
    comment_author_email: deadlydog@hotmail.com
    comment_author_url: ''
    comment_author_IP: 24.72.129.5
    comment_date: '2013-02-04 09:48:00'
    comment_date_gmt: '2013-02-04 17:48:00'
    comment_content: >-
      This sounds great!  Adding these types of TFS extensions has always been a
      pain.  Like you said, even little things like the checkin policies.  Why
      does it have to be so hard!  I'm really looking forward to this project
      and it streamlining the process of installing TFS extensions........and
      being able to find extensions in a common store :)  Great news; I can'
      wait!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '788382043'
  - comment_id: '1563'
    comment_author: John Ludlow
    comment_author_email: john.ludlow.uk@gmail.com
    comment_author_url: http://profiles.google.com/john.ludlow.uk
    comment_author_IP: 199.85.125.10
    comment_date: '2013-02-22 07:30:00'
    comment_date_gmt: '2013-02-22 15:30:00'
    comment_content: >-
      I definitely need the SOAP events. We have some extensions which use the
      dll extension mechanism, but there's no way of debugging or configuring
      them without getting onto the TFS box, and because of new corporate
      guidelines, only IT are allowed on the TFS box.


      Edit: is this available to play with? I'd like to see how the SOAP event
      sink works
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '808501490'
  - comment_id: '1564'
    comment_author: Kevin Treadwell
    comment_author_email: Kevin.Treadwell@anpac.com
    comment_author_url: ''
    comment_author_IP: 24.252.78.87
    comment_date: '2013-03-11 08:47:00'
    comment_date_gmt: '2013-03-11 15:47:00'
    comment_content: Any update? Any downloadable bits?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '825698065'
  - comment_id: '1565'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 206.169.203.164
    comment_date: '2013-03-11 17:45:00'
    comment_date_gmt: '2013-03-12 00:45:00'
    comment_content: >-
      Soon... I am working on getting a first beta really soon... its a spare
      time project so...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1564'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '825698065'
    - meta_key: dsq_post_id
      meta_value: '826216209'
  - comment_id: '1566'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 66.71.229.5
    comment_date: '2013-03-24 15:12:00'
    comment_date_gmt: '2013-03-24 22:12:00'
    comment_content: >-
      So I am planning to release this to Chocolatey real soon. I have a few
      bugs to work out and some automation issues but what I have so far works.
      It then becomes about the packages :)
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1564'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '825698065'
    - meta_key: dsq_post_id
      meta_value: '841087470'
