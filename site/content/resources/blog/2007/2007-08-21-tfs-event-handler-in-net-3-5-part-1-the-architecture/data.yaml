post:
  title: TFS Event Handler in .NET 3.5 Part 1 - The Architecture
  link: >-
    https://nkdagility.com/blog/tfs-event-handler-in-net-3-5-part-1-the-architecture/
  pubDate: Tue, 21 Aug 2007 21:10:00 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://blog.hinshelwood.com/tfs-event-handler-in-net-3-5-part-1-the-architecture/
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p>I have decided to have a little go at creating a Team Foundation Server
    Event Handler in .NET 3.5 that is resilient and scaleable. I will be using
    as many of the features of Team Suit as I can, but bear with me as there are
    a few things that are new to me. I am going to create everything under
    source control in CodePlex. </p>  <p><strong>TFS Event Handler in .NET 3.5
    Articles</strong></p>  <ol>   <li><a
    href="http://blog.hinshelwood.com/archive/2007/08/21/TFS-Event-Handler-in-NET-3-5-Part-1-The-Architecture.aspx"
    rel="tag" target="_blank">TFS Event Handler in .NET 3.5 Part 1 - The
    Architecture</a> </li>    <li><a
    href="http://blog.hinshelwood.com/archive/2007/09/07/TFS-Event-Handler-in-NET-3-5-Part-2-Handling-Team-Foundation-Server-Events.aspx"
    rel="tag" target="_blank">TFS Event Handler in .NET 3.5 Part 2 - Handling
    Team Foundation Server Events</a> </li>    <li>TFS Event Handler in .NET 3.5
    Part 3 - Passing the events over a Windows Communication Foundation MSMQ
    (Coming soon) </li>    <li>TFS Event Handler in .NET 3.5 Part 4 - Workflow
    (Coming soon)&#160; </li> </ol>  <h1>The Architecture</h1>  <p>The first toy
    I am going to play with is the Team Edition for Architecture components of
    Team Suit. This will hopefully allow me to create a system that has a bit of
    foresight and planning associated with it. I have played with these features
    before, but I have not, up until now, used them in battle.</p>  <p>I have
    created a blank solution in my TFS Event Handler Codeplex project, so it is
    time to create the &quot;Distributed System Diagram&quot; that I will use to
    define the architecture of the system.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb.png"
    width="240" height="132" /></a> When you create the diagrams they are added
    to the Solution and not a specific project. These diagrams will be linked to
    the code that we will eventually create allowing us to view these diagrams
    even if we have made changes. They will update automatically with any&#160;
    architectural changes that I have made after coding had started.</p> 
    <p>&#160;</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_1.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_1.png"
    width="240" height="140" /></a></p>  <p>The logical place to start is with
    the Application Diagram, and this is highlighted by default. The other
    diagrams are usefully as well. The Logical Datacenter diagram will allow you
    to assign parts of the application to different servers and control the
    communication between these servers. The System Diagram is used to define
    logical systems that communicate with each other.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_2.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_2.png"
    width="124" height="240" /></a></p>  <p>You get a number of diagrammatic
    options in the toolbox. The Applications section list all of the types of
    applications that are going to be in your solution and represents the
    projects that are going to be created under your solution. If you add a
    Windows Application for example, you will get a windows application project
    within your Visual Studio solution. It is worth noting that there is no need
    to think about &quot;individual projects like what assemblies am I going to
    need&quot;, or &quot;how will I arrange my namespaces&quot; at this point.
    All we are interested is the main building blocks of the application.</p> 
    <div style="clear: both">&#160;</div>  <h2>Application Diagram</h2>  <p> The
    first application that I know that I am going to need are Web Service
    applications to handle the incoming events from Team Foundation Server and a
    web service that will allow us to configure any options for this part of the
    system and the subscriptions to team servers.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_3.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_3.png"
    width="240" height="80" /></a></p>  <p>Now that I have added a web service
    you can see that it is just a different type of Web Application. This will
    need some configuring to be what we want. I have chosen to only handle two
    of the events that TFS throws, WorkItemChangedEvent and CheckInEvent. There
    are many other events that could be handled, but these two are probably the
    most common.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_4.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_4.png"
    width="240" height="67" /></a> <a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_5.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_5.png"
    width="240" height="68" /></a></p>  <p>The completed service looks quite
    simple, but we now need to configure it to allow it to work effectively. If
    you leave everything as defaults you end up having a hundred things to
    change later, so it is way better to get it out of the way and polish it at
    this stage.&#160; There are different setting available for each application
    and endpoint type, so the best thing to do is to look though all of the
    options and se what is what. You can see from the image right that I have
    configures all of the options on the service end [point and I repeated this
    on all of the endpoints. Many of these setting are used when we generate the
    code at the end of this process.</p>  <p>The second application is the
    decision service. It has a MSMQ service endpoint called EventReciever that
    the notification service passes all of the events that it has received to.
    This service will then execute all of the events against the Workflow
    service that will perform any activities associated with the event. The
    reason for the EventReciever service is to make the system more robust.
    Because the EventReciever is a MSMQ service the Notification Service can
    still send messages to it even when it is down.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_6.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_6.png"
    width="240" height="192" /></a></p>  <p>The final end point to add is a web
    based administration system for the workflow system. I have added all of the
    links between the applications that define the communication between the
    services. The ability to create these diagrams is not limited to being done
    at the start of the process, you can add this diagram to any solution and it
    will have all of your applications and links defined already. This is
    because there is a direct link between the solution and the diagrams. You
    can change either and affect both with the change, and this does not just
    apply to these architecture diagrams but to the Class diagrams that are part
    of Team Edition for Development.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_8.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_8.png"
    width="238" height="202" /></a></p>  <p> With the application diagram done,
    I can now do an number of things. One of which is to &quot;implement All
    Application&quot; which will build my main projects for me.</p> 
    <p>&#160;</p>  <p>What I am going to do first is take you though the
    &quot;Define Deployment&quot; and &quot;Design Application System&quot;
    options to get a better understanding of the capabilities of the system.
    Before I can do this, I will need to create a Logical Datacenter diagram to
    define what infrastructure is available, namely a single server that may or
    may not be the same server that Team Foundation Server is installed on.</p> 
    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_9.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_9.png"
    width="631" height="401" /></a></p>  <p>In creating the Logical Datacenter I
    realized that I had made a mistake in my diagram of the system and I had not
    allowed for the additional web interfaces for the application. I have
    updated the diagram to reflect the problems I encountered. The diagram now
    has a separate web administration application that talks to both of the main
    admin services to get information and to make changes to the way that the
    system operates.</p>  <p>It has two web end points, one for administering
    the workflow in the event handler and the other for administering the
    subscriptions for the notification service.</p>  <p>This is one of the best
    advertisements for this way of working as you spot more of the mistakes at
    this point and not half way through coding.</p>  <div style="clear:
    both">&#160;</div>  <h2>Logical Datacenter Diagram</h2>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_10.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_10.png"
    width="112" height="240" /></a></p>  <p>The logical datacenter diagram is
    very simple for this application as I want it to run initially in a single
    server environment. At the moment I have no need for a database, but it can
    easily be added to the system at a later date, I could even separate out the
    services from the website without having to change much of anything as far
    as the developers are concerned, it just impacts the architects.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_11.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_11.png"
    width="240" height="163" /></a></p>  <p>The options that you get are mainly
    self explanatory, you can add &quot;Zones&quot; which are your firewall
    areas and put your servers with these areas. You can then add endpoints and
    their links through the firewalls to show how communication occurs. You can
    add all of your firewall rules into the system so it more readily replicated
    your network.</p>  <p>For this application I only have one zone and one line
    of communication as all other communication takes place on the server.</p> 
    <p>You could have a much more complicated infrastructure, but for this
    application it is unnecessary.</p>  <div style="clear: both">&#160;</div> 
    <h2>Deployment Diagram</h2>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_13.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_13.png"
    width="240" height="165" /></a>&#160; <a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_19.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_19.png"
    width="239" height="90" /></a></p>  <p>The deployment diagram allows you to
    place all of you applications onto the diagram so you can define the&#160;
    communication lines and determine wither the applications can talk to each
    other in the desired way.</p>  <p>In this case we only have one Zone and one
    server with HTTP inbound for the web sites. You can see from the diagram
    that I have added all of the applications to the one server.</p>  <div
    style="clear: both">&#160;</div>  <h2> System Diagram</h2>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_14.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_14.png"
    width="240" height="145" /></a> <a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_18.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_18.png"
    width="198" height="131" /></a></p>  <p>If you have a complicated system
    with more than a few applications you will want to brake up the diagram into
    manageable Systems that you can see the input and output of the system. You
    could say that there is a Core system that contains the web services and
    that only two of the web services are accessible outside of the system. If
    you add the applications to a System diagram and right click on a web
    services you get the option to create a &quot;Proxy endpoint&quot; that
    sites at the edge of the system but is linked to the main service.</p>  <p>
    I can now create a From End System diagram that has the website and only a
    definition of the Core system without any of the internal components.</p> 
    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_15.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_15.png"
    width="240" height="138" /></a></p>  <p> You can see the result in the
    diagram to the left. In much larger system it allow your to view the
    components and the interaction of the components from a variety of differing
    angles to see how the whole thing interacts.</p>  <div style="clear:
    both">&#160;</div>  <h2>Implementation</h2>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_20.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_20.png"
    width="199" height="172" /></a></p>  <p>The last part of this is to initiate
    the implementation of all the application that I have created. This will
    create the projects under a solution that can then be used to build the
    final application.</p>  <p><a
    href="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_21.png"><img
    style="border-right-width: 0px; border-top-width: 0px; border-bottom-width:
    0px; border-left-width: 0px" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/GWB-WindowsLiveWriter-TFSEventHandlerin.5Part1TheArchitecture_8892-image_thumb_21.png"
    width="80" height="240" /></a></p>  <p>As you an see, without doing any code
    or creating any projects within VS manually I have a full solution. That is
    my job as the architect over, unless there are any changes from development.
    This would not be handed over to the developers for completion. </p> 
    <p><font color="#ff0000">NOTE: I have found that using this method you can
    only create ASMX services, and not WCF. This will hopfully (PLEASE) be
    sorted for RTM of Visual Studio 2008.</font></p>  <div style="clear:
    both">&#160;</div>  <p>   <br />&#160;</p>  <div style="padding-bottom: 0px;
    margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float:
    none; padding-top: 0px"
    id="0767317B-992E-4b12-91E0-4F059A8CECA8:3305fe2e-dad0-4ece-8617-103d746e0a2b"
    class="wlWriterSmartContent">Technorati Tags: <a
    href="http://technorati.com/tags/Visual%20Studio%20Team%20System"
    rel="tag">Visual Studio Team System</a>, <a
    href="http://technorati.com/tags/Visual%20Studio%202008" rel="tag">Visual
    Studio 2008</a>, <a
    href="http://technorati.com/tags/Team%20Edition%20for%20Architects"
    rel="tag">Team Edition for Architects</a>, <a
    href="http://technorati.com/tags/TFSEventHandler"
    rel="tag">TFSEventHandler</a>, <a
    href="http://technorati.com/tags/Microsoft%20.NET%20Framework"
    rel="tag">Microsoft .NET Framework</a>, <a
    href="http://technorati.com/tags/Software%20Industrial%20Revolution"
    rel="tag">Software Industrial Revolution</a></div>
  - ''
  post_id: '3487'
  post_date: '2007-08-21 07:10:00'
  post_date_gmt: '2007-08-21 21:10:00'
  post_modified: '2007-08-21 07:10:00'
  post_modified_gmt: '2007-08-21 21:10:00'
  comment_status: open
  ping_status: open
  post_name: tfs-event-handler-in-net-3-5-part-1-the-architecture
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '323118497'
  - meta_key: _thumbnail_id
    meta_value: '5063'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBH9mr
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1466358184;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:316;}i:1;a:1:{s:2:"id";i:325;}i:2;a:1:{s:2:"id";i:3469;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2007-08-21-tfs-event-handler-in-net-3-5-part-1-the-architecture.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1
  - meta_key: ekit_post_views_count
    meta_value: '275'
