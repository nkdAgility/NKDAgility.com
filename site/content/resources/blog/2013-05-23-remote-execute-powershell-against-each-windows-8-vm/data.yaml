post:
  title: Remote Execute PowerShell against each Windows 8 VM
  link: >-
    https://nkdagility.com/blog/remote-execute-powershell-against-each-windows-8-vm/
  pubDate: Thu, 23 May 2013 08:47:41 +0000
  creator: MrHinsh
  guid:
    _: http://nakedalmweb.wpengine.com/?p=9534
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">Running a remote execute PowerShell against each Windows 8
    VM on your Hyper-V host can help you&nbsp;maintain&nbsp;the guest VM's in a
    minimal amount of time.</p>

    <p>With all of the work going on at the office around PowerShell I wanted to
    have a go and solve another problem I have.&nbsp;I kept running into an
    issue when using Hyper-V on my local computer. Every so often, to keep them
    relent, I need to boot each of the virtual machines and run windows updates.
    My first thought was to create a PowerShell that would update the them
    automatically, by then I thought… why can’t I push the script out to each of
    them.</p>

    <ul>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Remote Execute PowerShell against
    each VM</span></li>

    <li><span class="label label-success">DONE</span> <span
    style="text-decoration: line-through;">Execute PowerShell against
    VM</span></li>

    </ul>

    <p>This will require two distinct Scripts.</p>

    <h2>Remote Execute against each VM</h2>

    <p>I am using Windows 8 with Hyper-V so all of the virtual machines are
    local. So the first step is to get a list of the VM’s and loop though
    them.</p>

    <pre class="lang:ps decode:true" title="Get a list of all of your VM's">$VMs
    = Get-VM

    foreach ($vm in $VMs)

    {
        Write-Host  " $($vm.Name)" -ForegroundColor Yellow
    }

    </pre>

    <p><small><span class="label label-info">Note</span> Watch out as Get-VM
    does not error out when you are not running under elevated privileges it
    just returns no machines. Now that vexed me for a while.</small></p>

    <p>You can combat this by doing a check for elevated privileges and starting
    a new elevated process if your are not currently running in elevated
    mode.</p>

    <pre class="lang:ps decode:true" title="Elevate permissions if required">If
    (-NOT
    ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]
    "Administrator"))

    {   
        $arguments = "&amp; '" + $myinvocation.mycommand.definition + "'"
        Start-Process powershell -Verb runAs -ArgumentList $arguments
        Break
    }

    </pre>

    <p>We will see how this works out remotely, but that's for later.</p>

    <p>So for each VM we can now execute something. However, what I want to do
    is run the script on my host (My main computer) and have it execute a
    portion of that script on the VM. For this I choose to have a separate ps1
    file that did all of the local actions. There are really two ways to do
    this, first with a “[remote region]” that executes anything within that code
    block on the remote VM and second with a “Invoke-Command -ComputerName
    [computerName]”. The former sounds like it will complicate my scripts,
    making them too long, so I went with the latter. “Invoke-Command” has an
    option to pass another ps1 that does the actual execution which in turn
    allows me test that script separately.</p>

    <p>So what do I end up with?</p>

    <pre class="lang:ps decode:true" title="Execute remote Script">Try{
        Invoke-Command -ComputerName $compName -ScriptBlock {Set-ExecutionPolicy Unrestricted} -Credential $Cred
        Invoke-Command -ComputerName $compName -FilePath $RemoteScript -Credential $Cred
    }


    catch {
        "any other undefined errors"
        $error[0]
    }

    </pre>

    <p>You will note that I have set the execution policy to ‘unrestricted’
    prior to executing the code. As I am not signing the PowerShell scripts I
    need to do that in order to get them to run. Although all of the guest VM’s
    are within a domain my local computer, the one running the master script, is
    not. This does pose a number of interesting issues that means that you need
    to pass a ‘-Credential’ object into the invoke method.</p>

    <pre class="lang:ps decode:true" title="Creating a domain credential object
    from a workgroup">$Username = 'nakedalmmrhinsh'

    $Password = 'P2ssw0rd'

    $pass = ConvertTo-SecureString -AsPlainText $Password -Force

    $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList
    $Username,$pass

    </pre>

    <p>This object will then allow the ‘Invoke-Command’ to authenticate
    correctly with the remote server. However the first time that you run this
    script you might get an error because the local computer is not trusted. If
    it was joined to the domain this would not be an issue but as it is in a
    workgroup the domain joined VM will reject you.</p>

    <pre class="lang:ps decode:true" title="Set all hosts as trusted">Set-Item
    wsman:localhostclienttrustedhosts *

    </pre>

    <p>Just run the above on the VM to prep it or you can explicitly trust the
    host name. As these are all demo and not production VM’s I am not
    particularly worried about locking them down.</p>

    <p>Now we can loop through the VM’s and execute a remote script against
    them. This then sounds like we are nearly done, however what happens when
    the VM’s are off or saved or paused. Well… nothing as you can’t execute a
    script against a machine that is not running. I needed to find a way to
    start the machines and luckily hyper-v can be totally managed by PowerShell
    and thus there is a command for that. The current state of the machine is
    stored in “$vm.State” which has a number of vaues that we need to do
    different things for.</p>

    <pre class="lang:ps decode:true" title="Case Statement for VM State">switch
    ($vm.State) 

    {
         default {
              Write-Host  " Don't need to do anything with $($compName) as it is $($vm.State) "
         }
         "Paused"
         {
              Write-Host  "$($vm.Name) is paused so making it go "
              Resume-VM –Name *$compName* -Confirm:$false
         }
         "Saved"
         {
              Write-Host  "$($vm.Name) is paused so making it go "
              Start-VM –Name *$compName* -Confirm:$false
          }
         "Off"
         {
              Write-Host  "$($vm.Name) is stopped so making it go "
              Start-VM –Name *$compName* -Confirm:$false
         }
    }

    </pre>

    <p>Here I use a case statement to choose what to do with each VM based on
    its current state. Therefore if it is ‘paused’ I need to ‘resume’ it to the
    running state. In addition I also store the current state in a variable so
    that I can reset each VM to its original state after I have run the script.
    This would allow me to boot each VM in turn rather than all at one and thus
    not overload my local computer.</p>

    <p>So there is one last thing to do. When you change the state of&nbsp; VM
    using “Start-VM” it can take some time to load. You could guess and insert a
    delay but what if the VM takes a long time to do a group policy update or
    maybe a windows update needs to finish.</p>

    <pre class="lang:ps decode:true" title="Wait for VM to be ready">do {
         Start-Sleep -milliseconds 100
         Write-Progress -activity "Waiting for VM to become responsive" -SecondsRemaining -1
    } 

    until ((Get-VMIntegrationService $vm | ?{$_.name -eq
    "Heartbeat"}).PrimaryStatusDescription -eq "OK")

    Write-Progress -activity "Waiting for VM to become responsive"
    -SecondsRemaining -1 -Completed

    </pre>

    <p>So I monitor the ‘heartbeat’ of the VM to determine when it becomes
    available. This will return “OK” once the VM has booted far enough to start
    responding to Hyper-V. This should mean that the VM will now be responsive
    to commands. As this can take some time I also want some sort of progress
    bar to be visible to let anyone monitoring the script know that we are
    waiting. There is a built in ‘Write-Progress’ command that lets us do this
    and it renders in the appropriate form for the medium that the script is
    executing in.</p>

    <pre class="lang:ps decode:true" title="Remote Execute PowerShell against
    each VM Script">$Username = 'nakedalmmrhinsh'

    $Password = 'P2ssw0rd'

    $nameRegex = "[d*][(?.*)](?.*)[(?.*)]"

    $RemoteScript = D:DataUsersMrHinshDesktopcmdService-VM.ps1

    #------------------------------------------------------------------------

    If (-NOT
    ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]
    "Administrator"))

    {   
        $arguments = "&amp;amp; '" + $myinvocation.mycommand.definition + "'"
        Start-Process powershell -Verb runAs -ArgumentList $arguments
        Break
    }

    #------------------------------------------------------------------------

    $pass = ConvertTo-SecureString -AsPlainText $Password -Force

    $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList
    $Username,$pass

    $confirm = $false

    $VMs = Get-VM

    Write-Output "Found $($VMs.Count) virtual computers"

    foreach ($vm in $VMs)

    {
        Write-Host  "Execute for $($vm.Name)" -ForegroundColor Yellow
        $matches = [Regex]::Matches($vm.Name,$nameRegex)
        if ($matches.count -gt 0)
        {
            $compName = $matches[0].groups["name"].value.Trim()
       
            $startState = $vm.State
            switch ($vm.State) 
            {
                default {
       
                   Write-Host  " Don't need to do anything with $($compName) as it is $($vm.State) "
                }
                "Paused"
                {
                    Write-Host  "$($vm.Name) is paused so making it go "
                    Resume-VM –Name *$compName* -Confirm:$false
                }
                "Saved"
                {
                    Write-Host  "$($vm.Name) is paused so making it go "
                    Start-VM –Name *$compName* -Confirm:$false
                }
                "Off"
                {
                     Write-Host  "$($vm.Name) is stopped so making it go "
                     Start-VM –Name *$compName* -Confirm:$false
                }
            }

            Write-Host  " Waiting for '$($compName)' to respond "
            do {
                    Start-Sleep -milliseconds 100
                    Write-Progress -activity "Waiting for VM to become responsive" -SecondsRemaining -1
                } 
            until ((Get-VMIntegrationService $vm | ?{$_.name -eq "Heartbeat"}).PrimaryStatusDescription -eq "OK")
            Write-Progress -activity "Waiting for VM to become responsive" -SecondsRemaining -1 -Completed


            Write-Host  " Remote execution for '$($compName)' :) "

            Try{
                Invoke-Command -ComputerName $compName -ScriptBlock {Set-ExecutionPolicy Unrestricted} -Credential $Cred
                Invoke-Command -ComputerName $compName -FilePath $RemoteScript -Credential $Cred
            }

            catch {
                "any other undefined errors"
                $error[0]
            }

             switch ($startState) 
            {
                "Off"
                {
                    Stop-VM  –Name *$compName* -Force -Confirm:$false
                }
                "Paused"
                {
                    Suspend-VM –Name *$compName* -Confirm:$false
                }
                "Saved"
                {
                    Save-VM –Name *$compName* -Confirm:$false
                }
                default {
       
                    Write-Host  " Leaving $($compName) running $startState "
                }
            }
            
        }
        else
        {
            Write-Host  "Unable to determin name of $($vm.Name) as it is in a crappy format. Needs to be '$nameRegex'" -ForegroundColor Red
        }
    }</pre>

    <p>Be warned that this is my first pass at this script and more scarily my
    first actual PowerShell script. As such I have no idea if this is the right
    way to do things, but it does seam to work. It lets you execute another
    PowerShell script against each of my VM’s.</p>

    <h2>Execute against VM</h2>

    <p>The second script that I need will do all of the work to configure and
    update the VM after it has been started. This will be a remote execution
    script that installs anything that it needs as well as getting and
    installing all of the outstanding Microsoft Updates.</p>

    <pre class="lang:ps decode:true" title="Execute against VM Script">Param(
      [string]$computerName = $env:COMPUTERNAME
    )

    If (!(Test-Path C:Chocolatey))

    {
        Write-Host  " Install Chocolatey "
        iex ((new-object net.webclient).DownloadString("http://bit.ly/psChocInstall"))
    }

    Else 

    {
        chocolatey update
    }

    cinst enablepsremoting

    cinst PSWindowsUpdate -Version 1.4.6

    Write-Output "--SERVICE"

    Write-Output "-Allow ping for whatever"

    netsh advfirewall firewall add rule name="All ICMP V4" dir=in action=allow
    protocol=icmpv4

    Write-Output "-Enable File and Print Sharing for possible Lab Management
    use"

    netsh advfirewall firewall set rule group=”File and Printer Sharing” new
    enable=Yes

    Write-Output "-Check all Updates"

    Import-Module PSWindowsUpdate

    Get-WUInstall -MicrosoftUpdate -IgnoreUserInput -acceptall -autoreboot
    -verbose

    </pre>

    <p>I will likely go though a bunch more iterations on this script but for
    right now it:</p>

    <ol>

    <li>Makes sure that Chocolatey is installed</li>

    <li>Installed Chocolatey packages including ‘PSWindowsUpdate’</li>

    <li>Validates some firewall changes that I need</li>

    <li>Downloads and installs all Microsoft Updates</li>

    </ol>

    <p>This may change and I want to test out some hierarchical PowerShell
    script option, but until then this makes it easy to update all of my
    VM’s.</p>

    <h2>Conclusion</h2>

    <p>Although I have tinkered with PowerShell now and then this is the first
    executable script that I have written. I am still in copy/paste mode but I
    can sure see the value of learning and using PowerShell for everything from
    installing applications to configuring systems.</p>

    <p>You can just about do anything with PowerShell that you like.</p>
  - "<p class=\"lead\">Running a remote execute PowerShell against each Windows 8 VM on your Hyper-V host can help you\_maintain\_the guest VM's in a minimal amount of time.</p>"
  post_id: '9901'
  post_date: '2013-05-23 09:47:41'
  post_date_gmt: '2013-05-23 08:47:41'
  post_modified: '2013-05-23 09:47:41'
  post_modified_gmt: '2013-05-23 08:47:41'
  comment_status: open
  ping_status: open
  post_name: remote-execute-powershell-against-each-windows-8-vm
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '82'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _syn_old_sitegroups
    meta_value: a:0:{}
  - meta_key: _syn_selected_sitegroups
    meta_value: ''
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:7:"default";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _yoast_wpseo_focuskw
    meta_value: remote execute powershell
  - meta_key: _yoast_wpseo_title
    meta_value: Remote Execute PowerShell against each Windows 8 VM
  - meta_key: _yoast_wpseo_metadesc
    meta_value: "Running a remote execute PowerShell against each Windows 8 VM on your Hyper-V host can help you\_maintain\_the guest VM's in a minimal amount of time."
  - meta_key: _syn_slave_post_states
    meta_value: a:0:{}
  - meta_key: dsq_thread_id
    meta_value: '1299909414'
  - meta_key: _thumbnail_id
    meta_value: '9537'
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: wp-to-buffer-log
    meta_value: "O:8:\"stdClass\":5:{s:7:\"updates\";a:3:{i:0;O:8:\"stdClass\":17:{s:3:\"_id\";s:24:\"519dd7b105b334413f00002b\";s:9:\"client_id\";s:24:\"50f71563f758fa8f40000001\";s:10:\"created_at\";i:1369298865;s:3:\"day\";s:5:\"Today\";s:6:\"due_at\";i:1369307400;s:8:\"due_time\";s:8:\"12:10 pm\";s:2:\"id\";s:24:\"519dd7b105b334413f00002b\";s:10:\"profile_id\";s:24:\"507a4e20d9320dd125000018\";s:15:\"profile_service\";s:7:\"twitter\";s:10:\"shared_now\";b:0;s:6:\"status\";s:6:\"buffer\";s:4:\"text\";s:91:\"New Post: Remote Execute PowerShell against each Windows 8 VM http://buff.ly/11dY7Cv #vsalm\";s:14:\"text_formatted\";s:306:\"New Post: Remote Execute PowerShell against each Windows 8 VM <a class=\"url\" href=\"http://buff.ly/11dY7Cv\" rel=\"external nofollow\" target=\"_blank\">http://buff.ly/11dY7Cv</a> <a href=\"https://twitter.com/#!/search?q=%23vsalm\" title=\"#vsalm\" class=\"hashtag\" rel=\"external nofollow\" target=\"_blank\">#vsalm</a>\";s:4:\"type\";s:4:\"link\";s:10:\"updated_at\";i:1369298865;s:7:\"user_id\";s:24:\"507a4e20d9320dd125000017\";s:3:\"via\";s:3:\"api\";}i:1;O:8:\"stdClass\":18:{s:3:\"_id\";s:24:\"519dd7b105b334413f00002c\";s:9:\"client_id\";s:24:\"50f71563f758fa8f40000001\";s:10:\"created_at\";i:1369298865;s:3:\"day\";s:5:\"Today\";s:6:\"due_at\";i:1369328460;s:8:\"due_time\";s:8:\"11:01 am\";s:2:\"id\";s:24:\"519dd7b105b334413f00002c\";s:5:\"media\";O:8:\"stdClass\":5:{s:8:\"original\";s:74:\"http://nkdagility.com/remote-execute-powershell-against-each-windows-8-vm/\";s:11:\"description\";s:150:\"Running a remote execute PowerShell against each Windows 8 VM on your Hyper-V host can help you\_maintain\_the guest VM's in a minimal amount of time.\";s:5:\"title\";s:51:\"Remote Execute PowerShell against each Windows 8 VM\";s:4:\"link\";s:74:\"http://nkdagility.com/remote-execute-powershell-against-each-windows-8-vm/\";s:7:\"preview\";s:61:\"http://nkdagility.com/files/2013/05/metro-powershell-logo.png\";}s:10:\"profile_id\";s:24:\"5088ae7ed9320d615a00000a\";s:15:\"profile_service\";s:8:\"facebook\";s:10:\"shared_now\";b:0;s:6:\"status\";s:6:\"buffer\";s:4:\"text\";s:91:\"New Post: Remote Execute PowerShell against each Windows 8 VM http://buff.ly/11dY7Cx #vsalm\";s:14:\"text_formatted\";s:306:\"New Post: Remote Execute PowerShell against each Windows 8 VM <a class=\"url\" href=\"http://buff.ly/11dY7Cx\" rel=\"external nofollow\" target=\"_blank\">http://buff.ly/11dY7Cx</a> <a href=\"https://twitter.com/#!/search?q=%23vsalm\" title=\"#vsalm\" class=\"hashtag\" rel=\"external nofollow\" target=\"_blank\">#vsalm</a>\";s:4:\"type\";s:4:\"link\";s:10:\"updated_at\";i:1369298865;s:7:\"user_id\";s:24:\"507a4e20d9320dd125000017\";s:3:\"via\";s:3:\"api\";}i:2;O:8:\"stdClass\":18:{s:3:\"_id\";s:24:\"519dd7b105b334413f00002d\";s:9:\"client_id\";s:24:\"50f71563f758fa8f40000001\";s:10:\"created_at\";i:1369298865;s:3:\"day\";s:5:\"Today\";s:6:\"due_at\";i:1369302540;s:8:\"due_time\";s:8:\"10:49 am\";s:2:\"id\";s:24:\"519dd7b105b334413f00002d\";s:5:\"media\";O:8:\"stdClass\":5:{s:8:\"original\";s:74:\"http://nkdagility.com/remote-execute-powershell-against-each-windows-8-vm/\";s:11:\"description\";s:150:\"Running a remote execute PowerShell against each Windows 8 VM on your Hyper-V host can help you\_maintain\_the guest VM's in a minimal amount of time.\";s:5:\"title\";s:51:\"Remote Execute PowerShell against each Windows 8 VM\";s:4:\"link\";s:74:\"http://nkdagility.com/remote-execute-powershell-against-each-windows-8-vm/\";s:7:\"preview\";s:61:\"http://nkdagility.com/files/2013/05/metro-powershell-logo.png\";}s:10:\"profile_id\";s:24:\"5088ae96d9320d3a5a00000a\";s:15:\"profile_service\";s:8:\"linkedin\";s:10:\"shared_now\";b:0;s:6:\"status\";s:6:\"buffer\";s:4:\"text\";s:91:\"New Post: Remote Execute PowerShell against each Windows 8 VM http://buff.ly/11dY7Cz #vsalm\";s:14:\"text_formatted\";s:306:\"New Post: Remote Execute PowerShell against each Windows 8 VM <a class=\"url\" href=\"http://buff.ly/11dY7Cz\" rel=\"external nofollow\" target=\"_blank\">http://buff.ly/11dY7Cz</a> <a href=\"https://twitter.com/#!/search?q=%23vsalm\" title=\"#vsalm\" class=\"hashtag\" rel=\"external nofollow\" target=\"_blank\">#vsalm</a>\";s:4:\"type\";s:4:\"link\";s:10:\"updated_at\";i:1369298865;s:7:\"user_id\";s:24:\"507a4e20d9320dd125000017\";s:3:\"via\";s:3:\"api\";}}s:17:\"buffer_percentage\";i:10;s:12:\"buffer_count\";i:1;s:7:\"success\";b:1;s:7:\"message\";s:48:\"One more post in your Buffer. Keep it topped up!\";}"
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1dLiNoV
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474476675;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10617;}i:1;a:1:{s:2:"id";i:5388;}i:2;a:1:{s:2:"id";i:11152;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2013-05-23-remote-execute-powershell-against-each-windows-8-vm.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '673'
