post:
  title: Why I think VB.NET is a better choice than C#
  link: https://nkdagility.com/blog/why-i-think-vb-net-is-a-better-choice-than-c/
  pubDate: Mon, 06 Aug 2007 11:59:26 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2007/08/06/why-i-think-vb.net-is-a-better-choice-than-c.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p>The reasons I think that VB.NET is better than C# are many, but I will try to put some of them down in a coherent manor unlike the usual C# developer that can only come up with \"<a target=\"_blank\" href=\"http://blog.hinshelwood.com/archive/2007/08/05/114415.aspx#140605\">vb is a language for mediocre programmers...anyway looks ugly and smells ugly..</a>\" (Hmm, he must have thought long and hard to come up with that).</p>\n<p><strong>Reason 1 - Business sense</strong></p>\n<p>liviu\_is right that many mediocre programmers are VB programmers. This is because VB is easier to read and easier to code, thus\_there are actually many more VB.NET programmer than C# in the world, so ov course there are more mediocre ones, statistics demand that. But this is its advantage, you can have a superb developer produce your application, then have on of the mediocre programmers maintain it. This keeps costs down for the business, and frees up the superb programmers time to work on the next complex project.</p>\n<p><strong>Reason 2 - Visual sense</strong></p>\n<p>The readability of VB.NTE is what makes it more popular. Take these pieces of code for example:</p>\n<p><img alt=\"\" src=\"http://mtaulty.com/blog/images/MMmmmmm.VB9.0inBeta2_B8A7/image_thumb.png\" /> </p>\n<p>or (thanks <a target=\"_blank\" href=\"http://www.mihirsolanki.com/\">Mihir Solanki</a>\_for the timely\_translation)</p>\n<blockquote>\n<p>NorthwindDataContext ctx = new NorthwindDataContext();</p>\n<p><br />\nvar query = from c in ctx.Customers<br />\n\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ where c.Country == \"UK\"<br />\n\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ select new { Name = c.ContactTitle + \" \" + c.ContactName };</p>\n<p><br />\nforeach (var c in query.Skip(2).Take(3))<br />\n{<br />\nConsole.WriteLine(c.Name);<br />\n}</p>\n</blockquote>\n<p>Forget for a moment that the VB is nicely formatted, this looks pretty similar. There are the same number of lines. The same amount of text. But I find the VB version easier to read as it is more logical, it flows better and you can read it much more effectively.</p>\n<p>But this is just personal preference.</p>\n<p><strong>Reason 3 - Disability friendly</strong></p>\n<p>VB.NET unlike C# is not case sensitive. I have always wondered why in this day and age that C# is still case sensitive. It seams to me that this is a historical thing, but it just avoids confusion and makes you code more readable if \"variable\" and \"Variable\" and \"vaRiable\" are the same thing and not different.</p>\n<p>If you are <a target=\"_blank\" href=\"http://blog.hinshelwood.com/archive/2007/07/23/What-is-dyslexiaAgain.aspx\">dyslexic like me</a>\_then this is very confusing as although \"r\" and \"R\" are difficult to confuse, \"v\" and \"V\" is the same letter, only slightly bigger. This means that you code is more accessible and disability friendly if you do not have case sensitivity.</p>\n<p><strong>Reason 4 - Intellisense</strong></p>\n<p>Oh how I love intellisense, the joy to have all of your code write itself. In effect this makes the argument of C# being more concise mute, as your code almost writes itself.</p>\n<p><strong>Reason 5 - Dynamic checking</strong></p>\n<p>Using VB.NET I do not need to wait till compile time to see if I have any typos or errors in my code and the \"write-time\" compiler for VB.NET checks my code as I type. As a dyslexic who can write the same work six times in the same object differently and not be able to see the difference you can imagine how helpfully this is.</p>\n<p>Would you like Word to only check your spelling when you try to save, and refuse to save until you had fixed it? I think not...</p>\n<p><strong>Reason 6\_ - Personal</strong></p>\n<p>I don't know if it is a symptom of my dyslexia, but curly brackets ({ and }) give me the heebie jeebies and I find I am unable to see where one method, or loop ends and the others begin. If it is part of my dyslexia then that is an even better proponent of VB.NET over C# and should be added to reason 3.</p>\n<p><strong>Conclusion</strong></p>\n<p>Although the use of VB.NET over C# is a personal preference it also has many advantages. The more noted of which is Readability, disability friendly and 'write-time' code checking. With all this it is actually faster to write in VB than C#.</p>\n<p>Lets all try to make our code more accessible and use VB.NET.</p>\n<p>\_</p>\n<p>P.S. I don't know what I am doing wrong, I can't seems to 'smell' any of my code, neither VB.NET or C#. Hmm...</p>\n<p>\_</p>\n<div style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\" class=\"wlWriterEditableSmartContent\">Technorati Tags: <a href=\"http://technorati.com/tags/.NET\" rel=\"tag\">.NET</a>\_<a href=\"http://technorati.com/tags/Dyslexia\" rel=\"tag\">Dyslexia</a>\_</div>"
  - ''
  post_id: '340'
  post_date: '2007-08-06 11:59:26'
  post_date_gmt: '2007-08-06 11:59:26'
  post_modified: '2007-08-06 11:59:26'
  post_modified_gmt: '2007-08-06 11:59:26'
  comment_status: open
  ping_status: open
  post_name: why-i-think-vb-net-is-a-better-choice-than-c
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '311604678'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '5063'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aCwzeQ
  - meta_key: _pl_karma
    meta_value: '0'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1472295024;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:268;}i:1;a:1:{s:2:"id";i:301;}i:2;a:1:{s:2:"id";i:339;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2007-08-06-why-i-think-vb-net-is-a-better-choice-than-c.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1
  - meta_key: ekit_post_views_count
    meta_value: '395'
  comment:
  - comment_id: '192'
    comment_author: Justin
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 20:28:20'
    comment_date_gmt: '2007-08-06 20:28:20'
    comment_content: >-
      Reason 3 - Disability friendly<br /><br />I fail to see how case
      sensitivity is a bad thing. It forces correct code. I would hate to have
      to maintain a program you wrote if everything you wrote the variable name
      it hade different case. That my friend is confusing!<br /><br />VB is more
      readable...for who? The experienced C++/practically every other language
      programmer or the new programmer?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971983'
  - comment_id: '193'
    comment_author: Mark K
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 20:55:41'
    comment_date_gmt: '2007-08-06 20:55:41'
    comment_content: >-
      I think VB encourages mediocre programmers, who write very procedural
      programming.<br />In itself, VB has evolved from the original BASIC
      language, and rarely demonstrates complexes business logic.<br /><br
      />When people program in VB, they think in logical steps, and code in
      logical steps. Before you know it, you have a very complex form, full of
      business and data logic.<br /><br />I know thats not always the case. But
      name some top developers that demonstrate TDD in VB? Jeremy Miller? No.
      Ayende Rein? No. Jean Paul Boodhoo? No<br />They all have a very object
      orientated approach, and they use C# to demonstrate this on their
      blogs.<br /><br />Another example: go to a book store and look at VB
      books. They're nearly all to do with "binding a datasource to a grid", or
      "adding an icon to a combobox"<br /><br />Now look at the C# books.
      There's a much more object orientated approach. They talk more about
      design patterns, and implmentation.<br /><br />Why does C# seem more OO
      than VB? I dont know. Maybe its just an attitude or cultural
      difference.<br /><br />(ps: working with objects doesnt mean your code is
      object orientated)<br /><br /><br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971984'
  - comment_id: '194'
    comment_author: Martin Hinshelwood
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 21:10:45'
    comment_date_gmt: '2007-08-06 21:10:45'
    comment_content: >-
      Hi aspnet_guy,<br /><br /> I can see where you are coming from, and I did
      not literally mean that I used a different case with every variable name.
      <br />In fact if, for example only, you use “objTeamFoundationServer” as
      the definition variable VB will convert every case you enter to the same
      case as the original definition.<br /><br />What I meant was that if you
      created a variable called “objValueOfThing” I would find it difficult to
      transpose that between “objvalueOfThing” or “objValueofThing” and
      “objvalueofThing” as they all have the same letters of the same shape. If
      you read my post on “What is Dyslexia?” you will get a better idea of what
      I am getting at and why it is easier for a dyslexic person (min 15% of the
      population) if the programming language does not use case sensitivity. The
      thing that I regularly find in C# code is the internal variable called
      something like “valueOfThing” and the public property called
      “ValueOfThing” and this is what is where the difficulty is as they are
      different things in C#, where as VB would not allow this!<br /><br
      />Martin<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971986'
  - comment_id: '195'
    comment_author: Martin Hinshelwood
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 21:19:11'
    comment_date_gmt: '2007-08-06 21:19:11'
    comment_content: >-
      Hi Mark K,<br /><br /> All these thing you have mentioned are partly the
      virtue of there being far more VB developers than C# and partly because
      may VB programmers came from the old procedural days of "vbScript" and
      "VB6", and this only makes VB more accessible to a greater number of
      developers.<br /> Yes, many VB developers are 'crap' at programming on OO,
      and a higher percentage of C# developer know OO and can implement it. <br
      /> You will obviously find more 'trash' developer book, but that is
      because the 'trash' developers want them, so it is market driven. Many of
      the really good books on development are written in C# and VB...<br /><br
      /> Although mostly I have to buy the C# books and translate them in my
      head!<br /><br />Martin<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971987'
  - comment_id: '196'
    comment_author: Lorin Thwaits
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 22:03:40'
    comment_date_gmt: '2007-08-06 22:03:40'
    comment_content: >-
      Glad you're excited about VB.NET.  It's great that MSIL can cater to so
      many different dialects.<br /><br />Please realize that there are many
      experienced folks out there that started with Java or C and find its
      syntax quite easy to read.  Most of the folks who are big into
      object-oriented programming gravitate to C#, even though VB.NET offers
      very similar options for writing OO code.  Without case sensitivity you
      have to get a little more creative in VB.NET when writing properties that
      expose private members, but it can be done.  Although VB.NET optional
      parameters do smell, method overloading is supported, so you can still do
      the right thing from an OO perspective.<br /><br />Something else to
      consider is performance.  While VB.NET can be made to perform on-par with
      C# (within 5% anyway), by default the extra overflow checking and all the
      automatic type casting can really hamper performance.  So a VB.NET
      application requiring better performance may take a little longer to tweak
      than a C# application.<br /><br />A final thing I'd like to bring up is
      that all of the managed portion of the .NET Framework was written in C#,
      as is nearly all new managed code coming from Redmond.  Not all of it, but
      most of it.<br /><br />So I am not trying to sway your choice in language,
      but I would ask that you not turn your back entirely on C#, especially
      since you have an interest in software architecture.  There's lots of
      quality C# code out there that can play very nicely with your VB.NET
      code.<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971989'
  - comment_id: '197'
    comment_author: Martin Hinshelwood
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 22:14:26'
    comment_date_gmt: '2007-08-06 22:14:26'
    comment_content: >-
      Hi Lorin,<br /><br />:) Fantastic, and constructive: Not only that, but I
      agree, which does not happen often!<br /><br />Although I have been told
      that the performance difference between C# and VB.NET disappeared with
      .NET 2.0! Not sure of my facts though :)<br /><br />Martin<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971992'
  - comment_id: '198'
    comment_author: Liviu
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 22:27:03'
    comment_date_gmt: '2007-08-06 22:27:03'
    comment_content: >-
      I apologiaze for being so rude...but<br /><br />Hi the example could be
      more VB-ish in c#:<br />[i]<br />    var ctx = new
      NorthwindDataContext();<br />    var query = from c in ctx.Customers<br
      />                      where c.Country == "UK"<br />                     
      select new { Name = c.ContactTitle + " " + c.ContactName };<br /><br /><br
      />    foreach (var c in query.Skip(2).Take(3))<br />         
      Console.WriteLine(c.Name);<br />[/i]<br />No need to write { if you do not
      need one. No need to define explicitly local variables in C# 3.0 ;)<br
      /><br />1) I hate to must to put underscore just to be able to go on next
      line. I think also that it is a matter of taste, some feel confortabler
      without {  other not.<br /><br />2) visual sense, a matter of taste<br
      /><br />3) Disability. Yes i understand your point. Case sensitivity is a
      curse for you, but could be a helper for me.<br />I can define x as
      private field and X as public prop and keep it simple, but outside coding
      guidlines from microsoft. but how i hate _x!<br /><br />4) could you give
      me an example of better intellisense in vb?<br />5) dynamic checking.. hm,
      i have resharper and helps me better<br /><br /><br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971995'
  - comment_id: '199'
    comment_author: Martin Hinshelwood
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-06 22:52:05'
    comment_date_gmt: '2007-08-06 22:52:05'
    comment_content: >-
      First, can i draw everyones attention to the title of the post "Why I
      think...", just my opinion.<br /><br />Liviu, <br /><br />Thanks for being
      so constructive this time around :)<br /><br />1) I completely agree<br
      /><br />2) Defiantly a mater of taste<br /><br />3) Although it is better
      for you, does that mean that you would put steps in front of your shop, or
      make all cash machines a minimum of four feet of the ground, or refuse to
      make left handed scissors. Just for thought...<br /><br />4) I guess, just
      that it is not case sensitive either, which I always forget to do in C#<br
      /><br />5) no argument, but needs an extra app: is it free?<br /><br
      />Martin
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971996'
  - comment_id: '200'
    comment_author: thorkia
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-07 00:23:39'
    comment_date_gmt: '2007-08-07 00:23:39'
    comment_content: >-
      I used to use VB.NET, but moved to C# for 4 reasons only.<br /><br />1.  I
      actually find C# code easier to read.  Why?  Becuase of the [] brackets
      used for arrays in C#.  VB.NET uses () for both arrays and functions. 
      That makes it difficult at a wuick glance to tell if you are looking at an
      array or function call.  For example is this a function or an array I'm
      accessing:<br />Dim x as int;<br />x = SomeMath(2)<br />x = Number(2)
      'Which is the function, and which is the array?<br />If it was in C#, I
      would know:<br />int x;<br />x = SomeMath(2); //Obviously a function<br
      />x = Number[2]; //Obviously an array<br /><br />2. I can seem to find
      more examples on the net of C# code than VB.NET.  Maybe I'm just looking
      the wrong places.  But I got tired of converting them, and just swtiched
      my language of preference.<br /><br />3. The whole sub and function
      thing.  Subs are are functions that don't return variables, and functions
      do...  Why is there a difference?  Even when I did VB6 programming it
      drove me nuts.<br /><br />4. The last one isn't really that big, and some
      would not a problem, but it could be.  Zero based and non-zero based
      arrays.  You can use both in VB.NET  So this acutally declares and array
      of size 6, when I only asked for 5:<br />Dim Numbers(5) as int<br />Maybe
      this has chnaged since VS 2003 and .Net 1.1 (That was when I switched).<br
      /><br />Now, one thing I do miss from VB.NET is the nifty ability to
      automatically create my properties get/set methods.  Why do I have to buy
      resharper for this in C# when VB.NET already has it?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209971997'
  - comment_id: '201'
    comment_author: Alan Clark
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-09 03:47:12'
    comment_date_gmt: '2007-08-09 03:47:12'
    comment_content: >-
      Case sensitivity in a programming language makes no sense to me.  I can't
      imagine why a programmer would name two variables the same, in the case of
      private fields for a property they should be prefixed with an underscore
      to make them clearly different.<br /><br />C# permits the definition of
      identical variable names, differing only in case which can lead to
      accidentally using the wrong one.  Why?  What is the advantage of
      case-sensitivity?  IMHO, this was done just because C++ programmers were
      used to it and expected it, regardless of the merits of it.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972001'
  - comment_id: '202'
    comment_author: Kenny
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-14 05:00:09'
    comment_date_gmt: '2007-08-14 05:00:09'
    comment_content: >-
      Just my 2 cents:<br />.NET comes purely down to personal preference. <br
      />As far as performance, if you choose to program in .NET "Option Strict"
      is a must! One thing does really bother me in VB.NET. When working with
      arrays or strings some commands assume/return 0 based and some 1. It’s a
      shame when people choose to rate others intelligence on the language of
      choice. I am a self taught programmer and have been programming for almost
      14 years. Someone who understands programming well can pick up a new
      language and move along pretty quickly. I have to say it’s getting harder
      to find good programmers period. I see a lot of VB.NET bashing on the net
      from the C# community. If you want real performance why would you move to
      .NET? The CLR is not the fastest thing in the world by far! I’m not trying
      to take sides but it seems there are quite a few “developers” taking the
      side of C# purely due to is boasting as a superior language. I currently
      develop in VB.NET    and have been programming for over 14 years all the
      way back to Assembler in DOS. It’s crazy to put one .NET language above
      the other. I guess I would be above them all for using IL Assembler?? Not
      really.<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972004'
  - comment_id: '203'
    comment_author: AB
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-14 23:11:09'
    comment_date_gmt: '2007-08-14 23:11:09'
    comment_content: >-
      Visual basic is a much more laborious language, even with intellisense.
      <br /><br />IF &amp;quot;Fred&amp;quot; = sName THEN<br />    return
      True<br />ELSE<br />    sName = &amp;quot;Not Fred&amp;quot;<br />ENDIF<br
      /><br />if (&amp;quot;Fred&amp;quot; == sName)<br />    return true;<br
      />else<br />    sName = &amp;quot;Not Fred&amp;quot;;<br /><br />There's
      no need for curly braces, or closing statements that are more prone to
      syntax errors (line EndIf, End Sub, End Function etc)<br /><br />a Curly
      brace for a function declaration is cleaner and quicker to type<br /><br
      />private int getAccount(){<br />    return iAccount;<br />}<br /><br
      />takes less effort and arguably more readable than<br /><br />Private
      Function getAccount() As Integer<br />    return iAccount<br />End
      Function<br /><br />Writing out VB code takes more time than C#, even with
      variable declarations. Overall, this can add up to a significant amount of
      time.<br /><br />Loops are very common routines in applications. Loop
      variables are often disposable and unused when the loop has completed. In
      VB, to use a loop variable, you must first declare the variable (assuming
      option explicit) then use it in a loop.<br /><br />Dim I as Integer<br
      />For I = 1 to 100 Step 2<br /> something = something + I<br />Next I<br
      /><br />in C#: -<br />for (int i=1; i &amp;lt; 101; i += 2)<br />   
      something += i;<br /><br />A lot less useless things to type in C#. No
      declaration of the variable, like you are explaining it to a child
      &amp;quot;DIM&amp;quot; ... &amp;quot;As Integer&amp;quot;<br />Declaring
      the variable in line<br />More control in the loop (the increment can be
      an algorithm instead of just a step)<br /><br />Even the increment of
      something is less long winded, using += instead of something = something +
      i<br /><br />Also, C# supports compiler preprocessors like #define, which
      are great for debugging and writing cross platform applications.<br /><br
      />There are nice shortcuts too. Most notably, the if/else/endif block.<br
      /><br />Where VB.net has: -<br /><br />If sName = &amp;quot;Fred&amp;quot;
      Then<br />    sColor = &amp;quot;Blue&amp;quot;<br />Else<br />    sColor
      = &amp;quot;Green&amp;quot;<br />End IF<br /><br />C# can use: -<br /><br
      />sColor = (&amp;quot;Fred&amp;quot; ==
      sName)?&amp;quot;Blue&amp;quot;:&amp;quot;Green&amp;quot;;<br /><br /><br
      />I especially like the differentiation C# makes between assignment
      operators and comparison operators.<br /><br />It is easy to make the
      mistake of using the assignment operator instead of the comparison,
      setting a variables contents instead of comparing them, but it can be
      difficult to see in the code, because in VB: -<br /><br />Assignment:  A =
      B<br />Comparison: A = B<br /><br /><br />in C#: -<br /><br />Assignment: 
      A = B<br />Comparison: A == B<br /><br />So :-<br /><br />If A = B Then<br
      /> ' Something<br />End If<br /><br />C#<br /><br />if (A == B) //
      something ;<br /><br />But C# can also make us of this to reduce coding
      yet further<br /><br />VB<br />B = B + 1<br />A = B<br />If B = 10 Then<br
      />    'Something<br />End If<br /><br />C#<br />if (A = ++B == 10) //
      Something ;<br /><br />So C# reduces the long winded coding that VB
      demands. It's less readable to the novice, but to an experienced
      developer, it's clear and more importantly, takes 1 or 2 lines of code
      instead of 5. That makes a function more readable because it doesn't take
      up 10 pages of scrolling <br /><br />The semi-colon line terminator is
      great too, to also compress the lines of code to make it more readable
      without scrolling, or lets you break up 1 line without having to insert an
      underscore<br /><br /><br />a++;if (a&amp;lt;10) return true;
      doFunction(); showMessage(A);<br />b++;if (b&amp;lt;10) return true;
      doBFunction(); showMessage(B);<br /><br />More readable than<br /><br />A
      = A + 1<br />If A &amp;lt; 10 Then return true End If<br />doFunction()<br
      />ShowMessage(A)<br />B = B + 1<br />If B &amp;lt; 10 Then return true End
      If<br />doFunction()<br />ShowMessage(B)<br /><br />VB is simply an
      inefficient language with too much unnecessary typing and no more readable
      than C#, but with less functionality.<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972006'
  - comment_id: '204'
    comment_author: Martin Hinshelwood
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-15 16:52:56'
    comment_date_gmt: '2007-08-15 16:52:56'
    comment_content: >-
      I think from your examples you have demonstrated that VB is infact more
      readable!<br /><br />This:<br /><br />If sName = "Fred" Then<br />  sColor
      = "Blue"<br />Else<br />  sColor = "Green"<br />End IF<br /><br />is way
      more readable than:<br /><br />sColor = ("Fred" ==
      sName)?"Blue":"Green";<br /><br />So what if you have to type a little
      more, software development is not a race, andit compiles down to the same
      thing anyway! Yes, C# is more <strong>consise</strong> but that is not the
      same a readable or mangable.<br /><br />If you are using notepad I can see
      that C# would be less prone to erros, but if you are using VS then you can
      see the errors as you are typing and it fills out half of your code
      anyway!<br /><br />If you type:<br /><br />If x=1<br /><br />and hit space
      you automaticly get:<br /><br />If x=1 Then<br /><br />End If<br /><br
      />So you should never have to type End If or End Sub or End Function
      anyway!<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972008'
  - comment_id: '205'
    comment_author: Christian
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-17 00:12:13'
    comment_date_gmt: '2007-08-17 00:12:13'
    comment_content: >-
      Most of your arguments are wrong, AB.<br /><br />Argument 1, VB is
      laborious:<br />To enter the code you wrote in VB 2005 Express I simply
      type<br />if "Fred"=sname&lt;enter&gt;return
      t&lt;enter&gt;else&lt;enter&gt;sname="Not Fred"<br />if ("Fred" ==
      sName)&lt;enter&gt;return true;&lt;enter&gt;else&lt;enter&gt;sName = "Not
      Fred";<br /><br />VB is 12 chars shorter, possibly less if C# supports
      more auto formating than I remember<br /><br />AND<br /><br />The only
      time I have to press two keys at once is to enter the strings, a total  of
      7 (+ 2 for =) times<br />The C# version also requires this for the () and
      the sName identifier, a total of 11 (+ 5 for = and ;)<br />Values in ()
      are for a scandinavian keyboard<br /><br />AND<br /><br />if you want more
      lines per block you need to add the curly braces, wich will take 2 more
      double <br /><br />keypress total (using ugly AltGr combination on my
      scandinavian keyboard)<br /><br />private function getAccount as
      inte&lt;enter&gt;return iaccount<br />private int getAccount()
      {&lt;enter&gt;return iAccount;<br /><br />VB is indeed 8 chars longer,
      howewer it takes only 1 use of Shift key, versus 4 (+ 3 + AltGr!!!) for
      C#. To me this makes VB faster to type, as I don't have to clutter my tuch
      typing with shft combinations.<br /><br /><br />Argument 2, Loop variables
      can't be declared only in loop context<br />How do you explain this VB
      code then?<br /><br />For I As Integer = 1 To 100 Step 2<br />   
      something += I<br />Next I<br /><br /><br />Argument 3, More control in
      the loop<br />If you need the increment to be a complicated algorithm you
      should have stayed away from the use of <br /><br />for-loop for improved
      readability, as it is normal to assume it is simply counting.<br /><br
      /><br />Argument 4, Increment is less long winded in C#<br />see teh for
      loop above for an example<br /><br /><br />Argument 5, C# supports
      #define<br />VB supports #Const instead<br /><br /><br />Argument 6, C#
      has nice shortcuts<br />What about trying this?<br /><br />sColor =
      Iif("Fred" = sName, "Blue", "Green")<br /><br />Which by the way is not
      much readable in any language and should probably be avoided<br /><br
      /><br />Argument 7, differentiation between assignment and comparision
      operator<br />I'd like to see this differentiation in VB myself, but it is
      not there and it still works fine.<br /><br />Anyway if (A = ++B == 10)
      does not look very readable to me. Too much is happening at once here,
      both increment, assignment and comparision at the same time.<br /><br
      />But I'd like to see the possibility of assigning one value to multiple
      variables, for instance <br /><br />like<br /><br />A, B = B + 1<br /><br
      /><br />Argument 8, semi-colon is great<br />No it's horrible. I have to
      press Shift + , to type it on my keyboard!!!<br />Your code just don't
      look readable at all, to much happen in too few lines. But if you want to
      you <br /><br />could always do that in VB too:<br /><br />a += 1 : If a
      &lt; 10 Then : Return True : End If : doFunction() :
      showMessage(CapitalA)<br />b += 1 : If b &lt; 10 Then : Return True : End
      If : doFunction() : showMessage(CapitalB)<br /><br />I assume you know
      that a is not A in C#, so i fixed that in the code by translating A to
      CapitalA and B to CapitalB. Or maybe you use identifiers differentiated by
      case? You want get build errors for that you know, just some hours of
      debugging until you finally find the mistake.<br /><br /><br />I see that
      there are a lot of experienced C/C++ programmers who find it easier to
      migrate to C#, because of the closer similarities in syntax. But VB also
      have reputation for not being OO (my C/C++ teacher said that VB.NET was
      not OO at all at my first lesson, I hated him ever since...). In my head
      VB.NET is far superior to C#, but still could use some improvements.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972011'
  - comment_id: '206'
    comment_author: Martin Hinshelwood
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-17 22:19:01'
    comment_date_gmt: '2007-08-17 22:19:01'
    comment_content: >-
      Christian, thanks for the support on this. I was getting swamped by C#
      fanboys…
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972017'
  - comment_id: '207'
    comment_author: David Silverlight
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-08-20 03:29:43'
    comment_date_gmt: '2007-08-20 03:29:43'
    comment_content: >-
      I could not agree more with your points.  I have lost count of the number
      of discussions that I have had with colleagues over the vb vs C# topic.  I
      came from a VB, then ASP background so I am naturally more comfortable
      with VB.NET than I am C#.  I also like it for all of the reasons that you
      outlined in this post.  <br /><br />One downside of VB that I would like
      to point out is irrelevant of the language itself, but instead has to do
      with all of the examples out there.  For some reason that I have never
      figured out, it seems that about 80% of all examples out there are written
      in C#.  So, this makes it a bit painful to implement code snippets that
      you find in your VB apps.  Seems like a C# conpiracy to me :)<br /><br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972018'
  - comment_id: '208'
    comment_author: christopher stapleton
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2007-09-10 08:55:13'
    comment_date_gmt: '2007-09-10 08:55:13'
    comment_content: >-
      why are you guys fighting c# vs vb.net ? although Microsoft says both
      languages are first class equivalent languages, I think Microsoft made it
      clear that c# is superior to vb.net, when they used it to build the .net
      framework. <br /><br />it is like those CEO's of big corporations, who in
      their annual message to the shareholders, say everything is fine with the
      company and then who sneaked out behind the scenes to sell and get rid of
      all the shares they hold.<br /><br />watch what they do instead of
      listening to what they say... this is the best test.<br /><br />I have
      moved from vb6 to c#  and now I am moving to java. this is to punish
      microsoft for causing all this mess. they did the same thing with vb
      script and jscript in the past.<br /><br />the reason is very simple .net
      is 50% of the market, JEE is another 50% of the market. however by
      learning one language name java, I can cover 50% of the job market. <br
      /><br />whereas if I pick either vb.net or c#, I can cover only 25% of the
      job market.  the only way you can cover 50% of the .net market, is by
      learning 2 languages !!!  is it worth the money? I don't think so. I just
      hope a lot of the microsoft developers like I used to be, moves to java to
      punish Microsoft for their divisive policies that impact our ability to
      put bread on our table.<br /><br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972020'
  - comment_id: '209'
    comment_author: Dan Bambling
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2008-04-19 17:11:10'
    comment_date_gmt: '2008-04-19 17:11:10'
    comment_content: >-
      I started out programming in vb.net. I love the language. I currently
      manage both c# and vb.net applications and on a basic level they are very
      much the same.<br /><br />VB is a great language to get going with
      however, I do like c# and its close syntax with javascript.<br /><br
      />Writing websites these days, one must know AJAX and SQL as well as a
      programming language and the chosen framework. It is quite a feat to
      remember all that code. If you have developed business critical web or win
      applications you should be very proud of yourself.<br /><br />I guess the
      bottom line is this; In order to get the most out of your career and
      achive the best result in creating a solution you need to have a firm grip
      on the .Net framework. Your language choice needs to be one your happiest
      with but ultimately (as christopher stapleton said above) BOTH languages
      need to be understood. Knowing the framework means the syntax will follow,
      what ever language it is in.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972021'
  - comment_id: '210'
    comment_author: aspfun
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2008-07-22 02:56:00'
    comment_date_gmt: '2008-07-22 02:56:00'
    comment_content: If you check job market you will find more company need C# than VB. Why?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972022'
  - comment_id: '211'
    comment_author: vbcoder
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2008-08-12 11:23:44'
    comment_date_gmt: '2008-08-12 11:23:44'
    comment_content: >-
      Disagree with this article.<br />I use both vb.net &amp; C# for my work.
      The syntax of vb.net is ugly &amp; clumpsy. It is more difficult to read
      &amp; code.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209972025'
  - comment_id: '212'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com
    comment_author_IP: ''
    comment_date: '2011-10-25 09:29:00'
    comment_date_gmt: '2011-10-25 16:29:00'
    comment_content: "Although I still prefer both the readability of VB.NET the world has shifted in the four years since I wrote this and \_it is no longer the case that there are more VB than c# developers. Or at least is seams that way...\n\nDue to ignorance and\_intolerance of c# programmers\_VB has been stifled and pushed to the side. I am happy that it still exists in\_Windows\_8, but for how much longer.\n\n\"Viva la VB, abajo con c#\""
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '343793753'
