post:
  title: Configuring a PowerShell Adapter for the TFS Integration Platform
  link: >-
    https://nkdagility.com/blog/configuring-a-powershell-adapter-for-the-tfs-integration-platform/
  pubDate: Thu, 23 Jun 2011 03:58:19 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=3652
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p><img style="margin: 0px 20px 20px 0px; display: inline; float: left"
    align="left" src="http://blog.hinshelwood.com/files/2011/06/image_thumb.png"
    /></p>  <p>We have a customer who really, really want to ship source code
    from Team Foundation Server (TFS) to Perforce. Why you might ask… Well for
    many companies they can’t just migrate, they either need some sort of safety
    net, or have an external requirement that they MUST use a particular system
    as a matter of record.</p>  <p>But they really want to use TFS.</p>  <ul>  
    <li><strong>Perforce</strong> - <a
    href="http://stackoverflow.com/questions/6458927/sync-offline-changes-to-a-workspace-into-perforce">Sync
    offline changes to a workspace into Perforce</a> (StackOverflow.com) </li>
    </ul>  <p>Updates</p>  <ul>   <li><strong><font
    color="#ff0000">2011-06-27</font></strong> – I have added two new operating
    modes to increase the versatility (<em>RuleThemAll</em> |
    <em>ForEachAction</em>). These new modes do not run any .NET code at all and
    you have to do everything in PowerShell. I expect that PowerShell user will
    love RuleThemAll as all you need is one PowerShell per ChangeSet. </li>
    </ul>  <hr />  <p>We have to have some way of getting each of the check-ins
    out of TFS in order and writing them to the other system on a regular basis
    without having to write an Adapter for each new system. This will obviously
    not be a perfect scenario as it will not be tailored directly for the other
    system, but it should suffice for 90% of cases that I will encounter.</p> 
    <h2>The Theory</h2>  <p>The TFS Integration Platform Adapter I have written
    is really simple, and focuses on adaptability not perfection. What is the
    best tool for this… well PowerShell of course <img
    style="border-bottom-style: none; border-left-style: none; border-top-style:
    none; border-right-style: none" class="wlEmoticon wlEmoticon-smile"
    alt="Smile"
    src="http://blog.hinshelwood.com/files/2011/06/wlEmoticon-smile1.png" />,
    and with the Team Foundation Adapters already written and provided in the
    box, we only have to worry about the other side.</p>  <p>In the integration
    platform if you want to do the <em>writing</em>, rather than the
    <em>reading</em> I recently <a
    href="http://blog.hinshelwood.com/a-working-test-track-pro-adapter-for-the-tfs-integration-platform/">did
    for Test Track Pro</a>, then you concentrate on the IMigrationProvider
    interface which allows you to implement the ProcessChangeGroup method.</p> 
    <pre class="brush: vb; ruler: true; highlight: [7,16];">Public Overrides
    Function ProcessChangeGroup(changeGroup As
    Microsoft.TeamFoundation.Migration.Toolkit.ChangeGroup) As
    Microsoft.TeamFoundation.Migration.Toolkit.ConversionResult
        Dim conversionResult As New ConversionResult(_configurationService.MigrationPeer, _configurationService.SourceId)
        conversionResult.ChangeId = changeGroup.ChangeGroupId
        Dim OutDirectory As String = Me._configurationService.MigrationSource.SourceIdentifier
        Dim SourceRoot As String = Me._configurationService.Filters(0).Path
        TraceManager.TraceInformation(String.Format(&quot;Processing {0} actions - {1}&quot;, changeGroup.Actions.Count, changeGroup.Comment))
        If Not RunPowershell(&quot;ImportChangeGroup_Initial&quot;, changeGroup, conversionResult, OutDirectory) Then
            conversionResult.ChangeId = String.Empty
        End If
        For Each action As MigrationAction In changeGroup.Actions
            Dim path As String = ConvertPath(OutDirectory, SourceRoot, action.Path)
            If BuildLocalCache(changeGroup, conversionResult, SourceRoot, OutDirectory, path, action) Then
                conversionResult.ItemConversionHistory.Add(New ItemConversionHistory(changeGroup.Name, action.Version, path, String.Empty))
            End If
        Next
        If Not RunPowershell(&quot;ImportChangeGroup_Final&quot;, changeGroup, conversionResult, OutDirectory) Then
            conversionResult.ChangeId = String.Empty
        End If
        Return conversionResult
    End Function</pre>


    <p>For each change group that is found in TFS the Integration Platform calls
    this method. The Platform is going to keep track of which you have already
    done and what types of changes need to be done in what order. All we have to
    do is do something with them and pass back a ConversionResult object that
    details a ItemConversionHistory object for each of the Actions that were
    part of the change group.</p>


    <p>You can see from the code above that I am calling a PowerShell script at
    both the beginning and end of the process. You can’t see it here, but a
    PowerShell is also called for each of the actions. During this process we
    build up a record of what we have done and pass back the completed
    ConversionResult to the TFS Integration Platform so it can check all of the
    items that we have processed off the list.</p>


    <p>In order to add some amount of flexibility to the system I am allowing a
    different PowerShell to be called for each ContentType and ChangeAction
    combination:</p>


    <table border="0" cellspacing="0" cellpadding="2" width="457"><tbody>
        <tr>
          <td valign="top" width="277"><strong>Content Type</strong></td>

          <td valign="top" width="140"><strong>Action</strong></td>

          <td valign="top" width="137">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="296">Version Controlled Folder</td>

          <td valign="top" width="147">Add</td>

          <td valign="top" width="142">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="300">Version Controlled Folder</td>

          <td valign="top" width="151">Edit</td>

          <td valign="top" width="144">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="299">Version Controlled Folder</td>

          <td valign="top" width="153">Delete</td>

          <td valign="top" width="145">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="298">Version Controlled Folder</td>

          <td valign="top" width="155">Rename</td>

          <td valign="top" width="145">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="297">Version Controlled File</td>

          <td valign="top" width="156">Add</td>

          <td valign="top" width="145">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="296">Version Controlled File</td>

          <td valign="top" width="157">Edit</td>

          <td valign="top" width="144">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="296">Version Controlled File</td>

          <td valign="top" width="158">Delete</td>

          <td valign="top" width="144">&#160;</td>
        </tr>

        <tr>
          <td valign="top" width="295">Version Controlled File</td>

          <td valign="top" width="159">Rename</td>

          <td valign="top" width="144">&#160;</td>
        </tr>
      </tbody></table>

    <p><strong>Figure: Supported Actions</strong></p>


    <p>In the configuration for the Adapter I have added a bunch of keys that
    translate to each of the entries above that will allow you to configure
    which scripts you want to use. You can use them all if you want or only use
    one.</p>


    <pre class="brush: xml; ruler: true;">&lt;CustomSettings&gt;
      &lt;!-- 
        Powershell Arguments
        
        $IpChangeGroup = Microsoft.TeamFoundation.Migration.Toolkit.ChangeGroup
        $IpConversionResult = Microsoft.TeamFoundation.Migration.Toolkit.ConversionResult
        $IpMigrationAction = Microsoft.TeamFoundation.Migration.Toolkit.MigrationAction
        $IpNewPath = c:TempOutputFolderImportRun1{localpath}
        $IpLocalRoot = c:TempOutputFolderImportRun1
        
        PowerShell Execution Mode:
        
        RuleThemAll = Lets just have a single PowerShell that does everything. Don't forget to update the IpConversionResult with all of the results.
        ForEachAction = Calls a PowerShell script for each action as below
        WithLocalCache = Original mode that maintains a local copy of the files and calls powershell for each Action
        
      --&gt;
      &lt;CustomSetting SettingKey=&quot;PowerShellExecutionMove&quot; SettingValue=&quot;WithLocalCache&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroup&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroup_Initial&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Add&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Edit&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Delete&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Rename&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Add&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Edit&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Rename&quot; SettingValue=&quot;&quot; /&gt;
      &lt;CustomSetting SettingKey=&quot;ImportChangeGroup_Final&quot; SettingValue=&quot;&quot; /&gt;
    &lt;/CustomSettings&gt;</pre>


    <p><strong>Figure: Custom settings for configuring PowerShell
    files</strong></p>


    <p>As might be eluded to by the list of arguments above I am passing a bunch
    of them into PowerShell that should be of use to the person configuring the
    options. One of the really nice things about using PowerShell is that you
    can pass in a complicated object graph and have it available for the
    PowerShell user. You can also get objects back out again, but in this case I
    only need in.</p>


    <pre class="brush: vb; ruler: true; highlight: [7,8,10,11,13];">Public
    Function ExecutePowershell(powerShellKey As String, changeGroup As
    ChangeGroup, conversionResult As ConversionResult, localRoot As String,
    Optional action As MigrationAction = Nothing, Optional newPath As String =
    &quot;&quot;) As List(Of PSObject)
        _pipeline = _runspace.CreatePipeline()
        Dim psFile As String = GetPowerShellFile(powerShellKey)
        Dim results As New List(Of PSObject)
        If File.Exists(psFile) Then
            Dim command As New Command(psFile)
            command.Parameters.Add(New CommandParameter(&quot;IpChangeGroup&quot;, changeGroup))
            command.Parameters.Add(New CommandParameter(&quot;IpConversionResult&quot;, conversionResult))
            If Not action Is Nothing Then
                command.Parameters.Add(New CommandParameter(&quot;IpMigrationAction&quot;, action))
                command.Parameters.Add(New CommandParameter(&quot;IpNewPath&quot;, action))
            End If
            command.Parameters.Add(New CommandParameter(&quot;IpLocalRoot&quot;, localRoot))
            command.MergeMyResults(PipelineResultTypes.Error, PipelineResultTypes.Output)
            _pipeline.Commands.Add(command)
            Dim dt As DateTime = Now
            results.AddRange(_pipeline.Invoke())
        Else
            TraceManager.TraceWarning(String.Format(&quot;PowerShell: DOES NOT EXIST for custom setting '{0}'&quot;, powerShellKey))
        End If
        Return results
    End Function</pre>


    <p><strong>Figure: Calling PowerShell from VB.NET with
    Parameters</strong></p>


    <p>This means that you can access things like the Comment from the original
    change group in TFS as well as the person that did the check-in.</p>


    <pre class="brush: ps; ruler: true;">p4 commit -d
    $IpChangeGroup.Comment</pre>


    <p><strong>Figure: PowerShell to check-in all outstanding files with the
    original comment</strong></p>


    <h2>The Practice</h2>


    <p>In order to run this adapter you are going to need somewhere to install
    and run the <a href="http://tfsintegration.codeplex.com/">TFS Integration
    Platform</a>. I would suggest the the TFS server itself, but if you have a
    problem with that then find another server.</p>


    <p>The <a href="http://tfsintegration.codeplex.com/">TFS Integration
    Platform</a> can run with a UI so we will be using that to configure it, but
    it can also run off the command line. If you are going to want this tool to
    run in more than “One-Time” mode then you are going to want to install the
    service. This will run the sync even if no one is logged on.</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLca8aa6.png"><img
    style="background-image: none; border-right-width: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; border-top-width: 0px;
    border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLca8aa6" border="0" alt="SNAGHTMLca8aa6"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLca8aa6_thumb.png"
    width="509" height="398" /></a></p>


    <p><strong>Figure: Install the Service if you will be syncing</strong></p>


    <p>Once you have it installed you will need a configuration file as a
    template. This file can be pretty loose, or it can be really strict in what
    you can select. Depending on the Adapters that you install out of the box
    will depend on the templates that you get. You can have Work Item Tracking
    only, Version Control only or a combination.</p>


    <p>In this case we will be using my magic config file:</p>


    <pre class="brush: xml; ruler: true;">&lt;?xml version=&quot;1.0&quot;
    encoding=&quot;utf-16&quot;?&gt;

    &lt;Configuration
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
                   UniqueId=&quot;8ecc79e4-b97c-4e78-a0c8-f20062ebdaa9&quot; FriendlyName=&quot;NWC - TFS to Powershell&quot;&gt;
      &lt;Providers&gt;
        &lt;Provider ReferenceName=&quot;febc091f-82a2-449e-aed8-133e5896c47a&quot; FriendlyName=&quot;TFS 2010 Migration VC Provider&quot; /&gt;
        &lt;Provider ReferenceName=&quot;566c001e-e476-4a07-8447-b2284c55a20e&quot; FriendlyName=&quot;Powershell Adapter&quot; /&gt;
      &lt;/Providers&gt;
      &lt;Addins&gt;
        &lt;Addin ReferenceName=&quot;cdde6b6b-72fc-43b6-bbd1-b8a89a788c6f&quot; FriendlyName=&quot;TFS Active Directory User Id Lookup Service Addin&quot;&gt;
          &lt;CustomSettings /&gt;
        &lt;/Addin&gt;
      &lt;/Addins&gt;
      &lt;SessionGroup CreationTime=&quot;2011-06-23T21:29:10.9738265Z&quot; FriendlyName=&quot;NWC - TFS to Powershell&quot;
                    SessionGroupGUID=&quot;571b708d-c683-4540-adf9-f5843dea20f9&quot; Creator=&quot;MrHinsh&quot; SyncIntervalInSeconds=&quot;160&quot; SyncDurationInMinutes=&quot;0&quot;&gt;
        &lt;MigrationSources&gt;
          &lt;MigrationSource InternalUniqueId=&quot;4199bde3-c26c-4b6d-86bb-8328e221e499&quot; FriendlyName=&quot;mytfs.company.com(VC)&quot; ServerIdentifier=&quot;40a26de8-a27e-4bef-9c9b-87cc64ad6cbc&quot; ServerUrl=&quot;http://mytfs.company.com:8080/tfs/DefaultCollection&quot; SourceIdentifier=&quot;TeamProject1&quot; ProviderReferenceName=&quot;febc091f-82a2-449e-aed8-133e5896c47a&quot; EndpointSystemName=&quot;TFS&quot;&gt;
            &lt;Settings&gt;
              &lt;Addins /&gt;
              &lt;UserIdentityLookup&gt;
                &lt;LookupAddin Precedence=&quot;1&quot; ReferenceName=&quot;cdde6b6b-72fc-43b6-bbd1-b8a89a788c6f&quot; /&gt;
              &lt;/UserIdentityLookup&gt;
              &lt;DefaultUserIdProperty UserIdPropertyName=&quot;DisplayName&quot; /&gt;
            &lt;/Settings&gt;
            &lt;CustomSettings&gt;
              &lt;CustomSetting SettingKey=&quot;EnableBypassRuleDataSubmission&quot; SettingValue=&quot;True&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;DisableAreaPathAutoCreation&quot; SettingValue=&quot;False&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;DisableIterationPathAutoCreation&quot; SettingValue=&quot;False&quot; /&gt;
            &lt;/CustomSettings&gt;
            &lt;StoredCredential /&gt;
          &lt;/MigrationSource&gt;
          &lt;MigrationSource InternalUniqueId=&quot;9163311f-9312-47e6-a635-cae1817a2488&quot; FriendlyName=&quot;Powershell (vc)&quot; ServerIdentifier=&quot;40d0185d-e576-409b-ad5f-9fae3ac3d73e&quot; ServerUrl=&quot;fieldnotused&quot; SourceIdentifier=&quot;C:tempTestRun1&quot; ProviderReferenceName=&quot;566c001e-e476-4a07-8447-b2284c55a20e&quot;&gt;
            &lt;Settings&gt;
              &lt;Addins /&gt;
              &lt;UserIdentityLookup&gt;
                &lt;LookupAddin Precedence=&quot;1&quot; ReferenceName=&quot;cdde6b6b-72fc-43b6-bbd1-b8a89a788c6f&quot; /&gt;
              &lt;/UserIdentityLookup&gt;
              &lt;DefaultUserIdProperty UserIdPropertyName=&quot;DisplayName&quot; /&gt;
            &lt;/Settings&gt;
            &lt;CustomSettings&gt;
              &lt;CustomSetting SettingKey=&quot;PowerShellExecutionMove&quot; SettingValue=&quot;WithLocalCache&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroup_Initial&quot; SettingValue=&quot;C:Program Files (x86)Microsoft Team Foundation Server Integration ToolsConfigurationPowerShellSamplesPerforcePerforceInitilise.ps1&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Add&quot; SettingValue=&quot;&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Edit&quot; SettingValue=&quot;&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Delete&quot; SettingValue=&quot;&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFolder_Rename&quot; SettingValue=&quot;&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Add&quot; SettingValue=&quot;C:Program Files (x86)Microsoft Team Foundation Server Integration ToolsConfigurationPowerShellSamplesPerforcePerforceFileAdd.ps1&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Edit&quot; SettingValue=&quot;C:Program Files (x86)Microsoft Team Foundation Server Integration ToolsConfigurationPowerShellSamplesPerforcePerforceFileEdit.ps1&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Delete&quot; SettingValue=&quot;&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroupAction_VersionControlledFile_Rename&quot; SettingValue=&quot;&quot; /&gt;
              &lt;CustomSetting SettingKey=&quot;ImportChangeGroup_Final&quot; SettingValue=&quot;C:Program Files (x86)Microsoft Team Foundation Server Integration ToolsConfigurationPowerShellSamplesPerforcePerforceCommit.ps1&quot; /&gt;
            &lt;/CustomSettings&gt;
            &lt;StoredCredential /&gt;
          &lt;/MigrationSource&gt;
        &lt;/MigrationSources&gt;
        &lt;Sessions&gt;
          &lt;Session CreationTime=&quot;2011-06-23T21:29:10.9188265Z&quot; SessionUniqueId=&quot;548bb392-34f2-4fa4-8fe9-e824380f651f&quot; FriendlyName=&quot;Version Control Session&quot; LeftMigrationSourceUniqueId=&quot;4199bde3-c26c-4b6d-86bb-8328e221e499&quot; RightMigrationSourceUniqueId=&quot;9163311f-9312-47e6-a635-cae1817a2488&quot; SessionType=&quot;VersionControl&quot;&gt;
            &lt;EventSinks /&gt;
            &lt;CustomSettings&gt;
              &lt;SettingXml /&gt;
              &lt;SettingXmlSchema /&gt;
            &lt;/CustomSettings&gt;
            &lt;Filters&gt;
              &lt;FilterPair Neglect=&quot;false&quot;&gt;
                &lt;FilterItem MigrationSourceUniqueId=&quot;4199bde3-c26c-4b6d-86bb-8328e221e499&quot; FilterString=&quot;$/TeamProject1/Folder1&quot; /&gt;
                &lt;FilterItem MigrationSourceUniqueId=&quot;9163311f-9312-47e6-a635-cae1817a2488&quot; FilterString=&quot;$/TeamProject1/Folder1&quot; /&gt;
              &lt;/FilterPair&gt;
            &lt;/Filters&gt;
          &lt;/Session&gt;
        &lt;/Sessions&gt;
        &lt;Linking&gt;
          &lt;CustomSettings /&gt;
          &lt;LinkTypeMappings /&gt;
        &lt;/Linking&gt;
        &lt;WorkFlowType Frequency=&quot;ContinuousAutomatic&quot; DirectionOfFlow=&quot;Unidirectional&quot; SyncContext=&quot;Disabled&quot; /&gt;
        &lt;CustomSettings /&gt;
        &lt;UserIdentityMappings EnableValidation=&quot;false&quot;&gt;
          &lt;UserIdentityLookupAddins /&gt;
        &lt;/UserIdentityMappings&gt;
        &lt;ErrorManagement&gt;
          &lt;ErrorRouters /&gt;
          &lt;ReportingSettings /&gt;
        &lt;/ErrorManagement&gt;
      &lt;/SessionGroup&gt;
    &lt;/Configuration&gt;</pre>


    <pre class="brush: xml; ruler: true; highlight:
    [24,25,49,75,76,77,78,79,80,81,82,83,104,105];"><strong>Figure:
    Configuration for the Powershell Adapter</strong></pre>


    <p>I have highlighted the important parts above and we have already
    described some of the important bits above, but there are only really three
    important things to configure:</p>


    <ul>
      <li><strong>Tfs Source folder </strong>- (e.g. $/TeamProject1/Folder1) 

        <p>The TFS Source Folder defines where in TFS you want to get the data. The Adapter does not currently support branches so it would be best to pick a folder that does not contain any. </p>
      </li>

      <li><strong>Local Output Folder</strong> - (e.g. c:Enlistment1995Depot) 

        <p>This is the folder where the system will write out the files and folders before calling PowerShell. This would usually be the actual Workspace folder for the other system, or could be anywhere. </p>
      </li>

      <li><strong>Power Shell File</strong> - (e.g. c:Enlistment1995SyncPerforceEditsWithDepot.ps1) 

        <p>The PowerShell files are easily configured as described. Remember that for every change “Add”, “Edit” or “Delete” a respective PowerShell can be configured to be called. 
          <br />note: You can call a single PowerShell or have it call the individuals, but not manage the file space.</p>
      </li>
    </ul>


    <p>Now that you are able to configure the config file, it is time to setup
    the run.</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe3e86f.png"><img
    style="background-image: none; border-right-width: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; border-top-width: 0px;
    border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLe3e86f" border="0" alt="SNAGHTMLe3e86f"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe3e86f_thumb.png"
    width="640" height="439" /></a></p>


    <p><strong>Figure: Creating a new Configuration for the TFS Integration
    Platform</strong></p>


    <p>We need to create a new configuration and select the config file template
    that we built. Don’t worry, we can change the individual settings later.</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe5b54e.png"><img
    style="background-image: none; border-right-width: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; border-top-width: 0px;
    border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLe5b54e" border="0" alt="SNAGHTMLe5b54e"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe5b54e_thumb.png"
    width="640" height="439" /></a></p>


    <p><strong>Figure: Using the Sample PowerShell Configuration</strong></p>


    <p>&#160;</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe83fa3.png"><img
    style="background-image: none; border-right-width: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; border-top-width: 0px;
    border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLe83fa3" border="0" alt="SNAGHTMLe83fa3"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe83fa3_thumb.png"
    width="640" height="434" /></a></p>


    <p><strong>Figure: You can reconfigure the TFS side to point at a valid TFS
    server and Project.</strong></p>


    <p>&#160;</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe8d29e.png"><img
    style="background-image: none; border-right-width: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; border-top-width: 0px;
    border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLe8d29e" border="0" alt="SNAGHTMLe8d29e"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLe8d29e_thumb.png"
    width="400" height="400" /></a></p>


    <p><strong>Figure: Make sure that your folder does not “contain” a
    branch</strong></p>


    <p>For a very strange reason that probably spells from my laziness, you need
    to set both the left and the right hand side of the Paths to be the same
    thing. I am sure that this is just a temporary work around, <em>but you know
    how they are!</em></p>


    <p><a href="http://blog.hinshelwood.com/files/2011/06/image17.png"><img
    style="background-image: none; border-right-width: 0px; margin: 0px;
    padding-left: 0px; padding-right: 0px; display: inline; border-top-width:
    0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="image" border="0" alt="image"
    src="http://blog.hinshelwood.com/files/2011/06/image_thumb17.png"
    width="640" height="80" /></a></p>


    <p><strong>Figure: Paths must be the same</strong></p>


    <p>You can now “Save to Database” the configuration and click the “Start”
    button on the left to start the first run on the Adapter.</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLed1f28.png"><img
    style="background-image: none; border-right-width: 0px; margin: 0px;
    padding-left: 0px; padding-right: 0px; display: inline; border-top-width:
    0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLed1f28" border="0" alt="SNAGHTMLed1f28"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLed1f28_thumb.png"
    width="640" height="434" /></a></p>


    <p><strong>Figure: The Adapter then starts it run</strong></p>


    <p>There is not much more to see, the files are populated by change set in
    the folder that was selected and the PowerShell scripts that were configured
    run.</p>


    <p><a
    href="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLefcfb1.png"><img
    style="background-image: none; border-right-width: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; border-top-width: 0px;
    border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px"
    title="SNAGHTMLefcfb1" border="0" alt="SNAGHTMLefcfb1"
    src="http://blog.hinshelwood.com/files/2011/06/SNAGHTMLefcfb1_thumb.png"
    width="640" height="434" /></a></p>


    <p><strong>Figure: Some Changesets are bigger than others</strong></p>


    <p>Once and a while there are some really big Changesets processed. This one
    is actually pretty small and only had 1846 change actions.</p>


    <h2>Conclusion</h2>


    <p>Although this process can take a while, the fact that you can configure
    the PowerShell any way you like on the fly makes it a very versatile
    adapter. Although the down side is that you have to write in PowerShell <img
    style="border-bottom-style: none; border-left-style: none; border-top-style:
    none; border-right-style: none" class="wlEmoticon wlEmoticon-smile"
    alt="Smile"
    src="http://blog.hinshelwood.com/files/2011/06/wlEmoticon-smile1.png" /></p>


    <p>If you need a copy of your TFS Version Control data somewhere other than
    TFS for posterity, or you need a migration from <a
    href="http://blog.hinshelwood.com/a-working-test-track-pro-adapter-for-the-tfs-integration-platform/">Test
    Track Pro to TFS</a>, then just ping me and see how we can help.</p>


    <p><a href="http://nwcadence.com/#">Request for Services</a></p>
  - ''
  post_id: '3652'
  post_date: '2011-06-22 20:58:19'
  post_date_gmt: '2011-06-23 03:58:19'
  post_modified: '2011-06-22 20:58:19'
  post_modified_gmt: '2011-06-23 03:58:19'
  comment_status: open
  ping_status: open
  post_name: configuring-a-powershell-adapter-for-the-tfs-integration-platform
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '339895602'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: robotsmeta
    meta_value: index,follow
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1dLqfjQ
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474459002;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10677;}i:1;a:1:{s:2:"id";i:10149;}i:2;a:1:{s:2:"id";i:3279;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2011-06-22-configuring-a-powershell-adapter-for-the-tfs-integration-platform.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '590'
  comment:
  - comment_id: '1031'
    comment_author: >-
      TOC: TFS Integration Tools Blog Posts and Reference Sites - Willy&#039;s
      Cave - Site Home - MSDN Blogs
    comment_author_email: ''
    comment_author_url: >-
      http://blogs.msdn.com/b/willy-peter_schaub/archive/2011/06/06/toc-tfs-integration-tools.aspx
    comment_author_IP: 65.55.57.17
    comment_date: '2011-06-23 06:38:53'
    comment_date_gmt: '2011-06-23 13:38:53'
    comment_content: >-
      [...] Configuring a PowerShell Adapter for the TFS Integration Platform
      [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:15:"1308839681.2184";s:7:"message";s:46:"MrHinsh
        changed the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1032'
    comment_author: >-
      TOC: TFS Integration Tools Blog Posts and Reference Sites - Willy&#039;s
      Reflections - Site Home - MSDN Blogs
    comment_author_email: ''
    comment_author_url: >-
      http://blogs.msdn.com/b/willy-peter_schaub/archive/2012/03/20/toc-tfs-integration-tools-blog-posts-and-reference-sites.aspx
    comment_author_IP: 65.55.57.71
    comment_date: '2013-03-14 16:19:16'
    comment_date_gmt: '2013-03-14 23:19:16'
    comment_content: >-
      [...] Configuring a PowerShell Adapter for the TFS Integration Platform
      [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
      meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1363362011.903335;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '12666'
    comment_author: BANNER
    comment_author_email: action_jackson_p@hotmail.com
    comment_author_url: ''
    comment_author_IP: 173.226.135.235
    comment_date: '2015-07-13 18:12:00'
    comment_date_gmt: '2015-07-13 17:12:00'
    comment_content: >-
      Is there an adaptor to go from TFVC to Git-TF while preserving the Work
      Item history and changesets?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '2133774399'
