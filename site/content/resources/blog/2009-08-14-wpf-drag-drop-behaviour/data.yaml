post:
  title: Wpf Drag & Drop behaviour
  link: https://nkdagility.com/blog/wpf-drag-drop-behaviour/
  pubDate: Fri, 14 Aug 2009 04:16:04 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2009/08/14/wpf-drag-amp-drop-behaviour.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p>A colleague of mine was having a bit of trouble getting drag and drop working in a way that fitted well with the MVVM pattern. This is really quite simple once you have a certain level of understanding of Patterns, but is a complete nightmare if you do not.</p>  <p>One of the founding principals of MVVM is that you should never be writing code in your code behind, it should all be encapsulated away and be bindable in XAML to achieve the result. Anyone who has tackled drag and drip will have suddenly found their code behind covered in code for handling both the drag and the drop, and multiplied up when dealing with multiple controls.</p>  <p>I cruised the web for information, of which I found plenty and settled on an example by <a title=\"Bea Stollnitz on Silverlight and WPF\" href=\"http://www.beacosta.com\" target=\"_blank\">Bea Stollnitz</a> of Microsoft. In her <a title=\"How can I drag and drop items between data bound ItemsControls?\" href=\"http://www.beacosta.com/blog/?p=53\" target=\"_blank\">post</a> i had found one of the best and most intuitive examples of the Drag &amp; Drop Behaviour written in C#.</p>  <p>I am not going to go into all of her code which she has available for download, just to say that it is nice, and is exactly what I am looking for even with the limitations that she described.</p>  <p>The functionality available allows you to drag a piece of data from one ItemsControl to another of the same data type or to reorder within itself. It provides for a floating template for the dragging item and a visual cue for the drop location.</p>  <p><img style=\"border-bottom: 0px;border-left: 0px;margin: 10px auto;float: none;border-top: 0px;border-right: 0px\" border=\"0\" alt=\"InsertionAdorner\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfDragDropbehaviour_E187-InsertionAdorner_3.png\" width=\"773\" height=\"464\" /> </p>  <p>I wanted to augment this to allow for other scenarios while keeping as much functionality as possible.</p>  <p>Likes:</p>  <ul>   <li>Drag functionality</li>    <li>Drag templating – nice!</li>    <li>Encapsulation of logic</li> </ul>  <p>Dislikes:</p>  <ul>   <li>No way to control drop behaviour</li> </ul>  <p>My version lets you inject additional functionality at runtime. The adjusted class diagram shows the relationships, but we only really use the DragDropBehaviour class</p>  <p><img style=\"border-bottom: 0px;border-left: 0px;margin: 10px auto;float: none;border-top: 0px;border-right: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfDragDropbehaviour_E187-image_8.png\" width=\"500\" height=\"434\" />\_</p>  <p>You can still use the standard options:</p>  <pre>&lt;DockPanel&gt;\n    &lt;Label DockPanel.Dock=\"Top\"  Content=\"Checkout\" /&gt;\n    &lt;ListBox     hlb:DragDropBehaviour.IsDragSource=\"true\" \n                 hlb:DragDropBehaviour.IsDropTarget=\"true\" \n                 hlb:DragDropBehaviour.DragTemplate=\"{StaticResource MyTemplate}\" \n                 ItemsSource=\"{Binding Items}\" \n                 MinWidth=\"100\" \n                 MinHeight=\"100\" \n                 AllowDrop=\"True\" \n                 SelectionMode=\"Multiple\"&gt;\n    &lt;/ListBox&gt;\n&lt;/DockPanel&gt;</pre>\n\n<p>But I have added another bindable option of DropProcessor that allows you to override the default DropProcessor to achieve whatever you want.</p>\n\n<pre>&lt;ListBox hlb:DragDropBehaviour.DropProcessor=\"{Binding DropProcessor}\" \n    hlb:DragDropBehaviour.IsDragSource=\"true\" \n    hlb:DragDropBehaviour.IsDropTarget=\"true\" \n    hlb:DragDropBehaviour.DragTemplate=\"{StaticResource moo}\" \n    ItemsSource=\"{Binding Items}\" \n    MinWidth=\"100\" \n    MinHeight=\"100\"&gt;</pre>\n\n<p>\_</p>\n\n<p>In this example I have created a little gun shop called “Nutters R’ Us” where you can buy weapons and ordinance. You can see that there is an area for weapons, and area for ordinance and an area for your selected purchases.</p>\n\n<p><img style=\"border-bottom: 0px;border-left: 0px;margin: 10px auto;float: none;border-top: 0px;border-right: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfDragDropbehaviour_E187-image_7.png\" width=\"390\" height=\"293\" /> </p>\n\n<p>I have added a custom DropProcessor only to the Checkout area that only applies when you drop items of type “OrdinanceViewModel”</p>\n\n<pre>Public Class CheckoutDropProcessor\n    Inherits DropProcessor\n\n    Public Overrides Function GetDropAdorner(ByVal behaviour As DragDropBehaviour, ByVal adornerLayer As System.Windows.Documents.AdornerLayer) As DropAdorner\n        If TypeOf behaviour.TargetItemContainer.DataContext Is WeaponViewModel Then\n            If TypeOf behaviour.SourceItemContainer.DataContext Is OrdnanceViewModel Then\n                Return New OrdnanceToWeaponDropAdorner(behaviour, adornerLayer)\n            End If\n        End If\n        Return MyBase.GetDropAdorner(behaviour, adornerLayer)\n    End Function\n\n    Public Overrides Function IsDropAllowed(ByVal behaviour As DragDropBehaviour, ByVal draggedItem As Object) As Boolean\n        If Not behaviour.SourceItemContainer Is Nothing AndAlso TypeOf behaviour.SourceItemContainer.DataContext Is OrdnanceViewModel Then\n            If Not behaviour.TargetItemContainer Is Nothing AndAlso TypeOf behaviour.TargetItemContainer.DataContext Is WeaponViewModel Then\n                Return True\n            End If\n            Return False\n        End If\n        Return MyBase.IsDropAllowed(behaviour, draggedItem)\n    End Function\n\n    Public Overrides Sub Drop(ByVal behaviour As DragDropBehaviour, ByVal draggedItem As Object, ByVal dropEffect As System.Windows.DragDropEffects)\n        If Not behaviour.TargetItemContainer Is Nothing AndAlso TypeOf behaviour.TargetItemContainer.DataContext Is WeaponViewModel Then\n            If TypeOf behaviour.SourceItemContainer.DataContext Is OrdnanceViewModel Then\n                CType(behaviour.TargetItemContainer.DataContext, WeaponViewModel).AddOrdinance(CType(behaviour.SourceItemContainer.DataContext, OrdnanceViewModel))\n                Dim indexRemoved As Integer = -1\n                If ((dropEffect And DragDropEffects.Move) &lt;&gt; DragDropEffects.None) Then\n                    indexRemoved = Utilities.RemoveItemFromItemsControl(behaviour.SourceItemsControl, draggedItem)\n                End If\n                If (((indexRemoved &lt;&gt; -1) AndAlso (behaviour.SourceItemsControl Is behaviour.TargetItemsControl)) AndAlso (indexRemoved &lt; behaviour.InsertionIndex)) Then\n                    behaviour.InsertionIndex -= 1\n                End If\n                Exit Sub\n            End If\n        End If\n        MyBase.Drop(behaviour, draggedItem, dropEffect)\n\n    End Sub\n\nEnd Class</pre>\n\n<p><img style=\"border-bottom: 0px;border-left: 0px;margin: 10px auto;float: none;border-top: 0px;border-right: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfDragDropbehaviour_E187-image_11.png\" width=\"440\" height=\"236\" /> </p>\n\n<p>This class inherits from the base class “DropProcessor” that provides the same functionality as the original article, but I have </p>\n\n<p>overridden couple of methods. The first, “GetDropAdorner” test to make sure that you are dropping a OrdinanceViewModel onto a WeaponViewModel and provides a different and custom DropAdorner that instead of providing the lovely insertion visual it just applied a “IsDropTarget” property to the ListBoxItem to allow a template to control the visual. The IsAllowedDrop also test for this case, as does the Drop method. In all cases they are just testing for a special case of Drop and call the base classes methods.</p>\n\n<p>The diagram for the demo app is a little large, but you can see how much I still suck at MVVM, and although I have learned a lot doing this demo, I am still tempted to share ViewModels… but that is a bad habit.</p>\n\n<p>\_<img style=\"border-bottom: 0px;border-left: 0px;margin: 10px auto;float: none;border-top: 0px;border-right: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-WindowsLiveWriter-WpfDragDropbehaviour_E187-image_4a27137a-a443-45ba-b866-2c3b2f2dbdf5.png\" width=\"600\" height=\"874\" /> </p>\n\n<p>I have highlighted the two main classes, and we have already discussed the CheckoutDropProcessor. This allows you the flexibility to augment your drop scenarios without all of your developers having to get too deep in the guts on the behaviour, thus leaving them plenty of time for the real work of actually building something useful.</p>\n\n<p>I have put this <a href=\"http://hinshlabs.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=31504\" target=\"_blank\">up on Codeplex</a>, and both the <a href=\"http://hinshlabs.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=31504#DownloadId=79055\" target=\"_blank\">source</a> and <a href=\"http://hinshlabs.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=31504#DownloadId=79056\" target=\"_blank\">binaries</a> are available.</p>\n\n<div style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\" class=\"wlWriterEditableSmartContent\">Technorati Tags: <a href=\"http://technorati.com/tags/.NET\" rel=\"tag\">.NET</a>\_<a href=\"http://technorati.com/tags/WPF\" rel=\"tag\">WPF</a>\_<a href=\"http://technorati.com/tags/CodeProject\" rel=\"tag\">CodeProject</a>\_<a href=\"http://technorati.com/tags/MVVM\" rel=\"tag\">MVVM</a>\_<a href=\"http://technorati.com/tags/Silverlight\" rel=\"tag\">Silverlight</a>\_</div>"
  - ''
  post_id: '92'
  post_date: '2009-08-14 04:16:04'
  post_date_gmt: '2009-08-14 04:16:04'
  post_modified: '2009-08-14 04:16:04'
  post_modified_gmt: '2009-08-14 04:16:04'
  comment_status: open
  ping_status: open
  post_name: wpf-drag-drop-behaviour
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '311601948'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _thumbnail_id
    meta_value: '7080'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1b3z9qO
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:2:{s:32:"dd53846630cc162c16757e98234d092a";a:2:{s:7:"expires";i:1474712710;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:125;}i:1;a:1:{s:2:"id";i:9964;}i:2;a:1:{s:2:"id";i:10649;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474751326;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:65;}i:1;a:1:{s:2:"id";i:125;}i:2;a:1:{s:2:"id";i:9964;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2009-08-14-wpf-drag-drop-behaviour.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '1179'
  comment:
    comment_id: '586'
    comment_author: Nyubi
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2009-08-20 06:08:04'
    comment_date_gmt: '2009-08-20 06:08:04'
    comment_content: Nice post! Is there more related topics you post? Thx for sharing :)
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209970093'
