post:
  title: TFS vs. Subversion fact check
  link: https://nkdagility.com/blog/tfs-vs-subversion-fact-check/
  pubDate: Thu, 14 Oct 2010 16:30:53 +0000
  creator: MrHinsh
  guid:
    _: >-
      http://geekswithblogs.net/hinshelm/archive/2010/10/14/tfs-vs.-subversion-fact-check.aspx
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p><img style=\"border-right-width: 0px;margin: 0px 20px;padding-left: 0px;padding-right: 0px;float: left;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px\" border=\"0\" alt=\"subversion\" align=\"left\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-Windows-Live-Writer-32ab51073e36_8B5F-subversion_5cf7d134-8ccf-46c4-8b3c-563f6131ebfc.png\" width=\"48\" height=\"48\" />I spotted a good comparison of <a href=\"http://dotnet.dzone.com/news/tfs-vs-subversion\">TFS vs. Subversion</a> by <a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a> on DZone (you can also read the <a href=\"http://dobrzanski.net/2010/04/17/tfs-subversion/\">original post</a>) but I feel that a couple of the points were either out of date, or borne out of a lack of knowledge of the product, or even more likely I just missed the point. This article was taken from the perspective of an SVN user who has moved to TFS, and I am not in that category. </p>  <br />  <ul>   <li>     <p><strong><font color=\"#ff0000\">Updated 15th October 2010</font></strong></p>      <ul>       <li>         <p><a href=\"http://www.adamcogan.com/\">Adam Cogan</a> provided some very useful fixes to make this a little more readable.</p>       </li>        <li>         <p><a href=\"http://blogs.msdn.com/b/willy-peter_schaub/archive/2010/07/20/introducing-the-visual-studio-alm-rangers-sven-hubert.aspx\">Sven Hubert</a> wanted some advantages as well, but with this post I wanted to specifically target the issues and problems that an SVN user had encountered which is why I only targeted weaknesses. </p>       </li>        <li>         <p><a href=\"http://www.maxiasp.net/\">Bahadir ARSLAN</a> wanted to call out the shell integration provided by the Power Tools. </p>       </li>     </ul>   </li>    <li>     <p><font color=\"#ff0000\"><strong>Updated 18th October 2010</strong></font> </p>      <ul>       <li>         <p><a href=\"http://jeroen.haegebaert.com/\">Jeroen Haegebaert</a> provided some useful comments on Checking out which I have answered inline.</p>       </li>     </ul>   </li>    <li>     <p><font color=\"#ff0000\"><strong>Updated 19th October 2010</strong></font> </p>      <ul>       <li>         <p><a href=\"http://blog.benday.com/\">Ben Day</a> provided some useful updates </p>       </li>        <li>         <p>Simon Bromberger made some excellent points about rollback being a little hidden, but any TFS Admin with his salt can use a command line</p>       </li>     </ul>   </li> </ul>  <hr />  <p>I want to take a look at each of the “Weak points” mentioned and see if there is anything in them. There are numerous things that TFS does that are not even possible in SVN as SVN is just a source control system and not a full ALM platform. The goal of this post is specifically to dispel myths and target issues that users have moving from SVN to TFS.</p>  <h2>#1 – Branch confusion</h2>  <blockquote>   <p>&gt;&gt;Subversion promotes a very clear view (similar to CVS) on the files tree on the server: trunk, branches, tags. In TFS everything is in one bag – branches are simple directories among the other content of ‘the trunk’. It still looks messy to me.      <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p>Fixed in TFS 2010: This was the case in versions prior to TFS 2010, but with the new branching features it is easy to both see where your branches are and what change sets have been merged to which branches.</p>  <p><img style=\"border-right-width: 0px;margin: 0px 20px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-Windows-Live-Writer-32ab51073e36_8B5F-image_f171a787-92a3-4e31-b92c-7bbe514adf44.png\" width=\"409\" height=\"469\" />     <br /><strong>Figure: Branches are easy to identify </strong></p>  <p>If you have your branches setup as just directories in the trunk then it is probably the case that your company is just doing it wrong. You should have a standard layout as I have shown above, and indeed this is the format that is recommended in the <a href=\"http://tfsbranchingguideiii.codeplex.com/\">TFS Branching Guidance</a> and I would recommend that you read it before you just dive into branching.</p>  <h2>#2 – Checking out</h2>  <blockquote>   <p>&gt;&gt;If you want to edit a file you need to check it out for edit so that it’s listed in <em>Pending Changes</em> window after it’s changed. If you edit a file directly in Visual Studio it checks it out for edit automatically; however, if you make the changes outside Visual Studio (you need to change Read-only property prior to that) and forget to check it out for edit in Visual Studio the file is not listed in <em>Pending Changes</em> window. Consequently, the risk of not including that item while making a check-in increases (I personally experienced that a couple of times….)       <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p>Having never used SVN and having come from a Visual SourceSafe background I have not had this problem, but I have heard this from many other SVN users and I completely agree and understand the perspective. Although I find it difficult to understand how you know which files you have checked out when you don’t have this, it looks like all the source control products are going in this distributed direction and I will just have to go with the flow.</p>  <blockquote>   <p>But if he will setup TFS Power Tools, he has doesn't need to use Visual Studio. At Window Explorer, he can see which files are binded to a source control or he can check-out or check-in. Just install Power Tools..      <br />-Bahadir ARSLAN</p> </blockquote>  <p>\_</p>  <blockquote>   <p>&gt;&gt;Subversion simply gives you an easy way to determine which files have *changed* against their repository version. This is MUCH more useful than the VSS/TFS counterpart, which only gives a view of \"which files I have touched since my last checkin\".      <br />- <a href=\"http://jeroen.haegebaert.com/\">Jeroen Haegebaert</a></p> </blockquote>  <p>This does not help me if I did not check out the file and have no access to the disk it was checked out on: </p>  <ul>   <li>As the TFS admin or Project Manager I want to be able to see which files you have been working on so I can make sure I understand the depth and complexity of something I thought was a simple change. </li>    <li>As a developer I want to check who else has a file checked out so I can coordinate me efforts with them. I don’t want to make sweeping refactor changes if you are also making a bunch of changes that will be irrelevant once I check in. </li> </ul>  <blockquote>   <p>&gt;&gt;Qny edited file stay checked out, even if you (manually) revert your changes (think CTRL-Z). So in the end the \"checked out files\" list is often not very useful anymore.      <br />- <a href=\"http://jeroen.haegebaert.com/\">Jeroen Haegebaert</a></p> </blockquote>  <p>This is really just a difference in the products. Just like VSS users needed to get used to the lack of Sharing and the differences in labelling, there will be habits that work weak for SVN, but not so much for TFS.</p>  <p>With TFS you should be using the tools provided so this never happens. If you call “Undo Checkout” it will automatically revert to the server version. You never know the server version may have changed since you last checked out</p>  <p><img style=\"border-right-width: 0px;margin: 0px 20px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px\" border=\"0\" alt=\"image\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-Windows-Live-Writer-32ab51073e36_8B5F-image_d9f2918a-8eac-42c6-8bbf-c6a770e21dd4.png\" width=\"621\" height=\"429\" /></p>  <p><b>Figure: Using Windows Explorer you never get your checkout’s out of sync</b></p>  <p>\_</p>  <h2>#3 – Windows only</h2>  <blockquote>   <p>&gt;&gt;It’s dedicated to Windows platforms only, but this is hardly a problem for a team who uses Visual Studio.      <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p><img style=\"border-right-width: 0px;margin: 0px 20px;padding-left: 0px;padding-right: 0px;float: left;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px\" border=\"0\" alt=\"image\" align=\"left\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-Windows-Live-Writer-32ab51073e36_8B5F-image_4274e345-8071-4a98-9288-ed9491b910a4.png\" width=\"189\" height=\"77\" />Fixed in TFS 2010: This one is just plain wrong. I don’t blame the author, I would be much more inclined to blame the marketing team a Microsoft for not making this as big a deal as it should be. Can you say “<a href=\"http://www.microsoft.com/downloads/en/details.aspx?FamilyID=af1f5168-c0f7-47c6-be7a-2a83a6c02e57&amp;displaylang=en\">Team Explorer Everywhere</a>”.</p>  <p>This was originally a third party product called Teamprise that integrated Eclipse into TFS, but with its purchase by Microsoft and the launch of TFS 2010 they have beefed it up so that it supports:</p>  <ul>   <li>Apple Mac OS X </li>    <li>HP-UX </li>    <li>IBM AIX </li>    <li>Linux </li>    <li>Solaris </li>    <li>Unix </li>    <li>Windows </li> </ul>  <p>On top of that it also supports :</p>  <ul>   <li>Eclipse </li>    <li>IBM Rational Application Developer </li>    <li>Adobe Flex Builder </li>    <li>Aptana Studio </li>    <li>others </li> </ul>  <p>This is a massive move by Microsoft to increase the reach of TFS to other platforms, and with the TFS application model being completely service based more diverse support will be coming in the future.</p>  <h2>#4 – Reverting changes</h2>  <blockquote>   <p>&gt;&gt;Weak support for reverting changes      <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p>I don’t know if weak is the correct word, but yes it is difficult. It was designed to be difficult as you don’t want your developers thinking that it is OK to check-in crap because they can always revert it. I don’t know about you, but I do not want to ever have to revert a change. If I do, it shows a failing in a quality gate somewhere that needs fixed.</p>  <ul>   <li><a href=\"http://msdn.microsoft.com/en-us/library/dd380776.aspx\">Rollback Command (Team Foundation Version Control)</a> (I need to rollback and entire change set) </li>    <li><a title=\"http://msmvps.com/blogs/vstsblog/archive/2009/01/10/how-to-revert-changes-checked-into-tfs-version-control.aspx\" href=\"http://msmvps.com/blogs/vstsblog/archive/2009/01/10/how-to-revert-changes-checked-into-tfs-version-control.aspx\">How to revert changes checked into TFS Version Control</a> (I just need to rollback one file) </li> </ul>  <blockquote>   <p>Seems a red-herring because it does already work, but developers don’t need to use this feature as they use history and annotate to see what happened only.      <br />-Adam Cogan, Chief Architect at SSW</p> </blockquote>  <p>I like this being hard…</p>  <h2>#5 – Cost</h2>  <blockquote>   <p>&gt;&gt;It’s not a free tool</p> </blockquote>  <p><img style=\"border-right-width: 0px;margin: 0px 20px;padding-left: 0px;padding-right: 0px;float: left;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px\" border=\"0\" alt=\"msdn_com\" align=\"left\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-Windows-Live-Writer-32ab51073e36_8B5F-msdn_com_5371151a-2488-4afe-9c20-098dd4e09191.png\" width=\"48\" height=\"48\" />This is really only partly true. Anyone with a MSDN subscription has a license to both run a TFS server and to connect to any TFS instance, couple that with SQL Server Standard being included in the definition of a TFS License then you can pretty much run TFS for free. If you have some business users that do not have MSDN, then yes, you will need to buy some retail CAL’s, but with the retail TFS 2010 at £500 that includes 5 users without CAL’s price is not an excuse not to use TFS.     <br /></p>  <p><img style=\"border-right-width: 0px;margin: 0px 20px;padding-left: 0px;padding-right: 0px;float: left;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px\" border=\"0\" alt=\"CP_banner_111x111_gen\" align=\"left\" src=\"http://blog.hinshelwood.com/files/2011/05/GWB-Windows-Live-Writer-32ab51073e36_8B5F-CP_banner_111x111_gen_690c6145-05ef-44eb-afec-a3b373c68d72.jpg\" width=\"33\" height=\"33\" />If you are an open source developer with no MSDN subscription then you can use <a href=\"http://www.codeplex.com/\">Codeplex</a> which is completely free from end to end.     <br /></p>  <p>One thing I always think about for cost is the on-going support cost. With SVN you are at the mercy of forums and community support that, while often good, is not always timely. TFS is a fully supported retail product, and with the addition of Work Items, Build and Lab all from the same product you don't even need to think about nor support the communication between them.</p>  <h2>#6 – Difficult to install</h2>  <blockquote>   <p>&gt;&gt;Complex installation      <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p>Fixed in TFS 2010: This was VERY true in TFS 2005 and TFS 2008, but in TFS 2010 the installation is so easy my Dad could do it. I blogged about this during the beta and managed to install and configure TFS 2010 in under 30 minutes.</p>  <ul>   <li><a href=\"http://blog.hinshelwood.com/archive/2009/10/20/installing-visual-studio-2010-team-foundation-server-on-windows-vista.aspx\">Installing Visual Studio 2010 Team Foundation Server on Windows Vista in 3 minutes</a> </li>    <li><a href=\"http://geekswithblogs.net/hinshelm/archive/2009/10/20/configuring-visual-studio-2010-team-foundation-server-on-vista-in.aspx\">Configuring Visual Studio 2010 Team Foundation Server on Vista in 12 minutes</a> </li> </ul>  <h2>#7 – Switching between branches</h2>  <blockquote>   <p>&gt;&gt;Lack of switching feature. With Subversion I could easily switch between trunk and branches / tags, still using the same source directory. The action was straightforward and quick. On TFS you need to make a full check out of the other branch, which is longer and requires additional actions (e.g. IIS settings for new virtual directories)      <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p>I don’t really see this as a product issue but a source control issue. And since you would always use source control and have this problem the point is moot.</p>  <p>However I do see that this is kind of true as TFS enforces folder/source parity. So I can agree with this, but I also agree with the way that TFS does things. I do not want developers to be under any ambiguity of which branch they are working with, nor do I want them to be able to mistakenly check into the wrong branch. </p>  <p>I always run each branch separately on my local development computer and the minor setup of IIS or other stuff is really just that, minor.</p>  <h2>#8 – Reverting changes again</h2>  <blockquote>   <p>&gt;&gt;Poor support for revert (roll back). It’s not that easy to revert a check in (especially if it includes lots of files). <a href=\"http://msdn.microsoft.com/en-us/library/ms194956%28VS.80%29.aspx\">Official roll back instruction</a> sounds like a workaround…       <br />-<a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a></p> </blockquote>  <p>Duplicate? Having covered this already I don’t know why it is in here twice, but never mind. The official link above while for VS 2005 is a good solution for rolling back a single file. Remember that there is high fidelity between files checked in at the same time and a check-in becomes an atomic unit. If you want to rollback a single file, then this is the easiest and least painful way. There are methods for rolling back whole change sets, but again these are things you do not really want your developers doing.</p>  <p>I should also note that in my 3 years as an ALM MVP and 9 years using source control I have only had to do a rollback on one occasion. It should be an edge case with edge case support so developers learn to do things correctly in the first place.</p>  <blockquote>   <p>&gt;&gt;I'm not sure that it is reasonable to say that rolling back change sets in TFS should be a pain because your developers are doing it wrong. Unfortunately this has been a requirement several times for at crucial project points.     <br />-<a>Simon B </a></p> </blockquote>  <p>When I said difficult I was being a little facetious :). I do like that it is not an obvious feature, and in fact you need elevated permissions to run the tf.exe rollback command, not just any developer has the power.</p>  <blockquote>   <p>&gt;&gt;I would argue that it is clearly a missing feature and that making the process byzantine in its complexity is not helpful and if it is intentional, the intention must have been to cause pain.</p> When we are dealing with complex builds against non-MS data sources and the only way to verify fully that builds are working is to check in code. With the best will in the world inconsistencies occur between developer and build machines, between development and staging/live database environments. You might say that in TFS 2010 we can simply use gated check-ins. However this is not quite the \"magic bullet\" it appears. As far as I understand this requires the server to carry out on-the-fly automated merges which even if you've done a forward integration beforehand may present you with merge issues    <br />-S<a>imon B </a></blockquote>  <p>Regardless of the reason I do not want developers to check-in anything that has not passed a build and test. I agree that Gated Check-in is not a silver bullet (nothing is) but with the right amount of effort in the build and test stages there is nothing you can’t do. You are right that it is possible for a gated Check-in to fail because you were piped-at-the-post by another developer, but is that any different than multiple feature teams merging into the same Main branch. This is just the cost of doing business for developers and I would posit that it would be worse if the first developer checked-in something that broke the build and prevented the other developers from checking in. I am not saying that this could never happen, but minimising this is key.</p>  <p>With TFS 2010 if you really want to kick that nut in the head then enable Gated Check-in’s on all of your branches. Then developers can’t check-in until the build with all of the tests pass.</p>  <blockquote>   <p>&gt;&gt;Developer do make mistakes, please let TFS admins undo them with the minimum of pain.      <br />-Simon B</p> </blockquote>  <p>We can all make mistakes and it could not be easier for a TFS Admin to undo a developer change with the power of TF.exe</p>  <h2>Conclusion</h2>  <p>I really liked this post by <a href=\"http://dobrzanski.net\">Jarosław Dobrzański</a>, and I hope my response clears up some of the misconceptions surrounding TFS. It is always good when people that have had to move from SVN to TFS describe the differences once they have worked with it for a while. </p>  <p>\_</p>  <p>\_</p>  <div style=\"padding-bottom: 0px;margin: 0px;padding-left: 0px;padding-right: 0px;float: none;padding-top: 0px\" class=\"wlWriterEditableSmartContent\">Technorati Tags: <a href=\"http://technorati.com/tags/TFS\" rel=\"tag\">TFS</a>,<a href=\"http://technorati.com/tags/TFS+2010\" rel=\"tag\">TFS 2010</a>,<a href=\"http://technorati.com/tags/Version+Control\" rel=\"tag\">Version Control</a></div>"
  - ''
  post_id: '22'
  post_date: '2010-10-14 16:30:53'
  post_date_gmt: '2010-10-14 16:30:53'
  post_modified: '2010-10-14 16:30:53'
  post_modified_gmt: '2010-10-14 16:30:53'
  comment_status: open
  ping_status: open
  post_name: tfs-vs-subversion-fact-check
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: dsq_thread_id
    meta_value: '311232111'
  - meta_key: _flattr_post_language
    meta_value: ''
  - meta_key: _flattr_post_category
    meta_value: ''
  - meta_key: _flattr_post_hidden
    meta_value: ''
  - meta_key: _flattr_btn_disabled
    meta_value: ''
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1b3tvoH
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474902961;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3736;}i:1;a:1:{s:2:"id";i:55;}i:2;a:1:{s:2:"id";i:10526;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2010-10-14-tfs-vs-subversion-fact-check.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '920'
  comment:
  - comment_id: '958'
    comment_author: Bahadir ARSLAN
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-15 15:06:18'
    comment_date_gmt: '2010-10-15 15:06:18'
    comment_content: >-
      Hi,<br /><br />Very good post as an answer :)<br />But i want to add
      something. Jarosław Dobrzański wrote that,<br />"If you want to edit a
      file you need to check it out for edit so that it’s listed in Pending
      Changes window after it’s changed. If you edit a file directly in Visual
      Studio it checks it out for edit automatically; however, if you make the
      changes outside Visual Studio (you need to change Read-only property prior
      to that) and forget to check it out for edit in Visual Studio the file is
      not listed in Pending Changes window. Consequently, the risk of not
      including that item while making a check-in increases (I personally
      experienced that a couple of times….)". But if he will setup TFS Power
      Tools, he has doesn't need to use Visual Studio. At Window Explorer, he
      can see which files are binded to a source control or he can check-out or
      check-in. Just install Power Tools
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969379'
  - comment_id: '959'
    comment_author: Doug
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-16 04:10:50'
    comment_date_gmt: '2010-10-16 04:10:50'
    comment_content: >-
      I think "Updated 15th September 2010" should be "Updated 15th October
      2010", no?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969384'
  - comment_id: '960'
    comment_author: Matt
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-18 10:59:20'
    comment_date_gmt: '2010-10-18 10:59:20'
    comment_content: >-
      Reverting maybe being used to share ideas with other developers on their
      computer.  Not 100%, but Shelving in TFS, maybe what they are trying to
      achieve with Reverting things that have been committed.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969385'
  - comment_id: '961'
    comment_author: JeroenH
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-18 21:09:30'
    comment_date_gmt: '2010-10-18 21:09:30'
    comment_content: >-
      About the checkout/checkin issue: "Although I find it difficult to
      understand how you know which files you have checked out when you don’t
      have this".<br /><br />Subversion simply gives you an easy way to
      determine which files have *changed* against their repository version.
      This is MUCH more useful than the VSS/TFS counterpart, which only gives a
      view of "which files I have touched since my last checkin". Qny edited
      file stay checked out, even if you (manually) revert your changes (think
      CTRL-Z). So in the end the "checked out files" list is often not very
      useful anymore.<br /><br />The whole "default to readonly, explicitly
      check out if you want to edit" model is crippled IMHO.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969387'
  - comment_id: '962'
    comment_author: JeroenH
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-19 03:08:03'
    comment_date_gmt: '2010-10-19 03:08:03'
    comment_content: >-
      About the centralized view over who is working on what: I'll give you that
      sometimes it comes in handy to know that someone else has a certain file
      checked out. However, I have nevery missed that feature on any project
      using svn. I guess it depends on process and preferences, but I have
      NEVER, EVER worked on a team where this was really an issue. I've never
      met a PM that actually even had time to follow up on that level of detail
      during the development of a feature. To me this seems more to be a lack of
      team communication than anything else. <br /><br />Another weakness about
      TFS is the "offline" model. Yes, you can work offline, to some extent. No,
      it's not pleasant. Whenever I have to use TFS, and I want to work offline
      (plane, train), I feel like I'm working "blind". It's very difficult to do
      any significant work without being able to step back now and then, and
      have a look what has been changed. This is simply impossible with TFS,
      while svn (but also obviously the new dvcs kids on the block) give you
      that for free. And for these use cases, I switch to git alongside tfs,
      which is a pain in itself but there is just no other way.<br />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969389'
  - comment_id: '963'
    comment_author: Simon B
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-19 18:30:02'
    comment_date_gmt: '2010-10-19 18:30:02'
    comment_content: >-
      I'm not sure that it is reasonable to say that rolling back change sets in
      TFS should be a pain because your developers are doing it wrong.
      Unfortunately this has been a requirement several times for at crucial
      project points.<br /><br />I would argue that it is clearly a missing
      feature and that making the process byzantine in its complexity is not
      helpful and if it is intentional, the intention must have been to cause
      pain.<br /><br />When we are dealing with complex builds against non-MS
      data sources and the only way to verify fully that builds are working is
      to check in code. With the best will in the world inconsistencies occur
      between developer and build machines, between  development and
      staging/live database environments. You might say that in TFS 2010 we can
      simply use gated check-ins. However this is not quite the "magic bullet"
      it appears. As far as I understand this requires the server to carry out
      on-the-fly automated merges which even if you've done a forward
      integration beforehand may present you with merge issues.<br /><br
      />Developer do make mistakes, please let TFS admins undo them with the
      minimum of pain.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969390'
  - comment_id: '964'
    comment_author: Jaroslaw Dobrzanski
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-23 19:41:41'
    comment_date_gmt: '2010-10-23 19:41:41'
    comment_content: >-
      Martin,<br /><br />To put it straight - great post! I was really glad
      reading your arguments. I'm quite happy I initiated such informative
      discussion :)<br /><br />It's my fault I forgot to mention TFS I was
      writing about was 2008 (need to update my post). I believe everyone agrees
      ver. 2010 is much better than ver. 2008 (altghough I have only read about
      the newer). As you said, some of the painful 'features' has been fixed
      there, and there must have been lots of improvements provided as well. <br
      /><br />Power Tools - I definitely need to look into them. As I've learnt
      so far, they can make developers' life easier :)<br /><br />There's one
      thing though I'm not totally agree with you - the thing about reverting
      changes. You said that it's good it's difficult to make rollback because
      it results in developers not checking in crap. In my several years'
      experience I've never rolled back my changes because they were poor. I
      don't even remember if I used the rollback feature at all :) However, I
      can see a situation where there have been some decisions made a while
      after the checkin - a pecific piece of work should not be delivered.
      Rolling back is required there and has nothing to do with quality of
      developer's code. Also, if I had to work with lame developers who check in
      for fun and then revert the changes, I would really consider looking for
      better team / work place :D<br /><br />All in all, I'm really happy you
      found weaknesses in my post. I'm sure there are a lot of people who are
      really looking for such constructive comparison.<br /><br />Regards,<br
      />Jroslaaw Dobrzanski
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969391'
  - comment_id: '965'
    comment_author: Egor Kachiguine
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2010-10-28 06:06:18'
    comment_date_gmt: '2010-10-28 06:06:18'
    comment_content: >-
      From the perspective of a long time SVN user who's absolutely cringing at
      the prospect of switching to TFS, here is what I absolutely hate about the
      way TFS does things. <br /><br />The much talked about
      Check-in/Check-out/Read-only situation. After living with SVN's more free
      form file-based way of doing things this drives me up the wall. I just
      don't understand the point I guess. All it does is introduce ridiculous
      hoops for everyone to jump through, especially if you're using any other
      tools than VS. I can understand your point about being able to see what
      other people are working on, but at the same time just because i've
      modified a file doesn't mean I'm planning on checking it in, and the fact
      that a file stays checked out without any modifications makes it hard to
      rely on that status for anything serious anyhow. I'm always very concerned
      about what people are checking in, which is often very different than what
      people are editing.<br /><br />Example workflow that the above system
      makes hard: I like to use PowerGREP for some transformations and
      replacements, it's an enormously powerful and fast tool for working with
      regex. It's especially useful when project and solution files themselves
      are involved with the transformations. With SVN, I run the transform,
      glance at the change list, apply the transform, <br />and then study the
      changes, build, etc. With TFS I have to run the transform, and then
      manually check out every single file (possibly hundreds) in many
      directories before I can apply the transform and start validating the
      changes. It's an incredibly time-consuming intermediate step for no
      gain.<br /><br />And what's closely related to the above - the model for
      using TFS offline. It just sucks, frankly nothing nice to say about it.<br
      /><br />Not being able to treat my source as a directory full of files
      instead of some mythical sacred server-monitored shrine. Want to work on
      two different copies of the same branch for some reason? Copy and paste
      and you're good to go, commit out of either one, or both. Little things
      like that can sometimes be immensely useful. Toss the whole thing onto a
      zip drive and work on another computer, which doesn't even need SVN -
      everything will still be fine when you bring it back. Edit with whatever
      you want, whenever you want. It's the changes to the files that matter,
      nothing else.<br /><br />Honestly, everything else is sort of details.
      Branching/merging is a little different, but for the most part those
      aren't operations that are done every ten minutes so it's not a big deal -
      you can use your own merge tools if desired. But the basic mechanics of
      using TFS I find deeply irritating.<br /><br />SVN has been around for a
      long time, and Git and the like are on the scene. Developers, especially
      skilled ones, far and away prefer the control and power that those systems
      give them to TFS, and industry surveys back me up. They have been used
      successfully on large and small project of all stripes, and the lack of a
      check-in/check-out paradigm hasn't stopped anyone in the least. TFS/VSS
      developers aren't chafing at losing those parts of TFS when they jump over
      to SVN, but everyone complains going the other way around. That says
      something, I think.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969396'
  - comment_id: '966'
    comment_author: Grant
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-01-10 23:12:29'
    comment_date_gmt: '2011-01-10 23:12:29'
    comment_content: >-
      &gt;&gt; #7 – Switching between branches<br />After you update your
      workspace mappings to a new branch, select "No" on the dialog that asks
      you if want to "get Latest. Then you can use "tf get /remap" from the
      command line.  If the old &amp; new location share many common files (at
      the same version), this command will be faster than a normal "tf get"<br
      />
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969400'
  - comment_id: '967'
    comment_author: James Wallis Martin
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-01-17 19:14:56'
    comment_date_gmt: '2011-01-17 19:14:56'
    comment_content: >-
      Although TFS seems to finally be doing things better with TFS 2010 than
      with 2008 or 2005, I don't see convincing arguments for a whole
      development team familiar with Subclipse/Subversion to migrate over to TFS
      2010, especially for those working more and more in virtual development
      teams in the cloud using Private VPNs like Hamachi.<br /><br />TFS has
      always been bulky and slow compared to SVN.  Check out/check in of large
      projects with several hundred files and a couple million lines of code
      made TFS unusable whereas SVN, albeit slow, was still usable.<br /><br
      />It is amazing that speed and performance are nowhere to be mentioned in
      the article.  Sounds like someone who has been told by Microsoft not to
      touch on the key weakness in TFS.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969404'
  - comment_id: '968'
    comment_author: Lonzo
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-01-17 23:47:23'
    comment_date_gmt: '2011-01-17 23:47:23'
    comment_content: >-
      Comparing TFS (especially TFS 2010) to SVN is like comparing apples to
      oranges. <br /><br />SVN is a great Source Code control tool, but thats
      it. It has some hooks for CI and the like which make it a better product.
      <br /><br />TFS is an entire Application Lifecycle Management tool.
      Besides the Version control and Build capabilities, it Includes Bug and
      Enhancement Tracking, Intergrated Testing, Requirement definition. All of
      this information can be associated together, and the reporting features
      are amazing.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969406'
  - comment_id: '969'
    comment_author: lw
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-01-18 02:34:00'
    comment_date_gmt: '2011-01-18 02:34:00'
    comment_content: >-
      Your comments for #5 are false. Commercial support for Subversion is
      available from several sources. With TFS you are completely at the mercy
      of the vendor. With Subversion you can purchase support at many different
      levels from multiple vendors. There is something for just about
      everything. On top of paid support there is *also* extensive community
      support. TFS looses on this one because there are just not as many support
      options. What does MSDN cost these days. Last I was involved with it was
      over $1000 per developer per year! Makes sense for some windows developers
      but you would have to be nuts to use TFS for anything else.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969425'
  - comment_id: '970'
    comment_author: Joel
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-01-18 06:58:43'
    comment_date_gmt: '2011-01-18 06:58:43'
    comment_content: >-
      The big diference between TFS and SVN is that TFS is transactional. So If,
      for example, I change file name fom "a.src" to "b.src" and another person
      checks in code for file a.src, they will be merged with my new b.src, or
      vice-versa.<br />This "feature" justifies the way TFS works with source
      code and why it can't behave like SVN. <br />Anyway, I never had problems
      with offline TFS, I just checkout files locally and it works just fine.<br
      />Furthermore, I can work with files and folders and just merge my changes
      to TFS without having to check out files - it will be a bit more dificult
      because TFS will show a merge dialog.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969426'
  - comment_id: '971'
    comment_author: Steven Borg
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-01-25 07:08:04'
    comment_date_gmt: '2011-01-25 07:08:04'
    comment_content: >-
      To lw.  You're absolutely right.  There are a great many version control
      host companies, there's a great list at
      http://www.svnhostingcomparison.com, and many provide full support.  <br
      /><br />It's rough to compare SVN to TFS.  It not even apples to oranges,
      it's the produce section to an apple.  SVN is a great version control
      tool, but it is only that.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969427'
  - comment_id: '972'
    comment_author: EFraim
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-03-19 13:18:56'
    comment_date_gmt: '2011-03-19 13:18:56'
    comment_content: >-
      @Joel: SVN is also transactional. No, there is no need for the checkout
      madness just to be transactional. IMHO this is a feature added for some
      lame PMs who just can't understand how bad an idea micro-management is.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969429'
  - comment_id: '973'
    comment_author: Eric Daigneault
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: ''
    comment_date: '2011-04-07 06:50:36'
    comment_date_gmt: '2011-04-07 06:50:36'
    comment_content: >-
      I just spent 3 hours fighting with TFS Everywhere for a simple commit. 
      Sure it involved several hundred files but all I did was to rename the
      root folder of a part of the documentation that is checked in with a
      project. <br /><br />I had to just stop trying and fireup Visual Studio,
      still not done by the way.<br /><br />TFS is by far the worst source
      control system I have ever used.  I tried CVS, SVN, Git, Hell even RCCS
      and VSS performed better at the simple tasks of source control.  Never
      have I lost so much time for the simplest tasks, never Have I seen a
      system that tries so hard to constantly be in your face.<br /><br />I
      still use it because it is imposed on me but I an seriously thinking of
      getting my team to switch to git and get an automated process to check
      things back in TFS.<br /><br />The only positive thing I find about TFS
      and this onle I really like is the workitem system.  It works really good,
      now if I could get the workitem system of TFS and the source control of
      git I would be in heaven.  The SCM part is however so bad that I would
      gladly prefer post-it on a wall if it meant to stop using TFS as source
      control.<br /><br />It`s not the long feature list I am after it`s just
      how hard it is to perform the simplest tasks without always having TFS in
      your face.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '209969431'
  - comment_id: '974'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 50.135.56.181
    comment_date: '2012-01-16 03:26:00'
    comment_date_gmt: '2012-01-16 11:26:00'
    comment_content: "You are right, there is no built in code sharing in TFS. This was\_deliberately\_left out of the product as it is always a bad idea to share code between products at the source level.\_\n\nRelated Discussion:\_http://blog.hinshelwood.com/project-of-projects-with-team-foundation-server-2010/\_\n\nI favour using an\_internally\_hosted (or hosted) NuGet server to store and distribute binaries/packages of reusable/shared features."
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '395792821'
    - meta_key: dsq_post_id
      meta_value: '412500622'
  - comment_id: '975'
    comment_author: Vitor Canova Weingaertner
    comment_author_email: ''
    comment_author_url: http://www.facebook.com/vitor.canova
    comment_author_IP: 201.37.173.3
    comment_date: '2012-03-30 06:28:00'
    comment_date_gmt: '2012-03-30 13:28:00'
    comment_content: Visual Studio vNext (11 now a days) will bring TFS Express free of charge.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '480737940'
  - comment_id: '976'
    comment_author: 'TFS v. SVN: 2012 update | Does that answer your question?'
    comment_author_email: ''
    comment_author_url: http://blog.bsktcase.com/2012/07/12/tfs-v-svn-2012-update/
    comment_author_IP: 69.170.134.106
    comment_date: '2012-07-12 10:11:28'
    comment_date_gmt: '2012-07-12 17:11:28'
    comment_content: "[...] while back, my colleague Martin wrote a nice summary in response to some critiques of TFS 2010 when compared to Subversion (SVN). \_I happen to be working on some documentation for a customer on this topic, I thought I might [...]"
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1342113088.15";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:12:"1342125477.8";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '977'
    comment_author: >-
      Managing Schemas And Source Control For Databases | James Serra&#039;s
      Blog
    comment_author_email: ''
    comment_author_url: >-
      http://www.jamesserra.com/archive/2012/12/managing-schemas-and-source-control-for-databases/
    comment_author_IP: 66.147.244.241
    comment_date: '2012-12-18 08:02:06'
    comment_date_gmt: '2012-12-18 16:02:06'
    comment_content: '[...] TFS vs. Subversion fact check [...]'
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1355846526.343144;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1355857833.966447;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1770'
    comment_author: Christopher Kiszka
    comment_author_email: ckiszka@gmail.com
    comment_author_url: ''
    comment_author_IP: 71.75.126.159
    comment_date: '2011-12-28 16:46:00'
    comment_date_gmt: '2011-12-28 16:46:00'
    comment_content: >-
      Martin, what is the standard solution for managing external project
      references in TFS? I use SVN at work and this article (at the bottom)
      describes using SVN:Externals to map all project references to a single
      common repository for a single distribution point. I have implemented this
      at work and for the last couple months it has worked perfect. Now I am
      spoiled. We are migrating to TFS (which I love) but I do not see a common
      solution and it may be a deal breaker for me. I do not want “lib” folders
      in my solutions with all external project references. Fragmentation of
      each external project reference is inevitable. Can this solution (link
      below) be implemented in TFS? If not, what is the best alternative? This
      is big difference (in my opinion) of core functionality to me...

      Thanks in advance!

      http://arcware.net/using-svnexternals-to-manage-project-references/
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '395792821'
