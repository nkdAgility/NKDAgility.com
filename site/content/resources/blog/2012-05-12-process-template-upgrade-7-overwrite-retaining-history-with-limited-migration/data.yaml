post:
  title: 'Process Template Upgrade #7 – Rename Work Items and Import new ones'
  link: >-
    https://nkdagility.com/blog/process-template-upgrade-7-overwrite-retaining-history-with-limited-migration/
  pubDate: Sat, 12 May 2012 00:25:23 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=5277
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <p class="lead">A little while ago I was looking into the best options for
    <a
    href="http://blog.hinshelwood.com/do-you-know-how-to-upgrade-a-process-template-but-still-keep-your-data-intact/">upgrading
    a process template but still keep your data intact</a>, but there is still a
    little bit of ambiguity on how that is achieved. Although the original list
    had only #6 options lets look at the #7 option…</p>

    <ul>

    <li><span class="label label-warning">Update 2013-06-18</span> <a
    href="www.tfsblog.com/" target="_blank">Neno</a> pointed out that the code
    looks all squirrelly. Unfortunately I have tried a bunch of times to fix
    this one with no result. To see the code in readable form you can
    double-click the code blocks.</li>

    </ul>

    <p>In option #7 we basically overwrite our old work items with the new ones.
    There is a little jiggery-pockery to get everything to align, but it allows
    us to keep the continuity of both history, field data and work item
    ID’s.</p>

    <h2>The Main Event: Upgrading Process Templates (TFS 2005 + TFS 2008 + TFS
    2010 + TFS11)</h2>

    <p>I have created these instruction for doping the upgrade on “any” Team
    Foundation Server environment and there will be extra “fiddly” bits
    depending on the version and what third-party tools you are using.</p>

    <p><span style="color: #ff0000;"><sup><span style="color: #ff0000;">WARNING:
    Always test the process against in a test environment before you move
    forward with production. Make sure that everyone (and I do mean everyone)
    logs in a performs a few of their normal tasks against the upgraded process
    before you go ahead with a production migration. If in doubt then get in
    touch at </span><a href="http://www.nwcadence.com"><span style="color:
    #ff0000;">http://www.nwcadence.com</span></a><span style="color: #ff0000;">
    before you get yourself into a mess!</span></sup></span></p>

    <ol>

    <li><strong>Export old work item types</strong>

    <p>The first thing I need to do is list out all of the work items that I
    have available so that I know which ones I might have to change. In this
    case I have the Agile 6.0 Process Template, so I have User Story as the main
    requirement item.</p>

    <pre class="lang:ps decode:true ">witadmin listwitd
    /collection:http://localhost:8080/tfs/defaultcollection
    /p:"FabrikamFiber"</pre>

    <p>With the following result:</p>

    <ul>

    <li>Task</li>

    <li>Bug</li>

    <li>Code Review Request</li>

    <li>Code Review Response</li>

    <li>Feedback Request</li>

    <li>Feedback Response</li>

    <li>Impediment</li>

    <li>User Story</li>

    <li>Shared Steps</li>

    <li>Test Case</li>

    </ul>

    <p>For each of these work item types that exist in the new template you will
    need to do a little bit of work, but not much. If you are moving from Agile
    4.1, Agile 4.2 or Agile 5.0 you will not have the Feedback &amp; Code Review
    items to worry about. However if you have customised any of the Work item
    Types, there will be some tinkering that you need to do.</p>

    <p>For each Work Item Type:</p>

    <pre class="lang:ps decode:true " title="Export your Work Item Type
    Definition " >witadmin exportwitd
    /collection:http://localhost:8080/tfs/defaultcollection /p:"FabrikamFiber"
    /n:Task /f:c:tempTask_FabrikamFiber_source.xml</pre>

    <p>Save them somewhere you can find them and not get them confused with the
    new ones.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/05/image.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; display:
    inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/05/image_thumb.png" alt="image"
    width="640" height="360" border="0" /></a><br /><sup><strong>Figure: Save
    out the Work Item Type Definition</strong></sup></p>

    </li>

    <li>

    <p><strong>Identify fields that do not exist in the new
    template</strong></p>

    <p>In this case I am moving from the Task Work Item Type in the MSF Agile
    6.0 Template to the Visual Studio Scrum 2.0 Template. There are a number of
    fields that do not appear on the Scrum template that we will likely at least
    want to keep the data for:</p>

    <pre class="lang:xhtml decode:true " ><fields>
      <field name="Priority" refname="Microsoft.VSTS.Common.Priority" type="Integer" reportable="dimension">
        <helptext>Importance to business</helptext>
        <allowedvalues expanditems="true">
    <listitem value="1"></listitem>

    <listitem value="2"></listitem>

    <listitem value="3"></listitem>

    <listitem value="4"></listitem>
        </allowedvalues>
        <default value="2" from="value"></default>
      </field>
      <field name="Original Estimate" refname="Microsoft.VSTS.Scheduling.OriginalEstimate" type="Double" reportable="measure" formula="sum">
        <helptext>Initial value for Remaining Work - set once, when work begins</helptext>
      </field>
      <field name="Completed Work" refname="Microsoft.VSTS.Scheduling.CompletedWork" type="Double" reportable="measure" formula="sum">
        <helptext>The number of units of work that have been spent on this task</helptext>
      </field>
      <field name="Start Date" refname="Microsoft.VSTS.Scheduling.StartDate" type="DateTime" reportable="dimension">
        <helptext>The date to start the task</helptext>
      </field>
      <field name="Finish Date" refname="Microsoft.VSTS.Scheduling.FinishDate" type="DateTime" reportable="dimension">
        <helptext>The date to finish the task</helptext>
      </field>
    </fields></pre>

    <p>For every field that has a different “refname” from that which exists in
    the new Work item Type you will need to add it to the list of fields. This
    will guarantee that you will still be able to see the history from the old
    work item type.</p>

    </li>

    <li>

    <p><strong>Add old fields to the new Work Item Type</strong></p>

    <p>This is very simple and entails adding the fields identified above to the
    new Work Item Type. This will allow TFS to continue to understand these
    fields even though you will not be displaying them.</p>

    <p><em><sup>note: But do not add them to the UI</sup></em></p>

    <p><em><sup>note: Even if you forget to add the fields you will NOT loose
    the data, it will just be hidden until you add the fields.</sup></em></p>

    </li>

    <li>

    <p><strong>Rename the Work Item Type</strong></p>

    <p>If the new&nbsp; work item type has a different name from the new one you
    will need to perform a rename first.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/05/image1.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/05/image_thumb1.png" alt="image"
    width="627" height="168" border="0" /></a><br /><strong><sup>Figure:
    witadmin renamewitd /?</sup></strong></p>

    <pre class="lang:ps decode:true ">witadmin renamewitd
    /collection:http://vsalm:8080/tfs/defaultcollection /p:Agile3 /n:"User
    Story" /new:"Product Backlog Item"

    </pre>

    <p>This is the point at which you will start to break things. Queries,
    Reports, Dashboards and the new Agile Planning tools all rely on the Work
    Item Type name.</p>

    <p><sup><span style="color: #ff0000;">WARNING: Always do this on a test
    server first before you ever touch production</span></sup></p>

    </li>

    <li>

    <p><strong>Update to the new Work Item Types</strong></p>

    <p>This is real easy, perhaps too easy, and you should make sure that you
    have all of the fields and that you know all of the impacts.</p>

    <pre class="lang:ps decode:true ">witadmin importwitd
    /collection:http://vsalm:8080/tfs/defaultcollection /p:Agile3
    /f:"c:dataProduct Backlog Item.xml"

    </pre>

    <p><sup>note: Document everything in a Script so that you make this a
    repeatable experience</sup></p>

    <p><sup><span style="color: #ff0000;">WARNING: Always do this on a test
    server first before you ever touch production</span></sup></p>

    </li>

    <li>

    <p><strong>Update Catagories.xml (TFS 2010+ only)</strong></p>

    <p>If you are using TFS 2010 or above Microsoft added the idea of categories
    to make reporting easier to customise.</p>

    <pre class="lang:ps decode:true ">witadmin exportcategories
    /collection:http://vsalm:8080/tfs/defaultcollection /p:AgileTest3
    /f:c:datacats.xml</pre>

    <p>Calling this will dump out the existing categories so that you can edit
    and import them. For any of the work item types that you rename you will
    need to update the name in this configuration file.</p>

    <pre class="lang:xhtml decode:true " >< ?xml version="1.0"
    encoding="utf-8"?>

    <cat:categories
    xmlns:cat="http://schemas.microsoft.com/VisualStudio/2008/workitemtracking/categories">
      <category refname="Microsoft.BugCategory" name="Bug Category">
        <defaultworkitemtype name="Bug"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.CodeReviewRequestCategory" name="Code Review Request Category">
        <defaultworkitemtype name="Code Review Request"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.CodeReviewResponseCategory" name="Code Review Response Category">
        <defaultworkitemtype name="Code Review Response"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.FeedbackRequestCategory" name="Feedback Request Category">
        <defaultworkitemtype name="Feedback Request"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.FeedbackResponseCategory" name="Feedback Response Category">
        <defaultworkitemtype name="Feedback Response"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.HiddenCategory" name="Hidden Types Category">
        <defaultworkitemtype name="Code Review Request"></defaultworkitemtype>
        <workitemtype name="Code Review Response"></workitemtype>
        <workitemtype name="Feedback Request"></workitemtype>
        <workitemtype name="Feedback Response"></workitemtype>
        <workitemtype name="Shared Steps"></workitemtype>
      </category>
      <category refname="Microsoft.RequirementCategory" name="Requirement Category">
        <defaultworkitemtype name="User Story"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.SharedStepCategory" name="Shared Step Category">
        <defaultworkitemtype name="Shared Steps"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.TaskCategory" name="Task Category">
        <defaultworkitemtype name="Task"></defaultworkitemtype>
      </category>
      <category refname="Microsoft.TestCaseCategory" name="Test Case Category">
        <defaultworkitemtype name="Test Case"></defaultworkitemtype>
      </category>
    </cat:categories></pre>

    <p>You can see where User Story is listed in the Requirement Category and
    you can easily chnage and upload this. It is worth noting that using the
    “witadmin renamewitd” command will automatically make this change for you.
    Once we have make any changes necessary we can import it back into TFS and
    close that loop.</p>

    <pre class="lang:ps decode:true ">witadmin importcategories
    /collection:http://vsalm:8080/tfs/defaultcollection /p:AgileTest3
    /f:c:datacats.xml

    </pre>

    <p><sup>Note: This is done automatically if you use the “witadmin
    renamewitd”</sup></p>

    <p><sup>Note: You can export the correct listing from a new clean template
    if you wish</sup></p>

    </li>

    <li>

    <p><strong>Update the Configuration files (TFS 11+ only)</strong></p>

    <p>The Agile Configuration is what makes the new Agile Planning features in
    Team Foundation Server 11 come to life. There is also a Common configuration
    that will also need to b e set. In this case, because we are moving to a
    vanilla template we can just export both of them from an existing project
    and import them into the new project as is.</p>

    <ul>

    <li>

    <p><strong>Agile Process Configuration</strong></p>

    <pre class="lang:ps decode:true ">witadmin exportagileprocessconfig
    /collection:http://vsalm:8080/tfs/defaultcollection /p:FabrikamFiber
    /f:c:dataagileprocess.xml</pre>

    <p>This produces a file that defines what is available on a couple of the
    agile pages including the Product and Sprint backlog pages.</p>

    <pre class="lang:xhtml decode:true " >< ?xml version="1.0"
    encoding="utf-8"?>

    <agileprojectconfiguration>
      <iterationbacklog>
    <columns>

    <column width="50" refname="Microsoft.VSTS.Scheduling.Effort"></column>

    <column width="400" refname="System.Title"></column>

    <column width="100" refname="System.State"></column>

    <column width="100" refname="System.AssignedTo"></column>

    <column width="50"
    refname="Microsoft.VSTS.Scheduling.RemainingWork"></column>
        </columns>
      </iterationbacklog>
    <productbacklog>
        <addpanel>
          <fields>
            <field refname="System.Title"></field>
          </fields>
        </addpanel>
    <columns>

    <column width="400" refname="System.Title"></column>

    <column width="100" refname="System.State"></column>

    <column width="50" refname="Microsoft.VSTS.Scheduling.Effort"></column>

    <column width="200" refname="System.IterationPath"></column>
        </columns>
      </productbacklog>
    </agileprojectconfiguration></pre>

    </li>

    <li>

    <p><strong>Common Processing Configuration</strong></p>

    <pre class="lang:ps decode:true " >witadmin exportcommonprocessconfig
    /collection:http://vsalm:8080/tfs/defaultcollection /p:FabrikamFiber
    /f:c:datacommonprocess.xml</pre>

    <p>Which produces a file that defines what the states and names are for each
    of the work item types as well as formats for how things are displayed. If
    you want to work weekends, then this is the place to look as well.</p>

    <pre class="lang:xhtml decode:true " >< ?xml version="1.0"
    encoding="utf-8"?>

    <commonprojectconfiguration>
      <feedbackrequestworkitems category="Microsoft.FeedbackRequestCategory" plural="Feedback Requests">
        <states>
          <state type="InProgress" value="Active"></state>
          <state type="Complete" value="Closed"></state>
        </states>
      </feedbackrequestworkitems>
      <feedbackresponseworkitems category="Microsoft.FeedbackResponseCategory" plural="Feedback Responses">
        <states>
          <state type="InProgress" value="Active"></state>
          <state type="Complete" value="Closed"></state>
        </states>
      </feedbackresponseworkitems>
      <requirementworkitems category="Microsoft.RequirementCategory" plural="Backlog items">
        <states>
          <state type="Proposed" value="New"></state>
          <state type="Proposed" value="Approved"></state>
          <state type="InProgress" value="Committed"></state>
          <state type="Complete" value="Done"></state>
        </states>
      </requirementworkitems>
      <taskworkitems category="Microsoft.TaskCategory">
        <states>
          <state type="Proposed" value="To Do"></state>
          <state type="InProgress" value="In Progress"></state>
          <state type="Complete" value="Done"></state>
        </states>
      </taskworkitems>
      <typefields>
        <typefield refname="Microsoft.VSTS.Common.Activity" type="Activity"></typefield>
        <typefield refname="Microsoft.VSTS.Common.BacklogPriority" type="Order"></typefield>
        <typefield refname="Microsoft.VSTS.Feedback.ApplicationLaunchInstructions" type="ApplicationLaunchInstructions"></typefield>
        <typefield refname="Microsoft.VSTS.Feedback.ApplicationStartInformation" type="ApplicationStartInformation"></typefield>
        <typefield refname="Microsoft.VSTS.Feedback.ApplicationType" type="ApplicationType">
          <typefieldvalues>
            <typefieldvalue type="ClientApp" value="Client application"></typefieldvalue>
            <typefieldvalue type="RemoteMachine" value="Remote machine"></typefieldvalue>
            <typefieldvalue type="WebApp" value="Web application"></typefieldvalue>
          </typefieldvalues>
        </typefield>
        <typefield refname="Microsoft.VSTS.Scheduling.Effort" type="Effort"></typefield>
        <typefield format="{0} h" refname="Microsoft.VSTS.Scheduling.RemainingWork" type="RemainingWork"></typefield>
        <typefield refname="System.AreaPath" type="Team"></typefield>
      </typefields>
      <weekends>
        <dayofweek>Sunday</dayofweek>
        <dayofweek>Saturday</dayofweek>
      </weekends>
    </commonprojectconfiguration></pre>

    </li>

    </ul>

    <p>And as I mentioned we are moving directly from one to another so we don’t
    need to make any changes, just import.</p>

    </li>

    <li>

    <p><strong>Update Reports in Reporting Services (TFS 2010 Power Tools+
    only)</strong></p>

    <p>There is a command available from the power tools that will allow you to
    call one command to upload the new reports. I like to drop all of the old
    reports into a “_20XX-[process]-reports” folder so that I can always see
    what we had before. You don’t want to delete any customisation, bot they
    will likely not work anyway until updated.</p>

    <pre class="lang:ps decode:true ">tfpt addprojectreports 
    /collection:http://vsalm:8080/tfs/defaultcollection /teamproject:AgileTest3
    /processtemplate:"Visual Studio Scrum 2.0"

    </pre>

    <p><sup><span style="color: #ff0000;">WARNING: All out-of-the-box reports
    and any customisation will be inoperable until they are updated to take
    advantage of the new data </span></sup></p>

    </li>

    <li>

    <p><strong>Migrating Data to new Fields:</strong></p>

    <p>At this point you have one of two choices. There will be data in field
    that have just had the reference name changed, like “System.Description”
    changing to “System.DescriptionHTML”, and we need to decide how to migrate
    it. Luckily the main fields, like “System.Title” have not changed so the
    work item will still be identifiable as it was before.</p>

    <ol>

    <li>

    <p><strong>Automated Migration</strong></p>

    <p>You can create an application or a script to move data from one field to
    another. If you are using the API you can even head back in time to pull
    data from the past.</p>

    <pre class="lang:vb decode:true ">Dim tpc as TfsTeamProjectCollection = New
    TfsTeamProjectCollection("https://localhost:8080/tfs/defaultcollection")

    Dim store as WorkItemStore = tpc.GetService(of WorkItemStore)

    Dim wi as WorkItem = store.GetWorkItem(21)

    Dim wiAtDate WorkItem = store.GetWorkItem(21, Date.Parse("2012-03-02
    08:00"))

    Dim wiRevision as WorkItem = store.GetWorkItem(21, wi.Rev -1)

    </pre>

    <p>Either of these options will allow you to repopulate data auto-magically
    and almost transparently to your users.</p>

    </li>

    <li>

    <p><strong>Self service migration</strong></p>

    <p>In the self-service option we let the first user to edit a work item
    manually do the migration.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/05/image2.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; margin:
    0px; display: inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/05/image_thumb2.png" alt="image"
    width="640" height="360" border="0" /></a><br /><sup><strong>Figure: You can
    select text from the history</strong></sup></p>

    <p>You can have user peruse t6he history at their leisure and copy any data
    that they need back into the main work item. This allows for some really
    complex translations and stops you getting caught up in arguments with users
    as to what data they want and how it will be converted. Even two teams
    working in the same project can do it in slightly different ways using the
    MK1 Eyeball and MK1 Logic System to interpret the results much more
    effectively than you can.</p>

    </li>

    </ol>

    <p>And that's almost it! If this is TFS 2010 then you are done, but if it is
    TFS 11 then there are a couple of other things that you may need to do
    depending on the breadth of the changes. In my case I am mainly going to be
    moving from [insert out-of-the-box template] or [insert-frankin-template] to
    the Visual Studio Scrum 2.0 template so I need to tell the rest of TFS how I
    am going to be using the data.</p>

    </li>

    <li>

    <p>DONE – You are now on a new Process Template with minimal baggage</p>

    </li>

    </ol>

    <h3>Troubleshooting</h3>

    <p>I will try to catalogue any problems here, so add them in the comments
    and I will update!</p>

    <ol>

    <li>

    <p><strong>TF400508: The current process settings are either missing or not
    valid.</strong></p>

    <p>If you are on Visual Studio 11 Team Foundation Server (dev11 | TFS11)
    then you will need to reconfigure the Planning Boards to work with the new
    work item types. In this case I have renamed the “User Story” work item type
    to “Product Backlog Item” and it results in an error.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/05/image3.png"><img
    style="background-image: none; padding-top: 0px; padding-left: 0px; display:
    inline; padding-right: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/05/image_thumb3.png" alt="image"
    width="640" height="360" border="0" /></a><br /><sup><strong>Figure:
    TF400508 is about Agile Planning boards</strong></sup></p>

    <p>You forgot to update #7 above. Go back and do it now!</p>

    </li>

    <li>

    <p><strong>[TBA] Let me know what errors you find…</strong></p>

    </li>

    </ol>
  - ''
  post_id: '5277'
  post_date: '2012-05-11 17:25:23'
  post_date_gmt: '2012-05-12 00:25:23'
  post_modified: '2012-05-11 17:25:23'
  post_modified_gmt: '2012-05-12 00:25:23'
  comment_status: open
  ping_status: open
  post_name: >-
    process-template-upgrade-7-overwrite-retaining-history-with-limited-migration
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: _yoast_wpseo_focuskw
    meta_value: process template
  - meta_key: _yoast_wpseo_title
    meta_value: >-
      Process Template Upgrade #7 – Overwrite retaining history with limited
      migration - Visual Studio ALM with Team Foundation Server, Visual Studio &
      Scrum
  - meta_key: _yoast_wpseo_metadesc
    meta_value: >-
      Move to a process template while retaining history and functionality.
      Don't settle for enabling new features, jump in and migrate...
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: dsq_thread_id
    meta_value: '686012065'
  - meta_key: _yoast_wpseo_linkdex
    meta_value: '78'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: wp-to-buffer
    meta_value: a:1:{s:7:"publish";s:1:"1";}
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:7:"default";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _syn_old_sitegroups
    meta_value: a:0:{}
  - meta_key: _syn_selected_sitegroups
    meta_value: ''
  - meta_key: _syn_slave_post_states
    meta_value: a:0:{}
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBNa2q
  - meta_key: _pl_karma
    meta_value: '0'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474922562;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3951;}i:1;a:1:{s:2:"id";i:5702;}i:2;a:1:{s:2:"id";i:3717;}}}}
  - meta_key: _wpghs_github_path
    meta_value: >-
      _posts/2012-05-11-process-template-upgrade-7-overwrite-retaining-history-with-limited-migration.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '1666'
  comment:
  - comment_id: '1172'
    comment_author: CHI
    comment_author_email: ''
    comment_author_url: ''
    comment_author_IP: 202.140.90.91
    comment_date: '2012-05-23 23:59:00'
    comment_date_gmt: '2012-05-23 22:59:00'
    comment_content: "I have install my TFS 2010 with sharepoint foundation on Windows server 2008 R2. I\_check web Access URL is show \"HTTP error 500\" but can see the report through Report server. Besides,\_i just install on D: drive, is this possible effect the web access? \nThank for your helpJeremy"
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '537264678'
  - comment_id: '1173'
    comment_author: Upgrading your Process Template in Team Foundation Server
    comment_author_email: ''
    comment_author_url: >-
      http://blog.hinshelwood.com/do-you-know-how-to-upgrade-a-process-template-but-still-keep-your-data-intact/
    comment_author_IP: 184.168.230.128
    comment_date: '2012-05-24 12:09:55'
    comment_date_gmt: '2012-05-24 19:09:55'
    comment_content: >-
      [...] How-To: Process Template Upgrade #7 – Overwrite retaining history
      with limited migration [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1337886595.94";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1337891897.29";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1174'
    comment_author: >-
      Full-fidelity history and data migration are mutually exclusive - Visual
      Studio ALM with Team Foundation Server, Visual Studio &amp; Scrum
    comment_author_email: ''
    comment_author_url: >-
      http://blog.hinshelwood.com/full-fidelity-history-and-data-migration-are-mutually-exclusive/
    comment_author_IP: 184.168.230.128
    comment_date: '2012-05-28 23:15:33'
    comment_date_gmt: '2012-05-29 06:15:33'
    comment_content: >-
      [...] agile and engineering practices will help you provide more value to
      your customers.             Process Template Upgrade #7 &ndash; Rename
      Work Items and Import new ones       Share &rarr;   (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0]; if [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:12:"1338272133.3";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:12:"1338272587.7";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1175'
    comment_author: >-
      Upgrading TFS 2010 to TFS 2012 with VSS Migration and Process Template
      consolidation - Visual Studio ALM with Team Foundation Server, Visual
      Studio &amp; Scrum
    comment_author_email: ''
    comment_author_url: >-
      http://blog.hinshelwood.com/upgrading-tfs-2010-to-tfs-2012-with-vss-migration-and-process-template-consolidation/
    comment_author_IP: 184.168.230.128
    comment_date: '2012-06-29 19:39:40'
    comment_date_gmt: '2012-06-30 02:39:40'
    comment_content: >-
      [...] this I am going to create a hybrid of Process Template Upgrade #7 –
      Rename Work Items and Import new ones and Process Template Upgrade #3 –
      Destroy all Work Items and Import new ones. The customer is [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1341023980.51";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1341024838.62";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1176'
    comment_author: >-
      Visual Studio ALM with Team Foundation Server, Visual Studio &amp; Scrum |
      One Team Project Collection to rule them all&ndash;Consolidating Team
      Projects
    comment_author_email: ''
    comment_author_url: >-
      http://blog.hinshelwood.com/one-team-project-collection-to-rule-them-allconsolidating-team-projects/
    comment_author_IP: 184.168.230.128
    comment_date: '2012-07-16 17:57:06'
    comment_date_gmt: '2012-07-17 00:57:06'
    comment_content: "[...] consolidation we only have one Process Template mapping to work about… or do we. If you used method #7 for migrating\_ your process template you will be left with extra fields that are not part of the [...]"
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1342486626.44";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:12:"1342486796.5";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1177'
    comment_author: Jeff Smith
    comment_author_email: ''
    comment_author_url: http://twitter.com/visionary1usa
    comment_author_IP: 65.197.184.58
    comment_date: '2012-09-06 12:41:00'
    comment_date_gmt: '2012-09-06 19:41:00'
    comment_content: >-
      We have an accumulation of team projects on about 10 collections based on
      many templates, versions, and subsequent customizations. We have some
      collections that have only one team project (WHO DID THAT!?) and we want
      to get down to 1-2 collections(Old stuff &amp; new stuff) and 1 standard
      process template. I see Method 7 as big opportunity for a good chunk of
      the work... but I have 2 outstanding concerns.

      * We have some team projects that originated in TFS2008 - we may have some
      that started in TFS2005. I want to preserve my ability to upgrade to 2012
      at some point, but I am not sure which activites I need to perform to
      ensure this. We are not nearly able to go there right now, but it will
      surely happen soon enough. How do I discover the original version and
      process template - and what do I need to do to preserve "upgradeability"?

      * That said, since we have lots of variation across all these team
      projects - the very noticeable disparity is differing state-flows. I can
      see how it may be possible to manage old data into new fields - but what
      about managing state-transition history. It would be spectacular-awesome
      if there is a path to keeping dates &amp; transitions but mapped into the
      new state names. If this is possible, we have no hiccups in the flow
      history and we transition to normalized reporting across the product
      portfolio. Is there a way to preserve some or all of the transition
      history?

      Thanks in advance for all awesomeness provided.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '642324572'
  - comment_id: '1178'
    comment_author: Jeff Smith
    comment_author_email: ''
    comment_author_url: http://twitter.com/visionary1usa
    comment_author_IP: 65.197.184.58
    comment_date: '2012-09-06 15:08:00'
    comment_date_gmt: '2012-09-06 22:08:00'
    comment_content: >-
      Regarding part 2 in my prior email... I wonder if actually changing the
      stateflow for an instanciated workitem is even possible.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '642470989'
  - comment_id: '1179'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 70.183.83.195
    comment_date: '2012-09-06 23:17:00'
    comment_date_gmt: '2012-09-07 06:17:00'
    comment_content: >-
      It is not only possible, but to move to a new process template with new
      work item types is is altogether probable...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1178'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '642470989'
    - meta_key: dsq_post_id
      meta_value: '642994085'
  - comment_id: '1180'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 70.183.83.195
    comment_date: '2012-09-06 23:19:00'
    comment_date_gmt: '2012-09-07 06:19:00'
    comment_content: >-
      All the history is preserved even if you change the workflow. Once your
      workflow is normalised you will still see all of the old crusty
      transitions in the list, even if they no longer exist in the new template.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1177'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '642324572'
    - meta_key: dsq_post_id
      meta_value: '642995760'
  - comment_id: '1181'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 70.183.83.195
    comment_date: '2012-09-06 23:20:00'
    comment_date_gmt: '2012-09-07 06:20:00'
    comment_content: >-
      Having one team project is not only a good idea, it is recommended and
      even more so with the move to 2012...

      http://blog.hinshelwood.com/one-team-project/
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1177'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '642324572'
    - meta_key: dsq_post_id
      meta_value: '642997015'
  - comment_id: '1182'
    comment_author: >-
      Process Template Upgrade #7 &ndash; Overwrite retaining history with
      limited migration - Visual Studio ALM with Team Foundation Server, Visual
      Studio &amp; Scrum | Visual Studio ALM | Scoop.it
    comment_author_email: ''
    comment_author_url: >-
      http://www.scoop.it/t/visual-studio-alm/p/3077497569/process-template-upgrade-7-overwrite-retaining-history-with-limited-migration-visual-studio-alm-with-team-foundation-server-visual-studio-scrum
    comment_author_IP: 89.30.105.121
    comment_date: '2012-10-24 03:08:01'
    comment_date_gmt: '2012-10-24 10:08:01'
    comment_content: >-
      [...] Process Template Upgrade #7 &ndash; Rename Work Items and Import new
      ones &nbsp; Move to a process template while retaining history and
      functionality. Don&#039;t settle for enabling new features, jump in and
      migrate...&nbsp; [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1351073281.25";s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";s:13:"1351092406.32";s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1183'
    comment_author: Upgrading from TFS 2008 to TFS 2010 Overview - Visual Studio ALM
    comment_author_email: ''
    comment_author_url: http://blog.hinshelwood.com/upgrading-from-tfs-2008-to-tfs-2010-overview/
    comment_author_IP: 96.126.104.162
    comment_date: '2013-03-09 20:46:27'
    comment_date_gmt: '2013-03-10 04:46:27'
    comment_content: >-
      [...] Process Template Upgrade #7 – Rename Work Items and Import new
      ones#7 is now my recommended norm and includes [...]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1362890787.458084;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1362891167.945684;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '1184'
    comment_author: Ole Sjøbakken
    comment_author_email: ''
    comment_author_url: http://twitter.com/olesjo
    comment_author_IP: 85.19.27.194
    comment_date: '2013-04-03 03:38:00'
    comment_date_gmt: '2013-04-03 10:38:00'
    comment_content: >-
      Great article, but I'm a bit unsure if this approach requires me to create
      a new tfs project or not? I have created custom states in my old Agile 5.0
      template, and I am not allowed to create a new Project, getting an
      errormessage that complains about my custom state. How to handle this?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '850613219'
  - comment_id: '1185'
    comment_author: cpiock
    comment_author_email: cpiock@outlook.com
    comment_author_url: ''
    comment_author_IP: 62.101.0.30
    comment_date: '2013-04-26 13:34:00'
    comment_date_gmt: '2013-04-26 12:34:00'
    comment_content: >-
      i have updated my template and now on th story- and taskboard the states 
      are corrupted. Means that Resolved is after closed. Even if i use the same
      states and Workflow from the MSF 6.2 Userstory.


      Did you have any idea?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '876773156'
  - comment_id: '1186'
    comment_author: Jon
    comment_author_email: jdalbright05@gmail.com
    comment_author_url: ''
    comment_author_IP: 170.201.180.38
    comment_date: '2013-06-12 14:36:00'
    comment_date_gmt: '2013-06-12 13:36:00'
    comment_content: >-
      I'm about to try this type of upgrade on our instance of SfTS v.3
      (http://scrumforteamsystem.codeplex.com/) to Scrum v2.2 in a test
      environment. I assume I should be able to map the steps for this.

      Have you had any experience with this specific upgrade? Any pitfalls?

      I'll let you know how it goes... :-)
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '927648559'
  - comment_id: '1187'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 65.102.165.25
    comment_date: '2013-06-12 15:53:00'
    comment_date_gmt: '2013-06-12 14:53:00'
    comment_content: >-
      The path that you are travelling is hard one.


      I would recommend creating a new Team Project with the Scrum template in a
      new Collection and porting the tip across. Leave the old collection
      read-only for posterity. Failing that you should have some success with
      the flow described above. I don't have any additional adds except good
      luck...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1186'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '927648559'
    - meta_key: dsq_post_id
      meta_value: '927744277'
  - comment_id: '1188'
    comment_author: Steve
    comment_author_email: steve.landsaw@gmail.com
    comment_author_url: ''
    comment_author_IP: 184.57.187.76
    comment_date: '2013-06-13 07:53:00'
    comment_date_gmt: '2013-06-13 06:53:00'
    comment_content: >-
      I've upgraded to TFS2012.2 and I have a bunch of TPs on the Scrum v1.0
      Process Template. 

      Using the built-in configuration wizard to upgrade doesn't work, because
       we have some customizations (new states, transitions, etc.). Is this 
      proper procedure for upgrading to the new Process Template or should I 

      just follow the MSDN article here: 

      http://msdn.microsoft.com/en-us/library/vstudio/ms194972.aspx? Thanks!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '928688089'
  - comment_id: '1189'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 65.102.165.25
    comment_date: '2013-06-13 16:09:00'
    comment_date_gmt: '2013-06-13 15:09:00'
    comment_content: >-
      If you follow the MSDN article, which is safer, you will have a VS Scrum
      1.0 template with the new features of 2012. If you follow my documentation
      you will have a VS Scrum 2.0 template.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1188'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '928688089'
    - meta_key: dsq_post_id
      meta_value: '929233414'
  - comment_id: '1190'
    comment_author: Jon
    comment_author_email: jdalbright05@gmail.com
    comment_author_url: ''
    comment_author_IP: 170.201.180.38
    comment_date: '2013-07-05 16:08:00'
    comment_date_gmt: '2013-07-05 15:08:00'
    comment_content: >-
      Success! ...at least in the test environment. We'll do it in production in
      a couple of weeks.

      I was able to upgraded our project template inline like this article. I
      had to convert the "Implemented By" link types to "Child". I used this
      tool:
      http://visualstudiogallery.msdn.microsoft.com/eb1862ae-c111-4791-830c-75995414404f.
      I also had to use Excel to bulk convert a couple of the fields.

      Over all it wasn't that bad. It was just a little bit tedious.

      Thank you again Martin for the blog posts! Very helpful!
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1187'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '927744277'
    - meta_key: dsq_post_id
      meta_value: '952873061'
  - comment_id: '2358'
    comment_author: Olivia Jennifer
    comment_author_email: olivia123.jennifer@gmail.com
    comment_author_url: ''
    comment_author_IP: 180.87.201.61
    comment_date: '2014-06-27 05:32:00'
    comment_date_gmt: '2014-06-27 04:32:00'
    comment_content: >-
      Scrum

      has become one of the most popular <a href="http://www.scrumstudy.com/"
      rel="nofollow">Agile methodologies</a> used for software and

      product development. Various factors have contributed to this popularity.
      The

      methodology works very well with complex projects where requirements
      change

      often and/or the technology is new and not used before.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1456633290'
  - comment_id: '13063'
    comment_author: Grant Abernethy
    comment_author_email: grant.abernethy@gmail.com
    comment_author_url: ''
    comment_author_IP: 38.122.113.146
    comment_date: '2015-08-27 16:42:00'
    comment_date_gmt: '2015-08-27 15:42:00'
    comment_content: >-
      Hi Martin,



      Thanks, again, for so much great information here. As I've mentioned in
      other questions on your other articles, I'm bringing my team to TFS for
      the first time. To ease some of the pain for the rest of the team, we did
      a bit of a test run this past weekend during a production release. I
      configured the standing project and work items to have some extra fields
      and workflows to match how our team does a release. It was, overall, a
      success.



      The existing team project was created well before my tenure, and I have no
      idea what template was used as the base. It was an Agile (non-Scrum)
      template, but what version I don't know. 



      After researching the available templates, the Scrum 2013.4 template is
      what we are going to use. I created a test team project to work through
      all the customizations and have everything where I want it. My plan is to:



      1. Export the Categories.xml and ProcessConfiguration.xml files, and the
      work item types from the existing Agile team project, run a query for all
      existing work items and save as excel then;
       
      2. Import, in the following order, Categories.xml,
      ProcessConfiguration.xml, and work items types, from the test template
      team project I have created to the standing team project



      3. If anything goes wrong, I plan on re-importing the exported definitions
      to return the project to it's starting state and re-grouping as necessary.
      I'll also have a record of all work item types created, as a reference



      I'm not so concerned about preserving the extant data associated with work
      item types in the current Agile template. This is because only one team
      has adopted TFS as their project management/ALM tool, and they can
      recreate any work items types necessary for the next development cycle.
      Any data created over this past weekend can be sacrificed as it was really
      just a socialization experiment anyway.



      My questions:

      1. Does this plan seem complete? Will my "rollback" plan work if all else
      fails?



      2. We are only going to be using Feature, User Story, Bug, and Task work
      items, would I get myself backed into a corner to not import the other
      work item types from Scrum 2013.4 at the same time?



      3. The User Story I'm going to import was renamed from Product Backlog
      Item that was inherent in the Scrum 2013.4 template. I tested the rename
      at my test team project and the previously created Product Backlog Items
      actually disappeared upon importing the Categories.xml,
      ProcessConfiguration.xml, and ProductBacklog item. I think this is because
      of the name change. I'm worried about importing it to the existing Agile
      template because I didn't rename the file ProductBacklog to UserStory. Am
      I inviting disaster importing a file named ProductBacklog for an item that
      will be called User Story on the front end?



      Thanks for any insight you can share.



      Grant
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '2221222305'
  - comment_id: '13084'
    comment_author: Grant Abernethy
    comment_author_email: grant.abernethy@gmail.com
    comment_author_url: ''
    comment_author_IP: 71.194.41.93
    comment_date: '2015-08-29 19:14:00'
    comment_date_gmt: '2015-08-29 18:14:00'
    comment_content: >-
      Everything completed fine!



      At first I was worried as none of the items that were in the backlog
      previously were there after the update. I could find them all using
      queries, but they weren't automatically on the backlog. 



      I opened a Bug and saw that there were my new required fields empty, so I
      ran an all items query in Visual Studio, outputting all necessary fields,
      then opened it in Excel and mass updated items with the states that were
      no longer recognized.



      A small miss, but an interesting one: I had renamed Product Backlog Item
      to User Story, but in the ProcessConfiguation.xml file, I forgot to update
      the name associated with the color designation. After updating no more
      errors. Like I said, small, but interesting.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '13063'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '2221222305'
    - meta_key: dsq_post_id
      meta_value: '2225056302'
  - comment_id: '13098'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@nakedalm.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 62.92.230.142
    comment_date: '2015-08-31 08:53:00'
    comment_date_gmt: '2015-08-31 07:53:00'
    comment_content: >-
      I am glad that it was successful. I would update all of the work item
      types so that there is no confusion going forward... + some of the agile
      planning tools might have issues...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '13084'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '2225056302'
    - meta_key: dsq_post_id
      meta_value: '2227357665'
  - comment_id: '13961'
    comment_author: Adekunbi Adewojo
    comment_author_email: aadewojo@gmail.com
    comment_author_url: ''
    comment_author_IP: 62.25.109.205
    comment_date: '2016-04-26 12:17:00'
    comment_date_gmt: '2016-04-26 11:17:00'
    comment_content: >-
      Hi Martin,

      Thanks for clearly explaining this method, I have used it and work well
      for me. However, I have some few questions to ask: 

      1. How do I drop of all my old reports before updating it with the new
      one?

      2. I like to hear your suggestion about renaming sprint, we have just
      upgraded to TFS 2015 from TFS 2010 and most of the projects used different
      template process. There is a particular one that used the scrum template
      and we are updating all of them to Agile, I want to rename sprint but not
      sure of what work item type to rename it in Agile.

      Thanks and look forward to your replies.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '2643350782'
  - comment_id: '13962'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@nakedalm.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 185.69.145.165
    comment_date: '2016-04-26 16:43:00'
    comment_date_gmt: '2016-04-26 15:43:00'
    comment_content: >-
      1) I would  recommend that you use the Scrum template rather than the
      Agile template if you are doing agile. If you are still mostly stage gate
      (waterfall) then the Agile template might be better.

      2) The Sprint work item is gone and does not translate to anything. Delete
      it or leave it as you see fit. I would recommend that if you are leaving
      it you put it in the hidden category though.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '13961'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '2643350782'
    - meta_key: dsq_post_id
      meta_value: '2643726233'
  - comment_id: '13964'
    comment_author: Adekunbi Adewojo
    comment_author_email: aadewojo@gmail.com
    comment_author_url: ''
    comment_author_IP: 62.25.109.205
    comment_date: '2016-04-27 15:32:00'
    comment_date_gmt: '2016-04-27 14:32:00'
    comment_content: >-
      Thank you so much for the prompt reply. Please I need direction on how to
      drop off old reports into a folder. Also work item types Requirement and
      change request will translate to what in Scrum?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '13962'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '2643726233'
    - meta_key: dsq_post_id
      meta_value: '2645472190'
