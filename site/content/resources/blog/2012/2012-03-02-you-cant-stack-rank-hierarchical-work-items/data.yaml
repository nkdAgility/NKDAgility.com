post:
  title: You can't stack rank hierarchical work items?
  link: https://nkdagility.com/blog/you-cant-stack-rank-hierarchical-work-items/
  pubDate: Fri, 02 Mar 2012 00:41:29 +0000
  creator: MrHinsh
  guid:
    _: http://blog.hinshelwood.com/?p=4773
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - >-
    <!-- wp:paragraph -->

    <p>At the MVP Summit I was appalled by the number of people who asked
    questions about new features for supporting hierarchical <em>tasks</em>! I
    shared a disgusted look with <a
    href="https://www.linkedin.com/in/peterprovost/" target="_blank"
    rel="noreferrer noopener">Peter Provost</a> and we had a quick (and I mean
    really quick) conversation that resulted in this post. it really comes down
    to one thing:</p>

    <!-- /wp:paragraph -->


    <!-- wp:quote -->

    <blockquote class="wp-block-quote"><!-- wp:paragraph -->

    <p>You can't stack rank hierarchical work items?</p>

    <!-- /wp:paragraph --></blockquote>

    <!-- /wp:quote -->


    <!-- wp:paragraph -->

    <p>If you want to continue to be competitive in the world of modern software
    development you need to be able to effectively order (stack rank) a list of
    well understood items. This could be at the PBI (or Product Backlog) level
    or it could be at the Task (or Sprint Backlog) level but I need to be able
    to do that ordering by moving things about... how do I do that with a
    tree?</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image1.png"><img
    style="background-image: none; padding-left: 0px; padding-right: 0px;
    display: inline; padding-top: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb1.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: How do you
    order a tree?</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>No really! Lets look at a couple of specific questions:</p>

    <!-- /wp:paragraph -->


    <!-- wp:list -->

    <ul><!-- wp:list-item -->

    <li><strong>What do you expect to happen when you reorder “PBI 3”
    above?</strong>

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image2.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb2.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: If you said
    they all move then you get a prize</strong></p>

    </li>

    <!-- /wp:list-item --></ul>

    <!-- /wp:list -->


    <!-- wp:paragraph -->

    <p>This has to be the expected out come because of that pesky parent / child
    relationship.</p>

    <!-- /wp:paragraph -->


    <!-- wp:list -->

    <ul><!-- wp:list-item -->

    <li><strong>What would you expect to happen when you drag “PBI 8” to be
    between “PBI 1”&nbsp; and “PBI 2”?</strong>

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image3.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb3.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: Was that what
    you expected?<br /></strong><br />If you said that it would move to the
    right location then you also get a prise, but what do you think happened to
    the parent relationship with “PBI 3”? Thats right, it was removed as that
    item can no longer exist as a child or “PBI 3”…</p>

    <p><em>Note: You can keep the relationship by creating it as a “related”
    relationship, or you could add a custom one.</em></p>

    </li>

    <!-- /wp:list-item --></ul>

    <!-- /wp:list -->


    <!-- wp:paragraph -->

    <p>So what is the expected behaviour when you discover a PBI that is too
    large (for whatever reason) and you want to break it down into two smaller
    ones. Once you have broken a PBI down into two smaller ones that encompass
    all of the things we need to make the larger one what purpous does it solve…
    have we not just replaced it? Well then, lets remove it.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image4.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb4.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: <img
    src="http://blog.hinshelwood.com/files/2012/03/metro-icon-tick.png" alt=""/>
    Good example, Mark the parent story as removed</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>This only makes sense as I have all of the relevant information in the
    two new PBI's.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image5.png"><img
    style="background-image: none; padding-left: 0px; padding-right: 0px;
    display: inline; padding-top: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb5.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: Now I have no
    “PBI 3”</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>If I look at the history for that “removed” PBI I can, and I will, be
    able to see all of the history including that the links to the children
    still exist. This means that you can still query and see what those
    relationships were without them interfering with the backlog any more.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image6.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb6.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: I can still
    have my tractability</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>Let me jus say that I am not suggesting that you do not use linking,
    there are many links that are and should be available. Which of those links
    are good to use,&nbsp; provide value and make sense&nbsp; for both the team
    and your product owners:</p>

    <!-- /wp:paragraph -->


    <!-- wp:list {"ordered":true} -->

    <ol><!-- wp:list-item -->

    <li><strong>Tasks with a Parent / Child relationship with a PBI<br
    /></strong><br />You need for your team to be able to keep track of the work
    that they are doing to achieve a single PBI and this is that. There are
    other options, but this is the best one.

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image7.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb7.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: <img
    src="http://blog.hinshelwood.com/files/2012/03/metro-icon-tick.png" alt=""/>
    Good example, You can have Task as a child of<br /></strong><br /><a
    href="http://blog.hinshelwood.com/files/2012/03/image11.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb11.png"
    alt="image" width="640" height="319" border="0"/></a><br /><strong>Figure:
    <img src="http://blog.hinshelwood.com/files/2012/03/metro-icon-cross.png"
    alt=""/> Bad example, do not use PBI’s as children of other
    PBI’s</strong></p>

    </li>

    <!-- /wp:list-item --></ol>

    <!-- /wp:list -->


    <!-- wp:list -->

    <ul><!-- wp:list-item -->

    <li><strong>Test Cases with a Tests / Tested By relationship with a
    PBI</strong>

    <p>You want to be able to trace from code to requirements to bugs all with
    the relevant tests that make sure that we built the correct thing.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image8.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb8.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: <img
    src="http://blog.hinshelwood.com/files/2012/03/metro-icon-tick.png" alt=""/>
    Good example, You can show what your PBI is Tested By</strong></p>

    </li>

    <!-- /wp:list-item -->


    <!-- wp:list-item -->

    <li><strong>Bugs that have a Tests / Tested By</strong>

    <p>I would expect this to be a no-brainer as you can’t have a bug unless you
    can prove that it exists. Bugs have “steps to reproduce2 after all and in
    the post MTM world this is the result of a failing Test Case.</p>

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image9.png"><img
    style="background-image: none; margin: 0px; padding-left: 0px;
    padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;"
    title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb9.png" alt="image"
    width="640" height="319" border="0"/></a><br /><strong>Figure: <img
    src="http://blog.hinshelwood.com/files/2012/03/metro-icon-tick.png" alt=""/>
    Good example, Bugs have test Cases too</strong></p>

    </li>

    <!-- /wp:list-item --></ul>

    <!-- /wp:list -->


    <!-- wp:paragraph -->

    <p>I a using the Visual Studio Scrum 2.0 template (default) so while you can
    make things more complicated, this is about as complex and the expected
    common cause use cases go with Work Items. There are other artefacts links
    to support things like Test Results, Code Reviews, Feedback Results and
    others, but they are tool bits not really that user configurable.</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p><a href="http://blog.hinshelwood.com/files/2012/03/image10.png"><img
    style="background-image: none; padding-left: 0px; padding-right: 0px;
    display: inline; padding-top: 0px; border-width: 0px;" title="image"
    src="http://blog.hinshelwood.com/files/2012/03/image_thumb10.png"
    alt="image" width="640" height="319" border="0"/></a><br /><strong>Figure:
    <img src="http://blog.hinshelwood.com/files/2012/03/metro-icon-cross.png"
    alt=""/> Bad example, nesting Work Items is very unwieldy</strong></p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>I am always interested in finding out what other scenarios there are out
    there:</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>Do you agree?</p>

    <!-- /wp:paragraph -->


    <!-- wp:paragraph -->

    <p>What reasons do you have for using hierarchy's?</p>

    <!-- /wp:paragraph -->
  - ''
  post_id: '4773'
  post_date: '2012-03-01 16:41:29'
  post_date_gmt: '2012-03-02 00:41:29'
  post_modified: '2024-03-25 15:51:11'
  post_modified_gmt: '2024-03-25 15:51:11'
  comment_status: open
  ping_status: open
  post_name: you-cant-stack-rank-hierarchical-work-items
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: dsq_thread_id
    meta_value: '595489683'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1aBIWbb
  - meta_key: _thumbnail_id
    meta_value: '11141'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474919851;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:8936;}i:1;a:1:{s:2:"id";i:6160;}i:2;a:1:{s:2:"id";i:9892;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2012-03-01-you-cant-stack-rank-hierarchical-work-items.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '1413'
  - meta_key: _last_editor_used_jetpack
    meta_value: block-editor
  - meta_key: _wpv_contains_gutenberg_views
    meta_value: ''
  - meta_key: _yoast_indexnow_last_ping
    meta_value: '1711381872'
  - meta_key: _yoast_wpseo_primary_category
    meta_value: ''
  - meta_key: _yoast_wpseo_primary_marketing-category
    meta_value: ''
  - meta_key: _yoast_wpseo_content_score
    meta_value: '60'
  - meta_key: _yoast_wpseo_focuskeywords
    meta_value: '[]'
  - meta_key: _yoast_wpseo_keywordsynonyms
    meta_value: '[""]'
  - meta_key: _yoast_wpseo_estimated-reading-time-minutes
    meta_value: '7'
  - meta_key: _yoast_wpseo_wordproof_timestamp
    meta_value: ''
  comment:
  - comment_id: '1133'
    comment_author: Peter Provost
    comment_author_email: ''
    comment_author_url: http://twitter.com/pprovost
    comment_author_IP: 38.119.164.254
    comment_date: '2012-03-01 17:05:00'
    comment_date_gmt: '2012-03-02 01:05:00'
    comment_content: >-
      Good post Martin.


      I think the biggest reason people want hierarchical work items it out of a
      desire to establish a relationship between PBIs or User Stories and more
      meaningful business elements like Experiences and Features. When the boss
      asks "When will that feature be done?" (s)he is really asking a question
      about how the team is doing on the collection of stories that comprise
      that feature.


      David Starr and I have discussed this quite a bit and we've come to the
      conclusion that there is clearly a relationship between a story and one of
      these higher level business items, but it is NOT a parent-child
      relationship!! It is just a "relates to" relationship. This is even more
      clear when you realize that in fact a single PBI or User Story can
      contribute to multiple Experiences or Features. This many:many
      relationship clearly shows that it is not a hierarchical relationship.


      Adding parent-child hierarchies is a reasonable ask when you first look at
      it, but it clearly doesn't work out, as you show above.


      Now as for why people would even want hierarchical tasks, I have no idea
      at all.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '453976394'
  - comment_id: '1134'
    comment_author: Kym Phillpotts
    comment_author_email: kphillpotts@gmail.com
    comment_author_url: ''
    comment_author_IP: 122.102.100.177
    comment_date: '2012-03-04 18:08:00'
    comment_date_gmt: '2012-03-05 02:08:00'
    comment_content: "Yup, good post Martin.\n\nI completely agree with you what you have to say in this post. \_\n\nIn our development environment (using TFS2010) I strongly discourage use of Nested Stories. \_ For all of the reasons you specify in this post. \_Also (especially in TFS2010) it just makes the backlog harder to read and understand. \_I encourage our team to have basically two levels for everything. \_ A user story and underneath that a collection of Tasks.\n\nWhen you think about it, if you are nesting User Stories in TFS you are pretty much just breaking best practices for User Stories, you have broken the I in INVEST. \_In other words, you are indicating they are not INDEPENDENT. \_You are probably breaking the S as in SMALL as well :)\n\nI encourage trying to keep the backog as simple as possible, makes it so much easier to report on and understand."
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '456445571'
  - comment_id: '1135'
    comment_author: Harry Nieboer
    comment_author_email: ''
    comment_author_url: http://twitter.com/harrynieboer
    comment_author_IP: 213.154.239.254
    comment_date: '2012-04-04 08:16:00'
    comment_date_gmt: '2012-04-04 15:16:00'
    comment_content: "Martin,\n\nNice post that definitely makes sense for lots of projects.\nWe make use of hierarchical work items to relate our work to meaningful business elements, and we make use of sorting, but we don't want to sort the hierarchy ;-)\n\nAt our company we make use hierarchical items on the Product Backlog. We distinguish between a Theme, Epic, Feature and Story. Themes are about investments (in euros of manmonths), Epics are about more or less (making product delivery faster or inventory cheaper), Features are about how Epics will be supported by (automated) tools and Stories are about chunks of functionality that can be built by the Team in Sprints.\nThemes and Epics are for reasoning about upcoming and current releases (the portfolio level), Features and Stories are for reasoning about delivering value by supporting the business (the project level).\n\nWe definitely like to put our Themes, Epics, Features and Stories in a hierarchy as it is an intuitive way to show them and discuss them with the team and with stakeholders. We try to keep is simple, so we allow for a tree (one to many), but not for a forest (many to many)\nThe hierarchy also helps us in situations where we need traceability, i.g. from the investment to handle a business risk to the delivered functionality lowering that risk. Or from a company wide architectural decision (an Epic) to the functionalilty built do support that decision.\n\nAt our company, Stories should be Ready, for us that means INVEST and small enough for a Team to deliver during a sprint. Stories are ranked. The top ranked stories should be delivered as soon as possible. So when we decide upon what to do in the next sprint, we query our product backlog for Product Backlog Items of type \"Story\" and state \"Ready\" ordered by Stack Rank.\_This query is a simple flat list and normally does not contain more than twenty stories. More is too much work in progress (WIP). These stories can literally come from everywhere in the hierarchy, as it is common that part of an important Feature can be postponed to be delivered at a later moment.\n\nOf course, our stakeholders also want insight into our project to find out whether the changes they requested will make it on time. Therefor we query our product backlog for \_for Product Backlog Items of type \"Story\" and state \"New\" and \"Preparing\".\n\nThis query is also a simple flat list and can normally contain more than a hundred stories. Some big, some small, most of them not yet INVEST. All stories have an estimated number of story points. Based on the velocity of the team (in story points) we can easyly indicate for every story how many sprints it will take before that story will be implemented.\n\nDuring the sprint, the team should be working on the stories with the highest priority. This gives reason for a third query. We query our product backlog for Product Backlog Items of type \"Story\" and state \"In Sprint\" ordered by Stack Rank. It is an hierarchical query showing the stories with underlying Tasks (sprint backlog), Defects and Impediments.\n\nTo summarize: our Product Backlog is sorted (one hierarchical and two flat list queries for three different reasons) on Stack Rank.\n\nOur product backlog hierarchy is also sorted, as there is always some reason one Epic should be shown before another. We do not use the Stack Rank attribute for this purpose, but use an extra attribute (Rank) for that purpose. The order used here is for presentation purpouses and is mostly along a timescale or along the steps of a business process. It has less to do with ordering on business value for which we use the Stack Rank.\n\nUsing a different attribute (Rank vs Stack Rank) helps to make sure ordering in one dimension does not interfere with the ordering in another dimension.\n\nHarry Nieboer\nInfo Support"
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '486080408'
  - comment_id: '1801'
    comment_author: Rajko
    comment_author_email: watercove@googlemail.com
    comment_author_url: ''
    comment_author_IP: 178.15.128.242
    comment_date: '2013-08-16 19:31:00'
    comment_date_gmt: '2013-08-16 19:31:00'
    comment_content: >-
      Hi Martin, good post so far but tell me how do you handle feature
      enhancements? In our case, we use the hierarchy to show which functions
      our modules have. If we for example want to enhance a feature with a new
      functionality, we add it as linked pbi to the existing one, same thing
      with bugs. If a PBI (feature) doesn't work, we link a bug as child. Thanks
      in advance.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1004051195'
  - comment_id: '1802'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://blog.hinshelwood.com/
    comment_author_IP: 184.166.58.49
    comment_date: '2013-08-16 19:46:00'
    comment_date_gmt: '2013-08-16 19:46:00'
    comment_content: >-
      1) It is ok to take the understanding of the hierarchy into account when
      you are stack raking, but you can only physically stack rank a flat list.
      If you are on Team Foundation Server 2013 you get separate Feature and
      Backlog Item backlogs where you can stack rank
      (http://nkdagility.com/video-new-with-visual-studio-2013-manage-portfolio-backlogs-to-understand-the-scope-of-work/)
      each separately with knowledge of each other.


      2) It sounds like you are on one of the MSF process templates. While they
      are 'agile' implementations of MSF, I would not consider them agile. In
      MSF the bugs are treated separately so as not to burden the customer with
      all of the bugs you as a consulting company are adding to the system. We
      will keep them separate and hidden. In the Scrum template( the only agile
      one in TFS) bugs are backlog items that are stack ranked like any other.
      As the template inhibits the businesses ability to prioritize effectively
      I would recommend moving to the Scrum template
      (http://nkdagility.com/upgrading-to-visual-studio-scrum-3-0-process-template-in-tfs-2013/)
      which will set you in better stead.


      Ultimately if you are looking at a flat list and ordering that list you
      will be OK regardless of the meta data that you use to make ordering
      decisions.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '1801'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1004051195'
    - meta_key: dsq_post_id
      meta_value: '1004067579'
  - comment_id: '2051'
    comment_author: David V. Corbin
    comment_author_email: david.corbin@dynconcepts.com
    comment_author_url: ''
    comment_author_IP: 199.5.1.62
    comment_date: '2013-12-19 21:33:00'
    comment_date_gmt: '2013-12-19 21:33:00'
    comment_content: >-
      I am middle of the road here. While I agree with the limitations, there is
      also the matter encapsulation and abstraction. One Work Item may be atomic
      when looked at as part of a flat list, but internally have multiple parts
      that have no meaning outside of the context of the parent. The examples
      about moving items are all compatible with this. A child must move with
      the parent (no emancipated minors)....


      The problem (From my perspective) is when one is looking at the children
      SOLELY within the context of the parent.  There is definite utility to
      being able to order these within that context.

      Unfortunately, it is not there.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1170706160'
