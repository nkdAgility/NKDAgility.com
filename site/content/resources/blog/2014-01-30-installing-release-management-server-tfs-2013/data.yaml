post:
  title: Installing Release Management Server for TFS 2013
  link: https://nkdagility.com/blog/installing-release-management-server-tfs-2013/
  pubDate: Thu, 30 Jan 2014 11:30:07 +0000
  creator: MrHinsh
  guid:
    _: http://nakedalmweb.wpengine.com/?p=10351
    $:
      isPermaLink: 'false'
  description: ''
  encoded:
  - "<p class=\"lean\">Unless you have been living under a rock you might have noticed that Microsoft has added a Release Management tool to its Visual Studio product line. I have been playing with it for a while now and I think I have it figured out. However as this is a new addition to the product it is extremely poorly documented.</p>\r\n<p>I have just finished writing for the Release Management chapter in Professional Application Lifecycle Management with Visual Studio 2013 [<a title=\"Professional Application Lifecycle Management with Visual Studio 2013 on Amazon USA\" href=\"http://www.amazon.com/gp/product/1118836588/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1118836588&amp;linkCode=as2&amp;tag=martinhinshe-20\" target=\"_blank\">Amazon USA</a> | <a title=\"Professional Application Lifecycle Management with Visual Studio 2013 on Amazon UK\" href=\"http://www.amazon.co.uk/gp/product/1118836588/ref=as_li_ss_tl?ie=UTF8&amp;camp=1634&amp;creative=19450&amp;creativeASIN=1118836588&amp;linkCode=as2&amp;tag=marthinssblog-21\" target=\"_blank\">Amazon UK</a>] and while I covered the ALM aspects I did not really cover how to install the components. So here goes...</p>\r\n<p>You can either download the individual components from <a href=\"http://www.visualstudio.com/en-us/downloads#d-release-management\" target=\"_blank\">the Visual Studio site</a> or if you have an MSDN account you can download an ISO with all three applications inside.</p>\r\n<p>Note: If you want to take the public download offline you can run \"setup.exe /layout\" and all of the components will be downloaded for offline use. Good for servers not on the internet.</p>\r\n<p><img style=\"background-image: none; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-width: 0px;\" title=\"clip_image001\" alt=\"clip_image001\" src=\"https://nkdagility.com/wp-content/uploads/2014/01/clip_image0012.png\" width=\"800\" height=\"450\" border=\"0\" /><br /><small>Figure: ISO for Release Management for Visual Studio 2013</small></p>\r\n<p>Here I am simply running the rm_server.exe in the 'Server' folder on the ISO.</p>\r\n<p><img style=\"background-image: none; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-width: 0px;\" title=\"clip_image002\" alt=\"clip_image002\" src=\"https://nkdagility.com/wp-content/uploads/2014/01/clip_image0022.png\" width=\"800\" height=\"450\" border=\"0\" /><br /><small>Figure: Installing Release Management Server for Team Foundation Server 2013</small></p>\r\n<p>Selecting the usual licence agreement the only thing of note is the size of the tool. At a mere 25MB this is a ridiculously quick install. Remember this is just putting the files on disk and registering any required DLL's and is not configuring it for use.</p>\r\n<p><img style=\"background-image: none; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-width: 0px;\" title=\"clip_image003\" alt=\"clip_image003\" src=\"https://nkdagility.com/wp-content/uploads/2014/01/clip_image0032.png\" width=\"800\" height=\"450\" border=\"0\" /><br /><small>Figure:</small> Install Release Management Server for Team Foundation Server 2013</p>\r\n<p>There is little drama and it’s a small install that I think finished in just a few minutes, despite the long name :). At the end of the install you get a simple Launch button to launch the configuration tool. There is a link on the start menu as well.</p>\r\n<p><img style=\"background-image: none; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-width: 0px;\" title=\"clip_image004\" alt=\"clip_image004\" src=\"https://nkdagility.com/wp-content/uploads/2014/01/clip_image0041.png\" width=\"800\" height=\"450\" border=\"0\" /><br /><small>Figure: After install you need to launch the configuration</small></p>\r\n<p>Unfortunately as I noted with the Client tool the team has modelled the configuration on the old style Test Agent and Controller configuration rather than the more modern and featureful TFS configuration. I am hoping that this will end up as a node in the main Team Foundation Server configuration wizard. I would settle for the same configuration experience as the SharePoint extensions or Build Agents but what we have now is good enough.. Se la vie, however if it has been integrated it would likely have picked up the DB server and Ports if we were installing on our Team Foundation Server, which I believe to be the common case. Hopefully the TFS team will work on this for the next realese, or even better, in an update for 2013. For now, we are just configuring this as if it was a separate thing.</p>\r\n<p><img style=\"background-image: none; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-width: 0px;\" title=\"clip_image005\" alt=\"clip_image005\" src=\"https://nkdagility.com/wp-content/uploads/2014/01/clip_image0051.png\" width=\"800\" height=\"450\" border=\"0\" /><br /><small>Figure: Configuring Release Management Server</small></p>\r\n<p>In my configuration I am keeping the defaults. As I have the Release Management Server installed on the same server as TFS I will be unlikely have locked down communication between servers and can mostly get away with Network Service.</p>\r\n<p><small><span class=\"label label-info\">Note You can cheat a little here by creating an Active Directory group and adding all of the machine accounts, that how Network Service authenticates, in it. You can then give permission to that group and remove the need for passwords or password changes of service accounts across many computers.</span></small></p>\r\n<p>Now all we have to do is apply the changes..</p>\r\n<p><img style=\"background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;\" title=\"clip_image006\" alt=\"clip_image006\" src=\"https://nkdagility.com/wp-content/uploads/2014/01/clip_image0061.png\" width=\"800\" height=\"450\" border=\"0\" /><br /><small>Figure: All Configuration tasks have completed successfully</small></p>\r\n<p>And low… we have a Release Management Server for Team Foundation Server 2013… First configuration is a little tricky and I covered that in <a href=\"http://nkdagility.com/installing-release-management-client-visual-studio-2013/\">Installing Release Management Client for Visual Studio 2013</a>…</p>"
  - ''
  post_id: '10351'
  post_date: '2014-01-30 11:30:07'
  post_date_gmt: '2014-01-30 11:30:07'
  post_modified: '2014-01-23 10:40:15'
  post_modified_gmt: '2014-01-23 10:40:15'
  comment_status: open
  ping_status: open
  post_name: installing-release-management-server-tfs-2013
  status: publish
  post_parent: '0'
  menu_order: '0'
  post_type: post
  post_password: ''
  is_sticky: '0'
  category: {}
  postmeta:
  - meta_key: _views_template
    meta_value: '0'
  - meta_key: _edit_last
    meta_value: '3'
  - meta_key: authorsure_include_css
    meta_value: ''
  - meta_key: _syn_old_sitegroups
    meta_value: a:0:{}
  - meta_key: _syn_selected_sitegroups
    meta_value: ''
  - meta_key: _wpbitly
    meta_value: http://nkdalm.net/1eketh5
  - meta_key: _mab_post_meta
    meta_value: >-
      a:2:{s:15:"post-action-box";s:7:"default";s:25:"post-action-box-placement";s:6:"bottom";}
  - meta_key: _syn_slave_post_states
    meta_value: a:0:{}
  - meta_key: dsq_thread_id
    meta_value: '2153829795'
  - meta_key: _wpas_done_all
    meta_value: '1'
  - meta_key: _jetpack_related_posts_cache
    meta_value: >-
      a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1474662786;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10321;}i:1;a:1:{s:2:"id";i:10342;}i:2;a:1:{s:2:"id";i:10353;}}}}
  - meta_key: _wpghs_github_path
    meta_value: _posts/2014-01-30-installing-release-management-server-tfs-2013.md
  - meta_key: _sha
    meta_value: ''
  - meta_key: _wpml_media_has_media
    meta_value: '1'
  - meta_key: _tribe_ticket_capacity
    meta_value: '0'
  - meta_key: _tribe_ticket_version
    meta_value: 4.12.1.2
  - meta_key: ekit_post_views_count
    meta_value: '906'
  comment:
  - comment_id: '2107'
    comment_author: >-
      Install Release Management 2013 - naked ALM - Experts in ALM, TFS &amp;
      lean-agile with Scrum
    comment_author_email: ''
    comment_author_url: http://nkdagility.com/install-release-management-2013/
    comment_author_IP: 97.107.139.31
    comment_date: '2014-02-18 16:31:37'
    comment_date_gmt: '2014-02-18 16:31:37'
    comment_content: >-
      [&#8230;] and documented them is posts like Installing Release Management
      Client for Visual Studio 2013 and Installing Release Management Server for
      TFS 2013 however there is always things that don’t quite join up. I often
      have to head off an fix problems [&#8230;]
    comment_approved: '1'
    comment_type: pingback
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: akismet_result
      meta_value: 'false'
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1392741097.731576;s:7:"message";s:28:"Akismet cleared
        this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}
    - meta_key: akismet_history
      meta_value: >-
        a:4:{s:4:"time";d:1392820190.910614;s:7:"message";s:46:"MrHinsh changed
        the comment status to
        approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"MrHinsh";}
  - comment_id: '5941'
    comment_author: Asim Shaikh
    comment_author_email: asim.sh@ikh.me
    comment_author_url: ''
    comment_author_IP: 68.102.151.203
    comment_date: '2014-10-24 00:34:00'
    comment_date_gmt: '2014-10-23 23:34:00'
    comment_content: Can I install management server on the TFS server?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1650830820'
  - comment_id: '5945'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 85.255.232.35
    comment_date: '2014-10-24 05:05:00'
    comment_date_gmt: '2014-10-24 04:05:00'
    comment_content: if you mean Release Management Server than yes.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '5941'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1650830820'
    - meta_key: dsq_post_id
      meta_value: '1651099871'
  - comment_id: '5947'
    comment_author: Asim Shaikh
    comment_author_email: asim.sh@ikh.me
    comment_author_url: ''
    comment_author_IP: 68.102.151.203
    comment_date: '2014-10-24 05:30:00'
    comment_date_gmt: '2014-10-24 04:30:00'
    comment_content: >-
      Thank you and yes I meant Release Management Server. We are a small dev
      team of 15. We are using a single AT, DT and a separate Build server for
      production. I'm assuming I can Install Release Management server on the
      same AT, DT server but would you recommend a separate server for RM or AT,
      DT and RM on same server for production.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '5945'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1651099871'
    - meta_key: dsq_post_id
      meta_value: '1651118342'
  - comment_id: '5948'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 85.255.232.35
    comment_date: '2014-10-24 05:37:00'
    comment_date_gmt: '2014-10-24 04:37:00'
    comment_content: >-
      I always run it on the same server. I expect it to be integrated into the
      AT in the future.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '5947'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1651118342'
    - meta_key: dsq_post_id
      meta_value: '1651123507'
  - comment_id: '7794'
    comment_author: Prabhu
    comment_author_email: sebastianprabhu@gmail.com
    comment_author_url: ''
    comment_author_IP: 14.140.167.194
    comment_date: '2014-11-21 10:23:00'
    comment_date_gmt: '2014-11-21 10:23:00'
    comment_content: >-
      Hi,


      I have a very important question on deployment of project using Release
      Management tool which should be addressed by us ASAP. 


      My Question is whether the deployment of project will be rolled back to
      its previous version if the final approver rejects the deployment through
      mail.


      Will the status changes to "Reject" only  in RM Client..?


      if the status changes to "Reject" only in RM Client then what is the
      configuration I have to do in order to rollback to its previous version
      "AUTOMATICALLY"  when the final approver rejects the deployment.


      Please help.


      Thanks,


      Prabhu.
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1704917272'
  - comment_id: '7801'
    comment_author: Martin Hinshelwood
    comment_author_email: martin@hinshelwood.com
    comment_author_url: http://nkdagility.com/blog
    comment_author_IP: 193.212.101.70
    comment_date: '2014-11-21 13:13:00'
    comment_date_gmt: '2014-11-21 13:13:00'
    comment_content: >-
      @disqus_OtoEfzz0N1:disqus, You need to add a "Rollback" element inside of
      the workflow. If you put one after an action it will be called if that
      action fails. If you have Action1 | Rollback1 | Action2 | Rollback2, then
      both rollbacks will be called in reverse order in the event of Action2
      failing... You can also add a "Rollback Always"...
    comment_approved: '1'
    comment_type: comment
    comment_parent: '7794'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: '1704917272'
    - meta_key: dsq_post_id
      meta_value: '1705138960'
  - comment_id: '11918'
    comment_author: BANNER
    comment_author_email: action_jackson_p@hotmail.com
    comment_author_url: ''
    comment_author_IP: 173.226.135.235
    comment_date: '2015-05-01 16:20:00'
    comment_date_gmt: '2015-05-01 15:20:00'
    comment_content: >-
      Planning on implementing the usage of Release Management, but I'm confused
      on which pieces need to be installed where. The Client portion goes on the
      build machines, do the deployment agents go on the test machines or the
      build machines as well?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '1997806952'
  - comment_id: '12174'
    comment_author: Blake Bennett
    comment_author_email: Blake.Bennett@gmail.com
    comment_author_url: ''
    comment_author_IP: 66.77.129.3
    comment_date: '2015-06-01 15:02:00'
    comment_date_gmt: '2015-06-01 14:02:00'
    comment_content: >-
      Thanks for this (and the configuration post!).  One quick question
      though--based on my assumption that we need a SQL Server installation to
      exist underneath the RM installation first...if my RM is on a separate
      box, can I still get away with Network Service or do I need to plug in TFS
      Service account values in my SQL Server install?
    comment_approved: '1'
    comment_type: comment
    comment_parent: '0'
    comment_user_id: '0'
    commentmeta:
    - meta_key: dsq_parent_post_id
      meta_value: ''
    - meta_key: dsq_post_id
      meta_value: '2056176870'
