{
  "Large Scale Agility": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Large Scale Agility",
    "calculated_at": "2025-08-07T06:10:13",
    "ai_confidence": 26.65,
    "ai_mentions": 0.6,
    "ai_alignment": 2.4,
    "ai_depth": 2.2,
    "ai_intent": 2.6,
    "ai_audience": 9.5,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on dispelling the myth that software complexity blocks continuous delivery, using a large Azure DevOps example. While it touches on scaling in a large org and technical practices at scale, it does not directly discuss frameworks, enterprise Agile, or scaling methodology. There are no explicit mentions of Large Scale Agility principles, frameworks (e.g. SAFe, LeSS), or enterprise transformation topics. Its main intent is to address blockers to CD rather than provide strategies for Agile at scale. Audience and signal scores are high due to large-org relevance, but relevance to the specific category is weak and mostly implied.",
    "reasoning_summary": "Content references a large org’s transformation, but does not directly address Large Scale Agility frameworks or principles. Fit is partial, as scale is context not theme—no direct focus on Agile scaling.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Tenet",
    "calculated_at": "2025-05-16T20:20:54",
    "ai_confidence": 52.5,
    "ai_mentions": 2.3,
    "ai_alignment": 6.2,
    "ai_depth": 5.7,
    "ai_intent": 7.3,
    "ai_audience": 8.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 52.0,
    "reasoning": "The content challenges the misconception that complexity blocks CD and promotes actionable practices (investing in quality, addressing technical debt) exemplified by Azure DevOps, which aligns with tenets like continuous improvement. However, it never directly names these as 'tenets' or explicitly frames them as guiding principles—which limits scores on mentions and depth. The intent and audience scores are higher due to the clear focus on practical improvement for software practitioners.",
    "reasoning_summary": "While the piece advocates actionable improvement and addresses barriers to CD, it stops short of directly discussing tenets or naming them. It’s quite relevant to practitioners seeking prescriptive guidance, but the lack of explicit tenet framing moderates confidence.",
    "level": "Tertiary"
  },
  "Collaboration Tools": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Collaboration Tools",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 10.36,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.4,
    "ai_intent": 0.8,
    "ai_audience": 3.2,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses on debunking the misconception that software complexity blocks continuous delivery, using the Azure DevOps team as a case study. The main themes are technical debt, automation, and investment in CD practices, with no explicit or implicit discussion of collaboration tools, platforms, or strategies to enhance team communication or coordination. While the audience overlaps somewhat with those interested in collaboration tools (tech leaders, practitioners), the substance and focus are misaligned with the category requirements.",
    "reasoning_summary": "This content is about overcoming technical debt and process barriers for continuous delivery, not about collaboration tools. It neither discusses, mentions, nor aligns with team communication platforms, so confidence is very low that it fits the 'Collaboration Tools' category.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Revenue per Employee",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 3.35,
    "ai_mentions": 0.15,
    "ai_alignment": 0.6,
    "ai_depth": 0.6,
    "ai_intent": 0.4,
    "ai_audience": 0.8,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content does not mention 'Revenue per Employee' explicitly or implicitly. Its sole focus is on dispelling 'software complexity' as a barrier to continuous delivery, emphasizing technical debt and investment in automation. None of the discussion references or analyzes workforce efficiency or uses any financial metrics. The only minor alignment is indirect, as business throughput could relate to delivery frequency, but this is marginal at best without actual metric-based discussion.",
    "reasoning_summary": "This content is almost entirely off-category, focusing on technical and organizational blockers for continuous delivery without discussing 'Revenue per Employee' or related financial metrics. There's negligible conceptual or thematic alignment, resulting in very low confidence.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-16T20:20:55",
    "ai_confidence": 84.85,
    "ai_mentions": 7.1,
    "ai_alignment": 9.2,
    "ai_depth": 8.6,
    "ai_intent": 9.0,
    "ai_audience": 8.4,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 85.0,
    "reasoning": "The content directly addresses continuous delivery (CD), challenging the misconception that complexity is a true barrier. CD is explicitly mentioned and used as the lens to analyze organizational excuses versus actual blockers (technical debt, lack of investment in automation/quality). The main example—a detailed Microsoft Azure DevOps case—demonstrates CD practices at scale, supporting principles like automation, pipelines, frequent deployment, and quality investment. The discussion is focused, relevant, and aimed at practitioners or leaders facing CD adoption concerns. There's some brevity, leaving some depth untouched (e.g., specific tools/techniques aren't discussed in detail), but the alignment, purpose fit, and conceptual linkage are all high.",
    "reasoning_summary": "This content sharply debunks a common myth about continuous delivery, using a real-world case to demonstrate that complexity isn't a barrier—investment in quality and automation is key. It’s strongly aligned, audience-focused, and dives well into CD principles and cultural change.",
    "level": "Primary"
  },
  "Scaling": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Scaling",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 24.03,
    "ai_mentions": 1.2,
    "ai_alignment": 2.5,
    "ai_depth": 2.9,
    "ai_intent": 2.4,
    "ai_audience": 6.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content addresses organizations delivering at large scale (e.g., Microsoft Azure DevOps), mentioning scale in passing but focusing on debunking software complexity as a barrier to continuous delivery. The main thrust is about investment in quality, automation, and technical debt, not frameworks or methodologies for scaling Agile or coordinating multiple teams. There are no explicit references to scaling frameworks, strategies, or key scaling challenges. The audience (tech leaders and practitioners) overlaps somewhat, but the topic is largely about CD obstacles rather than scaling practices. As such, the conceptual fit is weak, the depth limited, and only tangential relevance to the Scaling category.",
    "reasoning_summary": "This content challenges the excuse of complexity as a barrier to continuous delivery, highlighting investment and technical debt as true blockers. While referencing large-scale orgs like Microsoft, it doesn't focus on scaling frameworks or methodologies, so fit with the Scaling category is minimal.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "T-sHn-OUIvR",
    "category": "System Configuration",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 21.3,
    "ai_mentions": 1.5,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.9,
    "ai_audience": 6.1,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses on barriers to adopting continuous delivery, emphasizing technical debt and investment in automation and quality. While CD pipelines and automation are related to system configuration, the article doesn't explicitly discuss configuration tools, best practices, or ongoing maintenance. Direct mentions of relevant configuration topics are minimal and the discussion lacks depth in the targeted category. The audience is somewhat aligned, but the main emphasis is on organizational mindset and process change, not practical configuration details.",
    "reasoning_summary": "This content discusses organizational obstacles to continuous delivery rather than offering detailed guidance on system configuration. While it references automation and quality—tangentially related—it's not a deep or direct fit for the System Configuration category.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Definition of Done",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 18.1,
    "ai_mentions": 0.3,
    "ai_alignment": 1.6,
    "ai_depth": 2.0,
    "ai_intent": 2.2,
    "ai_audience": 3.4,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content does not mention 'Definition of Done' explicitly or discuss its principles, criteria, or relevance. It focuses on the challenges of continuous delivery, software complexity, and technical debt, but does not reference DoD or its role in Agile. The alignment and depth are very weak, as the subject matter is tangential at best and the intent is strictly centered on CD and organizational blockers. The audience (software teams/organizations) is somewhat adjacent to DoD's typical audience, but the core topic is not related.",
    "reasoning_summary": "This content is focused on organizational blockers to continuous delivery, not on the Definition of Done. There are no mentions or substantial discussions of DoD, and the alignment with the category is poor, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Strategy": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Strategy",
    "calculated_at": "2025-05-16T20:20:55",
    "ai_confidence": 41.72,
    "ai_mentions": 1.9,
    "ai_alignment": 5.5,
    "ai_depth": 4.7,
    "ai_intent": 6.2,
    "ai_audience": 7.3,
    "ai_signal": 8.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content primarily focuses on debunking the myth that software complexity prevents continuous delivery, citing Microsoft's example. While it touches on investment in quality, technical debt, and organizational willingness to improve—which are strategic themes—it doesn't explicitly discuss high-level strategic alignment, frameworks, or planning. The audience seems to be organizational decision-makers but the depth stays tactical, focusing on actions rather than strategy formation or vision. No penalties apply as the tone is not outdated or critical of the concept of strategy.",
    "reasoning_summary": "This content is more about challenging excuses for avoiding continuous delivery than outlining strategic approaches. While it mentions investment and organizational barriers that relate to strategy, it doesn't dive deeply into strategic frameworks or planning. Thus, it loosely fits the strategy category.",
    "level": "Tertiary"
  },
  "Customer Focus": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Customer Focus",
    "calculated_at": "2025-05-16T20:20:57",
    "ai_confidence": 13.1,
    "ai_mentions": 0.5,
    "ai_alignment": 1.8,
    "ai_depth": 1.9,
    "ai_intent": 2.6,
    "ai_audience": 2.7,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content discusses software complexity and obstacles to continuous delivery, focusing on technical debt, quality, and investment in engineering practices. It does not directly address customer outcomes, customer value, feedback loops, or measurement from the user's perspective. There are no explicit or implied actionable practices on customer focus. The topic and examples are aligned with internal delivery efficiency rather than customer-centric concerns. The audience is likely practitioners interested in engineering or DevOps, but the discussion is about process improvement, not how software delivery is aligned to, driven by, or measured against customer needs or value. Accordingly, relevance to the 'Customer Focus' category is minimal and mostly incidental.",
    "reasoning_summary": "This content centers on overcoming technical debt and improving delivery cadence, not on defining or measuring customer value. It lacks focus on customer needs, feedback, or outcomes—so it only loosely relates to 'Customer Focus.'",
    "level": "Ignored"
  },
  "Technical Debt": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Technical Debt",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 76.965,
    "ai_mentions": 7.2,
    "ai_alignment": 8.7,
    "ai_depth": 7.9,
    "ai_intent": 7.6,
    "ai_audience": 7.1,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 77.0,
    "reasoning": "The content explicitly references technical debt as the true blocker for continuous delivery, contrasting it with the misconception that complexity is the obstacle. The primary theme is conceptual alignment: challenging organizations to address technical debt directly, illustrated by Microsoft Azure DevOps’s experience. While technical debt is not discussed in extraordinary depth, its impact on delivery and the value of investing in remediation are covered, showing strong relevance. The piece is concise and focused on technical teams and leadership, maintaining a high signal-to-noise ratio. No penalties apply as the discussion is current and supportive of best practices.",
    "reasoning_summary": "The content frames technical debt as the main obstacle to delivery, debunking the complexity myth. It uses a strong real-world case, making it practical for technical audiences. While not ultra-detailed, it offers substantial alignment with the technical debt category.",
    "level": "Secondary"
  },
  "Agentic Agility": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agentic Agility",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 37.59,
    "ai_mentions": 0.7,
    "ai_alignment": 3.6,
    "ai_depth": 3.8,
    "ai_intent": 3.5,
    "ai_audience": 7.1,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "Direct mentions of agentic agility or agency concepts are absent; the content centers on overcoming perceived barriers to continuous delivery by confronting technical debt and investing in automation. While agency (the willingness to act) is alluded to implicitly, the main focus is on technical blockers, not a substantive exploration of agentic agility. The audience (practitioners, leaders in tech orgs) aligns well, and the signal is high, but the conceptual fit and depth are weak for this category.",
    "reasoning_summary": "This content challenges misconceptions about software complexity obstructing continuous delivery, promoting proactive technical investment. While it briefly touches on agency (willingness to act), it does not deeply discuss agentic agility, yielding a low-moderate confidence fit.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Backlog",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 6.08,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 0.2,
    "ai_audience": 5.1,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content does not directly mention or discuss product backlog or its management. Instead, it critiques the misconception that software complexity blocks continuous delivery, focusing on technical debt, automation, and quality practices. There's no exploration of backlog topics, techniques, or roles; audience overlap is minimal (software delivery teams) but indirect. The content is off-topic for 'Product Backlog,' leading to a very low confidence score.",
    "reasoning_summary": "This content centers on overcoming barriers to continuous delivery and doesn't mention or align with Product Backlog concepts, practices, or roles; thus, it fits the category very poorly.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Personal",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 24.98,
    "ai_mentions": 1.2,
    "ai_alignment": 2.4,
    "ai_depth": 2.8,
    "ai_intent": 2.1,
    "ai_audience": 7.3,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content critiques a common organizational excuse for avoiding continuous delivery but lacks explicit personal anecdotes or individual reflections. It references Microsoft Azure DevOps as an example, focusing on organizational behavior rather than personal experience. The alignment and depth with the 'Personal' category are minimal; no subjective interpretation, personal challenge, or unique insight is provided—only a generalized opinion about organizational barriers.",
    "reasoning_summary": "This content discusses organizational challenges with continuous delivery, referencing Microsoft, but offers no personal anecdotes or individual reflections. Its focus is on general critique, lacking the subjective or experiential perspective needed for the 'Personal' category.",
    "level": "Ignored"
  },
  "Method": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Method",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 46.8,
    "ai_mentions": 1.1,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 5.0,
    "ai_audience": 6.1,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content critiques the common claim that software complexity precludes continuous delivery, using Microsoft's Azure DevOps team as a counterexample. It mentions investments in quality practices, technical debt reduction, and building delivery pipelines, suggesting method-related topics. However, these are referenced as supportive actions, not detailed method discussions. There is no direct exploration of structured, step-by-step procedures, method terminology, or deep procedural analysis. The main intent is motivational, targeting organizations hesitant to adopt CD. The audience is somewhat aligned (delivery-focused practitioners), and the signal is moderate: some method relevance, but the focus lies on overcoming organizational inertia more than detailing methods.",
    "reasoning_summary": "The content touches on method-adjacent topics—like quality practices and CD pipelines—but lacks an explicit, detailed discussion of procedural approaches. While it challenges a common myth and encourages investment in improvement, method content is mostly implied, not directly analyzed.",
    "level": "Tertiary"
  },
  "Enterprise Agility": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Enterprise Agility",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 54.55,
    "ai_mentions": 2.1,
    "ai_alignment": 4.8,
    "ai_depth": 4.6,
    "ai_intent": 6.4,
    "ai_audience": 7.3,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content critiques organizational excuses around software complexity as a barrier to continuous delivery, using Microsoft's experience as an example. While it touches on organization-wide change and technical investment at scale (i.e., large, complex software organizations), it is more focused on technical blockers and attitudes toward continuous delivery, rather than on fostering broad enterprise agility. There are otherwise relevant references to systemic change, but key themes such as scaling frameworks, leadership, culture change, or enterprise-level agility principles are only implied, not explored in depth. The audience is organizational (not just technical teams), but the main thrust remains continuous delivery rather than the broader enterprise agility domain.",
    "reasoning_summary": "This content spotlights organizational barriers to continuous delivery, using a prominent example to argue for investment in quality and automation at scale. While it hints at enterprise-level change, it doesn't engage deeply with the broader principles or frameworks of enterprise agility.",
    "level": "Tertiary"
  },
  "Hypothesis Driven Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 10.48,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.0,
    "ai_intent": 1.0,
    "ai_audience": 5.0,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses on debunking common excuses for not using continuous delivery, using Microsoft's example to show success with investment in quality and automation. There is no mention or discussion of Hypothesis Driven Development, experimentation, hypothesis formulation, or validated learning. The themes of technical debt and investment are tangential to the category, with no depth or explicit relevance, keeping confidence extremely low.",
    "reasoning_summary": "This content discusses overcoming barriers to continuous delivery and highlights quality and automation investments, but it does not address Hypothesis Driven Development or its principles. Its fit with the category is minimal.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Discipline",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 42.46,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.8,
    "ai_intent": 4.5,
    "ai_audience": 8.1,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content calls out organizational excuses (software complexity) for not adopting continuous delivery, highlighting that technical debt and quality investments are the real barriers. It references Azure DevOps’ transformation as evidence. However, discipline is only implicitly referenced—there’s focus on continuous delivery (a practice), not on the concept of discipline as a maturing field with principles, governance, or shared standards. The discussion doesn’t cover the broader structure or evolution of the discipline of DevOps, or touch on methodologies, governance, or continuous improvement at a systemic, codified level. While appropriately targeted to a technical/professional audience, the majority of the content is motivational and advocacy rather than substantial exploration of discipline’s attributes or maturation.",
    "reasoning_summary": "While the content references DevOps practices and organizational change, it lacks explicit focus on discipline as a structured, maturing field. The primary emphasis is practical barriers to CD, not the systemic principles, governance, or evolution that define discipline.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 5.5,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.6,
    "ai_audience": 1.8,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content focuses on challenging the notion that software complexity blocks continuous delivery, highlighting technical debt and quality investment as true barriers. There is no mention, direct or indirect, of Agile Planning Tools, nor discussion of backlog management, sprint planning, tool usage (like Jira or Trello), or practices aligned with the scope defined. The target audience could partly overlap with Agile practitioners, but that's incidental. Content thoroughly discusses delivery and process improvement, but not planning tools, so confidence is appropriately low.",
    "reasoning_summary": "This content targets overcoming technical debt for continuous delivery, not Agile Planning Tools. There are no mentions of planning tools, techniques, or Agile frameworks, so the fit is weak—confidence is very low.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Coaching",
    "calculated_at": "2025-05-16T20:20:59",
    "ai_confidence": 8.7,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.4,
    "ai_intent": 1.8,
    "ai_audience": 3.6,
    "ai_signal": 0.9,
    "ai_penalties_applied": true,
    "ai_penalty_points": 2.1,
    "ai_penalty_details": "alignment -0.7 (tone is judgmental, undermines collaborative/supportive framing); intent -0.7 (focus is on critique/motivation, not coaching); signal -0.7 (content largely off-topic for coaching)",
    "final_score": 9.0,
    "reasoning": "The content discusses why organizations use complexity as an excuse to avoid continuous delivery, referencing Microsoft's Azure DevOps team. There are no explicit mentions of coaching or related practices. The focus is on overcoming organizational inertia and investing in technical solutions. Although there is a motivational tone, the approach is critical rather than supportive or collaborative. It does not address coaching techniques, psychological safety, growth mindset, or team development. Audience is technical/leadership but not specifically coaching-focused. Penalties were applied for tone contradicting coaching, intent being more motivational than coaching, and signal-to-noise due to lack of relevant coaching content.",
    "reasoning_summary": "This content critiques excuses blocking continuous delivery and uses a Microsoft example for motivation, but it doesn’t discuss coaching or its principles. Its critical tone, lack of explicit coaching references, and focus on technical challenges make it a poor fit for the Coaching category.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 16.36,
    "ai_mentions": 0.2,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 2.6,
    "ai_audience": 4.1,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content critiques the misconception that software complexity prevents continuous delivery, highlighting technical debt and lack of automation investment as true blockers. However, it never directly mentions Internal Developer Platforms or discusses their purpose, architecture, or role. While themes of automation and pipelines are touched upon, the discussion remains focused on cultural and investment practices, not platform frameworks that streamline development. The audience is technical but not IDP-specific. Minimal direct relevance and depth for the IDP category.",
    "reasoning_summary": "This content focuses on overcoming barriers to continuous delivery—chiefly technical debt and investment—not on Internal Developer Platforms. While it touches on automation and pipelines, it doesn't directly discuss IDPs, their implementation, or core concepts, resulting in low category confidence.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-16T20:21:01",
    "ai_confidence": 47.07,
    "ai_mentions": 1.2,
    "ai_alignment": 5.3,
    "ai_depth": 4.2,
    "ai_intent": 4.9,
    "ai_audience": 8.2,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content discusses organisational excuses for not implementing continuous delivery (CD) and uses a Microsoft Azure DevOps case as evidence that complexity is not the real blocker. It focuses primarily on technical debt, quality investment, and automation—technical and process issues—without directly analyzing the interplay between organisational structure/culture and technology. While it references 'organisations' and 'willingness to invest', it lacks thorough exploration of sociotechnical theory, organisational dynamics, or how social/technical systems interact. The audience (organisational/technical leaders) is generally aligned, and the content is mostly focused, but depth and alignment with the true sociotechnical meaning are moderate at best. There are no penalties for tone or outdatedness.",
    "reasoning_summary": "This content critiques common organisational excuses for avoiding continuous delivery but focuses on technical and investment factors rather than systematically exploring social-technical interplay. It offers an illustrative example but lacks direct or deep engagement with sociotechnical systems concepts.",
    "level": "Tertiary"
  },
  "Continuous Improvement": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 62.45,
    "ai_mentions": 2.8,
    "ai_alignment": 6.3,
    "ai_depth": 5.7,
    "ai_intent": 6.2,
    "ai_audience": 7.0,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content addresses breaking through organizational barriers to continuous delivery by focusing on investment in quality and tackling technical debt—concepts related to continuous improvement. It references improvement practices and a success case (Azure DevOps) but does not explicitly mention 'continuous improvement' or delve into its frameworks, methodologies, or the cultural aspects described in the classification definition. The intent encourages improvement and frames obstacles as addressable, but the focus is more on delivery acceleration than on continuous improvement as a holistic discipline. The audience (organizational/technical leaders) is well-aligned, and the argument is focused with few tangents or filler.",
    "reasoning_summary": "While the content promotes themes closely linked to continuous improvement—such as addressing technical debt and investing in quality—it stops short of directly discussing continuous improvement practices or culture. Its fit is solid but not comprehensive for the category.",
    "level": "Secondary"
  },
  "Transparency": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Transparency",
    "calculated_at": "2025-05-16T20:20:56",
    "ai_confidence": 17.41,
    "ai_mentions": 0.3,
    "ai_alignment": 1.8,
    "ai_depth": 2.3,
    "ai_intent": 1.5,
    "ai_audience": 6.3,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on debunking the myth that software complexity is a barrier to continuous delivery, highlighting investments in quality, technical debt, and automation. There are no direct mentions of transparency, nor are transparency-related concepts present as primary or secondary themes. Discussion centers on CD enablement, not openness or visibility, making it only marginally related to the 'Transparency' category.",
    "reasoning_summary": "This content doesn't directly reference transparency or its principles. Its main focus is on overcoming software complexity for continuous delivery through technical investments, making it poorly aligned with the 'Transparency' category.",
    "level": "Ignored"
  },
  "Common Goals": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Common Goals",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 22.95,
    "ai_mentions": 0.7,
    "ai_alignment": 2.2,
    "ai_depth": 2.7,
    "ai_intent": 3.8,
    "ai_audience": 6.3,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content discusses overcoming barriers to continuous delivery, highlighting technical debt, quality investment, and automation. While relevant to Agile and DevOps practices, it does not directly mention or substantively discuss the concept of Common Goals, alignment, or shared objectives. The focus is on dispelling excuses around complexity, not on strategies for aligning teams or defining collective outcomes. The audience is practitioners in DevOps and development, with minimal off-topic content. No penalties were necessary.",
    "reasoning_summary": "This article focuses on technical and organizational barriers to continuous delivery, not on the definition or role of Common Goals. While related to DevOps practices, it lacks direct or deep discussion about shared objectives or team alignment, making its fit for the Common Goals category relatively weak.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Company as a Product",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 22.367,
    "ai_mentions": 0.7,
    "ai_alignment": 2.0,
    "ai_depth": 2.4,
    "ai_intent": 2.3,
    "ai_audience": 6.1,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on debunking the excuse of software complexity as a barrier to continuous delivery, highlighting Microsoft's DevOps transformation. While it discusses organisational change and investment, it does not reference Company as a Product, nor align with its principles. There are no explicit mentions or deep exploration of CaaP concepts like treating the company as a product, customer-centric evolution, or organisational agility. The content primarily addresses technical/process improvement within software delivery.",
    "reasoning_summary": "This content focuses on overcoming technical and process barriers to continuous delivery. It doesn't discuss or reference Company as a Product principles, so confidence for fitting this category is low, with only minor alignment on organisational approach.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Scrum Master",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 7.4,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.7,
    "ai_intent": 0.3,
    "ai_audience": 3.3,
    "ai_signal": 1.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses on challenging the belief that software complexity prevents continuous delivery, using Microsoft as an example. There are no direct mentions of the Scrum Master, the accountability, or related core themes such as enabling empiricism, removing impediments, or system improvement in a Scrum context. The focus is on technical practices, investment in automation, and organizational attitudes, not on Scrum roles or responsibilities. The intended audience seems broader, targeting decision makers interested in delivery practices, but not specifically Scrum Masters. Therefore, the confidence score is very low, reflecting minimal alignment to the Scrum Master category.",
    "reasoning_summary": "This content addresses barriers to continuous delivery, not the Scrum Master accountability. It lacks mentions of Scrum or role-specific responsibilities, so alignment is weak. Overall, the post is about delivery systems, not Scrum Mastery.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Discovery",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 7.8,
    "ai_mentions": 0.0,
    "ai_alignment": 1.7,
    "ai_depth": 1.8,
    "ai_intent": 2.1,
    "ai_audience": 1.2,
    "ai_signal": 1.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content addresses myths about software complexity as a barrier to continuous delivery and presents the Azure DevOps team's shift in release cycle as evidence against that myth. There is no discussion of methodologies for identifying user needs, validating product ideas, or defining product features. The focus is solely on technical practices and operational improvements, unrelated to Product Discovery's definition. No penalties were required.",
    "reasoning_summary": "This article focuses on overcoming technical and process barriers to continuous delivery, not on Product Discovery. It lacks any mention or discussion about understanding customer needs or defining product features. Thus, its fit to the category is extremely low.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Continuous Integration",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 39.1,
    "ai_mentions": 1.9,
    "ai_alignment": 3.5,
    "ai_depth": 3.0,
    "ai_intent": 3.6,
    "ai_audience": 7.3,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content directly discusses 'continuous delivery' (CD), not 'continuous integration' (CI). It addresses overcoming barriers to CD (like complexity and technical debt), referencing investment in quality practices, pipelines, and automation. While CI tools and principles may be implied as foundational for CD, the focus is explicitly on delivery rather than the code integration process. Minimal mention of CI, low conceptual alignment and depth regarding CI-specific themes, but moderate audience and relevance to practitioners.",
    "reasoning_summary": "This content centers on Continuous Delivery, not Continuous Integration. While the audiences are similar and related pipelines are discussed, there’s little direct reference or substantial exploration of CI principles, resulting in a low-to-moderate confidence alignment.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-16T20:21:04",
    "ai_confidence": 54.24,
    "ai_mentions": 2.8,
    "ai_alignment": 6.7,
    "ai_depth": 5.6,
    "ai_intent": 6.2,
    "ai_audience": 6.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content references delivery rates at Microsoft (features per year) and touches on themes of continuous improvement and investment in quality. However, it does not explicitly mention metrics, feedback loops, or learning practices, and offers limited depth on data-driven decision-making. Key terms from the category are largely absent. While it is relevant to teams concerned with delivery improvement, the focus is more on overcoming excuses than exploring metrics or iterative feedback, resulting in moderate alignment and depth scores. No penalties are applied, as the content is current and does not contradict the category framing.",
    "reasoning_summary": "The article relates to improvement in software delivery, referencing delivery rates and addressing technical debt, but lacks explicit discussion of metrics, feedback loops, or learning systems. Thus, it only partially fits the 'Metrics and Learning' category, with relevance more implied than direct.",
    "level": "Tertiary"
  },
  "One Engineering System": {
    "resourceId": "T-sHn-OUIvR",
    "category": "One Engineering System",
    "calculated_at": "2025-05-16T20:21:10",
    "ai_confidence": 23.2,
    "ai_mentions": 0.4,
    "ai_alignment": 2.5,
    "ai_depth": 2.9,
    "ai_intent": 3.1,
    "ai_audience": 6.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content discusses continuous delivery barriers, especially technical debt versus software complexity, using Microsoft's Azure DevOps as an example. While it references practices like quality investment and pipeline automation relevant to engineering systems, there are no direct mentions or explicit discussions of the One Engineering System (1ES) framework, its components, or its core principles. Alignment exists because the case cited is a corporate-scale devops transformation, but no comparison, framework, or unification themes are present; thus, conceptual fit and depth are limited. The audience is partially aligned (tech leaders), and content is mostly on-topic for CD, but not for 1ES specifically, resulting in a low confidence score.",
    "reasoning_summary": "This content critiques myths about software complexity blocking continuous delivery, using Microsoft's Azure DevOps transformation. While it touches on technical debt and automation, it neither mentions nor deeply explores One Engineering System principles. Thus, its fit with the category is low.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 23.45,
    "ai_mentions": 0.3,
    "ai_alignment": 2.8,
    "ai_depth": 3.3,
    "ai_intent": 2.9,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content does not explicitly discuss team collaboration; it focuses on dispelling a common myth about software complexity and continuous delivery. There are no direct mentions of collaboration, communication, or team dynamics. The narrative centers on technical debt, quality, and investment in automation using Microsoft's experience. While it is relevant for technical teams, it does not explore or exemplify the principles of Agile/Scrum/DevOps team collaboration. No penalties are applied, as the tone is not critical of team collaboration nor is it outdated.",
    "reasoning_summary": "This content critiques using complexity as an excuse for avoiding continuous delivery, focusing on investment in quality and automation—not team collaboration. It lacks discussion of teamwork, communication, or Agile/DevOps team practices, so confidence in its fit for this category is low.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 4.05,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.7,
    "ai_audience": 1.8,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content focuses exclusively on the barriers to continuous delivery (CD), particularly challenging the notion that software complexity prevents CD. The main argument highlights the importance of investment in quality, technical debt reduction, and automation pipelines, using Microsoft Azure DevOps as an example. However, it does not mention, reference, or discuss artificial intelligence, its role in Agile, DevOps, or related processes. It lacks even indirect or conceptual association with AI; the primary topics are CI/CD, technical debt, and organizational investment, not AI-augmented automation or analytics. No content is off-topic or outdated, but there is no alignment with the AI integration-specific category requirements. Scores are extremely low across all dimensions due to the absence of AI relevance.",
    "reasoning_summary": "The content critiques common blockers to continuous delivery, focusing on technical debt and quality investment, with no mention or exploration of artificial intelligence. It does not fit the category 'Artificial Intelligence' as it lacks any direct or conceptual AI relevance.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 19.056,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.5,
    "ai_intent": 2.9,
    "ai_audience": 5.2,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content centers on misconceptions regarding continuous delivery and organizational challenges. It highlights quality practices, technical debt, and pipeline automation, with indirect relevance to source control as part of CD best practices. However, it does not directly mention version control systems, branching strategies, or collaboration workflows specific to Modern Source Control. Instead, its main focus is on investment in quality and overcoming process barriers. Audience aligns somewhat (technical/practitioners), but the primary subject is CD, not source control itself.",
    "reasoning_summary": "This content discusses continuous delivery and overcoming organizational barriers, with only minor, indirect ties to modern source control topics. It’s more about CD practices than version control, so it fits poorly under this category.",
    "level": "Ignored"
  },
  "Team Performance": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Team Performance",
    "calculated_at": "2025-05-16T20:21:03",
    "ai_confidence": 67.96,
    "ai_mentions": 4.9,
    "ai_alignment": 7.7,
    "ai_depth": 6.9,
    "ai_intent": 7.3,
    "ai_audience": 6.4,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content critiques the myth that software complexity blocks continuous delivery, using Microsoft Azure DevOps as a case. It highlights investment in quality, tackling technical debt, and building delivery pipelines—all relevant to team-level outcomes and delivery systems. However, it lacks explicit references to team performance theory or metrics, and doesn't directly analyze team behaviors or systemic factors in detail. The target audience is likely mid-level practitioners or leaders interested in delivery, not explicitly team-centric but relevant. Depth is moderate, with the primary focus on overcoming environmental blockers rather than team process analysis.",
    "reasoning_summary": "This content uses real-world examples to address delivery barriers, focusing on technical debt and investment over complexity. While it connects to delivery capability at the team level, it doesn't deeply analyze team metrics or dynamics, making its fit for Team Performance relevant but not comprehensive.",
    "level": "Secondary"
  },
  "First Principal": {
    "resourceId": "T-sHn-OUIvR",
    "category": "First Principal",
    "calculated_at": "2025-05-16T20:20:58",
    "ai_confidence": 19.7,
    "ai_mentions": 0.0,
    "ai_alignment": 2.6,
    "ai_depth": 2.2,
    "ai_intent": 2.3,
    "ai_audience": 6.0,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content discusses barriers to continuous delivery, arguing that 'complexity' is an excuse and that the real blockers are technical debt and lack of investment. Nowhere does it identify, explain, or apply first principles, nor does it reference foundational, immutable truths or theorists. It focuses on countering a common belief and describing practical improvements, not exploring non-negotiable constraints or first principles in DevOps. The primary audience is practitioners facing delivery challenges, but discussion of first principles is absent.",
    "reasoning_summary": "This content analyzes misconceptions about software complexity and CD but does not discuss, identify, or apply first principles. It is practical and motivational, fitting a practitioner audience, but lacks conceptual or explicit alignment with the 'First Principal' category.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-16T20:21:05",
    "ai_confidence": 12.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.1,
    "ai_intent": 2.0,
    "ai_audience": 3.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content does not mention cross-functional teams, nor does it discuss the topic conceptually. The focus is on overcoming barriers to continuous delivery, specifically software complexity, technical debt, and quality practices, with Microsoft’s Azure DevOps team as an example. No aspects of team structure, skill diversity, collaboration, or cross-functional management are addressed. Audience may overlap slightly, but the discussion is largely irrelevant to cross-functional team dynamics.",
    "reasoning_summary": "This piece centers on overcoming software complexity for continuous delivery, not on cross-functional teams. It offers no relevant discussion, depth, or alignment with the intended category, so confidence in fitting this category is extremely low.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Backlog Refinement",
    "calculated_at": "2025-05-16T20:21:05",
    "ai_confidence": 6.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 2.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "There are no direct mentions of backlog refinement, nor is the content conceptually aligned with the category. The content focuses on continuous delivery, technical debt, and investment in automation, with examples from Microsoft Azure DevOps but without any discussion of managing backlogs, prioritisation, or refinement frameworks. The target audience appears to be organizational leaders or DevOps practitioners focused on delivery and quality rather than Agile backlog processes. As such, all scores are low, and no penalties apply since content is not outdated or overtly critical of backlog refinement.",
    "reasoning_summary": "This content is about overcoming barriers to continuous delivery, not backlog refinement. It discusses investment in quality and technical debt, but doesn't mention backlog practices or Agile principles central to backlog refinement.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Miscellaneous",
    "calculated_at": "2025-05-16T20:21:01",
    "ai_confidence": 11.41,
    "ai_mentions": 0.3,
    "ai_alignment": 0.8,
    "ai_depth": 1.2,
    "ai_intent": 0.7,
    "ai_audience": 2.8,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content discusses continuous delivery (CD), referencing specific practices (quality, automation, technical debt) and a concrete DevOps team (Microsoft Azure). While it challenges the notion of complexity as a blocker, everything is framed in the context of DevOps principles, not general or miscellaneous viewpoints. The main topic is tightly aligned with DevOps and continuous delivery, not fitting into 'Miscellaneous'. There are no penalties as the tone is not outdated or satirical—the issue is strict misalignment with the catch-all nature of 'Miscellaneous'. Low audience and signal scores reflect that most content is directly on CD rather than broader, unfocused discussion.",
    "reasoning_summary": "This content is highly focused on DevOps and continuous delivery practices, citing specific frameworks and actionable insights. It's a poor match for the 'Miscellaneous' category, which should avoid such targeted discussions. Confidence in this classification is very low.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-16T20:21:08",
    "ai_confidence": 91.8,
    "ai_mentions": 7.2,
    "ai_alignment": 9.4,
    "ai_depth": 9.2,
    "ai_intent": 9.0,
    "ai_audience": 8.8,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content centers around technical mastery, focusing on quality practices, technical debt management, automation, and continuous delivery—all core to the category. While terms like 'DevOps', 'technical debt', and 'quality practices' directly align with software engineering excellence, no outdated or satirical content is present, so no penalties apply. While 'Technical Mastery' isn't name-dropped, the examples and themes match the category's scope deeply, with practical insights for technical practitioners.",
    "reasoning_summary": "This content strongly fits 'Technical Mastery' by highlighting real-world technical practices—technical debt reduction, automation, and quality investment—that drive excellence in software delivery, targeting technical audiences with actionable insight.",
    "level": "Primary"
  },
  "Scrum Values": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Scrum Values",
    "calculated_at": "2025-05-16T20:21:07",
    "ai_confidence": 8.8,
    "ai_mentions": 0.1,
    "ai_alignment": 0.7,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 4.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses on continuous delivery, technical debt, investment in quality, and organisational attitudes toward software complexity. There is no direct mention of any Scrum Values (commitment, courage, focus, openness, respect), nor is there an explicit or thorough discussion of how these underpin successful delivery. While the narrative touches on concepts like willingness to fix problems (which might be loosely associated with commitment or courage), these are not framed in the context of Scrum or its defined values. The intended audience—teams involved in delivery and technical leadership—could overlap with Scrum teams, but isn't specifically targeted. Most of the discussion centers on debunking myths about software complexity rather than exploring or supporting Scrum Values. Therefore, the relevance to the 'Scrum Values' category is minimal.",
    "reasoning_summary": "This content addresses organisational challenges in continuous delivery, focusing on technical debt and investment rather than Scrum Values. It neither mentions nor substantially discusses Scrum principles, making it a poor fit for the 'Scrum Values' category.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-05-16T20:21:08",
    "ai_confidence": 26.7,
    "ai_mentions": 0.0,
    "ai_alignment": 2.0,
    "ai_depth": 2.7,
    "ai_intent": 3.0,
    "ai_audience": 7.5,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content addresses organizational barriers to continuous delivery, specifically countering the 'complexity' excuse and highlighting the need for technical investment and process improvement, as exemplified by Microsoft's Azure DevOps team. However, it does not mention or explore the Agile Product Operating Model, make explicit links to product-focused agile practices, or discuss organizational structure, roadmaps, or governance. Its focus is limited to continuous delivery enablers rather than frameworks such as APOM, resulting in low conceptual alignment and depth for the category despite some relevance for technical and business leaders dealing with delivery pipelines.",
    "reasoning_summary": "The content focuses on overcoming barriers to continuous delivery, using Microsoft as an example, but does not discuss or reference the Agile Product Operating Model or its principles. Its primary focus is process improvement in software delivery, not APOM.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-05-16T20:21:09",
    "ai_confidence": 22.66,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.9,
    "ai_intent": 2.7,
    "ai_audience": 7.3,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content addresses software quality, technical debt, and continuous delivery, which are relevant to development processes, but it never mentions Shift-Left Strategy directly or implicitly, nor does it explore early integration of testing, security, or compliance. The focus is on overcoming obstacles to continuous delivery, notably technical debt and quality investment, not on Shift-Left principles, tools, or methodologies. The tone, audience, and subject matter overlap slightly (e.g., quality investments may relate, distantly, to Shift-Left) but the specific category concepts are absent.",
    "reasoning_summary": "This content focuses on overcoming software complexity and enabling continuous delivery, not on Shift-Left Strategy. There are minimal links to category topics, with no direct or substantial discussion of shifting quality or testing earlier in development.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Working Software",
    "calculated_at": "2025-05-16T20:20:59",
    "ai_confidence": 34.32,
    "ai_mentions": 1.0,
    "ai_alignment": 3.2,
    "ai_depth": 3.0,
    "ai_intent": 4.4,
    "ai_audience": 7.0,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on overcoming barriers to continuous delivery (CD), using the Azure DevOps team as an example. While it discusses practices that help enable frequent delivery of software, it makes no direct reference to 'working software' as an artifact or output. The discussion is more about organizational mindset, automation, quality, and investment in technical debt, rather than the definition, value, or nature of working software. The intended audience is technical practitioners or leaders facing delivery challenges, which partially aligns. There is high signal, little filler, but little explicit or deep exploration of the working software concept.",
    "reasoning_summary": "This piece critiques excuses for not doing continuous delivery, using Microsoft's example, but doesn't directly discuss 'working software' as an artifact or output. It targets practitioners, aligns partially, but goes shallow on the category's specifics, so confidence is low.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-16T20:20:59",
    "ai_confidence": 54.15,
    "ai_mentions": 1.25,
    "ai_alignment": 7.35,
    "ai_depth": 7.6,
    "ai_intent": 5.8,
    "ai_audience": 6.1,
    "ai_signal": 8.55,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "Direct references to 'Digital Transformation' are absent, lowering the mentions score. However, the discussion focuses on continuous delivery, technical debt, automation, and organizational willingness to transform software delivery practices—core aspects of modern digital transformation (e.g., improving agility, deployment frequency, embracing change). The main example (Microsoft's Azure DevOps) showcases a real-world transformation effort. However, the main framing is around CD/DevOps, not a holistic digital transformation strategy. The audience seems technical/managerial, relevant but not exclusively fitting the digital transformation strategist. There are no penalties for outdated practices or undermining tone. Overall, the content aligns partly with Digital Transformation but is more delivery/DevOps focused, capping the score.",
    "reasoning_summary": "While the content strongly discusses software delivery transformation and organizational change, it centers on continuous delivery, not the full breadth of digital transformation. Relevant themes are present, but explicit alignment is partial.",
    "level": "Tertiary"
  },
  "Trend Analysis": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-16T20:20:59",
    "ai_confidence": 42.75,
    "ai_mentions": 1.2,
    "ai_alignment": 5.9,
    "ai_depth": 5.7,
    "ai_intent": 4.5,
    "ai_audience": 7.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content critiques a widespread belief about software complexity blocking continuous delivery (CD) and uses Microsoft Azure DevOps as an example of overcoming this. While it discusses change in delivery practices and indirect reference to DevOps shifts, it does not directly engage in formal trend analysis or identify broader patterns affecting strategic decision-making. Direct references to 'trend', 'analysis', or explicit examination of broader shifts within Agile, DevOps, or business agility are missing. The focus is mainly on challenging an excuse and illustrating a case, not analyzing industry trends. The intent is persuasive for practitioners but lacks depth in exploring patterns/implications. Audience and signal are moderate, given its appeal to professionals involved in CD.",
    "reasoning_summary": "This content uses a Microsoft case to challenge excuses about CD barriers but stops short of systematic trend analysis. It doesn’t directly analyze patterns or shifts in Agile or DevOps but offers an illustrative example, making the alignment partial at best, with moderate confidence for the Trend Analysis category.",
    "level": "Tertiary"
  },
  "Organisational Psychology": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-16T20:21:01",
    "ai_confidence": 7.326,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.2,
    "ai_intent": 0.4,
    "ai_audience": 4.1,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content addresses the misconception that software complexity prevents continuous delivery, citing evidence from Microsoft. However, its focus is primarily on technical practices (continuous delivery, technical debt, automation) and business investment decisions rather than psychological principles or organisational behaviour. Psychological factors like motivation, engagement, or leadership are not discussed. The intended audience is likely engineering leadership, but not specifically in the context of organisational psychology.",
    "reasoning_summary": "This content centers on overcoming technical barriers to continuous delivery, not psychological aspects of organisational behavior. It lacks discussion of motivation, leadership, or team dynamics, meaning it has minimal relevance to the Organisational Psychology category.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 8.3,
    "ai_mentions": 0.0,
    "ai_alignment": 0.5,
    "ai_depth": 0.6,
    "ai_intent": 0.8,
    "ai_audience": 5.2,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content does not mention 'Hybrid Agile' explicitly or implicitly. It addresses software complexity, technical debt, and continuous delivery, but doesn't discuss the integration of traditional and agile methodologies, challenges with Hybrid Agile, or related dysfunctions. The target audience may include technical leaders, but there's no focus on Hybrid Agile audiences or issues. Scores are extremely low across the first four dimensions, while audience and signal scores are slightly higher due to general technical relevance.",
    "reasoning_summary": "This content focuses on continuous delivery and overcoming software complexity, not on Hybrid Agile. It lacks any discussion of methodology blending, pitfalls, or core category themes, resulting in a very low confidence that it fits the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 5.33,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.4,
    "ai_intent": 0.8,
    "ai_audience": 7.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content focuses exclusively on overcoming technical barriers to continuous delivery, specifically challenging the excuse of 'complexity' and advocating for investments in quality and automation. There are no mentions of employee motivation, engagement, trust, or related human factors. The audience is technical leaders or practitioners, but the content neither directly nor implicitly connects quality practices to team engagement. Thus, alignment and depth scores are minimal, and the overall confidence score correctly reflects the lack of fit.",
    "reasoning_summary": "This content is about technical, not human, barriers to continuous delivery. It doesn't discuss motivation, engagement, or team dynamics, making it a poor fit for Employee Engagement.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Test Driven Development",
    "calculated_at": "2025-05-16T20:21:03",
    "ai_confidence": 10.59,
    "ai_mentions": 0.2,
    "ai_alignment": 1.4,
    "ai_depth": 1.2,
    "ai_intent": 2.2,
    "ai_audience": 2.9,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content never directly mentions Test Driven Development or references specific TDD principles, practices, or the cycle (e.g., Red-Green-Refactor). Instead, it centers on continuous delivery, technical debt, and investment in quality/automation. While TDD could be considered an enabling quality practice, no explicit or implicit discussion of writing tests before code, TDD methodologies, or its core ideas is present. The audience and intent focus on persuading organizations that complexity is not the main barrier to CD, not on TDD education or adoption.",
    "reasoning_summary": "This content focuses on overcoming barriers to continuous delivery, not Test Driven Development. It makes no direct or substantive mention of TDD practices, concepts, or methodologies, resulting in very low alignment and confidence for this category.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-16T20:21:04",
    "ai_confidence": 41.2,
    "ai_mentions": 0.5,
    "ai_alignment": 4.1,
    "ai_depth": 3.8,
    "ai_intent": 5.3,
    "ai_audience": 6.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses on overcoming barriers to continuous delivery, specifically addressing misconceptions about software complexity. It illustrates how investment in pipelines and technical quality enabled Azure DevOps to increase deployment frequency. However, it does not explicitly discuss platform engineering principles, internal developer platforms, or the discipline itself. The fit is indirect: while automation and pipelines are mentioned, the framing is on CD adoption and organisational investment rather than building internal platforms to optimise developer workflows. There are no direct mentions of platform engineering or its key components, and the primary purpose is motivational and centered on CD best practices, not platform engineering methodologies.",
    "reasoning_summary": "The article addresses tooling, automation, and pipelines—areas adjacent to platform engineering—but never discusses platform engineering directly. Its main theme is overcoming barriers to continuous delivery, not the design or principles of internal developer platforms.",
    "level": "Tertiary"
  },
  "Lean Thinking": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-16T20:21:07",
    "ai_confidence": 34.909,
    "ai_mentions": 0.1,
    "ai_alignment": 4.7,
    "ai_depth": 5.2,
    "ai_intent": 4.2,
    "ai_audience": 6.6,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "There is no direct mention of 'Lean Thinking' or related terminology (e.g., waste, kaizen, 5S, value stream mapping). The content focuses on debunking software complexity as a barrier to continuous delivery and emphasizes technical debt, quality, and automation. While some Lean-adjacent ideas (investing in quality, tackling technical debt, continuous improvement) are present, they are not connected to Lean principles or tools. The main thematic purpose is advocating for investment in CD practices, not Lean adoption. As such, confidence in classifying under 'Lean Thinking' is low and driven by minor conceptual overlap.",
    "reasoning_summary": "The content centers on overcoming software complexity for continuous delivery, emphasizing investment in quality over making things 'Lean.' It doesn't mention Lean Thinking directly and only loosely aligns with its concepts, so it's not a strong fit for this category.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Self Organisation",
    "calculated_at": "2025-05-16T20:21:09",
    "ai_confidence": 32.4,
    "ai_mentions": 0.0,
    "ai_alignment": 3.5,
    "ai_depth": 2.8,
    "ai_intent": 3.5,
    "ai_audience": 8.2,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content does not directly mention self-organisation or its principles. Its focus is on overcoming barriers to continuous delivery by investing in automation and quality. While tangentially relevant to Agile transformation, there is little discussion on team autonomy, empowerment, or practices enabling self-organisation. The target audience of software practitioners is aligned, and the signal is moderate, but main themes diverge from the core definition.",
    "reasoning_summary": "This article focuses on debunking complexity as a barrier to continuous delivery and highlights technical debt and investment in quality. It doesn't address self-organisation concepts, so alignment is weak and confidence low.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Competence",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 53.4,
    "ai_mentions": 2.7,
    "ai_alignment": 6.5,
    "ai_depth": 6.1,
    "ai_intent": 6.0,
    "ai_audience": 8.4,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content centers on debunking 'complexity' as a barrier to continuous delivery and argues the actual blocker is a lack of investment in quality and technical debt. While these relate to competence (especially proactively improving systems), the piece does not explicitly discuss skill development, professionalism, or mastery. The focus is more on organizational will and process improvements than on individual or team competence per se. It targets teams and leaders in technical roles with a relevant example, and maintains good signal, but falls short of a deep, direct discussion of competence.",
    "reasoning_summary": "This content discusses barriers to continuous delivery, focusing on technical debt and investment in quality rather than directly on competence. While it indirectly relates to organizational capability and continuous improvement, explicit references to competence principles are limited, making the confidence moderate.",
    "level": "Tertiary"
  },
  "Decision Making": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Decision Making",
    "calculated_at": "2025-05-16T20:21:00",
    "ai_confidence": 42.275,
    "ai_mentions": 1.4,
    "ai_alignment": 5.9,
    "ai_depth": 4.7,
    "ai_intent": 5.6,
    "ai_audience": 8.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content focuses on debunking the myth that software complexity prevents continuous delivery, citing Microsoft's Azure DevOps as a positive example. While it addresses decision-related obstacles (like investment in quality and addressing technical debt), it does not explicitly discuss structured, evidence-based decision-making frameworks, evidence-based management principles, or the use of data analytics in decision processes. There are no references to collaborative decision-making, cognitive biases, or feedback loops. The audience is technical/strategist, partially relevant, and the discussion is focused but lacks conceptual depth regarding evidence-based decision practices. Thus, confidence is moderate and not high.",
    "reasoning_summary": "While the article challenges decision blockers for continuous delivery and illustrates through a compelling case, it only lightly engages with structured decision-making concepts and doesn't explore evidence-based frameworks, so confidence for the 'Decision Making' category is moderate.",
    "level": "Tertiary"
  },
  "Install and Configuration": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-16T20:21:01",
    "ai_confidence": 13.34,
    "ai_mentions": 0.2,
    "ai_alignment": 1.7,
    "ai_depth": 1.8,
    "ai_intent": 1.3,
    "ai_audience": 3.4,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on dispelling the myth that software complexity prevents continuous delivery, using Azure DevOps as an example. It does not mention or discuss installation or configuration processes, technical setup, nor does it provide actionable guidance or best practices on these topics. The main themes are high-level (mindset, investment, technical debt) and miss the explicit technical focus required for the 'Install and Configuration' category. Audience alignment is somewhat relevant, as practitioners may read this, but the content lacks actionable instruction and relevancy to the category.",
    "reasoning_summary": "This content discusses misconceptions around software complexity and continuous delivery, emphasizing mindset and investment over technical setup. It lacks any substantive guidance on installation or configuration, making it a poor fit for the category.",
    "level": "Ignored"
  },
  "Current Value": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Current Value",
    "calculated_at": "2025-05-16T20:21:01",
    "ai_confidence": 24.25,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 2.1,
    "ai_audience": 6.2,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on debunking the myth that software complexity prevents continuous delivery, citing Microsoft Azure DevOps as a case study. While it touches on themes relevant in Agile and DevOps, it does not discuss Current Value, its definition, metrics, or role in Evidence-Based Management. No metrics, analysis, or explicit references to Current Value or associated indicators are present. The intent is to encourage investment in quality and technical debt reduction, rather than real-time value assessment. The main audience overlaps with technical and DevOps professionals, hence a higher audience score, but other dimensions remain low due to lack of direct relevance.",
    "reasoning_summary": "While the article addresses DevOps practices and improvement, it does not discuss or measure Current Value or its indicators. Its focus is on overcoming complexity barriers to continuous delivery, making it only loosely connected to the Current Value category.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-16T20:21:03",
    "ai_confidence": 14.355,
    "ai_mentions": 0.6,
    "ai_alignment": 2.1,
    "ai_depth": 1.6,
    "ai_intent": 2.3,
    "ai_audience": 4.1,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content directly discusses barriers to continuous delivery—specifically challenging software complexity as a blocker and urging investment in quality and automation. However, it never mentions customer satisfaction, customer needs, or improvement of user experience. Its main theme centers on internal process improvement and tackling technical debt. While these could indirectly affect customer satisfaction, the content does not make that connection explicit nor adopts a customer-centric perspective, falling outside the scope of the intended category. The audience is technically aligned, but the discussion is not oriented toward measuring or enhancing customer satisfaction.",
    "reasoning_summary": "This content focuses on debunking complexity as a barrier to continuous delivery, not on customer satisfaction. Though process improvements may benefit customers, there’s no explicit mention or exploration of customer experience, making the fit for this category weak.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Project Management",
    "calculated_at": "2025-05-16T20:21:08",
    "ai_confidence": 33.25,
    "ai_mentions": 1.45,
    "ai_alignment": 4.35,
    "ai_depth": 3.9,
    "ai_intent": 3.95,
    "ai_audience": 5.15,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content focuses on organizational barriers to continuous delivery (CD), challenging the notion that software complexity is the main obstacle. It cites Microsoft’s Azure DevOps as an example, highlighting that investment in quality and technical debt reduction enables CD. However, explicit references to project management are absent, and most discussion centers around CD process improvement, not project management principles, methodologies, roles, or tools. There is indirect relevance to project management regarding organizational change, investment decisions, and lessons learned, but the primary alignment is with software delivery and engineering practices rather than project management frameworks or lifecycle. The audience could overlap with project managers, but targeting is more on technical leadership and DevOps practitioners.",
    "reasoning_summary": "The content primarily addresses software delivery challenges, not core project management strategies. While tangentially relevant to project managers via lessons on change and investment priorities, it lacks depth and direct alignment with the project management category.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-16T20:21:09",
    "ai_confidence": 18.78,
    "ai_mentions": 0.3,
    "ai_alignment": 1.8,
    "ai_depth": 2.1,
    "ai_intent": 3.7,
    "ai_audience": 6.6,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on overcoming barriers to continuous delivery (CD), specifically rejecting perceived software complexity in favor of addressing technical debt and automation investment. While CD is often associated with Agile practices, there are no direct or indirect mentions of Agile frameworks, their principles, or their comparative analysis. The discussion does not explore Scrum, Kanban, Lean, XP, or the Agile Manifesto. Any alignment is incidental to the broader Agile movement but not framework-focused. The target audience overlaps somewhat (delivery, engineering leadership), but the signal to noise is only moderate due to the content's narrow focus.",
    "reasoning_summary": "This content addresses continuous delivery challenges and technical debt but does not mention or substantially discuss Agile frameworks. It is somewhat relevant for Agile practitioners but lacks explicit or conceptual depth regarding frameworks, resulting in limited confidence.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Social Technologies",
    "calculated_at": "2025-05-16T20:21:11",
    "ai_confidence": 51.65,
    "ai_mentions": 1.5,
    "ai_alignment": 7.7,
    "ai_depth": 6.8,
    "ai_intent": 7.5,
    "ai_audience": 7.0,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 52.0,
    "reasoning": "The content discusses the misconception that software complexity blocks continuous delivery, citing Microsoft's success with Azure DevOps. While connected to collaboration and improvement (elements of social technologies), the focus is more on technical investment, quality, and automation rather than on frameworks that foster self-organisation, adaptability, or collective intelligence. There are only indirect references to social tech principles such as tackling technical debt and improving processes. No penalties apply, as the tone is direct and current.",
    "reasoning_summary": "This content touches on continuous delivery and overcoming technical blockers, mentioning quality and process improvement, which relate to social technologies. However, it mainly focuses on technical investment and doesn't deeply explore the collaborative frameworks central to the category.",
    "level": "Tertiary"
  },
  "Product Strategy": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Strategy",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 24.05,
    "ai_mentions": 0.6,
    "ai_alignment": 2.75,
    "ai_depth": 2.3,
    "ai_intent": 2.05,
    "ai_audience": 9.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content directly addresses obstacles to continuous delivery (CD), focusing on technical debt, investment in quality, and automation, not product vision, roadmapping, market analysis, or alignment with customer needs. There's no mention of product strategy, its methodologies, or frameworks. The intent is to debunk a common excuse for avoiding CD adoption, aimed at practitioners involved in software delivery rather than strategic planners. Although the audience has some overlap, and the signal is relatively high, there is minimal direct alignment to product strategy concepts—no emphasis on vision, market positioning, or strategic planning processes.",
    "reasoning_summary": "This content centers on overcoming technical impediments to continuous delivery, not on defining or planning product strategy. Strategic topics like vision or market positioning aren't addressed, making its fit for 'Product Strategy' minimal.",
    "level": "Ignored"
  },
  "Product Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Development",
    "calculated_at": "2025-05-16T20:21:04",
    "ai_confidence": 69.84,
    "ai_mentions": 6.2,
    "ai_alignment": 8.3,
    "ai_depth": 7.7,
    "ai_intent": 7.5,
    "ai_audience": 7.2,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 70.0,
    "reasoning": "The content addresses a key product development concern—removing barriers to continuous delivery (CD)—and argues that perceived complexity is not the true obstacle. It references relevant practices (quality, technical debt, automation) and uses the Azure DevOps team as an example. Alignment is high because it discusses methodologies to achieve iterative delivery and continuous improvement. The depth is moderate, focusing more on motivation than detailed process breakdowns. Audience is technical and product-oriented, with a strong focus on product delivery outcomes.",
    "reasoning_summary": "This content tackles myths around complexity and advocates for best practices like technical debt management and automation to facilitate iterative delivery. It's relevant to product development, though it's motivational rather than detailed, making it a good—but not perfect—fit for the category.",
    "level": "Secondary"
  },
  "Sensemaking": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Sensemaking",
    "calculated_at": "2025-05-16T20:21:05",
    "ai_confidence": 27.45,
    "ai_mentions": 1.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.7,
    "ai_intent": 2.5,
    "ai_audience": 6.3,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content discusses organisational claims about software complexity in relation to continuous delivery, focusing on technical debt, investment in quality, and practical barriers. There are no explicit references to sensemaking, nor is there exploration of frameworks, decision-making in complexity, or organisational approaches to interpreting complex environments. It is largely critical of 'complexity' as an excuse, centers on technical/pragmatic solutions, and targets practitioners concerned with delivery, not broader sensemaking processes.",
    "reasoning_summary": "This content centers on overcoming technical barriers to continuous delivery, not on the process of sensemaking. It lacks direct discussion of interpreting complexity or decision-making frameworks, making its fit for the Sensemaking category weak.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 7.8,
    "ai_mentions": 0.0,
    "ai_alignment": 1.0,
    "ai_depth": 0.8,
    "ai_intent": 1.2,
    "ai_audience": 2.0,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is about overcoming perceived software complexity as a barrier to continuous delivery and cites technical practices like managing technical debt and automation. It focuses on team software delivery processes and does not mention or reflect the principles, concepts, or features of Cell Structure Design, the Beta Codex, decentralised cell networks, or organisational structure. There are no explicit or implicit references to the category’s topics or intended audience.",
    "reasoning_summary": "This content addresses software engineering and continuous delivery, not organisational design or Cell Structure Design. There are no links to Beta Codex principles, cells, or decentralisation—making it a poor fit for the category.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Artifact",
    "calculated_at": "2025-05-16T20:21:02",
    "ai_confidence": 7.8,
    "ai_mentions": 0.2,
    "ai_alignment": 0.3,
    "ai_depth": 0.4,
    "ai_intent": 0.4,
    "ai_audience": 4.9,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content discusses misconceptions about software complexity as a barrier to continuous delivery, referencing practices like technical debt management, quality, and automation investments. However, it does not discuss artifacts, their structure, or their role in agile processes. It is focused on organizational mindset and operational choices, not on formal work representations or artifacts, leading to very low alignment with the category.",
    "reasoning_summary": "The content challenges the myth that complexity blocks continuous delivery but barely addresses the concept of artifacts. Its main focus is on organizational habits, investment in quality, and technical debt, offering minimal relevance to the 'Artifact' category.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-16T20:21:04",
    "ai_confidence": 42.37,
    "ai_mentions": 1.7,
    "ai_alignment": 4.8,
    "ai_depth": 4.3,
    "ai_intent": 3.6,
    "ai_audience": 4.2,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content focuses on overcoming barriers (specifically, perceived software complexity) to continuous delivery, emphasizing organizational investment, technical debt remediation, and automation. While this reflects key principles of Agile delivery, it lacks direct discussion of Agile Strategy topics such as aligning vision with Agile principles, strategic planning, or leadership roles. There is no explicit mention of 'Agile', strategy, or organizational alignment, and its depth is confined to technical and process change rather than strategic integration across the business. The main audience appears to be practitioners facing delivery obstacles rather than strategists or executives charged with Agile transformation.",
    "reasoning_summary": "This content addresses overcoming technical barriers to continuous delivery but rarely touches on Agile Strategy themes like vision, leadership, or strategy. It’s moderately relevant for those interested in delivery improvement, not for higher-level Agile strategic topics.",
    "level": "Tertiary"
  },
  "GitHub": {
    "resourceId": "T-sHn-OUIvR",
    "category": "GitHub",
    "calculated_at": "2025-05-16T20:21:06",
    "ai_confidence": 13.38,
    "ai_mentions": 0.3,
    "ai_alignment": 1.8,
    "ai_depth": 1.35,
    "ai_intent": 2.39,
    "ai_audience": 4.01,
    "ai_signal": 3.02,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content discusses continuous delivery (CD), organizational excuses about complexity, and a real-world Azure DevOps (not GitHub) case study, but does not mention GitHub at all. No GitHub services, features, or workflows are referenced. Since neither the main theme nor the examples relate to GitHub, the conceptual alignment, depth, and direct mention scores are minimal. The content targets a technical audience interested in CD, but is off-topic for the GitHub category.",
    "reasoning_summary": "This content focuses on continuous delivery barriers and uses Azure DevOps as an example, but never mentions GitHub or its tools. As a result, it doesn't fit the GitHub category and receives a very low confidence score.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Azure Pipelines",
    "calculated_at": "2025-05-16T20:21:06",
    "ai_confidence": 57.6,
    "ai_mentions": 3.8,
    "ai_alignment": 6.5,
    "ai_depth": 5.7,
    "ai_intent": 5.8,
    "ai_audience": 6.1,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content references Azure DevOps and 'built the pipelines needed to deliver continuously,' implying Azure Pipelines without explicit naming. Its main focus is overcoming barriers to CD (Continuous Delivery) by addressing quality, technical debt, and automation, using Microsoft’s own DevOps transformation as a case study. However, the content never delves deeply into Azure Pipelines’ setup, YAML, configuration, or best practices. While relevant to those interested in Azure Pipelines, the discussion is more about general cultural/technical enablers for CD using Azure DevOps as an example, rather than a focused guide or analysis of Azure Pipelines. No penalties for outdatedness or tone are warranted.",
    "reasoning_summary": "The content alludes to pipelines within Azure DevOps, highlighting their role in continuous delivery transformation at Microsoft, but lacks direct, in-depth coverage of Azure Pipelines' specifics. It’s relevant for context but falls short of detailed, practical discussion, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Leadership": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Leadership",
    "calculated_at": "2025-05-16T20:21:08",
    "ai_confidence": 41.59,
    "ai_mentions": 0.7,
    "ai_alignment": 4.6,
    "ai_depth": 3.8,
    "ai_intent": 5.2,
    "ai_audience": 4.4,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "Direct references to 'leadership' or leadership-specific topics are absent. The main point challenges common organizational excuses but focuses on the technical and cultural willingness to invest in practices that enable continuous delivery. While there's some implicit critique of decision-making and accountability, there’s minimal exploration of leadership roles, frameworks, or team dynamics. The primary audience could include leaders, but the advice mostly targets organizational ethos rather than explicit leadership development or guidance.",
    "reasoning_summary": "This content exposes organizational excuses for not adopting continuous delivery but discusses investment and mindset rather than concrete leadership topics. While relevant to those in decision-making roles, it lacks direct or in-depth leadership analysis, placing its fit in the lower-middle confidence range.",
    "level": "Tertiary"
  },
  "Customer Retention": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Customer Retention",
    "calculated_at": "2025-05-16T20:21:03",
    "ai_confidence": 16.55,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.2,
    "ai_intent": 1.5,
    "ai_audience": 6.8,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on debunking the belief that software complexity prevents continuous delivery (CD), using Microsoft Azure DevOps as an example. It explores technical debt and investment in automation, but does not discuss customer retention, engagement, feedback, or related strategies. There are no explicit or significant indirect references to retaining customers. The intent is to highlight operational transformation, not customer-focused outcomes, so alignment and depth are low for this category. Audience and focus are moderate, as the readers may overlap somewhat with those interested in customer retention, but the topic diverges distinctly.",
    "reasoning_summary": "This content reviews technical and operational enablers for continuous delivery, not customer retention. There's minimal connection to retaining customers, lacking relevant strategies or engagement topics—so overall confidence for this category is low.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Ethos",
    "calculated_at": "2025-05-16T20:21:03",
    "ai_confidence": 53.4,
    "ai_mentions": 0.6,
    "ai_alignment": 6.2,
    "ai_depth": 6.0,
    "ai_intent": 5.9,
    "ai_audience": 8.3,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content indirectly aligns with the 'Ethos' category by challenging superficial excuses (complexity) and pointing toward a deeper organizational willingness to invest in quality, automation, and tackling technical debt—attributes connected to ethos in sustainable delivery systems. However, there is no direct mention of 'ethos', nor is the core discussion explicitly about foundational beliefs or system-level convictions. The main focus is on practical actions (investment, quality, automation) that imply and evidence an underlying ethos, especially when citing the Azure DevOps team's shift in delivery cadence through cultural and process changes. The discussion is somewhat deeper than a surface anecdote, referencing decision-making and leadership prioritization, but it falls short of a deep exploration of foundational ethos itself. The intended audience (leaders or practitioners responsible for delivery practices) fits the category, as does the mostly focused content. No penalties were applied since the content is current, not critical/satirical, and does not reference obsolete practices.",
    "reasoning_summary": "This content challenges the excuse of software complexity and suggests true blockers are willingness to invest in quality and automation. While it hints at deeper convictions driving sustainable delivery, it doesn’t explicitly explore ethos or foundational beliefs, so confidence for Ethos classification is moderate.",
    "level": "Tertiary"
  },
  "Windows": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Windows",
    "calculated_at": "2025-05-16T20:21:08",
    "ai_confidence": 6.58,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.3,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content centers on overcoming barriers to continuous delivery, using Microsoft’s Azure DevOps team as an example. It does not explicitly mention Windows or delve into Windows installation, configuration, troubleshooting, or related topics. The focus is software engineering and DevOps practices, not the Windows operating system or environment as per the category definition. There are no direct or implicit discussions about Windows itself or its ecosystem.",
    "reasoning_summary": "This content addresses software delivery and DevOps, referencing Microsoft but not Windows. It doesn't fit the Windows category, as it lacks any relevant discussion of the OS, its management, or its audience. Confidence is very low.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-16T20:21:14",
    "ai_confidence": 29.63,
    "ai_mentions": 1.2,
    "ai_alignment": 3.5,
    "ai_depth": 2.6,
    "ai_intent": 3.3,
    "ai_audience": 5.5,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content focuses primarily on dispelling the myth that software complexity is the primary barrier to continuous delivery, emphasizing technical debt and investment in quality instead. There is an implicit reference to the need for organizational willingness, which can hint at cultural aspects, but organizational culture is not mentioned directly. The main discussion revolves around process and technical change rather than cultural transformation. The audience (industry professionals/managers) loosely matches the category. The content is focused but largely tangential to core organizational culture themes, with little depth or dedicated exploration of cultural factors. Thus, confidence is low but not zero since cultural willingness is briefly implied.",
    "reasoning_summary": "This content primarily addresses technical and process barriers to continuous delivery, with only a minor allusion to culture. Organizational culture isn't discussed directly or in depth, so relevance is limited. Confidence is low, as the fit to the category is marginal.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-16T20:21:14",
    "ai_confidence": 47.25,
    "ai_mentions": 1.2,
    "ai_alignment": 5.5,
    "ai_depth": 4.6,
    "ai_intent": 5.4,
    "ai_audience": 6.7,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content focuses on organisations using complexity as an excuse for not adopting continuous delivery and cites Microsoft as an example of overcoming barriers. While the narrative discusses organizational blockers and improvement, it centers on technical debt, quality, and automation, rather than innovation mechanisms. There are indirect links to 'Ability to Innovate' (overcoming systemic inertia, investing in improvement), but no direct mentions or discussion of innovation processes, culture, or measurement. The alignment and depth are moderate but not strong due to the lack of explicit innovation focus.",
    "reasoning_summary": "This piece focuses on removing delivery blockers rather than discussing innovation itself. It relates to improvement and overcoming inertia, with moderate indirect relevance to innovation capability, but lacks explicit discussion or metrics for the Ability to Innovate.",
    "level": "Tertiary"
  },
  "Practice": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Practice",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 81.68,
    "ai_mentions": 6.7,
    "ai_alignment": 9.2,
    "ai_depth": 8.8,
    "ai_intent": 8.4,
    "ai_audience": 8.0,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content criticizes the misconception that software complexity prevents continuous delivery (CD), directly referencing CD—a key practice per the definition. It provides a case study (Microsoft Azure DevOps) supporting how investment in quality practices and automation (both actionable techniques) allow even complex organizations to succeed with CD. The piece underscores actionable suggestions—tackling technical debt and building pipelines—which are practice-oriented. Its main purpose is to motivate and inform practitioners by showing that proper practices, not lesser complexity, enable CD. There’s depth via an extended example and a challenge to the audience. The target audience consists of practitioners and organizations facing similar challenges, aligning well. Almost all content is on-topic, with minimal digression or filler, and no penalties apply.",
    "reasoning_summary": "The content strongly fits the 'Practice' category by challenging complexity myths around CD and emphasizing practical solutions like quality improvement and automation. It uses an industry example to motivate teams to adopt proven practices—making it relevant, substantial, and clearly aimed at practitioners.",
    "level": "Primary"
  },
  "Increment": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Increment",
    "calculated_at": "2025-05-16T20:21:04",
    "ai_confidence": 24.779,
    "ai_mentions": 0.5,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 2.1,
    "ai_audience": 7.3,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content addresses the challenges organizations face in adopting continuous delivery (CD) due to software complexity, citing Microsoft Azure DevOps' success. While continuous delivery and regular delivery of features are discussed, the content never directly references the concept of an Increment as defined in Scrum or Agile. There is no exploration of the Increment as a Scrum artifact, its value delivery, completeness, quality, or relationship to other Scrum elements. The concepts align somewhat—both relate to delivering usable software—but Increment as a distinct practice is neither named nor deeply implied. The audience is well-aligned (technical practitioners and leaders), and the content is focused, but overall, the piece does not fit the Increment category in the strict sense required by the definition.",
    "reasoning_summary": "This piece focuses on overcoming excuses for continuous delivery by highlighting investment in quality and automation. While it touches on iterative software release, it doesn’t address Scrum Increments or related artifacts. The alignment is weak, making 'Increment' an ill-fitting category here.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Lean Startup",
    "calculated_at": "2025-05-16T20:21:04",
    "ai_confidence": 6.8,
    "ai_mentions": 0.0,
    "ai_alignment": 1.5,
    "ai_depth": 1.7,
    "ai_intent": 2.1,
    "ai_audience": 0.7,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content discusses overcoming perceived software complexity to achieve continuous delivery, focusing on technical debt, investment in automation, and quality practices. There are no direct mentions of Lean Startup terms (such as MVP, Build-Measure-Learn), nor is there a discussion on iterative validation or rapid experimentation. The central topic is not Lean Startup but rather DevOps and continuous delivery in large organizations—the examples and intent target improvement of delivery practices, not startup iteration. No aspects are outdated, nor is there contradiction or satire. Thus, scores across all dimensions are very low, resulting in a minimal confidence score.",
    "reasoning_summary": "This post focuses on overcoming complexity to enable continuous delivery, with no ties to Lean Startup principles like MVP or iterative learning. Its ideas, examples, and audience align with DevOps, not Lean Startup. Thus, it fits the category very poorly.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Throughput",
    "calculated_at": "2025-05-16T20:21:07",
    "ai_confidence": 32.466,
    "ai_mentions": 2.3,
    "ai_alignment": 3.4,
    "ai_depth": 2.6,
    "ai_intent": 4.2,
    "ai_audience": 6.7,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content briefly mentions frequency of delivery ('every three weeks', '300 features annually'), which relates to throughput as a delivery metric, but the main focus is on debunking organizational excuses around complexity and advocating investment in quality and automation. There is no detailed discussion, analysis, or visualization of throughput or its use for delivery health. Throughput is present only as an incidental reference, with no substantial conceptual or purposeful focus on the metric, and no underlying intent to teach or explore throughput techniques.",
    "reasoning_summary": "While the text references delivery frequency, it doesn't analyze or discuss throughput as a delivery metric. The main narrative targets organizational excuses, not throughput trends or insights. The fit to the 'Throughput' category is shallow.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-16T20:21:03",
    "ai_confidence": 9.2,
    "ai_mentions": 0.1,
    "ai_alignment": 1.3,
    "ai_depth": 0.7,
    "ai_intent": 1.1,
    "ai_audience": 4.3,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content exclusively addresses the misconception that software complexity blocks continuous delivery (CD), with a case study on Microsoft's team. There are no direct or indirect references to asynchronous development, its practices, or principles. The discussion is entirely about overcoming technical debt, automation, and investment to enable CD. No mention of asynchronous workflows, tools, distributed team management, or time zone collaboration. Audience could have slight overlap among engineering leadership, but the overall content fit is minimal.",
    "reasoning_summary": "This content is focused on overcoming obstacles to continuous delivery, not asynchronous development. There's no discussion of asynchronous principles, tools, workflows, or team collaboration, resulting in very low confidence for the category.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-16T20:21:05",
    "ai_confidence": 91.75,
    "ai_mentions": 8.2,
    "ai_alignment": 9.4,
    "ai_depth": 8.8,
    "ai_intent": 9.0,
    "ai_audience": 9.3,
    "ai_signal": 9.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses continuous delivery—core to the Frequent Releases category—and uses concrete examples (Azure DevOps team moving to 3-week release cycles, 300+ features a year). It delves into overcoming barriers to frequent releases (technical debt, automation), highlights the necessity of investment in pipelines and quality, and targets practitioners questioning frequent release adoption. No outdated or negative framing detected; content is succinct and highly relevant.",
    "reasoning_summary": "This content strongly aligns with the Frequent Releases category by using a compelling case study and clear arguments to show that frequent delivery is feasible despite software complexity, emphasizing investment in quality and automation. It's targeted, relevant, and focused for practitioners.",
    "level": "Primary"
  },
  "Philosophy": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Philosophy",
    "calculated_at": "2025-05-16T20:21:06",
    "ai_confidence": 22.55,
    "ai_mentions": 1.4,
    "ai_alignment": 2.5,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 8.1,
    "ai_signal": 3.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "Direct mentions of philosophical concepts are minimal; the content centers on debunking a practical excuse ('complexity') and promoting investment in quality and automation. The examples are procedural and empirical (e.g., Microsoft's practices) rather than theory-driven. The tone is pragmatic, with a call to action around fixing technical debt, not an exploration of foundational beliefs shaping practices. Thus, alignment, depth, and intent are low. The target audience (organizational decision-makers) does match philosophy, and the content is focused, but it's not particularly philosophical.",
    "reasoning_summary": "This content is practical and action-oriented, focusing on organizational excuses and technical improvements rather than deeper philosophical principles. While relevant for decision-makers, it offers little exploration of the core 'why' or underlying philosophy, so confidence for the Philosophy category is low.",
    "level": "Ignored"
  },
  "Tool": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Tool",
    "calculated_at": "2025-05-16T20:21:08",
    "ai_confidence": 43.78,
    "ai_mentions": 2.2,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 5.0,
    "ai_audience": 6.8,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content references Azure DevOps (a tool) as a supporting example in overcoming barriers to continuous delivery, but focuses on organizational mindset, technical debt, and investment in practices rather than tools' features, comparisons, or tool-driven workflows. Tool mentions are brief and illustrative, not central. The main intent is motivational, targeting leaders and practitioners in DevOps, but does not deeply explore or analyze tools directly as per category definition.",
    "reasoning_summary": "While Azure DevOps is cited as an example, the piece centers on challenging mindsets and advocating for quality investment, not on analyzing tools or their role in Agile or DevOps. Tool relevance is present but not sufficiently central for the full 'Tool' category fit.",
    "level": "Tertiary"
  },
  "Technical Leadership": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-16T20:21:10",
    "ai_confidence": 72.85,
    "ai_mentions": 2.7,
    "ai_alignment": 8.6,
    "ai_depth": 7.9,
    "ai_intent": 8.0,
    "ai_audience": 8.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "The content discusses misconceptions around software complexity and continuous delivery (CD), referencing real-world technical leadership at Microsoft. It emphasizes tackling technical debt, investing in engineering quality, and continuous improvement—core tenets of technical leadership in agile teams. Despite not using the term 'technical leadership' directly, it targets leaders or influencers responsible for such changes. The discussion is moderately deep and focused primarily on relevant practices, with clear informative and motivational intent.",
    "reasoning_summary": "This piece illustrates how technical leaders drive change by addressing real blockers—like technical debt—in complex environments. While it doesn't explicitly cite 'technical leadership,' its examples, focus on CD, and audience make it a strong, relevant fit for the category.",
    "level": "Secondary"
  },
  "Continuous Learning": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 38.15,
    "ai_mentions": 1.4,
    "ai_alignment": 3.5,
    "ai_depth": 3.4,
    "ai_intent": 2.8,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses primarily on dispelling the myth that software complexity is a blocker for continuous delivery (CD), using Microsoft’s experience as an example. While it emphasizes investment in quality and tackling technical debt, there are only sparse, indirect ties to continuous learning—such as learning from failure or adapting practices. Direct mentions of continuous learning are absent; the discussion does not explore growth mindset, feedback loops, or knowledge sharing—the core principles of the category. Its main intent and substance lean toward technical enablement for CD over building a culture of ongoing learning or improvement.",
    "reasoning_summary": "This piece mainly challenges misconceptions about software complexity in CD, not continuous learning. While it suggests improvement is possible, it doesn't explicitly discuss ongoing team learning, knowledge sharing, or growth mindset, so fit to the category is limited.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Transformation",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 37.68,
    "ai_mentions": 1.7,
    "ai_alignment": 4.6,
    "ai_depth": 4.3,
    "ai_intent": 4.2,
    "ai_audience": 5.7,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses on misconceptions about continuous delivery impediments, citing technical debt and investment in quality/automation as true blockers. While it highlights organisational change, investment in practices, and a case study, it doesn't mention Agile, its principles, or frameworks. No depth on Agile transformation strategies, culture, or leadership is explored. The primary audience (software delivery practitioners/leaders) partially aligns, but not explicitly in an Agile transformation context.",
    "reasoning_summary": "While the content discusses organisational change in software delivery and highlights transformative efforts, it lacks explicit mention or exploration of Agile transformation principles, practices, or culture. As such, its fit in the 'Agile Transformation' category is only moderate.",
    "level": "Ignored"
  },
  "Product Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Management",
    "calculated_at": "2025-05-16T20:21:10",
    "ai_confidence": 36.19,
    "ai_mentions": 1.1,
    "ai_alignment": 3.6,
    "ai_depth": 3.4,
    "ai_intent": 3.3,
    "ai_audience": 2.9,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content emphasizes overcoming technical debt and investing in quality and automation for continuous delivery, using Microsoft Azure DevOps as evidence. However, it focuses narrowly on technical and process barriers for CD, with little direct reference to product management frameworks or strategic alignment. There's no explicit product management terminology or strategic perspective. The intent and audience lean toward engineering and DevOps rather than product leaders. Overall, discussion of product management principles is peripheral and not in-depth.",
    "reasoning_summary": "This content discusses overcoming technical debt for continuous delivery using a Microsoft case, geared at technical audiences. It doesn't address product management strategy or theory directly, so confidence in its fit to the Product Management category is low.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Operational Practices",
    "calculated_at": "2025-05-16T20:21:10",
    "ai_confidence": 82.3,
    "ai_mentions": 6.6,
    "ai_alignment": 8.9,
    "ai_depth": 8.4,
    "ai_intent": 8.7,
    "ai_audience": 8.5,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content challenges misconceptions about software complexity as a barrier to continuous delivery and uses a concrete example (Azure DevOps) to demonstrate best practices: investment in quality, automation, and technical debt reduction. It directly discusses operational changes and continuous improvement, targeting practitioners. While not explicitly naming 'Operational Practices', it strongly aligns with the practical strategies, depth of technical example, and the theme of improving delivery efficiency through DevOps and Lean approaches. Some minor lack of breadth keeps the signal and direct mentions slightly below maximum.",
    "reasoning_summary": "This content compellingly dispels myths about software complexity in CD by spotlighting Azure DevOps’ operational success, offering real-world evidence on quality, automation, and debt reduction—all core operational practices—making it highly relevant for teams seeking delivery excellence.",
    "level": "Primary"
  },
  "Complexity Thinking": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-16T20:21:09",
    "ai_confidence": 23.6,
    "ai_mentions": 2.4,
    "ai_alignment": 2.6,
    "ai_depth": 2.2,
    "ai_intent": 2.1,
    "ai_audience": 7.1,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content uses 'complexity' as a term but not in the sense of Complexity Thinking or complexity science principles. It primarily argues that organizational claims about complexity as a barrier to continuous delivery are misplaced, focusing instead on technical debt and investment in quality. There is no discussion of non-linear dynamics, emergence, or frameworks like Cynefin. The audience is tech leaders interested in CD, which overlaps somewhat, but the core meaning of Complexity Thinking is not engaged.",
    "reasoning_summary": "This piece discusses 'complexity' as a challenge to CD but doesn't reference or engage with Complexity Thinking theory or frameworks. It suggests complexity is an excuse, focusing instead on practical barriers like technical debt, so it only loosely relates to the intended category.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Azure DevOps",
    "calculated_at": "2025-05-16T20:21:10",
    "ai_confidence": 77.6,
    "ai_mentions": 6.1,
    "ai_alignment": 8.9,
    "ai_depth": 7.7,
    "ai_intent": 7.8,
    "ai_audience": 8.2,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "Azure DevOps is mentioned directly in the context of Microsoft's internal use, using their team as primary evidence for continuous delivery feasibility in complex environments. The content aligns with Azure DevOps principles (CI/CD, overcoming technical debt), tying the message to best practices exemplified by Azure DevOps adoption. However, the discussion focuses more broadly on CD and software quality, with Azure DevOps as a case study rather than the main subject. The depth is somewhat limited since technical implementation or feature specifics are not explored, and only a single direct comparison is made. Audience targeting matches practitioners and decision makers in software delivery, and the signal is strong with relevant, focused messaging.",
    "reasoning_summary": "This content references Azure DevOps as a key example, aligning with its core themes of CI/CD and software quality investment. While Azure DevOps isn't the primary subject, it’s integral to the argument, making the fit quite strong for the category.",
    "level": "Secondary"
  },
  "Flow Efficiency": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-16T20:21:11",
    "ai_confidence": 34.85,
    "ai_mentions": 1.1,
    "ai_alignment": 4.3,
    "ai_depth": 3.9,
    "ai_intent": 3.4,
    "ai_audience": 7.2,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The content challenges the belief that software complexity hinders continuous delivery and cites the example of Microsoft’s Azure DevOps team improving delivery speed. While it references flow-related outcomes (faster delivery, tackling technical debt), it lacks direct mention or in-depth discussion of flow efficiency concepts, metrics, or techniques like WIP limits or Kanban. The focus is more on mindset and investment than on optimizing the throughput of work in the value stream. There is some alignment and audience overlap with practitioners focused on delivery performance, but it does not substantially address the core themes or tools of Flow Efficiency.",
    "reasoning_summary": "This content critiques misconceptions about barriers to continuous delivery and emphasizes investment over complexity, sharing an industry example. While it aligns with delivery improvement, it lacks direct focus on flow efficiency principles or methods, resulting in low confidence for this specific category.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 33.9,
    "ai_mentions": 0.5,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.8,
    "ai_audience": 2.5,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content addresses continuous delivery and debunks the myth that software complexity is a barrier, focusing instead on technical debt, quality, and automation investment. While these are important for business agility, the article does not mention strategic goals, long-term objectives, or explicit frameworks aligning with Agile principles. The discussion remains operational/tactical, highlighting overcoming blockers but without connecting to strategic intent, enterprise alignment, or organizational transformation. The audience is coaxed to reconsider their implementation rationale but not at an executive or strategist level. Consequently, the scores across all criteria are low; the fit with 'Strategic Goals' is tenuous and largely incidental.",
    "reasoning_summary": "This content highlights overcoming operational blockers to continuous delivery but lacks focus on long-term objectives, strategic alignment, or Agile-driven transformation. Its emphasis is tactical, not strategic, so the fit with the 'Strategic Goals' category is minimal.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 2.4,
    "ai_mentions": 0.0,
    "ai_alignment": 0.3,
    "ai_depth": 0.2,
    "ai_intent": 0.4,
    "ai_audience": 0.7,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "There are no mentions of Liberating Structures or related facilitation methods. The content focuses exclusively on continuous delivery and technical debt, with no reference to team facilitation, structured engagement, or agile collaboration techniques. Thus, there is minimal conceptual or audience overlap, and the discussion remains entirely outside the category.",
    "reasoning_summary": "This content discusses overcoming barriers to continuous delivery, not Liberating Structures. It lacks any mention or conceptual alignment with facilitation methods or related practices. Thus, it does not fit the Liberating Structures category.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Value Delivery",
    "calculated_at": "2025-05-16T20:21:15",
    "ai_confidence": 83.74,
    "ai_mentions": 6.7,
    "ai_alignment": 9.3,
    "ai_depth": 8.5,
    "ai_intent": 8.2,
    "ai_audience": 8.6,
    "ai_signal": 9.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 84.0,
    "reasoning": "The content clearly focuses on the theme of continuous delivery (CD), directly addressing key obstacles organizations face, such as technical debt and the need for investment in quality and automation—core topics of value delivery. The Azure DevOps example highlights successful transformation toward rapid, iterative value delivery, fully aligning with Agile and DevOps methodologies. While 'value delivery' is not explicitly stated, the subject matter deeply explores relevant practices and outcomes, aimed at practitioners and decision-makers. The discussion is highly concentrated on removing barriers to continuous value delivery, with minimal off-topic content and recent, relevant examples, justifying the strong confidence score.",
    "reasoning_summary": "This content strongly fits the Value Delivery category, providing a focused, practical example of overcoming barriers to continuous delivery through investment in quality and automation. The discussion aligns with Agile best practices and offers actionable insights for organizations seeking to improve value delivery.",
    "level": "Primary"
  },
  "Organisational Physics": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 27.325,
    "ai_mentions": 0.5,
    "ai_alignment": 2.55,
    "ai_depth": 2.8,
    "ai_intent": 3.1,
    "ai_audience": 8.1,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses primarily on debunking the myth that software complexity prevents continuous delivery, using Microsoft Azure DevOps as a case study. Although 'complexity' and 'organisations' are mentioned, the discussion is narrow—centered on technical debt, investment, and delivery pipelines rather than systems thinking, feedback loops, or holistic organisational dynamics. There is negligible direct mention of systems thinking principles or broader organisational physics concepts, resulting in low alignment and depth. The piece targets practitioners or leaders interested in software delivery improvement, not specifically those seeking insight into organisational physics.",
    "reasoning_summary": "This content addresses organisational barriers to continuous delivery, focusing on technical and process improvements rather than systems thinking or organisational dynamics. It only loosely aligns with Organisational Physics, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Psychological Safety",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 6.95,
    "ai_mentions": 0.15,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.65,
    "ai_audience": 2.4,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content does not mention psychological safety directly or discuss any of its core aspects. Its exclusive focus is challenging excuses for not adopting continuous delivery, citing technical debt and lack of investment rather than cultural or team dynamics. There are no references to fostering open communication, risk-taking, or team support—core tenets of psychological safety. The intent is to motivate action on technical issues, and the audience is practitioners in software delivery, but nothing in the content aligns specifically with the theme of psychological safety.",
    "reasoning_summary": "This content narrowly addresses technical and organizational barriers to continuous delivery, with no explicit or implicit connection to psychological safety, its principles, or fostering open team culture. Therefore, it does not fit this classification.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 22.16,
    "ai_mentions": 0.4,
    "ai_alignment": 2.2,
    "ai_depth": 3.3,
    "ai_intent": 2.5,
    "ai_audience": 6.1,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "This content centers on debunking the myth that software complexity prevents continuous delivery, highlighting Microsoft Azure DevOps as an example. However, it focuses on technical practices in software development—technical debt, automation, and investment in quality—without discussing the entrepreneurial mindset, innovation strategies, or risk-taking central to entrepreneurship. Mentions of entrepreneurial themes are indirect at best, with the primary audience being technical practitioners rather than entrepreneurs. Though the content encourages investment and overcoming excuses, these are not specifically discussed in the context of creating or scaling ventures. Thus, alignment and relevance to Entrepreneurship are weak.",
    "reasoning_summary": "The content mainly addresses software engineering practices, not entrepreneurship. It highlights overcoming technical barriers, but lacks focus on entrepreneurial strategy, mindset, or innovation, so fits this category only marginally.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Framework",
    "calculated_at": "2025-05-16T20:21:19",
    "ai_confidence": 23.55,
    "ai_mentions": 0.2,
    "ai_alignment": 2.5,
    "ai_depth": 2.2,
    "ai_intent": 2.7,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content discusses overcoming barriers to continuous delivery through practices like automation and addressing technical debt, and includes an example from Microsoft's Azure DevOps team. However, it does not directly mention or discuss frameworks or structured methodologies for implementation. There is no analysis or discussion of Agile, DevOps, or Lean frameworks, nor does it compare or explore their applicability. The focus remains on mindset and practices that enable CD, not on adaptable structured frameworks as per category definition.",
    "reasoning_summary": "While the article highlights overcoming obstacles for continuous delivery and references DevOps practices, it doesn't discuss frameworks or structured methodologies, so it only loosely fits the 'Framework' category.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Lean Principles",
    "calculated_at": "2025-05-16T20:21:09",
    "ai_confidence": 36.55,
    "ai_mentions": 0.4,
    "ai_alignment": 4.9,
    "ai_depth": 3.8,
    "ai_intent": 4.5,
    "ai_audience": 6.2,
    "ai_signal": 6.45,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content is focused on debunking the misconception that software complexity blocks continuous delivery, using Microsoft's transformation as an example. While it highlights quality practices, technical debt, and automation (which share philosophical roots with Lean), it does not directly mention Lean, its principles, or core Lean tools. There is some conceptual overlap, especially regarding waste reduction (addressing technical debt), but the content remains squarely on the CD/DevOps narrative, only implying Lean thinking. As such, mention and explicit alignment with Lean Principles is low, though some aspects (waste, improvement, automation) indirectly relate. No penalties are applied, as the tone is not hostile and references are current.",
    "reasoning_summary": "This article focuses on overcoming software complexity for continuous delivery by investing in quality and automation. Although there are indirect ties to Lean thinking (like reducing technical debt), Lean Principles aren't named or thoroughly explored, making the fit low to modest.",
    "level": "Ignored"
  },
  "Scrum": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Scrum",
    "calculated_at": "2025-05-16T20:21:09",
    "ai_confidence": 9.8,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.7,
    "ai_intent": 1.5,
    "ai_audience": 2.3,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses exclusively on continuous delivery (CD), referencing Microsoft Azure DevOps and the challenges of software complexity as a barrier to CD. It does not mention Scrum, Scrum roles, events, artifacts, or the Scrum framework. There is no discussion of Agile principles specific to Scrum, nor are team dynamics, empirical process control, or continuous improvement discussed in a Scrum context. The only partial conceptual link is that Scrum and CD both operate within software project delivery, but the intent and audience are tailored toward those interested in DevOps, technical debt, and delivery pipelines, not Scrum adoption or practice. Signal-to-noise is very low from the Scrum perspective, as the discourse is firmly CD-focused.",
    "reasoning_summary": "This content is centered on continuous delivery and technical practices, not on Scrum. It lacks direct or indirect references to Scrum concepts, roles, or principles, making it a poor fit for the Scrum category.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Principle",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 54.84,
    "ai_mentions": 2.3,
    "ai_alignment": 6.2,
    "ai_depth": 6.7,
    "ai_intent": 5.9,
    "ai_audience": 7.4,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content highlights a key DevOps transformation at Microsoft, arguing that complexity is not a barrier to continuous delivery—organizational willingness and investment in quality are. While it references principles such as continuous improvement and value delivery through investment in quality and automation, it does not directly mention or deeply explore 'principles' as such; the framing is more about challenging common excuses and showcasing success through action. There are no explicit references to Agile, Lean, or DevOps principles or terminology. However, alignment with actionable improvement and the targeting at practitioners provides notable relevance to the category. No penalties applied.",
    "reasoning_summary": "This content encourages action over excuses, in line with DevOps principles, by showcasing Microsoft's shift to continuous delivery. While not explicit about 'principles,' it promotes key actionable behaviors like investment in quality and automation, making it a moderately confident fit for the Principle category.",
    "level": "Tertiary"
  },
  "Product Owner": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Owner",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 8.0,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.1,
    "ai_intent": 0.6,
    "ai_audience": 2.3,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content discusses organizational barriers to continuous delivery, focusing on technical debt, quality investment, and automation. It does not mention the Product Owner or discuss their accountability, decision-making, or value prioritisation. There is little conceptual overlap with the Product Owner category, and the intended audience appears to be organizational leaders or technical teams at large—not Product Owners specifically. The signal-to-noise ratio is low since no substantial portion is relevant to Product Owner accountability.",
    "reasoning_summary": "This article focuses on technical and organizational challenges to continuous delivery, with no mention of Product Owner responsibilities, accountability, or related decision-making. As such, it has almost no fit with the Product Owner category.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-05-16T20:21:20",
    "ai_confidence": 9.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.5,
    "ai_intent": 0.8,
    "ai_audience": 3.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content centers entirely on overcoming software complexity for implementing continuous delivery (CD), with a case study on Microsoft's Azure DevOps team. While it discusses agile transformation, technical debt, and the importance of investment in quality and automation, it makes no mention of Minimum Viable Product, MVP methodology, or related Lean Startup principles. Its core focus is delivery velocity and quality—distinct from building and iterating a minimal product for early validation. The audience might overlap (tech leads, managers), but the scope and intent don’t fit the MVP definition.",
    "reasoning_summary": "This content is focused on overcoming barriers to continuous delivery, not Minimum Viable Product strategies. It doesn’t reference MVP concepts, instead centering on technical debt and quality. As such, it scores extremely low for MVP relevance.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Observability",
    "calculated_at": "2025-05-16T20:21:18",
    "ai_confidence": 9.44,
    "ai_mentions": 0.1,
    "ai_alignment": 0.9,
    "ai_depth": 0.8,
    "ai_intent": 1.2,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses on debunking the myth that software complexity prevents continuous delivery, using Microsoft Azure DevOps as a case study. However, it does not reference or directly discuss observability, nor does it mention metrics, logs, traces, or related tools. Its primary theme centers on addressing technical debt and investment in pipelines and automation. There is no substantive exploration of observability concepts or its principles, leaving minimal alignment beyond indirect relevance to DevOps practices. No penalties applied as the content does not contradict or undermine observability, but it does not fit the category.",
    "reasoning_summary": "This content addresses software complexity, technical debt, and continuous delivery, but does not discuss observability or its key concepts. Its indirect relevance to DevOps is not enough to confidently classify it under the Observability category.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Decision Theory",
    "calculated_at": "2025-05-16T20:21:11",
    "ai_confidence": 12.35,
    "ai_mentions": 0.4,
    "ai_alignment": 1.5,
    "ai_depth": 1.2,
    "ai_intent": 2.35,
    "ai_audience": 3.2,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on debunking the idea that software complexity prevents continuous delivery, instead highlighting technical debt and investment as real obstacles. There are no direct mentions of Decision Theory or its core concepts (such as heuristics, probability, or decision-making frameworks). The discussion lacks depth regarding decision processes, remaining anchored in software delivery practices rather than systematic analysis of decision-making under uncertainty. The intent is persuasive and targets software/engineering professionals rather than theorists or strategists interested in Decision Theory, so audience and signal-to-noise are only modestly aligned. No penalties were applied as the content is current and not satirical or critical of Decision Theory.",
    "reasoning_summary": "This content is focused on practical software delivery challenges and does not systematically discuss or reference Decision Theory principles, concepts, or frameworks. It is only weakly aligned due to its limited relevance to decision-making theory.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 79.65,
    "ai_mentions": 3.8,
    "ai_alignment": 8.4,
    "ai_depth": 7.2,
    "ai_intent": 8.0,
    "ai_audience": 7.8,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 80.0,
    "reasoning": "The content directly discusses overcoming barriers to Continuous Delivery (CD) by emphasizing investments in quality practices, technical debt reduction, and automation. Although 'technical excellence' isn't explicitly named, themes like building robust pipelines, improving quality, and tackling technical debt align closely with the category. Real-world examples (Microsoft Azure DevOps) add credibility and depth, demonstrating how these principles enable high-frequency, high-quality delivery. The intended audience—engineers, technical managers, and practitioners—fits the category. However, the discussion, while relevant and motivational, is somewhat high-level and lacks deep exploration of specific techniques or in-depth engineering practices (e.g., TDD, emergent design), which results in moderately high, but not maximal, scores for depth and mentions.",
    "reasoning_summary": "The content highlights how investment in quality practices and tackling technical debt, rather than reducing complexity, enables continuous delivery at scale. While it doesn't name 'technical excellence' directly, it strongly aligns with the concept by focusing on foundational areas crucial to sustained high-quality software delivery.",
    "level": "Secondary"
  },
  "Software Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Software Development",
    "calculated_at": "2025-05-16T20:21:14",
    "ai_confidence": 92.5,
    "ai_mentions": 8.6,
    "ai_alignment": 9.8,
    "ai_depth": 9.2,
    "ai_intent": 9.4,
    "ai_audience": 8.9,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content critically discusses a core Software Development practice: Continuous Delivery (CD), directly mentioning it as the central topic. It demonstrates strong conceptual alignment by dissecting misconceptions around software complexity and underscoring the importance of quality, technical debt management, and automation pipelines—hallmarks of modern software engineering. The Azure DevOps team example adds depth, illustrating concrete outcomes from methodological improvements. The intent is clearly to challenge practitioners' assumptions and motivate investment in engineering practices, firmly targeting a software engineering audience. The discussion is highly relevant and focused, with minimal off-topic material. No penalties were required as the tone and content are current, constructive, and aligned.",
    "reasoning_summary": "This content thoroughly explores Continuous Delivery barriers in software development, focusing on technical debt and quality investment rather than mere complexity. It’s targeted at development professionals and provides real-world evidence—making it a strong fit for the Software Development category.",
    "level": "Primary"
  },
  "Troubleshooting": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Troubleshooting",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 24.84,
    "ai_mentions": 1.0,
    "ai_alignment": 2.4,
    "ai_depth": 2.2,
    "ai_intent": 3.9,
    "ai_audience": 7.1,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on debunking the myth that software complexity blocks continuous delivery, citing Microsoft's success. However, it mostly critiques excuses and advocates for investment in quality and automation instead of offering actionable troubleshooting methods. References to 'fixing what’s broken' are generic and do not cover systematic problem-solving or diagnostic techniques central to troubleshooting. The main audience is technical, but the discussion remains broad and motivational rather than focused on troubleshooting processes.",
    "reasoning_summary": "While this content addresses overcoming software obstacles in delivery, it doesn’t offer concrete troubleshooting advice. Its focus is on challenging organizational mindset rather than diagnosing or resolving technical problems, resulting in a low match for the Troubleshooting category.",
    "level": "Ignored"
  },
  "Experimentation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Experimentation",
    "calculated_at": "2025-05-16T20:21:19",
    "ai_confidence": 13.15,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.6,
    "ai_intent": 1.1,
    "ai_audience": 4.05,
    "ai_signal": 6.65,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on debunking the myth that software complexity prevents continuous delivery, arguing instead for the importance of investment in quality and automation. There are no direct mentions of experimentation or related practices such as hypothesis-driven development, A/B testing, or analysis of experiment results. The key example (Microsoft Azure DevOps) demonstrates organizational change and investment, not experimentation. The alignment with the 'Experimentation' category is tenuous: while continuous delivery and overcoming technical debt are innovation enablers, they are not inherently experimentation topics according to the strict definition. The content targets technical and leadership audiences with relevant concerns, but the signal-to-noise ratio is only moderate in relevance to the category. No penalties applied.",
    "reasoning_summary": "This content challenges misconceptions about complexity and continuous delivery but doesn't address experimentation or hypothesis-driven approaches, which are central to the category. Its focus is organizational change, not experimentation.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Evidence Based Management",
    "calculated_at": "2025-05-16T20:21:23",
    "ai_confidence": 35.31,
    "ai_mentions": 1.1,
    "ai_alignment": 4.2,
    "ai_depth": 3.9,
    "ai_intent": 3.6,
    "ai_audience": 7.4,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The content centers on the misconception that software complexity blocks continuous delivery, using Microsoft's experience as evidence that investment in quality and automation is the real issue. It references empirical results and addresses improvement through data-backed practices, echoing the mindset of evidence-based management. However, it does not explicitly mention EBM, nor does it connect observations with formal metrics or outcome management frameworks. There is useful alignment and anecdotes, but little depth into evidence-based management as a practice or its key metrics. The audience is generally technical leaders, overlapping with EBM’s audience. Signal is moderate as the focus is on debunking a myth, not prescribing measurement approaches. No penalties apply.",
    "reasoning_summary": "The article uses Microsoft’s case to counter claims about complexity blocking continuous delivery, highlighting investment and automation. While its mindset is evidence-centric and partially aligns with EBM, it lacks explicit references, depth, and focus on key EBM metrics, so confidence is moderate.",
    "level": "Ignored"
  },
  "Estimation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Estimation",
    "calculated_at": "2025-05-16T20:21:12",
    "ai_confidence": 8.3,
    "ai_mentions": 0.1,
    "ai_alignment": 1.25,
    "ai_depth": 1.2,
    "ai_intent": 1.05,
    "ai_audience": 2.05,
    "ai_signal": 1.18,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content discusses software complexity as an excuse for not adopting continuous delivery, emphasizing quality, technical debt, and investment in automation. Estimation, as defined, isn't directly mentioned or referenced, nor are techniques or concepts aligned with Agile or Scrum estimation practices. The main focus is on delivery barriers—not estimation—yielding minimal relevance to the Estimation category.",
    "reasoning_summary": "This piece addresses obstacles to continuous delivery, focusing on technical debt and investment—not estimation. It lacks direct or indirect ties to Agile estimation concepts, making its relevance to the Estimation category very low.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-16T20:21:11",
    "ai_confidence": 8.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.4,
    "ai_depth": 0.3,
    "ai_intent": 0.4,
    "ai_audience": 0.6,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content exclusively discusses organizational barriers to continuous delivery, focusing on software complexity, technical debt, and delivery pipelines. There are no direct mentions of the Daily Scrum, nor indirect allusions to Scrum events, practices, or related team ceremonies. None of the core focus areas for the Daily Scrum—its format, purpose, or role in team alignment—are addressed. Audience is tech-oriented, so there is slight overlap, but overall there is minimal connection to the category.",
    "reasoning_summary": "This content addresses continuous delivery challenges, not the Daily Scrum or Scrum framework events. No direct or indirect ties to Daily Scrum concepts are present, resulting in extremely low alignment and confidence.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Portfolio Management",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 13.45,
    "ai_mentions": 0.31,
    "ai_alignment": 1.14,
    "ai_depth": 1.32,
    "ai_intent": 1.03,
    "ai_audience": 6.21,
    "ai_signal": 2.12,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on debunking software complexity as a barrier to continuous delivery (CD), emphasizing investment in technical debt and automation. There is no direct mention or exploration of portfolio management topics such as strategic project alignment, value streams, or portfolio-level prioritization. The intent and depth are CD-centric, not portfolio-oriented. The only partial alignment is a broad relevance for technical leadership, but substantive connections to portfolio management are missing.",
    "reasoning_summary": "This content addresses continuous delivery challenges, not portfolio management. It doesn't cover strategic alignment, portfolio-level prioritization, or value stream optimization, so its relevance to Portfolio Management is minimal.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-16T20:21:14",
    "ai_confidence": 81.43,
    "ai_mentions": 7.3,
    "ai_alignment": 9.2,
    "ai_depth": 8.7,
    "ai_intent": 8.9,
    "ai_audience": 8.0,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content directly discusses key engineering practices—specifically, it challenges the myth that complexity is a blocker for continuous delivery (CD), validating the case with a Microsoft Azure DevOps example. The main focus is on the necessity of investing in quality, tackling technical debt, and automation—all fundamental engineering practices in Agile. While 'continuous delivery' is the only direct term called out, the argument is conceptually tightly aligned with the category. The depth is strong, using concrete evidence and targeting practitioners responsible for code quality and delivery infrastructure. The tone is direct and motivational, intended to inspire change within technical teams, and avoids off-topic or filler material. There are no outdated practices or negative tone requiring penalty.",
    "reasoning_summary": "This content is a strong match for 'Engineering Practices'—it illustrates, through practical example, how prioritizing quality, automation, and tackling technical debt enables continuous delivery, countering the common complexity myth. The discussion is focused, relevant, and aimed at technical Agile practitioners.",
    "level": "Primary"
  },
  "Lean": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Lean",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 23.75,
    "ai_mentions": 0.1,
    "ai_alignment": 2.0,
    "ai_depth": 2.7,
    "ai_intent": 3.5,
    "ai_audience": 5.9,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on challenging the excuse of software complexity as a barrier to continuous delivery, citing Microsoft Azure DevOps as a case study. While it discusses overcoming technical debt and investing in quality and automation, it does not explicitly mention Lean or its principles, tools, or methodologies. The alignment with Lean is tangential; continuous improvement is implied but not referenced as Kaizen or Lean practice. The audience—technology professionals interested in delivery and process improvement—does overlap with Lean audiences, but the overall focus is on continuous delivery rather than Lean. There are no penalties justified, as the content is current and non-critical regarding Lean.",
    "reasoning_summary": "The content spotlights overcoming barriers to continuous delivery rather than Lean specifically. While some themes—like continuous improvement and technical debt reduction—relate loosely to Lean, Lean principles, methodologies, or terminology are not directly discussed. Thus, category fit is limited.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Organisational Agility",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 72.6,
    "ai_mentions": 3.3,
    "ai_alignment": 8.4,
    "ai_depth": 7.7,
    "ai_intent": 8.0,
    "ai_audience": 8.2,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "The content addresses the mindset and systemic obstacles to continuous delivery (CD) in organizations. While 'Organisational Agility' is not named directly, the discussion aligns with its principles—advocating for adaptability, overcoming inertia, and cultural/structural change. The Azure DevOps case exemplifies a shift towards agile practices. However, the main framing is about CD and overcoming blockers, not using the explicit language or frameworks of organisational agility throughout.",
    "reasoning_summary": "This content advocates for deeper organisational shifts necessary to enable continuous delivery, aligning well with the principles of agility even though it doesn't mention the term directly. It's relevant and insightful for leaders seeking to drive agile transformation.",
    "level": "Secondary"
  },
  "Customer Feedback Loops": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-16T20:21:19",
    "ai_confidence": 8.05,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.8,
    "ai_audience": 2.6,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses on organizational mindsets, technical debt, and investment in quality/automation as barriers to continuous delivery. No mention or implicit discussion of customer feedback loops, mechanisms for collecting feedback, or integrating user insights. Audience is likely engineering leadership and DevOps practitioners, not specifically those concerned with customer feedback integration. Thus, alignment and depth are extremely low, and overall confidence is minimal.",
    "reasoning_summary": "This piece doesn't address customer feedback loops—it discusses technical barriers and organizational mindsets in software delivery, not how customer feedback informs development. It's only loosely relevant by virtue of targeting a technical/process audience.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 41.6,
    "ai_mentions": 1.2,
    "ai_alignment": 4.8,
    "ai_depth": 3.9,
    "ai_intent": 5.2,
    "ai_audience": 4.6,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content focuses primarily on continuous delivery (CD) and overcoming perceived blockers such as technical debt and investment in automation. There is no direct or explicit mention of Agile Product Management, its methodologies, or the role of product managers/owners. The main theme revolves around technical practices and organizational mindset, which is related to Agile/DevOps philosophy, but does not directly address product management practices, backlog prioritization, stakeholder engagement, or aligning product vision with customers. The audience seems to be IT/engineering leaders aiming to improve delivery, with only marginal overlap with Agile product managers. Therefore, the content only has moderate conceptual alignment and depth with the Agile Product Management category.",
    "reasoning_summary": "This content centers on overcoming barriers to continuous delivery by addressing technical debt and investment, with little focus on Agile Product Management principles or practices. It's mainly relevant to technical and DevOps audiences rather than product managers, resulting in a moderate confidence score.",
    "level": "Tertiary"
  },
  "Agile Planning": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Planning",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 22.25,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 2.7,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content centers on overcoming barriers to continuous delivery (CD), specifically challenging the belief that software complexity prevents effective CD, championing investment in automation and quality. While CD is adjacent to Agile practices, the discussion does not focus on Agile Planning principles, nor does it mention sprints, backlogs, planning techniques, or iterative feedback, all of which are core to the category. There is a tangential alignment regarding improving project delivery, but the main theme remains on addressing technical debt and organizational mindset. Mentions of Agile or planning do not appear, and discussion depth is more about mindset and practice transformation than concrete Agile Planning methods or tools.",
    "reasoning_summary": "This content critiques excuses surrounding continuous delivery but does not focus on Agile Planning principles, methods, or terminology. Its emphasis is on overcoming blockers to CD, with only slight overlap on delivery culture and investment, making it only loosely relevant to the Agile Planning category.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-05-16T20:21:20",
    "ai_confidence": 22.28,
    "ai_mentions": 0.7,
    "ai_alignment": 2.3,
    "ai_depth": 2.1,
    "ai_intent": 2.0,
    "ai_audience": 7.2,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content addresses organizational challenges in continuous delivery and references Microsoft's Azure DevOps transformation as an example. However, it lacks explicit discussion of leadership decision-making based on empirical evidence. There is no mention of key evidence-based leadership concepts, such as the use of metrics, feedback loops, or data-informed leadership strategy. The focus is on technical practices and organizational willingness rather than evidence-based approaches to leadership. Audience and signal scores are higher due to relevance for organizational leaders, but overall conceptual and intent alignment is low.",
    "reasoning_summary": "This piece discusses overcoming delivery barriers at scale but centers on technical investment and mindset shifts, not evidence-based leadership. It uses an anecdote rather than data or frameworks, so evidence-based leadership is only tangentially related.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 22.14,
    "ai_mentions": 0.4,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.0,
    "ai_audience": 6.3,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on debunking the myth that software complexity prevents continuous delivery, providing an example of Azure DevOps' success. While continuous delivery is a practice influenced by Agile values (like incremental delivery and responding to change), the piece does not explicitly discuss Agile Values or Principles, nor does it mention the Agile Manifesto, its core values, or principles. The primary focus is on the technical and organizational willingness to improve delivery pipelines and overcome excuses, rather than on fostering understanding of Agile philosophy. Some audience overlap exists, but discussion is narrowly practice-focused without substantive engagement with Agile's guiding values.",
    "reasoning_summary": "This content addresses overcoming barriers to continuous delivery, citing the importance of tackling technical debt and investing in quality. However, it doesn’t reference Agile values or principles directly or in depth, making its fit with the 'Agile Values and Principles' category only tangential at best.",
    "level": "Ignored"
  },
  "Change Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Change Management",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 36.97,
    "ai_mentions": 0.2,
    "ai_alignment": 3.1,
    "ai_depth": 2.8,
    "ai_intent": 3.2,
    "ai_audience": 2.7,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content primarily addresses misconceptions about software complexity limiting continuous delivery. While it references organizational behavior and a shift in practice, it does not explicitly discuss change management, its principles, or related strategies. The piece focuses more on technical and attitudinal barriers than structured approaches to change or the role of leadership and stakeholder engagement. There is minimal alignment and depth concerning change management as defined above, with only an implied association through the narrative about organizational transition at Microsoft.",
    "reasoning_summary": "This content highlights technical and attitudinal barriers to continuous delivery but lacks focus on change management principles or practices. It offers an organizational example without discussing change strategies or depth, resulting in low confidence that it fits the Change Management category.",
    "level": "Ignored"
  },
  "Kanban": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Kanban",
    "calculated_at": "2025-05-16T20:21:12",
    "ai_confidence": 9.25,
    "ai_mentions": 0.0,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 2.0,
    "ai_audience": 2.1,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content centers exclusively on overcoming barriers to continuous delivery (CD), namely technical debt and automation investment. It does not mention Kanban, its principles, or related concepts. There is no discussion of visualisation, flow management, WIP limits, or Kanban metrics. The audience and purpose focus on CD rather than Kanban practitioners. Thus, there is negligible conceptual alignment, minimal intent/purpose overlap, and no in-depth exploration of Kanban methodology. Signal-to-noise is low from a Kanban perspective—the discussion is focused, but restates CD-related themes rather than Kanban practice.",
    "reasoning_summary": "This content addresses continuous delivery and technical obstacles, without mentioning or aligning with Kanban principles or practices. As a result, it is not a fit for the Kanban category; its focus and audience are elsewhere.",
    "level": "Ignored"
  },
  "Market Share": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Market Share",
    "calculated_at": "2025-05-16T20:21:14",
    "ai_confidence": 7.5,
    "ai_mentions": 0.2,
    "ai_alignment": 0.3,
    "ai_depth": 0.5,
    "ai_intent": 0.2,
    "ai_audience": 3.0,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses on overcoming software complexity to enable continuous delivery, using Microsoft Azure DevOps as a case study. There is no direct mention or strong conceptual tie to increasing market share, competitive advantage, or strategies aimed at expanding a product’s market presence. The discussion centers solely on internal technical barriers, not market dynamics, positioning, or related KPIs. Audience alignment is slightly higher only because software leaders could overlap, but signal remains low due to lack of relevance to 'Market Share.'",
    "reasoning_summary": "This content deals with organizational responses to software complexity regarding continuous delivery, not market share. There’s no discussion of market positioning, strategies, or competitive growth—making the fit for 'Market Share' minimal.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 7.5,
    "ai_mentions": 0.0,
    "ai_alignment": 0.3,
    "ai_depth": 0.2,
    "ai_intent": 0.3,
    "ai_audience": 4.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses on organizational challenges in adopting continuous delivery (CD), discussing the myths of complexity and the need for investments in automation and quality. There is no mention of Acceptance Test Driven Development, its principles, or any discussion about acceptance criteria or collaborative approaches in line with ATDD. The discussion is high-level, centering on cultural and technical obstacles to CD, with only tangential overlap in the broad topic of software quality. There are no ATDD-specific concepts, comparisons, or references, resulting in the lowest alignment, depth, and mentions scores. Audience may tangentially overlap with practitioners interested in quality, but focus is not ATDD-related.",
    "reasoning_summary": "This content addresses overcoming barriers to continuous delivery, with no mention or meaningful discussion of Acceptance Test Driven Development. There's minimal conceptual alignment, making it irrelevant to the ATDD category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-16T20:21:18",
    "ai_confidence": 7.8,
    "ai_mentions": 0.0,
    "ai_alignment": 1.4,
    "ai_depth": 1.7,
    "ai_intent": 2.1,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses on continuous delivery challenges, specifically addressing technical debt and process investment. There are no mentions or exploration of Open Space Agile, its principles, or related practices—neither directly nor conceptually. The material targets engineering and leadership, like Open Space Agile might, but lacks any substantive overlap. There is negligible signal toward the category beyond a general interest in organisational agility.",
    "reasoning_summary": "This content is about overcoming complexity in continuous delivery—not about Open Space Agile. It lacks direct mentions, conceptual ties, or discussion of key principles. Its audience and intent are somewhat adjacent but not aligned, resulting in an extremely low confidence score.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Beta Codex",
    "calculated_at": "2025-05-16T20:21:20",
    "ai_confidence": 9.93,
    "ai_mentions": 0.0,
    "ai_alignment": 1.8,
    "ai_depth": 1.9,
    "ai_intent": 2.2,
    "ai_audience": 2.5,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content does not mention Beta Codex, decentralisation, or human-centric or adaptive organisational design. Its focus is on overcoming technical obstacles to continuous delivery, using Microsoft Azure DevOps as a case study. There are no references to flattening hierarchy or changing organisational models, nor does it advocate BetaCodex principles. Therefore, the content only tangentially relates (at best) to the category’s core themes, resulting in low scores on all dimensions.",
    "reasoning_summary": "This content focuses on technical and investment strategies for continuous delivery, not Beta Codex principles or decentralised organisational design. There’s no direct or conceptual link to the category, so it scores very low for fit.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Deployment Strategies",
    "calculated_at": "2025-05-16T20:21:23",
    "ai_confidence": 67.05,
    "ai_mentions": 4.2,
    "ai_alignment": 7.5,
    "ai_depth": 6.8,
    "ai_intent": 7.2,
    "ai_audience": 8.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content directly mentions continuous delivery and critiques common barriers to its adoption, referencing the successful transformation of Microsoft's Azure DevOps team. The main theme aligns with deployment strategies, especially continuous deployment, and emphasizes overcoming obstacles through investment in automation and quality. However, it does not specifically discuss or detail a range of deployment methodologies or provide actionable advice on them. The depth is therefore moderate: a motivational case study rather than a comprehensive guide. The audience is technical practitioners or leaders responsible for deployment. Nearly all the content is on-topic and relevant, with little extraneous material.",
    "reasoning_summary": "This content is moderately strong for Deployment Strategies: it discusses continuous delivery and overcoming technical obstacles, mainly through a real-world example. However, it lacks in-depth exploration of multiple deployment tactics, making it motivational rather than instructive.",
    "level": "Secondary"
  },
  "DevOps": {
    "resourceId": "T-sHn-OUIvR",
    "category": "DevOps",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 81.01,
    "ai_mentions": 6.8,
    "ai_alignment": 8.9,
    "ai_depth": 8.4,
    "ai_intent": 8.1,
    "ai_audience": 7.6,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content directly references 'Azure DevOps' and discusses continuous delivery through a DevOps lens. It strongly aligns with DevOps principles such as automation, tackling technical debt, investing in quality, and building delivery pipelines. The example of Microsoft highlights DevOps scale and transformation. While 'DevOps' itself is not repeatedly mentioned, the core concepts and depth of discussion reflect a meaningful and informed perspective which is highly relevant for DevOps practitioners. The target audience is technical leadership and engineers, and the content remains focused with minimal off-topic elements. There are no outdated references or contradictions.",
    "reasoning_summary": "This content compellingly argues that real barriers to continuous delivery are technical debt and lack of investment, not complexity. By spotlighting the Azure DevOps team’s successes, it clearly exemplifies core DevOps principles and is well aligned with the intended audience and category.",
    "level": "Primary"
  },
  "Team Motivation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Team Motivation",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 17.25,
    "ai_mentions": 0.3,
    "ai_alignment": 1.8,
    "ai_depth": 2.2,
    "ai_intent": 2.5,
    "ai_audience": 5.1,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on debunking the myth that software complexity prevents continuous delivery, highlighting technical and organizational solutions such as investing in quality, addressing technical debt, and automation. While it briefly touches on themes like willingness to change and organizational investment, it does not explore team motivation, psychological dynamics, or motivational strategies. There are no explicit references to team motivation, engagement, or social dynamics within agile teams. The main audience is likely technical leaders and practitioners interested in DevOps and continuous delivery best practices, not specifically those seeking to enhance team motivation.",
    "reasoning_summary": "This content centers on organizational excuses for not adopting continuous delivery, focusing on technical practices and investment—not on team motivation, engagement, or team dynamics—resulting in low confidence for this category.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Scrum Team",
    "calculated_at": "2025-05-16T20:21:13",
    "ai_confidence": 7.86,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.8,
    "ai_audience": 1,
    "ai_signal": 1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses on debunking the myth that software complexity hinders continuous delivery, using Azure DevOps as a case study. It emphasizes investments in quality, technical debt, and automation as real enablers. There is no explicit or implicit discussion of Scrum Teams, their structure, accountability, or practices from the Scrum Guide. No relevant audience or intent targeting Scrum Team concepts. There is no off-topic or obsolete content but also no specific tie to the category.",
    "reasoning_summary": "This post addresses organizational barriers to continuous delivery, especially technical debt and investment in quality. It does not mention Scrum Teams, their responsibilities, or their structure, so it is not relevant to the 'Scrum Team' category.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-16T20:21:15",
    "ai_confidence": 24.65,
    "ai_mentions": 0.2,
    "ai_alignment": 2.3,
    "ai_depth": 2.7,
    "ai_intent": 2.1,
    "ai_audience": 8.4,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on challenging organizational assumptions about software complexity as a barrier to continuous delivery, arguing that technical debt and lack of investment are the true obstacles. There is no direct mention of Systems Thinking, nor are its foundational concepts, tools, or methodologies explored. While the narrative touches on organizational transformation, it does so through the lens of technical discipline and investment rather than holistic, interconnected analysis or feedback loops. The audience alignment and focus are reasonably strong for technical/organizational improvement, but the lack of explicit or conceptual ties to Systems Thinking results in a low confidence score for this category.",
    "reasoning_summary": "This article critiques 'complexity' as an excuse for avoiding continuous delivery, focusing on technical debt and quality investment. It doesn't directly discuss or apply Systems Thinking principles, so confidence in fitting the category is low.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Working Agreements",
    "calculated_at": "2025-05-16T20:21:14",
    "ai_confidence": 11.39,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 1.9,
    "ai_intent": 2.3,
    "ai_audience": 2.5,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content does not mention or discuss working agreements, their definition, or their use in team collaboration. The focus is on overcoming software complexity and advocating for investment in quality and automation, as illustrated by Microsoft's Azure DevOps. It does not address team norms, principles, or agreements for collaboration, resulting in low alignment and depth. The target audience may overlap with those interested in working agreements, but the topic remains tangential, leading to a low confidence score.",
    "reasoning_summary": "This content discusses overcoming software complexity for continuous delivery—not working agreements or team norms. Its message isn't aligned with the category definition, so relevance is minimal.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 53.3,
    "ai_mentions": 1.1,
    "ai_alignment": 5.7,
    "ai_depth": 5.2,
    "ai_intent": 5.3,
    "ai_audience": 7.0,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content focuses on overcoming barriers to continuous delivery (CD), particularly the excuse of software complexity, and emphasizes tackling technical debt and investing in process automation. While CD, quality practices, and automation are relevant to ALM, the article does not directly discuss the full span of ALM, its methodologies, or its governance practices. There is no explicit mention of ALM, its stages, or KPIs, and the primary intent is to critique misconceptions about CD rather than present a holistic view of application lifecycle management. The audience is practitioners interested in DevOps or CD, overlapping somewhat with those interested in ALM. Overall, while there is conceptual overlap, especially regarding maintenance and process improvement, depth and directness regarding ALM are limited.",
    "reasoning_summary": "This content critiques misconceptions about continuous delivery, focusing on quality investment and technical debt, aligning with aspects of ALM but lacking comprehensive coverage or explicit linkage to the full application lifecycle. It partially fits the ALM category but is more narrowly focused on CD.",
    "level": "Tertiary"
  },
  "Sprint Review": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Sprint Review",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 2.3,
    "ai_mentions": 0.0,
    "ai_alignment": 1.4,
    "ai_depth": 1.0,
    "ai_intent": 3.0,
    "ai_audience": 4.0,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content focuses exclusively on software complexity as an obstacle to continuous delivery (CD), using Microsoft Azure DevOps as an example. There is no mention or discussion of Sprint Review, Scrum events, or related practices. No core themes of Sprint Review (stakeholder collaboration, inspecting increments, gathering feedback, adapting the product backlog) are addressed. The purpose, audience, and structure align with general DevOps and continuous delivery advocacy, not Sprint Review.",
    "reasoning_summary": "This piece discusses obstacles to continuous delivery, not Sprint Reviews or Scrum events. There are no direct or indirect references to Sprint Review practices or topics, so confidence is very low for this category.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 41.3,
    "ai_mentions": 1.8,
    "ai_alignment": 3.7,
    "ai_depth": 3.5,
    "ai_intent": 4.2,
    "ai_audience": 6.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses on overcoming technical obstacles to continuous delivery, discussing Microsoft’s transformation and the importance of investing in quality and automation. However, it does not mention Agile Leadership or leadership roles explicitly, nor does it address leadership-specific strategies, empowerment, or organisational culture. Depth is limited to a single case study and general advice, lacking specific guidance for leaders or alignment to Agile Leadership principles.",
    "reasoning_summary": "This piece discusses barriers to continuous delivery, using Microsoft as an example, but does not reference Agile Leadership or leadership roles. The focus is on technical investment and organizational willingness, making it only marginally relevant to Agile Leadership.",
    "level": "Tertiary"
  },
  "Test Automation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Test Automation",
    "calculated_at": "2025-05-16T20:21:23",
    "ai_confidence": 57.6,
    "ai_mentions": 1.2,
    "ai_alignment": 7.4,
    "ai_depth": 5.9,
    "ai_intent": 6.2,
    "ai_audience": 7.1,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "Direct mentions of automation or test automation are limited—'quality and automation' are referenced but not in detail. Conceptually, the content argues that lack of investment in automation (among other practices) is a true barrier to continuous delivery, which aligns partially with the category. Depth is moderate: while the value of automation is implied, there's no deep dive into frameworks, tools, or best practices. The audience is technical, aimed at practitioners considering CD adoption. The primary focus is on organizational attitude and investment rather than substantive exploration of test automation. There is some filler (rhetorical challenge, references to excuses), but the relevance is mostly maintained.",
    "reasoning_summary": "The content highlights automation as a key enabler for continuous delivery but does not delve into test automation practices or tools. While the theme aligns with the category's audience and intent, specific discussion of test automation is brief and indirect, resulting in moderate confidence.",
    "level": "Tertiary"
  },
  "Deployment Frequency": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-16T20:21:19",
    "ai_confidence": 78.5,
    "ai_mentions": 5.6,
    "ai_alignment": 7.8,
    "ai_depth": 7.5,
    "ai_intent": 8.1,
    "ai_audience": 8.8,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "The content centers on the misconception that software complexity inhibits continuous delivery. It uses a strong, relevant case study (Azure DevOps moving from multi-year to tri-weekly feature releases) to demonstrate the impact of addressing technical debt and investing in automation—a core practice for achieving frequent, reliable deployments. While 'deployment frequency' is implied as a key outcome and metric, the term itself is not explicitly mentioned. The main discussion strongly aligns with strategies and challenges outlined in the category, providing concrete, applicable insights for practitioners and leaders in Agile/DevOps. There’s substantial alignment and depth, but indirect reference to the core category terminology and a slight emphasis on overcoming technical debt (which is a related but distinct challenge) slightly lowers the top-end scores.",
    "reasoning_summary": "This content strongly aligns with Deployment Frequency by highlighting how investment in automation and quality practices enables much more frequent releases, using Azure DevOps as a compelling case study. While it doesn't name the category directly, it addresses core themes that resonate with Agile and DevOps professionals.",
    "level": "Secondary"
  },
  "Site Reliability Engineering": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-16T20:21:24",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 2.2,
    "ai_intent": 1.6,
    "ai_audience": 7.1,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content reviews common excuses regarding continuous delivery (CD) and promotes investing in automation, quality, and reducing technical debt, referencing the Azure DevOps team's success. There are no direct references to Site Reliability Engineering or its core principles (SLOs, SLIs, incident management, reliability, etc.), nor does it cover SRE best practices or culture. The main focus is on general DevOps/CD adoption and dispelling barriers to its implementation, which fall outside SRE’s scope. However, the audience (technical decision-makers) and reference to automation overlap with SRE themes, so there is minor conceptual proximity, but the fit is weak.",
    "reasoning_summary": "This piece is focused on continuous delivery and organizational barriers, not Site Reliability Engineering principles. There are minimal overlaps—like references to automation or quality—but it's not a genuine SRE discussion, so the confidence score is low.",
    "level": "Ignored"
  },
  "Forecasting": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Forecasting",
    "calculated_at": "2025-05-16T20:21:16",
    "ai_confidence": 14.25,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 4.1,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses on dispelling the myth that software complexity prevents continuous delivery (CD), citing Microsoft’s transition to CD as evidence. It discusses overcoming organizational blockers like technical debt and the need for investment in automation but never discusses forecasting, predicting delivery timelines, or empirical methods for project prediction. It lacks any explicit or implicit reference to forecasting in Agile/Scrum, metrics, or planning. The target audience of software practitioners is a mild match but the topic remains CD practices and organizational change, not forecasting.",
    "reasoning_summary": "This piece is about overcoming obstacles to continuous delivery, not about forecasting practices or methods. It doesn’t mention forecasting or related Agile planning concepts, resulting in a very low confidence score for the 'Forecasting' category.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Azure Boards",
    "calculated_at": "2025-05-16T20:21:18",
    "ai_confidence": 4.6,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.2,
    "ai_intent": 0.6,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content discusses continuous delivery, software complexity, and technical debt, using Microsoft’s Azure DevOps team as an example. However, it does not mention Azure Boards directly or indirectly, nor does it explore Agile project tracking, work items, sprint planning, or any Azure Boards features. The main themes and intent are tangential to Azure Boards. The intended audience (DevOps/engineering leaders) only loosely overlaps with Azure Boards users, if at all. There is almost no relevant signal pertaining to the given category.",
    "reasoning_summary": "This content doesn't address Azure Boards or related concepts. Its focus is on continuous delivery and technical debt, making any fit with the Azure Boards category extremely weak.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 39.65,
    "ai_mentions": 1.1,
    "ai_alignment": 4.9,
    "ai_depth": 3.7,
    "ai_intent": 4.2,
    "ai_audience": 5.1,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content focuses on overcoming software complexity as a barrier to continuous delivery, using the example of Microsoft's Azure DevOps team. While it hints at mindsets such as willingness to invest in quality and addressing technical debt, it does not explicitly reference Agile philosophy, principles, or values. There are no mentions of the Agile Manifesto, adaptability, or broader philosophical discussions. The primary focus is on practical lessons learned and challenging excuses, not delving into Agile as a guiding mindset or culture shift. Thus, alignment and depth are moderate at best, with only weak connections to Agile Philosophy.",
    "reasoning_summary": "This content mainly challenges the excuse of software complexity for continuous delivery, emphasizing practical changes and investment over philosophical Agile discussions. It offers little direct or in-depth engagement with Agile Philosophy, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Azure Repos",
    "calculated_at": "2025-05-16T20:21:22",
    "ai_confidence": 9.3,
    "ai_mentions": 0.7,
    "ai_alignment": 1.6,
    "ai_depth": 1.2,
    "ai_intent": 1.0,
    "ai_audience": 2.2,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "There is no mention of Azure Repos by name or reference; the Azure DevOps team is referenced as a case study, focusing on investments in quality, CI/CD, and overcoming barriers to continuous delivery. The themes align with DevOps and CI/CD philosophies—both relevant to Azure Repos in a broader context—but the main ideas, audience, and details are general and not tied to source control or Azure Repos specifics. No dimension approaches significant depth on Azure Repos functions, features, or integration. The content is aimed at organizational leaders or advocates for CD, not specifically practitioners interested in Azure Repos. There is little to no signal relevant to Azure Repos operations, strategy, or tooling.",
    "reasoning_summary": "The content discusses continuous delivery and organizational blockers using the Azure DevOps team as an example, but does not mention Azure Repos or its key functionalities. It targets a broad audience and remains general, resulting in a very low confidence fit for the 'Azure Repos' category.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Value Stream Management",
    "calculated_at": "2025-05-16T20:21:23",
    "ai_confidence": 24.25,
    "ai_mentions": 0.3,
    "ai_alignment": 2.8,
    "ai_depth": 2.4,
    "ai_intent": 2.7,
    "ai_audience": 9.1,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "Direct mention of Value Stream Management is absent; the focus is on debunking software complexity as an obstacle to continuous delivery (CD). While themes like technical debt, investment in quality, and process improvement appear, they are couched in the context of CD and not explicitly tied to value stream mapping, waste elimination, or flow optimisation. The narrative targets practitioners or leaders in software delivery, but connections to Value Stream Management principles are indirect at best. Discussion depth is limited to one example (Microsoft), without broader exploration of VSM concepts or metrics. High audience and signal scores reflect relevance for software delivery professionals, but low on-category conceptual and depth scores appropriately lower confidence.",
    "reasoning_summary": "This content addresses improving software delivery by overcoming technical debt and investing in automation but does not discuss Value Stream Management concepts or practices directly. Its focus remains on enabling continuous delivery, making it only marginally relevant for the Value Stream Management category.",
    "level": "Ignored"
  },
  "Release Management": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Release Management",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 68.936,
    "ai_mentions": 3.7,
    "ai_alignment": 7.6,
    "ai_depth": 7.5,
    "ai_intent": 6.7,
    "ai_audience": 7.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 69.0,
    "reasoning": "The content centers on challenges and misconceptions surrounding continuous delivery (CD), a core practice within release management. It gives concrete examples (Microsoft/Azure DevOps), and discusses practical obstacles—technical debt, lack of automation—that are critical barriers to effective release management. However, the term 'release management' is never directly mentioned, and some focus is on CD rather than the broader release management process. Still, the main arguments, depth, and audience match release management practitioners and strategists, with minimal off-topic material, aligning well with the category.",
    "reasoning_summary": "While the piece never says 'release management,' it dives deep into a fundamental concern—overcoming barriers to continuous delivery at scale. Its technical insights, focus on automation and quality, and real-world example make it highly relevant for anyone invested in release management practices.",
    "level": "Secondary"
  },
  "Business Agility": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Business Agility",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 43.87,
    "ai_mentions": 1.2,
    "ai_alignment": 4.8,
    "ai_depth": 5.1,
    "ai_intent": 3.9,
    "ai_audience": 5.3,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content centers on overcoming software complexity as an excuse for not implementing continuous delivery (CD). The main focus is on technical practices (quality, automation, technical debt remediation) and a case study from Microsoft. While these are valuable for improving delivery, the core emphasis is on CD adoption, not business agility principles, organizational adaptability, or agile transformation at the business level. There is some alignment via references to organizational change, but the discussion is framed through a technical/DevOps lens rather than strategic business agility practices. Mentions of business agility are indirect; audience fit slightly favors practitioners or technical leaders, not executives or strategists focused on agility. Depth and alignment scores sit in the midrange, reflecting some but not central overlap.",
    "reasoning_summary": "This piece mostly addresses technical barriers to continuous delivery, citing a high-profile case study. While it hints at themes relevant to business agility, its primary focus is engineering practice and DevOps, not organizational agility, so confidence in this classification is moderate to low.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Delivery",
    "calculated_at": "2025-05-16T20:21:18",
    "ai_confidence": 87.95,
    "ai_mentions": 6.8,
    "ai_alignment": 9.6,
    "ai_depth": 8.4,
    "ai_intent": 9.1,
    "ai_audience": 8.3,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 88.0,
    "reasoning": "The content directly references continuous delivery (CD)—a fundamental aspect of product delivery—both in the title and throughout the discussion. It provides a real-world example (Microsoft Azure DevOps) emphasizing how investment in quality, technical debt reduction, and robust pipelines enable frequent product releases, even within complex systems. The main theme is that complexity is not a valid excuse for poor delivery; rather, best practices and willingness to address root causes are pivotal. There is moderate elaboration on delivery methodologies rather than mere surface mention. The intent is to provoke organizations to reassess their blockers against adopting CD, aligning with typical product delivery audiences (engineering leaders, DevOps, and managers). Nearly all signals stay relevant to product delivery topics, with minimal digression. No penalties applied—content is current, not satirical or contradictory.",
    "reasoning_summary": "This content strongly aligns with Product Delivery, illustrating the realities of continuous delivery despite complex software. It encourages investment in quality and automation, using real industry examples, and targets a technical, change-oriented audience.",
    "level": "Primary"
  },
  "Cycle Time": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Cycle Time",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 41.12,
    "ai_mentions": 1.4,
    "ai_alignment": 4.8,
    "ai_depth": 4.5,
    "ai_intent": 4.0,
    "ai_audience": 7.1,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses on debunking the myth that software complexity blocks continuous delivery, highlighting technical debt and lack of quality investment as true obstacles. While it references delivery speed improvements (from two years to three weeks and an increase in annual features), it never directly discusses Cycle Time or its measurement. The concept of faster delivery indirectly relates to Cycle Time reduction, but this is implicit rather than explicit, resulting in weaker alignment and depth. The intended audience is relevant (teams working on DevOps/continuous delivery), and most of the content centers on relevant delivery efficiency topics, but without explicit discussion of Cycle Time or methods to improve it.",
    "reasoning_summary": "The content talks about improving delivery frequency and removing delivery obstacles, indirectly relating to Cycle Time, but it never names or deeply explores Cycle Time, metrics, or measurement methods. The relevance is moderate, mostly via implicit connections to workflow speed.",
    "level": "Tertiary"
  },
  "Pragmatic Thinking": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-16T20:21:22",
    "ai_confidence": 84.7,
    "ai_mentions": 3.6,
    "ai_alignment": 8.7,
    "ai_depth": 8.9,
    "ai_intent": 8.2,
    "ai_audience": 8.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 85.0,
    "reasoning": "The content challenges a common excuse in Agile/DevOps — perceived complexity — and reframes the problem as lack of practical investment. It cites a real-world example (Azure DevOps), showing how practical experimentation and focus on quality, technical debt, and automation enable continuous delivery despite complexity. While 'pragmatic thinking' is not named, the argument is rooted in real-world application, adaptable problem-solving, and experience-based learning. The audience is technical leaders and practitioners; detail and tone support substantial conceptual alignment and depth, with little off-topic content. Slightly lower on 'direct mentions' as the phrase 'pragmatic thinking' is not used.",
    "reasoning_summary": "This content exemplifies pragmatic thinking in DevOps by dispelling complexity myths and providing a practical, real-world case. It encourages actionable, experience-based change over excuses, directly aligning with practitioners focused on real improvement.",
    "level": "Primary"
  },
  "Unrealised Value": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-16T20:21:25",
    "ai_confidence": 9.8,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.3,
    "ai_intent": 0.5,
    "ai_audience": 0.8,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses on debunking the idea that software complexity is an insurmountable barrier to continuous delivery, using Azure DevOps as a case study for successful transformation. However, it does not mention Unrealised Value, Evidence-Based Management, or address untapped value, innovation potential, or frameworks related to the category. Its alignment is weak and does not target the core audience interested in Unrealised Value. It is more about overcoming delivery myths than identifying opportunities for additional value capture.",
    "reasoning_summary": "This content challenges the myth of software complexity blocking progress, but it doesn't discuss Unrealised Value, missed opportunities, or EBM concepts. It's focused on delivery process improvements, not on identifying or measuring potential value.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-16T20:21:26",
    "ai_confidence": 37.46,
    "ai_mentions": 0.25,
    "ai_alignment": 4.78,
    "ai_depth": 3.97,
    "ai_intent": 4.1,
    "ai_audience": 6.12,
    "ai_signal": 7.19,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "Direct mentions of Lean Product Development are absent. The content primarily discusses overcoming barriers to continuous delivery (CD) and uses a Microsoft Azure DevOps case to emphasize investment and technical debt reduction. While efficiency and improvement reflect Lean-adjacent values, explicit Lean principles and tools (like value stream mapping, A3, or Lean culture) are not discussed. Conceptual overlap is moderate, but the main focus is continuous delivery vs. complexity—not Lean Product Development per se. No penalties apply as there is no outdated information or negative stance.",
    "reasoning_summary": "The content focuses on overcoming tech debt and improving investment for continuous delivery, touching on waste reduction but never mentioning Lean Product Development directly or its core frameworks. It’s tangentially relevant but lacks the depth, specificity, and intent required for a strong fit.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 12.23,
    "ai_mentions": 0.0,
    "ai_alignment": 1.6,
    "ai_depth": 1.7,
    "ai_intent": 2.5,
    "ai_audience": 2.3,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on overcoming complexity for continuous delivery, referencing quality practices and automation, but never mentions or addresses Behaviour Driven Development (BDD)—either directly or conceptually. There are no discussions of BDD principles, collaboration practices, user stories, or relevant frameworks. The message primarily targets organizational mindset and technical debt. The alignment with the BDD category is tangential at best, resulting in very low confidence.",
    "reasoning_summary": "This piece focuses on overcoming obstacles to continuous delivery, like technical debt and investment in quality, but makes no mention of BDD principles or practices. There's little alignment with Behaviour Driven Development, so confidence in this classification is very low.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Definition of Ready",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 2.75,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 0.8,
    "ai_intent": 1.7,
    "ai_audience": 4.2,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content does not reference Definition of Ready directly or in concept. It doesn't discuss backlog item readiness, criteria for DoR, or its impact on Agile processes. The primary focus is on debunking complexity as a barrier to continuous delivery, using a case study of Microsoft to emphasize investment in technical debt and automation. While aimed at a similar audience (engineering or Agile practitioners), the thematic alignment and depth regarding DoR are nearly absent, as are explicit mentions. No penalties were applied as the content is current and not critical of DoR.",
    "reasoning_summary": "This content focuses on how organizations use software complexity as an excuse to avoid adopting continuous delivery, advocating for tackling technical debt instead. It neither mentions nor aligns with Definition of Ready concepts, resulting in low confidence for this category.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 38.08,
    "ai_mentions": 0.4,
    "ai_alignment": 3.7,
    "ai_depth": 3.0,
    "ai_intent": 4.2,
    "ai_audience": 5.4,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content challenges common organizational excuses for not adopting continuous delivery, arguing that technical debt and investment in quality are the real barriers, not complexity. While it supports disciplined application, technical excellence, and addressing impediments—principles adjacent to Professional Scrum—it doesn’t mention Scrum, its values, or ethos. It focuses more on DevOps/CD and transformation mindset rather than empiricism, accountability in Scrum roles, or evidence-based Scrum practices. The audience could overlap with Professional Scrum practitioners, but the discussion remains surface-level regarding Professional Scrum concepts.",
    "reasoning_summary": "This article emphasizes technical excellence and confronting impediments, resonating with Scrum values, but lacks any explicit connection to Professional Scrum or its ethos. The focus is mainly on continuous delivery, so confidence in fit with the category is low.",
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Accountability",
    "calculated_at": "2025-05-16T20:21:17",
    "ai_confidence": 31.5,
    "ai_mentions": 0.3,
    "ai_alignment": 3.7,
    "ai_depth": 2.8,
    "ai_intent": 3.6,
    "ai_audience": 7.2,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content focuses on misunderstandings around the causes of slow delivery in organisations, emphasizing technical debt and investment in quality/automation rather than structural accountability. Direct mention of accountability or outcome ownership in a work system is absent, and there's no exploration of explicit accountabilities or structural design. The target audience (technical leads, managers) does align partially, as does the intent to challenge assumptions, but the main thrust is not about accountability as a foundational mechanism. Content is clear and relevant to DevOps practices, but accountability is neither a core nor explored theme, just tangentially suggested through implication about willingness to 'own' investments. Therefore, scores on conceptual alignment, depth, and intent are low, while audience and signal-to-noise ratio are higher.",
    "reasoning_summary": "This content critiques misconceptions about continuous delivery barriers, focusing on technical debt and investment. While relevant to DevOps audiences, it lacks explicit or thorough discussion of accountability, making the category fit low but not negligible.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-16T20:21:23",
    "ai_confidence": 23.27,
    "ai_mentions": 0.0,
    "ai_alignment": 2.6,
    "ai_depth": 2.4,
    "ai_intent": 2.1,
    "ai_audience": 7.3,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content doesn't mention Agnostic Agile nor its principles. Its main theme is disputing the 'software complexity' excuse for not adopting continuous delivery. While it briefly aligns with context-driven improvement and pragmatism, there's no discussion of Agnostic Agile frameworks, ethics, or its distinctive philosophy. The depth and intent focus solely on continuous delivery practices, not broad agile or philosophical topics. The audience is professionals facing practical delivery barriers, so audience and signal-to-noise are higher, but overall confidence is low due to near-complete misalignment with the category.",
    "reasoning_summary": "This content deals with practical barriers to continuous delivery, not Agnostic Agile principles or philosophy. There's minimal alignment, as it never references or discusses Agnostic Agile, resulting in a low confidence of fit for this category.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Lead Time",
    "calculated_at": "2025-05-16T20:21:20",
    "ai_confidence": 24.7,
    "ai_mentions": 0.0,
    "ai_alignment": 2.1,
    "ai_depth": 2.2,
    "ai_intent": 3.4,
    "ai_audience": 7.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on software delivery cadences and debunks complexity as a barrier to continuous delivery, using Microsoft's transformation as an example. There are no explicit or implicit references to Lead Time, its definition, measurement, or strategies for optimization. It loosely relates to process improvement and delivery acceleration but does not delve into observability metrics or the specifics of Lead Time. The content is aimed at technical or leadership audiences but does not match the intent or depth for Lead Time classification.",
    "reasoning_summary": "While related to faster delivery and process improvement, the content never mentions nor explores Lead Time. Its focus is more on debunking myths about complexity and advocating for investment in automation—making it weakly relevant to the Lead Time category.",
    "level": "Ignored"
  },
  "Model": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Model",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 31.74,
    "ai_mentions": 1.5,
    "ai_alignment": 3.4,
    "ai_depth": 2.9,
    "ai_intent": 3.2,
    "ai_audience": 6.4,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content discusses organizational beliefs about complexity as an obstacle to continuous delivery, referencing technical debt and quality investment as true blockers. While it addresses issues relevant to DevOps and delivery, it does not discuss conceptual models, frameworks, or representations. There is no direct mention of recognized models (e.g., Cynefin, Three Ways of DevOps) or any substantive conceptual analysis. The message is aimed at practitioners or leaders, aligning with the audience, but the focus is on practical blockers rather than models used to understand or address complexity. Thus, the alignment, mentions, depth, and intent scores are moderate to low, reflected in the confidence score.",
    "reasoning_summary": "This content challenges assumptions about complexity in continuous delivery but doesn't discuss models or frameworks. Its focus is on practical change, not conceptual models, making its fit for the 'Model' category weak.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Organisational Change",
    "calculated_at": "2025-05-16T20:21:26",
    "ai_confidence": 25.67,
    "ai_mentions": 1.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.8,
    "ai_intent": 2.3,
    "ai_audience": 8.0,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content discusses organisational barriers to continuous delivery, notably technical debt and lack of investment, using Microsoft's Azure DevOps case as an example. However, it does not directly address frameworks, leadership, or change management strategies central to 'Organisational Change.' The focus is on technical practices and cultural attitudes rather than organisational transformation processes specific to agility or resilience, resulting in a low confidence score.",
    "reasoning_summary": "While this piece touches on organisational blockers and gives a case study, it centers on technical debt and delivery pipelines rather than frameworks or strategies for organisational change, so its fit for the category is weak.",
    "level": "Ignored"
  },
  "Remote Working": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Remote Working",
    "calculated_at": "2025-05-16T20:21:22",
    "ai_confidence": 3.3,
    "ai_mentions": 0.0,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.7,
    "ai_audience": 0.6,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content focuses entirely on overcoming barriers to continuous delivery, particularly complex software and technical debt. There are no explicit or implicit references to remote working, distributed teams, Agile remote practices, or tools for remote collaboration. The audience likely overlaps with technical leadership but is not targeting remote teams or unique distributed challenges. The signal-to-noise ratio is low for Remote Working, as all examples and advice are unrelated to the category definition.",
    "reasoning_summary": "This content discusses overcoming software complexity for continuous delivery, with no mention or implication of Remote Working or distributed Agile teams. Its focus is on technical and investment issues, so it does not fit the Remote Working category.",
    "level": "Ignored"
  },
  "Capability": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Capability",
    "calculated_at": "2025-05-16T20:21:23",
    "ai_confidence": 61.6,
    "ai_mentions": 2.2,
    "ai_alignment": 7.2,
    "ai_depth": 5.9,
    "ai_intent": 6.4,
    "ai_audience": 6.8,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content critiques the common belief that software complexity prevents continuous delivery (CD), highlighting that true obstacles are technical debt and lacking quality investment. It showcases Microsoft's Azure DevOps as a case study, crediting their success to improvements like quality practices and pipeline automation. While it strongly reinforces the need for organisational improvement and systemic change—elements of capability—it does not explicitly use the term or deeply define or analyze 'capability' as a concept. There is moderate depth describing what enables delivery, and the target audience seems to be leaders responsible for system improvement. The content is focused, relevant, and supportive of capability-building, but limited by the lack of direct terminology and only implicit discussion.",
    "reasoning_summary": "The content argues that overcoming technical debt and investing in robust delivery pipelines enables continuous delivery—demonstrating key aspects of organisational capability—even if the term 'capability' isn't directly used. It's relevant and focused, but doesn't explore capability in depth.",
    "level": "Secondary"
  },
  "Time to Market": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Time to Market",
    "calculated_at": "2025-05-16T20:21:25",
    "ai_confidence": 63.9,
    "ai_mentions": 2.8,
    "ai_alignment": 7.6,
    "ai_depth": 6.7,
    "ai_intent": 7.5,
    "ai_audience": 8.1,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 64.0,
    "reasoning": "The content does not mention 'Time to Market' or related metrics explicitly (e.g., lead time, cycle time). However, it strongly aligns conceptually by discussing the reduction of feature delivery intervals (from two years to three weeks), referencing continuous delivery, and improvements in delivery efficiency. It highlights a specific case (Microsoft Azure DevOps) showing faster deployment cadence due to process and infrastructure investment, matching the spirit of the category. The discussion is fairly deep on shifting mindsets, modernisation, and its impact on output pace, though the phrasing remains focused on complexity and continuous delivery rather than on measuring or optimising 'Time to Market' directly. The audience appears to be technical leaders or practitioners facing scalability and deployment challenges. There are no penalties, as the content is recent, not critical, nor misaligned. Overall, this is competitive but indirect coverage of the 'Time to Market' concept.",
    "reasoning_summary": "While the content doesn't use 'Time to Market' phrases directly, it conceptually fits by highlighting how investment in quality and automation drives faster value delivery, as proven by Microsoft Azure DevOps. The focus on reducing feature delivery intervals closely matches core category themes.",
    "level": "Secondary"
  },
  "Service Level Expectation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-16T20:21:19",
    "ai_confidence": 4.9,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 0.6,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content discusses challenges with continuous delivery (CD) and refutes 'complexity' as a valid blocker, instead focusing on investments in quality and automation. There is no mention—explicit or implicit—of Service Level Expectation (SLE), its definition, calculation, audience, or value. The alignment is extremely weak with no references to Agile, Scrum, Kanban, SLE, or the predictive flow metrics the category requires. Thus, the overall confidence is very low.",
    "reasoning_summary": "This content critiques excuses for avoiding continuous delivery and highlights the importance of investments in quality and automation, but makes no mention or discussion of Service Level Expectation, yielding very low confidence for this category.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-16T20:21:19",
    "ai_confidence": 29.92,
    "ai_mentions": 0.1,
    "ai_alignment": 3.7,
    "ai_depth": 3.4,
    "ai_intent": 3.9,
    "ai_audience": 6.2,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content criticizes the misconception that complexity prevents continuous delivery, emphasizing investment in quality, automation, and technical debt reduction. However, it makes no direct or implied mention of empirical process control principles such as transparency, inspection, or adaptation. The focus is on overcoming blockers to CD. While the target audience (software teams, managers) overlaps, discussion of empirical process control concepts is absent, resulting in low alignment, depth, and intent fit with the category.",
    "reasoning_summary": "The content addresses overcoming obstacles to continuous delivery but doesn’t reference or align with empirical process control concepts. Despite a relevant audience, it lacks depth and direct connection to the category, making it a weak fit.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Test First Development",
    "calculated_at": "2025-05-16T20:21:21",
    "ai_confidence": 27.46,
    "ai_mentions": 0.0,
    "ai_alignment": 2.8,
    "ai_depth": 2.4,
    "ai_intent": 2.6,
    "ai_audience": 8.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content does not directly mention Test First Development nor explore its principles, methods, or practices. Its focus is on the misconception of complexity as a barrier to Continuous Delivery, referencing quality and automation investments (which loosely relate to Test First). It lacks in-depth discussion of test-first principles, criteria, or collaboration mechanisms specified by the category, and only broadly aligns in the context of advocating for quality. The audience alignment and signal-to-noise are high as the content targets software delivery practitioners, but the conceptual fit and depth are minimal.",
    "reasoning_summary": "While this content discusses the importance of quality and automation for Continuous Delivery, it doesn't directly reference or delve into Test First Development principles. It offers only a loose conceptual connection, resulting in a low confidence score for the Test First Development category.",
    "level": "Ignored"
  },
  "Product Validation": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Validation",
    "calculated_at": "2025-05-16T20:21:22",
    "ai_confidence": 16.47,
    "ai_mentions": 0.2,
    "ai_alignment": 1.6,
    "ai_depth": 2.3,
    "ai_intent": 1.7,
    "ai_audience": 2.5,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content discusses misconceptions about software complexity as a barrier to continuous delivery and highlights the importance of addressing technical debt and investing in automation. However, it does not mention or discuss product validation methodologies, user testing, customer feedback, or related concepts. The focus is on delivery process improvement, not validating product ideas or fit. Thus, scores are low across all dimensions, with only minimal tangential overlap, and there are no penalties as the content is current and does not contradict the framing.",
    "reasoning_summary": "This piece focuses on operational improvement and overcoming delivery obstacles, not on methodologies to validate product ideas with real users. There’s little to no relevance to Product Validation as defined, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Market Adaptability",
    "calculated_at": "2025-05-16T20:21:24",
    "ai_confidence": 62.2,
    "ai_mentions": 2.3,
    "ai_alignment": 7.8,
    "ai_depth": 6.7,
    "ai_intent": 7.1,
    "ai_audience": 8.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content highlights technical and cultural barriers to continuous delivery (CD), referencing Azure DevOps' evolution towards rapid software release cycles. While it directly references CD and automation, it doesn't explicitly mention 'market adaptability', Agile, or Lean principles. Still, the example demonstrates how overcoming internal obstacles enables faster reaction to market shifts, aligning with the category's intent. The discussion has depth, but is more motivational than methodical, focusing more on mindset and investment rather than specific adaptability techniques or continuous feedback loops. The audience fit is high—IT leaders and practitioners exploring adaptability via DevOps. No penalties were applied, as the content is current and aligns with positive principles.",
    "reasoning_summary": "The content discusses overcoming perceived complexity and investing in practices that enable rapid delivery, showing how adaptability is possible. Though it doesn't directly reference 'market adaptability', it is relevant for practitioners interested in accelerating change and aligns with the category’s core aims.",
    "level": "Secondary"
  },
  "Value Stream Mapping": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-05-16T20:21:27",
    "ai_confidence": 14.35,
    "ai_mentions": 0.2,
    "ai_alignment": 1.55,
    "ai_depth": 0.95,
    "ai_intent": 3.15,
    "ai_audience": 3.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses on software complexity, technical debt, and the real challenges to continuous delivery (CD), with reference to Microsoft's Azure DevOps transformation. There are no direct mentions of Value Stream Mapping, nor are its core concepts or techniques discussed. The main intent is to challenge perceived blockers to CD, not to explore VSM or workflow visualization. The audience could overlap with VSM practitioners but the relevance is minimal—there's no exploration of mapping processes, analyzing workflow, or applying Lean principles specific to VSM.",
    "reasoning_summary": "This content addresses barriers to continuous delivery, emphasizing technical debt and quality but never discusses value stream mapping or workflow analysis. There's minimal alignment with the VSM category, thus confidence is very low.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Automated Testing",
    "calculated_at": "2025-05-16T20:21:27",
    "ai_confidence": 47.6,
    "ai_mentions": 1.5,
    "ai_alignment": 5.2,
    "ai_depth": 4.6,
    "ai_intent": 4.8,
    "ai_audience": 7.1,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content addresses overcoming barriers to continuous delivery (CD) and acknowledges the importance of 'quality and automation.' However, it does not explicitly discuss automated testing or its types, tools, or best practices. Automated testing is implied as part of the automation and quality practices, but there are no direct references or in-depth exploration of automated testing principles central to the category. The audience (software delivery practitioners) is aligned, and the signal is mostly on-topic, but insufficient specificity to automated testing lowers most scores.",
    "reasoning_summary": "While the content champions automation in overcoming delivery barriers, it only hints at automated testing and never addresses it directly or in depth. This keeps the confidence score modest, as the explicit focus remains on delivery practices and organizational mindset, not automated testing itself.",
    "level": "Tertiary"
  },
  "Mentoring": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Mentoring",
    "calculated_at": "2025-05-16T20:21:28",
    "ai_confidence": 12.63,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.2,
    "ai_intent": 2.0,
    "ai_audience": 2.1,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content critiques the 'complexity' argument for not adopting continuous delivery using an Azure DevOps example. It focuses on organizational investment, technical debt, and quality—not on mentoring, coaching, skill-building, or leadership development. The content does not discuss mentoring roles, techniques, growth strategies, or emotional intelligence. While it generally targets IT professionals, there is no direct or conceptual alignment to the Mentoring category.",
    "reasoning_summary": "This piece addresses technical and organizational barriers to continuous delivery, not mentoring or professional growth. It lacks focus on coaching, feedback, or leadership development—key elements of the Mentoring category—so confidence is very low.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Engineering Excellence",
    "calculated_at": "2025-05-16T20:21:20",
    "ai_confidence": 86.3,
    "ai_mentions": 6.7,
    "ai_alignment": 9.2,
    "ai_depth": 8.9,
    "ai_intent": 8.6,
    "ai_audience": 8.0,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 86.0,
    "reasoning": "The content addresses continuous delivery (CD), technical debt, automation, investment in quality practices, and specific engineering behaviors, closely aligning with Engineering Excellence. While there are no explicit mentions of 'Engineering Excellence,' the discussion covers key category topics such as CI/CD, technical debt management, and quality assurance, and targets practitioners interested in best practices. It provides a significant real-world example (Azure DevOps), explores the root causes preventing adoption of best practices, and emphasizes required cultural investment. The content is focused and technical, with no filler or off-topic elements. No penalties were required; the content is recent and affirms, rather than undermines, engineering excellence principles.",
    "reasoning_summary": "This article directly tackles the myths preventing engineering excellence in CD, highlighting technical debt and quality investment as core solutions. Using a concrete case (Azure DevOps), it thoroughly aligns with the category by promoting best practices and targeting an engineering audience.",
    "level": "Primary"
  },
  "Definition of Workflow": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-23T22:06:11",
    "ai_confidence": 9.6,
    "ai_mentions": 0.0,
    "ai_alignment": 1.5,
    "ai_depth": 0.8,
    "ai_intent": 2.2,
    "ai_audience": 2.5,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content critically discusses misconceptions around software complexity in relation to continuous delivery, using Azure DevOps as an example. However, it never explicitly mentions or references the Definition of Workflow or its core concepts (explicit agreements, WIP limits, entry/exit policies, or Kanban/agile process transparency). The focus is on technical debt, investment in automation, and dev team ambition, not on dynamic work policies, flow visibility, or Kanban-aligned definitions. The audience (technology leaders/practitioners) is similar to that for Definition of Workflow, but the content lacks alignment, depth, and direct topical connection.",
    "reasoning_summary": "This content does not explicitly or implicitly discuss the Definition of Workflow. Its focus is on misconceptions around software complexity and barriers to continuous delivery, not on workflow definitions, policies, or Kanban principles relevant to the category.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-17T16:29:17",
    "ai_confidence": 3.25,
    "ai_mentions": 0.2,
    "ai_alignment": 0.9,
    "ai_depth": 0.8,
    "ai_intent": 0.5,
    "ai_audience": 0.4,
    "ai_signal": 0.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content discusses continuous delivery (CD) and organizational blockers such as technical debt, complexity, and investments in automation. There are no explicit mentions or even indirect references to OKRs, their foundational principles, theory, or practical frameworks. The discussion is focused purely on delivery enablement, using the Azure DevOps team as an example to illustrate investments required for CD. It does not address any of the core topics outlined for the Objective Key Results category (such as outcome-based measurement, alignment with 'Measure What Matters,' or integration into Agile/DevOps via OKRs), nor does it mention strategic intent, measurable results, or transparency/accountability through the OKR framework.",
    "reasoning_summary": "This content focuses entirely on organizational challenges related to continuous delivery and technical debt, with no mentions or conceptual connection to Objective Key Results or the OKR framework.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:03:19",
    "ai_confidence": 21.25,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.2,
    "ai_intent": 2.1,
    "ai_audience": 6.3,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content does not directly mention Product Developers or describe their role, accountability, or behaviors. Instead, it focuses on organizational barriers to continuous delivery, using an example about Microsoft's DevOps practices. While some concepts like quality and automation overlap with Product Developer responsibilities, the discussion is generic and does not address the Product Developer role or collective accountability. Thus, confidence is low for classification under this category.",
    "reasoning_summary": "The content addresses software delivery barriers and organizational behavior, but does not reference Product Developer roles, accountability, or related frameworks. Its primary focus is on DevOps culture change, not Product Developers.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:03:16",
    "ai_confidence": 7.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.7,
    "ai_depth": 2.1,
    "ai_intent": 1.7,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content discusses overcoming barriers to continuous delivery, emphasizing investment in technical debt reduction and quality practices using Microsoft Azure DevOps as an example. There is no mention of human-AI collaboration, complementary strengths of humans and AI, or principles of collective intelligence. The focus is exclusively on human practices, process improvement, and team willingness to invest in quality—not on emergent cognitive capabilities from human-AI partnerships or distributed cognition. The audience (likely practitioners in DevOps/Agile) overlaps with the category’s, but the content is off-purpose for Collective Intelligence.",
    "reasoning_summary": "The content addresses organizational and technical factors enabling continuous delivery, focusing on human process improvement with no references to human-AI collaboration or collective intelligence. It does not align with the intended category.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:44",
    "ai_confidence": 38.2,
    "ai_mentions": 1.1,
    "ai_alignment": 3.7,
    "ai_depth": 3.5,
    "ai_intent": 5.4,
    "ai_audience": 7.4,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content critiques the misconception that software complexity prevents continuous delivery, highlighting Microsoft Azure DevOps' success driven by investment in quality and automation. While mentioning DevOps and continuous delivery as practices, it does not reference Agentic Engineering nor focus on maximizing human or AI agency. There is alignment with the DevOps-Infused Craft key topic, but there's little discussion of systemic observability, developer agency, ethical AI integration, or agentic decision frameworks. The audience is relevant (technical/engineering leaders), and the focus is more on practical organizational change, not on the deliberate design for agency.",
    "reasoning_summary": "The content aligns somewhat with Agentic Engineering through its emphasis on DevOps practices and automation, but lacks direct discussion on agency, observability, or ethical AI. It's practical and targeted, yet only lightly touches on the core themes of the category.",
    "level": "Ignored"
  },
  "Agentic Software Delivery": {
    "resourceId": "T-sHn-OUIvR",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:13",
    "ai_confidence": 17.837,
    "ai_mentions": 0.2,
    "ai_alignment": 2.134,
    "ai_depth": 1.784,
    "ai_intent": 2.992,
    "ai_audience": 7.271,
    "ai_signal": 5.401,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "This content discusses continuous delivery, software complexity, technical debt, and quality practices, using Azure DevOps as an example. There is no mention or discussion of agentic concepts (autonomous AI agents, contextual intelligence, agency, or human-agent synergy). The article focuses on challenging the narrative around software complexity as a barrier to CD, highlighting investment in automation and process improvements, but does not reference or imply the deliberate, proactive integration of AI agents or agentic principles in software delivery. Its intent and audience are adjacent to the agentic category (practitioners interested in delivery improvement), but the topic is not aligned, depth is limited, and signal pertains mainly to general modern CI/CD best practices rather than agentic delivery.",
    "reasoning_summary": "The content addresses continuous delivery and quality practices but lacks any mention or conceptual alignment with Agentic Software Delivery. No discussion of autonomous agents, contextual intelligence, or agency is present, making fit very weak.",
    "level": "Ignored"
  }
}