{
  "Large Scale Agility": {
    "resourceId": "9EP_gF2nD19",
    "category": "Large Scale Agility",
    "calculated_at": "2025-08-07T09:25:37",
    "ai_confidence": 19.6,
    "ai_mentions": 0.5,
    "ai_alignment": 2.3,
    "ai_depth": 2.0,
    "ai_intent": 2.6,
    "ai_audience": 6.4,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content discusses branching strategies and promotes the use of feature flags over environment-based branches. However, the discourse is centered exclusively on team-level DevOps/Agile practices, not on scaling Agile across an enterprise. No frameworks (like SAFe/LeSS), cross-team coordination, leadership, or enterprise transformation aspects are mentioned. The audience appears to be development teams rather than executives or strategists driving large-scale agility. A minor alignment exists as streamlined branching can be a factor in scaling, but the treatment is neither explicit nor deep in large-scale context.",
    "reasoning_summary": "This content focuses on team-level code branching and delivery, lacking coverage of large scale Agile frameworks, cross-team scaling, or enterprise transformation, so only weakly fits the category.",
    "level": "Ignored"
  },
  "Tenet": {
    "resourceId": "9EP_gF2nD19",
    "category": "Tenet",
    "calculated_at": "2025-08-07T06:10:08",
    "ai_confidence": 53.25,
    "ai_mentions": 2.7,
    "ai_alignment": 6.8,
    "ai_depth": 6.1,
    "ai_intent": 6.9,
    "ai_audience": 8.1,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content critiques environment-based branching and advocates for practices like feature flags and progressive rollouts to improve delivery speed and feedback loops. This aligns with tenets such as 'flow efficiency', reducing silos, and feedback emphasis, matching core principles in DevOps/Agile. However, it does not label these as 'tenets', nor does it explicitly name them as guiding rules; the discussion revolves around recommended practices rather than stated doctrines. There is moderate conceptual alignment and reasonable depth as the guidance translates to actionable rules, but the language is less formal. Audience and signal-to-noise are high due to targeted, practical advice. No penalties apply.",
    "reasoning_summary": "Content recommends actionable practices (feature flags, fast feedback) aligned with Agile/DevOps tenets, though it doesn’t explicitly frame them as such. Fit is partial: core tenet themes are present but not formally named or detailed as doctrines.",
    "level": "Tertiary"
  },
  "Collaboration Tools": {
    "resourceId": "9EP_gF2nD19",
    "category": "Collaboration Tools",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 16.43,
    "ai_mentions": 0.4,
    "ai_alignment": 2.0,
    "ai_depth": 1.7,
    "ai_intent": 2.2,
    "ai_audience": 5.6,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content focuses on branching strategies and the use of feature flags for code delivery. While tangentially related to developer collaboration, it does not discuss or explicitly reference collaboration tools, their features, or integration with Agile practices. There are no mentions of tools like Slack, Jira, or their impact on communication or teamwork. The main audience (development teams) overlaps, but the subject matter is only loosely aligned with the category.",
    "reasoning_summary": "This content centers on branching and deployment practices, not dedicated collaboration tools or their role in Agile teams. While it addresses developer workflow, it lacks relevant discussion on tools designed to enhance team coordination or communication.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "resourceId": "9EP_gF2nD19",
    "category": "Revenue per Employee",
    "calculated_at": "2025-08-07T09:25:40",
    "ai_confidence": 13.8,
    "ai_mentions": 0.2,
    "ai_alignment": 2.0,
    "ai_depth": 1.8,
    "ai_intent": 2.3,
    "ai_audience": 6.0,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content discusses branching strategies and improving code delivery process but does not reference revenue per employee nor financial productivity measures. There is no direct or conceptual focus on workforce efficiency as related to the metric, nor any mention of financial outcomes, industry benchmarking, or empirical financial data. The primary audience may overlap with practitioners interested in efficiency, but this is strictly from a delivery/process perspective, not financial. No outdated or contradictory viewpoints were detected, so no penalty was applied.",
    "reasoning_summary": "The content does not mention Revenue per Employee and only loosely relates to workforce efficiency. It focuses on technical practices rather than empirical financial measures, so fit with the category is negligible.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "9EP_gF2nD19",
    "category": "Continuous Delivery",
    "calculated_at": "2025-08-07T07:06:16",
    "ai_confidence": 78.75,
    "ai_mentions": 4.7,
    "ai_alignment": 8.6,
    "ai_depth": 7.3,
    "ai_intent": 8.0,
    "ai_audience": 8.2,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 79.0,
    "reasoning": "The content critiques outdated branching strategies and promotes modern practices like feature flags and progressive rollouts for safer, faster releases—key topics in Continuous Delivery. While 'Continuous Delivery' is not named directly, the principles and practices discussed (reducing bottlenecks, enabling rapid delivery, using dynamic exposure controls) align strongly. The focus is primarily on how code delivery can be streamlined and the importance of tight feedback cycles, which matches Continuous Delivery concerns. However, the article is somewhat high-level and opinion-based, with less in-depth exploration of specific Continuous Delivery processes, automation, or tooling. The intended audience clearly matches practitioners interested in accelerating deployment and reducing errors.",
    "reasoning_summary": "The content strongly aligns with Continuous Delivery themes—focusing on rapid, safe code delivery and modern release practices—though it doesn't explicitly name the category. The fit is clear but not exhaustive.",
    "level": "Secondary"
  },
  "Scaling": {
    "resourceId": "9EP_gF2nD19",
    "category": "Scaling",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 21.65,
    "ai_mentions": 0.2,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.0,
    "ai_audience": 8.6,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on branching strategies within individual development teams and suggests feature flags and progressive rollouts as alternatives to environment-based branching. While these topics are relevant to development workflow efficiency, the discussion does not explicitly address scaling methodologies, frameworks, or multi-team coordination—the core of the 'Scaling' category. There is only a peripheral connection in that improved delivery practices can facilitate scaling, but the content lacks direct mentions, conceptual alignment, or sustained depth about scaling Agile across multiple teams or at enterprise level.",
    "reasoning_summary": "This content is well-targeted at development teams but doesn't discuss scaling frameworks or multi-team coordination. Its focus on branching and feature flags shows weak alignment with scaling—confidence is low for this category.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "9EP_gF2nD19",
    "category": "System Configuration",
    "calculated_at": "2025-08-07T07:06:16",
    "ai_confidence": 27.18,
    "ai_mentions": 1.1,
    "ai_alignment": 2.4,
    "ai_depth": 2.7,
    "ai_intent": 2.5,
    "ai_audience": 6.7,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on branching strategies, particularly why environment-based branching is suboptimal, and advocates for feature flags and progressive rollouts. While related to DevOps practices, it lacks explicit discussion on the setup, integration, and configuration of systems as described in 'System Configuration.' It neither delves into configuration management tools nor addresses best practices for configuring systems or automation outside of mentioning feature flags and rollouts. Its main purpose is to guide development workflow, not direct system configuration.",
    "reasoning_summary": "The content primarily discusses branching and deployment techniques, not system configuration. Intent and depth regarding system setup are minimal, making the fit weak and only tangentially related at best.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "9EP_gF2nD19",
    "category": "Definition of Done",
    "calculated_at": "2025-08-07T09:25:36",
    "ai_confidence": 5.4,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 1.0,
    "ai_audience": 2.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content is entirely focused on branching strategies and source control practices, with no explicit or implicit reference to the Definition of Done (DoD), its role, criteria, or value. No key DoD topics (shared understanding, quality, acceptance criteria, etc.) are present. Audience is technical, but material is irrelevant to DoD. There are no outdated or contradictory practices, so no penalties apply. The extremely low scores across all dimensions reflect topic misalignment.",
    "reasoning_summary": "Content does not address Definition of Done. Focus is on branching, feature flags, and deployment—not DoD criteria or concepts. No topical, thematic, or intent match with the category.",
    "level": "Ignored"
  },
  "Strategy": {
    "resourceId": "9EP_gF2nD19",
    "category": "Strategy",
    "calculated_at": "2025-08-07T09:25:41",
    "ai_confidence": 56.95,
    "ai_mentions": 2.6,
    "ai_alignment": 6.5,
    "ai_depth": 5.7,
    "ai_intent": 6.4,
    "ai_audience": 8.1,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content uses the term 'branching strategy', but focuses narrowly on code branching practices. It recommends feature flags/progressive rollouts as alternatives, emphasizing efficiency and risk reduction. However, 'strategy' here refers to specific techniques rather than organizational or product-level strategic alignment. There is little to no discussion tying branching choices back to overarching business goals, vision, or leadership. The target audience is engineering leaders/teams, somewhat matching the category. The signal is high, but the strategic depth is moderate since it doesn't address broader alignment or adaptability. Partial fit as a subset of technical (not organizational) strategy.",
    "reasoning_summary": "Partial fit: Discusses 'branching strategy', but mainly at a technical operations level, not organizational or product strategy. Lacks discussion of broader alignment with business objectives or high-level strategic planning.",
    "level": "Tertiary"
  },
  "Customer Focus": {
    "resourceId": "9EP_gF2nD19",
    "category": "Customer Focus",
    "calculated_at": "2025-08-07T11:24:03",
    "ai_confidence": 47.35,
    "ai_mentions": 1.2,
    "ai_alignment": 6.8,
    "ai_depth": 5.3,
    "ai_intent": 6.2,
    "ai_audience": 8.3,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content's main focus is on engineering practices for code branching and deployment. While it argues against environment-based branching because it 'slows feedback loops' and delays 'value' reaching customers, there is only moderate conceptual alignment with Customer Focus. The discussion does not directly address defining or measuring customer outcomes, establishing feedback loops with real users, or prioritizing based on validated customer needs. The context is practitioner-focused, relevant for delivery teams, and frames its recommendations with indirect references to improving value delivery, but lacks depth in actual customer-centric practices, feedback, or measurement. There are no explicit mentions of customer impact beyond abstract 'value.' The emphasis is more on optimizing delivery flow than on concrete customer outcomes; fit is partial.",
    "reasoning_summary": "Mainly discusses branching and code delivery tactics, with only indirect links to customer value. Customer Focus is implied via faster feedback and avoiding silos, but not explored in depth. Partial, surface-level fit with the category.",
    "level": "Tertiary"
  },
  "Technical Debt": {
    "resourceId": "9EP_gF2nD19",
    "category": "Technical Debt",
    "calculated_at": "2025-08-07T11:24:03",
    "ai_confidence": 42.275,
    "ai_mentions": 1.8,
    "ai_alignment": 4.2,
    "ai_depth": 4.6,
    "ai_intent": 2.9,
    "ai_audience": 6.3,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content focuses on branching strategies, critiquing environment-based branching and advocating for techniques like feature flags. While these practices can affect codebase quality and delivery speed, technical debt is not directly mentioned or substantively discussed. Main themes center on branching complexity and delivery bottlenecks rather than accumulation or management of suboptimal code/design. Thus, conceptual alignment is partial; the strategies discussed are relevant to sustainable engineering, but technical debt is only implied as a potential consequence, not a main subject. No penalties applied, as no outdated practices or negative framing detected.",
    "reasoning_summary": "Content is about branching models and deployment practices, not directly about technical debt. It only tangentially touches on maintainability, so fit with the Technical Debt category is weak and mostly indirect.",
    "level": "Tertiary"
  },
  "Agentic Agility": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agentic Agility",
    "calculated_at": "2025-05-16T20:20:18",
    "ai_confidence": 19.72,
    "ai_mentions": 0.6,
    "ai_alignment": 2.1,
    "ai_depth": 2.6,
    "ai_intent": 2.4,
    "ai_audience": 6.2,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content focuses on code branching strategies and warns against environment-based branching, promoting feature flags and progressive rollouts. While these are relevant to Agile delivery, the content does not directly reference agency, agentic agility, or related adaptive, intentional actions. There are no discussions on autonomy, accountability, or the mechanisms that enable agentic agility in teams. The content is aimed at technical practitioners, which aligns moderately with the audience, and it maintains good focus and clarity. However, main ideas and depth do not align with the core definition of Agentic Agility, resulting in a low confidence score.",
    "reasoning_summary": "While the content is useful for development teams aiming for agility, it doesn't explicitly or conceptually engage with agentic agility, agency, or adaptive intention. The focus remains on technical practices, so it only lightly aligns with the category.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Backlog",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 8.74,
    "ai_mentions": 0.1,
    "ai_alignment": 0.3,
    "ai_depth": 0.25,
    "ai_intent": 0.3,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses entirely on branching strategies, feature flags, and code deployment—not on the Product Backlog, its purpose, structure, management, or related Agile topics. No direct mentions of the Product Backlog, user stories, backlog refinement, or Product Owner responsibilities. Target audience may overlap with those interested in backlog management (development teams), but content stays on version control and release practices, making it off-topic for this category.",
    "reasoning_summary": "This content discusses code branching strategies, not Product Backlog concepts. It lacks direct relevance to backlog management, Agile practices, or related roles, resulting in a very low category fit.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "9EP_gF2nD19",
    "category": "Personal",
    "calculated_at": "2025-05-16T20:20:20",
    "ai_confidence": 23.59,
    "ai_mentions": 1.6,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.7,
    "ai_audience": 7.3,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is an opinionated technical discussion about branching strategy, feature flags, and deployment, mainly within a DevOps or software delivery context. While it uses first-person phrasing and invites reader reflection, it does not provide personal anecdotes, detailed experiences, or individual reflections related to broader Agile philosophies. It lacks depth and alignment with the Personal category’s focus; no subjective personal story is shared—rather, it's a critique/advice piece targeting practitioners. No mention of personal transformation, challenges, or insights from direct experience.",
    "reasoning_summary": "This piece is a technical opinion on branching practices, offering advice but lacking personal anecdotes or reflective insights typical of the Personal category. While it uses first-person language, it remains generic and not genuinely experiential, so alignment and depth are low.",
    "level": "Ignored"
  },
  "Method": {
    "resourceId": "9EP_gF2nD19",
    "category": "Method",
    "calculated_at": "2025-08-07T07:06:16",
    "ai_confidence": 56.004,
    "ai_mentions": 2.2,
    "ai_alignment": 6.6,
    "ai_depth": 6.8,
    "ai_intent": 5.7,
    "ai_audience": 9.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content critiques environment-based branching and recommends using feature flags and progressive rollouts, referencing procedural practices in code delivery. However, it frames the topic more as a DevOps practice or technical workflow than as a structured, step-by-step method. It lacks explicit mention of formal methods (such as 'Continuous Delivery Method'), omits in-depth procedural descriptions, and presents conceptual alignment to 'Method' through suggested approaches rather than structured methodology. The depth is moderate, focused on rationale rather than stepwise methods. Audience fit and signal are high (speaks to practitioners about concrete workflow decisions), but the overall framing falls short of making this a strong 'Method' exemplar—it's more about recommending best practices or techniques than formalized methods.",
    "reasoning_summary": "Content discusses procedural approaches to branching but lacks structured, step-by-step method focus. Good alignment to technical audience and practical delivery, but not a strong exemplar of 'Method' by definition. Partial fit.",
    "level": "Tertiary"
  },
  "Enterprise Agility": {
    "resourceId": "9EP_gF2nD19",
    "category": "Enterprise Agility",
    "calculated_at": "2025-08-07T07:06:16",
    "ai_confidence": 34.375,
    "ai_mentions": 0.2,
    "ai_alignment": 4.4,
    "ai_depth": 3.6,
    "ai_intent": 4.8,
    "ai_audience": 6.1,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses primarily on technical branching strategies and deployment practices for development teams, advocating for feature flags and progressive rollouts. While these are relevant to modern DevOps (a potential component of enterprise agility), the scope is limited to team-level tooling, not organisation-wide transformation. No direct mention of enterprise agility, scaling frameworks, leadership, or change management. Audience is more practitioner/engineer than executive or strategist. The discussion does indirectly align with some agility concepts (faster feedback, less silos) but lacks explicit organisational context or cultural/structural considerations.",
    "reasoning_summary": "Content addresses technical deployment improvements at the team level, not organisation-wide agility. No direct or deep alignment with enterprise agility’s scope, frameworks, or transformation themes—fit is partial and mostly tangential.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-08-07T11:24:03",
    "ai_confidence": 15.5,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 1.8,
    "ai_intent": 2.0,
    "ai_audience": 5.2,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content focuses principally on branching strategies, criticizing environment-based branching and advocating for feature flags and progressive rollouts for streamlined code delivery. There is no mention or substantive discussion of Hypothesis Driven Development, nor does it reference experimentation, validated learning, hypothesis formulation, or data-driven decision-making. The main theme is deployment workflow optimization, with only tangential relevance to practices aligned with Hypothesis Driven Development (e.g., progressive rollouts could be used for experimentation, but that intent is not present in the actual discussion). Audience and signal scores are higher as it's targeted at development practitioners, but category fit is weak.",
    "reasoning_summary": "Content centers on branching and deployment strategies, not on Hypothesis Driven Development. No evidence of hypothesis formulation or experimentation; fit with the assigned category is minimal and largely incidental.",
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "9EP_gF2nD19",
    "category": "Discipline",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 25.07,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.5,
    "ai_intent": 2.8,
    "ai_audience": 6.4,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on practical strategies for code branching, advocating for feature flags and rollouts over traditional environment-based branching. While it touches lightly on themes such as feedback loops and modern delivery practices, it lacks explicit discussion of discipline as a structured field, systemic principles, or codified methodologies. There are no direct mentions of 'discipline' or its characteristics, nor does the piece explore the systemic maturation or evolution of such fields. The intended audience (development teams) aligns partially, but the analysis stops at the technique/process level without situating the discussion in the broader context of agile, DevOps, or Lean as disciplines. Relevance to 'Discipline' is therefore tangential and incomplete.",
    "reasoning_summary": "This content offers tactical advice on branching and deployment strategies for developers but does not engage substantively with the principles, methodologies, or systemic evolution that define the Discipline category. Its relevance is peripheral at best.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 16.45,
    "ai_mentions": 0.7,
    "ai_alignment": 2.2,
    "ai_depth": 2.0,
    "ai_intent": 1.5,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content focuses on branching strategies (environment-based vs. feature-based) and mentions practices like feature flags and progressive rollouts for software delivery. However, there is no explicit mention of Agile Planning Tools, and the discussion centers on branching and deployment—not backlog management, sprint planning, or Agile tool usage. While some Agile concepts (feedback loops, deployment velocity) are indirectly referenced, the content does not provide information about tools or planning practices fundamental to Agile frameworks. The target audience overlaps with Agile practitioners, but topic alignment, intent, and depth are weak for this category.",
    "reasoning_summary": "The content discusses code branching and deployment strategies, not Agile Planning Tools. While the audience is similar, the focus is on technical practices rather than Agile planning, resulting in low alignment with the category.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "9EP_gF2nD19",
    "category": "Coaching",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 12.1,
    "ai_mentions": 0.3,
    "ai_alignment": 1.5,
    "ai_depth": 1.2,
    "ai_intent": 2.7,
    "ai_audience": 4.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content does not explicitly mention coaching or related concepts. Its focus is on branching strategies, highlighting technical best practices for deployment. No references are made to facilitation, guidance, team development, or coaching models. While it indirectly encourages team re-evaluation, it lacks coaching intent, audience focus, or the collaborative, supportive tone central to the Coaching category.",
    "reasoning_summary": "This content mainly discusses technical version control strategies, not coaching. It lacks direct mentions and the collaborative, developmental focus required for the Coaching category, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "resourceId": "9EP_gF2nD19",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 38.45,
    "ai_mentions": 0.4,
    "ai_alignment": 4.2,
    "ai_depth": 3.7,
    "ai_intent": 4.0,
    "ai_audience": 5.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses primarily on branching strategies and promotes feature flags and progressive rollout. While these topics relate to modern software delivery practices and may be implemented within an IDP, the post neither explicitly mentions Internal Developer Platforms nor deeply explores the concept, its architecture, or best practices. The intent is to guide development teams on better branching, not to discuss IDPs directly. The audience is technical but not IDP-specific. Only tenuous conceptual alignment with the category exists.",
    "reasoning_summary": "While the article discusses agile deployment techniques like feature flags and workflows that could exist in an IDP, it doesn’t discuss Internal Developer Platforms directly or in depth, leading to low confidence in categorizing it under IDP.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "resourceId": "9EP_gF2nD19",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-16T20:20:17",
    "ai_confidence": 52.97,
    "ai_mentions": 1.6,
    "ai_alignment": 6.9,
    "ai_depth": 6.6,
    "ai_intent": 6.7,
    "ai_audience": 7.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content critiques conventional branching strategies (environment-based) citing negative impacts such as siloing and reduced feedback—organizational effects linked to sociotechnical systems. It alludes to the relationship between team practices and technical processes, and encourages rethinking deployment for better flow. However, it doesn't mention sociotechnical systems directly, nor does it deeply analyze the interaction between organizational structures and technical practices. The focus is pragmatic advice for development teams, giving moderate conceptual fit but lacking explicit depth, breadth, or terminology directly from the field. No outdated practices or negative tone warranting penalties.",
    "reasoning_summary": "This piece emphasizes the effect of branching strategies on team effectiveness and delivery feedback loops, which moderately aligns with Sociotechnical Systems themes. While it discusses interplay between process and team outcomes, it doesn’t dive deep or use explicit sociotechnical language.",
    "level": "Tertiary"
  },
  "Continuous Improvement": {
    "resourceId": "9EP_gF2nD19",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 45.4,
    "ai_mentions": 1.6,
    "ai_alignment": 5.9,
    "ai_depth": 4.8,
    "ai_intent": 6.1,
    "ai_audience": 7.1,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content focuses on development branching strategies, specifically critiquing environment-based branching and recommending feature flags and progressive rollouts for faster, safer delivery. It touches on feedback loops and the need to rethink legacy practices, which aligns tangentially with continuous improvement and business agility themes. However, it does not directly mention continuous improvement, nor does it deeply explore its methodologies, frameworks, or philosophies. The main focus is technical process optimization, not the ongoing empirical, cultural, or strategic mindset characterizing continuous improvement. Thus, while some alignment exists—particularly regarding process adaptation for better feedback—the piece lacks explicit and thorough treatment of continuous improvement concepts.",
    "reasoning_summary": "While the article promotes better practices and faster feedback in development, it only loosely aligns with Continuous Improvement principles and never mentions them directly, focusing more on technical process change than on systemic, ongoing improvement.",
    "level": "Tertiary"
  },
  "Transparency": {
    "resourceId": "9EP_gF2nD19",
    "category": "Transparency",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 27.17,
    "ai_mentions": 0.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.2,
    "ai_intent": 3.6,
    "ai_audience": 7.8,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on branching strategies, advocating for feature flags and progressive rollouts over environment-based branches. Direct mention of 'transparency' is absent. Conceptually, it aligns only slightly—suggesting practices that can enhance code visibility, but transparency itself is not discussed explicitly or in depth. The main intent is technical optimization, not fostering transparency. The target audience (developers) overlaps with the transparency category, and the signal is strong, but relevance to transparency remains minor, yielding a low confidence score.",
    "reasoning_summary": "While the advice may incidentally support transparency through simplification and dynamic code exposure, transparency as a concept is not a direct or in-depth focus. The audience and signal are appropriate, but the match to the transparency category is weak and indirect.",
    "level": "Ignored"
  },
  "Common Goals": {
    "resourceId": "9EP_gF2nD19",
    "category": "Common Goals",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 18.05,
    "ai_mentions": 0.6,
    "ai_alignment": 1.2,
    "ai_depth": 1.6,
    "ai_intent": 2.4,
    "ai_audience": 4.0,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on technical branching strategies, specifically criticizing environment-based branching and advocating for feature flags and progressive rollouts. There is no mention of 'Common Goals' or allied concepts (alignment, OKRs, team objectives). Themes center around workflow efficiency rather than shared goals or organizational alignment. Thus, the fit is minimal, and confidence is low.",
    "reasoning_summary": "This content addresses branching strategies, not the concept of Common Goals. There is no discussion of shared objectives, alignment, or Agile/DevOps goal-setting frameworks, making it a poor fit for the category.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "resourceId": "9EP_gF2nD19",
    "category": "Company as a Product",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 18.473,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.25,
    "ai_intent": 2.7,
    "ai_audience": 5.3,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses on code branching strategies and delivery practices for software development teams, critiquing environment-based branching and advocating for techniques like feature flags and progressive rollout. There is no direct mention or exploration of 'Company as a Product' concepts, nor is there discussion of organizational design, outcome measurement, or the broader strategic mindset shift CaaP entails. Alignment and depth are low—the discussion is narrowly on technical workflow, not whole-organization evolution. Some minor overlap exists in intent (improving customer value delivery), but this is indirect and doesn't rise to CaaP scope. Audience is moderately aligned, targeting practitioners, but not with a company-wide lens.",
    "reasoning_summary": "The content addresses branching and deployment tactics for dev teams, not the holistic, organization-wide transformation implied by 'Company as a Product.' It’s practical and relevant to software delivery, but only tangentially touches on CaaP themes, so confidence is very low.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "9EP_gF2nD19",
    "category": "Scrum Master",
    "calculated_at": "2025-08-07T11:24:02",
    "ai_confidence": 7.4,
    "ai_mentions": 0.1,
    "ai_alignment": 1.2,
    "ai_depth": 0.9,
    "ai_intent": 1.5,
    "ai_audience": 1.4,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses on branching strategies, feature flags, and code delivery best practices—topics pertinent to development and DevOps. There is no explicit mention or substantial thematic tie-in to the Scrum Master accountability, its responsibilities, or its systemic impact. The depth and intent are purely technical, targeting developers or technical leads, not the Scrum Master role. The closest adjacency is in discussing practices that might affect delivery flow, but this does not sufficiently justify classification under Scrum Master per the strict category definition.",
    "reasoning_summary": "Content is technical and targets dev teams, not Scrum Master accountability. No explicit or conceptual fit with Scrum Master responsibilities or impact. Not aligned with category; only very indirect relevance at best.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Discovery",
    "calculated_at": "2025-09-05T03:28:55",
    "ai_confidence": 11.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.8,
    "ai_intent": 1.8,
    "ai_audience": 2.5,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses on code branching strategies and deployment practices, critiquing environment-based branching and promoting feature flags and progressive rollouts for operational efficiency. There is no direct or indirect discussion of identifying customer needs, feature prioritization, or validating product ideas. While it touches on enabling faster value delivery, it does so from a technical implementation perspective, not from a product discovery or user requirement angle. The primary audience is development/devops teams, not product discovery practitioners. Thus, the fit is tangential at best.",
    "reasoning_summary": "Content is focused on branching strategies and deployment, not on product discovery or customer needs. There is no substantial discussion of discovery methodologies or practices. Fit to the category is minimal and mostly off-topic.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "resourceId": "9EP_gF2nD19",
    "category": "Continuous Integration",
    "calculated_at": "2025-05-16T20:20:20",
    "ai_confidence": 61.35,
    "ai_mentions": 2.4,
    "ai_alignment": 6.8,
    "ai_depth": 6.7,
    "ai_intent": 7.2,
    "ai_audience": 7.9,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content focuses on branching strategies and the drawbacks of environment-based branching, advocating for practices like feature flags and progressive rollouts. While these topics are highly relevant to modern software delivery, and tangentially connected to CI (as streamlined, trunk-based branching and rapid feedback loops are CI principles), neither 'Continuous Integration' nor core CI-specific practices are directly discussed or explicitly mentioned. The depth addresses issues and best practices contiguous with CI, but stays at the cultural/process layer rather than exploring CI in naming, tools, or direct methodological guidance. The audience and purpose are suitably technical and practitioner-focused, which aligns with CI discussions. However, the signal-to-noise is somewhat diluted by the focus on branching and feature flagging as independent adoption strategies. No penalties are applied as the recommendations are contemporary and the tone is constructive.",
    "reasoning_summary": "This content offers actionable advice on branching strategies, aligning with some CI principles like rapid feedback. However, it lacks direct CI references and mainly explores branching and feature flagging, which limits its full alignment with the Continuous Integration category.",
    "level": "Secondary"
  },
  "Metrics and Learning": {
    "resourceId": "9EP_gF2nD19",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 53.6,
    "ai_mentions": 1.1,
    "ai_alignment": 5.3,
    "ai_depth": 4.7,
    "ai_intent": 5.9,
    "ai_audience": 6.2,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content addresses branching strategies, highlighting the negative impact of environment-based branching on feedback loops and delivery speed—suggesting feature flags and rollouts as alternatives. Direct explicit references to metrics, data analysis, or learning cycles are absent; however, concepts like silos, feedback loops, and deployment processes intersect with continuous improvement and learning, foundational in DevOps. Still, the discussion is more about workflow strategy than direct metric utilization or data-driven improvement. No penalties apply, as the tone and content are current and not contradicting the category.",
    "reasoning_summary": "While the article references feedback loops and encourages improvement, it centers on branching strategies rather than metrics or learning methods. The fit with the category is moderate, as the content addresses principles of improvement but doesn't directly focus on metrics or data-driven learning.",
    "level": "Tertiary"
  },
  "One Engineering System": {
    "resourceId": "9EP_gF2nD19",
    "category": "One Engineering System",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 32.54,
    "ai_mentions": 0.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.3,
    "ai_intent": 3.9,
    "ai_audience": 6.2,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content does not mention 'One Engineering System' (1ES) or discuss its principles or framework. While it addresses standardization in branching strategies, its focus is narrow—critiquing environment-based branching and advocating for feature flags and progressive rollout. There is conceptual overlap with process improvement and unified practices, which aligns at the periphery of 1ES, but it never engages directly with 1ES methodologies, integration across teams, or system-wide unification. The depth is limited to a critique and alternative recommendation, with no exploration of 1ES concepts or impact on organization-wide engineering. The target audience—development teams—is somewhat aligned, and content is mostly relevant, but overall the fit is incidental, not intentional.",
    "reasoning_summary": "This content focuses on better branching strategies and code delivery practices, tangentially related to engineering standardization, but it does not mention or substantially discuss One Engineering System principles, resulting in a low confidence score for the category.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "resourceId": "9EP_gF2nD19",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 69.37,
    "ai_mentions": 4.3,
    "ai_alignment": 7.7,
    "ai_depth": 7.9,
    "ai_intent": 7.1,
    "ai_audience": 7.8,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 69.0,
    "reasoning": "The content focuses on branching strategies for dev teams, implicitly addressing collaboration by highlighting the pitfalls of siloed workflows and advocating shared code exposure. It aligns well with team-oriented practices in Agile/DevOps, discussing impacts like feedback loops and shared delivery, but stops short of deeply exploring communication or dynamics, focusing more on process optimization than explicit team collaboration practices.",
    "reasoning_summary": "This content addresses process decisions that affect team collaboration, especially in Agile/DevOps settings. While it implicitly supports shared ownership and improved workflow, the main focus is on technical outcomes rather than directly exploring collaborative dynamics, making it relevant but not a perfect fit for the pure Team Collaboration category.",
    "level": "Secondary"
  },
  "Artificial Intelligence": {
    "resourceId": "9EP_gF2nD19",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 15.35,
    "ai_mentions": 0.1,
    "ai_alignment": 1.5,
    "ai_depth": 1.7,
    "ai_intent": 1.9,
    "ai_audience": 3.2,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content focuses exclusively on branching strategies and argues for the use of feature flags and progressive rollouts to enhance code delivery, with no explicit mention of artificial intelligence. Its main ideas and recommendations are aligned with software development best practices, but they do not address the role, application, or impact of AI in Agile, DevOps, or software development processes. There are no implicit or explicit connections to the category definition. The audience is technical—developers or DevOps engineers—which matches part of the target audience, but only in an incidental way, as the material is off-topic for AI. The signal-to-noise ratio is moderate, with all content relevant to branching but not to AI.",
    "reasoning_summary": "The content thoroughly discusses modern branching strategies and deployment practices but makes no reference to AI or its application in Agile, DevOps, or software development. As such, it does not fit the Artificial Intelligence category.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "9EP_gF2nD19",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 83.3,
    "ai_mentions": 7.8,
    "ai_alignment": 9.6,
    "ai_depth": 8.9,
    "ai_intent": 9.0,
    "ai_audience": 8.0,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 83.0,
    "reasoning": "The content directly critiques traditional environment-based branching and recommends modern strategies like feature flags and progressive rollouts. It explicitly discusses branching practices, aligning tightly with best practices in modern source control. While it doesn't mention specific version control tools by name, its focus is thoroughly on version control strategies, offering practical, actionable advice for development teams. The depth is strong, as it details why old methods are problematic and what should replace them. Audience focus is on practitioners (development teams). There is minimal off-topic content; all discussion is relevant to modern source control. No penalties were required, as the advice is current and supportive of the category's framing.",
    "reasoning_summary": "This content offers a nuanced critique of outdated branching methods and encourages contemporary source control practices, notably feature flags and progressive rollouts. It directly targets developers and teams seeking to modernize workflows, squarely aligning with the Modern Source Control category.",
    "level": "Primary"
  },
  "Team Performance": {
    "resourceId": "9EP_gF2nD19",
    "category": "Team Performance",
    "calculated_at": "2025-05-16T20:20:20",
    "ai_confidence": 85.1,
    "ai_mentions": 5.7,
    "ai_alignment": 9.2,
    "ai_depth": 8.6,
    "ai_intent": 9.4,
    "ai_audience": 8.1,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 85.0,
    "reasoning": "The content is highly aligned with 'Team Performance' as it critiques a common development practice—environment-based branching—that directly affects team delivery efficiency. It emphasizes delivery bottlenecks, feedback loops, and modern alternatives (feature flags, progressive rollouts) that improve throughput, system simplicity, and outcome speed. While the term 'team performance' is not directly mentioned, the discussion centers on systemic, team-level delivery capabilities and common constraints, thoroughly exploring why certain approaches either hinder or support predictable, effective delivery. The main audience is practitioners (developers, leads) interested in optimizing workflows. The content is focused, on-topic, and avoids individual evaluation or purely motivational framing.",
    "reasoning_summary": "This content examines how branching strategies directly impact a team's ability to deliver effectively, recommending modern practices for better throughput. While not naming 'team performance,' it provides concrete, actionable guidance clearly aligned with delivery-focused team outcomes.",
    "level": "Primary"
  },
  "First Principal": {
    "resourceId": "9EP_gF2nD19",
    "category": "First Principal",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 21.65,
    "ai_mentions": 0.25,
    "ai_alignment": 2.6,
    "ai_depth": 2.35,
    "ai_intent": 2.75,
    "ai_audience": 7.2,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content critiques environment-based branching and promotes feature flags, focusing on delivery efficiency and modern practices. However, it does not identify, explain, or apply first principles, nor does it directly reference first principles or foundational immutable constraints. The discussion is advisory, context-dependent, and targeted at practitioner teams, with strong signal-to-noise but low conceptual and intent fit for the First Principal category.",
    "reasoning_summary": "While practical and relevant for development teams, the content doesn't address or explore first principles—it's focused on tooling choices and process improvement, not foundational, immutable constraints.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "9EP_gF2nD19",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 20.9,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.7,
    "ai_intent": 2.4,
    "ai_audience": 5.0,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses exclusively on code branching strategies, environmental silos, and the advantages of feature flags. While themes such as 'breaking down silos' and 'team structure' superficially relate to Agile collaboration, there are no explicit or in-depth discussions of cross-functional teams—their makeup, roles, or practices. The audience (developers/teams) is partially aligned, but the intent, alignment, and depth are not sufficient for this category.",
    "reasoning_summary": "This content centers on code branching strategies and modern deployment practices. It doesn't discuss cross-functional teams directly or explore their structure, purpose, or benefits, so its fit with the Cross Functional Teams category is very weak.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "resourceId": "9EP_gF2nD19",
    "category": "Backlog Refinement",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 7.1,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.3,
    "ai_intent": 0.3,
    "ai_audience": 3.3,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content primarily discusses code branching strategies and argues against environment-based branching in favor of feature flags and progressive rollouts. It does not mention 'backlog refinement' or related topics, nor does it discuss Agile practices around backlog management, product owner responsibilities, or sprint planning. The intent and main ideas focus on code deployment, not backlog refinement. Some minimal audience overlap with Agile practitioners exists, but the subject is not aligned with backlog refinement.",
    "reasoning_summary": "This content focuses on code branching and deployment strategies, not backlog refinement or related Agile practices. It lacks direct or conceptual relevance to the backlog refinement category, with only superficial audience overlap. Confidence is extremely low.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "9EP_gF2nD19",
    "category": "Miscellaneous",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 25.4,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.8,
    "ai_audience": 8.2,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content discusses branching strategies, feature flags, and progressive rollouts for code delivery. It analyzes drawbacks of environment-based branching versus modern alternatives. However, it never directly engages Miscellaneous topics, nor does it stray from technical, actionable advice. The substance closely relates to DevOps best practices and continuous delivery—a recognized domain, not a catch-all or off-framework exploration. This places it out-of-scope for Miscellaneous, with only tangential misalignment (perhaps, if stretching, on general development processes). No penalties warranted, as the tone and recency are appropriate.",
    "reasoning_summary": "This content is technical and solution-focused, aligning with DevOps practices—thus it doesn't fit the 'Miscellaneous' category, which is for content outside specific frameworks or actionable advice.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "resourceId": "9EP_gF2nD19",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 81.2,
    "ai_mentions": 4.2,
    "ai_alignment": 9.6,
    "ai_depth": 7.7,
    "ai_intent": 8.6,
    "ai_audience": 7.8,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content directly addresses key aspects of software engineering excellence by critiquing environment-based branching and advocating for modern technical practices (feature flags, progressive rollout). Alignment is strong; the audience is clearly technical, with practical suggestions relevant to engineering teams. Depth is good, with rationale and consequences explained, though it's more advisory than deeply analytical. No penalties, as the content is current and complementary.",
    "reasoning_summary": "This content strongly fits Technical Mastery by offering clear, current guidance on better branching strategies. It targets engineers, promotes advanced practices like feature flags, and remains tightly focused on code quality and delivery. It's highly relevant and practical for technical audiences.",
    "level": "Primary"
  },
  "Scrum Values": {
    "resourceId": "9EP_gF2nD19",
    "category": "Scrum Values",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 7.34,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 0.6,
    "ai_intent": 1.2,
    "ai_audience": 2.1,
    "ai_signal": 1.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content exclusively discusses technical branching strategies, feature flags, code delivery, and deployment practices. There are no explicit references or in-depth exploration of Scrum Values such as commitment, focus, openness, respect, or courage. The main intent is to inform development teams about modern deployment techniques. While the audience might overlap with Scrum practitioners, the focus and subject matter do not align with the principles or values central to Scrum, resulting in extremely low scores for mentions, alignment, depth, and intent. No outdated or contradictory content is detected, so no penalties are applied.",
    "reasoning_summary": "This content is focused on technical branching and deployment, not on Scrum Values. It lacks both explicit and implicit discussion of Scrum principles, so confidence in its fit within the Scrum Values category is extremely low.",
    "level": "Ignored"
  },
  "Agile Product Operating Model": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 36.78,
    "ai_mentions": 0.44,
    "ai_alignment": 4.12,
    "ai_depth": 3.95,
    "ai_intent": 4.16,
    "ai_audience": 5.06,
    "ai_signal": 5.33,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses primarily on branching strategies, environment-based development, and the use of feature flags and progressive rollout—all practices relevant to agile software engineering. However, explicit discussion of the Agile Product Operating Model (APOM) is absent: it never uses the term, nor does it engage substantively with product-centric frameworks, operational structure, or the core principles of APOM as defined. The alignment is partial, as adopting feature flags can support continuous delivery—a tenet of APOM—but the connection is implicit, not explicit or thorough. The depth centers around engineering workflow tactics, not broader topics like business/technology roadmaps, EBM, or organizational shifts. Audience alignment is moderate since development teams are a secondary audience for APOM. No criticisms or outdated practices are present.",
    "reasoning_summary": "While the article presents modern dev practices like feature flags and progressive rollouts, it stays focused on code workflows—never explicitly referencing Agile Product Operating Model principles, structure, or terminology. It's somewhat adjacent, supporting agility, but doesn't demonstrate direct or deep APOM alignment.",
    "level": "Ignored"
  },
  "Shift Left Strategy": {
    "resourceId": "9EP_gF2nD19",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-05-16T20:21:22",
    "ai_confidence": 36.8,
    "ai_mentions": 0.2,
    "ai_alignment": 4.1,
    "ai_depth": 3.8,
    "ai_intent": 3.5,
    "ai_audience": 7.1,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content doesn't explicitly mention 'Shift Left Strategy' or related terms. The main focus is on branching strategies and the use of feature flags for better deployments, touching on feedback loops and faster delivery. However, it doesn't deeply discuss integrating testing, security, or compliance earlier in the SDLC. The intent is to advocate for modern branching and deployment techniques, which can be compatible with shift-left thinking, but the explicit alignment is incidental rather than direct. The audience is relevant (development teams), and the signal is reasonably focused but not on shift-left specifically.",
    "reasoning_summary": "This content focuses on modern branching and deployment practices, which can support shift-left objectives, but it does not directly address core shift-left principles like early testing or security. It targets development teams with practical advice, making its alignment with 'Shift Left Strategy' indirect and moderate at best.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "9EP_gF2nD19",
    "category": "Working Software",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 35.04,
    "ai_mentions": 1.1,
    "ai_alignment": 3.7,
    "ai_depth": 3.3,
    "ai_intent": 2.8,
    "ai_audience": 8.1,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The content focuses on team branching strategies, specifically critiquing environment-based branching and advocating for practices like feature flags and progressive rollouts to streamline code delivery. While these topics relate indirectly to delivering working software, at no point does the content explicitly discuss the concept of working software as an Agile artifact—instead, it speaks to development logistics. The main intent is to advise on workflow efficiency rather than describe or measure working software output. Alignment, depth, and intent are moderate at best since the ties to 'working software' are implicit and not the content's central theme. There is little direct mention of the category, and no detailed coverage of working software’s definition, measurement, or value delivery. The target audience (development teams) overlaps, raising the audience score, but overall relevance is tangential.",
    "reasoning_summary": "This content analyzes branching strategies, linking them to delivery speed but not directly to working software as an Agile artifact. It targets practitioners but barely mentions or truly explores 'working software,' so confidence that it fits the category is low.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 40.45,
    "ai_mentions": 1.6,
    "ai_alignment": 4.8,
    "ai_depth": 3.5,
    "ai_intent": 4.1,
    "ai_audience": 7.1,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content focuses on optimizing software development workflows by critiquing environment-based branching and suggesting alternatives like feature flags and progressive rollouts. While these practices align with modern software delivery, the discussion is technical, centered on code delivery rather than strategic organizational transformation. There is no direct mention or in-depth exploration of digital transformation, its frameworks, cultural impact, or business outcomes. Content provides practical advice for practitioners, mainly targeting development teams rather than digital strategists or executives tasked with digital transformation leadership.",
    "reasoning_summary": "This article offers useful insights on modern branching strategies but keeps the discussion narrowly on technical practices, not broader digital transformation. While indirectly relevant to how organizations can modernize, it lacks strategic scope or explicit reference to digital transformation as defined.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "resourceId": "9EP_gF2nD19",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 38.35,
    "ai_mentions": 1.2,
    "ai_alignment": 4.9,
    "ai_depth": 5.1,
    "ai_intent": 3.2,
    "ai_audience": 6.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content critiques environment-based branching and promotes modern alternatives like feature flags and progressive rollouts. While it does reference shifts from past to present practices, it does not explicitly analyze trends, provide supporting data, or discuss broader implications for Agile, DevOps, or business agility. There are indirect mentions of a shift in practice, but little depth in exploring patterns, metrics, or impact. The primary audience is development teams, which partially aligns, but the piece lacks thorough trend analysis, case studies, or data-driven insights required for full conceptual and purpose alignment.",
    "reasoning_summary": "This piece highlights evolving code delivery approaches but doesn't deeply analyze trends or provide data-driven insights. Its focus on branching strategies and feature flags is relevant, yet it lacks the depth and explicit trend analysis to fully fit the 'Trend Analysis' category.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "resourceId": "9EP_gF2nD19",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-16T20:20:18",
    "ai_confidence": 10.85,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.5,
    "ai_audience": 3.2,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content is centered on technical software engineering practices—specifically branching strategies and code deployment improvements in development teams. There is no mention or discussion of psychological principles, motivation, leadership, team dynamics, or other core aspects of organisational psychology. The primary audience is technical practitioners (engineers/devs, not psychologists or managers). Although collaboration and feedback loops are mentioned briefly, these are treated as process/mechanical matters rather than examined from a psychological or organisational behavior perspective. The content fails to align with the classification definition or key topics, having no direct or meaningful connection to organisational psychology.",
    "reasoning_summary": "This content explains technical branching and deployment strategies, targeting development teams. It lacks any focus on psychological theories, team dynamics, motivation, or organisational behavior, so it does not fit the Organisational Psychology category.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "resourceId": "9EP_gF2nD19",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-16T20:20:20",
    "ai_confidence": 9.58,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.8,
    "ai_audience": 1.0,
    "ai_signal": 1.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content discusses branching strategies in software delivery, criticizing environment-based branching and recommending modern techniques like feature flags and progressive delivery. It does not explicitly mention Hybrid Agile or discuss the blending of traditional and agile methodologies, aligning only slightly with the category: both concern delivery pitfalls, but Hybrid Agile’s specific thematic focus is absent. The audience is technical, as is Hybrid Agile, but the connection is indirect.",
    "reasoning_summary": "Though the article critiques outdated development practices and champions modern delivery strategies, it does not mention or deeply explore Hybrid Agile concepts or failures. Its minor alignment centers on agile principles, but lacks depth or direct relevance.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "resourceId": "9EP_gF2nD19",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 8.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.4,
    "ai_depth": 1.0,
    "ai_intent": 1.2,
    "ai_audience": 3.5,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is highly focused on technical processes—specifically code branching strategies and deployment methods for development teams. It provides no explicit or implicit discussion of concepts central to employee engagement: motivation, recognition, feedback, workplace culture, or team commitment. Direct mentions and conceptual alignment with the category are nearly absent, with brief references to 'teams' and 'feedback loops,' but these pertain to development velocity, not to the psychological or social dimensions of work. The target audience is technical practitioners, not HR or engagement strategists, and the content contains virtually no relevant signal for the Employee Engagement category.",
    "reasoning_summary": "This resource is squarely about technical branching strategies, with no meaningful discussion of employee motivation or engagement. It does not fit the Employee Engagement category.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Test Driven Development",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 17.35,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.1,
    "ai_intent": 2.3,
    "ai_audience": 6.1,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on branching strategies, environment-based workflows, feature flags, and deployment. While these are software development topics, there is no explicit mention or in-depth discussion of Test Driven Development (TDD) or its methodology. The main ideas revolve around code delivery and deployment process improvements, not writing tests before code or TDD cycles. The audience may overlap with TDD practitioners, but the content's purpose and themes are separate from TDD. Most of the content is off-topic for this category.",
    "reasoning_summary": "This content centers on branching and deployment strategies, not Test Driven Development. It doesn’t mention TDD or explore its practices, making it only minimally relevant to the category.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "resourceId": "9EP_gF2nD19",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 29.35,
    "ai_mentions": 1.2,
    "ai_alignment": 3.9,
    "ai_depth": 3.4,
    "ai_intent": 3.7,
    "ai_audience": 6.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content focuses on branching strategies and the drawbacks of environment-based branching, suggesting feature flags and progressive rollouts. While these are modern DevOps practices relevant to effective development workflows, the post never directly mentions 'platform engineering,' Internal Developer Platforms, or building internal platforms. Its conceptual alignment is moderate: the shift toward feature flags and dynamic exposure connects with platform standardisation and developer efficiency—core platform engineering principles—but the primary intent is process improvement, not platform engineering as a discipline. Discussion is relatively shallow, mainly contrasting two strategies rather than exploring self-service, automation, or internal platforms. The audience is technical, matching platform engineering, and the signal-to-noise ratio is high: little digression. However, the absence of platform engineering's key concepts and vocabulary prevents a high confidence classification.",
    "reasoning_summary": "While the post explores efficient code delivery approaches, it stays at the branching strategy level and doesn't delve into internal platforms or platform engineering principles. Its recommendations are tangentially relevant but not central to the category, resulting in low confidence.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "resourceId": "9EP_gF2nD19",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 42.43,
    "ai_mentions": 1.8,
    "ai_alignment": 5.0,
    "ai_depth": 4.2,
    "ai_intent": 5.5,
    "ai_audience": 6.9,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content never directly mentions Lean Thinking, Lean principles, or any key Lean terms; its main focus is modern software branching practices. While it briefly touches on optimizing workflow, feedback loops, and accelerating value delivery—which can conceptually align with Lean's goals—it doesn't use Lean frameworks, tools, or terminology, nor does it discuss Lean methods in-depth. Its intent is to guide better branching strategies for development speed, which is adjacent but not grounded in Lean Thinking. The audience (development leaders/practitioners) overlaps with Lean, and the entire discussion is focused, but the absence of explicit Lean context lowers alignment and depth scores. No outdated ideas or critical tone require penalty.",
    "reasoning_summary": "This content addresses efficient development workflow and reducing wasteful practices, which overlap conceptually with Lean Thinking. However, it doesn't explicitly use Lean terminology or frameworks, making the fit indirect and confidence moderate rather than strong.",
    "level": "Tertiary"
  },
  "Self Organisation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Self Organisation",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 32.98,
    "ai_mentions": 0.2,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 6.7,
    "ai_signal": 7.2,
    "ai_penalties_applied": true,
    "ai_penalty_points": 0.7,
    "ai_penalty_details": "Alignment penalized -0.5 for conceptual misfit (focus on technical branching, not autonomy); Depth penalized -0.2 for minimal exploration of self-organisation.",
    "final_score": 33.0,
    "reasoning": "The content centers on branching strategies and recommends modern delivery practices, focusing primarily on technical workflow improvements rather than principles or practices of team autonomy or empowerment. Self-organisation is indirectly related—streamlined branching could, in theory, empower teams—but the article never mentions self-organisation directly, nor discusses team autonomy, ownership, leadership support, or related principles. Depth is superficial concerning self-organisation, as the main critique is about outmoded technical practice, not cultural or organizational change. The audience fits (developers), and the piece is focused, but only tangentially brushes on themes that might support self-organisation, without explicit alignment or discussion.",
    "reasoning_summary": "This piece primarily discusses branching strategies, not self-organisation. While it could empower teams indirectly, it lacks explicit reference or meaningful exploration of self-organisation principles, resulting in low confidence for this category.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "9EP_gF2nD19",
    "category": "Competence",
    "calculated_at": "2025-05-16T20:21:12",
    "ai_confidence": 28.35,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.1,
    "ai_intent": 1.7,
    "ai_audience": 7.2,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content discusses branching strategies, focusing on why environment-based branching is suboptimal and suggesting feature flags and rollouts. While these are process and tooling recommendations aimed at better delivery, there are no direct mentions of competence, skill, or capability development. The alignment to 'Competence' is weak; the substance rests on process effectiveness rather than the development or inspection of professional capability. The audience is technical teams, but the main thematic content revolves around workflow, not competence as defined. Thus, the confidence is low, reflecting only minimal overlap where choosing effective strategies may imply some competence.",
    "reasoning_summary": "This content centers on optimizing code branching strategies, not on competence development. It’s aimed at technical teams but lacks direct connection to professional capability growth or continuous skill improvement, so its relevance to 'Competence' is minimal.",
    "level": "Ignored"
  },
  "Decision Making": {
    "resourceId": "9EP_gF2nD19",
    "category": "Decision Making",
    "calculated_at": "2025-05-16T20:20:19",
    "ai_confidence": 36.85,
    "ai_mentions": 1.3,
    "ai_alignment": 3.0,
    "ai_depth": 2.8,
    "ai_intent": 3.5,
    "ai_audience": 6.5,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content primarily focuses on technical branching strategies for development teams, critiquing environment-based branching and recommending feature flags and progressive rollouts. While there are allusions to improving decision quality (such as choosing more efficient methodologies and reducing bottlenecks), it does not explicitly discuss structured, evidence-based decision-making, data-driven analysis, or frameworks for making such decisions. Direct mentions of decision-making or related frameworks are absent. The audience (development teams) partly overlaps with the category, but the focus is practical implementation rather than organizational decision processes. The discussion is surface-level regarding decision-making principles.",
    "reasoning_summary": "This content centers on technical best practices for branching, not structured decision-making. It lightly touches on team choices but lacks explicit evidence-based frameworks or deep alignment with the Decision Making category.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "resourceId": "9EP_gF2nD19",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 16.984,
    "ai_mentions": 0.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.2,
    "ai_intent": 2.8,
    "ai_audience": 5.1,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses on branching strategies and workflow optimization—core software development practices—not on installation or configuration processes. There are no step-by-step guides, technical setup details, or configuration instructions. The mention of 'environments' relates to development workflow, not configuration. Coverage is thoughtful but off-topic for this category. Audience alignment is somewhat present, as DevOps practitioners overlap, but the purpose is conceptual, not actionable for setup or configuration.",
    "reasoning_summary": "This piece delves deeply into branching strategy for teams but doesn’t address installation or configuration steps. While useful for DevOps professionals, it isn’t focused on setup guides, system requirements, or configuration best practices, and is thus a poor fit for the 'Install and Configuration' category.",
    "level": "Ignored"
  },
  "Current Value": {
    "resourceId": "9EP_gF2nD19",
    "category": "Current Value",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 25.1,
    "ai_mentions": 0.7,
    "ai_alignment": 2.4,
    "ai_depth": 1.9,
    "ai_intent": 2.2,
    "ai_audience": 6.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses on branching strategies and the negative effects of environment-based branching versus more modern practices using feature flags and progressive rollouts. While these themes relate generally to accelerating delivery, feedback, and exposure of value, there are no explicit or significant discussions on Current Value as defined within Evidence-Based Management. Metrics, indicators, and decision-making around real-time value delivery aren't central to the presentation, and relevant terminology is only tangentially connected. The audience of developers/teams aligns partially with the category, but the main intent is technical guidance, not assessing, measuring, or analysing Current Value. No penalties were warranted as the content is timely and not critical or outdated.",
    "reasoning_summary": "This piece delivers practical advice on code branching strategies but doesn’t explicitly cover Current Value or its measurement. Its technical focus is adjacent to value delivery concepts but lacks direct alignment with Evidence-Based Management's definition of Current Value.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "9EP_gF2nD19",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 21.93,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.4,
    "ai_audience": 6.6,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on branching strategies for development teams, criticizing environment-based branching and promoting modern techniques like feature flags and progressive rollouts. While these practices can indirectly impact customer satisfaction by facilitating faster, safer code delivery, the material never mentions customer happiness, feedback, satisfaction measurement, or related principles. No direct references or in-depth exploration of customer experience topics appear. The audience aligns with dev teams, but the intent centers exclusively on technical process optimization. Thus, low scores are given for direct mentions, alignment, depth, intent, and signal. No penalties were triggered, as there is no outdated advice or directly conflicting tone. Overall, the confidence that this content fits the 'Customer Satisfaction' category is low.",
    "reasoning_summary": "This content is tailored to developers improving branching strategies, not customer satisfaction. It lacks explicit discussion of customer needs or experience, making its fit for 'Customer Satisfaction' quite weak.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Project Management",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 53.5,
    "ai_mentions": 1.2,
    "ai_alignment": 5.8,
    "ai_depth": 4.7,
    "ai_intent": 5.6,
    "ai_audience": 7.0,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content focuses on code branching strategies, recommending against environment-based branching and advocating feature flags/progressive rollouts for better delivery. While it emphasizes workflow optimization, it doesn't explicitly discuss core project management principles or methodologies. Topics like scope, schedule, and stakeholder management are absent. The alignment is moderate, as code delivery strategies intersect with project management when optimizing delivery and collaboration, but the primary audience seems to be engineering teams rather than PMs specifically. There is very little direct mention of project management terminology or frameworks, and the depth is limited to practical branching advice rather than broader project delivery strategies.",
    "reasoning_summary": "While the content offers valuable advice on streamlining code delivery, its focus is on technical practices rather than project management principles or methodologies. It has some relevance for project managers involved in delivery pipelines, but falls short of deeply fitting the category.",
    "level": "Tertiary"
  },
  "Agile Frameworks": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 11.24,
    "ai_mentions": 0.7,
    "ai_alignment": 1.9,
    "ai_depth": 1.6,
    "ai_intent": 1.3,
    "ai_audience": 2.2,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses on branching strategies, criticizes environment-based branching, and promotes modern practices like feature flags. However, it does not mention, discuss, or analyze Agile frameworks, principles, or comparative insights as per the classification definition. There is minimal conceptual overlap with Agile philosophy (e.g., value delivery and feedback loops) but the discussion is primarily technical and tooling-oriented, lacking direct relevance to Agile frameworks or their implementation. The target audience is likely engineering/DevOps, not specifically Agile practitioners, and the content is not framed to inform about, analyze, or compare Agile frameworks in any substantial way.",
    "reasoning_summary": "This content centers on code branching strategies and modern deployment techniques rather than Agile frameworks. While it references faster feedback and value delivery, it does not align with the requirements for the Agile Frameworks category. Confidence fit is very low.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "9EP_gF2nD19",
    "category": "Social Technologies",
    "calculated_at": "2025-05-16T20:20:28",
    "ai_confidence": 53.5,
    "ai_mentions": 2.0,
    "ai_alignment": 7.9,
    "ai_depth": 6.7,
    "ai_intent": 7.3,
    "ai_audience": 7.5,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content critiques outdated environment-based branching and promotes value delivery, faster feedback, and less siloing through modern practices like feature flags. It aligns with themes of collaboration, continuous improvement, and optimising value flow. However, it focuses mainly on specific technical practices (branching, deployment strategies), and does not explicitly mention social technologies or foundational frameworks such as Agile, DevOps, or Lean. There are no direct references to self-organisation, transparency, or collective intelligence, but the text does address organisational impacts (silos, bottlenecks) and the intent is to inform teams about optimising their processes. The audience is practitioners looking to improve delivery workflows. Signal-to-noise is high, content is focused, though depth is moderate. No penalties apply.",
    "reasoning_summary": "This content highlights delivery optimization and reduced siloing via modern branching strategies, aligning with some Social Technologies principles. While relevant to value delivery and collaboration, it lacks explicit mention of social frameworks and dives more into technical tooling than organisational methodology.",
    "level": "Tertiary"
  },
  "Product Strategy": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Strategy",
    "calculated_at": "2025-05-16T20:20:20",
    "ai_confidence": 32.416,
    "ai_mentions": 0.4,
    "ai_alignment": 3.6,
    "ai_depth": 2.8,
    "ai_intent": 3.4,
    "ai_audience": 7.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content is focused on technical branching strategies for development teams, discussing environment-based vs. feature flag-driven release management. There are no explicit mentions or in-depth coverage of product strategy principles such as vision, roadmapping, or customer alignment. The main audience is engineering practitioners, not product strategists. The topic is tangential to product strategy, as efficient code delivery may enable strategic goals, but the discussion does not address core product strategy concerns.",
    "reasoning_summary": "This content mainly covers technical branching and code deployment practices rather than the broader methodologies or frameworks essential to product strategy. While relevant for engineering teams, it does not substantially explore vision, roadmapping, or strategic alignment, so confidence in this category is low.",
    "level": "Ignored"
  },
  "Product Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Development",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 75.44,
    "ai_mentions": 3.7,
    "ai_alignment": 8.9,
    "ai_depth": 7.8,
    "ai_intent": 7.9,
    "ai_audience": 8.2,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 75.0,
    "reasoning": "Direct mentions of 'Product Development' are absent, so the score is low here. However, the content strongly aligns with category themes such as minimizing risk, feedback loops, and practices (e.g., feature flags, progressive rollouts) that impact product delivery. It critically discusses existing methods and suggests iterative, customer-centric approaches, appropriate for practitioners and strategists. The focus is on methodology for improved product outcomes, with few digressions or off-topic elements. No penalties were applied; the content is current, constructive, and relevant.",
    "reasoning_summary": "While lacking explicit category mentions, the post insightfully critiques outdated branching and prescribes flexible, feedback-driven techniques. Its alignment with modern product delivery methods ensures high relevance for Product Development audiences.",
    "level": "Secondary"
  },
  "Sensemaking": {
    "resourceId": "9EP_gF2nD19",
    "category": "Sensemaking",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 27.15,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.3,
    "ai_intent": 2.6,
    "ai_audience": 7.4,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on branching strategies, critiquing environment-based branching and promoting the use of feature flags and progressive rollouts for deployment. There are no direct mentions of sensemaking or its frameworks, nor does the discussion explore principles of interpreting complex situations or organizational decision-making processes. While it briefly mentions increased complexity, the emphasis is on technical practices and workflow optimization rather than on helping organizations understand or navigate complexity. The audience alignment and signal are relatively higher, as the content is directly relevant for software teams, but the main themes do not adequately fit the core criteria of sensemaking.",
    "reasoning_summary": "This article critiques branching strategies and recommends modern techniques for code delivery. However, it doesn't discuss the core practices or frameworks of sensemaking, focusing instead on technical workflow improvements. Thus, it's only tangentially related to the 'Sensemaking' category.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "resourceId": "9EP_gF2nD19",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 11.95,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.4,
    "ai_intent": 2.1,
    "ai_audience": 4.3,
    "ai_signal": 4.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content discusses branching practices in software development teams, focusing on technical strategies for code delivery (e.g., avoiding environment-based branching, promoting feature flags). There is no mention or implication of Cell Structure Design, Beta Codex, decentralisation, self-organisation, or organisational design. The audience is developers/engineers, not organisational designers or strategists. No penalties apply, but there is extremely low relevance.",
    "reasoning_summary": "This content centers on software branching and code deployment—not Cell Structure Design or related organisational models. It lacks any conceptual or direct connection to the evaluated category, making confidence in the match very low.",
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "9EP_gF2nD19",
    "category": "Artifact",
    "calculated_at": "2025-05-16T20:20:28",
    "ai_confidence": 5.5,
    "ai_mentions": 0.4,
    "ai_alignment": 0.5,
    "ai_depth": 0.6,
    "ai_intent": 0.3,
    "ai_audience": 1.1,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content focuses on branching strategies and code delivery, critiquing environment-based branching and suggesting feature flags and rollouts. There are no direct mentions or substantive discussions of artifacts as formal representations of work, no examination of Agile artifacts, and no focus on transparency or artifact structure. The intent, depth, and conceptual fit to the Artifact category are minimal. The target audience is similar—development teams—but the subject is unrelated to formal artifacts as defined. No penalties are warranted.",
    "reasoning_summary": "This resource focuses on branching strategies and code deployment, not on formal Agile or Lean artifacts. It doesn't explore artifact structure, transparency, or related best practices, resulting in a very weak fit for the 'Artifact' category.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-16T20:20:20",
    "ai_confidence": 45.45,
    "ai_mentions": 0.9,
    "ai_alignment": 4.8,
    "ai_depth": 4.6,
    "ai_intent": 4.3,
    "ai_audience": 6.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content focuses on technical best practices for code branching, critiquing environment-based branching and recommending feature flags and progressive rollouts. While these are agile practices improving delivery and feedback, the discussion is narrowly technical—addressing how teams can accelerate deployment, not how organizations align strategy with agile principles. There is minimal engagement with strategic planning, leadership, or organization-wide agile transformation. No explicit mention of 'Agile Strategy' or its core themes, though there is indirect relevance (continuous delivery, customer value). The audience appears to be technical practitioners, not executives or strategists. The intent is useful for agile teams but limited in strategic scope.",
    "reasoning_summary": "This content offers smart advice on branching and deployment practices that support agile teams, but it doesn't address broader organizational strategy or the integration of Agile at the strategic level. It remains valuable for practitioners, but falls short of fitting the 'Agile Strategy' category.",
    "level": "Tertiary"
  },
  "GitHub": {
    "resourceId": "9EP_gF2nD19",
    "category": "GitHub",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 47.95,
    "ai_mentions": 1.0,
    "ai_alignment": 4.3,
    "ai_depth": 5.7,
    "ai_intent": 5.6,
    "ai_audience": 8.1,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content discusses branching strategies and best practices for managing code delivery, such as avoiding environment-based branching and using feature flags/progressive rollouts. These are highly relevant to GitHub users, as branching and code management are core aspects of GitHub workflows. However, the content never directly mentions GitHub, any of its features, or integration with GitHub tools. The discussion is conceptual and aligns with version control practices but remains generic, making it applicable to various systems (Git, Bitbucket, etc.), not just GitHub. Depth is moderate, but the lack of explicit GitHub references limits its direct fit to the category.",
    "reasoning_summary": "While the article covers branching strategies and practices directly relevant to GitHub users, it never names or references GitHub. The advice aligns conceptually but remains generic and non-specific, resulting in moderate confidence for the GitHub category.",
    "level": "Tertiary"
  },
  "Azure Pipelines": {
    "resourceId": "9EP_gF2nD19",
    "category": "Azure Pipelines",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 19.95,
    "ai_mentions": 1.2,
    "ai_alignment": 3.1,
    "ai_depth": 3.6,
    "ai_intent": 3.3,
    "ai_audience": 4.2,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content critiques environment-based branching and advocates for feature flags and progressive delivery, concepts relevant to modern CI/CD. However, Azure Pipelines is never referenced directly, nor are pipeline-specific concepts covered. The alignment and depth are low as the focus is on branching strategy—while relevant to DevOps, it is not uniquely tied to Azure Pipelines. The intent serves practitioners interested in delivery efficiency, and the signal is centered on branching, not pipelines.",
    "reasoning_summary": "This content focuses on branching strategies and delivery best practices but never mentions or explores Azure Pipelines directly, making it only tangentially relevant to the category.",
    "level": "Ignored"
  },
  "Leadership": {
    "resourceId": "9EP_gF2nD19",
    "category": "Leadership",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 16.15,
    "ai_mentions": 0.2,
    "ai_alignment": 1.9,
    "ai_depth": 1.3,
    "ai_intent": 2.4,
    "ai_audience": 6.5,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content is purely focused on branching strategies and code delivery practices. There are no explicit or implicit references to leadership, leadership challenges, or frameworks. The discussion is technical, not managerial or leadership-driven, and targets developers concerned with technical workflows, not organizational leadership or cultural change. The signal-to-noise ratio is moderate since it stays on technical topic but is off-topic for this category. No penalties for tone or outdatedness. The confidence score is low, as the content is not a fit for 'Leadership'.",
    "reasoning_summary": "This content is highly technical, focusing solely on branching practices for development teams, without referencing leadership concepts or audiences. It's not a fit for the Leadership category.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "resourceId": "9EP_gF2nD19",
    "category": "Customer Retention",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 33.3,
    "ai_mentions": 1.6,
    "ai_alignment": 3.8,
    "ai_depth": 3.2,
    "ai_intent": 3.5,
    "ai_audience": 7.7,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content focuses on development branching strategies, specifically critiquing environment-based branching and promoting feature flags, progressive rollout, and code delivery speed. While these practices can indirectly support customer retention (by accelerating value delivery and feedback loops), the primary discussion is technical and process-focused. The explicit topic of customer retention, user experience, or continuous value is not mentioned nor deeply discussed. Thus, relevance and alignment are moderate at best, with only tangential implications for the target category.",
    "reasoning_summary": "The content centers on technical branching strategies for development teams, with only an indirect connection to customer retention. It lacks explicit discussion of retaining customers or related strategies, so the fit with the category is quite limited.",
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "9EP_gF2nD19",
    "category": "Ethos",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 18.65,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 2.5,
    "ai_intent": 3.0,
    "ai_audience": 6.1,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses primarily on practical tooling choices (branching, feature flags, rollouts), giving tactical reasons for strategies rather than foundational beliefs or demonstrable system ethos. It critiques environment-based branching but does not connect the argument to core, systemic convictions or evidential ethos. There are fleeting hints (value delivery, bottlenecks, feedback loops), but these remain surface-level and instrumental, not deeply examining underlying values or system-wide beliefs. Thus, alignment and depth are low, with only modest signal; scoring reflects the lack of true ethos discussion.",
    "reasoning_summary": "This content mainly addresses technical branching methods, offering practical advice rather than exploring fundamental beliefs or system ethos. While it alludes to faster value delivery, it doesn’t analyze the underlying convictions shaping Agile or DevOps systems. Confidence in the Ethos category is low for this material.",
    "level": "Ignored"
  },
  "Windows": {
    "resourceId": "9EP_gF2nD19",
    "category": "Windows",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 6.81,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 2.25,
    "ai_audience": 0.9,
    "ai_signal": 1.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses exclusively on software development branching strategies—specifically criticizing environment-based branching and recommending feature flags and progressive rollouts. 'Windows' or any aspect of the Windows operating system is never mentioned or alluded to explicitly or implicitly. The concepts, intent, audience, and technical context are domain-agnostic, relating to generic software development and deployment, not Windows installation, configuration, troubleshooting, or administration. No signal aligns with the Windows category definition, and there is no indirect relevance (no discussion of Windows-specific tools, environments, or scenarios). Therefore, the confidence score is extremely low, and each scoring dimension reflects this near-absence of category fit.",
    "reasoning_summary": "This content is about general software development branching strategies, not Windows. It never mentions Windows, doesn't address OS management or features, and targets a developer audience with no specific Windows focus. As such, it's not relevant to the Windows category.",
    "level": "Ignored"
  },
  "Organisational Culture": {
    "resourceId": "9EP_gF2nD19",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 26.525,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.1,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses explicitly on technical practices—branching strategies, feature flags, and deployment models with only indirect and minor hints toward culture (e.g., mentions of silos and slower feedback loops). There is no direct reference to organisational culture, leadership, or transformation. The themes do not sufficiently explore cultural or behavioural change, nor discuss culture's influence on Agile or DevOps adoption; it's aimed at technical practitioners rather than strategists interested in cultural transformation. The discussion remains technical, lacking depth regarding culture. Thus, only a minimal confidence score is warranted, primarily for minor alignment in concepts like siloed teams and workflow impacts.",
    "reasoning_summary": "This content primarily covers technical branching strategies, with just minor allusions to team silos and workflow impacts. It doesn't deeply address organisational culture, so confidence is very low that it fits the 'Organisational Culture' category.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "9EP_gF2nD19",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 25.35,
    "ai_mentions": 1.4,
    "ai_alignment": 2.6,
    "ai_depth": 2.4,
    "ai_intent": 3.2,
    "ai_audience": 7.3,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content primarily addresses branching strategies to improve development speed and code delivery. It mentions practices (feature flags, progressive rollouts) often associated with modern, agile teams, but its focus is not directly on fostering or measuring innovation. There is minimal overt discussion of mechanisms for innovation, metrics, or the broader context of organizational innovation capacity, and no direct or frequent mention of 'innovation' itself. The main audience—technical practitioners—slightly overlaps with the category, but overall the alignment and depth are weak for 'Ability to Innovate.'",
    "reasoning_summary": "This content centers on branching strategies for faster delivery, not directly on mechanisms or metrics for innovation. While related practices (feature flags, rollouts) support modern development, the content’s fit for 'Ability to Innovate' is weak with low direct relevance.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "9EP_gF2nD19",
    "category": "Practice",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 73.58,
    "ai_mentions": 5.3,
    "ai_alignment": 8.6,
    "ai_depth": 7.7,
    "ai_intent": 8.1,
    "ai_audience": 7.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 74.0,
    "reasoning": "The content directly critiques outdated branching practices and recommends actionable alternatives—feature flags and progressive rollouts—which are consistent, repeatable team actions for faster and safer delivery. Although branching strategies themselves are not on the key topics list, the focus is explicitly on practical team techniques (and why to avoid silos), showing strong conceptual alignment with 'Practice.' The discussion is targeted at practitioners involved in code delivery processes, maintains a high signal-to-noise ratio, and avoids philosophy or tool debates. The content explains reasoning, impact, and asks for audience reflection, but could discuss implementation and team habits more deeply.",
    "reasoning_summary": "This content critiques environment-based branching and recommends feature flags and progressive rollouts, aligning well with the 'Practice' category by focusing on practical, actionable delivery techniques. Its purpose, audience, and advice are a strong fit, though practical detail could be deeper.",
    "level": "Secondary"
  },
  "Increment": {
    "resourceId": "9EP_gF2nD19",
    "category": "Increment",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 21.35,
    "ai_mentions": 0.4,
    "ai_alignment": 1.6,
    "ai_depth": 1.8,
    "ai_intent": 1.2,
    "ai_audience": 7.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses on branching strategies and the pitfalls of environment-based branching, recommending feature flags and progressive rollouts for code delivery. There are no direct mentions of Increments or discussion of tangible, usable outputs at the end of iterations. The discussion does not address the Scrum Increment artifact, working software delivery per iteration, or related value measurement. Any alignment is indirect, as improved delivery speed may facilitate faster Increments, but this is not elaborated. The audience (development teams) could overlap with Scrum practitioners, but the content is not foregrounding Agile or Scrum concepts. Nearly all discussion centers on branching/logistical details rather than Increment as an Agile artifact.",
    "reasoning_summary": "This content addresses code branching and feature flags rather than the concept of Increment in Agile or Scrum. While efficient branching can aid faster delivery, there's no explicit or in-depth discussion of incremental, working software delivery or related Scrum practices, leading to a low confidence score for this category.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "resourceId": "9EP_gF2nD19",
    "category": "Lean Startup",
    "calculated_at": "2025-05-16T20:20:21",
    "ai_confidence": 16.193,
    "ai_mentions": 0.1,
    "ai_alignment": 2.5,
    "ai_depth": 1.7,
    "ai_intent": 2.4,
    "ai_audience": 5.3,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content discusses modern code deployment practices, focusing on minimizing branching complexity and improving feedback cycles through feature flags and progressive rollouts. However, it does not directly mention Lean Startup or its core elements—such as MVPs, the Build-Measure-Learn loop, or validated learning. The closest thematic overlap is the emphasis on faster deployment and feedback, which is conceptually adjacent but not explicitly linked to Lean Startup principles. The discussion is operational and technical, while the Lean Startup category is defined by its methodological approach to business experimentation and learning, not specific software delivery practices. Therefore, most scores are low, except for audience alignment (targeting teams interested in iterative delivery). No penalties were necessary as the content is neither outdated nor counter to Lean Startup.",
    "reasoning_summary": "While the article promotes faster feedback and iterative delivery—ideas that loosely echo Lean Startup—it provides no direct reference to Lean Startup principles or terminology. Its focus remains technical and operational, not on validated learning or Lean methodology, so confidence in this classification is very low.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "9EP_gF2nD19",
    "category": "Throughput",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 17.4,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 3.6,
    "ai_intent": 2.2,
    "ai_audience": 5.0,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content critiques environment-based branching strategies, advocating for approaches such as feature flags and progressive rollouts to simplify code delivery. While it discusses delivery speed and bottlenecks, it never directly references throughput as a metric or analyzes it quantitatively. The alignment is weak because the main focus is practical workflow and deployment tactics, not measuring or analyzing delivery through throughput. Only a peripheral conceptual link exists via implied impacts on flow, but the article doesn’t define, visualize, or interpret throughput or trends. The content serves practitioners but is unfocused regarding throughput as defined in the category.",
    "reasoning_summary": "This article centers on workflow and deployment improvements, touching on delivery speed but not explicitly discussing throughput as a metric. The connection to throughput is indirect and lacks substantive analysis or metric-oriented discussion.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 37.7,
    "ai_mentions": 1.3,
    "ai_alignment": 4.5,
    "ai_depth": 4.7,
    "ai_intent": 3.9,
    "ai_audience": 7.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content provides a focused critique of environment-based branching and promotes feature flags and progressive rollouts for code delivery. While it touches on practices relevant to modern distributed software teams, it does not explicitly discuss asynchronous development principles, tools, or challenges. There are no direct mentions, and the conceptual alignment is indirect: the advice could aid asynchronous teams, but is not exclusively framed for them. Audience fit is high for engineering practitioners, yet depth and intent only moderately align with the category—most discussion is on workflow efficiency, not asynchronous collaboration. Signal is moderate, as the focus remains on branching, not team interaction across time zones.",
    "reasoning_summary": "This content critiques traditional branching in software delivery, focusing on feature flags and deployment efficiency. While useful for distributed teams, it lacks direct discussion of asynchronous development principles or team collaboration, making categorical alignment only moderate.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "9EP_gF2nD19",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 80.7,
    "ai_mentions": 6.6,
    "ai_alignment": 8.9,
    "ai_depth": 8.4,
    "ai_intent": 8.1,
    "ai_audience": 9.2,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content critiques outdated branching strategies that slow down development and advocates for techniques like feature flags and progressive rollouts, which align closely with frequent releases. Direct mentions of 'faster, safer code delivery,' 'slowing feedback loops,' and modern DevOps practices demonstrate strong conceptual alignment and depth. The main intent targets practitioners aiming to optimize release frequency. The content is well-focused and relevant, addressing engineers and teams engaged in modern development. No penalties apply as the content is current and fully supportive.",
    "reasoning_summary": "The content strongly supports frequent releases by advising against environment-based branching and recommending feature flags and progressive rollouts for faster, safer delivery. It’s targeted at modern development teams, providing actionable advice with clear alignment to the category.",
    "level": "Primary"
  },
  "Philosophy": {
    "resourceId": "9EP_gF2nD19",
    "category": "Philosophy",
    "calculated_at": "2025-05-16T20:20:22",
    "ai_confidence": 23.869,
    "ai_mentions": 1.2,
    "ai_alignment": 2.9,
    "ai_depth": 2.5,
    "ai_intent": 2.2,
    "ai_audience": 7.0,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "This content is primarily focused on the practical critique of environment-based branching strategies. It mentions the 'why' behind recommended practices (feedback loops, complexity, customer value), but does not engage with broader philosophical frameworks, foundational beliefs, or theories that underpin development methodologies. There are no direct mentions of philosophy or related theoretical constructs. The intent is to persuade teams to adopt specific practices (feature flags, progressive rollouts) based on efficiency, rather than explore the underlying philosophical reasons. The targeting is aligned with technical practitioners rather than those seeking philosophical discussion. The signal-to-noise ratio is moderate—it's focused, but the content remains practical and tactical instead of theoretical.",
    "reasoning_summary": "The article primarily discusses practical branching practices, focusing on efficiency and workflow improvements. It lacks exploration of foundational concepts or philosophies, making it a weak fit for the Philosophy category despite mentioning some 'why' aspects.",
    "level": "Ignored"
  },
  "Tool": {
    "resourceId": "9EP_gF2nD19",
    "category": "Tool",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 54.13,
    "ai_mentions": 2.1,
    "ai_alignment": 7.2,
    "ai_depth": 6.9,
    "ai_intent": 7.0,
    "ai_audience": 7.6,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content critiques traditional branching strategies and recommends mechanisms like feature flags and progressive rollouts, which are well-aligned with tool-based practices in Agile/DevOps. However, while it references these mechanisms, it discusses them more as practices/concepts than in-depth tool overviews. There's minimal explicit tool naming, and much of the content focuses on philosophy rather than concrete tool implementation or comparison. The intended audience (practitioner/teams) aligns, and the advice is relevant to tool-supported workflows, but with more focus on branching concepts than deep tool discussion.",
    "reasoning_summary": "The content aligns conceptually with the 'Tool' category by highlighting feature flags and rollouts as modern mechanisms, but lacks depth on specific tools or implementation details, making it moderately relevant but not a definitive fit.",
    "level": "Tertiary"
  },
  "Technical Leadership": {
    "resourceId": "9EP_gF2nD19",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 67.25,
    "ai_mentions": 2.0,
    "ai_alignment": 7.8,
    "ai_depth": 6.6,
    "ai_intent": 7.3,
    "ai_audience": 8.2,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content subtly touches on technical leadership by advising against outdated branching strategies and advocating for approaches that enhance team agility and delivery speed. While it doesn't explicitly reference 'technical leadership' or typical leadership roles, it provides advice relevant to leaders responsible for engineering culture and modern DevOps practices. The discussion is conceptually aligned, offers some depth (examining impacts on team performance and feedback loops), and is targeted at practitioners overseeing development processes. However, it lacks direct mentions of leadership or agile facilitation, reducing its score in those dimensions.",
    "reasoning_summary": "The content presents practical advice on modern code delivery, which aligns with technical leadership themes, especially regarding team efficiency and process improvement. However, the lack of explicit leadership focus and terminology reduces its overall confidence for classification as technical leadership.",
    "level": "Secondary"
  },
  "Continuous Learning": {
    "resourceId": "9EP_gF2nD19",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 48.08,
    "ai_mentions": 2.3,
    "ai_alignment": 5.1,
    "ai_depth": 4.8,
    "ai_intent": 4.7,
    "ai_audience": 7.5,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content critiques environment-based branching and promotes modern alternatives like feature flags and progressive rollouts, aiming at safer code delivery and faster feedback loops—concepts somewhat linked to continuous improvement. However, it does not directly discuss growth mindset, knowledge sharing, feedback loops as learning mechanisms, or explicitly connect to Continuous Learning principles or terminology. The depth remains practical and process-focused, centering on branching efficiency, not learning culture. The intent is practical improvement for teams (audience-aligned), but explicit Continuous Learning frameworks or methods are missing.",
    "reasoning_summary": "While the article encourages team improvement via modern branching and feedback practices, it doesn't explicitly address Continuous Learning principles or culture. Its focus is more on process efficiency than fostering a growth mindset or ongoing learning.",
    "level": "Tertiary"
  },
  "Agile Transformation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Transformation",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 31.85,
    "ai_mentions": 0.6,
    "ai_alignment": 3.7,
    "ai_depth": 2.9,
    "ai_intent": 3.8,
    "ai_audience": 6.3,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content is focused on branching strategies and advocates for feature flags and progressive delivery, which are practices often found in modern software teams. However, it does not directly mention or explicitly discuss Agile Transformation, its principles, change management, or organisational agility. The alignment and depth of discussion for Agile Transformation are limited. The audience is somewhat aligned (development teams can be part of Agile initiatives), but the content lacks the broader organisational or strategic perspective central to the 'Agile Transformation' category.",
    "reasoning_summary": "This content offers practical advice for branching and deployment but doesn't explicitly engage with Agile Transformation themes, principles, or organisational change. It's useful for teams seeking efficiency, but it doesn't directly fit the strict definition of the category.",
    "level": "Ignored"
  },
  "Product Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Management",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 38.1,
    "ai_mentions": 1.2,
    "ai_alignment": 4.2,
    "ai_depth": 4.8,
    "ai_intent": 4.5,
    "ai_audience": 5.5,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "This content is focused on code branching strategies and deployment practices, specifically advocating for feature flags over environment-based branching. While the subject impacts product delivery, the discussion is rooted in technical implementation, not in the strategic or holistic decision processes central to Product Management. There are indirect links to product goals (e.g., faster value delivery), but no direct mention of product management, frameworks, or methodologies. The primary audience appears to be engineers rather than product managers. There is some crossover in intent (optimizing delivery value), but overall, the content aligns only tangentially with the category’s scope.",
    "reasoning_summary": "This content centers on technical branching and deployment techniques for dev teams, focusing on engineering delivery, not Product Management’s strategic frameworks. Its relevance is peripheral, with only indirect ties to product outcomes, resulting in a moderate-to-low fit.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "resourceId": "9EP_gF2nD19",
    "category": "Operational Practices",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 87.9,
    "ai_mentions": 7.6,
    "ai_alignment": 9.1,
    "ai_depth": 8.8,
    "ai_intent": 8.7,
    "ai_audience": 8.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 88.0,
    "reasoning": "This content directly challenges common branching practices, advocating for techniques (feature flags, progressive rollouts) explicitly focused on accelerating delivery and reducing operational friction, matching core operational practices in Agile/DevOps. The discussion details practical pitfalls of environment-based branching, the benefits of workflow simplification, and prompts teams to re-examine practices. It speaks to engineering professionals and practitioners, stays on-topic throughout, and lacks outdated or contradictory framing. The only minor deduction is for infrequent explicit use of 'operational' terms; otherwise, thorough alignment is evident.",
    "reasoning_summary": "The content gives pragmatic advice on streamlining code delivery using modern operational practices. It thoroughly aligns with operational efficiency topics in Agile/DevOps and targets engineering teams directly, resulting in strong confidence for the 'Operational Practices' category.",
    "level": "Primary"
  },
  "Complexity Thinking": {
    "resourceId": "9EP_gF2nD19",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 18.63,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 1.9,
    "ai_intent": 2.5,
    "ai_audience": 6.6,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on software branching strategies and the pitfalls of environment-based branching, promoting feature flags and simpler processes. While it mentions 'complexity' as a problem created by bad branching, there is no reference to complexity science, the Cynefin Framework, non-linear dynamics, or emergent behaviors. The argument centers on pragmatic software delivery improvements, not systems thinking or management under complexity theory. The audience could overlap with those interested in complexity, but the content itself does not demonstrate alignment or depth in the category. No penalties applied since the tone and timeliness are appropriate.",
    "reasoning_summary": "This content critiques environment-based branching as inefficient and offers practical alternatives, but does not touch on complexity theory or frameworks. It lacks explicit and conceptual alignment with 'Complexity Thinking,' resulting in low category confidence.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "resourceId": "9EP_gF2nD19",
    "category": "Azure DevOps",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 25.59,
    "ai_mentions": 0.5,
    "ai_alignment": 3.6,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 7.6,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content does not directly mention Azure DevOps or any of its services. It addresses branching strategies and advocates for feature flags and progressive rollout—concepts relevant to modern DevOps, but agnostic as to platform. The depth and intent are limited to high-level advice, lacking reference to Azure DevOps functionalities or tools. The target audience is software practitioners, but focus is not explicitly on Azure DevOps, reducing the alignment and confidence scores.",
    "reasoning_summary": "This content gives branching and delivery advice relevant to DevOps teams but makes no mention of Azure DevOps or its tooling, so its relevance to the category is tangential at best. Focus is too general for a high confidence score.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "resourceId": "9EP_gF2nD19",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 60.37,
    "ai_mentions": 2.7,
    "ai_alignment": 7.4,
    "ai_depth": 6.9,
    "ai_intent": 7.1,
    "ai_audience": 8.2,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 60.0,
    "reasoning": "The content criticizes environment-based branching for slowing delivery and causing bottlenecks, which conceptually aligns with Flow Efficiency. It highlights impediments to throughput and recommends practices (feature flags, progressive rollouts) that help streamline flow. However, Flow Efficiency is not directly named, and metrics or Lean/Agile terminology are absent. The discussion is practical and relevant to practitioners, but focuses on branching as the route to efficiency rather than an in-depth exploration of flow optimization methods. As such, alignment and depth are good but not perfect, and direct mention is weak, resulting in a moderate but confident score.",
    "reasoning_summary": "This content closely aligns with Flow Efficiency principles by addressing bottlenecks and recommending techniques to boost throughput, though it focuses on branching strategies rather than flow metrics or Lean/Agile terms. It's geared toward practitioners, emphasizing practical improvement with solid relevance but lacks direct terminology.",
    "level": "Tertiary"
  },
  "Strategic Goals": {
    "resourceId": "9EP_gF2nD19",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 27.35,
    "ai_mentions": 0.6,
    "ai_alignment": 2.4,
    "ai_depth": 2.7,
    "ai_intent": 1.3,
    "ai_audience": 6.1,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on branching strategies and operational tooling (feature flags, rollouts), not on setting or aligning long-term strategic goals. There are no direct mentions of strategic objectives, business agility, or agile-aligned goal frameworks. Some relevance exists insofar as workflow impacts agility, but the content is at the operational/process level, not strategic. The intended audience (development teams) can intersect with strategy, but the discussion is tactical and lacks depth in goal setting, measurement, or adaptation frameworks indicative of true strategic objectives.",
    "reasoning_summary": "This content centers on code branching tactics and tooling for faster dev cycles, not on defining or aligning organizational strategic goals. Its focus is operational, with only tangential links to higher-order strategy, so it fits the category poorly.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "9EP_gF2nD19",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 2.04,
    "ai_mentions": 0.15,
    "ai_alignment": 0.7,
    "ai_depth": 0.8,
    "ai_intent": 0.4,
    "ai_audience": 0.5,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content does not directly mention Liberating Structures or any facilitation toolkit terms. Its focus is on branching strategies, feature flags, and deployment practices—topics unrelated to the category's toolkit or its use in facilitation, engagement, or collaborative team dynamics. No relevant methods, audiences, or purposes are aligned. No penalties apply as there is no outdated or negative tone.",
    "reasoning_summary": "This content focuses on branching strategies and deployment, not on facilitation or engagement methods like Liberating Structures. It does not align with the toolkit or its intended audience.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "9EP_gF2nD19",
    "category": "Value Delivery",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 69.3,
    "ai_mentions": 4.2,
    "ai_alignment": 7.5,
    "ai_depth": 6.8,
    "ai_intent": 7.9,
    "ai_audience": 8.7,
    "ai_signal": 7.3,
    "ai_penalties_applied": true,
    "ai_penalty_points": 0.7,
    "ai_penalty_details": "Mentions penalized by 0.6 for not directly naming 'value delivery'; Depth penalized by 0.1 due to limited coverage of measurement or evidence-based practices.",
    "final_score": 69.0,
    "reasoning": "The content directly addresses code delivery strategies, advocating for approaches (feature flags, progressive rollout) that enable faster, safer deployment—key enablers for delivering customer value in Agile/DevOps. It critiques outdated branching, tying inefficiency to value bottlenecks, and promotes alignment with modern continuous delivery. However, 'value delivery' itself is not explicitly mentioned, and while the focus is on improving delivery, it does not cover the full spectrum of value measurement or methodologies. Audience fit is strong—targeting teams and technical leads. A minor penalty is applied for lack of explicit terminology and limited depth in value management theories.",
    "reasoning_summary": "This content guides technical teams toward delivery practices that reduce bottlenecks and speed value to customers, closely aligning with value delivery principles—even if the term isn't explicitly used. The practical focus, technical audience, and strong alignment boost confidence in category fit.",
    "level": "Secondary"
  },
  "Organisational Physics": {
    "resourceId": "9EP_gF2nD19",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-16T20:20:23",
    "ai_confidence": 29.65,
    "ai_mentions": 0.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.2,
    "ai_intent": 2.8,
    "ai_audience": 8.6,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content focuses on software development branching strategies, critiquing environment-based branching in favor of feature flags and progressive rollouts. While some themes loosely touch on feedback loops and organizational blockers, there is little explicit discussion of systems thinking, organizational dynamics, or adaptation at the organizational systems level. No direct mention of Organisational Physics or its core concepts is present. The audience (development teams and technical leads) partially overlaps with the category, and the content is focused, but the main purpose is narrowly technical rather than systemic.",
    "reasoning_summary": "This piece is practical advice for dev teams about branching strategies, only loosely touching on organizational dynamics (like feedback loops or silos) without engaging true systems thinking. It's targeted at practitioners but doesn’t meaningfully address Organisational Physics.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "resourceId": "9EP_gF2nD19",
    "category": "Psychological Safety",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 5.33,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 1.1,
    "ai_intent": 0.9,
    "ai_audience": 7.1,
    "ai_signal": 3.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content focuses on code branching strategies, advocating for the use of feature flags and progressive rollouts over environment-based branching. While the discussion touches on process efficiency and code delivery speed, there are no direct mentions or conceptual discussions of psychological safety as defined. Team dynamics, risk-taking, or open communication are not explored. The intended audience (technical team leads, developers) somewhat overlaps with that of psychological safety materials, but the discussion is simply about workflow management, not team climate or interpersonal safety.",
    "reasoning_summary": "This content centers on technical branching practices, not psychological safety. It targets developers and teams, but lacks any substantive discussion of open communication, risk-taking, or supportive environments required by the category definition.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "9EP_gF2nD19",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 16.53,
    "ai_mentions": 0.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.1,
    "ai_intent": 2.2,
    "ai_audience": 4.1,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content centers on software development branching strategies, emphasizing technical efficiency (feature flags, progressive rollouts) rather than entrepreneurial themes. There are no direct mentions of entrepreneurship or its core principles (innovation, risk-taking, value creation in the market context, entrepreneurial mindset). While the topic could indirectly support startup teams, the main audience and intent are software practitioners, not entrepreneurs or business founders. The alignment and depth with entrepreneurship are minimal, resulting in a low overall score.",
    "reasoning_summary": "This content focuses on technical branching strategies for development teams, lacking direct discussion of entrepreneurship concepts like innovation or business growth, so it doesn't align closely with the entrepreneurship category.",
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "9EP_gF2nD19",
    "category": "Framework",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 28.775,
    "ai_mentions": 0.8,
    "ai_alignment": 3.1,
    "ai_depth": 2.7,
    "ai_intent": 2.9,
    "ai_audience": 6.3,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content focuses on branching strategies and alternatives (feature flags, progressive rollout), not on frameworks as defined by structured methodologies for Agile, DevOps, or Lean. While the audience overlaps (development teams, technical practitioners), there are no direct references or deep conceptual exploration of frameworks or their adaptation. The discussion is mainly about practices, not frameworks as core guiding structures, so scores are low for mentions, alignment, depth, and intent. No penalties were applied as the content is current and not satirical.",
    "reasoning_summary": "The content discusses branching best practices—relevant to developers—but not frameworks. It highlights development workflow strategies rather than structured Agile, DevOps, or Lean frameworks, so category fit is limited and confidence is low.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "9EP_gF2nD19",
    "category": "Lean Principles",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 32.66,
    "ai_mentions": 1.1,
    "ai_alignment": 3.6,
    "ai_depth": 2.5,
    "ai_intent": 2.6,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content critiques environment-based branching and promotes alternatives such as feature flags and progressive rollouts, aiming for simpler and faster code delivery. While this fits tangentially with Lean ideas—like minimizing complexity (waste) and optimizing flow—it does not explicitly mention Lean Principles, waste reduction, Kaizen, or Lean tools. The discussion is focused on software delivery strategies rather than Lean philosophy or core methods. There is conceptual overlap regarding reducing bottlenecks and improving feedback, but the exploration of Lean is shallow and indirect. The target audience (software delivery teams) aligns somewhat to Lean's practitioner audience, and the content is mostly relevant, but its primary topic is branching strategy rather than Lean Principles.",
    "reasoning_summary": "The content outlines efficient branching strategies and indirectly aligns with Lean's focus on reducing waste and optimizing flow, but Lean Principles are neither directly referenced nor deeply discussed. It’s relevant for practitioners, but its core emphasis is on software branching—not Lean philosophy itself.",
    "level": "Ignored"
  },
  "Scrum": {
    "resourceId": "9EP_gF2nD19",
    "category": "Scrum",
    "calculated_at": "2025-05-16T20:20:24",
    "ai_confidence": 12.96,
    "ai_mentions": 0.3,
    "ai_alignment": 1.5,
    "ai_depth": 2.0,
    "ai_intent": 1.3,
    "ai_audience": 3.0,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is focused on source code branching strategies and deployment practices (feature flags, rollouts). It does not mention Scrum, any Scrum roles, artifacts, events, or principles. Conceptually, there is minimal overlap with Scrum practices, as the focus is on DevOps and release engineering. There's no depth regarding Scrum, and the intent/audience are software developers or release engineers, not Scrum practitioners. The discussion is off-topic for strict Scrum classification.",
    "reasoning_summary": "This content discusses software branching and deployment techniques, not Scrum principles, roles, or events. There's minimal conceptual alignment with Scrum, making it a poor fit for the category. The audience and intent also do not match those of typical Scrum-focused content.",
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "9EP_gF2nD19",
    "category": "Principle",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 46.7,
    "ai_mentions": 2.3,
    "ai_alignment": 5.7,
    "ai_depth": 4.8,
    "ai_intent": 4.5,
    "ai_audience": 7.7,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content critiques environment-based branching, recommending practices like feature flags and progressive rollouts to speed delivery and reduce complexity. While these suggestions align indirectly with principles like value delivery, adaptability, and reducing bottlenecks, the article stops short of explicitly framing recommendations as core guiding principles. There is no direct use of the term 'principle' nor in-depth discussion on the foundational beliefs or rules that shape decision-making. The intent is mainly practical advice, not an exploration of Agile/Lean/DevOps principles themselves. The audience—development teams—is in line, and discussion stays on-topic, but principle alignment remains implicit, with actionable practice as the focus.",
    "reasoning_summary": "This content recommends modern branching strategies and promotes practices that support value delivery and adaptability, but it doesn't explicitly discuss or frame these as principles. Its primary focus is actionable advice, not principle-based reasoning.",
    "level": "Tertiary"
  },
  "Product Owner": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Owner",
    "calculated_at": "2025-05-16T20:20:37",
    "ai_confidence": 13.325,
    "ai_mentions": 0.5,
    "ai_alignment": 1.2,
    "ai_depth": 1.8,
    "ai_intent": 2.2,
    "ai_audience": 2.8,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on code branching strategies, environment-based branching, and recommends technical approaches like feature flags and progressive rollouts. While this can indirectly impact product delivery, there is no mention or exploration of the Product Owner, their accountability, value maximization, prioritization, or stakeholder collaboration. It is aimed at development teams and technical practitioners rather than Product Owners. The content is highly relevant to engineering workflows but not to Product Owner responsibilities.",
    "reasoning_summary": "This content is technical, centered on branching strategies and deployment, without referencing the Product Owner’s accountability or core responsibilities—making fit to the category weak. Its primary audience is developers, not Product Owners.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "9EP_gF2nD19",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 11.06,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 0.6,
    "ai_intent": 1.8,
    "ai_audience": 2.2,
    "ai_signal": 0.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses narrowly on code branching strategies and deployment practices, not on developing or validating a Minimum Viable Product. There are no explicit mentions or in-depth discussions of MVP concepts, nor guidance on hypothesis testing, iteration, or Lean Startup practices. While there is tangential relevance in promoting rapid feedback loops, the central topic is technical process, not MVP. The intended audience (development practitioners) partially overlaps with those interested in MVPs, but the thematic fit is weak.",
    "reasoning_summary": "This content centers on branching and deployment, not MVP. It lacks direct mentions, conceptual depth, or intent related to Minimum Viable Product best practices. Any overlap is incidental, so confidence is very low.",
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "9EP_gF2nD19",
    "category": "Observability",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 41.66,
    "ai_mentions": 2.4,
    "ai_alignment": 4.5,
    "ai_depth": 3.9,
    "ai_intent": 3.8,
    "ai_audience": 8.8,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "Observability is mentioned only briefly, as part of 'feature flags, progressive rollouts, and real-time observability' among modern practices, but not explored or explained in detail. The content centers on branching strategies and deployment, rather than on understanding or implementing observability itself. There is conceptual alignment in the context of DevOps practices and potentially informing feedback loops, but observability is not a principal theme or in-depth focus, hence the moderate to low scores in mentions, alignment, depth, and intent. No penalties were applied as the content is current, positive, and not contradictory.",
    "reasoning_summary": "While the piece references 'real-time observability' among modern practices, it focuses almost entirely on branching strategies. Observability is treated as an adjacent consideration, not a core topic, so confidence that this content fits the Observability category is moderate to low.",
    "level": "Tertiary"
  },
  "Decision Theory": {
    "resourceId": "9EP_gF2nD19",
    "category": "Decision Theory",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 8.8,
    "ai_mentions": 0.7,
    "ai_alignment": 1.4,
    "ai_depth": 0.9,
    "ai_intent": 1.4,
    "ai_audience": 2.3,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content focuses on branching strategies, feature flags, and delivery best practices, not decision theory or its foundational concepts. While it involves making decisions about branching, it neither explicitly references decision theory nor discusses heuristics, probability, behavioural economics, or decision-making models. The discussion is implementation-focused; relevance to decision theory is only superficial in terms of choosing methods but does not delve into the theory or frameworks behind such decisions.",
    "reasoning_summary": "This content centers on technical branching strategies, offering little connection to decision theory concepts or frameworks. Its discussion is practical and implementation-oriented, not theoretical or about decision-making processes under uncertainty. Thus, fit and confidence are very low.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "9EP_gF2nD19",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 63.1,
    "ai_mentions": 2.1,
    "ai_alignment": 7.6,
    "ai_depth": 5.8,
    "ai_intent": 6.7,
    "ai_audience": 8.2,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 63.0,
    "reasoning": "The content indirectly references technical excellence by critiquing environment-based branching and advocating for practices like feature flags and progressive rollouts, which align with efficient modern development. There's strong alignment with continuous delivery and reducing bottlenecks, but the discussion is focused primarily on branching strategies and does not thoroughly explore foundational principles of technical excellence or engineering culture. Direct mention of the category is low. The intended audience is developers seeking high-performing delivery practices, and most of the content is relevant, but it lacks depth in discussing broader technical excellence concepts.",
    "reasoning_summary": "This piece thoughtfully critiques restrictive branching strategies and suggests better ones, aligning with technical excellence goals. While it connects to key principles like faster delivery and workflow efficiency, it doesn’t deeply explore technical excellence itself but is quite relevant for technical practitioners.",
    "level": "Secondary"
  },
  "Software Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Software Development",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 91.3,
    "ai_mentions": 7.3,
    "ai_alignment": 9.7,
    "ai_depth": 8.6,
    "ai_intent": 9.1,
    "ai_audience": 9.4,
    "ai_signal": 9.2,
    "ai_penalties_applied": true,
    "ai_penalty_points": 0.7,
    "ai_penalty_details": "0.7 point penalty to 'mentions' for not directly naming 'Software Development' or SDLC; all other dimensions unpenalized.",
    "final_score": 91.0,
    "reasoning": "The content directly addresses software engineering practices, focusing on modern branching strategies, the drawbacks of environment-based branching, and advocating for feature flags and progressive rollouts. It thoroughly demonstrates an understanding of source control methodologies, code delivery, and optimizing development flow—themes that are central to the Software Development category. However, the text does not use the explicit term 'Software Development' or reference SDLC methodologies by name, warranting a minor deduction on 'Direct Mentions'. The audience is clearly software development teams and practitioners, the discussion is highly focused with minimal digression, and the content intent is to inform and educate on best practices. No aspects are outdated or contradict the category.",
    "reasoning_summary": "This content delivers practical, up-to-date advice on branching strategies, aligns perfectly with software development methodologies, and targets practitioners seeking to improve their workflows. Its relevance and depth strongly match the Software Development category, with only minor deduction for not naming it explicitly.",
    "level": "Primary"
  },
  "Troubleshooting": {
    "resourceId": "9EP_gF2nD19",
    "category": "Troubleshooting",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 32.188,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.5,
    "ai_intent": 3.1,
    "ai_audience": 8.2,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content critiques environment-based branching and recommends alternatives like feature flags. It focuses on development workflow optimization, not the identification or hands-on resolution of technical issues. There’s minimal use of troubleshooting language or techniques, and while the target audience is technical, the core discussion is about strategy rather than diagnosis or problem-solving. Content does not describe methodologies, tools, or case studies regarding troubleshooting, but rather advocates for architectural choices to prevent certain future problems.",
    "reasoning_summary": "This content is more about advocating modern branching strategies than actively diagnosing or resolving technical issues—putting it outside the strict troubleshooting category, though it targets a technical audience. Confidence is low as it doesn't directly address troubleshooting methods.",
    "level": "Ignored"
  },
  "Experimentation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Experimentation",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 28.47,
    "ai_mentions": 1.2,
    "ai_alignment": 3.15,
    "ai_depth": 2.9,
    "ai_intent": 4.1,
    "ai_audience": 6.7,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content centers around branching strategies for software delivery, critiquing environment-based branching and advocating for feature flags and progressive rollouts. While progressive rollouts and feature flags can be tools for experimentation, the main thrust is about code deployment efficiency, not experimentation or hypothesis-driven validation. There is no direct mention or in-depth discussion of experimentation in Agile, nor hypothesis testing or learning from experiments. Relevance to 'Experimentation' is tangential at best, as the discussion remains focused on best practices in code delivery, not systematic testing or Agile improvement through experiment design.",
    "reasoning_summary": "This piece advises on branching strategies and promotes feature flags for better dev workflows, but it’s not focused on experimentation or hypothesis-driven validation in Agile. Its alignment with 'Experimentation' is incidental, not explicit, leading to low confidence for the category.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Evidence Based Management",
    "calculated_at": "2025-05-16T20:20:26",
    "ai_confidence": 32.55,
    "ai_mentions": 0.9,
    "ai_alignment": 4.2,
    "ai_depth": 3.8,
    "ai_intent": 3.7,
    "ai_audience": 5.0,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content focuses on branching strategies, critiquing environment-based branching and promoting feature flags/progressive rollouts for speed and simplicity. While it implicitly relates to some EBM topics like Time to Market and reducing bottlenecks, it lacks direct mention of evidence-based management, does not anchor its recommendations in empirical data or relevant EBM metrics, and is more operational than strategic. The target audience (development teams) fits somewhat, but the discussion does not make explicit connections to using data/evidence to drive management decisions, nor does it reference outcome or value delivery. The piece remains largely at an engineering practice level with only weak thematic ties to EBM’s purpose.",
    "reasoning_summary": "This content critiques traditional branching and suggests modern deployment techniques, which loosely touch on EBM principles like reducing bottlenecks. However, it lacks direct evidence-based framing, strategic focus, or metric-driven discussion needed for EBM classification.",
    "level": "Ignored"
  },
  "Estimation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Estimation",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 6.3,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 1.4,
    "ai_intent": 0.5,
    "ai_audience": 6.2,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content does not mention estimation, Agile estimation practices, or related topics. Its focus is branching strategies, feature flags, and deployment practices—not empirical forecasting, collaborative estimation, or alignment of stakeholder expectations. No techniques or references to planning, data, or risk estimation are present. Briefly, dev teams are the audience, which partially aligns, but all other dimensions show minimal fit.",
    "reasoning_summary": "This content focuses on code branching and deployment, not estimation topics as defined in the category. It doesn't discuss Agile estimation, forecasting, or planning—so it is not a good fit for the Estimation category.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "resourceId": "9EP_gF2nD19",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-16T20:20:25",
    "ai_confidence": 1.6,
    "ai_mentions": 0.0,
    "ai_alignment": 1.0,
    "ai_depth": 2.0,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content exclusively discusses development branching strategies and challenges with environment-based branching, recommending feature flags and progressive rollouts as alternatives. Nowhere are Daily Scrum events, structures, roles, or any Scrum ceremonies mentioned directly or indirectly. The conceptual focus is entirely on code workflow and deployment, targeting engineers and team leads, not Scrum practitioners seeking guidance about Daily Scrum. Signal-to-noise remains low, with no alignment on intended category.",
    "reasoning_summary": "This content is about code branching and deployment strategies, not about Daily Scrum. There's no mention of Scrum ceremonies or daily team check-ins, making it irrelevant to the evaluated category.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Portfolio Management",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 13.84,
    "ai_mentions": 0.25,
    "ai_alignment": 1.3,
    "ai_depth": 1.7,
    "ai_intent": 2.1,
    "ai_audience": 3.2,
    "ai_signal": 3.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is focused on code branching strategies for development teams, specifically criticizing environment-based branching and suggesting alternatives such as feature flags and progressive rollouts. There are no direct mentions or references to portfolio management, its methodologies, or its typical audience. The themes and intent remain technical and team-oriented, lacking alignment with the strategic, portfolio-level topics outlined in the category definition. Signals are slightly higher due to a focused message, but still not contextually relevant to Portfolio Management.",
    "reasoning_summary": "This content targets development teams and code management practices, not portfolio strategies or organizational alignment. It doesn't reference or discuss portfolio management, making it a poor fit for this category.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "9EP_gF2nD19",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-16T20:20:28",
    "ai_confidence": 70.7,
    "ai_mentions": 4.2,
    "ai_alignment": 8.4,
    "ai_depth": 6.8,
    "ai_intent": 7.7,
    "ai_audience": 8.2,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content directly discusses engineering practices related to code delivery, specifically critiquing outdated branching strategies and advocating for modern techniques such as feature flags and progressive rollouts. Its conceptual alignment is strong as it highlights CI/CD best practices and automation, targeting developers and Agile teams. The depth is moderate—while arguments are explained and alternatives suggested, there’s limited step-by-step technical detail. The focus is clear and on-topic, addressing inefficiencies and recommending Agile-aligned engineering principles. No outdated or contradictory references are present, so no penalties were applied.",
    "reasoning_summary": "This content offers valuable engineering practice guidance by critiquing environment-based branching and advocating for modern, Agile-supported deployment methods. It fits the category well, though the discussion stops short of deep technical dives or explicit references.",
    "level": "Secondary"
  },
  "Lean": {
    "resourceId": "9EP_gF2nD19",
    "category": "Lean",
    "calculated_at": "2025-05-16T20:20:31",
    "ai_confidence": 22.45,
    "ai_mentions": 0.6,
    "ai_alignment": 3.7,
    "ai_depth": 2.9,
    "ai_intent": 2.9,
    "ai_audience": 5.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content discusses branching strategies for development teams, critiquing environment-based branching and recommending feature flags and progressive rollouts. However, it does not mention Lean or its concepts directly, nor does it explicitly tie recommendations to Lean principles like value maximization or waste reduction. While minimizing complexity resonates with Lean thinking, the main discussion is about code management practices, not Lean methodologies. There is minor conceptual overlap, but no substantive engagement with Lean frameworks or tools.",
    "reasoning_summary": "This content offers advice on code branching strategies for development teams, focusing on simplification and deployment speed. While reducing waste parallels Lean thinking, the piece doesn't reference Lean principles or methodologies, so its fit is weak and mostly tangential.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "resourceId": "9EP_gF2nD19",
    "category": "Organisational Agility",
    "calculated_at": "2025-05-16T20:20:33",
    "ai_confidence": 63.953,
    "ai_mentions": 2.434,
    "ai_alignment": 7.685,
    "ai_depth": 6.912,
    "ai_intent": 6.857,
    "ai_audience": 7.113,
    "ai_signal": 7.044,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 64.0,
    "reasoning": "The content critiques outdated development practices (environment-based branching) and advocates for feature flags and progressive rollouts to enhance feedback speed and reduce bottlenecks. These themes are aligned with key organisational agility principles, such as enabling quicker responses to change and focusing on outcomes. However, explicit references to organisational agility are absent, and the primary focus remains technical process improvement rather than broader organisational frameworks, leadership, or cultural transformation. The discussion is practical and targeted at development teams, which somewhat fits the category yet does not deeply address organisational structure, leadership, or a cultural shift at an enterprise level.",
    "reasoning_summary": "This resource is relevant to organisational agility as it challenges rigid processes and promotes adaptive practices, though it focuses on technical aspects rather than comprehensive organisational change. Its advice aids agility, but broader cultural and leadership themes are underexplored.",
    "level": "Secondary"
  },
  "Customer Feedback Loops": {
    "resourceId": "9EP_gF2nD19",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 34.35,
    "ai_mentions": 1.2,
    "ai_alignment": 4.0,
    "ai_depth": 3.9,
    "ai_intent": 3.8,
    "ai_audience": 7.1,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content's primary focus is on branching strategies and code deployment practices. It briefly mentions that environment-based branching 'slows feedback loops to a crawl,' but doesn’t expand on mechanisms for gathering, analyzing, or applying customer feedback. There are no detailed discussions of customer feedback processes, integration methods, or explicit customer feedback examples. The intended audience (developers, engineering leads) aligns with the category, but the topic is only tangentially related. Overall, the connection to 'Customer Feedback Loops' is weak and incidental.",
    "reasoning_summary": "This content mainly explores branching and deployment strategies, with only a surface-level mention of feedback loops. It lacks any substantive discussion of customer feedback integration, making it a poor fit for the Customer Feedback Loops category.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 44.35,
    "ai_mentions": 1.1,
    "ai_alignment": 4.3,
    "ai_depth": 4.7,
    "ai_intent": 5.0,
    "ai_audience": 6.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content focuses on branching strategies, specifically criticizing environment-based branching and recommending feature flags and progressive rollouts. While these topics overlap with Agile and have implications for product delivery speed (a value in Agile Product Management), the discussion remains highly technical and oriented toward developers. Direct mentions of Agile or product management concepts are absent, and there is little exploration of broader issues like stakeholder engagement, product owner roles, or prioritization based on customer value. Thoroughness is moderate since the article suggests ways to improve delivery but stays at the process/technical level, not addressing higher-level Agile Product Management priorities.",
    "reasoning_summary": "While this piece discusses practices that may improve delivery agility and customer value, its main focus is technical branching strategies rather than Agile Product Management principles, strategy, or roles. It’s moderately relevant but not a strong fit for the category.",
    "level": "Tertiary"
  },
  "Agile Planning": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Planning",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 54.159,
    "ai_mentions": 1.7,
    "ai_alignment": 6.2,
    "ai_depth": 5.8,
    "ai_intent": 5.3,
    "ai_audience": 7.2,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content critiques environment-based branching and recommends using feature flags and progressive rollouts for better delivery, aligning reasonably with Agile Planning principles like reducing bottlenecks and shortening feedback loops. However, it is focused mainly on source control and deployment—while related to Agile Planning goals, it does not deeply discuss planning methodologies, ceremonies, or adjustments. No explicit Agile terminology or best practices (e.g., sprints, backlogs) are directly named, and the main thrust is around code deployment optimization rather than planning per se. While the audience overlap is high (technical teams interested in agility), and the message supports adaptable, value-driven delivery, the content touches only indirectly on core Agile Planning practices.",
    "reasoning_summary": "This content advocates for deployment strategies that foster agility, such as using feature flags over environment-based branching. While it promotes Agile concepts like reducing bottlenecks and improving feedback, it doesn't deeply engage with core Agile Planning practices. Confidence is moderate.",
    "level": "Tertiary"
  },
  "Evidence Based Leadership": {
    "resourceId": "9EP_gF2nD19",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 14.79,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 2.1,
    "ai_intent": 1.5,
    "ai_audience": 5.5,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content discusses branching strategies and suggests alternatives like feature flags for better software delivery, but never directly mentions evidence-based leadership or relevant frameworks. While it highlights improving feedback loops and operational efficiency, it doesn't reference empirical evidence, leadership decision-making, or data-driven approaches explicitly. The primary focus is technical implementation—not leadership or organizational improvement based on evidence. The intent, depth, and alignment with the category are thus very limited.",
    "reasoning_summary": "This piece centers on technical branching strategies, not on evidence-based leadership principles. While it hints at efficiency and improvement, it doesn't reference data, metrics, or leadership practices, resulting in a low confidence for fit in the Evidence Based Leadership category.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 27.65,
    "ai_mentions": 0.8,
    "ai_alignment": 3.2,
    "ai_depth": 2.9,
    "ai_intent": 3.4,
    "ai_audience": 6.7,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content discusses technical branching strategies, critiquing environment-based branching and advocating for practices like feature flags and progressive rollouts. While this aligns loosely with Agile principles such as delivering value quickly, responding to change, and reducing bottlenecks, the content does not explicitly reference the Agile Manifesto, Agile values, or principles, nor does it deeply explore them. The focus remains on practical DevOps/code management, not on Agile philosophy or its foundational beliefs. There is only a faint conceptual link via increased feedback loops and customer value; however, the main intent, depth, and explicit mentions fall short of the category's standard. The audience may overlap (development teams), but overall the discussion is about process optimization, not Agile values.",
    "reasoning_summary": "This content primarily explains branching strategies and their technical impact on development speed. While it touches on themes like customer value and feedback loops, it doesn't delve into or reference Agile values or principles, so alignment and confidence with the category are low.",
    "level": "Ignored"
  },
  "Change Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Change Management",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 23.47,
    "ai_mentions": 0.3,
    "ai_alignment": 2.2,
    "ai_depth": 2.7,
    "ai_intent": 3.1,
    "ai_audience": 5.6,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses on technical branching strategies and deployment practices in software development, specifically critiquing environment-based branching and suggesting feature flags and progressive rollouts. Change management, per the category definition, involves managing organizational mindset and process transitions, emphasizing cultural and strategic shifts. Here, there is no explicit discussion of change management principles, handling resistance, leadership roles, or alignment with Agile change philosophies. The content briefly encourages reconsidering existing practices, which is tangentially related to change, but lacks depth, alignment, or explicit intent with change management as a discipline. The target audience (development teams) matches partially, but the content is highly technical and narrowly focused, not addressing systemic change. Therefore, the confidence is low.",
    "reasoning_summary": "This content offers practical advice on branching strategies for developers but only loosely relates to change management, mainly in hinting at rethinking established practices. It lacks the broader focus on organizational change, leadership, or stakeholder engagement required to fit the category.",
    "level": "Ignored"
  },
  "Kanban": {
    "resourceId": "9EP_gF2nD19",
    "category": "Kanban",
    "calculated_at": "2025-05-16T20:20:31",
    "ai_confidence": 9.15,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.6,
    "ai_intent": 1.1,
    "ai_audience": 1.0,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content discusses software branching strategies and the drawbacks of environment-based branches, recommending feature flags and progressive deployment. It does not mention Kanban or its principles. While it touches on topics like reducing bottlenecks and improving flow, these are not explored in a Kanban context and are only loosely related concepts. No aspects of Kanban methodology, such as visualization, WIP, or flow management per the Kanban Guide, are present. The audience is technical, some overlap with Kanban practitioners, but the fit is weak. No penalties were applied as the piece does not contradict Kanban, nor is it outdated.",
    "reasoning_summary": "This content centers on branching strategies and feature flags, not Kanban methodology. There are minimal conceptual overlaps, but it lacks any direct reference or substantive discussion of Kanban principles. The fit with the Kanban category is extremely weak.",
    "level": "Ignored"
  },
  "Market Share": {
    "resourceId": "9EP_gF2nD19",
    "category": "Market Share",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 7.35,
    "ai_mentions": 0.0,
    "ai_alignment": 1.1,
    "ai_depth": 1.0,
    "ai_intent": 1.8,
    "ai_audience": 1.9,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses on software development branching strategies, highlighting drawbacks of environment-based branching and advocating for feature flags and progressive rollouts to streamline delivery. There is no explicit mention of market share, nor is the discussion tied to increasing a product's market presence or competitive advantage. The conceptual alignment is minimal: while efficient development may indirectly impact competitiveness, the content does not connect branching strategies with market share outcomes. The depth revolves exclusively around technical process, not strategic market share considerations. The intended audience is technical teams, not strategic or market-oriented stakeholders. Signal-to-noise is moderate, as everything is relevant to the technical topic, but not the market share category.",
    "reasoning_summary": "This content is entirely focused on improving code delivery processes for dev teams, not on strategies for increasing market share or competitive positioning. There is no direct or implied relevance to market share topics, making it a poor fit for this classification.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 4.15,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.6,
    "ai_audience": 1.0,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content discusses code branching strategies, focusing on problems with environment-based branching and recommending feature flags and progressive rollouts. There are no direct or indirect mentions of ATDD, acceptance criteria, or collaboration between stakeholders for test development. The main topics center on delivery workflows, not on practices or principles of Acceptance Test Driven Development. The intent is to inform teams about branching methods, not acceptance criteria or test-driven development.",
    "reasoning_summary": "This content addresses branching strategies and deployment methods, not Acceptance Test Driven Development. It lacks relevant mentions, conceptual links, or in-depth discussion about ATDD, resulting in a very low confidence that it fits the target category.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "9EP_gF2nD19",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-16T20:20:34",
    "ai_confidence": 6.7,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.7,
    "ai_intent": 1.1,
    "ai_audience": 2.6,
    "ai_signal": 1.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content addresses branching strategies in software development, advocating for feature flags and streamlined delivery rather than environment-based branching. It does not mention Open Space Agile or its related principles. No concepts of collective participation, psychological safety, co-creation, or open dialogue are present. The focus is on technical code practices, not on organizational agility, change facilitation, or Open Space Agile methodologies. It targets engineering practitioners interested in development workflow efficiency, not those pursuing Agile transformation via Open Space Technology. The discussion is narrowly technical, with minimal relevance to the category definition.",
    "reasoning_summary": "This content is about software branching strategies and feature flag use, with no mention or substantial alignment to Open Space Agile principles or practices. Its focus is technical, not organizational or Agile transformation oriented, and fits the category very poorly.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "9EP_gF2nD19",
    "category": "Beta Codex",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 29.44,
    "ai_mentions": 0.2,
    "ai_alignment": 3.9,
    "ai_depth": 3.8,
    "ai_intent": 4.5,
    "ai_audience": 5.2,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content focuses on software development practices, mainly critiquing environment-based branching and advocating for more agile technical deployment strategies like feature flags. While it promotes reducing silos and increasing agility—concepts conceptually adjacent to BetaCodex—it never directly mentions BetaCodex principles, organisational design, decentralisation, or human-centric structures. The depth remains superficial and technical, rather than systemic or organisational. Audience fit is slightly above midpoint, as practitioners might overlap, but the messaging isn't specifically for those interested in BetaCodex. No penalties are warranted; the tone is not outdated or contradictory.",
    "reasoning_summary": "This content briefly aligns with BetaCodex by challenging silos and favouring agility, but it's technical, lacks direct category references, and doesn't address decentralised, human-centric organisational design—so confidence in this fit is low.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "9EP_gF2nD19",
    "category": "Deployment Strategies",
    "calculated_at": "2025-05-16T20:20:27",
    "ai_confidence": 84.5,
    "ai_mentions": 7.5,
    "ai_alignment": 9.3,
    "ai_depth": 8.8,
    "ai_intent": 8.6,
    "ai_audience": 8.1,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 84.0,
    "reasoning": "The content criticizes environment-based branching and strongly advocates using deployment strategies like feature flags and progressive rollouts to streamline software delivery. Central ideas directly align with 'Deployment Strategies.' While the explicit term 'Deployment Strategies' is not used, frequent references to techniques such as feature flags and progressive rollouts, and the focus on improving deployment speed and risk management, demonstrate a high conceptual fit. It provides actionable insights and encourages practitioners to rethink their branching and deployment approach for greater efficiency and safety. Depth is good, as it discusses both the problems with environment-based branching and advantages of dynamic exposure methods, but is slightly less than exhaustive. Audience is clearly technical/dev team leads. There are no obsolete practices promoted, nor satirical/critical tone toward the category—any critique targets outdated methods instead. All scores are distinguished, and evidence supports a proportionate, high confidence.",
    "reasoning_summary": "This content urges developers to move away from environment-based branching toward modern deployment strategies like feature flags and progressive rollouts. With actionable advice and a practitioner focus, it strongly fits the 'Deployment Strategies' category and supplies relevant, substantial insights for DevOps teams.",
    "level": "Primary"
  },
  "DevOps": {
    "resourceId": "9EP_gF2nD19",
    "category": "DevOps",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 81.8,
    "ai_mentions": 5.3,
    "ai_alignment": 9.2,
    "ai_depth": 8.7,
    "ai_intent": 7.5,
    "ai_audience": 8.1,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content directly critiques traditional environment-based branching strategies, a technical practice relevant to DevOps. While it doesn't use the term 'DevOps' directly, the concepts—reducing silos, enabling fast feedback, dynamic exposure control via feature flags and rollouts, observability, and eliminating bottlenecks—closely align with core DevOps philosophy, emphasizing automation, flow efficiency, and collaboration. The discussion is sufficiently deep, going beyond superficial mention by challenging outdated methods and recommending modern practices that minimize complexity and improve delivery speed. The primary intent is to inform and persuade teams to adopt practices foundational to DevOps. The target audience is technical (development teams), matching typical DevOps practitioners. The focus is sharp and relevant, with minimal unrelated content. No penalties apply as content is current and supportive.",
    "reasoning_summary": "This content challenges environment-based branching and advocates for practices central to DevOps, like feature flags and fast feedback loops. While the term 'DevOps' isn't used directly, the concepts strongly reflect DevOps values, making it a highly relevant and focused discussion for the category's audience.",
    "level": "Primary"
  },
  "Team Motivation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Team Motivation",
    "calculated_at": "2025-05-16T20:20:31",
    "ai_confidence": 16.74,
    "ai_mentions": 0.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.1,
    "ai_intent": 1.8,
    "ai_audience": 6.5,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content centers on branching strategies and technical practices (feature flags, progressive rollout) for code management efficiency, focusing on velocity and feedback loops. While it addresses team practices and hints at silos and collaboration, there is minimal focus on engagement, ownership, psychological safety, or motivational principles. The target audience is development teams, somewhat aligning, but the main thrust is technical improvement, not motivational dynamics.",
    "reasoning_summary": "This content explains technical strategies for branching but lacks depth on motivation or psychological drivers. While it briefly touches on team collaboration by referencing silos, its primary goal is efficient code delivery, not enhancing team motivation. Thus, it only slightly fits the category.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "9EP_gF2nD19",
    "category": "Scrum Team",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 13.65,
    "ai_mentions": 1.1,
    "ai_alignment": 2.2,
    "ai_depth": 2.7,
    "ai_intent": 1.6,
    "ai_audience": 2.0,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses on branching strategies and code delivery practices for 'development teams' without explicitly referencing the Scrum Team accountability or its definition in the Scrum Guide. While it discusses team-level software delivery processes and collaboration, it does not address the structure, purposes, or responsibilities of a Scrum Team as defined in Scrum. The content is generic and could apply to any software delivery team, with no direct alignment to Scrum Team concepts, making only faint and indirect connection through the mention of 'teams'. No penalties applied as tone and content are not outdated nor critical of Scrum Team accountability.",
    "reasoning_summary": "This content discusses general code branching and delivery for development teams but never addresses the Scrum Team accountability or its unique characteristics. It's generic advice without reference to Scrum Team structure, duties, or distinctions, so alignment with the category is weak.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "9EP_gF2nD19",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-16T20:20:31",
    "ai_confidence": 23.7,
    "ai_mentions": 0.4,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 7.2,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content critiques environment-based branching in software development and promotes alternatives like feature flags and progressive rollouts for more efficient deployments. While it indirectly references concepts such as feedback loops and reducing bottlenecks, it never explicitly discusses Systems Thinking, its principles, or its holistic approach. The focus is on practical version control strategies rather than systems analysis. Therefore, direct mentions, alignment, depth, and intent are all low. Audience alignment and signal-to-noise are higher because the topic is clearly relevant to technical teams. No penalties were necessary.",
    "reasoning_summary": "This content centers on branching strategies and delivery techniques, not Systems Thinking. While there are indirect hints at feedback loops and systemic impacts, the material doesn't explicitly or thoroughly engage with Systems Thinking concepts, leading to a low confidence match.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "resourceId": "9EP_gF2nD19",
    "category": "Working Agreements",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 21.68,
    "ai_mentions": 0.2,
    "ai_alignment": 2.9,
    "ai_depth": 2.5,
    "ai_intent": 2.0,
    "ai_audience": 8.6,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on source code branching strategies and advocates for feature flags and progressive rollouts over environment-based branching. Although it discusses team practices and decision-making, it does not mention working agreements, team norms, or collaborative principles. The main intent is technical guidance about branching, not team interaction frameworks. Minor thematic overlap exists where team processes are discussed, but working agreements are not directly addressed or explored in depth.",
    "reasoning_summary": "This content centers on technical branching strategies, not team norms or working agreements. While it briefly touches on team processes, it doesn’t discuss collaboration principles, making its fit with the Working Agreements category quite weak.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-16T20:20:34",
    "ai_confidence": 54.5,
    "ai_mentions": 2.7,
    "ai_alignment": 6.6,
    "ai_depth": 6.5,
    "ai_intent": 7.0,
    "ai_audience": 7.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content discusses branching strategies, criticizing environment-based branching and advocating for modern alternatives like feature flags and progressive rollout. While not explicitly referencing Application Lifecycle Management (ALM), its focus on code delivery practices and deployment aligns somewhat with ALM's scope, particularly in change management and deployment phases. However, it does not thoroughly explore the full software lifecycle, ALM tools, governance, or compliance. Audience and intent align with practitioners interested in ALM-adjacent practices, but the discussion's depth and direct category alignment are moderate.",
    "reasoning_summary": "This content reviews branching strategies for code deployment, highlighting modern practices that tangentially relate to ALM principles. It's relevant to ALM's deployment and change management stages but lacks a comprehensive lifecycle perspective, resulting in a moderate confidence score.",
    "level": "Tertiary"
  },
  "Sprint Review": {
    "resourceId": "9EP_gF2nD19",
    "category": "Sprint Review",
    "calculated_at": "2025-05-16T20:20:34",
    "ai_confidence": 1.3,
    "ai_mentions": 0.0,
    "ai_alignment": 1.0,
    "ai_depth": 0.5,
    "ai_intent": 2.2,
    "ai_audience": 3.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 1.0,
    "reasoning": "The content is entirely about branching strategies, code delivery, and the use of feature flags and progressive rollout. There are no direct or indirect mentions of Sprint Review, Scrum, or related practices. None of the Sprint Review themes—stakeholder feedback, reviewing increments, Scrum events—are discussed. While the audience is technical and potentially Scrum-adjacent, almost none of the content intersects with the concepts, processes, or purposes of Sprint Review.",
    "reasoning_summary": "This content doesn't address Sprint Review at all—it focuses entirely on version control and deployment practices. There's no mention or exploration of Sprint Review concepts, so it's not a fit for the category.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-16T20:20:37",
    "ai_confidence": 23.96,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 3.5,
    "ai_intent": 2.3,
    "ai_audience": 4.2,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses almost entirely on technical practices around branching strategies and deployment, such as feature flags and progressive rollouts. There are no direct mentions of Agile Leadership, leadership roles, or related principles. Alignment is low; while improving delivery flow can support Agile, leadership concepts are not addressed. Depth is purely technical, with no exploration of leadership behaviors, transformation, or culture-building. Intent is to inform technical teams about modern code management, not to promote or explain Agile Leadership. Audience is primarily developers or DevOps, not leaders or managers. Signal-to-noise is moderate, as the content is focused on the topic but the topic itself does not pertain to Agile Leadership.",
    "reasoning_summary": "This content is technical and centers on code branching, not Agile Leadership. It lacks discussion of leadership roles, empowering teams, or Agile culture—a mismatch for the category. The audience and focus are engineering teams, not leaders, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Test Automation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Test Automation",
    "calculated_at": "2025-05-16T20:20:29",
    "ai_confidence": 16.47,
    "ai_mentions": 0.0,
    "ai_alignment": 2.7,
    "ai_depth": 2.8,
    "ai_intent": 2.5,
    "ai_audience": 4.1,
    "ai_signal": 3.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content never directly mentions or discusses Test Automation or related tools. Its main focus is on software branching strategies, use of feature flags, and deployment best practices. While these topics may overlap with Agile and DevOps conversations (which can include test automation), there is no substantive discussion of test automation principles, practices, frameworks, or tools. The depth and alignment with the 'Test Automation' category are low as the content centers on code delivery and workflow agility, not automated testing. The only slight overlap is the mention of accelerated feedback loops—an adjacent concern to test automation.",
    "reasoning_summary": "This resource focuses on branching and deployment strategies, not test automation. While relevant to Agile/DevOps, it doesn't discuss automated testing principles or tools, resulting in very low category confidence.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "resourceId": "9EP_gF2nD19",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-16T20:20:31",
    "ai_confidence": 67.68,
    "ai_mentions": 2.9,
    "ai_alignment": 7.7,
    "ai_depth": 6.3,
    "ai_intent": 7.8,
    "ai_audience": 6.5,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content tackles environment-based branching, arguing it slows down feedback loops and code delivery—a direct conceptual tie to deployment frequency. It recommends methods like feature flags and progressive rollouts, promoting faster and more frequent deployments. However, 'deployment frequency' is never explicitly named, and the discussion frames branching as a build/deployment optimization mechanism instead of focusing solely on deployment frequency metrics or case studies. Depth is moderate, with the core argument clear but not extensively developed through metrics or examples. The intent is aligned—advising development teams seeking faster releases—but is slightly diluted by the broader focus on workflow rather than pure deployment cadence. The audience is technical but could span both practitioners and leads. The signal is strong, with little off-topic content. No penalties were necessary, as all advice is current and supportive.",
    "reasoning_summary": "This content discusses how environment-based branching hinders fast feedback and recommends strategies—like feature flags and progressive rollouts—that enable quicker, safer releases. While it doesn't mention 'deployment frequency' directly, its practical guidance closely aligns with increasing deployment speed in Agile/DevOps.",
    "level": "Secondary"
  },
  "Site Reliability Engineering": {
    "resourceId": "9EP_gF2nD19",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 38.65,
    "ai_mentions": 1.4,
    "ai_alignment": 4.9,
    "ai_depth": 3.7,
    "ai_intent": 4.3,
    "ai_audience": 6.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content critiques environment-based branching and advocates for feature flags and progressive rollouts to improve code delivery. While feature flags and progressive rollouts are adjacent to SRE topics (supporting reliability indirectly), the content is focused on code branching strategies rather than the principles of Site Reliability Engineering itself. There is no direct mention of SRE or its core practices (SLOs, incident response, etc.), and the discussion is oriented to improving deployment speed, not reliability engineering per se. The audience overlaps with SRE practitioners, but the core intent, alignment, and depth fall short of a robust SRE-focused discussion.",
    "reasoning_summary": "This piece primarily addresses branching strategies and deployment, touching on practices that can support reliability but not engaging with core SRE principles or practices in depth. It may interest SREs but isn't explicitly SRE content.",
    "level": "Ignored"
  },
  "Forecasting": {
    "resourceId": "9EP_gF2nD19",
    "category": "Forecasting",
    "calculated_at": "2025-05-16T20:20:34",
    "ai_confidence": 15.7,
    "ai_mentions": 0.3,
    "ai_alignment": 1.8,
    "ai_depth": 2.1,
    "ai_intent": 2.2,
    "ai_audience": 3.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content discusses branching strategies and the pitfalls of environment-based branching in software development, advocating for feature flags and progressive rollouts for efficient code delivery. There is no mention or discussion of forecasting practices, empirical data analysis, or prediction methods related to Agile or Scrum. While some impacts on delivery speed and feedback loops are mentioned, the content does not connect these to forecasting delivery timelines, risk management, or value optimization. The main intent is to improve release management, not forecasting, and although the audience may overlap with Agile practitioners, the relevance to forecasting remains incidental and indirect at best.",
    "reasoning_summary": "This content explains branching strategies and deployment approaches, focusing on delivery efficiency, not forecasting. It doesn't mention or address forecasting methodologies or empirical prediction in Agile or Scrum, so it has very low relevance to the Forecasting category.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "resourceId": "9EP_gF2nD19",
    "category": "Azure Boards",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 7.41,
    "ai_mentions": 0.0,
    "ai_alignment": 1.6,
    "ai_depth": 1.7,
    "ai_intent": 2.2,
    "ai_audience": 1.9,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses exclusively on code branching strategies, arguing against environment-based branching and recommending feature flags and progressive rollouts. There is no mention of Azure Boards or its Agile project management features, nor alignment with scenario tracking, work items, collaboration, or sprint planning under Azure Boards. While the audience (development teams) could overlap with typical Azure Boards users, the content neither references nor aligns with the explicit domain of Azure Boards. Its relevance is limited to source code management and release strategies, which fall outside the Azure Boards category definition.",
    "reasoning_summary": "The content centers on branching strategies and feature flags for code delivery, without referencing Azure Boards or Agile project management topics. There's minimal alignment or depth relative to the Azure Boards category, resulting in a low confidence fit.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-16T20:20:35",
    "ai_confidence": 27.3,
    "ai_mentions": 0.5,
    "ai_alignment": 2.2,
    "ai_depth": 2.7,
    "ai_intent": 2.8,
    "ai_audience": 7.3,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on technical branching strategies, promoting feature flags and modern deployment methods to improve code delivery speed and feedback loops. While it briefly touches on accelerating feedback and reducing silos, it neither explicitly mentions the Agile Philosophy nor delves into Agile principles, values, or mindset. The main audience is technical/development teams rather than those seeking insights into Agile philosophy. There are no penalties, as the content is current and neutrally toned.",
    "reasoning_summary": "This content is technical and process-oriented, not philosophical. While it values faster feedback, it doesn't explicitly reference Agile or explore its principles. Its core intent is practical branching advice for developers, thus only minimal alignment with Agile Philosophy.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "9EP_gF2nD19",
    "category": "Azure Repos",
    "calculated_at": "2025-05-16T20:20:37",
    "ai_confidence": 23.15,
    "ai_mentions": 0.5,
    "ai_alignment": 2.4,
    "ai_depth": 2.2,
    "ai_intent": 2.7,
    "ai_audience": 7.1,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content discusses branching strategies in development, specifically critiquing environment-based branching and suggesting feature flags and progressive rollout. Despite in-depth coverage of source control concepts, it does not directly reference Azure Repos, Git, or TFVC, nor does it discuss Azure Repos-specific features, policies, or integrations. The concepts are broadly applicable to modern version control platforms. The audience and relevance score moderately, but conceptual and direct mention scores remain low due to the lack of Azure Repos context.",
    "reasoning_summary": "While the content gives thoughtful advice on modern branching strategies for developers, it does not reference Azure Repos or its specific features. Its general nature means it fits the audience but not the focused scope required for the Azure Repos category.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Value Stream Management",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 37.38,
    "ai_mentions": 1.4,
    "ai_alignment": 4.8,
    "ai_depth": 4.2,
    "ai_intent": 3.9,
    "ai_audience": 7.1,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content critiques environment-based branching and promotes practices like feature flags for faster delivery. While it touches on flow of value (by discussing bottlenecks and slowed delivery), it never directly mentions 'Value Stream Management' or its principles. Its primary focus is on branching strategies rather than holistic value stream optimization. Audience fit is decent, as both topics appeal to practitioners seeking efficiency, but the intent is narrowly technical. There's only moderate alignment and depth relating to the core concepts of Value Stream Management.",
    "reasoning_summary": "This content is mainly about branching strategy and software delivery, with only a loose connection to Value Stream Management themes. It discusses value flow and bottlenecks but doesn't explicitly focus on value stream principles, resulting in moderate but not strong confidence for the category.",
    "level": "Ignored"
  },
  "Release Management": {
    "resourceId": "9EP_gF2nD19",
    "category": "Release Management",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 81.45,
    "ai_mentions": 4.3,
    "ai_alignment": 9.2,
    "ai_depth": 8.8,
    "ai_intent": 8.9,
    "ai_audience": 8.4,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content directly explores branching strategies, critiques environment-based branching, and advocates for practices that streamline software delivery through tools like feature flags and progressive rollouts. These topics are highly aligned with core Release Management concerns—specifically, version control, release scheduling, risk reduction, and feedback loops. The discussion is practical and targeted toward practitioners managing code delivery. While 'Release Management' is not mentioned by name, the intent, concepts, and recommendations fit the category well. The signal is strong, though not every paragraph is strictly RM-focused (the closing question is broader), justifying a slightly lower signal score and modest mention score. No penalties were applied.",
    "reasoning_summary": "This content is highly relevant to Release Management, focusing on modern branching strategies, the pitfalls of environment-based branches, and the use of feature flags for better releases. It’s practical, aligned with key RM topics, and directly applicable to technical teams, earning a strong confidence score.",
    "level": "Primary"
  },
  "Business Agility": {
    "resourceId": "9EP_gF2nD19",
    "category": "Business Agility",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 51.475,
    "ai_mentions": 1.8,
    "ai_alignment": 5.7,
    "ai_depth": 4.6,
    "ai_intent": 6.2,
    "ai_audience": 7.3,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 51.0,
    "reasoning": "The content directly addresses development workflows, advocating for practices (feature flags, progressive rollouts) that improve speed and reduce silos, which indirectly supports business agility. However, it does not mention business agility explicitly nor deeply discuss organizational or leadership topics. The main focus is technical process improvement, not business-level agility transformation, so conceptual alignment and depth are moderate. Its primary audience is development teams—not executive or organizational strategists—reducing alignment slightly.",
    "reasoning_summary": "This content focuses on technical branching strategies, indirectly promoting business agility through improved code delivery. While it aligns with principles of agility and efficiency, it lacks explicit discussion of business agility and mainly targets developers, not the broader organizational audience.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Delivery",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 81.1,
    "ai_mentions": 7.2,
    "ai_alignment": 9.5,
    "ai_depth": 8.7,
    "ai_intent": 8.6,
    "ai_audience": 8.2,
    "ai_signal": 7.9,
    "ai_penalties_applied": true,
    "ai_penalty_points": 0.6,
    "ai_penalty_details": "mentions penalized (-0.3) for only implicit category connection; signal penalized (-0.3) since the end is slightly open-ended/community-oriented rather than deeply instructional.",
    "final_score": 81.0,
    "reasoning": "The content critiques environment-based branching and highlights progressive delivery techniques like feature flags and rollouts, which are core to modern product delivery. It thoroughly discusses why old practices slow feedback and value delivery. The alignment and depth are strong—branching strategy is a practical, high-impact topic for product delivery teams. It’s designed for practitioners and decision-makers directly involved in releasing software. Minor penalties applied: few explicit references to 'delivery' and a conversational close, but otherwise focused, current, and relevant.",
    "reasoning_summary": "The piece targets teams improving how code reaches customers, advocating for modern delivery practices over outdated branching. Its strong focus on feedback loops and deployment clarity makes it highly relevant for product delivery audiences, despite minor gaps in direct terminology.",
    "level": "Primary"
  },
  "Cycle Time": {
    "resourceId": "9EP_gF2nD19",
    "category": "Cycle Time",
    "calculated_at": "2025-05-16T20:20:33",
    "ai_confidence": 32.55,
    "ai_mentions": 1.7,
    "ai_alignment": 4.9,
    "ai_depth": 3.6,
    "ai_intent": 4.1,
    "ai_audience": 7.6,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content discusses how environment-based branching strategies can lead to development inefficiency and slow feedback, which tangentially relates to increased Cycle Time. However, Cycle Time is never explicitly defined or directly mentioned, and the primary focus is on branching and deployment strategies. There is minimal depth on Cycle Time as a metric, limiting alignment and depth. The target audience is development teams, which aligns moderately. No penalty was needed.",
    "reasoning_summary": "While the piece explains how branching impacts workflow speed—an indirect link to cycle time—the actual discussion of Cycle Time as a metric is missing. The focus is on branching strategy, not measurement or analysis of Cycle Time itself, resulting in a low but nonzero category fit.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "resourceId": "9EP_gF2nD19",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 78.0,
    "ai_mentions": 4.0,
    "ai_alignment": 8.7,
    "ai_depth": 7.9,
    "ai_intent": 8.0,
    "ai_audience": 9.0,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 78.0,
    "reasoning": "The content critiques environment-based branching—a common but flawed approach—and advocates for practical strategies like feature flags and progressive rollouts, aligning with real-world DevOps practices. It offers actionable guidance and focuses on optimizing delivery workflows, embodying pragmatic thinking's principles. While it doesn't use the term 'pragmatic thinking' directly, the focus is on tangible, actionable solutions for practitioners. The discussion is concise but substantial, slightly limiting depth, but intent, alignment, and audience fit are strong.",
    "reasoning_summary": "This content emphasizes actionable, experience-based advice for development teams, challenging obsolete branching practices and promoting practical DevOps solutions. Though not explicit about 'pragmatic thinking,' its focus on concrete improvements fits the category well.",
    "level": "Secondary"
  },
  "Unrealised Value": {
    "resourceId": "9EP_gF2nD19",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 13.14,
    "ai_mentions": 0.4,
    "ai_alignment": 1.7,
    "ai_depth": 1.7,
    "ai_intent": 2.1,
    "ai_audience": 3.1,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on software branching strategies, particularly arguing against environment-based branches and recommending feature flags and progressive rollouts. While it advocates for accelerated value delivery, it does not mention, define, or deeply explore the Evidence-Based Management concept of Unrealised Value nor does it align with key topics such as market demand, identifying untapped opportunities, or frameworks for measuring additional potential value. The target audience is development teams, not explicitly Evidence-Based Management practitioners. Only a minor, indirect relevance exists in the notion of 'value reaching customers' faster, but this approach does not touch on measuring or managing unrealised opportunities.",
    "reasoning_summary": "This content discusses branching strategies in development but doesn’t address Unrealised Value or its indicators. While it alludes to delivering value faster, it lacks alignment, depth, and intent to the category, resulting in very low confidence that it fits.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 60.7,
    "ai_mentions": 1.8,
    "ai_alignment": 7.4,
    "ai_depth": 6.6,
    "ai_intent": 7.0,
    "ai_audience": 6.2,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content challenges environment-based branching and advocates for practices like feature flags and progressive deployments, which support faster feedback and streamline delivery—elements aligned with Lean Product Development’s emphasis on value, learning, and waste reduction. However, it never directly mentions Lean principles or names Lean Product Development. The discussion is moderately deep, focusing mostly on branching strategies, with supporting arguments touching on waste, complexity, and cycle times—key Lean concerns—but without explicit Lean vocabulary or theoretical framing. The audience (dev teams and practitioners) partially matches practical Lean topics, though the focus is on engineering workflow rather than organizational-level Lean application. There is limited, but relevant, overlap with Lean Product Development.",
    "reasoning_summary": "This content supports Lean Product Development values (reducing waste, faster feedback) by criticizing outdated branching and promoting dynamic release methods, but never explicitly references Lean principles or frameworks. Its practical focus and moderate depth yield moderate confidence for the category.",
    "level": "Secondary"
  },
  "Behaviour Driven Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 13.2,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 0.5,
    "ai_intent": 1.1,
    "ai_audience": 5.1,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses entirely on code branching strategies, highlighting the drawbacks of environment-based branching and advocating for feature flags and progressive rollouts to enable better code delivery. There is no mention, explicit or implicit, of Behaviour Driven Development (BDD) principles, tools, collaboration practices, or its alignment with business objectives. The content is targeted at technical development teams but is not thematically or conceptually aligned with BDD. No penalties were applied as the discussion is not outdated nor contradictory, but its relevance to BDD is minimal.",
    "reasoning_summary": "This piece is about branching strategies and feature flag deployment, not about BDD. There's no direct or indirect discussion of Behaviour Driven Development, so its fit with the category is very low.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "resourceId": "9EP_gF2nD19",
    "category": "Definition of Ready",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 6.85,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 1.2,
    "ai_intent": 1.0,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is entirely focused on branching strategies, particularly the pitfalls of environment-based branching versus approaches like feature flags and progressive rollouts. There is no mention, explicit or implicit, of backlog readiness, Definition of Ready, user story criteria, or sprint planning standards. The content targets technical practitioners, but not in a way aligned with queries about Definition of Ready. Thus, all dimension scores are extremely low, reflecting negligible relevance.",
    "reasoning_summary": "This piece is about branching and deployment strategies, not about Definition of Ready, backlog item criteria, or sprint planning. It lacks direct or thematic relevance, resulting in a very low confidence rating for the requested category.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "9EP_gF2nD19",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-16T20:20:30",
    "ai_confidence": 41.4,
    "ai_mentions": 0.0,
    "ai_alignment": 5.8,
    "ai_depth": 4.9,
    "ai_intent": 4.7,
    "ai_audience": 8.2,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content focuses on branching strategies and advocates for practices that align with faster delivery and reduced complexity, overlapping with technical excellence and empiricism valued in Professional Scrum. However, it never mentions Scrum, Scrum roles, or the Professional Scrum ethos directly. While the advice could support Scrum teams’ ability to deliver incrementally and sustainably, the content primarily targets general development process improvement, not the guiding principles, professional standards, or collaborative constructs central to Professional Scrum. Its audience aligns with practitioners who would benefit from modern, agile-informed approaches, but there is insufficient depth or explicit alignment with Professional Scrum values, accountability, or empiricism to warrant a high score.",
    "reasoning_summary": "This content champions better engineering practices that Agile and Scrum teams can benefit from, but it never mentions Professional Scrum or its principles. Its practical tips are useful for professionals but lack direct connection to the ethos or philosophy of Professional Scrum.",
    "level": "Tertiary"
  },
  "Accountability": {
    "resourceId": "9EP_gF2nD19",
    "category": "Accountability",
    "calculated_at": "2025-05-16T20:20:31",
    "ai_confidence": 14.6,
    "ai_mentions": 0.8,
    "ai_alignment": 2.1,
    "ai_depth": 1.8,
    "ai_intent": 1.7,
    "ai_audience": 3.2,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content exclusively focuses on technical branching strategies and the shift from environment-based branching to modern practices like feature flags and progressive rollouts. There are no direct or substantive references to accountability, outcome ownership, or structural constructs shaping behavior. The main purpose is practical workflow optimization for developers, not discussion of explicit accountabilities. Any loose ties to team delivery performance or silo reduction do not address the core mechanisms of accountability or clarify outcome ownership. The target audience is technical practitioners, overlapping slightly, but the substance remains outside the category’s scope.",
    "reasoning_summary": "This content discusses development branching strategies and code delivery acceleration, not the nature, structure, or impact of accountability in modern work systems. It’s a technical guide with minimal alignment to outcome ownership or explicit accountabilities.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-16T20:20:33",
    "ai_confidence": 16.89,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.6,
    "ai_audience": 4.0,
    "ai_signal": 4.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses exclusively on branching strategies and modern deployment practices, advocating for feature flags over environment-based branching. There is no mention or exploration of Agnostic Agile or its principles, context-driven agility, or critical comparison to agile frameworks. The alignment and depth of discussion on Agnostic Agile itself are minimal; the advice is relevant to agile teams but is not framed in the language or philosophy of Agnostic Agile. The audience is likely agile practitioners, which overlaps somewhat with Agnostic Agile’s target audience, but the content is narrowly technical. There are no penalties, but the absence of topical alignment keeps confidence low.",
    "reasoning_summary": "This content zeroes in on branching techniques for development teams without referencing Agnostic Agile or its philosophy. While relevant to agile practitioners, it doesn't align with or discuss core Agnostic Agile themes, resulting in a low category fit.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "9EP_gF2nD19",
    "category": "Lead Time",
    "calculated_at": "2025-05-16T20:20:35",
    "ai_confidence": 38.55,
    "ai_mentions": 1.8,
    "ai_alignment": 4.5,
    "ai_depth": 3.9,
    "ai_intent": 5.2,
    "ai_audience": 7.1,
    "ai_signal": 5.05,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "Direct mentions of 'Lead Time' are absent—the content talks about how certain branching practices 'slow feedback loops' and create 'bottlenecks before value reaches customers,' which are thematically related but not explicitly tied to the metric Lead Time as defined. Conceptually, it partially aligns, since process bottlenecks and delivery speed impact Lead Time, but the article never defines, measures, or discusses Lead Time directly. The depth is limited to branching patterns and their impact on velocity and delivery smoothness, without delving into metric analysis or tracking. Intent is around process improvement and shipping more efficiently, which overlaps with Lead Time concerns but does not frame them through that lens. The audience is practitioners interested in delivery optimization, which matches the Lead Time audience, and the content is fairly focused with relevant points, albeit not sharply tuned on Lead Time itself. No penalties were applied.",
    "reasoning_summary": "This article relates to Lead Time indirectly by critiquing branching strategies that delay delivery, but it never explicitly discusses or analyzes Lead Time itself. Its focus is on workflow efficiency and feedback speed, making it only partially aligned with the precise Lead Time category.",
    "level": "Ignored"
  },
  "Model": {
    "resourceId": "9EP_gF2nD19",
    "category": "Model",
    "calculated_at": "2025-05-16T20:20:36",
    "ai_confidence": 28.85,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 2.3,
    "ai_intent": 3.5,
    "ai_audience": 7.2,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content focuses on development branching strategies and criticizes environment-based branching, recommending feature flags and progressive rollouts. However, it does not explicitly discuss conceptual models or frameworks as defined by the 'Model' category. While it suggests rethinking deployment approaches, it lacks substantial reference to models (e.g., Cynefin, Three Ways) and only briefly touches on systems concepts (feedback loops, silos). The main intent is practical advice on branching, not on model-driven decision-making, making the alignment and depth with the 'Model' category minimal.",
    "reasoning_summary": "This content advises on practical branching strategies but lacks direct reference to conceptual models or frameworks. Its focus is on code delivery tactics, not the systemic, framework-oriented thinking central to the 'Model' category.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "9EP_gF2nD19",
    "category": "Organisational Change",
    "calculated_at": "2025-05-16T20:20:38",
    "ai_confidence": 18.85,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 2.4,
    "ai_intent": 2.8,
    "ai_audience": 4.1,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content primarily discusses software branching practices, advocating for modern code management approaches (feature flags, progressive rollouts). There are no direct mentions of organisational change, nor substantial conceptual alignment with frameworks or strategies for organisational agility. The focus is technical, targeting development team practices, not organisational transformation. Intent is more about workflow improvements than change management, so the fit under this category is very low.",
    "reasoning_summary": "This piece is focused on coding branch strategies and feature rollouts, not on organisational change. It addresses technical process improvement for developers but doesn’t cover leadership, frameworks, or broader change initiatives, making it a poor fit for the Organisational Change category.",
    "level": "Ignored"
  },
  "Remote Working": {
    "resourceId": "9EP_gF2nD19",
    "category": "Remote Working",
    "calculated_at": "2025-05-16T20:20:39",
    "ai_confidence": 8.95,
    "ai_mentions": 0.1,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 1.1,
    "ai_audience": 1.3,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content solely discusses branching strategies, feature flags, and deployment—technical aspects relevant to development, but with no direct or indirect reference to remote work, distributed teams, or challenges specific to remote Agile environments. All examples and recommendations are about code structure and delivery, not remote working practices, tools, or cultures. The content does not mention collaboration, communication, time zones, or any uniquely remote work aspects. Audience alignment is slightly above minimum as most remote Agile practitioners may be interested, but the lack of category relevance results in very low scores across all dimensions, with no penalties needed.",
    "reasoning_summary": "This content focuses on branching strategies and code delivery with no mention or discussion of remote working practices, tools, or challenges. Its focus is purely technical and not aligned to the Remote Working category.",
    "level": "Ignored"
  },
  "Capability": {
    "resourceId": "9EP_gF2nD19",
    "category": "Capability",
    "calculated_at": "2025-05-16T20:20:32",
    "ai_confidence": 43.45,
    "ai_mentions": 1.7,
    "ai_alignment": 4.8,
    "ai_depth": 4.4,
    "ai_intent": 4.2,
    "ai_audience": 6.2,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content is primarily about branching strategies, specifically arguing against environment-based branching and in favor of feature flags and progressive rollouts. While these practices can be elements of broader technical capability, the article largely focuses on specific techniques, not on the enduring, systemic development of capability as defined. There is little to no explicit mention of 'capability,' nor does the discussion address long-term embedding, organisational impact, or cross-cutting abilities; instead, it remains practical and tool-focused. Audience is developers and team leads, who may care about capabilities, but the framing and depth here are not systemically oriented. Signal is high due to clarity, but alignment and depth with the Capability category remain moderate, leading to a lower confidence score.",
    "reasoning_summary": "This content discusses branching strategies and delivery techniques, focusing on tools and practices rather than deeper, enduring competencies. While relevant to technical teams, it lacks explicit discussion of organisational capabilities, resulting in moderate alignment with the 'Capability' category.",
    "level": "Tertiary"
  },
  "Time to Market": {
    "resourceId": "9EP_gF2nD19",
    "category": "Time to Market",
    "calculated_at": "2025-05-16T20:20:34",
    "ai_confidence": 71.166,
    "ai_mentions": 3.4,
    "ai_alignment": 8.2,
    "ai_depth": 7.9,
    "ai_intent": 7.0,
    "ai_audience": 7.3,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content highlights how environment-based branching slows feedback and delays value delivery, recommending modern practices like feature flags for quicker releases. While 'Time to Market' is not mentioned verbatim, the discussion is conceptually aligned: reducing bottlenecks for faster customer value delivery. The reasoning is moderately detailed (branching, feature flags, bottlenecks), the intent is to help teams optimize delivery speed, and the target audience is practitioners. Some broader process/metrics discussion is lacking, but signal-to-noise is strong and the content is tightly focused on speeding delivery through improved branching strategies.",
    "reasoning_summary": "This content clearly addresses how branching strategies affect delivery speed, advocating for approaches that increase the pace of releasing value. While it doesn’t use 'Time to Market' explicitly, its advice on minimizing bottlenecks is highly relevant for teams aiming to improve Time to Market.",
    "level": "Secondary"
  },
  "Service Level Expectation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-16T20:20:35",
    "ai_confidence": 1.1,
    "ai_mentions": 0.0,
    "ai_alignment": 0.4,
    "ai_depth": 0.3,
    "ai_intent": 0.7,
    "ai_audience": 2.2,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 1.0,
    "reasoning": "The content solely discusses branching strategies, the downsides of environment-based branches, and recommends feature flags for code delivery. There is no direct reference to Service Level Expectation (SLE), its calculation, definition, or application. While the audience is technical, matching Agile practitioners in a general sense, there is no conceptual or thematic alignment with SLE as defined. No penalties were necessary. The confidence score is extremely low, reflecting almost no overlap.",
    "reasoning_summary": "This content focuses on modern branching strategies and deployment practices, without any mention or discussion of Service Level Expectation or its related concepts. Thus, it fits the category very poorly.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "resourceId": "9EP_gF2nD19",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-16T20:20:36",
    "ai_confidence": 23.4,
    "ai_mentions": 0.2,
    "ai_alignment": 3.6,
    "ai_depth": 2.7,
    "ai_intent": 2.3,
    "ai_audience": 8.0,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content briefly hints at Agile principles (e.g., avoiding bottlenecks, shortening feedback loops) but is specifically focused on branching strategies and delivery mechanics, not empirical process control. There are no direct mentions of empirical process control, transparency, inspection, or adaptation. No discussion of Agile theory or key figures, making both alignment and depth weak. The audience is software teams, which matches the category, but the content is off-purpose for empirical process control, with only tangential relevance.",
    "reasoning_summary": "This piece mainly addresses branching and deployment strategy, not empirical process control. While better feedback loops are mentioned, true Agile principles like transparency or adaptation are not explored, so relevance to the category is limited.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "9EP_gF2nD19",
    "category": "Test First Development",
    "calculated_at": "2025-05-16T20:20:37",
    "ai_confidence": 19.45,
    "ai_mentions": 0.1,
    "ai_alignment": 2.8,
    "ai_depth": 2.5,
    "ai_intent": 2.7,
    "ai_audience": 6.1,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content does not mention Test First Development or its core principles. Its focus is on branching strategies, environment management, feature flags, and deployment tactics. While there is faint conceptual overlap in seeking fast feedback and reducing bottlenecks, there is no discussion of defining success criteria, test-first methodologies, or testing practices. The audience overlaps somewhat as both speak to development teams, but the signal-to-noise ratio is low for the Test First Development category.",
    "reasoning_summary": "This content centers on code branching and release strategies rather than Test First Development. While it briefly touches on feedback loops, it doesn't discuss test-first principles, automated testing, or related methodologies, making it a poor fit for the category.",
    "level": "Ignored"
  },
  "Product Validation": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Validation",
    "calculated_at": "2025-05-16T20:20:40",
    "ai_confidence": 16.35,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 4.9,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content focuses on branching strategies, feature flags, and deployment workflows for development teams, with no explicit mention of product validation or testing product ideas with users. While faster feedback loops and progressive rollouts can indirectly support product validation, the discussion does not address user testing, customer feedback integration, or market fit. The target audience is technical, which somewhat aligns, but overall, the content is about engineering practices, not validating product ideas.",
    "reasoning_summary": "This piece mainly addresses engineering workflow optimization, not product validation. It covers branching and release strategies, not user-focused validation or testing, so alignment with the category is low.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "resourceId": "9EP_gF2nD19",
    "category": "Market Adaptability",
    "calculated_at": "2025-05-16T20:20:33",
    "ai_confidence": 68.05,
    "ai_mentions": 4.2,
    "ai_alignment": 7.6,
    "ai_depth": 7.2,
    "ai_intent": 6.7,
    "ai_audience": 7.9,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content critiques environment-based branching as outdated and champions feature flags and progressive rollouts for faster, safer delivery. While it doesn't directly mention 'market adaptability,' it aligns with key DevOps practices (real-time observability, accelerating delivery, improving feedback loops) that underpin a team's ability to respond swiftly to market changes. The discussion is somewhat depthful, focusing on a concrete aspect—branching strategy—and its impact on agility. The audience (development teams/leaders) fits well. However, the explicit term 'market adaptability' is absent, and while the intent is supportive and relevant, it is somewhat focused on a technical nuance. The content’s signal is high, with little off-topic material. No penalties applied as the practices discussed are current and the tone is positive.",
    "reasoning_summary": "This content strongly supports market adaptability by advocating faster, safer delivery practices (feature flags, progressive rollouts) that align with Agile/DevOps principles. While it doesn't explicitly name 'market adaptability,' its focus and audience are relevant, making it a good—though not perfect—fit.",
    "level": "Secondary"
  },
  "Value Stream Mapping": {
    "resourceId": "9EP_gF2nD19",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-05-16T20:20:33",
    "ai_confidence": 8.926,
    "ai_mentions": 0.3,
    "ai_alignment": 1.7,
    "ai_depth": 1.4,
    "ai_intent": 1.3,
    "ai_audience": 2.4,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content discusses branching strategies, feature flags, and reducing bottlenecks in code delivery workflows, which loosely connect to Lean themes of optimizing flow. However, it never directly mentions Value Stream Mapping or its core concepts, tools, or practices. The discussion centers on development workflow, not visualizing or mapping end-to-end value streams. While it addresses value delivery speed, the lack of direct conceptual alignment and depth in VSM context severely limits confidence.",
    "reasoning_summary": "This content focuses on branching strategies and workflow optimization in software delivery, but never discusses Value Stream Mapping directly. It only touches on general lean ideas like reducing bottlenecks, so it's not a good fit for the category.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "resourceId": "9EP_gF2nD19",
    "category": "Automated Testing",
    "calculated_at": "2025-05-16T20:20:34",
    "ai_confidence": 21.85,
    "ai_mentions": 0.5,
    "ai_alignment": 2.7,
    "ai_depth": 3.3,
    "ai_intent": 3.0,
    "ai_audience": 7.1,
    "ai_signal": 5.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content focuses on code branching strategies and the drawbacks of environment-based branching, recommending feature flags and progressive rollouts to improve software delivery speed and safety. While these practices are adjacent to best-practice automated release and deployment (which often include automated testing), there are no explicit mentions of automated testing, its principles, or its tools. The intent, depth, and alignment are moderate at best: while encouraging practices that potentially support better testing workflows (e.g., continuous integration), the content does not discuss test automation itself. The audience is technical, which aligns with the category’s target readers, but the signal-to-noise ratio is moderate due to the lack of sustained automation discussion.",
    "reasoning_summary": "This content discusses branching strategies and deploying with feature flags, closely related to modern delivery but not directly about automated testing. It’s relevant adjacent content, but lacks direct mention or in-depth exploration of testing principles, so confidence is low for the Automated Testing category.",
    "level": "Ignored"
  },
  "Mentoring": {
    "resourceId": "9EP_gF2nD19",
    "category": "Mentoring",
    "calculated_at": "2025-05-16T20:20:36",
    "ai_confidence": 7.6,
    "ai_mentions": 0.5,
    "ai_alignment": 1.3,
    "ai_depth": 0.9,
    "ai_intent": 1.0,
    "ai_audience": 2.1,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses entirely on technical practices for branching strategies and deployment, advocating feature flags and progressive rollouts. There is no mention (direct or indirect) of mentoring, coaching, skill development, or professional growth. The main audience is developers or DevOps practitioners interested in code delivery optimization, not those seeking guidance or coaching in agile leadership or skills. Briefly, it lacks any mentoring-related conceptual alignment or depth.",
    "reasoning_summary": "This content is about technical branching strategies, not mentoring. It neither discusses mentoring roles nor addresses skill development, coaching, or guidance in agile contexts, so it fits the 'Mentoring' category extremely poorly.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "9EP_gF2nD19",
    "category": "Engineering Excellence",
    "calculated_at": "2025-05-16T20:20:35",
    "ai_confidence": 84.16,
    "ai_mentions": 3.25,
    "ai_alignment": 8.85,
    "ai_depth": 7.7,
    "ai_intent": 9.15,
    "ai_audience": 8.65,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 84.0,
    "reasoning": "The content addresses a central engineering practice—branching strategies—directly relevant to coding standards, CI/CD, and streamlined delivery. It critiques outdated methods, suggests modern practices (feature flags, progressive rollout), and urges teams to improve. Explicit category mention is low, but conceptual match and intent are strong, with clear technical focus and audience. Discussion is practical but concise, lacking deep metrics or process detail.",
    "reasoning_summary": "The piece challenges outdated branching, advocating modern practices like feature flags and progressive rollouts for faster, safer delivery. It's well-aligned with engineering excellence, clearly targets technical teams, and encourages better development practices, though it's brief and not deeply technical.",
    "level": "Primary"
  },
  "Definition of Workflow": {
    "resourceId": "9EP_gF2nD19",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-23T22:06:19",
    "ai_confidence": 11.27,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.1,
    "ai_intent": 1.5,
    "ai_audience": 3.3,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content is focused exclusively on branching strategies in software development and critiques environment-based branching while advocating for feature flags and progressive rollouts. There are no direct or indirect mentions of Kanban, Definition of Workflow, or explicit workflow policies. The article discusses 'work in progress' branches, but only as part of a branching philosophy, not as part of agile or Kanban process visualization or management. No details on entry/exit criteria, WIP limits, or collaborative workflow definition. The audience is likely technical development teams (some overlap with agile practitioners), but content is off-scope for the targeted category.",
    "reasoning_summary": "This content analyzes branching strategies and code delivery practices but does not address the Definition of Workflow in Kanban/agile contexts. There’s no substantial alignment with the category’s focus on workflow agreements, policies, or flow visualization.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "9EP_gF2nD19",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-17T16:29:14",
    "ai_confidence": 3.6,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.6,
    "ai_intent": 0.7,
    "ai_audience": 1.7,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content discusses environment-based branching, branching strategies, and the advantages of feature flags and progressive rollout in software delivery. There are no direct or indirect references to Objective Key Results (OKRs), their principles, implementation, or strategic alignment. The intent is purely about DevOps practices, not outcome-focused goal-setting frameworks. No penalties are applied as the content is not outdated or satirical but is off-topic for the OKR category. Audience overlaps slightly only because technical practitioners may care about both topics, but the core subject remains unrelated.",
    "reasoning_summary": "This content is specifically about branching strategies and code deployment using feature flags, with no mention or discussion of OKRs or outcome-based measurement frameworks. Its focus is DevOps practice, not OKR theory, strategy, or application.",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "9EP_gF2nD19",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:03:14",
    "ai_confidence": 23.07,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 3.1,
    "ai_intent": 2.8,
    "ai_audience": 6.1,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses on branching and deployment strategies, primarily targeting development teams. There are no explicit or implicit references to Product Developer accountabilities, role definition, or collective responsibility as defined by modern frameworks. While the audience potentially overlaps (cross-functional teams), the discussion is purely about code delivery practices and does not cover Product Developer-specific concepts like accountability for Increments, integration with Scrum roles, or cross-disciplinary collaboration. There is minimal alignment with the Product Developer category definition.",
    "reasoning_summary": "This content discusses code branching and deployment approaches for development teams, without addressing Product Developer accountabilities, responsibilities, or role definition. Its relevance to the Product Developer category is minimal.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "9EP_gF2nD19",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:03:17",
    "ai_confidence": 7.35,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.6,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses on efficient software branching strategies, specifically critiquing environment-based branching and promoting feature flags and progressive rollouts. It emphasizes collaborative DevOps practices for code delivery but contains no explicit reference to human-AI collaboration, collective intelligence concepts, or AI agent involvement. The discussion centers on team practices in code management, not on human-AI partnerships or the emergent capabilities targeted by the Collective Intelligence category. There is minimal conceptual overlap, as the topic remains within human team processes, albeit with some technical alignment to team-based improvement.",
    "reasoning_summary": "The content addresses software delivery practices for development teams but does not discuss human-AI collaboration or collective intelligence. Its focus is on branching and feature flag strategies, making it only tangentially related to the intended category.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:59",
    "ai_confidence": 69.59,
    "ai_mentions": 2.0,
    "ai_alignment": 7.3,
    "ai_depth": 7.6,
    "ai_intent": 7.8,
    "ai_audience": 7.1,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 70.0,
    "reasoning": "The content never directly mentions 'Agentic Engineering,' resulting in a low 'mentions' score. However, it aligns reasonably well with the category: it argues against traditional, rigid branching strategies that impede agency, emphasizes continuous delivery, faster feedback loops, and recommends progressive rollouts and observability—practices that maximize developer agency and support adaptive, feedback-driven engineering. The exploration isn't deep into theory but substantiates claims by linking branching strategy to systemic impact on team autonomy and feedback, and the intent is closely aligned—encouraging autonomy, empowerment, and improved engineering outcomes. The audience is technical, fitting the category. There’s strong focus, little noise, and no outdated or contradictory tone; penalties are not applicable.",
    "reasoning_summary": "The content advocates for branching and delivery strategies that empower developers and promote fast feedback, aligning closely with Agentic Engineering's themes on agency and adaptive practices, though it lacks explicit references to the category.",
    "level": "Secondary"
  },
  "Agentic Software Delivery": {
    "resourceId": "9EP_gF2nD19",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:08",
    "ai_confidence": 21.36,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 2.5,
    "ai_audience": 5.1,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content discusses modern engineering practices (feature flags, progressive rollouts, and observability) that support fast software delivery, but there is no explicit or implicit discussion of autonomous AI agents, agentic principles, or human-AI synergy. The topic is narrowly focused on branching strategy and deployment mechanics, lacking any substantive alignment with or depth in the Agentic Software Delivery category. There are no outdated practices referenced or a contradicting tone, so no penalties apply. Audience fit is partial since it targets engineering teams, a plausible but not exclusive Agentic Software Delivery audience. Overall, the topic is related to accelerating software delivery but not to agentic or autonomous methods.",
    "reasoning_summary": "This content focuses solely on code branching strategies and modern deployment (feature flags), with no discussion of AI agents or agentic delivery. It does not fit the Agentic Software Delivery category beyond very tangential tooling relevance.",
    "level": "Ignored"
  }
}