{
  "Kanban": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Kanban",
    "calculated_at": "2025-05-07T14:00:17",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 0.0,
    "ai_signal": 0.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is entirely focused on technical guidance for converting legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct or indirect mentions of Kanban, nor any discussion of Kanban principles, practices, or related topics such as visualisation of work, WIP limits, flow management, or continuous improvement. The intent, depth, and audience are all aligned with software engineering and DevOps practices, not Kanban methodology. No penalties were necessary, as the content is not outdated or critical of Kanban—it is simply unrelated. Therefore, the confidence score is 0.",
    "level": "Ignored"
  },
  "DevOps": {
    "resourceId": "2mdv7QE2nIt",
    "category": "DevOps",
    "calculated_at": "2025-08-07T06:10:04",
    "ai_confidence": 71.3,
    "ai_mentions": 3.8,
    "ai_alignment": 8.1,
    "ai_depth": 7.6,
    "ai_intent": 7.4,
    "ai_audience": 8.2,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content focuses on upgrading legacy .NET/ASP.NET projects to SDK-style for improved modern tooling, maintainability, and CI/CD pipeline integration. While 'DevOps' is named only in relation to the Azure DevOps Migration Tools, several concepts closely align with DevOps principles: automation (upgrade assistants, build improvements), building for sustainable delivery, quality (test, CI), and facilitating modernization for future readiness. There is substantial discussion of technical and process changes that increase flow efficiency, reduce silos (by preparing for modern pipelines), and encourage continuous improvement—key DevOps themes. However, the primary focus is on project conversion and engineering best practices rather than explicit DevOps philosophy or cultural transformation, and direct mentions are limited. Discussion of DevOps as a practice/theory and cross-team collaboration is implicit rather than explicit, which holds back a top score.",
    "reasoning_summary": "The content centers on legacy .NET project modernization, featuring automation, CI/CD pipeline readiness, and process improvement—aligning well with DevOps practices, but lacks explicit, deep discussion of DevOps as a philosophy. Fit is partial but relevant.",
    "level": "Secondary"
  },
  "Product Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Management",
    "calculated_at": "2025-05-07T14:00:33",
    "ai_confidence": 13.45,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.7,
    "ai_intent": 1.5,
    "ai_audience": 4.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. It provides detailed, step-by-step instructions for developers and engineering teams on how to modernise their build systems, migrate to Git, and handle specific technical challenges. There is no direct mention of product management, nor are there references to strategic alignment, customer needs, business objectives, or frameworks and methodologies central to product management. The main intent is technical enablement for engineering practitioners, not product managers or strategists. While the content does touch on future readiness and maintainability, these are framed in terms of engineering best practices rather than product management strategy. The audience is primarily technical (developers, DevOps, engineering leads), not product management professionals. The signal-to-noise ratio is high for technical migration, but almost entirely off-topic for product management. Therefore, the confidence that this content fits under the 'Product Management' category is very low.",
    "level": "Ignored"
  },
  "Scrum": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Scrum",
    "calculated_at": "2025-05-07T14:00:40",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 2.0,
    "ai_intent": 2.0,
    "ai_audience": 6.1,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Scrum, Agile, or related frameworks, nor are any Scrum roles, events, or artifacts discussed. The main themes are project migration, build tooling, and modernising .NET development practices, which do not conceptually align with Scrum principles or practices. The depth of discussion is substantial but entirely technical and unrelated to Scrum. The intent is to inform developers about technical migration, not to discuss project management or team collaboration. The audience (developers, technical leads) could overlap with Scrum practitioners, but the content is not targeted at Scrum teams or roles. The signal-to-noise ratio is moderate, as the content is focused but off-topic for Scrum. No penalties were applied, as the content is not outdated or critical of Scrum. The final confidence score is very low, reflecting the near-total lack of relevance to the Scrum category.",
    "level": "Ignored"
  },
  "Product Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Development",
    "calculated_at": "2025-05-07T14:00:46",
    "ai_confidence": 38.45,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 3.8,
    "ai_audience": 5.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. However, it does not directly discuss product development methodologies, iterative learning, customer feedback, or continuous improvement practices. There are no explicit references to Agile, Lean, DevOps (beyond mentioning CI/CD pipelines), or other product development frameworks. The main intent is technical implementation, not product strategy or lifecycle management. The audience is technical (developers/engineers), which partially overlaps with product development practitioners, but the focus is on engineering execution rather than product delivery outcomes. The signal-to-noise ratio is moderate: while the content is focused, it is not on product development as defined. No penalties were applied, as the content is current and not critical or satirical. The confidence score reflects that while there is some indirect relevance (e.g., enabling future readiness and maintainability, which can support product development), the core themes and depth do not align with the category's definition.",
    "level": "Ignored"
  },
  "Leadership": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Leadership",
    "calculated_at": "2025-05-07T14:00:51",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of leadership, nor are leadership concepts, frameworks, or practices discussed. The main themes are technical migration, tooling, and practical steps for engineers, not leadership strategies or organisational change. The depth of discussion is substantial, but entirely technical, not about leadership. The intent is to inform practitioners about technical upgrades, not to inspire or guide leaders. The audience is technical (developers, engineers), not leaders or managers, though some recommendations could be of tangential interest to technical leads. The signal-to-noise ratio is high for technical content, but almost entirely off-topic for leadership. No penalties were applied as the content is current and not satirical or critical of leadership. The low confidence score reflects the near-total lack of alignment with the 'Leadership' category.",
    "level": "Ignored"
  },
  "Lean": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Lean",
    "calculated_at": "2025-05-07T14:01:02",
    "ai_confidence": 7.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.0,
    "ai_intent": 0.8,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of Lean, Lean Thinking, or any Lean methodologies, nor are Lean principles or tools discussed. The main themes are modernisation, tooling, and migration strategies for .NET projects, not process improvement, waste reduction, or value stream mapping. While the content does touch on making engineering systems 'simpler, more maintainable, and ready for what’s next,' this is in the context of software project structure and not Lean's continuous improvement or waste elimination. The audience is technical (developers/engineers), which could overlap with Lean practitioners, but the content is not targeted at Lean topics. The signal-to-noise ratio is high for its intended topic (project conversion), but not for Lean. No penalties were applied as the content is not outdated or satirical. Overall, the confidence that this content fits under the Lean category is extremely low.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Engineering Excellence",
    "calculated_at": "2025-05-07T14:00:57",
    "ai_confidence": 91.7,
    "ai_mentions": 7.6,
    "ai_alignment": 9.5,
    "ai_depth": 9.2,
    "ai_intent": 9.0,
    "ai_audience": 8.7,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content is a detailed, practical guide to upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on modernising engineering practices. It directly addresses best practices in codebase maintenance, build automation, CI/CD integration, and technical debt reduction—core themes of Engineering Excellence. While the term 'engineering excellence' is not explicitly named, the entire discussion is conceptually and practically aligned with the category, emphasising quality, maintainability, and future readiness. The depth is high, with step-by-step instructions, tool recommendations, and troubleshooting advice. The intent is clearly to inform and empower engineers to improve their development processes. The audience is technical (developers, engineering teams), and the content is highly focused with minimal off-topic material. No penalties are applied, as the advice is current, constructive, and fully in line with the category's framing. The confidence score reflects the strong alignment, depth, and relevance, with a slight deduction in 'mentions' due to the lack of explicit category naming.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Engineering Excellence category. It offers in-depth, actionable guidance on modernising .NET projects, focusing on best practices, maintainability, and process improvement. The technical depth and practical advice directly support engineering teams aiming for higher quality and efficiency, even though the category name isn’t explicitly mentioned."
  },
  "Technical Leadership": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-07T14:00:28",
    "ai_confidence": 38.85,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 3.8,
    "ai_audience": 5.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content is a detailed technical guide on migrating legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides step-by-step instructions, practical tips, and troubleshooting advice for developers and engineers. However, it does not directly discuss technical leadership concepts such as team guidance, agile best practices, mentoring, or fostering collaboration. There are no explicit mentions of technical leadership or its principles. The main intent is technical enablement and process improvement at the project level, not leadership or team dynamics. The audience is technical (developers, engineers, possibly technical leads), but the focus is on hands-on migration rather than leadership strategy. The signal-to-noise ratio is moderate, as the content is focused but not on the leadership aspects defined by the category. No penalties were applied, as the content is current and not satirical or critical. Overall, while the content may be useful for technical leaders, it does not align closely with the core meaning of the 'Technical Leadership' category.",
    "level": "Ignored"
  },
  "Agile Strategy": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-07T14:01:09",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on practical steps, tools, and troubleshooting for modernising build systems and improving maintainability. There are no direct mentions of Agile, Agile Strategy, or related terminology. Conceptually, the content is only tangentially related to Agile Strategy: while modernising tooling can support agility and future readiness, the article does not discuss organisational vision, strategic planning, continuous value delivery, or the integration of Agile principles at a strategic level. The depth is strong for technical migration but not for Agile Strategy. The intent is to inform engineers and technical leads about project conversion, not to guide strategic Agile transformation. The audience is technical (developers, build engineers), not executives or strategists. The signal-to-noise ratio is high for its technical purpose but low for Agile Strategy relevance. No penalties were applied, as the content is current and not critical or satirical. Overall, the confidence that this content fits the 'Agile Strategy' category is very low.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Lean Startup",
    "calculated_at": "2025-05-07T14:01:13",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 2.0,
    "ai_audience": 4.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Lean Startup, its principles, or related terminology (score: 0.0). The conceptual alignment is extremely weak; the content is about software engineering practices for modernising project structure, not about iterative business validation, MVPs, or build-measure-learn cycles (score: 1.2). The depth of discussion is substantial for its own topic (project conversion), but there is no exploration of Lean Startup concepts (score: 1.0). The intent is to inform developers about technical migration, not to support or discuss Lean Startup methodology (score: 2.0). The audience is technical practitioners (developers, DevOps), which only partially overlaps with Lean Startup's typical audience of entrepreneurs and product innovators (score: 4.1). The signal-to-noise ratio is moderate for its own topic, but almost entirely off-topic for Lean Startup (score: 2.0). No penalties were applied, as the content is not outdated or critical of Lean Startup. The final confidence score is very low, reflecting that the content does not fit the Lean Startup category in any meaningful way.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Backlog Refinement",
    "calculated_at": "2025-05-07T14:01:18",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 2.0,
    "ai_intent": 2.0,
    "ai_audience": 4.0,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of backlog refinement, Agile, Scrum, or related practices. The main themes are technical migration, build tooling, and project file management, which do not conceptually align with backlog refinement as defined. The depth of discussion is substantial, but it is entirely about project conversion, not about clarifying, prioritising, or preparing backlog items. The intent is to inform engineers about technical upgrades, not to support backlog refinement or Agile processes. The audience is technical (developers, DevOps), which could overlap with Agile practitioners, but the content is not tailored to Agile roles or ceremonies. The signal-to-noise ratio is high for its topic, but the topic is not relevant to backlog refinement. No penalties were applied, as the content is not outdated or critical of the category; it is simply unrelated. The low confidence score reflects the complete lack of direct or indirect relevance to backlog refinement.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Backlog",
    "calculated_at": "2025-05-07T14:01:22",
    "ai_confidence": 7.8,
    "ai_mentions": 0.2,
    "ai_alignment": 1.5,
    "ai_depth": 1.7,
    "ai_intent": 0.8,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, tooling, and project structure, with practical steps and recommendations for class libraries and web apps. There are no direct mentions of the Product Backlog, nor does the content discuss backlog management, prioritisation, refinement, or any Agile/Scrum concepts. The main intent is technical enablement for engineering teams, not backlog or Agile process improvement. The audience is technical practitioners (developers, DevOps), which could overlap with Product Backlog stakeholders, but the content is not aimed at Product Owners or Agile teams managing a backlog. The signal-to-noise ratio is high for its technical purpose, but entirely off-topic for Product Backlog. No penalties were applied as the content is current and not critical or satirical. The low confidence score reflects the near-total lack of alignment with the Product Backlog category.",
    "level": "Ignored"
  },
  "Continuous Integration": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Continuous Integration",
    "calculated_at": "2025-05-07T14:01:28",
    "ai_confidence": 54.85,
    "ai_mentions": 2.2,
    "ai_alignment": 5.7,
    "ai_depth": 5.9,
    "ai_intent": 5.5,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "Direct Mentions (2.2): The content only briefly references CI directly (e.g., 'This is not the time to skip CI' and 'Better integration with modern CI/CD pipelines'), but does not focus on it as a main topic. Conceptual Alignment (5.7): The main theme is upgrading .NET projects to SDK-style, with some mention of how this enables or improves CI/CD pipeline integration, but the core focus is on project structure and migration, not CI principles or practices. Depth of Discussion (5.9): There is some depth regarding how SDK-style projects facilitate modern build and CI/CD workflows, but the discussion is not sustained or detailed about CI itself. Intent/Purpose Fit (5.5): The primary intent is to guide legacy project migration, with CI as a secondary benefit, not the main purpose. Audience Alignment (7.1): The content targets technical practitioners (developers, build engineers) who are likely to be interested in CI, but the focus is broader (project migration, build tooling). Signal-to-Noise Ratio (7.3): The content is focused and technical, but only a small portion is directly relevant to CI. No penalties were applied, as the content is current and does not contradict CI principles. The final confidence score reflects that while CI is mentioned and somewhat relevant, it is not the main subject or deeply explored.",
    "level": "Tertiary"
  },
  "Scrum Values": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Scrum Values",
    "calculated_at": "2025-05-07T14:01:35",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 2.0,
    "ai_audience": 5.1,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Scrum Values or any of the five key values (commitment, courage, focus, openness, respect). The main ideas revolve around technical migration steps, tooling, and practical advice for developers, with no conceptual alignment to Scrum Values or their application within a Scrum Team. The depth of discussion is entirely technical, with no exploration of team dynamics, values, or Agile philosophy. The intent is to inform and guide practitioners on project conversion, not to discuss or promote Scrum Values. The audience is technical practitioners, which could overlap with Scrum teams, but the content is not tailored to Scrum or Agile audiences specifically. The signal-to-noise ratio is moderate, as the content is focused but not on the relevant category. No penalties were applied, as the tone is neutral and the content is current. The final confidence score is very low, reflecting the near-total lack of relevance to the 'Scrum Values' category.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Lean Principles",
    "calculated_at": "2025-05-07T14:01:40",
    "ai_confidence": 23.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There are no direct mentions of Lean Principles, Lean thinking, waste reduction, Kaizen, or any Lean-specific tools or terminology. While the content does touch on making processes simpler and more maintainable (which could be loosely associated with efficiency and value), it does not explicitly or conceptually align with Lean Principles as defined. The main intent is technical migration, not process optimisation in the Lean sense. The audience (developers, technical leads) could overlap with those interested in Lean, but the content is not targeted at Lean practitioners or process improvement strategists. The signal-to-noise ratio is moderate, as the content is focused but not on Lean. No penalties were applied as the content is current and not critical of Lean. Overall, the confidence that this content fits under 'Lean Principles' is very low.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Definition of Done",
    "calculated_at": "2025-05-07T14:01:45",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.5,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It covers migration steps, tooling, debugging, and practical recommendations for modernising project files. There is no direct mention of the 'Definition of Done' or its core concepts such as shared criteria for completeness, Agile/Scrum practices, or quality gates. The main intent is technical enablement for project upgrades, not establishing or discussing completion criteria or team alignment on quality. The audience (developers, technical leads) could overlap with those interested in Definition of Done, but the content is not targeted at DoD practices. The signal-to-noise ratio is high for its own topic, but almost entirely off-topic for DoD. No penalties were applied as the content is current and not critical or satirical. The very low scores across all dimensions reflect the near-total lack of relevance to the Definition of Done category.",
    "level": "Ignored"
  },
  "Estimation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Estimation",
    "calculated_at": "2025-05-07T14:01:51",
    "ai_confidence": 2.7,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 0.4,
    "ai_audience": 1.0,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of estimation, Agile, Scrum, or any related estimation techniques, empirical data, or collaborative planning. The main themes are migration, tooling, and modernisation of project structures, not forecasting, uncertainty management, or team-based estimation. The audience (developers and technical leads) could overlap with those interested in estimation, but the content is not targeted at estimation practices. The signal-to-noise ratio is low for the Estimation category, as nearly all content is off-topic. No penalties were applied, as the content is not outdated or satirical, but it is almost entirely irrelevant to the Estimation category. The very low confidence score reflects the near-total lack of alignment with the Estimation classification.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-07T14:01:54",
    "ai_confidence": 0,
    "ai_mentions": 0,
    "ai_alignment": 0,
    "ai_depth": 0,
    "ai_intent": 0,
    "ai_audience": 0,
    "ai_signal": 0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is a technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on build tooling, project structure, migration steps, and debugging tips. There are no direct or indirect mentions of Service Level Expectation (SLE), nor any discussion of Agile, Scrum, Kanban, or related flow metrics. The content does not address SLE's definition, calculation, application, or improvement, nor does it target the audience or intent described in the SLE category. All scoring dimensions are set to zero, and no penalties are applied, as the content is simply unrelated to the category.",
    "level": "Ignored"
  },
  "Test Automation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Test Automation",
    "calculated_at": "2025-05-07T14:01:59",
    "ai_confidence": 23.7,
    "ai_mentions": 1.2,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files, discussing tooling, build system improvements, and migration strategies. There is a single, brief mention of testing: 'Test thoroughly. Rebuild, run tests, and make sure everything resolves. This is not the time to skip CI.' However, this is a passing reference and not a substantive discussion of test automation principles, frameworks, or practices. The main themes are project structure, build tooling, and migration—not automating software testing. The audience is technical and overlaps with those interested in test automation, but the content itself is not aligned with the category. The signal-to-noise ratio is moderate, as most of the content is relevant to project migration, not test automation. No penalties were applied, as the content is current and not critical of the category. The low confidence score reflects the lack of direct relevance and depth regarding test automation.",
    "level": "Ignored"
  },
  "Time to Market": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Time to Market",
    "calculated_at": "2025-05-07T14:02:05",
    "ai_confidence": 23.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There is no direct mention of 'Time to Market' or its associated metrics (lead time, cycle time, etc.), nor is there an explicit discussion of how these upgrades impact the speed of delivering value to customers. While some benefits (e.g., faster builds, easier CI/CD integration) could indirectly support improved Time to Market, these are not framed or discussed in that context. The main intent is technical enablement, not process optimisation for delivery speed. The audience (developers, technical leads) overlaps with those interested in Time to Market, but the content's focus is not on EBM or delivery efficiency. The signal-to-noise ratio is high for its technical purpose, but low for Time to Market relevance. Therefore, the confidence score is low, reflecting only incidental and indirect alignment.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-07T14:02:16",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 2.0,
    "ai_depth": 2.5,
    "ai_intent": 2.0,
    "ai_audience": 4.0,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Behaviour Driven Development (BDD), nor are any BDD principles, practices, or tools discussed. The main focus is on project structure, build tooling, and migration strategies, which are unrelated to BDD's core themes of aligning development with business objectives, stakeholder collaboration, or writing user stories and acceptance criteria. The depth and intent are technical and migration-focused, not process or behaviour-driven. The audience is technical (developers, DevOps), which could overlap with BDD practitioners, but the content is not aimed at BDD-specific concerns. The signal-to-noise ratio is moderate, as the content is focused but entirely off-topic for BDD. No penalties were applied, as the content is current and not critical or satirical. The very low confidence score reflects the complete lack of BDD relevance.",
    "level": "Ignored"
  },
  "Remote Working": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Remote Working",
    "calculated_at": "2025-05-07T14:02:30",
    "ai_confidence": 7.2,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 0.2,
    "ai_audience": 0.2,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses tooling, migration steps, and technical challenges, but does not mention remote working, distributed teams, or Agile practices in a remote context. There are no direct or indirect references to remote collaboration, remote Agile ceremonies, or tools for distributed teams. The audience is technical (developers, engineers), but the intent and substance are entirely about project file modernisation and not about remote working. The signal-to-noise ratio is low for the Remote Working category, as all content is off-topic for this classification. No penalties were applied, as the content is not outdated or critical of the category; it is simply unrelated.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-07T14:02:44",
    "ai_confidence": 8.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.9,
    "ai_intent": 1.0,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides detailed, step-by-step instructions, practical tips, and troubleshooting advice for developers and engineering teams. There is a single, indirect mention of 'customer' in the opening anecdote, but this refers to a client in a consulting context, not to customer satisfaction as defined by the category. The main themes are technical migration, build system modernisation, and engineering best practices, with no discussion of measuring, enhancing, or aligning with customer happiness, feedback, or experience. There are no references to customer satisfaction metrics, feedback loops, or Agile/DevOps customer-centric practices. The intent is to inform practitioners about technical upgrades, not to explore or improve customer satisfaction. The audience is technical (developers, engineers), which partially overlaps with the category's audience, but the content is not framed around customer satisfaction outcomes. The signal-to-noise ratio is high for its technical purpose, but almost none of the content is relevant to customer satisfaction. No penalties were applied, as the content is current and not critical or satirical. The very low scores across all dimensions reflect the near-total absence of customer satisfaction discussion, resulting in a very low overall confidence score.",
    "level": "Ignored"
  },
  "Pragmatic Thinking": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-07T14:02:50",
    "ai_confidence": 92.7,
    "ai_mentions": 7.6,
    "ai_alignment": 9.7,
    "ai_depth": 9.3,
    "ai_intent": 9.2,
    "ai_audience": 8.8,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content is a detailed, experience-driven guide to upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on practical, real-world problem-solving. It directly references 'pragmatic reality' and repeatedly emphasises practical decision-making, trade-offs, and actionable steps, which aligns closely with the Pragmatic Thinking category. The main ideas are about navigating complexity, applying lessons learned, and making evidence-based, context-sensitive choices (e.g., when to convert, when to leave legacy code as-is). The depth is high, with step-by-step instructions, tool recommendations, and troubleshooting advice. The intent is to inform and empower practitioners facing similar challenges, matching the category's audience. The signal-to-noise ratio is strong, with minimal filler and a clear focus on actionable guidance. There are no outdated practices or contradictory tones; the advice is current and constructive. No penalties were applied. The confidence score is high due to the strong conceptual alignment, depth, and practical focus, with only a slightly lower score for direct mentions (as 'pragmatic thinking' is referenced more in spirit and language than as a formal term).",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the Pragmatic Thinking category. It offers hands-on, experience-based advice for upgrading legacy .NET projects, focusing on real-world challenges and practical solutions. The guide is clear, actionable, and tailored for professionals seeking effective, context-aware strategies, making it highly relevant for this category."
  },
  "Software Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Software Development",
    "calculated_at": "2025-05-07T14:02:56",
    "ai_confidence": 97.2,
    "ai_mentions": 8.7,
    "ai_alignment": 9.8,
    "ai_depth": 9.6,
    "ai_intent": 9.5,
    "ai_audience": 9.2,
    "ai_signal": 9.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 97.0,
    "reasoning": "The content is a comprehensive, technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, which is a highly relevant and current software engineering practice. Direct mentions of software development concepts are frequent and explicit, including references to CI/CD, version control migration (TFVC to Git), code quality tools, build systems, and project structure modernisation. The conceptual alignment is extremely strong, as the entire discussion revolves around improving software engineering outcomes through modern methodologies and tooling. The depth is substantial, with step-by-step instructions, code snippets, troubleshooting advice, and nuanced recommendations for different project types (class libraries vs. web apps). The intent is clearly to inform and support practitioners in adopting best practices for maintainable, future-ready software systems. The audience is technical, targeting software engineers, architects, and DevOps professionals. The signal-to-noise ratio is high, with minimal digression and a strong focus on actionable guidance. No penalties are warranted, as the content is up-to-date, methodologically sound, and not critical or satirical. The final confidence score reflects the strong, multi-dimensional fit with the Software Development category.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Software Development category. It offers in-depth, practical guidance on modernising .NET projects, directly addressing current engineering practices and tools. The technical focus, actionable steps, and clear targeting of software professionals make it highly relevant and valuable for its intended audience."
  },
  "Continuous Delivery": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-07T14:03:01",
    "ai_confidence": 41.85,
    "ai_mentions": 2.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 4.5,
    "ai_audience": 4.0,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files, with a focus on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There is a brief mention of 'better integration with modern CI/CD pipelines' as a benefit of SDK-style projects, but Continuous Delivery is not a central theme. The main focus is on project structure, migration steps, and technical troubleshooting, not on the principles, practices, or cultural aspects of Continuous Delivery. There is no substantive discussion of automation, incremental delivery, rapid feedback, or deployment strategies. The audience is technical and could overlap with those interested in Continuous Delivery, but the content is not tailored to that topic. The signal-to-noise ratio is moderate, as most content is relevant to project migration rather than Continuous Delivery. No penalties were applied, as the content is current and not critical of the category. Overall, the confidence score is low, reflecting that Continuous Delivery is only tangentially referenced and not substantively discussed.",
    "level": "Tertiary"
  },
  "Company as a Product": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Company as a Product",
    "calculated_at": "2025-05-07T14:03:07",
    "ai_confidence": 8.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.9,
    "ai_intent": 0.8,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. It provides detailed, step-by-step instructions for modernising build systems, improving CI/CD integration, and handling legacy dependencies. However, it does not mention or discuss the 'Company as a Product' concept, nor does it address organisational strategy, customer-centric organisational design, or cross-functional collaboration at the company level. The main audience is technical practitioners (developers, engineers) rather than organisational strategists or executives. The content is highly focused and relevant to its technical topic, but it is almost entirely unrelated to the CaaP category. Therefore, all dimension scores are very low, with only minor variation to avoid identical values. The final confidence score is extremely low, reflecting the near-total lack of alignment with the 'Company as a Product' category.",
    "level": "Ignored"
  },
  "Agile Values and Principles": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-07T14:03:16",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.5,
    "ai_audience": 0.8,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Agile values, principles, or the Agile Manifesto. The main themes are technical migration, modernisation, and practical engineering tips, not the foundational beliefs or guiding principles of Agile. There is a minor conceptual overlap in the sense that the content encourages future readiness, maintainability, and adaptability, which are tangentially related to Agile's emphasis on adaptability and continuous improvement. However, these are not discussed in the context of Agile philosophy, values, or principles. The depth of discussion is entirely technical, with no exploration of Agile concepts, team dynamics, or customer collaboration. The intent is to inform practitioners about technical migration, not to foster understanding of Agile values. The audience is technical (developers, engineers), which could overlap with Agile practitioners, but the content is not tailored to Agile-specific concerns. The signal-to-noise ratio is high for its technical purpose, but almost entirely off-topic for Agile Values and Principles. No penalties were applied as the content is current and not critical or satirical. The final confidence score is very low, reflecting the near-total absence of relevant Agile content.",
    "level": "Ignored"
  },
  "Market Adaptability": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Market Adaptability",
    "calculated_at": "2025-05-07T14:03:22",
    "ai_confidence": 54.25,
    "ai_mentions": 1.2,
    "ai_alignment": 6.7,
    "ai_depth": 6.9,
    "ai_intent": 6.0,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. While it thoroughly covers modernisation steps, tooling, and practical migration advice, it does not directly discuss or frame these actions in terms of 'market adaptability' or the explicit principles of Agile, DevOps, or Lean. There are indirect connections: modernising build systems and enabling CI/CD pipelines can support adaptability, but the content's main focus is technical migration, not organisational agility or market responsiveness. There are no explicit mentions of 'market adaptability' or its synonyms, and the discussion of Agile, DevOps, or Lean is only implicit (e.g., references to CI/CD, future readiness, and maintainability). The depth is strong for technical migration, but only moderate for the category. The intent is to inform practitioners (developers, technical leads) about project upgrades, which partially overlaps with the category's audience but is not a direct match for those seeking market adaptability strategies. The content is highly focused and relevant to its technical topic, with little off-topic material. No penalties were applied, as the content is current and not critical or satirical. The final confidence score reflects a moderate, indirect fit: the technical improvements described can enable market adaptability, but the content does not explicitly address or deeply explore the category's core themes.",
    "level": "Tertiary"
  },
  "Agile Product Operating Model": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-05-07T14:03:28",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.6,
    "ai_depth": 1.8,
    "ai_intent": 2.1,
    "ai_audience": 4.2,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of the Agile Product Operating Model (APOM) or its principles. The main themes are technical migration, build tooling, and project file modernisation, not organisational change, product-centricity, or agile product management. There is minimal conceptual alignment: while the content briefly touches on making engineering systems 'simpler, more maintainable, and ready for what’s next,' this is a generic modernisation goal and not specific to APOM. The depth of discussion is technical and detailed, but entirely about project conversion, not about agile product operating models, governance, or organisational structure. The intent is to inform engineers about technical upgrades, not to discuss or promote APOM. The audience is technical practitioners (developers, build engineers), which only partially overlaps with the APOM audience (which may include product leaders, strategists, and organisational change agents). The signal-to-noise ratio is high for its technical purpose, but almost entirely off-topic for APOM. No penalties were applied, as the content is not outdated or critical of APOM; it is simply unrelated. The low confidence score reflects the near-total lack of relevance to the Agile Product Operating Model category.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Discovery",
    "calculated_at": "2025-05-07T14:03:36",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 0.6,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It provides detailed, step-by-step instructions, tooling recommendations, and troubleshooting tips for engineers and developers. \n\nDirect Mentions: There are no explicit references to 'Product Discovery' or its key terms (e.g., user research, customer needs, feature validation). The content is entirely about technical migration and modernisation.\n\nConceptual Alignment: The main themes are technical implementation, project structure, and build tooling. There is no discussion of methodologies for identifying customer needs, defining product features, or validating product ideas. The closest alignment is the mention of 'future readiness' and 'making your engineering system simpler, more maintainable, and ready for what’s next,' but this is about technical preparedness, not discovery.\n\nDepth of Discussion: The content is deep and thorough, but only in the context of technical migration. There is no exploration of discovery practices, user feedback, or feature prioritisation.\n\nIntent/Purpose Fit: The intent is to instruct on technical upgrades, not to inform or support product discovery activities. The purpose is not aligned with the category.\n\nAudience Alignment: The target audience is technical practitioners (developers, engineers) focused on implementation, not product managers or discovery teams.\n\nSignal-to-Noise Ratio: The content is focused and relevant to its technical topic, but almost none of it is relevant to Product Discovery.\n\nNo penalties were applied, as the content is current and does not contradict the category's framing. The very low confidence score reflects the near-total lack of overlap with Product Discovery.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-07T14:03:41",
    "ai_confidence": 7.6,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 0.9,
    "ai_audience": 2.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a highly technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of entrepreneurship or related terminology. The main themes are technical migration, tooling, and engineering best practices, not innovation, risk-taking, value creation, or entrepreneurial mindset. The depth is substantial but entirely within the technical domain, with no exploration of business strategy, startup growth, or entrepreneurial challenges. The intent is to inform developers and technical leads about modernising software projects, not to address entrepreneurial concerns. The audience is technical practitioners, not entrepreneurs or business strategists. The signal-to-noise ratio is high for technical content but almost entirely off-topic for entrepreneurship. No penalties were applied as the content is current and not satirical or critical of entrepreneurship. The very low confidence score reflects the near-total lack of alignment with the entrepreneurship category.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-05-07T14:03:47",
    "ai_confidence": 7.2,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 0.9,
    "ai_intent": 1.0,
    "ai_audience": 2.0,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on practical steps, tooling, and troubleshooting for modernising project files and build systems. There are no direct mentions of Hypothesis Driven Development or its core concepts such as formulating hypotheses, running experiments, or validated learning. The main intent is to provide actionable advice for engineering teams upgrading their codebase, not to discuss experimentation or data-driven decision-making. While the audience (developers, technical leads) could overlap with those interested in Hypothesis Driven Development, the content itself is not aligned with the category's definition. There is no discussion of metrics, KPIs, or iterative learning based on empirical results. The signal-to-noise ratio is reasonable for its own topic, but almost entirely off-topic for Hypothesis Driven Development. No penalties were applied as the content is current and not critical or satirical. The low confidence score reflects the near-total lack of conceptual or explicit overlap with the category.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-07T14:03:58",
    "ai_confidence": 62.85,
    "ai_mentions": 2.7,
    "ai_alignment": 7.2,
    "ai_depth": 6.8,
    "ai_intent": 6.5,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 63.0,
    "reasoning": "The content provides a detailed, practical guide to upgrading legacy .NET and ASP.NET MVC projects to SDK-style, focusing on technical steps, tools, and troubleshooting. While it does not explicitly mention 'digital transformation' or use the term directly, it aligns with the category by addressing the modernisation of legacy systems, future readiness, and the adoption of modern engineering practices. The main themes—migrating to modern project formats, improving maintainability, and enabling CI/CD—are conceptually related to digital transformation, as they support business agility and operational efficiency. However, the discussion is highly technical and focused on project-level implementation rather than strategic, organisation-wide transformation. There is little exploration of broader change management, cultural impact, or business strategy, and the audience is primarily technical practitioners rather than executives or strategists. The content is focused and relevant, with minimal off-topic material, but lacks depth in discussing the strategic or organisational aspects of digital transformation. No penalties were applied, as the content is current and does not contradict the category's framing. The confidence score reflects moderate alignment: strong technical relevance to digital transformation initiatives, but limited coverage of the broader, strategic dimensions required for a high-confidence classification.",
    "level": "Secondary"
  },
  "Shift Left Strategy": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-05-07T14:04:10",
    "ai_confidence": 23.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 8.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising project files, improving build processes, and integrating with modern tooling. However, it does not directly mention or discuss the Shift-Left Strategy, nor does it explicitly address integrating testing, security, or compliance earlier in the software development lifecycle. There are some tangential benefits (e.g., easier integration with CI/CD, improved support for analyzers and code quality tools), but these are not framed in the context of Shift-Left principles. The main intent is technical migration and future-proofing, not proactive defect prevention or early lifecycle quality measures. The audience is technical and relevant, and the content is focused, but the conceptual and direct alignment with Shift-Left is weak. No penalties were applied as the content is current and not critical of the category.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Azure Repos",
    "calculated_at": "2025-05-07T14:04:16",
    "ai_confidence": 23.65,
    "ai_mentions": 1.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects, focusing on build tooling, project file formats, and migration strategies. There is a single, brief mention of TFVC (Team Foundation Version Control) in the context of a customer's legacy setup, and a passing reference to 'cleaner diffs in source control' and 'modern CI/CD pipelines.' However, there is no substantive discussion of Azure Repos, its features, or its integration with source control or CI/CD. The main themes are project migration, SDK-style benefits, and technical steps for .NET upgrades, not Azure Repos functionalities, best practices, or collaboration features. The audience is technical and could overlap with Azure Repos users, but the content is not targeted at Azure Repos practitioners specifically. The signal-to-noise ratio is moderate, as most of the content is relevant to .NET project migration, not Azure Repos. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of direct relevance and depth regarding Azure Repos.",
    "level": "Ignored"
  },
  "Team Collaboration": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-07T14:04:24",
    "ai_confidence": 23.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 8.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style for improved builds, tooling, and maintainability. There is no direct mention of 'team collaboration' or related terminology. The main themes are technical migration, project structure, and tooling, not team dynamics, communication, or shared ownership. While the improvements described (e.g., easier builds, cleaner diffs, better CI/CD integration) could indirectly benefit teams, the content does not discuss or explore collaboration techniques, team culture, or Agile/DevOps team practices. The intent is to inform practitioners (developers, engineers) about technical migration steps, not to address team collaboration. The audience is well-aligned with technical practitioners, but the signal-to-noise ratio is high only for technical migration, not for the evaluated category. No penalties were applied as the content is current and neutral in tone. The low confidence score reflects the lack of direct or substantial alignment with the 'Team Collaboration' category.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-07T14:04:31",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 0.8,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses practical steps, tools, and troubleshooting for modernising build systems and project formats. There is no direct mention of Agile Product Management, nor are Agile principles, product ownership, backlog prioritisation, stakeholder engagement, or customer feedback loops discussed. The main intent is technical enablement for engineering teams, not product management or value maximisation. The audience is technical (developers, build engineers), not product managers or Agile practitioners. While modernising tooling can indirectly support Agile delivery (e.g., enabling CI/CD), the content does not frame its advice in terms of Agile product management practices or outcomes. The signal-to-noise ratio is high for its technical purpose, but almost entirely off-topic for the evaluated category. No penalties were applied as the content is current and not critical of Agile. The very low scores across all dimensions reflect the lack of direct or conceptual relevance to Agile Product Management.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Large Scale Agility",
    "calculated_at": "2025-05-07T14:04:36",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and integrating with modern tooling. However, it does not mention or discuss large scale agility, scaling Agile frameworks, or enterprise-level Agile transformation. There are no references to cross-team collaboration, business alignment, or Agile leadership. The main audience is technical practitioners (developers, build engineers), not enterprise Agile strategists. While the content could be tangentially useful in a large-scale Agile context (e.g., as part of technical modernisation for Agile teams), it does not address the principles, frameworks, or practices of scaling Agile across an organisation. The signal-to-noise ratio is moderate, as the content is focused but not on the evaluated category. No penalties were applied, as the content is current and not critical of the category. The low confidence score reflects the lack of direct or conceptual alignment with 'Large Scale Agility'.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-07T14:04:41",
    "ai_confidence": 87.7,
    "ai_mentions": 7.6,
    "ai_alignment": 9.2,
    "ai_depth": 8.8,
    "ai_intent": 8.5,
    "ai_audience": 8.9,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 88.0,
    "reasoning": "The content is a detailed, technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on modernising build systems, improving maintainability, and enabling modern tooling. While it does not directly mention 'Engineering Practices' by name, it repeatedly references and advocates for core engineering practices such as automation (using tools like try-convert and .NET Upgrade Assistant), clean code (simpler project files, maintainability), CI/CD integration, and test-first development (explicitly recommending thorough testing and not skipping CI). The discussion is deep, with step-by-step instructions, practical recommendations, and troubleshooting tips, showing substantial depth beyond surface-level mentions. The intent is clearly to inform and support practitioners in adopting better engineering practices, and the audience is technical (developers, engineers, DevOps). The content is highly focused, with minimal off-topic material, and all examples and advice are directly relevant to improving engineering practices in the context of Agile software development. No penalties were applied, as the content is current, constructive, and fully aligned with the category definition.",
    "level": "Primary",
    "reasoning_summary": "This content thoroughly supports the 'Engineering Practices' category by guiding developers through modernising .NET projects with practical steps, automation tools, and best practices. It emphasises maintainability, CI/CD, and testing, all of which are core engineering principles. The advice is actionable and tailored for technical audiences, making it highly relevant and well-aligned with the category’s intent."
  },
  "Customer Feedback Loops": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-07T14:04:47",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.7,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides detailed, step-by-step instructions, tooling recommendations, and troubleshooting tips for engineers and developers. There is a single, indirect mention of 'working with a customer', but this is anecdotal and not related to collecting or integrating customer feedback into product development. The main themes are technical migration, build system modernisation, and engineering best practices, not customer feedback loops. There is no discussion of feedback collection, analysis, or integration into product processes, nor are any of the key topics from the category addressed. The intent is to inform practitioners about technical upgrades, not to explore or implement customer feedback mechanisms. The audience (technical practitioners) is somewhat aligned, but the content is entirely focused on engineering migration, not feedback loops. The signal-to-noise ratio is high for its actual topic, but nearly all content is off-topic for the 'Customer Feedback Loops' category. No penalties were applied, as the content is current and not critical or satirical. The very low confidence score reflects the near-total lack of relevance to the category.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Troubleshooting",
    "calculated_at": "2025-05-07T14:04:53",
    "ai_confidence": 81.7,
    "ai_mentions": 6.2,
    "ai_alignment": 8.7,
    "ai_depth": 8.9,
    "ai_intent": 8.3,
    "ai_audience": 8.0,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content provides a detailed, practical guide for upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on resolving common technical issues encountered during the process. Direct mentions of 'troubleshooting' are limited, but the content is rich in actionable advice for diagnosing and fixing build, debugging, and integration problems (e.g., handling 'RunCommand not set' errors, debugging configuration, symbol loading, and known limitations). The 'Debugging Survival Guide' section is explicitly troubleshooting-focused, and the overall tone is pragmatic, targeting technical practitioners facing real-world migration challenges. The depth is high, with step-by-step instructions, tool recommendations, and nuanced discussion of edge cases. The intent is clearly to help readers identify and resolve migration and compatibility issues, aligning well with the category. The audience is technical (developers, DevOps engineers), and the content is focused with minimal off-topic material. No penalties were applied, as the content is current and supportive. The confidence score reflects strong alignment and depth, with slightly lower scores for direct mentions and signal due to some general upgrade advocacy and context-setting.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the troubleshooting category. It offers in-depth, practical guidance for resolving technical issues during .NET and ASP.NET MVC project upgrades. While not every section is labelled as troubleshooting, the advice is hands-on, targeting real-world migration problems, and is clearly aimed at helping technical professionals overcome specific challenges. The focus and depth make it highly relevant for this audience."
  },
  "Agile Leadership": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-07T14:04:58",
    "ai_confidence": 7.7,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.6,
    "ai_audience": 0.7,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides detailed, step-by-step instructions for upgrading project files, handling dependencies, and troubleshooting build and debugging issues. There is no direct mention of Agile Leadership or related leadership concepts. The main themes are technical modernisation, tooling, and engineering best practices, not leadership, empowerment, or organisational change. While the content does reference 'discipline' and 'pragmatic reality', these are in the context of technical execution, not leadership or team empowerment. The intended audience is technical practitioners (developers, engineers), not leaders or managers. The signal-to-noise ratio is high for technical upgrade content but not for Agile Leadership. No penalties were applied as the content is current and not critical or satirical. Overall, the confidence that this content fits under 'Agile Leadership' is extremely low.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Revenue per Employee",
    "calculated_at": "2025-05-07T14:05:07",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 1.0,
    "ai_signal": 0.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct or indirect mentions of Revenue per Employee, nor any discussion of financial observability metrics, workforce efficiency, or organisational throughput. The main themes are technical migration, build tooling, and project structure, which do not conceptually align with the category. The depth of discussion is substantial, but entirely technical and unrelated to financial or workforce metrics. The intent is to inform developers and technical practitioners about project upgrades, not to analyse or interpret organisational effectiveness or financial performance. The audience is technical, which is only marginally aligned with the possible audience for Revenue per Employee if they were interested in technical enablers, but the content is not targeted at executives or strategists concerned with financial metrics. The signal-to-noise ratio is high for its technical purpose, but nearly zero for the evaluated category. No penalties were applied, as the content is not outdated or contradictory, but it is entirely irrelevant to the category. The confidence score is 0, reflecting the complete lack of relevance.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-07T14:05:16",
    "ai_confidence": 23.45,
    "ai_mentions": 0.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 7.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on practical steps, tools, and troubleshooting for modernising project files and build systems. There is a forward-looking tone (e.g., 'future ready', 'prepare you for future upgrades'), but the discussion is about technical migration and not about identifying, analysing, or interpreting broader trends in Agile, DevOps, or business agility. There are no explicit or frequent mentions of 'trend analysis' or related terminology. The main ideas do not align with the core meaning of the category, as the content does not explore patterns, shifts, or strategic implications within Agile, DevOps, or business agility frameworks. The depth is strong for migration techniques but not for trend analysis. The intent is to provide a how-to guide, not to inform strategic decision-making based on trend identification. The audience (technical practitioners) partially overlaps with the category, but the focus is not on trend analysis. The content is highly relevant to .NET migration but not to the specified category, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Azure Pipelines": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Azure Pipelines",
    "calculated_at": "2025-05-07T14:05:24",
    "ai_confidence": 41.85,
    "ai_mentions": 2.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 4.2,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects, focusing on modernising build systems and project formats. There are a few indirect references to CI/CD and modern pipelines (e.g., 'Better integration with modern CI/CD pipelines', 'Test thoroughly. Rebuild, run tests, and make sure everything resolves. This is not the time to skip CI.'), but Azure Pipelines is not directly mentioned, nor is there any substantial discussion of configuring, managing, or optimising Azure Pipelines specifically. The main focus is on project conversion, MSBuild, and SDK-style migration, with only tangential relevance to Azure Pipelines. The audience (developers/engineers working with .NET projects) overlaps with Azure Pipelines users, but the content is not targeted at Azure Pipelines practitioners per se. The signal-to-noise ratio is moderate, as most of the content is relevant to .NET project modernisation, not Azure Pipelines. No penalties were applied, as the content is current and not critical or satirical. The confidence score reflects the low direct mention, weak conceptual alignment, and only incidental depth regarding Azure Pipelines.",
    "level": "Tertiary"
  },
  "Change Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Change Management",
    "calculated_at": "2025-05-07T14:05:31",
    "ai_confidence": 36.7,
    "ai_mentions": 0.6,
    "ai_alignment": 4.2,
    "ai_depth": 3.8,
    "ai_intent": 3.9,
    "ai_audience": 4.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content is a highly technical, step-by-step guide for upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on practical engineering tasks, tooling, and specific migration steps, with detailed advice on project file changes, debugging, and known limitations. There is no direct mention of 'change management' or its principles, nor does the content discuss organisational strategies, stakeholder engagement, leadership, or cultural aspects of change. The main intent is technical enablement for developers, not organisational transformation. While the content could be tangentially relevant to change management in the sense that it supports technical change, it does not address the category's core themes such as fostering adaptability, managing resistance, or aligning with organisational goals. The audience is technical practitioners (developers, engineers), not change leaders or strategists. The signal-to-noise ratio is moderate, as the content is focused but not on the evaluated category. Therefore, the confidence score is low, reflecting only a weak, indirect fit.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-07T14:05:36",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and leveraging new tooling. There is no direct mention of asynchronous development, nor are the principles, practices, or challenges of asynchronous team collaboration discussed. The main themes are project file migration, build tooling, and compatibility, not distributed or asynchronous workflows. The audience (developers modernising .NET projects) could overlap with those interested in asynchronous development, but the content itself is not targeted at that topic. The signal-to-noise ratio is high for its actual subject, but almost entirely irrelevant to asynchronous development. No penalties were applied as the content is not outdated or critical of the category, but the confidence score is extremely low due to lack of alignment.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Lead Time",
    "calculated_at": "2025-05-07T14:05:44",
    "ai_confidence": 7.2,
    "ai_mentions": 0.0,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.7,
    "ai_audience": 2.1,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of 'Lead Time' or any explicit discussion of observability metrics, cycle time, or process efficiency as defined in the category. The main focus is on technical migration steps, tooling, and practical advice for modernising project files and build systems. While some improvements (e.g., faster builds, better CI/CD integration) could indirectly impact lead time, these are not discussed in the context of measuring or optimising lead time, nor is there any analysis of process flow, bottlenecks, or delivery efficiency. The intent is to inform practitioners about technical upgrades, not to discuss or optimise lead time as a metric. The audience is technical (developers, engineers), which partially overlaps with the category's likely audience, but the content is not focused on observability or process metrics. The signal-to-noise ratio is low for the 'Lead Time' category, as nearly all content is off-topic for this classification. No penalties were applied, as the content is current and not critical or satirical. The very low confidence score reflects the near-total lack of relevance to the 'Lead Time' category.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-07T14:05:49",
    "ai_confidence": 97.2,
    "ai_mentions": 8.7,
    "ai_alignment": 9.8,
    "ai_depth": 9.6,
    "ai_intent": 9.5,
    "ai_audience": 9.2,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 97.0,
    "reasoning": "The content is a comprehensive, step-by-step guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style, which is a core installation and configuration activity. It provides explicit instructions, code snippets, tool recommendations (e.g., try-convert, .NET Upgrade Assistant), and troubleshooting tips for both class libraries and web apps. The main themes are deeply aligned with the category: project setup, configuration best practices, integration with modern build and CI/CD systems, and addressing compatibility and migration issues. The audience is clearly technical practitioners responsible for maintaining and upgrading engineering systems. The content is highly focused, with minimal off-topic material, and avoids theoretical or strategic digressions. There are no outdated practices or contradictory tones; the advice is current and pragmatic. The only minor deduction in 'mentions' is due to the lack of explicit use of the phrase 'install and configuration', but the conceptual and practical coverage is extremely strong. The final confidence score reflects the high degree of fit across all dimensions.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent match for the category, as it offers clear, actionable guidance on upgrading .NET and ASP.NET MVC projects—key installation and configuration tasks. It’s practical, up-to-date, and tailored for technical professionals, covering tools, troubleshooting, and best practices without unnecessary digressions. While it doesn’t use the exact category phrase, its focus and relevance are unmistakable."
  },
  "Automated Testing": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Automated Testing",
    "calculated_at": "2025-05-07T14:05:53",
    "ai_confidence": 23.7,
    "ai_mentions": 1.2,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is focused on converting legacy .NET and ASP.NET MVC projects to SDK-style, discussing build systems, project file formats, and CI/CD integration. There is a single, brief mention of testing: 'Test thoroughly. Rebuild, run tests, and make sure everything resolves. This is not the time to skip CI.' However, this is a passing reference and not a substantive discussion of automated testing principles, practices, or methodologies. There is no exploration of test types, frameworks, or the role of automated testing in Agile/DevOps. The main intent is project migration and modernisation, not automated testing. The audience (developers/engineers) overlaps with the category, but the content's signal-to-noise ratio for automated testing is low, as nearly all discussion is about project structure, build, and migration. No penalties were applied, as the content is current and not critical of automated testing. The final confidence score is low, reflecting the minimal and non-central treatment of automated testing.",
    "level": "Ignored"
  },
  "Product Delivery": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Delivery",
    "calculated_at": "2025-05-07T14:06:00",
    "ai_confidence": 67.7,
    "ai_mentions": 2.2,
    "ai_alignment": 7.7,
    "ai_depth": 7.9,
    "ai_intent": 7.2,
    "ai_audience": 7.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1,
    "ai_penalty_details": "mentions penalised (-0.8) for lack of explicit reference to 'product delivery' or its synonyms; content is technical and practical but does not directly name the category.",
    "final_score": 68.0,
    "reasoning": "The content is a detailed, practical guide for upgrading legacy .NET and ASP.NET MVC projects to SDK-style, focusing on modernising build systems, improving maintainability, and enabling future tooling. While it does not explicitly mention 'product delivery' or directly discuss methodologies like Agile, CI/CD, or cross-functional teams, it strongly aligns with the category's core by addressing practices that improve the end-to-end delivery of software products. The discussion covers build simplification, integration with CI/CD, testing, and deployment considerations, all of which are relevant to product delivery. The depth is substantial, with step-by-step instructions, troubleshooting, and pragmatic recommendations. The intent is to help practitioners modernise their delivery pipeline, which fits the category's purpose. The audience is technical (developers, DevOps, engineering leads), matching the typical product delivery audience. The signal-to-noise ratio is high, with little filler. However, a penalty is applied to 'mentions' because the content never directly references 'product delivery' or its synonyms, and only implicitly connects to the category. Overall, the confidence score reflects strong conceptual and practical alignment, but is moderated by the lack of explicit category framing.",
    "level": "Secondary"
  },
  "Definition of Ready": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Definition of Ready",
    "calculated_at": "2025-05-07T14:06:05",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.9,
    "ai_intent": 0.8,
    "ai_audience": 2.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses practical steps, tools, and troubleshooting for modernising project structures, with an emphasis on future readiness and maintainability. However, it does not mention or discuss the Definition of Ready (DoR) in any explicit or implicit way. There are no references to backlog item readiness, criteria for actionable user stories, or Agile practices related to DoR. The main intent is technical migration, not Agile process improvement. The audience is technical practitioners (developers, DevOps), which partially overlaps with those interested in DoR, but the content is not targeted at Agile process roles or concerns. The signal-to-noise ratio is high for its actual topic, but nearly all content is off-topic for DoR. No penalties were applied, as the content is current and not critical or satirical. The very low scores across all dimensions reflect the near-total lack of relevance to the Definition of Ready category.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Organisational Agility",
    "calculated_at": "2025-05-07T14:06:10",
    "ai_confidence": 23.45,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style for improved tooling, maintainability, and future readiness. There are no direct mentions of 'Organisational Agility' or explicit references to agile methodologies, cultural shifts, or organisational strategies. The main ideas are about technical migration, not about enabling organisational responsiveness or adaptability. While the content does touch on making engineering systems 'simpler, more maintainable, and ready for what’s next,' this is framed in terms of technical debt reduction and future-proofing, not in the context of organisational agility as defined. The depth of discussion is substantial for technical migration but not for agility concepts. The intent is to inform practitioners (developers, engineers) about technical upgrades, not to address organisational change or agility. The audience is technical, which could overlap with those interested in agility, but the focus is not on organisational transformation. The signal-to-noise ratio is moderate, as the content is focused but not on the target category. No penalties were applied, as the content is current and not critical of agility. Overall, the confidence score is low, reflecting minimal alignment with the 'Organisational Agility' category.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Test First Development",
    "calculated_at": "2025-05-07T14:06:17",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.6,
    "ai_audience": 2.1,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on technical migration steps, tooling, and practical advice for modernising build systems. There is only a single, brief mention of testing: 'Test thoroughly. Rebuild, run tests, and make sure everything resolves. This is not the time to skip CI.' This is a generic recommendation to run tests after migration, not a discussion of Test First Development principles, practices, or philosophy. There is no mention of defining success criteria before implementation, no discussion of manual or automated Test First practices, and no exploration of the impact on collaboration, feedback loops, or the transition from manual to automated testing. The main audience is technical practitioners (developers, build engineers), but the content is not aligned with the Test First Development category's focus. The signal-to-noise ratio is low for this category, as nearly all content is off-topic. No penalties were applied, as the content is not outdated or critical of the category. The very low confidence score reflects the near-total absence of Test First Development relevance.",
    "level": "Ignored"
  },
  "Social Technologies": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Social Technologies",
    "calculated_at": "2025-05-07T14:06:21",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 2.1,
    "ai_intent": 1.5,
    "ai_audience": 3.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses practical steps, tools, and troubleshooting for modernising build systems and project formats. There is no direct mention of 'Social Technologies' or any frameworks/methodologies that promote collaboration, self-organisation, or collective intelligence. The main themes are technical migration, tooling, and engineering best practices, not organisational culture, decision-making, or value delivery optimisation. While there are brief references to making engineering systems 'simpler, more maintainable, and ready for what’s next,' these are incidental and do not align with the core meaning of the Social Technologies category. The audience is technical practitioners (developers, engineers), which partially overlaps with the category, but the content is not focused on social frameworks or methodologies. The signal-to-noise ratio is low for this category, as nearly all content is off-topic regarding Social Technologies. No penalties were applied, as the content is not outdated or critical of the category. The low confidence score reflects the lack of conceptual and thematic fit.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-07T14:06:29",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 5.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There is no direct mention of 'Flow Efficiency' or its core concepts such as value stream mapping, bottleneck elimination, WIP limits, or flow metrics. While the content does touch on topics like faster builds and improved CI/CD integration, these are presented as side benefits of the migration rather than as part of a discussion on optimising throughput or flow. The main intent is technical migration, not the optimisation of work throughput or value stream flow. The audience (developers, technical leads) could overlap with those interested in flow efficiency, but the content itself is not aligned with the category. The signal-to-noise ratio is moderate, as the content is focused but not on the relevant topic. No penalties were applied, as the content is current and not critical of the category. Overall, the confidence score is low, reflecting only incidental and indirect relevance to 'Flow Efficiency'.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-07T14:06:33",
    "ai_confidence": 23.45,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 8.2,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising project structure, improving build processes, and enabling compatibility with modern tooling. There is a brief mention of better integration with modern CI/CD pipelines, but this is not elaborated upon, and deployment frequency is not directly mentioned or discussed as a core theme. The main intent is to help developers upgrade their projects for maintainability and future readiness, not to optimise or discuss deployment intervals or frequency. The audience is technical and relevant to DevOps/engineering, but the content's alignment with the 'Deployment Frequency' category is weak, as it does not address strategies, metrics, or the impact of deployment frequency. The signal-to-noise ratio is moderate, as most content is focused on project conversion rather than deployment practices. No penalties were applied, as the content is current and not critical of the category.",
    "level": "Ignored"
  },
  "Scaling": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Scaling",
    "calculated_at": "2025-05-07T14:06:38",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There are no direct mentions of scaling frameworks (e.g., SAFe, LeSS, Nexus), nor does the content discuss cross-team coordination, enterprise alignment, or lean principles at scale. The main audience is technical practitioners (developers, build engineers) rather than strategists or enterprise leaders. While the content does touch on making engineering systems 'simpler, more maintainable, and ready for what’s next,' this is in the context of project structure and tooling, not scaling agile practices or managing multiple teams. The signal-to-noise ratio is moderate, as the content is focused but not on the Scaling category. No penalties were applied, as the content is current and not critical of scaling concepts. Overall, the confidence that this content fits under the 'Scaling' category is very low.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-05-07T14:06:43",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 2.0,
    "ai_audience": 4.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving CI/CD integration, and handling legacy code, but at no point does it mention Artificial Intelligence, AI-driven tools, or the application of AI in Agile, DevOps, or software development processes. There are no direct or indirect references to AI, nor does the content discuss automation, analytics, or decision-making enhancements via AI. The audience is technical (developers, DevOps engineers), which partially overlaps with the AI category's target, but the subject matter is entirely about project structure and migration, not AI. The signal-to-noise ratio is low for the AI category, as all content is off-topic for this classification. No penalties were applied, as the content is current and not satirical or critical. The very low confidence score reflects the complete lack of relevance to Artificial Intelligence as defined.",
    "level": "Ignored"
  },
  "Value Stream Mapping": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-05-07T14:06:48",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 2.0,
    "ai_audience": 3.1,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Value Stream Mapping (VSM), Lean, or related workflow visualisation or optimisation techniques. The main focus is on modernising build systems, project file formats, and tooling compatibility, not on mapping or analysing value streams or process flows. Conceptual alignment is minimal: while the content does discuss process improvement (e.g., making builds easier, improving maintainability), it does not frame these improvements in terms of VSM principles, nor does it discuss mapping, identifying value/non-value activities, or workflow analysis. The depth of discussion is high for the topic of project conversion, but not for VSM. The intent is to inform practitioners about technical upgrades, not to teach or discuss VSM. The audience (developers, DevOps engineers) could overlap with VSM practitioners, but the content is not targeted at those interested in Lean or VSM. The signal-to-noise ratio is moderate, as the content is focused but entirely off-topic for VSM. No penalties were applied, as the content is current and not critical or satirical. Overall, the confidence score is extremely low, reflecting the lack of relevance to Value Stream Mapping.",
    "level": "Ignored"
  },
  "Market Share": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Market Share",
    "calculated_at": "2025-05-07T14:06:53",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.5,
    "ai_audience": 2.1,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of 'market share' or related terminology. The main themes are technical migration, tooling, and engineering best practices, not strategies for increasing market presence or competitive advantage. There is no discussion of market positioning, customer engagement, competitive analysis, or metrics related to market share. The intent is to inform developers and technical teams about modernising their build systems, not to address business growth or market expansion. The audience is technical (developers, engineers), which only partially overlaps with the strategic/managerial audience typically interested in market share. The content is highly focused on its technical topic, with little to no off-topic material, but this focus is not relevant to the 'Market Share' category. Therefore, the confidence score is extremely low, reflecting the lack of alignment with the category definition.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-07T14:06:59",
    "ai_confidence": 74.85,
    "ai_mentions": 3.7,
    "ai_alignment": 8.6,
    "ai_depth": 7.9,
    "ai_intent": 7.2,
    "ai_audience": 8.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 75.0,
    "reasoning": "The content provides a detailed, practical guide to upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on modernising engineering systems for maintainability and future readiness. While 'technical excellence' is not directly named, the narrative repeatedly emphasises principles that underpin technical excellence: simplifying build systems, enabling modern CI/CD, improving code quality, and supporting maintainability. The discussion is conceptually well-aligned, especially in its rationale for why these upgrades matter (e.g., 'make your engineering system simpler, more maintainable, and ready for what’s next'). The depth is solid, with step-by-step instructions, caveats, and recommendations for both class libraries and web apps, though it is somewhat tool- and process-focused at times. The intent is to help practitioners achieve a higher standard of engineering practice, but the primary framing is around migration and modernisation rather than an explicit treatise on technical excellence. The audience is clearly technical practitioners and engineering teams, matching the category. The signal-to-noise ratio is high, with most content directly relevant, though some sections (e.g., detailed debugging tips) are more tactical. No penalties are applied, as the content is current, constructive, and not critical of the concept. Overall, the confidence score reflects strong conceptual alignment and depth, with minor deductions for lack of explicit category naming and a slightly more practical than theoretical focus.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category well, as it offers a thorough, practical guide to modernising .NET projects, emphasising principles like maintainability and code quality that underpin technical excellence. While it doesn’t explicitly label itself as such, its focus on best practices and future readiness aligns closely with the category’s intent, making it highly relevant for technical teams aiming to improve their engineering standards."
  },
  "Transparency": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Transparency",
    "calculated_at": "2025-05-07T14:07:07",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of 'transparency' or related Agile concepts. The main themes are technical migration, tooling, and practical steps for modernising project files, not openness, visibility, or trust within Agile processes. There is minimal conceptual alignment: while the content does discuss making project files 'simpler' and 'cleaner', this is in the context of technical maintainability, not transparency as defined in Agile. The depth of discussion is substantial for migration techniques but not for transparency. The intent is to inform about technical upgrades, not to foster transparency. The audience (developers, technical leads) could overlap with those interested in transparency, but the content is not targeted at Agile practitioners or stakeholders concerned with process visibility. The signal-to-noise ratio is high for its technical purpose but low for the transparency category. No penalties were applied as the content is current and not critical of transparency. Overall, the confidence score is very low, reflecting that the content does not fit the 'Transparency' category.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-07T14:07:13",
    "ai_confidence": 32.7,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.5,
    "ai_intent": 3.2,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects for improved maintainability, modern tooling, and future readiness. There are no direct or explicit mentions of 'innovation', 'Ability to Innovate', or related Evidence-Based Management concepts. The main themes are technical migration, build system modernisation, and practical tips for developers. While the content does touch on making systems 'future ready' and 'preparing for what’s next', these are framed in terms of technical debt reduction and maintainability rather than fostering or measuring innovation. There is no discussion of innovation metrics, learning cycles, or organisational strategies for innovation. The audience is technical practitioners (developers, engineers), which partially aligns with the category, but the content is not aimed at innovation leaders or strategists. The signal-to-noise ratio is high, as the content is focused and practical, but the relevance to 'Ability to Innovate' is mostly tangential. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of direct or substantial alignment with the 'Ability to Innovate' category.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-07T14:07:17",
    "ai_confidence": 6.8,
    "ai_mentions": 0.2,
    "ai_alignment": 1.7,
    "ai_depth": 1.8,
    "ai_intent": 1.0,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It discusses tooling, migration steps, and practical tips for modernising project files and build systems. There are no direct mentions of cross-functional teams, nor is there any discussion of team structure, collaboration, or Agile methodologies. The main ideas are about technical migration, not about team dynamics or cross-functional collaboration. The depth is substantial, but entirely technical and not related to the category. The intent is to inform engineers about project upgrades, not to explore cross-functional teams. The audience is technical practitioners, which could overlap with the category, but the content is not targeted at team structure or Agile practices. The signal-to-noise ratio is high for its own topic, but not for the evaluated category. No penalties are applied, as the content is not outdated or critical of the category. The very low confidence score reflects the near-total lack of relevance to 'Cross Functional Teams.'",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-07T14:07:27",
    "ai_confidence": 41.85,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 3.8,
    "ai_audience": 4.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling and CI/CD pipelines. However, it does not directly mention 'Platform Engineering' or Internal Developer Platforms (IDPs), nor does it discuss the design or construction of internal platforms, self-service capabilities, or standardisation at the platform level. The main audience is technical practitioners (developers, build engineers), which partially overlaps with platform engineering, but the primary intent is project modernisation rather than platform creation or enhancement. The content aligns conceptually with some platform engineering principles (automation, standardisation, future readiness), but these are not the central themes. The depth is strong regarding SDK-style migration, but not in the context of platform engineering as defined. The signal-to-noise ratio is moderate: the content is focused, but not on the core category. No penalties were applied as the content is current and not critical or satirical. Overall, the confidence score reflects that while there is some overlap in concepts, the content does not substantially fit under 'Platform Engineering' as strictly defined.",
    "level": "Tertiary"
  },
  "Organisational Psychology": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-07T14:07:40",
    "ai_confidence": 2.3,
    "ai_mentions": 0.0,
    "ai_alignment": 2.1,
    "ai_depth": 2.2,
    "ai_intent": 2.0,
    "ai_audience": 3.0,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of organisational psychology or its key concepts such as motivation, leadership, team dynamics, or psychological safety. The main ideas revolve around technical migration, build systems, and tooling, which do not conceptually align with the psychological aspects of organisational behaviour. The depth of discussion is substantial but entirely technical, lacking any exploration of psychological principles or their impact on organisational performance or employee satisfaction. The intent is to inform technical practitioners (developers, engineers) about project conversion, not to address organisational psychology topics. The audience is technical rather than HR, leadership, or organisational development professionals. The signal-to-noise ratio is high for technical relevance but low for the target category. No penalties were applied as the content is not outdated or satirical, but the confidence score is very low due to the near-total lack of relevance to organisational psychology.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-07T14:07:47",
    "ai_confidence": 7.6,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.5,
    "ai_audience": 0.7,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Agile Philosophy, the Agile Manifesto, or its principles. The main ideas revolve around modernising build systems, improving maintainability, and future-proofing engineering practices, which can be tangentially related to continuous improvement—a value in Agile Philosophy—but this is not explicitly discussed. The depth of discussion is technical and practical, not philosophical or cultural. The intent is to provide actionable steps for technical practitioners, not to explore or advocate for Agile mindsets or organisational change. The audience is technical (developers, engineers), which could overlap with Agile practitioners, but the content is not tailored to Agile strategists or those interested in Agile Philosophy. The signal-to-noise ratio is high for its technical purpose, but almost none of the content is relevant to Agile Philosophy. No penalties are applied, as the content is current and not critical of Agile. The very low scores across all dimensions reflect the near-total absence of Agile Philosophy content, resulting in a very low confidence score.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Strategy",
    "calculated_at": "2025-05-07T14:07:55",
    "ai_confidence": 19.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It provides detailed, step-by-step instructions for technical implementation, including tooling, migration commands, and debugging tips. There is no direct mention of 'Product Strategy' or any of its key topics such as vision formulation, roadmapping, market analysis, or customer-centric strategy. The main intent is to help engineers modernise their build systems and codebases, not to define or discuss product vision, competitive positioning, or strategic planning. The audience is technical practitioners (developers, engineers) rather than product strategists or executives. While the content does touch on 'future readiness' and 'sustainability' in a technical sense, these are not explored from a strategic or business-alignment perspective. The signal-to-noise ratio is moderate, as the content is focused but not on the evaluated category. No penalties were applied as the content is current and not satirical or critical of the category. Overall, the confidence that this content fits under 'Product Strategy' is very low.",
    "level": "Ignored"
  },
  "Collaboration Tools": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Collaboration Tools",
    "calculated_at": "2025-05-07T14:08:01",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.9,
    "ai_intent": 0.8,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on build tooling, project file formats, and migration strategies, with extensive discussion of MSBuild, SDKs, and related configuration. There is no direct mention of collaboration tools, nor are any platforms like Slack, Teams, Jira, or Trello referenced. The main themes are not about enhancing team communication or coordination, but about modernising project structure and build processes. While some practices (e.g., cleaner diffs, better CI/CD integration) could indirectly support collaboration, these are not discussed in the context of team workflows or Agile collaboration. The audience is technical (developers/engineers), which partially overlaps with the category, but the content is not aimed at improving collaboration within Agile teams. The signal-to-noise ratio is low for this category, as nearly all content is off-topic for 'Collaboration Tools'. No penalties were applied, as the content is current and not critical or satirical. The very low confidence score reflects the near-total lack of alignment with the category definition.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Deployment Strategies",
    "calculated_at": "2025-05-07T14:08:09",
    "ai_confidence": 32.7,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.5,
    "ai_intent": 2.9,
    "ai_audience": 7.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There are some indirect references to CI/CD pipelines and future readiness, but the main thrust is on project structure, build configuration, and migration steps—not on deployment methodologies or risk-managed release strategies. There is no explicit mention of blue-green deployments, canary releases, feature toggles, rolling updates, or other deployment strategies. The audience is technical and could overlap with those interested in deployment, but the content is not primarily about deployment strategies. The signal-to-noise ratio is moderate, as the content is focused but not on the target category. No penalties were applied as the content is current and not satirical or critical. The confidence score is low, reflecting the lack of direct relevance to deployment strategies.",
    "level": "Ignored"
  },
  "Decision Making": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Decision Making",
    "calculated_at": "2025-05-07T14:08:24",
    "ai_confidence": 36.45,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 3.8,
    "ai_audience": 7.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides step-by-step instructions, tool recommendations, and troubleshooting tips for engineers and developers. \n\nDirect Mentions: There are no explicit references to 'decision making' or related frameworks; the closest is the use of terms like 'pragmatic call' and 'recommendation', but these are not tied to structured, evidence-based decision-making methodologies. \n\nConceptual Alignment: The content does touch on making choices (e.g., whether to convert class libraries or web apps, which tools to use), but these are presented as practical advice rather than as part of a structured, evidence-based decision-making process. There is no discussion of data analytics, cognitive biases, or collaborative frameworks. \n\nDepth of Discussion: The depth is high regarding technical migration, but shallow regarding decision-making frameworks. The recommendations are based on experience and practical outcomes, not on empirical evidence or structured evaluation. \n\nIntent/Purpose Fit: The main intent is to inform and guide technical migration, not to facilitate or analyse decision-making processes. Any decision points are incidental and not the focus. \n\nAudience Alignment: The audience (technical practitioners, engineers) overlaps with those who might be interested in decision-making frameworks, but the content is not tailored to decision-making as a discipline. \n\nSignal-to-Noise Ratio: The content is focused and relevant to its technical topic, but only a small portion is tangentially related to decision-making. \n\nNo penalties were applied, as the content is current, neutral in tone, and does not contradict the category. The final confidence score is low, reflecting that while some decision points are present, the content does not align with the structured, evidence-based methodologies required by the 'Decision Making' category.",
    "level": "Ignored"
  },
  "Team Performance": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Team Performance",
    "calculated_at": "2025-05-07T14:08:31",
    "ai_confidence": 38.7,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 3.8,
    "ai_audience": 5.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with practical steps, tooling advice, and troubleshooting tips. There are no direct or explicit mentions of 'team performance' or delivery capability at the team level. The main focus is on technical migration, not on system-level metrics, team dynamics, or delivery patterns. Some indirect alignment exists: the content discusses how modernising build systems and project formats can make engineering systems 'simpler, more maintainable, and ready for what’s next,' which could support team performance in a broad sense. However, it does not interpret or measure team performance, nor does it discuss systemic constraints, team structure, or delivery metrics. The depth is moderate, but it is technical and process-oriented rather than evaluative of team outcomes. The intent is to inform practitioners (developers, engineers) about technical upgrades, not to analyse or improve team performance directly. The audience is technical, which partially overlaps with the category, but the focus is not on team-level delivery. The signal-to-noise ratio is reasonable, but most content is off-topic for the 'Team Performance' category. No penalties were applied, as the content is current and not critical or satirical. Overall, the confidence score is low, reflecting that while the content may indirectly support team performance by improving engineering systems, it does not address the category's core definition or key topics.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-07T14:08:37",
    "ai_confidence": 23.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Professional Scrum, Scrum values, empiricism, accountability, or the ethos of Professional Scrum. The main themes are technical modernisation, build tooling, and pragmatic engineering practices, not the disciplined application of Scrum or professional responsibility in a Scrum context. While the content does reference discipline, skill, and maintainability, these are framed in terms of technical migration rather than the broader professional standards or values central to Professional Scrum. The audience (developers, technical leads) could overlap with Scrum practitioners, but the content is not targeted at Scrum teams or roles, nor does it discuss Scrum practices, values, or organisational change. The signal-to-noise ratio is high for its technical purpose, but almost none of the content is relevant to Professional Scrum as defined. No penalties were applied, as the content is not outdated or critical of Scrum. The low confidence score reflects the near-total absence of category-relevant material.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-07T14:08:44",
    "ai_confidence": 32.7,
    "ai_mentions": 0.4,
    "ai_alignment": 3.2,
    "ai_depth": 2.9,
    "ai_intent": 3.5,
    "ai_audience": 4.1,
    "ai_signal": 5.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses almost exclusively on technical steps, tools, and configuration details (e.g., try-convert, MSBuild SDKs, .csproj edits, debugging tips). There is only a passing mention of 'modern engineering practices' and 'making your engineering system simpler, more maintainable, and ready for what’s next,' which could be loosely interpreted as touching on organisational or process improvement, but these are not explored in depth. There is no explicit mention of sociotechnical systems, organisational culture, team dynamics, or the interplay between social and technical factors. The main audience is technical practitioners (developers, build engineers), not strategists or those interested in sociotechnical theory. The signal-to-noise ratio is moderate, as the content is focused but not on the sociotechnical category. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of direct or substantial alignment with the Sociotechnical Systems category.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Competence",
    "calculated_at": "2025-05-07T14:08:51",
    "ai_confidence": 54.7,
    "ai_mentions": 2.2,
    "ai_alignment": 6.7,
    "ai_depth": 6.3,
    "ai_intent": 6.0,
    "ai_audience": 7.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with practical steps, tool recommendations, and troubleshooting. While it demonstrates technical skill and encourages best practices (e.g., testing, CI, maintainability), it does not directly discuss 'competence' as a principle or theme. There are no explicit references to continuous learning, professional mastery, or the role of competence in Agile/DevOps contexts. The alignment is moderate because the guide implicitly supports skill development and quality, but the main intent is technical enablement, not fostering or discussing competence as a foundational value. The depth is above average due to detailed instructions and rationale, but it remains focused on process and tooling rather than professional growth or capability development. The audience is technical practitioners, which matches the likely audience for competence discussions, and the content is focused with little off-topic material. No penalties were applied as the content is current, constructive, and not satirical or critical of competence. The final confidence score reflects that while the content is relevant to skillful practice, it does not substantially address competence as defined in the category.",
    "level": "Tertiary"
  },
  "Azure DevOps": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Azure DevOps",
    "calculated_at": "2025-05-07T14:08:58",
    "ai_confidence": 41.25,
    "ai_mentions": 2.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 4.5,
    "ai_audience": 4.2,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style, with a focus on build tooling, project file formats, and migration strategies. Azure DevOps is mentioned explicitly twice: once in reference to a specific migration tool ('Azure DevOps Migration Tools') and once in the context of improved CI/CD pipeline integration. However, the main thrust of the article is not about Azure DevOps itself, but about .NET project modernisation. The alignment with the Azure DevOps category is partial: while there are references to CI/CD and migration tools that could be used within Azure DevOps, the content does not explore Azure DevOps services, best practices, or methodologies in depth. The audience (developers and build engineers) overlaps with Azure DevOps practitioners, but the focus is on .NET project structure and migration, not on Azure DevOps as a platform. The signal-to-noise ratio is moderate, as most of the content is relevant to .NET project upgrades rather than Azure DevOps specifically. No penalties were applied, as the content is current and not critical of Azure DevOps. The confidence score reflects the limited but non-negligible relevance to the Azure DevOps category.",
    "level": "Tertiary"
  },
  "Azure Boards": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Azure Boards",
    "calculated_at": "2025-05-07T14:09:02",
    "ai_confidence": 2.7,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.3,
    "ai_audience": 1.2,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on build tooling, project file formats, and migration strategies, with in-depth advice on class libraries and web apps. There is a single, passing mention of 'Azure DevOps Migration Tools' but no discussion of Azure Boards, its features, or Agile project management. None of the key topics for the Azure Boards category—such as work item tracking, board customisation, or sprint planning—are addressed. The audience is technical, but the content is not aimed at Azure Boards users or practitioners. The signal-to-noise ratio is low for this category, as nearly all content is off-topic. No penalties were applied, as the content is not outdated or critical, but the confidence score is extremely low due to the lack of relevance.",
    "level": "Ignored"
  },
  "One Engineering System": {
    "resourceId": "2mdv7QE2nIt",
    "category": "One Engineering System",
    "calculated_at": "2025-05-07T14:09:10",
    "ai_confidence": 41.85,
    "ai_mentions": 0.7,
    "ai_alignment": 4.2,
    "ai_depth": 4.6,
    "ai_intent": 4.1,
    "ai_audience": 4.0,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content focuses on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with detailed technical guidance on project conversion, build tooling, and debugging. While it discusses standardisation and modernisation of engineering practices (e.g., consolidating build props, improving CI/CD integration, and unifying project formats), it does not directly mention or explicitly frame these efforts within the One Engineering System (1ES) framework. The conceptual alignment is partial: the content aligns with 1ES principles of standardisation and integration, but it never references 1ES, its components, or its broader organisational impact. The depth is moderate, as the discussion is thorough regarding technical migration steps but does not extend to cross-team integration, process unification, or case studies of 1ES adoption. The intent is to inform practitioners about technical upgrades, which is tangentially relevant to 1ES but not purpose-built for it. The audience is technical (developers, engineers), which matches the likely 1ES audience, and the content is focused with little off-topic material. No penalties were applied, as the content is current and not critical or satirical. Overall, the confidence score is low-to-moderate, reflecting that while the content is relevant to engineering system improvement, it does not directly or deeply address the One Engineering System category as defined.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-07T14:09:22",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on practical steps, tooling, and troubleshooting for project migration. There are no direct mentions of metrics, learning cycles, feedback loops, or evidence-based management. The main intent is to modernise build systems and project formats, not to discuss data-driven improvement or continuous learning. While the audience (developers, DevOps engineers) overlaps with those interested in metrics and learning, the content itself is not conceptually aligned with the category. There is some indirect relevance in the mention of improved support for analyzers and code quality tools, but these are not explored in the context of metrics or learning. The signal-to-noise ratio is high for its actual topic, but not for 'Metrics and Learning'. No penalties were applied as the content is current and not critical of the category. The low confidence score reflects the lack of direct or substantial connection to the classification definition.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Project Management",
    "calculated_at": "2025-05-07T14:09:27",
    "ai_confidence": 41.85,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 4.2,
    "ai_audience": 3.8,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on practical steps, tools, and troubleshooting for modernising build systems and project files. There are indirect connections to project management, such as future readiness, maintainability, and process improvement, but the main thrust is technical migration rather than project management principles, methodologies, or lifecycle phases. There are no direct mentions of project management, nor does the content discuss roles, governance, stakeholder communication, or project delivery strategies. The audience is primarily technical practitioners (developers, build engineers), not project managers or those focused on broader project delivery. The signal-to-noise ratio is moderate, as the content is focused but not on the project management category. No penalties were applied, as the content is current and not critical of project management. The confidence score reflects the limited but present conceptual overlap (e.g., process improvement, risk mitigation in migration), but overall, the content is not a strong fit for the Project Management category.",
    "level": "Tertiary"
  },
  "Cycle Time": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Cycle Time",
    "calculated_at": "2025-05-07T14:09:33",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.6,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising project structure, improving build processes, and enabling compatibility with modern tooling. There is no direct mention of 'Cycle Time' or any explicit discussion of workflow efficiency metrics. The main themes are project migration, build configuration, and debugging, not the measurement or analysis of the time taken to complete units of work. While some improvements (e.g., faster builds, better CI/CD integration) could indirectly impact cycle time, these are not discussed in the context of measuring or optimising Cycle Time as defined in Agile or DevOps. The audience is technical (developers, DevOps engineers), which partially overlaps with the Cycle Time category, but the content's intent and focus are not aligned. The signal-to-noise ratio is low for Cycle Time relevance, as nearly all content is off-topic for this metric. No penalties were applied, as the content is not outdated or critical of the category. The very low confidence score reflects the near-total absence of direct or meaningful connection to Cycle Time.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Personal",
    "calculated_at": "2025-05-07T14:09:38",
    "ai_confidence": 38.7,
    "ai_mentions": 2.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 3.8,
    "ai_audience": 4.1,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content is written in the first person and includes some personal context (e.g., 'I’ve been working with a customer', 'In my experience'), but the majority of the discussion is technical, focusing on step-by-step instructions, tooling, and migration strategies for .NET projects. There are a few subjective recommendations and pragmatic tips, but these are not deeply reflective or anecdotal in the sense required for the Personal category. The main purpose is to inform and guide on technical migration, not to share personal insights or stories about Agile, Scrum, DevOps, or business agility. The audience is primarily technical practitioners rather than those seeking personal reflections on Agile methodologies. The signal-to-noise ratio is moderate, as most content is relevant but not aligned with the Personal category's intent. No penalties were applied, as the tone is not outdated or critical, but the overall fit for the Personal category is low to moderate.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-05-07T14:09:44",
    "ai_confidence": 23.7,
    "ai_mentions": 0.4,
    "ai_alignment": 2.2,
    "ai_depth": 2.7,
    "ai_intent": 2.1,
    "ai_audience": 8.2,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and integrating with modern CI/CD pipelines. However, it does not directly mention or discuss Internal Developer Platforms (IDPs), their architecture, or their role in streamlining the software delivery lifecycle. While some concepts (e.g., easier builds, CI/CD integration, future readiness) are tangentially related to the goals of an IDP, the main thrust is on project file conversion and tooling, not on building or operating an IDP. The audience is technical and developer-focused, which aligns with the IDP category, and the content is highly relevant for practitioners, but the signal-to-noise ratio is moderate since the focus is not on IDPs themselves. No penalties were applied as the content is current and not critical of the category. The low confidence score reflects the lack of direct mention and only partial conceptual overlap.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-07T14:09:49",
    "ai_confidence": 7.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 0.9,
    "ai_intent": 1.0,
    "ai_audience": 2.1,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Agnostic Agile, its principles, or related thought leaders. The main ideas revolve around pragmatic engineering, modernisation, and tooling, but do not discuss agility, context-driven approaches, or ethical considerations in agile practices. The depth of discussion is substantial for the technical topic at hand, but not for Agnostic Agile. The intent is to inform developers about project conversion, not to explore or advocate for Agnostic Agile. The audience is technical practitioners, which partially overlaps with the Agnostic Agile audience, but the content is not tailored to agile strategists or those interested in agile philosophy. The signal-to-noise ratio is high for the topic of project conversion, but not for Agnostic Agile. No penalties were applied as the content is not outdated or critical of the category; it is simply unrelated. The final confidence score is very low, reflecting the near-total lack of relevance to the Agnostic Agile category.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-07T14:09:56",
    "ai_confidence": 1.7,
    "ai_mentions": 0.0,
    "ai_alignment": 0.5,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Hybrid Agile, nor any discussion of project management methodologies, agile practices, or the integration of traditional and agile approaches. The main themes are technical migration, tooling, and practical steps for modernising .NET projects. There is no conceptual alignment with the Hybrid Agile category, as the content does not address organisational, process, or delivery model issues. The depth of discussion is high for the technical topic, but entirely unrelated to Hybrid Agile. The intent is to inform developers and technical practitioners about project conversion, not to examine or critique Hybrid Agile. The audience is technical (developers, engineers), which only partially overlaps with the possible audience for Hybrid Agile (which may include strategists or project managers), but the content is not targeted at those interested in delivery frameworks. The signal-to-noise ratio is high for its own topic, but almost entirely noise with respect to Hybrid Agile. No penalties were applied, as the content is not outdated or satirical, but it is almost entirely irrelevant to the category. The resulting confidence score is extremely low, reflecting the near-total lack of fit.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Scrum Team",
    "calculated_at": "2025-05-07T14:09:59",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 0.0,
    "ai_signal": 0.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is entirely focused on technical guidance for upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct or indirect mentions of Scrum, Scrum Teams, or any of the accountabilities, structures, or responsibilities defined in the Scrum Guide. The main themes are project migration, build tooling, and modernisation of engineering practices, not team structure or agile frameworks. The intended audience is technical practitioners dealing with .NET migrations, not Scrum practitioners or those interested in Scrum Team accountability. No part of the content aligns with the definition or key topics of the 'Scrum Team' category, and there is no relevant signal for this classification.",
    "level": "Ignored"
  },
  "Operational Practices": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Operational Practices",
    "calculated_at": "2025-05-07T14:10:10",
    "ai_confidence": 87.2,
    "ai_mentions": 6.7,
    "ai_alignment": 9.2,
    "ai_depth": 8.8,
    "ai_intent": 8.5,
    "ai_audience": 8.0,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 87.0,
    "reasoning": "The content provides a detailed, step-by-step guide for upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on practical application and process improvement. It directly addresses operational efficiency by streamlining build processes, improving maintainability, and enabling modern tooling and CI/CD integration—core concerns of Operational Practices. While the term 'operational practices' is not explicitly mentioned, the content is conceptually aligned, offering actionable strategies, best practices, and troubleshooting tips for practitioners. The depth is substantial, covering both class library and web app scenarios, including limitations and pragmatic recommendations. The intent is clearly to inform and support technical teams in improving their engineering workflows. The audience is technical practitioners (developers, DevOps engineers) responsible for maintaining and modernising .NET applications, which matches the category's target. The content is focused, with minimal off-topic material, and maintains a high signal-to-noise ratio. No penalties were applied, as the content is current, practical, and not critical or satirical. The confidence score reflects strong alignment and depth, with slightly lower scores for direct mentions and audience targeting due to the lack of explicit category naming and a focus on a technical rather than process-agnostic audience.",
    "level": "Primary",
    "reasoning_summary": "This content is a great fit for the category, as it offers clear, actionable guidance for modernising .NET projects—directly supporting operational efficiency and best practices. While it doesn’t use the term ‘operational practices’ explicitly, its practical focus and relevance to technical teams make it highly suitable for practitioners aiming to improve workflows and maintainability."
  },
  "Sensemaking": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Sensemaking",
    "calculated_at": "2025-05-07T14:10:16",
    "ai_confidence": 13.45,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of sensemaking, nor are there references to frameworks, models, or principles related to interpreting complexity or organisational decision-making. The main ideas revolve around technical migration steps, tooling, and practical tips for developers, not about understanding or navigating complex environments. The depth of discussion is substantial, but it is entirely technical and implementation-focused, lacking any exploration of sensemaking concepts. The intent is to inform practitioners about project upgrades, not to foster sensemaking or decision-making in complex organisational contexts. The audience is technical (developers, engineers), which partially overlaps with sensemaking's potential audience, but the content is not tailored to strategists or leaders interested in sensemaking. The signal-to-noise ratio is moderate, as the content is focused but not on the relevant category. No penalties were applied, as the content is current and not critical of the category. Overall, the confidence score is very low, reflecting the lack of alignment with the sensemaking category.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-07T14:10:24",
    "ai_confidence": 7.6,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.5,
    "ai_audience": 0.8,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. It discusses practical steps, tools, and troubleshooting for modernising build systems and project files. There are no direct mentions of 'Organisational Physics' or systems thinking. Conceptual alignment is minimal: while the content touches on improving maintainability and future readiness (which could, in a broad sense, relate to organisational effectiveness), it does not discuss organisational dynamics, feedback loops, systems thinking, or holistic organisational behaviour. The depth is technical and detailed, but entirely within the software engineering and DevOps domain, not organisational theory. The intent is to inform practitioners about technical migration, not to analyse or influence organisational systems. The audience is technical (developers, DevOps engineers), which only partially overlaps with the typical audience for Organisational Physics (organisational strategists, systems thinkers). The signal-to-noise ratio is high for its intended technical topic, but almost entirely off-topic for Organisational Physics. No penalties were applied, as the content is current and not satirical or critical of the category. Overall, the confidence score is very low, reflecting that the content does not fit the Organisational Physics category.",
    "level": "Ignored"
  },
  "Continuous Learning": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-07T14:10:32",
    "ai_confidence": 36.85,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 3.8,
    "ai_audience": 7.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with practical steps, tooling advice, and troubleshooting tips. There are no direct or explicit mentions of 'Continuous Learning' or its synonyms. The main theme is technical migration and modernisation, not fostering a growth mindset, team knowledge sharing, or continuous improvement in an Agile/DevOps context. While the content does encourage future readiness and adaptability (e.g., 'prepare you for future upgrades', 'ready for what’s next'), these are incidental and not framed as part of a continuous learning culture or process. There is no discussion of feedback loops, learning from failure, or team-based knowledge sharing. The audience (developers, technical leads) could overlap with those interested in continuous learning, but the content is not targeted at promoting those principles. The signal-to-noise ratio is high, as the content is focused and relevant to its technical topic. Overall, the confidence score is low because the content does not align conceptually or in intent with the 'Continuous Learning' category, despite some minor thematic overlap regarding adaptability and future-proofing.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Value Stream Management",
    "calculated_at": "2025-05-07T14:10:38",
    "ai_confidence": 13.85,
    "ai_mentions": 0.2,
    "ai_alignment": 1.7,
    "ai_depth": 1.5,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There are no direct mentions of Value Stream Management, nor are its principles, techniques, or terminology referenced. The main intent is technical enablement for developers, not strategic optimisation of value flow or organisational alignment with customer value. While some benefits (e.g., improved maintainability, readiness for future changes) could tangentially support value stream improvements, these are not discussed in the context of Value Stream Management. The audience is technical practitioners (developers, build engineers), not value stream managers or strategists. The content is highly focused on project conversion specifics, with little to no discussion of process waste, value stream mapping, or continuous improvement at the organisational level. Therefore, the confidence that this content fits under the Value Stream Management category is very low.",
    "level": "Ignored"
  },
  "Sprint Review": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Sprint Review",
    "calculated_at": "2025-05-13T13:58:31",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 0.0,
    "ai_signal": 0.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is entirely focused on technical guidance for converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct or indirect references to Sprint Review, Scrum, or any related agile ceremonies. The main themes, intent, and audience are all technical and migration-focused, not process- or Scrum-related. No penalties were necessary as the content is not outdated or satirical, but it is wholly irrelevant to the Sprint Review category.",
    "reasoning_summary": "This content is a technical guide for .NET project migration and does not mention or relate to Sprint Review or Scrum events in any way. It is entirely outside the scope of the category.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Team Motivation",
    "calculated_at": "2025-05-07T14:10:56",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.5,
    "ai_audience": 0.8,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides step-by-step instructions, tool recommendations, and troubleshooting tips for technical practitioners. There is no direct mention of 'team motivation' or related terminology. The conceptual alignment is very low: while the content could indirectly support team productivity or reduce frustration by modernising workflows, it does not discuss engagement, ownership, team dynamics, or psychological factors. The depth of discussion is entirely technical, with no exploration of motivational strategies, team culture, or agile principles. The intent is to inform and guide on technical migration, not to motivate teams or address their dynamics. The audience is technical (developers, engineers), which partially overlaps with agile teams but is not specifically targeted at team motivation. The signal-to-noise ratio is high for technical migration but not for the motivation category. No penalties were applied, as the content is current and not critical or satirical. The final confidence score is very low, reflecting the near-total absence of relevant motivational content.",
    "level": "Ignored"
  },
  "Technical Mastery": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-07T14:11:07",
    "ai_confidence": 92.7,
    "ai_mentions": 7.6,
    "ai_alignment": 9.7,
    "ai_depth": 9.3,
    "ai_intent": 9.1,
    "ai_audience": 8.8,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content is a highly detailed, practical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong emphasis on engineering practices, code quality, maintainability, and modern tooling. It directly addresses best practices in software design (project structure, dependency management), the use of modern build systems, and the integration of CI/CD pipelines. The discussion is deep, covering both class libraries and web apps, with step-by-step instructions, tool recommendations, and troubleshooting advice. The main intent is to help practitioners achieve technical excellence and future readiness, aligning perfectly with the 'Technical Mastery' category. The audience is clearly technical (developers, engineers, architects), and the content is focused with minimal off-topic material. Direct mentions of 'engineering practices', 'maintainability', 'code quality tools', and 'build systems' are frequent, though the exact phrase 'Technical Mastery' is not used, resulting in a slightly lower score for direct mentions. No penalties are applied as the content is current, accurate, and supportive of the category's framing. The final confidence score reflects the strong conceptual alignment, depth, and technical focus of the content.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the 'Technical Mastery' category, as it offers in-depth, practical guidance on modernising .NET projects. It targets a technical audience, emphasises best engineering practices, and covers advanced topics like build systems and CI/CD. While it doesn’t use the exact category name, its focus on technical excellence and future-proofing aligns perfectly with the category’s intent."
  },
  "Organisational Culture": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-07T14:11:14",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 0.9,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a highly technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There is no direct mention of organisational culture, nor are there references to leadership, team dynamics, cultural transformation, or the impact of culture on agility or DevOps. The main themes are technical migration steps, tooling, and practical engineering advice. While there is a brief mention of 'discipline, skill, and a willingness to dive into the details' when converting web apps, this is not explored in a cultural context but rather as a technical challenge. The audience is technical practitioners (developers, engineers), which partially overlaps with the category's potential audience, but the content is not aligned with the intent or depth required for 'Organisational Culture.' The signal-to-noise ratio is low for this category, as nearly all content is technical and not cultural. No penalties were applied, as the content is current and does not contradict the category's framing. The low confidence score reflects the near-total absence of relevant cultural discussion.",
    "level": "Ignored"
  },
  "Agile Planning Tools": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-07T14:11:19",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.7,
    "ai_intent": 0.3,
    "ai_audience": 2.1,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and integrating with modern CI/CD pipelines. However, it does not discuss Agile Planning Tools, their methodologies, or their role in Agile frameworks. There are no direct mentions of Agile, planning tools, or related software (e.g., Jira, Trello, Asana). The main audience is .NET developers and technical practitioners interested in project migration, not Agile teams or planners. The content's intent is to inform about technical migration, not Agile planning or tool selection. While there is a brief mention of CI/CD and engineering practices, these are not explored in the context of Agile planning. Therefore, the confidence that this content fits under 'Agile Planning Tools' is extremely low, with only minimal incidental overlap (e.g., references to modern tooling and CI/CD, which could be relevant in Agile environments but are not discussed as such).",
    "level": "Ignored"
  },
  "Customer Retention": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Customer Retention",
    "calculated_at": "2025-05-07T14:11:26",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There is no direct mention of 'customer retention' or related terminology. The main themes are modernisation, maintainability, and future-proofing engineering systems, not strategies for retaining customers or enhancing user engagement. While improved maintainability and modern tooling could indirectly support customer retention by enabling better product evolution, this is not discussed or implied as a primary goal. The depth of discussion is technical and operational, not strategic or customer-focused. The intended audience is technical practitioners (developers, engineers), which partially overlaps with those interested in customer retention, but the content is not tailored to that perspective. The signal-to-noise ratio is high for its technical purpose, but almost entirely off-topic for customer retention. No penalties were applied as the content is current and not critical of the category. Overall, the confidence that this content fits under 'Customer Retention' is very low.",
    "level": "Ignored"
  },
  "Release Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Release Management",
    "calculated_at": "2025-05-07T14:11:34",
    "ai_confidence": 56.7,
    "ai_mentions": 2.2,
    "ai_alignment": 6.7,
    "ai_depth": 6.3,
    "ai_intent": 5.8,
    "ai_audience": 7.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style, focusing on modernising build systems, project formats, and tooling. There are only indirect references to release management topics, such as improved CI/CD integration, cleaner diffs for source control, and future readiness, but the main thrust is on project conversion and build modernisation rather than planning, scheduling, or controlling software releases. The content does not explicitly mention 'release management' or its core practices (e.g., release scheduling, risk management, stakeholder coordination). However, it does touch on aspects that can support release management, such as making builds more reliable and maintainable, and integrating with modern CI/CD pipelines. The depth of discussion is strong for migration and build topics, but only tangential for release management. The intent is to inform practitioners (developers, build engineers) about technical upgrades, not to guide or discuss release management strategy. The audience is technical and overlaps with those interested in release management, but the focus is not on release processes. The content is highly relevant to build and migration, with little off-topic material, resulting in a good signal-to-noise ratio. No penalties were applied as the content is current and not critical or satirical. The final confidence score reflects that while there is some conceptual overlap, the content is not primarily about release management.",
    "level": "Tertiary"
  },
  "Lean Thinking": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-07T14:11:40",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 4.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It focuses on modernising build systems, improving maintainability, and enabling compatibility with modern tooling. There are no direct mentions of Lean Thinking or its principles (e.g., value stream mapping, waste elimination, Kaizen, 5S, Kanban, etc.). While the content does touch on efficiency and reducing 'clutter' (e.g., simplifying project files, consolidating configuration), these are incidental and not framed within Lean Thinking concepts. The main intent is technical migration, not process improvement through Lean. The audience is technical (developers, engineers), which partially overlaps with Lean practitioners, but the focus is on .NET project structure, not Lean methodologies. The signal-to-noise ratio is moderate: the content is focused, but not on Lean. No penalties were applied as the content is current and not critical of Lean. Overall, the confidence score is low, reflecting only incidental and indirect alignment with Lean Thinking.",
    "level": "Ignored"
  },
  "Evidence Based Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Evidence Based Management",
    "calculated_at": "2025-05-07T14:11:46",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 2.0,
    "ai_audience": 4.1,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses practical steps, tools, and troubleshooting for modernising project structures, with an emphasis on engineering maintainability and future readiness. However, there are no direct mentions of Evidence-Based Management (EBM), nor are any of the EBM key topics (Current Value, Time to Market, Ability to Innovate, Unrealised Value, Empirical Decision-Making, Outcome Management) explicitly discussed. The main intent is technical enablement, not management or data-driven decision-making. While the content is relevant to technical practitioners (some overlap with EBM's possible audience), it does not address management practices, metrics, or empirical frameworks. The signal-to-noise ratio is moderate, as the content is focused but not on the EBM topic. No penalties were applied, as the content is current and not critical of EBM. The low confidence score reflects the lack of conceptual and topical alignment with Evidence-Based Management.",
    "level": "Ignored"
  },
  "Current Value": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Current Value",
    "calculated_at": "2025-05-07T14:11:52",
    "ai_confidence": 13.45,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of 'Current Value' or Evidence-Based Management, nor are there references to metrics, indicators, or real-time value assessment. The main themes are technical migration, tooling, and engineering best practices, not the measurement or analysis of value delivered to customers or organisations. The depth of discussion is substantial but entirely technical, with no exploration of value metrics, customer satisfaction, or revenue impact. The intent is to inform practitioners about project conversion, not to discuss or measure Current Value. The audience is technical (developers, engineers), which partially overlaps with the potential audience for Current Value discussions, but the content itself is not aligned. The signal-to-noise ratio is moderate, as the content is focused but off-topic for the category. No penalties were applied, as the content is not outdated or critical of the category. The final confidence score is low, reflecting the lack of alignment with the Current Value category.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Beta Codex",
    "calculated_at": "2025-05-07T14:11:58",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.0,
    "ai_audience": 3.1,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of Beta Codex or its principles. The main themes revolve around modernising build systems, improving tooling, and practical migration steps for software projects. There is no discussion of decentralised, adaptive, or human-centric organisational design, nor any reference to organisational models, leadership, or team dynamics. The audience is technical practitioners (developers, engineers) rather than organisational strategists or those interested in organisational design. The content is focused and relevant to its technical topic, but this topic is unrelated to Beta Codex. Therefore, the confidence score is extremely low, reflecting only a minimal, coincidental overlap in the sense of 'modernisation' but not in the specific context of Beta Codex.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Increment",
    "calculated_at": "2025-05-07T14:12:05",
    "ai_confidence": 7.2,
    "ai_mentions": 0.4,
    "ai_alignment": 1.8,
    "ai_depth": 1.9,
    "ai_intent": 1.2,
    "ai_audience": 1.0,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling future upgrades. There is no direct mention of 'Increment' as defined in Scrum or Agile, nor is there any discussion of delivering working software at the end of an iteration, value delivery, or the relationship to Scrum artifacts. The main themes are technical migration, tooling, and project structure, not the concept of Increment as a Scrum artifact. The audience (developers, technical leads) could overlap with those interested in Increment, but the content is not targeted at Agile practitioners or focused on iterative delivery. The signal-to-noise ratio is high for its technical purpose, but not for the Increment category. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of conceptual and direct alignment with the Increment category.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-07T14:12:08",
    "ai_confidence": 0,
    "ai_mentions": 0,
    "ai_alignment": 0,
    "ai_depth": 0,
    "ai_intent": 0,
    "ai_audience": 1.2,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions or references to Liberating Structures, nor any discussion of facilitation techniques, team engagement, or collaborative methods. The main ideas, depth, and intent are entirely about software engineering practices, not facilitation or team dynamics. The audience is technical (developers, engineers), which slightly overlaps with the potential audience for Liberating Structures, but the content is not aimed at facilitators, Scrum Masters, or Agile Coaches. The signal-to-noise ratio is low for the category, as the entire content is off-topic. No penalties were applied, as the content is not outdated or critical of the category; it is simply unrelated.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-07T14:12:17",
    "ai_confidence": 54.35,
    "ai_mentions": 3.7,
    "ai_alignment": 6.2,
    "ai_depth": 5.9,
    "ai_intent": 5.8,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content is primarily focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong emphasis on build tooling, project file formats, and modernising the development workflow. There are some direct references to source control (e.g., moving from TFVC to Git, cleaner diffs in source control, better integration with CI/CD pipelines), but these are not the main focus. The main conceptual alignment with 'Modern Source Control' comes from the context of migration from TFVC to Git and the mention of improved collaboration and code management as a result of these upgrades. However, the depth of discussion around actual source control practices, branching strategies, code review, or collaboration workflows is limited. The intent is tangentially relevant, as the migration to Git is a necessary step in the modernisation process, but the primary purpose is project upgrade and build system modernisation, not source control best practices. The audience is technical and likely overlaps with those interested in modern source control, but the content is not tailored specifically to source control practitioners. The signal-to-noise ratio is moderate: while there are relevant mentions, much of the content is about SDK-style project conversion, build configuration, and debugging, which are not core to the 'Modern Source Control' category. No penalties were applied, as the content is current and does not contradict the category's framing. The final confidence score reflects that while there is some relevance, the content does not deeply or centrally address modern source control practices.",
    "level": "Tertiary"
  },
  "Technical Debt": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Technical Debt",
    "calculated_at": "2025-05-07T14:12:27",
    "ai_confidence": 67.6,
    "ai_mentions": 2.7,
    "ai_alignment": 7.8,
    "ai_depth": 7.2,
    "ai_intent": 7.5,
    "ai_audience": 8.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content focuses on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, emphasising modernisation, maintainability, and future readiness. While it does not explicitly mention 'technical debt' or use the term directly, the entire discussion revolves around addressing the challenges of legacy code, outdated project structures, and the difficulties of maintaining and evolving such systems—core aspects of technical debt. The alignment is strong, as the main theme is reducing the burden of legacy decisions and improving the codebase for sustainable development. The depth is substantial, with detailed step-by-step guidance, tool recommendations, and pragmatic advice for both class libraries and web apps. The intent is to inform and support practitioners in making their codebases more maintainable, which fits the technical debt category, though the term itself is not foregrounded. The audience is clearly technical practitioners—developers and engineers responsible for maintaining and upgrading .NET projects. The signal-to-noise ratio is high, with most content directly relevant to the upgrade process and its implications for maintainability, though some sections focus on tooling specifics rather than the broader technical debt concept. No penalties are applied, as the content is current, constructive, and not contradictory to the category's framing. The confidence score reflects the strong conceptual fit and depth, but is moderated by the lack of direct terminology and some focus on technical implementation details rather than explicit technical debt management.",
    "level": "Secondary"
  },
  "Business Agility": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Business Agility",
    "calculated_at": "2025-05-07T14:12:36",
    "ai_confidence": 23.6,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a highly technical, step-by-step guide for converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on practical engineering tasks, tool usage, and troubleshooting for developers and technical teams. There is no direct mention of 'business agility' or its principles, nor does the content discuss organisational adaptability, leadership, culture, or strategic alignment with agile methodologies. The main intent is technical enablement, not business transformation. While modernising build systems and tooling can indirectly support business agility by enabling faster delivery and maintainability, the content does not make this connection explicit or discuss it in depth. The audience is technical (developers, engineers), which partially overlaps with those interested in business agility, but the focus is not on organisational change or agility outcomes. The signal-to-noise ratio is moderate, as the content is focused but not on the business agility topic. No penalties were applied, as the content is current and not critical or satirical. Overall, the confidence score is low, reflecting that the content is only tangentially related to business agility, if at all.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Miscellaneous",
    "calculated_at": "2025-05-07T14:12:42",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 0.9,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a highly technical, step-by-step guide for converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on practical engineering tasks, tool usage, and specific migration steps, with detailed code snippets and troubleshooting advice. There are no direct mentions of 'Miscellaneous' or any indication that the content is intended as a general or catch-all discussion. Conceptually, the content is tightly aligned with technical migration and modernisation, not with the broad, non-framework-specific discussions that define the Miscellaneous category. The depth is substantial, but it is focused on actionable, technical guidance rather than anecdotal, non-framework-aligned, or general business agility topics. The intent is to provide technical instructions, not to offer general reflections or non-technical explorations. The audience is technical practitioners (developers, engineers), which only partially overlaps with the broader audience for Miscellaneous. The signal-to-noise ratio is moderate: the content is focused, but its relevance to the Miscellaneous category is very low. No penalties were applied, as the content is current and does not contradict the category's framing, but the overall confidence is very low due to a lack of alignment with the category definition.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-07T14:12:48",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.7,
    "ai_audience": 1.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a highly practical, technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of complexity science, complexity thinking, or related frameworks (e.g., Cynefin, Stacey Matrix). The main ideas revolve around modernising build systems, improving maintainability, and enabling future tooling, but these are not framed in terms of non-linear dynamics, emergence, or organisational complexity. The depth of discussion is substantial for technical migration, but not for complexity thinking. The intent is to inform practitioners about technical upgrades, not to explore or apply complexity science principles. The audience is technical (developers, engineers), which could overlap with some complexity thinking audiences, but the content is not targeted at strategists or those interested in organisational dynamics. The signal-to-noise ratio is high for its technical purpose, but almost entirely off-topic for the complexity thinking category. No penalties were applied, as the content is current and not satirical or critical of complexity thinking. The very low confidence score reflects the near-total absence of relevant category content.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-07T14:12:54",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and integrating with modern tooling. However, there are no direct mentions of Site Reliability Engineering (SRE), nor are SRE principles, practices, or terminology (such as SLOs, SLIs, incident response, or reliability engineering) discussed. The main intent is to help developers upgrade project formats for better tooling and future readiness, not to address reliability, scalability, or production system resilience. The audience is technical (developers/engineers), which partially overlaps with SRE practitioners, but the content is not targeted at SREs or those interested in reliability engineering. The signal-to-noise ratio is moderate, as the content is focused but not on the SRE topic. Overall, the confidence that this content fits under 'Site Reliability Engineering' is very low.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-07T14:13:05",
    "ai_confidence": 38.25,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 2.8,
    "ai_audience": 7.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It covers motivations such as modern tooling, easier builds, and future readiness, and provides step-by-step instructions for both class libraries and web apps. There are some indirect references to modern engineering practices (e.g., CI/CD pipelines, automation, maintainability), but the main focus is on project structure migration, not on the practice of frequent releases itself. \n\nDirect Mentions (1.2): The term 'frequent releases' is not mentioned, nor are its synonyms. There is a single mention of 'CI/CD pipelines' as a benefit, but this is not elaborated upon in the context of release frequency.\n\nConceptual Alignment (4.7): The content aligns with some principles that enable frequent releases (e.g., automation, modern build systems, CI/CD compatibility), but these are secondary to the main topic of project migration. The core meaning of frequent releases is not the main theme.\n\nDepth of Discussion (4.3): The discussion is deep regarding SDK-style migration, but only touches on topics (like CI/CD) that could support frequent releases. There is no substantial exploration of release frequency, deployment strategies, or related metrics.\n\nIntent/Purpose Fit (2.8): The intent is to guide technical practitioners through project upgrades, not to inform or advocate for frequent releases. Any relevance to frequent releases is incidental.\n\nAudience Alignment (7.1): The content targets technical practitioners (developers, DevOps engineers), which matches the likely audience for frequent releases, though the topic is not directly about release practices.\n\nSignal-to-Noise Ratio (6.2): The content is focused and technical, but only a small portion is relevant to frequent releases. Most of the content is about migration steps, not release cadence or process.\n\nNo penalties were applied, as the content is current, accurate, and does not contradict the category's framing. The final confidence score reflects that while there is some indirect relevance (enabling practices that could support frequent releases), the content does not directly or deeply address the category.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-07T14:13:12",
    "ai_confidence": 23.85,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style for improved tooling, maintainability, and future readiness. While it references 'future readiness' and 'preparing for what’s next', these are operational and technical improvements rather than explicit or in-depth discussions of long-term strategic objectives or business agility. There are no direct mentions of 'strategic goals', nor does the content discuss frameworks for setting or measuring strategic objectives, alignment with Agile methodologies, or the impact on organisational culture. The main intent is to provide practical, step-by-step technical advice for developers and engineers, not to articulate or align with high-level strategic goals. The audience is technical practitioners, not strategists or executives. The signal-to-noise ratio is high, as the content is focused and relevant to its technical purpose, but this purpose is not strategic in nature. Therefore, the confidence that this content fits under the 'Strategic Goals' category is low.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Enterprise Agility",
    "calculated_at": "2025-05-07T14:13:17",
    "ai_confidence": 23.85,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on practical steps, tooling, and troubleshooting for modernising build systems and project formats. There are no direct mentions of 'Enterprise Agility' or related frameworks (e.g., SAFe, LeSS), nor does it discuss organisational structures, leadership, or cultural change. The main intent is to help developers modernise legacy codebases for better tooling and maintainability, not to foster enterprise-wide adaptability or transformation. The audience is technical (developers, engineers), which partially overlaps with those interested in enterprise agility, but the content is not aimed at strategists or organisational leaders. The signal-to-noise ratio is high for its technical purpose, but almost none of the content addresses enterprise-level agility, culture, or change management. Therefore, the confidence that this content fits the 'Enterprise Agility' category is very low.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Working Software",
    "calculated_at": "2025-05-07T14:13:24",
    "ai_confidence": 54.85,
    "ai_mentions": 2.7,
    "ai_alignment": 6.2,
    "ai_depth": 6.5,
    "ai_intent": 6.0,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style, focusing on modernising build systems, improving maintainability, and enabling future upgrades. While it is highly practical and targets technical practitioners (developers, DevOps engineers), it does not directly discuss 'working software' as an Agile artifact or increment. There are no explicit references to Agile, Scrum, or the concept of working software as a deliverable measuring progress or value. The main focus is on project structure, build tooling, and migration steps, not on the delivery of usable, customer-aligned software increments. However, the intent is to enable teams to produce more maintainable and future-ready software, which is tangentially related to the goals of working software. The depth is solid regarding migration techniques, but the discussion is not framed in terms of iterative delivery, customer value, or business alignment. The audience is well-aligned with practitioners who would care about working software, but the content's signal is diluted by its focus on technical migration rather than on the artifact of working software itself. No penalties were applied, as the content is current and not critical or satirical. The confidence score reflects moderate alignment: the content supports the creation of working software but does not directly address the category's core definition.",
    "level": "Tertiary"
  },
  "Agile Transformation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Transformation",
    "calculated_at": "2025-05-07T14:13:30",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 0.8,
    "ai_audience": 5.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Agile Transformation, nor are Agile principles, frameworks, or organisational change strategies discussed. The main themes are technical migration, tooling, and project file management, which do not conceptually align with Agile Transformation as defined. The depth is technical and detailed, but entirely about engineering practices, not about shifting mindsets, change management, or organisational agility. The intent is to inform developers about modernising .NET projects, not to guide Agile transformation. The audience is technical (developers/engineers), which partially overlaps with Agile Transformation audiences, but the content is not targeted at Agile leaders or change agents. The signal-to-noise ratio is moderate, as the content is focused but off-topic for Agile Transformation. No penalties were applied, as the content is not outdated or satirical. The low confidence score reflects the near-total lack of relevance to Agile Transformation.",
    "level": "Ignored"
  },
  "Experimentation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Experimentation",
    "calculated_at": "2025-05-07T14:13:36",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 5.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of 'experimentation' or related hypothesis-driven approaches. The main themes are migration, tooling, and practical steps for modernising project files, not systematic testing of ideas or validating assumptions within Agile workflows. There is no discussion of hypothesis formulation, A/B testing, or learning from experiments. The intent is to inform practitioners about technical migration, not to explore or advocate for experimentation as defined in the category. The audience (developers and technical leads) could overlap with those interested in experimentation, but the content itself is not aligned. The signal-to-noise ratio is moderate, as the content is focused but not on the relevant topic. Overall, the confidence score is very low, reflecting the lack of conceptual and thematic fit with the 'Experimentation' category.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-07T14:13:41",
    "ai_confidence": 7.7,
    "ai_mentions": 0.1,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.7,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of 'Systems Thinking' or its foundational principles. The main focus is on practical steps, tools, and troubleshooting for project migration, not on holistic analysis, feedback loops, or system interdependencies. While there is some implicit consideration of improving the overall engineering system (e.g., making it 'simpler, more maintainable, and ready for what’s next'), this is not explored through a Systems Thinking lens. The audience is technical practitioners, which could overlap with Systems Thinking audiences, but the content is not targeted at organisational dynamics or decision-making processes. The signal-to-noise ratio is high for its intended topic, but that topic is not Systems Thinking. No penalties were applied as the content is current and not critical of the category. Overall, the confidence that this content fits under 'Systems Thinking' is extremely low.",
    "level": "Ignored"
  },
  "Product Validation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Validation",
    "calculated_at": "2025-05-07T14:13:47",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.5,
    "ai_intent": 1.0,
    "ai_audience": 5.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It covers practical steps, tooling, and troubleshooting for modernising build systems and project structures. There are no direct mentions of product validation, user testing, market fit, or customer feedback loops. The main intent is technical enablement for developers, not validating product ideas with users. While the audience (developers/engineers) could overlap with those interested in product validation, the content itself is not conceptually aligned with the category. The discussion is deep and detailed, but entirely about engineering migration, not about testing assumptions with users or gathering feedback. The signal-to-noise ratio is moderate, as the content is focused but off-topic for product validation. No penalties were applied, as the content is current and not critical of the category. The low confidence score reflects the lack of alignment with the definition and key topics of 'Product Validation.'",
    "level": "Ignored"
  },
  "Agile Planning": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Planning",
    "calculated_at": "2025-05-07T14:13:53",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 7.2,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses tooling, migration steps, and practical tips for modernising build systems and project structures. There are no direct mentions of Agile Planning, nor are Agile principles, planning ceremonies, or iterative delivery discussed. The main intent is technical enablement for future-proofing and maintainability, not planning or process alignment. The audience (developers, technical leads) could overlap with Agile practitioners, but the content is not targeted at Agile planning activities. The signal-to-noise ratio is high for its technical purpose, but almost none of the content is relevant to Agile Planning as defined. Therefore, the confidence score is very low, reflecting only a minimal conceptual overlap (e.g., future readiness and maintainability could be tangentially related to Agile goals, but not to Agile Planning specifically).",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-07T14:13:58",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 0.2,
    "ai_signal": 0.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct or indirect mentions of Open Space Agile, Open Space Technology, Agile transformation, or related principles such as psychological safety, co-creation, or emergence. The main themes are technical migration, build tooling, and project file management, which are unrelated to organisational agility or collaborative change processes. The audience is technical (developers, engineers), but not in the context of Agile transformation or Open Space Agile. The content is highly focused on its technical topic, with no relevant signal for the Open Space Agile category. Therefore, all scores are at or near zero, with a minimal nonzero value for audience and signal to reflect the technical/professional context, but this is not sufficient for category fit. No penalties were applied as the content is not outdated or critical of the category.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Portfolio Management",
    "calculated_at": "2025-05-07T14:14:05",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.6,
    "ai_intent": 0.3,
    "ai_audience": 0.4,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses practical steps, tools, and troubleshooting for modernising project structures, with a strong emphasis on engineering best practices and future readiness. However, it does not mention or discuss portfolio management, nor does it address strategic alignment, investment prioritisation, value stream optimisation, or any of the key topics outlined in the Portfolio Management category. The audience is technical (developers, engineers), not portfolio managers or strategists. The intent is to provide hands-on migration guidance, not to inform or support portfolio-level decision-making. There is no direct or indirect reference to managing a portfolio of projects, nor to methodologies or frameworks for aligning projects with organisational strategy. The signal-to-noise ratio is low for this category, as all content is off-topic for Portfolio Management. Therefore, the confidence score is extremely low, reflecting only a negligible chance of relevance due to the possibility that such migrations could be a small part of a larger portfolio initiative, but this is not discussed or implied in the content.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Decision Theory",
    "calculated_at": "2025-05-07T14:14:12",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.0,
    "ai_audience": 4.1,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of decision theory, heuristics, probability, behavioural economics, or decision-making frameworks. The main themes revolve around technical migration steps, tooling, and practical advice for developers. While there are some references to making 'pragmatic calls' and recommendations, these are not explored through the lens of decision theory or uncertainty; rather, they are straightforward technical best practices. The depth of discussion is substantial, but it is entirely technical and implementation-focused, not conceptual or theoretical. The intent is to inform and guide practitioners on project conversion, not to discuss or improve decision-making processes under uncertainty. The audience is technical (developers, engineers), which partially overlaps with decision theory's potential audience, but the content is not targeted at strategists or those interested in decision frameworks. The signal-to-noise ratio is moderate, as the content is focused but not relevant to decision theory. No penalties were applied, as the content is current and does not contradict the category. Overall, the confidence score is very low, reflecting the lack of alignment with the Decision Theory category.",
    "level": "Ignored"
  },
  "Empirical Process Control": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-07T14:14:17",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of empirical process control, Agile, Scrum, or related principles such as transparency, inspection, or adaptation. The main ideas revolve around technical migration steps, tooling, and practical tips for modernising project files, not evidence-based decision-making or iterative improvement. There is no discussion of feedback loops, metrics, or case studies related to empirical process control. The depth of discussion is substantial for the technical migration topic but not for the empirical process control category. The intent is to inform practitioners about project conversion, not to explore or promote empirical process control. The audience (developers and technical leads) could overlap with those interested in empirical process control, but the content itself is not aligned. The signal-to-noise ratio is moderate, as the content is focused but not on the relevant category. No penalties were applied, as the content is current and not critical of the category. Overall, the confidence score is very low, reflecting the lack of alignment with the empirical process control category.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-07T14:14:24",
    "ai_confidence": 81.85,
    "ai_mentions": 6.2,
    "ai_alignment": 8.7,
    "ai_depth": 8.3,
    "ai_intent": 8.0,
    "ai_audience": 8.1,
    "ai_signal": 7.9,
    "ai_penalties_applied": true,
    "ai_penalty_points": 1,
    "ai_penalty_details": "Mentions dimension penalised by 0.8 points: the term 'Application Lifecycle Management' is not directly named, and while ALM concepts are present, explicit reference is lacking.",
    "final_score": 82.0,
    "reasoning": "The content provides a detailed, practical guide to upgrading legacy .NET and ASP.NET MVC projects to SDK-style, focusing on modernising build systems, improving maintainability, and preparing for future development. These are core concerns of Application Lifecycle Management (ALM), particularly in the context of maintenance, upgrade, and tooling. The discussion covers best practices, tools (e.g., try-convert, MSBuild SDKs), and process recommendations, all of which are highly relevant to ALM. However, the content does not explicitly mention 'Application Lifecycle Management' or use ALM-specific terminology, which slightly reduces the directness of the fit. The depth is strong, with step-by-step instructions, troubleshooting, and strategic recommendations. The intent is to inform and guide practitioners responsible for application maintenance and evolution, aligning well with the ALM audience. The signal-to-noise ratio is high, with minimal tangential content. A penalty was applied to the 'Mentions' dimension due to the lack of explicit ALM references, but no other penalties were necessary. Overall, the content is a strong fit for the category, with a high confidence score reflecting its practical alignment with ALM principles.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the Application Lifecycle Management category, as it offers in-depth, actionable guidance on modernising .NET projects—key aspects of ALM. While it doesn’t use ALM-specific terms, its focus on maintenance, upgrades, and tooling directly supports ALM goals, making it highly relevant for practitioners in this field."
  },
  "Daily Scrum": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-07T14:14:28",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.0,
    "ai_depth": 0.0,
    "ai_intent": 0.0,
    "ai_audience": 1.0,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The content is entirely focused on technical guidance for upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct or indirect mentions of the Daily Scrum, Scrum framework, or any Scrum events. The main ideas, structure, and depth are all about software migration, build tooling, and debugging, with no conceptual overlap with Daily Scrum practices, team alignment, or Scrum ceremonies. The intent is to inform developers and technical practitioners about project conversion, not to discuss or support Daily Scrum activities. The audience is technical, which is a partial match, but the subject matter is unrelated. The signal-to-noise ratio is high for its actual topic, but entirely off-topic for Daily Scrum. No penalties were applied as the content is not outdated or satirical; it is simply irrelevant to the category.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-07T14:14:36",
    "ai_confidence": 1.7,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.3,
    "ai_audience": 2.0,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Agile frameworks, nor is there any discussion of Agile principles, values, or methodologies such as Scrum, Kanban, Lean, or XP. The main ideas revolve around modernising build systems, improving maintainability, and leveraging new tooling, but these are not conceptually aligned with the Agile Frameworks category as defined. The depth of discussion is substantial, but it is entirely about technical migration and not about frameworks, organisational agility, or value delivery in the Agile sense. The intent is to provide practical engineering advice, not to inform or support an audience interested in Agile frameworks. The audience is technical (developers, DevOps), which only partially overlaps with Agile practitioners, but the content is not targeted at Agile roles or concerns. The signal-to-noise ratio is low for this category, as nearly all content is off-topic for Agile Frameworks. No penalties were applied, as the content is not outdated or satirical, but the confidence score is extremely low due to the lack of relevance.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-05-07T14:14:40",
    "ai_confidence": 7.65,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.9,
    "ai_intent": 0.8,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It focuses on modernising build systems, improving maintainability, and enabling future upgrades. There are no direct mentions of 'Minimum Viable Product' or MVP concepts, nor does the content discuss rapid iteration, hypothesis testing, or market validation. The main intent is technical migration, not MVP development. The audience is technical practitioners (developers, engineers), which partially overlaps with the MVP category's audience, but the focus is on engineering practices rather than product validation. The signal-to-noise ratio is high for its topic, but the topic itself is not aligned with MVP. No penalties were applied as the content is current and not critical of MVP principles. The low confidence score reflects the lack of conceptual and topical overlap with the MVP category.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Test Driven Development",
    "calculated_at": "2025-05-07T14:14:49",
    "ai_confidence": 7.6,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.7,
    "ai_audience": 2.1,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. It covers technical steps, tools, and troubleshooting for project migration, focusing on modernising build systems, improving maintainability, and integrating with CI/CD. There is only a single, brief mention of testing: 'Test thoroughly. Rebuild, run tests, and make sure everything resolves. This is not the time to skip CI.' However, this is a generic recommendation to run tests after migration, not a discussion of TDD principles, practices, or methodology. There is no mention of the TDD cycle, writing tests before code, or any of the core TDD topics outlined in the classification definition. The main intent is project modernisation, not TDD. The audience is technical, but the content is not targeted at TDD practitioners. The signal-to-noise ratio is low for TDD relevance, as nearly all content is off-topic for this category. No penalties were applied, as the content is not outdated or critical of TDD. The very low scores across all dimensions reflect the near-total lack of TDD relevance, resulting in a proportionately low confidence score.",
    "level": "Ignored"
  },
  "Common Goals": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Common Goals",
    "calculated_at": "2025-05-07T14:14:54",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style for improved builds, tooling, and maintainability. There are no direct mentions of 'Common Goals' or related Agile/DevOps alignment concepts. The main ideas revolve around technical migration steps, not organisational alignment, shared objectives, or frameworks like OKRs. While the content does touch on making engineering systems 'simpler, more maintainable, and ready for what’s next,' this is framed as a technical benefit rather than a discussion of aligning strategy with execution or fostering collaboration through shared goals. The depth is technical and practical, not conceptual regarding Common Goals. The intent is to inform practitioners about project conversion, not to discuss or promote the establishment or operationalisation of Common Goals. The audience (developers, technical leads) could overlap with those interested in Common Goals, but the content is not targeted at strategic alignment or organisational performance. The signal-to-noise ratio is high for its technical purpose, but almost none of the content is relevant to the Common Goals category. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of direct or conceptual fit with the Common Goals category.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agentic Agility",
    "calculated_at": "2025-05-07T14:15:02",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of 'Agentic Agility' or explicit references to agency, intentionality, or adaptive action within Agile, Scrum, or DevOps frameworks. The main themes are technical migration, tooling, and practical steps for modernising project files, not the enhancement of outcomes through agency or adaptive action. There is no discussion of self-management, accountability, or the distinction between human and AI agency. The intent is to inform practitioners about technical upgrades, not to explore or cultivate agency in socio-technical environments. The audience is technical (developers, engineers), which partially overlaps with the Agentic Agility category, but the content is not focused on the relevant conceptual domain. The signal-to-noise ratio is low for this category, as most of the content is off-topic regarding agency or agility in the sense defined. No penalties were applied, as the content is not outdated or critical of the category. The low confidence score reflects the lack of alignment and relevance to Agentic Agility.",
    "level": "Ignored"
  },
  "Mentoring": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Mentoring",
    "calculated_at": "2025-05-07T14:15:09",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It provides step-by-step instructions, tooling recommendations, and troubleshooting tips for technical practitioners. There are no direct or indirect references to mentoring, coaching, leadership development, or fostering professional growth. The main intent is technical enablement, not skill or behaviour development. The audience is technical (developers, engineers), which partially overlaps with the mentoring category, but the content is not aimed at mentoring or coaching them. The signal-to-noise ratio is low for mentoring, as nearly all content is technical implementation detail. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the near-total absence of mentoring-related themes, with only a slight overlap in audience.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-07T14:15:16",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of 'Unrealised Value' or Evidence-Based Management, nor is there any discussion of untapped opportunities, market demand, or innovation potential as defined in the category. The main intent is to provide practical steps for modernising project files and improving engineering workflows, not to explore potential value or strategic opportunities. While the content does discuss 'future readiness' and making systems 'simpler, more maintainable, and ready for what’s next,' these are framed in terms of technical debt reduction and engineering best practices, not in the context of identifying or measuring unrealised value. The audience (technical practitioners and engineers) partially overlaps with those interested in business agility, but the focus is not on strategic value realisation. The signal-to-noise ratio is moderate, as the content is focused but not on the relevant category. No penalties were applied, as the content is current and not critical or satirical. Overall, the confidence score is low, reflecting the lack of conceptual and direct alignment with the 'Unrealised Value' category.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Throughput",
    "calculated_at": "2025-05-07T14:15:21",
    "ai_confidence": 7.8,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.3,
    "ai_intent": 0.4,
    "ai_audience": 0.6,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It covers practical steps, tools, and troubleshooting for modernising project files, improving build systems, and integrating with modern CI/CD pipelines. However, there is no direct mention of 'throughput' as a delivery metric, nor any discussion of measuring, analysing, or visualising throughput. The main focus is on technical migration and future-proofing, not on delivery metrics or team performance. There are some tangential references to improved build times and maintainability, which could indirectly support throughput, but these are not framed or analysed as throughput metrics. The audience is technical practitioners, which aligns with the typical throughput audience, but the content's intent and depth are not aligned with the category. The signal-to-noise ratio is high for migration topics but low for throughput relevance. No penalties were applied, as the content is current and not critical of throughput as a concept.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-05-07T14:15:27",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.1,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of 'Evidence Based Leadership' or related terminology. The main themes revolve around technical migration steps, tooling, and practical advice for developers and engineers, not leadership or decision-making based on empirical evidence. There is no discussion of metrics, KPIs, evidence-based management principles, or leadership strategies. The depth of discussion is substantial for technical migration but not for evidence-based leadership. The intent is to inform practitioners about technical upgrades, not to guide leadership decisions or organisational improvements. The audience is technical (developers, engineers), which only partially overlaps with the possible audience for evidence-based leadership (which may include technical leaders, but the content does not address them in a leadership context). The signal-to-noise ratio is high for its technical purpose, but almost none of the content is relevant to the evaluated category. No penalties were applied as the content is not outdated or critical of the category. The low confidence score reflects the near-total lack of alignment with the 'Evidence Based Leadership' category.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Working Agreements",
    "calculated_at": "2025-05-07T14:15:33",
    "ai_confidence": 7.6,
    "ai_mentions": 0.2,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.5,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of 'working agreements' or related terminology. The main themes revolve around technical migration steps, tooling, and practical advice for modernising project files, not on team norms, collaboration principles, or structured approaches to teamwork. There is some indirect relevance in the sense that the content discusses practices that could affect team workflows (e.g., standardising project formats, improving CI/CD), but these are not framed as team agreements or collaborative norms. The depth of discussion is high for the technical topic, but not for working agreements. The intent is to inform practitioners about technical upgrades, not to establish or review team working agreements. The audience is technical (developers, engineers), which matches the likely audience for working agreements, but the content is not focused on that category. The signal-to-noise ratio is high for its actual topic, but almost entirely off-topic for working agreements. No penalties were applied as the content is current and not satirical or critical. Overall, the confidence that this content fits under 'Working Agreements' is extremely low.",
    "level": "Ignored"
  },
  "Employee Engagement": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-07T14:15:38",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.5,
    "ai_audience": 3.1,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of employee engagement or related concepts. The main themes are technical migration, tooling, and project structure, with no discussion of motivation, commitment, team dynamics, or psychological/social aspects of work. The depth of discussion is substantial, but entirely within the technical domain. The intent is to inform developers and technical leads about modernising codebases, not to address employee engagement. The audience is technical practitioners, not HR, managers, or those interested in engagement strategies. The signal-to-noise ratio is high for technical content, but nearly all of it is off-topic for employee engagement. No penalties were applied, as the tone is neutral and the content is current. The very low confidence score reflects the near-total lack of relevance to the employee engagement category.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-07T14:15:43",
    "ai_confidence": 23.85,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of Lean Product Development or Lean principles. Conceptually, the content aligns only weakly: while it discusses efficiency, maintainability, and reducing technical debt (which are tangentially related to Lean's focus on waste reduction and value), it does not explicitly connect these actions to Lean Product Development frameworks, principles, or methodologies. The depth of discussion is substantial regarding technical migration steps, but not in the context of Lean Product Development. The intent is to provide practical upgrade advice, not to foster Lean thinking or continuous improvement culture. The audience (developers, technical leads) could overlap with Lean Product Development practitioners, but the content is not tailored to Lean audiences. The signal-to-noise ratio is high for its technical purpose, but low for Lean Product Development relevance. No penalties were applied, as the content is current and not critical of Lean. Overall, the confidence score is low, reflecting the lack of direct relevance to the Lean Product Development category.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Psychological Safety",
    "calculated_at": "2025-05-07T14:15:49",
    "ai_confidence": 2.1,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.0,
    "ai_intent": 2.5,
    "ai_audience": 3.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no direct mentions of psychological safety, nor are there any implicit references to team dynamics, risk-taking, open communication, or supportive culture. The main themes are technical migration, tooling, and practical steps for modernising project files. The depth of discussion is substantial, but it is entirely technical and does not touch on psychological safety concepts. The intent is to inform and guide developers on project upgrades, not to address psychological safety. The audience is technical practitioners, which could overlap with the psychological safety category, but the content is not aligned in purpose. The signal-to-noise ratio is high for its technical topic, but irrelevant for psychological safety. No penalties were applied as the content is not outdated or critical of the category; it is simply unrelated. The very low confidence score reflects the complete lack of relevance to psychological safety.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Value Delivery",
    "calculated_at": "2025-05-07T14:15:55",
    "ai_confidence": 38.85,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 3.8,
    "ai_audience": 5.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style for improved builds, tooling, and maintainability. While it references modern engineering practices and mentions CI/CD pipelines, the primary focus is on technical migration steps, not on strategies or methodologies for iterative or continuous value delivery as defined by the category. There are indirect links to value delivery (e.g., making systems more maintainable and future-ready, which can support value delivery), but these are not the main thrust. The content does not explicitly discuss Agile, Scrum, DevOps, value stream mapping, or customer-centric delivery practices. The audience is technical practitioners, which partially aligns, but the discussion is implementation-focused rather than value management-focused. There are no penalties applied, as the content is current and not critical of value delivery concepts. The confidence score reflects the limited but present conceptual overlap, with most of the content outside the strict scope of 'Value Delivery' as defined.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Self Organisation",
    "calculated_at": "2025-05-07T14:16:00",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.6,
    "ai_depth": 1.8,
    "ai_intent": 1.5,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of self-organisation, nor are there references to Agile, autonomy, team empowerment, or related principles. The main ideas revolve around technical migration steps, tooling, and practical advice for developers. There is no discussion of team dynamics, leadership, or practices that enable teams to self-organise. The depth is technical and detailed, but entirely about project conversion, not about self-organisation as a concept or practice. The intent is to inform developers about modernising project files, not to discuss or promote self-organisation. The audience (developers/engineers) could overlap with those interested in self-organisation, but the content itself is not aligned. The signal-to-noise ratio is high for its technical purpose, but almost entirely off-topic for the self-organisation category. No penalties were applied as the content is not outdated or critical of the category; it is simply irrelevant. The low confidence score reflects the near-total lack of alignment with the self-organisation category.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-07T14:16:05",
    "ai_confidence": 1.7,
    "ai_mentions": 0.0,
    "ai_alignment": 0.5,
    "ai_depth": 0.7,
    "ai_intent": 1.0,
    "ai_audience": 3.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project formats. There are no direct mentions of Cell Structure Design, the Beta Codex, or any related organisational design concepts. The main ideas revolve around software engineering practices, project file formats, and tooling, which are not conceptually aligned with Cell Structure Design. The depth of discussion is substantial, but entirely within the context of software migration and modernisation, not organisational structure. The intent is to inform developers and technical practitioners about project upgrades, not to discuss or promote Cell Structure Design. The audience is technical (developers, engineers), which only partially overlaps with the possible audience for Cell Structure Design (which could include technical leaders, but in an organisational design context). The signal-to-noise ratio is high for its intended topic, but almost entirely irrelevant to the Cell Structure Design category. No penalties were applied, as the content does not contradict or undermine the category; it is simply unrelated. The extremely low confidence score reflects the near-total lack of relevance to Cell Structure Design.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-05-07T14:16:10",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.5,
    "ai_audience": 4.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a detailed guide on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of Acceptance Test Driven Development (ATDD), acceptance criteria, or related collaborative testing practices. The main focus is on project structure, build tooling, and migration strategies, not on software development methodologies or testing approaches. There is a brief mention of testing ('Test thoroughly. Rebuild, run tests, and make sure everything resolves. This is not the time to skip CI.'), but this is generic advice about verifying builds and not about acceptance testing or ATDD principles. The audience (developers and technical leads) could overlap with those interested in ATDD, but the content itself is not aligned with the category. The signal-to-noise ratio is low for ATDD, as nearly all content is off-topic for the category. No penalties were applied, as the content is not outdated or critical of ATDD. The very low confidence score reflects the near-total lack of relevance to Acceptance Test Driven Development.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Coaching",
    "calculated_at": "2025-05-07T14:16:15",
    "ai_confidence": 13.6,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 1.0,
    "ai_audience": 6.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It provides step-by-step instructions, tool recommendations, and troubleshooting tips for developers and technical teams. There are no direct mentions of coaching, nor does the content discuss coaching techniques, the role of a coach, or any of the key topics outlined in the Coaching category definition. The main intent is to inform and guide on a technical migration process, not to facilitate growth, development, or collaborative learning in the sense of coaching. The audience is technical practitioners, which partially overlaps with coaching audiences, but the content itself is not aligned with coaching practices or philosophy. The signal-to-noise ratio is moderate, as the content is focused but not on the coaching topic. No penalties were applied as the content is current and not critical or satirical. Overall, the confidence that this content fits under the Coaching category is very low.",
    "level": "Ignored"
  },
  "Windows": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Windows",
    "calculated_at": "2025-05-07T14:16:21",
    "ai_confidence": 18.625,
    "ai_mentions": 0.5,
    "ai_alignment": 2.2,
    "ai_depth": 2.5,
    "ai_intent": 2.0,
    "ai_audience": 6.0,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content is focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with detailed technical steps and recommendations. While these technologies are often deployed on Windows and may be used in Windows environments, the article does not directly discuss Windows operating system installation, configuration, troubleshooting, or updates. There are no explicit mentions of Windows, nor does the content address Windows-specific features, settings, or user management. The main audience is technical practitioners (developers, DevOps), which partially overlaps with the Windows category, but the intent and depth are centred on .NET project migration, not Windows OS management. The signal-to-noise ratio is moderate, as the content is highly relevant to .NET but only tangentially related to Windows. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of direct or substantial alignment with the Windows category definition.",
    "level": "Ignored"
  },
  "GitHub": {
    "resourceId": "2mdv7QE2nIt",
    "category": "GitHub",
    "calculated_at": "2025-05-07T14:16:26",
    "ai_confidence": 19.7,
    "ai_mentions": 1.2,
    "ai_alignment": 2.5,
    "ai_depth": 2.7,
    "ai_intent": 2.0,
    "ai_audience": 6.0,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style projects. It covers migration from TFVC to Git, modernising project files, and integrating with modern build tools. However, there is no direct mention of GitHub or any of its services, features, or workflows. The only tangentially related topic is the move from TFVC to Git, but 'Git' is not specific to GitHub and is not discussed in the context of GitHub's platform, features, or best practices. There are no references to GitHub Actions, repositories, pull requests, or any GitHub-specific integrations. The audience (developers modernising .NET projects) could overlap with GitHub users, but the content is not tailored to GitHub practitioners or focused on GitHub methodologies. The signal-to-noise ratio is moderate, as the content is highly relevant to .NET project modernisation but not to GitHub. No penalties were applied, as the content is current and not critical or satirical. The low confidence score reflects the lack of direct or substantial connection to the GitHub category.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Organisational Change",
    "calculated_at": "2025-05-07T14:16:38",
    "ai_confidence": 18.7,
    "ai_mentions": 0.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses specific tools, commands, and technical steps for migration, such as using try-convert, MSBuild.SDK.SystemWeb, and manual .csproj edits. There is no direct mention of organisational change, change management frameworks, leadership, or agility. The main ideas are about technical migration and modernising build systems, not about transforming organisational processes or culture. The depth is technical and detailed, but not aligned with the category's core meaning. The intent is to inform developers and technical practitioners, not organisational leaders or change agents. The audience is somewhat aligned, as technical staff may be involved in change initiatives, but the focus is on engineering practices, not organisational transformation. The signal-to-noise ratio is moderate, as the content is focused but off-topic for the category. No penalties were applied, as the content is current and not satirical or critical of the category. Overall, the confidence score is low, reflecting the lack of conceptual and direct alignment with 'Organisational Change.'",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Scrum Master",
    "calculated_at": "2025-05-07T14:16:44",
    "ai_confidence": 1.2,
    "ai_mentions": 0.0,
    "ai_alignment": 0.5,
    "ai_depth": 0.5,
    "ai_intent": 1.0,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 1.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of the Scrum Master role, Scrum, or any related accountabilities. The main ideas and themes are entirely about software engineering practices, tooling, and migration strategies, with no conceptual alignment to the Scrum Master accountability or its responsibilities. The depth of discussion is substantial, but only in the context of technical migration, not Scrum or team effectiveness. The intent is to inform engineers or technical leads about project conversion, not to address Scrum Master concerns. The audience is technical practitioners, which only partially overlaps with Scrum Masters, but the content is not targeted at them. The signal-to-noise ratio is high for its intended topic, but that topic is not relevant to the Scrum Master category. No penalties were applied, as the content is not outdated or critical of Scrum. The extremely low confidence score reflects the complete lack of relevance to the Scrum Master category.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "2mdv7QE2nIt",
    "category": "System Configuration",
    "calculated_at": "2025-05-07T14:16:49",
    "ai_confidence": 87.6,
    "ai_mentions": 7.2,
    "ai_alignment": 9.3,
    "ai_depth": 8.8,
    "ai_intent": 8.7,
    "ai_audience": 8.2,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 88.0,
    "reasoning": "The content is a detailed, practical guide to upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong focus on project structure, build configuration, and integration with modern tooling. Direct mentions of 'configuration' are present but not dominant; however, the conceptual alignment is very high, as the entire process revolves around system setup, integration, and ongoing maintainability—core aspects of system configuration. The depth is substantial, with step-by-step instructions, tool recommendations, troubleshooting, and best practices for both class libraries and web apps. The intent is clearly to inform and support practitioners in configuring and modernising their systems. The audience is technical (developers, DevOps, system integrators), matching the category. The signal-to-noise ratio is high, with minimal tangential content. No penalties are applied, as the content is current, practical, and not critical or satirical. The final confidence score reflects strong alignment and depth, with slightly lower marks for direct mentions and signal due to some focus on migration rather than pure configuration.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the configuration category. It offers in-depth, practical guidance on modernising .NET projects, focusing on system setup, integration, and maintainability—key aspects of configuration. While migration is a theme, the advice directly supports configuring systems, making it highly relevant for technical audiences seeking actionable configuration insights."
  },
  "Continuous Improvement": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-07T14:16:57",
    "ai_confidence": 41.35,
    "ai_mentions": 0.6,
    "ai_alignment": 5.7,
    "ai_depth": 5.9,
    "ai_intent": 5.2,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct or explicit mentions of 'Continuous Improvement' or its synonyms. The main conceptual alignment comes from the underlying motivation: modernising build systems, improving maintainability, and preparing for future changes, which are tangentially related to continuous improvement principles. The depth of discussion is strong regarding technical migration steps, but it does not explore continuous improvement as a process, philosophy, or organisational practice. The intent is to inform and guide practitioners on technical upgrades, not to foster a culture of experimentation, learning, or incremental process improvement. The audience (developers, technical leads) overlaps with those interested in continuous improvement, but the focus is on technical migration, not on business agility or empirical adaptation. The signal-to-noise ratio is high for technical migration, but low for continuous improvement relevance. No penalties were applied, as the content is current and does not contradict the category. Overall, the confidence score is low, reflecting that while the content supports better engineering practices, it does not directly or deeply address continuous improvement as defined.",
    "level": "Tertiary"
  },
  "Forecasting": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Forecasting",
    "calculated_at": "2025-05-07T14:17:02",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 1.0,
    "ai_audience": 4.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of forecasting, Agile, Scrum, or related empirical planning practices. The main themes are project modernisation, build tooling, and migration strategies, which do not conceptually align with the Forecasting category. There is no discussion of delivery prediction, risk management, value optimisation, or the use of metrics for planning. The depth of discussion is substantial, but entirely about technical migration, not forecasting. The intent is to inform engineers about upgrade processes, not to support or discuss forecasting methodologies. The audience (developers/engineers) could overlap with those interested in forecasting, but the content is not targeted at Agile practitioners or those seeking forecasting advice. The signal-to-noise ratio is low for the Forecasting category, as nearly all content is off-topic. No penalties were applied, as the content is current and not critical or satirical. The final confidence score is very low, reflecting the lack of relevance to the Forecasting category.",
    "level": "Ignored"
  },
  "Product Owner": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Owner",
    "calculated_at": "2025-05-07T14:17:14",
    "ai_confidence": 2.7,
    "ai_mentions": 0.0,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.5,
    "ai_audience": 3.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. There are no direct mentions of the Product Owner role or accountability, nor any reference to Scrum, Agile, or product value maximisation. The main themes are engineering practices, build tooling, and migration strategies, which are not conceptually aligned with the Product Owner category. The depth of discussion is substantial but entirely technical, not related to product ownership, prioritisation, or stakeholder management. The intent is to inform developers and technical leads about migration steps, not to address Product Owner responsibilities. The audience is technical practitioners, not Product Owners or those interested in accountability within Scrum. The signal-to-noise ratio is high for its intended technical topic, but almost entirely irrelevant to the Product Owner category. No penalties were applied as the content is not outdated or satirical, but the confidence score is very low due to the lack of alignment with the Product Owner category.",
    "level": "Ignored"
  },
  "Practice": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Practice",
    "calculated_at": "2025-05-10T12:56:17",
    "ai_confidence": 67.6,
    "ai_mentions": 2.7,
    "ai_alignment": 7.8,
    "ai_depth": 7.2,
    "ai_intent": 7.0,
    "ai_audience": 8.2,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content provides actionable, step-by-step guidance for converting legacy .NET and ASP.NET MVC projects to SDK-style, including specific commands, configuration changes, and troubleshooting tips. It focuses on repeatable engineering techniques (e.g., using try-convert, MSBuild SDKs, and CI integration) that improve maintainability and future readiness. While it doesn't directly mention canonical 'Practice' terms like TDD or retrospectives, it aligns with the category by promoting consistent, effective technical habits. The depth is strong, with detailed breakdowns for both class libraries and web apps, but the focus is more on technical migration than on team-wide practices or process rituals. The audience is technical practitioners, and the content is highly relevant, though not all of it is strictly about 'Practice' as defined (some is about tooling and migration specifics). No penalties are applied as the advice is current and constructive.",
    "reasoning_summery": null,
    "level": "Secondary"
  },
  "Philosophy": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Philosophy",
    "calculated_at": "2025-05-10T12:56:22",
    "ai_confidence": 13.85,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.1,
    "ai_intent": 2.0,
    "ai_audience": 5.1,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a detailed, practical guide for converting legacy .NET and ASP.NET MVC projects to SDK-style. It focuses on technical steps, tools, and troubleshooting, with no explicit or implicit discussion of philosophical foundations, values, or cultural aspects. There are no direct mentions of philosophy or its key topics. The intent is procedural and technical, targeting practitioners seeking implementation guidance, not those interested in the 'why' or foundational beliefs behind methodologies. The audience is technical, and the content is highly focused on 'how-to' instructions, with minimal conceptual alignment to the Philosophy category.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Capability": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Capability",
    "calculated_at": "2025-05-10T12:56:29",
    "ai_confidence": 38.25,
    "ai_mentions": 1.2,
    "ai_alignment": 4.7,
    "ai_depth": 4.3,
    "ai_intent": 4.5,
    "ai_audience": 7.1,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content focuses on technical migration from legacy .NET/ASP.NET MVC projects to SDK-style, emphasising tools, techniques, and practical steps. While it references 'capabilities' in passing and discusses future readiness, the main thrust is on project conversion mechanics, not on enduring organisational competencies or systemic capability development. There is some conceptual overlap (e.g., maintainability, future-proofing), but the depth and intent are technical and tactical, not strategic or capability-centric. The audience is technical practitioners, and the content is focused, but the alignment with the Capability category is limited.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Principle": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Principle",
    "calculated_at": "2025-05-10T12:56:38",
    "ai_confidence": 23.7,
    "ai_mentions": 0.6,
    "ai_alignment": 2.2,
    "ai_depth": 2.7,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style. It provides practical steps, tooling advice, and troubleshooting tips. While it references concepts like maintainability, future readiness, and pragmatic decision-making, these are not framed as actionable principles guiding team behaviour or decision-making. There is no explicit or in-depth discussion of Agile, Lean, or DevOps principles, nor are foundational beliefs or guiding rules articulated. The main intent is technical enablement, not principle-based guidance. The audience is technical practitioners, which aligns, but the content is not principle-focused.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Framework": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Framework",
    "calculated_at": "2025-05-10T12:56:43",
    "ai_confidence": 23.85,
    "ai_mentions": 1.2,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.0,
    "ai_audience": 7.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on technical migration of legacy .NET and ASP.NET MVC projects to SDK-style project files, with detailed steps, tools, and troubleshooting. While it references modern engineering practices and CI/CD, it does not discuss structured methodologies, frameworks (like Scrum, Kanban, SAFe), or their adaptation. The main themes are tooling, project structure, and build optimisation, not frameworks. Audience and signal are higher due to technical depth, but direct relevance to 'Framework' is low.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Model": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Model",
    "calculated_at": "2025-05-10T12:56:50",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style project files. It discusses practical steps, tools, and troubleshooting for modernising build systems and project structures. There is no direct mention or discussion of conceptual models, frameworks, or representations as defined in the 'Model' category. The main intent is technical enablement, not systems thinking or model-based analysis. While the audience (technical practitioners) overlaps with those interested in models, the content itself is not aligned with the category's core meaning. The signal-to-noise ratio is high due to focused, actionable advice, but this is not relevant to the 'Model' classification.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Observability": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Observability",
    "calculated_at": "2025-05-10T12:56:56",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, discussing build systems, project file formats, and CI/CD integration. While it mentions modern engineering practices and tools, it does not address observability concepts such as metrics, logs, traces, or system state insights. There are no direct references to observability, nor does the content explore its principles, tools, or impact on team performance. The audience is technical, but the material is not aligned with observability as defined.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Accountability": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Accountability",
    "calculated_at": "2025-05-10T12:57:00",
    "ai_confidence": 13.7,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 6.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide focused on upgrading .NET and ASP.NET MVC projects to SDK-style. It discusses tooling, migration steps, and practical tips for modernising legacy codebases. There are no direct or indirect references to accountability as a structural mechanism, outcome ownership, or role-based accountabilities. The main themes are technical migration, not organisational design or performance alignment. The audience is technical practitioners, which partially aligns, but the content is not about accountability in any explicit or conceptual sense.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Strategy": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Strategy",
    "calculated_at": "2025-05-10T12:57:07",
    "ai_confidence": 38.7,
    "ai_mentions": 1.2,
    "ai_alignment": 4.6,
    "ai_depth": 4.9,
    "ai_intent": 4.2,
    "ai_audience": 6.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content is a detailed technical guide for converting legacy .NET and ASP.NET MVC projects to SDK-style, focusing on practical steps, tools, and troubleshooting. While it references 'future readiness' and 'pragmatic calls', the discussion is operational and tactical, not strategic. There is little explicit mention of strategy, and the main themes are about technical migration, not high-level organisational alignment or strategic planning. The audience is technical practitioners, not strategists. The content is focused and relevant for its purpose, but does not deeply explore strategic alignment, decision-making frameworks, or leadership direction.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Discipline": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Discipline",
    "calculated_at": "2025-05-10T12:57:13",
    "ai_confidence": 32.45,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.6,
    "ai_intent": 3.9,
    "ai_audience": 9.1,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content is a detailed technical guide on converting legacy .NET and ASP.NET MVC projects to SDK-style. While it briefly mentions that converting web apps 'takes discipline, skill, and a willingness to dive into the details,' this is a colloquial use of 'discipline' rather than a discussion of the field as defined. The main focus is on practical steps, tools, and troubleshooting, not on the systemic application, principles, or evolution of a professional discipline. There is no exploration of governance, codified knowledge, or the maturation of fields like Agile, DevOps, or Lean. The audience is technical practitioners, which aligns, but the content is almost entirely about techniques and tooling, not the discipline as a structured field. Thus, confidence is low.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Artifact": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Artifact",
    "calculated_at": "2025-05-10T12:57:25",
    "ai_confidence": 23.85,
    "ai_mentions": 1.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on converting legacy .NET and ASP.NET MVC projects to SDK-style, emphasising project file formats, build configuration, and modern tooling. While it discusses tangible constructs (project files, build props), these are not explored as 'artifacts' in the Agile/Scrum/Lean sense. There is no mention of artifacts as formal representations of work, nor discussion of their role in transparency, empirical control, or evidence-based decision-making. The main audience is technical practitioners, and the content is highly relevant to them, but the alignment with the 'Artifact' category is weak, as the focus is on technical migration and tooling rather than the structure, purpose, or management of Agile artifacts.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Tool": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Tool",
    "calculated_at": "2025-05-10T12:57:30",
    "ai_confidence": 94.7,
    "ai_mentions": 8.7,
    "ai_alignment": 9.8,
    "ai_depth": 9.6,
    "ai_intent": 9.2,
    "ai_audience": 9.0,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 95.0,
    "reasoning": "The content is a comprehensive, practical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with a strong emphasis on modern tooling, build systems, and integration with CI/CD. It directly discusses tools like Azure DevOps Migration Tools, .NET Upgrade Assistant, try-convert, MSBuild SDKs, and Visual Studio features, providing step-by-step instructions, code samples, and troubleshooting tips. The main themes are tool selection, implementation, and workflow improvement in Agile/DevOps contexts. The audience is technical practitioners, and the content is highly focused, with minimal off-topic material. No penalties were applied as the content is current, constructive, and fully aligned with the category definition.",
    "reasoning_summery": null,
    "level": "Primary"
  },
  "Method": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Method",
    "calculated_at": "2025-05-10T12:57:36",
    "ai_confidence": 67.85,
    "ai_mentions": 2.7,
    "ai_alignment": 7.8,
    "ai_depth": 7.2,
    "ai_intent": 7.0,
    "ai_audience": 8.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content provides a detailed, step-by-step guide for converting legacy .NET and ASP.NET MVC projects to SDK-style, including both automated and manual procedures. It covers specific actions, tools, and troubleshooting, aligning with the 'Method' category's focus on structured procedures. However, the primary emphasis is on technical migration steps and tooling rather than on Agile, Lean, or DevOps methods. While the content is methodical and targets practitioners, it does not directly discuss methods as defined in the category (e.g., Scrum, Kanban, Lean). There are few explicit mentions of 'method' or related terminology, and the discussion, though deep, is more about technical upgrade processes than about procedural methods in a broader sense.",
    "reasoning_summery": null,
    "level": "Secondary"
  },
  "Tenet": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Tenet",
    "calculated_at": "2025-05-10T12:57:42",
    "ai_confidence": 23.45,
    "ai_mentions": 0.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.2,
    "ai_audience": 7.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is a technical guide focused on upgrading legacy .NET and ASP.NET MVC projects to SDK-style, with practical steps and recommendations. While it offers actionable advice and prescriptive practices, these are not framed as organisational tenets or guiding doctrines. There is no explicit or implicit discussion of tenets as defined (e.g., 'flow efficiency', 'decentralised decision-making', or 'continuous improvement' as a cultural norm). The main intent is technical enablement, not the articulation or application of tenets in Agile, Lean, or DevOps contexts. The audience is technical practitioners, which aligns somewhat, but the content lacks conceptual alignment and depth regarding tenets.",
    "reasoning_summery": null,
    "level": "Ignored"
  },
  "Ethos": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Ethos",
    "calculated_at": "2025-05-13T13:58:10",
    "ai_confidence": 18.35,
    "ai_mentions": 0.2,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.5,
    "ai_audience": 5.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is a technical guide focused on converting legacy .NET and ASP.NET MVC projects to SDK-style. It emphasises practical steps, tools, and troubleshooting, with only brief, implicit references to discipline and sustainability (e.g., 'pragmatic reality', 'sustainable setup', 'ready for what’s next'). There is no explicit or in-depth discussion of foundational beliefs, system-level convictions, or ethos as defined. The main purpose is technical enablement, not exploration of ethos. The audience is technical practitioners, which partially aligns, but the content is not focused on ethos as a system foundation.",
    "reasoning_summary": "This content is a hands-on technical migration guide, not an exploration of ethos. While it briefly mentions sustainability and discipline, it lacks explicit or deep discussion of foundational beliefs or system-level convictions, so confidence in the 'Ethos' category is low.",
    "level": "Ignored"
  },
  "First Principal": {
    "resourceId": "2mdv7QE2nIt",
    "category": "First Principal",
    "calculated_at": "2025-05-13T13:58:15",
    "ai_confidence": 7.2,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.0,
    "ai_intent": 1.0,
    "ai_audience": 2.0,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is a technical guide for upgrading legacy .NET and ASP.NET MVC projects to SDK-style, focusing on practical steps, tools, and troubleshooting. It does not mention or discuss first principles, nor does it frame any recommendations as immutable, foundational constraints. The advice is context-dependent and pragmatic, not rooted in Lean, Agile, Scrum, or DevOps first principles. The audience is technical practitioners, but the content is not aligned with the category's definition.",
    "reasoning_summary": "This guide is a practical, context-specific tutorial for modernising .NET projects. It doesn't discuss or apply first principles, nor does it frame its advice as foundational or immutable. The content is technical and relevant for practitioners, but not a fit for the 'First Principal' category.",
    "level": "Ignored"
  },
  "Customer Focus": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Customer Focus",
    "calculated_at": "2025-05-13T13:58:26",
    "ai_confidence": 13.85,
    "ai_mentions": 1.2,
    "ai_alignment": 2.1,
    "ai_depth": 2.3,
    "ai_intent": 2.0,
    "ai_audience": 3.2,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a technical guide for upgrading legacy .NET and ASP.NET MVC projects to SDK-style, focusing on engineering benefits like maintainability, modern tooling, and future readiness. While it references working with a customer and improving their engineering system, it does not explicitly discuss defining, measuring, or prioritising customer value, nor does it address feedback loops, customer outcomes, or evidence-based alignment with customer needs. The main audience is technical practitioners, but the focus is on internal process improvement rather than customer-centric delivery. There are no outdated practices or contradictory tones, so no penalties are applied. The low confidence score reflects the lack of direct or substantive alignment with the Customer Focus category.",
    "reasoning_summary": "This content is a technical migration guide focused on engineering improvements, not on defining or delivering customer value. It lacks discussion of customer outcomes, feedback, or evidence-based prioritisation, so it only weakly fits the Customer Focus category.",
    "level": "Ignored"
  },
  "Definition of Workflow": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Definition of Workflow",
    "calculated_at": "2025-05-18T20:53:55",
    "ai_confidence": 2.3,
    "ai_mentions": 0.2,
    "ai_alignment": 2.0,
    "ai_depth": 2.1,
    "ai_intent": 2.5,
    "ai_audience": 3.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 2.0,
    "reasoning": "The content focuses on technical steps for migrating legacy .NET and ASP.NET MVC projects to SDK-style, covering tooling, project file changes, and debugging. There is no explicit mention or discussion of the Definition of Workflow as per Kanban or agile contexts. The main ideas are about project structure, build systems, and modernisation, not about workflow policies, WIP limits, or process visibility. The audience is technical, but the content is not aligned with the category's scope.",
    "reasoning_summary": "This content is about upgrading .NET projects, not defining or discussing workflow in a Kanban or agile sense. It lacks references to workflow policies, WIP limits, or process improvement models, so it does not fit the Definition of Workflow category.",
    "level": "Ignored"
  },
  "Objective Key Results": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Objective Key Results",
    "calculated_at": "2025-06-03T12:23:26",
    "ai_confidence": 0.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.1,
    "ai_depth": 0.1,
    "ai_intent": 0.1,
    "ai_audience": 2.5,
    "ai_signal": 0.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 0.0,
    "reasoning": "The provided content focuses entirely on the technical process of upgrading .NET framework and ASP.NET MVC projects to SDK-style projects. It does not contain any explicit, implicit, or tangential references to OKRs (Objectives and Key Results), nor does it engage with goal-setting, measurable outcomes, strategic alignment, or transparency as defined by John Doerr's foundational OKR principles. It specifically addresses software engineering practices, legacy upgrade strategies, tooling, debugging, project file formats, and CI/CD integrations without any conceptual or practical alignment with Objective Key Results frameworks, practices, or models. Therefore, all relevant OKR-focused scoring dimensions (mentions, alignment, depth, and intent) receive minimal scores, while the audience alignment score receives a slightly higher score as the content could potentially be relevant to technical audiences who might also be interested in OKRs. No penalties were necessary because the content is neither outdated from an OKR standpoint nor actively contradictory or undermining.",
    "reasoning_summary": "The content exclusively covers technical migration strategies for .NET projects to SDK-style and has no relevance or alignment with Objective Key Results (OKRs).",
    "level": "Ignored"
  },
  "Product Developer": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Product Developer",
    "calculated_at": "2025-06-23T09:01:37",
    "ai_confidence": 12.8,
    "ai_mentions": 0.2,
    "ai_alignment": 1.9,
    "ai_depth": 2.3,
    "ai_intent": 2.5,
    "ai_audience": 2.2,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is focused on technical migration of .NET and ASP.NET MVC projects to SDK-style projects—highlighting tools, migration steps, and troubleshooting. There is no direct mention or thorough conceptual coverage of the 'Product Developer' role or its associated accountabilities (roles, behaviors, responsibilities in a Scrum/product development context). The intent is not to discuss product developer role structure or cross-functional skills, but to provide practical guidance for technical migration. The target audience appears to be technical leads or engineers handling modernizations rather than those interested specifically in the Product Developer accountability. While the topic is relevant in the broader product engineering context, it fails to address the accountability, mindset, or behaviors of Product Developers as defined in modern frameworks. No penalties warranted as the content is not outdated or undermining.",
    "reasoning_summary": "This content provides technical migration guidance for .NET projects and is not focused on Product Developer accountabilities, roles, or behaviors. Its relevance to the 'Product Developer' category is tangential and minimal.",
    "level": "Ignored"
  },
  "Collective Intelligence": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Collective Intelligence",
    "calculated_at": "2025-06-23T09:01:33",
    "ai_confidence": 6.235,
    "ai_mentions": 0.1,
    "ai_alignment": 0.4,
    "ai_depth": 0.3,
    "ai_intent": 0.4,
    "ai_audience": 2.2,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content focuses on technical practices for upgrading legacy .NET and ASP.NET MVC projects to SDK-style projects. There are no explicit or implicit references to Collective Intelligence as defined—no mention of human-AI collaboration, partnerships, or distributed cognition. The audience is technical, matching part of the possible category audience, but the substance and intent center on code conversion and tooling rather than collaborative intelligence between humans and AI. All dimension scores are low due to the content's nearly complete misalignment with the category.",
    "reasoning_summary": "This resource discusses technical steps for migrating .NET projects and improving build tooling but contains no content about human-AI collaboration, collective intelligence, or related topics, making it almost entirely unrelated to the category.",
    "level": "Ignored"
  },
  "Agentic Engineering": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agentic Engineering",
    "calculated_at": "2025-07-23T12:05:10",
    "ai_confidence": 19.35,
    "ai_mentions": 0.4,
    "ai_alignment": 2.1,
    "ai_depth": 2.6,
    "ai_intent": 2.3,
    "ai_audience": 5.1,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content is a pragmatic, step-by-step guide for upgrading legacy .NET projects to SDK-style formats. While it discusses modernizing build pipelines and tooling—which enables future engineering practices—it does not explicitly or conceptually address agentic engineering themes such as maximizing developer or AI agency, decentralized decision-making, or ethical/feedback-driven autonomy. Its focus is almost entirely on technical migration steps rather than philosophical or systemic engineering practices, with no mention of agency, feedback loops, or cross-domain collaboration between humans and AI. The content targets practitioners (developers/engineers) but stays away from deeper conceptual or purpose-driven alignment with Agentic Engineering as defined. Though modernizing builds can be a small enabler for agentic practices, this is not highlighted, nor is it the content’s main purpose.",
    "reasoning_summary": "This content primarily provides technical instructions for upgrading .NET projects, focusing on modernization for maintenance and tooling. It does not engage with the principles or themes of Agentic Engineering, such as promoting developer or AI agency, feedback-driven design, or decentralized decision-making.",
    "level": "Ignored"
  },
  "Agentic Software Delivery": {
    "resourceId": "2mdv7QE2nIt",
    "category": "Agentic Software Delivery",
    "calculated_at": "2025-08-07T06:10:16",
    "ai_confidence": 21.34,
    "ai_mentions": 0.3,
    "ai_alignment": 2.7,
    "ai_depth": 2.3,
    "ai_intent": 1.9,
    "ai_audience": 6.1,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content thoroughly covers the migration of legacy .NET and ASP.NET MVC projects to SDK-style, with focus on modernisation, CI/CD improvement, and engineering quality. However, there is no explicit or implicit mention of autonomous AI agents, agentic intelligence, contextual AI integration, or agency in delivery processes. The themes are limited to structural codebase upgrades and tooling best-practices, not the agentic delivery strategies as defined. There's moderate alignment in technical audience and modern engineering practices, but the key Agentic Software Delivery concepts—such as autonomous agents, contextual intelligence, or human-agent collaboration—are missing.",
    "reasoning_summary": "Fits only peripherally: focuses on engineering modernization, not on autonomous AI agents, agency, or agentic delivery principles. No signals of agentic delivery concepts; thus, low confidence this content fits the category.",
    "level": "Ignored"
  }
}